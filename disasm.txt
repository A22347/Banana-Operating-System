
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 14 fc 01 c0       	mov    eax,0xc001fc14
c0000025:	3d 14 fc 01 c0       	cmp    eax,0xc001fc14
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 14 fc 01 c0       	push   0xc001fc14
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 14 fc 01 c0       	mov    eax,0xc001fc14
c0000051:	2d 14 fc 01 c0       	sub    eax,0xc001fc14
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 14 fc 01 c0       	push   0xc001fc14
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb b8 ce 01 c0       	mov    ebx,0xc001ceb8
c0000097:	81 eb b4 ce 01 c0    	sub    ebx,0xc001ceb4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b4 ce 01 c0       	mov    esi,0xc001ceb4
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 14 fc 01 c0       	push   0xc001fc14
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 14 fc 01 c0       	push   0xc001fc14
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 48 2e 01 00       	call   c00130f8 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 2c a1 00 00       	call   c000a3f4 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 26 2e 01 00       	call   c00130f8 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 2f 33 01 00       	call   c0013620 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 7e 39 01 00       	call   c0013c78 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 04 ff 00 00       	jmp    c0010286 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 c0 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3140],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 c0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3140],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 c0 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3140],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 c0 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3140],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 c0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3140],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 c4 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe303c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 1e 53 01 00       	jmp    c0017008 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 4c 53 01 00       	jmp    c001704c <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 71 53 01 00       	jmp    c0017090 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 20 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2ee0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 20 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2ee0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 18 f1 01 c0       	mov    edx,0xc001f118
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba dc cf 01 c0       	mov    edx,0xc001cfdc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 e2 cf 01 c0       	mov    eax,0xc001cfe2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad a0 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f60]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 eb cf 01 c0       	mov    eax,0xc001cfeb
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 20 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2ee0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 70 d0 01 c0       	mov    eax,0xc001d070
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 60 d0 01 c0       	mov    ebx,0xc001d060
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 40 d0 01 c0       	mov    edx,0xc001d040
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 50 d0 01 c0       	mov    edx,0xc001d050
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba f2 cf 01 c0       	mov    edx,0xc001cff2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba fe cf 01 c0       	mov    edx,0xc001cffe
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 12 d0 01 c0       	mov    edx,0xc001d012
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 40 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d440
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 40 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d440
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 40 d2 01 c0       	mov    eax,0xc001d240
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 80 d1 01 c0       	mov    eax,0xc001d180
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 40 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ec0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 65 19 01 00       	call   c00178e4 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 40 d5 01 c0       	push   0xc001d540
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 40 d5 01 c0       	push   0xc001d540
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 43 d5 01 c0       	push   0xc001d543
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 4a d5 01 c0       	push   0xc001d54a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 9e 51 00 00       	call   c000bb76 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 51 d5 01 c0       	push   0xc001d551
c0006a09:	e8 15 92 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 6a d5 01 c0       	push   0xc001d56a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 12 ca 00 00       	call   c0013448 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 25 cc 00 00       	call   c0013670 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 c4 40 01 c0       	push   0xc00140c4
c0006a5a:	52                   	push   edx
c0006a5b:	e8 10 cc 00 00       	call   c0013670 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 68 d6 01 c0       	push   0xc001d668
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 aa 91 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006a79:	e8 25 da 00 00       	call   c00144a3 <Vm::initialise8086()>
c0006a7e:	e8 37 3f 00 00       	call   c000a9ba <Fs::initVFS()>
c0006a83:	c7 04 24 77 d5 01 c0 	mov    DWORD PTR [esp],0xc001d577
c0006a8a:	e8 94 91 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 68 d6 01 c0       	push   0xc001d668
c0006aae:	e8 70 91 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006ab3:	e8 46 96 00 00       	call   c00100fe <Krnl::loadSystemEnv()>
c0006ab8:	e8 a3 98 00 00       	call   c0010360 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 91 d5 01 c0       	push   0xc001d591
c0006ac7:	68 9a d5 01 c0       	push   0xc001d59a
c0006acc:	e8 0d af 00 00       	call   c00119de <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 ef 49 00 00       	call   c000b4c8 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 8c d6 01 c0 	mov    DWORD PTR [esp],0xc001d68c
c0006ae0:	e8 3e 91 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 7d 50 00 00       	call   c000bb74 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 a2 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5a2
c0006afe:	e8 20 91 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 b3 d5 01 c0       	push   0xc001d5b3
c0006b12:	e8 4e c3 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 76 c5 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 5f cf 00 00       	call   c0013a8c <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 cf d5 01 c0       	push   0xc001d5cf
c0006b41:	50                   	push   eax
c0006b42:	e8 a9 50 00 00       	call   c000bbf0 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba d8 d6 01 c0       	mov    edx,0xc001d6d8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 85 52 01 00       	call   c001beb6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 e4 84 00 00       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 bd 84 00 00       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 9b 84 00 00       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 79 84 00 00       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 87 83 00 00       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 62 83 00 00       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 ef 50 01 00       	call   c001be70 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 ec 4d 01 00       	call   c001bb90 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 7e 83 00 00       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 d8 d5 01 c0       	push   0xc001d5d8
c0006e14:	e8 82 94 00 00       	call   c001029b <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 de d5 01 c0       	push   0xc001d5de
c0006e4c:	e8 4a 94 00 00       	call   c001029b <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 2f 7d 00 00       	jmp    c000ebc8 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 e4 d5 01 c0       	push   0xc001d5e4
c0006eed:	0f 94 05 80 f8 01 c0 	sete   BYTE PTR ds:0xc001f880
c0006ef4:	e8 2a 8d 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 51 78 00 00       	call   c000e760 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 3a 4b 00 00       	call   c000ba58 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 fc d5 01 c0 	mov    DWORD PTR [esp],0xc001d5fc
c0006f37:	e8 e7 8c 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 b6 82 00 00       	call   c000f208 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 f7 4a 00 00       	call   c000ba58 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 ac d6 01 c0       	push   0xc001d6ac
c0006f7e:	e8 a0 8c 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006f83:	e8 52 e6 00 00       	call   c00155da <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 16 d6 01 c0 	mov    DWORD PTR [esp],0xc001d616
c0006f8f:	e8 8f 8c 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 e8 c7 00 00       	call   c0013788 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 31 d6 01 c0       	push   0xc001d631
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 28 36 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 42 d6 01 c0       	push   0xc001d642
c000700e:	e8 88 92 00 00       	call   c001029b <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 4f d6 01 c0       	push   0xc001d64f
c0007023:	e8 73 92 00 00       	call   c001029b <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 59 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d659
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 5c 92 00 00       	jmp    c001029b <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 8f e0 00 00       	call   c00152b4 <HalSystemIdle()>
c0007225:	e8 48 52 01 00       	call   c001c472 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 20 bc 01 c0       	push   0xc001bc20
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 30 bc 01 c0       	push   0xc001bc30
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 3a bc 01 c0       	push   0xc001bc3a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 44 bc 01 c0       	push   0xc001bc44
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 4e bc 01 c0       	push   0xc001bc4e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 58 bc 01 c0       	push   0xc001bc58
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 62 bc 01 c0       	push   0xc001bc62
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 6c bc 01 c0       	push   0xc001bc6c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 76 bc 01 c0       	push   0xc001bc76
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 7e bc 01 c0       	push   0xc001bc7e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 88 bc 01 c0       	push   0xc001bc88
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 90 bc 01 c0       	push   0xc001bc90
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 98 bc 01 c0       	push   0xc001bc98
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 a0 bc 01 c0       	push   0xc001bca0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 a8 bc 01 c0       	push   0xc001bca8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 b0 bc 01 c0       	push   0xc001bcb0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 ba bc 01 c0       	push   0xc001bcba
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 c4 bc 01 c0       	push   0xc001bcc4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 ce bc 01 c0       	push   0xc001bcce
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 68 bd 01 c0       	push   0xc001bd68
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 6f bd 01 c0       	push   0xc001bd6f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 5a bd 01 c0       	push   0xc001bd5a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 61 bd 01 c0       	push   0xc001bd61
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 d8 bc 01 c0       	push   0xc001bcd8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 e2 bc 01 c0       	push   0xc001bce2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 ec bc 01 c0       	push   0xc001bcec
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 f6 bc 01 c0       	push   0xc001bcf6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 00 bd 01 c0       	push   0xc001bd00
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 0a bd 01 c0       	push   0xc001bd0a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 14 bd 01 c0       	push   0xc001bd14
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 1e bd 01 c0       	push   0xc001bd1e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 28 bd 01 c0       	push   0xc001bd28
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 32 bd 01 c0       	push   0xc001bd32
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 3c bd 01 c0       	push   0xc001bd3c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 46 bd 01 c0       	push   0xc001bd46
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 50 bd 01 c0       	push   0xc001bd50
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 01 be 01 c0       	push   0xc001be01
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 0b be 01 c0       	push   0xc001be0b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 15 be 01 c0       	push   0xc001be15
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 1f be 01 c0       	push   0xc001be1f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 29 be 01 c0       	push   0xc001be29
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 33 be 01 c0       	push   0xc001be33
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 3d be 01 c0       	push   0xc001be3d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 47 be 01 c0       	push   0xc001be47
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 e3 23 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 76 bc 01 c0       	push   0xc001bc76
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 68 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f868
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 68 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f868
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 1e 22 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 68 f8 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f868,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 68 f8 01 c0       	mov    eax,ds:0xc001f868
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 fc d6 01 c0       	push   0xc001d6fc
c000770e:	e8 06 2f 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 2c d7 01 c0       	push   0xc001d72c
c000772d:	e8 69 8b 00 00       	call   c001029b <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 31 d7 01 c0       	push   0xc001d731
c0007743:	e8 53 8b 00 00       	call   c001029b <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 76 22 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 02 1f 00 00       	call   c000969e <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 38 d7 01 c0       	push   0xc001d738
c0007862:	e8 b2 2d 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 49 83 00 00       	call   c000fbb5 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 25 24 00 00       	call   c0009cb8 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 6c 4b 01 00       	call   c001c40a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 c5 1e 00 00       	call   c0009794 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 50 d7 01 c0       	push   0xc001d750
c000792c:	e8 6a 89 00 00       	call   c001029b <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 50 d7 01 c0       	push   0xc001d750
c0007993:	e8 03 89 00 00       	call   c001029b <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 6c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f86c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 6c f8 01 c0    	add    eax,DWORD PTR ds:0xc001f86c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 6c f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f86c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 f5 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7f5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 18 88 00 00       	jmp    c001029b <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 24 28 00 00       	call   c000a314 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 78 d7 01 c0       	push   0xc001d778
c0007aff:	e8 97 87 00 00       	call   c001029b <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 0b d8 01 c0       	push   0xc001d80b
c0007c18:	e8 fc 29 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 a8 d7 01 c0       	push   0xc001d7a8
c0007ca4:	e8 70 29 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 cc d7 01 c0       	push   0xc001d7cc
c0007d40:	e8 d4 28 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 31 d8 01 c0       	push   0xc001d831
c0007d76:	e8 9e 28 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 23 d8 01 c0       	push   0xc001d823
c0007de5:	e8 b1 84 00 00       	call   c001029b <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 90 d8 01 c0       	mov    edx,0xc001d890
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 29 26 00 00       	call   c000a523 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 4d d8 01 c0       	push   0xc001d84d
c0007fa7:	e8 ef 82 00 00       	call   c001029b <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 9b b8 00 00       	call   c0013890 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 63 42 01 00       	call   c001c2f0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 6a d8 01 c0       	push   0xc001d86a
c00080a2:	e8 f4 81 00 00       	call   c001029b <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 90 d8 01 c0       	mov    edx,0xc001d890
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 24 d9 01 c0       	mov    edx,0xc001d924
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 b2 23 00 00       	call   c000a523 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 ec 46 00 00       	call   c000c878 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 ba e2 00 00       	call   c001646c <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d a0 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0760]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d a0 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0760]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 58 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08a8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 30 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08d0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 dd df 00 00       	call   c00162f8 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 38 e0 00 00       	jmp    c0016400 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 a4 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d8a4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 87 7e 00 00       	jmp    c001029b <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 00 2f 00 00       	jmp    c000b46f <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be b2 d8 01 c0       	mov    esi,0xc001d8b2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 4a db 00 00       	call   c0016400 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 24 d9 01 c0       	mov    edx,0xc001d924
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 48 0f 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 c3 d8 01 c0       	push   0xc001d8c3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 c9 d8 01 c0       	push   0xc001d8c9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 cf d8 01 c0       	push   0xc001d8cf
c0008b78:	e8 1e 77 00 00       	call   c001029b <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba ec d9 01 c0       	mov    edx,0xc001d9ec
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 e0 f8 01 c0       	mov    eax,ds:0xc001f8e0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 e0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8e0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 53 36 01 00       	call   c001c4d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 08 da 01 c0       	mov    edx,0xc001da08
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba ec d9 01 c0       	mov    edx,0xc001d9ec
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 57 35 01 00       	call   c001c5ac <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 4b 35 01 00       	call   c001c5b4 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 51 34 01 00       	call   c001c4d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 c4 d9 01 c0       	push   0xc001d9c4
c00090a9:	e8 ed 71 00 00       	call   c001029b <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 47 14 00 00       	call   c000a523 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 08 da 01 c0       	mov    edx,0xc001da08
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 fb 13 00 00       	call   c000a523 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 5a 34 01 00       	call   c001c5ac <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 e7 34 01 00       	call   c001c656 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 a5 32 01 00       	call   c001c496 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 64 f8 01 c0       	push   0xc001f864
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 94 c4 01 c0       	push   0xc001c494
c0009206:	e8 c8 12 00 00       	call   c000a4d3 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 e8 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8e8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d e8 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8e8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d e4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8e4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 e4 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f8e4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d e4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8e4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 1c da 01 c0       	push   0xc001da1c
c00092ff:	e8 97 6f 00 00       	call   c001029b <KePanic(char const*)>
c0009304:	8b 3d e4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8e4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d e4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8e4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 e4 f8 01 c0       	mov    eax,ds:0xc001f8e4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 e4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8e4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 e4 f8 01 c0       	mov    ds:0xc001f8e4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 ec f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f8ec
c00093bf:	03 05 f4 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8f4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d ec f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8ec
c00093d5:	a1 f0 f8 01 c0       	mov    eax,ds:0xc001f8f0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d f0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8f0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 ad db 01 c0       	push   0xc001dbad
c0009419:	e8 7d 6e 00 00       	call   c001029b <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 c4 db 01 c0       	push   0xc001dbc4
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d f0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8f0,ebx
c00094b7:	c6 05 f8 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f8f8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 f4 f8 01 c0       	mov    ds:0xc001f8f4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 ec f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f8ec,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 f0 f8 01 c0       	mov    eax,ds:0xc001f8f0
c00094e9:	f7 35 ec f8 01 c0    	div    DWORD PTR ds:0xc001f8ec
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS(VAS*)>:
c0009500:	83 ec 0c             	sub    esp,0xc
c0009503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	68 3c da 01 c0       	push   0xc001da3c
c0009521:	e8 75 6d 00 00       	call   c001029b <KePanic(char const*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	90                   	nop
c000952a:	83 c4 0c             	add    esp,0xc
c000952d:	c3                   	ret    

c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009532:	89 c2                	mov    edx,eax
c0009534:	c1 e8 0a             	shr    eax,0xa
c0009537:	c1 ea 16             	shr    edx,0x16
c000953a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000953f:	19 c9                	sbb    ecx,ecx
c0009541:	c1 e2 0c             	shl    edx,0xc
c0009544:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954a:	25 fc 0f 00 00       	and    eax,0xffc
c000954f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009556:	01 d0                	add    eax,edx
c0009558:	c3                   	ret    
c0009559:	90                   	nop

c000955a <VAS::getPageTableEntry(unsigned long)>:
c000955a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000955e:	89 ca                	mov    edx,ecx
c0009560:	c1 e9 0a             	shr    ecx,0xa
c0009563:	c1 ea 16             	shr    edx,0x16
c0009566:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000956c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009572:	c1 e0 0c             	shl    eax,0xc
c0009575:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009578:	c3                   	ret    

c0009579 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009579:	57                   	push   edi
c000957a:	56                   	push   esi
c000957b:	be 01 00 00 00       	mov    esi,0x1
c0009580:	53                   	push   ebx
c0009581:	83 ec 10             	sub    esp,0x10
c0009584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009588:	c1 eb 0c             	shr    ebx,0xc
c000958b:	eb 3f                	jmp    c00095cc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000958d:	83 ec 08             	sub    esp,0x8
c0009590:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0009595:	57                   	push   edi
c0009596:	50                   	push   eax
c0009597:	e8 be ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a5:	f6 c4 04             	test   ah,0x4
c00095a8:	75 60                	jne    c000960a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095aa:	80 fa 04             	cmp    dl,0x4
c00095ad:	74 79                	je     c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095af:	80 fa 02             	cmp    dl,0x2
c00095b2:	0f 84 89 00 00 00    	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095b8:	80 fa 03             	cmp    dl,0x3
c00095bb:	0f 84 ae 00 00 00    	je     c000966f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c1:	fe ca                	dec    dl
c00095c3:	0f 84 93 00 00 00    	je     c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095c9:	43                   	inc    ebx
c00095ca:	31 f6                	xor    esi,esi
c00095cc:	53                   	push   ebx
c00095cd:	89 df                	mov    edi,ebx
c00095cf:	e8 8d fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00095d4:	c1 e7 0c             	shl    edi,0xc
c00095d7:	5a                   	pop    edx
c00095d8:	84 c0                	test   al,al
c00095da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095de:	75 ad                	jne    c000958d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 db db 01 c0       	push   0xc001dbdb
c00095e8:	e8 ae 6c 00 00       	call   c001029b <KePanic(char const*)>
c00095ed:	5a                   	pop    edx
c00095ee:	59                   	pop    ecx
c00095ef:	57                   	push   edi
c00095f0:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c00095f6:	57                   	push   edi
c00095f7:	e8 5e ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00095fc:	83 c4 10             	add    esp,0x10
c00095ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009605:	f6 c4 04             	test   ah,0x4
c0009608:	74 bf                	je     c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000960e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	50                   	push   eax
c0009617:	e8 17 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009623:	80 fa 04             	cmp    dl,0x4
c0009626:	75 87                	jne    c00095af <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009628:	89 f0                	mov    eax,esi
c000962a:	84 c0                	test   al,al
c000962c:	75 47                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000962e:	c7 44 24 20 60 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da60
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	5b                   	pop    ebx
c000963a:	5e                   	pop    esi
c000963b:	5f                   	pop    edi
c000963c:	e9 5a 6c 00 00       	jmp    c001029b <KePanic(char const*)>
c0009641:	89 f0                	mov    eax,esi
c0009643:	84 c0                	test   al,al
c0009645:	75 15                	jne    c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	68 f7 db 01 c0       	push   0xc001dbf7
c000964f:	e8 47 6c 00 00       	call   c001029b <KePanic(char const*)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	e9 6d ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	6a 00                	push   0x0
c0009661:	53                   	push   ebx
c0009662:	e8 c5 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	e9 5a ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966f:	89 f0                	mov    eax,esi
c0009671:	84 c0                	test   al,al
c0009673:	75 15                	jne    c000968a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009675:	83 ec 08             	sub    esp,0x8
c0009678:	6a 00                	push   0x0
c000967a:	53                   	push   ebx
c000967b:	e8 ac fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	5b                   	pop    ebx
c0009687:	5e                   	pop    esi
c0009688:	5f                   	pop    edi
c0009689:	c3                   	ret    
c000968a:	c7 44 24 20 13 dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc13
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 fe 6b 00 00       	jmp    c001029b <KePanic(char const*)>
c000969d:	90                   	nop

c000969e <VAS::freeAllocatedPages(unsigned long)>:
c000969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096aa:	74 09                	je     c00096b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b0:	e9 c4 fe ff ff       	jmp    c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00096b5:	c7 44 24 04 84 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da84
c00096bd:	e9 57 0f 00 00       	jmp    c000a619 <Dbg::kprintf(char const*, ...)>

c00096c2 <VAS::virtualToPhysical(unsigned long)>:
c00096c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c6:	50                   	push   eax
c00096c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cb:	52                   	push   edx
c00096cc:	e8 89 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00096d1:	59                   	pop    ecx
c00096d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d4:	5a                   	pop    edx
c00096d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096da:	c3                   	ret    
c00096db:	90                   	nop

c00096dc <VAS::reflagRange(unsigned long, int, int, int)>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	56                   	push   esi
c00096df:	53                   	push   ebx
c00096e0:	83 ec 0c             	sub    esp,0xc
c00096e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00096e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00096eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00096ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00096f3:	85 ff                	test   edi,edi
c00096f5:	7e 33                	jle    c000972a <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c00096f7:	c1 e7 0c             	shl    edi,0xc
c00096fa:	01 ef                	add    edi,ebp
c00096fc:	55                   	push   ebp
c00096fd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0009703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009707:	50                   	push   eax
c0009708:	e8 4d fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000970d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970f:	21 d9                	and    ecx,ebx
c0009711:	09 f1                	or     ecx,esi
c0009713:	89 08                	mov    DWORD PTR [eax],ecx
c0009715:	89 34 24             	mov    DWORD PTR [esp],esi
c0009718:	53                   	push   ebx
c0009719:	68 2d dc 01 c0       	push   0xc001dc2d
c000971e:	e8 f6 0e 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	39 ef                	cmp    edi,ebp
c0009728:	75 d2                	jne    c00096fc <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <VAS::setToWriteCombining(unsigned long, int)>:
c0009732:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009737:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000973d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009744:	75 01                	jne    c0009747 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009746:	c3                   	ret    
c0009747:	83 ec 18             	sub    esp,0x18
c000974a:	68 80 00 00 00       	push   0x80
c000974f:	6a ff                	push   0xffffffff
c0009751:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009755:	50                   	push   eax
c0009756:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000975a:	52                   	push   edx
c000975b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000975f:	51                   	push   ecx
c0009760:	e8 77 ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c0009765:	83 c4 2c             	add    esp,0x2c
c0009768:	c3                   	ret    
c0009769:	90                   	nop

c000976a <VAS::mapOtherVASIn(bool, VAS*)>:
c000976a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000976f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009773:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000977a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000977d:	19 c0                	sbb    eax,eax
c000977f:	83 ca 03             	or     edx,0x3
c0009782:	83 e0 fc             	and    eax,0xfffffffc
c0009785:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000978c:	0f 20 d8             	mov    eax,cr3
c000978f:	0f 22 d8             	mov    cr3,eax
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::~VAS()>:
c0009794:	83 ec 2c             	sub    esp,0x2c
c0009797:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000979f:	fa                   	cli    
c00097a0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097a5:	40                   	inc    eax
c00097a6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097b5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097bf:	6a 01                	push   0x1
c00097c1:	50                   	push   eax
c00097c2:	e8 a3 ff ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00097c7:	83 c4 0c             	add    esp,0xc
c00097ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097d2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097da:	0f 8f d4 00 00 00    	jg     c00098b4 <VAS::~VAS()+0x120>
c00097e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097eb:	c1 e2 02             	shl    edx,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097fa:	83 e0 01             	and    eax,0x1
c00097fd:	0f 84 a8 00 00 00    	je     c00098ab <VAS::~VAS()+0x117>
c0009803:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000980b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009813:	7f 72                	jg     c0009887 <VAS::~VAS()+0xf3>
c0009815:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009819:	c1 e0 0a             	shl    eax,0xa
c000981c:	89 c2                	mov    edx,eax
c000981e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009822:	01 d0                	add    eax,edx
c0009824:	c1 e0 0c             	shl    eax,0xc
c0009827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000982b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009830:	8b 00                	mov    eax,DWORD PTR [eax]
c0009832:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009835:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000983b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000983f:	6a 01                	push   0x1
c0009841:	50                   	push   eax
c0009842:	e8 e7 fc ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009847:	83 c4 0c             	add    esp,0xc
c000984a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000984e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000985c:	25 01 04 00 00       	and    eax,0x401
c0009861:	3d 01 04 00 00       	cmp    eax,0x401
c0009866:	75 19                	jne    c0009881 <VAS::~VAS()+0xed>
c0009868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000986c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009871:	83 ec 0c             	sub    esp,0xc
c0009874:	50                   	push   eax
c0009875:	e8 b9 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000987a:	83 c4 10             	add    esp,0x10
c000987d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009881:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009885:	eb 84                	jmp    c000980b <VAS::~VAS()+0x77>
c0009887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988b:	25 00 04 00 00       	and    eax,0x400
c0009890:	74 19                	je     c00098ab <VAS::~VAS()+0x117>
c0009892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	50                   	push   eax
c000989f:	e8 8f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a4:	83 c4 10             	add    esp,0x10
c00098a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098af:	e9 1e ff ff ff       	jmp    c00097d2 <VAS::~VAS()+0x3e>
c00098b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098bb:	83 ec 0c             	sub    esp,0xc
c00098be:	50                   	push   eax
c00098bf:	e8 b5 fc ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00098c4:	83 c4 10             	add    esp,0x10
c00098c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098ce:	83 ec 0c             	sub    esp,0xc
c00098d1:	50                   	push   eax
c00098d2:	e8 5c e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098d7:	83 c4 10             	add    esp,0x10
c00098da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098e3:	48                   	dec    eax
c00098e4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00098e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098ee:	85 c0                	test   eax,eax
c00098f0:	75 01                	jne    c00098f3 <VAS::~VAS()+0x15f>
c00098f2:	fb                   	sti    
c00098f3:	90                   	nop
c00098f4:	83 c4 2c             	add    esp,0x2c
c00098f7:	c3                   	ret    

c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098f8:	55                   	push   ebp
c00098f9:	57                   	push   edi
c00098fa:	56                   	push   esi
c00098fb:	53                   	push   ebx
c00098fc:	83 ec 1c             	sub    esp,0x1c
c00098ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009903:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009907:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000990d:	77 0b                	ja     c000991a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000990f:	0f 20 d8             	mov    eax,cr3
c0009912:	0f 20 d8             	mov    eax,cr3
c0009915:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009918:	75 47                	jne    c0009961 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000991a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000991e:	09 d8                	or     eax,ebx
c0009920:	a9 ff 0f 00 00       	test   eax,0xfff
c0009925:	75 57                	jne    c000997e <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009927:	89 de                	mov    esi,ebx
c0009929:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000992c:	c1 ee 16             	shr    esi,0x16
c000992f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009936:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000993a:	74 54                	je     c0009990 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000993c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009940:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009946:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000994a:	c1 e6 0c             	shl    esi,0xc
c000994d:	c1 eb 0a             	shr    ebx,0xa
c0009950:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009956:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009959:	83 c4 1c             	add    esp,0x1c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    
c0009961:	83 ec 0c             	sub    esp,0xc
c0009964:	68 a8 da 01 c0       	push   0xc001daa8
c0009969:	e8 ab 0c 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000996e:	83 c4 10             	add    esp,0x10
c0009971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009975:	09 d8                	or     eax,ebx
c0009977:	a9 ff 0f 00 00       	test   eax,0xfff
c000997c:	74 a9                	je     c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000997e:	83 ec 0c             	sub    esp,0xc
c0009981:	68 10 db 01 c0       	push   0xc001db10
c0009986:	e8 10 69 00 00       	call   c001029b <KePanic(char const*)>
c000998b:	83 c4 10             	add    esp,0x10
c000998e:	eb 97                	jmp    c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009994:	e8 fc e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009999:	83 ec 0c             	sub    esp,0xc
c000999c:	89 c5                	mov    ebp,eax
c000999e:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099a8:	6a 01                	push   0x1
c00099aa:	e8 d6 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099b6:	6a 01                	push   0x1
c00099b8:	50                   	push   eax
c00099b9:	55                   	push   ebp
c00099ba:	81 cd 07 04 00 00    	or     ebp,0x407
c00099c0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099c4:	51                   	push   ecx
c00099c5:	e8 28 02 00 00       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ca:	83 c4 1c             	add    esp,0x1c
c00099cd:	68 00 10 00 00       	push   0x1000
c00099d2:	6a 00                	push   0x0
c00099d4:	50                   	push   eax
c00099d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099d9:	e8 f2 6a ff ff       	call   c00004d0 <memset>
c00099de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099e2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099e5:	e8 8f fb ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00099ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099f1:	83 c4 10             	add    esp,0x10
c00099f4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099f7:	e9 40 ff ff ff       	jmp    c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099fc <VAS::allocatePages(int, int)>:
c00099fc:	55                   	push   ebp
c00099fd:	57                   	push   edi
c00099fe:	56                   	push   esi
c00099ff:	53                   	push   ebx
c0009a00:	83 ec 1c             	sub    esp,0x1c
c0009a03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a07:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a12:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a18:	83 e0 01             	and    eax,0x1
c0009a1b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a23:	0f 85 cc 00 00 00    	jne    c0009af5 <VAS::allocatePages(int, int)+0xf9>
c0009a29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a30:	85 c0                	test   eax,eax
c0009a32:	0f 84 a1 00 00 00    	je     c0009ad9 <VAS::allocatePages(int, int)+0xdd>
c0009a38:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a40:	c1 e6 0c             	shl    esi,0xc
c0009a43:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a47:	85 c0                	test   eax,eax
c0009a49:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a4c:	7e 33                	jle    c0009a81 <VAS::allocatePages(int, int)+0x85>
c0009a4e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a56:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a5c:	e8 34 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a61:	55                   	push   ebp
c0009a62:	53                   	push   ebx
c0009a63:	50                   	push   eax
c0009a64:	57                   	push   edi
c0009a65:	e8 8e fe ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a72:	74 03                	je     c0009a77 <VAS::allocatePages(int, int)+0x7b>
c0009a74:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a7d:	39 de                	cmp    esi,ebx
c0009a7f:	75 db                	jne    c0009a5c <VAS::allocatePages(int, int)+0x60>
c0009a81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a86:	75 12                	jne    c0009a9a <VAS::allocatePages(int, int)+0x9e>
c0009a88:	0f 20 d8             	mov    eax,cr3
c0009a8b:	0f 22 d8             	mov    cr3,eax
c0009a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a92:	83 c4 1c             	add    esp,0x1c
c0009a95:	5b                   	pop    ebx
c0009a96:	5e                   	pop    esi
c0009a97:	5f                   	pop    edi
c0009a98:	5d                   	pop    ebp
c0009a99:	c3                   	ret    
c0009a9a:	c1 ee 0a             	shr    esi,0xa
c0009a9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aa1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009aa7:	c1 eb 0a             	shr    ebx,0xa
c0009aaa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ab0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ab6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009abc:	39 c3                	cmp    ebx,eax
c0009abe:	77 ce                	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009ac0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ac3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ac9:	39 d8                	cmp    eax,ebx
c0009acb:	73 f3                	jae    c0009ac0 <VAS::allocatePages(int, int)+0xc4>
c0009acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ad1:	83 c4 1c             	add    esp,0x1c
c0009ad4:	5b                   	pop    ebx
c0009ad5:	5e                   	pop    esi
c0009ad6:	5f                   	pop    edi
c0009ad7:	5d                   	pop    ebp
c0009ad8:	c3                   	ret    
c0009ad9:	83 ec 0c             	sub    esp,0xc
c0009adc:	68 34 db 01 c0       	push   0xc001db34
c0009ae1:	e8 b5 67 00 00       	call   c001029b <KePanic(char const*)>
c0009ae6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ae9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aed:	83 c4 10             	add    esp,0x10
c0009af0:	e9 43 ff ff ff       	jmp    c0009a38 <VAS::allocatePages(int, int)+0x3c>
c0009af5:	83 ec 0c             	sub    esp,0xc
c0009af8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009afc:	51                   	push   ecx
c0009afd:	e8 83 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b06:	83 c4 10             	add    esp,0x10
c0009b09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b0e:	0f 87 9b 00 00 00    	ja     c0009baf <VAS::allocatePages(int, int)+0x1b3>
c0009b14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b18:	85 d2                	test   edx,edx
c0009b1a:	7e 3c                	jle    c0009b58 <VAS::allocatePages(int, int)+0x15c>
c0009b1c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b20:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b28:	c1 e5 0c             	shl    ebp,0xc
c0009b2b:	81 ce 00 04 00 00    	or     esi,0x400
c0009b31:	01 dd                	add    ebp,ebx
c0009b33:	e8 5d df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b38:	56                   	push   esi
c0009b39:	53                   	push   ebx
c0009b3a:	50                   	push   eax
c0009b3b:	57                   	push   edi
c0009b3c:	e8 b7 fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b41:	83 c4 10             	add    esp,0x10
c0009b44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b49:	74 03                	je     c0009b4e <VAS::allocatePages(int, int)+0x152>
c0009b4b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b4e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b54:	39 dd                	cmp    ebp,ebx
c0009b56:	75 db                	jne    c0009b33 <VAS::allocatePages(int, int)+0x137>
c0009b58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b5d:	0f 84 25 ff ff ff    	je     c0009a88 <VAS::allocatePages(int, int)+0x8c>
c0009b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b6b:	89 d3                	mov    ebx,edx
c0009b6d:	c1 e0 0c             	shl    eax,0xc
c0009b70:	c1 eb 0a             	shr    ebx,0xa
c0009b73:	01 d0                	add    eax,edx
c0009b75:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b7b:	c1 e8 0a             	shr    eax,0xa
c0009b7e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b89:	2d 00 00 40 00       	sub    eax,0x400000
c0009b8e:	39 c3                	cmp    ebx,eax
c0009b90:	0f 87 f8 fe ff ff    	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009b96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b9f:	39 d8                	cmp    eax,ebx
c0009ba1:	73 f3                	jae    c0009b96 <VAS::allocatePages(int, int)+0x19a>
c0009ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba7:	83 c4 1c             	add    esp,0x1c
c0009baa:	5b                   	pop    ebx
c0009bab:	5e                   	pop    esi
c0009bac:	5f                   	pop    edi
c0009bad:	5d                   	pop    ebp
c0009bae:	c3                   	ret    
c0009baf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bba:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bc1:	0f 84 4d ff ff ff    	je     c0009b14 <VAS::allocatePages(int, int)+0x118>
c0009bc7:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bcf:	e9 40 ff ff ff       	jmp    c0009b14 <VAS::allocatePages(int, int)+0x118>

c0009bd4 <VAS::setCPUSpecific(unsigned long)>:
c0009bd4:	83 ec 0c             	sub    esp,0xc
c0009bd7:	6a 05                	push   0x5
c0009bd9:	68 00 00 40 c2       	push   0xc2400000
c0009bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be2:	50                   	push   eax
c0009be3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009be7:	52                   	push   edx
c0009be8:	e8 0b fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	c3                   	ret    
c0009bf1:	90                   	nop

c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bf2:	55                   	push   ebp
c0009bf3:	57                   	push   edi
c0009bf4:	56                   	push   esi
c0009bf5:	53                   	push   ebx
c0009bf6:	83 ec 1c             	sub    esp,0x1c
c0009bf9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bfe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c08:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c0c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c16:	83 e0 01             	and    eax,0x1
c0009c19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c21:	85 c0                	test   eax,eax
c0009c23:	7e 39                	jle    c0009c5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c29:	89 f3                	mov    ebx,esi
c0009c2b:	c1 e0 0c             	shl    eax,0xc
c0009c2e:	01 f0                	add    eax,esi
c0009c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c34:	55                   	push   ebp
c0009c35:	53                   	push   ebx
c0009c36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c3a:	29 f0                	sub    eax,esi
c0009c3c:	01 d8                	add    eax,ebx
c0009c3e:	50                   	push   eax
c0009c3f:	57                   	push   edi
c0009c40:	e8 b3 fc ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c4d:	74 03                	je     c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c4f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c52:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c58:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c5c:	75 d6                	jne    c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c5e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c63:	75 10                	jne    c0009c75 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c65:	0f 20 d8             	mov    eax,cr3
c0009c68:	0f 22 d8             	mov    cr3,eax
c0009c6b:	83 c4 1c             	add    esp,0x1c
c0009c6e:	89 f0                	mov    eax,esi
c0009c70:	5b                   	pop    ebx
c0009c71:	5e                   	pop    esi
c0009c72:	5f                   	pop    edi
c0009c73:	5d                   	pop    ebp
c0009c74:	c3                   	ret    
c0009c75:	89 f3                	mov    ebx,esi
c0009c77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c7b:	c1 eb 0a             	shr    ebx,0xa
c0009c7e:	c1 e0 0c             	shl    eax,0xc
c0009c81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c87:	01 f0                	add    eax,esi
c0009c89:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c8f:	c1 e8 0a             	shr    eax,0xa
c0009c92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c97:	2d 00 00 40 00       	sub    eax,0x400000
c0009c9c:	39 c3                	cmp    ebx,eax
c0009c9e:	77 cb                	ja     c0009c6b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009ca0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ca9:	39 d8                	cmp    eax,ebx
c0009cab:	73 f3                	jae    c0009ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	89 f0                	mov    eax,esi
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	90                   	nop

c0009cb8 <VAS::VAS()>:
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd5:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c0009cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cde:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ce6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ced:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009cf4:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c0009cf9:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009cfe:	29 c2                	sub    edx,eax
c0009d00:	89 d0                	mov    eax,edx
c0009d02:	05 ff 0f 00 00       	add    eax,0xfff
c0009d07:	c1 e8 0c             	shr    eax,0xc
c0009d0a:	89 c1                	mov    ecx,eax
c0009d0c:	ba 00 00 02 c0       	mov    edx,0xc0020000
c0009d11:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009d16:	83 ec 0c             	sub    esp,0xc
c0009d19:	6a 07                	push   0x7
c0009d1b:	51                   	push   ecx
c0009d1c:	52                   	push   edx
c0009d1d:	50                   	push   eax
c0009d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d22:	e8 cb fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d27:	83 c4 20             	add    esp,0x20
c0009d2a:	90                   	nop
c0009d2b:	83 c4 0c             	add    esp,0xc
c0009d2e:	c3                   	ret    
c0009d2f:	90                   	nop

c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d30:	55                   	push   ebp
c0009d31:	57                   	push   edi
c0009d32:	56                   	push   esi
c0009d33:	53                   	push   ebx
c0009d34:	83 ec 1c             	sub    esp,0x1c
c0009d37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d3f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d47:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4c:	75 4a                	jne    c0009d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d55:	c1 eb 16             	shr    ebx,0x16
c0009d58:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d5f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d63:	74 4d                	je     c0009db2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d69:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d6d:	c1 e8 0a             	shr    eax,0xa
c0009d70:	80 fa 01             	cmp    dl,0x1
c0009d73:	19 d2                	sbb    edx,edx
c0009d75:	c1 e3 0c             	shl    ebx,0xc
c0009d78:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d7c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d82:	25 fc 0f 00 00       	and    eax,0xffc
c0009d87:	01 d8                	add    eax,ebx
c0009d89:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d90:	83 c4 1c             	add    esp,0x1c
c0009d93:	5b                   	pop    ebx
c0009d94:	5e                   	pop    esi
c0009d95:	5f                   	pop    edi
c0009d96:	5d                   	pop    ebp
c0009d97:	c3                   	ret    
c0009d98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d9c:	83 ec 0c             	sub    esp,0xc
c0009d9f:	68 60 db 01 c0       	push   0xc001db60
c0009da4:	e8 f2 64 00 00       	call   c001029b <KePanic(char const*)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009db0:	eb 9c                	jmp    c0009d4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009db2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009db6:	e8 da dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dbb:	83 ec 0c             	sub    esp,0xc
c0009dbe:	89 c5                	mov    ebp,eax
c0009dc0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009dc6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dca:	6a 01                	push   0x1
c0009dcc:	e8 b4 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009dd1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd8:	6a 01                	push   0x1
c0009dda:	50                   	push   eax
c0009ddb:	55                   	push   ebp
c0009ddc:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009de6:	51                   	push   ecx
c0009de7:	e8 06 fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dec:	83 c4 1c             	add    esp,0x1c
c0009def:	68 00 10 00 00       	push   0x1000
c0009df4:	6a 00                	push   0x0
c0009df6:	50                   	push   eax
c0009df7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfb:	e8 d0 66 ff ff       	call   c00004d0 <memset>
c0009e00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e07:	e8 6d f7 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0f:	83 c4 10             	add    esp,0x10
c0009e12:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009e15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e19:	e9 47 ff ff ff       	jmp    c0009d65 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e1e <VAS::VAS(bool)>:
c0009e1e:	53                   	push   ebx
c0009e1f:	83 ec 28             	sub    esp,0x28
c0009e22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e26:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e44:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e48:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e4b:	e8 45 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e50:	89 c2                	mov    edx,eax
c0009e52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e59:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	6a 01                	push   0x1
c0009e64:	e8 1c f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 c2                	mov    edx,eax
c0009e6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e75:	83 ec 0c             	sub    esp,0xc
c0009e78:	6a 03                	push   0x3
c0009e7a:	6a 01                	push   0x1
c0009e7c:	52                   	push   edx
c0009e7d:	50                   	push   eax
c0009e7e:	53                   	push   ebx
c0009e7f:	e8 6e fd ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e84:	83 c4 20             	add    esp,0x20
c0009e87:	89 c2                	mov    edx,eax
c0009e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e90:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e98:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009ea0:	7f 1c                	jg     c0009ebe <VAS::VAS(bool)+0xa0>
c0009ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ead:	c1 e2 02             	shl    edx,0x2
c0009eb0:	01 d0                	add    eax,edx
c0009eb2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eb8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ebc:	eb da                	jmp    c0009e98 <VAS::VAS(bool)+0x7a>
c0009ebe:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009ec6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009ece:	7f 7a                	jg     c0009f4a <VAS::VAS(bool)+0x12c>
c0009ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed4:	2d 00 02 00 00       	sub    eax,0x200
c0009ed9:	c1 e0 0c             	shl    eax,0xc
c0009edc:	83 c8 03             	or     eax,0x3
c0009edf:	89 c2                	mov    edx,eax
c0009ee1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ee6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eec:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ef2:	83 e0 10             	and    eax,0x10
c0009ef5:	84 c0                	test   al,al
c0009ef7:	74 07                	je     c0009f00 <VAS::VAS(bool)+0xe2>
c0009ef9:	b8 00 01 00 00       	mov    eax,0x100
c0009efe:	eb 05                	jmp    c0009f05 <VAS::VAS(bool)+0xe7>
c0009f00:	b8 00 00 00 00       	mov    eax,0x0
c0009f05:	09 d0                	or     eax,edx
c0009f07:	89 c1                	mov    ecx,eax
c0009f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f14:	c1 e2 02             	shl    edx,0x2
c0009f17:	01 d0                	add    eax,edx
c0009f19:	89 ca                	mov    edx,ecx
c0009f1b:	89 10                	mov    DWORD PTR [eax],edx
c0009f1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f21:	2d 40 03 00 00       	sub    eax,0x340
c0009f26:	83 f8 7f             	cmp    eax,0x7f
c0009f29:	77 16                	ja     c0009f41 <VAS::VAS(bool)+0x123>
c0009f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f36:	c1 e2 02             	shl    edx,0x2
c0009f39:	01 d0                	add    eax,edx
c0009f3b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f41:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f45:	e9 7c ff ff ff       	jmp    c0009ec6 <VAS::VAS(bool)+0xa8>
c0009f4a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f55:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f5b:	83 e0 10             	and    eax,0x10
c0009f5e:	84 c0                	test   al,al
c0009f60:	74 07                	je     c0009f69 <VAS::VAS(bool)+0x14b>
c0009f62:	b8 03 41 00 00       	mov    eax,0x4103
c0009f67:	eb 05                	jmp    c0009f6e <VAS::VAS(bool)+0x150>
c0009f69:	b8 03 40 00 00       	mov    eax,0x4003
c0009f6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f72:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f75:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f7b:	89 02                	mov    DWORD PTR [edx],eax
c0009f7d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f8e:	83 ec 08             	sub    esp,0x8
c0009f91:	50                   	push   eax
c0009f92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f96:	e8 39 fc ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009fa5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009faa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fb6:	83 e0 10             	and    eax,0x10
c0009fb9:	84 c0                	test   al,al
c0009fbb:	74 07                	je     c0009fc4 <VAS::VAS(bool)+0x1a6>
c0009fbd:	b8 00 01 00 00       	mov    eax,0x100
c0009fc2:	eb 05                	jmp    c0009fc9 <VAS::VAS(bool)+0x1ab>
c0009fc4:	b8 00 00 00 00       	mov    eax,0x0
c0009fc9:	09 c2                	or     edx,eax
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd2:	05 fc 0f 00 00       	add    eax,0xffc
c0009fd7:	83 ca 03             	or     edx,0x3
c0009fda:	89 10                	mov    DWORD PTR [eax],edx
c0009fdc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe7:	83 ec 0c             	sub    esp,0xc
c0009fea:	50                   	push   eax
c0009feb:	e8 fc 1c 00 00       	call   c000bcec <Device::getName()>
c0009ff0:	83 c4 10             	add    esp,0x10
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	68 47 dc 01 c0       	push   0xc001dc47
c0009ffb:	50                   	push   eax
c0009ffc:	e8 df 66 ff ff       	call   c00006e0 <strcmp>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	85 c0                	test   eax,eax
c000a006:	0f 94 c0             	sete   al
c000a009:	84 c0                	test   al,al
c000a00b:	0f 84 87 00 00 00    	je     c000a098 <VAS::VAS(bool)+0x27a>
c000a011:	fa                   	cli    
c000a012:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a017:	40                   	inc    eax
c000a018:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a01d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a028:	05 7c 09 00 00       	add    eax,0x97c
c000a02d:	83 ec 0c             	sub    esp,0xc
c000a030:	50                   	push   eax
c000a031:	e8 80 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a03e:	89 c3                	mov    ebx,eax
c000a040:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a04b:	05 7c 09 00 00       	add    eax,0x97c
c000a050:	83 ec 0c             	sub    esp,0xc
c000a053:	50                   	push   eax
c000a054:	e8 5d d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a059:	83 c4 10             	add    esp,0x10
c000a05c:	83 ec 08             	sub    esp,0x8
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a064:	e8 f1 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a06e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a073:	6a 11                	push   0x11
c000a075:	53                   	push   ebx
c000a076:	50                   	push   eax
c000a077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a07b:	e8 78 f8 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a088:	48                   	dec    eax
c000a089:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a08e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a093:	85 c0                	test   eax,eax
c000a095:	75 01                	jne    c000a098 <VAS::VAS(bool)+0x27a>
c000a097:	fb                   	sti    
c000a098:	fa                   	cli    
c000a099:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a09e:	40                   	inc    eax
c000a09f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a0a4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a0ae:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000a0b4:	83 ec 04             	sub    esp,0x4
c000a0b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0bb:	6a 01                	push   0x1
c000a0bd:	50                   	push   eax
c000a0be:	e8 a7 f6 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c000a0c3:	83 c4 10             	add    esp,0x10
c000a0c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a0ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a0d2:	b9 7d 00 02 c0       	mov    ecx,0xc002007d
c000a0d7:	ba 00 00 02 c0       	mov    edx,0xc0020000
c000a0dc:	29 d1                	sub    ecx,edx
c000a0de:	89 ca                	mov    edx,ecx
c000a0e0:	81 c2 ff 0f 00 00    	add    edx,0xfff
c000a0e6:	c1 ea 0c             	shr    edx,0xc
c000a0e9:	39 d0                	cmp    eax,edx
c000a0eb:	73 5b                	jae    c000a148 <VAS::VAS(bool)+0x32a>
c000a0ed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a0f2:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a0f7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000a0fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a101:	c1 e2 0c             	shl    edx,0xc
c000a104:	89 d1                	mov    ecx,edx
c000a106:	ba 00 00 02 c0       	mov    edx,0xc0020000
c000a10b:	01 ca                	add    edx,ecx
c000a10d:	83 ec 04             	sub    esp,0x4
c000a110:	52                   	push   edx
c000a111:	6a 01                	push   0x1
c000a113:	50                   	push   eax
c000a114:	e8 15 f4 ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000a119:	83 c4 10             	add    esp,0x10
c000a11c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a124:	8b 00                	mov    eax,DWORD PTR [eax]
c000a126:	83 e0 fd             	and    eax,0xfffffffd
c000a129:	89 c2                	mov    edx,eax
c000a12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a12f:	89 10                	mov    DWORD PTR [eax],edx
c000a131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a135:	8b 00                	mov    eax,DWORD PTR [eax]
c000a137:	83 c8 04             	or     eax,0x4
c000a13a:	89 c2                	mov    edx,eax
c000a13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a140:	89 10                	mov    DWORD PTR [eax],edx
c000a142:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a146:	eb 86                	jmp    c000a0ce <VAS::VAS(bool)+0x2b0>
c000a148:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a14d:	48                   	dec    eax
c000a14e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a153:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a158:	85 c0                	test   eax,eax
c000a15a:	75 01                	jne    c000a15d <VAS::VAS(bool)+0x33f>
c000a15c:	fb                   	sti    
c000a15d:	90                   	nop
c000a15e:	83 c4 28             	add    esp,0x28
c000a161:	5b                   	pop    ebx
c000a162:	c3                   	ret    
c000a163:	90                   	nop

c000a164 <VAS::evict(unsigned long)>:
c000a164:	55                   	push   ebp
c000a165:	57                   	push   edi
c000a166:	56                   	push   esi
c000a167:	53                   	push   ebx
c000a168:	83 ec 1c             	sub    esp,0x1c
c000a16b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a16f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a177:	e8 4a f2 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a17c:	8b 0d ec f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8ec
c000a182:	89 c7                	mov    edi,eax
c000a184:	85 c9                	test   ecx,ecx
c000a186:	7e 3e                	jle    c000a1c6 <VAS::evict(unsigned long)+0x62>
c000a188:	89 ee                	mov    esi,ebp
c000a18a:	31 db                	xor    ebx,ebx
c000a18c:	83 ec 0c             	sub    esp,0xc
c000a18f:	57                   	push   edi
c000a190:	e8 1f f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a195:	89 34 24             	mov    DWORD PTR [esp],esi
c000a198:	01 d8                	add    eax,ebx
c000a19a:	6a 01                	push   0x1
c000a19c:	31 d2                	xor    edx,edx
c000a19e:	43                   	inc    ebx
c000a19f:	52                   	push   edx
c000a1a0:	81 c6 00 02 00 00    	add    esi,0x200
c000a1a6:	50                   	push   eax
c000a1a7:	0f be 05 f8 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8f8
c000a1ae:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1b5:	52                   	push   edx
c000a1b6:	e8 f1 2b 00 00       	call   c000cdac <LogicalDisk::write(unsigned long long, int, void*)>
c000a1bb:	83 c4 20             	add    esp,0x20
c000a1be:	39 1d ec f8 01 c0    	cmp    DWORD PTR ds:0xc001f8ec,ebx
c000a1c4:	7f c6                	jg     c000a18c <VAS::evict(unsigned long)+0x28>
c000a1c6:	83 ec 08             	sub    esp,0x8
c000a1c9:	c1 e7 0b             	shl    edi,0xb
c000a1cc:	55                   	push   ebp
c000a1cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1d1:	50                   	push   eax
c000a1d2:	e8 83 f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a1d7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1d9:	89 d1                	mov    ecx,edx
c000a1db:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1e1:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1e7:	09 cf                	or     edi,ecx
c000a1e9:	89 38                	mov    DWORD PTR [eax],edi
c000a1eb:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1ee:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a1f4:	e8 3a d8 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a1f9:	0f 20 d8             	mov    eax,cr3
c000a1fc:	0f 22 d8             	mov    cr3,eax
c000a1ff:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a204:	c7 44 24 40 55 dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc55
c000a20c:	8d 50 01             	lea    edx,[eax+0x1]
c000a20f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a213:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a219:	83 c4 2c             	add    esp,0x2c
c000a21c:	5b                   	pop    ebx
c000a21d:	5e                   	pop    esi
c000a21e:	5f                   	pop    edi
c000a21f:	5d                   	pop    ebp
c000a220:	e9 f4 03 00 00       	jmp    c000a619 <Dbg::kprintf(char const*, ...)>
c000a225:	90                   	nop

c000a226 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a226:	55                   	push   ebp
c000a227:	57                   	push   edi
c000a228:	56                   	push   esi
c000a229:	53                   	push   ebx
c000a22a:	83 ec 14             	sub    esp,0x14
c000a22d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a231:	53                   	push   ebx
c000a232:	68 66 dc 01 c0       	push   0xc001dc66
c000a237:	e8 dd 03 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000a23c:	83 c4 10             	add    esp,0x10
c000a23f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a245:	74 21                	je     c000a268 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a247:	83 ec 08             	sub    esp,0x8
c000a24a:	53                   	push   ebx
c000a24b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a24f:	57                   	push   edi
c000a250:	e8 05 f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a255:	83 c4 10             	add    esp,0x10
c000a258:	89 c6                	mov    esi,eax
c000a25a:	85 c0                	test   eax,eax
c000a25c:	74 0a                	je     c000a268 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a25e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a260:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a266:	74 0a                	je     c000a272 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a268:	31 c0                	xor    eax,eax
c000a26a:	83 c4 0c             	add    esp,0xc
c000a26d:	5b                   	pop    ebx
c000a26e:	5e                   	pop    esi
c000a26f:	5f                   	pop    edi
c000a270:	5d                   	pop    ebp
c000a271:	c3                   	ret    
c000a272:	e8 1e d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a277:	c1 ed 0b             	shr    ebp,0xb
c000a27a:	8b 16                	mov    edx,DWORD PTR [esi]
c000a27c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a282:	09 c2                	or     edx,eax
c000a284:	81 ca 01 08 00 00    	or     edx,0x801
c000a28a:	89 16                	mov    DWORD PTR [esi],edx
c000a28c:	8b 35 ec f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f8ec
c000a292:	85 f6                	test   esi,esi
c000a294:	7e 3e                	jle    c000a2d4 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a296:	89 df                	mov    edi,ebx
c000a298:	31 f6                	xor    esi,esi
c000a29a:	83 ec 0c             	sub    esp,0xc
c000a29d:	55                   	push   ebp
c000a29e:	e8 11 f1 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a2a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a2a6:	01 f0                	add    eax,esi
c000a2a8:	6a 01                	push   0x1
c000a2aa:	31 d2                	xor    edx,edx
c000a2ac:	46                   	inc    esi
c000a2ad:	52                   	push   edx
c000a2ae:	81 c7 00 02 00 00    	add    edi,0x200
c000a2b4:	50                   	push   eax
c000a2b5:	0f be 05 f8 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8f8
c000a2bc:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a2c3:	51                   	push   ecx
c000a2c4:	e8 77 2a 00 00       	call   c000cd40 <LogicalDisk::read(unsigned long long, int, void*)>
c000a2c9:	83 c4 20             	add    esp,0x20
c000a2cc:	39 35 ec f8 01 c0    	cmp    DWORD PTR ds:0xc001f8ec,esi
c000a2d2:	7f c6                	jg     c000a29a <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2d4:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a2d9:	48                   	dec    eax
c000a2da:	52                   	push   edx
c000a2db:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a2e0:	50                   	push   eax
c000a2e1:	53                   	push   ebx
c000a2e2:	68 79 dc 01 c0       	push   0xc001dc79
c000a2e7:	e8 2d 03 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000a2ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2ef:	e8 a2 f0 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a2f4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a2f9:	83 c4 10             	add    esp,0x10
c000a2fc:	48                   	dec    eax
c000a2fd:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a302:	85 c0                	test   eax,eax
c000a304:	75 01                	jne    c000a307 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a306:	fb                   	sti    
c000a307:	0f 20 d8             	mov    eax,cr3
c000a30a:	0f 22 d8             	mov    cr3,eax
c000a30d:	b0 01                	mov    al,0x1
c000a30f:	e9 56 ff ff ff       	jmp    c000a26a <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a314 <VAS::scanForEviction()>:
c000a314:	57                   	push   edi
c000a315:	31 ff                	xor    edi,edi
c000a317:	56                   	push   esi
c000a318:	53                   	push   ebx
c000a319:	83 ec 10             	sub    esp,0x10
c000a31c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a320:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a323:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a329:	75 0e                	jne    c000a339 <VAS::scanForEviction()+0x25>
c000a32b:	89 da                	mov    edx,ebx
c000a32d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a330:	c1 ea 16             	shr    edx,0x16
c000a333:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a337:	74 4e                	je     c000a387 <VAS::scanForEviction()+0x73>
c000a339:	53                   	push   ebx
c000a33a:	56                   	push   esi
c000a33b:	e8 1a f2 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a340:	5a                   	pop    edx
c000a341:	8b 10                	mov    edx,DWORD PTR [eax]
c000a343:	59                   	pop    ecx
c000a344:	89 d1                	mov    ecx,edx
c000a346:	81 e1 01 08 00 00    	and    ecx,0x801
c000a34c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a352:	74 3e                	je     c000a392 <VAS::scanForEviction()+0x7e>
c000a354:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a35a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a360:	76 2b                	jbe    c000a38d <VAS::scanForEviction()+0x79>
c000a362:	47                   	inc    edi
c000a363:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a36a:	83 ff 03             	cmp    edi,0x3
c000a36d:	74 32                	je     c000a3a1 <VAS::scanForEviction()+0x8d>
c000a36f:	31 db                	xor    ebx,ebx
c000a371:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a377:	75 c0                	jne    c000a339 <VAS::scanForEviction()+0x25>
c000a379:	89 da                	mov    edx,ebx
c000a37b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a37e:	c1 ea 16             	shr    edx,0x16
c000a381:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a385:	75 b2                	jne    c000a339 <VAS::scanForEviction()+0x25>
c000a387:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a38d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a390:	eb 91                	jmp    c000a323 <VAS::scanForEviction()+0xf>
c000a392:	f6 c2 20             	test   dl,0x20
c000a395:	74 13                	je     c000a3aa <VAS::scanForEviction()+0x96>
c000a397:	83 e2 df             	and    edx,0xffffffdf
c000a39a:	89 10                	mov    DWORD PTR [eax],edx
c000a39c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a39f:	eb b3                	jmp    c000a354 <VAS::scanForEviction()+0x40>
c000a3a1:	83 c4 10             	add    esp,0x10
c000a3a4:	31 c0                	xor    eax,eax
c000a3a6:	5b                   	pop    ebx
c000a3a7:	5e                   	pop    esi
c000a3a8:	5f                   	pop    edi
c000a3a9:	c3                   	ret    
c000a3aa:	83 ec 08             	sub    esp,0x8
c000a3ad:	89 d0                	mov    eax,edx
c000a3af:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a3b8:	53                   	push   ebx
c000a3b9:	68 8e dc 01 c0       	push   0xc001dc8e
c000a3be:	e8 56 02 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000a3c3:	58                   	pop    eax
c000a3c4:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a3c7:	5a                   	pop    edx
c000a3c8:	51                   	push   ecx
c000a3c9:	56                   	push   esi
c000a3ca:	e8 95 fd ff ff       	call   c000a164 <VAS::evict(unsigned long)>
c000a3cf:	5b                   	pop    ebx
c000a3d0:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3d3:	5f                   	pop    edi
c000a3d4:	50                   	push   eax
c000a3d5:	68 a2 dc 01 c0       	push   0xc001dca2
c000a3da:	e8 3a 02 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000a3df:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	5b                   	pop    ebx
c000a3f1:	5e                   	pop    esi
c000a3f2:	5f                   	pop    edi
c000a3f3:	c3                   	ret    

c000a3f4 <mapVASFirstTime>:
c000a3f4:	55                   	push   ebp
c000a3f5:	57                   	push   edi
c000a3f6:	56                   	push   esi
c000a3f7:	53                   	push   ebx
c000a3f8:	83 ec 0c             	sub    esp,0xc
c000a3fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a400:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a403:	4a                   	dec    edx
c000a404:	0f 84 b1 00 00 00    	je     c000a4bb <mapVASFirstTime+0xc7>
c000a40a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a40d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a410:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a415:	c1 e5 15             	shl    ebp,0x15
c000a418:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a41d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a423:	29 eb                	sub    ebx,ebp
c000a425:	29 ef                	sub    edi,ebp
c000a427:	e8 69 d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a42c:	83 ec 0c             	sub    esp,0xc
c000a42f:	68 03 04 00 00       	push   0x403
c000a434:	6a 01                	push   0x1
c000a436:	53                   	push   ebx
c000a437:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a43d:	50                   	push   eax
c000a43e:	56                   	push   esi
c000a43f:	e8 ae f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a444:	83 c4 20             	add    esp,0x20
c000a447:	39 fb                	cmp    ebx,edi
c000a449:	75 dc                	jne    c000a427 <mapVASFirstTime+0x33>
c000a44b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a450:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a455:	29 eb                	sub    ebx,ebp
c000a457:	29 ef                	sub    edi,ebp
c000a459:	e8 37 d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a45e:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a462:	19 d2                	sbb    edx,edx
c000a464:	83 ec 0c             	sub    esp,0xc
c000a467:	83 e2 04             	and    edx,0x4
c000a46a:	81 c2 03 04 00 00    	add    edx,0x403
c000a470:	52                   	push   edx
c000a471:	6a 01                	push   0x1
c000a473:	53                   	push   ebx
c000a474:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a47a:	50                   	push   eax
c000a47b:	56                   	push   esi
c000a47c:	e8 71 f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a481:	83 c4 20             	add    esp,0x20
c000a484:	39 df                	cmp    edi,ebx
c000a486:	75 d1                	jne    c000a459 <mapVASFirstTime+0x65>
c000a488:	b8 7c 10 02 c0       	mov    eax,0xc002107c
c000a48d:	2d 00 00 02 c0       	sub    eax,0xc0020000
c000a492:	c1 e8 0c             	shr    eax,0xc
c000a495:	50                   	push   eax
c000a496:	68 7d 00 02 c0       	push   0xc002007d
c000a49b:	68 00 00 02 c0       	push   0xc0020000
c000a4a0:	68 84 db 01 c0       	push   0xc001db84
c000a4a5:	e8 6f 01 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000a4aa:	0f 20 d8             	mov    eax,cr3
c000a4ad:	0f 22 d8             	mov    cr3,eax
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	83 c4 0c             	add    esp,0xc
c000a4b6:	5b                   	pop    ebx
c000a4b7:	5e                   	pop    esi
c000a4b8:	5f                   	pop    edi
c000a4b9:	5d                   	pop    ebp
c000a4ba:	c3                   	ret    
c000a4bb:	83 ec 0c             	sub    esp,0xc
c000a4be:	68 b5 dc 01 c0       	push   0xc001dcb5
c000a4c3:	e8 51 01 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000a4c8:	83 c4 10             	add    esp,0x10
c000a4cb:	83 c4 0c             	add    esp,0xc
c000a4ce:	5b                   	pop    ebx
c000a4cf:	5e                   	pop    esi
c000a4d0:	5f                   	pop    edi
c000a4d1:	5d                   	pop    ebp
c000a4d2:	c3                   	ret    

c000a4d3 <__cxa_atexit>:
c000a4d3:	31 c0                	xor    eax,eax
c000a4d5:	c3                   	ret    

c000a4d6 <__cxa_finalize>:
c000a4d6:	c3                   	ret    

c000a4d7 <__stack_chk_fail>:
c000a4d7:	55                   	push   ebp
c000a4d8:	89 e5                	mov    ebp,esp
c000a4da:	83 ec 10             	sub    esp,0x10
c000a4dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4e0:	68 ce dc 01 c0       	push   0xc001dcce
c000a4e5:	e8 2f 01 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000a4ea:	58                   	pop    eax
c000a4eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4ee:	5a                   	pop    edx
c000a4ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4f2:	68 ce dc 01 c0       	push   0xc001dcce
c000a4f7:	e8 1d 01 00 00       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000a4fc:	c7 04 24 d6 dc 01 c0 	mov    DWORD PTR [esp],0xc001dcd6
c000a503:	e8 93 5d 00 00       	call   c001029b <KePanic(char const*)>
c000a508:	83 c4 10             	add    esp,0x10
c000a50b:	c9                   	leave  
c000a50c:	c3                   	ret    

c000a50d <__cxa_pure_virtual>:
c000a50d:	83 ec 18             	sub    esp,0x18
c000a510:	68 ee dc 01 c0       	push   0xc001dcee
c000a515:	e8 81 5d 00 00       	call   c001029b <KePanic(char const*)>
c000a51a:	83 c4 1c             	add    esp,0x1c
c000a51d:	c3                   	ret    

c000a51e <operator new[](unsigned long)>:
c000a51e:	e9 96 d2 ff ff       	jmp    c00077b9 <malloc>

c000a523 <operator delete(void*, unsigned long)>:
c000a523:	e9 b1 d2 ff ff       	jmp    c00077d9 <rfree>

c000a528 <operator delete[](void*)>:
c000a528:	e9 ac d2 ff ff       	jmp    c00077d9 <rfree>

c000a52d <operator delete[](void*, unsigned long)>:
c000a52d:	e9 a7 d2 ff ff       	jmp    c00077d9 <rfree>

c000a532 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a532:	55                   	push   ebp
c000a533:	b9 04 00 00 00       	mov    ecx,0x4
c000a538:	57                   	push   edi
c000a539:	56                   	push   esi
c000a53a:	be b3 d8 01 c0       	mov    esi,0xc001d8b3
c000a53f:	53                   	push   ebx
c000a540:	83 ec 20             	sub    esp,0x20
c000a543:	a1 b2 d8 01 c0       	mov    eax,ds:0xc001d8b2
c000a548:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a54c:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a550:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a554:	a1 bf d8 01 c0       	mov    eax,ds:0xc001d8bf
c000a559:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a55d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a561:	fc                   	cld    
c000a562:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a564:	89 ee                	mov    esi,ebp
c000a566:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a56a:	eb 02                	jmp    c000a56e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a56c:	89 c6                	mov    esi,eax
c000a56e:	31 d2                	xor    edx,edx
c000a570:	41                   	inc    ecx
c000a571:	89 f0                	mov    eax,esi
c000a573:	f7 f3                	div    ebx
c000a575:	39 de                	cmp    esi,ebx
c000a577:	73 f3                	jae    c000a56c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a579:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a57c:	eb 02                	jmp    c000a580 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a57e:	89 c5                	mov    ebp,eax
c000a580:	31 d2                	xor    edx,edx
c000a582:	49                   	dec    ecx
c000a583:	89 e8                	mov    eax,ebp
c000a585:	f7 f3                	div    ebx
c000a587:	39 dd                	cmp    ebp,ebx
c000a589:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a58d:	88 11                	mov    BYTE PTR [ecx],dl
c000a58f:	73 ed                	jae    c000a57e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a591:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a595:	83 c4 20             	add    esp,0x20
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    

c000a59d <Dbg::logc(char)>:
c000a59d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5a1:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a5a8:	75 12                	jne    c000a5bc <Dbg::logc(char)+0x1f>
c000a5aa:	ba fd 03 00 00       	mov    edx,0x3fd
c000a5af:	ec                   	in     al,dx
c000a5b0:	a8 20                	test   al,0x20
c000a5b2:	74 fb                	je     c000a5af <Dbg::logc(char)+0x12>
c000a5b4:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5b9:	88 c8                	mov    al,cl
c000a5bb:	ee                   	out    dx,al
c000a5bc:	c3                   	ret    

c000a5bd <Dbg::logs(char*)>:
c000a5bd:	53                   	push   ebx
c000a5be:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5c5:	84 c0                	test   al,al
c000a5c7:	74 0f                	je     c000a5d8 <Dbg::logs(char*)+0x1b>
c000a5c9:	50                   	push   eax
c000a5ca:	43                   	inc    ebx
c000a5cb:	e8 cd ff ff ff       	call   c000a59d <Dbg::logc(char)>
c000a5d0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5d3:	5a                   	pop    edx
c000a5d4:	84 c0                	test   al,al
c000a5d6:	75 f1                	jne    c000a5c9 <Dbg::logs(char*)+0xc>
c000a5d8:	5b                   	pop    ebx
c000a5d9:	c3                   	ret    

c000a5da <Dbg::logWriteInt(unsigned int)>:
c000a5da:	83 ec 10             	sub    esp,0x10
c000a5dd:	6a 0a                	push   0xa
c000a5df:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5e3:	50                   	push   eax
c000a5e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e8:	50                   	push   eax
c000a5e9:	e8 44 ff ff ff       	call   c000a532 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5ee:	50                   	push   eax
c000a5ef:	e8 c9 ff ff ff       	call   c000a5bd <Dbg::logs(char*)>
c000a5f4:	83 c4 20             	add    esp,0x20
c000a5f7:	c3                   	ret    

c000a5f8 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5f8:	83 ec 10             	sub    esp,0x10
c000a5fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5ff:	50                   	push   eax
c000a600:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a604:	50                   	push   eax
c000a605:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a609:	52                   	push   edx
c000a60a:	e8 23 ff ff ff       	call   c000a532 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a60f:	50                   	push   eax
c000a610:	e8 a8 ff ff ff       	call   c000a5bd <Dbg::logs(char*)>
c000a615:	83 c4 20             	add    esp,0x20
c000a618:	c3                   	ret    

c000a619 <Dbg::kprintf(char const*, ...)>:
c000a619:	55                   	push   ebp
c000a61a:	57                   	push   edi
c000a61b:	56                   	push   esi
c000a61c:	53                   	push   ebx
c000a61d:	83 ec 0c             	sub    esp,0xc
c000a620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a624:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a62b:	74 08                	je     c000a635 <Dbg::kprintf(char const*, ...)+0x1c>
c000a62d:	83 c4 0c             	add    esp,0xc
c000a630:	5b                   	pop    ebx
c000a631:	5e                   	pop    esi
c000a632:	5f                   	pop    edi
c000a633:	5d                   	pop    ebp
c000a634:	c3                   	ret    
c000a635:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a639:	31 ff                	xor    edi,edi
c000a63b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a63f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a642:	84 c0                	test   al,al
c000a644:	74 e7                	je     c000a62d <Dbg::kprintf(char const*, ...)+0x14>
c000a646:	8d 77 01             	lea    esi,[edi+0x1]
c000a649:	3c 25                	cmp    al,0x25
c000a64b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a64e:	75 47                	jne    c000a697 <Dbg::kprintf(char const*, ...)+0x7e>
c000a650:	83 c7 02             	add    edi,0x2
c000a653:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a656:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a659:	83 e8 25             	sub    eax,0x25
c000a65c:	3c 53                	cmp    al,0x53
c000a65e:	0f 87 d2 00 00 00    	ja     c000a736 <Dbg::kprintf(char const*, ...)+0x11d>
c000a664:	25 ff 00 00 00       	and    eax,0xff
c000a669:	ff 24 85 04 dd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe22fc]
c000a670:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a674:	89 c8                	mov    eax,ecx
c000a676:	83 c1 04             	add    ecx,0x4
c000a679:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a67d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a67f:	55                   	push   ebp
c000a680:	e8 55 ff ff ff       	call   c000a5da <Dbg::logWriteInt(unsigned int)>
c000a685:	58                   	pop    eax
c000a686:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a689:	84 c0                	test   al,al
c000a68b:	74 a0                	je     c000a62d <Dbg::kprintf(char const*, ...)+0x14>
c000a68d:	8d 77 01             	lea    esi,[edi+0x1]
c000a690:	3c 25                	cmp    al,0x25
c000a692:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a695:	74 b9                	je     c000a650 <Dbg::kprintf(char const*, ...)+0x37>
c000a697:	50                   	push   eax
c000a698:	89 f7                	mov    edi,esi
c000a69a:	e8 fe fe ff ff       	call   c000a59d <Dbg::logc(char)>
c000a69f:	89 ee                	mov    esi,ebp
c000a6a1:	58                   	pop    eax
c000a6a2:	eb e2                	jmp    c000a686 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6a8:	89 c8                	mov    eax,ecx
c000a6aa:	83 c1 04             	add    ecx,0x4
c000a6ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6af:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6b3:	50                   	push   eax
c000a6b4:	e8 04 ff ff ff       	call   c000a5bd <Dbg::logs(char*)>
c000a6b9:	58                   	pop    eax
c000a6ba:	eb ca                	jmp    c000a686 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6c0:	89 d0                	mov    eax,edx
c000a6c2:	83 c2 04             	add    edx,0x4
c000a6c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6c9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6cb:	50                   	push   eax
c000a6cc:	e8 09 ff ff ff       	call   c000a5da <Dbg::logWriteInt(unsigned int)>
c000a6d1:	58                   	pop    eax
c000a6d2:	eb b2                	jmp    c000a686 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6d8:	89 d0                	mov    eax,edx
c000a6da:	83 c2 04             	add    edx,0x4
c000a6dd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6e4:	50                   	push   eax
c000a6e5:	e8 b3 fe ff ff       	call   c000a59d <Dbg::logc(char)>
c000a6ea:	58                   	pop    eax
c000a6eb:	eb 99                	jmp    c000a686 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6f1:	89 c8                	mov    eax,ecx
c000a6f3:	83 c1 04             	add    ecx,0x4
c000a6f6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6fa:	6a 10                	push   0x10
c000a6fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6fe:	51                   	push   ecx
c000a6ff:	e8 f4 fe ff ff       	call   c000a5f8 <Dbg::logWriteIntBase(unsigned int, int)>
c000a704:	5d                   	pop    ebp
c000a705:	58                   	pop    eax
c000a706:	e9 7b ff ff ff       	jmp    c000a686 <Dbg::kprintf(char const*, ...)+0x6d>
c000a70b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a70f:	89 d0                	mov    eax,edx
c000a711:	83 c2 08             	add    edx,0x8
c000a714:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a718:	6a 10                	push   0x10
c000a71a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a71c:	50                   	push   eax
c000a71d:	e8 d6 fe ff ff       	call   c000a5f8 <Dbg::logWriteIntBase(unsigned int, int)>
c000a722:	58                   	pop    eax
c000a723:	5a                   	pop    edx
c000a724:	e9 5d ff ff ff       	jmp    c000a686 <Dbg::kprintf(char const*, ...)+0x6d>
c000a729:	6a 25                	push   0x25
c000a72b:	e8 6d fe ff ff       	call   c000a59d <Dbg::logc(char)>
c000a730:	5a                   	pop    edx
c000a731:	e9 50 ff ff ff       	jmp    c000a686 <Dbg::kprintf(char const*, ...)+0x6d>
c000a736:	6a 25                	push   0x25
c000a738:	e8 60 fe ff ff       	call   c000a59d <Dbg::logc(char)>
c000a73d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a741:	50                   	push   eax
c000a742:	e8 56 fe ff ff       	call   c000a59d <Dbg::logc(char)>
c000a747:	5a                   	pop    edx
c000a748:	59                   	pop    ecx
c000a749:	e9 38 ff ff ff       	jmp    c000a686 <Dbg::kprintf(char const*, ...)+0x6d>

c000a74e <File::read(unsigned long long, void*, int*)>:
c000a74e:	53                   	push   ebx
c000a74f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a753:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a757:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a75e:	3c 19                	cmp    al,0x19
c000a760:	77 35                	ja     c000a797 <File::read(unsigned long long, void*, int*)+0x49>
c000a762:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a769:	85 c0                	test   eax,eax
c000a76b:	74 2a                	je     c000a797 <File::read(unsigned long long, void*, int*)+0x49>
c000a76d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a773:	85 c0                	test   eax,eax
c000a775:	74 20                	je     c000a797 <File::read(unsigned long long, void*, int*)+0x49>
c000a777:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a77b:	74 21                	je     c000a79e <File::read(unsigned long long, void*, int*)+0x50>
c000a77d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a77f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a783:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a789:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a78d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a791:	5b                   	pop    ebx
c000a792:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a795:	ff e0                	jmp    eax
c000a797:	b8 0b 00 00 00       	mov    eax,0xb
c000a79c:	eb 05                	jmp    c000a7a3 <File::read(unsigned long long, void*, int*)+0x55>
c000a79e:	b8 05 00 00 00       	mov    eax,0x5
c000a7a3:	5b                   	pop    ebx
c000a7a4:	c3                   	ret    
c000a7a5:	90                   	nop

c000a7a6 <File::write(unsigned long long, void*, int*)>:
c000a7a6:	53                   	push   ebx
c000a7a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7af:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7b6:	3c 19                	cmp    al,0x19
c000a7b8:	77 35                	ja     c000a7ef <File::write(unsigned long long, void*, int*)+0x49>
c000a7ba:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a7c1:	85 c0                	test   eax,eax
c000a7c3:	74 2a                	je     c000a7ef <File::write(unsigned long long, void*, int*)+0x49>
c000a7c5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a7cb:	85 c0                	test   eax,eax
c000a7cd:	74 20                	je     c000a7ef <File::write(unsigned long long, void*, int*)+0x49>
c000a7cf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7d3:	74 21                	je     c000a7f6 <File::write(unsigned long long, void*, int*)+0x50>
c000a7d5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7db:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7e9:	5b                   	pop    ebx
c000a7ea:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7ed:	ff e0                	jmp    eax
c000a7ef:	b8 0b 00 00 00       	mov    eax,0xb
c000a7f4:	eb 05                	jmp    c000a7fb <File::write(unsigned long long, void*, int*)+0x55>
c000a7f6:	b8 05 00 00 00       	mov    eax,0x5
c000a7fb:	5b                   	pop    ebx
c000a7fc:	c3                   	ret    
c000a7fd:	90                   	nop

c000a7fe <Directory::read(unsigned long long, void*, int*)>:
c000a7fe:	53                   	push   ebx
c000a7ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a803:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a807:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a80e:	3c 19                	cmp    al,0x19
c000a810:	77 35                	ja     c000a847 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a812:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a819:	85 c0                	test   eax,eax
c000a81b:	74 2a                	je     c000a847 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a81d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a823:	85 c0                	test   eax,eax
c000a825:	74 20                	je     c000a847 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a827:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a82b:	74 21                	je     c000a84e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a82d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a82f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a833:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a83d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a841:	5b                   	pop    ebx
c000a842:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a845:	ff e0                	jmp    eax
c000a847:	b8 0b 00 00 00       	mov    eax,0xb
c000a84c:	eb 05                	jmp    c000a853 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a84e:	b8 05 00 00 00       	mov    eax,0x5
c000a853:	5b                   	pop    ebx
c000a854:	c3                   	ret    
c000a855:	90                   	nop

c000a856 <Directory::write(unsigned long long, void*, int*)>:
c000a856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a85a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a861:	b8 0b 00 00 00       	mov    eax,0xb
c000a866:	80 fa 19             	cmp    dl,0x19
c000a869:	77 18                	ja     c000a883 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a86b:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a872:	85 d2                	test   edx,edx
c000a874:	74 0d                	je     c000a883 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a876:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a87d:	19 c0                	sbb    eax,eax
c000a87f:	83 e0 0a             	and    eax,0xa
c000a882:	40                   	inc    eax
c000a883:	c3                   	ret    

c000a884 <File::isAtty()>:
c000a884:	31 c0                	xor    eax,eax
c000a886:	c3                   	ret    
c000a887:	90                   	nop

c000a888 <Directory::isAtty()>:
c000a888:	31 c0                	xor    eax,eax
c000a88a:	c3                   	ret    
c000a88b:	90                   	nop

c000a88c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a88c:	b8 0a 00 00 00       	mov    eax,0xa
c000a891:	c3                   	ret    

c000a892 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a892:	b8 0a 00 00 00       	mov    eax,0xa
c000a897:	c3                   	ret    

c000a898 <Filesystem::allocateSwapfile(char const*, int)>:
c000a898:	31 c0                	xor    eax,eax
c000a89a:	31 d2                	xor    edx,edx
c000a89c:	c3                   	ret    
c000a89d:	90                   	nop

c000a89e <File::~File()>:
c000a89e:	83 ec 0c             	sub    esp,0xc
c000a8a1:	ba c4 de 01 c0       	mov    edx,0xc001dec4
c000a8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8aa:	89 10                	mov    DWORD PTR [eax],edx
c000a8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	50                   	push   eax
c000a8b4:	e8 6b e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a8b9:	83 c4 10             	add    esp,0x10
c000a8bc:	90                   	nop
c000a8bd:	83 c4 0c             	add    esp,0xc
c000a8c0:	c3                   	ret    
c000a8c1:	90                   	nop

c000a8c2 <File::~File()>:
c000a8c2:	83 ec 0c             	sub    esp,0xc
c000a8c5:	83 ec 0c             	sub    esp,0xc
c000a8c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8cc:	e8 cd ff ff ff       	call   c000a89e <File::~File()>
c000a8d1:	83 c4 10             	add    esp,0x10
c000a8d4:	83 ec 08             	sub    esp,0x8
c000a8d7:	68 14 01 00 00       	push   0x114
c000a8dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8e0:	e8 3e fc ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000a8e5:	83 c4 10             	add    esp,0x10
c000a8e8:	83 c4 0c             	add    esp,0xc
c000a8eb:	c3                   	ret    

c000a8ec <Directory::~Directory()>:
c000a8ec:	83 ec 0c             	sub    esp,0xc
c000a8ef:	ba e0 de 01 c0       	mov    edx,0xc001dee0
c000a8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f8:	89 10                	mov    DWORD PTR [eax],edx
c000a8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8fe:	83 ec 0c             	sub    esp,0xc
c000a901:	50                   	push   eax
c000a902:	e8 1d e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a907:	83 c4 10             	add    esp,0x10
c000a90a:	90                   	nop
c000a90b:	83 c4 0c             	add    esp,0xc
c000a90e:	c3                   	ret    
c000a90f:	90                   	nop

c000a910 <Directory::~Directory()>:
c000a910:	83 ec 0c             	sub    esp,0xc
c000a913:	83 ec 0c             	sub    esp,0xc
c000a916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a91a:	e8 cd ff ff ff       	call   c000a8ec <Directory::~Directory()>
c000a91f:	83 c4 10             	add    esp,0x10
c000a922:	83 ec 08             	sub    esp,0x8
c000a925:	68 14 01 00 00       	push   0x114
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	e8 f0 fb ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000a933:	83 c4 10             	add    esp,0x10
c000a936:	83 c4 0c             	add    esp,0xc
c000a939:	c3                   	ret    

c000a93a <Filesystem::Filesystem()>:
c000a93a:	ba 5c de 01 c0       	mov    edx,0xc001de5c
c000a93f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a943:	89 10                	mov    DWORD PTR [eax],edx
c000a945:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a956:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a95b:	90                   	nop
c000a95c:	c3                   	ret    
c000a95d:	90                   	nop

c000a95e <Filesystem::~Filesystem()>:
c000a95e:	ba 5c de 01 c0       	mov    edx,0xc001de5c
c000a963:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a967:	89 10                	mov    DWORD PTR [eax],edx
c000a969:	90                   	nop
c000a96a:	c3                   	ret    
c000a96b:	90                   	nop

c000a96c <Filesystem::~Filesystem()>:
c000a96c:	83 ec 0c             	sub    esp,0xc
c000a96f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a973:	e8 e6 ff ff ff       	call   c000a95e <Filesystem::~Filesystem()>
c000a978:	83 c4 04             	add    esp,0x4
c000a97b:	83 ec 08             	sub    esp,0x8
c000a97e:	6a 08                	push   0x8
c000a980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a984:	e8 9a fb ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000a989:	83 c4 10             	add    esp,0x10
c000a98c:	83 c4 0c             	add    esp,0xc
c000a98f:	c3                   	ret    

c000a990 <Fs::getcwd(Process*, char*, int)>:
c000a990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a994:	31 c0                	xor    eax,eax
c000a996:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a999:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a99d:	7d 15                	jge    c000a9b4 <Fs::getcwd(Process*, char*, int)+0x24>
c000a99f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a9aa:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a9ad:	84 c9                	test   cl,cl
c000a9af:	74 06                	je     c000a9b7 <Fs::getcwd(Process*, char*, int)+0x27>
c000a9b1:	40                   	inc    eax
c000a9b2:	eb e2                	jmp    c000a996 <Fs::getcwd(Process*, char*, int)+0x6>
c000a9b4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9b7:	31 c0                	xor    eax,eax
c000a9b9:	c3                   	ret    

c000a9ba <Fs::initVFS()>:
c000a9ba:	83 ec 18             	sub    esp,0x18
c000a9bd:	6a 08                	push   0x8
c000a9bf:	e8 f5 cd ff ff       	call   c00077b9 <malloc>
c000a9c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c7:	e8 e0 c7 00 00       	call   c00171ac <FAT::FAT()>
c000a9cc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9d3:	e8 e1 cd ff ff       	call   c00077b9 <malloc>
c000a9d8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9db:	e8 28 d5 00 00       	call   c0017f08 <ISO9660::ISO9660()>
c000a9e0:	83 c4 1c             	add    esp,0x1c
c000a9e3:	c3                   	ret    

c000a9e4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9e4:	55                   	push   ebp
c000a9e5:	57                   	push   edi
c000a9e6:	56                   	push   esi
c000a9e7:	53                   	push   ebx
c000a9e8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9ee:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9f5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9fc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aa03:	68 00 04 00 00       	push   0x400
c000aa08:	6a 00                	push   0x0
c000aa0a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa0e:	56                   	push   esi
c000aa0f:	e8 bc 5a ff ff       	call   c00004d0 <memset>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa1b:	75 0b                	jne    c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa1d:	50                   	push   eax
c000aa1e:	50                   	push   eax
c000aa1f:	57                   	push   edi
c000aa20:	56                   	push   esi
c000aa21:	e8 da 5b ff ff       	call   c0000600 <strcpy>
c000aa26:	eb 41                	jmp    c000aa69 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa28:	8a 07                	mov    al,BYTE PTR [edi]
c000aa2a:	3c 5c                	cmp    al,0x5c
c000aa2c:	74 04                	je     c000aa32 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa2e:	3c 2f                	cmp    al,0x2f
c000aa30:	75 18                	jne    c000aa4a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa32:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa35:	3c 60                	cmp    al,0x60
c000aa37:	7e 03                	jle    c000aa3c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa39:	83 e8 20             	sub    eax,0x20
c000aa3c:	88 04 24             	mov    BYTE PTR [esp],al
c000aa3f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa46:	50                   	push   eax
c000aa47:	50                   	push   eax
c000aa48:	eb 18                	jmp    c000aa62 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa4a:	50                   	push   eax
c000aa4b:	50                   	push   eax
c000aa4c:	55                   	push   ebp
c000aa4d:	56                   	push   esi
c000aa4e:	e8 ad 5b ff ff       	call   c0000600 <strcpy>
c000aa53:	5a                   	pop    edx
c000aa54:	59                   	pop    ecx
c000aa55:	68 7a ec 01 c0       	push   0xc001ec7a
c000aa5a:	56                   	push   esi
c000aa5b:	e8 60 5d ff ff       	call   c00007c0 <strcat>
c000aa60:	5d                   	pop    ebp
c000aa61:	58                   	pop    eax
c000aa62:	57                   	push   edi
c000aa63:	56                   	push   esi
c000aa64:	e8 57 5d ff ff       	call   c00007c0 <strcat>
c000aa69:	83 c4 10             	add    esp,0x10
c000aa6c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa6f:	3c 60                	cmp    al,0x60
c000aa71:	7e 03                	jle    c000aa76 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa73:	83 e8 20             	sub    eax,0x20
c000aa76:	88 04 24             	mov    BYTE PTR [esp],al
c000aa79:	88 03                	mov    BYTE PTR [ebx],al
c000aa7b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa82:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa88:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa8c:	bf 03 00 00 00       	mov    edi,0x3
c000aa91:	b8 03 00 00 00       	mov    eax,0x3
c000aa96:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa99:	84 d2                	test   dl,dl
c000aa9b:	0f 84 91 00 00 00    	je     c000ab32 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aaa1:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aaa4:	80 fa 5c             	cmp    dl,0x5c
c000aaa7:	74 05                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aaa9:	80 fa 2f             	cmp    dl,0x2f
c000aaac:	75 12                	jne    c000aac0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaae:	89 c5                	mov    ebp,eax
c000aab0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aab5:	74 09                	je     c000aac0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aab7:	40                   	inc    eax
c000aab8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aabc:	89 cf                	mov    edi,ecx
c000aabe:	eb d6                	jmp    c000aa96 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aac0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aac5:	75 5b                	jne    c000ab22 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aac7:	80 fa 2e             	cmp    dl,0x2e
c000aaca:	75 56                	jne    c000ab22 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aacc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aad0:	74 19                	je     c000aaeb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aad2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aad7:	74 53                	je     c000ab2c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aad9:	89 f9                	mov    ecx,edi
c000aadb:	41                   	inc    ecx
c000aadc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aadf:	80 fa 2f             	cmp    dl,0x2f
c000aae2:	74 f7                	je     c000aadb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aae4:	80 fa 5c             	cmp    dl,0x5c
c000aae7:	74 f2                	je     c000aadb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aae9:	eb d1                	jmp    c000aabc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aaeb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aaf0:	74 3a                	je     c000ab2c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aaf2:	83 f8 03             	cmp    eax,0x3
c000aaf5:	74 c5                	je     c000aabc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aaf7:	41                   	inc    ecx
c000aaf8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aafb:	80 fa 2f             	cmp    dl,0x2f
c000aafe:	74 f7                	je     c000aaf7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab00:	80 fa 5c             	cmp    dl,0x5c
c000ab03:	74 f2                	je     c000aaf7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab05:	48                   	dec    eax
c000ab06:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab0a:	75 06                	jne    c000ab12 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab0c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab10:	eb f3                	jmp    c000ab05 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab12:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab16:	74 07                	je     c000ab1f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab18:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab1c:	48                   	dec    eax
c000ab1d:	eb f3                	jmp    c000ab12 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab1f:	40                   	inc    eax
c000ab20:	eb 9a                	jmp    c000aabc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab22:	80 fa 2f             	cmp    dl,0x2f
c000ab25:	74 95                	je     c000aabc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab27:	80 fa 5c             	cmp    dl,0x5c
c000ab2a:	74 90                	je     c000aabc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab2c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab2f:	40                   	inc    eax
c000ab30:	eb 8a                	jmp    c000aabc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab32:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab36:	83 ec 0c             	sub    esp,0xc
c000ab39:	53                   	push   ebx
c000ab3a:	e8 01 5a ff ff       	call   c0000540 <strlen>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab47:	75 26                	jne    c000ab6f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab49:	83 ec 0c             	sub    esp,0xc
c000ab4c:	53                   	push   ebx
c000ab4d:	e8 ee 59 ff ff       	call   c0000540 <strlen>
c000ab52:	83 c4 10             	add    esp,0x10
c000ab55:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab5a:	74 26                	je     c000ab82 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab5c:	83 ec 0c             	sub    esp,0xc
c000ab5f:	53                   	push   ebx
c000ab60:	e8 db 59 ff ff       	call   c0000540 <strlen>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab6d:	eb c7                	jmp    c000ab36 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab6f:	83 ec 0c             	sub    esp,0xc
c000ab72:	53                   	push   ebx
c000ab73:	e8 c8 59 ff ff       	call   c0000540 <strlen>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab80:	74 c7                	je     c000ab49 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab82:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab88:	5b                   	pop    ebx
c000ab89:	5e                   	pop    esi
c000ab8a:	5f                   	pop    edi
c000ab8b:	5d                   	pop    ebp
c000ab8c:	c3                   	ret    
c000ab8d:	90                   	nop

c000ab8e <File::File(char const*, Process*)>:
c000ab8e:	83 ec 0c             	sub    esp,0xc
c000ab91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab95:	83 ec 08             	sub    esp,0x8
c000ab98:	6a 00                	push   0x0
c000ab9a:	50                   	push   eax
c000ab9b:	e8 a2 e2 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000aba0:	83 c4 10             	add    esp,0x10
c000aba3:	ba c4 de 01 c0       	mov    edx,0xc001dec4
c000aba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abac:	89 10                	mov    DWORD PTR [eax],edx
c000abae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abb2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000abb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbc:	83 c0 0d             	add    eax,0xd
c000abbf:	83 ec 04             	sub    esp,0x4
c000abc2:	52                   	push   edx
c000abc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc7:	50                   	push   eax
c000abc8:	e8 17 fe ff ff       	call   c000a9e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000abcd:	83 c4 10             	add    esp,0x10
c000abd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abd7:	8d 50 bf             	lea    edx,[eax-0x41]
c000abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abde:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abf6:	25 ff 00 00 00       	and    eax,0xff
c000abfb:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac02:	85 c0                	test   eax,eax
c000ac04:	74 42                	je     c000ac48 <File::File(char const*, Process*)+0xba>
c000ac06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac0a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac10:	25 ff 00 00 00       	and    eax,0xff
c000ac15:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac1c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac22:	85 c0                	test   eax,eax
c000ac24:	75 22                	jne    c000ac48 <File::File(char const*, Process*)+0xba>
c000ac26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac2a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac30:	25 ff 00 00 00       	and    eax,0xff
c000ac35:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac3c:	83 ec 0c             	sub    esp,0xc
c000ac3f:	50                   	push   eax
c000ac40:	e8 39 20 00 00       	call   c000cc7e <LogicalDisk::mount()>
c000ac45:	83 c4 10             	add    esp,0x10
c000ac48:	90                   	nop
c000ac49:	83 c4 0c             	add    esp,0xc
c000ac4c:	c3                   	ret    
c000ac4d:	90                   	nop

c000ac4e <File::open(FileOpenMode)>:
c000ac4e:	53                   	push   ebx
c000ac4f:	b8 0b 00 00 00       	mov    eax,0xb
c000ac54:	83 ec 08             	sub    esp,0x8
c000ac57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac5b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac62:	80 fa 19             	cmp    dl,0x19
c000ac65:	77 40                	ja     c000aca7 <File::open(FileOpenMode)+0x59>
c000ac67:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac6e:	85 d2                	test   edx,edx
c000ac70:	74 35                	je     c000aca7 <File::open(FileOpenMode)+0x59>
c000ac72:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac78:	85 d2                	test   edx,edx
c000ac7a:	74 2b                	je     c000aca7 <File::open(FileOpenMode)+0x59>
c000ac7c:	b8 06 00 00 00       	mov    eax,0x6
c000ac81:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac85:	75 20                	jne    c000aca7 <File::open(FileOpenMode)+0x59>
c000ac87:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac89:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac93:	51                   	push   ecx
c000ac94:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac97:	51                   	push   ecx
c000ac98:	52                   	push   edx
c000ac99:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac9c:	83 c4 10             	add    esp,0x10
c000ac9f:	85 c0                	test   eax,eax
c000aca1:	75 04                	jne    c000aca7 <File::open(FileOpenMode)+0x59>
c000aca3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000aca7:	83 c4 08             	add    esp,0x8
c000acaa:	5b                   	pop    ebx
c000acab:	c3                   	ret    

c000acac <File::close()>:
c000acac:	53                   	push   ebx
c000acad:	b8 0b 00 00 00       	mov    eax,0xb
c000acb2:	83 ec 08             	sub    esp,0x8
c000acb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acb9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acc0:	80 fa 19             	cmp    dl,0x19
c000acc3:	77 41                	ja     c000ad06 <File::close()+0x5a>
c000acc5:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000accc:	85 db                	test   ebx,ebx
c000acce:	74 36                	je     c000ad06 <File::close()+0x5a>
c000acd0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000acd7:	74 2d                	je     c000ad06 <File::close()+0x5a>
c000acd9:	b8 05 00 00 00       	mov    eax,0x5
c000acde:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ace2:	74 22                	je     c000ad06 <File::close()+0x5a>
c000ace4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ace8:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000acef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000acf5:	53                   	push   ebx
c000acf6:	53                   	push   ebx
c000acf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000acf9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acff:	50                   	push   eax
c000ad00:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ad03:	83 c4 10             	add    esp,0x10
c000ad06:	83 c4 08             	add    esp,0x8
c000ad09:	5b                   	pop    ebx
c000ad0a:	c3                   	ret    
c000ad0b:	90                   	nop

c000ad0c <File::seek(unsigned long long)>:
c000ad0c:	56                   	push   esi
c000ad0d:	53                   	push   ebx
c000ad0e:	b8 0b 00 00 00       	mov    eax,0xb
c000ad13:	51                   	push   ecx
c000ad14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad1c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad27:	80 fa 19             	cmp    dl,0x19
c000ad2a:	77 31                	ja     c000ad5d <File::seek(unsigned long long)+0x51>
c000ad2c:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad33:	85 d2                	test   edx,edx
c000ad35:	74 26                	je     c000ad5d <File::seek(unsigned long long)+0x51>
c000ad37:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad3d:	85 d2                	test   edx,edx
c000ad3f:	74 1c                	je     c000ad5d <File::seek(unsigned long long)+0x51>
c000ad41:	b8 05 00 00 00       	mov    eax,0x5
c000ad46:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad4a:	74 11                	je     c000ad5d <File::seek(unsigned long long)+0x51>
c000ad4c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad4e:	53                   	push   ebx
c000ad4f:	51                   	push   ecx
c000ad50:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad56:	52                   	push   edx
c000ad57:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad5a:	83 c4 10             	add    esp,0x10
c000ad5d:	5a                   	pop    edx
c000ad5e:	5b                   	pop    ebx
c000ad5f:	5e                   	pop    esi
c000ad60:	c3                   	ret    
c000ad61:	90                   	nop

c000ad62 <File::tell(unsigned long long*)>:
c000ad62:	83 ec 0c             	sub    esp,0xc
c000ad65:	b8 0b 00 00 00       	mov    eax,0xb
c000ad6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad6e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad75:	80 fa 19             	cmp    dl,0x19
c000ad78:	77 34                	ja     c000adae <File::tell(unsigned long long*)+0x4c>
c000ad7a:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad81:	85 d2                	test   edx,edx
c000ad83:	74 29                	je     c000adae <File::tell(unsigned long long*)+0x4c>
c000ad85:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad8b:	85 d2                	test   edx,edx
c000ad8d:	74 1f                	je     c000adae <File::tell(unsigned long long*)+0x4c>
c000ad8f:	b8 05 00 00 00       	mov    eax,0x5
c000ad94:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad98:	74 14                	je     c000adae <File::tell(unsigned long long*)+0x4c>
c000ad9a:	50                   	push   eax
c000ad9b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ada1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ada7:	52                   	push   edx
c000ada8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000adab:	83 c4 10             	add    esp,0x10
c000adae:	83 c4 0c             	add    esp,0xc
c000adb1:	c3                   	ret    

c000adb2 <File::rewind()>:
c000adb2:	83 ec 10             	sub    esp,0x10
c000adb5:	6a 00                	push   0x0
c000adb7:	6a 00                	push   0x0
c000adb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adbd:	e8 4a ff ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c000adc2:	83 c4 1c             	add    esp,0x1c
c000adc5:	c3                   	ret    

c000adc6 <File::unlink()>:
c000adc6:	83 ec 0c             	sub    esp,0xc
c000adc9:	b8 0b 00 00 00       	mov    eax,0xb
c000adce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000add2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000add9:	80 f9 19             	cmp    cl,0x19
c000addc:	77 2f                	ja     c000ae0d <File::unlink()+0x47>
c000adde:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ade5:	85 c9                	test   ecx,ecx
c000ade7:	74 24                	je     c000ae0d <File::unlink()+0x47>
c000ade9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adef:	85 c9                	test   ecx,ecx
c000adf1:	74 1a                	je     c000ae0d <File::unlink()+0x47>
c000adf3:	b8 06 00 00 00       	mov    eax,0x6
c000adf8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adfc:	75 0f                	jne    c000ae0d <File::unlink()+0x47>
c000adfe:	83 c2 0d             	add    edx,0xd
c000ae01:	50                   	push   eax
c000ae02:	50                   	push   eax
c000ae03:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae05:	52                   	push   edx
c000ae06:	51                   	push   ecx
c000ae07:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ae0a:	83 c4 10             	add    esp,0x10
c000ae0d:	83 c4 0c             	add    esp,0xc
c000ae10:	c3                   	ret    
c000ae11:	90                   	nop

c000ae12 <File::rename(char const*)>:
c000ae12:	83 ec 0c             	sub    esp,0xc
c000ae15:	b8 0b 00 00 00       	mov    eax,0xb
c000ae1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae25:	80 f9 19             	cmp    cl,0x19
c000ae28:	77 32                	ja     c000ae5c <File::rename(char const*)+0x4a>
c000ae2a:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae31:	85 c9                	test   ecx,ecx
c000ae33:	74 27                	je     c000ae5c <File::rename(char const*)+0x4a>
c000ae35:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae3b:	85 c9                	test   ecx,ecx
c000ae3d:	74 1d                	je     c000ae5c <File::rename(char const*)+0x4a>
c000ae3f:	b8 06 00 00 00       	mov    eax,0x6
c000ae44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae48:	75 12                	jne    c000ae5c <File::rename(char const*)+0x4a>
c000ae4a:	83 c2 0d             	add    edx,0xd
c000ae4d:	50                   	push   eax
c000ae4e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae54:	52                   	push   edx
c000ae55:	51                   	push   ecx
c000ae56:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	83 c4 0c             	add    esp,0xc
c000ae5f:	c3                   	ret    

c000ae60 <File::chfatattr(unsigned char, unsigned char)>:
c000ae60:	57                   	push   edi
c000ae61:	b8 0b 00 00 00       	mov    eax,0xb
c000ae66:	56                   	push   esi
c000ae67:	53                   	push   ebx
c000ae68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae70:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae77:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae7b:	80 f9 19             	cmp    cl,0x19
c000ae7e:	77 37                	ja     c000aeb7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae80:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae87:	85 c9                	test   ecx,ecx
c000ae89:	74 2c                	je     c000aeb7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae8b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae91:	85 c9                	test   ecx,ecx
c000ae93:	74 22                	je     c000aeb7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae95:	b8 06 00 00 00       	mov    eax,0x6
c000ae9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae9e:	75 17                	jne    c000aeb7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aea0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000aea2:	89 f0                	mov    eax,esi
c000aea4:	83 c2 0d             	add    edx,0xd
c000aea7:	0f b6 f0             	movzx  esi,al
c000aeaa:	0f b6 db             	movzx  ebx,bl
c000aead:	56                   	push   esi
c000aeae:	53                   	push   ebx
c000aeaf:	52                   	push   edx
c000aeb0:	51                   	push   ecx
c000aeb1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aeb4:	83 c4 10             	add    esp,0x10
c000aeb7:	5b                   	pop    ebx
c000aeb8:	5e                   	pop    esi
c000aeb9:	5f                   	pop    edi
c000aeba:	c3                   	ret    
c000aebb:	90                   	nop

c000aebc <File::exists()>:
c000aebc:	83 ec 0c             	sub    esp,0xc
c000aebf:	31 c0                	xor    eax,eax
c000aec1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aec5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aecc:	80 f9 19             	cmp    cl,0x19
c000aecf:	77 24                	ja     c000aef5 <File::exists()+0x39>
c000aed1:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000aed8:	85 c9                	test   ecx,ecx
c000aeda:	74 19                	je     c000aef5 <File::exists()+0x39>
c000aedc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000aee2:	85 c9                	test   ecx,ecx
c000aee4:	74 0f                	je     c000aef5 <File::exists()+0x39>
c000aee6:	83 c2 0d             	add    edx,0xd
c000aee9:	50                   	push   eax
c000aeea:	50                   	push   eax
c000aeeb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aeed:	52                   	push   edx
c000aeee:	51                   	push   ecx
c000aeef:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	83 c4 0c             	add    esp,0xc
c000aef8:	c3                   	ret    
c000aef9:	90                   	nop

c000aefa <File::stat(unsigned long long*, bool*)>:
c000aefa:	56                   	push   esi
c000aefb:	53                   	push   ebx
c000aefc:	50                   	push   eax
c000aefd:	b8 0b 00 00 00       	mov    eax,0xb
c000af02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af06:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af0a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af15:	80 f9 19             	cmp    cl,0x19
c000af18:	77 3d                	ja     c000af57 <File::stat(unsigned long long*, bool*)+0x5d>
c000af1a:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000af21:	85 c9                	test   ecx,ecx
c000af23:	74 32                	je     c000af57 <File::stat(unsigned long long*, bool*)+0x5d>
c000af25:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af2b:	85 c9                	test   ecx,ecx
c000af2d:	74 28                	je     c000af57 <File::stat(unsigned long long*, bool*)+0x5d>
c000af2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af31:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af35:	74 13                	je     c000af4a <File::stat(unsigned long long*, bool*)+0x50>
c000af37:	83 ec 04             	sub    esp,0x4
c000af3a:	56                   	push   esi
c000af3b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af41:	51                   	push   ecx
c000af42:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af45:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af48:	eb 0a                	jmp    c000af54 <File::stat(unsigned long long*, bool*)+0x5a>
c000af4a:	53                   	push   ebx
c000af4b:	83 c2 0d             	add    edx,0xd
c000af4e:	56                   	push   esi
c000af4f:	52                   	push   edx
c000af50:	51                   	push   ecx
c000af51:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	5a                   	pop    edx
c000af58:	5b                   	pop    ebx
c000af59:	5e                   	pop    esi
c000af5a:	c3                   	ret    

c000af5b <Fs::setcwd(Process*, char*)>:
c000af5b:	55                   	push   ebp
c000af5c:	57                   	push   edi
c000af5d:	56                   	push   esi
c000af5e:	53                   	push   ebx
c000af5f:	81 ec 20 02 00 00    	sub    esp,0x220
c000af65:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af6c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af72:	57                   	push   edi
c000af73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af7a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af7e:	56                   	push   esi
c000af7f:	e8 60 fa ff ff       	call   c000a9e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af84:	89 34 24             	mov    DWORD PTR [esp],esi
c000af87:	e8 b4 55 ff ff       	call   c0000540 <strlen>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	83 f8 02             	cmp    eax,0x2
c000af92:	77 15                	ja     c000afa9 <Fs::setcwd(Process*, char*)+0x4e>
c000af94:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af99:	83 eb 41             	sub    ebx,0x41
c000af9c:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000afa3:	85 c0                	test   eax,eax
c000afa5:	75 1c                	jne    c000afc3 <Fs::setcwd(Process*, char*)+0x68>
c000afa7:	eb 2f                	jmp    c000afd8 <Fs::setcwd(Process*, char*)+0x7d>
c000afa9:	83 ec 0c             	sub    esp,0xc
c000afac:	56                   	push   esi
c000afad:	e8 8e 55 ff ff       	call   c0000540 <strlen>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	83 f8 03             	cmp    eax,0x3
c000afb8:	75 57                	jne    c000b011 <Fs::setcwd(Process*, char*)+0xb6>
c000afba:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afbf:	75 50                	jne    c000b011 <Fs::setcwd(Process*, char*)+0xb6>
c000afc1:	eb d1                	jmp    c000af94 <Fs::setcwd(Process*, char*)+0x39>
c000afc3:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000afca:	75 0c                	jne    c000afd8 <Fs::setcwd(Process*, char*)+0x7d>
c000afcc:	83 ec 0c             	sub    esp,0xc
c000afcf:	50                   	push   eax
c000afd0:	e8 a9 1c 00 00       	call   c000cc7e <LogicalDisk::mount()>
c000afd5:	83 c4 10             	add    esp,0x10
c000afd8:	b8 03 00 00 00       	mov    eax,0x3
c000afdd:	83 fb 19             	cmp    ebx,0x19
c000afe0:	0f 87 c6 00 00 00    	ja     c000b0ac <Fs::setcwd(Process*, char*)+0x151>
c000afe6:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000afed:	b8 05 00 00 00       	mov    eax,0x5
c000aff2:	85 d2                	test   edx,edx
c000aff4:	0f 84 b2 00 00 00    	je     c000b0ac <Fs::setcwd(Process*, char*)+0x151>
c000affa:	b8 06 00 00 00       	mov    eax,0x6
c000afff:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b006:	0f 85 92 00 00 00    	jne    c000b09e <Fs::setcwd(Process*, char*)+0x143>
c000b00c:	e9 9b 00 00 00       	jmp    c000b0ac <Fs::setcwd(Process*, char*)+0x151>
c000b011:	83 ec 0c             	sub    esp,0xc
c000b014:	68 14 01 00 00       	push   0x114
c000b019:	e8 9b c7 ff ff       	call   c00077b9 <malloc>
c000b01e:	83 c4 0c             	add    esp,0xc
c000b021:	89 c3                	mov    ebx,eax
c000b023:	55                   	push   ebp
c000b024:	56                   	push   esi
c000b025:	50                   	push   eax
c000b026:	e8 63 fb ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c000b02b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b030:	83 c4 0c             	add    esp,0xc
c000b033:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b037:	50                   	push   eax
c000b038:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b03c:	50                   	push   eax
c000b03d:	53                   	push   ebx
c000b03e:	e8 b7 fe ff ff       	call   c000aefa <File::stat(unsigned long long*, bool*)>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	83 f8 02             	cmp    eax,0x2
c000b049:	74 04                	je     c000b04f <Fs::setcwd(Process*, char*)+0xf4>
c000b04b:	85 c0                	test   eax,eax
c000b04d:	74 1c                	je     c000b06b <Fs::setcwd(Process*, char*)+0x110>
c000b04f:	b8 01 00 00 00       	mov    eax,0x1
c000b054:	85 db                	test   ebx,ebx
c000b056:	74 54                	je     c000b0ac <Fs::setcwd(Process*, char*)+0x151>
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b05d:	53                   	push   ebx
c000b05e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b061:	83 c4 10             	add    esp,0x10
c000b064:	b8 01 00 00 00       	mov    eax,0x1
c000b069:	eb 41                	jmp    c000b0ac <Fs::setcwd(Process*, char*)+0x151>
c000b06b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b070:	75 1c                	jne    c000b08e <Fs::setcwd(Process*, char*)+0x133>
c000b072:	b8 02 00 00 00       	mov    eax,0x2
c000b077:	85 db                	test   ebx,ebx
c000b079:	74 31                	je     c000b0ac <Fs::setcwd(Process*, char*)+0x151>
c000b07b:	83 ec 0c             	sub    esp,0xc
c000b07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b080:	53                   	push   ebx
c000b081:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b084:	83 c4 10             	add    esp,0x10
c000b087:	b8 02 00 00 00       	mov    eax,0x2
c000b08c:	eb 1e                	jmp    c000b0ac <Fs::setcwd(Process*, char*)+0x151>
c000b08e:	85 db                	test   ebx,ebx
c000b090:	74 0c                	je     c000b09e <Fs::setcwd(Process*, char*)+0x143>
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b097:	53                   	push   ebx
c000b098:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b09b:	83 c4 10             	add    esp,0x10
c000b09e:	50                   	push   eax
c000b09f:	50                   	push   eax
c000b0a0:	56                   	push   esi
c000b0a1:	57                   	push   edi
c000b0a2:	e8 59 55 ff ff       	call   c0000600 <strcpy>
c000b0a7:	83 c4 10             	add    esp,0x10
c000b0aa:	31 c0                	xor    eax,eax
c000b0ac:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0b2:	5b                   	pop    ebx
c000b0b3:	5e                   	pop    esi
c000b0b4:	5f                   	pop    edi
c000b0b5:	5d                   	pop    ebp
c000b0b6:	c3                   	ret    
c000b0b7:	90                   	nop

c000b0b8 <Directory::Directory(char const*, Process*)>:
c000b0b8:	83 ec 0c             	sub    esp,0xc
c000b0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bf:	83 ec 08             	sub    esp,0x8
c000b0c2:	6a 00                	push   0x0
c000b0c4:	50                   	push   eax
c000b0c5:	e8 78 dd ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000b0ca:	83 c4 10             	add    esp,0x10
c000b0cd:	ba e0 de 01 c0       	mov    edx,0xc001dee0
c000b0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d6:	89 10                	mov    DWORD PTR [eax],edx
c000b0d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0dc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e6:	83 c0 0d             	add    eax,0xd
c000b0e9:	83 ec 04             	sub    esp,0x4
c000b0ec:	52                   	push   edx
c000b0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0f1:	50                   	push   eax
c000b0f2:	e8 ed f8 ff ff       	call   c000a9e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0f7:	83 c4 10             	add    esp,0x10
c000b0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fe:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b101:	8d 50 bf             	lea    edx,[eax-0x41]
c000b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b108:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b112:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b11a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b120:	25 ff 00 00 00       	and    eax,0xff
c000b125:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b12c:	85 c0                	test   eax,eax
c000b12e:	74 42                	je     c000b172 <Directory::Directory(char const*, Process*)+0xba>
c000b130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b134:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b13a:	25 ff 00 00 00       	and    eax,0xff
c000b13f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b146:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b14c:	85 c0                	test   eax,eax
c000b14e:	75 22                	jne    c000b172 <Directory::Directory(char const*, Process*)+0xba>
c000b150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b154:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b15a:	25 ff 00 00 00       	and    eax,0xff
c000b15f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	50                   	push   eax
c000b16a:	e8 0f 1b 00 00       	call   c000cc7e <LogicalDisk::mount()>
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	90                   	nop
c000b173:	83 c4 0c             	add    esp,0xc
c000b176:	c3                   	ret    
c000b177:	90                   	nop

c000b178 <Directory::open()>:
c000b178:	53                   	push   ebx
c000b179:	b8 0b 00 00 00       	mov    eax,0xb
c000b17e:	83 ec 08             	sub    esp,0x8
c000b181:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b185:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b18c:	80 fa 19             	cmp    dl,0x19
c000b18f:	77 3d                	ja     c000b1ce <Directory::open()+0x56>
c000b191:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b198:	85 d2                	test   edx,edx
c000b19a:	74 32                	je     c000b1ce <Directory::open()+0x56>
c000b19c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b1a2:	85 d2                	test   edx,edx
c000b1a4:	74 28                	je     c000b1ce <Directory::open()+0x56>
c000b1a6:	b8 06 00 00 00       	mov    eax,0x6
c000b1ab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1af:	75 1d                	jne    c000b1ce <Directory::open()+0x56>
c000b1b1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1b7:	50                   	push   eax
c000b1b8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1ba:	51                   	push   ecx
c000b1bb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1be:	51                   	push   ecx
c000b1bf:	52                   	push   edx
c000b1c0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	85 c0                	test   eax,eax
c000b1c8:	75 04                	jne    c000b1ce <Directory::open()+0x56>
c000b1ca:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1ce:	83 c4 08             	add    esp,0x8
c000b1d1:	5b                   	pop    ebx
c000b1d2:	c3                   	ret    
c000b1d3:	90                   	nop

c000b1d4 <Directory::close()>:
c000b1d4:	53                   	push   ebx
c000b1d5:	b8 0b 00 00 00       	mov    eax,0xb
c000b1da:	83 ec 08             	sub    esp,0x8
c000b1dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1e1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1e8:	80 fa 19             	cmp    dl,0x19
c000b1eb:	77 41                	ja     c000b22e <Directory::close()+0x5a>
c000b1ed:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b1f4:	85 db                	test   ebx,ebx
c000b1f6:	74 36                	je     c000b22e <Directory::close()+0x5a>
c000b1f8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b1ff:	74 2d                	je     c000b22e <Directory::close()+0x5a>
c000b201:	b8 05 00 00 00       	mov    eax,0x5
c000b206:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b20a:	74 22                	je     c000b22e <Directory::close()+0x5a>
c000b20c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b210:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b217:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b21d:	53                   	push   ebx
c000b21e:	53                   	push   ebx
c000b21f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b221:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b227:	50                   	push   eax
c000b228:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	83 c4 08             	add    esp,0x8
c000b231:	5b                   	pop    ebx
c000b232:	c3                   	ret    
c000b233:	90                   	nop

c000b234 <Directory::unlink()>:
c000b234:	83 ec 0c             	sub    esp,0xc
c000b237:	b8 0b 00 00 00       	mov    eax,0xb
c000b23c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b240:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b247:	80 f9 19             	cmp    cl,0x19
c000b24a:	77 2f                	ja     c000b27b <Directory::unlink()+0x47>
c000b24c:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b253:	85 c9                	test   ecx,ecx
c000b255:	74 24                	je     c000b27b <Directory::unlink()+0x47>
c000b257:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b25d:	85 c9                	test   ecx,ecx
c000b25f:	74 1a                	je     c000b27b <Directory::unlink()+0x47>
c000b261:	b8 06 00 00 00       	mov    eax,0x6
c000b266:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b26a:	75 0f                	jne    c000b27b <Directory::unlink()+0x47>
c000b26c:	83 c2 0d             	add    edx,0xd
c000b26f:	50                   	push   eax
c000b270:	50                   	push   eax
c000b271:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b273:	52                   	push   edx
c000b274:	51                   	push   ecx
c000b275:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	c3                   	ret    
c000b27f:	90                   	nop

c000b280 <Directory::rename(char const*)>:
c000b280:	83 ec 0c             	sub    esp,0xc
c000b283:	b8 0b 00 00 00       	mov    eax,0xb
c000b288:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b28c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b293:	80 f9 19             	cmp    cl,0x19
c000b296:	77 32                	ja     c000b2ca <Directory::rename(char const*)+0x4a>
c000b298:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b29f:	85 c9                	test   ecx,ecx
c000b2a1:	74 27                	je     c000b2ca <Directory::rename(char const*)+0x4a>
c000b2a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2a9:	85 c9                	test   ecx,ecx
c000b2ab:	74 1d                	je     c000b2ca <Directory::rename(char const*)+0x4a>
c000b2ad:	b8 06 00 00 00       	mov    eax,0x6
c000b2b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2b6:	75 12                	jne    c000b2ca <Directory::rename(char const*)+0x4a>
c000b2b8:	83 c2 0d             	add    edx,0xd
c000b2bb:	50                   	push   eax
c000b2bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2c2:	52                   	push   edx
c000b2c3:	51                   	push   ecx
c000b2c4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2c7:	83 c4 10             	add    esp,0x10
c000b2ca:	83 c4 0c             	add    esp,0xc
c000b2cd:	c3                   	ret    

c000b2ce <Directory::exists()>:
c000b2ce:	83 ec 0c             	sub    esp,0xc
c000b2d1:	31 c0                	xor    eax,eax
c000b2d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2d7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2de:	80 f9 19             	cmp    cl,0x19
c000b2e1:	77 24                	ja     c000b307 <Directory::exists()+0x39>
c000b2e3:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2ea:	85 c9                	test   ecx,ecx
c000b2ec:	74 19                	je     c000b307 <Directory::exists()+0x39>
c000b2ee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2f4:	85 c9                	test   ecx,ecx
c000b2f6:	74 0f                	je     c000b307 <Directory::exists()+0x39>
c000b2f8:	83 c2 0d             	add    edx,0xd
c000b2fb:	50                   	push   eax
c000b2fc:	50                   	push   eax
c000b2fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ff:	52                   	push   edx
c000b300:	51                   	push   ecx
c000b301:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b304:	83 c4 10             	add    esp,0x10
c000b307:	83 c4 0c             	add    esp,0xc
c000b30a:	c3                   	ret    
c000b30b:	90                   	nop

c000b30c <Directory::read(dirent*)>:
c000b30c:	83 ec 1c             	sub    esp,0x1c
c000b30f:	b8 0b 00 00 00       	mov    eax,0xb
c000b314:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b318:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b31f:	80 fa 19             	cmp    dl,0x19
c000b322:	77 30                	ja     c000b354 <Directory::read(dirent*)+0x48>
c000b324:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b32b:	85 d2                	test   edx,edx
c000b32d:	74 25                	je     c000b354 <Directory::read(dirent*)+0x48>
c000b32f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b336:	74 1c                	je     c000b354 <Directory::read(dirent*)+0x48>
c000b338:	83 ec 0c             	sub    esp,0xc
c000b33b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b33d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b341:	52                   	push   edx
c000b342:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b346:	6a 00                	push   0x0
c000b348:	68 10 01 00 00       	push   0x110
c000b34d:	51                   	push   ecx
c000b34e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b351:	83 c4 20             	add    esp,0x20
c000b354:	83 c4 1c             	add    esp,0x1c
c000b357:	c3                   	ret    

c000b358 <Directory::create()>:
c000b358:	83 ec 0c             	sub    esp,0xc
c000b35b:	b8 0b 00 00 00       	mov    eax,0xb
c000b360:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b364:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b36b:	80 f9 19             	cmp    cl,0x19
c000b36e:	77 2f                	ja     c000b39f <Directory::create()+0x47>
c000b370:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b377:	85 c9                	test   ecx,ecx
c000b379:	74 24                	je     c000b39f <Directory::create()+0x47>
c000b37b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b381:	85 c9                	test   ecx,ecx
c000b383:	74 1a                	je     c000b39f <Directory::create()+0x47>
c000b385:	b8 06 00 00 00       	mov    eax,0x6
c000b38a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b38e:	75 0f                	jne    c000b39f <Directory::create()+0x47>
c000b390:	83 c2 0d             	add    edx,0xd
c000b393:	50                   	push   eax
c000b394:	50                   	push   eax
c000b395:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b397:	52                   	push   edx
c000b398:	51                   	push   ecx
c000b399:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	83 c4 0c             	add    esp,0xc
c000b3a2:	c3                   	ret    
c000b3a3:	90                   	nop

c000b3a4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b3a4:	b8 0a 00 00 00       	mov    eax,0xa
c000b3a9:	c3                   	ret    
c000b3aa:	66 90                	xchg   ax,ax

c000b3ac <Bus::Bus(char const*)>:
c000b3ac:	83 ec 0c             	sub    esp,0xc
c000b3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b3:	83 ec 08             	sub    esp,0x8
c000b3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ba:	50                   	push   eax
c000b3bb:	e8 30 08 00 00       	call   c000bbf0 <Device::Device(char const*)>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	ba fc de 01 c0       	mov    edx,0xc001defc
c000b3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3cc:	89 10                	mov    DWORD PTR [eax],edx
c000b3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3dc:	90                   	nop
c000b3dd:	83 c4 0c             	add    esp,0xc
c000b3e0:	c3                   	ret    
c000b3e1:	90                   	nop
c000b3e2:	66 90                	xchg   ax,ax

c000b3e4 <Bus::~Bus()>:
c000b3e4:	83 ec 0c             	sub    esp,0xc
c000b3e7:	ba fc de 01 c0       	mov    edx,0xc001defc
c000b3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f0:	89 10                	mov    DWORD PTR [eax],edx
c000b3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f6:	83 ec 0c             	sub    esp,0xc
c000b3f9:	50                   	push   eax
c000b3fa:	e8 5b 05 00 00       	call   c000b95a <Device::~Device()>
c000b3ff:	83 c4 10             	add    esp,0x10
c000b402:	90                   	nop
c000b403:	83 c4 0c             	add    esp,0xc
c000b406:	c3                   	ret    
c000b407:	90                   	nop

c000b408 <Bus::~Bus()>:
c000b408:	83 ec 0c             	sub    esp,0xc
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b412:	e8 cd ff ff ff       	call   c000b3e4 <Bus::~Bus()>
c000b417:	83 c4 10             	add    esp,0x10
c000b41a:	83 ec 08             	sub    esp,0x8
c000b41d:	68 58 01 00 00       	push   0x158
c000b422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b426:	e8 f8 f0 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	83 c4 0c             	add    esp,0xc
c000b431:	c3                   	ret    

c000b432 <beepThread(void*)>:
c000b432:	83 ec 0c             	sub    esp,0xc
c000b435:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b43a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b43e:	48                   	dec    eax
c000b43f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b444:	75 01                	jne    c000b447 <beepThread(void*)+0x15>
c000b446:	fb                   	sti    
c000b447:	83 ec 0c             	sub    esp,0xc
c000b44a:	6b c2 0a             	imul   eax,edx,0xa
c000b44d:	50                   	push   eax
c000b44e:	e8 3d 87 00 00       	call   c0013b90 <milliTenthSleep(unsigned int)>
c000b453:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b45a:	e8 e3 a4 00 00       	call   c0015942 <HalMakeBeep(int)>
c000b45f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b467:	83 c4 1c             	add    esp,0x1c
c000b46a:	e9 1d 86 00 00       	jmp    c0013a8c <blockTask(TaskState)>

c000b46f <Krnl::beep(int, int, bool)>:
c000b46f:	56                   	push   esi
c000b470:	53                   	push   ebx
c000b471:	83 ec 10             	sub    esp,0x10
c000b474:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b478:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b480:	e8 bd a4 00 00       	call   c0015942 <HalMakeBeep(int)>
c000b485:	83 c4 10             	add    esp,0x10
c000b488:	89 f0                	mov    eax,esi
c000b48a:	84 c0                	test   al,al
c000b48c:	74 1e                	je     c000b4ac <Krnl::beep(int, int, bool)+0x3d>
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	6b db 0a             	imul   ebx,ebx,0xa
c000b494:	53                   	push   ebx
c000b495:	e8 f6 86 00 00       	call   c0013b90 <milliTenthSleep(unsigned int)>
c000b49a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b4a2:	83 c4 14             	add    esp,0x14
c000b4a5:	5b                   	pop    ebx
c000b4a6:	5e                   	pop    esi
c000b4a7:	e9 96 a4 00 00       	jmp    c0015942 <HalMakeBeep(int)>
c000b4ac:	68 e6 00 00 00       	push   0xe6
c000b4b1:	53                   	push   ebx
c000b4b2:	68 32 b4 00 c0       	push   0xc000b432
c000b4b7:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b4bd:	e8 ae 81 00 00       	call   c0013670 <Process::createThread(void (*)(void*), void*, int)>
c000b4c2:	83 c4 14             	add    esp,0x14
c000b4c5:	5b                   	pop    ebx
c000b4c6:	5e                   	pop    esi
c000b4c7:	c3                   	ret    

c000b4c8 <User::loadClockSettings(int)>:
c000b4c8:	53                   	push   ebx
c000b4c9:	83 ec 14             	sub    esp,0x14
c000b4cc:	68 14 01 00 00       	push   0x114
c000b4d1:	e8 e3 c2 ff ff       	call   c00077b9 <malloc>
c000b4d6:	83 c4 0c             	add    esp,0xc
c000b4d9:	89 c3                	mov    ebx,eax
c000b4db:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b4e1:	68 20 df 01 c0       	push   0xc001df20
c000b4e6:	50                   	push   eax
c000b4e7:	e8 a2 f6 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c000b4ec:	58                   	pop    eax
c000b4ed:	5a                   	pop    edx
c000b4ee:	6a 01                	push   0x1
c000b4f0:	53                   	push   ebx
c000b4f1:	e8 58 f7 ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c000b4f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4f9:	e8 ae f7 ff ff       	call   c000acac <File::close()>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	85 db                	test   ebx,ebx
c000b503:	74 0f                	je     c000b514 <User::loadClockSettings(int)+0x4c>
c000b505:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b507:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b50b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b50e:	83 c4 08             	add    esp,0x8
c000b511:	5b                   	pop    ebx
c000b512:	ff e0                	jmp    eax
c000b514:	83 c4 08             	add    esp,0x8
c000b517:	5b                   	pop    ebx
c000b518:	c3                   	ret    
c000b519:	90                   	nop

c000b51a <Clock::Clock(char const*)>:
c000b51a:	83 ec 0c             	sub    esp,0xc
c000b51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b521:	83 ec 08             	sub    esp,0x8
c000b524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b528:	50                   	push   eax
c000b529:	e8 c2 06 00 00       	call   c000bbf0 <Device::Device(char const*)>
c000b52e:	83 c4 10             	add    esp,0x10
c000b531:	ba 48 df 01 c0       	mov    edx,0xc001df48
c000b536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b53a:	89 10                	mov    DWORD PTR [eax],edx
c000b53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b540:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b54a:	90                   	nop
c000b54b:	83 c4 0c             	add    esp,0xc
c000b54e:	c3                   	ret    
c000b54f:	90                   	nop

c000b550 <Clock::~Clock()>:
c000b550:	83 ec 0c             	sub    esp,0xc
c000b553:	ba 48 df 01 c0       	mov    edx,0xc001df48
c000b558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b55c:	89 10                	mov    DWORD PTR [eax],edx
c000b55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	50                   	push   eax
c000b566:	e8 ef 03 00 00       	call   c000b95a <Device::~Device()>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	90                   	nop
c000b56f:	83 c4 0c             	add    esp,0xc
c000b572:	c3                   	ret    
c000b573:	90                   	nop

c000b574 <Clock::~Clock()>:
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	83 ec 0c             	sub    esp,0xc
c000b57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57e:	e8 cd ff ff ff       	call   c000b550 <Clock::~Clock()>
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	83 ec 08             	sub    esp,0x8
c000b589:	68 58 01 00 00       	push   0x158
c000b58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b592:	e8 8c ef ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000b597:	83 c4 10             	add    esp,0x10
c000b59a:	83 c4 0c             	add    esp,0xc
c000b59d:	c3                   	ret    

c000b59e <Clock::timeInSecondsLocal()>:
c000b59e:	53                   	push   ebx
c000b59f:	83 ec 14             	sub    esp,0x14
c000b5a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5a8:	50                   	push   eax
c000b5a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b5ac:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b5b3:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b5b9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5bf:	89 cb                	mov    ebx,ecx
c000b5c1:	c1 fb 1f             	sar    ebx,0x1f
c000b5c4:	01 c8                	add    eax,ecx
c000b5c6:	11 da                	adc    edx,ebx
c000b5c8:	83 c4 10             	add    esp,0x10
c000b5cb:	31 c9                	xor    ecx,ecx
c000b5cd:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b5d4:	74 05                	je     c000b5db <Clock::timeInSecondsLocal()+0x3d>
c000b5d6:	b9 08 07 00 00       	mov    ecx,0x708
c000b5db:	31 db                	xor    ebx,ebx
c000b5dd:	01 c8                	add    eax,ecx
c000b5df:	11 da                	adc    edx,ebx
c000b5e1:	83 c4 08             	add    esp,0x8
c000b5e4:	5b                   	pop    ebx
c000b5e5:	c3                   	ret    

c000b5e6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5e6:	57                   	push   edi
c000b5e7:	56                   	push   esi
c000b5e8:	53                   	push   ebx
c000b5e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5f7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5fa:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b601:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b607:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b60d:	99                   	cdq    
c000b60e:	29 c6                	sub    esi,eax
c000b610:	19 d7                	sbb    edi,edx
c000b612:	89 f0                	mov    eax,esi
c000b614:	89 fa                	mov    edx,edi
c000b616:	31 f6                	xor    esi,esi
c000b618:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b61f:	74 05                	je     c000b626 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b621:	be 08 07 00 00       	mov    esi,0x708
c000b626:	31 ff                	xor    edi,edi
c000b628:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b62c:	29 f0                	sub    eax,esi
c000b62e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b632:	19 fa                	sbb    edx,edi
c000b634:	89 d8                	mov    eax,ebx
c000b636:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b63a:	5b                   	pop    ebx
c000b63b:	5e                   	pop    esi
c000b63c:	5f                   	pop    edi
c000b63d:	ff e0                	jmp    eax

c000b63f <datetimeToSeconds(datetime_t)>:
c000b63f:	55                   	push   ebp
c000b640:	57                   	push   edi
c000b641:	56                   	push   esi
c000b642:	53                   	push   ebx
c000b643:	83 ec 14             	sub    esp,0x14
c000b646:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b64a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b64e:	89 d3                	mov    ebx,edx
c000b650:	0f b6 c6             	movzx  eax,dh
c000b653:	c1 eb 10             	shr    ebx,0x10
c000b656:	48                   	dec    eax
c000b657:	66 81 eb 6c 07       	sub    bx,0x76c
c000b65c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b660:	0f b6 f5             	movzx  esi,ch
c000b663:	89 cf                	mov    edi,ecx
c000b665:	6b f6 3c             	imul   esi,esi,0x3c
c000b668:	c1 ef 10             	shr    edi,0x10
c000b66b:	0f b6 c9             	movzx  ecx,cl
c000b66e:	89 f8                	mov    eax,edi
c000b670:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b676:	0f b6 f8             	movzx  edi,al
c000b679:	0f b6 d2             	movzx  edx,dl
c000b67c:	01 fe                	add    esi,edi
c000b67e:	01 f1                	add    ecx,esi
c000b680:	0f b7 f3             	movzx  esi,bx
c000b683:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b687:	c1 f9 1f             	sar    ecx,0x1f
c000b68a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b68f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b693:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b698:	8b 0c 8d 80 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2080]
c000b69f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b6a3:	76 29                	jbe    c000b6ce <datetimeToSeconds(datetime_t)+0x8f>
c000b6a5:	f6 c3 03             	test   bl,0x3
c000b6a8:	75 24                	jne    c000b6ce <datetimeToSeconds(datetime_t)+0x8f>
c000b6aa:	31 d2                	xor    edx,edx
c000b6ac:	bf 64 00 00 00       	mov    edi,0x64
c000b6b1:	89 d8                	mov    eax,ebx
c000b6b3:	66 f7 f7             	div    di
c000b6b6:	66 85 d2             	test   dx,dx
c000b6b9:	75 12                	jne    c000b6cd <datetimeToSeconds(datetime_t)+0x8e>
c000b6bb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6c1:	bf 90 01 00 00       	mov    edi,0x190
c000b6c6:	99                   	cdq    
c000b6c7:	f7 ff                	idiv   edi
c000b6c9:	85 d2                	test   edx,edx
c000b6cb:	75 01                	jne    c000b6ce <datetimeToSeconds(datetime_t)+0x8f>
c000b6cd:	41                   	inc    ecx
c000b6ce:	66 83 fb 46          	cmp    bx,0x46
c000b6d2:	76 45                	jbe    c000b719 <datetimeToSeconds(datetime_t)+0xda>
c000b6d4:	bb 46 00 00 00       	mov    ebx,0x46
c000b6d9:	bf 64 00 00 00       	mov    edi,0x64
c000b6de:	bd 90 01 00 00       	mov    ebp,0x190
c000b6e3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6e8:	f6 c3 03             	test   bl,0x3
c000b6eb:	75 23                	jne    c000b710 <datetimeToSeconds(datetime_t)+0xd1>
c000b6ed:	89 d8                	mov    eax,ebx
c000b6ef:	99                   	cdq    
c000b6f0:	f7 ff                	idiv   edi
c000b6f2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6f7:	85 d2                	test   edx,edx
c000b6f9:	75 15                	jne    c000b710 <datetimeToSeconds(datetime_t)+0xd1>
c000b6fb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b701:	99                   	cdq    
c000b702:	f7 fd                	idiv   ebp
c000b704:	31 c0                	xor    eax,eax
c000b706:	85 d2                	test   edx,edx
c000b708:	0f 94 c0             	sete   al
c000b70b:	05 6d 01 00 00       	add    eax,0x16d
c000b710:	01 c1                	add    ecx,eax
c000b712:	43                   	inc    ebx
c000b713:	39 f3                	cmp    ebx,esi
c000b715:	7c cc                	jl     c000b6e3 <datetimeToSeconds(datetime_t)+0xa4>
c000b717:	eb 3b                	jmp    c000b754 <datetimeToSeconds(datetime_t)+0x115>
c000b719:	74 39                	je     c000b754 <datetimeToSeconds(datetime_t)+0x115>
c000b71b:	b8 45 00 00 00       	mov    eax,0x45
c000b720:	89 c2                	mov    edx,eax
c000b722:	83 e2 03             	and    edx,0x3
c000b725:	39 f0                	cmp    eax,esi
c000b727:	7e 13                	jle    c000b73c <datetimeToSeconds(datetime_t)+0xfd>
c000b729:	85 d2                	test   edx,edx
c000b72b:	0f 94 c2             	sete   dl
c000b72e:	48                   	dec    eax
c000b72f:	0f b6 d2             	movzx  edx,dl
c000b732:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b738:	29 d1                	sub    ecx,edx
c000b73a:	eb e4                	jmp    c000b720 <datetimeToSeconds(datetime_t)+0xe1>
c000b73c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b741:	85 d2                	test   edx,edx
c000b743:	75 0d                	jne    c000b752 <datetimeToSeconds(datetime_t)+0x113>
c000b745:	31 c0                	xor    eax,eax
c000b747:	66 85 db             	test   bx,bx
c000b74a:	0f 95 c0             	setne  al
c000b74d:	05 6d 01 00 00       	add    eax,0x16d
c000b752:	29 c1                	sub    ecx,eax
c000b754:	b8 80 51 01 00       	mov    eax,0x15180
c000b759:	f7 e9                	imul   ecx
c000b75b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b75f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b763:	83 c4 14             	add    esp,0x14
c000b766:	5b                   	pop    ebx
c000b767:	5e                   	pop    esi
c000b768:	5f                   	pop    edi
c000b769:	5d                   	pop    ebp
c000b76a:	c3                   	ret    
c000b76b:	90                   	nop

c000b76c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b76c:	57                   	push   edi
c000b76d:	56                   	push   esi
c000b76e:	53                   	push   ebx
c000b76f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b773:	8b 06                	mov    eax,DWORD PTR [esi]
c000b775:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b778:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b77c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b780:	e8 ba fe ff ff       	call   c000b63f <datetimeToSeconds(datetime_t)>
c000b785:	59                   	pop    ecx
c000b786:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b78d:	5b                   	pop    ebx
c000b78e:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b794:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b79a:	89 cb                	mov    ebx,ecx
c000b79c:	c1 fb 1f             	sar    ebx,0x1f
c000b79f:	29 c8                	sub    eax,ecx
c000b7a1:	19 da                	sbb    edx,ebx
c000b7a3:	31 c9                	xor    ecx,ecx
c000b7a5:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b7ac:	74 05                	je     c000b7b3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b7ae:	b9 08 07 00 00       	mov    ecx,0x708
c000b7b3:	31 db                	xor    ebx,ebx
c000b7b5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7b9:	29 c8                	sub    eax,ecx
c000b7bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7bf:	19 da                	sbb    edx,ebx
c000b7c1:	89 f8                	mov    eax,edi
c000b7c3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7c7:	5b                   	pop    ebx
c000b7c8:	5e                   	pop    esi
c000b7c9:	5f                   	pop    edi
c000b7ca:	ff e0                	jmp    eax

c000b7cc <secondsToDatetime(unsigned long long)>:
c000b7cc:	55                   	push   ebp
c000b7cd:	57                   	push   edi
c000b7ce:	56                   	push   esi
c000b7cf:	53                   	push   ebx
c000b7d0:	83 ec 1c             	sub    esp,0x1c
c000b7d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7db:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7df:	6a 00                	push   0x0
c000b7e1:	68 80 51 01 00       	push   0x15180
c000b7e6:	55                   	push   ebp
c000b7e7:	57                   	push   edi
c000b7e8:	e8 03 0a 01 00       	call   c001c1f0 <__udivdi3>
c000b7ed:	83 c4 10             	add    esp,0x10
c000b7f0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7fa:	6a 00                	push   0x0
c000b7fc:	68 80 51 01 00       	push   0x15180
c000b801:	55                   	push   ebp
c000b802:	57                   	push   edi
c000b803:	bf 10 0e 00 00       	mov    edi,0xe10
c000b808:	e8 e3 0a 01 00       	call   c001c2f0 <__umoddi3>
c000b80d:	83 c4 10             	add    esp,0x10
c000b810:	99                   	cdq    
c000b811:	f7 ff                	idiv   edi
c000b813:	bf 3c 00 00 00       	mov    edi,0x3c
c000b818:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b81b:	89 d0                	mov    eax,edx
c000b81d:	99                   	cdq    
c000b81e:	f7 ff                	idiv   edi
c000b820:	85 db                	test   ebx,ebx
c000b822:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b825:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b828:	79 11                	jns    c000b83b <secondsToDatetime(unsigned long long)+0x6f>
c000b82a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b82e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b834:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b839:	eb 07                	jmp    c000b842 <secondsToDatetime(unsigned long long)+0x76>
c000b83b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b840:	89 d8                	mov    eax,ebx
c000b842:	bf b4 05 00 00       	mov    edi,0x5b4
c000b847:	99                   	cdq    
c000b848:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b84d:	f7 f9                	idiv   ecx
c000b84f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b858:	31 d2                	xor    edx,edx
c000b85a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b862:	01 c3                	add    ebx,eax
c000b864:	89 d8                	mov    eax,ebx
c000b866:	f7 f1                	div    ecx
c000b868:	31 d2                	xor    edx,edx
c000b86a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b86d:	89 d8                	mov    eax,ebx
c000b86f:	f7 f7                	div    edi
c000b871:	31 d2                	xor    edx,edx
c000b873:	29 c1                	sub    ecx,eax
c000b875:	89 d8                	mov    eax,ebx
c000b877:	f7 f5                	div    ebp
c000b879:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b87e:	29 c1                	sub    ecx,eax
c000b880:	31 d2                	xor    edx,edx
c000b882:	89 c8                	mov    eax,ecx
c000b884:	f7 f5                	div    ebp
c000b886:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b88b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b88f:	31 d2                	xor    edx,edx
c000b891:	89 c8                	mov    eax,ecx
c000b893:	f7 f5                	div    ebp
c000b895:	31 d2                	xor    edx,edx
c000b897:	01 c3                	add    ebx,eax
c000b899:	89 c8                	mov    eax,ecx
c000b89b:	f7 f7                	div    edi
c000b89d:	bf 99 00 00 00       	mov    edi,0x99
c000b8a2:	29 c3                	sub    ebx,eax
c000b8a4:	31 d2                	xor    edx,edx
c000b8a6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b8ae:	29 c3                	sub    ebx,eax
c000b8b0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b8b3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8b6:	bb 05 00 00 00       	mov    ebx,0x5
c000b8bb:	83 c1 02             	add    ecx,0x2
c000b8be:	89 c8                	mov    eax,ecx
c000b8c0:	f7 f7                	div    edi
c000b8c2:	31 d2                	xor    edx,edx
c000b8c4:	89 c7                	mov    edi,eax
c000b8c6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8cc:	83 c0 02             	add    eax,0x2
c000b8cf:	f7 f3                	div    ebx
c000b8d1:	89 eb                	mov    ebx,ebp
c000b8d3:	29 c3                	sub    ebx,eax
c000b8d5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8db:	88 1e                	mov    BYTE PTR [esi],bl
c000b8dd:	19 c0                	sbb    eax,eax
c000b8df:	31 d2                	xor    edx,edx
c000b8e1:	83 e0 0c             	and    eax,0xc
c000b8e4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8e8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8f0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8f4:	83 f9 01             	cmp    ecx,0x1
c000b8f7:	0f 96 c2             	setbe  dl
c000b8fa:	41                   	inc    ecx
c000b8fb:	01 d0                	add    eax,edx
c000b8fd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b900:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b904:	83 c4 1c             	add    esp,0x1c
c000b907:	89 f0                	mov    eax,esi
c000b909:	5b                   	pop    ebx
c000b90a:	5e                   	pop    esi
c000b90b:	5f                   	pop    edi
c000b90c:	5d                   	pop    ebp
c000b90d:	c2 04 00             	ret    0x4

c000b910 <Clock::timeInDatetimeLocal()>:
c000b910:	53                   	push   ebx
c000b911:	83 ec 14             	sub    esp,0x14
c000b914:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b918:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b91c:	e8 7d fc ff ff       	call   c000b59e <Clock::timeInSecondsLocal()>
c000b921:	83 c4 0c             	add    esp,0xc
c000b924:	52                   	push   edx
c000b925:	50                   	push   eax
c000b926:	53                   	push   ebx
c000b927:	e8 a0 fe ff ff       	call   c000b7cc <secondsToDatetime(unsigned long long)>
c000b92c:	89 d8                	mov    eax,ebx
c000b92e:	83 c4 14             	add    esp,0x14
c000b931:	5b                   	pop    ebx
c000b932:	c2 04 00             	ret    0x4
c000b935:	90                   	nop

c000b936 <Device::hibernate()>:
c000b936:	c3                   	ret    
c000b937:	90                   	nop

c000b938 <Device::wake()>:
c000b938:	c3                   	ret    
c000b939:	90                   	nop

c000b93a <Device::detect()>:
c000b93a:	c3                   	ret    
c000b93b:	90                   	nop

c000b93c <Device::disableLegacy()>:
c000b93c:	c3                   	ret    
c000b93d:	90                   	nop

c000b93e <Device::powerSaving(PowerSavingLevel)>:
c000b93e:	c3                   	ret    
c000b93f:	90                   	nop

c000b940 <DriverlessDevice::close(int, int, void*)>:
c000b940:	31 c0                	xor    eax,eax
c000b942:	c3                   	ret    
c000b943:	90                   	nop

c000b944 <DriverlessDevice::detect()>:
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <DriverlessDevice::open(int, int, void*)>:
c000b946:	83 ec 18             	sub    esp,0x18
c000b949:	68 b0 df 01 c0       	push   0xc001dfb0
c000b94e:	e8 48 49 00 00       	call   c001029b <KePanic(char const*)>
c000b953:	83 c8 ff             	or     eax,0xffffffff
c000b956:	83 c4 1c             	add    esp,0x1c
c000b959:	c3                   	ret    

c000b95a <Device::~Device()>:
c000b95a:	ba 10 e0 01 c0       	mov    edx,0xc001e010
c000b95f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b963:	89 10                	mov    DWORD PTR [eax],edx
c000b965:	90                   	nop
c000b966:	c3                   	ret    
c000b967:	90                   	nop

c000b968 <Device::~Device()>:
c000b968:	83 ec 0c             	sub    esp,0xc
c000b96b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b96f:	e8 e6 ff ff ff       	call   c000b95a <Device::~Device()>
c000b974:	83 c4 04             	add    esp,0x4
c000b977:	83 ec 08             	sub    esp,0x8
c000b97a:	68 58 01 00 00       	push   0x158
c000b97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b983:	e8 9b eb ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000b988:	83 c4 10             	add    esp,0x10
c000b98b:	83 c4 0c             	add    esp,0xc
c000b98e:	c3                   	ret    
c000b98f:	90                   	nop

c000b990 <Device::findAndLoadDriver()>:
c000b990:	c7 44 24 04 ce df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dfce
c000b998:	e9 7c ec ff ff       	jmp    c000a619 <Dbg::kprintf(char const*, ...)>
c000b99d:	90                   	nop

c000b99e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b99e:	57                   	push   edi
c000b99f:	b9 09 00 00 00       	mov    ecx,0x9
c000b9a4:	56                   	push   esi
c000b9a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b9a9:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b9ad:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b9b7:	81 c7 18 01 00 00    	add    edi,0x118
c000b9bd:	fc                   	cld    
c000b9be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9c0:	5e                   	pop    esi
c000b9c1:	5f                   	pop    edi
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <Device::preOpenACPI(void*, char*, char*)>:
c000b9c4:	57                   	push   edi
c000b9c5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9ca:	56                   	push   esi
c000b9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9d3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9dd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9e3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9ef:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9f4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9fa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba00:	5e                   	pop    esi
c000ba01:	5f                   	pop    edi
c000ba02:	c3                   	ret    
c000ba03:	90                   	nop

c000ba04 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ba04:	53                   	push   ebx
c000ba05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba15:	0f b6 c0             	movzx  eax,al
c000ba18:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba20:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba24:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba28:	5b                   	pop    ebx
c000ba29:	e9 a6 05 00 00       	jmp    c000bfd4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba2e <Device::getParent()>:
c000ba2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba32:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba38:	c3                   	ret    
c000ba39:	90                   	nop

c000ba3a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba42:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba4b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba53:	e9 e8 06 00 00       	jmp    c000c140 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba58 <Device::addChild(Device*)>:
c000ba58:	53                   	push   ebx
c000ba59:	83 ec 08             	sub    esp,0x8
c000ba5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba64:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba6a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba70:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba72:	85 d2                	test   edx,edx
c000ba74:	74 04                	je     c000ba7a <Device::addChild(Device*)+0x22>
c000ba76:	89 d3                	mov    ebx,edx
c000ba78:	eb f6                	jmp    c000ba70 <Device::addChild(Device*)+0x18>
c000ba7a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba7d:	83 ec 0c             	sub    esp,0xc
c000ba80:	6a 08                	push   0x8
c000ba82:	e8 32 bd ff ff       	call   c00077b9 <malloc>
c000ba87:	89 03                	mov    DWORD PTR [ebx],eax
c000ba89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba96:	83 c4 18             	add    esp,0x18
c000ba99:	5b                   	pop    ebx
c000ba9a:	c3                   	ret    
c000ba9b:	90                   	nop

c000ba9c <Device::removeAllChildren()>:
c000ba9c:	56                   	push   esi
c000ba9d:	53                   	push   ebx
c000ba9e:	52                   	push   edx
c000ba9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000baa3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000baa9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baac:	74 17                	je     c000bac5 <Device::removeAllChildren()+0x29>
c000baae:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bab1:	85 c0                	test   eax,eax
c000bab3:	74 0c                	je     c000bac1 <Device::removeAllChildren()+0x25>
c000bab5:	83 ec 0c             	sub    esp,0xc
c000bab8:	8b 10                	mov    edx,DWORD PTR [eax]
c000baba:	50                   	push   eax
c000babb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bac3:	eb e4                	jmp    c000baa9 <Device::removeAllChildren()+0xd>
c000bac5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bacb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bad1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bad7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bade:	58                   	pop    eax
c000badf:	5b                   	pop    ebx
c000bae0:	5e                   	pop    esi
c000bae1:	c3                   	ret    

c000bae2 <Device::hibernateAll()>:
c000bae2:	53                   	push   ebx
c000bae3:	83 ec 14             	sub    esp,0x14
c000bae6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000baea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baec:	53                   	push   ebx
c000baed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000baf0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baf6:	83 c4 10             	add    esp,0x10
c000baf9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bafc:	74 0f                	je     c000bb0d <Device::hibernateAll()+0x2b>
c000bafe:	83 ec 0c             	sub    esp,0xc
c000bb01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb04:	e8 d9 ff ff ff       	call   c000bae2 <Device::hibernateAll()>
c000bb09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb0b:	eb e9                	jmp    c000baf6 <Device::hibernateAll()+0x14>
c000bb0d:	83 c4 08             	add    esp,0x8
c000bb10:	5b                   	pop    ebx
c000bb11:	c3                   	ret    

c000bb12 <Device::wakeAll()>:
c000bb12:	53                   	push   ebx
c000bb13:	83 ec 14             	sub    esp,0x14
c000bb16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb1c:	53                   	push   ebx
c000bb1d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb20:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb2c:	74 0f                	je     c000bb3d <Device::wakeAll()+0x2b>
c000bb2e:	83 ec 0c             	sub    esp,0xc
c000bb31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb34:	e8 d9 ff ff ff       	call   c000bb12 <Device::wakeAll()>
c000bb39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb3b:	eb e9                	jmp    c000bb26 <Device::wakeAll()+0x14>
c000bb3d:	83 c4 08             	add    esp,0x8
c000bb40:	5b                   	pop    ebx
c000bb41:	c3                   	ret    

c000bb42 <Device::detectAll()>:
c000bb42:	53                   	push   ebx
c000bb43:	83 ec 14             	sub    esp,0x14
c000bb46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb4c:	53                   	push   ebx
c000bb4d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb50:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb56:	83 c4 10             	add    esp,0x10
c000bb59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb5c:	74 0f                	je     c000bb6d <Device::detectAll()+0x2b>
c000bb5e:	83 ec 0c             	sub    esp,0xc
c000bb61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb64:	e8 d9 ff ff ff       	call   c000bb42 <Device::detectAll()>
c000bb69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb6b:	eb e9                	jmp    c000bb56 <Device::detectAll()+0x14>
c000bb6d:	83 c4 08             	add    esp,0x8
c000bb70:	5b                   	pop    ebx
c000bb71:	c3                   	ret    

c000bb72 <Device::disableLegacyAll()>:
c000bb72:	c3                   	ret    
c000bb73:	90                   	nop

c000bb74 <Device::loadDriversForAll()>:
c000bb74:	c3                   	ret    
c000bb75:	90                   	nop

c000bb76 <Device::closeAll()>:
c000bb76:	53                   	push   ebx
c000bb77:	83 ec 08             	sub    esp,0x8
c000bb7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb80:	6a 00                	push   0x0
c000bb82:	6a 00                	push   0x0
c000bb84:	6a 00                	push   0x0
c000bb86:	53                   	push   ebx
c000bb87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb8a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb96:	74 0f                	je     c000bba7 <Device::closeAll()+0x31>
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb9e:	e8 d3 ff ff ff       	call   c000bb76 <Device::closeAll()>
c000bba3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bba5:	eb e9                	jmp    c000bb90 <Device::closeAll()+0x1a>
c000bba7:	83 c4 08             	add    esp,0x8
c000bbaa:	5b                   	pop    ebx
c000bbab:	c3                   	ret    

c000bbac <Device::powerSavingAll(PowerSavingLevel)>:
c000bbac:	56                   	push   esi
c000bbad:	53                   	push   ebx
c000bbae:	83 ec 0c             	sub    esp,0xc
c000bbb1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bbb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbbb:	56                   	push   esi
c000bbbc:	53                   	push   ebx
c000bbbd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbc0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbcc:	74 0f                	je     c000bbdd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbce:	52                   	push   edx
c000bbcf:	52                   	push   edx
c000bbd0:	56                   	push   esi
c000bbd1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbd4:	e8 d3 ff ff ff       	call   c000bbac <Device::powerSavingAll(PowerSavingLevel)>
c000bbd9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbdb:	eb e9                	jmp    c000bbc6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbdd:	58                   	pop    eax
c000bbde:	5b                   	pop    ebx
c000bbdf:	5e                   	pop    esi
c000bbe0:	c3                   	ret    
c000bbe1:	90                   	nop

c000bbe2 <Device::setName(char const*)>:
c000bbe2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbea:	e9 11 4a ff ff       	jmp    c0000600 <strcpy>
c000bbef:	90                   	nop

c000bbf0 <Device::Device(char const*)>:
c000bbf0:	83 ec 1c             	sub    esp,0x1c
c000bbf3:	ba 10 e0 01 c0       	mov    edx,0xc001e010
c000bbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbfc:	89 10                	mov    DWORD PTR [eax],edx
c000bbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc02:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc10:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc1e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc2c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc36:	83 ec 08             	sub    esp,0x8
c000bc39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc41:	e8 9c ff ff ff       	call   c000bbe2 <Device::setName(char const*)>
c000bc46:	83 c4 10             	add    esp,0x10
c000bc49:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc51:	83 ec 0c             	sub    esp,0xc
c000bc54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc58:	e8 5c bb ff ff       	call   c00077b9 <malloc>
c000bc5d:	83 c4 10             	add    esp,0x10
c000bc60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc71:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bcae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bcbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcce:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcdc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bce6:	90                   	nop
c000bce7:	83 c4 1c             	add    esp,0x1c
c000bcea:	c3                   	ret    
c000bceb:	90                   	nop

c000bcec <Device::getName()>:
c000bcec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcf0:	05 d0 00 00 00       	add    eax,0xd0
c000bcf5:	c3                   	ret    

c000bcf6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bcf6:	83 ec 0c             	sub    esp,0xc
c000bcf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfd:	83 ec 08             	sub    esp,0x8
c000bd00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd04:	50                   	push   eax
c000bd05:	e8 e6 fe ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	ba 3c e0 01 c0       	mov    edx,0xc001e03c
c000bd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd16:	89 10                	mov    DWORD PTR [eax],edx
c000bd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bd26:	90                   	nop
c000bd27:	83 c4 0c             	add    esp,0xc
c000bd2a:	c3                   	ret    
c000bd2b:	90                   	nop

c000bd2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd2c:	57                   	push   edi
c000bd2d:	56                   	push   esi
c000bd2e:	53                   	push   ebx
c000bd2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd3b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd41:	75 0c                	jne    c000bd4f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd43:	52                   	push   edx
c000bd44:	52                   	push   edx
c000bd45:	53                   	push   ebx
c000bd46:	56                   	push   esi
c000bd47:	e8 56 09 01 00       	call   c001c6a2 <LinkedList<Device>::addElement(Device*)>
c000bd4c:	83 c4 10             	add    esp,0x10
c000bd4f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd58:	74 12                	je     c000bd6c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd5a:	50                   	push   eax
c000bd5b:	57                   	push   edi
c000bd5c:	56                   	push   esi
c000bd5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd60:	e8 c7 ff ff ff       	call   c000bd2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd67:	83 c4 10             	add    esp,0x10
c000bd6a:	eb e9                	jmp    c000bd55 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd6c:	5b                   	pop    ebx
c000bd6d:	5e                   	pop    esi
c000bd6e:	5f                   	pop    edi
c000bd6f:	c3                   	ret    

c000bd70 <getDevicesOfType(DeviceType)>:
c000bd70:	53                   	push   ebx
c000bd71:	83 ec 14             	sub    esp,0x14
c000bd74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd78:	53                   	push   ebx
c000bd79:	e8 00 0a 01 00       	call   c001c77e <LinkedList<Device>::LinkedList()>
c000bd7e:	83 c4 0c             	add    esp,0xc
c000bd81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd85:	53                   	push   ebx
c000bd86:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bd8c:	e8 9b ff ff ff       	call   c000bd2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd91:	89 d8                	mov    eax,ebx
c000bd93:	83 c4 18             	add    esp,0x18
c000bd96:	5b                   	pop    ebx
c000bd97:	c2 04 00             	ret    0x4
c000bd9a:	66 90                	xchg   ax,ax

c000bd9c <HardDiskController::HardDiskController(char const*)>:
c000bd9c:	83 ec 0c             	sub    esp,0xc
c000bd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda3:	83 ec 08             	sub    esp,0x8
c000bda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdaa:	50                   	push   eax
c000bdab:	e8 40 fe ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000bdb0:	83 c4 10             	add    esp,0x10
c000bdb3:	ba 68 e0 01 c0       	mov    edx,0xc001e068
c000bdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbc:	89 10                	mov    DWORD PTR [eax],edx
c000bdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdcc:	90                   	nop
c000bdcd:	83 c4 0c             	add    esp,0xc
c000bdd0:	c3                   	ret    
c000bdd1:	90                   	nop
c000bdd2:	66 90                	xchg   ax,ax

c000bdd4 <HardDiskController::~HardDiskController()>:
c000bdd4:	83 ec 0c             	sub    esp,0xc
c000bdd7:	ba 68 e0 01 c0       	mov    edx,0xc001e068
c000bddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde0:	89 10                	mov    DWORD PTR [eax],edx
c000bde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde6:	83 ec 0c             	sub    esp,0xc
c000bde9:	50                   	push   eax
c000bdea:	e8 6b fb ff ff       	call   c000b95a <Device::~Device()>
c000bdef:	83 c4 10             	add    esp,0x10
c000bdf2:	90                   	nop
c000bdf3:	83 c4 0c             	add    esp,0xc
c000bdf6:	c3                   	ret    
c000bdf7:	90                   	nop

c000bdf8 <HardDiskController::~HardDiskController()>:
c000bdf8:	83 ec 0c             	sub    esp,0xc
c000bdfb:	83 ec 0c             	sub    esp,0xc
c000bdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be02:	e8 cd ff ff ff       	call   c000bdd4 <HardDiskController::~HardDiskController()>
c000be07:	83 c4 10             	add    esp,0x10
c000be0a:	83 ec 08             	sub    esp,0x8
c000be0d:	68 58 01 00 00       	push   0x158
c000be12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be16:	e8 08 e7 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000be1b:	83 c4 10             	add    esp,0x10
c000be1e:	83 c4 0c             	add    esp,0xc
c000be21:	c3                   	ret    

c000be22 <PhysicalDisk::eject()>:
c000be22:	83 c8 ff             	or     eax,0xffffffff
c000be25:	c3                   	ret    

c000be26 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be26:	83 ec 0c             	sub    esp,0xc
c000be29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2d:	83 ec 08             	sub    esp,0x8
c000be30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be34:	50                   	push   eax
c000be35:	e8 b6 fd ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000be3a:	83 c4 10             	add    esp,0x10
c000be3d:	ba 94 e0 01 c0       	mov    edx,0xc001e094
c000be42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be46:	89 10                	mov    DWORD PTR [eax],edx
c000be48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be57:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be62:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be74:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be7e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be88:	90                   	nop
c000be89:	83 c4 0c             	add    esp,0xc
c000be8c:	c3                   	ret    
c000be8d:	90                   	nop

c000be8e <PhysicalDisk::startCache()>:
c000be8e:	56                   	push   esi
c000be8f:	53                   	push   ebx
c000be90:	83 ec 10             	sub    esp,0x10
c000be93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be97:	6a 44                	push   0x44
c000be99:	e8 1b b9 ff ff       	call   c00077b9 <malloc>
c000be9e:	89 c6                	mov    esi,eax
c000bea0:	58                   	pop    eax
c000bea1:	5a                   	pop    edx
c000bea2:	53                   	push   ebx
c000bea3:	56                   	push   esi
c000bea4:	e8 eb 15 00 00       	call   c000d494 <VCache::VCache(PhysicalDisk*)>
c000bea9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000beaf:	83 c4 14             	add    esp,0x14
c000beb2:	5b                   	pop    ebx
c000beb3:	5e                   	pop    esi
c000beb4:	c3                   	ret    
c000beb5:	90                   	nop

c000beb6 <PhysicalDisk::~PhysicalDisk()>:
c000beb6:	83 ec 0c             	sub    esp,0xc
c000beb9:	ba 94 e0 01 c0       	mov    edx,0xc001e094
c000bebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bec2:	89 10                	mov    DWORD PTR [eax],edx
c000bec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bec8:	83 ec 0c             	sub    esp,0xc
c000becb:	50                   	push   eax
c000becc:	e8 89 fa ff ff       	call   c000b95a <Device::~Device()>
c000bed1:	83 c4 10             	add    esp,0x10
c000bed4:	90                   	nop
c000bed5:	83 c4 0c             	add    esp,0xc
c000bed8:	c3                   	ret    
c000bed9:	90                   	nop

c000beda <PhysicalDisk::~PhysicalDisk()>:
c000beda:	83 ec 0c             	sub    esp,0xc
c000bedd:	83 ec 0c             	sub    esp,0xc
c000bee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bee4:	e8 cd ff ff ff       	call   c000beb6 <PhysicalDisk::~PhysicalDisk()>
c000bee9:	83 c4 10             	add    esp,0x10
c000beec:	83 ec 08             	sub    esp,0x8
c000beef:	68 6c 01 00 00       	push   0x16c
c000bef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bef8:	e8 26 e6 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	83 c4 0c             	add    esp,0xc
c000bf03:	c3                   	ret    

c000bf04 <int_handler>:
c000bf04:	55                   	push   ebp
c000bf05:	57                   	push   edi
c000bf06:	56                   	push   esi
c000bf07:	53                   	push   ebx
c000bf08:	83 ec 0c             	sub    esp,0xc
c000bf0b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf0f:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000bf16:	74 0b                	je     c000bf23 <int_handler+0x1f>
c000bf18:	fa                   	cli    
c000bf19:	f4                   	hlt    
c000bf1a:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000bf21:	75 f5                	jne    c000bf18 <int_handler+0x14>
c000bf23:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf26:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf29:	83 f8 17             	cmp    eax,0x17
c000bf2c:	76 3e                	jbe    c000bf6c <int_handler+0x68>
c000bf2e:	c1 e6 04             	shl    esi,0x4
c000bf31:	31 db                	xor    ebx,ebx
c000bf33:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000bf39:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000bf3f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf43:	85 c0                	test   eax,eax
c000bf45:	74 13                	je     c000bf5a <int_handler+0x56>
c000bf47:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf4a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf4e:	74 2a                	je     c000bf7a <int_handler+0x76>
c000bf50:	83 ec 08             	sub    esp,0x8
c000bf53:	52                   	push   edx
c000bf54:	57                   	push   edi
c000bf55:	ff d0                	call   eax
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	43                   	inc    ebx
c000bf5b:	83 fb 04             	cmp    ebx,0x4
c000bf5e:	75 df                	jne    c000bf3f <int_handler+0x3b>
c000bf60:	83 c4 0c             	add    esp,0xc
c000bf63:	31 c0                	xor    eax,eax
c000bf65:	5b                   	pop    ebx
c000bf66:	31 d2                	xor    edx,edx
c000bf68:	5e                   	pop    esi
c000bf69:	5f                   	pop    edi
c000bf6a:	5d                   	pop    ebp
c000bf6b:	c3                   	ret    
c000bf6c:	83 ec 0c             	sub    esp,0xc
c000bf6f:	50                   	push   eax
c000bf70:	e8 0a 9a 00 00       	call   c001597f <HalEndOfInterrupt(int)>
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	eb b4                	jmp    c000bf2e <int_handler+0x2a>
c000bf7a:	83 ec 08             	sub    esp,0x8
c000bf7d:	52                   	push   edx
c000bf7e:	57                   	push   edi
c000bf7f:	ff d0                	call   eax
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	83 c4 0c             	add    esp,0xc
c000bf87:	5b                   	pop    ebx
c000bf88:	5e                   	pop    esi
c000bf89:	5f                   	pop    edi
c000bf8a:	5d                   	pop    ebp
c000bf8b:	c3                   	ret    

c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf8c:	56                   	push   esi
c000bf8d:	31 c0                	xor    eax,eax
c000bf8f:	53                   	push   ebx
c000bf90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf98:	89 ca                	mov    edx,ecx
c000bf9a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf9e:	c1 e2 04             	shl    edx,0x4
c000bfa1:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bfa9:	74 15                	je     c000bfc0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bfab:	40                   	inc    eax
c000bfac:	83 f8 04             	cmp    eax,0x4
c000bfaf:	75 f0                	jne    c000bfa1 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bfb1:	c7 44 24 0c c4 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0c4
c000bfb9:	5b                   	pop    ebx
c000bfba:	5e                   	pop    esi
c000bfbb:	e9 db 42 00 00       	jmp    c001029b <KePanic(char const*)>
c000bfc0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfc3:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bfca:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bfd1:	5b                   	pop    ebx
c000bfd2:	5e                   	pop    esi
c000bfd3:	c3                   	ret    

c000bfd4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfd4:	57                   	push   edi
c000bfd5:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000bfdb:	56                   	push   esi
c000bfdc:	53                   	push   ebx
c000bfdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfe5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfec:	74 5b                	je     c000c049 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfee:	89 c7                	mov    edi,eax
c000bff0:	84 c0                	test   al,al
c000bff2:	74 24                	je     c000c018 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bff4:	83 fe 0f             	cmp    esi,0xf
c000bff7:	0f 8f d9 00 00 00    	jg     c000c0d6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bffd:	8a 86 00 f9 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0700]
c000c003:	25 ff 00 00 00       	and    eax,0xff
c000c008:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000c010:	89 c6                	mov    esi,eax
c000c012:	66 d1 ef             	shr    di,1
c000c015:	83 e7 01             	and    edi,0x1
c000c018:	83 ec 08             	sub    esp,0x8
c000c01b:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000c020:	31 db                	xor    ebx,ebx
c000c022:	50                   	push   eax
c000c023:	68 d1 e0 01 c0       	push   0xc001e0d1
c000c028:	e8 ec e5 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000c02d:	83 c4 10             	add    esp,0x10
c000c030:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000c035:	85 c0                	test   eax,eax
c000c037:	7f 51                	jg     c000c08a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c039:	83 ec 0c             	sub    esp,0xc
c000c03c:	68 e8 e0 01 c0       	push   0xc001e0e8
c000c041:	e8 55 42 00 00       	call   c001029b <KePanic(char const*)>
c000c046:	83 c4 10             	add    esp,0x10
c000c049:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c04c:	31 d2                	xor    edx,edx
c000c04e:	89 c8                	mov    eax,ecx
c000c050:	c1 e0 04             	shl    eax,0x4
c000c053:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000c05a:	85 db                	test   ebx,ebx
c000c05c:	0f 84 8b 00 00 00    	je     c000c0ed <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c062:	42                   	inc    edx
c000c063:	83 fa 04             	cmp    edx,0x4
c000c066:	75 eb                	jne    c000c053 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c068:	83 ec 0c             	sub    esp,0xc
c000c06b:	68 3c e1 01 c0       	push   0xc001e13c
c000c070:	e8 26 42 00 00       	call   c001029b <KePanic(char const*)>
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c07d:	5b                   	pop    ebx
c000c07e:	5e                   	pop    esi
c000c07f:	5f                   	pop    edi
c000c080:	c3                   	ret    
c000c081:	43                   	inc    ebx
c000c082:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000c088:	7e af                	jle    c000c039 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c08a:	83 ec 08             	sub    esp,0x8
c000c08d:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c094:	56                   	push   esi
c000c095:	50                   	push   eax
c000c096:	e8 d1 f5 00 00       	call   c001b66c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c09b:	83 c4 10             	add    esp,0x10
c000c09e:	84 c0                	test   al,al
c000c0a0:	74 df                	je     c000c081 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c0a2:	81 e7 ff 00 00 00    	and    edi,0xff
c000c0a8:	50                   	push   eax
c000c0a9:	8d 46 20             	lea    eax,[esi+0x20]
c000c0ac:	57                   	push   edi
c000c0ad:	25 ff 00 00 00       	and    eax,0xff
c000c0b2:	6a 00                	push   0x0
c000c0b4:	50                   	push   eax
c000c0b5:	89 f0                	mov    eax,esi
c000c0b7:	6a 00                	push   0x0
c000c0b9:	25 ff 00 00 00       	and    eax,0xff
c000c0be:	6a 00                	push   0x0
c000c0c0:	50                   	push   eax
c000c0c1:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c0c8:	50                   	push   eax
c000c0c9:	e8 18 f7 00 00       	call   c001b7e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0ce:	83 c4 20             	add    esp,0x20
c000c0d1:	e9 73 ff ff ff       	jmp    c000c049 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0d6:	83 ec 0c             	sub    esp,0xc
c000c0d9:	31 ff                	xor    edi,edi
c000c0db:	68 04 e1 01 c0       	push   0xc001e104
c000c0e0:	e8 b6 41 00 00       	call   c001029b <KePanic(char const*)>
c000c0e5:	83 c4 10             	add    esp,0x10
c000c0e8:	e9 2b ff ff ff       	jmp    c000c018 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0ed:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0f4:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c0fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0ff:	5b                   	pop    ebx
c000c100:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c107:	89 f0                	mov    eax,esi
c000c109:	5e                   	pop    esi
c000c10a:	5f                   	pop    edi
c000c10b:	c3                   	ret    

c000c10c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c10c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c110:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c114:	c1 e0 04             	shl    eax,0x4
c000c117:	8d 50 10             	lea    edx,[eax+0x10]
c000c11a:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c120:	74 08                	je     c000c12a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c122:	83 c0 04             	add    eax,0x4
c000c125:	39 d0                	cmp    eax,edx
c000c127:	75 f1                	jne    c000c11a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c129:	c3                   	ret    
c000c12a:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c134:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c13e:	eb e2                	jmp    c000c122 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c140 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c140:	53                   	push   ebx
c000c141:	83 ec 08             	sub    esp,0x8
c000c144:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c148:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c14d:	74 0e                	je     c000c15d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c14f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c154:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c15b:	75 37                	jne    c000c194 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c161:	83 c0 20             	add    eax,0x20
c000c164:	c1 e0 04             	shl    eax,0x4
c000c167:	8d 50 10             	lea    edx,[eax+0x10]
c000c16a:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c170:	74 0c                	je     c000c17e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c172:	83 c0 04             	add    eax,0x4
c000c175:	39 d0                	cmp    eax,edx
c000c177:	75 f1                	jne    c000c16a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c179:	83 c4 08             	add    esp,0x8
c000c17c:	5b                   	pop    ebx
c000c17d:	c3                   	ret    
c000c17e:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c188:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c192:	eb de                	jmp    c000c172 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c194:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c199:	7f 12                	jg     c000c1ad <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c19b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c19f:	31 c0                	xor    eax,eax
c000c1a1:	8a 81 00 f9 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0700]
c000c1a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1ab:	eb b0                	jmp    c000c15d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c1ad:	83 ec 0c             	sub    esp,0xc
c000c1b0:	68 f5 e0 01 c0       	push   0xc001e0f5
c000c1b5:	e8 e1 40 00 00       	call   c001029b <KePanic(char const*)>
c000c1ba:	83 c4 10             	add    esp,0x10
c000c1bd:	eb 9e                	jmp    c000c15d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1bf <setupINTS()>:
c000c1bf:	31 c0                	xor    eax,eax
c000c1c1:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c1cb:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c1d5:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c1df:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c1e9:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c1f3:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c1fd:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c207:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c211:	83 c0 10             	add    eax,0x10
c000c214:	3d 00 10 00 00       	cmp    eax,0x1000
c000c219:	75 a6                	jne    c000c1c1 <setupINTS()+0x2>
c000c21b:	c3                   	ret    

c000c21c <convertLegacyIRQNumber(int)>:
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c229:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c230:	74 0f                	je     c000c241 <convertLegacyIRQNumber(int)+0x25>
c000c232:	83 f8 0f             	cmp    eax,0xf
c000c235:	7f 0e                	jg     c000c245 <convertLegacyIRQNumber(int)+0x29>
c000c237:	31 c9                	xor    ecx,ecx
c000c239:	8a 88 00 f9 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0700]
c000c23f:	89 c8                	mov    eax,ecx
c000c241:	83 c4 0c             	add    esp,0xc
c000c244:	c3                   	ret    
c000c245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c249:	83 ec 0c             	sub    esp,0xc
c000c24c:	68 04 e1 01 c0       	push   0xc001e104
c000c251:	e8 45 40 00 00       	call   c001029b <KePanic(char const*)>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25d:	83 c4 0c             	add    esp,0xc
c000c260:	c3                   	ret    
c000c261:	90                   	nop

c000c262 <startGUI(void*)>:
c000c262:	55                   	push   ebp
c000c263:	89 e5                	mov    ebp,esp
c000c265:	53                   	push   ebx
c000c266:	83 ec 04             	sub    esp,0x4
c000c269:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c26e:	48                   	dec    eax
c000c26f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c274:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c279:	85 c0                	test   eax,eax
c000c27b:	75 01                	jne    c000c27e <startGUI(void*)+0x1c>
c000c27d:	fb                   	sti    
c000c27e:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c284:	83 ec 08             	sub    esp,0x8
c000c287:	6a 01                	push   0x1
c000c289:	68 61 e1 01 c0       	push   0xc001e161
c000c28e:	e8 d2 6b 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c000c293:	83 c4 10             	add    esp,0x10
c000c296:	83 ec 08             	sub    esp,0x8
c000c299:	53                   	push   ebx
c000c29a:	50                   	push   eax
c000c29b:	e8 f6 6d 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c2a9:	83 ec 08             	sub    esp,0x8
c000c2ac:	6a 01                	push   0x1
c000c2ae:	68 7b e1 01 c0       	push   0xc001e17b
c000c2b3:	e8 ad 6b 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c000c2b8:	83 c4 10             	add    esp,0x10
c000c2bb:	83 ec 08             	sub    esp,0x8
c000c2be:	53                   	push   ebx
c000c2bf:	50                   	push   eax
c000c2c0:	e8 d1 6d 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c000c2c5:	83 c4 10             	add    esp,0x10
c000c2c8:	90                   	nop
c000c2c9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2cc:	c9                   	leave  
c000c2cd:	c3                   	ret    

c000c2ce <startGUIVESA(void*)>:
c000c2ce:	55                   	push   ebp
c000c2cf:	89 e5                	mov    ebp,esp
c000c2d1:	53                   	push   ebx
c000c2d2:	83 ec 04             	sub    esp,0x4
c000c2d5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2da:	48                   	dec    eax
c000c2db:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2e0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2e5:	85 c0                	test   eax,eax
c000c2e7:	75 01                	jne    c000c2ea <startGUIVESA(void*)+0x1c>
c000c2e9:	fb                   	sti    
c000c2ea:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c2f0:	83 ec 08             	sub    esp,0x8
c000c2f3:	6a 01                	push   0x1
c000c2f5:	68 99 e1 01 c0       	push   0xc001e199
c000c2fa:	e8 66 6b 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c000c2ff:	83 c4 10             	add    esp,0x10
c000c302:	83 ec 08             	sub    esp,0x8
c000c305:	53                   	push   ebx
c000c306:	50                   	push   eax
c000c307:	e8 8a 6d 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c000c30c:	83 c4 10             	add    esp,0x10
c000c30f:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c315:	83 ec 08             	sub    esp,0x8
c000c318:	6a 01                	push   0x1
c000c31a:	68 7b e1 01 c0       	push   0xc001e17b
c000c31f:	e8 41 6b 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c000c324:	83 c4 10             	add    esp,0x10
c000c327:	83 ec 08             	sub    esp,0x8
c000c32a:	53                   	push   ebx
c000c32b:	50                   	push   eax
c000c32c:	e8 65 6d 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	90                   	nop
c000c335:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c338:	c9                   	leave  
c000c339:	c3                   	ret    

c000c33a <sendKeyToTerminal(unsigned char)>:
c000c33a:	55                   	push   ebp
c000c33b:	89 e5                	mov    ebp,esp
c000c33d:	83 ec 28             	sub    esp,0x28
c000c340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c343:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c346:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c34c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c34f:	25 ff 00 00 00       	and    eax,0xff
c000c354:	83 ec 08             	sub    esp,0x8
c000c357:	50                   	push   eax
c000c358:	52                   	push   edx
c000c359:	e8 e8 c6 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c35e:	83 c4 10             	add    esp,0x10
c000c361:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c365:	74 0a                	je     c000c371 <sendKeyToTerminal(unsigned char)+0x37>
c000c367:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c36b:	0f 85 8f 00 00 00    	jne    c000c400 <sendKeyToTerminal(unsigned char)+0xc6>
c000c371:	fa                   	cli    
c000c372:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c377:	40                   	inc    eax
c000c378:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c37d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c382:	40                   	inc    eax
c000c383:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c388:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c38d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c390:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c39a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c39e:	74 1f                	je     c000c3bf <sendKeyToTerminal(unsigned char)+0x85>
c000c3a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c3a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c3a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c3a9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c3ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3af:	83 ec 0c             	sub    esp,0xc
c000c3b2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3b5:	e8 9a 79 00 00       	call   c0013d54 <unblockTask(ThreadControlBlock*)>
c000c3ba:	83 c4 10             	add    esp,0x10
c000c3bd:	eb db                	jmp    c000c39a <sendKeyToTerminal(unsigned char)+0x60>
c000c3bf:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c3c4:	48                   	dec    eax
c000c3c5:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c3ca:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c3cf:	85 c0                	test   eax,eax
c000c3d1:	75 18                	jne    c000c3eb <sendKeyToTerminal(unsigned char)+0xb1>
c000c3d3:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c3d8:	85 c0                	test   eax,eax
c000c3da:	74 0f                	je     c000c3eb <sendKeyToTerminal(unsigned char)+0xb1>
c000c3dc:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c3e6:	e8 a5 74 00 00       	call   c0013890 <schedule()>
c000c3eb:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c3f0:	48                   	dec    eax
c000c3f1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c3f6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c3fb:	85 c0                	test   eax,eax
c000c3fd:	75 01                	jne    c000c400 <sendKeyToTerminal(unsigned char)+0xc6>
c000c3ff:	fb                   	sti    
c000c400:	90                   	nop
c000c401:	c9                   	leave  
c000c402:	c3                   	ret    

c000c403 <sendKeyboardToken(KeyboardToken)>:
c000c403:	55                   	push   ebp
c000c404:	89 e5                	mov    ebp,esp
c000c406:	83 ec 18             	sub    esp,0x18
c000c409:	e8 dd 3e 00 00       	call   c00102eb <Krnl::userIOReceived()>
c000c40e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c414:	25 ff ff 00 00       	and    eax,0xffff
c000c419:	83 f2 01             	xor    edx,0x1
c000c41c:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c422:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c427:	85 c0                	test   eax,eax
c000c429:	74 24                	je     c000c44f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c42b:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c431:	83 ec 04             	sub    esp,0x4
c000c434:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c439:	83 ec 08             	sub    esp,0x8
c000c43c:	89 e2                	mov    edx,esp
c000c43e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c441:	89 02                	mov    DWORD PTR [edx],eax
c000c443:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c446:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c44a:	ff d1                	call   ecx
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c453:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c456:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c45b:	38 c2                	cmp    dl,al
c000c45d:	74 1e                	je     c000c47d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c45f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c462:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c467:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c46c:	25 ff 00 00 00       	and    eax,0xff
c000c471:	83 ec 0c             	sub    esp,0xc
c000c474:	50                   	push   eax
c000c475:	e8 1e bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c47a:	83 c4 10             	add    esp,0x10
c000c47d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c480:	84 c0                	test   al,al
c000c482:	0f 84 ae 00 00 00    	je     c000c536 <sendKeyboardToken(KeyboardToken)+0x133>
c000c488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48b:	66 3d 10 03          	cmp    ax,0x310
c000c48f:	75 06                	jne    c000c497 <sendKeyboardToken(KeyboardToken)+0x94>
c000c491:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49a:	66 3d 11 03          	cmp    ax,0x311
c000c49e:	75 06                	jne    c000c4a6 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c4a0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a9:	66 3d 12 03          	cmp    ax,0x312
c000c4ad:	75 06                	jne    c000c4b5 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4af:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b8:	66 3d 13 03          	cmp    ax,0x313
c000c4bc:	75 06                	jne    c000c4c4 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4be:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c7:	66 3d 14 03          	cmp    ax,0x314
c000c4cb:	75 06                	jne    c000c4d3 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4cd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d6:	66 3d 15 03          	cmp    ax,0x315
c000c4da:	75 06                	jne    c000c4e2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4dc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e5:	66 3d 16 03          	cmp    ax,0x316
c000c4e9:	75 06                	jne    c000c4f1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4eb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f4:	66 3d 17 03          	cmp    ax,0x317
c000c4f8:	75 06                	jne    c000c500 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4fa:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c503:	66 3d 18 03          	cmp    ax,0x318
c000c507:	75 06                	jne    c000c50f <sendKeyboardToken(KeyboardToken)+0x10c>
c000c509:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c512:	66 3d 19 03          	cmp    ax,0x319
c000c516:	75 06                	jne    c000c51e <sendKeyboardToken(KeyboardToken)+0x11b>
c000c518:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c51e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c521:	66 3d 1a 03          	cmp    ax,0x31a
c000c525:	0f 85 c9 00 00 00    	jne    c000c5f4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c52b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c531:	e9 be 00 00 00       	jmp    c000c5f4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c539:	66 3d 10 03          	cmp    ax,0x310
c000c53d:	75 0a                	jne    c000c549 <sendKeyboardToken(KeyboardToken)+0x146>
c000c53f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c545:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54c:	66 3d 11 03          	cmp    ax,0x311
c000c550:	75 0a                	jne    c000c55c <sendKeyboardToken(KeyboardToken)+0x159>
c000c552:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c558:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c55c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55f:	66 3d 12 03          	cmp    ax,0x312
c000c563:	75 0a                	jne    c000c56f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c565:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c56b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c56f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c572:	66 3d 13 03          	cmp    ax,0x313
c000c576:	75 0a                	jne    c000c582 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c578:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c57e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c585:	66 3d 14 03          	cmp    ax,0x314
c000c589:	75 0a                	jne    c000c595 <sendKeyboardToken(KeyboardToken)+0x192>
c000c58b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c591:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c598:	66 3d 15 03          	cmp    ax,0x315
c000c59c:	75 0a                	jne    c000c5a8 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c59e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c5a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ab:	66 3d 16 03          	cmp    ax,0x316
c000c5af:	75 0a                	jne    c000c5bb <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5b1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5be:	66 3d 17 03          	cmp    ax,0x317
c000c5c2:	75 0a                	jne    c000c5ce <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5c4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d1:	66 3d 18 03          	cmp    ax,0x318
c000c5d5:	75 0a                	jne    c000c5e1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5d7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e4:	66 3d 19 03          	cmp    ax,0x319
c000c5e8:	75 0a                	jne    c000c5f4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5ea:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f7:	66 3d 00 02          	cmp    ax,0x200
c000c5fb:	75 2c                	jne    c000c629 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5fd:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c602:	83 f0 01             	xor    eax,0x1
c000c605:	84 c0                	test   al,al
c000c607:	74 20                	je     c000c629 <sendKeyboardToken(KeyboardToken)+0x226>
c000c609:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c60e:	6a 01                	push   0x1
c000c610:	6a 00                	push   0x0
c000c612:	68 62 c2 00 c0       	push   0xc000c262
c000c617:	50                   	push   eax
c000c618:	e8 53 70 00 00       	call   c0013670 <Process::createThread(void (*)(void*), void*, int)>
c000c61d:	83 c4 10             	add    esp,0x10
c000c620:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c627:	eb 33                	jmp    c000c65c <sendKeyboardToken(KeyboardToken)+0x259>
c000c629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62c:	66 3d 01 02          	cmp    ax,0x201
c000c630:	75 2a                	jne    c000c65c <sendKeyboardToken(KeyboardToken)+0x259>
c000c632:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c637:	83 f0 01             	xor    eax,0x1
c000c63a:	84 c0                	test   al,al
c000c63c:	74 1e                	je     c000c65c <sendKeyboardToken(KeyboardToken)+0x259>
c000c63e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c643:	6a 01                	push   0x1
c000c645:	6a 00                	push   0x0
c000c647:	68 ce c2 00 c0       	push   0xc000c2ce
c000c64c:	50                   	push   eax
c000c64d:	e8 1e 70 00 00       	call   c0013670 <Process::createThread(void (*)(void*), void*, int)>
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c65c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65f:	66 3d 1d 03          	cmp    ax,0x31d
c000c663:	75 06                	jne    c000c66b <sendKeyboardToken(KeyboardToken)+0x268>
c000c665:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66e:	66 3d 1c 03          	cmp    ax,0x31c
c000c672:	75 06                	jne    c000c67a <sendKeyboardToken(KeyboardToken)+0x277>
c000c674:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c67a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67d:	66 3d 1b 03          	cmp    ax,0x31b
c000c681:	75 06                	jne    c000c689 <sendKeyboardToken(KeyboardToken)+0x286>
c000c683:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68c:	66 3d 1e 03          	cmp    ax,0x31e
c000c690:	75 06                	jne    c000c698 <sendKeyboardToken(KeyboardToken)+0x295>
c000c692:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69b:	66 3d 1f 03          	cmp    ax,0x31f
c000c69f:	75 06                	jne    c000c6a7 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c6a1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6aa:	66 3d 1a 03          	cmp    ax,0x31a
c000c6ae:	75 06                	jne    c000c6b6 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6b0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6b6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6ba:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6bd:	83 f0 01             	xor    eax,0x1
c000c6c0:	84 c0                	test   al,al
c000c6c2:	74 7b                	je     c000c73f <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6c4:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c6c9:	84 c0                	test   al,al
c000c6cb:	74 43                	je     c000c710 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6cd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6d1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6d5:	74 2d                	je     c000c704 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6d7:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c6dd:	89 d0                	mov    eax,edx
c000c6df:	c1 e0 02             	shl    eax,0x2
c000c6e2:	01 d0                	add    eax,edx
c000c6e4:	01 c0                	add    eax,eax
c000c6e6:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ee:	25 ff ff 00 00       	and    eax,0xffff
c000c6f3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6f6:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6fb:	01 d0                	add    eax,edx
c000c6fd:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c702:	eb 71                	jmp    c000c775 <sendKeyboardToken(KeyboardToken)+0x372>
c000c704:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c70e:	eb 65                	jmp    c000c775 <sendKeyboardToken(KeyboardToken)+0x372>
c000c710:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c715:	85 c0                	test   eax,eax
c000c717:	74 1a                	je     c000c733 <sendKeyboardToken(KeyboardToken)+0x330>
c000c719:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c71e:	25 ff 00 00 00       	and    eax,0xff
c000c723:	83 ec 0c             	sub    esp,0xc
c000c726:	50                   	push   eax
c000c727:	e8 0e fc ff ff       	call   c000c33a <sendKeyToTerminal(unsigned char)>
c000c72c:	83 c4 10             	add    esp,0x10
c000c72f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c733:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c73d:	eb 36                	jmp    c000c775 <sendKeyboardToken(KeyboardToken)+0x372>
c000c73f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c742:	66 3d 01 01          	cmp    ax,0x101
c000c746:	75 2d                	jne    c000c775 <sendKeyboardToken(KeyboardToken)+0x372>
c000c748:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c74d:	85 c0                	test   eax,eax
c000c74f:	74 1a                	je     c000c76b <sendKeyboardToken(KeyboardToken)+0x368>
c000c751:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c756:	25 ff 00 00 00       	and    eax,0xff
c000c75b:	83 ec 0c             	sub    esp,0xc
c000c75e:	50                   	push   eax
c000c75f:	e8 d6 fb ff ff       	call   c000c33a <sendKeyToTerminal(unsigned char)>
c000c764:	83 c4 10             	add    esp,0x10
c000c767:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c76b:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c775:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c778:	83 f0 01             	xor    eax,0x1
c000c77b:	84 c0                	test   al,al
c000c77d:	74 4e                	je     c000c7cd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c77f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c782:	83 f0 01             	xor    eax,0x1
c000c785:	84 c0                	test   al,al
c000c787:	74 44                	je     c000c7cd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c789:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c78e:	83 f0 01             	xor    eax,0x1
c000c791:	84 c0                	test   al,al
c000c793:	74 38                	je     c000c7cd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c798:	66 83 f8 1f          	cmp    ax,0x1f
c000c79c:	76 09                	jbe    c000c7a7 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c79e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a1:	66 83 f8 7e          	cmp    ax,0x7e
c000c7a5:	76 12                	jbe    c000c7b9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7aa:	66 83 f8 0a          	cmp    ax,0xa
c000c7ae:	74 09                	je     c000c7b9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b3:	66 83 f8 08          	cmp    ax,0x8
c000c7b7:	75 14                	jne    c000c7cd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7bc:	25 ff 00 00 00       	and    eax,0xff
c000c7c1:	83 ec 0c             	sub    esp,0xc
c000c7c4:	50                   	push   eax
c000c7c5:	e8 70 fb ff ff       	call   c000c33a <sendKeyToTerminal(unsigned char)>
c000c7ca:	83 c4 10             	add    esp,0x10
c000c7cd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7d0:	83 f0 01             	xor    eax,0x1
c000c7d3:	84 c0                	test   al,al
c000c7d5:	74 51                	je     c000c828 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7da:	83 f0 01             	xor    eax,0x1
c000c7dd:	84 c0                	test   al,al
c000c7df:	74 47                	je     c000c828 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e1:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c7e6:	84 c0                	test   al,al
c000c7e8:	74 3e                	je     c000c828 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ed:	66 83 f8 3f          	cmp    ax,0x3f
c000c7f1:	76 35                	jbe    c000c828 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f6:	66 83 f8 7f          	cmp    ax,0x7f
c000c7fa:	77 2c                	ja     c000c828 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ff:	88 c2                	mov    dl,al
c000c801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c804:	66 83 f8 5f          	cmp    ax,0x5f
c000c808:	76 04                	jbe    c000c80e <sendKeyboardToken(KeyboardToken)+0x40b>
c000c80a:	b0 20                	mov    al,0x20
c000c80c:	eb 02                	jmp    c000c810 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c80e:	b0 00                	mov    al,0x0
c000c810:	29 c2                	sub    edx,eax
c000c812:	88 d0                	mov    al,dl
c000c814:	83 e8 40             	sub    eax,0x40
c000c817:	25 ff 00 00 00       	and    eax,0xff
c000c81c:	83 ec 0c             	sub    esp,0xc
c000c81f:	50                   	push   eax
c000c820:	e8 15 fb ff ff       	call   c000c33a <sendKeyToTerminal(unsigned char)>
c000c825:	83 c4 10             	add    esp,0x10
c000c828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82b:	66 3d 00 03          	cmp    ax,0x300
c000c82f:	75 0f                	jne    c000c840 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c831:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c834:	83 f0 01             	xor    eax,0x1
c000c837:	84 c0                	test   al,al
c000c839:	74 05                	je     c000c840 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c83b:	e8 59 b9 ff ff       	call   c0008199 <doTerminalCycle()>
c000c840:	90                   	nop
c000c841:	c9                   	leave  
c000c842:	c3                   	ret    

c000c843 <clearInternalKeybuffer(VgaText*)>:
c000c843:	55                   	push   ebp
c000c844:	89 e5                	mov    ebp,esp
c000c846:	83 ec 08             	sub    esp,0x8
c000c849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c84c:	05 b2 00 00 00       	add    eax,0xb2
c000c851:	83 ec 0c             	sub    esp,0xc
c000c854:	50                   	push   eax
c000c855:	e8 e6 3c ff ff       	call   c0000540 <strlen>
c000c85a:	83 c4 10             	add    esp,0x10
c000c85d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c860:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c866:	83 ec 04             	sub    esp,0x4
c000c869:	50                   	push   eax
c000c86a:	6a 00                	push   0x0
c000c86c:	52                   	push   edx
c000c86d:	e8 5e 3c ff ff       	call   c00004d0 <memset>
c000c872:	83 c4 10             	add    esp,0x10
c000c875:	90                   	nop
c000c876:	c9                   	leave  
c000c877:	c3                   	ret    

c000c878 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c878:	55                   	push   ebp
c000c879:	89 e5                	mov    ebp,esp
c000c87b:	83 ec 18             	sub    esp,0x18
c000c87e:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c883:	85 c0                	test   eax,eax
c000c885:	74 2a                	je     c000c8b1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c887:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c88d:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c893:	83 ec 04             	sub    esp,0x4
c000c896:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c89b:	83 ec 08             	sub    esp,0x8
c000c89e:	89 e2                	mov    edx,esp
c000c8a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c8a3:	89 02                	mov    DWORD PTR [edx],eax
c000c8a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c8a8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c8ac:	ff d1                	call   ecx
c000c8ae:	83 c4 10             	add    esp,0x10
c000c8b1:	fb                   	sti    
c000c8b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8bd:	0f 84 db 00 00 00    	je     c000c99e <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c8c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c6:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c8cc:	84 c0                	test   al,al
c000c8ce:	75 28                	jne    c000c8f8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8d0:	fa                   	cli    
c000c8d1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8d6:	40                   	inc    eax
c000c8d7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c8dc:	e8 af 6f 00 00       	call   c0013890 <schedule()>
c000c8e1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8e6:	48                   	dec    eax
c000c8e7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c8ec:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8f1:	85 c0                	test   eax,eax
c000c8f3:	75 ce                	jne    c000c8c3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8f5:	fb                   	sti    
c000c8f6:	eb cb                	jmp    c000c8c3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8fb:	8d 50 01             	lea    edx,[eax+0x1]
c000c8fe:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c901:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c904:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c90a:	88 10                	mov    BYTE PTR [eax],dl
c000c90c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90f:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c915:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c918:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c91c:	75 2e                	jne    c000c94c <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c91e:	83 ec 0c             	sub    esp,0xc
c000c921:	68 b4 e1 01 c0       	push   0xc001e1b4
c000c926:	e8 ee dc ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c933:	8b 00                	mov    eax,DWORD PTR [eax]
c000c935:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c938:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c93e:	83 ec 08             	sub    esp,0x8
c000c941:	6a 02                	push   0x2
c000c943:	50                   	push   eax
c000c944:	e8 3e 3d 00 00       	call   c0010687 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c949:	83 c4 10             	add    esp,0x10
c000c94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c94f:	05 b2 00 00 00       	add    eax,0xb2
c000c954:	83 ec 0c             	sub    esp,0xc
c000c957:	50                   	push   eax
c000c958:	e8 e3 3b ff ff       	call   c0000540 <strlen>
c000c95d:	83 c4 10             	add    esp,0x10
c000c960:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c963:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c969:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c96c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c96f:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c975:	83 ec 04             	sub    esp,0x4
c000c978:	50                   	push   eax
c000c979:	51                   	push   ecx
c000c97a:	52                   	push   edx
c000c97b:	e8 60 3a ff ff       	call   c00003e0 <memmove>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c986:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c989:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c98d:	74 0a                	je     c000c999 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c98f:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c993:	0f 85 20 ff ff ff    	jne    c000c8b9 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c999:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c99c:	eb 03                	jmp    c000c9a1 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c99e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9a1:	c9                   	leave  
c000c9a2:	c3                   	ret    
c000c9a3:	90                   	nop

c000c9a4 <Keyboard::Keyboard(char const*)>:
c000c9a4:	83 ec 0c             	sub    esp,0xc
c000c9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ab:	83 ec 08             	sub    esp,0x8
c000c9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b2:	50                   	push   eax
c000c9b3:	e8 38 f2 ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000c9b8:	83 c4 10             	add    esp,0x10
c000c9bb:	ba cc e1 01 c0       	mov    edx,0xc001e1cc
c000c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c4:	89 10                	mov    DWORD PTR [eax],edx
c000c9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ca:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9d4:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c9db:	90                   	nop
c000c9dc:	83 c4 0c             	add    esp,0xc
c000c9df:	c3                   	ret    

c000c9e0 <Keyboard::~Keyboard()>:
c000c9e0:	83 ec 0c             	sub    esp,0xc
c000c9e3:	ba cc e1 01 c0       	mov    edx,0xc001e1cc
c000c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ec:	89 10                	mov    DWORD PTR [eax],edx
c000c9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f2:	83 ec 0c             	sub    esp,0xc
c000c9f5:	50                   	push   eax
c000c9f6:	e8 5f ef ff ff       	call   c000b95a <Device::~Device()>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	90                   	nop
c000c9ff:	83 c4 0c             	add    esp,0xc
c000ca02:	c3                   	ret    
c000ca03:	90                   	nop

c000ca04 <Keyboard::~Keyboard()>:
c000ca04:	83 ec 0c             	sub    esp,0xc
c000ca07:	83 ec 0c             	sub    esp,0xc
c000ca0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0e:	e8 cd ff ff ff       	call   c000c9e0 <Keyboard::~Keyboard()>
c000ca13:	83 c4 10             	add    esp,0x10
c000ca16:	83 ec 08             	sub    esp,0x8
c000ca19:	68 5c 01 00 00       	push   0x15c
c000ca1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca22:	e8 fc da ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000ca27:	83 c4 10             	add    esp,0x10
c000ca2a:	83 c4 0c             	add    esp,0xc
c000ca2d:	c3                   	ret    

c000ca2e <LogicalDisk::close(int, int, void*)>:
c000ca2e:	83 c8 ff             	or     eax,0xffffffff
c000ca31:	c3                   	ret    

c000ca32 <LogicalDisk::~LogicalDisk()>:
c000ca32:	83 ec 0c             	sub    esp,0xc
c000ca35:	ba 44 e2 01 c0       	mov    edx,0xc001e244
c000ca3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3e:	89 10                	mov    DWORD PTR [eax],edx
c000ca40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca44:	83 ec 0c             	sub    esp,0xc
c000ca47:	50                   	push   eax
c000ca48:	e8 0d ef ff ff       	call   c000b95a <Device::~Device()>
c000ca4d:	83 c4 10             	add    esp,0x10
c000ca50:	90                   	nop
c000ca51:	83 c4 0c             	add    esp,0xc
c000ca54:	c3                   	ret    
c000ca55:	90                   	nop

c000ca56 <LogicalDisk::~LogicalDisk()>:
c000ca56:	83 ec 0c             	sub    esp,0xc
c000ca59:	83 ec 0c             	sub    esp,0xc
c000ca5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca60:	e8 cd ff ff ff       	call   c000ca32 <LogicalDisk::~LogicalDisk()>
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	83 ec 08             	sub    esp,0x8
c000ca6b:	68 74 01 00 00       	push   0x174
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	e8 aa da ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000ca79:	83 c4 10             	add    esp,0x10
c000ca7c:	83 c4 0c             	add    esp,0xc
c000ca7f:	c3                   	ret    

c000ca80 <LogicalDisk::open(int, int, void*)>:
c000ca80:	83 ec 18             	sub    esp,0x18
c000ca83:	68 f8 e1 01 c0       	push   0xc001e1f8
c000ca88:	e8 0e 38 00 00       	call   c001029b <KePanic(char const*)>
c000ca8d:	83 c8 ff             	or     eax,0xffffffff
c000ca90:	83 c4 1c             	add    esp,0x1c
c000ca93:	c3                   	ret    

c000ca94 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca94:	53                   	push   ebx
c000ca95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000caa1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000caa7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000caad:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cab3:	77 10                	ja     c000cac5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cab5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cabb:	89 d3                	mov    ebx,edx
c000cabd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cac3:	72 05                	jb     c000caca <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cac5:	83 c8 ff             	or     eax,0xffffffff
c000cac8:	89 c2                	mov    edx,eax
c000caca:	5b                   	pop    ebx
c000cacb:	c3                   	ret    

c000cacc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cacc:	56                   	push   esi
c000cacd:	83 c8 ff             	or     eax,0xffffffff
c000cad0:	53                   	push   ebx
c000cad1:	89 c2                	mov    edx,eax
c000cad3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cad7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cadb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cadf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cae5:	77 27                	ja     c000cb0e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cae7:	89 d8                	mov    eax,ebx
c000cae9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000caef:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000caf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cafa:	89 c2                	mov    edx,eax
c000cafc:	73 10                	jae    c000cb0e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cafe:	89 c8                	mov    eax,ecx
c000cb00:	89 da                	mov    edx,ebx
c000cb02:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cb08:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb0e:	5b                   	pop    ebx
c000cb0f:	5e                   	pop    esi
c000cb10:	c3                   	ret    
c000cb11:	90                   	nop

c000cb12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb12:	83 ec 1c             	sub    esp,0x1c
c000cb15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb29:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb38:	83 ec 08             	sub    esp,0x8
c000cb3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb3f:	50                   	push   eax
c000cb40:	e8 ab f0 ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000cb45:	83 c4 10             	add    esp,0x10
c000cb48:	ba 44 e2 01 c0       	mov    edx,0xc001e244
c000cb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb51:	89 10                	mov    DWORD PTR [eax],edx
c000cb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb57:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb62:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb77:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb83:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb89:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb8f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb9a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cba0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbaa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cbae:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cbc2:	90                   	nop
c000cbc3:	83 c4 1c             	add    esp,0x1c
c000cbc6:	c3                   	ret    
c000cbc7:	90                   	nop

c000cbc8 <LogicalDisk::assignDriveLetter()>:
c000cbc8:	55                   	push   ebp
c000cbc9:	57                   	push   edi
c000cbca:	56                   	push   esi
c000cbcb:	53                   	push   ebx
c000cbcc:	83 ec 14             	sub    esp,0x14
c000cbcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbd3:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cbd9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbdf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbe3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbe9:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cbef:	3c 01                	cmp    al,0x1
c000cbf1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbf5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cbf9:	19 c0                	sbb    eax,eax
c000cbfb:	83 e0 02             	and    eax,0x2
c000cbfe:	83 c0 41             	add    eax,0x41
c000cc01:	0f be e8             	movsx  ebp,al
c000cc04:	3c 43                	cmp    al,0x43
c000cc06:	75 10                	jne    c000cc18 <LogicalDisk::assignDriveLetter()+0x50>
c000cc08:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc0f:	75 5d                	jne    c000cc6e <LogicalDisk::assignDriveLetter()+0xa6>
c000cc11:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc16:	75 56                	jne    c000cc6e <LogicalDisk::assignDriveLetter()+0xa6>
c000cc18:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc1b:	ba 01 00 00 00       	mov    edx,0x1
c000cc20:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc24:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc28:	d3 e2                	shl    edx,cl
c000cc2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc2e:	89 d7                	mov    edi,edx
c000cc30:	89 d6                	mov    esi,edx
c000cc32:	c1 ff 1f             	sar    edi,0x1f
c000cc35:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc39:	21 f9                	and    ecx,edi
c000cc3b:	09 d1                	or     ecx,edx
c000cc3d:	75 2f                	jne    c000cc6e <LogicalDisk::assignDriveLetter()+0xa6>
c000cc3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc47:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc4d:	09 f2                	or     edx,esi
c000cc4f:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cc55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc59:	09 fa                	or     edx,edi
c000cc5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc5f:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cc65:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cc6c:	eb 08                	jmp    c000cc76 <LogicalDisk::assignDriveLetter()+0xae>
c000cc6e:	45                   	inc    ebp
c000cc6f:	40                   	inc    eax
c000cc70:	3c 5b                	cmp    al,0x5b
c000cc72:	75 90                	jne    c000cc04 <LogicalDisk::assignDriveLetter()+0x3c>
c000cc74:	31 c0                	xor    eax,eax
c000cc76:	83 c4 14             	add    esp,0x14
c000cc79:	5b                   	pop    ebx
c000cc7a:	5e                   	pop    esi
c000cc7b:	5f                   	pop    edi
c000cc7c:	5d                   	pop    ebp
c000cc7d:	c3                   	ret    

c000cc7e <LogicalDisk::mount()>:
c000cc7e:	56                   	push   esi
c000cc7f:	53                   	push   ebx
c000cc80:	53                   	push   ebx
c000cc81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc85:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cc8b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cc95:	85 db                	test   ebx,ebx
c000cc97:	74 27                	je     c000ccc0 <LogicalDisk::mount()+0x42>
c000cc99:	51                   	push   ecx
c000cc9a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cca1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cca3:	83 e8 41             	sub    eax,0x41
c000cca6:	50                   	push   eax
c000cca7:	56                   	push   esi
c000cca8:	53                   	push   ebx
c000cca9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	84 c0                	test   al,al
c000ccb1:	74 08                	je     c000ccbb <LogicalDisk::mount()+0x3d>
c000ccb3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000ccb9:	eb 07                	jmp    c000ccc2 <LogicalDisk::mount()+0x44>
c000ccbb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ccbe:	eb d5                	jmp    c000cc95 <LogicalDisk::mount()+0x17>
c000ccc0:	31 c0                	xor    eax,eax
c000ccc2:	5a                   	pop    edx
c000ccc3:	5b                   	pop    ebx
c000ccc4:	5e                   	pop    esi
c000ccc5:	c3                   	ret    

c000ccc6 <LogicalDisk::unmount()>:
c000ccc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccca:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ccd4:	c3                   	ret    
c000ccd5:	90                   	nop

c000ccd6 <LogicalDisk::eject()>:
c000ccd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccda:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cce0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cce2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cce6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cce9:	90                   	nop

c000ccea <LogicalDisk::unassignDriveLetter()>:
c000ccea:	57                   	push   edi
c000cceb:	56                   	push   esi
c000ccec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccf0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ccf7:	84 c9                	test   cl,cl
c000ccf9:	75 0f                	jne    c000cd0a <LogicalDisk::unassignDriveLetter()+0x20>
c000ccfb:	c7 44 24 0c 1c e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e21c
c000cd03:	5e                   	pop    esi
c000cd04:	5f                   	pop    edi
c000cd05:	e9 91 35 00 00       	jmp    c001029b <KePanic(char const*)>
c000cd0a:	83 e9 41             	sub    ecx,0x41
c000cd0d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd14:	b8 01 00 00 00       	mov    eax,0x1
c000cd19:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cd24:	d3 e0                	shl    eax,cl
c000cd26:	89 c7                	mov    edi,eax
c000cd28:	f7 d0                	not    eax
c000cd2a:	c1 ff 1f             	sar    edi,0x1f
c000cd2d:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cd33:	89 fe                	mov    esi,edi
c000cd35:	f7 d6                	not    esi
c000cd37:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cd3d:	5e                   	pop    esi
c000cd3e:	5f                   	pop    edi
c000cd3f:	c3                   	ret    

c000cd40 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd40:	57                   	push   edi
c000cd41:	56                   	push   esi
c000cd42:	53                   	push   ebx
c000cd43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd4b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd53:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd59:	77 41                	ja     c000cd9c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd5b:	99                   	cdq    
c000cd5c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd62:	01 c8                	add    eax,ecx
c000cd64:	11 da                	adc    edx,ebx
c000cd66:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd6c:	19 d7                	sbb    edi,edx
c000cd6e:	72 33                	jb     c000cda3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd70:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd76:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd7c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd80:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd84:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd94:	5b                   	pop    ebx
c000cd95:	5e                   	pop    esi
c000cd96:	5f                   	pop    edi
c000cd97:	e9 4e 0a 00 00       	jmp    c000d7ea <VCache::read(unsigned long long, int, void*)>
c000cd9c:	b8 05 00 00 00       	mov    eax,0x5
c000cda1:	eb 05                	jmp    c000cda8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cda3:	b8 07 00 00 00       	mov    eax,0x7
c000cda8:	5b                   	pop    ebx
c000cda9:	5e                   	pop    esi
c000cdaa:	5f                   	pop    edi
c000cdab:	c3                   	ret    

c000cdac <LogicalDisk::write(unsigned long long, int, void*)>:
c000cdac:	57                   	push   edi
c000cdad:	56                   	push   esi
c000cdae:	53                   	push   ebx
c000cdaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdb7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cdbf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdc5:	77 41                	ja     c000ce08 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cdc7:	99                   	cdq    
c000cdc8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdce:	01 c8                	add    eax,ecx
c000cdd0:	11 da                	adc    edx,ebx
c000cdd2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdd8:	19 d7                	sbb    edi,edx
c000cdda:	72 33                	jb     c000ce0f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cddc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cde2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cde8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdec:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdf0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cdf6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cdfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce00:	5b                   	pop    ebx
c000ce01:	5e                   	pop    esi
c000ce02:	5f                   	pop    edi
c000ce03:	e9 cc 08 00 00       	jmp    c000d6d4 <VCache::write(unsigned long long, int, void*)>
c000ce08:	b8 05 00 00 00       	mov    eax,0x5
c000ce0d:	eb 05                	jmp    c000ce14 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce0f:	b8 07 00 00 00       	mov    eax,0x7
c000ce14:	5b                   	pop    ebx
c000ce15:	5e                   	pop    esi
c000ce16:	5f                   	pop    edi
c000ce17:	c3                   	ret    

c000ce18 <Mouse::Mouse(char const*)>:
c000ce18:	83 ec 0c             	sub    esp,0xc
c000ce1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1f:	83 ec 08             	sub    esp,0x8
c000ce22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce26:	50                   	push   eax
c000ce27:	e8 c4 ed ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000ce2c:	83 c4 10             	add    esp,0x10
c000ce2f:	ba 70 e2 01 c0       	mov    edx,0xc001e270
c000ce34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce38:	89 10                	mov    DWORD PTR [eax],edx
c000ce3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce48:	90                   	nop
c000ce49:	83 c4 0c             	add    esp,0xc
c000ce4c:	c3                   	ret    
c000ce4d:	90                   	nop
c000ce4e:	66 90                	xchg   ax,ax

c000ce50 <Mouse::~Mouse()>:
c000ce50:	83 ec 0c             	sub    esp,0xc
c000ce53:	ba 70 e2 01 c0       	mov    edx,0xc001e270
c000ce58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5c:	89 10                	mov    DWORD PTR [eax],edx
c000ce5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce62:	83 ec 0c             	sub    esp,0xc
c000ce65:	50                   	push   eax
c000ce66:	e8 ef ea ff ff       	call   c000b95a <Device::~Device()>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	90                   	nop
c000ce6f:	83 c4 0c             	add    esp,0xc
c000ce72:	c3                   	ret    
c000ce73:	90                   	nop

c000ce74 <Mouse::~Mouse()>:
c000ce74:	83 ec 0c             	sub    esp,0xc
c000ce77:	83 ec 0c             	sub    esp,0xc
c000ce7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7e:	e8 cd ff ff ff       	call   c000ce50 <Mouse::~Mouse()>
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	83 ec 08             	sub    esp,0x8
c000ce89:	68 58 01 00 00       	push   0x158
c000ce8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce92:	e8 8c d6 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000ce97:	83 c4 10             	add    esp,0x10
c000ce9a:	83 c4 0c             	add    esp,0xc
c000ce9d:	c3                   	ret    

c000ce9e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce9e:	55                   	push   ebp
c000ce9f:	57                   	push   edi
c000cea0:	56                   	push   esi
c000cea1:	53                   	push   ebx
c000cea2:	81 ec 28 01 00 00    	sub    esp,0x128
c000cea8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ceaf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ceb6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cebd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cec4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cec8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cecc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ced3:	e8 14 ee ff ff       	call   c000bcec <Device::getName()>
c000ced8:	5a                   	pop    edx
c000ced9:	59                   	pop    ecx
c000ceda:	50                   	push   eax
c000cedb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cedf:	55                   	push   ebp
c000cee0:	e8 1b 37 ff ff       	call   c0000600 <strcpy>
c000cee5:	5b                   	pop    ebx
c000cee6:	58                   	pop    eax
c000cee7:	68 94 e2 01 c0       	push   0xc001e294
c000ceec:	55                   	push   ebp
c000ceed:	e8 ce 38 ff ff       	call   c00007c0 <strcat>
c000cef2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cef9:	e8 bb a8 ff ff       	call   c00077b9 <malloc>
c000cefe:	83 c4 0c             	add    esp,0xc
c000cf01:	89 c3                	mov    ebx,eax
c000cf03:	57                   	push   edi
c000cf04:	56                   	push   esi
c000cf05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf0d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cf14:	55                   	push   ebp
c000cf15:	50                   	push   eax
c000cf16:	e8 f7 fb ff ff       	call   c000cb12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf1b:	83 c4 14             	add    esp,0x14
c000cf1e:	53                   	push   ebx
c000cf1f:	e8 a4 fc ff ff       	call   c000cbc8 <LogicalDisk::assignDriveLetter()>
c000cf24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf27:	e8 52 fd ff ff       	call   c000cc7e <LogicalDisk::mount()>
c000cf2c:	58                   	pop    eax
c000cf2d:	5a                   	pop    edx
c000cf2e:	53                   	push   ebx
c000cf2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf36:	e8 1d eb ff ff       	call   c000ba58 <Device::addChild(Device*)>
c000cf3b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cf41:	5b                   	pop    ebx
c000cf42:	5e                   	pop    esi
c000cf43:	5f                   	pop    edi
c000cf44:	5d                   	pop    ebp
c000cf45:	c3                   	ret    

c000cf46 <createPartitionsForDisk(PhysicalDisk*)>:
c000cf46:	55                   	push   ebp
c000cf47:	57                   	push   edi
c000cf48:	56                   	push   esi
c000cf49:	53                   	push   ebx
c000cf4a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cf50:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cf57:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cf5d:	3d 00 02 00 00       	cmp    eax,0x200
c000cf62:	74 27                	je     c000cf8b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cf64:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cf6a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cf70:	83 ec 10             	sub    esp,0x10
c000cf73:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cf77:	99                   	cdq    
c000cf78:	c1 e6 0a             	shl    esi,0xa
c000cf7b:	52                   	push   edx
c000cf7c:	89 fd                	mov    ebp,edi
c000cf7e:	50                   	push   eax
c000cf7f:	55                   	push   ebp
c000cf80:	56                   	push   esi
c000cf81:	e8 6a f2 00 00       	call   c001c1f0 <__udivdi3>
c000cf86:	e9 b1 00 00 00       	jmp    c000d03c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf8b:	83 ec 0c             	sub    esp,0xc
c000cf8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf90:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf94:	56                   	push   esi
c000cf95:	6a 01                	push   0x1
c000cf97:	6a 00                	push   0x0
c000cf99:	6a 00                	push   0x0
c000cf9b:	53                   	push   ebx
c000cf9c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf9f:	83 c4 20             	add    esp,0x20
c000cfa2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cfaa:	75 0a                	jne    c000cfb6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cfac:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cfb4:	74 2c                	je     c000cfe2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cfb6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfbc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfc2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfc8:	83 ec 10             	sub    esp,0x10
c000cfcb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfcf:	89 f7                	mov    edi,esi
c000cfd1:	c1 e0 0a             	shl    eax,0xa
c000cfd4:	c1 ff 1f             	sar    edi,0x1f
c000cfd7:	57                   	push   edi
c000cfd8:	56                   	push   esi
c000cfd9:	52                   	push   edx
c000cfda:	50                   	push   eax
c000cfdb:	e8 10 f2 00 00       	call   c001c1f0 <__udivdi3>
c000cfe0:	eb 5a                	jmp    c000d03c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cfe2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cfe9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cff0:	83 e1 7f             	and    ecx,0x7f
c000cff3:	83 e0 7f             	and    eax,0x7f
c000cff6:	01 c1                	add    ecx,eax
c000cff8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cfff:	83 e0 7f             	and    eax,0x7f
c000d002:	01 c1                	add    ecx,eax
c000d004:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d00b:	83 e0 7f             	and    eax,0x7f
c000d00e:	00 c1                	add    cl,al
c000d010:	74 41                	je     c000d053 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d012:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d018:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d01e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d024:	83 ec 10             	sub    esp,0x10
c000d027:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d02b:	89 f7                	mov    edi,esi
c000d02d:	c1 e0 0a             	shl    eax,0xa
c000d030:	c1 ff 1f             	sar    edi,0x1f
c000d033:	57                   	push   edi
c000d034:	56                   	push   esi
c000d035:	52                   	push   edx
c000d036:	50                   	push   eax
c000d037:	e8 b4 f1 00 00       	call   c001c1f0 <__udivdi3>
c000d03c:	83 c4 14             	add    esp,0x14
c000d03f:	52                   	push   edx
c000d040:	50                   	push   eax
c000d041:	6a 00                	push   0x0
c000d043:	6a 00                	push   0x0
c000d045:	53                   	push   ebx
c000d046:	e8 53 fe ff ff       	call   c000ce9e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d04b:	83 c4 20             	add    esp,0x20
c000d04e:	e9 79 01 00 00       	jmp    c000d1cc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d053:	89 f0                	mov    eax,esi
c000d055:	31 f6                	xor    esi,esi
c000d057:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d05e:	75 02                	jne    c000d062 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d060:	89 f1                	mov    ecx,esi
c000d062:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d069:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d070:	c1 e2 08             	shl    edx,0x8
c000d073:	c1 e7 10             	shl    edi,0x10
c000d076:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d07e:	09 fa                	or     edx,edi
c000d080:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d088:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d08f:	83 c0 10             	add    eax,0x10
c000d092:	09 fa                	or     edx,edi
c000d094:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d09b:	c1 e7 18             	shl    edi,0x18
c000d09e:	09 fa                	or     edx,edi
c000d0a0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d0a7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d0ab:	c1 e7 10             	shl    edi,0x10
c000d0ae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d0b5:	c1 e2 08             	shl    edx,0x8
c000d0b8:	09 fa                	or     edx,edi
c000d0ba:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d0c1:	09 fa                	or     edx,edi
c000d0c3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d0ca:	c1 e7 18             	shl    edi,0x18
c000d0cd:	09 fa                	or     edx,edi
c000d0cf:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d0d3:	46                   	inc    esi
c000d0d4:	83 fe 04             	cmp    esi,0x4
c000d0d7:	0f 85 7a ff ff ff    	jne    c000d057 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e1:	83 f0 01             	xor    eax,0x1
c000d0e4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d0e8:	75 57                	jne    c000d141 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0ee:	83 f0 01             	xor    eax,0x1
c000d0f1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d0f5:	75 4a                	jne    c000d141 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0f7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d0fb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d103:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d10b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d111:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d117:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d11d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d121:	89 f7                	mov    edi,esi
c000d123:	c1 e0 0a             	shl    eax,0xa
c000d126:	c1 ff 1f             	sar    edi,0x1f
c000d129:	57                   	push   edi
c000d12a:	56                   	push   esi
c000d12b:	52                   	push   edx
c000d12c:	50                   	push   eax
c000d12d:	e8 be f0 00 00       	call   c001c1f0 <__udivdi3>
c000d132:	83 c4 10             	add    esp,0x10
c000d135:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d139:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d13d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d141:	84 c9                	test   cl,cl
c000d143:	74 53                	je     c000d198 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d145:	0f b6 c9             	movzx  ecx,cl
c000d148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d150:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d154:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d158:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d15c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d160:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d164:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d168:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d16c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d174:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d178:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d17c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d180:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d184:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d188:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d18c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d190:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d194:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d198:	31 ed                	xor    ebp,ebp
c000d19a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d19e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d1a2:	89 f8                	mov    eax,edi
c000d1a4:	09 f0                	or     eax,esi
c000d1a6:	74 1e                	je     c000d1c6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d1a8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d1ac:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d1b0:	89 d1                	mov    ecx,edx
c000d1b2:	09 c1                	or     ecx,eax
c000d1b4:	74 10                	je     c000d1c6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d1b6:	83 ec 0c             	sub    esp,0xc
c000d1b9:	57                   	push   edi
c000d1ba:	56                   	push   esi
c000d1bb:	52                   	push   edx
c000d1bc:	50                   	push   eax
c000d1bd:	53                   	push   ebx
c000d1be:	e8 db fc ff ff       	call   c000ce9e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d1c3:	83 c4 20             	add    esp,0x20
c000d1c6:	45                   	inc    ebp
c000d1c7:	83 fd 04             	cmp    ebp,0x4
c000d1ca:	75 ce                	jne    c000d19a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d1cc:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d1d2:	5b                   	pop    ebx
c000d1d3:	5e                   	pop    esi
c000d1d4:	5f                   	pop    edi
c000d1d5:	5d                   	pop    ebp
c000d1d6:	c3                   	ret    
c000d1d7:	90                   	nop

c000d1d8 <Serial::Serial(char const*)>:
c000d1d8:	83 ec 0c             	sub    esp,0xc
c000d1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1df:	83 ec 08             	sub    esp,0x8
c000d1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e6:	50                   	push   eax
c000d1e7:	e8 04 ea ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000d1ec:	83 c4 10             	add    esp,0x10
c000d1ef:	ba a8 e2 01 c0       	mov    edx,0xc001e2a8
c000d1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f8:	89 10                	mov    DWORD PTR [eax],edx
c000d1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fe:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d208:	90                   	nop
c000d209:	83 c4 0c             	add    esp,0xc
c000d20c:	c3                   	ret    
c000d20d:	90                   	nop
c000d20e:	66 90                	xchg   ax,ax

c000d210 <Serial::~Serial()>:
c000d210:	83 ec 0c             	sub    esp,0xc
c000d213:	ba a8 e2 01 c0       	mov    edx,0xc001e2a8
c000d218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d21c:	89 10                	mov    DWORD PTR [eax],edx
c000d21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d222:	83 ec 0c             	sub    esp,0xc
c000d225:	50                   	push   eax
c000d226:	e8 2f e7 ff ff       	call   c000b95a <Device::~Device()>
c000d22b:	83 c4 10             	add    esp,0x10
c000d22e:	90                   	nop
c000d22f:	83 c4 0c             	add    esp,0xc
c000d232:	c3                   	ret    
c000d233:	90                   	nop

c000d234 <Serial::~Serial()>:
c000d234:	83 ec 0c             	sub    esp,0xc
c000d237:	83 ec 0c             	sub    esp,0xc
c000d23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23e:	e8 cd ff ff ff       	call   c000d210 <Serial::~Serial()>
c000d243:	83 c4 10             	add    esp,0x10
c000d246:	83 ec 08             	sub    esp,0x8
c000d249:	68 58 01 00 00       	push   0x158
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	e8 cc d2 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000d257:	83 c4 10             	add    esp,0x10
c000d25a:	83 c4 0c             	add    esp,0xc
c000d25d:	c3                   	ret    
c000d25e:	66 90                	xchg   ax,ax

c000d260 <Timer::Timer(char const*)>:
c000d260:	83 ec 0c             	sub    esp,0xc
c000d263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d267:	83 ec 08             	sub    esp,0x8
c000d26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d26e:	50                   	push   eax
c000d26f:	e8 7c e9 ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000d274:	83 c4 10             	add    esp,0x10
c000d277:	ba ec e2 01 c0       	mov    edx,0xc001e2ec
c000d27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d280:	89 10                	mov    DWORD PTR [eax],edx
c000d282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d286:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d290:	90                   	nop
c000d291:	83 c4 0c             	add    esp,0xc
c000d294:	c3                   	ret    
c000d295:	90                   	nop
c000d296:	66 90                	xchg   ax,ax

c000d298 <Timer::~Timer()>:
c000d298:	83 ec 0c             	sub    esp,0xc
c000d29b:	ba ec e2 01 c0       	mov    edx,0xc001e2ec
c000d2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a4:	89 10                	mov    DWORD PTR [eax],edx
c000d2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2aa:	83 ec 0c             	sub    esp,0xc
c000d2ad:	50                   	push   eax
c000d2ae:	e8 a7 e6 ff ff       	call   c000b95a <Device::~Device()>
c000d2b3:	83 c4 10             	add    esp,0x10
c000d2b6:	90                   	nop
c000d2b7:	83 c4 0c             	add    esp,0xc
c000d2ba:	c3                   	ret    
c000d2bb:	90                   	nop

c000d2bc <Timer::~Timer()>:
c000d2bc:	83 ec 0c             	sub    esp,0xc
c000d2bf:	83 ec 0c             	sub    esp,0xc
c000d2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c6:	e8 cd ff ff ff       	call   c000d298 <Timer::~Timer()>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	83 ec 08             	sub    esp,0x8
c000d2d1:	68 5c 01 00 00       	push   0x15c
c000d2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2da:	e8 44 d2 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	83 c4 0c             	add    esp,0xc
c000d2e5:	c3                   	ret    

c000d2e6 <Timer::read()>:
c000d2e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2f0:	c3                   	ret    

c000d2f1 <setupTimer(int)>:
c000d2f1:	53                   	push   ebx
c000d2f2:	83 ec 14             	sub    esp,0x14
c000d2f5:	68 5c 01 00 00       	push   0x15c
c000d2fa:	e8 ba a4 ff ff       	call   c00077b9 <malloc>
c000d2ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000d302:	89 c3                	mov    ebx,eax
c000d304:	e8 fb e7 00 00       	call   c001bb04 <PIT::PIT()>
c000d309:	58                   	pop    eax
c000d30a:	5a                   	pop    edx
c000d30b:	53                   	push   ebx
c000d30c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d312:	e8 41 e7 ff ff       	call   c000ba58 <Device::addChild(Device*)>
c000d317:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d319:	6a 00                	push   0x0
c000d31b:	6a 00                	push   0x0
c000d31d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d321:	53                   	push   ebx
c000d322:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d325:	89 d8                	mov    eax,ebx
c000d327:	83 c4 28             	add    esp,0x28
c000d32a:	5b                   	pop    ebx
c000d32b:	c3                   	ret    

c000d32c <timerHandler(unsigned int)>:
c000d32c:	56                   	push   esi
c000d32d:	53                   	push   ebx
c000d32e:	51                   	push   ecx
c000d32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d333:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d339:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d340:	0f 84 4a 01 00 00    	je     c000d490 <timerHandler(unsigned int)+0x164>
c000d346:	fa                   	cli    
c000d347:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d34d:	83 ec 0c             	sub    esp,0xc
c000d350:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d356:	68 78 51 02 c0       	push   0xc0025178
c000d35b:	e8 60 f4 00 00       	call   c001c7c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d360:	83 c4 10             	add    esp,0x10
c000d363:	84 c0                	test   al,al
c000d365:	0f 85 a1 00 00 00    	jne    c000d40c <timerHandler(unsigned int)+0xe0>
c000d36b:	83 ec 0c             	sub    esp,0xc
c000d36e:	68 78 51 02 c0       	push   0xc0025178
c000d373:	e8 64 f4 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	89 c6                	mov    esi,eax
c000d37d:	8d 76 00             	lea    esi,[esi+0x0]
c000d380:	83 ec 0c             	sub    esp,0xc
c000d383:	68 78 51 02 c0       	push   0xc0025178
c000d388:	e8 4f f4 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d38d:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d394:	89 c3                	mov    ebx,eax
c000d396:	e8 49 f4 00 00       	call   c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d39b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d39e:	83 c4 10             	add    esp,0x10
c000d3a1:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d3a7:	77 23                	ja     c000d3cc <timerHandler(unsigned int)+0xa0>
c000d3a9:	83 ec 0c             	sub    esp,0xc
c000d3ac:	53                   	push   ebx
c000d3ad:	e8 a2 69 00 00       	call   c0013d54 <unblockTask(ThreadControlBlock*)>
c000d3b2:	83 c4 10             	add    esp,0x10
c000d3b5:	39 de                	cmp    esi,ebx
c000d3b7:	75 27                	jne    c000d3e0 <timerHandler(unsigned int)+0xb4>
c000d3b9:	83 ec 0c             	sub    esp,0xc
c000d3bc:	68 78 51 02 c0       	push   0xc0025178
c000d3c1:	e8 16 f4 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3c6:	89 c6                	mov    esi,eax
c000d3c8:	eb 12                	jmp    c000d3dc <timerHandler(unsigned int)+0xb0>
c000d3ca:	66 90                	xchg   ax,ax
c000d3cc:	52                   	push   edx
c000d3cd:	52                   	push   edx
c000d3ce:	53                   	push   ebx
c000d3cf:	68 78 51 02 c0       	push   0xc0025178
c000d3d4:	e8 c3 f4 00 00       	call   c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d3d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3dc:	83 c4 10             	add    esp,0x10
c000d3df:	90                   	nop
c000d3e0:	83 ec 0c             	sub    esp,0xc
c000d3e3:	68 78 51 02 c0       	push   0xc0025178
c000d3e8:	e8 d3 f3 00 00       	call   c001c7c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3ed:	83 c4 10             	add    esp,0x10
c000d3f0:	84 c0                	test   al,al
c000d3f2:	75 18                	jne    c000d40c <timerHandler(unsigned int)+0xe0>
c000d3f4:	83 ec 0c             	sub    esp,0xc
c000d3f7:	68 78 51 02 c0       	push   0xc0025178
c000d3fc:	e8 db f3 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d401:	83 c4 10             	add    esp,0x10
c000d404:	39 f0                	cmp    eax,esi
c000d406:	0f 85 74 ff ff ff    	jne    c000d380 <timerHandler(unsigned int)+0x54>
c000d40c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d411:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d415:	74 41                	je     c000d458 <timerHandler(unsigned int)+0x12c>
c000d417:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d41e:	74 38                	je     c000d458 <timerHandler(unsigned int)+0x12c>
c000d420:	fa                   	cli    
c000d421:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d427:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d42c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d432:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d435:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d43b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d43e:	72 08                	jb     c000d448 <timerHandler(unsigned int)+0x11c>
c000d440:	e8 4b 64 00 00       	call   c0013890 <schedule()>
c000d445:	8d 76 00             	lea    esi,[esi+0x0]
c000d448:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d44d:	48                   	dec    eax
c000d44e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d453:	75 03                	jne    c000d458 <timerHandler(unsigned int)+0x12c>
c000d455:	fb                   	sti    
c000d456:	66 90                	xchg   ax,ax
c000d458:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d45d:	48                   	dec    eax
c000d45e:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d463:	75 1b                	jne    c000d480 <timerHandler(unsigned int)+0x154>
c000d465:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d46c:	74 12                	je     c000d480 <timerHandler(unsigned int)+0x154>
c000d46e:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d478:	e8 13 64 00 00       	call   c0013890 <schedule()>
c000d47d:	8d 76 00             	lea    esi,[esi+0x0]
c000d480:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d485:	48                   	dec    eax
c000d486:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d48b:	75 03                	jne    c000d490 <timerHandler(unsigned int)+0x164>
c000d48d:	fb                   	sti    
c000d48e:	66 90                	xchg   ax,ax
c000d490:	58                   	pop    eax
c000d491:	5b                   	pop    ebx
c000d492:	5e                   	pop    esi
c000d493:	c3                   	ret    

c000d494 <VCache::VCache(PhysicalDisk*)>:
c000d494:	53                   	push   ebx
c000d495:	83 ec 18             	sub    esp,0x18
c000d498:	ba 1c e3 01 c0       	mov    edx,0xc001e31c
c000d49d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a1:	89 10                	mov    DWORD PTR [eax],edx
c000d4a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d4ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d4c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d4cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d4d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d4dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d4e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d4fb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d506:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d516:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d51e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d525:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d52d:	83 ec 0c             	sub    esp,0xc
c000d530:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d534:	e8 80 a2 ff ff       	call   c00077b9 <malloc>
c000d539:	83 c4 10             	add    esp,0x10
c000d53c:	89 c3                	mov    ebx,eax
c000d53e:	83 ec 0c             	sub    esp,0xc
c000d541:	53                   	push   ebx
c000d542:	e8 15 61 00 00       	call   c001365c <Mutex::Mutex()>
c000d547:	83 c4 10             	add    esp,0x10
c000d54a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d555:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d559:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d55c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d560:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d567:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d56b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d575:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d578:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d57c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d582:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d588:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d58c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d58f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d596:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d59a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d59e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d5a4:	05 00 01 00 00       	add    eax,0x100
c000d5a9:	c1 e0 04             	shl    eax,0x4
c000d5ac:	83 ec 0c             	sub    esp,0xc
c000d5af:	50                   	push   eax
c000d5b0:	e8 04 a2 ff ff       	call   c00077b9 <malloc>
c000d5b5:	83 c4 10             	add    esp,0x10
c000d5b8:	89 c2                	mov    edx,eax
c000d5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d5c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d5de:	c1 e0 06             	shl    eax,0x6
c000d5e1:	83 ec 0c             	sub    esp,0xc
c000d5e4:	50                   	push   eax
c000d5e5:	e8 cf a1 ff ff       	call   c00077b9 <malloc>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	89 c2                	mov    edx,eax
c000d5ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5f6:	90                   	nop
c000d5f7:	83 c4 18             	add    esp,0x18
c000d5fa:	5b                   	pop    ebx
c000d5fb:	c3                   	ret    

c000d5fc <VCache::invalidateReadBuffer()>:
c000d5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d600:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d606:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d60a:	c3                   	ret    
c000d60b:	90                   	nop

c000d60c <VCache::writeWriteBuffer()>:
c000d60c:	53                   	push   ebx
c000d60d:	83 ec 08             	sub    esp,0x8
c000d610:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d614:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d618:	74 1e                	je     c000d638 <VCache::writeWriteBuffer()+0x2c>
c000d61a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d61d:	83 ec 0c             	sub    esp,0xc
c000d620:	8b 10                	mov    edx,DWORD PTR [eax]
c000d622:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d625:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d628:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d62b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d62e:	50                   	push   eax
c000d62f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d632:	83 c4 20             	add    esp,0x20
c000d635:	8d 76 00             	lea    esi,[esi+0x0]
c000d638:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d63f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d646:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d64a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d651:	83 c4 08             	add    esp,0x8
c000d654:	5b                   	pop    ebx
c000d655:	c3                   	ret    
c000d656:	66 90                	xchg   ax,ax

c000d658 <VCache::~VCache()>:
c000d658:	83 ec 0c             	sub    esp,0xc
c000d65b:	ba 1c e3 01 c0       	mov    edx,0xc001e31c
c000d660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d664:	89 10                	mov    DWORD PTR [eax],edx
c000d666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d66d:	84 c0                	test   al,al
c000d66f:	74 0f                	je     c000d680 <VCache::~VCache()+0x28>
c000d671:	83 ec 0c             	sub    esp,0xc
c000d674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d678:	e8 8f ff ff ff       	call   c000d60c <VCache::writeWriteBuffer()>
c000d67d:	83 c4 10             	add    esp,0x10
c000d680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d684:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d687:	83 ec 0c             	sub    esp,0xc
c000d68a:	50                   	push   eax
c000d68b:	e8 39 a1 ff ff       	call   c00077c9 <free>
c000d690:	83 c4 10             	add    esp,0x10
c000d693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d697:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d69a:	83 ec 0c             	sub    esp,0xc
c000d69d:	50                   	push   eax
c000d69e:	e8 26 a1 ff ff       	call   c00077c9 <free>
c000d6a3:	83 c4 10             	add    esp,0x10
c000d6a6:	90                   	nop
c000d6a7:	83 c4 0c             	add    esp,0xc
c000d6aa:	c3                   	ret    
c000d6ab:	90                   	nop

c000d6ac <VCache::~VCache()>:
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	83 ec 0c             	sub    esp,0xc
c000d6b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b6:	e8 9d ff ff ff       	call   c000d658 <VCache::~VCache()>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	83 ec 08             	sub    esp,0x8
c000d6c1:	6a 44                	push   0x44
c000d6c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6c7:	e8 57 ce ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	83 c4 0c             	add    esp,0xc
c000d6d2:	c3                   	ret    
c000d6d3:	90                   	nop

c000d6d4 <VCache::write(unsigned long long, int, void*)>:
c000d6d4:	55                   	push   ebp
c000d6d5:	57                   	push   edi
c000d6d6:	56                   	push   esi
c000d6d7:	53                   	push   ebx
c000d6d8:	83 ec 1c             	sub    esp,0x1c
c000d6db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d6e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6e7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d6eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6f7:	31 c0                	xor    eax,eax
c000d6f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d6fc:	39 e8                	cmp    eax,ebp
c000d6fe:	7d 18                	jge    c000d718 <VCache::write(unsigned long long, int, void*)+0x44>
c000d700:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d703:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d709:	0f af c8             	imul   ecx,eax
c000d70c:	89 ca                	mov    edx,ecx
c000d70e:	01 f2                	add    edx,esi
c000d710:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d712:	40                   	inc    eax
c000d713:	eb e7                	jmp    c000d6fc <VCache::write(unsigned long long, int, void*)+0x28>
c000d715:	8d 76 00             	lea    esi,[esi+0x0]
c000d718:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d71c:	74 0a                	je     c000d728 <VCache::write(unsigned long long, int, void*)+0x54>
c000d71e:	53                   	push   ebx
c000d71f:	e8 d8 fe ff ff       	call   c000d5fc <VCache::invalidateReadBuffer()>
c000d724:	58                   	pop    eax
c000d725:	8d 76 00             	lea    esi,[esi+0x0]
c000d728:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d72c:	74 5a                	je     c000d788 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d72e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d731:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d735:	89 f8                	mov    eax,edi
c000d737:	99                   	cdq    
c000d738:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d73b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d73e:	31 c1                	xor    ecx,eax
c000d740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d744:	31 d0                	xor    eax,edx
c000d746:	09 c1                	or     ecx,eax
c000d748:	75 32                	jne    c000d77c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d74a:	83 fd 01             	cmp    ebp,0x1
c000d74d:	75 2d                	jne    c000d77c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d74f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d752:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d758:	0f af f9             	imul   edi,ecx
c000d75b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d75e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d760:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d763:	40                   	inc    eax
c000d764:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d767:	83 f8 40             	cmp    eax,0x40
c000d76a:	75 74                	jne    c000d7e0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	53                   	push   ebx
c000d770:	e8 97 fe ff ff       	call   c000d60c <VCache::writeWriteBuffer()>
c000d775:	83 c4 10             	add    esp,0x10
c000d778:	eb 66                	jmp    c000d7e0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d77a:	66 90                	xchg   ax,ax
c000d77c:	83 ec 0c             	sub    esp,0xc
c000d77f:	53                   	push   ebx
c000d780:	e8 87 fe ff ff       	call   c000d60c <VCache::writeWriteBuffer()>
c000d785:	83 c4 10             	add    esp,0x10
c000d788:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d78b:	83 fd 3f             	cmp    ebp,0x3f
c000d78e:	7f 24                	jg     c000d7b4 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d790:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d794:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d797:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d79a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d79e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d7a2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d7a5:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d7a8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d7ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7b0:	eb 2e                	jmp    c000d7e0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d7b2:	66 90                	xchg   ax,ax
c000d7b4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d7ba:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d7be:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d7c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7c6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d7ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d7ce:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d7d2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d7d5:	83 c4 1c             	add    esp,0x1c
c000d7d8:	5b                   	pop    ebx
c000d7d9:	5e                   	pop    esi
c000d7da:	5f                   	pop    edi
c000d7db:	5d                   	pop    ebp
c000d7dc:	ff e0                	jmp    eax
c000d7de:	66 90                	xchg   ax,ax
c000d7e0:	83 c4 1c             	add    esp,0x1c
c000d7e3:	31 c0                	xor    eax,eax
c000d7e5:	5b                   	pop    ebx
c000d7e6:	5e                   	pop    esi
c000d7e7:	5f                   	pop    edi
c000d7e8:	5d                   	pop    ebp
c000d7e9:	c3                   	ret    

c000d7ea <VCache::read(unsigned long long, int, void*)>:
c000d7ea:	55                   	push   ebp
c000d7eb:	57                   	push   edi
c000d7ec:	56                   	push   esi
c000d7ed:	53                   	push   ebx
c000d7ee:	83 ec 1c             	sub    esp,0x1c
c000d7f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7f9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d7fd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d801:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d805:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d809:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d80d:	74 0d                	je     c000d81c <VCache::read(unsigned long long, int, void*)+0x32>
c000d80f:	83 ec 0c             	sub    esp,0xc
c000d812:	55                   	push   ebp
c000d813:	e8 f4 fd ff ff       	call   c000d60c <VCache::writeWriteBuffer()>
c000d818:	83 c4 10             	add    esp,0x10
c000d81b:	90                   	nop
c000d81c:	83 ec 0c             	sub    esp,0xc
c000d81f:	55                   	push   ebp
c000d820:	e8 d7 fd ff ff       	call   c000d5fc <VCache::invalidateReadBuffer()>
c000d825:	83 c4 0c             	add    esp,0xc
c000d828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d831:	6a 00                	push   0x0
c000d833:	53                   	push   ebx
c000d834:	e8 97 2c ff ff       	call   c00004d0 <memset>
c000d839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d840:	8b 10                	mov    edx,DWORD PTR [eax]
c000d842:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d846:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d84a:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d84e:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d852:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d856:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d859:	83 c4 2c             	add    esp,0x2c
c000d85c:	5b                   	pop    ebx
c000d85d:	5e                   	pop    esi
c000d85e:	5f                   	pop    edi
c000d85f:	5d                   	pop    ebp
c000d860:	ff e0                	jmp    eax

c000d862 <Video::putrect(int, int, int, int, unsigned int)>:
c000d862:	55                   	push   ebp
c000d863:	57                   	push   edi
c000d864:	56                   	push   esi
c000d865:	53                   	push   ebx
c000d866:	83 ec 1c             	sub    esp,0x1c
c000d869:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d86d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d871:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d875:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d879:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d87d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d881:	01 df                	add    edi,ebx
c000d883:	39 fb                	cmp    ebx,edi
c000d885:	7d 1f                	jge    c000d8a6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d887:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d88b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d88f:	7d 12                	jge    c000d8a3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d891:	8b 16                	mov    edx,DWORD PTR [esi]
c000d893:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d897:	53                   	push   ebx
c000d898:	55                   	push   ebp
c000d899:	45                   	inc    ebp
c000d89a:	56                   	push   esi
c000d89b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	eb e8                	jmp    c000d88b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d8a3:	43                   	inc    ebx
c000d8a4:	eb dd                	jmp    c000d883 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d8a6:	83 c4 1c             	add    esp,0x1c
c000d8a9:	5b                   	pop    ebx
c000d8aa:	5e                   	pop    esi
c000d8ab:	5f                   	pop    edi
c000d8ac:	5d                   	pop    ebp
c000d8ad:	c3                   	ret    

c000d8ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d8ae:	55                   	push   ebp
c000d8af:	57                   	push   edi
c000d8b0:	31 ff                	xor    edi,edi
c000d8b2:	56                   	push   esi
c000d8b3:	53                   	push   ebx
c000d8b4:	83 ec 1c             	sub    esp,0x1c
c000d8b7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d8bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d8bf:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d8c6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d8cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cf:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d8d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8d7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d8da:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d8de:	01 f9                	add    ecx,edi
c000d8e0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d8e4:	7d 2f                	jge    c000d915 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d8e6:	31 f6                	xor    esi,esi
c000d8e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d8ec:	01 f2                	add    edx,esi
c000d8ee:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d8f2:	7d 1a                	jge    c000d90e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d8f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8f7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d8fa:	46                   	inc    esi
c000d8fb:	51                   	push   ecx
c000d8fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d900:	52                   	push   edx
c000d901:	55                   	push   ebp
c000d902:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d905:	83 c4 10             	add    esp,0x10
c000d908:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d90c:	eb da                	jmp    c000d8e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d90e:	47                   	inc    edi
c000d90f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d913:	eb c5                	jmp    c000d8da <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d915:	83 c4 1c             	add    esp,0x1c
c000d918:	5b                   	pop    ebx
c000d919:	5e                   	pop    esi
c000d91a:	5f                   	pop    edi
c000d91b:	5d                   	pop    ebp
c000d91c:	c3                   	ret    
c000d91d:	90                   	nop

c000d91e <Video::blit(unsigned int*, int, int, int, int)>:
c000d91e:	55                   	push   ebp
c000d91f:	57                   	push   edi
c000d920:	56                   	push   esi
c000d921:	53                   	push   ebx
c000d922:	83 ec 1c             	sub    esp,0x1c
c000d925:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d929:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d92d:	85 c0                	test   eax,eax
c000d92f:	79 02                	jns    c000d933 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d931:	31 c0                	xor    eax,eax
c000d933:	c1 e0 02             	shl    eax,0x2
c000d936:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d93a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d93e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d942:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d946:	39 d8                	cmp    eax,ebx
c000d948:	7e 49                	jle    c000d993 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d94a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d950:	7c 41                	jl     c000d993 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d952:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d956:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d95a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d95e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d962:	39 f9                	cmp    ecx,edi
c000d964:	7e 22                	jle    c000d988 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d966:	83 c5 04             	add    ebp,0x4
c000d969:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d96f:	7c 14                	jl     c000d985 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d971:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d973:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d976:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d97a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d97e:	56                   	push   esi
c000d97f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d982:	83 c4 10             	add    esp,0x10
c000d985:	47                   	inc    edi
c000d986:	eb d2                	jmp    c000d95a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d98c:	43                   	inc    ebx
c000d98d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d991:	eb ab                	jmp    c000d93e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d993:	83 c4 1c             	add    esp,0x1c
c000d996:	5b                   	pop    ebx
c000d997:	5e                   	pop    esi
c000d998:	5f                   	pop    edi
c000d999:	5d                   	pop    ebp
c000d99a:	c3                   	ret    
c000d99b:	90                   	nop

c000d99c <Video::clearScreen(unsigned int)>:
c000d99c:	57                   	push   edi
c000d99d:	56                   	push   esi
c000d99e:	53                   	push   ebx
c000d99f:	31 db                	xor    ebx,ebx
c000d9a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9a5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d9ab:	7e 1f                	jle    c000d9cc <Video::clearScreen(unsigned int)+0x30>
c000d9ad:	31 ff                	xor    edi,edi
c000d9af:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d9b5:	7e 12                	jle    c000d9c9 <Video::clearScreen(unsigned int)+0x2d>
c000d9b7:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9bd:	53                   	push   ebx
c000d9be:	57                   	push   edi
c000d9bf:	47                   	inc    edi
c000d9c0:	56                   	push   esi
c000d9c1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	eb e6                	jmp    c000d9af <Video::clearScreen(unsigned int)+0x13>
c000d9c9:	43                   	inc    ebx
c000d9ca:	eb d9                	jmp    c000d9a5 <Video::clearScreen(unsigned int)+0x9>
c000d9cc:	5b                   	pop    ebx
c000d9cd:	5e                   	pop    esi
c000d9ce:	5f                   	pop    edi
c000d9cf:	c3                   	ret    

c000d9d0 <Video::putpixel(int, int, unsigned int)>:
c000d9d0:	c7 44 24 04 24 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e324
c000d9d8:	e9 be 28 00 00       	jmp    c001029b <KePanic(char const*)>
c000d9dd:	90                   	nop

c000d9de <Video::Video(char const*)>:
c000d9de:	83 ec 0c             	sub    esp,0xc
c000d9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e5:	83 ec 08             	sub    esp,0x8
c000d9e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ec:	50                   	push   eax
c000d9ed:	e8 fe e1 ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000d9f2:	83 c4 10             	add    esp,0x10
c000d9f5:	ba 94 e3 01 c0       	mov    edx,0xc001e394
c000d9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fe:	89 10                	mov    DWORD PTR [eax],edx
c000da00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da04:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000da0e:	90                   	nop
c000da0f:	83 c4 0c             	add    esp,0xc
c000da12:	c3                   	ret    
c000da13:	90                   	nop

c000da14 <Video::~Video()>:
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	ba 94 e3 01 c0       	mov    edx,0xc001e394
c000da1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da20:	89 10                	mov    DWORD PTR [eax],edx
c000da22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da26:	83 ec 0c             	sub    esp,0xc
c000da29:	50                   	push   eax
c000da2a:	e8 2b df ff ff       	call   c000b95a <Device::~Device()>
c000da2f:	83 c4 10             	add    esp,0x10
c000da32:	90                   	nop
c000da33:	83 c4 0c             	add    esp,0xc
c000da36:	c3                   	ret    
c000da37:	90                   	nop

c000da38 <Video::~Video()>:
c000da38:	83 ec 0c             	sub    esp,0xc
c000da3b:	83 ec 0c             	sub    esp,0xc
c000da3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da42:	e8 cd ff ff ff       	call   c000da14 <Video::~Video()>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	83 ec 08             	sub    esp,0x8
c000da4d:	68 64 01 00 00       	push   0x164
c000da52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da56:	e8 c8 ca ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c000da5b:	83 c4 10             	add    esp,0x10
c000da5e:	83 c4 0c             	add    esp,0xc
c000da61:	c3                   	ret    

c000da62 <Video::isMonochrome()>:
c000da62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da66:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000da6c:	c3                   	ret    
c000da6d:	90                   	nop

c000da6e <Video::getWidth()>:
c000da6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da72:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da78:	c3                   	ret    
c000da79:	90                   	nop

c000da7a <Video::getHeight()>:
c000da7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da84:	c3                   	ret    
c000da85:	90                   	nop

c000da86 <Video::drawCursor(int, int, unsigned char*, int)>:
c000da86:	55                   	push   ebp
c000da87:	57                   	push   edi
c000da88:	56                   	push   esi
c000da89:	53                   	push   ebx
c000da8a:	83 ec 2c             	sub    esp,0x2c
c000da8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da91:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000da95:	83 f8 01             	cmp    eax,0x1
c000da98:	19 c9                	sbb    ecx,ecx
c000da9a:	31 db                	xor    ebx,ebx
c000da9c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000daa0:	89 cd                	mov    ebp,ecx
c000daa2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000daaa:	f7 d5                	not    ebp
c000daac:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dab2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dab6:	01 d8                	add    eax,ebx
c000dab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dabc:	56                   	push   esi
c000dabd:	e8 b8 ff ff ff       	call   c000da7a <Video::getHeight()>
c000dac2:	59                   	pop    ecx
c000dac3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dac7:	7e 70                	jle    c000db39 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000dac9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dacd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dad1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dad4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dad8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dadc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dae3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dae7:	89 f8                	mov    eax,edi
c000dae9:	83 c0 20             	add    eax,0x20
c000daec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000daf0:	56                   	push   esi
c000daf1:	e8 78 ff ff ff       	call   c000da6e <Video::getWidth()>
c000daf6:	5a                   	pop    edx
c000daf7:	39 c7                	cmp    edi,eax
c000daf9:	7d 34                	jge    c000db2f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000dafb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000db00:	74 05                	je     c000db07 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000db02:	8b 06                	mov    eax,DWORD PTR [esi]
c000db04:	55                   	push   ebp
c000db05:	eb 0d                	jmp    c000db14 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000db07:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000db0c:	74 12                	je     c000db20 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000db0e:	8b 06                	mov    eax,DWORD PTR [esi]
c000db10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db14:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db18:	57                   	push   edi
c000db19:	56                   	push   esi
c000db1a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db1d:	83 c4 10             	add    esp,0x10
c000db20:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000db24:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000db28:	47                   	inc    edi
c000db29:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000db2d:	75 c1                	jne    c000daf0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000db2f:	43                   	inc    ebx
c000db30:	83 fb 20             	cmp    ebx,0x20
c000db33:	0f 85 79 ff ff ff    	jne    c000dab2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000db39:	83 c4 2c             	add    esp,0x2c
c000db3c:	5b                   	pop    ebx
c000db3d:	5e                   	pop    esi
c000db3e:	5f                   	pop    edi
c000db3f:	5d                   	pop    ebp
c000db40:	c3                   	ret    
c000db41:	90                   	nop

c000db42 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000db42:	55                   	push   ebp
c000db43:	57                   	push   edi
c000db44:	56                   	push   esi
c000db45:	53                   	push   ebx
c000db46:	83 ec 28             	sub    esp,0x28
c000db49:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000db4d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000db51:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000db55:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000db59:	c1 e6 08             	shl    esi,0x8
c000db5c:	01 c6                	add    esi,eax
c000db5e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000db62:	c1 e0 08             	shl    eax,0x8
c000db65:	01 d0                	add    eax,edx
c000db67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db6f:	0f af c6             	imul   eax,esi
c000db72:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000db79:	50                   	push   eax
c000db7a:	e8 3a 9c ff ff       	call   c00077b9 <malloc>
c000db7f:	83 c4 10             	add    esp,0x10
c000db82:	89 c7                	mov    edi,eax
c000db84:	85 c0                	test   eax,eax
c000db86:	75 10                	jne    c000db98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000db88:	83 ec 0c             	sub    esp,0xc
c000db8b:	68 45 e3 01 c0       	push   0xc001e345
c000db90:	e8 06 27 00 00       	call   c001029b <KePanic(char const*)>
c000db95:	83 c4 10             	add    esp,0x10
c000db98:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000db9b:	ba 12 00 00 00       	mov    edx,0x12
c000dba0:	84 c0                	test   al,al
c000dba2:	74 11                	je     c000dbb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dba4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dba8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dbac:	c1 fa 03             	sar    edx,0x3
c000dbaf:	0f af d1             	imul   edx,ecx
c000dbb2:	83 c2 12             	add    edx,0x12
c000dbb5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dbb9:	74 04                	je     c000dbbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dbbb:	85 f6                	test   esi,esi
c000dbbd:	75 12                	jne    c000dbd1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dbbf:	83 ec 0c             	sub    esp,0xc
c000dbc2:	68 55 e3 01 c0       	push   0xc001e355
c000dbc7:	e8 4d ca ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000dbcc:	e9 b8 00 00 00       	jmp    c000dc89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dbd1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dbd5:	80 f9 02             	cmp    cl,0x2
c000dbd8:	0f 85 96 00 00 00    	jne    c000dc74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dbde:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dbe3:	75 0e                	jne    c000dbf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbe5:	84 c0                	test   al,al
c000dbe7:	75 0a                	jne    c000dbf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbe9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dbec:	83 e8 18             	sub    eax,0x18
c000dbef:	a8 f7                	test   al,0xf7
c000dbf1:	74 0a                	je     c000dbfd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dbf3:	83 ec 0c             	sub    esp,0xc
c000dbf6:	68 6a e3 01 c0       	push   0xc001e36a
c000dbfb:	eb 7f                	jmp    c000dc7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dbfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dc05:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dc0d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dc11:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc19:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dc1d:	75 0c                	jne    c000dc2b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dc1f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dc24:	c1 e0 18             	shl    eax,0x18
c000dc27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc2b:	45                   	inc    ebp
c000dc2c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dc31:	c1 e1 10             	shl    ecx,0x10
c000dc34:	89 c8                	mov    eax,ecx
c000dc36:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dc3b:	c1 e1 08             	shl    ecx,0x8
c000dc3e:	09 c1                	or     ecx,eax
c000dc40:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dc44:	09 c1                	or     ecx,eax
c000dc46:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dc4a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dc4e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dc52:	c1 f8 03             	sar    eax,0x3
c000dc55:	01 c2                	add    edx,eax
c000dc57:	89 e8                	mov    eax,ebp
c000dc59:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dc5d:	39 c6                	cmp    esi,eax
c000dc5f:	7f b0                	jg     c000dc11 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dc61:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dc65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc69:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dc6c:	7e 22                	jle    c000dc90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dc6e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dc72:	eb 99                	jmp    c000dc0d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dc74:	50                   	push   eax
c000dc75:	50                   	push   eax
c000dc76:	51                   	push   ecx
c000dc77:	68 78 e3 01 c0       	push   0xc001e378
c000dc7c:	e8 98 c9 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000dc81:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc84:	e8 40 9b ff ff       	call   c00077c9 <free>
c000dc89:	83 c4 10             	add    esp,0x10
c000dc8c:	31 ff                	xor    edi,edi
c000dc8e:	eb 0f                	jmp    c000dc9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dc90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dc94:	89 30                	mov    DWORD PTR [eax],esi
c000dc96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc9a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc9d:	89 30                	mov    DWORD PTR [eax],esi
c000dc9f:	83 c4 1c             	add    esp,0x1c
c000dca2:	89 f8                	mov    eax,edi
c000dca4:	5b                   	pop    ebx
c000dca5:	5e                   	pop    esi
c000dca6:	5f                   	pop    edi
c000dca7:	5d                   	pop    ebp
c000dca8:	c3                   	ret    
c000dca9:	90                   	nop

c000dcaa <Video::putTGA(int, int, unsigned char*, int)>:
c000dcaa:	55                   	push   ebp
c000dcab:	57                   	push   edi
c000dcac:	56                   	push   esi
c000dcad:	53                   	push   ebx
c000dcae:	83 ec 28             	sub    esp,0x28
c000dcb1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dcb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcb9:	50                   	push   eax
c000dcba:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcbe:	50                   	push   eax
c000dcbf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcc3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcc7:	56                   	push   esi
c000dcc8:	e8 75 fe ff ff       	call   c000db42 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dccd:	83 c4 20             	add    esp,0x20
c000dcd0:	85 c0                	test   eax,eax
c000dcd2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dcd6:	74 35                	je     c000dd0d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dcd8:	89 c7                	mov    edi,eax
c000dcda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dcde:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dce2:	39 d8                	cmp    eax,ebx
c000dce4:	7e 27                	jle    c000dd0d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dce6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dcea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dcee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dcf2:	39 e8                	cmp    eax,ebp
c000dcf4:	7e 14                	jle    c000dd0a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dcf6:	8b 06                	mov    eax,DWORD PTR [esi]
c000dcf8:	83 c7 04             	add    edi,0x4
c000dcfb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dcfe:	53                   	push   ebx
c000dcff:	55                   	push   ebp
c000dd00:	45                   	inc    ebp
c000dd01:	56                   	push   esi
c000dd02:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	eb e0                	jmp    c000dcea <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dd0a:	43                   	inc    ebx
c000dd0b:	eb cd                	jmp    c000dcda <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dd0d:	83 c4 1c             	add    esp,0x1c
c000dd10:	5b                   	pop    ebx
c000dd11:	5e                   	pop    esi
c000dd12:	5f                   	pop    edi
c000dd13:	5d                   	pop    ebp
c000dd14:	c3                   	ret    
c000dd15:	66 90                	xchg   ax,ax
c000dd17:	90                   	nop

c000dd18 <ACPI::close(int, int, void*)>:
c000dd18:	83 ec 1c             	sub    esp,0x1c
c000dd1b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dd23:	74 0b                	je     c000dd30 <ACPI::close(int, int, void*)+0x18>
c000dd25:	b8 00 00 00 00       	mov    eax,0x0
c000dd2a:	e9 9d 00 00 00       	jmp    c000ddcc <ACPI::close(int, int, void*)+0xb4>
c000dd2f:	90                   	nop
c000dd30:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dd35:	75 29                	jne    c000dd60 <ACPI::close(int, int, void*)+0x48>
c000dd37:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dd3c:	85 c0                	test   eax,eax
c000dd3e:	74 08                	je     c000dd48 <ACPI::close(int, int, void*)+0x30>
c000dd40:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dd45:	ff d0                	call   eax
c000dd47:	90                   	nop
c000dd48:	83 ec 0c             	sub    esp,0xc
c000dd4b:	68 d4 e3 01 c0       	push   0xc001e3d4
c000dd50:	e8 46 25 00 00       	call   c001029b <KePanic(char const*)>
c000dd55:	83 c4 10             	add    esp,0x10
c000dd58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd5d:	eb 6d                	jmp    c000ddcc <ACPI::close(int, int, void*)+0xb4>
c000dd5f:	90                   	nop
c000dd60:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dd65:	75 5d                	jne    c000ddc4 <ACPI::close(int, int, void*)+0xac>
c000dd67:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dd6c:	85 c0                	test   eax,eax
c000dd6e:	74 08                	je     c000dd78 <ACPI::close(int, int, void*)+0x60>
c000dd70:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dd75:	ff d0                	call   eax
c000dd77:	90                   	nop
c000dd78:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dd7d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd80:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dd84:	25 ff 00 00 00       	and    eax,0xff
c000dd89:	83 e0 02             	and    eax,0x2
c000dd8c:	74 1e                	je     c000ddac <ACPI::close(int, int, void*)+0x94>
c000dd8e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dd95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd99:	89 c2                	mov    edx,eax
c000dd9b:	ec                   	in     al,dx
c000dd9c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dda0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dda4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dda8:	eb d6                	jmp    c000dd80 <ACPI::close(int, int, void*)+0x68>
c000ddaa:	66 90                	xchg   ax,ax
c000ddac:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ddb3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ddb8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ddbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ddc0:	ee                   	out    dx,al
c000ddc1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ddc9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddcc:	83 c4 1c             	add    esp,0x1c
c000ddcf:	c3                   	ret    

c000ddd0 <findRSDP()>:
c000ddd0:	83 ec 1c             	sub    esp,0x1c
c000ddd3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ddd8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ddde:	83 e0 04             	and    eax,0x4
c000dde1:	84 c0                	test   al,al
c000dde3:	75 07                	jne    c000ddec <findRSDP()+0x1c>
c000dde5:	b8 00 00 00 00       	mov    eax,0x0
c000ddea:	eb 70                	jmp    c000de5c <findRSDP()+0x8c>
c000ddec:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000ddf1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ddf6:	7f 1c                	jg     c000de14 <findRSDP()+0x44>
c000ddf8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ddfd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000de03:	83 e2 fb             	and    edx,0xfffffffb
c000de06:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000de0c:	b8 00 00 00 00       	mov    eax,0x0
c000de11:	eb 49                	jmp    c000de5c <findRSDP()+0x8c>
c000de13:	90                   	nop
c000de14:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000de1c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000de24:	77 2e                	ja     c000de54 <findRSDP()+0x84>
c000de26:	83 ec 04             	sub    esp,0x4
c000de29:	6a 08                	push   0x8
c000de2b:	68 6f e4 01 c0       	push   0xc001e46f
c000de30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de34:	e8 57 25 ff ff       	call   c0000390 <memcmp>
c000de39:	83 c4 10             	add    esp,0x10
c000de3c:	85 c0                	test   eax,eax
c000de3e:	0f 94 c0             	sete   al
c000de41:	84 c0                	test   al,al
c000de43:	74 07                	je     c000de4c <findRSDP()+0x7c>
c000de45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de49:	eb 11                	jmp    c000de5c <findRSDP()+0x8c>
c000de4b:	90                   	nop
c000de4c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000de51:	eb c9                	jmp    c000de1c <findRSDP()+0x4c>
c000de53:	90                   	nop
c000de54:	b8 00 00 00 00       	mov    eax,0x0
c000de59:	8d 76 00             	lea    esi,[esi+0x0]
c000de5c:	83 c4 1c             	add    esp,0x1c
c000de5f:	c3                   	ret    

c000de60 <loadACPITables(unsigned char*)>:
c000de60:	57                   	push   edi
c000de61:	56                   	push   esi
c000de62:	53                   	push   ebx
c000de63:	83 ec 60             	sub    esp,0x60
c000de66:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000de6b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de71:	83 e0 04             	and    eax,0x4
c000de74:	84 c0                	test   al,al
c000de76:	0f 84 3c 02 00 00    	je     c000e0b8 <loadACPITables(unsigned char*)+0x258>
c000de7c:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000de81:	84 c0                	test   al,al
c000de83:	74 77                	je     c000defc <loadACPITables(unsigned char*)+0x9c>
c000de85:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000de8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de94:	83 e8 24             	sub    eax,0x24
c000de97:	c1 e8 03             	shr    eax,0x3
c000de9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000de9e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dea6:	66 90                	xchg   ax,ax
c000dea8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000deac:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000deb0:	0f 8d b6 00 00 00    	jge    c000df6c <loadACPITables(unsigned char*)+0x10c>
c000deb6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000deba:	83 c0 24             	add    eax,0x24
c000debd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dec1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dec5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dec9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000decd:	c1 e0 03             	shl    eax,0x3
c000ded0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ded4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ded8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dedb:	8b 00                	mov    eax,DWORD PTR [eax]
c000dedd:	89 c1                	mov    ecx,eax
c000dedf:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dee4:	8d 50 01             	lea    edx,[eax+0x1]
c000dee7:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000deed:	89 ca                	mov    edx,ecx
c000deef:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000def6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000defa:	eb ac                	jmp    c000dea8 <loadACPITables(unsigned char*)+0x48>
c000defc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df00:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df0b:	83 e8 24             	sub    eax,0x24
c000df0e:	c1 e8 02             	shr    eax,0x2
c000df11:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df15:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000df1d:	8d 76 00             	lea    esi,[esi+0x0]
c000df20:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df24:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000df28:	7d 42                	jge    c000df6c <loadACPITables(unsigned char*)+0x10c>
c000df2a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df2e:	83 c0 24             	add    eax,0x24
c000df31:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df39:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000df3d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df41:	c1 e0 02             	shl    eax,0x2
c000df44:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000df4c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000df4e:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000df53:	8d 50 01             	lea    edx,[eax+0x1]
c000df56:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000df5c:	89 ca                	mov    edx,ecx
c000df5e:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000df65:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000df69:	eb b5                	jmp    c000df20 <loadACPITables(unsigned char*)+0xc0>
c000df6b:	90                   	nop
c000df6c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000df74:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000df79:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000df7d:	0f 8d 39 01 00 00    	jge    c000e0bc <loadACPITables(unsigned char*)+0x25c>
c000df83:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df87:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000df8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000df9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df9e:	25 ff 0f 00 00       	and    eax,0xfff
c000dfa3:	89 c6                	mov    esi,eax
c000dfa5:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000dfab:	83 ec 0c             	sub    esp,0xc
c000dfae:	6a 01                	push   0x1
c000dfb0:	e8 d0 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000dfb5:	83 c4 10             	add    esp,0x10
c000dfb8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dfbc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	6a 01                	push   0x1
c000dfc7:	6a 01                	push   0x1
c000dfc9:	50                   	push   eax
c000dfca:	52                   	push   edx
c000dfcb:	53                   	push   ebx
c000dfcc:	e8 21 bc ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfd1:	83 c4 20             	add    esp,0x20
c000dfd4:	09 f0                	or     eax,esi
c000dfd6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfda:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfde:	c1 e0 03             	shl    eax,0x3
c000dfe1:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000dfe6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dff2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000dffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e006:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e00a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e00e:	89 c6                	mov    esi,eax
c000e010:	89 d7                	mov    edi,edx
c000e012:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e014:	89 c8                	mov    eax,ecx
c000e016:	89 fa                	mov    edx,edi
c000e018:	89 f3                	mov    ebx,esi
c000e01a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e01e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e022:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e026:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e02a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e02d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e031:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e035:	05 00 10 00 00       	add    eax,0x1000
c000e03a:	c1 e8 0c             	shr    eax,0xc
c000e03d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e041:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e045:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e049:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e04d:	25 ff 0f 00 00       	and    eax,0xfff
c000e052:	89 c6                	mov    esi,eax
c000e054:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e05a:	83 ec 0c             	sub    esp,0xc
c000e05d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e061:	e8 1f b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e066:	83 c4 10             	add    esp,0x10
c000e069:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e06d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e073:	83 ec 0c             	sub    esp,0xc
c000e076:	6a 01                	push   0x1
c000e078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e07c:	50                   	push   eax
c000e07d:	52                   	push   edx
c000e07e:	53                   	push   ebx
c000e07f:	e8 6e bb ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e084:	83 c4 20             	add    esp,0x20
c000e087:	09 f0                	or     eax,esi
c000e089:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e08d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e091:	83 ec 0c             	sub    esp,0xc
c000e094:	50                   	push   eax
c000e095:	e8 df b4 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c000e09a:	83 c4 10             	add    esp,0x10
c000e09d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e0a5:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000e0ac:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e0b0:	e9 bf fe ff ff       	jmp    c000df74 <loadACPITables(unsigned char*)+0x114>
c000e0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0b8:	90                   	nop
c000e0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e0bc:	83 c4 60             	add    esp,0x60
c000e0bf:	5b                   	pop    ebx
c000e0c0:	5e                   	pop    esi
c000e0c1:	5f                   	pop    edi
c000e0c2:	c3                   	ret    
c000e0c3:	90                   	nop

c000e0c4 <findRSDT(unsigned char*)>:
c000e0c4:	57                   	push   edi
c000e0c5:	56                   	push   esi
c000e0c6:	53                   	push   ebx
c000e0c7:	83 ec 50             	sub    esp,0x50
c000e0ca:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e0cf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0d5:	83 e0 04             	and    eax,0x4
c000e0d8:	84 c0                	test   al,al
c000e0da:	75 0c                	jne    c000e0e8 <findRSDT(unsigned char*)+0x24>
c000e0dc:	b8 00 00 00 00       	mov    eax,0x0
c000e0e1:	e9 26 01 00 00       	jmp    c000e20c <findRSDT(unsigned char*)+0x148>
c000e0e6:	66 90                	xchg   ax,ax
c000e0e8:	89 e0                	mov    eax,esp
c000e0ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e0ee:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e0f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e0f6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e0fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e102:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e106:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e10a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e10e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e112:	89 c6                	mov    esi,eax
c000e114:	89 d7                	mov    edi,edx
c000e116:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e118:	89 c8                	mov    eax,ecx
c000e11a:	89 fa                	mov    edx,edi
c000e11c:	89 f3                	mov    ebx,esi
c000e11e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e122:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e126:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e12a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e12e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e132:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e13a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e13e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e142:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e14e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e152:	25 ff 0f 00 00       	and    eax,0xfff
c000e157:	89 c6                	mov    esi,eax
c000e159:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e15f:	83 ec 0c             	sub    esp,0xc
c000e162:	6a 02                	push   0x2
c000e164:	e8 1c b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e170:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e176:	83 ec 0c             	sub    esp,0xc
c000e179:	6a 01                	push   0x1
c000e17b:	6a 02                	push   0x2
c000e17d:	50                   	push   eax
c000e17e:	52                   	push   edx
c000e17f:	53                   	push   ebx
c000e180:	e8 6d ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e185:	83 c4 20             	add    esp,0x20
c000e188:	09 f0                	or     eax,esi
c000e18a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e18e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e192:	25 ff 0f 00 00       	and    eax,0xfff
c000e197:	89 c6                	mov    esi,eax
c000e199:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e19f:	83 ec 0c             	sub    esp,0xc
c000e1a2:	6a 02                	push   0x2
c000e1a4:	e8 dc b0 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e1a9:	83 c4 10             	add    esp,0x10
c000e1ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e1b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1b6:	83 ec 0c             	sub    esp,0xc
c000e1b9:	6a 01                	push   0x1
c000e1bb:	6a 02                	push   0x2
c000e1bd:	50                   	push   eax
c000e1be:	52                   	push   edx
c000e1bf:	53                   	push   ebx
c000e1c0:	e8 2d ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1c5:	83 c4 20             	add    esp,0x20
c000e1c8:	09 f0                	or     eax,esi
c000e1ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1ce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e1d3:	75 13                	jne    c000e1e8 <findRSDT(unsigned char*)+0x124>
c000e1d5:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e1dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1e4:	eb 22                	jmp    c000e208 <findRSDT(unsigned char*)+0x144>
c000e1e6:	66 90                	xchg   ax,ax
c000e1e8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e1ed:	75 11                	jne    c000e200 <findRSDT(unsigned char*)+0x13c>
c000e1ef:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e1f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1fa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1fe:	eb 08                	jmp    c000e208 <findRSDT(unsigned char*)+0x144>
c000e200:	b8 00 00 00 00       	mov    eax,0x0
c000e205:	eb 05                	jmp    c000e20c <findRSDT(unsigned char*)+0x148>
c000e207:	90                   	nop
c000e208:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e20c:	83 c4 50             	add    esp,0x50
c000e20f:	5b                   	pop    ebx
c000e210:	5e                   	pop    esi
c000e211:	5f                   	pop    edi
c000e212:	c3                   	ret    
c000e213:	90                   	nop

c000e214 <findDataTable(unsigned char*, char*)>:
c000e214:	83 ec 1c             	sub    esp,0x1c
c000e217:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e21c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e222:	83 e0 04             	and    eax,0x4
c000e225:	84 c0                	test   al,al
c000e227:	75 07                	jne    c000e230 <findDataTable(unsigned char*, char*)+0x1c>
c000e229:	b8 00 00 00 00       	mov    eax,0x0
c000e22e:	eb 58                	jmp    c000e288 <findDataTable(unsigned char*, char*)+0x74>
c000e230:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e238:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e23d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e241:	7d 3d                	jge    c000e280 <findDataTable(unsigned char*, char*)+0x6c>
c000e243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e247:	c1 e0 03             	shl    eax,0x3
c000e24a:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e24f:	83 ec 04             	sub    esp,0x4
c000e252:	6a 04                	push   0x4
c000e254:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e258:	50                   	push   eax
c000e259:	e8 32 21 ff ff       	call   c0000390 <memcmp>
c000e25e:	83 c4 10             	add    esp,0x10
c000e261:	85 c0                	test   eax,eax
c000e263:	0f 94 c0             	sete   al
c000e266:	84 c0                	test   al,al
c000e268:	74 0e                	je     c000e278 <findDataTable(unsigned char*, char*)+0x64>
c000e26a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e26e:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e275:	eb 11                	jmp    c000e288 <findDataTable(unsigned char*, char*)+0x74>
c000e277:	90                   	nop
c000e278:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e27c:	eb ba                	jmp    c000e238 <findDataTable(unsigned char*, char*)+0x24>
c000e27e:	66 90                	xchg   ax,ax
c000e280:	b8 00 00 00 00       	mov    eax,0x0
c000e285:	8d 76 00             	lea    esi,[esi+0x0]
c000e288:	83 c4 1c             	add    esp,0x1c
c000e28b:	c3                   	ret    

c000e28c <scanMADT()>:
c000e28c:	53                   	push   ebx
c000e28d:	83 ec 38             	sub    esp,0x38
c000e290:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e295:	25 00 04 00 00       	and    eax,0x400
c000e29a:	74 14                	je     c000e2b0 <scanMADT()+0x24>
c000e29c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2a1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2a7:	83 e2 fb             	and    edx,0xfffffffb
c000e2aa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2b0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2b5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e2bb:	83 e0 04             	and    eax,0x4
c000e2be:	84 c0                	test   al,al
c000e2c0:	0f 84 8a 04 00 00    	je     c000e750 <scanMADT()+0x4c4>
c000e2c6:	e8 05 fb ff ff       	call   c000ddd0 <findRSDP()>
c000e2cb:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e2d0:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e2d5:	85 c0                	test   eax,eax
c000e2d7:	75 1b                	jne    c000e2f4 <scanMADT()+0x68>
c000e2d9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2de:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2e4:	83 e2 fb             	and    edx,0xfffffffb
c000e2e7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2ed:	e9 66 04 00 00       	jmp    c000e758 <scanMADT()+0x4cc>
c000e2f2:	66 90                	xchg   ax,ax
c000e2f4:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e2f9:	83 ec 0c             	sub    esp,0xc
c000e2fc:	50                   	push   eax
c000e2fd:	e8 c2 fd ff ff       	call   c000e0c4 <findRSDT(unsigned char*)>
c000e302:	83 c4 10             	add    esp,0x10
c000e305:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e30a:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e30f:	85 c0                	test   eax,eax
c000e311:	75 19                	jne    c000e32c <scanMADT()+0xa0>
c000e313:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e318:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e31e:	83 e2 fb             	and    edx,0xfffffffb
c000e321:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e327:	e9 2c 04 00 00       	jmp    c000e758 <scanMADT()+0x4cc>
c000e32c:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	50                   	push   eax
c000e335:	e8 26 fb ff ff       	call   c000de60 <loadACPITables(unsigned char*)>
c000e33a:	83 c4 10             	add    esp,0x10
c000e33d:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e342:	83 ec 08             	sub    esp,0x8
c000e345:	68 78 e4 01 c0       	push   0xc001e478
c000e34a:	50                   	push   eax
c000e34b:	e8 c4 fe ff ff       	call   c000e214 <findDataTable(unsigned char*, char*)>
c000e350:	83 c4 10             	add    esp,0x10
c000e353:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e357:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e35c:	75 1a                	jne    c000e378 <scanMADT()+0xec>
c000e35e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e363:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e369:	83 e2 fe             	and    edx,0xfffffffe
c000e36c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e372:	e9 e1 03 00 00       	jmp    c000e758 <scanMADT()+0x4cc>
c000e377:	90                   	nop
c000e378:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e380:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e387:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e38b:	0f 87 c7 03 00 00    	ja     c000e758 <scanMADT()+0x4cc>
c000e391:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e399:	0f 87 b9 03 00 00    	ja     c000e758 <scanMADT()+0x4cc>
c000e39f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e3a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ab:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3ba:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e3be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c2:	8d 50 01             	lea    edx,[eax+0x1]
c000e3c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3d1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e3d5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e3da:	0f 86 74 03 00 00    	jbe    c000e754 <scanMADT()+0x4c8>
c000e3e0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e3e5:	75 5d                	jne    c000e444 <scanMADT()+0x1b8>
c000e3e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3eb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3f2:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e3f8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e3fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e402:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e406:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e40c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e410:	8d 42 01             	lea    eax,[edx+0x1]
c000e413:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e417:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e41c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e41f:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e425:	25 ff 00 00 00       	and    eax,0xff
c000e42a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e42e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e432:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e438:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e43d:	e9 f6 02 00 00       	jmp    c000e738 <scanMADT()+0x4ac>
c000e442:	66 90                	xchg   ax,ax
c000e444:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e449:	0f 85 29 01 00 00    	jne    c000e578 <scanMADT()+0x2ec>
c000e44f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e453:	8d 50 01             	lea    edx,[eax+0x1]
c000e456:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e45a:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e460:	81 e2 ff 00 00 00    	and    edx,0xff
c000e466:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e46a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e46e:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e474:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e478:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e47c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e480:	01 d0                	add    eax,edx
c000e482:	83 c0 2c             	add    eax,0x2c
c000e485:	8a 00                	mov    al,BYTE PTR [eax]
c000e487:	31 d2                	xor    edx,edx
c000e489:	88 c2                	mov    dl,al
c000e48b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e48f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e492:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e496:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e49a:	25 ff 00 00 00       	and    eax,0xff
c000e49f:	c1 e0 08             	shl    eax,0x8
c000e4a2:	89 d1                	mov    ecx,edx
c000e4a4:	09 c1                	or     ecx,eax
c000e4a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4aa:	8d 50 02             	lea    edx,[eax+0x2]
c000e4ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4b5:	25 ff 00 00 00       	and    eax,0xff
c000e4ba:	c1 e0 10             	shl    eax,0x10
c000e4bd:	09 c1                	or     ecx,eax
c000e4bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4c3:	8d 50 03             	lea    edx,[eax+0x3]
c000e4c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4ce:	25 ff 00 00 00       	and    eax,0xff
c000e4d3:	c1 e0 18             	shl    eax,0x18
c000e4d6:	09 c1                	or     ecx,eax
c000e4d8:	89 ca                	mov    edx,ecx
c000e4da:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4df:	25 ff 00 00 00       	and    eax,0xff
c000e4e4:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e4eb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f8:	01 d0                	add    eax,edx
c000e4fa:	83 c0 2c             	add    eax,0x2c
c000e4fd:	8a 00                	mov    al,BYTE PTR [eax]
c000e4ff:	31 d2                	xor    edx,edx
c000e501:	88 c2                	mov    dl,al
c000e503:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e507:	8d 48 01             	lea    ecx,[eax+0x1]
c000e50a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e50e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e512:	25 ff 00 00 00       	and    eax,0xff
c000e517:	c1 e0 08             	shl    eax,0x8
c000e51a:	89 d1                	mov    ecx,edx
c000e51c:	09 c1                	or     ecx,eax
c000e51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e522:	8d 50 02             	lea    edx,[eax+0x2]
c000e525:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e529:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e52d:	25 ff 00 00 00       	and    eax,0xff
c000e532:	c1 e0 10             	shl    eax,0x10
c000e535:	09 c1                	or     ecx,eax
c000e537:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e53b:	8d 50 03             	lea    edx,[eax+0x3]
c000e53e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e542:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e546:	25 ff 00 00 00       	and    eax,0xff
c000e54b:	c1 e0 18             	shl    eax,0x18
c000e54e:	09 c1                	or     ecx,eax
c000e550:	89 ca                	mov    edx,ecx
c000e552:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e557:	25 ff 00 00 00       	and    eax,0xff
c000e55c:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e563:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e568:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e56d:	40                   	inc    eax
c000e56e:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e573:	e9 c0 01 00 00       	jmp    c000e738 <scanMADT()+0x4ac>
c000e578:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e57d:	0f 85 fd 00 00 00    	jne    c000e680 <scanMADT()+0x3f4>
c000e583:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e587:	8d 50 01             	lea    edx,[eax+0x1]
c000e58a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e58e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e592:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e596:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e59a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e59e:	8d 50 01             	lea    edx,[eax+0x1]
c000e5a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5ad:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e5b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b9:	01 d0                	add    eax,edx
c000e5bb:	83 c0 2c             	add    eax,0x2c
c000e5be:	8a 00                	mov    al,BYTE PTR [eax]
c000e5c0:	31 d2                	xor    edx,edx
c000e5c2:	88 c2                	mov    dl,al
c000e5c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5cf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5d3:	25 ff 00 00 00       	and    eax,0xff
c000e5d8:	c1 e0 08             	shl    eax,0x8
c000e5db:	89 d1                	mov    ecx,edx
c000e5dd:	09 c1                	or     ecx,eax
c000e5df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5e3:	8d 50 02             	lea    edx,[eax+0x2]
c000e5e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5ea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5ee:	25 ff 00 00 00       	and    eax,0xff
c000e5f3:	c1 e0 10             	shl    eax,0x10
c000e5f6:	09 c1                	or     ecx,eax
c000e5f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5fc:	8d 50 03             	lea    edx,[eax+0x3]
c000e5ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e603:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e607:	25 ff 00 00 00       	and    eax,0xff
c000e60c:	c1 e0 18             	shl    eax,0x18
c000e60f:	09 c8                	or     eax,ecx
c000e611:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e615:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e61a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e61e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e622:	01 d0                	add    eax,edx
c000e624:	83 c0 2c             	add    eax,0x2c
c000e627:	8a 00                	mov    al,BYTE PTR [eax]
c000e629:	25 ff 00 00 00       	and    eax,0xff
c000e62e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e632:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e635:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e639:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e63d:	81 e2 ff 00 00 00    	and    edx,0xff
c000e643:	c1 e2 08             	shl    edx,0x8
c000e646:	09 d0                	or     eax,edx
c000e648:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e64d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e652:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e656:	25 ff 00 00 00       	and    eax,0xff
c000e65b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e65f:	88 90 00 f9 01 c0    	mov    BYTE PTR [eax-0x3ffe0700],dl
c000e665:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e669:	31 d2                	xor    edx,edx
c000e66b:	88 c2                	mov    dl,al
c000e66d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e672:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e67a:	e9 b9 00 00 00       	jmp    c000e738 <scanMADT()+0x4ac>
c000e67f:	90                   	nop
c000e680:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e685:	0f 85 a1 00 00 00    	jne    c000e72c <scanMADT()+0x4a0>
c000e68b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e68f:	8d 50 01             	lea    edx,[eax+0x1]
c000e692:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e69a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e69e:	25 ff 00 00 00       	and    eax,0xff
c000e6a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e6a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6af:	01 d0                	add    eax,edx
c000e6b1:	83 c0 2c             	add    eax,0x2c
c000e6b4:	8a 00                	mov    al,BYTE PTR [eax]
c000e6b6:	31 d2                	xor    edx,edx
c000e6b8:	88 c2                	mov    dl,al
c000e6ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6be:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6c9:	25 ff 00 00 00       	and    eax,0xff
c000e6ce:	c1 e0 08             	shl    eax,0x8
c000e6d1:	09 d0                	or     eax,edx
c000e6d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6d7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6e0:	8d 50 01             	lea    edx,[eax+0x1]
c000e6e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6eb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6ef:	25 ff 00 00 00       	and    eax,0xff
c000e6f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fc:	c1 e0 08             	shl    eax,0x8
c000e6ff:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e703:	89 c1                	mov    ecx,eax
c000e705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e709:	c1 e0 18             	shl    eax,0x18
c000e70c:	89 c3                	mov    ebx,eax
c000e70e:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e713:	8d 50 01             	lea    edx,[eax+0x1]
c000e716:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e71c:	09 d9                	or     ecx,ebx
c000e71e:	89 ca                	mov    edx,ecx
c000e720:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e727:	eb 0f                	jmp    c000e738 <scanMADT()+0x4ac>
c000e729:	8d 76 00             	lea    esi,[esi+0x0]
c000e72c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e731:	75 05                	jne    c000e738 <scanMADT()+0x4ac>
c000e733:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e738:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e73c:	31 d2                	xor    edx,edx
c000e73e:	88 c2                	mov    dl,al
c000e740:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e744:	01 d0                	add    eax,edx
c000e746:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e74a:	e9 31 fc ff ff       	jmp    c000e380 <scanMADT()+0xf4>
c000e74f:	90                   	nop
c000e750:	90                   	nop
c000e751:	eb 05                	jmp    c000e758 <scanMADT()+0x4cc>
c000e753:	90                   	nop
c000e754:	90                   	nop
c000e755:	8d 76 00             	lea    esi,[esi+0x0]
c000e758:	83 c4 38             	add    esp,0x38
c000e75b:	5b                   	pop    ebx
c000e75c:	c3                   	ret    
c000e75d:	90                   	nop
c000e75e:	66 90                	xchg   ax,ax

c000e760 <ACPI::ACPI()>:
c000e760:	83 ec 0c             	sub    esp,0xc
c000e763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e767:	83 ec 08             	sub    esp,0x8
c000e76a:	68 7d e4 01 c0       	push   0xc001e47d
c000e76f:	50                   	push   eax
c000e770:	e8 7b d4 ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000e775:	83 c4 10             	add    esp,0x10
c000e778:	ba b4 e5 01 c0       	mov    edx,0xc001e5b4
c000e77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e781:	89 10                	mov    DWORD PTR [eax],edx
c000e783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e787:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e792:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e7aa:	e8 dd fa ff ff       	call   c000e28c <scanMADT()>
c000e7af:	90                   	nop
c000e7b0:	83 c4 0c             	add    esp,0xc
c000e7b3:	c3                   	ret    

c000e7b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e7b4:	83 ec 2c             	sub    esp,0x2c
c000e7b7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e7bf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7c3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e7c7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e7cc:	88 d0                	mov    al,dl
c000e7ce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e7df:	90                   	nop
c000e7e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7e4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7ea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e7ee:	0f 8d 9c 00 00 00    	jge    c000e890 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e7f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7fc:	83 c2 2a             	add    edx,0x2a
c000e7ff:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e803:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e808:	75 7a                	jne    c000e884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e80a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e80e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e812:	83 c2 2a             	add    edx,0x2a
c000e815:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e819:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e81d:	75 65                	jne    c000e884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e81f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e824:	74 3a                	je     c000e860 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e826:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e82a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e82e:	83 c2 2a             	add    edx,0x2a
c000e831:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e839:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e83c:	39 c2                	cmp    edx,eax
c000e83e:	74 10                	je     c000e850 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e840:	83 ec 0c             	sub    esp,0xc
c000e843:	68 f8 e3 01 c0       	push   0xc001e3f8
c000e848:	e8 4e 1a 00 00       	call   c001029b <KePanic(char const*)>
c000e84d:	83 c4 10             	add    esp,0x10
c000e850:	83 ec 0c             	sub    esp,0xc
c000e853:	68 82 e4 01 c0       	push   0xc001e482
c000e858:	e8 3e 1a 00 00       	call   c001029b <KePanic(char const*)>
c000e85d:	83 c4 10             	add    esp,0x10
c000e860:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e864:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e868:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e86c:	83 c2 2a             	add    edx,0x2a
c000e86f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e873:	8b 02                	mov    eax,DWORD PTR [edx]
c000e875:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e878:	89 01                	mov    DWORD PTR [ecx],eax
c000e87a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e87d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e882:	66 90                	xchg   ax,ax
c000e884:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e888:	e9 53 ff ff ff       	jmp    c000e7e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e88d:	8d 76 00             	lea    esi,[esi+0x0]
c000e890:	90                   	nop
c000e891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e895:	83 c4 2c             	add    esp,0x2c
c000e898:	c2 04 00             	ret    0x4
c000e89b:	90                   	nop

c000e89c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8a3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e8a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e8ab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e8b0:	88 c8                	mov    al,cl
c000e8b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e8b6:	88 d0                	mov    al,dl
c000e8b8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ca:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e8cd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e8d1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e8d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8e3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e8e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8ea:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e8ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8f9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e8fd:	8d 48 01             	lea    ecx,[eax+0x1]
c000e900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e904:	83 c2 2a             	add    edx,0x2a
c000e907:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e90f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e919:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e91c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e920:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e928:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e92e:	8d 50 01             	lea    edx,[eax+0x1]
c000e931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e935:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e93b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e93f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e945:	3d 00 02 00 00       	cmp    eax,0x200
c000e94a:	75 10                	jne    c000e95c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e94c:	83 ec 0c             	sub    esp,0xc
c000e94f:	68 91 e4 01 c0       	push   0xc001e491
c000e954:	e8 42 19 00 00       	call   c001029b <KePanic(char const*)>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	90                   	nop
c000e95d:	83 c4 1c             	add    esp,0x1c
c000e960:	c3                   	ret    
c000e961:	90                   	nop
c000e962:	66 90                	xchg   ax,ax

c000e964 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e964:	b8 00 00 00 00       	mov    eax,0x0
c000e969:	c3                   	ret    
c000e96a:	66 90                	xchg   ax,ax

c000e96c <ACPI::detectPCI()>:
c000e96c:	53                   	push   ebx
c000e96d:	83 ec 28             	sub    esp,0x28
c000e970:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e975:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e97a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e97f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e985:	83 e0 04             	and    eax,0x4
c000e988:	84 c0                	test   al,al
c000e98a:	74 2c                	je     c000e9b8 <ACPI::detectPCI()+0x4c>
c000e98c:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e991:	83 ec 08             	sub    esp,0x8
c000e994:	68 ae e4 01 c0       	push   0xc001e4ae
c000e999:	50                   	push   eax
c000e99a:	e8 75 f8 ff ff       	call   c000e214 <findDataTable(unsigned char*, char*)>
c000e99f:	83 c4 10             	add    esp,0x10
c000e9a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9a6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e9ab:	74 0b                	je     c000e9b8 <ACPI::detectPCI()+0x4c>
c000e9ad:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9b2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9b7:	90                   	nop
c000e9b8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e9c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9c4:	8a 00                	mov    al,BYTE PTR [eax]
c000e9c6:	3c 01                	cmp    al,0x1
c000e9c8:	75 0e                	jne    c000e9d8 <ACPI::detectPCI()+0x6c>
c000e9ca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9cf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9d4:	eb 2a                	jmp    c000ea00 <ACPI::detectPCI()+0x94>
c000e9d6:	66 90                	xchg   ax,ax
c000e9d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9dc:	8a 00                	mov    al,BYTE PTR [eax]
c000e9de:	3c 02                	cmp    al,0x2
c000e9e0:	75 1e                	jne    c000ea00 <ACPI::detectPCI()+0x94>
c000e9e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9e7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9ec:	74 12                	je     c000ea00 <ACPI::detectPCI()+0x94>
c000e9ee:	83 ec 0c             	sub    esp,0xc
c000e9f1:	68 28 e4 01 c0       	push   0xc001e428
c000e9f6:	e8 a0 18 00 00       	call   c001029b <KePanic(char const*)>
c000e9fb:	83 c4 10             	add    esp,0x10
c000e9fe:	66 90                	xchg   ax,ax
c000ea00:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ea04:	83 f0 01             	xor    eax,0x1
c000ea07:	84 c0                	test   al,al
c000ea09:	74 41                	je     c000ea4c <ACPI::detectPCI()+0xe0>
c000ea0b:	e8 20 17 ff ff       	call   c0000130 <manualPCIProbe>
c000ea10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea14:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ea19:	75 0d                	jne    c000ea28 <ACPI::detectPCI()+0xbc>
c000ea1b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea20:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea25:	eb 25                	jmp    c000ea4c <ACPI::detectPCI()+0xe0>
c000ea27:	90                   	nop
c000ea28:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ea2d:	75 1d                	jne    c000ea4c <ACPI::detectPCI()+0xe0>
c000ea2f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea34:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea39:	74 11                	je     c000ea4c <ACPI::detectPCI()+0xe0>
c000ea3b:	83 ec 0c             	sub    esp,0xc
c000ea3e:	68 28 e4 01 c0       	push   0xc001e428
c000ea43:	e8 53 18 00 00       	call   c001029b <KePanic(char const*)>
c000ea48:	83 c4 10             	add    esp,0x10
c000ea4b:	90                   	nop
c000ea4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ea51:	0f 84 85 00 00 00    	je     c000eadc <ACPI::detectPCI()+0x170>
c000ea57:	83 ec 0c             	sub    esp,0xc
c000ea5a:	68 b3 e4 01 c0       	push   0xc001e4b3
c000ea5f:	e8 bf 11 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c000ea64:	83 c4 10             	add    esp,0x10
c000ea67:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ea6f:	83 ec 0c             	sub    esp,0xc
c000ea72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea76:	e8 3e 8d ff ff       	call   c00077b9 <malloc>
c000ea7b:	83 c4 10             	add    esp,0x10
c000ea7e:	89 c3                	mov    ebx,eax
c000ea80:	83 ec 0c             	sub    esp,0xc
c000ea83:	53                   	push   ebx
c000ea84:	e8 ad 9a 00 00       	call   c0018536 <PCI::PCI()>
c000ea89:	83 c4 10             	add    esp,0x10
c000ea8c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ea90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea94:	83 ec 08             	sub    esp,0x8
c000ea97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea9b:	50                   	push   eax
c000ea9c:	e8 b7 cf ff ff       	call   c000ba58 <Device::addChild(Device*)>
c000eaa1:	83 c4 10             	add    esp,0x10
c000eaa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaa8:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaaa:	83 c0 08             	add    eax,0x8
c000eaad:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaaf:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eab4:	74 0a                	je     c000eac0 <ACPI::detectPCI()+0x154>
c000eab6:	ba 01 00 00 00       	mov    edx,0x1
c000eabb:	eb 0b                	jmp    c000eac8 <ACPI::detectPCI()+0x15c>
c000eabd:	8d 76 00             	lea    esi,[esi+0x0]
c000eac0:	ba 02 00 00 00       	mov    edx,0x2
c000eac5:	8d 76 00             	lea    esi,[esi+0x0]
c000eac8:	6a 00                	push   0x0
c000eaca:	6a 00                	push   0x0
c000eacc:	52                   	push   edx
c000eacd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ead1:	ff d0                	call   eax
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	e9 91 00 00 00       	jmp    c000eb6c <ACPI::detectPCI()+0x200>
c000eadb:	90                   	nop
c000eadc:	83 ec 0c             	sub    esp,0xc
c000eadf:	68 cb e4 01 c0       	push   0xc001e4cb
c000eae4:	e8 3a 11 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c000eae9:	83 c4 10             	add    esp,0x10
c000eaec:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eaf3:	83 ec 0c             	sub    esp,0xc
c000eaf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eafa:	e8 ba 8c ff ff       	call   c00077b9 <malloc>
c000eaff:	83 c4 10             	add    esp,0x10
c000eb02:	89 c3                	mov    ebx,eax
c000eb04:	83 ec 0c             	sub    esp,0xc
c000eb07:	53                   	push   ebx
c000eb08:	e8 55 a5 00 00       	call   c0019062 <IDE::IDE()>
c000eb0d:	83 c4 10             	add    esp,0x10
c000eb10:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb18:	83 ec 08             	sub    esp,0x8
c000eb1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb1f:	50                   	push   eax
c000eb20:	e8 33 cf ff ff       	call   c000ba58 <Device::addChild(Device*)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb2c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eb36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb3a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eb43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb47:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eb50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb54:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb56:	83 c0 08             	add    eax,0x8
c000eb59:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb5b:	6a 00                	push   0x0
c000eb5d:	6a 00                	push   0x0
c000eb5f:	6a 00                	push   0x0
c000eb61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb65:	ff d0                	call   eax
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	66 90                	xchg   ax,ax
c000eb6c:	90                   	nop
c000eb6d:	83 c4 28             	add    esp,0x28
c000eb70:	5b                   	pop    ebx
c000eb71:	c3                   	ret    
c000eb72:	66 90                	xchg   ax,ax

c000eb74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eb74:	83 ec 1c             	sub    esp,0x1c
c000eb77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eb7b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eb7e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb82:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eb88:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb8c:	25 ff 00 00 00       	and    eax,0xff
c000eb91:	83 ec 08             	sub    esp,0x8
c000eb94:	50                   	push   eax
c000eb95:	52                   	push   edx
c000eb96:	e8 0b 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eba2:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eba8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebac:	25 ff 00 00 00       	and    eax,0xff
c000ebb1:	83 ec 04             	sub    esp,0x4
c000ebb4:	6a 01                	push   0x1
c000ebb6:	50                   	push   eax
c000ebb7:	52                   	push   edx
c000ebb8:	e8 ff 83 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ebbd:	83 c4 10             	add    esp,0x10
c000ebc0:	90                   	nop
c000ebc1:	83 c4 1c             	add    esp,0x1c
c000ebc4:	c3                   	ret    
c000ebc5:	90                   	nop
c000ebc6:	66 90                	xchg   ax,ax

c000ebc8 <ACPI::sleep()>:
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ebd0:	85 c0                	test   eax,eax
c000ebd2:	74 08                	je     c000ebdc <ACPI::sleep()+0x14>
c000ebd4:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ebd9:	ff d0                	call   eax
c000ebdb:	90                   	nop
c000ebdc:	90                   	nop
c000ebdd:	83 c4 0c             	add    esp,0xc
c000ebe0:	c3                   	ret    
c000ebe1:	90                   	nop
c000ebe2:	66 90                	xchg   ax,ax

c000ebe4 <ACPI::open(int, int, void*)>:
c000ebe4:	57                   	push   edi
c000ebe5:	56                   	push   esi
c000ebe6:	53                   	push   ebx
c000ebe7:	81 ec 70 01 00 00    	sub    esp,0x170
c000ebed:	83 ec 0c             	sub    esp,0xc
c000ebf0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ebf7:	e8 70 fd ff ff       	call   c000e96c <ACPI::detectPCI()>
c000ebfc:	83 c4 10             	add    esp,0x10
c000ebff:	83 ec 0c             	sub    esp,0xc
c000ec02:	68 50 e4 01 c0       	push   0xc001e450
c000ec07:	e8 17 10 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c000ec0c:	83 c4 10             	add    esp,0x10
c000ec0f:	83 ec 0c             	sub    esp,0xc
c000ec12:	68 e0 e4 01 c0       	push   0xc001e4e0
c000ec17:	e8 d2 37 00 00       	call   c00123ee <Thr::loadKernelSymbolTable(char const*)>
c000ec1c:	83 c4 10             	add    esp,0x10
c000ec1f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ec27:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ec32:	83 ec 0c             	sub    esp,0xc
c000ec35:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ec3c:	e8 78 8b ff ff       	call   c00077b9 <malloc>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	89 c3                	mov    ebx,eax
c000ec46:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ec4b:	83 ec 04             	sub    esp,0x4
c000ec4e:	50                   	push   eax
c000ec4f:	68 fe e4 01 c0       	push   0xc001e4fe
c000ec54:	53                   	push   ebx
c000ec55:	e8 34 bf ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c000ec5a:	83 c4 10             	add    esp,0x10
c000ec5d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ec64:	83 ec 08             	sub    esp,0x8
c000ec67:	6a 01                	push   0x1
c000ec69:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec70:	e8 d9 bf ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c000ec75:	83 c4 10             	add    esp,0x10
c000ec78:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ec7f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ec87:	75 17                	jne    c000eca0 <ACPI::open(int, int, void*)+0xbc>
c000ec89:	83 ec 0c             	sub    esp,0xc
c000ec8c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec93:	e8 14 c0 ff ff       	call   c000acac <File::close()>
c000ec98:	83 c4 10             	add    esp,0x10
c000ec9b:	eb 0b                	jmp    c000eca8 <ACPI::open(int, int, void*)+0xc4>
c000ec9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eca0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eca8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ecb0:	74 1e                	je     c000ecd0 <ACPI::open(int, int, void*)+0xec>
c000ecb2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ecb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecbb:	83 c0 08             	add    eax,0x8
c000ecbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc0:	83 ec 0c             	sub    esp,0xc
c000ecc3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ecca:	ff d0                	call   eax
c000eccc:	83 c4 10             	add    esp,0x10
c000eccf:	90                   	nop
c000ecd0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ecd7:	83 f0 01             	xor    eax,0x1
c000ecda:	84 c0                	test   al,al
c000ecdc:	74 42                	je     c000ed20 <ACPI::open(int, int, void*)+0x13c>
c000ecde:	83 ec 0c             	sub    esp,0xc
c000ece1:	68 1c e5 01 c0       	push   0xc001e51c
c000ece6:	e8 38 0f 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c000eceb:	83 c4 10             	add    esp,0x10
c000ecee:	83 ec 04             	sub    esp,0x4
c000ecf1:	6a 0c                	push   0xc
c000ecf3:	68 37 e5 01 c0       	push   0xc001e537
c000ecf8:	68 48 e5 01 c0       	push   0xc001e548
c000ecfd:	e8 dc 2c 00 00       	call   c00119de <Reg::readIntWithDefault(char*, char*, int)>
c000ed02:	83 c4 10             	add    esp,0x10
c000ed05:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ed0c:	83 ec 0c             	sub    esp,0xc
c000ed0f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ed16:	e8 74 a7 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ed1b:	83 c4 10             	add    esp,0x10
c000ed1e:	66 90                	xchg   ax,ax
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	68 77 d5 01 c0       	push   0xc001d577
c000ed28:	e8 f6 0e 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c000ed2d:	83 c4 10             	add    esp,0x10
c000ed30:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ed37:	83 ec 08             	sub    esp,0x8
c000ed3a:	6a 12                	push   0x12
c000ed3c:	50                   	push   eax
c000ed3d:	e8 2e d0 ff ff       	call   c000bd70 <getDevicesOfType(DeviceType)>
c000ed42:	83 c4 0c             	add    esp,0xc
c000ed45:	8d 76 00             	lea    esi,[esi+0x0]
c000ed48:	83 ec 0c             	sub    esp,0xc
c000ed4b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed52:	50                   	push   eax
c000ed53:	e8 74 dc 00 00       	call   c001c9cc <LinkedList<Device>::isEmpty()>
c000ed58:	83 c4 10             	add    esp,0x10
c000ed5b:	83 f0 01             	xor    eax,0x1
c000ed5e:	84 c0                	test   al,al
c000ed60:	0f 84 46 01 00 00    	je     c000eeac <ACPI::open(int, int, void*)+0x2c8>
c000ed66:	83 ec 0c             	sub    esp,0xc
c000ed69:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed70:	50                   	push   eax
c000ed71:	e8 72 dc 00 00       	call   c001c9e8 <LinkedList<Device>::getFirstElement()>
c000ed76:	83 c4 10             	add    esp,0x10
c000ed79:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ed80:	83 ec 0c             	sub    esp,0xc
c000ed83:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed8a:	50                   	push   eax
c000ed8b:	e8 60 dc 00 00       	call   c001c9f0 <LinkedList<Device>::removeFirst()>
c000ed90:	83 c4 10             	add    esp,0x10
c000ed93:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ed9a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000eda1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000eda8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000edac:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000edb2:	ba 09 00 00 00       	mov    edx,0x9
c000edb7:	fc                   	cld    
c000edb8:	89 c7                	mov    edi,eax
c000edba:	89 de                	mov    esi,ebx
c000edbc:	89 d1                	mov    ecx,edx
c000edbe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000edc0:	83 ec 08             	sub    esp,0x8
c000edc3:	8d 44 24 38          	lea    eax,[esp+0x38]
c000edc7:	50                   	push   eax
c000edc8:	83 ec 24             	sub    esp,0x24
c000edcb:	89 e0                	mov    eax,esp
c000edcd:	89 c3                	mov    ebx,eax
c000edcf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000edd3:	ba 09 00 00 00       	mov    edx,0x9
c000edd8:	89 df                	mov    edi,ebx
c000edda:	89 c6                	mov    esi,eax
c000eddc:	89 d1                	mov    ecx,edx
c000edde:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ede0:	e8 33 9c 00 00       	call   c0018a18 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ede5:	83 c4 30             	add    esp,0x30
c000ede8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000edef:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000edf7:	0f 84 4b ff ff ff    	je     c000ed48 <ACPI::open(int, int, void*)+0x164>
c000edfd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ee08:	83 ec 0c             	sub    esp,0xc
c000ee0b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ee12:	e8 a2 89 ff ff       	call   c00077b9 <malloc>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	89 c3                	mov    ebx,eax
c000ee1c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee21:	83 ec 04             	sub    esp,0x4
c000ee24:	50                   	push   eax
c000ee25:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee2c:	53                   	push   ebx
c000ee2d:	e8 5c bd ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c000ee32:	83 c4 10             	add    esp,0x10
c000ee35:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ee3c:	83 ec 0c             	sub    esp,0xc
c000ee3f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee46:	e8 71 c0 ff ff       	call   c000aebc <File::exists()>
c000ee4b:	83 c4 10             	add    esp,0x10
c000ee4e:	84 c0                	test   al,al
c000ee50:	74 2a                	je     c000ee7c <ACPI::open(int, int, void*)+0x298>
c000ee52:	83 ec 08             	sub    esp,0x8
c000ee55:	6a 01                	push   0x1
c000ee57:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee5e:	e8 02 40 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c000ee63:	83 c4 10             	add    esp,0x10
c000ee66:	83 ec 08             	sub    esp,0x8
c000ee69:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee70:	50                   	push   eax
c000ee71:	e8 20 42 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c000ee76:	83 c4 10             	add    esp,0x10
c000ee79:	8d 76 00             	lea    esi,[esi+0x0]
c000ee7c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ee84:	0f 84 be fe ff ff    	je     c000ed48 <ACPI::open(int, int, void*)+0x164>
c000ee8a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ee91:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee93:	83 c0 08             	add    eax,0x8
c000ee96:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee98:	83 ec 0c             	sub    esp,0xc
c000ee9b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eea2:	ff d0                	call   eax
c000eea4:	83 c4 10             	add    esp,0x10
c000eea7:	e9 9c fe ff ff       	jmp    c000ed48 <ACPI::open(int, int, void*)+0x164>
c000eeac:	83 ec 0c             	sub    esp,0xc
c000eeaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eeb6:	50                   	push   eax
c000eeb7:	e8 0c db 00 00       	call   c001c9c8 <LinkedList<Device>::~LinkedList()>
c000eebc:	83 c4 10             	add    esp,0x10
c000eebf:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000eec5:	83 ec 08             	sub    esp,0x8
c000eec8:	6a 01                	push   0x1
c000eeca:	68 4f e5 01 c0       	push   0xc001e54f
c000eecf:	e8 91 3f 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c000eed4:	83 c4 10             	add    esp,0x10
c000eed7:	83 ec 08             	sub    esp,0x8
c000eeda:	53                   	push   ebx
c000eedb:	50                   	push   eax
c000eedc:	e8 b5 41 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c000eee1:	83 c4 10             	add    esp,0x10
c000eee4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000eee9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eeef:	83 e0 04             	and    eax,0x4
c000eef2:	84 c0                	test   al,al
c000eef4:	0f 84 16 01 00 00    	je     c000f010 <ACPI::open(int, int, void*)+0x42c>
c000eefa:	83 ec 0c             	sub    esp,0xc
c000eefd:	68 6c e5 01 c0       	push   0xc001e56c
c000ef02:	e8 1c 0d 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c000ef07:	83 c4 10             	add    esp,0x10
c000ef0a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ef15:	83 ec 0c             	sub    esp,0xc
c000ef18:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ef1f:	e8 95 88 ff ff       	call   c00077b9 <malloc>
c000ef24:	83 c4 10             	add    esp,0x10
c000ef27:	89 c3                	mov    ebx,eax
c000ef29:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ef2e:	83 ec 04             	sub    esp,0x4
c000ef31:	50                   	push   eax
c000ef32:	68 89 e5 01 c0       	push   0xc001e589
c000ef37:	53                   	push   ebx
c000ef38:	e8 51 bc ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c000ef3d:	83 c4 10             	add    esp,0x10
c000ef40:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ef47:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef4f:	74 1b                	je     c000ef6c <ACPI::open(int, int, void*)+0x388>
c000ef51:	83 ec 0c             	sub    esp,0xc
c000ef54:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef5b:	e8 5c bf ff ff       	call   c000aebc <File::exists()>
c000ef60:	83 c4 10             	add    esp,0x10
c000ef63:	84 c0                	test   al,al
c000ef65:	74 05                	je     c000ef6c <ACPI::open(int, int, void*)+0x388>
c000ef67:	b0 01                	mov    al,0x1
c000ef69:	eb 05                	jmp    c000ef70 <ACPI::open(int, int, void*)+0x38c>
c000ef6b:	90                   	nop
c000ef6c:	b0 00                	mov    al,0x0
c000ef6e:	66 90                	xchg   ax,ax
c000ef70:	84 c0                	test   al,al
c000ef72:	74 28                	je     c000ef9c <ACPI::open(int, int, void*)+0x3b8>
c000ef74:	83 ec 08             	sub    esp,0x8
c000ef77:	6a 01                	push   0x1
c000ef79:	68 89 e5 01 c0       	push   0xc001e589
c000ef7e:	e8 e2 3e 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c000ef83:	83 c4 10             	add    esp,0x10
c000ef86:	83 ec 08             	sub    esp,0x8
c000ef89:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ef90:	50                   	push   eax
c000ef91:	e8 00 41 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c000ef96:	83 c4 10             	add    esp,0x10
c000ef99:	8d 76 00             	lea    esi,[esi+0x0]
c000ef9c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efa4:	74 2a                	je     c000efd0 <ACPI::open(int, int, void*)+0x3ec>
c000efa6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efae:	74 20                	je     c000efd0 <ACPI::open(int, int, void*)+0x3ec>
c000efb0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000efb7:	8b 00                	mov    eax,DWORD PTR [eax]
c000efb9:	83 c0 08             	add    eax,0x8
c000efbc:	8b 00                	mov    eax,DWORD PTR [eax]
c000efbe:	83 ec 0c             	sub    esp,0xc
c000efc1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000efc8:	ff d0                	call   eax
c000efca:	83 c4 10             	add    esp,0x10
c000efcd:	8d 76 00             	lea    esi,[esi+0x0]
c000efd0:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000efd5:	83 ec 08             	sub    esp,0x8
c000efd8:	68 a6 e5 01 c0       	push   0xc001e5a6
c000efdd:	50                   	push   eax
c000efde:	e8 31 f2 ff ff       	call   c000e214 <findDataTable(unsigned char*, char*)>
c000efe3:	83 c4 10             	add    esp,0x10
c000efe6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000efed:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eff5:	74 19                	je     c000f010 <ACPI::open(int, int, void*)+0x42c>
c000eff7:	83 ec 08             	sub    esp,0x8
c000effa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f001:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f008:	e8 67 fb ff ff       	call   c000eb74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f00d:	83 c4 10             	add    esp,0x10
c000f010:	b8 00 00 00 00       	mov    eax,0x0
c000f015:	81 c4 70 01 00 00    	add    esp,0x170
c000f01b:	5b                   	pop    ebx
c000f01c:	5e                   	pop    esi
c000f01d:	5f                   	pop    edi
c000f01e:	c3                   	ret    
c000f01f:	90                   	nop

c000f020 <CPU::close(int, int, void*)>:
c000f020:	31 c0                	xor    eax,eax
c000f022:	c3                   	ret    
c000f023:	90                   	nop

c000f024 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f024:	60                   	pusha  
c000f025:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f029:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f031:	9c                   	pushf  
c000f032:	fa                   	cli    
c000f033:	0f 09                	wbinvd 
c000f035:	0f 30                	wrmsr  
c000f037:	9d                   	popf   
c000f038:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f03c:	89 02                	mov    DWORD PTR [edx],eax
c000f03e:	61                   	popa   
c000f03f:	c3                   	ret    

c000f040 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f040:	60                   	pusha  
c000f041:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f045:	9c                   	pushf  
c000f046:	fa                   	cli    
c000f047:	0f 09                	wbinvd 
c000f049:	31 c0                	xor    eax,eax
c000f04b:	31 d2                	xor    edx,edx
c000f04d:	0f 32                	rdmsr  
c000f04f:	9d                   	popf   
c000f050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f054:	89 02                	mov    DWORD PTR [edx],eax
c000f056:	61                   	popa   
c000f057:	c3                   	ret    

c000f058 <CPU::AMD_K6_writeback(int, int, int)>:
c000f058:	56                   	push   esi
c000f059:	53                   	push   ebx
c000f05a:	83 ec 10             	sub    esp,0x10
c000f05d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f061:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f066:	75 5d                	jne    c000f0c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f068:	83 f8 08             	cmp    eax,0x8
c000f06b:	75 09                	jne    c000f076 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f06d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f072:	7e 13                	jle    c000f087 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f074:	eb 30                	jmp    c000f0a6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f076:	83 f8 06             	cmp    eax,0x6
c000f079:	7c 4a                	jl     c000f0c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f07b:	83 f8 07             	cmp    eax,0x7
c000f07e:	7e 07                	jle    c000f087 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f080:	83 f8 09             	cmp    eax,0x9
c000f083:	74 21                	je     c000f0a6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f085:	eb 3e                	jmp    c000f0c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f087:	89 e6                	mov    esi,esp
c000f089:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000f08f:	56                   	push   esi
c000f090:	c1 eb 15             	shr    ebx,0x15
c000f093:	68 82 00 00 c0       	push   0xc0000082
c000f098:	83 e3 7e             	and    ebx,0x7e
c000f09b:	e8 a0 ff ff ff       	call   c000f040 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f0a0:	56                   	push   esi
c000f0a1:	6a 00                	push   0x0
c000f0a3:	53                   	push   ebx
c000f0a4:	eb 12                	jmp    c000f0b8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f0a6:	89 e3                	mov    ebx,esp
c000f0a8:	53                   	push   ebx
c000f0a9:	68 82 00 00 c0       	push   0xc0000082
c000f0ae:	e8 8d ff ff ff       	call   c000f040 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f0b3:	53                   	push   ebx
c000f0b4:	6a 00                	push   0x0
c000f0b6:	6a 00                	push   0x0
c000f0b8:	68 82 00 00 c0       	push   0xc0000082
c000f0bd:	e8 62 ff ff ff       	call   c000f024 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f0c2:	83 c4 18             	add    esp,0x18
c000f0c5:	83 c4 10             	add    esp,0x10
c000f0c8:	5b                   	pop    ebx
c000f0c9:	5e                   	pop    esi
c000f0ca:	c3                   	ret    
c000f0cb:	90                   	nop

c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f0cc:	55                   	push   ebp
c000f0cd:	57                   	push   edi
c000f0ce:	56                   	push   esi
c000f0cf:	53                   	push   ebx
c000f0d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f0d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f0dc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f0e0:	39 05 10 f9 01 c0    	cmp    DWORD PTR ds:0xc001f910,eax
c000f0e6:	75 23                	jne    c000f10b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f0e8:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f0ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0f1:	89 06                	mov    DWORD PTR [esi],eax
c000f0f3:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f0f8:	89 07                	mov    DWORD PTR [edi],eax
c000f0fa:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f0ff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f102:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f107:	89 02                	mov    DWORD PTR [edx],eax
c000f109:	eb 3f                	jmp    c000f14a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f10b:	31 c9                	xor    ecx,ecx
c000f10d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f111:	0f a2                	cpuid  
c000f113:	89 06                	mov    DWORD PTR [esi],eax
c000f115:	89 1f                	mov    DWORD PTR [edi],ebx
c000f117:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f11b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f11e:	89 10                	mov    DWORD PTR [eax],edx
c000f120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f124:	a3 10 f9 01 c0       	mov    ds:0xc001f910,eax
c000f129:	8b 06                	mov    eax,DWORD PTR [esi]
c000f12b:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f130:	8b 07                	mov    eax,DWORD PTR [edi]
c000f132:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f137:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f13a:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f13f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f143:	8b 00                	mov    eax,DWORD PTR [eax]
c000f145:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f14a:	5b                   	pop    ebx
c000f14b:	5e                   	pop    esi
c000f14c:	5f                   	pop    edi
c000f14d:	5d                   	pop    ebp
c000f14e:	c3                   	ret    
c000f14f:	90                   	nop

c000f150 <CPU::cpuidCheckEDX(unsigned int)>:
c000f150:	83 ec 10             	sub    esp,0x10
c000f153:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f157:	50                   	push   eax
c000f158:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f15c:	50                   	push   eax
c000f15d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f161:	50                   	push   eax
c000f162:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f166:	50                   	push   eax
c000f167:	6a 01                	push   0x1
c000f169:	e8 5e ff ff ff       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f16e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f172:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f176:	0f 95 c0             	setne  al
c000f179:	83 c4 24             	add    esp,0x24
c000f17c:	c3                   	ret    
c000f17d:	90                   	nop

c000f17e <CPU::cpuidCheckECX(unsigned int)>:
c000f17e:	83 ec 10             	sub    esp,0x10
c000f181:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f185:	50                   	push   eax
c000f186:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f18a:	50                   	push   eax
c000f18b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f18f:	50                   	push   eax
c000f190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f194:	50                   	push   eax
c000f195:	6a 01                	push   0x1
c000f197:	e8 30 ff ff ff       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f19c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1a0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f1a4:	0f 95 c0             	setne  al
c000f1a7:	83 c4 24             	add    esp,0x24
c000f1aa:	c3                   	ret    
c000f1ab:	90                   	nop

c000f1ac <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f1ac:	83 ec 10             	sub    esp,0x10
c000f1af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1b3:	50                   	push   eax
c000f1b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1b8:	50                   	push   eax
c000f1b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1bd:	50                   	push   eax
c000f1be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1c2:	50                   	push   eax
c000f1c3:	6a 07                	push   0x7
c000f1c5:	e8 02 ff ff ff       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1ce:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f1d2:	0f 95 c0             	setne  al
c000f1d5:	83 c4 24             	add    esp,0x24
c000f1d8:	c3                   	ret    
c000f1d9:	90                   	nop

c000f1da <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f1da:	83 ec 10             	sub    esp,0x10
c000f1dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e1:	50                   	push   eax
c000f1e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e6:	50                   	push   eax
c000f1e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1eb:	50                   	push   eax
c000f1ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1f0:	50                   	push   eax
c000f1f1:	6a 07                	push   0x7
c000f1f3:	e8 d4 fe ff ff       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1fc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f200:	0f 95 c0             	setne  al
c000f203:	83 c4 24             	add    esp,0x24
c000f206:	c3                   	ret    
c000f207:	90                   	nop

c000f208 <CPU::CPU()>:
c000f208:	83 ec 0c             	sub    esp,0xc
c000f20b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f20f:	83 ec 08             	sub    esp,0x8
c000f212:	68 c9 e6 01 c0       	push   0xc001e6c9
c000f217:	50                   	push   eax
c000f218:	e8 d3 c9 ff ff       	call   c000bbf0 <Device::Device(char const*)>
c000f21d:	83 c4 10             	add    esp,0x10
c000f220:	ba 50 e7 01 c0       	mov    edx,0xc001e750
c000f225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f229:	89 10                	mov    DWORD PTR [eax],edx
c000f22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f22f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f23d:	05 78 01 00 00       	add    eax,0x178
c000f242:	83 ec 0c             	sub    esp,0xc
c000f245:	50                   	push   eax
c000f246:	e8 2f 7e ff ff       	call   c000707a <GDT::GDT()>
c000f24b:	83 c4 10             	add    esp,0x10
c000f24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f252:	05 7c 09 00 00       	add    eax,0x97c
c000f257:	83 ec 0c             	sub    esp,0xc
c000f25a:	50                   	push   eax
c000f25b:	e8 54 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f260:	83 c4 10             	add    esp,0x10
c000f263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f267:	05 7c 11 00 00       	add    eax,0x117c
c000f26c:	83 ec 0c             	sub    esp,0xc
c000f26f:	50                   	push   eax
c000f270:	e8 53 99 ff ff       	call   c0008bc8 <TSS::TSS()>
c000f275:	83 c4 10             	add    esp,0x10
c000f278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f287:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f291:	90                   	nop
c000f292:	83 c4 0c             	add    esp,0xc
c000f295:	c3                   	ret    

c000f296 <CPU::displayFeatures()>:
c000f296:	c3                   	ret    
c000f297:	90                   	nop

c000f298 <CPU::detectFeatures()>:
c000f298:	55                   	push   ebp
c000f299:	57                   	push   edi
c000f29a:	56                   	push   esi
c000f29b:	53                   	push   ebx
c000f29c:	83 ec 30             	sub    esp,0x30
c000f29f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f2a3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f2ad:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f2b4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f2ba:	6a 0d                	push   0xd
c000f2bc:	6a 00                	push   0x0
c000f2be:	55                   	push   ebp
c000f2bf:	e8 0c 12 ff ff       	call   c00004d0 <memset>
c000f2c4:	83 c4 10             	add    esp,0x10
c000f2c7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f2cc:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f2d3:	0f 84 d5 05 00 00    	je     c000f8ae <CPU::detectFeatures()+0x616>
c000f2d9:	83 ec 0c             	sub    esp,0xc
c000f2dc:	89 ef                	mov    edi,ebp
c000f2de:	6a 10                	push   0x10
c000f2e0:	e8 6b fe ff ff       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c000f2e5:	83 e0 01             	and    eax,0x1
c000f2e8:	8d 14 00             	lea    edx,[eax+eax*1]
c000f2eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2f1:	83 e0 fd             	and    eax,0xfffffffd
c000f2f4:	09 d0                	or     eax,edx
c000f2f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2fc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f303:	e8 48 fe ff ff       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c000f308:	83 e0 01             	and    eax,0x1
c000f30b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f312:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f318:	83 e0 fb             	and    eax,0xfffffffb
c000f31b:	09 d0                	or     eax,edx
c000f31d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f323:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f32a:	e8 21 fe ff ff       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c000f32f:	83 e0 01             	and    eax,0x1
c000f332:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f339:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f33f:	83 e0 f7             	and    eax,0xfffffff7
c000f342:	09 d0                	or     eax,edx
c000f344:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f34a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f351:	e8 fa fd ff ff       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c000f356:	83 e0 01             	and    eax,0x1
c000f359:	c1 e0 04             	shl    eax,0x4
c000f35c:	88 c2                	mov    dl,al
c000f35e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f364:	83 e0 ef             	and    eax,0xffffffef
c000f367:	09 d0                	or     eax,edx
c000f369:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f36f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f376:	e8 d5 fd ff ff       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c000f37b:	83 e0 01             	and    eax,0x1
c000f37e:	c1 e0 05             	shl    eax,0x5
c000f381:	88 c2                	mov    dl,al
c000f383:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f389:	83 e0 df             	and    eax,0xffffffdf
c000f38c:	09 d0                	or     eax,edx
c000f38e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f394:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f39b:	e8 b0 fd ff ff       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c000f3a0:	83 e0 01             	and    eax,0x1
c000f3a3:	8d 14 00             	lea    edx,[eax+eax*1]
c000f3a6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f3ac:	83 e0 fd             	and    eax,0xfffffffd
c000f3af:	09 d0                	or     eax,edx
c000f3b1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f3b7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f3be:	e8 8d fd ff ff       	call   c000f150 <CPU::cpuidCheckEDX(unsigned int)>
c000f3c3:	83 e0 01             	and    eax,0x1
c000f3c6:	c1 e0 06             	shl    eax,0x6
c000f3c9:	88 c2                	mov    dl,al
c000f3cb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f3d1:	83 e0 bf             	and    eax,0xffffffbf
c000f3d4:	09 d0                	or     eax,edx
c000f3d6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f3dc:	58                   	pop    eax
c000f3dd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3e1:	50                   	push   eax
c000f3e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3e6:	50                   	push   eax
c000f3e7:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f3eb:	56                   	push   esi
c000f3ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3f0:	50                   	push   eax
c000f3f1:	6a 00                	push   0x0
c000f3f3:	e8 d4 fc ff ff       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f3f8:	b8 04 00 00 00       	mov    eax,0x4
c000f3fd:	89 c1                	mov    ecx,eax
c000f3ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f401:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f407:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f40b:	89 c1                	mov    ecx,eax
c000f40d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f40f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f415:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f419:	89 c1                	mov    ecx,eax
c000f41b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f41d:	83 c4 18             	add    esp,0x18
c000f420:	68 d8 e5 01 c0       	push   0xc001e5d8
c000f425:	55                   	push   ebp
c000f426:	e8 b5 12 ff ff       	call   c00006e0 <strcmp>
c000f42b:	83 c4 10             	add    esp,0x10
c000f42e:	85 c0                	test   eax,eax
c000f430:	75 0f                	jne    c000f441 <CPU::detectFeatures()+0x1a9>
c000f432:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f43c:	e9 22 02 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f441:	50                   	push   eax
c000f442:	50                   	push   eax
c000f443:	68 e5 e5 01 c0       	push   0xc001e5e5
c000f448:	55                   	push   ebp
c000f449:	e8 92 12 ff ff       	call   c00006e0 <strcmp>
c000f44e:	83 c4 10             	add    esp,0x10
c000f451:	85 c0                	test   eax,eax
c000f453:	74 dd                	je     c000f432 <CPU::detectFeatures()+0x19a>
c000f455:	50                   	push   eax
c000f456:	50                   	push   eax
c000f457:	68 f2 e5 01 c0       	push   0xc001e5f2
c000f45c:	55                   	push   ebp
c000f45d:	e8 7e 12 ff ff       	call   c00006e0 <strcmp>
c000f462:	83 c4 10             	add    esp,0x10
c000f465:	85 c0                	test   eax,eax
c000f467:	74 2a                	je     c000f493 <CPU::detectFeatures()+0x1fb>
c000f469:	50                   	push   eax
c000f46a:	50                   	push   eax
c000f46b:	68 ff e5 01 c0       	push   0xc001e5ff
c000f470:	55                   	push   ebp
c000f471:	e8 6a 12 ff ff       	call   c00006e0 <strcmp>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	85 c0                	test   eax,eax
c000f47b:	74 16                	je     c000f493 <CPU::detectFeatures()+0x1fb>
c000f47d:	50                   	push   eax
c000f47e:	50                   	push   eax
c000f47f:	68 0c e6 01 c0       	push   0xc001e60c
c000f484:	55                   	push   ebp
c000f485:	e8 56 12 ff ff       	call   c00006e0 <strcmp>
c000f48a:	83 c4 10             	add    esp,0x10
c000f48d:	85 c0                	test   eax,eax
c000f48f:	74 48                	je     c000f4d9 <CPU::detectFeatures()+0x241>
c000f491:	eb 0f                	jmp    c000f4a2 <CPU::detectFeatures()+0x20a>
c000f493:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f49d:	e9 c1 01 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f4a2:	50                   	push   eax
c000f4a3:	50                   	push   eax
c000f4a4:	68 19 e6 01 c0       	push   0xc001e619
c000f4a9:	55                   	push   ebp
c000f4aa:	e8 31 12 ff ff       	call   c00006e0 <strcmp>
c000f4af:	83 c4 10             	add    esp,0x10
c000f4b2:	85 c0                	test   eax,eax
c000f4b4:	74 23                	je     c000f4d9 <CPU::detectFeatures()+0x241>
c000f4b6:	57                   	push   edi
c000f4b7:	57                   	push   edi
c000f4b8:	68 26 e6 01 c0       	push   0xc001e626
c000f4bd:	55                   	push   ebp
c000f4be:	e8 1d 12 ff ff       	call   c00006e0 <strcmp>
c000f4c3:	83 c4 10             	add    esp,0x10
c000f4c6:	85 c0                	test   eax,eax
c000f4c8:	75 1e                	jne    c000f4e8 <CPU::detectFeatures()+0x250>
c000f4ca:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f4d4:	e9 8a 01 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f4d9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f4e3:	e9 7b 01 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f4e8:	56                   	push   esi
c000f4e9:	56                   	push   esi
c000f4ea:	68 33 e6 01 c0       	push   0xc001e633
c000f4ef:	55                   	push   ebp
c000f4f0:	e8 eb 11 ff ff       	call   c00006e0 <strcmp>
c000f4f5:	83 c4 10             	add    esp,0x10
c000f4f8:	85 c0                	test   eax,eax
c000f4fa:	75 0f                	jne    c000f50b <CPU::detectFeatures()+0x273>
c000f4fc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f506:	e9 58 01 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f50b:	51                   	push   ecx
c000f50c:	51                   	push   ecx
c000f50d:	68 f2 e5 01 c0       	push   0xc001e5f2
c000f512:	55                   	push   ebp
c000f513:	e8 c8 11 ff ff       	call   c00006e0 <strcmp>
c000f518:	83 c4 10             	add    esp,0x10
c000f51b:	85 c0                	test   eax,eax
c000f51d:	75 0f                	jne    c000f52e <CPU::detectFeatures()+0x296>
c000f51f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f529:	e9 35 01 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f52e:	52                   	push   edx
c000f52f:	52                   	push   edx
c000f530:	68 40 e6 01 c0       	push   0xc001e640
c000f535:	55                   	push   ebp
c000f536:	e8 a5 11 ff ff       	call   c00006e0 <strcmp>
c000f53b:	83 c4 10             	add    esp,0x10
c000f53e:	85 c0                	test   eax,eax
c000f540:	75 0f                	jne    c000f551 <CPU::detectFeatures()+0x2b9>
c000f542:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f54c:	e9 12 01 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f551:	50                   	push   eax
c000f552:	50                   	push   eax
c000f553:	68 4d e6 01 c0       	push   0xc001e64d
c000f558:	55                   	push   ebp
c000f559:	e8 82 11 ff ff       	call   c00006e0 <strcmp>
c000f55e:	83 c4 10             	add    esp,0x10
c000f561:	85 c0                	test   eax,eax
c000f563:	75 0f                	jne    c000f574 <CPU::detectFeatures()+0x2dc>
c000f565:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f56f:	e9 ef 00 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f574:	50                   	push   eax
c000f575:	50                   	push   eax
c000f576:	68 5a e6 01 c0       	push   0xc001e65a
c000f57b:	55                   	push   ebp
c000f57c:	e8 5f 11 ff ff       	call   c00006e0 <strcmp>
c000f581:	83 c4 10             	add    esp,0x10
c000f584:	85 c0                	test   eax,eax
c000f586:	75 0f                	jne    c000f597 <CPU::detectFeatures()+0x2ff>
c000f588:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f592:	e9 cc 00 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f597:	50                   	push   eax
c000f598:	50                   	push   eax
c000f599:	68 67 e6 01 c0       	push   0xc001e667
c000f59e:	55                   	push   ebp
c000f59f:	e8 3c 11 ff ff       	call   c00006e0 <strcmp>
c000f5a4:	83 c4 10             	add    esp,0x10
c000f5a7:	85 c0                	test   eax,eax
c000f5a9:	75 0f                	jne    c000f5ba <CPU::detectFeatures()+0x322>
c000f5ab:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f5b5:	e9 a9 00 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f5ba:	50                   	push   eax
c000f5bb:	50                   	push   eax
c000f5bc:	68 74 e6 01 c0       	push   0xc001e674
c000f5c1:	55                   	push   ebp
c000f5c2:	e8 19 11 ff ff       	call   c00006e0 <strcmp>
c000f5c7:	83 c4 10             	add    esp,0x10
c000f5ca:	85 c0                	test   eax,eax
c000f5cc:	75 0f                	jne    c000f5dd <CPU::detectFeatures()+0x345>
c000f5ce:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f5d8:	e9 86 00 00 00       	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f5dd:	50                   	push   eax
c000f5de:	50                   	push   eax
c000f5df:	68 81 e6 01 c0       	push   0xc001e681
c000f5e4:	55                   	push   ebp
c000f5e5:	e8 f6 10 ff ff       	call   c00006e0 <strcmp>
c000f5ea:	83 c4 10             	add    esp,0x10
c000f5ed:	85 c0                	test   eax,eax
c000f5ef:	75 0c                	jne    c000f5fd <CPU::detectFeatures()+0x365>
c000f5f1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f5fb:	eb 66                	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f5fd:	50                   	push   eax
c000f5fe:	50                   	push   eax
c000f5ff:	68 8e e6 01 c0       	push   0xc001e68e
c000f604:	55                   	push   ebp
c000f605:	e8 d6 10 ff ff       	call   c00006e0 <strcmp>
c000f60a:	83 c4 10             	add    esp,0x10
c000f60d:	85 c0                	test   eax,eax
c000f60f:	75 0c                	jne    c000f61d <CPU::detectFeatures()+0x385>
c000f611:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f61b:	eb 46                	jmp    c000f663 <CPU::detectFeatures()+0x3cb>
c000f61d:	57                   	push   edi
c000f61e:	57                   	push   edi
c000f61f:	68 9b e6 01 c0       	push   0xc001e69b
c000f624:	55                   	push   ebp
c000f625:	e8 b6 10 ff ff       	call   c00006e0 <strcmp>
c000f62a:	83 c4 10             	add    esp,0x10
c000f62d:	85 c0                	test   eax,eax
c000f62f:	74 e0                	je     c000f611 <CPU::detectFeatures()+0x379>
c000f631:	56                   	push   esi
c000f632:	56                   	push   esi
c000f633:	68 a8 e6 01 c0       	push   0xc001e6a8
c000f638:	55                   	push   ebp
c000f639:	e8 a2 10 ff ff       	call   c00006e0 <strcmp>
c000f63e:	83 c4 10             	add    esp,0x10
c000f641:	85 c0                	test   eax,eax
c000f643:	74 cc                	je     c000f611 <CPU::detectFeatures()+0x379>
c000f645:	51                   	push   ecx
c000f646:	51                   	push   ecx
c000f647:	68 b5 e6 01 c0       	push   0xc001e6b5
c000f64c:	55                   	push   ebp
c000f64d:	e8 8e 10 ff ff       	call   c00006e0 <strcmp>
c000f652:	83 c4 10             	add    esp,0x10
c000f655:	85 c0                	test   eax,eax
c000f657:	74 b8                	je     c000f611 <CPU::detectFeatures()+0x379>
c000f659:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f663:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f668:	0f 86 be 00 00 00    	jbe    c000f72c <CPU::detectFeatures()+0x494>
c000f66e:	83 ec 0c             	sub    esp,0xc
c000f671:	68 80 00 00 00       	push   0x80
c000f676:	e8 31 fb ff ff       	call   c000f1ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f67b:	83 e0 01             	and    eax,0x1
c000f67e:	c1 e0 06             	shl    eax,0x6
c000f681:	88 c2                	mov    dl,al
c000f683:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f689:	83 e0 bf             	and    eax,0xffffffbf
c000f68c:	09 d0                	or     eax,edx
c000f68e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f694:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f69b:	e8 0c fb ff ff       	call   c000f1ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6a0:	83 e0 01             	and    eax,0x1
c000f6a3:	c1 e0 04             	shl    eax,0x4
c000f6a6:	88 c2                	mov    dl,al
c000f6a8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6ae:	83 e0 ef             	and    eax,0xffffffef
c000f6b1:	09 d0                	or     eax,edx
c000f6b3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6b9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f6c0:	e8 e7 fa ff ff       	call   c000f1ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6c5:	c1 e0 07             	shl    eax,0x7
c000f6c8:	88 c2                	mov    dl,al
c000f6ca:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6d0:	83 e0 7f             	and    eax,0x7f
c000f6d3:	09 d0                	or     eax,edx
c000f6d5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f6db:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f6e2:	e8 f3 fa ff ff       	call   c000f1da <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f6e7:	83 e0 01             	and    eax,0x1
c000f6ea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f6f1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6f7:	83 e0 f7             	and    eax,0xfffffff7
c000f6fa:	09 d0                	or     eax,edx
c000f6fc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f702:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f709:	e8 cc fa ff ff       	call   c000f1da <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f70e:	83 c4 10             	add    esp,0x10
c000f711:	83 e0 01             	and    eax,0x1
c000f714:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f71b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f721:	83 e0 fb             	and    eax,0xfffffffb
c000f724:	09 d0                	or     eax,edx
c000f726:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f72c:	83 ec 0c             	sub    esp,0xc
c000f72f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f733:	50                   	push   eax
c000f734:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f738:	50                   	push   eax
c000f739:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f73d:	56                   	push   esi
c000f73e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f742:	50                   	push   eax
c000f743:	6a 01                	push   0x1
c000f745:	e8 82 f9 ff ff       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f74e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f754:	88 ca                	mov    dl,cl
c000f756:	83 e0 f0             	and    eax,0xfffffff0
c000f759:	83 e2 0f             	and    edx,0xf
c000f75c:	09 d0                	or     eax,edx
c000f75e:	88 ca                	mov    dl,cl
c000f760:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f766:	c0 ea 04             	shr    dl,0x4
c000f769:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f76d:	0f b6 c2             	movzx  eax,dl
c000f770:	83 c4 20             	add    esp,0x20
c000f773:	c1 e0 06             	shl    eax,0x6
c000f776:	89 c7                	mov    edi,eax
c000f778:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f77e:	66 25 3f c0          	and    ax,0xc03f
c000f782:	09 f8                	or     eax,edi
c000f784:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f78b:	89 c8                	mov    eax,ecx
c000f78d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f794:	c1 e8 08             	shr    eax,0x8
c000f797:	83 e5 3f             	and    ebp,0x3f
c000f79a:	83 e0 0f             	and    eax,0xf
c000f79d:	89 c7                	mov    edi,eax
c000f79f:	c1 e7 06             	shl    edi,0x6
c000f7a2:	09 ef                	or     edi,ebp
c000f7a4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f7ab:	89 fa                	mov    edx,edi
c000f7ad:	83 e5 c0             	and    ebp,0xffffffc0
c000f7b0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f7b6:	88 c2                	mov    dl,al
c000f7b8:	c0 ea 02             	shr    dl,0x2
c000f7bb:	89 d7                	mov    edi,edx
c000f7bd:	09 ef                	or     edi,ebp
c000f7bf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f7c5:	89 fa                	mov    edx,edi
c000f7c7:	83 e5 cf             	and    ebp,0xffffffcf
c000f7ca:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f7d0:	89 cf                	mov    edi,ecx
c000f7d2:	c1 ef 0c             	shr    edi,0xc
c000f7d5:	83 e7 03             	and    edi,0x3
c000f7d8:	c1 e7 04             	shl    edi,0x4
c000f7db:	09 ef                	or     edi,ebp
c000f7dd:	3c 06                	cmp    al,0x6
c000f7df:	89 fa                	mov    edx,edi
c000f7e1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f7e7:	74 04                	je     c000f7ed <CPU::detectFeatures()+0x555>
c000f7e9:	3c 0f                	cmp    al,0xf
c000f7eb:	75 5c                	jne    c000f849 <CPU::detectFeatures()+0x5b1>
c000f7ed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f7f1:	89 cf                	mov    edi,ecx
c000f7f3:	c1 ef 10             	shr    edi,0x10
c000f7f6:	c1 e7 04             	shl    edi,0x4
c000f7f9:	09 fa                	or     edx,edi
c000f7fb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f801:	0f b6 d2             	movzx  edx,dl
c000f804:	66 81 e7 3f c0       	and    di,0xc03f
c000f809:	c1 e2 06             	shl    edx,0x6
c000f80c:	09 fa                	or     edx,edi
c000f80e:	3c 0f                	cmp    al,0xf
c000f810:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f817:	75 30                	jne    c000f849 <CPU::detectFeatures()+0x5b1>
c000f819:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f81f:	c1 e9 14             	shr    ecx,0x14
c000f822:	83 e0 3f             	and    eax,0x3f
c000f825:	83 c1 0f             	add    ecx,0xf
c000f828:	88 ca                	mov    dl,cl
c000f82a:	c0 e9 02             	shr    cl,0x2
c000f82d:	c1 e2 06             	shl    edx,0x6
c000f830:	09 d0                	or     eax,edx
c000f832:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f838:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f83e:	83 e0 c0             	and    eax,0xffffffc0
c000f841:	09 c1                	or     ecx,eax
c000f843:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f849:	83 ec 0c             	sub    esp,0xc
c000f84c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f853:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f857:	50                   	push   eax
c000f858:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f85c:	55                   	push   ebp
c000f85d:	56                   	push   esi
c000f85e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f862:	57                   	push   edi
c000f863:	68 00 00 00 80       	push   0x80000000
c000f868:	e8 5f f8 ff ff       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f86d:	83 c4 20             	add    esp,0x20
c000f870:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f878:	76 22                	jbe    c000f89c <CPU::detectFeatures()+0x604>
c000f87a:	83 ec 0c             	sub    esp,0xc
c000f87d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f881:	50                   	push   eax
c000f882:	55                   	push   ebp
c000f883:	56                   	push   esi
c000f884:	57                   	push   edi
c000f885:	68 01 00 00 80       	push   0x80000001
c000f88a:	e8 3d f8 ff ff       	call   c000f0cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f88f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f899:	83 c4 20             	add    esp,0x20
c000f89c:	52                   	push   edx
c000f89d:	52                   	push   edx
c000f89e:	68 c1 e6 01 c0       	push   0xc001e6c1
c000f8a3:	53                   	push   ebx
c000f8a4:	e8 39 c3 ff ff       	call   c000bbe2 <Device::setName(char const*)>
c000f8a9:	83 c4 10             	add    esp,0x10
c000f8ac:	eb 67                	jmp    c000f915 <CPU::detectFeatures()+0x67d>
c000f8ae:	50                   	push   eax
c000f8af:	50                   	push   eax
c000f8b0:	68 26 e6 01 c0       	push   0xc001e626
c000f8b5:	55                   	push   ebp
c000f8b6:	e8 45 0d ff ff       	call   c0000600 <strcpy>
c000f8bb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f8c5:	e8 f9 08 ff ff       	call   c00001c3 <is486>
c000f8ca:	83 c4 10             	add    esp,0x10
c000f8cd:	85 c0                	test   eax,eax
c000f8cf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8d5:	74 1d                	je     c000f8f4 <CPU::detectFeatures()+0x65c>
c000f8d7:	83 c8 07             	or     eax,0x7
c000f8da:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8e0:	0f 20 c0             	mov    eax,cr0
c000f8e3:	83 e0 14             	and    eax,0x14
c000f8e6:	83 f8 04             	cmp    eax,0x4
c000f8e9:	75 0e                	jne    c000f8f9 <CPU::detectFeatures()+0x661>
c000f8eb:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f8f2:	eb 21                	jmp    c000f915 <CPU::detectFeatures()+0x67d>
c000f8f4:	83 e0 f8             	and    eax,0xfffffff8
c000f8f7:	eb e1                	jmp    c000f8da <CPU::detectFeatures()+0x642>
c000f8f9:	e8 a0 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f8fe:	83 e0 01             	and    eax,0x1
c000f901:	8d 14 00             	lea    edx,[eax+eax*1]
c000f904:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f90a:	83 e0 fd             	and    eax,0xfffffffd
c000f90d:	09 d0                	or     eax,edx
c000f90f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f915:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f91c:	74 0e                	je     c000f92c <CPU::detectFeatures()+0x694>
c000f91e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f923:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f92a:	eb 20                	jmp    c000f94c <CPU::detectFeatures()+0x6b4>
c000f92c:	e8 6d 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f931:	83 e0 01             	and    eax,0x1
c000f934:	8d 14 00             	lea    edx,[eax+eax*1]
c000f937:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f93d:	83 e0 fd             	and    eax,0xfffffffd
c000f940:	09 d0                	or     eax,edx
c000f942:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f948:	a8 02                	test   al,0x2
c000f94a:	75 d2                	jne    c000f91e <CPU::detectFeatures()+0x686>
c000f94c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f953:	83 c4 2c             	add    esp,0x2c
c000f956:	5b                   	pop    ebx
c000f957:	5e                   	pop    esi
c000f958:	5f                   	pop    edi
c000f959:	5d                   	pop    ebp
c000f95a:	c3                   	ret    
c000f95b:	90                   	nop

c000f95c <CPU::setupSMEP()>:
c000f95c:	0f 20 e0             	mov    eax,cr4
c000f95f:	0d 00 00 10 00       	or     eax,0x100000
c000f964:	0f 22 e0             	mov    cr4,eax
c000f967:	c3                   	ret    

c000f968 <CPU::setupUMIP()>:
c000f968:	0f 20 e0             	mov    eax,cr4
c000f96b:	80 cc 08             	or     ah,0x8
c000f96e:	0f 22 e0             	mov    cr4,eax
c000f971:	c3                   	ret    

c000f972 <CPU::setupTSC()>:
c000f972:	0f 20 e0             	mov    eax,cr4
c000f975:	83 c8 04             	or     eax,0x4
c000f978:	0f 22 e0             	mov    cr4,eax
c000f97b:	c3                   	ret    

c000f97c <CPU::setupLargePages()>:
c000f97c:	0f 20 e0             	mov    eax,cr4
c000f97f:	83 c8 10             	or     eax,0x10
c000f982:	0f 22 e0             	mov    cr4,eax
c000f985:	c3                   	ret    

c000f986 <CPU::setupPAT()>:
c000f986:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f98b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f992:	74 2c                	je     c000f9c0 <CPU::setupPAT()+0x3a>
c000f994:	53                   	push   ebx
c000f995:	83 ec 10             	sub    esp,0x10
c000f998:	68 77 02 00 00       	push   0x277
c000f99d:	50                   	push   eax
c000f99e:	e8 4f 74 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f9a3:	83 e2 f8             	and    edx,0xfffffff8
c000f9a6:	83 ca 01             	or     edx,0x1
c000f9a9:	52                   	push   edx
c000f9aa:	50                   	push   eax
c000f9ab:	68 77 02 00 00       	push   0x277
c000f9b0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f9b6:	e8 63 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f9bb:	83 c4 28             	add    esp,0x28
c000f9be:	5b                   	pop    ebx
c000f9bf:	c3                   	ret    
c000f9c0:	c3                   	ret    
c000f9c1:	90                   	nop

c000f9c2 <CPU::setupMTRR()>:
c000f9c2:	c3                   	ret    
c000f9c3:	90                   	nop

c000f9c4 <CPU::setupGlobalPages()>:
c000f9c4:	0f 20 e0             	mov    eax,cr4
c000f9c7:	0c 80                	or     al,0x80
c000f9c9:	0f 22 e0             	mov    cr4,eax
c000f9cc:	c3                   	ret    
c000f9cd:	90                   	nop

c000f9ce <CPU::allowUsermodeDataAccess()>:
c000f9ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9d2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9d9:	74 03                	je     c000f9de <CPU::allowUsermodeDataAccess()+0x10>
c000f9db:	0f 01 cb             	stac   
c000f9de:	c3                   	ret    
c000f9df:	90                   	nop

c000f9e0 <CPU::prohibitUsermodeDataAccess()>:
c000f9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9e4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9eb:	74 03                	je     c000f9f0 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f9ed:	0f 01 ca             	clac   
c000f9f0:	c3                   	ret    
c000f9f1:	90                   	nop

c000f9f2 <CPU::setupSMAP()>:
c000f9f2:	0f 20 e0             	mov    eax,cr4
c000f9f5:	0d 00 00 20 00       	or     eax,0x200000
c000f9fa:	0f 22 e0             	mov    cr4,eax
c000f9fd:	eb e1                	jmp    c000f9e0 <CPU::prohibitUsermodeDataAccess()>
c000f9ff:	90                   	nop

c000fa00 <CPU::setupFeatures()>:
c000fa00:	53                   	push   ebx
c000fa01:	83 ec 08             	sub    esp,0x8
c000fa04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa08:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fa0f:	74 18                	je     c000fa29 <CPU::setupFeatures()+0x29>
c000fa11:	83 ec 0c             	sub    esp,0xc
c000fa14:	68 cd e6 01 c0       	push   0xc001e6cd
c000fa19:	e8 fb ab ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000fa1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa21:	e8 42 ff ff ff       	call   c000f968 <CPU::setupUMIP()>
c000fa26:	83 c4 10             	add    esp,0x10
c000fa29:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fa30:	74 18                	je     c000fa4a <CPU::setupFeatures()+0x4a>
c000fa32:	83 ec 0c             	sub    esp,0xc
c000fa35:	68 d7 e6 01 c0       	push   0xc001e6d7
c000fa3a:	e8 da ab ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000fa3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa42:	e8 2b ff ff ff       	call   c000f972 <CPU::setupTSC()>
c000fa47:	83 c4 10             	add    esp,0x10
c000fa4a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fa51:	74 18                	je     c000fa6b <CPU::setupFeatures()+0x6b>
c000fa53:	83 ec 0c             	sub    esp,0xc
c000fa56:	68 e0 e6 01 c0       	push   0xc001e6e0
c000fa5b:	e8 b9 ab ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000fa60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa63:	e8 14 ff ff ff       	call   c000f97c <CPU::setupLargePages()>
c000fa68:	83 c4 10             	add    esp,0x10
c000fa6b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fa72:	74 18                	je     c000fa8c <CPU::setupFeatures()+0x8c>
c000fa74:	83 ec 0c             	sub    esp,0xc
c000fa77:	68 e9 e6 01 c0       	push   0xc001e6e9
c000fa7c:	e8 98 ab ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000fa81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa84:	e8 3b ff ff ff       	call   c000f9c4 <CPU::setupGlobalPages()>
c000fa89:	83 c4 10             	add    esp,0x10
c000fa8c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fa93:	74 18                	je     c000faad <CPU::setupFeatures()+0xad>
c000fa95:	83 ec 0c             	sub    esp,0xc
c000fa98:	68 fb e6 01 c0       	push   0xc001e6fb
c000fa9d:	e8 77 ab ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c000faa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faa5:	e8 dc fe ff ff       	call   c000f986 <CPU::setupPAT()>
c000faaa:	83 c4 10             	add    esp,0x10
c000faad:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fab4:	74 11                	je     c000fac7 <CPU::setupFeatures()+0xc7>
c000fab6:	c7 44 24 10 04 e7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e704
c000fabe:	83 c4 08             	add    esp,0x8
c000fac1:	5b                   	pop    ebx
c000fac2:	e9 52 ab ff ff       	jmp    c000a619 <Dbg::kprintf(char const*, ...)>
c000fac7:	83 c4 08             	add    esp,0x8
c000faca:	5b                   	pop    ebx
c000facb:	c3                   	ret    

c000facc <CPU::open(int, int, void*)>:
c000facc:	57                   	push   edi
c000facd:	56                   	push   esi
c000face:	53                   	push   ebx
c000facf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fad7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fadd:	83 ec 0c             	sub    esp,0xc
c000fae0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fae6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000faec:	50                   	push   eax
c000faed:	e8 ea 75 ff ff       	call   c00070dc <GDT::setup()>
c000faf2:	83 c4 0c             	add    esp,0xc
c000faf5:	6a 00                	push   0x0
c000faf7:	68 ef be ad de       	push   0xdeadbeef
c000fafc:	57                   	push   edi
c000fafd:	e8 0a 91 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000fb02:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb05:	e8 e2 90 ff ff       	call   c0008bec <TSS::flush()>
c000fb0a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fb10:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb13:	e8 12 78 ff ff       	call   c000732a <IDT::setup()>
c000fb18:	b8 00 04 00 00       	mov    eax,0x400
c000fb1d:	0f 23 f8             	mov    db7,eax
c000fb20:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fb2a:	e8 66 7f ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fb2f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fb35:	89 30                	mov    DWORD PTR [eax],esi
c000fb37:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fb3d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fb40:	58                   	pop    eax
c000fb41:	5a                   	pop    edx
c000fb42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fb48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fb4c:	e8 83 a0 ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c000fb51:	c7 04 24 0e e7 01 c0 	mov    DWORD PTR [esp],0xc001e70e
c000fb58:	e8 c6 00 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c000fb5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb60:	e8 33 f7 ff ff       	call   c000f298 <CPU::detectFeatures()>
c000fb65:	c7 04 24 31 e7 01 c0 	mov    DWORD PTR [esp],0xc001e731
c000fb6c:	e8 b2 00 00 00       	call   c000fc23 <KeSetBootMessage(char const*)>
c000fb71:	e8 26 5c 00 00       	call   c001579c <HalInitialise()>
c000fb76:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fb7b:	83 e0 10             	and    eax,0x10
c000fb7e:	83 f8 01             	cmp    eax,0x1
c000fb81:	19 c0                	sbb    eax,eax
c000fb83:	83 e0 46             	and    eax,0x46
c000fb86:	83 c0 1e             	add    eax,0x1e
c000fb89:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb8c:	e8 60 d7 ff ff       	call   c000d2f1 <setupTimer(int)>
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fb9a:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fba1:	74 0c                	je     c000fbaf <CPU::open(int, int, void*)+0xe3>
c000fba3:	83 ec 0c             	sub    esp,0xc
c000fba6:	53                   	push   ebx
c000fba7:	e8 54 fe ff ff       	call   c000fa00 <CPU::setupFeatures()>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	5b                   	pop    ebx
c000fbb0:	31 c0                	xor    eax,eax
c000fbb2:	5e                   	pop    esi
c000fbb3:	5f                   	pop    edi
c000fbb4:	c3                   	ret    

c000fbb5 <KeDisplaySplashScreen()>:
c000fbb5:	55                   	push   ebp
c000fbb6:	bd 05 00 00 00       	mov    ebp,0x5
c000fbbb:	57                   	push   edi
c000fbbc:	bf 20 f9 01 c0       	mov    edi,0xc001f920
c000fbc1:	56                   	push   esi
c000fbc2:	be 0a 00 00 00       	mov    esi,0xa
c000fbc7:	53                   	push   ebx
c000fbc8:	31 db                	xor    ebx,ebx
c000fbca:	83 ec 0c             	sub    esp,0xc
c000fbcd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fbd0:	84 c0                	test   al,al
c000fbd2:	74 47                	je     c000fc1b <KeDisplaySplashScreen()+0x66>
c000fbd4:	80 bb 56 f9 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe06aa],0xdb
c000fbdb:	75 13                	jne    c000fbf0 <KeDisplaySplashScreen()+0x3b>
c000fbdd:	0f b6 93 55 f9 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe06ab]
c000fbe4:	83 e2 fe             	and    edx,0xfffffffe
c000fbe7:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fbed:	75 01                	jne    c000fbf0 <KeDisplaySplashScreen()+0x3b>
c000fbef:	46                   	inc    esi
c000fbf0:	3c 0d                	cmp    al,0xd
c000fbf2:	74 24                	je     c000fc18 <KeDisplaySplashScreen()+0x63>
c000fbf4:	3c 0a                	cmp    al,0xa
c000fbf6:	75 0a                	jne    c000fc02 <KeDisplaySplashScreen()+0x4d>
c000fbf8:	45                   	inc    ebp
c000fbf9:	be 0a 00 00 00       	mov    esi,0xa
c000fbfe:	31 db                	xor    ebx,ebx
c000fc00:	eb 16                	jmp    c000fc18 <KeDisplaySplashScreen()+0x63>
c000fc02:	83 ec 0c             	sub    esp,0xc
c000fc05:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc08:	55                   	push   ebp
c000fc09:	43                   	inc    ebx
c000fc0a:	52                   	push   edx
c000fc0b:	6a 00                	push   0x0
c000fc0d:	6a 0e                	push   0xe
c000fc0f:	50                   	push   eax
c000fc10:	e8 eb 67 00 00       	call   c0016400 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fc15:	83 c4 20             	add    esp,0x20
c000fc18:	47                   	inc    edi
c000fc19:	eb b2                	jmp    c000fbcd <KeDisplaySplashScreen()+0x18>
c000fc1b:	83 c4 0c             	add    esp,0xc
c000fc1e:	5b                   	pop    ebx
c000fc1f:	5e                   	pop    esi
c000fc20:	5f                   	pop    edi
c000fc21:	5d                   	pop    ebp
c000fc22:	c3                   	ret    

c000fc23 <KeSetBootMessage(char const*)>:
c000fc23:	57                   	push   edi
c000fc24:	56                   	push   esi
c000fc25:	53                   	push   ebx
c000fc26:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fc2c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fc33:	68 9e 00 00 00       	push   0x9e
c000fc38:	6a 00                	push   0x0
c000fc3a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fc3e:	56                   	push   esi
c000fc3f:	e8 8c 08 ff ff       	call   c00004d0 <memset>
c000fc44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc47:	e8 f4 08 ff ff       	call   c0000540 <strlen>
c000fc4c:	ba 50 00 00 00       	mov    edx,0x50
c000fc51:	83 c4 10             	add    esp,0x10
c000fc54:	29 c2                	sub    edx,eax
c000fc56:	31 c9                	xor    ecx,ecx
c000fc58:	83 e2 fe             	and    edx,0xfffffffe
c000fc5b:	01 f2                	add    edx,esi
c000fc5d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fc62:	84 c0                	test   al,al
c000fc64:	74 0a                	je     c000fc70 <KeSetBootMessage(char const*)+0x4d>
c000fc66:	80 cc 0f             	or     ah,0xf
c000fc69:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fc6d:	41                   	inc    ecx
c000fc6e:	eb ed                	jmp    c000fc5d <KeSetBootMessage(char const*)+0x3a>
c000fc70:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fc75:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fc7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc7c:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fc82:	5b                   	pop    ebx
c000fc83:	5e                   	pop    esi
c000fc84:	5f                   	pop    edi
c000fc85:	c3                   	ret    

c000fc86 <EnvVarContainer::getEnv(char const*)>:
c000fc86:	57                   	push   edi
c000fc87:	56                   	push   esi
c000fc88:	53                   	push   ebx
c000fc89:	31 db                	xor    ebx,ebx
c000fc8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc8f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fc91:	7e 2b                	jle    c000fcbe <EnvVarContainer::getEnv(char const*)+0x38>
c000fc93:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fc9a:	50                   	push   eax
c000fc9b:	50                   	push   eax
c000fc9c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc9f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fca2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fca6:	e8 35 0a ff ff       	call   c00006e0 <strcmp>
c000fcab:	83 c4 10             	add    esp,0x10
c000fcae:	85 c0                	test   eax,eax
c000fcb0:	75 09                	jne    c000fcbb <EnvVarContainer::getEnv(char const*)+0x35>
c000fcb2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fcb5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fcb9:	eb 05                	jmp    c000fcc0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fcbb:	43                   	inc    ebx
c000fcbc:	eb d1                	jmp    c000fc8f <EnvVarContainer::getEnv(char const*)+0x9>
c000fcbe:	31 c0                	xor    eax,eax
c000fcc0:	5b                   	pop    ebx
c000fcc1:	5e                   	pop    esi
c000fcc2:	5f                   	pop    edi
c000fcc3:	c3                   	ret    

c000fcc4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fcc4:	55                   	push   ebp
c000fcc5:	57                   	push   edi
c000fcc6:	56                   	push   esi
c000fcc7:	53                   	push   ebx
c000fcc8:	83 ec 28             	sub    esp,0x28
c000fccb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fccf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fcd3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fcd7:	56                   	push   esi
c000fcd8:	e8 63 08 ff ff       	call   c0000540 <strlen>
c000fcdd:	40                   	inc    eax
c000fcde:	89 04 24             	mov    DWORD PTR [esp],eax
c000fce1:	e8 d3 7a ff ff       	call   c00077b9 <malloc>
c000fce6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fce9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fced:	e8 4e 08 ff ff       	call   c0000540 <strlen>
c000fcf2:	40                   	inc    eax
c000fcf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcf6:	e8 be 7a ff ff       	call   c00077b9 <malloc>
c000fcfb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcfe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd02:	e8 39 08 ff ff       	call   c0000540 <strlen>
c000fd07:	83 c4 0c             	add    esp,0xc
c000fd0a:	40                   	inc    eax
c000fd0b:	50                   	push   eax
c000fd0c:	6a 00                	push   0x0
c000fd0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd12:	e8 b9 07 ff ff       	call   c00004d0 <memset>
c000fd17:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd1a:	e8 21 08 ff ff       	call   c0000540 <strlen>
c000fd1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd23:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd2b:	89 de                	mov    esi,ebx
c000fd2d:	e8 0e 08 ff ff       	call   c0000540 <strlen>
c000fd32:	83 c4 0c             	add    esp,0xc
c000fd35:	40                   	inc    eax
c000fd36:	50                   	push   eax
c000fd37:	6a 00                	push   0x0
c000fd39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd3d:	e8 8e 07 ff ff       	call   c00004d0 <memset>
c000fd42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd45:	e8 f6 07 ff ff       	call   c0000540 <strlen>
c000fd4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fd4e:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd56:	40                   	inc    eax
c000fd57:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd5a:	c1 e0 03             	shl    eax,0x3
c000fd5d:	5a                   	pop    edx
c000fd5e:	59                   	pop    ecx
c000fd5f:	50                   	push   eax
c000fd60:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fd63:	e8 3d 7a ff ff       	call   c00077a5 <realloc>
c000fd68:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd6c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd6f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd72:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd76:	b9 08 00 00 00       	mov    ecx,0x8
c000fd7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd7d:	83 c4 2c             	add    esp,0x2c
c000fd80:	5b                   	pop    ebx
c000fd81:	5e                   	pop    esi
c000fd82:	5f                   	pop    edi
c000fd83:	5d                   	pop    ebp
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <EnvVarContainer::deleteEnv(char const*)>:
c000fd86:	c3                   	ret    
c000fd87:	90                   	nop

c000fd88 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fd88:	55                   	push   ebp
c000fd89:	57                   	push   edi
c000fd8a:	56                   	push   esi
c000fd8b:	53                   	push   ebx
c000fd8c:	81 ec 38 01 00 00    	sub    esp,0x138
c000fd92:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fd99:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fda0:	68 14 01 00 00       	push   0x114
c000fda5:	e8 0f 7a ff ff       	call   c00077b9 <malloc>
c000fdaa:	83 c4 0c             	add    esp,0xc
c000fdad:	89 c3                	mov    ebx,eax
c000fdaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fdb2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fdb9:	50                   	push   eax
c000fdba:	e8 cf ad ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c000fdbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdc2:	e8 f5 b0 ff ff       	call   c000aebc <File::exists()>
c000fdc7:	83 c4 10             	add    esp,0x10
c000fdca:	84 c0                	test   al,al
c000fdcc:	75 31                	jne    c000fdff <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fdce:	50                   	push   eax
c000fdcf:	50                   	push   eax
c000fdd0:	6a 12                	push   0x12
c000fdd2:	53                   	push   ebx
c000fdd3:	e8 76 ae ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c000fdd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fdda:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fddd:	89 34 24             	mov    DWORD PTR [esp],esi
c000fde0:	e8 5b 07 ff ff       	call   c0000540 <strlen>
c000fde5:	5a                   	pop    edx
c000fde6:	31 d2                	xor    edx,edx
c000fde8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fdec:	51                   	push   ecx
c000fded:	56                   	push   esi
c000fdee:	52                   	push   edx
c000fdef:	50                   	push   eax
c000fdf0:	53                   	push   ebx
c000fdf1:	ff d7                	call   edi
c000fdf3:	83 c4 14             	add    esp,0x14
c000fdf6:	53                   	push   ebx
c000fdf7:	e8 b0 ae ff ff       	call   c000acac <File::close()>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	56                   	push   esi
c000fe00:	31 f6                	xor    esi,esi
c000fe02:	68 00 01 00 00       	push   0x100
c000fe07:	6a 00                	push   0x0
c000fe09:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe0d:	50                   	push   eax
c000fe0e:	e8 bd 06 ff ff       	call   c00004d0 <memset>
c000fe13:	5f                   	pop    edi
c000fe14:	58                   	pop    eax
c000fe15:	6a 01                	push   0x1
c000fe17:	53                   	push   ebx
c000fe18:	e8 31 ae ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c000fe1d:	83 c4 10             	add    esp,0x10
c000fe20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe28:	83 ec 0c             	sub    esp,0xc
c000fe2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe2d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe31:	51                   	push   ecx
c000fe32:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fe36:	52                   	push   edx
c000fe37:	6a 00                	push   0x0
c000fe39:	6a 01                	push   0x1
c000fe3b:	53                   	push   ebx
c000fe3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe3f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fe43:	83 c4 20             	add    esp,0x20
c000fe46:	3c 0d                	cmp    al,0xd
c000fe48:	0f 84 09 01 00 00    	je     c000ff57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fe53:	0f 84 ef 00 00 00    	je     c000ff48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe59:	3c 0a                	cmp    al,0xa
c000fe5b:	74 13                	je     c000fe70 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe5d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe62:	74 0c                	je     c000fe70 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe64:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fe6a:	0f 8e d8 00 00 00    	jle    c000ff48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe74:	83 ec 0c             	sub    esp,0xc
c000fe77:	8d 78 01             	lea    edi,[eax+0x1]
c000fe7a:	57                   	push   edi
c000fe7b:	e8 39 79 ff ff       	call   c00077b9 <malloc>
c000fe80:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fe84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe88:	8d 56 04             	lea    edx,[esi+0x4]
c000fe8b:	89 14 24             	mov    DWORD PTR [esp],edx
c000fe8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe92:	e8 22 79 ff ff       	call   c00077b9 <malloc>
c000fe97:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fe9b:	83 c4 0c             	add    esp,0xc
c000fe9e:	57                   	push   edi
c000fe9f:	6a 00                	push   0x0
c000fea1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fea5:	e8 26 06 ff ff       	call   c00004d0 <memset>
c000feaa:	8d 74 24 30          	lea    esi,[esp+0x30]
c000feae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000feb2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000feb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feb8:	83 c4 0c             	add    esp,0xc
c000febb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000febf:	52                   	push   edx
c000fec0:	6a 00                	push   0x0
c000fec2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fec6:	e8 05 06 ff ff       	call   c00004d0 <memset>
c000fecb:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fecf:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fed3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fed6:	e8 65 06 ff ff       	call   c0000540 <strlen>
c000fedb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fedf:	89 c1                	mov    ecx,eax
c000fee1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fee3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fee6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fee9:	40                   	inc    eax
c000feea:	83 c4 10             	add    esp,0x10
c000feed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fef0:	85 d2                	test   edx,edx
c000fef2:	75 0c                	jne    c000ff00 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fef4:	83 ec 0c             	sub    esp,0xc
c000fef7:	6a 08                	push   0x8
c000fef9:	e8 bb 78 ff ff       	call   c00077b9 <malloc>
c000fefe:	eb 0c                	jmp    c000ff0c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ff00:	c1 e0 03             	shl    eax,0x3
c000ff03:	51                   	push   ecx
c000ff04:	51                   	push   ecx
c000ff05:	50                   	push   eax
c000ff06:	52                   	push   edx
c000ff07:	e8 99 78 ff ff       	call   c00077a5 <realloc>
c000ff0c:	83 c4 10             	add    esp,0x10
c000ff0f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff12:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff15:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ff18:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff1c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff20:	b9 08 00 00 00       	mov    ecx,0x8
c000ff25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff27:	31 f6                	xor    esi,esi
c000ff29:	50                   	push   eax
c000ff2a:	68 00 01 00 00       	push   0x100
c000ff2f:	6a 00                	push   0x0
c000ff31:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff35:	50                   	push   eax
c000ff36:	e8 95 05 ff ff       	call   c00004d0 <memset>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff46:	eb 0f                	jmp    c000ff57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff48:	3c 3d                	cmp    al,0x3d
c000ff4a:	74 07                	je     c000ff53 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ff4c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ff50:	46                   	inc    esi
c000ff51:	eb 04                	jmp    c000ff57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff53:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ff57:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff5c:	0f 85 c6 fe ff ff    	jne    c000fe28 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ff62:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ff68:	5b                   	pop    ebx
c000ff69:	5e                   	pop    esi
c000ff6a:	5f                   	pop    edi
c000ff6b:	5d                   	pop    ebp
c000ff6c:	c3                   	ret    
c000ff6d:	90                   	nop

c000ff6e <EnvVarContainer::__loadSystem()>:
c000ff6e:	83 ec 10             	sub    esp,0x10
c000ff71:	68 80 fa 01 c0       	push   0xc001fa80
c000ff76:	68 74 e7 01 c0       	push   0xc001e774
c000ff7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff7f:	e8 04 fe ff ff       	call   c000fd88 <EnvVarContainer::loadFrom(char const*, char const*)>
c000ff84:	83 c4 1c             	add    esp,0x1c
c000ff87:	c3                   	ret    

c000ff88 <EnvVarContainer::__loadUser()>:
c000ff88:	c3                   	ret    
c000ff89:	90                   	nop

c000ff8a <EnvVarContainer::EnvVarContainer(Process*)>:
c000ff8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ff94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff9c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffa3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ffaa:	90                   	nop
c000ffab:	c3                   	ret    

c000ffac <EnvVarContainer::~EnvVarContainer()>:
c000ffac:	83 ec 0c             	sub    esp,0xc
c000ffaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb6:	85 c0                	test   eax,eax
c000ffb8:	74 1d                	je     c000ffd7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffc0:	85 c0                	test   eax,eax
c000ffc2:	74 13                	je     c000ffd7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffcb:	83 ec 0c             	sub    esp,0xc
c000ffce:	50                   	push   eax
c000ffcf:	e8 f5 77 ff ff       	call   c00077c9 <free>
c000ffd4:	83 c4 10             	add    esp,0x10
c000ffd7:	90                   	nop
c000ffd8:	83 c4 0c             	add    esp,0xc
c000ffdb:	c3                   	ret    

c000ffdc <Krnl::getEnv(Process*, char const*)>:
c000ffdc:	53                   	push   ebx
c000ffdd:	83 ec 08             	sub    esp,0x8
c000ffe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ffe8:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ffee:	74 04                	je     c000fff4 <Krnl::getEnv(Process*, char const*)+0x18>
c000fff0:	85 c0                	test   eax,eax
c000fff2:	75 0b                	jne    c000ffff <Krnl::getEnv(Process*, char const*)+0x23>
c000fff4:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000fff9:	85 c0                	test   eax,eax
c000fffb:	75 19                	jne    c0010016 <Krnl::getEnv(Process*, char const*)+0x3a>
c000fffd:	eb 27                	jmp    c0010026 <Krnl::getEnv(Process*, char const*)+0x4a>
c000ffff:	52                   	push   edx
c0010000:	52                   	push   edx
c0010001:	53                   	push   ebx
c0010002:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010008:	e8 79 fc ff ff       	call   c000fc86 <EnvVarContainer::getEnv(char const*)>
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	85 c0                	test   eax,eax
c0010012:	75 28                	jne    c001003c <Krnl::getEnv(Process*, char const*)+0x60>
c0010014:	eb de                	jmp    c000fff4 <Krnl::getEnv(Process*, char const*)+0x18>
c0010016:	52                   	push   edx
c0010017:	52                   	push   edx
c0010018:	53                   	push   ebx
c0010019:	50                   	push   eax
c001001a:	e8 67 fc ff ff       	call   c000fc86 <EnvVarContainer::getEnv(char const*)>
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	85 c0                	test   eax,eax
c0010024:	75 16                	jne    c001003c <Krnl::getEnv(Process*, char const*)+0x60>
c0010026:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001002a:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c001002f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010033:	83 c4 08             	add    esp,0x8
c0010036:	5b                   	pop    ebx
c0010037:	e9 4a fc ff ff       	jmp    c000fc86 <EnvVarContainer::getEnv(char const*)>
c001003c:	83 c4 08             	add    esp,0x8
c001003f:	5b                   	pop    ebx
c0010040:	c3                   	ret    

c0010041 <Krnl::setEnvSystem(char const*, char const*)>:
c0010041:	83 ec 10             	sub    esp,0x10
c0010044:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010048:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001004c:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c0010052:	e8 6d fc ff ff       	call   c000fcc4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010057:	83 c4 1c             	add    esp,0x1c
c001005a:	c3                   	ret    

c001005b <Krnl::setEnvUser(char const*, char const*)>:
c001005b:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c0010060:	85 c0                	test   eax,eax
c0010062:	74 15                	je     c0010079 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010064:	83 ec 10             	sub    esp,0x10
c0010067:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001006b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001006f:	50                   	push   eax
c0010070:	e8 4f fc ff ff       	call   c000fcc4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010075:	83 c4 1c             	add    esp,0x1c
c0010078:	c3                   	ret    
c0010079:	c3                   	ret    

c001007a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001007a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001007e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010084:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010088:	e9 37 fc ff ff       	jmp    c000fcc4 <EnvVarContainer::setEnv(char const*, char const*)>

c001008d <Krnl::deleteEnvSystem(char const*)>:
c001008d:	c3                   	ret    

c001008e <Krnl::deleteEnvUser(char const*)>:
c001008e:	c3                   	ret    

c001008f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001008f:	c3                   	ret    

c0010090 <Krnl::newProcessEnv(Process*)>:
c0010090:	83 ec 28             	sub    esp,0x28
c0010093:	6a 0c                	push   0xc
c0010095:	e8 1f 77 ff ff       	call   c00077b9 <malloc>
c001009a:	5a                   	pop    edx
c001009b:	59                   	pop    ecx
c001009c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100a0:	50                   	push   eax
c00100a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00100a5:	e8 e0 fe ff ff       	call   c000ff8a <EnvVarContainer::EnvVarContainer(Process*)>
c00100aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ae:	83 c4 2c             	add    esp,0x2c
c00100b1:	c3                   	ret    

c00100b2 <Krnl::copyProcessEnv(Process*, Process*)>:
c00100b2:	57                   	push   edi
c00100b3:	56                   	push   esi
c00100b4:	53                   	push   ebx
c00100b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b9:	83 ec 0c             	sub    esp,0xc
c00100bc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00100c2:	6a 0c                	push   0xc
c00100c4:	e8 f0 76 ff ff       	call   c00077b9 <malloc>
c00100c9:	89 c3                	mov    ebx,eax
c00100cb:	58                   	pop    eax
c00100cc:	5a                   	pop    edx
c00100cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100d1:	53                   	push   ebx
c00100d2:	e8 b3 fe ff ff       	call   c000ff8a <EnvVarContainer::EnvVarContainer(Process*)>
c00100d7:	8b 07                	mov    eax,DWORD PTR [edi]
c00100d9:	89 03                	mov    DWORD PTR [ebx],eax
c00100db:	c1 e0 03             	shl    eax,0x3
c00100de:	89 04 24             	mov    DWORD PTR [esp],eax
c00100e1:	e8 d3 76 ff ff       	call   c00077b9 <malloc>
c00100e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00100e9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00100eb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00100ee:	c1 e1 03             	shl    ecx,0x3
c00100f1:	89 c7                	mov    edi,eax
c00100f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	89 d8                	mov    eax,ebx
c00100fa:	5b                   	pop    ebx
c00100fb:	5e                   	pop    esi
c00100fc:	5f                   	pop    edi
c00100fd:	c3                   	ret    

c00100fe <Krnl::loadSystemEnv()>:
c00100fe:	53                   	push   ebx
c00100ff:	83 ec 14             	sub    esp,0x14
c0010102:	6a 0c                	push   0xc
c0010104:	e8 b0 76 ff ff       	call   c00077b9 <malloc>
c0010109:	89 c3                	mov    ebx,eax
c001010b:	58                   	pop    eax
c001010c:	5a                   	pop    edx
c001010d:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010113:	53                   	push   ebx
c0010114:	e8 71 fe ff ff       	call   c000ff8a <EnvVarContainer::EnvVarContainer(Process*)>
c0010119:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001011c:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c0010122:	e8 47 fe ff ff       	call   c000ff6e <EnvVarContainer::__loadSystem()>
c0010127:	83 c4 18             	add    esp,0x18
c001012a:	5b                   	pop    ebx
c001012b:	c3                   	ret    

c001012c <Krnl::loadUserEnv()>:
c001012c:	53                   	push   ebx
c001012d:	83 ec 14             	sub    esp,0x14
c0010130:	6a 0c                	push   0xc
c0010132:	e8 82 76 ff ff       	call   c00077b9 <malloc>
c0010137:	89 c3                	mov    ebx,eax
c0010139:	58                   	pop    eax
c001013a:	5a                   	pop    edx
c001013b:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010141:	53                   	push   ebx
c0010142:	e8 43 fe ff ff       	call   c000ff8a <EnvVarContainer::EnvVarContainer(Process*)>
c0010147:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c001014d:	83 c4 18             	add    esp,0x18
c0010150:	5b                   	pop    ebx
c0010151:	c3                   	ret    

c0010152 <Krnl::flushEnv()>:
c0010152:	c3                   	ret    

c0010153 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010157:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c001015d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010163:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0010168:	8b 00                	mov    eax,DWORD PTR [eax]
c001016a:	03 01                	add    eax,DWORD PTR [ecx]
c001016c:	85 d2                	test   edx,edx
c001016e:	74 02                	je     c0010172 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010170:	03 02                	add    eax,DWORD PTR [edx]
c0010172:	c3                   	ret    

c0010173 <Krnl::getProcessEnvPair(Process*, int)>:
c0010173:	57                   	push   edi
c0010174:	56                   	push   esi
c0010175:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c001017b:	53                   	push   ebx
c001017c:	85 f6                	test   esi,esi
c001017e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010182:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010186:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001018c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010190:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010192:	75 16                	jne    c00101aa <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010194:	39 c2                	cmp    edx,eax
c0010196:	7c 16                	jl     c00101ae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010198:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c001019e:	8b 31                	mov    esi,DWORD PTR [ecx]
c00101a0:	01 c6                	add    esi,eax
c00101a2:	39 d6                	cmp    esi,edx
c00101a4:	7e 3c                	jle    c00101e2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101a6:	29 c2                	sub    edx,eax
c00101a8:	eb 04                	jmp    c00101ae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00101aa:	39 c2                	cmp    edx,eax
c00101ac:	7d 05                	jge    c00101b3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00101ae:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00101b1:	eb 20                	jmp    c00101d3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00101b3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00101b5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00101b8:	39 d1                	cmp    ecx,edx
c00101ba:	7e 04                	jle    c00101c0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00101bc:	29 c2                	sub    edx,eax
c00101be:	eb 10                	jmp    c00101d0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00101c0:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c00101c6:	03 0e                	add    ecx,DWORD PTR [esi]
c00101c8:	39 d1                	cmp    ecx,edx
c00101ca:	7e 16                	jle    c00101e2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101cc:	29 c2                	sub    edx,eax
c00101ce:	29 fa                	sub    edx,edi
c00101d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101d3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00101d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00101d8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00101db:	89 03                	mov    DWORD PTR [ebx],eax
c00101dd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00101e0:	eb 1d                	jmp    c00101ff <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00101e2:	83 ec 0c             	sub    esp,0xc
c00101e5:	68 96 e7 01 c0       	push   0xc001e796
c00101ea:	e8 ac 00 00 00       	call   c001029b <KePanic(char const*)>
c00101ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00101f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	89 d8                	mov    eax,ebx
c0010201:	5b                   	pop    ebx
c0010202:	5e                   	pop    esi
c0010203:	5f                   	pop    edi
c0010204:	c2 04 00             	ret    0x4

c0010207 <CPU::current()>:
c0010207:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001020c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010212:	c3                   	ret    

c0010213 <operator new(unsigned long)>:
c0010213:	e9 a1 75 ff ff       	jmp    c00077b9 <malloc>

c0010218 <operator delete(void*)>:
c0010218:	e9 bc 75 ff ff       	jmp    c00077d9 <rfree>

c001021d <disableIRQs()>:
c001021d:	fa                   	cli    
c001021e:	c3                   	ret    

c001021f <enableIRQs()>:
c001021f:	fb                   	sti    
c0010220:	c3                   	ret    

c0010221 <lockScheduler()>:
c0010221:	fa                   	cli    
c0010222:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010228:	c3                   	ret    

c0010229 <unlockScheduler()>:
c0010229:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001022e:	48                   	dec    eax
c001022f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010234:	75 01                	jne    c0010237 <unlockScheduler()+0xe>
c0010236:	fb                   	sti    
c0010237:	c3                   	ret    

c0010238 <lockStuff()>:
c0010238:	fa                   	cli    
c0010239:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001023f:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0010245:	c3                   	ret    

c0010246 <unlockStuff()>:
c0010246:	83 ec 0c             	sub    esp,0xc
c0010249:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001024e:	48                   	dec    eax
c001024f:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0010254:	75 18                	jne    c001026e <unlockStuff()+0x28>
c0010256:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c001025d:	74 0f                	je     c001026e <unlockStuff()+0x28>
c001025f:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0010269:	e8 22 36 00 00       	call   c0013890 <schedule()>
c001026e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010273:	48                   	dec    eax
c0010274:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010279:	75 01                	jne    c001027c <unlockStuff()+0x36>
c001027b:	fb                   	sti    
c001027c:	83 c4 0c             	add    esp,0xc
c001027f:	c3                   	ret    

c0010280 <Virt::getAKernelVAS()>:
c0010280:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0010285:	c3                   	ret    

c0010286 <__not_memcpy>:
c0010286:	57                   	push   edi
c0010287:	56                   	push   esi
c0010288:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001028c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010294:	89 c7                	mov    edi,eax
c0010296:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010298:	5e                   	pop    esi
c0010299:	5f                   	pop    edi
c001029a:	c3                   	ret    

c001029b <KePanic(char const*)>:
c001029b:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c00102a2:	e9 e1 53 00 00       	jmp    c0015688 <HalPanic(char const*)>

c00102a7 <Krnl::powerThread(void*)>:
c00102a7:	83 ec 0c             	sub    esp,0xc
c00102aa:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00102af:	48                   	dec    eax
c00102b0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00102b5:	75 01                	jne    c00102b8 <Krnl::powerThread(void*)+0x11>
c00102b7:	fb                   	sti    
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00102c2:	6a 0a                	push   0xa
c00102c4:	e8 d7 38 00 00       	call   c0013ba0 <sleep(unsigned int)>
c00102c9:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c00102d0:	83 c4 10             	add    esp,0x10
c00102d3:	eb e3                	jmp    c00102b8 <Krnl::powerThread(void*)+0x11>

c00102d5 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00102d5:	57                   	push   edi
c00102d6:	b9 09 00 00 00       	mov    ecx,0x9
c00102db:	56                   	push   esi
c00102dc:	bf 60 49 02 c0       	mov    edi,0xc0024960
c00102e1:	fc                   	cld    
c00102e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00102e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00102e8:	5e                   	pop    esi
c00102e9:	5f                   	pop    edi
c00102ea:	c3                   	ret    

c00102eb <Krnl::userIOReceived()>:
c00102eb:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00102f5:	c3                   	ret    

c00102f6 <Krnl::handlePowerButton()>:
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c00102fe:	83 f8 02             	cmp    eax,0x2
c0010301:	75 10                	jne    c0010313 <Krnl::handlePowerButton()+0x1d>
c0010303:	83 ec 0c             	sub    esp,0xc
c0010306:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001030c:	e8 45 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c0010311:	eb 11                	jmp    c0010324 <Krnl::handlePowerButton()+0x2e>
c0010313:	48                   	dec    eax
c0010314:	75 11                	jne    c0010327 <Krnl::handlePowerButton()+0x31>
c0010316:	83 ec 0c             	sub    esp,0xc
c0010319:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001031f:	e8 62 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010324:	83 c4 10             	add    esp,0x10
c0010327:	83 c4 0c             	add    esp,0xc
c001032a:	c3                   	ret    

c001032b <Krnl::handleSleepButton()>:
c001032b:	83 ec 0c             	sub    esp,0xc
c001032e:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c0010333:	83 f8 02             	cmp    eax,0x2
c0010336:	75 10                	jne    c0010348 <Krnl::handleSleepButton()+0x1d>
c0010338:	83 ec 0c             	sub    esp,0xc
c001033b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010341:	e8 10 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c0010346:	eb 11                	jmp    c0010359 <Krnl::handleSleepButton()+0x2e>
c0010348:	48                   	dec    eax
c0010349:	75 11                	jne    c001035c <Krnl::handleSleepButton()+0x31>
c001034b:	83 ec 0c             	sub    esp,0xc
c001034e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010354:	e8 2d 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	83 c4 0c             	add    esp,0xc
c001035f:	c3                   	ret    

c0010360 <Krnl::setupPowerManager()>:
c0010360:	83 ec 0c             	sub    esp,0xc
c0010363:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c001036d:	68 f0 00 00 00       	push   0xf0
c0010372:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c0010379:	6a 00                	push   0x0
c001037b:	68 a7 02 01 c0       	push   0xc00102a7
c0010380:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010386:	e8 e5 32 00 00       	call   c0013670 <Process::createThread(void (*)(void*), void*, int)>
c001038b:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c0010395:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c001039f:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c00103a9:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c00103b3:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c00103bd:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c00103c7:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c00103d1:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c00103db:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c00103e5:	83 c4 1c             	add    esp,0x1c
c00103e8:	c3                   	ret    
c00103e9:	66 90                	xchg   ax,ax
c00103eb:	90                   	nop

c00103ec <KeResolveCompatibilitySymbol(char*)>:
c00103ec:	83 ec 0c             	sub    esp,0xc
c00103ef:	83 ec 08             	sub    esp,0x8
c00103f2:	68 b0 e7 01 c0       	push   0xc001e7b0
c00103f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103fb:	e8 e0 02 ff ff       	call   c00006e0 <strcmp>
c0010400:	83 c4 10             	add    esp,0x10
c0010403:	85 c0                	test   eax,eax
c0010405:	0f 94 c0             	sete   al
c0010408:	84 c0                	test   al,al
c001040a:	74 0c                	je     c0010418 <KeResolveCompatibilitySymbol(char*)+0x2c>
c001040c:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c0010411:	e9 62 01 00 00       	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010416:	66 90                	xchg   ax,ax
c0010418:	83 ec 08             	sub    esp,0x8
c001041b:	68 b9 e7 01 c0       	push   0xc001e7b9
c0010420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010424:	e8 b7 02 ff ff       	call   c00006e0 <strcmp>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	85 c0                	test   eax,eax
c001042e:	0f 94 c0             	sete   al
c0010431:	84 c0                	test   al,al
c0010433:	74 0b                	je     c0010440 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010435:	b8 f0 c1 01 c0       	mov    eax,0xc001c1f0
c001043a:	e9 39 01 00 00       	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001043f:	90                   	nop
c0010440:	83 ec 08             	sub    esp,0x8
c0010443:	68 c3 e7 01 c0       	push   0xc001e7c3
c0010448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044c:	e8 8f 02 ff ff       	call   c00006e0 <strcmp>
c0010451:	83 c4 10             	add    esp,0x10
c0010454:	85 c0                	test   eax,eax
c0010456:	0f 94 c0             	sete   al
c0010459:	84 c0                	test   al,al
c001045b:	74 0b                	je     c0010468 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001045d:	b8 24 bf 01 c0       	mov    eax,0xc001bf24
c0010462:	e9 11 01 00 00       	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010467:	90                   	nop
c0010468:	83 ec 08             	sub    esp,0x8
c001046b:	68 cc e7 01 c0       	push   0xc001e7cc
c0010470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010474:	e8 67 02 ff ff       	call   c00006e0 <strcmp>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	85 c0                	test   eax,eax
c001047e:	0f 94 c0             	sete   al
c0010481:	84 c0                	test   al,al
c0010483:	74 0b                	je     c0010490 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010485:	b8 9b 02 01 c0       	mov    eax,0xc001029b
c001048a:	e9 e9 00 00 00       	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001048f:	90                   	nop
c0010490:	83 ec 08             	sub    esp,0x8
c0010493:	68 df e7 01 c0       	push   0xc001e7df
c0010498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001049c:	e8 3f 02 ff ff       	call   c00006e0 <strcmp>
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	85 c0                	test   eax,eax
c00104a6:	0f 94 c0             	sete   al
c00104a9:	84 c0                	test   al,al
c00104ab:	74 0b                	je     c00104b8 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00104ad:	b8 23 fc 00 c0       	mov    eax,0xc000fc23
c00104b2:	e9 c1 00 00 00       	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104b7:	90                   	nop
c00104b8:	83 ec 08             	sub    esp,0x8
c00104bb:	68 fc e7 01 c0       	push   0xc001e7fc
c00104c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c4:	e8 17 02 ff ff       	call   c00006e0 <strcmp>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	85 c0                	test   eax,eax
c00104ce:	0f 94 c0             	sete   al
c00104d1:	84 c0                	test   al,al
c00104d3:	74 0b                	je     c00104e0 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00104d5:	b8 f0 c2 01 c0       	mov    eax,0xc001c2f0
c00104da:	e9 99 00 00 00       	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104df:	90                   	nop
c00104e0:	83 ec 08             	sub    esp,0x8
c00104e3:	68 06 e8 01 c0       	push   0xc001e806
c00104e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ec:	e8 ef 01 ff ff       	call   c00006e0 <strcmp>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	85 c0                	test   eax,eax
c00104f6:	0f 94 c0             	sete   al
c00104f9:	84 c0                	test   al,al
c00104fb:	74 07                	je     c0010504 <KeResolveCompatibilitySymbol(char*)+0x118>
c00104fd:	b8 70 c0 01 c0       	mov    eax,0xc001c070
c0010502:	eb 74                	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010504:	83 ec 08             	sub    esp,0x8
c0010507:	68 0f e8 01 c0       	push   0xc001e80f
c001050c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010510:	e8 cb 01 ff ff       	call   c00006e0 <strcmp>
c0010515:	83 c4 10             	add    esp,0x10
c0010518:	85 c0                	test   eax,eax
c001051a:	0f 94 c0             	sete   al
c001051d:	84 c0                	test   al,al
c001051f:	74 07                	je     c0010528 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010521:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c0010526:	eb 50                	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010528:	83 ec 08             	sub    esp,0x8
c001052b:	68 27 e8 01 c0       	push   0xc001e827
c0010530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010534:	e8 a7 01 ff ff       	call   c00006e0 <strcmp>
c0010539:	83 c4 10             	add    esp,0x10
c001053c:	85 c0                	test   eax,eax
c001053e:	0f 94 c0             	sete   al
c0010541:	84 c0                	test   al,al
c0010543:	74 07                	je     c001054c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010545:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001054a:	eb 2c                	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001054c:	83 ec 08             	sub    esp,0x8
c001054f:	68 34 e8 01 c0       	push   0xc001e834
c0010554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010558:	e8 83 01 ff ff       	call   c00006e0 <strcmp>
c001055d:	83 c4 10             	add    esp,0x10
c0010560:	85 c0                	test   eax,eax
c0010562:	0f 94 c0             	sete   al
c0010565:	84 c0                	test   al,al
c0010567:	74 07                	je     c0010570 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010569:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c001056e:	eb 08                	jmp    c0010578 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010570:	b8 00 00 00 00       	mov    eax,0x0
c0010575:	8d 76 00             	lea    esi,[esi+0x0]
c0010578:	83 c4 0c             	add    esp,0xc
c001057b:	c3                   	ret    

c001057c <KiSigKill(int)>:
c001057c:	57                   	push   edi
c001057d:	b9 0a 00 00 00       	mov    ecx,0xa
c0010582:	56                   	push   esi
c0010583:	be 7d e8 01 c0       	mov    esi,0xc001e87d
c0010588:	83 ec 14             	sub    esp,0x14
c001058b:	8d 7c 24 06          	lea    edi,[esp+0x6]
c001058f:	fc                   	cld    
c0010590:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010592:	8d 44 24 06          	lea    eax,[esp+0x6]
c0010596:	50                   	push   eax
c0010597:	6a 00                	push   0x0
c0010599:	6a 00                	push   0x0
c001059b:	6a 27                	push   0x27
c001059d:	e8 b0 fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105a2:	83 c4 24             	add    esp,0x24
c00105a5:	5e                   	pop    esi
c00105a6:	5f                   	pop    edi
c00105a7:	c3                   	ret    

c00105a8 <KiDefaultSignalHandlerIgnore(int)>:
c00105a8:	c3                   	ret    

c00105a9 <KiDefaultSignalHandlerPause(int)>:
c00105a9:	57                   	push   edi
c00105aa:	b9 07 00 00 00       	mov    ecx,0x7
c00105af:	56                   	push   esi
c00105b0:	be 87 e8 01 c0       	mov    esi,0xc001e887
c00105b5:	83 ec 24             	sub    esp,0x24
c00105b8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00105bc:	fc                   	cld    
c00105bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00105bf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00105c3:	50                   	push   eax
c00105c4:	6a 00                	push   0x0
c00105c6:	6a 00                	push   0x0
c00105c8:	6a 27                	push   0x27
c00105ca:	e8 83 fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105cf:	83 c4 34             	add    esp,0x34
c00105d2:	5e                   	pop    esi
c00105d3:	5f                   	pop    edi
c00105d4:	c3                   	ret    

c00105d5 <KiDefaultSignalHandlerResume(int)>:
c00105d5:	57                   	push   edi
c00105d6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00105db:	56                   	push   esi
c00105dc:	be a3 e8 01 c0       	mov    esi,0xc001e8a3
c00105e1:	83 ec 24             	sub    esp,0x24
c00105e4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00105e8:	fc                   	cld    
c00105e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105eb:	8d 44 24 03          	lea    eax,[esp+0x3]
c00105ef:	50                   	push   eax
c00105f0:	6a 00                	push   0x0
c00105f2:	6a 00                	push   0x0
c00105f4:	6a 27                	push   0x27
c00105f6:	e8 57 fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105fb:	83 c4 34             	add    esp,0x34
c00105fe:	5e                   	pop    esi
c00105ff:	5f                   	pop    edi
c0010600:	c3                   	ret    

c0010601 <KeDeinitSignals(SigHandlerBlock*)>:
c0010601:	e9 c3 71 ff ff       	jmp    c00077c9 <free>

c0010606 <KeInitSignals()>:
c0010606:	53                   	push   ebx
c0010607:	83 ec 14             	sub    esp,0x14
c001060a:	68 c8 00 00 00       	push   0xc8
c001060f:	e8 a5 71 ff ff       	call   c00077b9 <malloc>
c0010614:	83 c4 0c             	add    esp,0xc
c0010617:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010621:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001062b:	89 c3                	mov    ebx,eax
c001062d:	6a 20                	push   0x20
c001062f:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010635:	6a 00                	push   0x0
c0010637:	50                   	push   eax
c0010638:	e8 93 fe fe ff       	call   c00004d0 <memset>
c001063d:	83 c4 0c             	add    esp,0xc
c0010640:	6a 44                	push   0x44
c0010642:	6a 00                	push   0x0
c0010644:	53                   	push   ebx
c0010645:	e8 86 fe fe ff       	call   c00004d0 <memset>
c001064a:	89 d8                	mov    eax,ebx
c001064c:	83 c4 18             	add    esp,0x18
c001064f:	5b                   	pop    ebx
c0010650:	c3                   	ret    

c0010651 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010651:	53                   	push   ebx
c0010652:	b8 01 00 00 00       	mov    eax,0x1
c0010657:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001065b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001065f:	83 f9 10             	cmp    ecx,0x10
c0010662:	7f 21                	jg     c0010685 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010664:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066b:	89 03                	mov    DWORD PTR [ebx],eax
c001066d:	b8 01 00 00 00       	mov    eax,0x1
c0010672:	d3 e0                	shl    eax,cl
c0010674:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010678:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001067b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010683:	31 c0                	xor    eax,eax
c0010685:	5b                   	pop    ebx
c0010686:	c3                   	ret    

c0010687 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010687:	55                   	push   ebp
c0010688:	57                   	push   edi
c0010689:	bf 08 00 00 00       	mov    edi,0x8
c001068e:	56                   	push   esi
c001068f:	53                   	push   ebx
c0010690:	83 ec 18             	sub    esp,0x18
c0010693:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010697:	68 c0 e8 01 c0       	push   0xc001e8c0
c001069c:	e8 78 9f ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00106a1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106a8:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00106ae:	83 c4 10             	add    esp,0x10
c00106b1:	31 c9                	xor    ecx,ecx
c00106b3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00106b7:	99                   	cdq    
c00106b8:	f7 ff                	idiv   edi
c00106ba:	8d 42 24             	lea    eax,[edx+0x24]
c00106bd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00106c1:	85 f6                	test   esi,esi
c00106c3:	75 1a                	jne    c00106df <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00106c5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00106c9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00106cd:	50                   	push   eax
c00106ce:	50                   	push   eax
c00106cf:	52                   	push   edx
c00106d0:	68 d1 e8 01 c0       	push   0xc001e8d1
c00106d5:	e8 3f 9f ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00106da:	83 c4 10             	add    esp,0x10
c00106dd:	eb 1b                	jmp    c00106fa <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00106df:	41                   	inc    ecx
c00106e0:	83 f9 08             	cmp    ecx,0x8
c00106e3:	75 ce                	jne    c00106b3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00106e5:	83 ec 0c             	sub    esp,0xc
c00106e8:	be 01 00 00 00       	mov    esi,0x1
c00106ed:	68 f2 e8 01 c0       	push   0xc001e8f2
c00106f2:	e8 22 9f ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00106f7:	83 c4 10             	add    esp,0x10
c00106fa:	83 c4 0c             	add    esp,0xc
c00106fd:	89 f0                	mov    eax,esi
c00106ff:	5b                   	pop    ebx
c0010700:	5e                   	pop    esi
c0010701:	5f                   	pop    edi
c0010702:	5d                   	pop    ebp
c0010703:	c3                   	ret    

c0010704 <KeCheckSignal(SigHandlerBlock*)>:
c0010704:	55                   	push   ebp
c0010705:	57                   	push   edi
c0010706:	56                   	push   esi
c0010707:	53                   	push   ebx
c0010708:	51                   	push   ecx
c0010709:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001070d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010714:	75 07                	jne    c001071d <KeCheckSignal(SigHandlerBlock*)+0x19>
c0010716:	31 c0                	xor    eax,eax
c0010718:	e9 cc 00 00 00       	jmp    c00107e9 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001071d:	31 c9                	xor    ecx,ecx
c001071f:	bf 08 00 00 00       	mov    edi,0x8
c0010724:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001072a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001072d:	99                   	cdq    
c001072e:	f7 ff                	idiv   edi
c0010730:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010737:	85 d2                	test   edx,edx
c0010739:	0f 84 94 00 00 00    	je     c00107d3 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c001073f:	88 d1                	mov    cl,dl
c0010741:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010747:	bf 01 00 00 00       	mov    edi,0x1
c001074c:	89 04 24             	mov    DWORD PTR [esp],eax
c001074f:	d3 e7                	shl    edi,cl
c0010751:	bd 01 00 00 00       	mov    ebp,0x1
c0010756:	31 c9                	xor    ecx,ecx
c0010758:	89 e8                	mov    eax,ebp
c001075a:	d3 e0                	shl    eax,cl
c001075c:	85 04 24             	test   DWORD PTR [esp],eax
c001075f:	74 06                	je     c0010767 <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010761:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010765:	75 af                	jne    c0010716 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010767:	41                   	inc    ecx
c0010768:	83 f9 11             	cmp    ecx,0x11
c001076b:	75 eb                	jne    c0010758 <KeCheckSignal(SigHandlerBlock*)+0x54>
c001076d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010770:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010773:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c0010779:	09 f8                	or     eax,edi
c001077b:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c0010786:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001078c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010793:	31 c0                	xor    eax,eax
c0010795:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001079d:	74 09                	je     c00107a8 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c001079f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107a6:	eb 06                	jmp    c00107ae <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00107a8:	40                   	inc    eax
c00107a9:	83 f8 08             	cmp    eax,0x8
c00107ac:	75 e7                	jne    c0010795 <KeCheckSignal(SigHandlerBlock*)+0x91>
c00107ae:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00107b1:	83 fa 09             	cmp    edx,0x9
c00107b4:	75 07                	jne    c00107bd <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00107b6:	b8 7c 05 01 c0       	mov    eax,0xc001057c
c00107bb:	eb 2c                	jmp    c00107e9 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107bd:	83 f8 01             	cmp    eax,0x1
c00107c0:	0f 84 50 ff ff ff    	je     c0010716 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107c6:	85 c0                	test   eax,eax
c00107c8:	75 1f                	jne    c00107e9 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107ca:	8b 04 95 e0 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0520]
c00107d1:	eb 16                	jmp    c00107e9 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107d3:	46                   	inc    esi
c00107d4:	41                   	inc    ecx
c00107d5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00107db:	83 f9 08             	cmp    ecx,0x8
c00107de:	0f 85 40 ff ff ff    	jne    c0010724 <KeCheckSignal(SigHandlerBlock*)+0x20>
c00107e4:	e9 2d ff ff ff       	jmp    c0010716 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107e9:	5a                   	pop    edx
c00107ea:	5b                   	pop    ebx
c00107eb:	5e                   	pop    esi
c00107ec:	5f                   	pop    edi
c00107ed:	5d                   	pop    ebp
c00107ee:	c3                   	ret    

c00107ef <KiCheckSignalZ>:
c00107ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107f7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00107fd:	e8 02 ff ff ff       	call   c0010704 <KeCheckSignal(SigHandlerBlock*)>
c0010802:	5a                   	pop    edx
c0010803:	c3                   	ret    

c0010804 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010804:	56                   	push   esi
c0010805:	53                   	push   ebx
c0010806:	bb 01 00 00 00       	mov    ebx,0x1
c001080b:	52                   	push   edx
c001080c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010810:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010814:	d3 e3                	shl    ebx,cl
c0010816:	83 f9 10             	cmp    ecx,0x10
c0010819:	7f 08                	jg     c0010823 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001081b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010821:	75 10                	jne    c0010833 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010823:	83 ec 0c             	sub    esp,0xc
c0010826:	68 03 e9 01 c0       	push   0xc001e903
c001082b:	e8 6b fa ff ff       	call   c001029b <KePanic(char const*)>
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	f7 d3                	not    ebx
c0010835:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001083b:	58                   	pop    eax
c001083c:	5b                   	pop    ebx
c001083d:	5e                   	pop    esi
c001083e:	c3                   	ret    

c001083f <SysSeekDir(regs*)>:
c001083f:	31 c0                	xor    eax,eax
c0010841:	31 d2                	xor    edx,edx
c0010843:	c3                   	ret    

c0010844 <SysTellDir(regs*)>:
c0010844:	31 c0                	xor    eax,eax
c0010846:	31 d2                	xor    edx,edx
c0010848:	c3                   	ret    

c0010849 <SysVerify(regs*)>:
c0010849:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084d:	31 d2                	xor    edx,edx
c001084f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010852:	c3                   	ret    

c0010853 <SysGetArgc(regs*)>:
c0010853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010858:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001085b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010861:	99                   	cdq    
c0010862:	c3                   	ret    

c0010863 <SysTTYName(regs*)>:
c0010863:	b8 01 00 00 00       	mov    eax,0x1
c0010868:	31 d2                	xor    edx,edx
c001086a:	c3                   	ret    

c001086b <SysFormatDisk(regs*)>:
c001086b:	56                   	push   esi
c001086c:	53                   	push   ebx
c001086d:	50                   	push   eax
c001086e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010872:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c0010878:	eb 28                	jmp    c00108a2 <SysFormatDisk(regs*)+0x37>
c001087a:	83 ec 0c             	sub    esp,0xc
c001087d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010880:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010883:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010885:	51                   	push   ecx
c0010886:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010889:	51                   	push   ecx
c001088a:	50                   	push   eax
c001088b:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0010892:	50                   	push   eax
c0010893:	53                   	push   ebx
c0010894:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010897:	83 c4 20             	add    esp,0x20
c001089a:	83 f8 08             	cmp    eax,0x8
c001089d:	75 12                	jne    c00108b1 <SysFormatDisk(regs*)+0x46>
c001089f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00108a2:	85 db                	test   ebx,ebx
c00108a4:	75 d4                	jne    c001087a <SysFormatDisk(regs*)+0xf>
c00108a6:	59                   	pop    ecx
c00108a7:	b8 03 00 00 00       	mov    eax,0x3
c00108ac:	31 d2                	xor    edx,edx
c00108ae:	5b                   	pop    ebx
c00108af:	5e                   	pop    esi
c00108b0:	c3                   	ret    
c00108b1:	85 c0                	test   eax,eax
c00108b3:	74 1b                	je     c00108d0 <SysFormatDisk(regs*)+0x65>
c00108b5:	83 f8 09             	cmp    eax,0x9
c00108b8:	74 0b                	je     c00108c5 <SysFormatDisk(regs*)+0x5a>
c00108ba:	59                   	pop    ecx
c00108bb:	b8 02 00 00 00       	mov    eax,0x2
c00108c0:	31 d2                	xor    edx,edx
c00108c2:	5b                   	pop    ebx
c00108c3:	5e                   	pop    esi
c00108c4:	c3                   	ret    
c00108c5:	59                   	pop    ecx
c00108c6:	b8 01 00 00 00       	mov    eax,0x1
c00108cb:	31 d2                	xor    edx,edx
c00108cd:	5b                   	pop    ebx
c00108ce:	5e                   	pop    esi
c00108cf:	c3                   	ret    
c00108d0:	59                   	pop    ecx
c00108d1:	31 c0                	xor    eax,eax
c00108d3:	31 d2                	xor    edx,edx
c00108d5:	5b                   	pop    ebx
c00108d6:	5e                   	pop    esi
c00108d7:	c3                   	ret    

c00108d8 <SysSetDiskVolumeLabel(regs*)>:
c00108d8:	56                   	push   esi
c00108d9:	53                   	push   ebx
c00108da:	53                   	push   ebx
c00108db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108df:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108e2:	83 f8 19             	cmp    eax,0x19
c00108e5:	77 2d                	ja     c0010914 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108e7:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00108ee:	85 c9                	test   ecx,ecx
c00108f0:	74 22                	je     c0010914 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108f2:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00108f5:	85 db                	test   ebx,ebx
c00108f7:	74 1b                	je     c0010914 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108f9:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00108ff:	85 d2                	test   edx,edx
c0010901:	74 11                	je     c0010914 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010903:	8b 32                	mov    esi,DWORD PTR [edx]
c0010905:	53                   	push   ebx
c0010906:	50                   	push   eax
c0010907:	51                   	push   ecx
c0010908:	52                   	push   edx
c0010909:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001090c:	83 c4 10             	add    esp,0x10
c001090f:	99                   	cdq    
c0010910:	59                   	pop    ecx
c0010911:	5b                   	pop    ebx
c0010912:	5e                   	pop    esi
c0010913:	c3                   	ret    
c0010914:	59                   	pop    ecx
c0010915:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001091a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001091f:	5b                   	pop    ebx
c0010920:	5e                   	pop    esi
c0010921:	c3                   	ret    

c0010922 <SysGetDiskVolumeLabel(regs*)>:
c0010922:	57                   	push   edi
c0010923:	56                   	push   esi
c0010924:	53                   	push   ebx
c0010925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010929:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001092c:	83 fa 19             	cmp    edx,0x19
c001092f:	77 38                	ja     c0010969 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010931:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c0010938:	85 c9                	test   ecx,ecx
c001093a:	74 2d                	je     c0010969 <SysGetDiskVolumeLabel(regs*)+0x47>
c001093c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001093f:	85 db                	test   ebx,ebx
c0010941:	74 26                	je     c0010969 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010943:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010946:	85 f6                	test   esi,esi
c0010948:	74 1f                	je     c0010969 <SysGetDiskVolumeLabel(regs*)+0x47>
c001094a:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010950:	85 c0                	test   eax,eax
c0010952:	74 15                	je     c0010969 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010954:	83 ec 0c             	sub    esp,0xc
c0010957:	8b 38                	mov    edi,DWORD PTR [eax]
c0010959:	56                   	push   esi
c001095a:	53                   	push   ebx
c001095b:	52                   	push   edx
c001095c:	51                   	push   ecx
c001095d:	50                   	push   eax
c001095e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010961:	83 c4 20             	add    esp,0x20
c0010964:	99                   	cdq    
c0010965:	5b                   	pop    ebx
c0010966:	5e                   	pop    esi
c0010967:	5f                   	pop    edi
c0010968:	c3                   	ret    
c0010969:	5b                   	pop    ebx
c001096a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001096f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010974:	5e                   	pop    esi
c0010975:	5f                   	pop    edi
c0010976:	c3                   	ret    

c0010977 <SysShutdown(regs*)>:
c0010977:	83 ec 0c             	sub    esp,0xc
c001097a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010981:	85 c0                	test   eax,eax
c0010983:	74 18                	je     c001099d <SysShutdown(regs*)+0x26>
c0010985:	83 f8 01             	cmp    eax,0x1
c0010988:	74 38                	je     c00109c2 <SysShutdown(regs*)+0x4b>
c001098a:	83 f8 02             	cmp    eax,0x2
c001098d:	74 24                	je     c00109b3 <SysShutdown(regs*)+0x3c>
c001098f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010994:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010999:	83 c4 0c             	add    esp,0xc
c001099c:	c3                   	ret    
c001099d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00109a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00109a4:	6a 00                	push   0x0
c00109a6:	6a 00                	push   0x0
c00109a8:	6a 00                	push   0x0
c00109aa:	50                   	push   eax
c00109ab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109ae:	83 c4 10             	add    esp,0x10
c00109b1:	eb dc                	jmp    c001098f <SysShutdown(regs*)+0x18>
c00109b3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00109b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00109ba:	6a 00                	push   0x0
c00109bc:	6a 00                	push   0x0
c00109be:	6a 01                	push   0x1
c00109c0:	eb e8                	jmp    c00109aa <SysShutdown(regs*)+0x33>
c00109c2:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c00109c7:	85 c0                	test   eax,eax
c00109c9:	74 02                	je     c00109cd <SysShutdown(regs*)+0x56>
c00109cb:	ff d0                	call   eax
c00109cd:	31 c0                	xor    eax,eax
c00109cf:	31 d2                	xor    edx,edx
c00109d1:	83 c4 0c             	add    esp,0xc
c00109d4:	c3                   	ret    

c00109d5 <SysRealpath(regs*)>:
c00109d5:	83 ec 0c             	sub    esp,0xc
c00109d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109dc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109df:	85 d2                	test   edx,edx
c00109e1:	74 07                	je     c00109ea <SysRealpath(regs*)+0x15>
c00109e3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109e6:	85 c0                	test   eax,eax
c00109e8:	75 0b                	jne    c00109f5 <SysRealpath(regs*)+0x20>
c00109ea:	b8 01 00 00 00       	mov    eax,0x1
c00109ef:	31 d2                	xor    edx,edx
c00109f1:	83 c4 0c             	add    esp,0xc
c00109f4:	c3                   	ret    
c00109f5:	51                   	push   ecx
c00109f6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00109fc:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00109ff:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010a05:	51                   	push   ecx
c0010a06:	52                   	push   edx
c0010a07:	50                   	push   eax
c0010a08:	e8 d7 9f ff ff       	call   c000a9e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	31 c0                	xor    eax,eax
c0010a12:	31 d2                	xor    edx,edx
c0010a14:	83 c4 0c             	add    esp,0xc
c0010a17:	c3                   	ret    

c0010a18 <SysReadDir(regs*)>:
c0010a18:	53                   	push   ebx
c0010a19:	83 ec 18             	sub    esp,0x18
c0010a1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a20:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a23:	83 f8 02             	cmp    eax,0x2
c0010a26:	76 61                	jbe    c0010a89 <SysReadDir(regs*)+0x71>
c0010a28:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a2f:	77 49                	ja     c0010a7a <SysReadDir(regs*)+0x62>
c0010a31:	83 ec 0c             	sub    esp,0xc
c0010a34:	50                   	push   eax
c0010a35:	e8 f5 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a3a:	83 c4 10             	add    esp,0x10
c0010a3d:	85 c0                	test   eax,eax
c0010a3f:	74 39                	je     c0010a7a <SysReadDir(regs*)+0x62>
c0010a41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a49:	83 ec 0c             	sub    esp,0xc
c0010a4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a4e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a52:	51                   	push   ecx
c0010a53:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a56:	51                   	push   ecx
c0010a57:	6a 00                	push   0x0
c0010a59:	68 10 01 00 00       	push   0x110
c0010a5e:	50                   	push   eax
c0010a5f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a62:	83 c4 20             	add    esp,0x20
c0010a65:	85 c0                	test   eax,eax
c0010a67:	74 29                	je     c0010a92 <SysReadDir(regs*)+0x7a>
c0010a69:	83 f8 07             	cmp    eax,0x7
c0010a6c:	74 1b                	je     c0010a89 <SysReadDir(regs*)+0x71>
c0010a6e:	b8 02 00 00 00       	mov    eax,0x2
c0010a73:	31 d2                	xor    edx,edx
c0010a75:	83 c4 18             	add    esp,0x18
c0010a78:	5b                   	pop    ebx
c0010a79:	c3                   	ret    
c0010a7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a84:	83 c4 18             	add    esp,0x18
c0010a87:	5b                   	pop    ebx
c0010a88:	c3                   	ret    
c0010a89:	b8 01 00 00 00       	mov    eax,0x1
c0010a8e:	31 d2                	xor    edx,edx
c0010a90:	eb e3                	jmp    c0010a75 <SysReadDir(regs*)+0x5d>
c0010a92:	31 c0                	xor    eax,eax
c0010a94:	31 d2                	xor    edx,edx
c0010a96:	eb dd                	jmp    c0010a75 <SysReadDir(regs*)+0x5d>

c0010a98 <SysIsATTY(regs*)>:
c0010a98:	83 ec 0c             	sub    esp,0xc
c0010a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010aa2:	83 f8 02             	cmp    eax,0x2
c0010aa5:	76 07                	jbe    c0010aae <SysIsATTY(regs*)+0x16>
c0010aa7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010aac:	75 28                	jne    c0010ad6 <SysIsATTY(regs*)+0x3e>
c0010aae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ab3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ab6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010abc:	85 c0                	test   eax,eax
c0010abe:	74 26                	je     c0010ae6 <SysIsATTY(regs*)+0x4e>
c0010ac0:	83 ec 0c             	sub    esp,0xc
c0010ac3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ac5:	50                   	push   eax
c0010ac6:	ff 12                	call   DWORD PTR [edx]
c0010ac8:	31 d2                	xor    edx,edx
c0010aca:	25 ff 00 00 00       	and    eax,0xff
c0010acf:	83 c4 10             	add    esp,0x10
c0010ad2:	83 c4 0c             	add    esp,0xc
c0010ad5:	c3                   	ret    
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	50                   	push   eax
c0010ada:	e8 50 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010adf:	83 c4 10             	add    esp,0x10
c0010ae2:	85 c0                	test   eax,eax
c0010ae4:	75 da                	jne    c0010ac0 <SysIsATTY(regs*)+0x28>
c0010ae6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010af0:	83 c4 0c             	add    esp,0xc
c0010af3:	c3                   	ret    

c0010af4 <SysSeek(regs*)>:
c0010af4:	53                   	push   ebx
c0010af5:	83 ec 08             	sub    esp,0x8
c0010af8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010afc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010aff:	8d 50 fd             	lea    edx,[eax-0x3]
c0010b02:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010b08:	77 34                	ja     c0010b3e <SysSeek(regs*)+0x4a>
c0010b0a:	83 ec 0c             	sub    esp,0xc
c0010b0d:	50                   	push   eax
c0010b0e:	e8 1c 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b13:	83 c4 0c             	add    esp,0xc
c0010b16:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010b19:	31 db                	xor    ebx,ebx
c0010b1b:	53                   	push   ebx
c0010b1c:	51                   	push   ecx
c0010b1d:	50                   	push   eax
c0010b1e:	e8 e9 a1 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0010b23:	83 c4 10             	add    esp,0x10
c0010b26:	85 c0                	test   eax,eax
c0010b28:	0f 95 c0             	setne  al
c0010b2b:	31 d2                	xor    edx,edx
c0010b2d:	25 ff 00 00 00       	and    eax,0xff
c0010b32:	f7 d8                	neg    eax
c0010b34:	83 d2 00             	adc    edx,0x0
c0010b37:	83 c4 08             	add    esp,0x8
c0010b3a:	f7 da                	neg    edx
c0010b3c:	5b                   	pop    ebx
c0010b3d:	c3                   	ret    
c0010b3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b48:	83 c4 08             	add    esp,0x8
c0010b4b:	5b                   	pop    ebx
c0010b4c:	c3                   	ret    

c0010b4d <SysTell(regs*)>:
c0010b4d:	53                   	push   ebx
c0010b4e:	83 ec 08             	sub    esp,0x8
c0010b51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b58:	83 f8 02             	cmp    eax,0x2
c0010b5b:	76 50                	jbe    c0010bad <SysTell(regs*)+0x60>
c0010b5d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b62:	76 19                	jbe    c0010b7d <SysTell(regs*)+0x30>
c0010b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b67:	31 d2                	xor    edx,edx
c0010b69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b76:	31 c0                	xor    eax,eax
c0010b78:	83 c4 08             	add    esp,0x8
c0010b7b:	5b                   	pop    ebx
c0010b7c:	c3                   	ret    
c0010b7d:	83 ec 0c             	sub    esp,0xc
c0010b80:	50                   	push   eax
c0010b81:	e8 a9 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b86:	5a                   	pop    edx
c0010b87:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b8a:	59                   	pop    ecx
c0010b8b:	53                   	push   ebx
c0010b8c:	50                   	push   eax
c0010b8d:	e8 d0 a1 ff ff       	call   c000ad62 <File::tell(unsigned long long*)>
c0010b92:	83 c4 10             	add    esp,0x10
c0010b95:	85 c0                	test   eax,eax
c0010b97:	0f 95 c0             	setne  al
c0010b9a:	31 d2                	xor    edx,edx
c0010b9c:	25 ff 00 00 00       	and    eax,0xff
c0010ba1:	f7 d8                	neg    eax
c0010ba3:	83 d2 00             	adc    edx,0x0
c0010ba6:	83 c4 08             	add    esp,0x8
c0010ba9:	f7 da                	neg    edx
c0010bab:	5b                   	pop    ebx
c0010bac:	c3                   	ret    
c0010bad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bb7:	83 c4 08             	add    esp,0x8
c0010bba:	5b                   	pop    ebx
c0010bbb:	c3                   	ret    

c0010bbc <SysSize(regs*)>:
c0010bbc:	53                   	push   ebx
c0010bbd:	83 ec 18             	sub    esp,0x18
c0010bc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bc4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bc7:	83 f8 02             	cmp    eax,0x2
c0010bca:	76 56                	jbe    c0010c22 <SysSize(regs*)+0x66>
c0010bcc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bd1:	76 19                	jbe    c0010bec <SysSize(regs*)+0x30>
c0010bd3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bd6:	31 d2                	xor    edx,edx
c0010bd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010be5:	31 c0                	xor    eax,eax
c0010be7:	83 c4 18             	add    esp,0x18
c0010bea:	5b                   	pop    ebx
c0010beb:	c3                   	ret    
c0010bec:	83 ec 0c             	sub    esp,0xc
c0010bef:	50                   	push   eax
c0010bf0:	e8 3a 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010bf5:	83 c4 0c             	add    esp,0xc
c0010bf8:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010bfc:	52                   	push   edx
c0010bfd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c00:	52                   	push   edx
c0010c01:	50                   	push   eax
c0010c02:	e8 f3 a2 ff ff       	call   c000aefa <File::stat(unsigned long long*, bool*)>
c0010c07:	83 c4 10             	add    esp,0x10
c0010c0a:	85 c0                	test   eax,eax
c0010c0c:	0f 95 c0             	setne  al
c0010c0f:	31 d2                	xor    edx,edx
c0010c11:	25 ff 00 00 00       	and    eax,0xff
c0010c16:	f7 d8                	neg    eax
c0010c18:	83 d2 00             	adc    edx,0x0
c0010c1b:	83 c4 18             	add    esp,0x18
c0010c1e:	f7 da                	neg    edx
c0010c20:	5b                   	pop    ebx
c0010c21:	c3                   	ret    
c0010c22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c2c:	83 c4 18             	add    esp,0x18
c0010c2f:	5b                   	pop    ebx
c0010c30:	c3                   	ret    

c0010c31 <SysSizeFromFilename(regs*)>:
c0010c31:	57                   	push   edi
c0010c32:	56                   	push   esi
c0010c33:	53                   	push   ebx
c0010c34:	83 ec 20             	sub    esp,0x20
c0010c37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c3b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c3e:	83 fb 02             	cmp    ebx,0x2
c0010c41:	0f 86 8c 00 00 00    	jbe    c0010cd3 <SysSizeFromFilename(regs*)+0xa2>
c0010c47:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c4d:	76 1b                	jbe    c0010c6a <SysSizeFromFilename(regs*)+0x39>
c0010c4f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c52:	31 d2                	xor    edx,edx
c0010c54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c61:	83 c4 20             	add    esp,0x20
c0010c64:	31 c0                	xor    eax,eax
c0010c66:	5b                   	pop    ebx
c0010c67:	5e                   	pop    esi
c0010c68:	5f                   	pop    edi
c0010c69:	c3                   	ret    
c0010c6a:	83 ec 0c             	sub    esp,0xc
c0010c6d:	68 14 01 00 00       	push   0x114
c0010c72:	e8 42 6b ff ff       	call   c00077b9 <malloc>
c0010c77:	83 c4 0c             	add    esp,0xc
c0010c7a:	89 c7                	mov    edi,eax
c0010c7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c81:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c84:	50                   	push   eax
c0010c85:	53                   	push   ebx
c0010c86:	57                   	push   edi
c0010c87:	e8 02 9f ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0010c8c:	83 c4 0c             	add    esp,0xc
c0010c8f:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010c93:	50                   	push   eax
c0010c94:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010c97:	52                   	push   edx
c0010c98:	57                   	push   edi
c0010c99:	e8 5c a2 ff ff       	call   c000aefa <File::stat(unsigned long long*, bool*)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	85 ff                	test   edi,edi
c0010ca3:	74 14                	je     c0010cb9 <SysSizeFromFilename(regs*)+0x88>
c0010ca5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ca9:	8b 17                	mov    edx,DWORD PTR [edi]
c0010cab:	83 ec 0c             	sub    esp,0xc
c0010cae:	57                   	push   edi
c0010caf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010cb2:	83 c4 10             	add    esp,0x10
c0010cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cb9:	85 c0                	test   eax,eax
c0010cbb:	0f 95 c0             	setne  al
c0010cbe:	31 d2                	xor    edx,edx
c0010cc0:	25 ff 00 00 00       	and    eax,0xff
c0010cc5:	f7 d8                	neg    eax
c0010cc7:	83 d2 00             	adc    edx,0x0
c0010cca:	83 c4 20             	add    esp,0x20
c0010ccd:	f7 da                	neg    edx
c0010ccf:	5b                   	pop    ebx
c0010cd0:	5e                   	pop    esi
c0010cd1:	5f                   	pop    edi
c0010cd2:	c3                   	ret    
c0010cd3:	83 c4 20             	add    esp,0x20
c0010cd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cdb:	5b                   	pop    ebx
c0010cdc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ce1:	5e                   	pop    esi
c0010ce2:	5f                   	pop    edi
c0010ce3:	c3                   	ret    

c0010ce4 <SysClose(regs*)>:
c0010ce4:	53                   	push   ebx
c0010ce5:	83 ec 08             	sub    esp,0x8
c0010ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010cef:	83 f8 02             	cmp    eax,0x2
c0010cf2:	76 41                	jbe    c0010d35 <SysClose(regs*)+0x51>
c0010cf4:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010cfa:	83 fa 01             	cmp    edx,0x1
c0010cfd:	76 2d                	jbe    c0010d2c <SysClose(regs*)+0x48>
c0010cff:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d04:	77 2f                	ja     c0010d35 <SysClose(regs*)+0x51>
c0010d06:	83 ec 0c             	sub    esp,0xc
c0010d09:	50                   	push   eax
c0010d0a:	e8 20 84 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010d0f:	89 c3                	mov    ebx,eax
c0010d11:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d14:	e8 93 9f ff ff       	call   c000acac <File::close()>
c0010d19:	83 c4 10             	add    esp,0x10
c0010d1c:	85 db                	test   ebx,ebx
c0010d1e:	74 0c                	je     c0010d2c <SysClose(regs*)+0x48>
c0010d20:	83 ec 0c             	sub    esp,0xc
c0010d23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d25:	53                   	push   ebx
c0010d26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d29:	83 c4 10             	add    esp,0x10
c0010d2c:	31 c0                	xor    eax,eax
c0010d2e:	31 d2                	xor    edx,edx
c0010d30:	83 c4 08             	add    esp,0x8
c0010d33:	5b                   	pop    ebx
c0010d34:	c3                   	ret    
c0010d35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d3f:	83 c4 08             	add    esp,0x8
c0010d42:	5b                   	pop    ebx
c0010d43:	c3                   	ret    

c0010d44 <SysOpenDir(regs*)>:
c0010d44:	57                   	push   edi
c0010d45:	56                   	push   esi
c0010d46:	53                   	push   ebx
c0010d47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d4e:	85 c0                	test   eax,eax
c0010d50:	0f 84 e7 00 00 00    	je     c0010e3d <SysOpenDir(regs*)+0xf9>
c0010d56:	83 ec 0c             	sub    esp,0xc
c0010d59:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010d5c:	56                   	push   esi
c0010d5d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010d60:	57                   	push   edi
c0010d61:	50                   	push   eax
c0010d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010d65:	50                   	push   eax
c0010d66:	68 14 e9 01 c0       	push   0xc001e914
c0010d6b:	e8 a9 98 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010d70:	83 c4 18             	add    esp,0x18
c0010d73:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d76:	50                   	push   eax
c0010d77:	68 3a e9 01 c0       	push   0xc001e93a
c0010d7c:	e8 98 98 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010d81:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010d88:	e8 2c 6a ff ff       	call   c00077b9 <malloc>
c0010d8d:	83 c4 0c             	add    esp,0xc
c0010d90:	89 c6                	mov    esi,eax
c0010d92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d9a:	50                   	push   eax
c0010d9b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d9e:	50                   	push   eax
c0010d9f:	56                   	push   esi
c0010da0:	e8 13 a3 ff ff       	call   c000b0b8 <Directory::Directory(char const*, Process*)>
c0010da5:	c7 04 24 2e f7 01 c0 	mov    DWORD PTR [esp],0xc001f72e
c0010dac:	e8 68 98 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010db1:	83 c4 10             	add    esp,0x10
c0010db4:	85 f6                	test   esi,esi
c0010db6:	0f 84 8f 00 00 00    	je     c0010e4b <SysOpenDir(regs*)+0x107>
c0010dbc:	83 ec 0c             	sub    esp,0xc
c0010dbf:	68 4f e9 01 c0       	push   0xc001e94f
c0010dc4:	e8 50 98 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010dc9:	58                   	pop    eax
c0010dca:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010dcd:	5a                   	pop    edx
c0010dce:	51                   	push   ecx
c0010dcf:	68 53 e9 01 c0       	push   0xc001e953
c0010dd4:	e8 40 98 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010dd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ddc:	e8 97 a3 ff ff       	call   c000b178 <Directory::open()>
c0010de1:	c7 04 24 4b d7 01 c0 	mov    DWORD PTR [esp],0xc001d74b
c0010de8:	89 c7                	mov    edi,eax
c0010dea:	e8 2a 98 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010def:	83 c4 10             	add    esp,0x10
c0010df2:	85 ff                	test   edi,edi
c0010df4:	75 37                	jne    c0010e2d <SysOpenDir(regs*)+0xe9>
c0010df6:	83 ec 0c             	sub    esp,0xc
c0010df9:	68 64 e9 01 c0       	push   0xc001e964
c0010dfe:	e8 16 98 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010e03:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e06:	e8 2f 80 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010e0b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e0e:	89 02                	mov    DWORD PTR [edx],eax
c0010e10:	c1 f8 1f             	sar    eax,0x1f
c0010e13:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e16:	c7 04 24 68 e9 01 c0 	mov    DWORD PTR [esp],0xc001e968
c0010e1d:	e8 f7 97 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010e22:	83 c4 10             	add    esp,0x10
c0010e25:	31 c0                	xor    eax,eax
c0010e27:	5b                   	pop    ebx
c0010e28:	31 d2                	xor    edx,edx
c0010e2a:	5e                   	pop    esi
c0010e2b:	5f                   	pop    edi
c0010e2c:	c3                   	ret    
c0010e2d:	83 ec 0c             	sub    esp,0xc
c0010e30:	68 60 e9 01 c0       	push   0xc001e960
c0010e35:	e8 df 97 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	5b                   	pop    ebx
c0010e3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e48:	5e                   	pop    esi
c0010e49:	5f                   	pop    edi
c0010e4a:	c3                   	ret    
c0010e4b:	83 ec 0c             	sub    esp,0xc
c0010e4e:	68 4b e9 01 c0       	push   0xc001e94b
c0010e53:	eb e0                	jmp    c0010e35 <SysOpenDir(regs*)+0xf1>

c0010e55 <SysCloseDir(regs*)>:
c0010e55:	53                   	push   ebx
c0010e56:	83 ec 08             	sub    esp,0x8
c0010e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e60:	8d 50 fd             	lea    edx,[eax-0x3]
c0010e63:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010e69:	77 2f                	ja     c0010e9a <SysCloseDir(regs*)+0x45>
c0010e6b:	83 ec 0c             	sub    esp,0xc
c0010e6e:	50                   	push   eax
c0010e6f:	e8 bb 82 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010e74:	89 c3                	mov    ebx,eax
c0010e76:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e79:	e8 56 a3 ff ff       	call   c000b1d4 <Directory::close()>
c0010e7e:	83 c4 10             	add    esp,0x10
c0010e81:	85 db                	test   ebx,ebx
c0010e83:	74 0c                	je     c0010e91 <SysCloseDir(regs*)+0x3c>
c0010e85:	83 ec 0c             	sub    esp,0xc
c0010e88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e8a:	53                   	push   ebx
c0010e8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	31 c0                	xor    eax,eax
c0010e93:	31 d2                	xor    edx,edx
c0010e95:	83 c4 08             	add    esp,0x8
c0010e98:	5b                   	pop    ebx
c0010e99:	c3                   	ret    
c0010e9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ea4:	83 c4 08             	add    esp,0x8
c0010ea7:	5b                   	pop    ebx
c0010ea8:	c3                   	ret    

c0010ea9 <SysMakeDir(regs*)>:
c0010ea9:	56                   	push   esi
c0010eaa:	53                   	push   ebx
c0010eab:	83 ec 10             	sub    esp,0x10
c0010eae:	68 14 01 00 00       	push   0x114
c0010eb3:	e8 01 69 ff ff       	call   c00077b9 <malloc>
c0010eb8:	83 c4 0c             	add    esp,0xc
c0010ebb:	89 c3                	mov    ebx,eax
c0010ebd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ec2:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010ec5:	56                   	push   esi
c0010ec6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010eca:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ecd:	50                   	push   eax
c0010ece:	53                   	push   ebx
c0010ecf:	e8 e4 a1 ff ff       	call   c000b0b8 <Directory::Directory(char const*, Process*)>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	85 db                	test   ebx,ebx
c0010ed9:	74 32                	je     c0010f0d <SysMakeDir(regs*)+0x64>
c0010edb:	83 ec 0c             	sub    esp,0xc
c0010ede:	53                   	push   ebx
c0010edf:	e8 74 a4 ff ff       	call   c000b358 <Directory::create()>
c0010ee4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ee7:	89 c6                	mov    esi,eax
c0010ee9:	e8 e6 a2 ff ff       	call   c000b1d4 <Directory::close()>
c0010eee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ef0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ef3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ef6:	83 c4 10             	add    esp,0x10
c0010ef9:	31 c0                	xor    eax,eax
c0010efb:	59                   	pop    ecx
c0010efc:	85 f6                	test   esi,esi
c0010efe:	5b                   	pop    ebx
c0010eff:	0f 95 c0             	setne  al
c0010f02:	5e                   	pop    esi
c0010f03:	31 d2                	xor    edx,edx
c0010f05:	f7 d8                	neg    eax
c0010f07:	83 d2 00             	adc    edx,0x0
c0010f0a:	f7 da                	neg    edx
c0010f0c:	c3                   	ret    
c0010f0d:	59                   	pop    ecx
c0010f0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f13:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f18:	5b                   	pop    ebx
c0010f19:	5e                   	pop    esi
c0010f1a:	c3                   	ret    

c0010f1b <SysWait(regs*)>:
c0010f1b:	83 ec 10             	sub    esp,0x10
c0010f1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f22:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f25:	52                   	push   edx
c0010f26:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010f29:	51                   	push   ecx
c0010f2a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f2d:	50                   	push   eax
c0010f2e:	e8 89 2b 00 00       	call   c0013abc <waitTask(int, int*, int)>
c0010f33:	83 c4 1c             	add    esp,0x1c
c0010f36:	99                   	cdq    
c0010f37:	c3                   	ret    

c0010f38 <SysNotImpl(regs*)>:
c0010f38:	83 ec 18             	sub    esp,0x18
c0010f3b:	68 6c e9 01 c0       	push   0xc001e96c
c0010f40:	e8 56 f3 ff ff       	call   c001029b <KePanic(char const*)>
c0010f45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f4f:	83 c4 1c             	add    esp,0x1c
c0010f52:	c3                   	ret    

c0010f53 <SysPanic(regs*)>:
c0010f53:	83 ec 18             	sub    esp,0x18
c0010f56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f5d:	50                   	push   eax
c0010f5e:	e8 38 f3 ff ff       	call   c001029b <KePanic(char const*)>
c0010f63:	b8 01 00 00 00       	mov    eax,0x1
c0010f68:	31 d2                	xor    edx,edx
c0010f6a:	83 c4 1c             	add    esp,0x1c
c0010f6d:	c3                   	ret    

c0010f6e <SysRmdir(regs*)>:
c0010f6e:	56                   	push   esi
c0010f6f:	53                   	push   ebx
c0010f70:	83 ec 20             	sub    esp,0x20
c0010f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f77:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f7a:	68 14 01 00 00       	push   0x114
c0010f7f:	e8 35 68 ff ff       	call   c00077b9 <malloc>
c0010f84:	83 c4 0c             	add    esp,0xc
c0010f87:	89 c3                	mov    ebx,eax
c0010f89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f91:	50                   	push   eax
c0010f92:	56                   	push   esi
c0010f93:	53                   	push   ebx
c0010f94:	e8 f5 9b ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0010f99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f9c:	e8 25 9e ff ff       	call   c000adc6 <File::unlink()>
c0010fa1:	83 c4 10             	add    esp,0x10
c0010fa4:	85 db                	test   ebx,ebx
c0010fa6:	74 14                	je     c0010fbc <SysRmdir(regs*)+0x4e>
c0010fa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fac:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010fae:	83 ec 0c             	sub    esp,0xc
c0010fb1:	53                   	push   ebx
c0010fb2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010fb5:	83 c4 10             	add    esp,0x10
c0010fb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fbc:	85 c0                	test   eax,eax
c0010fbe:	0f 95 c0             	setne  al
c0010fc1:	31 d2                	xor    edx,edx
c0010fc3:	25 ff 00 00 00       	and    eax,0xff
c0010fc8:	f7 d8                	neg    eax
c0010fca:	83 d2 00             	adc    edx,0x0
c0010fcd:	83 c4 14             	add    esp,0x14
c0010fd0:	f7 da                	neg    edx
c0010fd2:	5b                   	pop    ebx
c0010fd3:	5e                   	pop    esi
c0010fd4:	c3                   	ret    

c0010fd5 <SysUnlink(regs*)>:
c0010fd5:	56                   	push   esi
c0010fd6:	53                   	push   ebx
c0010fd7:	83 ec 20             	sub    esp,0x20
c0010fda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fde:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010fe1:	68 14 01 00 00       	push   0x114
c0010fe6:	e8 ce 67 ff ff       	call   c00077b9 <malloc>
c0010feb:	83 c4 0c             	add    esp,0xc
c0010fee:	89 c3                	mov    ebx,eax
c0010ff0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ff5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ff8:	50                   	push   eax
c0010ff9:	56                   	push   esi
c0010ffa:	53                   	push   ebx
c0010ffb:	e8 8e 9b ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0011000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011003:	e8 be 9d ff ff       	call   c000adc6 <File::unlink()>
c0011008:	83 c4 10             	add    esp,0x10
c001100b:	85 db                	test   ebx,ebx
c001100d:	74 14                	je     c0011023 <SysUnlink(regs*)+0x4e>
c001100f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011013:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011015:	83 ec 0c             	sub    esp,0xc
c0011018:	53                   	push   ebx
c0011019:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001101c:	83 c4 10             	add    esp,0x10
c001101f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011023:	85 c0                	test   eax,eax
c0011025:	0f 95 c0             	setne  al
c0011028:	31 d2                	xor    edx,edx
c001102a:	25 ff 00 00 00       	and    eax,0xff
c001102f:	f7 d8                	neg    eax
c0011031:	83 d2 00             	adc    edx,0x0
c0011034:	83 c4 14             	add    esp,0x14
c0011037:	f7 da                	neg    edx
c0011039:	5b                   	pop    ebx
c001103a:	5e                   	pop    esi
c001103b:	c3                   	ret    

c001103c <SysGetArgv(regs*)>:
c001103c:	83 ec 0c             	sub    esp,0xc
c001103f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011043:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011046:	85 c0                	test   eax,eax
c0011048:	78 2c                	js     c0011076 <SysGetArgv(regs*)+0x3a>
c001104a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011050:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011053:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011059:	7d 1b                	jge    c0011076 <SysGetArgv(regs*)+0x3a>
c001105b:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011062:	85 c0                	test   eax,eax
c0011064:	74 18                	je     c001107e <SysGetArgv(regs*)+0x42>
c0011066:	83 ec 08             	sub    esp,0x8
c0011069:	50                   	push   eax
c001106a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001106d:	50                   	push   eax
c001106e:	e8 8d f5 fe ff       	call   c0000600 <strcpy>
c0011073:	83 c4 10             	add    esp,0x10
c0011076:	31 c0                	xor    eax,eax
c0011078:	31 d2                	xor    edx,edx
c001107a:	83 c4 0c             	add    esp,0xc
c001107d:	c3                   	ret    
c001107e:	b8 01 00 00 00       	mov    eax,0x1
c0011083:	31 d2                	xor    edx,edx
c0011085:	83 c4 0c             	add    esp,0xc
c0011088:	c3                   	ret    

c0011089 <SysUSleep(regs*)>:
c0011089:	83 ec 1c             	sub    esp,0x1c
c001108c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011090:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011093:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011096:	6a 00                	push   0x0
c0011098:	6a 64                	push   0x64
c001109a:	52                   	push   edx
c001109b:	50                   	push   eax
c001109c:	e8 4f b1 00 00       	call   c001c1f0 <__udivdi3>
c00110a1:	83 c4 14             	add    esp,0x14
c00110a4:	50                   	push   eax
c00110a5:	e8 e6 2a 00 00       	call   c0013b90 <milliTenthSleep(unsigned int)>
c00110aa:	31 c0                	xor    eax,eax
c00110ac:	31 d2                	xor    edx,edx
c00110ae:	83 c4 1c             	add    esp,0x1c
c00110b1:	c3                   	ret    

c00110b2 <SysSpawn(regs*)>:
c00110b2:	56                   	push   esi
c00110b3:	53                   	push   ebx
c00110b4:	50                   	push   eax
c00110b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00110bc:	85 c0                	test   eax,eax
c00110be:	75 08                	jne    c00110c8 <SysSpawn(regs*)+0x16>
c00110c0:	59                   	pop    ecx
c00110c1:	31 c0                	xor    eax,eax
c00110c3:	31 d2                	xor    edx,edx
c00110c5:	5b                   	pop    ebx
c00110c6:	5e                   	pop    esi
c00110c7:	c3                   	ret    
c00110c8:	83 ec 0c             	sub    esp,0xc
c00110cb:	68 24 07 00 00       	push   0x724
c00110d0:	e8 e4 66 ff ff       	call   c00077b9 <malloc>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	89 c6                	mov    esi,eax
c00110da:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00110dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110e0:	85 c0                	test   eax,eax
c00110e2:	75 33                	jne    c0011117 <SysSpawn(regs*)+0x65>
c00110e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110ec:	52                   	push   edx
c00110ed:	50                   	push   eax
c00110ee:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00110f1:	53                   	push   ebx
c00110f2:	56                   	push   esi
c00110f3:	e8 44 21 00 00       	call   c001323c <Process::Process(char const*, Process*, char**)>
c00110f8:	83 c4 10             	add    esp,0x10
c00110fb:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011102:	75 bc                	jne    c00110c0 <SysSpawn(regs*)+0xe>
c0011104:	83 ec 0c             	sub    esp,0xc
c0011107:	56                   	push   esi
c0011108:	e8 5b 26 00 00       	call   c0013768 <Process::createUserThread()>
c001110d:	8b 06                	mov    eax,DWORD PTR [esi]
c001110f:	83 c4 10             	add    esp,0x10
c0011112:	99                   	cdq    
c0011113:	59                   	pop    ecx
c0011114:	5b                   	pop    ebx
c0011115:	5e                   	pop    esi
c0011116:	c3                   	ret    
c0011117:	31 c0                	xor    eax,eax
c0011119:	eb d1                	jmp    c00110ec <SysSpawn(regs*)+0x3a>

c001111b <SysGetEnv(regs*)>:
c001111b:	57                   	push   edi
c001111c:	56                   	push   esi
c001111d:	53                   	push   ebx
c001111e:	83 ec 1c             	sub    esp,0x1c
c0011121:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001112a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001112d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011130:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011133:	50                   	push   eax
c0011134:	e8 1a f0 ff ff       	call   c0010153 <Krnl::getProcessTotalEnvCount(Process*)>
c0011139:	83 c4 10             	add    esp,0x10
c001113c:	39 c7                	cmp    edi,eax
c001113e:	7c 14                	jl     c0011154 <SysGetEnv(regs*)+0x39>
c0011140:	85 f6                	test   esi,esi
c0011142:	75 0b                	jne    c001114f <SysGetEnv(regs*)+0x34>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	31 c0                	xor    eax,eax
c0011149:	5b                   	pop    ebx
c001114a:	31 d2                	xor    edx,edx
c001114c:	5e                   	pop    esi
c001114d:	5f                   	pop    edi
c001114e:	c3                   	ret    
c001114f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011152:	eb f0                	jmp    c0011144 <SysGetEnv(regs*)+0x29>
c0011154:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011158:	52                   	push   edx
c0011159:	57                   	push   edi
c001115a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011160:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011163:	51                   	push   ecx
c0011164:	50                   	push   eax
c0011165:	e8 09 f0 ff ff       	call   c0010173 <Krnl::getProcessEnvPair(Process*, int)>
c001116a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001116d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011171:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011175:	83 c4 0c             	add    esp,0xc
c0011178:	85 db                	test   ebx,ebx
c001117a:	75 23                	jne    c001119f <SysGetEnv(regs*)+0x84>
c001117c:	83 ec 0c             	sub    esp,0xc
c001117f:	50                   	push   eax
c0011180:	e8 bb f3 fe ff       	call   c0000540 <strlen>
c0011185:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011188:	89 c3                	mov    ebx,eax
c001118a:	e8 b1 f3 fe ff       	call   c0000540 <strlen>
c001118f:	31 d2                	xor    edx,edx
c0011191:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011195:	83 c4 10             	add    esp,0x10
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	5b                   	pop    ebx
c001119c:	5e                   	pop    esi
c001119d:	5f                   	pop    edi
c001119e:	c3                   	ret    
c001119f:	83 ec 08             	sub    esp,0x8
c00111a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00111a5:	50                   	push   eax
c00111a6:	56                   	push   esi
c00111a7:	e8 54 f4 fe ff       	call   c0000600 <strcpy>
c00111ac:	58                   	pop    eax
c00111ad:	5a                   	pop    edx
c00111ae:	68 86 e9 01 c0       	push   0xc001e986
c00111b3:	56                   	push   esi
c00111b4:	e8 07 f6 fe ff       	call   c00007c0 <strcat>
c00111b9:	59                   	pop    ecx
c00111ba:	5b                   	pop    ebx
c00111bb:	57                   	push   edi
c00111bc:	56                   	push   esi
c00111bd:	e8 fe f5 fe ff       	call   c00007c0 <strcat>
c00111c2:	83 c4 10             	add    esp,0x10
c00111c5:	e9 7a ff ff ff       	jmp    c0011144 <SysGetEnv(regs*)+0x29>

c00111ca <SysSetFatAttrib(regs*)>:
c00111ca:	57                   	push   edi
c00111cb:	56                   	push   esi
c00111cc:	53                   	push   ebx
c00111cd:	83 ec 1c             	sub    esp,0x1c
c00111d0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00111d4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00111d7:	68 14 01 00 00       	push   0x114
c00111dc:	e8 d8 65 ff ff       	call   c00077b9 <malloc>
c00111e1:	83 c4 0c             	add    esp,0xc
c00111e4:	89 c3                	mov    ebx,eax
c00111e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111ee:	50                   	push   eax
c00111ef:	57                   	push   edi
c00111f0:	53                   	push   ebx
c00111f1:	e8 98 99 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c00111f6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00111f9:	83 c4 0c             	add    esp,0xc
c00111fc:	0f b6 d4             	movzx  edx,ah
c00111ff:	25 ff 00 00 00       	and    eax,0xff
c0011204:	52                   	push   edx
c0011205:	50                   	push   eax
c0011206:	53                   	push   ebx
c0011207:	e8 54 9c ff ff       	call   c000ae60 <File::chfatattr(unsigned char, unsigned char)>
c001120c:	83 c4 10             	add    esp,0x10
c001120f:	85 db                	test   ebx,ebx
c0011211:	74 14                	je     c0011227 <SysSetFatAttrib(regs*)+0x5d>
c0011213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011217:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011219:	83 ec 0c             	sub    esp,0xc
c001121c:	53                   	push   ebx
c001121d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011227:	85 c0                	test   eax,eax
c0011229:	0f 95 c0             	setne  al
c001122c:	31 d2                	xor    edx,edx
c001122e:	25 ff 00 00 00       	and    eax,0xff
c0011233:	f7 d8                	neg    eax
c0011235:	83 d2 00             	adc    edx,0x0
c0011238:	83 c4 10             	add    esp,0x10
c001123b:	f7 da                	neg    edx
c001123d:	5b                   	pop    ebx
c001123e:	5e                   	pop    esi
c001123f:	5f                   	pop    edi
c0011240:	c3                   	ret    

c0011241 <SysPipe(regs*)>:
c0011241:	57                   	push   edi
c0011242:	56                   	push   esi
c0011243:	53                   	push   ebx
c0011244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011248:	83 ec 0c             	sub    esp,0xc
c001124b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001124e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011251:	6a 20                	push   0x20
c0011253:	e8 61 65 ff ff       	call   c00077b9 <malloc>
c0011258:	89 c3                	mov    ebx,eax
c001125a:	58                   	pop    eax
c001125b:	5a                   	pop    edx
c001125c:	68 00 50 00 00       	push   0x5000
c0011261:	53                   	push   ebx
c0011262:	e8 57 6e ff ff       	call   c00080be <Pipe::Pipe(int)>
c0011267:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001126a:	e8 cb 7b ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001126f:	89 07                	mov    DWORD PTR [edi],eax
c0011271:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011274:	e8 c1 7b ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011279:	83 c4 10             	add    esp,0x10
c001127c:	89 06                	mov    DWORD PTR [esi],eax
c001127e:	31 d2                	xor    edx,edx
c0011280:	5b                   	pop    ebx
c0011281:	31 c0                	xor    eax,eax
c0011283:	5e                   	pop    esi
c0011284:	5f                   	pop    edi
c0011285:	c3                   	ret    

c0011286 <SysGetUnixTime(regs*)>:
c0011286:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001128b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011291:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011295:	e9 04 a3 ff ff       	jmp    c000b59e <Clock::timeInSecondsLocal()>

c001129a <string_ends_with(char const*, char const*)>:
c001129a:	57                   	push   edi
c001129b:	56                   	push   esi
c001129c:	53                   	push   ebx
c001129d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00112a5:	83 ec 0c             	sub    esp,0xc
c00112a8:	53                   	push   ebx
c00112a9:	e8 92 f2 fe ff       	call   c0000540 <strlen>
c00112ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112b1:	89 c6                	mov    esi,eax
c00112b3:	e8 88 f2 fe ff       	call   c0000540 <strlen>
c00112b8:	83 c4 10             	add    esp,0x10
c00112bb:	39 c6                	cmp    esi,eax
c00112bd:	7d 06                	jge    c00112c5 <string_ends_with(char const*, char const*)+0x2b>
c00112bf:	5b                   	pop    ebx
c00112c0:	31 c0                	xor    eax,eax
c00112c2:	5e                   	pop    esi
c00112c3:	5f                   	pop    edi
c00112c4:	c3                   	ret    
c00112c5:	83 ec 08             	sub    esp,0x8
c00112c8:	29 c6                	sub    esi,eax
c00112ca:	57                   	push   edi
c00112cb:	01 f3                	add    ebx,esi
c00112cd:	53                   	push   ebx
c00112ce:	e8 0d f4 fe ff       	call   c00006e0 <strcmp>
c00112d3:	83 c4 10             	add    esp,0x10
c00112d6:	85 c0                	test   eax,eax
c00112d8:	5b                   	pop    ebx
c00112d9:	0f 94 c0             	sete   al
c00112dc:	5e                   	pop    esi
c00112dd:	25 ff 00 00 00       	and    eax,0xff
c00112e2:	5f                   	pop    edi
c00112e3:	c3                   	ret    

c00112e4 <SysOpen(regs*)>:
c00112e4:	56                   	push   esi
c00112e5:	53                   	push   ebx
c00112e6:	81 ec 04 01 00 00    	sub    esp,0x104
c00112ec:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00112f3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00112f6:	85 d2                	test   edx,edx
c00112f8:	0f 84 cc 01 00 00    	je     c00114ca <SysOpen(regs*)+0x1e6>
c00112fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011301:	85 c0                	test   eax,eax
c0011303:	0f 84 c1 01 00 00    	je     c00114ca <SysOpen(regs*)+0x1e6>
c0011309:	83 ec 08             	sub    esp,0x8
c001130c:	50                   	push   eax
c001130d:	68 88 e9 01 c0       	push   0xc001e988
c0011312:	e8 02 93 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0011317:	83 c4 0c             	add    esp,0xc
c001131a:	68 95 e9 01 c0       	push   0xc001e995
c001131f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011322:	50                   	push   eax
c0011323:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011327:	56                   	push   esi
c0011328:	e8 b7 96 ff ff       	call   c000a9e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001132d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011330:	e8 0b f2 fe ff       	call   c0000540 <strlen>
c0011335:	83 c4 10             	add    esp,0x10
c0011338:	48                   	dec    eax
c0011339:	74 1d                	je     c0011358 <SysOpen(regs*)+0x74>
c001133b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001133e:	eb 0f                	jmp    c001134f <SysOpen(regs*)+0x6b>
c0011340:	80 fa 3a             	cmp    dl,0x3a
c0011343:	74 0f                	je     c0011354 <SysOpen(regs*)+0x70>
c0011345:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011349:	48                   	dec    eax
c001134a:	74 0c                	je     c0011358 <SysOpen(regs*)+0x74>
c001134c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001134f:	80 fa 2e             	cmp    dl,0x2e
c0011352:	75 ec                	jne    c0011340 <SysOpen(regs*)+0x5c>
c0011354:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011358:	83 ec 08             	sub    esp,0x8
c001135b:	68 99 e9 01 c0       	push   0xc001e999
c0011360:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011363:	50                   	push   eax
c0011364:	e8 31 ff ff ff       	call   c001129a <string_ends_with(char const*, char const*)>
c0011369:	83 c4 10             	add    esp,0x10
c001136c:	85 c0                	test   eax,eax
c001136e:	74 1d                	je     c001138d <SysOpen(regs*)+0xa9>
c0011370:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011373:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011379:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011380:	81 c4 04 01 00 00    	add    esp,0x104
c0011386:	31 c0                	xor    eax,eax
c0011388:	31 d2                	xor    edx,edx
c001138a:	5b                   	pop    ebx
c001138b:	5e                   	pop    esi
c001138c:	c3                   	ret    
c001138d:	83 ec 08             	sub    esp,0x8
c0011390:	68 9e e9 01 c0       	push   0xc001e99e
c0011395:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011398:	50                   	push   eax
c0011399:	e8 fc fe ff ff       	call   c001129a <string_ends_with(char const*, char const*)>
c001139e:	83 c4 10             	add    esp,0x10
c00113a1:	85 c0                	test   eax,eax
c00113a3:	75 cb                	jne    c0011370 <SysOpen(regs*)+0x8c>
c00113a5:	83 ec 08             	sub    esp,0x8
c00113a8:	68 9a e9 01 c0       	push   0xc001e99a
c00113ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113b0:	50                   	push   eax
c00113b1:	e8 2a f3 fe ff       	call   c00006e0 <strcmp>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	85 c0                	test   eax,eax
c00113bb:	74 b3                	je     c0011370 <SysOpen(regs*)+0x8c>
c00113bd:	83 ec 08             	sub    esp,0x8
c00113c0:	68 99 e9 01 c0       	push   0xc001e999
c00113c5:	56                   	push   esi
c00113c6:	e8 cf fe ff ff       	call   c001129a <string_ends_with(char const*, char const*)>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	85 c0                	test   eax,eax
c00113d0:	75 9e                	jne    c0011370 <SysOpen(regs*)+0x8c>
c00113d2:	83 ec 08             	sub    esp,0x8
c00113d5:	68 a3 e9 01 c0       	push   0xc001e9a3
c00113da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113dd:	50                   	push   eax
c00113de:	e8 b7 fe ff ff       	call   c001129a <string_ends_with(char const*, char const*)>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	85 c0                	test   eax,eax
c00113e8:	0f 85 ef 00 00 00    	jne    c00114dd <SysOpen(regs*)+0x1f9>
c00113ee:	83 ec 08             	sub    esp,0x8
c00113f1:	68 a8 e9 01 c0       	push   0xc001e9a8
c00113f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113f9:	50                   	push   eax
c00113fa:	e8 9b fe ff ff       	call   c001129a <string_ends_with(char const*, char const*)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	85 c0                	test   eax,eax
c0011404:	0f 85 d3 00 00 00    	jne    c00114dd <SysOpen(regs*)+0x1f9>
c001140a:	83 ec 08             	sub    esp,0x8
c001140d:	68 a4 e9 01 c0       	push   0xc001e9a4
c0011412:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011415:	51                   	push   ecx
c0011416:	e8 c5 f2 fe ff       	call   c00006e0 <strcmp>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	85 c0                	test   eax,eax
c0011420:	0f 84 b7 00 00 00    	je     c00114dd <SysOpen(regs*)+0x1f9>
c0011426:	83 ec 08             	sub    esp,0x8
c0011429:	68 a3 e9 01 c0       	push   0xc001e9a3
c001142e:	56                   	push   esi
c001142f:	e8 66 fe ff ff       	call   c001129a <string_ends_with(char const*, char const*)>
c0011434:	83 c4 10             	add    esp,0x10
c0011437:	85 c0                	test   eax,eax
c0011439:	0f 85 9e 00 00 00    	jne    c00114dd <SysOpen(regs*)+0x1f9>
c001143f:	83 ec 0c             	sub    esp,0xc
c0011442:	68 14 01 00 00       	push   0x114
c0011447:	e8 6d 63 ff ff       	call   c00077b9 <malloc>
c001144c:	83 c4 0c             	add    esp,0xc
c001144f:	89 c6                	mov    esi,eax
c0011451:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011456:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011459:	50                   	push   eax
c001145a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001145d:	52                   	push   edx
c001145e:	56                   	push   esi
c001145f:	e8 2a 97 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0011464:	83 c4 10             	add    esp,0x10
c0011467:	85 f6                	test   esi,esi
c0011469:	74 5f                	je     c00114ca <SysOpen(regs*)+0x1e6>
c001146b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001146e:	89 d0                	mov    eax,edx
c0011470:	25 ff 00 00 00       	and    eax,0xff
c0011475:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011478:	89 d0                	mov    eax,edx
c001147a:	83 e0 01             	and    eax,0x1
c001147d:	f6 c2 02             	test   dl,0x2
c0011480:	74 03                	je     c0011485 <SysOpen(regs*)+0x1a1>
c0011482:	83 c8 02             	or     eax,0x2
c0011485:	f6 c2 04             	test   dl,0x4
c0011488:	74 03                	je     c001148d <SysOpen(regs*)+0x1a9>
c001148a:	83 c8 04             	or     eax,0x4
c001148d:	f6 c2 08             	test   dl,0x8
c0011490:	74 03                	je     c0011495 <SysOpen(regs*)+0x1b1>
c0011492:	83 c8 0a             	or     eax,0xa
c0011495:	83 e2 10             	and    edx,0x10
c0011498:	74 03                	je     c001149d <SysOpen(regs*)+0x1b9>
c001149a:	83 c8 12             	or     eax,0x12
c001149d:	83 ec 08             	sub    esp,0x8
c00114a0:	50                   	push   eax
c00114a1:	56                   	push   esi
c00114a2:	e8 a7 97 ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c00114a7:	83 c4 10             	add    esp,0x10
c00114aa:	85 c0                	test   eax,eax
c00114ac:	75 1c                	jne    c00114ca <SysOpen(regs*)+0x1e6>
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	56                   	push   esi
c00114b2:	e8 83 79 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00114b7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00114ba:	83 c4 10             	add    esp,0x10
c00114bd:	89 02                	mov    DWORD PTR [edx],eax
c00114bf:	c1 f8 1f             	sar    eax,0x1f
c00114c2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114c5:	e9 b6 fe ff ff       	jmp    c0011380 <SysOpen(regs*)+0x9c>
c00114ca:	81 c4 04 01 00 00    	add    esp,0x104
c00114d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114da:	5b                   	pop    ebx
c00114db:	5e                   	pop    esi
c00114dc:	c3                   	ret    
c00114dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114e0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00114e6:	e9 8e fe ff ff       	jmp    c0011379 <SysOpen(regs*)+0x95>

c00114eb <KeSystemCall(regs*, void*)>:
c00114eb:	53                   	push   ebx
c00114ec:	83 ec 10             	sub    esp,0x10
c00114ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00114f3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00114f6:	68 ad e9 01 c0       	push   0xc001e9ad
c00114fb:	e8 19 91 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0011500:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011503:	83 c4 10             	add    esp,0x10
c0011506:	83 f8 32             	cmp    eax,0x32
c0011509:	77 16                	ja     c0011521 <KeSystemCall(regs*, void*)+0x36>
c001150b:	8b 14 85 40 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04c0]
c0011512:	85 d2                	test   edx,edx
c0011514:	74 0b                	je     c0011521 <KeSystemCall(regs*, void*)+0x36>
c0011516:	83 ec 0c             	sub    esp,0xc
c0011519:	53                   	push   ebx
c001151a:	ff d2                	call   edx
c001151c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001151f:	eb 0d                	jmp    c001152e <KeSystemCall(regs*, void*)+0x43>
c0011521:	52                   	push   edx
c0011522:	52                   	push   edx
c0011523:	50                   	push   eax
c0011524:	68 bd e9 01 c0       	push   0xc001e9bd
c0011529:	e8 eb 90 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001152e:	83 c4 10             	add    esp,0x10
c0011531:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011536:	31 d2                	xor    edx,edx
c0011538:	83 c4 08             	add    esp,0x8
c001153b:	5b                   	pop    ebx
c001153c:	c3                   	ret    

c001153d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001153d:	55                   	push   ebp
c001153e:	57                   	push   edi
c001153f:	56                   	push   esi
c0011540:	53                   	push   ebx
c0011541:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011547:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001154e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011550:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011553:	80 fb 40             	cmp    bl,0x40
c0011556:	75 1b                	jne    c0011573 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011558:	8a 16                	mov    dl,BYTE PTR [esi]
c001155a:	84 d2                	test   dl,dl
c001155c:	0f 84 f1 00 00 00    	je     c0011653 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011562:	8d 46 01             	lea    eax,[esi+0x1]
c0011565:	80 fa 3a             	cmp    dl,0x3a
c0011568:	74 04                	je     c001156e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001156a:	89 c6                	mov    esi,eax
c001156c:	eb ea                	jmp    c0011558 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001156e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011571:	89 c6                	mov    esi,eax
c0011573:	50                   	push   eax
c0011574:	6a 40                	push   0x40
c0011576:	6a 00                	push   0x0
c0011578:	8d 44 24 24          	lea    eax,[esp+0x24]
c001157c:	50                   	push   eax
c001157d:	e8 4e ef fe ff       	call   c00004d0 <memset>
c0011582:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011589:	31 c0                	xor    eax,eax
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011590:	84 c9                	test   cl,cl
c0011592:	0f 84 bb 00 00 00    	je     c0011653 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011598:	3d c7 00 00 00       	cmp    eax,0xc7
c001159d:	0f 8f b0 00 00 00    	jg     c0011653 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115a3:	80 f9 0a             	cmp    cl,0xa
c00115a6:	0f 85 98 00 00 00    	jne    c0011644 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00115ac:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00115b1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00115b5:	a8 df                	test   al,0xdf
c00115b7:	0f 94 c1             	sete   cl
c00115ba:	3c 23                	cmp    al,0x23
c00115bc:	0f 94 c2             	sete   dl
c00115bf:	08 d1                	or     cl,dl
c00115c1:	75 4a                	jne    c001160d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115c3:	8d 50 f7             	lea    edx,[eax-0x9]
c00115c6:	80 fa 01             	cmp    dl,0x1
c00115c9:	76 42                	jbe    c001160d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115cb:	3c 5b                	cmp    al,0x5b
c00115cd:	75 42                	jne    c0011611 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00115cf:	80 fb 40             	cmp    bl,0x40
c00115d2:	75 39                	jne    c001160d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115d4:	83 ec 0c             	sub    esp,0xc
c00115d7:	8d 54 24 65          	lea    edx,[esp+0x65]
c00115db:	52                   	push   edx
c00115dc:	e8 5f ef fe ff       	call   c0000540 <strlen>
c00115e1:	83 c4 10             	add    esp,0x10
c00115e4:	83 f8 3f             	cmp    eax,0x3f
c00115e7:	77 6a                	ja     c0011653 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115e9:	50                   	push   eax
c00115ea:	50                   	push   eax
c00115eb:	8d 54 24 61          	lea    edx,[esp+0x61]
c00115ef:	52                   	push   edx
c00115f0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115f4:	52                   	push   edx
c00115f5:	e8 06 f0 fe ff       	call   c0000600 <strcpy>
c00115fa:	58                   	pop    eax
c00115fb:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115ff:	52                   	push   edx
c0011600:	e8 3b ef fe ff       	call   c0000540 <strlen>
c0011605:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	31 d2                	xor    edx,edx
c001160f:	eb 3a                	jmp    c001164b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011611:	80 fb 40             	cmp    bl,0x40
c0011614:	74 06                	je     c001161c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011616:	8d 44 24 58          	lea    eax,[esp+0x58]
c001161a:	eb 20                	jmp    c001163c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001161c:	50                   	push   eax
c001161d:	50                   	push   eax
c001161e:	55                   	push   ebp
c001161f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011623:	50                   	push   eax
c0011624:	e8 b7 f0 fe ff       	call   c00006e0 <strcmp>
c0011629:	83 c4 10             	add    esp,0x10
c001162c:	85 c0                	test   eax,eax
c001162e:	75 dd                	jne    c001160d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011630:	eb e4                	jmp    c0011616 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011632:	8d 50 01             	lea    edx,[eax+0x1]
c0011635:	80 f9 3d             	cmp    cl,0x3d
c0011638:	74 1d                	je     c0011657 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001163a:	89 d0                	mov    eax,edx
c001163c:	8a 08                	mov    cl,BYTE PTR [eax]
c001163e:	84 c9                	test   cl,cl
c0011640:	75 f0                	jne    c0011632 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011642:	eb 0f                	jmp    c0011653 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011644:	8d 50 01             	lea    edx,[eax+0x1]
c0011647:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001164b:	47                   	inc    edi
c001164c:	89 d0                	mov    eax,edx
c001164e:	e9 3b ff ff ff       	jmp    c001158e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011653:	31 c0                	xor    eax,eax
c0011655:	eb 33                	jmp    c001168a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001165b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001165e:	50                   	push   eax
c001165f:	50                   	push   eax
c0011660:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011664:	50                   	push   eax
c0011665:	56                   	push   esi
c0011666:	e8 75 f0 fe ff       	call   c00006e0 <strcmp>
c001166b:	83 c4 10             	add    esp,0x10
c001166e:	85 c0                	test   eax,eax
c0011670:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011674:	75 97                	jne    c001160d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011676:	51                   	push   ecx
c0011677:	51                   	push   ecx
c0011678:	52                   	push   edx
c0011679:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011680:	e8 7b ef fe ff       	call   c0000600 <strcpy>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	b0 01                	mov    al,0x1
c001168a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011690:	5b                   	pop    ebx
c0011691:	5e                   	pop    esi
c0011692:	5f                   	pop    edi
c0011693:	5d                   	pop    ebp
c0011694:	c3                   	ret    

c0011695 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011695:	57                   	push   edi
c0011696:	56                   	push   esi
c0011697:	53                   	push   ebx
c0011698:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001169e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00116a5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00116ac:	53                   	push   ebx
c00116ad:	e8 8e ee fe ff       	call   c0000540 <strlen>
c00116b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00116b5:	89 c7                	mov    edi,eax
c00116b7:	e8 84 ee fe ff       	call   c0000540 <strlen>
c00116bc:	83 c4 10             	add    esp,0x10
c00116bf:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00116c3:	3d ff 00 00 00       	cmp    eax,0xff
c00116c8:	0f 87 d3 00 00 00    	ja     c00117a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00116ce:	57                   	push   edi
c00116cf:	57                   	push   edi
c00116d0:	56                   	push   esi
c00116d1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00116d5:	56                   	push   esi
c00116d6:	e8 25 ef fe ff       	call   c0000600 <strcpy>
c00116db:	58                   	pop    eax
c00116dc:	5a                   	pop    edx
c00116dd:	68 7a ec 01 c0       	push   0xc001ec7a
c00116e2:	56                   	push   esi
c00116e3:	e8 d8 f0 fe ff       	call   c00007c0 <strcat>
c00116e8:	59                   	pop    ecx
c00116e9:	5f                   	pop    edi
c00116ea:	53                   	push   ebx
c00116eb:	56                   	push   esi
c00116ec:	e8 cf f0 fe ff       	call   c00007c0 <strcat>
c00116f1:	58                   	pop    eax
c00116f2:	5a                   	pop    edx
c00116f3:	68 d1 e9 01 c0       	push   0xc001e9d1
c00116f8:	56                   	push   esi
c00116f9:	e8 c2 f0 fe ff       	call   c00007c0 <strcat>
c00116fe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011705:	e8 af 60 ff ff       	call   c00077b9 <malloc>
c001170a:	83 c4 0c             	add    esp,0xc
c001170d:	89 c3                	mov    ebx,eax
c001170f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0011715:	56                   	push   esi
c0011716:	50                   	push   eax
c0011717:	e8 72 94 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c001171c:	83 c4 10             	add    esp,0x10
c001171f:	85 db                	test   ebx,ebx
c0011721:	74 7e                	je     c00117a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011723:	51                   	push   ecx
c0011724:	51                   	push   ecx
c0011725:	6a 01                	push   0x1
c0011727:	53                   	push   ebx
c0011728:	e8 21 95 ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	85 c0                	test   eax,eax
c0011732:	74 08                	je     c001173c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011734:	83 ec 0c             	sub    esp,0xc
c0011737:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011739:	53                   	push   ebx
c001173a:	eb 5f                	jmp    c001179b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001173c:	52                   	push   edx
c001173d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011741:	50                   	push   eax
c0011742:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011746:	50                   	push   eax
c0011747:	53                   	push   ebx
c0011748:	e8 ad 97 ff ff       	call   c000aefa <File::stat(unsigned long long*, bool*)>
c001174d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011751:	83 c4 10             	add    esp,0x10
c0011754:	89 c1                	mov    ecx,eax
c0011756:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001175a:	74 31                	je     c001178d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	50                   	push   eax
c0011760:	e8 54 60 ff ff       	call   c00077b9 <malloc>
c0011765:	89 c6                	mov    esi,eax
c0011767:	58                   	pop    eax
c0011768:	8b 03                	mov    eax,DWORD PTR [ebx]
c001176a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001176e:	52                   	push   edx
c001176f:	56                   	push   esi
c0011770:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011774:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011778:	53                   	push   ebx
c0011779:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001177c:	83 c4 20             	add    esp,0x20
c001177f:	85 c0                	test   eax,eax
c0011781:	75 0a                	jne    c001178d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011783:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011787:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001178b:	74 18                	je     c00117a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	53                   	push   ebx
c0011791:	e8 16 95 ff ff       	call   c000acac <File::close()>
c0011796:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011798:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001179b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001179e:	83 c4 10             	add    esp,0x10
c00117a1:	31 c0                	xor    eax,eax
c00117a3:	eb 3b                	jmp    c00117e0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00117a5:	83 ec 0c             	sub    esp,0xc
c00117a8:	53                   	push   ebx
c00117a9:	e8 fe 94 ff ff       	call   c000acac <File::close()>
c00117ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117b6:	83 c4 0c             	add    esp,0xc
c00117b9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00117c0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00117c7:	56                   	push   esi
c00117c8:	e8 70 fd ff ff       	call   c001153d <Reg::findLineFromLoadedData(char*, char*, char*)>
c00117cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00117d0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00117d4:	e8 f0 5f ff ff       	call   c00077c9 <free>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00117e0:	81 c4 20 01 00 00    	add    esp,0x120
c00117e6:	5b                   	pop    ebx
c00117e7:	5e                   	pop    esi
c00117e8:	5f                   	pop    edi
c00117e9:	c3                   	ret    

c00117ea <Reg::getLine(char*, char*, char*)>:
c00117ea:	57                   	push   edi
c00117eb:	56                   	push   esi
c00117ec:	53                   	push   ebx
c00117ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00117f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117f9:	57                   	push   edi
c00117fa:	56                   	push   esi
c00117fb:	53                   	push   ebx
c00117fc:	68 d6 e9 01 c0       	push   0xc001e9d6
c0011801:	e8 8f fe ff ff       	call   c0011695 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011806:	83 c4 10             	add    esp,0x10
c0011809:	84 c0                	test   al,al
c001180b:	75 10                	jne    c001181d <Reg::getLine(char*, char*, char*)+0x33>
c001180d:	57                   	push   edi
c001180e:	56                   	push   esi
c001180f:	53                   	push   ebx
c0011810:	68 fb e9 01 c0       	push   0xc001e9fb
c0011815:	e8 7b fe ff ff       	call   c0011695 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001181a:	83 c4 10             	add    esp,0x10
c001181d:	5b                   	pop    ebx
c001181e:	5e                   	pop    esi
c001181f:	5f                   	pop    edi
c0011820:	c3                   	ret    

c0011821 <Reg::readInt(char*, char*, int*)>:
c0011821:	55                   	push   ebp
c0011822:	57                   	push   edi
c0011823:	56                   	push   esi
c0011824:	53                   	push   ebx
c0011825:	81 ec f0 00 00 00    	sub    esp,0xf0
c001182b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001182f:	57                   	push   edi
c0011830:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011837:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001183e:	e8 a7 ff ff ff       	call   c00117ea <Reg::getLine(char*, char*, char*)>
c0011843:	83 c4 10             	add    esp,0x10
c0011846:	84 c0                	test   al,al
c0011848:	0f 84 b3 00 00 00    	je     c0011901 <Reg::readInt(char*, char*, int*)+0xe0>
c001184e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011852:	80 fa 2b             	cmp    dl,0x2b
c0011855:	74 0c                	je     c0011863 <Reg::readInt(char*, char*, int*)+0x42>
c0011857:	80 fa 2d             	cmp    dl,0x2d
c001185a:	75 0e                	jne    c001186a <Reg::readInt(char*, char*, int*)+0x49>
c001185c:	ba 01 00 00 00       	mov    edx,0x1
c0011861:	eb 0b                	jmp    c001186e <Reg::readInt(char*, char*, int*)+0x4d>
c0011863:	ba 01 00 00 00       	mov    edx,0x1
c0011868:	eb 02                	jmp    c001186c <Reg::readInt(char*, char*, int*)+0x4b>
c001186a:	31 d2                	xor    edx,edx
c001186c:	31 c0                	xor    eax,eax
c001186e:	be 0a 00 00 00       	mov    esi,0xa
c0011873:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011878:	75 20                	jne    c001189a <Reg::readInt(char*, char*, int*)+0x79>
c001187a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001187e:	80 f9 78             	cmp    cl,0x78
c0011881:	75 0a                	jne    c001188d <Reg::readInt(char*, char*, int*)+0x6c>
c0011883:	83 c2 02             	add    edx,0x2
c0011886:	be 10 00 00 00       	mov    esi,0x10
c001188b:	eb 0d                	jmp    c001189a <Reg::readInt(char*, char*, int*)+0x79>
c001188d:	80 f9 62             	cmp    cl,0x62
c0011890:	75 08                	jne    c001189a <Reg::readInt(char*, char*, int*)+0x79>
c0011892:	83 c2 02             	add    edx,0x2
c0011895:	be 02 00 00 00       	mov    esi,0x2
c001189a:	01 d7                	add    edi,edx
c001189c:	31 d2                	xor    edx,edx
c001189e:	8a 1f                	mov    bl,BYTE PTR [edi]
c00118a0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00118a4:	80 fb 0d             	cmp    bl,0xd
c00118a7:	0f 94 c3             	sete   bl
c00118aa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00118af:	0f 94 c1             	sete   cl
c00118b2:	08 cb                	or     bl,cl
c00118b4:	75 3a                	jne    c00118f0 <Reg::readInt(char*, char*, int*)+0xcf>
c00118b6:	0f af d6             	imul   edx,esi
c00118b9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00118be:	83 fe 10             	cmp    esi,0x10
c00118c1:	75 26                	jne    c00118e9 <Reg::readInt(char*, char*, int*)+0xc8>
c00118c3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00118c7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00118ca:	89 e9                	mov    ecx,ebp
c00118cc:	80 f9 05             	cmp    cl,0x5
c00118cf:	77 06                	ja     c00118d7 <Reg::readInt(char*, char*, int*)+0xb6>
c00118d1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00118d5:	eb 16                	jmp    c00118ed <Reg::readInt(char*, char*, int*)+0xcc>
c00118d7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00118db:	83 e9 61             	sub    ecx,0x61
c00118de:	80 f9 05             	cmp    cl,0x5
c00118e1:	77 06                	ja     c00118e9 <Reg::readInt(char*, char*, int*)+0xc8>
c00118e3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00118e7:	eb 04                	jmp    c00118ed <Reg::readInt(char*, char*, int*)+0xcc>
c00118e9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00118ed:	47                   	inc    edi
c00118ee:	eb ae                	jmp    c001189e <Reg::readInt(char*, char*, int*)+0x7d>
c00118f0:	84 c0                	test   al,al
c00118f2:	74 02                	je     c00118f6 <Reg::readInt(char*, char*, int*)+0xd5>
c00118f4:	f7 da                	neg    edx
c00118f6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00118fd:	89 10                	mov    DWORD PTR [eax],edx
c00118ff:	88 d8                	mov    al,bl
c0011901:	81 c4 ec 00 00 00    	add    esp,0xec
c0011907:	5b                   	pop    ebx
c0011908:	5e                   	pop    esi
c0011909:	5f                   	pop    edi
c001190a:	5d                   	pop    ebp
c001190b:	c3                   	ret    

c001190c <Reg::readString(char*, char*, char*, int)>:
c001190c:	57                   	push   edi
c001190d:	56                   	push   esi
c001190e:	53                   	push   ebx
c001190f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011915:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001191c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011920:	57                   	push   edi
c0011921:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011928:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001192f:	e8 b6 fe ff ff       	call   c00117ea <Reg::getLine(char*, char*, char*)>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	89 c6                	mov    esi,eax
c0011939:	84 c0                	test   al,al
c001193b:	74 44                	je     c0011981 <Reg::readString(char*, char*, char*, int)+0x75>
c001193d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011944:	31 c0                	xor    eax,eax
c0011946:	4a                   	dec    edx
c0011947:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001194a:	84 c9                	test   cl,cl
c001194c:	74 0f                	je     c001195d <Reg::readString(char*, char*, char*, int)+0x51>
c001194e:	39 c2                	cmp    edx,eax
c0011950:	7e 0b                	jle    c001195d <Reg::readString(char*, char*, char*, int)+0x51>
c0011952:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011955:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001195a:	40                   	inc    eax
c001195b:	eb ea                	jmp    c0011947 <Reg::readString(char*, char*, char*, int)+0x3b>
c001195d:	83 ec 0c             	sub    esp,0xc
c0011960:	53                   	push   ebx
c0011961:	e8 da eb fe ff       	call   c0000540 <strlen>
c0011966:	83 c4 10             	add    esp,0x10
c0011969:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001196e:	75 11                	jne    c0011981 <Reg::readString(char*, char*, char*, int)+0x75>
c0011970:	83 ec 0c             	sub    esp,0xc
c0011973:	53                   	push   ebx
c0011974:	e8 c7 eb fe ff       	call   c0000540 <strlen>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011981:	81 c4 d0 00 00 00    	add    esp,0xd0
c0011987:	89 f0                	mov    eax,esi
c0011989:	5b                   	pop    ebx
c001198a:	5e                   	pop    esi
c001198b:	5f                   	pop    edi
c001198c:	c3                   	ret    

c001198d <Reg::readBool(char*, char*, bool*)>:
c001198d:	83 ec 20             	sub    esp,0x20
c0011990:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011994:	50                   	push   eax
c0011995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011999:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001199d:	e8 7f fe ff ff       	call   c0011821 <Reg::readInt(char*, char*, int*)>
c00119a2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00119a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00119ab:	0f 95 02             	setne  BYTE PTR [edx]
c00119ae:	83 c4 2c             	add    esp,0x2c
c00119b1:	c3                   	ret    

c00119b2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00119b2:	53                   	push   ebx
c00119b3:	83 ec 1c             	sub    esp,0x1c
c00119b6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00119ba:	8d 44 24 13          	lea    eax,[esp+0x13]
c00119be:	50                   	push   eax
c00119bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119c7:	e8 c1 ff ff ff       	call   c001198d <Reg::readBool(char*, char*, bool*)>
c00119cc:	83 c4 10             	add    esp,0x10
c00119cf:	84 c0                	test   al,al
c00119d1:	74 04                	je     c00119d7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00119d3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00119d7:	88 d8                	mov    al,bl
c00119d9:	83 c4 18             	add    esp,0x18
c00119dc:	5b                   	pop    ebx
c00119dd:	c3                   	ret    

c00119de <Reg::readIntWithDefault(char*, char*, int)>:
c00119de:	53                   	push   ebx
c00119df:	83 ec 1c             	sub    esp,0x1c
c00119e2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00119ea:	50                   	push   eax
c00119eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119f3:	e8 29 fe ff ff       	call   c0011821 <Reg::readInt(char*, char*, int*)>
c00119f8:	83 c4 10             	add    esp,0x10
c00119fb:	84 c0                	test   al,al
c00119fd:	74 04                	je     c0011a03 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00119ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a03:	89 d8                	mov    eax,ebx
c0011a05:	83 c4 18             	add    esp,0x18
c0011a08:	5b                   	pop    ebx
c0011a09:	c3                   	ret    

c0011a0a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011a0a:	57                   	push   edi
c0011a0b:	56                   	push   esi
c0011a0c:	56                   	push   esi
c0011a0d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011a11:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011a15:	56                   	push   esi
c0011a16:	57                   	push   edi
c0011a17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a1f:	e8 e8 fe ff ff       	call   c001190c <Reg::readString(char*, char*, char*, int)>
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	84 c0                	test   al,al
c0011a29:	75 1a                	jne    c0011a45 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011a2b:	51                   	push   ecx
c0011a2c:	56                   	push   esi
c0011a2d:	6a 00                	push   0x0
c0011a2f:	57                   	push   edi
c0011a30:	e8 9b ea fe ff       	call   c00004d0 <memset>
c0011a35:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011a38:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a3e:	83 c4 10             	add    esp,0x10
c0011a41:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011a45:	89 f8                	mov    eax,edi
c0011a47:	5a                   	pop    edx
c0011a48:	5e                   	pop    esi
c0011a49:	5f                   	pop    edi
c0011a4a:	c3                   	ret    

c0011a4b <SysEject(regs*)>:
c0011a4b:	83 ec 0c             	sub    esp,0xc
c0011a4e:	83 ca ff             	or     edx,0xffffffff
c0011a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a55:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011a58:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a5d:	83 e9 41             	sub    ecx,0x41
c0011a60:	83 f9 19             	cmp    ecx,0x19
c0011a63:	77 18                	ja     c0011a7d <SysEject(regs*)+0x32>
c0011a65:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0011a6c:	85 c9                	test   ecx,ecx
c0011a6e:	74 0d                	je     c0011a7d <SysEject(regs*)+0x32>
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	51                   	push   ecx
c0011a74:	e8 5d b2 ff ff       	call   c000ccd6 <LogicalDisk::eject()>
c0011a79:	83 c4 10             	add    esp,0x10
c0011a7c:	99                   	cdq    
c0011a7d:	83 c4 0c             	add    esp,0xc
c0011a80:	c3                   	ret    

c0011a81 <SysExit(regs*)>:
c0011a81:	83 ec 18             	sub    esp,0x18
c0011a84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a88:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a8b:	e8 24 27 00 00       	call   c00141b4 <terminateTask(int)>
c0011a90:	83 c8 ff             	or     eax,0xffffffff
c0011a93:	83 c4 1c             	add    esp,0x1c
c0011a96:	89 c2                	mov    edx,eax
c0011a98:	c3                   	ret    

c0011a99 <SysGetCwd(regs*)>:
c0011a99:	83 ec 10             	sub    esp,0x10
c0011a9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011aa0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011aa3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011aa6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aab:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011aae:	e8 dd 8e ff ff       	call   c000a990 <Fs::getcwd(Process*, char*, int)>
c0011ab3:	83 c4 1c             	add    esp,0x1c
c0011ab6:	99                   	cdq    
c0011ab7:	c3                   	ret    

c0011ab8 <SysGetPID(regs*)>:
c0011ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011abd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ac2:	99                   	cdq    
c0011ac3:	c3                   	ret    

c0011ac4 <SysGetRAMData(regs*)>:
c0011ac4:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c0011aca:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c0011ad4:	99                   	cdq    
c0011ad5:	f7 f9                	idiv   ecx
c0011ad7:	c1 e0 18             	shl    eax,0x18
c0011ada:	09 c8                	or     eax,ecx
c0011adc:	99                   	cdq    
c0011add:	c3                   	ret    

c0011ade <SysGetVGAPtr(regs*)>:
c0011ade:	55                   	push   ebp
c0011adf:	57                   	push   edi
c0011ae0:	56                   	push   esi
c0011ae1:	53                   	push   ebx
c0011ae2:	83 ec 18             	sub    esp,0x18
c0011ae5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ae9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011aec:	e8 c3 21 00 00       	call   c0013cb4 <Thr::processFromPID(int)>
c0011af1:	83 c4 10             	add    esp,0x10
c0011af4:	89 c1                	mov    ecx,eax
c0011af6:	b8 01 00 00 00       	mov    eax,0x1
c0011afb:	85 c9                	test   ecx,ecx
c0011afd:	74 57                	je     c0011b56 <SysGetVGAPtr(regs*)+0x78>
c0011aff:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011b05:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011b09:	74 0c                	je     c0011b17 <SysGetVGAPtr(regs*)+0x39>
c0011b0b:	83 ec 0c             	sub    esp,0xc
c0011b0e:	55                   	push   ebp
c0011b0f:	e8 e3 68 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011b14:	83 c4 10             	add    esp,0x10
c0011b17:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011b1a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b1d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011b22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b24:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011b27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b2a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011b30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b33:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011b36:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011b3c:	50                   	push   eax
c0011b3d:	50                   	push   eax
c0011b3e:	68 16 ea 01 c0       	push   0xc001ea16
c0011b43:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b46:	05 a8 0f 00 00       	add    eax,0xfa8
c0011b4b:	50                   	push   eax
c0011b4c:	e8 af ea fe ff       	call   c0000600 <strcpy>
c0011b51:	83 c4 10             	add    esp,0x10
c0011b54:	31 c0                	xor    eax,eax
c0011b56:	83 c4 0c             	add    esp,0xc
c0011b59:	31 d2                	xor    edx,edx
c0011b5b:	5b                   	pop    ebx
c0011b5c:	5e                   	pop    esi
c0011b5d:	5f                   	pop    edi
c0011b5e:	5d                   	pop    ebp
c0011b5f:	c3                   	ret    

c0011b60 <SysLoadDLL(regs*)>:
c0011b60:	56                   	push   esi
c0011b61:	53                   	push   ebx
c0011b62:	31 d2                	xor    edx,edx
c0011b64:	51                   	push   ecx
c0011b65:	b8 01 00 00 00       	mov    eax,0x1
c0011b6a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b6e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011b72:	0f 84 8c 00 00 00    	je     c0011c04 <SysLoadDLL(regs*)+0xa4>
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	68 14 01 00 00       	push   0x114
c0011b80:	e8 34 5c ff ff       	call   c00077b9 <malloc>
c0011b85:	83 c4 0c             	add    esp,0xc
c0011b88:	89 c3                	mov    ebx,eax
c0011b8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b8f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011b92:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b95:	53                   	push   ebx
c0011b96:	e8 f3 8f ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	31 d2                	xor    edx,edx
c0011ba0:	b8 02 00 00 00       	mov    eax,0x2
c0011ba5:	85 db                	test   ebx,ebx
c0011ba7:	74 5b                	je     c0011c04 <SysLoadDLL(regs*)+0xa4>
c0011ba9:	83 ec 0c             	sub    esp,0xc
c0011bac:	53                   	push   ebx
c0011bad:	e8 0a 93 ff ff       	call   c000aebc <File::exists()>
c0011bb2:	83 c4 10             	add    esp,0x10
c0011bb5:	84 c0                	test   al,al
c0011bb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011bb9:	75 11                	jne    c0011bcc <SysLoadDLL(regs*)+0x6c>
c0011bbb:	83 ec 0c             	sub    esp,0xc
c0011bbe:	53                   	push   ebx
c0011bbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	b8 03 00 00 00       	mov    eax,0x3
c0011bca:	eb 36                	jmp    c0011c02 <SysLoadDLL(regs*)+0xa2>
c0011bcc:	83 ec 0c             	sub    esp,0xc
c0011bcf:	53                   	push   ebx
c0011bd0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bd3:	58                   	pop    eax
c0011bd4:	5a                   	pop    edx
c0011bd5:	6a 00                	push   0x0
c0011bd7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011bda:	e8 86 12 00 00       	call   c0012e65 <Thr::loadDLL(char const*, bool)>
c0011bdf:	83 c4 10             	add    esp,0x10
c0011be2:	89 c1                	mov    ecx,eax
c0011be4:	31 d2                	xor    edx,edx
c0011be6:	b8 04 00 00 00       	mov    eax,0x4
c0011beb:	85 c9                	test   ecx,ecx
c0011bed:	74 15                	je     c0011c04 <SysLoadDLL(regs*)+0xa4>
c0011bef:	53                   	push   ebx
c0011bf0:	53                   	push   ebx
c0011bf1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011bf7:	51                   	push   ecx
c0011bf8:	e8 99 14 00 00       	call   c0013096 <Thr::executeDLL(unsigned long, void*)>
c0011bfd:	83 c4 10             	add    esp,0x10
c0011c00:	31 c0                	xor    eax,eax
c0011c02:	31 d2                	xor    edx,edx
c0011c04:	59                   	pop    ecx
c0011c05:	5b                   	pop    ebx
c0011c06:	5e                   	pop    esi
c0011c07:	c3                   	ret    

c0011c08 <SysRead(regs*)>:
c0011c08:	57                   	push   edi
c0011c09:	56                   	push   esi
c0011c0a:	53                   	push   ebx
c0011c0b:	83 ec 10             	sub    esp,0x10
c0011c0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c12:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c15:	83 f8 02             	cmp    eax,0x2
c0011c18:	77 10                	ja     c0011c2a <SysRead(regs*)+0x22>
c0011c1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c22:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011c28:	eb 0e                	jmp    c0011c38 <SysRead(regs*)+0x30>
c0011c2a:	83 ec 0c             	sub    esp,0xc
c0011c2d:	50                   	push   eax
c0011c2e:	e8 fc 74 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011c33:	83 c4 10             	add    esp,0x10
c0011c36:	89 c1                	mov    ecx,eax
c0011c38:	83 c8 ff             	or     eax,0xffffffff
c0011c3b:	85 c9                	test   ecx,ecx
c0011c3d:	89 c2                	mov    edx,eax
c0011c3f:	74 28                	je     c0011c69 <SysRead(regs*)+0x61>
c0011c41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c49:	31 ff                	xor    edi,edi
c0011c4b:	83 ec 0c             	sub    esp,0xc
c0011c4e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011c50:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011c54:	52                   	push   edx
c0011c55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011c58:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011c5b:	57                   	push   edi
c0011c5c:	56                   	push   esi
c0011c5d:	51                   	push   ecx
c0011c5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c65:	83 c4 20             	add    esp,0x20
c0011c68:	99                   	cdq    
c0011c69:	83 c4 10             	add    esp,0x10
c0011c6c:	5b                   	pop    ebx
c0011c6d:	5e                   	pop    esi
c0011c6e:	5f                   	pop    edi
c0011c6f:	c3                   	ret    

c0011c70 <SysRegisterSignal(regs*)>:
c0011c70:	83 ec 18             	sub    esp,0x18
c0011c73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c77:	6a 00                	push   0x0
c0011c79:	6a 00                	push   0x0
c0011c7b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011c7e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c89:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c8f:	e8 bd e9 ff ff       	call   c0010651 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011c94:	83 c4 2c             	add    esp,0x2c
c0011c97:	99                   	cdq    
c0011c98:	c3                   	ret    

c0011c99 <SysSbrk(regs*)>:
c0011c99:	56                   	push   esi
c0011c9a:	53                   	push   ebx
c0011c9b:	83 ec 0c             	sub    esp,0xc
c0011c9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ca2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011ca5:	68 20 ea 01 c0       	push   0xc001ea20
c0011caa:	e8 6a 89 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0011caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cb4:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011cb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cba:	83 c4 10             	add    esp,0x10
c0011cbd:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011cc3:	85 db                	test   ebx,ebx
c0011cc5:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011cc8:	74 02                	je     c0011ccc <SysSbrk(regs*)+0x33>
c0011cca:	79 06                	jns    c0011cd2 <SysSbrk(regs*)+0x39>
c0011ccc:	89 f0                	mov    eax,esi
c0011cce:	31 d2                	xor    edx,edx
c0011cd0:	eb 2a                	jmp    c0011cfc <SysSbrk(regs*)+0x63>
c0011cd2:	83 c8 ff             	or     eax,0xffffffff
c0011cd5:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011cdb:	89 c2                	mov    edx,eax
c0011cdd:	77 1d                	ja     c0011cfc <SysSbrk(regs*)+0x63>
c0011cdf:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011ce5:	50                   	push   eax
c0011ce6:	c1 ea 0c             	shr    edx,0xc
c0011ce9:	68 07 0c 00 00       	push   0xc07
c0011cee:	52                   	push   edx
c0011cef:	51                   	push   ecx
c0011cf0:	e8 07 7d ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0011cf5:	89 f0                	mov    eax,esi
c0011cf7:	31 d2                	xor    edx,edx
c0011cf9:	83 c4 10             	add    esp,0x10
c0011cfc:	59                   	pop    ecx
c0011cfd:	5b                   	pop    ebx
c0011cfe:	5e                   	pop    esi
c0011cff:	c3                   	ret    

c0011d00 <SysSetCwd(regs*)>:
c0011d00:	83 ec 14             	sub    esp,0x14
c0011d03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d07:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011d0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d0f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011d12:	e8 44 92 ff ff       	call   c000af5b <Fs::setcwd(Process*, char*)>
c0011d17:	83 c4 1c             	add    esp,0x1c
c0011d1a:	99                   	cdq    
c0011d1b:	c3                   	ret    

c0011d1c <SysSetTime(regs*)>:
c0011d1c:	55                   	push   ebp
c0011d1d:	31 c9                	xor    ecx,ecx
c0011d1f:	57                   	push   edi
c0011d20:	bd 0c 00 00 00       	mov    ebp,0xc
c0011d25:	56                   	push   esi
c0011d26:	53                   	push   ebx
c0011d27:	31 db                	xor    ebx,ebx
c0011d29:	83 ec 10             	sub    esp,0x10
c0011d2c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011d30:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011d33:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011d36:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011d39:	89 c2                	mov    edx,eax
c0011d3b:	66 81 ef 6c 07       	sub    di,0x76c
c0011d40:	83 e2 1f             	and    edx,0x1f
c0011d43:	c1 e7 10             	shl    edi,0x10
c0011d46:	42                   	inc    edx
c0011d47:	c1 e8 05             	shr    eax,0x5
c0011d4a:	88 d1                	mov    cl,dl
c0011d4c:	31 d2                	xor    edx,edx
c0011d4e:	f7 f5                	div    ebp
c0011d50:	89 dd                	mov    ebp,ebx
c0011d52:	88 d5                	mov    ch,dl
c0011d54:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011d5a:	0f b7 c1             	movzx  eax,cx
c0011d5d:	31 d2                	xor    edx,edx
c0011d5f:	09 f8                	or     eax,edi
c0011d61:	bf 3c 00 00 00       	mov    edi,0x3c
c0011d66:	89 c1                	mov    ecx,eax
c0011d68:	89 f0                	mov    eax,esi
c0011d6a:	f7 f7                	div    edi
c0011d6c:	c1 e2 10             	shl    edx,0x10
c0011d6f:	09 d5                	or     ebp,edx
c0011d71:	31 d2                	xor    edx,edx
c0011d73:	89 eb                	mov    ebx,ebp
c0011d75:	f7 f7                	div    edi
c0011d77:	bf 10 0e 00 00       	mov    edi,0xe10
c0011d7c:	88 d7                	mov    bh,dl
c0011d7e:	89 f0                	mov    eax,esi
c0011d80:	31 d2                	xor    edx,edx
c0011d82:	f7 f7                	div    edi
c0011d84:	bf 18 00 00 00       	mov    edi,0x18
c0011d89:	31 d2                	xor    edx,edx
c0011d8b:	f7 f7                	div    edi
c0011d8d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011d92:	88 d3                	mov    bl,dl
c0011d94:	53                   	push   ebx
c0011d95:	51                   	push   ecx
c0011d96:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011d9c:	e8 cb 99 ff ff       	call   c000b76c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011da1:	83 c4 1c             	add    esp,0x1c
c0011da4:	83 f0 01             	xor    eax,0x1
c0011da7:	5b                   	pop    ebx
c0011da8:	0f b6 c0             	movzx  eax,al
c0011dab:	5e                   	pop    esi
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	5f                   	pop    edi
c0011daf:	5d                   	pop    ebp
c0011db0:	c3                   	ret    

c0011db1 <SysTimezone(regs*)>:
c0011db1:	53                   	push   ebx
c0011db2:	83 ec 08             	sub    esp,0x8
c0011db5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011db9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011dbd:	75 17                	jne    c0011dd6 <SysTimezone(regs*)+0x25>
c0011dbf:	83 ec 0c             	sub    esp,0xc
c0011dc2:	68 2c ea 01 c0       	push   0xc001ea2c
c0011dc7:	e8 4d 88 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0011dcc:	83 c8 ff             	or     eax,0xffffffff
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	89 c2                	mov    edx,eax
c0011dd4:	eb 20                	jmp    c0011df6 <SysTimezone(regs*)+0x45>
c0011dd6:	83 ec 0c             	sub    esp,0xc
c0011dd9:	68 41 ea 01 c0       	push   0xc001ea41
c0011dde:	e8 36 88 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0011de3:	58                   	pop    eax
c0011de4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011de7:	e8 dc 96 ff ff       	call   c000b4c8 <User::loadClockSettings(int)>
c0011dec:	83 c4 10             	add    esp,0x10
c0011def:	b8 01 00 00 00       	mov    eax,0x1
c0011df4:	31 d2                	xor    edx,edx
c0011df6:	83 c4 08             	add    esp,0x8
c0011df9:	5b                   	pop    ebx
c0011dfa:	c3                   	ret    

c0011dfb <SysWrite(regs*)>:
c0011dfb:	57                   	push   edi
c0011dfc:	56                   	push   esi
c0011dfd:	53                   	push   ebx
c0011dfe:	83 ec 10             	sub    esp,0x10
c0011e01:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e05:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e08:	83 f8 02             	cmp    eax,0x2
c0011e0b:	77 10                	ja     c0011e1d <SysWrite(regs*)+0x22>
c0011e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e15:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011e1b:	eb 0e                	jmp    c0011e2b <SysWrite(regs*)+0x30>
c0011e1d:	83 ec 0c             	sub    esp,0xc
c0011e20:	50                   	push   eax
c0011e21:	e8 09 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011e26:	83 c4 10             	add    esp,0x10
c0011e29:	89 c1                	mov    ecx,eax
c0011e2b:	83 c8 ff             	or     eax,0xffffffff
c0011e2e:	85 c9                	test   ecx,ecx
c0011e30:	89 c2                	mov    edx,eax
c0011e32:	74 28                	je     c0011e5c <SysWrite(regs*)+0x61>
c0011e34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e3c:	31 ff                	xor    edi,edi
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011e43:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e47:	52                   	push   edx
c0011e48:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011e4b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011e4e:	57                   	push   edi
c0011e4f:	56                   	push   esi
c0011e50:	51                   	push   ecx
c0011e51:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e58:	83 c4 20             	add    esp,0x20
c0011e5b:	99                   	cdq    
c0011e5c:	83 c4 10             	add    esp,0x10
c0011e5f:	5b                   	pop    ebx
c0011e60:	5e                   	pop    esi
c0011e61:	5f                   	pop    edi
c0011e62:	c3                   	ret    

c0011e63 <SysWsbe(regs*)>:
c0011e63:	57                   	push   edi
c0011e64:	b9 0b 00 00 00       	mov    ecx,0xb
c0011e69:	56                   	push   esi
c0011e6a:	be 80 ea 01 c0       	mov    esi,0xc001ea80
c0011e6f:	53                   	push   ebx
c0011e70:	83 ec 30             	sub    esp,0x30
c0011e73:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011e77:	fc                   	cld    
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011e7d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011e81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e89:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011e8f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e91:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011e94:	57                   	push   edi
c0011e95:	e8 a6 e6 fe ff       	call   c0000540 <strlen>
c0011e9a:	5a                   	pop    edx
c0011e9b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011e9f:	52                   	push   edx
c0011ea0:	31 d2                	xor    edx,edx
c0011ea2:	57                   	push   edi
c0011ea3:	52                   	push   edx
c0011ea4:	50                   	push   eax
c0011ea5:	56                   	push   esi
c0011ea6:	ff d3                	call   ebx
c0011ea8:	83 c4 14             	add    esp,0x14
c0011eab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011eaf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011eb2:	e8 fd 22 00 00       	call   c00141b4 <terminateTask(int)>
c0011eb7:	83 c4 40             	add    esp,0x40
c0011eba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011ebf:	5b                   	pop    ebx
c0011ec0:	31 d2                	xor    edx,edx
c0011ec2:	5e                   	pop    esi
c0011ec3:	5f                   	pop    edi
c0011ec4:	c3                   	ret    

c0011ec5 <SysYield(regs*)>:
c0011ec5:	83 ec 0c             	sub    esp,0xc
c0011ec8:	fa                   	cli    
c0011ec9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011ecf:	e8 bc 19 00 00       	call   c0013890 <schedule()>
c0011ed4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011ed9:	48                   	dec    eax
c0011eda:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011edf:	75 01                	jne    c0011ee2 <SysYield(regs*)+0x1d>
c0011ee1:	fb                   	sti    
c0011ee2:	31 c0                	xor    eax,eax
c0011ee4:	31 d2                	xor    edx,edx
c0011ee6:	83 c4 0c             	add    esp,0xc
c0011ee9:	c3                   	ret    

c0011eea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011eea:	55                   	push   ebp
c0011eeb:	57                   	push   edi
c0011eec:	56                   	push   esi
c0011eed:	53                   	push   ebx
c0011eee:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011ef4:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011efc:	0f 95 c2             	setne  dl
c0011eff:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011f07:	0f 94 c0             	sete   al
c0011f0a:	84 c2                	test   dl,al
c0011f0c:	74 34                	je     c0011f42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011f0e:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011f19:	74 27                	je     c0011f42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011f1b:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011f22:	05 00 10 00 00       	add    eax,0x1000
c0011f27:	89 c1                	mov    ecx,eax
c0011f29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f2e:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011f34:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011f3b:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011f42:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011f49:	83 ec 0c             	sub    esp,0xc
c0011f4c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011f52:	6a 01                	push   0x1
c0011f54:	e8 2c 73 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	89 c3                	mov    ebx,eax
c0011f5e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011f64:	0f 86 25 01 00 00    	jbe    c001208f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011f6a:	c1 ee 0c             	shr    esi,0xc
c0011f6d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f74:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011f78:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f80:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011f87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f8b:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011f92:	29 ef                	sub    edi,ebp
c0011f94:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011f98:	0f 83 f8 00 00 00    	jae    c0012096 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011f9e:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011fa4:	76 05                	jbe    c0011fab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011fa6:	bf 00 10 00 00       	mov    edi,0x1000
c0011fab:	83 ec 0c             	sub    esp,0xc
c0011fae:	31 d2                	xor    edx,edx
c0011fb0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fb7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011fb9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011fbd:	50                   	push   eax
c0011fbe:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011fc2:	56                   	push   esi
c0011fc3:	52                   	push   edx
c0011fc4:	57                   	push   edi
c0011fc5:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011fcc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011fcf:	83 c4 20             	add    esp,0x20
c0011fd2:	85 c0                	test   eax,eax
c0011fd4:	75 06                	jne    c0011fdc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011fd6:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011fda:	74 13                	je     c0011fef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011fdc:	83 ec 0c             	sub    esp,0xc
c0011fdf:	53                   	push   ebx
c0011fe0:	e8 94 75 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fe5:	83 c4 10             	add    esp,0x10
c0011fe8:	31 c0                	xor    eax,eax
c0011fea:	e9 7c 01 00 00       	jmp    c001216b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011fef:	fa                   	cli    
c0011ff0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011ff6:	e8 9a 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011ffb:	6a 07                	push   0x7
c0011ffd:	89 c7                	mov    edi,eax
c0011fff:	53                   	push   ebx
c0012000:	50                   	push   eax
c0012001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012006:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012009:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001200f:	e8 e4 78 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012014:	83 c4 0c             	add    esp,0xc
c0012017:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001201e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012024:	6a 00                	push   0x0
c0012026:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001202b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001202e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012034:	e8 31 77 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c0012039:	58                   	pop    eax
c001203a:	5a                   	pop    edx
c001203b:	68 07 0c 00 00       	push   0xc07
c0012040:	55                   	push   ebp
c0012041:	57                   	push   edi
c0012042:	89 df                	mov    edi,ebx
c0012044:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001204b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012051:	6a 00                	push   0x0
c0012053:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012058:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001205b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012061:	e8 ca 7c ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012066:	b9 00 10 00 00       	mov    ecx,0x1000
c001206b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001206d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012072:	83 c4 20             	add    esp,0x20
c0012075:	48                   	dec    eax
c0012076:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001207b:	85 c0                	test   eax,eax
c001207d:	75 01                	jne    c0012080 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c001207f:	fb                   	sti    
c0012080:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012086:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001208a:	e9 f1 fe ff ff       	jmp    c0011f80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c001208f:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012096:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001209d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00120a3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00120a9:	0f 86 ae 00 00 00    	jbe    c001215d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00120af:	fa                   	cli    
c00120b0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00120b6:	c1 ee 0c             	shr    esi,0xc
c00120b9:	51                   	push   ecx
c00120ba:	31 ff                	xor    edi,edi
c00120bc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00120c3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120c9:	6a 00                	push   0x0
c00120cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120d3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120d9:	e8 8c 76 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00120de:	83 c4 10             	add    esp,0x10
c00120e1:	e8 af 59 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00120e6:	47                   	inc    edi
c00120e7:	6a 07                	push   0x7
c00120e9:	53                   	push   ebx
c00120ea:	50                   	push   eax
c00120eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00120f5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00120f8:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00120fe:	e8 f5 77 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012103:	58                   	pop    eax
c0012104:	5a                   	pop    edx
c0012105:	68 07 0c 00 00       	push   0xc07
c001210a:	55                   	push   ebp
c001210b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012111:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012115:	50                   	push   eax
c0012116:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001211d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012123:	6a 00                	push   0x0
c0012125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001212a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001212d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012133:	e8 f8 7b ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012138:	83 c4 1c             	add    esp,0x1c
c001213b:	68 00 10 00 00       	push   0x1000
c0012140:	6a 00                	push   0x0
c0012142:	53                   	push   ebx
c0012143:	e8 88 e3 fe ff       	call   c00004d0 <memset>
c0012148:	83 c4 10             	add    esp,0x10
c001214b:	39 fe                	cmp    esi,edi
c001214d:	77 92                	ja     c00120e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001214f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012154:	48                   	dec    eax
c0012155:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001215a:	75 01                	jne    c001215d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001215c:	fb                   	sti    
c001215d:	83 ec 0c             	sub    esp,0xc
c0012160:	53                   	push   ebx
c0012161:	e8 13 74 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0012166:	83 c4 10             	add    esp,0x10
c0012169:	b0 01                	mov    al,0x1
c001216b:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012171:	5b                   	pop    ebx
c0012172:	5e                   	pop    esi
c0012173:	5f                   	pop    edi
c0012174:	5d                   	pop    ebp
c0012175:	c3                   	ret    

c0012176 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0012176:	55                   	push   ebp
c0012177:	57                   	push   edi
c0012178:	56                   	push   esi
c0012179:	53                   	push   ebx
c001217a:	83 ec 48             	sub    esp,0x48
c001217d:	68 14 01 00 00       	push   0x114
c0012182:	e8 32 56 ff ff       	call   c00077b9 <malloc>
c0012187:	83 c4 0c             	add    esp,0xc
c001218a:	89 c6                	mov    esi,eax
c001218c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012190:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012194:	50                   	push   eax
c0012195:	e8 f4 89 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c001219a:	58                   	pop    eax
c001219b:	5a                   	pop    edx
c001219c:	6a 01                	push   0x1
c001219e:	56                   	push   esi
c001219f:	e8 aa 8a ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c00121a4:	83 c4 10             	add    esp,0x10
c00121a7:	85 c0                	test   eax,eax
c00121a9:	0f 85 47 01 00 00    	jne    c00122f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121af:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00121b7:	83 ec 0c             	sub    esp,0xc
c00121ba:	6a 34                	push   0x34
c00121bc:	e8 f8 55 ff ff       	call   c00077b9 <malloc>
c00121c1:	89 c3                	mov    ebx,eax
c00121c3:	58                   	pop    eax
c00121c4:	8b 06                	mov    eax,DWORD PTR [esi]
c00121c6:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00121ca:	57                   	push   edi
c00121cb:	53                   	push   ebx
c00121cc:	6a 00                	push   0x0
c00121ce:	6a 34                	push   0x34
c00121d0:	56                   	push   esi
c00121d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121d4:	83 c4 20             	add    esp,0x20
c00121d7:	85 c0                	test   eax,eax
c00121d9:	0f 85 17 01 00 00    	jne    c00122f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121df:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00121e5:	0f 85 0b 01 00 00    	jne    c00122f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121ee:	85 c0                	test   eax,eax
c00121f0:	0f 84 00 01 00 00    	je     c00122f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121f6:	31 d2                	xor    edx,edx
c00121f8:	55                   	push   ebp
c00121f9:	52                   	push   edx
c00121fa:	50                   	push   eax
c00121fb:	56                   	push   esi
c00121fc:	e8 0b 8b ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	85 c0                	test   eax,eax
c0012206:	0f 85 ea 00 00 00    	jne    c00122f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001220c:	83 ec 0c             	sub    esp,0xc
c001220f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012212:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012216:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001221a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001221e:	0f af c2             	imul   eax,edx
c0012221:	50                   	push   eax
c0012222:	e8 92 55 ff ff       	call   c00077b9 <malloc>
c0012227:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012229:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001222d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012230:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012234:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012238:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001223c:	0f af c2             	imul   eax,edx
c001223f:	99                   	cdq    
c0012240:	52                   	push   edx
c0012241:	50                   	push   eax
c0012242:	56                   	push   esi
c0012243:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012246:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012249:	83 c4 20             	add    esp,0x20
c001224c:	85 c0                	test   eax,eax
c001224e:	0f 84 a2 00 00 00    	je     c00122f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012254:	31 d2                	xor    edx,edx
c0012256:	51                   	push   ecx
c0012257:	52                   	push   edx
c0012258:	50                   	push   eax
c0012259:	56                   	push   esi
c001225a:	e8 ad 8a ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c001225f:	83 c4 10             	add    esp,0x10
c0012262:	85 c0                	test   eax,eax
c0012264:	0f 85 8c 00 00 00    	jne    c00122f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001226a:	83 ec 0c             	sub    esp,0xc
c001226d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012271:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012275:	31 ed                	xor    ebp,ebp
c0012277:	0f af c2             	imul   eax,edx
c001227a:	50                   	push   eax
c001227b:	e8 39 55 ff ff       	call   c00077b9 <malloc>
c0012280:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012282:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012286:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001228d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012291:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012295:	0f af c2             	imul   eax,edx
c0012298:	99                   	cdq    
c0012299:	52                   	push   edx
c001229a:	50                   	push   eax
c001229b:	56                   	push   esi
c001229c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001229f:	83 c4 20             	add    esp,0x20
c00122a2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00122aa:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00122ae:	0f 86 80 00 00 00    	jbe    c0012334 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00122b4:	0f b7 fd             	movzx  edi,bp
c00122b7:	c1 e7 05             	shl    edi,0x5
c00122ba:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00122be:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00122c1:	75 6b                	jne    c001232e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00122c3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122ca:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00122cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122d1:	52                   	push   edx
c00122d2:	31 d2                	xor    edx,edx
c00122d4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00122d7:	52                   	push   edx
c00122d8:	50                   	push   eax
c00122d9:	56                   	push   esi
c00122da:	e8 2d 8a ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	85 c0                	test   eax,eax
c00122e4:	74 17                	je     c00122fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	68 ac ea 01 c0       	push   0xc001eaac
c00122ee:	e8 26 83 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00122f3:	83 c4 10             	add    esp,0x10
c00122f6:	31 c0                	xor    eax,eax
c00122f8:	e9 87 00 00 00       	jmp    c0012384 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00122fd:	83 ec 0c             	sub    esp,0xc
c0012300:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012303:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0012306:	50                   	push   eax
c0012307:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001230b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001230f:	56                   	push   esi
c0012310:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012314:	e8 d1 fb ff ff       	call   c0011eea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012319:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001231d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012321:	83 c4 20             	add    esp,0x20
c0012324:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012328:	73 04                	jae    c001232e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001232a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001232e:	45                   	inc    ebp
c001232f:	e9 76 ff ff ff       	jmp    c00122aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012334:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012338:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001233c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012340:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001234f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012354:	05 00 10 00 00       	add    eax,0x1000
c0012359:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001235c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012360:	e8 64 54 ff ff       	call   c00077c9 <free>
c0012365:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012368:	e8 5c 54 ff ff       	call   c00077c9 <free>
c001236d:	58                   	pop    eax
c001236e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012372:	e8 52 54 ff ff       	call   c00077c9 <free>
c0012377:	89 34 24             	mov    DWORD PTR [esp],esi
c001237a:	e8 2d 89 ff ff       	call   c000acac <File::close()>
c001237f:	83 c4 10             	add    esp,0x10
c0012382:	b0 01                	mov    al,0x1
c0012384:	83 c4 3c             	add    esp,0x3c
c0012387:	5b                   	pop    ebx
c0012388:	5e                   	pop    esi
c0012389:	5f                   	pop    edi
c001238a:	5d                   	pop    ebp
c001238b:	c3                   	ret    

c001238c <Thr::runtimeReferenceHelper()>:
c001238c:	83 ec 18             	sub    esp,0x18
c001238f:	68 b4 ea 01 c0       	push   0xc001eab4
c0012394:	e8 80 82 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0012399:	fa                   	cli    
c001239a:	83 c4 10             	add    esp,0x10
c001239d:	eb fe                	jmp    c001239d <Thr::runtimeReferenceHelper()+0x11>

c001239f <Thr::getAddressOfKernelSymbol(char const*)>:
c001239f:	57                   	push   edi
c00123a0:	56                   	push   esi
c00123a1:	53                   	push   ebx
c00123a2:	31 db                	xor    ebx,ebx
c00123a4:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c00123aa:	7e 3c                	jle    c00123e8 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00123ac:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c00123b3:	31 ff                	xor    edi,edi
c00123b5:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c00123bc:	7e 27                	jle    c00123e5 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00123be:	50                   	push   eax
c00123bf:	50                   	push   eax
c00123c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123c4:	8b 06                	mov    eax,DWORD PTR [esi]
c00123c6:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c00123cd:	50                   	push   eax
c00123ce:	e8 0d e3 fe ff       	call   c00006e0 <strcmp>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	85 c0                	test   eax,eax
c00123d8:	75 05                	jne    c00123df <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00123da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00123dd:	eb 0b                	jmp    c00123ea <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00123df:	83 c6 10             	add    esi,0x10
c00123e2:	47                   	inc    edi
c00123e3:	eb d0                	jmp    c00123b5 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00123e5:	43                   	inc    ebx
c00123e6:	eb bc                	jmp    c00123a4 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00123e8:	31 c0                	xor    eax,eax
c00123ea:	5b                   	pop    ebx
c00123eb:	5e                   	pop    esi
c00123ec:	5f                   	pop    edi
c00123ed:	c3                   	ret    

c00123ee <Thr::loadKernelSymbolTable(char const*)>:
c00123ee:	55                   	push   ebp
c00123ef:	57                   	push   edi
c00123f0:	56                   	push   esi
c00123f1:	53                   	push   ebx
c00123f2:	83 ec 68             	sub    esp,0x68
c00123f5:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c00123fb:	68 14 01 00 00       	push   0x114
c0012400:	e8 b4 53 ff ff       	call   c00077b9 <malloc>
c0012405:	83 c4 0c             	add    esp,0xc
c0012408:	89 c3                	mov    ebx,eax
c001240a:	56                   	push   esi
c001240b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001240f:	50                   	push   eax
c0012410:	e8 79 87 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0012415:	5e                   	pop    esi
c0012416:	5f                   	pop    edi
c0012417:	6a 01                	push   0x1
c0012419:	53                   	push   ebx
c001241a:	e8 2f 88 ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c001241f:	83 c4 10             	add    esp,0x10
c0012422:	85 c0                	test   eax,eax
c0012424:	74 0a                	je     c0012430 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012426:	83 ec 0c             	sub    esp,0xc
c0012429:	68 d6 ea 01 c0       	push   0xc001ead6
c001242e:	eb 34                	jmp    c0012464 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012430:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012438:	83 ec 0c             	sub    esp,0xc
c001243b:	6a 34                	push   0x34
c001243d:	e8 77 53 ff ff       	call   c00077b9 <malloc>
c0012442:	59                   	pop    ecx
c0012443:	89 c7                	mov    edi,eax
c0012445:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012449:	8b 03                	mov    eax,DWORD PTR [ebx]
c001244b:	56                   	push   esi
c001244c:	57                   	push   edi
c001244d:	6a 00                	push   0x0
c001244f:	6a 34                	push   0x34
c0012451:	53                   	push   ebx
c0012452:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012455:	83 c4 20             	add    esp,0x20
c0012458:	85 c0                	test   eax,eax
c001245a:	74 17                	je     c0012473 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001245c:	83 ec 0c             	sub    esp,0xc
c001245f:	68 ed ea 01 c0       	push   0xc001eaed
c0012464:	e8 32 de ff ff       	call   c001029b <KePanic(char const*)>
c0012469:	83 c4 10             	add    esp,0x10
c001246c:	31 c0                	xor    eax,eax
c001246e:	e9 31 02 00 00       	jmp    c00126a4 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012473:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012479:	75 e1                	jne    c001245c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001247b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001247e:	85 c0                	test   eax,eax
c0012480:	74 da                	je     c001245c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012482:	52                   	push   edx
c0012483:	31 d2                	xor    edx,edx
c0012485:	52                   	push   edx
c0012486:	50                   	push   eax
c0012487:	53                   	push   ebx
c0012488:	e8 7f 88 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c001248d:	83 c4 10             	add    esp,0x10
c0012490:	85 c0                	test   eax,eax
c0012492:	75 c8                	jne    c001245c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012494:	83 ec 0c             	sub    esp,0xc
c0012497:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001249b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001249f:	31 ed                	xor    ebp,ebp
c00124a1:	0f af c2             	imul   eax,edx
c00124a4:	50                   	push   eax
c00124a5:	e8 0f 53 ff ff       	call   c00077b9 <malloc>
c00124aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00124ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124b0:	89 34 24             	mov    DWORD PTR [esp],esi
c00124b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124b7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00124bb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00124bf:	0f af c2             	imul   eax,edx
c00124c2:	99                   	cdq    
c00124c3:	52                   	push   edx
c00124c4:	50                   	push   eax
c00124c5:	53                   	push   ebx
c00124c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124c9:	83 c4 20             	add    esp,0x20
c00124cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124d4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00124dc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00124e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00124ec:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00124f0:	0f 86 aa 00 00 00    	jbe    c00125a0 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00124f6:	0f b7 f5             	movzx  esi,bp
c00124f9:	6b f6 28             	imul   esi,esi,0x28
c00124fc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012500:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012503:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012507:	50                   	push   eax
c0012508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001250c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012510:	8b 16                	mov    edx,DWORD PTR [esi]
c0012512:	6b c0 28             	imul   eax,eax,0x28
c0012515:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012519:	89 d0                	mov    eax,edx
c001251b:	31 d2                	xor    edx,edx
c001251d:	52                   	push   edx
c001251e:	50                   	push   eax
c001251f:	53                   	push   ebx
c0012520:	e8 e7 87 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0012525:	83 c4 0c             	add    esp,0xc
c0012528:	6a 20                	push   0x20
c001252a:	6a 00                	push   0x0
c001252c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012530:	52                   	push   edx
c0012531:	e8 9a df fe ff       	call   c00004d0 <memset>
c0012536:	58                   	pop    eax
c0012537:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012539:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001253d:	51                   	push   ecx
c001253e:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012542:	52                   	push   edx
c0012543:	6a 00                	push   0x0
c0012545:	6a 1f                	push   0x1f
c0012547:	53                   	push   ebx
c0012548:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001254b:	83 c4 18             	add    esp,0x18
c001254e:	68 04 eb 01 c0       	push   0xc001eb04
c0012553:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012557:	52                   	push   edx
c0012558:	e8 83 e1 fe ff       	call   c00006e0 <strcmp>
c001255d:	83 c4 10             	add    esp,0x10
c0012560:	85 c0                	test   eax,eax
c0012562:	75 0f                	jne    c0012573 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012564:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012567:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001256b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001256f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012573:	50                   	push   eax
c0012574:	50                   	push   eax
c0012575:	68 0c eb 01 c0       	push   0xc001eb0c
c001257a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001257e:	50                   	push   eax
c001257f:	e8 5c e1 fe ff       	call   c00006e0 <strcmp>
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	85 c0                	test   eax,eax
c0012589:	75 0f                	jne    c001259a <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001258b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001258e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012592:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001259a:	45                   	inc    ebp
c001259b:	e9 4c ff ff ff       	jmp    c00124ec <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00125a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00125a5:	75 10                	jne    c00125b7 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00125a7:	83 ec 0c             	sub    esp,0xc
c00125aa:	68 14 eb 01 c0       	push   0xc001eb14
c00125af:	e8 e7 dc ff ff       	call   c001029b <KePanic(char const*)>
c00125b4:	83 c4 10             	add    esp,0x10
c00125b7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00125bc:	75 10                	jne    c00125ce <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00125be:	83 ec 0c             	sub    esp,0xc
c00125c1:	68 14 eb 01 c0       	push   0xc001eb14
c00125c6:	e8 d0 dc ff ff       	call   c001029b <KePanic(char const*)>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	31 d2                	xor    edx,edx
c00125d0:	50                   	push   eax
c00125d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d5:	52                   	push   edx
c00125d6:	50                   	push   eax
c00125d7:	53                   	push   ebx
c00125d8:	e8 2f 87 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c00125dd:	5a                   	pop    edx
c00125de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00125e2:	e8 d2 51 ff ff       	call   c00077b9 <malloc>
c00125e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125ef:	31 c9                	xor    ecx,ecx
c00125f1:	5e                   	pop    esi
c00125f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125f4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00125f8:	55                   	push   ebp
c00125f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125fd:	51                   	push   ecx
c00125fe:	52                   	push   edx
c00125ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012603:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012607:	53                   	push   ebx
c0012608:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001260b:	83 c4 14             	add    esp,0x14
c001260e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012612:	e8 a2 51 ff ff       	call   c00077b9 <malloc>
c0012617:	89 c6                	mov    esi,eax
c0012619:	8b 03                	mov    eax,DWORD PTR [ebx]
c001261b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001261e:	56                   	push   esi
c001261f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012623:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012627:	51                   	push   ecx
c0012628:	52                   	push   edx
c0012629:	53                   	push   ebx
c001262a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001262d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012631:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c0012637:	83 c4 1c             	add    esp,0x1c
c001263a:	c1 e8 04             	shr    eax,0x4
c001263d:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c0012644:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012648:	31 d2                	xor    edx,edx
c001264a:	52                   	push   edx
c001264b:	50                   	push   eax
c001264c:	53                   	push   ebx
c001264d:	e8 ba 86 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0012652:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012654:	31 d2                	xor    edx,edx
c0012656:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012659:	56                   	push   esi
c001265a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001265e:	52                   	push   edx
c001265f:	50                   	push   eax
c0012660:	53                   	push   ebx
c0012661:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012664:	83 c4 14             	add    esp,0x14
c0012667:	53                   	push   ebx
c0012668:	e8 3f 86 ff ff       	call   c000acac <File::close()>
c001266d:	5d                   	pop    ebp
c001266e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012672:	e8 52 51 ff ff       	call   c00077c9 <free>
c0012677:	89 3c 24             	mov    DWORD PTR [esp],edi
c001267a:	e8 4a 51 ff ff       	call   c00077c9 <free>
c001267f:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c0012684:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012688:	8d 50 01             	lea    edx,[eax+0x1]
c001268b:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c0012692:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c0012699:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c001269f:	83 c4 10             	add    esp,0x10
c00126a2:	b0 01                	mov    al,0x1
c00126a4:	83 c4 5c             	add    esp,0x5c
c00126a7:	5b                   	pop    ebx
c00126a8:	5e                   	pop    esi
c00126a9:	5f                   	pop    edi
c00126aa:	5d                   	pop    ebp
c00126ab:	c3                   	ret    

c00126ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00126ac:	55                   	push   ebp
c00126ad:	57                   	push   edi
c00126ae:	56                   	push   esi
c00126af:	53                   	push   ebx
c00126b0:	81 ec 68 03 00 00    	sub    esp,0x368
c00126b6:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00126bd:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c00126c3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00126c7:	68 14 01 00 00       	push   0x114
c00126cc:	e8 e8 50 ff ff       	call   c00077b9 <malloc>
c00126d1:	83 c4 0c             	add    esp,0xc
c00126d4:	89 c5                	mov    ebp,eax
c00126d6:	53                   	push   ebx
c00126d7:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00126de:	50                   	push   eax
c00126df:	e8 aa 84 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c00126e4:	5e                   	pop    esi
c00126e5:	5f                   	pop    edi
c00126e6:	6a 01                	push   0x1
c00126e8:	55                   	push   ebp
c00126e9:	e8 60 85 ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c00126ee:	83 c4 10             	add    esp,0x10
c00126f1:	85 c0                	test   eax,eax
c00126f3:	0f 85 a7 06 00 00    	jne    c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012701:	83 ec 0c             	sub    esp,0xc
c0012704:	6a 34                	push   0x34
c0012706:	e8 ae 50 ff ff       	call   c00077b9 <malloc>
c001270b:	5b                   	pop    ebx
c001270c:	89 c7                	mov    edi,eax
c001270e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012712:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012715:	53                   	push   ebx
c0012716:	57                   	push   edi
c0012717:	6a 00                	push   0x0
c0012719:	6a 34                	push   0x34
c001271b:	55                   	push   ebp
c001271c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001271f:	83 c4 20             	add    esp,0x20
c0012722:	85 c0                	test   eax,eax
c0012724:	0f 85 76 06 00 00    	jne    c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001272a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012730:	0f 85 6a 06 00 00    	jne    c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012736:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012739:	85 c0                	test   eax,eax
c001273b:	0f 84 5f 06 00 00    	je     c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012741:	31 d2                	xor    edx,edx
c0012743:	51                   	push   ecx
c0012744:	52                   	push   edx
c0012745:	50                   	push   eax
c0012746:	55                   	push   ebp
c0012747:	e8 c0 85 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c001274c:	83 c4 10             	add    esp,0x10
c001274f:	85 c0                	test   eax,eax
c0012751:	0f 85 49 06 00 00    	jne    c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001275d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012761:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012765:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012769:	0f af c2             	imul   eax,edx
c001276c:	50                   	push   eax
c001276d:	e8 47 50 ff ff       	call   c00077b9 <malloc>
c0012772:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012775:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012779:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001277c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012780:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012784:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012788:	0f af c2             	imul   eax,edx
c001278b:	99                   	cdq    
c001278c:	52                   	push   edx
c001278d:	50                   	push   eax
c001278e:	55                   	push   ebp
c001278f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012792:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012795:	83 c4 20             	add    esp,0x20
c0012798:	85 c0                	test   eax,eax
c001279a:	0f 84 00 06 00 00    	je     c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127a0:	52                   	push   edx
c00127a1:	31 d2                	xor    edx,edx
c00127a3:	52                   	push   edx
c00127a4:	50                   	push   eax
c00127a5:	55                   	push   ebp
c00127a6:	e8 61 85 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c00127ab:	83 c4 10             	add    esp,0x10
c00127ae:	85 c0                	test   eax,eax
c00127b0:	0f 85 ea 05 00 00    	jne    c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127b6:	83 ec 0c             	sub    esp,0xc
c00127b9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00127bd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00127c1:	31 f6                	xor    esi,esi
c00127c3:	0f af c2             	imul   eax,edx
c00127c6:	50                   	push   eax
c00127c7:	e8 ed 4f ff ff       	call   c00077b9 <malloc>
c00127cc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00127d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127da:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00127de:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00127e2:	0f af c2             	imul   eax,edx
c00127e5:	99                   	cdq    
c00127e6:	52                   	push   edx
c00127e7:	50                   	push   eax
c00127e8:	55                   	push   ebp
c00127e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127ec:	83 c4 20             	add    esp,0x20
c00127ef:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00127f3:	0f 86 8a 00 00 00    	jbe    c0012883 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00127f9:	0f b7 de             	movzx  ebx,si
c00127fc:	c1 e3 05             	shl    ebx,0x5
c00127ff:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012803:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012806:	75 75                	jne    c001287d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012808:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001280b:	31 d2                	xor    edx,edx
c001280d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012811:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012818:	50                   	push   eax
c0012819:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001281c:	52                   	push   edx
c001281d:	50                   	push   eax
c001281e:	55                   	push   ebp
c001281f:	e8 e8 84 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	85 c0                	test   eax,eax
c0012829:	0f 85 71 05 00 00    	jne    c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001282f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012836:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012839:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001283d:	31 d2                	xor    edx,edx
c001283f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012843:	83 ec 0c             	sub    esp,0xc
c0012846:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001284a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012851:	50                   	push   eax
c0012852:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001285a:	52                   	push   edx
c001285b:	50                   	push   eax
c001285c:	55                   	push   ebp
c001285d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012860:	83 c4 1c             	add    esp,0x1c
c0012863:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012866:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012869:	50                   	push   eax
c001286a:	6a 00                	push   0x0
c001286c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012870:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012874:	50                   	push   eax
c0012875:	e8 56 dc fe ff       	call   c00004d0 <memset>
c001287a:	83 c4 10             	add    esp,0x10
c001287d:	46                   	inc    esi
c001287e:	e9 6c ff ff ff       	jmp    c00127ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012883:	53                   	push   ebx
c0012884:	31 db                	xor    ebx,ebx
c0012886:	68 00 01 00 00       	push   0x100
c001288b:	6a 00                	push   0x0
c001288d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012891:	50                   	push   eax
c0012892:	e8 39 dc fe ff       	call   c00004d0 <memset>
c0012897:	83 c4 0c             	add    esp,0xc
c001289a:	68 00 01 00 00       	push   0x100
c001289f:	6a 00                	push   0x0
c00128a1:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00128a8:	50                   	push   eax
c00128a9:	e8 22 dc fe ff       	call   c00004d0 <memset>
c00128ae:	83 c4 10             	add    esp,0x10
c00128b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00128b9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00128c1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00128c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00128d1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128d9:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00128dd:	0f 86 30 01 00 00    	jbe    c0012a13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00128e3:	0f b7 f3             	movzx  esi,bx
c00128e6:	6b f6 28             	imul   esi,esi,0x28
c00128e9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00128ed:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00128f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128f4:	52                   	push   edx
c00128f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00128f9:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00128fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00128ff:	6b d2 28             	imul   edx,edx,0x28
c0012902:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012906:	31 d2                	xor    edx,edx
c0012908:	52                   	push   edx
c0012909:	50                   	push   eax
c001290a:	55                   	push   ebp
c001290b:	e8 fc 83 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0012910:	83 c4 0c             	add    esp,0xc
c0012913:	6a 20                	push   0x20
c0012915:	6a 00                	push   0x0
c0012917:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001291e:	51                   	push   ecx
c001291f:	e8 ac db fe ff       	call   c00004d0 <memset>
c0012924:	59                   	pop    ecx
c0012925:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012928:	8d 54 24 58          	lea    edx,[esp+0x58]
c001292c:	52                   	push   edx
c001292d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012934:	51                   	push   ecx
c0012935:	6a 00                	push   0x0
c0012937:	6a 1f                	push   0x1f
c0012939:	55                   	push   ebp
c001293a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001293d:	83 c4 1c             	add    esp,0x1c
c0012940:	6a 09                	push   0x9
c0012942:	68 2e eb 01 c0       	push   0xc001eb2e
c0012947:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001294e:	51                   	push   ecx
c001294f:	e8 3c da fe ff       	call   c0000390 <memcmp>
c0012954:	83 c4 10             	add    esp,0x10
c0012957:	85 c0                	test   eax,eax
c0012959:	75 21                	jne    c001297c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001295b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001295f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012963:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012967:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001296b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001296e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012975:	89 d0                	mov    eax,edx
c0012977:	40                   	inc    eax
c0012978:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001297c:	50                   	push   eax
c001297d:	6a 09                	push   0x9
c001297f:	68 38 eb 01 c0       	push   0xc001eb38
c0012984:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001298b:	50                   	push   eax
c001298c:	e8 ff d9 fe ff       	call   c0000390 <memcmp>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	85 c0                	test   eax,eax
c0012996:	75 21                	jne    c00129b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001299c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00129a0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00129a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129ab:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00129b2:	89 d0                	mov    eax,edx
c00129b4:	40                   	inc    eax
c00129b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129b9:	50                   	push   eax
c00129ba:	50                   	push   eax
c00129bb:	68 04 eb 01 c0       	push   0xc001eb04
c00129c0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00129c7:	50                   	push   eax
c00129c8:	e8 13 dd fe ff       	call   c00006e0 <strcmp>
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	85 c0                	test   eax,eax
c00129d2:	75 0f                	jne    c00129e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00129d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00129e3:	50                   	push   eax
c00129e4:	50                   	push   eax
c00129e5:	68 0c eb 01 c0       	push   0xc001eb0c
c00129ea:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00129f1:	50                   	push   eax
c00129f2:	e8 e9 dc fe ff       	call   c00006e0 <strcmp>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	85 c0                	test   eax,eax
c00129fc:	75 0f                	jne    c0012a0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00129fe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012a05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a09:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012a0d:	43                   	inc    ebx
c0012a0e:	e9 c6 fe ff ff       	jmp    c00128d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012a13:	31 d2                	xor    edx,edx
c0012a15:	50                   	push   eax
c0012a16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a1a:	52                   	push   edx
c0012a1b:	50                   	push   eax
c0012a1c:	55                   	push   ebp
c0012a1d:	e8 ea 82 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0012a22:	58                   	pop    eax
c0012a23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a27:	e8 8d 4d ff ff       	call   c00077b9 <malloc>
c0012a2c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a2f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a33:	31 d2                	xor    edx,edx
c0012a35:	58                   	pop    eax
c0012a36:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012a3a:	53                   	push   ebx
c0012a3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012a3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a43:	52                   	push   edx
c0012a44:	50                   	push   eax
c0012a45:	55                   	push   ebp
c0012a46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a49:	83 c4 14             	add    esp,0x14
c0012a4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a50:	e8 64 4d ff ff       	call   c00077b9 <malloc>
c0012a55:	31 d2                	xor    edx,edx
c0012a57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a5b:	83 c4 0c             	add    esp,0xc
c0012a5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a62:	52                   	push   edx
c0012a63:	50                   	push   eax
c0012a64:	55                   	push   ebp
c0012a65:	e8 a2 82 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0012a6a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a6d:	31 d2                	xor    edx,edx
c0012a6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a7a:	52                   	push   edx
c0012a7b:	50                   	push   eax
c0012a7c:	55                   	push   ebp
c0012a7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a80:	83 c4 20             	add    esp,0x20
c0012a83:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012a8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a8f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012a93:	0f 84 0b 03 00 00    	je     c0012da4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012a99:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012aa0:	31 d2                	xor    edx,edx
c0012aa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012aa6:	c1 e8 03             	shr    eax,0x3
c0012aa9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012aad:	51                   	push   ecx
c0012aae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ab2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012ab6:	52                   	push   edx
c0012ab7:	50                   	push   eax
c0012ab8:	55                   	push   ebp
c0012ab9:	e8 4e 82 ff ff       	call   c000ad0c <File::seek(unsigned long long)>
c0012abe:	5b                   	pop    ebx
c0012abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ac3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012aca:	e8 ea 4c ff ff       	call   c00077b9 <malloc>
c0012acf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012ad2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ad6:	31 d2                	xor    edx,edx
c0012ad8:	5e                   	pop    esi
c0012ad9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012add:	50                   	push   eax
c0012ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ae6:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012aed:	52                   	push   edx
c0012aee:	50                   	push   eax
c0012aef:	55                   	push   ebp
c0012af0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012af3:	83 c4 20             	add    esp,0x20
c0012af6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012afe:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012b02:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012b06:	0f 8d 7c 02 00 00    	jge    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012b0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b14:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012b19:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012b1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b24:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012b28:	89 d8                	mov    eax,ebx
c0012b2a:	c1 e8 08             	shr    eax,0x8
c0012b2d:	89 c6                	mov    esi,eax
c0012b2f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b33:	c1 e6 04             	shl    esi,0x4
c0012b36:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012b3a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012b3d:	85 d2                	test   edx,edx
c0012b3f:	0f 85 bf 00 00 00    	jne    c0012c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b45:	83 ec 0c             	sub    esp,0xc
c0012b48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b4c:	03 06                	add    eax,DWORD PTR [esi]
c0012b4e:	50                   	push   eax
c0012b4f:	e8 4b f8 ff ff       	call   c001239f <Thr::getAddressOfKernelSymbol(char const*)>
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	89 c2                	mov    edx,eax
c0012b59:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012b5e:	85 c0                	test   eax,eax
c0012b60:	0f 85 9e 00 00 00    	jne    c0012c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b66:	83 ec 0c             	sub    esp,0xc
c0012b69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b6d:	03 06                	add    eax,DWORD PTR [esi]
c0012b6f:	50                   	push   eax
c0012b70:	e8 77 d8 ff ff       	call   c00103ec <KeResolveCompatibilitySymbol(char*)>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	89 c2                	mov    edx,eax
c0012b7a:	85 c0                	test   eax,eax
c0012b7c:	0f 85 82 00 00 00    	jne    c0012c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b82:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012b86:	50                   	push   eax
c0012b87:	50                   	push   eax
c0012b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b8c:	03 06                	add    eax,DWORD PTR [esi]
c0012b8e:	50                   	push   eax
c0012b8f:	68 42 eb 01 c0       	push   0xc001eb42
c0012b94:	e8 80 7a ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0012b99:	58                   	pop    eax
c0012b9a:	5a                   	pop    edx
c0012b9b:	68 5c eb 01 c0       	push   0xc001eb5c
c0012ba0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ba7:	50                   	push   eax
c0012ba8:	e8 53 da fe ff       	call   c0000600 <strcpy>
c0012bad:	59                   	pop    ecx
c0012bae:	58                   	pop    eax
c0012baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bb3:	03 06                	add    eax,DWORD PTR [esi]
c0012bb5:	50                   	push   eax
c0012bb6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bbd:	50                   	push   eax
c0012bbe:	e8 fd db fe ff       	call   c00007c0 <strcat>
c0012bc3:	58                   	pop    eax
c0012bc4:	5a                   	pop    edx
c0012bc5:	68 f2 eb 01 c0       	push   0xc001ebf2
c0012bca:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bd1:	50                   	push   eax
c0012bd2:	e8 e9 db fe ff       	call   c00007c0 <strcat>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bdf:	0f 84 5d 01 00 00    	je     c0012d42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012be5:	83 ec 0c             	sub    esp,0xc
c0012be8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bef:	50                   	push   eax
c0012bf0:	e8 a6 d6 ff ff       	call   c001029b <KePanic(char const*)>
c0012bf5:	83 c4 10             	add    esp,0x10
c0012bf8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012bfc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012c00:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012c04:	80 fb 01             	cmp    bl,0x1
c0012c07:	0f 85 88 00 00 00    	jne    c0012c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012c0d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012c14:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012c18:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012c1c:	01 ce                	add    esi,ecx
c0012c1e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c24:	0f 94 c0             	sete   al
c0012c27:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c2d:	0f 94 c3             	sete   bl
c0012c30:	09 c3                	or     ebx,eax
c0012c32:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c34:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c39:	74 41                	je     c0012c7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012c3b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c3e:	84 db                	test   bl,bl
c0012c40:	75 15                	jne    c0012c57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012c42:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c46:	66 83 f8 0c          	cmp    ax,0xc
c0012c4a:	76 05                	jbe    c0012c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012c4c:	b8 0c 00 00 00       	mov    eax,0xc
c0012c51:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c55:	76 37                	jbe    c0012c8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c57:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012c5b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c60:	0f 84 dc 00 00 00    	je     c0012d42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c66:	83 ec 0c             	sub    esp,0xc
c0012c69:	68 73 eb 01 c0       	push   0xc001eb73
c0012c6e:	e8 28 d6 ff ff       	call   c001029b <KePanic(char const*)>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c7a:	eb 12                	jmp    c0012c8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c7c:	01 c1                	add    ecx,eax
c0012c7e:	84 db                	test   bl,bl
c0012c80:	75 0c                	jne    c0012c8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c82:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c86:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c8a:	77 02                	ja     c0012c8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c8c:	01 d1                	add    ecx,edx
c0012c8e:	89 0e                	mov    DWORD PTR [esi],ecx
c0012c90:	e9 ea 00 00 00       	jmp    c0012d7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c95:	80 fb 02             	cmp    bl,0x2
c0012c98:	75 7c                	jne    c0012d16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012c9a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012ca1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012ca5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012ca9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012caf:	74 20                	je     c0012cd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012cb1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012cb7:	74 18                	je     c0012cd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012cb9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012cbd:	b9 0a 00 00 00       	mov    ecx,0xa
c0012cc2:	66 83 f8 0e          	cmp    ax,0xe
c0012cc6:	77 03                	ja     c0012ccb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012cc8:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012ccb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012ccf:	76 1f                	jbe    c0012cf0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012cd1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012cd5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012cda:	74 66                	je     c0012d42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012cdc:	83 ec 0c             	sub    esp,0xc
c0012cdf:	68 8f eb 01 c0       	push   0xc001eb8f
c0012ce4:	e8 b2 d5 ff ff       	call   c001029b <KePanic(char const*)>
c0012ce9:	83 c4 10             	add    esp,0x10
c0012cec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012cf0:	8b 06                	mov    eax,DWORD PTR [esi]
c0012cf2:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012cf7:	74 13                	je     c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012cf9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012cfd:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012d04:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012d08:	01 c8                	add    eax,ecx
c0012d0a:	eb 04                	jmp    c0012d10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012d0c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012d10:	01 c2                	add    edx,eax
c0012d12:	89 16                	mov    DWORD PTR [esi],edx
c0012d14:	eb 69                	jmp    c0012d7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d16:	0f b6 db             	movzx  ebx,bl
c0012d19:	50                   	push   eax
c0012d1a:	50                   	push   eax
c0012d1b:	53                   	push   ebx
c0012d1c:	68 ab eb 01 c0       	push   0xc001ebab
c0012d21:	e8 f3 78 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0012d26:	83 c4 10             	add    esp,0x10
c0012d29:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d2e:	74 12                	je     c0012d42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012d30:	83 ec 0c             	sub    esp,0xc
c0012d33:	68 b6 eb 01 c0       	push   0xc001ebb6
c0012d38:	e8 5e d5 ff ff       	call   c001029b <KePanic(char const*)>
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	eb 3d                	jmp    c0012d7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d42:	83 ec 0c             	sub    esp,0xc
c0012d45:	55                   	push   ebp
c0012d46:	e8 61 7f ff ff       	call   c000acac <File::close()>
c0012d4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d4e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d54:	59                   	pop    ecx
c0012d55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d59:	e8 6b 4a ff ff       	call   c00077c9 <free>
c0012d5e:	5b                   	pop    ebx
c0012d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d63:	e8 61 4a ff ff       	call   c00077c9 <free>
c0012d68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d6b:	e8 59 4a ff ff       	call   c00077c9 <free>
c0012d70:	5e                   	pop    esi
c0012d71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d75:	e8 4f 4a ff ff       	call   c00077c9 <free>
c0012d7a:	83 c4 10             	add    esp,0x10
c0012d7d:	eb 21                	jmp    c0012da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012d7f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012d83:	e9 76 fd ff ff       	jmp    c0012afe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d8f:	e8 35 4a ff ff       	call   c00077c9 <free>
c0012d94:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012d98:	83 c4 10             	add    esp,0x10
c0012d9b:	e9 eb fc ff ff       	jmp    c0012a8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012da0:	31 c0                	xor    eax,eax
c0012da2:	eb 33                	jmp    c0012dd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	55                   	push   ebp
c0012da8:	e8 ff 7e ff ff       	call   c000acac <File::close()>
c0012dad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012db0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012db3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012db6:	58                   	pop    eax
c0012db7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012dbb:	e8 09 4a ff ff       	call   c00077c9 <free>
c0012dc0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012dc3:	e8 01 4a ff ff       	call   c00077c9 <free>
c0012dc8:	5a                   	pop    edx
c0012dc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dcd:	e8 f7 49 ff ff       	call   c00077c9 <free>
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	b0 01                	mov    al,0x1
c0012dd7:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012ddd:	5b                   	pop    ebx
c0012dde:	5e                   	pop    esi
c0012ddf:	5f                   	pop    edi
c0012de0:	5d                   	pop    ebp
c0012de1:	c3                   	ret    

c0012de2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012de2:	56                   	push   esi
c0012de3:	31 d2                	xor    edx,edx
c0012de5:	53                   	push   ebx
c0012de6:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012dec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012df0:	39 d3                	cmp    ebx,edx
c0012df2:	7e 1b                	jle    c0012e0f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012df4:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012dfb:	39 c8                	cmp    eax,ecx
c0012dfd:	77 0d                	ja     c0012e0c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012dff:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012e06:	01 c6                	add    esi,eax
c0012e08:	39 ce                	cmp    esi,ecx
c0012e0a:	77 05                	ja     c0012e11 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012e0c:	42                   	inc    edx
c0012e0d:	eb e1                	jmp    c0012df0 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012e0f:	31 c0                	xor    eax,eax
c0012e11:	5b                   	pop    ebx
c0012e12:	5e                   	pop    esi
c0012e13:	c3                   	ret    

c0012e14 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012e14:	53                   	push   ebx
c0012e15:	31 c0                	xor    eax,eax
c0012e17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012e1b:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012e21:	39 c3                	cmp    ebx,eax
c0012e23:	7e 22                	jle    c0012e47 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012e25:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012e2c:	39 ca                	cmp    edx,ecx
c0012e2e:	77 14                	ja     c0012e44 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012e30:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012e37:	39 ca                	cmp    edx,ecx
c0012e39:	76 09                	jbe    c0012e44 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012e3b:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012e42:	eb 05                	jmp    c0012e49 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012e44:	40                   	inc    eax
c0012e45:	eb da                	jmp    c0012e21 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012e47:	31 c0                	xor    eax,eax
c0012e49:	5b                   	pop    ebx
c0012e4a:	c3                   	ret    

c0012e4b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012e4b:	53                   	push   ebx
c0012e4c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e50:	53                   	push   ebx
c0012e51:	e8 8c ff ff ff       	call   c0012de2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012e56:	5a                   	pop    edx
c0012e57:	31 d2                	xor    edx,edx
c0012e59:	85 c0                	test   eax,eax
c0012e5b:	74 04                	je     c0012e61 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012e5d:	89 da                	mov    edx,ebx
c0012e5f:	29 c2                	sub    edx,eax
c0012e61:	89 d0                	mov    eax,edx
c0012e63:	5b                   	pop    ebx
c0012e64:	c3                   	ret    

c0012e65 <Thr::loadDLL(char const*, bool)>:
c0012e65:	55                   	push   ebp
c0012e66:	57                   	push   edi
c0012e67:	56                   	push   esi
c0012e68:	53                   	push   ebx
c0012e69:	81 ec 34 01 00 00    	sub    esp,0x134
c0012e6f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012e76:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012e7d:	56                   	push   esi
c0012e7e:	68 ce eb 01 c0       	push   0xc001ebce
c0012e83:	e8 91 77 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0012e88:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012e8f:	e8 25 49 ff ff       	call   c00077b9 <malloc>
c0012e94:	83 c4 0c             	add    esp,0xc
c0012e97:	89 c3                	mov    ebx,eax
c0012e99:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012e9f:	56                   	push   esi
c0012ea0:	50                   	push   eax
c0012ea1:	e8 e8 7c ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0012ea6:	83 c4 10             	add    esp,0x10
c0012ea9:	85 db                	test   ebx,ebx
c0012eab:	75 3c                	jne    c0012ee9 <Thr::loadDLL(char const*, bool)+0x84>
c0012ead:	89 f8                	mov    eax,edi
c0012eaf:	84 c0                	test   al,al
c0012eb1:	0f 84 d2 01 00 00    	je     c0013089 <Thr::loadDLL(char const*, bool)+0x224>
c0012eb7:	55                   	push   ebp
c0012eb8:	55                   	push   ebp
c0012eb9:	68 df eb 01 c0       	push   0xc001ebdf
c0012ebe:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012ec2:	55                   	push   ebp
c0012ec3:	e8 38 d7 fe ff       	call   c0000600 <strcpy>
c0012ec8:	58                   	pop    eax
c0012ec9:	5a                   	pop    edx
c0012eca:	56                   	push   esi
c0012ecb:	55                   	push   ebp
c0012ecc:	e8 ef d8 fe ff       	call   c00007c0 <strcat>
c0012ed1:	59                   	pop    ecx
c0012ed2:	58                   	pop    eax
c0012ed3:	68 f2 eb 01 c0       	push   0xc001ebf2
c0012ed8:	55                   	push   ebp
c0012ed9:	e8 e2 d8 fe ff       	call   c00007c0 <strcat>
c0012ede:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ee1:	e8 b5 d3 ff ff       	call   c001029b <KePanic(char const*)>
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	51                   	push   ecx
c0012eea:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012eee:	50                   	push   eax
c0012eef:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012ef3:	50                   	push   eax
c0012ef4:	53                   	push   ebx
c0012ef5:	e8 00 80 ff ff       	call   c000aefa <File::stat(unsigned long long*, bool*)>
c0012efa:	83 c4 10             	add    esp,0x10
c0012efd:	85 db                	test   ebx,ebx
c0012eff:	74 0c                	je     c0012f0d <Thr::loadDLL(char const*, bool)+0xa8>
c0012f01:	83 ec 0c             	sub    esp,0xc
c0012f04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f06:	53                   	push   ebx
c0012f07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f0a:	83 c4 10             	add    esp,0x10
c0012f0d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012f12:	75 0a                	jne    c0012f1e <Thr::loadDLL(char const*, bool)+0xb9>
c0012f14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f18:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012f1c:	75 3c                	jne    c0012f5a <Thr::loadDLL(char const*, bool)+0xf5>
c0012f1e:	89 f8                	mov    eax,edi
c0012f20:	84 c0                	test   al,al
c0012f22:	0f 84 49 01 00 00    	je     c0013071 <Thr::loadDLL(char const*, bool)+0x20c>
c0012f28:	51                   	push   ecx
c0012f29:	51                   	push   ecx
c0012f2a:	68 df eb 01 c0       	push   0xc001ebdf
c0012f2f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012f33:	53                   	push   ebx
c0012f34:	e8 c7 d6 fe ff       	call   c0000600 <strcpy>
c0012f39:	5d                   	pop    ebp
c0012f3a:	58                   	pop    eax
c0012f3b:	56                   	push   esi
c0012f3c:	53                   	push   ebx
c0012f3d:	e8 7e d8 fe ff       	call   c00007c0 <strcat>
c0012f42:	58                   	pop    eax
c0012f43:	5a                   	pop    edx
c0012f44:	68 f2 eb 01 c0       	push   0xc001ebf2
c0012f49:	53                   	push   ebx
c0012f4a:	e8 71 d8 fe ff       	call   c00007c0 <strcat>
c0012f4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012f52:	e8 44 d3 ff ff       	call   c001029b <KePanic(char const*)>
c0012f57:	83 c4 10             	add    esp,0x10
c0012f5a:	52                   	push   edx
c0012f5b:	6a 03                	push   0x3
c0012f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012f65:	05 ff 0f 00 00       	add    eax,0xfff
c0012f6a:	83 d2 00             	adc    edx,0x0
c0012f6d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f71:	50                   	push   eax
c0012f72:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f78:	e8 7f 6a ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0012f7d:	59                   	pop    ecx
c0012f7e:	89 c3                	mov    ebx,eax
c0012f80:	5d                   	pop    ebp
c0012f81:	50                   	push   eax
c0012f82:	68 16 d8 01 c0       	push   0xc001d816
c0012f87:	e8 8d 76 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0012f8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f8f:	e8 ac d5 fe ff       	call   c0000540 <strlen>
c0012f94:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012f9a:	40                   	inc    eax
c0012f9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f9e:	e8 16 48 ff ff       	call   c00077b9 <malloc>
c0012fa3:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012faa:	58                   	pop    eax
c0012fab:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012fb0:	5a                   	pop    edx
c0012fb1:	56                   	push   esi
c0012fb2:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012fb9:	e8 42 d6 fe ff       	call   c0000600 <strcpy>
c0012fbe:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012fc3:	8d 50 01             	lea    edx,[eax+0x1]
c0012fc6:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012fcd:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012fd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012fd7:	83 c4 0c             	add    esp,0xc
c0012fda:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012fe1:	6a 01                	push   0x1
c0012fe3:	53                   	push   ebx
c0012fe4:	56                   	push   esi
c0012fe5:	e8 c2 f6 ff ff       	call   c00126ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012fea:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012fee:	83 c4 10             	add    esp,0x10
c0012ff1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ff6:	0f 85 89 00 00 00    	jne    c0013085 <Thr::loadDLL(char const*, bool)+0x220>
c0012ffc:	89 f8                	mov    eax,edi
c0012ffe:	84 c0                	test   al,al
c0013000:	74 73                	je     c0013075 <Thr::loadDLL(char const*, bool)+0x210>
c0013002:	83 ec 0c             	sub    esp,0xc
c0013005:	68 f4 eb 01 c0       	push   0xc001ebf4
c001300a:	e8 8c d2 ff ff       	call   c001029b <KePanic(char const*)>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	eb 61                	jmp    c0013075 <Thr::loadDLL(char const*, bool)+0x210>
c0013014:	50                   	push   eax
c0013015:	50                   	push   eax
c0013016:	89 e8                	mov    eax,ebp
c0013018:	c1 e0 0c             	shl    eax,0xc
c001301b:	01 d8                	add    eax,ebx
c001301d:	50                   	push   eax
c001301e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0013024:	e8 31 65 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0013029:	83 c4 10             	add    esp,0x10
c001302c:	8b 00                	mov    eax,DWORD PTR [eax]
c001302e:	a8 60                	test   al,0x60
c0013030:	75 11                	jne    c0013043 <Thr::loadDLL(char const*, bool)+0x1de>
c0013032:	83 ec 0c             	sub    esp,0xc
c0013035:	25 00 f0 ff ff       	and    eax,0xfffff000
c001303a:	50                   	push   eax
c001303b:	e8 f3 49 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	45                   	inc    ebp
c0013044:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013048:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001304c:	05 ff 0f 00 00       	add    eax,0xfff
c0013051:	bf 00 00 00 00       	mov    edi,0x0
c0013056:	83 d2 00             	adc    edx,0x0
c0013059:	0f ac d0 0c          	shrd   eax,edx,0xc
c001305d:	c1 ea 0c             	shr    edx,0xc
c0013060:	39 c5                	cmp    ebp,eax
c0013062:	89 d1                	mov    ecx,edx
c0013064:	89 f8                	mov    eax,edi
c0013066:	19 c8                	sbb    eax,ecx
c0013068:	72 aa                	jb     c0013014 <Thr::loadDLL(char const*, bool)+0x1af>
c001306a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001306f:	75 18                	jne    c0013089 <Thr::loadDLL(char const*, bool)+0x224>
c0013071:	31 db                	xor    ebx,ebx
c0013073:	eb 14                	jmp    c0013089 <Thr::loadDLL(char const*, bool)+0x224>
c0013075:	83 ec 0c             	sub    esp,0xc
c0013078:	68 13 ec 01 c0       	push   0xc001ec13
c001307d:	e8 19 d2 ff ff       	call   c001029b <KePanic(char const*)>
c0013082:	83 c4 10             	add    esp,0x10
c0013085:	31 ed                	xor    ebp,ebp
c0013087:	eb bb                	jmp    c0013044 <Thr::loadDLL(char const*, bool)+0x1df>
c0013089:	81 c4 2c 01 00 00    	add    esp,0x12c
c001308f:	89 d8                	mov    eax,ebx
c0013091:	5b                   	pop    ebx
c0013092:	5e                   	pop    esi
c0013093:	5f                   	pop    edi
c0013094:	5d                   	pop    ebp
c0013095:	c3                   	ret    

c0013096 <Thr::executeDLL(unsigned long, void*)>:
c0013096:	56                   	push   esi
c0013097:	53                   	push   ebx
c0013098:	52                   	push   edx
c0013099:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001309d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00130a1:	85 db                	test   ebx,ebx
c00130a3:	75 10                	jne    c00130b5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00130a5:	83 ec 0c             	sub    esp,0xc
c00130a8:	68 2f ec 01 c0       	push   0xc001ec2f
c00130ad:	e8 e9 d1 ff ff       	call   c001029b <KePanic(char const*)>
c00130b2:	83 c4 10             	add    esp,0x10
c00130b5:	50                   	push   eax
c00130b6:	50                   	push   eax
c00130b7:	53                   	push   ebx
c00130b8:	68 59 ec 01 c0       	push   0xc001ec59
c00130bd:	e8 57 75 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00130c2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00130c6:	89 d8                	mov    eax,ebx
c00130c8:	83 c4 14             	add    esp,0x14
c00130cb:	5b                   	pop    ebx
c00130cc:	5e                   	pop    esi
c00130cd:	ff e0                	jmp    eax
c00130cf:	90                   	nop

c00130d0 <userModeEntryPoint(void*)>:
c00130d0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00130d5:	48                   	dec    eax
c00130d6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00130db:	75 03                	jne    c00130e0 <userModeEntryPoint(void*)+0x10>
c00130dd:	fb                   	sti    
c00130de:	66 90                	xchg   ax,ax
c00130e0:	fb                   	sti    
c00130e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130e9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00130ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00130f3:	e9 47 d1 fe ff       	jmp    c000023f <goToUsermode>

c00130f8 <changeTSS>:
c00130f8:	83 ec 14             	sub    esp,0x14
c00130fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013100:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013103:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013108:	c1 e2 15             	shl    edx,0x15
c001310b:	29 d0                	sub    eax,edx
c001310d:	50                   	push   eax
c001310e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0013113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013119:	05 7c 11 00 00       	add    eax,0x117c
c001311e:	50                   	push   eax
c001311f:	e8 b4 5a ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013124:	83 c4 1c             	add    esp,0x1c
c0013127:	c3                   	ret    

c0013128 <switchToThread(ThreadControlBlock*)>:
c0013128:	57                   	push   edi
c0013129:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001312e:	56                   	push   esi
c001312f:	85 c0                	test   eax,eax
c0013131:	53                   	push   ebx
c0013132:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013136:	0f 85 90 00 00 00    	jne    c00131cc <switchToThread(ThreadControlBlock*)+0xa4>
c001313c:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001313f:	80 fa ff             	cmp    dl,0xff
c0013142:	0f 84 80 00 00 00    	je     c00131c8 <switchToThread(ThreadControlBlock*)+0xa0>
c0013148:	81 e2 ff 00 00 00    	and    edx,0xff
c001314e:	b8 00 04 00 00       	mov    eax,0x400
c0013153:	29 d0                	sub    eax,edx
c0013155:	d1 f8                	sar    eax,1
c0013157:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001315a:	66 90                	xchg   ax,ax
c001315c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001315f:	e8 1d 26 00 00       	call   c0015781 <HalQueryPerformanceCounter()>
c0013164:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0013169:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c001316f:	89 c6                	mov    esi,eax
c0013171:	89 d7                	mov    edi,edx
c0013173:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c0013179:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c001317e:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c0013184:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c001318a:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c0013190:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013196:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c001319c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001319f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00131a2:	01 c6                	add    esi,eax
c00131a4:	11 d7                	adc    edi,edx
c00131a6:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00131a9:	83 ec 0c             	sub    esp,0xc
c00131ac:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00131af:	53                   	push   ebx
c00131b0:	e8 c2 d0 fe ff       	call   c0000277 <switchToThreadASM>
c00131b5:	0f 20 c0             	mov    eax,cr0
c00131b8:	83 c8 08             	or     eax,0x8
c00131bb:	0f 22 c0             	mov    cr0,eax
c00131be:	83 c4 10             	add    esp,0x10
c00131c1:	5b                   	pop    ebx
c00131c2:	5e                   	pop    esi
c00131c3:	5f                   	pop    edi
c00131c4:	c3                   	ret    
c00131c5:	8d 76 00             	lea    esi,[esi+0x0]
c00131c8:	31 c0                	xor    eax,eax
c00131ca:	eb 90                	jmp    c001315c <switchToThread(ThreadControlBlock*)+0x34>
c00131cc:	5b                   	pop    ebx
c00131cd:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00131d7:	5e                   	pop    esi
c00131d8:	5f                   	pop    edi
c00131d9:	c3                   	ret    
c00131da:	66 90                	xchg   ax,ax

c00131dc <Process::addArgs(char**)>:
c00131dc:	57                   	push   edi
c00131dd:	56                   	push   esi
c00131de:	53                   	push   ebx
c00131df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00131e7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00131f1:	85 ff                	test   edi,edi
c00131f3:	74 43                	je     c0013238 <Process::addArgs(char**)+0x5c>
c00131f5:	8b 07                	mov    eax,DWORD PTR [edi]
c00131f7:	85 c0                	test   eax,eax
c00131f9:	74 3d                	je     c0013238 <Process::addArgs(char**)+0x5c>
c00131fb:	31 db                	xor    ebx,ebx
c00131fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013200:	83 ec 0c             	sub    esp,0xc
c0013203:	50                   	push   eax
c0013204:	e8 37 d3 fe ff       	call   c0000540 <strlen>
c0013209:	40                   	inc    eax
c001320a:	89 04 24             	mov    DWORD PTR [esp],eax
c001320d:	e8 a7 45 ff ff       	call   c00077b9 <malloc>
c0013212:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013219:	5a                   	pop    edx
c001321a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001321d:	59                   	pop    ecx
c001321e:	43                   	inc    ebx
c001321f:	52                   	push   edx
c0013220:	50                   	push   eax
c0013221:	e8 da d3 fe ff       	call   c0000600 <strcpy>
c0013226:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001322c:	83 c4 10             	add    esp,0x10
c001322f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013232:	85 c0                	test   eax,eax
c0013234:	75 ca                	jne    c0013200 <Process::addArgs(char**)+0x24>
c0013236:	66 90                	xchg   ax,ax
c0013238:	5b                   	pop    ebx
c0013239:	5e                   	pop    esi
c001323a:	5f                   	pop    edi
c001323b:	c3                   	ret    

c001323c <Process::Process(char const*, Process*, char**)>:
c001323c:	56                   	push   esi
c001323d:	53                   	push   ebx
c001323e:	83 ec 14             	sub    esp,0x14
c0013241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013245:	05 0c 02 00 00       	add    eax,0x20c
c001324a:	bb 07 00 00 00       	mov    ebx,0x7
c001324f:	89 c6                	mov    esi,eax
c0013251:	8d 76 00             	lea    esi,[esi+0x0]
c0013254:	85 db                	test   ebx,ebx
c0013256:	78 14                	js     c001326c <Process::Process(char const*, Process*, char**)+0x30>
c0013258:	83 ec 0c             	sub    esp,0xc
c001325b:	56                   	push   esi
c001325c:	e8 9b 98 00 00       	call   c001cafc <ThreadControlBlock::ThreadControlBlock()>
c0013261:	83 c4 10             	add    esp,0x10
c0013264:	83 c6 5f             	add    esi,0x5f
c0013267:	4b                   	dec    ebx
c0013268:	eb ea                	jmp    c0013254 <Process::Process(char const*, Process*, char**)+0x18>
c001326a:	66 90                	xchg   ax,ax
c001326c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013270:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001327b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013282:	83 ec 0c             	sub    esp,0xc
c0013285:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013289:	e8 02 ce ff ff       	call   c0010090 <Krnl::newProcessEnv(Process*)>
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	89 c2                	mov    edx,eax
c0013293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013297:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001329d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00132aa:	a1 0c fc 01 c0       	mov    eax,ds:0xc001fc0c
c00132af:	8d 50 01             	lea    edx,[eax+0x1]
c00132b2:	89 15 0c fc 01 c0    	mov    DWORD PTR ds:0xc001fc0c,edx
c00132b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132bc:	89 02                	mov    DWORD PTR [edx],eax
c00132be:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00132c6:	83 ec 0c             	sub    esp,0xc
c00132c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132cd:	e8 e7 44 ff ff       	call   c00077b9 <malloc>
c00132d2:	83 c4 10             	add    esp,0x10
c00132d5:	89 c3                	mov    ebx,eax
c00132d7:	83 ec 08             	sub    esp,0x8
c00132da:	6a 00                	push   0x0
c00132dc:	53                   	push   ebx
c00132dd:	e8 3c 6b ff ff       	call   c0009e1e <VAS::VAS(bool)>
c00132e2:	83 c4 10             	add    esp,0x10
c00132e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132e9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00132ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132f3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00132fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013301:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013305:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001330b:	e8 f6 d2 ff ff       	call   c0010606 <KeInitSignals()>
c0013310:	89 c2                	mov    edx,eax
c0013312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013316:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001331c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013320:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013326:	85 c0                	test   eax,eax
c0013328:	74 42                	je     c001336c <Process::Process(char const*, Process*, char**)+0x130>
c001332a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001332e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013334:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001333a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001333e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013344:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013348:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001334e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013358:	05 0c 01 00 00       	add    eax,0x10c
c001335d:	83 ec 08             	sub    esp,0x8
c0013360:	52                   	push   edx
c0013361:	50                   	push   eax
c0013362:	e8 99 d2 fe ff       	call   c0000600 <strcpy>
c0013367:	83 c4 10             	add    esp,0x10
c001336a:	eb 64                	jmp    c00133d0 <Process::Process(char const*, Process*, char**)+0x194>
c001336c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013374:	83 ec 0c             	sub    esp,0xc
c0013377:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001337b:	e8 39 44 ff ff       	call   c00077b9 <malloc>
c0013380:	83 c4 10             	add    esp,0x10
c0013383:	89 c3                	mov    ebx,eax
c0013385:	83 ec 08             	sub    esp,0x8
c0013388:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001338c:	53                   	push   ebx
c001338d:	e8 68 55 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013392:	83 c4 10             	add    esp,0x10
c0013395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013399:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001339f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00133a9:	83 ec 0c             	sub    esp,0xc
c00133ac:	50                   	push   eax
c00133ad:	e8 e8 4d ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00133b2:	83 c4 10             	add    esp,0x10
c00133b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133b9:	05 0c 01 00 00       	add    eax,0x10c
c00133be:	83 ec 08             	sub    esp,0x8
c00133c1:	68 78 ec 01 c0       	push   0xc001ec78
c00133c6:	50                   	push   eax
c00133c7:	e8 34 d2 fe ff       	call   c0000600 <strcpy>
c00133cc:	83 c4 10             	add    esp,0x10
c00133cf:	90                   	nop
c00133d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133d4:	83 c0 0c             	add    eax,0xc
c00133d7:	83 ec 08             	sub    esp,0x8
c00133da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133de:	50                   	push   eax
c00133df:	e8 1c d2 fe ff       	call   c0000600 <strcpy>
c00133e4:	83 c4 10             	add    esp,0x10
c00133e7:	83 ec 08             	sub    esp,0x8
c00133ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133f2:	e8 e5 fd ff ff       	call   c00131dc <Process::addArgs(char**)>
c00133f7:	83 c4 10             	add    esp,0x10
c00133fa:	83 ec 08             	sub    esp,0x8
c00133fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013401:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013405:	e8 6c ed ff ff       	call   c0012176 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001340a:	83 c4 10             	add    esp,0x10
c001340d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013411:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013415:	83 f0 01             	xor    eax,0x1
c0013418:	88 c2                	mov    dl,al
c001341a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001341e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013424:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013428:	25 ff 00 00 00       	and    eax,0xff
c001342d:	83 ec 08             	sub    esp,0x8
c0013430:	50                   	push   eax
c0013431:	68 d0 ec 01 c0       	push   0xc001ecd0
c0013436:	e8 de 71 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	90                   	nop
c001343f:	83 c4 14             	add    esp,0x14
c0013442:	5b                   	pop    ebx
c0013443:	5e                   	pop    esi
c0013444:	c3                   	ret    
c0013445:	90                   	nop
c0013446:	66 90                	xchg   ax,ax

c0013448 <Process::Process(bool, char const*, Process*, char**)>:
c0013448:	56                   	push   esi
c0013449:	53                   	push   ebx
c001344a:	83 ec 24             	sub    esp,0x24
c001344d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013451:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013455:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013459:	05 0c 02 00 00       	add    eax,0x20c
c001345e:	bb 07 00 00 00       	mov    ebx,0x7
c0013463:	89 c6                	mov    esi,eax
c0013465:	8d 76 00             	lea    esi,[esi+0x0]
c0013468:	85 db                	test   ebx,ebx
c001346a:	78 14                	js     c0013480 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001346c:	83 ec 0c             	sub    esp,0xc
c001346f:	56                   	push   esi
c0013470:	e8 87 96 00 00       	call   c001cafc <ThreadControlBlock::ThreadControlBlock()>
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	83 c6 5f             	add    esi,0x5f
c001347b:	4b                   	dec    ebx
c001347c:	eb ea                	jmp    c0013468 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001347e:	66 90                	xchg   ax,ax
c0013480:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013484:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001348b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001348f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013496:	83 ec 0c             	sub    esp,0xc
c0013499:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001349d:	e8 ee cb ff ff       	call   c0010090 <Krnl::newProcessEnv(Process*)>
c00134a2:	83 c4 10             	add    esp,0x10
c00134a5:	89 c2                	mov    edx,eax
c00134a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00134b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134be:	a1 0c fc 01 c0       	mov    eax,ds:0xc001fc0c
c00134c3:	8d 50 01             	lea    edx,[eax+0x1]
c00134c6:	89 15 0c fc 01 c0    	mov    DWORD PTR ds:0xc001fc0c,edx
c00134cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00134d0:	89 02                	mov    DWORD PTR [edx],eax
c00134d2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00134da:	83 ec 0c             	sub    esp,0xc
c00134dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00134e1:	e8 d3 42 ff ff       	call   c00077b9 <malloc>
c00134e6:	83 c4 10             	add    esp,0x10
c00134e9:	89 c3                	mov    ebx,eax
c00134eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00134ef:	25 ff 00 00 00       	and    eax,0xff
c00134f4:	83 ec 08             	sub    esp,0x8
c00134f7:	50                   	push   eax
c00134f8:	53                   	push   ebx
c00134f9:	e8 20 69 ff ff       	call   c0009e1e <VAS::VAS(bool)>
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013505:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001350b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001350f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013519:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001351d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013521:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013527:	e8 da d0 ff ff       	call   c0010606 <KeInitSignals()>
c001352c:	89 c2                	mov    edx,eax
c001352e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013532:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001353c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013542:	85 c0                	test   eax,eax
c0013544:	74 42                	je     c0013588 <Process::Process(bool, char const*, Process*, char**)+0x140>
c0013546:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001354a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013550:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001355a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013560:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013564:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001356a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013574:	05 0c 01 00 00       	add    eax,0x10c
c0013579:	83 ec 08             	sub    esp,0x8
c001357c:	52                   	push   edx
c001357d:	50                   	push   eax
c001357e:	e8 7d d0 fe ff       	call   c0000600 <strcpy>
c0013583:	83 c4 10             	add    esp,0x10
c0013586:	eb 64                	jmp    c00135ec <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c0013588:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013597:	e8 1d 42 ff ff       	call   c00077b9 <malloc>
c001359c:	83 c4 10             	add    esp,0x10
c001359f:	89 c3                	mov    ebx,eax
c00135a1:	83 ec 08             	sub    esp,0x8
c00135a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00135a8:	53                   	push   ebx
c00135a9:	e8 4c 53 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00135ae:	83 c4 10             	add    esp,0x10
c00135b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135b5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00135bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00135c5:	83 ec 0c             	sub    esp,0xc
c00135c8:	50                   	push   eax
c00135c9:	e8 cc 4b ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00135ce:	83 c4 10             	add    esp,0x10
c00135d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d5:	05 0c 01 00 00       	add    eax,0x10c
c00135da:	83 ec 08             	sub    esp,0x8
c00135dd:	68 78 ec 01 c0       	push   0xc001ec78
c00135e2:	50                   	push   eax
c00135e3:	e8 18 d0 fe ff       	call   c0000600 <strcpy>
c00135e8:	83 c4 10             	add    esp,0x10
c00135eb:	90                   	nop
c00135ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135f0:	83 c0 0c             	add    eax,0xc
c00135f3:	83 ec 08             	sub    esp,0x8
c00135f6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00135fa:	50                   	push   eax
c00135fb:	e8 00 d0 fe ff       	call   c0000600 <strcpy>
c0013600:	83 c4 10             	add    esp,0x10
c0013603:	83 ec 08             	sub    esp,0x8
c0013606:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001360a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001360e:	e8 c9 fb ff ff       	call   c00131dc <Process::addArgs(char**)>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	90                   	nop
c0013617:	83 c4 24             	add    esp,0x24
c001361a:	5b                   	pop    ebx
c001361b:	5e                   	pop    esi
c001361c:	c3                   	ret    
c001361d:	8d 76 00             	lea    esi,[esi+0x0]

c0013620 <taskStartupFunction>:
c0013620:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013625:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013628:	c3                   	ret    
c0013629:	90                   	nop
c001362a:	66 90                	xchg   ax,ax

c001362c <Semaphore::Semaphore(int)>:
c001362c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013630:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013634:	89 10                	mov    DWORD PTR [eax],edx
c0013636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001363a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013641:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013645:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001364c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013650:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013657:	90                   	nop
c0013658:	c3                   	ret    
c0013659:	90                   	nop
c001365a:	66 90                	xchg   ax,ax

c001365c <Mutex::Mutex()>:
c001365c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013660:	6a 01                	push   0x1
c0013662:	50                   	push   eax
c0013663:	e8 c4 ff ff ff       	call   c001362c <Semaphore::Semaphore(int)>
c0013668:	83 c4 08             	add    esp,0x8
c001366b:	90                   	nop
c001366c:	c3                   	ret    
c001366d:	90                   	nop
c001366e:	66 90                	xchg   ax,ax

c0013670 <Process::createThread(void (*)(void*), void*, int)>:
c0013670:	57                   	push   edi
c0013671:	31 c9                	xor    ecx,ecx
c0013673:	56                   	push   esi
c0013674:	53                   	push   ebx
c0013675:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013679:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013680:	89 f2                	mov    edx,esi
c0013682:	66 90                	xchg   ax,ax
c0013684:	31 c0                	xor    eax,eax
c0013686:	66 89 d0             	mov    ax,dx
c0013689:	83 e2 01             	and    edx,0x1
c001368c:	74 12                	je     c00136a0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001368e:	d1 f8                	sar    eax,1
c0013690:	41                   	inc    ecx
c0013691:	89 c2                	mov    edx,eax
c0013693:	83 f9 10             	cmp    ecx,0x10
c0013696:	75 ec                	jne    c0013684 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013698:	31 db                	xor    ebx,ebx
c001369a:	89 d8                	mov    eax,ebx
c001369c:	5b                   	pop    ebx
c001369d:	5e                   	pop    esi
c001369e:	5f                   	pop    edi
c001369f:	c3                   	ret    
c00136a0:	b8 01 00 00 00       	mov    eax,0x1
c00136a5:	d3 e0                	shl    eax,cl
c00136a7:	09 c6                	or     esi,eax
c00136a9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00136ac:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00136b3:	01 c0                	add    eax,eax
c00136b5:	01 c8                	add    eax,ecx
c00136b7:	8d 04 80             	lea    eax,[eax+eax*4]
c00136ba:	01 d8                	add    eax,ebx
c00136bc:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00136c3:	75 0b                	jne    c00136d0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00136c5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00136cf:	90                   	nop
c00136d0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00136d6:	83 ec 08             	sub    esp,0x8
c00136d9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00136dc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00136df:	01 c0                	add    eax,eax
c00136e1:	01 c8                	add    eax,ecx
c00136e3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00136e6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00136e9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00136ef:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00136f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00136f9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00136ff:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013705:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001370c:	89 ca                	mov    edx,ecx
c001370e:	f7 da                	neg    edx
c0013710:	c1 e2 15             	shl    edx,0x15
c0013713:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013719:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001371f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013723:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001372d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013733:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013737:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001373d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013747:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013751:	53                   	push   ebx
c0013752:	68 84 51 02 c0       	push   0xc0025184
c0013757:	e8 40 91 00 00       	call   c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001375c:	83 c4 10             	add    esp,0x10
c001375f:	89 d8                	mov    eax,ebx
c0013761:	5b                   	pop    ebx
c0013762:	5e                   	pop    esi
c0013763:	5f                   	pop    edi
c0013764:	c3                   	ret    
c0013765:	90                   	nop
c0013766:	66 90                	xchg   ax,ax

c0013768 <Process::createUserThread()>:
c0013768:	83 ec 0c             	sub    esp,0xc
c001376b:	68 80 00 00 00       	push   0x80
c0013770:	6a 00                	push   0x0
c0013772:	68 d0 30 01 c0       	push   0xc00130d0
c0013777:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001377b:	50                   	push   eax
c001377c:	e8 ef fe ff ff       	call   c0013670 <Process::createThread(void (*)(void*), void*, int)>
c0013781:	83 c4 1c             	add    esp,0x1c
c0013784:	c3                   	ret    
c0013785:	8d 76 00             	lea    esi,[esi+0x0]

c0013788 <setupMultitasking(void (*)())>:
c0013788:	56                   	push   esi
c0013789:	53                   	push   ebx
c001378a:	53                   	push   ebx
c001378b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001378f:	eb 13                	jmp    c00137a4 <setupMultitasking(void (*)())+0x1c>
c0013791:	8d 76 00             	lea    esi,[esi+0x0]
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	68 84 51 02 c0       	push   0xc0025184
c001379c:	e8 43 90 00 00       	call   c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137a1:	83 c4 10             	add    esp,0x10
c00137a4:	83 ec 0c             	sub    esp,0xc
c00137a7:	68 84 51 02 c0       	push   0xc0025184
c00137ac:	e8 0f 90 00 00       	call   c001c7c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137b1:	83 c4 10             	add    esp,0x10
c00137b4:	84 c0                	test   al,al
c00137b6:	74 dc                	je     c0013794 <setupMultitasking(void (*)())+0xc>
c00137b8:	83 ec 0c             	sub    esp,0xc
c00137bb:	68 24 07 00 00       	push   0x724
c00137c0:	e8 f4 3f ff ff       	call   c00077b9 <malloc>
c00137c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00137cc:	89 c3                	mov    ebx,eax
c00137ce:	6a 00                	push   0x0
c00137d0:	68 7c ec 01 c0       	push   0xc001ec7c
c00137d5:	6a 01                	push   0x1
c00137d7:	50                   	push   eax
c00137d8:	e8 6b fc ff ff       	call   c0013448 <Process::Process(bool, char const*, Process*, char**)>
c00137dd:	83 c4 14             	add    esp,0x14
c00137e0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00137e6:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c00137ec:	50                   	push   eax
c00137ed:	e8 05 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00137f2:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00137fa:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013804:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001380a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001380d:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013817:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001381d:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013823:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001382d:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013837:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013841:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013847:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001384d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013857:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001385d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013867:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001386d:	5a                   	pop    edx
c001386e:	59                   	pop    ecx
c001386f:	68 78 ec 01 c0       	push   0xc001ec78
c0013874:	50                   	push   eax
c0013875:	e8 86 cd fe ff       	call   c0000600 <strcpy>
c001387a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013881:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013885:	83 c4 14             	add    esp,0x14
c0013888:	5b                   	pop    ebx
c0013889:	5e                   	pop    esi
c001388a:	e9 da c9 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001388f:	90                   	nop

c0013890 <schedule()>:
c0013890:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013896:	85 d2                	test   edx,edx
c0013898:	74 0e                	je     c00138a8 <schedule()+0x18>
c001389a:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00138a4:	c3                   	ret    
c00138a5:	8d 76 00             	lea    esi,[esi+0x0]
c00138a8:	53                   	push   ebx
c00138a9:	83 ec 14             	sub    esp,0x14
c00138ac:	68 84 51 02 c0       	push   0xc0025184
c00138b1:	e8 0a 8f 00 00       	call   c001c7c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00138b6:	83 c4 10             	add    esp,0x10
c00138b9:	84 c0                	test   al,al
c00138bb:	75 3b                	jne    c00138f8 <schedule()+0x68>
c00138bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00138c5:	4a                   	dec    edx
c00138c6:	74 38                	je     c0013900 <schedule()+0x70>
c00138c8:	83 ec 0c             	sub    esp,0xc
c00138cb:	68 84 51 02 c0       	push   0xc0025184
c00138d0:	e8 07 8f 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00138d5:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00138dc:	89 c3                	mov    ebx,eax
c00138de:	e8 01 8f 00 00       	call   c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00138e3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00138ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138ed:	e8 36 f8 ff ff       	call   c0013128 <switchToThread(ThreadControlBlock*)>
c00138f2:	83 c4 10             	add    esp,0x10
c00138f5:	8d 76 00             	lea    esi,[esi+0x0]
c00138f8:	83 c4 08             	add    esp,0x8
c00138fb:	5b                   	pop    ebx
c00138fc:	c3                   	ret    
c00138fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013900:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013907:	83 ec 08             	sub    esp,0x8
c001390a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001390f:	50                   	push   eax
c0013910:	68 84 51 02 c0       	push   0xc0025184
c0013915:	e8 82 8f 00 00       	call   c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001391a:	83 c4 10             	add    esp,0x10
c001391d:	eb a9                	jmp    c00138c8 <schedule()+0x38>
c001391f:	90                   	nop

c0013920 <Semaphore::tryAcquire()>:
c0013920:	53                   	push   ebx
c0013921:	83 ec 08             	sub    esp,0x8
c0013924:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013928:	fa                   	cli    
c0013929:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001392e:	8d 50 01             	lea    edx,[eax+0x1]
c0013931:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0013937:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c001393d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013940:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c0013946:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013949:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001394b:	7c 33                	jl     c0013980 <Semaphore::tryAcquire()+0x60>
c001394d:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c0013953:	85 d2                	test   edx,edx
c0013955:	75 0d                	jne    c0013964 <Semaphore::tryAcquire()+0x44>
c0013957:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c001395d:	85 d2                	test   edx,edx
c001395f:	75 6b                	jne    c00139cc <Semaphore::tryAcquire()+0xac>
c0013961:	8d 76 00             	lea    esi,[esi+0x0]
c0013964:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013969:	85 c0                	test   eax,eax
c001396b:	74 0b                	je     c0013978 <Semaphore::tryAcquire()+0x58>
c001396d:	8d 76 00             	lea    esi,[esi+0x0]
c0013970:	31 c0                	xor    eax,eax
c0013972:	83 c4 08             	add    esp,0x8
c0013975:	5b                   	pop    ebx
c0013976:	c3                   	ret    
c0013977:	90                   	nop
c0013978:	fb                   	sti    
c0013979:	83 c4 08             	add    esp,0x8
c001397c:	5b                   	pop    ebx
c001397d:	c3                   	ret    
c001397e:	66 90                	xchg   ax,ax
c0013980:	43                   	inc    ebx
c0013981:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c0013987:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001398a:	85 d2                	test   edx,edx
c001398c:	75 22                	jne    c00139b0 <Semaphore::tryAcquire()+0x90>
c001398e:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c0013994:	85 c9                	test   ecx,ecx
c0013996:	74 18                	je     c00139b0 <Semaphore::tryAcquire()+0x90>
c0013998:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00139a2:	e8 e9 fe ff ff       	call   c0013890 <schedule()>
c00139a7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139ac:	48                   	dec    eax
c00139ad:	8d 76 00             	lea    esi,[esi+0x0]
c00139b0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139b5:	85 c0                	test   eax,eax
c00139b7:	75 0b                	jne    c00139c4 <Semaphore::tryAcquire()+0xa4>
c00139b9:	fb                   	sti    
c00139ba:	b0 01                	mov    al,0x1
c00139bc:	83 c4 08             	add    esp,0x8
c00139bf:	5b                   	pop    ebx
c00139c0:	c3                   	ret    
c00139c1:	8d 76 00             	lea    esi,[esi+0x0]
c00139c4:	b0 01                	mov    al,0x1
c00139c6:	83 c4 08             	add    esp,0x8
c00139c9:	5b                   	pop    ebx
c00139ca:	c3                   	ret    
c00139cb:	90                   	nop
c00139cc:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00139d6:	e8 b5 fe ff ff       	call   c0013890 <schedule()>
c00139db:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139e0:	48                   	dec    eax
c00139e1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139e6:	85 c0                	test   eax,eax
c00139e8:	75 86                	jne    c0013970 <Semaphore::tryAcquire()+0x50>
c00139ea:	eb 8c                	jmp    c0013978 <Semaphore::tryAcquire()+0x58>

c00139ec <Semaphore::assertLocked(char const*)>:
c00139ec:	83 ec 0c             	sub    esp,0xc
c00139ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139f3:	fa                   	cli    
c00139f4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00139fa:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00139ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0013a02:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013a08:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013a0a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013a0d:	7c 29                	jl     c0013a38 <Semaphore::assertLocked(char const*)+0x4c>
c0013a0f:	90                   	nop
c0013a10:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013a15:	85 c0                	test   eax,eax
c0013a17:	75 0b                	jne    c0013a24 <Semaphore::assertLocked(char const*)+0x38>
c0013a19:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013a1e:	85 c0                	test   eax,eax
c0013a20:	75 2e                	jne    c0013a50 <Semaphore::assertLocked(char const*)+0x64>
c0013a22:	66 90                	xchg   ax,ax
c0013a24:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a29:	48                   	dec    eax
c0013a2a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a2f:	75 03                	jne    c0013a34 <Semaphore::assertLocked(char const*)+0x48>
c0013a31:	fb                   	sti    
c0013a32:	66 90                	xchg   ax,ax
c0013a34:	83 c4 0c             	add    esp,0xc
c0013a37:	c3                   	ret    
c0013a38:	83 ec 0c             	sub    esp,0xc
c0013a3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a3f:	52                   	push   edx
c0013a40:	e8 56 c8 ff ff       	call   c001029b <KePanic(char const*)>
c0013a45:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a4a:	83 c4 10             	add    esp,0x10
c0013a4d:	48                   	dec    eax
c0013a4e:	eb c0                	jmp    c0013a10 <Semaphore::assertLocked(char const*)+0x24>
c0013a50:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a5a:	e8 31 fe ff ff       	call   c0013890 <schedule()>
c0013a5f:	eb c3                	jmp    c0013a24 <Semaphore::assertLocked(char const*)+0x38>
c0013a61:	8d 76 00             	lea    esi,[esi+0x0]

c0013a64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a70:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a73:	e8 18 fe ff ff       	call   c0013890 <schedule()>
c0013a78:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a7d:	48                   	dec    eax
c0013a7e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a83:	75 03                	jne    c0013a88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013a85:	fb                   	sti    
c0013a86:	66 90                	xchg   ax,ax
c0013a88:	83 c4 0c             	add    esp,0xc
c0013a8b:	c3                   	ret    

c0013a8c <blockTask(TaskState)>:
c0013a8c:	83 ec 0c             	sub    esp,0xc
c0013a8f:	fa                   	cli    
c0013a90:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a9f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013aa2:	e8 e9 fd ff ff       	call   c0013890 <schedule()>
c0013aa7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013aac:	48                   	dec    eax
c0013aad:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013ab2:	75 04                	jne    c0013ab8 <blockTask(TaskState)+0x2c>
c0013ab4:	fb                   	sti    
c0013ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab8:	83 c4 0c             	add    esp,0xc
c0013abb:	c3                   	ret    

c0013abc <waitTask(int, int*, int)>:
c0013abc:	83 ec 18             	sub    esp,0x18
c0013abf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ac8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013acb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013acf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ad4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013ad7:	6a 07                	push   0x7
c0013ad9:	e8 ae ff ff ff       	call   c0013a8c <blockTask(TaskState)>
c0013ade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013ae9:	85 d2                	test   edx,edx
c0013aeb:	74 0b                	je     c0013af8 <waitTask(int, int*, int)+0x3c>
c0013aed:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013af0:	89 02                	mov    DWORD PTR [edx],eax
c0013af2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af7:	90                   	nop
c0013af8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013afb:	83 c4 0c             	add    esp,0xc
c0013afe:	c3                   	ret    
c0013aff:	90                   	nop

c0013b00 <milliTenthSleepUntil(unsigned int)>:
c0013b00:	83 ec 0c             	sub    esp,0xc
c0013b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b07:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013b0d:	76 05                	jbe    c0013b14 <milliTenthSleepUntil(unsigned int)+0x14>
c0013b0f:	90                   	nop
c0013b10:	83 c4 0c             	add    esp,0xc
c0013b13:	c3                   	ret    
c0013b14:	fa                   	cli    
c0013b15:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013b1b:	83 ec 08             	sub    esp,0x8
c0013b1e:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013b24:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b2a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013b2d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b33:	52                   	push   edx
c0013b34:	68 78 51 02 c0       	push   0xc0025178
c0013b39:	e8 5e 8d 00 00       	call   c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b3e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013b45:	e8 42 ff ff ff       	call   c0013a8c <blockTask(TaskState)>
c0013b4a:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	48                   	dec    eax
c0013b53:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013b58:	85 c0                	test   eax,eax
c0013b5a:	75 0c                	jne    c0013b68 <milliTenthSleepUntil(unsigned int)+0x68>
c0013b5c:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b61:	85 c0                	test   eax,eax
c0013b63:	75 17                	jne    c0013b7c <milliTenthSleepUntil(unsigned int)+0x7c>
c0013b65:	8d 76 00             	lea    esi,[esi+0x0]
c0013b68:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b6d:	48                   	dec    eax
c0013b6e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b73:	75 9b                	jne    c0013b10 <milliTenthSleepUntil(unsigned int)+0x10>
c0013b75:	fb                   	sti    
c0013b76:	83 c4 0c             	add    esp,0xc
c0013b79:	c3                   	ret    
c0013b7a:	66 90                	xchg   ax,ax
c0013b7c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013b86:	e8 05 fd ff ff       	call   c0013890 <schedule()>
c0013b8b:	eb db                	jmp    c0013b68 <milliTenthSleepUntil(unsigned int)+0x68>
c0013b8d:	8d 76 00             	lea    esi,[esi+0x0]

c0013b90 <milliTenthSleep(unsigned int)>:
c0013b90:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013b95:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013b99:	e9 62 ff ff ff       	jmp    c0013b00 <milliTenthSleepUntil(unsigned int)>
c0013b9e:	66 90                	xchg   ax,ax

c0013ba0 <sleep(unsigned int)>:
c0013ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ba4:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ba7:	8d 04 80             	lea    eax,[eax+eax*4]
c0013baa:	8d 04 80             	lea    eax,[eax+eax*4]
c0013bad:	8d 04 80             	lea    eax,[eax+eax*4]
c0013bb0:	c1 e0 04             	shl    eax,0x4
c0013bb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bb7:	eb d7                	jmp    c0013b90 <milliTenthSleep(unsigned int)>
c0013bb9:	90                   	nop
c0013bba:	66 90                	xchg   ax,ax

c0013bbc <Semaphore::acquire()>:
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bc3:	fa                   	cli    
c0013bc4:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013bc9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bcf:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bd2:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013bd8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013bdb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013bdd:	7d 2d                	jge    c0013c0c <Semaphore::acquire()+0x50>
c0013bdf:	41                   	inc    ecx
c0013be0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013be3:	90                   	nop
c0013be4:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013be9:	85 c0                	test   eax,eax
c0013beb:	75 0b                	jne    c0013bf8 <Semaphore::acquire()+0x3c>
c0013bed:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013bf2:	85 c0                	test   eax,eax
c0013bf4:	75 62                	jne    c0013c58 <Semaphore::acquire()+0x9c>
c0013bf6:	66 90                	xchg   ax,ax
c0013bf8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013bfd:	48                   	dec    eax
c0013bfe:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c03:	75 03                	jne    c0013c08 <Semaphore::acquire()+0x4c>
c0013c05:	fb                   	sti    
c0013c06:	66 90                	xchg   ax,ax
c0013c08:	83 c4 0c             	add    esp,0xc
c0013c0b:	c3                   	ret    
c0013c0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013c18:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013c1b:	85 c9                	test   ecx,ecx
c0013c1d:	74 4d                	je     c0013c6c <Semaphore::acquire()+0xb0>
c0013c1f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013c22:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013c28:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013c2b:	90                   	nop
c0013c2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c31:	83 ec 0c             	sub    esp,0xc
c0013c34:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013c37:	68 f8 ec 01 c0       	push   0xc001ecf8
c0013c3c:	e8 d8 69 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0013c41:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013c48:	e8 3f fe ff ff       	call   c0013a8c <blockTask(TaskState)>
c0013c4d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013c52:	83 c4 10             	add    esp,0x10
c0013c55:	48                   	dec    eax
c0013c56:	eb 8c                	jmp    c0013be4 <Semaphore::acquire()+0x28>
c0013c58:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013c62:	e8 29 fc ff ff       	call   c0013890 <schedule()>
c0013c67:	eb 8f                	jmp    c0013bf8 <Semaphore::acquire()+0x3c>
c0013c69:	8d 76 00             	lea    esi,[esi+0x0]
c0013c6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013c74:	eb b6                	jmp    c0013c2c <Semaphore::acquire()+0x70>
c0013c76:	66 90                	xchg   ax,ax

c0013c78 <taskReturned>:
c0013c78:	83 ec 18             	sub    esp,0x18
c0013c7b:	68 18 ed 01 c0       	push   0xc001ed18
c0013c80:	e8 16 c6 ff ff       	call   c001029b <KePanic(char const*)>
c0013c85:	83 c4 10             	add    esp,0x10
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	6a 02                	push   0x2
c0013c8d:	e8 fa fd ff ff       	call   c0013a8c <blockTask(TaskState)>
c0013c92:	fa                   	cli    
c0013c93:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c99:	e8 f2 fb ff ff       	call   c0013890 <schedule()>
c0013c9e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	48                   	dec    eax
c0013ca7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013cac:	85 c0                	test   eax,eax
c0013cae:	75 d8                	jne    c0013c88 <taskReturned+0x10>
c0013cb0:	fb                   	sti    
c0013cb1:	eb d5                	jmp    c0013c88 <taskReturned+0x10>
c0013cb3:	90                   	nop

c0013cb4 <Thr::processFromPID(int)>:
c0013cb4:	57                   	push   edi
c0013cb5:	56                   	push   esi
c0013cb6:	53                   	push   ebx
c0013cb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cbb:	fa                   	cli    
c0013cbc:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013cc2:	83 ec 0c             	sub    esp,0xc
c0013cc5:	68 84 51 02 c0       	push   0xc0025184
c0013cca:	e8 0d 8b 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	89 c7                	mov    edi,eax
c0013cd4:	eb 16                	jmp    c0013cec <Thr::processFromPID(int)+0x38>
c0013cd6:	66 90                	xchg   ax,ax
c0013cd8:	83 ec 0c             	sub    esp,0xc
c0013cdb:	68 84 51 02 c0       	push   0xc0025184
c0013ce0:	e8 f7 8a 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	39 f8                	cmp    eax,edi
c0013cea:	74 4c                	je     c0013d38 <Thr::processFromPID(int)+0x84>
c0013cec:	83 ec 0c             	sub    esp,0xc
c0013cef:	68 84 51 02 c0       	push   0xc0025184
c0013cf4:	e8 e3 8a 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cf9:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013d00:	89 c3                	mov    ebx,eax
c0013d02:	e8 dd 8a 00 00       	call   c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013d07:	58                   	pop    eax
c0013d08:	5a                   	pop    edx
c0013d09:	53                   	push   ebx
c0013d0a:	68 84 51 02 c0       	push   0xc0025184
c0013d0f:	e8 88 8b 00 00       	call   c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d17:	83 c4 10             	add    esp,0x10
c0013d1a:	39 30                	cmp    DWORD PTR [eax],esi
c0013d1c:	75 ba                	jne    c0013cd8 <Thr::processFromPID(int)+0x24>
c0013d1e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d23:	48                   	dec    eax
c0013d24:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d29:	74 09                	je     c0013d34 <Thr::processFromPID(int)+0x80>
c0013d2b:	90                   	nop
c0013d2c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d2f:	5b                   	pop    ebx
c0013d30:	5e                   	pop    esi
c0013d31:	5f                   	pop    edi
c0013d32:	c3                   	ret    
c0013d33:	90                   	nop
c0013d34:	fb                   	sti    
c0013d35:	eb f5                	jmp    c0013d2c <Thr::processFromPID(int)+0x78>
c0013d37:	90                   	nop
c0013d38:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d3d:	48                   	dec    eax
c0013d3e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d43:	75 07                	jne    c0013d4c <Thr::processFromPID(int)+0x98>
c0013d45:	fb                   	sti    
c0013d46:	5b                   	pop    ebx
c0013d47:	5e                   	pop    esi
c0013d48:	5f                   	pop    edi
c0013d49:	c3                   	ret    
c0013d4a:	66 90                	xchg   ax,ax
c0013d4c:	5b                   	pop    ebx
c0013d4d:	31 c0                	xor    eax,eax
c0013d4f:	5e                   	pop    esi
c0013d50:	5f                   	pop    edi
c0013d51:	c3                   	ret    
c0013d52:	66 90                	xchg   ax,ax

c0013d54 <unblockTask(ThreadControlBlock*)>:
c0013d54:	53                   	push   ebx
c0013d55:	83 ec 08             	sub    esp,0x8
c0013d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d5c:	fa                   	cli    
c0013d5d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013d63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d66:	85 c0                	test   eax,eax
c0013d68:	74 66                	je     c0013dd0 <unblockTask(ThreadControlBlock*)+0x7c>
c0013d6a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d6d:	48                   	dec    eax
c0013d6e:	74 38                	je     c0013da8 <unblockTask(ThreadControlBlock*)+0x54>
c0013d70:	83 ec 0c             	sub    esp,0xc
c0013d73:	68 84 51 02 c0       	push   0xc0025184
c0013d78:	e8 5f 8a 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	85 c0                	test   eax,eax
c0013d82:	75 1c                	jne    c0013da0 <unblockTask(ThreadControlBlock*)+0x4c>
c0013d84:	eb 5e                	jmp    c0013de4 <unblockTask(ThreadControlBlock*)+0x90>
c0013d86:	66 90                	xchg   ax,ax
c0013d88:	83 ec 08             	sub    esp,0x8
c0013d8b:	50                   	push   eax
c0013d8c:	68 84 51 02 c0       	push   0xc0025184
c0013d91:	e8 f6 8d 00 00       	call   c001cb8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	85 c0                	test   eax,eax
c0013d9b:	74 47                	je     c0013de4 <unblockTask(ThreadControlBlock*)+0x90>
c0013d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013da0:	39 c3                	cmp    ebx,eax
c0013da2:	75 e4                	jne    c0013d88 <unblockTask(ThreadControlBlock*)+0x34>
c0013da4:	eb 12                	jmp    c0013db8 <unblockTask(ThreadControlBlock*)+0x64>
c0013da6:	66 90                	xchg   ax,ax
c0013da8:	83 ec 0c             	sub    esp,0xc
c0013dab:	68 9a ec 01 c0       	push   0xc001ec9a
c0013db0:	e8 64 68 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0013db5:	83 c4 10             	add    esp,0x10
c0013db8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013dbd:	48                   	dec    eax
c0013dbe:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013dc3:	75 03                	jne    c0013dc8 <unblockTask(ThreadControlBlock*)+0x74>
c0013dc5:	fb                   	sti    
c0013dc6:	66 90                	xchg   ax,ax
c0013dc8:	83 c4 08             	add    esp,0x8
c0013dcb:	5b                   	pop    ebx
c0013dcc:	c3                   	ret    
c0013dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0013dd0:	83 ec 0c             	sub    esp,0xc
c0013dd3:	68 83 ec 01 c0       	push   0xc001ec83
c0013dd8:	e8 3c 68 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0013ddd:	83 c4 10             	add    esp,0x10
c0013de0:	eb d6                	jmp    c0013db8 <unblockTask(ThreadControlBlock*)+0x64>
c0013de2:	66 90                	xchg   ax,ax
c0013de4:	83 ec 08             	sub    esp,0x8
c0013de7:	53                   	push   ebx
c0013de8:	68 84 51 02 c0       	push   0xc0025184
c0013ded:	e8 aa 8a 00 00       	call   c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	eb c1                	jmp    c0013db8 <unblockTask(ThreadControlBlock*)+0x64>
c0013df7:	90                   	nop

c0013df8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013df8:	55                   	push   ebp
c0013df9:	57                   	push   edi
c0013dfa:	56                   	push   esi
c0013dfb:	53                   	push   ebx
c0013dfc:	83 ec 1c             	sub    esp,0x1c
c0013dff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013e03:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e06:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013e0c:	85 ed                	test   ebp,ebp
c0013e0e:	7e 24                	jle    c0013e34 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013e10:	31 f6                	xor    esi,esi
c0013e12:	66 90                	xchg   ax,ax
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013e1e:	46                   	inc    esi
c0013e1f:	57                   	push   edi
c0013e20:	e8 a4 39 ff ff       	call   c00077c9 <free>
c0013e25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e28:	83 c4 10             	add    esp,0x10
c0013e2b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013e31:	7f e1                	jg     c0013e14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013e33:	90                   	nop
c0013e34:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013e3e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e43:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013e46:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013e49:	d3 c0                	rol    eax,cl
c0013e4b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013e52:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e55:	89 f7                	mov    edi,esi
c0013e57:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013e5f:	0f 85 77 01 00 00    	jne    c0013fdc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013e65:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013e6b:	85 ed                	test   ebp,ebp
c0013e6d:	74 1d                	je     c0013e8c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013e6f:	83 ec 0c             	sub    esp,0xc
c0013e72:	55                   	push   ebp
c0013e73:	e8 34 c1 ff ff       	call   c000ffac <EnvVarContainer::~EnvVarContainer()>
c0013e78:	59                   	pop    ecx
c0013e79:	5e                   	pop    esi
c0013e7a:	6a 0c                	push   0xc
c0013e7c:	55                   	push   ebp
c0013e7d:	e8 a1 66 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c0013e82:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	89 f7                	mov    edi,esi
c0013e8a:	66 90                	xchg   ax,ax
c0013e8c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e92:	85 c0                	test   eax,eax
c0013e94:	0f 84 b6 00 00 00    	je     c0013f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e9a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ea1:	31 c9                	xor    ecx,ecx
c0013ea3:	eb 17                	jmp    c0013ebc <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ea8:	41                   	inc    ecx
c0013ea9:	83 f9 10             	cmp    ecx,0x10
c0013eac:	0f 84 9e 00 00 00    	je     c0013f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013eb2:	66 90                	xchg   ax,ax
c0013eb4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013eba:	66 90                	xchg   ax,ax
c0013ebc:	31 d2                	xor    edx,edx
c0013ebe:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013ec5:	d3 fa                	sar    edx,cl
c0013ec7:	83 e2 01             	and    edx,0x1
c0013eca:	74 dc                	je     c0013ea8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013ecc:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013ecf:	01 d2                	add    edx,edx
c0013ed1:	01 ca                	add    edx,ecx
c0013ed3:	8d 14 92             	lea    edx,[edx+edx*4]
c0013ed6:	01 d0                	add    eax,edx
c0013ed8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013ede:	83 fd 07             	cmp    ebp,0x7
c0013ee1:	75 c5                	jne    c0013ea8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013ee3:	05 40 02 00 00       	add    eax,0x240
c0013ee8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013eeb:	83 fd ff             	cmp    ebp,0xffffffff
c0013eee:	0f 8c f0 00 00 00    	jl     c0013fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013ef4:	0f 84 ae 01 00 00    	je     c00140a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013efa:	85 ed                	test   ebp,ebp
c0013efc:	0f 84 92 01 00 00    	je     c0014094 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013f02:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013f04:	75 a2                	jne    c0013ea8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f06:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f10:	01 d0                	add    eax,edx
c0013f12:	66 90                	xchg   ax,ax
c0013f14:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013f18:	83 ec 0c             	sub    esp,0xc
c0013f1b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013f21:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013f2a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013f31:	50                   	push   eax
c0013f32:	e8 1d fe ff ff       	call   c0013d54 <unblockTask(ThreadControlBlock*)>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f41:	89 f7                	mov    edi,esi
c0013f43:	41                   	inc    ecx
c0013f44:	83 f9 10             	cmp    ecx,0x10
c0013f47:	0f 85 67 ff ff ff    	jne    c0013eb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f50:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013f56:	85 c0                	test   eax,eax
c0013f58:	74 62                	je     c0013fbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f5a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013f60:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013f66:	74 54                	je     c0013fbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f68:	83 ec 0c             	sub    esp,0xc
c0013f6b:	68 84 51 02 c0       	push   0xc0025184
c0013f70:	e8 67 88 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f75:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f7c:	89 c7                	mov    edi,eax
c0013f7e:	e8 3d 88 00 00       	call   c001c7c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013f83:	83 c4 10             	add    esp,0x10
c0013f86:	84 c0                	test   al,al
c0013f88:	0f 84 ce 00 00 00    	je     c001405c <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013f8e:	66 90                	xchg   ax,ax
c0013f90:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f93:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013f99:	85 d2                	test   edx,edx
c0013f9b:	74 0f                	je     c0013fac <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f9d:	83 ec 0c             	sub    esp,0xc
c0013fa0:	8b 02                	mov    eax,DWORD PTR [edx]
c0013fa2:	52                   	push   edx
c0013fa3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fa6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fa9:	83 c4 10             	add    esp,0x10
c0013fac:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013fb6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fbc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013fc2:	85 db                	test   ebx,ebx
c0013fc4:	74 16                	je     c0013fdc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013fc6:	83 ec 0c             	sub    esp,0xc
c0013fc9:	53                   	push   ebx
c0013fca:	e8 c5 57 ff ff       	call   c0009794 <VAS::~VAS()>
c0013fcf:	58                   	pop    eax
c0013fd0:	5a                   	pop    edx
c0013fd1:	6a 14                	push   0x14
c0013fd3:	53                   	push   ebx
c0013fd4:	e8 4a 65 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c0013fd9:	83 c4 10             	add    esp,0x10
c0013fdc:	83 c4 1c             	add    esp,0x1c
c0013fdf:	5b                   	pop    ebx
c0013fe0:	5e                   	pop    esi
c0013fe1:	5f                   	pop    edi
c0013fe2:	5d                   	pop    ebp
c0013fe3:	c3                   	ret    
c0013fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fe8:	83 ec 0c             	sub    esp,0xc
c0013feb:	68 4c ed 01 c0       	push   0xc001ed4c
c0013ff0:	e8 a6 c2 ff ff       	call   c001029b <KePanic(char const*)>
c0013ff5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ff8:	83 c4 10             	add    esp,0x10
c0013ffb:	89 f7                	mov    edi,esi
c0013ffd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014001:	e9 a2 fe ff ff       	jmp    c0013ea8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014006:	66 90                	xchg   ax,ax
c0014008:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001400e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014014:	75 1e                	jne    c0014034 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	68 b4 ed 01 c0       	push   0xc001edb4
c001401e:	e8 f6 65 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0014023:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001402a:	e8 5d fa ff ff       	call   c0013a8c <blockTask(TaskState)>
c001402f:	83 c4 10             	add    esp,0x10
c0014032:	66 90                	xchg   ax,ax
c0014034:	83 ec 08             	sub    esp,0x8
c0014037:	56                   	push   esi
c0014038:	68 84 51 02 c0       	push   0xc0025184
c001403d:	e8 5a 88 00 00       	call   c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014042:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0014049:	e8 8e 87 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001404e:	83 c4 10             	add    esp,0x10
c0014051:	39 f8                	cmp    eax,edi
c0014053:	0f 84 37 ff ff ff    	je     c0013f90 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014059:	8d 76 00             	lea    esi,[esi+0x0]
c001405c:	83 ec 0c             	sub    esp,0xc
c001405f:	68 84 51 02 c0       	push   0xc0025184
c0014064:	e8 73 87 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014069:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0014070:	89 c6                	mov    esi,eax
c0014072:	e8 6d 87 00 00       	call   c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014077:	83 c4 10             	add    esp,0x10
c001407a:	39 f3                	cmp    ebx,esi
c001407c:	74 b6                	je     c0014034 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001407e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014081:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014084:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001408a:	75 a8                	jne    c0014034 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001408c:	e9 77 ff ff ff       	jmp    c0014008 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014091:	8d 76 00             	lea    esi,[esi+0x0]
c0014094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	68 80 ed 01 c0       	push   0xc001ed80
c00140a0:	e9 4b ff ff ff       	jmp    c0013ff0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00140a5:	8d 76 00             	lea    esi,[esi+0x0]
c00140a8:	8b 36                	mov    esi,DWORD PTR [esi]
c00140aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00140ae:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00140b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00140b4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00140ba:	01 d7                	add    edi,edx
c00140bc:	89 f8                	mov    eax,edi
c00140be:	e9 51 fe ff ff       	jmp    c0013f14 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00140c3:	90                   	nop

c00140c4 <cleanerTaskFunction(void*)>:
c00140c4:	53                   	push   ebx
c00140c5:	83 ec 08             	sub    esp,0x8
c00140c8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140cd:	48                   	dec    eax
c00140ce:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140d3:	75 03                	jne    c00140d8 <cleanerTaskFunction(void*)+0x14>
c00140d5:	fb                   	sti    
c00140d6:	66 90                	xchg   ax,ax
c00140d8:	fa                   	cli    
c00140d9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140de:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c00140e5:	8d 50 01             	lea    edx,[eax+0x1]
c00140e8:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c00140ee:	0f 84 ac 00 00 00    	je     c00141a0 <cleanerTaskFunction(void*)+0xdc>
c00140f4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140f9:	85 c0                	test   eax,eax
c00140fb:	75 03                	jne    c0014100 <cleanerTaskFunction(void*)+0x3c>
c00140fd:	fb                   	sti    
c00140fe:	66 90                	xchg   ax,ax
c0014100:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c0014107:	fa                   	cli    
c0014108:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001410e:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014114:	fa                   	cli    
c0014115:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001411b:	eb 2b                	jmp    c0014148 <cleanerTaskFunction(void*)+0x84>
c001411d:	8d 76 00             	lea    esi,[esi+0x0]
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	68 6c 51 02 c0       	push   0xc002516c
c0014128:	e8 af 86 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001412d:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c0014134:	89 c3                	mov    ebx,eax
c0014136:	e8 a9 86 00 00       	call   c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001413b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001413e:	e8 b5 fc ff ff       	call   c0013df8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0014143:	83 c4 10             	add    esp,0x10
c0014146:	66 90                	xchg   ax,ax
c0014148:	83 ec 0c             	sub    esp,0xc
c001414b:	68 6c 51 02 c0       	push   0xc002516c
c0014150:	e8 6b 86 00 00       	call   c001c7c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014155:	83 c4 10             	add    esp,0x10
c0014158:	84 c0                	test   al,al
c001415a:	74 c4                	je     c0014120 <cleanerTaskFunction(void*)+0x5c>
c001415c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014161:	48                   	dec    eax
c0014162:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014167:	75 03                	jne    c001416c <cleanerTaskFunction(void*)+0xa8>
c0014169:	fb                   	sti    
c001416a:	66 90                	xchg   ax,ax
c001416c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014171:	48                   	dec    eax
c0014172:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014177:	0f 85 4b ff ff ff    	jne    c00140c8 <cleanerTaskFunction(void*)+0x4>
c001417d:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0014182:	85 c0                	test   eax,eax
c0014184:	0f 84 3e ff ff ff    	je     c00140c8 <cleanerTaskFunction(void*)+0x4>
c001418a:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014194:	e8 f7 f6 ff ff       	call   c0013890 <schedule()>
c0014199:	e9 2a ff ff ff       	jmp    c00140c8 <cleanerTaskFunction(void*)+0x4>
c001419e:	66 90                	xchg   ax,ax
c00141a0:	83 ec 0c             	sub    esp,0xc
c00141a3:	6a 02                	push   0x2
c00141a5:	e8 ba f8 ff ff       	call   c0013a64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00141aa:	83 c4 10             	add    esp,0x10
c00141ad:	e9 4e ff ff ff       	jmp    c0014100 <cleanerTaskFunction(void*)+0x3c>
c00141b2:	66 90                	xchg   ax,ax

c00141b4 <terminateTask(int)>:
c00141b4:	83 ec 14             	sub    esp,0x14
c00141b7:	fa                   	cli    
c00141b8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141be:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00141c4:	fa                   	cli    
c00141c5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141d4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00141d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141dc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00141df:	50                   	push   eax
c00141e0:	68 6c 51 02 c0       	push   0xc002516c
c00141e5:	e8 b2 86 00 00       	call   c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00141ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ef:	83 c4 10             	add    esp,0x10
c00141f2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00141f9:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c00141fe:	85 c0                	test   eax,eax
c0014200:	74 5e                	je     c0014260 <terminateTask(int)+0xac>
c0014202:	83 ec 0c             	sub    esp,0xc
c0014205:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c001420c:	50                   	push   eax
c001420d:	e8 42 fb ff ff       	call   c0013d54 <unblockTask(ThreadControlBlock*)>
c0014212:	83 c4 10             	add    esp,0x10
c0014215:	8d 76 00             	lea    esi,[esi+0x0]
c0014218:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001421d:	48                   	dec    eax
c001421e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014223:	75 03                	jne    c0014228 <terminateTask(int)+0x74>
c0014225:	fb                   	sti    
c0014226:	66 90                	xchg   ax,ax
c0014228:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001422d:	48                   	dec    eax
c001422e:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014233:	75 0b                	jne    c0014240 <terminateTask(int)+0x8c>
c0014235:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c001423c:	75 36                	jne    c0014274 <terminateTask(int)+0xc0>
c001423e:	66 90                	xchg   ax,ax
c0014240:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014245:	48                   	dec    eax
c0014246:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001424b:	75 03                	jne    c0014250 <terminateTask(int)+0x9c>
c001424d:	fb                   	sti    
c001424e:	66 90                	xchg   ax,ax
c0014250:	fa                   	cli    
c0014251:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014257:	90                   	nop
c0014258:	e8 33 f6 ff ff       	call   c0013890 <schedule()>
c001425d:	eb e1                	jmp    c0014240 <terminateTask(int)+0x8c>
c001425f:	90                   	nop
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	68 b1 ec 01 c0       	push   0xc001ecb1
c0014268:	e8 ac 63 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	eb a6                	jmp    c0014218 <terminateTask(int)+0x64>
c0014272:	66 90                	xchg   ax,ax
c0014274:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001427e:	eb d8                	jmp    c0014258 <terminateTask(int)+0xa4>

c0014280 <Thr::terminateFromIRQ(int)>:
c0014280:	83 ec 18             	sub    esp,0x18
c0014283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014287:	50                   	push   eax
c0014288:	e8 27 ff ff ff       	call   c00141b4 <terminateTask(int)>
c001428d:	90                   	nop
c001428e:	66 90                	xchg   ax,ax

c0014290 <Semaphore::release()>:
c0014290:	83 ec 0c             	sub    esp,0xc
c0014293:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014297:	fa                   	cli    
c0014298:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001429d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00142a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00142a6:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00142ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00142af:	85 c9                	test   ecx,ecx
c00142b1:	74 41                	je     c00142f4 <Semaphore::release()+0x64>
c00142b3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00142b6:	83 ec 0c             	sub    esp,0xc
c00142b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00142bc:	51                   	push   ecx
c00142bd:	e8 92 fa ff ff       	call   c0013d54 <unblockTask(ThreadControlBlock*)>
c00142c2:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00142c7:	83 c4 10             	add    esp,0x10
c00142ca:	48                   	dec    eax
c00142cb:	90                   	nop
c00142cc:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00142d1:	85 c0                	test   eax,eax
c00142d3:	75 0b                	jne    c00142e0 <Semaphore::release()+0x50>
c00142d5:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00142da:	85 c0                	test   eax,eax
c00142dc:	75 1e                	jne    c00142fc <Semaphore::release()+0x6c>
c00142de:	66 90                	xchg   ax,ax
c00142e0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00142e5:	48                   	dec    eax
c00142e6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00142eb:	75 03                	jne    c00142f0 <Semaphore::release()+0x60>
c00142ed:	fb                   	sti    
c00142ee:	66 90                	xchg   ax,ax
c00142f0:	83 c4 0c             	add    esp,0xc
c00142f3:	c3                   	ret    
c00142f4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00142f7:	eb d3                	jmp    c00142cc <Semaphore::release()+0x3c>
c00142f9:	8d 76 00             	lea    esi,[esi+0x0]
c00142fc:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014306:	e8 85 f5 ff ff       	call   c0013890 <schedule()>
c001430b:	eb d3                	jmp    c00142e0 <Semaphore::release()+0x50>
c001430d:	8d 76 00             	lea    esi,[esi+0x0]

c0014310 <__static_initialization_and_destruction_0(int, int)>:
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014318:	0f 85 8e 00 00 00    	jne    c00143ac <__static_initialization_and_destruction_0(int, int)+0x9c>
c001431e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014326:	0f 85 80 00 00 00    	jne    c00143ac <__static_initialization_and_destruction_0(int, int)+0x9c>
c001432c:	83 ec 0c             	sub    esp,0xc
c001432f:	68 84 51 02 c0       	push   0xc0025184
c0014334:	e8 0f 88 00 00       	call   c001cb48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014339:	83 c4 10             	add    esp,0x10
c001433c:	83 ec 04             	sub    esp,0x4
c001433f:	68 64 f8 01 c0       	push   0xc001f864
c0014344:	68 84 51 02 c0       	push   0xc0025184
c0014349:	68 f8 ca 01 c0       	push   0xc001caf8
c001434e:	e8 80 61 ff ff       	call   c000a4d3 <__cxa_atexit>
c0014353:	83 c4 10             	add    esp,0x10
c0014356:	83 ec 0c             	sub    esp,0xc
c0014359:	68 78 51 02 c0       	push   0xc0025178
c001435e:	e8 e5 87 00 00       	call   c001cb48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014363:	83 c4 10             	add    esp,0x10
c0014366:	83 ec 04             	sub    esp,0x4
c0014369:	68 64 f8 01 c0       	push   0xc001f864
c001436e:	68 78 51 02 c0       	push   0xc0025178
c0014373:	68 f8 ca 01 c0       	push   0xc001caf8
c0014378:	e8 56 61 ff ff       	call   c000a4d3 <__cxa_atexit>
c001437d:	83 c4 10             	add    esp,0x10
c0014380:	83 ec 0c             	sub    esp,0xc
c0014383:	68 6c 51 02 c0       	push   0xc002516c
c0014388:	e8 bb 87 00 00       	call   c001cb48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001438d:	83 c4 10             	add    esp,0x10
c0014390:	83 ec 04             	sub    esp,0x4
c0014393:	68 64 f8 01 c0       	push   0xc001f864
c0014398:	68 6c 51 02 c0       	push   0xc002516c
c001439d:	68 f8 ca 01 c0       	push   0xc001caf8
c00143a2:	e8 2c 61 ff ff       	call   c000a4d3 <__cxa_atexit>
c00143a7:	83 c4 10             	add    esp,0x10
c00143aa:	66 90                	xchg   ax,ax
c00143ac:	90                   	nop
c00143ad:	83 c4 0c             	add    esp,0xc
c00143b0:	c3                   	ret    
c00143b1:	8d 76 00             	lea    esi,[esi+0x0]

c00143b4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00143b4:	83 ec 0c             	sub    esp,0xc
c00143b7:	83 ec 08             	sub    esp,0x8
c00143ba:	68 ff ff 00 00       	push   0xffff
c00143bf:	6a 01                	push   0x1
c00143c1:	e8 4a ff ff ff       	call   c0014310 <__static_initialization_and_destruction_0(int, int)>
c00143c6:	83 c4 10             	add    esp,0x10
c00143c9:	83 c4 0c             	add    esp,0xc
c00143cc:	c3                   	ret    

c00143cd <Vm::inbv(unsigned short)>:
c00143cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00143d1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00143d6:	75 06                	jne    c00143de <Vm::inbv(unsigned short)+0x11>
c00143d8:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c00143dd:	c3                   	ret    
c00143de:	ec                   	in     al,dx
c00143df:	c3                   	ret    

c00143e0 <Vm::outbv(unsigned short, unsigned char)>:
c00143e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00143e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143e8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00143ed:	75 25                	jne    c0014414 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00143ef:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00143f5:	8d 51 01             	lea    edx,[ecx+0x1]
c00143f8:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c00143fe:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c0014404:	83 fa 20             	cmp    edx,0x20
c0014407:	75 0c                	jne    c0014415 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014409:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c0014413:	c3                   	ret    
c0014414:	ee                   	out    dx,al
c0014415:	c3                   	ret    

c0014416 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014416:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001441b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014420:	c1 e0 04             	shl    eax,0x4
c0014423:	01 d0                	add    eax,edx
c0014425:	c3                   	ret    

c0014426 <Vm::getSegment(unsigned int)>:
c0014426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001442a:	c1 e8 10             	shr    eax,0x10
c001442d:	c3                   	ret    

c001442e <Vm::getOffset(unsigned int)>:
c001442e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014432:	c3                   	ret    

c0014433 <Vm::mainloop2()>:
c0014433:	83 ec 18             	sub    esp,0x18
c0014436:	fa                   	cli    
c0014437:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001443d:	6a 02                	push   0x2
c001443f:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c0014446:	e8 19 f6 ff ff       	call   c0013a64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001444b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014450:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014454:	52                   	push   edx
c0014455:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014459:	52                   	push   edx
c001445a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001445e:	52                   	push   edx
c001445f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014463:	50                   	push   eax
c0014464:	e8 a6 bd fe ff       	call   c000020f <goToVM86>
c0014469:	83 c4 2c             	add    esp,0x2c
c001446c:	c3                   	ret    

c001446d <Vm::mainVm8086Loop(void*)>:
c001446d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014472:	48                   	dec    eax
c0014473:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014478:	75 01                	jne    c001447b <Vm::mainVm8086Loop(void*)+0xe>
c001447a:	fb                   	sti    
c001447b:	eb b6                	jmp    c0014433 <Vm::mainloop2()>

c001447d <Vm::mainloop3(unsigned long)>:
c001447d:	83 ec 18             	sub    esp,0x18
c0014480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014484:	fa                   	cli    
c0014485:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001448b:	6a 02                	push   0x2
c001448d:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c0014494:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c0014499:	e8 c6 f5 ff ff       	call   c0013a64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001449e:	83 c4 1c             	add    esp,0x1c
c00144a1:	eb 90                	jmp    c0014433 <Vm::mainloop2()>

c00144a3 <Vm::initialise8086()>:
c00144a3:	83 ec 0c             	sub    esp,0xc
c00144a6:	68 80 00 00 00       	push   0x80
c00144ab:	6a 00                	push   0x0
c00144ad:	68 6d 44 01 c0       	push   0xc001446d
c00144b2:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00144b8:	e8 b3 f1 ff ff       	call   c0013670 <Process::createThread(void (*)(void*), void*, int)>
c00144bd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00144c4:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00144c9:	68 00 01 00 00       	push   0x100
c00144ce:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00144d3:	6a 00                	push   0x0
c00144d5:	6a 00                	push   0x0
c00144d7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144dd:	e8 10 57 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00144e2:	83 c4 2c             	add    esp,0x2c
c00144e5:	c3                   	ret    

c00144e6 <Vm::finish8086()>:
c00144e6:	53                   	push   ebx
c00144e7:	83 ec 08             	sub    esp,0x8
c00144ea:	fa                   	cli    
c00144eb:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00144f1:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c00144f8:	75 15                	jne    c001450f <Vm::finish8086()+0x29>
c00144fa:	e8 91 f3 ff ff       	call   c0013890 <schedule()>
c00144ff:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014504:	48                   	dec    eax
c0014505:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001450a:	75 de                	jne    c00144ea <Vm::finish8086()+0x4>
c001450c:	fb                   	sti    
c001450d:	eb db                	jmp    c00144ea <Vm::finish8086()+0x4>
c001450f:	83 ec 0c             	sub    esp,0xc
c0014512:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c0014518:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001451e:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c0014525:	e8 2a f8 ff ff       	call   c0013d54 <unblockTask(ThreadControlBlock*)>
c001452a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001452f:	83 c4 10             	add    esp,0x10
c0014532:	8d 50 ff             	lea    edx,[eax-0x1]
c0014535:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001453b:	85 d2                	test   edx,edx
c001453d:	75 01                	jne    c0014540 <Vm::finish8086()+0x5a>
c001453f:	fb                   	sti    
c0014540:	89 d8                	mov    eax,ebx
c0014542:	83 c4 08             	add    esp,0x8
c0014545:	5b                   	pop    ebx
c0014546:	c3                   	ret    

c0014547 <Vm::getOutput8086(unsigned char*)>:
c0014547:	57                   	push   edi
c0014548:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c001454e:	56                   	push   esi
c001454f:	be e0 51 02 c0       	mov    esi,0xc00251e0
c0014554:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014558:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001455a:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c001455f:	5e                   	pop    esi
c0014560:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001456a:	5f                   	pop    edi
c001456b:	c3                   	ret    

c001456c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001456c:	55                   	push   ebp
c001456d:	57                   	push   edi
c001456e:	56                   	push   esi
c001456f:	53                   	push   ebx
c0014570:	83 ec 0c             	sub    esp,0xc
c0014573:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014577:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001457b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001457f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014583:	fa                   	cli    
c0014584:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001458a:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c0014591:	75 15                	jne    c00145a8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014593:	e8 f8 f2 ff ff       	call   c0013890 <schedule()>
c0014598:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001459d:	48                   	dec    eax
c001459e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00145a3:	75 de                	jne    c0014583 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145a5:	fb                   	sti    
c00145a6:	eb db                	jmp    c0014583 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145a8:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00145ad:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00145b7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00145bb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00145bf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00145c3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145c7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145cb:	0f b7 ff             	movzx  edi,di
c00145ce:	0f b7 f6             	movzx  esi,si
c00145d1:	50                   	push   eax
c00145d2:	6a 20                	push   0x20
c00145d4:	6a 00                	push   0x0
c00145d6:	68 e0 51 02 c0       	push   0xc00251e0
c00145db:	e8 f0 be fe ff       	call   c00004d0 <memset>
c00145e0:	5a                   	pop    edx
c00145e1:	59                   	pop    ecx
c00145e2:	57                   	push   edi
c00145e3:	56                   	push   esi
c00145e4:	e8 2d fe ff ff       	call   c0014416 <Vm::realToLinear(unsigned short, unsigned short)>
c00145e9:	83 c4 10             	add    esp,0x10
c00145ec:	89 c7                	mov    edi,eax
c00145ee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145f2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00145f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145f8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00145fd:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014604:	48                   	dec    eax
c0014605:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001460a:	75 01                	jne    c001460d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001460c:	fb                   	sti    
c001460d:	83 ec 0c             	sub    esp,0xc
c0014610:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014616:	e8 39 f7 ff ff       	call   c0013d54 <unblockTask(ThreadControlBlock*)>
c001461b:	83 c4 1c             	add    esp,0x1c
c001461e:	b0 01                	mov    al,0x1
c0014620:	5b                   	pop    ebx
c0014621:	5e                   	pop    esi
c0014622:	5f                   	pop    edi
c0014623:	5d                   	pop    ebp
c0014624:	c3                   	ret    

c0014625 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014625:	55                   	push   ebp
c0014626:	57                   	push   edi
c0014627:	56                   	push   esi
c0014628:	53                   	push   ebx
c0014629:	83 ec 2c             	sub    esp,0x2c
c001462c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014630:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014634:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014638:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001463c:	fa                   	cli    
c001463d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014643:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c001464a:	89 f0                	mov    eax,esi
c001464c:	84 c0                	test   al,al
c001464e:	75 1d                	jne    c001466d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014650:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014654:	e8 37 f2 ff ff       	call   c0013890 <schedule()>
c0014659:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001465e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014662:	48                   	dec    eax
c0014663:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014668:	75 d2                	jne    c001463c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001466a:	fb                   	sti    
c001466b:	eb cf                	jmp    c001463c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001466d:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014672:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001467c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014680:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014684:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014688:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001468c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014690:	50                   	push   eax
c0014691:	6a 20                	push   0x20
c0014693:	6a 00                	push   0x0
c0014695:	68 e0 51 02 c0       	push   0xc00251e0
c001469a:	e8 31 be fe ff       	call   c00004d0 <memset>
c001469f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00146a6:	e8 0e 31 ff ff       	call   c00077b9 <malloc>
c00146ab:	83 c4 0c             	add    esp,0xc
c00146ae:	89 c3                	mov    ebx,eax
c00146b0:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00146b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00146ba:	50                   	push   eax
c00146bb:	e8 ce 64 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c00146c0:	83 c4 10             	add    esp,0x10
c00146c3:	85 db                	test   ebx,ebx
c00146c5:	75 0a                	jne    c00146d1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	68 dc ed 01 c0       	push   0xc001eddc
c00146cf:	eb 3e                	jmp    c001470f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00146d1:	50                   	push   eax
c00146d2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00146d6:	50                   	push   eax
c00146d7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00146db:	50                   	push   eax
c00146dc:	53                   	push   ebx
c00146dd:	e8 18 68 ff ff       	call   c000aefa <File::stat(unsigned long long*, bool*)>
c00146e2:	83 c4 10             	add    esp,0x10
c00146e5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00146ea:	74 0a                	je     c00146f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00146ec:	83 ec 0c             	sub    esp,0xc
c00146ef:	68 f0 ed 01 c0       	push   0xc001edf0
c00146f4:	eb 19                	jmp    c001470f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00146f6:	51                   	push   ecx
c00146f7:	51                   	push   ecx
c00146f8:	6a 01                	push   0x1
c00146fa:	53                   	push   ebx
c00146fb:	e8 4e 65 ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c0014700:	83 c4 10             	add    esp,0x10
c0014703:	85 c0                	test   eax,eax
c0014705:	74 24                	je     c001472b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014707:	83 ec 0c             	sub    esp,0xc
c001470a:	68 09 ee 01 c0       	push   0xc001ee09
c001470f:	e8 87 bb ff ff       	call   c001029b <KePanic(char const*)>
c0014714:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	48                   	dec    eax
c001471d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014722:	85 c0                	test   eax,eax
c0014724:	75 01                	jne    c0014727 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014726:	fb                   	sti    
c0014727:	31 f6                	xor    esi,esi
c0014729:	eb 58                	jmp    c0014783 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001472b:	0f b7 ed             	movzx  ebp,bp
c001472e:	50                   	push   eax
c001472f:	0f b7 ff             	movzx  edi,di
c0014732:	50                   	push   eax
c0014733:	55                   	push   ebp
c0014734:	57                   	push   edi
c0014735:	e8 dc fc ff ff       	call   c0014416 <Vm::realToLinear(unsigned short, unsigned short)>
c001473a:	5a                   	pop    edx
c001473b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001473d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014741:	51                   	push   ecx
c0014742:	50                   	push   eax
c0014743:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014747:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001474b:	53                   	push   ebx
c001474c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001474f:	83 c4 14             	add    esp,0x14
c0014752:	53                   	push   ebx
c0014753:	e8 54 65 ff ff       	call   c000acac <File::close()>
c0014758:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001475d:	83 c4 10             	add    esp,0x10
c0014760:	48                   	dec    eax
c0014761:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014768:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001476d:	85 c0                	test   eax,eax
c001476f:	75 01                	jne    c0014772 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014771:	fb                   	sti    
c0014772:	83 ec 0c             	sub    esp,0xc
c0014775:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001477b:	e8 d4 f5 ff ff       	call   c0013d54 <unblockTask(ThreadControlBlock*)>
c0014780:	83 c4 10             	add    esp,0x10
c0014783:	83 c4 2c             	add    esp,0x2c
c0014786:	89 f0                	mov    eax,esi
c0014788:	5b                   	pop    ebx
c0014789:	5e                   	pop    esi
c001478a:	5f                   	pop    edi
c001478b:	5d                   	pop    ebp
c001478c:	c3                   	ret    

c001478d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001478d:	57                   	push   edi
c001478e:	56                   	push   esi
c001478f:	53                   	push   ebx
c0014790:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014798:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001479c:	83 e8 06             	sub    eax,0x6
c001479f:	0f b7 c0             	movzx  eax,ax
c00147a2:	50                   	push   eax
c00147a3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00147a8:	50                   	push   eax
c00147a9:	e8 68 fc ff ff       	call   c0014416 <Vm::realToLinear(unsigned short, unsigned short)>
c00147ae:	5a                   	pop    edx
c00147af:	5e                   	pop    esi
c00147b0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00147b3:	8d 56 fa             	lea    edx,[esi-0x6]
c00147b6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00147bc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00147bf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00147c2:	83 c2 02             	add    edx,0x2
c00147c5:	66 89 10             	mov    WORD PTR [eax],dx
c00147c8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00147cb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00147cf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00147d2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00147d6:	89 d6                	mov    esi,edx
c00147d8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00147de:	66 81 e6 ff fd       	and    si,0xfdff
c00147e3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00147e7:	74 07                	je     c00147f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00147e9:	89 d6                	mov    esi,edx
c00147eb:	66 81 ce 00 02       	or     si,0x200
c00147f0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00147f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00147fd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014805:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014808:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014810:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014813:	5b                   	pop    ebx
c0014814:	5e                   	pop    esi
c0014815:	5f                   	pop    edi
c0014816:	c3                   	ret    

c0014817 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014817:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001481c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014821:	c1 e0 04             	shl    eax,0x4
c0014824:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014827:	c3                   	ret    

c0014828 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014828:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001482d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014832:	c1 e0 04             	shl    eax,0x4
c0014835:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014839:	c3                   	ret    

c001483a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001483a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001483f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014844:	c1 e0 04             	shl    eax,0x4
c0014847:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001484a:	c3                   	ret    

c001484b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001484b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014850:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014855:	c1 e0 04             	shl    eax,0x4
c0014858:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001485c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001485f:	c3                   	ret    

c0014860 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014860:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014865:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001486a:	c1 e0 04             	shl    eax,0x4
c001486d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014871:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014875:	c3                   	ret    

c0014876 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014876:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001487b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014880:	c1 e0 04             	shl    eax,0x4
c0014883:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014887:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001488a:	c3                   	ret    

c001488b <Vm::faultHandler(regs*)>:
c001488b:	55                   	push   ebp
c001488c:	57                   	push   edi
c001488d:	56                   	push   esi
c001488e:	53                   	push   ebx
c001488f:	83 ec 1c             	sub    esp,0x1c
c0014892:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014896:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014899:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001489d:	0f b7 f8             	movzx  edi,ax
c00148a0:	52                   	push   edx
c00148a1:	0f b7 c0             	movzx  eax,ax
c00148a4:	50                   	push   eax
c00148a5:	e8 6c fb ff ff       	call   c0014416 <Vm::realToLinear(unsigned short, unsigned short)>
c00148aa:	5a                   	pop    edx
c00148ab:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00148ae:	59                   	pop    ecx
c00148af:	89 c1                	mov    ecx,eax
c00148b1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00148c1:	0f b7 c5             	movzx  eax,bp
c00148c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148c8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00148cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148d0:	e8 41 fb ff ff       	call   c0014416 <Vm::realToLinear(unsigned short, unsigned short)>
c00148d5:	5e                   	pop    esi
c00148d6:	be 06 00 00 00       	mov    esi,0x6
c00148db:	5a                   	pop    edx
c00148dc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00148e1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00148e6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00148e9:	80 fa 9d             	cmp    dl,0x9d
c00148ec:	0f 84 2c 02 00 00    	je     c0014b1e <Vm::faultHandler(regs*)+0x293>
c00148f2:	0f 87 91 00 00 00    	ja     c0014989 <Vm::faultHandler(regs*)+0xfe>
c00148f8:	80 fa 66             	cmp    dl,0x66
c00148fb:	0f 84 98 01 00 00    	je     c0014a99 <Vm::faultHandler(regs*)+0x20e>
c0014901:	77 47                	ja     c001494a <Vm::faultHandler(regs*)+0xbf>
c0014903:	80 fa 36             	cmp    dl,0x36
c0014906:	0f 84 80 01 00 00    	je     c0014a8c <Vm::faultHandler(regs*)+0x201>
c001490c:	77 1a                	ja     c0014928 <Vm::faultHandler(regs*)+0x9d>
c001490e:	80 fa 26             	cmp    dl,0x26
c0014911:	0f 84 4e 01 00 00    	je     c0014a65 <Vm::faultHandler(regs*)+0x1da>
c0014917:	80 fa 2e             	cmp    dl,0x2e
c001491a:	0f 85 e2 05 00 00    	jne    c0014f02 <Vm::faultHandler(regs*)+0x677>
c0014920:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014923:	31 f6                	xor    esi,esi
c0014925:	41                   	inc    ecx
c0014926:	eb be                	jmp    c00148e6 <Vm::faultHandler(regs*)+0x5b>
c0014928:	80 fa 64             	cmp    dl,0x64
c001492b:	0f 84 41 01 00 00    	je     c0014a72 <Vm::faultHandler(regs*)+0x1e7>
c0014931:	0f 87 48 01 00 00    	ja     c0014a7f <Vm::faultHandler(regs*)+0x1f4>
c0014937:	80 fa 3e             	cmp    dl,0x3e
c001493a:	0f 85 c2 05 00 00    	jne    c0014f02 <Vm::faultHandler(regs*)+0x677>
c0014940:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014943:	be 01 00 00 00       	mov    esi,0x1
c0014948:	eb db                	jmp    c0014925 <Vm::faultHandler(regs*)+0x9a>
c001494a:	80 fa 6d             	cmp    dl,0x6d
c001494d:	0f 84 ec 02 00 00    	je     c0014c3f <Vm::faultHandler(regs*)+0x3b4>
c0014953:	77 17                	ja     c001496c <Vm::faultHandler(regs*)+0xe1>
c0014955:	80 fa 67             	cmp    dl,0x67
c0014958:	0f 84 48 01 00 00    	je     c0014aa6 <Vm::faultHandler(regs*)+0x21b>
c001495e:	80 fa 6c             	cmp    dl,0x6c
c0014961:	0f 84 69 02 00 00    	je     c0014bd0 <Vm::faultHandler(regs*)+0x345>
c0014967:	e9 96 05 00 00       	jmp    c0014f02 <Vm::faultHandler(regs*)+0x677>
c001496c:	80 fa 6f             	cmp    dl,0x6f
c001496f:	0f 84 f4 03 00 00    	je     c0014d69 <Vm::faultHandler(regs*)+0x4de>
c0014975:	0f 82 59 03 00 00    	jb     c0014cd4 <Vm::faultHandler(regs*)+0x449>
c001497b:	80 fa 9c             	cmp    dl,0x9c
c001497e:	0f 84 2f 01 00 00    	je     c0014ab3 <Vm::faultHandler(regs*)+0x228>
c0014984:	e9 79 05 00 00       	jmp    c0014f02 <Vm::faultHandler(regs*)+0x677>
c0014989:	80 fa ec             	cmp    dl,0xec
c001498c:	0f 84 14 05 00 00    	je     c0014ea6 <Vm::faultHandler(regs*)+0x61b>
c0014992:	77 7b                	ja     c0014a0f <Vm::faultHandler(regs*)+0x184>
c0014994:	80 fa e4             	cmp    dl,0xe4
c0014997:	0f 84 93 04 00 00    	je     c0014e30 <Vm::faultHandler(regs*)+0x5a5>
c001499d:	77 53                	ja     c00149f2 <Vm::faultHandler(regs*)+0x167>
c001499f:	80 fa cd             	cmp    dl,0xcd
c00149a2:	0f 84 d9 01 00 00    	je     c0014b81 <Vm::faultHandler(regs*)+0x2f6>
c00149a8:	80 fa cf             	cmp    dl,0xcf
c00149ab:	0f 85 51 05 00 00    	jne    c0014f02 <Vm::faultHandler(regs*)+0x677>
c00149b1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00149b4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00149b7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00149bb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00149be:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00149c2:	81 ca 00 02 02 00    	or     edx,0x20200
c00149c8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00149cb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149cf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00149d5:	66 c1 e8 09          	shr    ax,0x9
c00149d9:	83 e0 01             	and    eax,0x1
c00149dc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00149df:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00149e2:	83 c0 06             	add    eax,0x6
c00149e5:	25 ff ff 00 00       	and    eax,0xffff
c00149ea:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00149ed:	e9 0c 05 00 00       	jmp    c0014efe <Vm::faultHandler(regs*)+0x673>
c00149f2:	80 fa e6             	cmp    dl,0xe6
c00149f5:	0f 84 7f 04 00 00    	je     c0014e7a <Vm::faultHandler(regs*)+0x5ef>
c00149fb:	0f 82 4b 04 00 00    	jb     c0014e4c <Vm::faultHandler(regs*)+0x5c1>
c0014a01:	80 fa e7             	cmp    dl,0xe7
c0014a04:	0f 84 87 04 00 00    	je     c0014e91 <Vm::faultHandler(regs*)+0x606>
c0014a0a:	e9 f3 04 00 00       	jmp    c0014f02 <Vm::faultHandler(regs*)+0x677>
c0014a0f:	80 fa ef             	cmp    dl,0xef
c0014a12:	0f 84 d1 04 00 00    	je     c0014ee9 <Vm::faultHandler(regs*)+0x65e>
c0014a18:	77 28                	ja     c0014a42 <Vm::faultHandler(regs*)+0x1b7>
c0014a1a:	80 fa ed             	cmp    dl,0xed
c0014a1d:	0f 84 9f 04 00 00    	je     c0014ec2 <Vm::faultHandler(regs*)+0x637>
c0014a23:	80 fa ee             	cmp    dl,0xee
c0014a26:	0f 85 d6 04 00 00    	jne    c0014f02 <Vm::faultHandler(regs*)+0x677>
c0014a2c:	50                   	push   eax
c0014a2d:	50                   	push   eax
c0014a2e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014a32:	50                   	push   eax
c0014a33:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014a37:	50                   	push   eax
c0014a38:	e8 a3 f9 ff ff       	call   c00143e0 <Vm::outbv(unsigned short, unsigned char)>
c0014a3d:	e9 9f 04 00 00       	jmp    c0014ee1 <Vm::faultHandler(regs*)+0x656>
c0014a42:	80 fa fa             	cmp    dl,0xfa
c0014a45:	0f 84 69 01 00 00    	je     c0014bb4 <Vm::faultHandler(regs*)+0x329>
c0014a4b:	80 fa fb             	cmp    dl,0xfb
c0014a4e:	0f 84 6e 01 00 00    	je     c0014bc2 <Vm::faultHandler(regs*)+0x337>
c0014a54:	80 fa f3             	cmp    dl,0xf3
c0014a57:	0f 85 a5 04 00 00    	jne    c0014f02 <Vm::faultHandler(regs*)+0x677>
c0014a5d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a60:	e9 c0 fe ff ff       	jmp    c0014925 <Vm::faultHandler(regs*)+0x9a>
c0014a65:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a68:	be 02 00 00 00       	mov    esi,0x2
c0014a6d:	e9 b3 fe ff ff       	jmp    c0014925 <Vm::faultHandler(regs*)+0x9a>
c0014a72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a75:	be 03 00 00 00       	mov    esi,0x3
c0014a7a:	e9 a6 fe ff ff       	jmp    c0014925 <Vm::faultHandler(regs*)+0x9a>
c0014a7f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a82:	be 04 00 00 00       	mov    esi,0x4
c0014a87:	e9 99 fe ff ff       	jmp    c0014925 <Vm::faultHandler(regs*)+0x9a>
c0014a8c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a8f:	be 05 00 00 00       	mov    esi,0x5
c0014a94:	e9 8c fe ff ff       	jmp    c0014925 <Vm::faultHandler(regs*)+0x9a>
c0014a99:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a9c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014aa1:	e9 7f fe ff ff       	jmp    c0014925 <Vm::faultHandler(regs*)+0x9a>
c0014aa6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014aa9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014aae:	e9 72 fe ff ff       	jmp    c0014925 <Vm::faultHandler(regs*)+0x9a>
c0014ab3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014ab6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014aba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014abf:	74 30                	je     c0014af1 <Vm::faultHandler(regs*)+0x266>
c0014ac1:	83 e9 04             	sub    ecx,0x4
c0014ac4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014aca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014ad0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014ad3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014ad6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014adc:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014ae0:	0f 84 15 04 00 00    	je     c0014efb <Vm::faultHandler(regs*)+0x670>
c0014ae6:	80 ce 02             	or     dh,0x2
c0014ae9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014aec:	e9 0a 04 00 00       	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014af1:	83 e9 02             	sub    ecx,0x2
c0014af4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014afa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014afd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b01:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b07:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b0b:	74 05                	je     c0014b12 <Vm::faultHandler(regs*)+0x287>
c0014b0d:	80 ce 02             	or     dh,0x2
c0014b10:	eb 03                	jmp    c0014b15 <Vm::faultHandler(regs*)+0x28a>
c0014b12:	80 e6 fd             	and    dh,0xfd
c0014b15:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b19:	e9 dd 03 00 00       	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014b1e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b23:	74 2a                	je     c0014b4f <Vm::faultHandler(regs*)+0x2c4>
c0014b25:	8b 10                	mov    edx,DWORD PTR [eax]
c0014b27:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b2d:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b33:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b3e:	c1 e8 09             	shr    eax,0x9
c0014b41:	83 e0 01             	and    eax,0x1
c0014b44:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b47:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b4a:	83 c0 04             	add    eax,0x4
c0014b4d:	eb 25                	jmp    c0014b74 <Vm::faultHandler(regs*)+0x2e9>
c0014b4f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014b52:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b58:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b5b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014b5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b64:	66 c1 e8 09          	shr    ax,0x9
c0014b68:	83 e0 01             	and    eax,0x1
c0014b6b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b6e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b71:	83 c0 02             	add    eax,0x2
c0014b74:	25 ff ff 00 00       	and    eax,0xffff
c0014b79:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b7c:	e9 7a 03 00 00       	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014b81:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b85:	3c ee                	cmp    al,0xee
c0014b87:	75 10                	jne    c0014b99 <Vm::faultHandler(regs*)+0x30e>
c0014b89:	83 ec 0c             	sub    esp,0xc
c0014b8c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014b8f:	e8 e9 f8 ff ff       	call   c001447d <Vm::mainloop3(unsigned long)>
c0014b94:	e9 4b 03 00 00       	jmp    c0014ee4 <Vm::faultHandler(regs*)+0x659>
c0014b99:	83 ec 0c             	sub    esp,0xc
c0014b9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ba4:	51                   	push   ecx
c0014ba5:	50                   	push   eax
c0014ba6:	53                   	push   ebx
c0014ba7:	e8 e1 fb ff ff       	call   c001478d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014bac:	83 c4 20             	add    esp,0x20
c0014baf:	e9 4a 03 00 00       	jmp    c0014efe <Vm::faultHandler(regs*)+0x673>
c0014bb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bb9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014bbd:	e9 39 03 00 00       	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014bc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bc7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014bcb:	e9 2b 03 00 00       	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014bd0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014bd3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bd8:	74 2b                	je     c0014c05 <Vm::faultHandler(regs*)+0x37a>
c0014bda:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014be1:	76 22                	jbe    c0014c05 <Vm::faultHandler(regs*)+0x37a>
c0014be3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014be7:	50                   	push   eax
c0014be8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014bec:	50                   	push   eax
c0014bed:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014bf1:	50                   	push   eax
c0014bf2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014bf6:	50                   	push   eax
c0014bf7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bfb:	50                   	push   eax
c0014bfc:	6a 6c                	push   0x6c
c0014bfe:	6a 6c                	push   0x6c
c0014c00:	e9 b9 01 00 00       	jmp    c0014dbe <Vm::faultHandler(regs*)+0x533>
c0014c05:	83 ec 0c             	sub    esp,0xc
c0014c08:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c0c:	0f b7 f6             	movzx  esi,si
c0014c0f:	50                   	push   eax
c0014c10:	e8 b8 f7 ff ff       	call   c00143cd <Vm::inbv(unsigned short)>
c0014c15:	83 c4 0c             	add    esp,0xc
c0014c18:	0f b6 c0             	movzx  eax,al
c0014c1b:	50                   	push   eax
c0014c1c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014c20:	50                   	push   eax
c0014c21:	56                   	push   esi
c0014c22:	e8 24 fc ff ff       	call   c001484b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014c27:	83 c4 10             	add    esp,0x10
c0014c2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c2d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c31:	74 03                	je     c0014c36 <Vm::faultHandler(regs*)+0x3ab>
c0014c33:	48                   	dec    eax
c0014c34:	eb 01                	jmp    c0014c37 <Vm::faultHandler(regs*)+0x3ac>
c0014c36:	40                   	inc    eax
c0014c37:	0f b7 c0             	movzx  eax,ax
c0014c3a:	e9 8d 00 00 00       	jmp    c0014ccc <Vm::faultHandler(regs*)+0x441>
c0014c3f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c45:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c4a:	74 29                	je     c0014c75 <Vm::faultHandler(regs*)+0x3ea>
c0014c4c:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c51:	76 22                	jbe    c0014c75 <Vm::faultHandler(regs*)+0x3ea>
c0014c53:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c57:	50                   	push   eax
c0014c58:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c5c:	50                   	push   eax
c0014c5d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c61:	50                   	push   eax
c0014c62:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c66:	50                   	push   eax
c0014c67:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c6b:	50                   	push   eax
c0014c6c:	6a 6d                	push   0x6d
c0014c6e:	6a 6d                	push   0x6d
c0014c70:	e9 49 01 00 00       	jmp    c0014dbe <Vm::faultHandler(regs*)+0x533>
c0014c75:	0f b7 c8             	movzx  ecx,ax
c0014c78:	0f b7 f6             	movzx  esi,si
c0014c7b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c83:	74 20                	je     c0014ca5 <Vm::faultHandler(regs*)+0x41a>
c0014c85:	ed                   	in     eax,dx
c0014c86:	55                   	push   ebp
c0014c87:	50                   	push   eax
c0014c88:	51                   	push   ecx
c0014c89:	56                   	push   esi
c0014c8a:	e8 e7 fb ff ff       	call   c0014876 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c95:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c99:	74 05                	je     c0014ca0 <Vm::faultHandler(regs*)+0x415>
c0014c9b:	83 e8 04             	sub    eax,0x4
c0014c9e:	eb 27                	jmp    c0014cc7 <Vm::faultHandler(regs*)+0x43c>
c0014ca0:	83 c0 04             	add    eax,0x4
c0014ca3:	eb 22                	jmp    c0014cc7 <Vm::faultHandler(regs*)+0x43c>
c0014ca5:	66 ed                	in     ax,dx
c0014ca7:	0f b7 c0             	movzx  eax,ax
c0014caa:	57                   	push   edi
c0014cab:	50                   	push   eax
c0014cac:	51                   	push   ecx
c0014cad:	56                   	push   esi
c0014cae:	e8 ad fb ff ff       	call   c0014860 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014cb3:	83 c4 10             	add    esp,0x10
c0014cb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cbd:	74 05                	je     c0014cc4 <Vm::faultHandler(regs*)+0x439>
c0014cbf:	83 e8 02             	sub    eax,0x2
c0014cc2:	eb 03                	jmp    c0014cc7 <Vm::faultHandler(regs*)+0x43c>
c0014cc4:	83 c0 02             	add    eax,0x2
c0014cc7:	25 ff ff 00 00       	and    eax,0xffff
c0014ccc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014ccf:	e9 27 02 00 00       	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014cd4:	8d 46 ff             	lea    eax,[esi-0x1]
c0014cd7:	3c 05                	cmp    al,0x5
c0014cd9:	77 24                	ja     c0014cff <Vm::faultHandler(regs*)+0x474>
c0014cdb:	0f b6 c0             	movzx  eax,al
c0014cde:	ff 24 85 7c ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1184]
c0014ce5:	0f b7 fd             	movzx  edi,bp
c0014ce8:	eb 15                	jmp    c0014cff <Vm::faultHandler(regs*)+0x474>
c0014cea:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014cee:	eb 0f                	jmp    c0014cff <Vm::faultHandler(regs*)+0x474>
c0014cf0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014cf4:	eb 09                	jmp    c0014cff <Vm::faultHandler(regs*)+0x474>
c0014cf6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014cfa:	eb 03                	jmp    c0014cff <Vm::faultHandler(regs*)+0x474>
c0014cfc:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014cff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d02:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d07:	74 29                	je     c0014d32 <Vm::faultHandler(regs*)+0x4a7>
c0014d09:	3d ff ff 00 00       	cmp    eax,0xffff
c0014d0e:	76 22                	jbe    c0014d32 <Vm::faultHandler(regs*)+0x4a7>
c0014d10:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d14:	50                   	push   eax
c0014d15:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d19:	50                   	push   eax
c0014d1a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d1e:	50                   	push   eax
c0014d1f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d23:	50                   	push   eax
c0014d24:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d28:	50                   	push   eax
c0014d29:	6a 6e                	push   0x6e
c0014d2b:	6a 6e                	push   0x6e
c0014d2d:	e9 8c 00 00 00       	jmp    c0014dbe <Vm::faultHandler(regs*)+0x533>
c0014d32:	0f b7 c0             	movzx  eax,ax
c0014d35:	52                   	push   edx
c0014d36:	52                   	push   edx
c0014d37:	50                   	push   eax
c0014d38:	57                   	push   edi
c0014d39:	e8 d9 fa ff ff       	call   c0014817 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014d3e:	59                   	pop    ecx
c0014d3f:	0f b6 c0             	movzx  eax,al
c0014d42:	5e                   	pop    esi
c0014d43:	50                   	push   eax
c0014d44:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014d48:	50                   	push   eax
c0014d49:	e8 92 f6 ff ff       	call   c00143e0 <Vm::outbv(unsigned short, unsigned char)>
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d54:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d58:	74 03                	je     c0014d5d <Vm::faultHandler(regs*)+0x4d2>
c0014d5a:	48                   	dec    eax
c0014d5b:	eb 01                	jmp    c0014d5e <Vm::faultHandler(regs*)+0x4d3>
c0014d5d:	40                   	inc    eax
c0014d5e:	0f b7 c0             	movzx  eax,ax
c0014d61:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014d64:	e9 92 01 00 00       	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014d69:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d6c:	3c 05                	cmp    al,0x5
c0014d6e:	77 1f                	ja     c0014d8f <Vm::faultHandler(regs*)+0x504>
c0014d70:	0f b6 c0             	movzx  eax,al
c0014d73:	ff 24 85 94 ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe116c]
c0014d7a:	89 ef                	mov    edi,ebp
c0014d7c:	eb 11                	jmp    c0014d8f <Vm::faultHandler(regs*)+0x504>
c0014d7e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014d81:	eb 0c                	jmp    c0014d8f <Vm::faultHandler(regs*)+0x504>
c0014d83:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014d86:	eb 07                	jmp    c0014d8f <Vm::faultHandler(regs*)+0x504>
c0014d88:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014d8b:	eb 02                	jmp    c0014d8f <Vm::faultHandler(regs*)+0x504>
c0014d8d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014d8f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014d92:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d97:	74 37                	je     c0014dd0 <Vm::faultHandler(regs*)+0x545>
c0014d99:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d9f:	76 2f                	jbe    c0014dd0 <Vm::faultHandler(regs*)+0x545>
c0014da1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014da5:	50                   	push   eax
c0014da6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014daa:	50                   	push   eax
c0014dab:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014daf:	50                   	push   eax
c0014db0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014db4:	50                   	push   eax
c0014db5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014db9:	50                   	push   eax
c0014dba:	6a 6f                	push   0x6f
c0014dbc:	6a 6f                	push   0x6f
c0014dbe:	68 22 ee 01 c0       	push   0xc001ee22
c0014dc3:	e8 51 58 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0014dc8:	83 c4 20             	add    esp,0x20
c0014dcb:	e9 86 01 00 00       	jmp    c0014f56 <Vm::faultHandler(regs*)+0x6cb>
c0014dd0:	0f b7 d7             	movzx  edx,di
c0014dd3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014dd6:	0f b7 c6             	movzx  eax,si
c0014dd9:	81 e1 00 04 00 00    	and    ecx,0x400
c0014ddf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014de2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014de7:	74 1d                	je     c0014e06 <Vm::faultHandler(regs*)+0x57b>
c0014de9:	55                   	push   ebp
c0014dea:	55                   	push   ebp
c0014deb:	50                   	push   eax
c0014dec:	52                   	push   edx
c0014ded:	e8 48 fa ff ff       	call   c001483a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	89 fa                	mov    edx,edi
c0014df7:	ef                   	out    dx,eax
c0014df8:	85 c9                	test   ecx,ecx
c0014dfa:	74 05                	je     c0014e01 <Vm::faultHandler(regs*)+0x576>
c0014dfc:	83 ee 04             	sub    esi,0x4
c0014dff:	eb 21                	jmp    c0014e22 <Vm::faultHandler(regs*)+0x597>
c0014e01:	83 c6 04             	add    esi,0x4
c0014e04:	eb 1c                	jmp    c0014e22 <Vm::faultHandler(regs*)+0x597>
c0014e06:	55                   	push   ebp
c0014e07:	55                   	push   ebp
c0014e08:	50                   	push   eax
c0014e09:	52                   	push   edx
c0014e0a:	e8 19 fa ff ff       	call   c0014828 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014e0f:	83 c4 10             	add    esp,0x10
c0014e12:	89 fa                	mov    edx,edi
c0014e14:	66 ef                	out    dx,ax
c0014e16:	85 c9                	test   ecx,ecx
c0014e18:	74 05                	je     c0014e1f <Vm::faultHandler(regs*)+0x594>
c0014e1a:	83 ee 02             	sub    esi,0x2
c0014e1d:	eb 03                	jmp    c0014e22 <Vm::faultHandler(regs*)+0x597>
c0014e1f:	83 c6 02             	add    esi,0x2
c0014e22:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014e28:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014e2b:	e9 cb 00 00 00       	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014e30:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e37:	83 ec 0c             	sub    esp,0xc
c0014e3a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e3e:	50                   	push   eax
c0014e3f:	e8 89 f5 ff ff       	call   c00143cd <Vm::inbv(unsigned short)>
c0014e44:	0f b6 c0             	movzx  eax,al
c0014e47:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e4a:	eb 3f                	jmp    c0014e8b <Vm::faultHandler(regs*)+0x600>
c0014e4c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e51:	74 07                	je     c0014e5a <Vm::faultHandler(regs*)+0x5cf>
c0014e53:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e57:	ed                   	in     eax,dx
c0014e58:	eb 14                	jmp    c0014e6e <Vm::faultHandler(regs*)+0x5e3>
c0014e5a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014e5d:	66 31 f6             	xor    si,si
c0014e60:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014e63:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e67:	66 ed                	in     ax,dx
c0014e69:	0f b7 c0             	movzx  eax,ax
c0014e6c:	09 f0                	or     eax,esi
c0014e6e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e71:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e75:	e9 84 00 00 00       	jmp    c0014efe <Vm::faultHandler(regs*)+0x673>
c0014e7a:	52                   	push   edx
c0014e7b:	52                   	push   edx
c0014e7c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014e80:	50                   	push   eax
c0014e81:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e85:	50                   	push   eax
c0014e86:	e8 55 f5 ff ff       	call   c00143e0 <Vm::outbv(unsigned short, unsigned char)>
c0014e8b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e8f:	eb 53                	jmp    c0014ee4 <Vm::faultHandler(regs*)+0x659>
c0014e91:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e94:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e98:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e9d:	74 03                	je     c0014ea2 <Vm::faultHandler(regs*)+0x617>
c0014e9f:	ef                   	out    dx,eax
c0014ea0:	eb cf                	jmp    c0014e71 <Vm::faultHandler(regs*)+0x5e6>
c0014ea2:	66 ef                	out    dx,ax
c0014ea4:	eb cb                	jmp    c0014e71 <Vm::faultHandler(regs*)+0x5e6>
c0014ea6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014ead:	83 ec 0c             	sub    esp,0xc
c0014eb0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014eb4:	50                   	push   eax
c0014eb5:	e8 13 f5 ff ff       	call   c00143cd <Vm::inbv(unsigned short)>
c0014eba:	0f b6 c0             	movzx  eax,al
c0014ebd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014ec0:	eb 1f                	jmp    c0014ee1 <Vm::faultHandler(regs*)+0x656>
c0014ec2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014ec5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014eca:	74 03                	je     c0014ecf <Vm::faultHandler(regs*)+0x644>
c0014ecc:	ed                   	in     eax,dx
c0014ecd:	eb 0d                	jmp    c0014edc <Vm::faultHandler(regs*)+0x651>
c0014ecf:	66 ed                	in     ax,dx
c0014ed1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014ed4:	0f b7 c0             	movzx  eax,ax
c0014ed7:	66 31 d2             	xor    dx,dx
c0014eda:	09 d0                	or     eax,edx
c0014edc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014edf:	eb 1a                	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014ee1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ee4:	83 c4 10             	add    esp,0x10
c0014ee7:	eb 15                	jmp    c0014efe <Vm::faultHandler(regs*)+0x673>
c0014ee9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014eec:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014eef:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ef4:	74 03                	je     c0014ef9 <Vm::faultHandler(regs*)+0x66e>
c0014ef6:	ef                   	out    dx,eax
c0014ef7:	eb 02                	jmp    c0014efb <Vm::faultHandler(regs*)+0x670>
c0014ef9:	66 ef                	out    dx,ax
c0014efb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014efe:	b0 01                	mov    al,0x1
c0014f00:	eb 56                	jmp    c0014f58 <Vm::faultHandler(regs*)+0x6cd>
c0014f02:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f06:	50                   	push   eax
c0014f07:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f0b:	50                   	push   eax
c0014f0c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f10:	50                   	push   eax
c0014f11:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f15:	50                   	push   eax
c0014f16:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f1a:	50                   	push   eax
c0014f1b:	52                   	push   edx
c0014f1c:	52                   	push   edx
c0014f1d:	68 4f ee 01 c0       	push   0xc001ee4f
c0014f22:	e8 f2 56 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0014f27:	83 c4 20             	add    esp,0x20
c0014f2a:	83 ec 0c             	sub    esp,0xc
c0014f2d:	6a 60                	push   0x60
c0014f2f:	e8 99 f4 ff ff       	call   c00143cd <Vm::inbv(unsigned short)>
c0014f34:	83 c4 10             	add    esp,0x10
c0014f37:	3c 1c                	cmp    al,0x1c
c0014f39:	74 04                	je     c0014f3f <Vm::faultHandler(regs*)+0x6b4>
c0014f3b:	3c 5a                	cmp    al,0x5a
c0014f3d:	75 eb                	jne    c0014f2a <Vm::faultHandler(regs*)+0x69f>
c0014f3f:	3c 5a                	cmp    al,0x5a
c0014f41:	74 04                	je     c0014f47 <Vm::faultHandler(regs*)+0x6bc>
c0014f43:	3c 1c                	cmp    al,0x1c
c0014f45:	75 0f                	jne    c0014f56 <Vm::faultHandler(regs*)+0x6cb>
c0014f47:	83 ec 0c             	sub    esp,0xc
c0014f4a:	6a 60                	push   0x60
c0014f4c:	e8 7c f4 ff ff       	call   c00143cd <Vm::inbv(unsigned short)>
c0014f51:	83 c4 10             	add    esp,0x10
c0014f54:	eb e9                	jmp    c0014f3f <Vm::faultHandler(regs*)+0x6b4>
c0014f56:	31 c0                	xor    eax,eax
c0014f58:	83 c4 1c             	add    esp,0x1c
c0014f5b:	5b                   	pop    ebx
c0014f5c:	5e                   	pop    esi
c0014f5d:	5f                   	pop    edi
c0014f5e:	5d                   	pop    ebp
c0014f5f:	c3                   	ret    

c0014f60 <noCopro(unsigned long)>:
c0014f60:	c3                   	ret    

c0014f61 <nmiHandler(regs*, void*)>:
c0014f61:	83 ec 0c             	sub    esp,0xc
c0014f64:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014f69:	83 ec 0c             	sub    esp,0xc
c0014f6c:	50                   	push   eax
c0014f6d:	e8 68 20 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014f72:	83 c4 10             	add    esp,0x10
c0014f75:	90                   	nop
c0014f76:	83 c4 0c             	add    esp,0xc
c0014f79:	c3                   	ret    

c0014f7a <doubleFault(regs*, void*)>:
c0014f7a:	55                   	push   ebp
c0014f7b:	89 e5                	mov    ebp,esp
c0014f7d:	83 ec 08             	sub    esp,0x8
c0014f80:	83 ec 0c             	sub    esp,0xc
c0014f83:	68 ac ee 01 c0       	push   0xc001eeac
c0014f88:	e8 0e b3 ff ff       	call   c001029b <KePanic(char const*)>
c0014f8d:	83 c4 10             	add    esp,0x10
c0014f90:	90                   	nop
c0014f91:	c9                   	leave  
c0014f92:	c3                   	ret    

c0014f93 <displayDebugInfo(regs*)>:
c0014f93:	83 ec 1c             	sub    esp,0x1c
c0014f96:	0f 20 c0             	mov    eax,cr0
c0014f99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f9d:	0f 20 d0             	mov    eax,cr2
c0014fa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014fa4:	0f 20 d8             	mov    eax,cr3
c0014fa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fab:	0f 20 e0             	mov    eax,cr4
c0014fae:	89 04 24             	mov    DWORD PTR [esp],eax
c0014fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fb5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014fb8:	83 ec 08             	sub    esp,0x8
c0014fbb:	50                   	push   eax
c0014fbc:	68 c8 ee 01 c0       	push   0xc001eec8
c0014fc1:	e8 53 56 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fcd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014fd0:	83 ec 08             	sub    esp,0x8
c0014fd3:	50                   	push   eax
c0014fd4:	68 b9 ee 01 c0       	push   0xc001eeb9
c0014fd9:	e8 3b 56 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0014fde:	83 c4 10             	add    esp,0x10
c0014fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014fe8:	83 ec 08             	sub    esp,0x8
c0014feb:	50                   	push   eax
c0014fec:	68 c4 ee 01 c0       	push   0xc001eec4
c0014ff1:	e8 23 56 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ffd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015000:	83 ec 08             	sub    esp,0x8
c0015003:	50                   	push   eax
c0015004:	68 d3 ee 01 c0       	push   0xc001eed3
c0015009:	e8 0b 56 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001500e:	83 c4 10             	add    esp,0x10
c0015011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015015:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015018:	83 ec 08             	sub    esp,0x8
c001501b:	50                   	push   eax
c001501c:	68 de ee 01 c0       	push   0xc001eede
c0015021:	e8 f3 55 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0015026:	83 c4 10             	add    esp,0x10
c0015029:	83 ec 08             	sub    esp,0x8
c001502c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015030:	68 e9 ee 01 c0       	push   0xc001eee9
c0015035:	e8 df 55 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001503a:	83 c4 10             	add    esp,0x10
c001503d:	83 ec 08             	sub    esp,0x8
c0015040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015044:	68 f4 ee 01 c0       	push   0xc001eef4
c0015049:	e8 cb 55 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001504e:	83 c4 10             	add    esp,0x10
c0015051:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015056:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001505c:	83 ec 0c             	sub    esp,0xc
c001505f:	50                   	push   eax
c0015060:	e8 92 33 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0015065:	83 c4 10             	add    esp,0x10
c0015068:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001506d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015073:	83 ec 08             	sub    esp,0x8
c0015076:	68 ff ee 01 c0       	push   0xc001eeff
c001507b:	50                   	push   eax
c001507c:	e8 b5 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015081:	83 c4 10             	add    esp,0x10
c0015084:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015089:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001508f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015094:	8b 12                	mov    edx,DWORD PTR [edx]
c0015096:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015099:	83 c2 0c             	add    edx,0xc
c001509c:	83 ec 08             	sub    esp,0x8
c001509f:	52                   	push   edx
c00150a0:	50                   	push   eax
c00150a1:	e8 90 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b4:	83 ec 08             	sub    esp,0x8
c00150b7:	68 08 ef 01 c0       	push   0xc001ef08
c00150bc:	50                   	push   eax
c00150bd:	e8 74 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150d4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00150d7:	83 ec 08             	sub    esp,0x8
c00150da:	52                   	push   edx
c00150db:	50                   	push   eax
c00150dc:	e8 0f 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150e1:	83 c4 10             	add    esp,0x10
c00150e4:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ef:	83 ec 08             	sub    esp,0x8
c00150f2:	68 10 ef 01 c0       	push   0xc001ef10
c00150f7:	50                   	push   eax
c00150f8:	e8 39 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015105:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001510f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015112:	83 ec 08             	sub    esp,0x8
c0015115:	52                   	push   edx
c0015116:	50                   	push   eax
c0015117:	e8 d4 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015124:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001512a:	83 ec 08             	sub    esp,0x8
c001512d:	68 18 ef 01 c0       	push   0xc001ef18
c0015132:	50                   	push   eax
c0015133:	e8 fe 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015138:	83 c4 10             	add    esp,0x10
c001513b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015140:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015146:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001514a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001514d:	83 ec 08             	sub    esp,0x8
c0015150:	52                   	push   edx
c0015151:	50                   	push   eax
c0015152:	e8 99 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015157:	83 c4 10             	add    esp,0x10
c001515a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001515f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015165:	83 ec 08             	sub    esp,0x8
c0015168:	68 20 ef 01 c0       	push   0xc001ef20
c001516d:	50                   	push   eax
c001516e:	e8 c3 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001517b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015181:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015185:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015188:	83 ec 08             	sub    esp,0x8
c001518b:	52                   	push   edx
c001518c:	50                   	push   eax
c001518d:	e8 5e 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015192:	83 c4 10             	add    esp,0x10
c0015195:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001519a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a0:	83 ec 08             	sub    esp,0x8
c00151a3:	68 28 ef 01 c0       	push   0xc001ef28
c00151a8:	50                   	push   eax
c00151a9:	e8 88 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151ae:	83 c4 10             	add    esp,0x10
c00151b1:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151c0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00151c3:	83 ec 08             	sub    esp,0x8
c00151c6:	52                   	push   edx
c00151c7:	50                   	push   eax
c00151c8:	e8 23 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151cd:	83 c4 10             	add    esp,0x10
c00151d0:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151db:	83 ec 08             	sub    esp,0x8
c00151de:	68 30 ef 01 c0       	push   0xc001ef30
c00151e3:	50                   	push   eax
c00151e4:	e8 4d 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151fb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00151fe:	83 ec 08             	sub    esp,0x8
c0015201:	52                   	push   edx
c0015202:	50                   	push   eax
c0015203:	e8 e8 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015208:	83 c4 10             	add    esp,0x10
c001520b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015210:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015216:	83 ec 08             	sub    esp,0x8
c0015219:	68 38 ef 01 c0       	push   0xc001ef38
c001521e:	50                   	push   eax
c001521f:	e8 12 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015224:	83 c4 10             	add    esp,0x10
c0015227:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001522c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015232:	83 ec 08             	sub    esp,0x8
c0015235:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015239:	50                   	push   eax
c001523a:	e8 b1 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015247:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001524d:	83 ec 08             	sub    esp,0x8
c0015250:	68 41 ef 01 c0       	push   0xc001ef41
c0015255:	50                   	push   eax
c0015256:	e8 db 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001525b:	83 c4 10             	add    esp,0x10
c001525e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015263:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015269:	83 ec 08             	sub    esp,0x8
c001526c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015270:	50                   	push   eax
c0015271:	e8 7a 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015276:	83 c4 10             	add    esp,0x10
c0015279:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001527e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015284:	83 ec 08             	sub    esp,0x8
c0015287:	68 49 ef 01 c0       	push   0xc001ef49
c001528c:	50                   	push   eax
c001528d:	e8 a4 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015292:	83 c4 10             	add    esp,0x10
c0015295:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001529a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152a0:	83 ec 08             	sub    esp,0x8
c00152a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00152a7:	50                   	push   eax
c00152a8:	e8 43 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00152ad:	83 c4 10             	add    esp,0x10
c00152b0:	fa                   	cli    
c00152b1:	f4                   	hlt    
c00152b2:	eb fe                	jmp    c00152b2 <displayDebugInfo(regs*)+0x31f>

c00152b4 <HalSystemIdle()>:
c00152b4:	56                   	push   esi
c00152b5:	53                   	push   ebx
c00152b6:	83 ec 14             	sub    esp,0x14
c00152b9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00152be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152c4:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00152ca:	83 e0 04             	and    eax,0x4
c00152cd:	84 c0                	test   al,al
c00152cf:	0f 95 c0             	setne  al
c00152d2:	84 c0                	test   al,al
c00152d4:	74 4c                	je     c0015322 <HalSystemIdle()+0x6e>
c00152d6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00152db:	83 ec 08             	sub    esp,0x8
c00152de:	68 e1 00 00 00       	push   0xe1
c00152e3:	50                   	push   eax
c00152e4:	e8 09 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00152e9:	83 c4 10             	add    esp,0x10
c00152ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00152f4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00152f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00152fd:	83 e2 02             	and    edx,0x2
c0015300:	89 d3                	mov    ebx,edx
c0015302:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015306:	83 e2 00             	and    edx,0x0
c0015309:	89 d6                	mov    esi,edx
c001530b:	56                   	push   esi
c001530c:	53                   	push   ebx
c001530d:	68 e1 00 00 00       	push   0xe1
c0015312:	50                   	push   eax
c0015313:	e8 06 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015318:	83 c4 10             	add    esp,0x10
c001531b:	e8 74 ae fe ff       	call   c0000194 <doTPAUSE>
c0015320:	eb 01                	jmp    c0015323 <HalSystemIdle()+0x6f>
c0015322:	f4                   	hlt    
c0015323:	90                   	nop
c0015324:	83 c4 14             	add    esp,0x14
c0015327:	5b                   	pop    ebx
c0015328:	5e                   	pop    esi
c0015329:	c3                   	ret    

c001532a <displayProgramFault(char const*)>:
c001532a:	83 ec 0c             	sub    esp,0xc
c001532d:	83 ec 0c             	sub    esp,0xc
c0015330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015334:	e8 e0 52 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015346:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001534c:	85 c0                	test   eax,eax
c001534e:	74 21                	je     c0015371 <displayProgramFault(char const*)+0x47>
c0015350:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015355:	8b 00                	mov    eax,DWORD PTR [eax]
c0015357:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001535a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015360:	6a 04                	push   0x4
c0015362:	6a 0f                	push   0xf
c0015364:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015368:	50                   	push   eax
c0015369:	e8 3a 34 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001536e:	83 c4 10             	add    esp,0x10
c0015371:	90                   	nop
c0015372:	83 c4 0c             	add    esp,0xc
c0015375:	c3                   	ret    

c0015376 <gpFault(regs*, void*)>:
c0015376:	83 ec 1c             	sub    esp,0x1c
c0015379:	c7 05 10 52 02 c0 8b 48 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc001488b
c0015383:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015388:	85 c0                	test   eax,eax
c001538a:	74 1c                	je     c00153a8 <gpFault(regs*, void*)+0x32>
c001538c:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015391:	83 ec 0c             	sub    esp,0xc
c0015394:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015398:	ff d0                	call   eax
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00153a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00153a6:	75 2e                	jne    c00153d6 <gpFault(regs*, void*)+0x60>
c00153a8:	83 ec 0c             	sub    esp,0xc
c00153ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153af:	e8 df fb ff ff       	call   c0014f93 <displayDebugInfo(regs*)>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	83 ec 0c             	sub    esp,0xc
c00153ba:	68 51 ef 01 c0       	push   0xc001ef51
c00153bf:	e8 66 ff ff ff       	call   c001532a <displayProgramFault(char const*)>
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	83 ec 0c             	sub    esp,0xc
c00153ca:	6a 00                	push   0x0
c00153cc:	e8 af ee ff ff       	call   c0014280 <Thr::terminateFromIRQ(int)>
c00153d1:	83 c4 10             	add    esp,0x10
c00153d4:	eb 01                	jmp    c00153d7 <gpFault(regs*, void*)+0x61>
c00153d6:	90                   	nop
c00153d7:	83 c4 1c             	add    esp,0x1c
c00153da:	c3                   	ret    

c00153db <pgFault(regs*, void*)>:
c00153db:	83 ec 1c             	sub    esp,0x1c
c00153de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153e2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153e5:	0f 20 d0             	mov    eax,cr2
c00153e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153f0:	83 ec 04             	sub    esp,0x4
c00153f3:	52                   	push   edx
c00153f4:	50                   	push   eax
c00153f5:	68 30 f0 01 c0       	push   0xc001f030
c00153fa:	e8 1a 52 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015407:	8b 00                	mov    eax,DWORD PTR [eax]
c0015409:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001540c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015412:	0f 20 d2             	mov    edx,cr2
c0015415:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015419:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001541d:	83 ec 08             	sub    esp,0x8
c0015420:	52                   	push   edx
c0015421:	50                   	push   eax
c0015422:	e8 ff 4d ff ff       	call   c000a226 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	84 c0                	test   al,al
c001542c:	75 2e                	jne    c001545c <pgFault(regs*, void*)+0x81>
c001542e:	83 ec 0c             	sub    esp,0xc
c0015431:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015435:	e8 59 fb ff ff       	call   c0014f93 <displayDebugInfo(regs*)>
c001543a:	83 c4 10             	add    esp,0x10
c001543d:	83 ec 0c             	sub    esp,0xc
c0015440:	68 6a ef 01 c0       	push   0xc001ef6a
c0015445:	e8 e0 fe ff ff       	call   c001532a <displayProgramFault(char const*)>
c001544a:	83 c4 10             	add    esp,0x10
c001544d:	83 ec 0c             	sub    esp,0xc
c0015450:	6a 00                	push   0x0
c0015452:	e8 29 ee ff ff       	call   c0014280 <Thr::terminateFromIRQ(int)>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	eb 01                	jmp    c001545d <pgFault(regs*, void*)+0x82>
c001545c:	90                   	nop
c001545d:	83 c4 1c             	add    esp,0x1c
c0015460:	c3                   	ret    

c0015461 <otherISRHandler(regs*, void*)>:
c0015461:	83 ec 0c             	sub    esp,0xc
c0015464:	83 ec 0c             	sub    esp,0xc
c0015467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001546b:	e8 23 fb ff ff       	call   c0014f93 <displayDebugInfo(regs*)>
c0015470:	83 c4 10             	add    esp,0x10
c0015473:	83 ec 0c             	sub    esp,0xc
c0015476:	68 58 f0 01 c0       	push   0xc001f058
c001547b:	e8 aa fe ff ff       	call   c001532a <displayProgramFault(char const*)>
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	83 ec 0c             	sub    esp,0xc
c0015486:	6a 00                	push   0x0
c0015488:	e8 f3 ed ff ff       	call   c0014280 <Thr::terminateFromIRQ(int)>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	90                   	nop
c0015491:	83 c4 0c             	add    esp,0xc
c0015494:	c3                   	ret    

c0015495 <opcodeFault(regs*, void*)>:
c0015495:	55                   	push   ebp
c0015496:	89 e5                	mov    ebp,esp
c0015498:	83 ec 08             	sub    esp,0x8
c001549b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a1:	83 ec 08             	sub    esp,0x8
c00154a4:	50                   	push   eax
c00154a5:	68 75 ef 01 c0       	push   0xc001ef75
c00154aa:	e8 6a 51 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00154af:	83 c4 10             	add    esp,0x10
c00154b2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00154b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00154bd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00154c3:	84 c0                	test   al,al
c00154c5:	74 21                	je     c00154e8 <opcodeFault(regs*, void*)+0x53>
c00154c7:	83 ec 0c             	sub    esp,0xc
c00154ca:	68 80 f0 01 c0       	push   0xc001f080
c00154cf:	e8 45 51 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154dd:	8d 50 19             	lea    edx,[eax+0x19]
c00154e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e6:	eb 2b                	jmp    c0015513 <opcodeFault(regs*, void*)+0x7e>
c00154e8:	83 ec 0c             	sub    esp,0xc
c00154eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154ee:	e8 a0 fa ff ff       	call   c0014f93 <displayDebugInfo(regs*)>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	83 ec 0c             	sub    esp,0xc
c00154f9:	68 83 ef 01 c0       	push   0xc001ef83
c00154fe:	e8 27 fe ff ff       	call   c001532a <displayProgramFault(char const*)>
c0015503:	83 c4 10             	add    esp,0x10
c0015506:	83 ec 0c             	sub    esp,0xc
c0015509:	6a 00                	push   0x0
c001550b:	e8 70 ed ff ff       	call   c0014280 <Thr::terminateFromIRQ(int)>
c0015510:	83 c4 10             	add    esp,0x10
c0015513:	c9                   	leave  
c0015514:	c3                   	ret    

c0015515 <i386SaveCoprocessor(void*)>:
c0015515:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015519:	83 c0 3f             	add    eax,0x3f
c001551c:	83 e0 c0             	and    eax,0xffffffc0
c001551f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015523:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c0015529 <i386LoadCoprocessor(void*)>:
c0015529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001552d:	83 c0 3f             	add    eax,0x3f
c0015530:	83 e0 c0             	and    eax,0xffffffc0
c0015533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015537:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c001553d <x87EmulHandler(regs*, void*)>:
c001553d:	53                   	push   ebx
c001553e:	83 ec 08             	sub    esp,0x8
c0015541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015546:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001554a:	74 10                	je     c001555c <x87EmulHandler(regs*, void*)+0x1f>
c001554c:	83 ec 0c             	sub    esp,0xc
c001554f:	68 90 ef 01 c0       	push   0xc001ef90
c0015554:	e8 42 ad ff ff       	call   c001029b <KePanic(char const*)>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	0f 20 c0             	mov    eax,cr0
c001555f:	a8 08                	test   al,0x8
c0015561:	74 59                	je     c00155bc <x87EmulHandler(regs*, void*)+0x7f>
c0015563:	0f 06                	clts   
c0015565:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001556a:	85 c0                	test   eax,eax
c001556c:	74 0e                	je     c001557c <x87EmulHandler(regs*, void*)+0x3f>
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015574:	e8 9c ff ff ff       	call   c0015515 <i386SaveCoprocessor(void*)>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015582:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015586:	75 12                	jne    c001559a <x87EmulHandler(regs*, void*)+0x5d>
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	68 40 02 00 00       	push   0x240
c0015590:	e8 24 22 ff ff       	call   c00077b9 <malloc>
c0015595:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015598:	eb 10                	jmp    c00155aa <x87EmulHandler(regs*, void*)+0x6d>
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00155a2:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00155a5:	e8 7f ff ff ff       	call   c0015529 <i386LoadCoprocessor(void*)>
c00155aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c00155b7:	83 c4 08             	add    esp,0x8
c00155ba:	5b                   	pop    ebx
c00155bb:	c3                   	ret    
c00155bc:	83 ec 0c             	sub    esp,0xc
c00155bf:	68 a4 ef 01 c0       	push   0xc001efa4
c00155c4:	e8 50 50 ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c00155c9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00155d1:	83 c4 18             	add    esp,0x18
c00155d4:	5b                   	pop    ebx
c00155d5:	e9 a6 ec ff ff       	jmp    c0014280 <Thr::terminateFromIRQ(int)>

c00155da <HalInitialiseCoprocessor()>:
c00155da:	83 ec 10             	sub    esp,0x10
c00155dd:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c00155e7:	6a 00                	push   0x0
c00155e9:	68 3d 55 01 c0       	push   0xc001553d
c00155ee:	6a 07                	push   0x7
c00155f0:	e8 97 69 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00155f5:	e8 96 65 00 00       	call   c001bb90 <avxDetect>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	85 c0                	test   eax,eax
c00155ff:	74 1c                	je     c001561d <HalInitialiseCoprocessor()+0x43>
c0015601:	c7 05 0c 52 02 c0 ba bb 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bbba
c001560b:	c7 05 08 52 02 c0 cb bb 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bbcb
c0015615:	83 c4 0c             	add    esp,0xc
c0015618:	e9 bf 65 00 00       	jmp    c001bbdc <avxInit>
c001561d:	e8 4e 68 00 00       	call   c001be70 <absolutelyNoChanceInHell>
c0015622:	85 c0                	test   eax,eax
c0015624:	74 1c                	je     c0015642 <HalInitialiseCoprocessor()+0x68>
c0015626:	c7 05 0c 52 02 c0 88 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001be88
c0015630:	c7 05 08 52 02 c0 90 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001be90
c001563a:	83 c4 0c             	add    esp,0xc
c001563d:	e9 56 68 00 00       	jmp    c001be98 <sseInit>
c0015642:	e8 6f 68 00 00       	call   c001beb6 <x87Detect>
c0015647:	85 c0                	test   eax,eax
c0015649:	74 1c                	je     c0015667 <HalInitialiseCoprocessor()+0x8d>
c001564b:	c7 05 0c 52 02 c0 d1 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bed1
c0015655:	c7 05 08 52 02 c0 d8 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bed8
c001565f:	83 c4 0c             	add    esp,0xc
c0015662:	e9 78 68 00 00       	jmp    c001bedf <x87Init>
c0015667:	c7 05 0c 52 02 c0 60 4f 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014f60
c0015671:	c7 05 08 52 02 c0 60 4f 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014f60
c001567b:	0f 20 c0             	mov    eax,cr0
c001567e:	83 c8 04             	or     eax,0x4
c0015681:	0f 22 c0             	mov    cr0,eax
c0015684:	83 c4 0c             	add    esp,0xc
c0015687:	c3                   	ret    

c0015688 <HalPanic(char const*)>:
c0015688:	53                   	push   ebx
c0015689:	83 ec 10             	sub    esp,0x10
c001568c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015690:	fa                   	cli    
c0015691:	53                   	push   ebx
c0015692:	68 ba ef 01 c0       	push   0xc001efba
c0015697:	e8 7d 4f ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001569c:	83 c4 0c             	add    esp,0xc
c001569f:	6a 01                	push   0x1
c00156a1:	6a 0f                	push   0xf
c00156a3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156a9:	e8 9c 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156ae:	58                   	pop    eax
c00156af:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156b5:	e8 88 2d ff ff       	call   c0008442 <VgaText::clearScreen()>
c00156ba:	5a                   	pop    edx
c00156bb:	59                   	pop    ecx
c00156bc:	68 c8 d8 01 c0       	push   0xc001d8c8
c00156c1:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156c7:	e8 b6 2b ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00156cc:	83 c4 0c             	add    esp,0xc
c00156cf:	6a 01                	push   0x1
c00156d1:	6a 0f                	push   0xf
c00156d3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156d9:	e8 6c 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156de:	58                   	pop    eax
c00156df:	5a                   	pop    edx
c00156e0:	68 d3 ef 01 c0       	push   0xc001efd3
c00156e5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156eb:	e8 46 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156f0:	83 c4 0c             	add    esp,0xc
c00156f3:	6a 0f                	push   0xf
c00156f5:	6a 01                	push   0x1
c00156f7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156fd:	e8 48 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015702:	59                   	pop    ecx
c0015703:	58                   	pop    eax
c0015704:	68 dc ef 01 c0       	push   0xc001efdc
c0015709:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001570f:	e8 22 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015714:	83 c4 0c             	add    esp,0xc
c0015717:	6a 01                	push   0x1
c0015719:	6a 0f                	push   0xf
c001571b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015721:	e8 24 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015726:	58                   	pop    eax
c0015727:	5a                   	pop    edx
c0015728:	68 20 f0 01 c0       	push   0xc001f020
c001572d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015733:	e8 fe 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015738:	59                   	pop    ecx
c0015739:	58                   	pop    eax
c001573a:	68 e9 ef 01 c0       	push   0xc001efe9
c001573f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015745:	e8 ec 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001574a:	58                   	pop    eax
c001574b:	5a                   	pop    edx
c001574c:	68 23 f0 01 c0       	push   0xc001f023
c0015751:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015757:	e8 da 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001575c:	59                   	pop    ecx
c001575d:	58                   	pop    eax
c001575e:	53                   	push   ebx
c001575f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015765:	e8 cc 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001576a:	58                   	pop    eax
c001576b:	5a                   	pop    edx
c001576c:	68 20 f0 01 c0       	push   0xc001f020
c0015771:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015777:	e8 ba 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001577c:	83 c4 10             	add    esp,0x10
c001577f:	eb fe                	jmp    c001577f <HalPanic(char const*)+0xf7>

c0015781 <HalQueryPerformanceCounter()>:
c0015781:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015786:	31 d2                	xor    edx,edx
c0015788:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001578e:	31 c0                	xor    eax,eax
c0015790:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015797:	74 02                	je     c001579b <HalQueryPerformanceCounter()+0x1a>
c0015799:	0f 31                	rdtsc  
c001579b:	c3                   	ret    

c001579c <HalInitialise()>:
c001579c:	53                   	push   ebx
c001579d:	83 ec 08             	sub    esp,0x8
c00157a0:	e8 1a 6a ff ff       	call   c000c1bf <setupINTS()>
c00157a5:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c00157ac:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00157b1:	75 07                	jne    c00157ba <HalInitialise()+0x1e>
c00157b3:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00157ba:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00157c0:	83 e0 01             	and    eax,0x1
c00157c3:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c00157c8:	e8 a7 02 00 00       	call   c0015a74 <picOpen()>
c00157cd:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00157d4:	74 0a                	je     c00157e0 <HalInitialise()+0x44>
c00157d6:	e8 e1 01 00 00       	call   c00159bc <picDisable()>
c00157db:	e8 26 5d 00 00       	call   c001b506 <apicOpen()>
c00157e0:	bb 0f 00 00 00       	mov    ebx,0xf
c00157e5:	50                   	push   eax
c00157e6:	6a 00                	push   0x0
c00157e8:	68 61 54 01 c0       	push   0xc0015461
c00157ed:	6a 00                	push   0x0
c00157ef:	e8 98 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f4:	83 c4 0c             	add    esp,0xc
c00157f7:	6a 00                	push   0x0
c00157f9:	68 61 54 01 c0       	push   0xc0015461
c00157fe:	6a 01                	push   0x1
c0015800:	e8 87 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015805:	83 c4 0c             	add    esp,0xc
c0015808:	6a 00                	push   0x0
c001580a:	68 61 4f 01 c0       	push   0xc0014f61
c001580f:	6a 02                	push   0x2
c0015811:	e8 76 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015816:	83 c4 0c             	add    esp,0xc
c0015819:	6a 00                	push   0x0
c001581b:	68 61 54 01 c0       	push   0xc0015461
c0015820:	6a 03                	push   0x3
c0015822:	e8 65 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015827:	83 c4 0c             	add    esp,0xc
c001582a:	6a 00                	push   0x0
c001582c:	68 61 54 01 c0       	push   0xc0015461
c0015831:	6a 04                	push   0x4
c0015833:	e8 54 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015838:	83 c4 0c             	add    esp,0xc
c001583b:	6a 00                	push   0x0
c001583d:	68 61 54 01 c0       	push   0xc0015461
c0015842:	6a 05                	push   0x5
c0015844:	e8 43 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015849:	83 c4 0c             	add    esp,0xc
c001584c:	6a 00                	push   0x0
c001584e:	68 95 54 01 c0       	push   0xc0015495
c0015853:	6a 06                	push   0x6
c0015855:	e8 32 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001585a:	83 c4 0c             	add    esp,0xc
c001585d:	6a 00                	push   0x0
c001585f:	68 7a 4f 01 c0       	push   0xc0014f7a
c0015864:	6a 08                	push   0x8
c0015866:	e8 21 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001586b:	83 c4 0c             	add    esp,0xc
c001586e:	6a 00                	push   0x0
c0015870:	68 61 54 01 c0       	push   0xc0015461
c0015875:	6a 09                	push   0x9
c0015877:	e8 10 67 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001587c:	83 c4 0c             	add    esp,0xc
c001587f:	6a 00                	push   0x0
c0015881:	68 61 54 01 c0       	push   0xc0015461
c0015886:	6a 0a                	push   0xa
c0015888:	e8 ff 66 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588d:	83 c4 0c             	add    esp,0xc
c0015890:	6a 00                	push   0x0
c0015892:	68 61 54 01 c0       	push   0xc0015461
c0015897:	6a 0b                	push   0xb
c0015899:	e8 ee 66 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001589e:	83 c4 0c             	add    esp,0xc
c00158a1:	6a 00                	push   0x0
c00158a3:	68 76 53 01 c0       	push   0xc0015376
c00158a8:	6a 0d                	push   0xd
c00158aa:	e8 dd 66 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158af:	83 c4 0c             	add    esp,0xc
c00158b2:	6a 00                	push   0x0
c00158b4:	68 db 53 01 c0       	push   0xc00153db
c00158b9:	6a 0e                	push   0xe
c00158bb:	e8 cc 66 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c0:	83 c4 10             	add    esp,0x10
c00158c3:	50                   	push   eax
c00158c4:	6a 00                	push   0x0
c00158c6:	68 61 54 01 c0       	push   0xc0015461
c00158cb:	53                   	push   ebx
c00158cc:	43                   	inc    ebx
c00158cd:	e8 ba 66 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d2:	83 c4 10             	add    esp,0x10
c00158d5:	83 fb 1e             	cmp    ebx,0x1e
c00158d8:	75 e9                	jne    c00158c3 <HalInitialise()+0x127>
c00158da:	50                   	push   eax
c00158db:	6a 00                	push   0x0
c00158dd:	68 eb 14 01 c0       	push   0xc00114eb
c00158e2:	6a 60                	push   0x60
c00158e4:	e8 a3 66 ff ff       	call   c000bf8c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00158ee:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00158f8:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00158ff:	e8 b5 1e ff ff       	call   c00077b9 <malloc>
c0015904:	89 04 24             	mov    DWORD PTR [esp],eax
c0015907:	89 c3                	mov    ebx,eax
c0015909:	e8 2e 09 00 00       	call   c001623c <RTC::RTC()>
c001590e:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015918:	5a                   	pop    edx
c0015919:	59                   	pop    ecx
c001591a:	53                   	push   ebx
c001591b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015921:	e8 32 61 ff ff       	call   c000ba58 <Device::addChild(Device*)>
c0015926:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015928:	6a 00                	push   0x0
c001592a:	6a 00                	push   0x0
c001592c:	6a 00                	push   0x0
c001592e:	53                   	push   ebx
c001592f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015932:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015937:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001593d:	83 c4 28             	add    esp,0x28
c0015940:	5b                   	pop    ebx
c0015941:	c3                   	ret    

c0015942 <HalMakeBeep(int)>:
c0015942:	53                   	push   ebx
c0015943:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015947:	85 db                	test   ebx,ebx
c0015949:	75 07                	jne    c0015952 <HalMakeBeep(int)+0x10>
c001594b:	e4 61                	in     al,0x61
c001594d:	83 e0 fc             	and    eax,0xfffffffc
c0015950:	eb 26                	jmp    c0015978 <HalMakeBeep(int)+0x36>
c0015952:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015957:	99                   	cdq    
c0015958:	f7 fb                	idiv   ebx
c001595a:	89 c1                	mov    ecx,eax
c001595c:	b0 b6                	mov    al,0xb6
c001595e:	e6 43                	out    0x43,al
c0015960:	88 c8                	mov    al,cl
c0015962:	e6 42                	out    0x42,al
c0015964:	89 c8                	mov    eax,ecx
c0015966:	c1 e8 08             	shr    eax,0x8
c0015969:	e6 42                	out    0x42,al
c001596b:	e4 61                	in     al,0x61
c001596d:	88 c2                	mov    dl,al
c001596f:	83 ca 03             	or     edx,0x3
c0015972:	38 c2                	cmp    dl,al
c0015974:	74 04                	je     c001597a <HalMakeBeep(int)+0x38>
c0015976:	88 d0                	mov    al,dl
c0015978:	e6 61                	out    0x61,al
c001597a:	5b                   	pop    ebx
c001597b:	c3                   	ret    

c001597c <HalGetRand()>:
c001597c:	31 c0                	xor    eax,eax
c001597e:	c3                   	ret    

c001597f <HalEndOfInterrupt(int)>:
c001597f:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c0015986:	74 23                	je     c00159ab <HalEndOfInterrupt(int)+0x2c>
c0015988:	83 ec 14             	sub    esp,0x14
c001598b:	6a 1b                	push   0x1b
c001598d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015993:	e8 5a 14 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015998:	25 00 f0 ff ff       	and    eax,0xfffff000
c001599d:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00159a7:	83 c4 1c             	add    esp,0x1c
c00159aa:	c3                   	ret    
c00159ab:	e9 54 02 00 00       	jmp    c0015c04 <picEOI(int)>

c00159b0 <HalRestart()>:
c00159b0:	c3                   	ret    

c00159b1 <HalShutdown()>:
c00159b1:	c3                   	ret    

c00159b2 <HalSleep()>:
c00159b2:	c3                   	ret    
c00159b3:	90                   	nop

c00159b4 <picIoWait()>:
c00159b4:	eb 00                	jmp    c00159b6 <picIoWait()+0x2>
c00159b6:	eb 00                	jmp    c00159b8 <picIoWait()+0x4>
c00159b8:	90                   	nop
c00159b9:	c3                   	ret    
c00159ba:	66 90                	xchg   ax,ax

c00159bc <picDisable()>:
c00159bc:	83 ec 10             	sub    esp,0x10
c00159bf:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00159c6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00159cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00159d4:	ee                   	out    dx,al
c00159d5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00159dc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00159e1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00159e5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00159ea:	ee                   	out    dx,al
c00159eb:	90                   	nop
c00159ec:	83 c4 10             	add    esp,0x10
c00159ef:	c3                   	ret    

c00159f0 <picGetIRQReg(int)>:
c00159f0:	83 ec 10             	sub    esp,0x10
c00159f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159f7:	25 ff 00 00 00       	and    eax,0xff
c00159fc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a03:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a07:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a0b:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a10:	ee                   	out    dx,al
c0015a11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a15:	25 ff 00 00 00       	and    eax,0xff
c0015a1a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a21:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015a25:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a29:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a2e:	ee                   	out    dx,al
c0015a2f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015a36:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015a3b:	89 c2                	mov    edx,eax
c0015a3d:	ec                   	in     al,dx
c0015a3e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015a42:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a46:	25 ff 00 00 00       	and    eax,0xff
c0015a4b:	c1 e0 08             	shl    eax,0x8
c0015a4e:	89 c1                	mov    ecx,eax
c0015a50:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015a57:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015a5c:	89 c2                	mov    edx,eax
c0015a5e:	ec                   	in     al,dx
c0015a5f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015a63:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a67:	25 ff 00 00 00       	and    eax,0xff
c0015a6c:	09 c8                	or     eax,ecx
c0015a6e:	83 c4 10             	add    esp,0x10
c0015a71:	c3                   	ret    
c0015a72:	66 90                	xchg   ax,ax

c0015a74 <picOpen()>:
c0015a74:	83 ec 50             	sub    esp,0x50
c0015a77:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015a7e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015a83:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015a87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a8b:	ee                   	out    dx,al
c0015a8c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015a93:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015a98:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015aa0:	ee                   	out    dx,al
c0015aa1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015aa9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015ab1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015ab8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015abc:	89 c2                	mov    edx,eax
c0015abe:	ec                   	in     al,dx
c0015abf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015ac3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015ac7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015acb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015ad2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ad6:	89 c2                	mov    edx,eax
c0015ad8:	ec                   	in     al,dx
c0015ad9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015add:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015ae1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015ae5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015aec:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015af1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015af5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015af9:	ee                   	out    dx,al
c0015afa:	e8 b5 fe ff ff       	call   c00159b4 <picIoWait()>
c0015aff:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b06:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b0b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b0f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b13:	ee                   	out    dx,al
c0015b14:	e8 9b fe ff ff       	call   c00159b4 <picIoWait()>
c0015b19:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b1d:	25 ff 00 00 00       	and    eax,0xff
c0015b22:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015b29:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015b2d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015b31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b35:	ee                   	out    dx,al
c0015b36:	e8 79 fe ff ff       	call   c00159b4 <picIoWait()>
c0015b3b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b3f:	25 ff 00 00 00       	and    eax,0xff
c0015b44:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015b4b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015b4f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015b53:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b57:	ee                   	out    dx,al
c0015b58:	e8 57 fe ff ff       	call   c00159b4 <picIoWait()>
c0015b5d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015b64:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015b69:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015b6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015b71:	ee                   	out    dx,al
c0015b72:	e8 3d fe ff ff       	call   c00159b4 <picIoWait()>
c0015b77:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015b7e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015b83:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015b87:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015b8b:	ee                   	out    dx,al
c0015b8c:	e8 23 fe ff ff       	call   c00159b4 <picIoWait()>
c0015b91:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015b98:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b9d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015ba1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015ba5:	ee                   	out    dx,al
c0015ba6:	e8 09 fe ff ff       	call   c00159b4 <picIoWait()>
c0015bab:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015bb2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015bb7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015bbb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015bbf:	ee                   	out    dx,al
c0015bc0:	e8 ef fd ff ff       	call   c00159b4 <picIoWait()>
c0015bc5:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015bc9:	25 ff 00 00 00       	and    eax,0xff
c0015bce:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015bd5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015bd9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015bdd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015be1:	ee                   	out    dx,al
c0015be2:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015be6:	25 ff 00 00 00       	and    eax,0xff
c0015beb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015bf2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015bf6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015bfa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015bfe:	ee                   	out    dx,al
c0015bff:	90                   	nop
c0015c00:	83 c4 50             	add    esp,0x50
c0015c03:	c3                   	ret    

c0015c04 <picEOI(int)>:
c0015c04:	83 ec 10             	sub    esp,0x10
c0015c07:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c0c:	75 22                	jne    c0015c30 <picEOI(int)+0x2c>
c0015c0e:	6a 0b                	push   0xb
c0015c10:	e8 db fd ff ff       	call   c00159f0 <picGetIRQReg(int)>
c0015c15:	83 c4 04             	add    esp,0x4
c0015c18:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015c1d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c22:	25 ff ff 00 00       	and    eax,0xffff
c0015c27:	25 80 00 00 00       	and    eax,0x80
c0015c2c:	74 72                	je     c0015ca0 <picEOI(int)+0x9c>
c0015c2e:	66 90                	xchg   ax,ax
c0015c30:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015c35:	75 31                	jne    c0015c68 <picEOI(int)+0x64>
c0015c37:	6a 0b                	push   0xb
c0015c39:	e8 b2 fd ff ff       	call   c00159f0 <picGetIRQReg(int)>
c0015c3e:	83 c4 04             	add    esp,0x4
c0015c41:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c4a:	66 85 c0             	test   ax,ax
c0015c4d:	78 19                	js     c0015c68 <picEOI(int)+0x64>
c0015c4f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015c56:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015c5b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015c5f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015c64:	ee                   	out    dx,al
c0015c65:	eb 3d                	jmp    c0015ca4 <picEOI(int)+0xa0>
c0015c67:	90                   	nop
c0015c68:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c6d:	7e 19                	jle    c0015c88 <picEOI(int)+0x84>
c0015c6f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015c76:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015c7b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015c7f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015c84:	ee                   	out    dx,al
c0015c85:	8d 76 00             	lea    esi,[esi+0x0]
c0015c88:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015c8f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015c94:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c98:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c9d:	ee                   	out    dx,al
c0015c9e:	eb 04                	jmp    c0015ca4 <picEOI(int)+0xa0>
c0015ca0:	90                   	nop
c0015ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ca4:	83 c4 10             	add    esp,0x10
c0015ca7:	c3                   	ret    

c0015ca8 <RTC::open(int, int, void*)>:
c0015ca8:	31 c0                	xor    eax,eax
c0015caa:	c3                   	ret    
c0015cab:	90                   	nop

c0015cac <RTC::close(int, int, void*)>:
c0015cac:	31 c0                	xor    eax,eax
c0015cae:	c3                   	ret    
c0015caf:	90                   	nop

c0015cb0 <RTC::timeInSecondsUTC()>:
c0015cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cb4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015cba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015cc0:	c3                   	ret    
c0015cc1:	90                   	nop

c0015cc2 <RTC::timeInDatetimeUTC()>:
c0015cc2:	53                   	push   ebx
c0015cc3:	83 ec 14             	sub    esp,0x14
c0015cc6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cce:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cd0:	50                   	push   eax
c0015cd1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015cd4:	83 c4 0c             	add    esp,0xc
c0015cd7:	52                   	push   edx
c0015cd8:	50                   	push   eax
c0015cd9:	53                   	push   ebx
c0015cda:	e8 ed 5a ff ff       	call   c000b7cc <secondsToDatetime(unsigned long long)>
c0015cdf:	89 d8                	mov    eax,ebx
c0015ce1:	83 c4 14             	add    esp,0x14
c0015ce4:	5b                   	pop    ebx
c0015ce5:	c2 04 00             	ret    0x4

c0015ce8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015ce8:	56                   	push   esi
c0015ce9:	53                   	push   ebx
c0015cea:	83 ec 14             	sub    esp,0x14
c0015ced:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015cf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cf3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015cf6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015cfa:	52                   	push   edx
c0015cfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d03:	50                   	push   eax
c0015d04:	e8 c3 5a ff ff       	call   c000b7cc <secondsToDatetime(unsigned long long)>
c0015d09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d15:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015d19:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d1d:	89 f0                	mov    eax,esi
c0015d1f:	83 c4 20             	add    esp,0x20
c0015d22:	5b                   	pop    ebx
c0015d23:	5e                   	pop    esi
c0015d24:	ff e0                	jmp    eax

c0015d26 <RTC::~RTC()>:
c0015d26:	83 ec 0c             	sub    esp,0xc
c0015d29:	ba c0 f0 01 c0       	mov    edx,0xc001f0c0
c0015d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d32:	89 10                	mov    DWORD PTR [eax],edx
c0015d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	50                   	push   eax
c0015d3c:	e8 0f 58 ff ff       	call   c000b550 <Clock::~Clock()>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	90                   	nop
c0015d45:	83 c4 0c             	add    esp,0xc
c0015d48:	c3                   	ret    
c0015d49:	90                   	nop

c0015d4a <RTC::~RTC()>:
c0015d4a:	83 ec 0c             	sub    esp,0xc
c0015d4d:	83 ec 0c             	sub    esp,0xc
c0015d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d54:	e8 cd ff ff ff       	call   c0015d26 <RTC::~RTC()>
c0015d59:	83 c4 10             	add    esp,0x10
c0015d5c:	83 ec 08             	sub    esp,0x8
c0015d5f:	68 60 01 00 00       	push   0x160
c0015d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d68:	e8 b6 47 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	83 c4 0c             	add    esp,0xc
c0015d73:	c3                   	ret    

c0015d74 <RTC::get_update_in_progress_flag()>:
c0015d74:	83 ec 14             	sub    esp,0x14
c0015d77:	6a 0a                	push   0xa
c0015d79:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d7f:	e8 22 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d84:	83 c4 1c             	add    esp,0x1c
c0015d87:	c0 e8 07             	shr    al,0x7
c0015d8a:	c3                   	ret    
c0015d8b:	90                   	nop

c0015d8c <RTC::completeRTCRefresh()>:
c0015d8c:	55                   	push   ebp
c0015d8d:	57                   	push   edi
c0015d8e:	56                   	push   esi
c0015d8f:	53                   	push   ebx
c0015d90:	83 ec 2c             	sub    esp,0x2c
c0015d93:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d99:	83 ec 0c             	sub    esp,0xc
c0015d9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015da0:	e8 cf ff ff ff       	call   c0015d74 <RTC::get_update_in_progress_flag()>
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	84 c0                	test   al,al
c0015daa:	74 0e                	je     c0015dba <RTC::completeRTCRefresh()+0x2e>
c0015dac:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015db2:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015db8:	73 df                	jae    c0015d99 <RTC::completeRTCRefresh()+0xd>
c0015dba:	55                   	push   ebp
c0015dbb:	55                   	push   ebp
c0015dbc:	6a 00                	push   0x0
c0015dbe:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dc4:	e8 dd 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dc9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015dcd:	58                   	pop    eax
c0015dce:	5a                   	pop    edx
c0015dcf:	6a 02                	push   0x2
c0015dd1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dd7:	e8 ca 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ddc:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015de0:	59                   	pop    ecx
c0015de1:	5b                   	pop    ebx
c0015de2:	6a 04                	push   0x4
c0015de4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dea:	e8 b7 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015def:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015df3:	5e                   	pop    esi
c0015df4:	5f                   	pop    edi
c0015df5:	6a 07                	push   0x7
c0015df7:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dfd:	e8 a4 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e02:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e06:	5d                   	pop    ebp
c0015e07:	58                   	pop    eax
c0015e08:	6a 08                	push   0x8
c0015e0a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e10:	e8 91 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e15:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015e19:	58                   	pop    eax
c0015e1a:	5a                   	pop    edx
c0015e1b:	6a 09                	push   0x9
c0015e1d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e23:	e8 7e 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e28:	83 c4 10             	add    esp,0x10
c0015e2b:	0f b6 e8             	movzx  ebp,al
c0015e2e:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015e34:	83 ec 0c             	sub    esp,0xc
c0015e37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e3b:	e8 34 ff ff ff       	call   c0015d74 <RTC::get_update_in_progress_flag()>
c0015e40:	83 c4 10             	add    esp,0x10
c0015e43:	84 c0                	test   al,al
c0015e45:	74 0e                	je     c0015e55 <RTC::completeRTCRefresh()+0xc9>
c0015e47:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e4d:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015e53:	73 df                	jae    c0015e34 <RTC::completeRTCRefresh()+0xa8>
c0015e55:	50                   	push   eax
c0015e56:	50                   	push   eax
c0015e57:	6a 00                	push   0x0
c0015e59:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e5f:	e8 42 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e64:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015e68:	58                   	pop    eax
c0015e69:	5a                   	pop    edx
c0015e6a:	6a 02                	push   0x2
c0015e6c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e72:	e8 2f 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e7b:	59                   	pop    ecx
c0015e7c:	5b                   	pop    ebx
c0015e7d:	6a 04                	push   0x4
c0015e7f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e85:	e8 1c 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e8a:	5e                   	pop    esi
c0015e8b:	88 c3                	mov    bl,al
c0015e8d:	5f                   	pop    edi
c0015e8e:	6a 07                	push   0x7
c0015e90:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e96:	e8 0b 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e9b:	89 c6                	mov    esi,eax
c0015e9d:	58                   	pop    eax
c0015e9e:	5a                   	pop    edx
c0015e9f:	6a 08                	push   0x8
c0015ea1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ea7:	e8 fa 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015eac:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015eb0:	59                   	pop    ecx
c0015eb1:	5f                   	pop    edi
c0015eb2:	6a 09                	push   0x9
c0015eb4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015eba:	e8 e7 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ebf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015ec3:	0f b6 f8             	movzx  edi,al
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015ecd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ed1:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015ed5:	89 f1                	mov    ecx,esi
c0015ed7:	0f 94 c0             	sete   al
c0015eda:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015ede:	0f 94 c2             	sete   dl
c0015ee1:	21 d0                	and    eax,edx
c0015ee3:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015ee7:	0f 94 c2             	sete   dl
c0015eea:	21 c2                	and    edx,eax
c0015eec:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015ef0:	0f 94 c0             	sete   al
c0015ef3:	21 d0                	and    eax,edx
c0015ef5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ef9:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015efd:	0f 94 c1             	sete   cl
c0015f00:	84 c8                	test   al,cl
c0015f02:	75 29                	jne    c0015f2d <RTC::completeRTCRefresh()+0x1a1>
c0015f04:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f08:	89 fd                	mov    ebp,edi
c0015f0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f0e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f12:	89 f0                	mov    eax,esi
c0015f14:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015f18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f1c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f20:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f24:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f28:	e9 01 ff ff ff       	jmp    c0015e2e <RTC::completeRTCRefresh()+0xa2>
c0015f2d:	39 fd                	cmp    ebp,edi
c0015f2f:	75 d3                	jne    c0015f04 <RTC::completeRTCRefresh()+0x178>
c0015f31:	55                   	push   ebp
c0015f32:	55                   	push   ebp
c0015f33:	6a 0b                	push   0xb
c0015f35:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f3b:	e8 66 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f40:	83 c4 10             	add    esp,0x10
c0015f43:	89 c5                	mov    ebp,eax
c0015f45:	a8 04                	test   al,0x4
c0015f47:	75 78                	jne    c0015fc1 <RTC::completeRTCRefresh()+0x235>
c0015f49:	b1 0a                	mov    cl,0xa
c0015f4b:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015f4f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f53:	83 e2 0f             	and    edx,0xf
c0015f56:	c0 e8 04             	shr    al,0x4
c0015f59:	c1 ef 04             	shr    edi,0x4
c0015f5c:	f6 e1                	mul    cl
c0015f5e:	6b ff 0a             	imul   edi,edi,0xa
c0015f61:	01 d0                	add    eax,edx
c0015f63:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f67:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015f6b:	83 e2 0f             	and    edx,0xf
c0015f6e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f72:	c0 e8 04             	shr    al,0x4
c0015f75:	f6 e1                	mul    cl
c0015f77:	01 d0                	add    eax,edx
c0015f79:	88 da                	mov    dl,bl
c0015f7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f7f:	83 e2 0f             	and    edx,0xf
c0015f82:	88 d8                	mov    al,bl
c0015f84:	83 e3 80             	and    ebx,0xffffff80
c0015f87:	c0 e8 04             	shr    al,0x4
c0015f8a:	83 e0 07             	and    eax,0x7
c0015f8d:	f6 e1                	mul    cl
c0015f8f:	01 d0                	add    eax,edx
c0015f91:	89 f2                	mov    edx,esi
c0015f93:	09 c3                	or     ebx,eax
c0015f95:	83 e2 0f             	and    edx,0xf
c0015f98:	89 f0                	mov    eax,esi
c0015f9a:	c0 e8 04             	shr    al,0x4
c0015f9d:	f6 e1                	mul    cl
c0015f9f:	8d 34 02             	lea    esi,[edx+eax*1]
c0015fa2:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015fa6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015faa:	83 e2 0f             	and    edx,0xf
c0015fad:	c0 e8 04             	shr    al,0x4
c0015fb0:	f6 e1                	mul    cl
c0015fb2:	01 d0                	add    eax,edx
c0015fb4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015fb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015fbc:	83 e0 0f             	and    eax,0xf
c0015fbf:	01 c7                	add    edi,eax
c0015fc1:	83 e5 02             	and    ebp,0x2
c0015fc4:	75 14                	jne    c0015fda <RTC::completeRTCRefresh()+0x24e>
c0015fc6:	84 db                	test   bl,bl
c0015fc8:	79 10                	jns    c0015fda <RTC::completeRTCRefresh()+0x24e>
c0015fca:	83 e3 7f             	and    ebx,0x7f
c0015fcd:	b9 18 00 00 00       	mov    ecx,0x18
c0015fd2:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015fd5:	99                   	cdq    
c0015fd6:	f7 f9                	idiv   ecx
c0015fd8:	88 d3                	mov    bl,dl
c0015fda:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015fe0:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015fe6:	77 06                	ja     c0015fee <RTC::completeRTCRefresh()+0x262>
c0015fe8:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015fee:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015ff3:	31 d2                	xor    edx,edx
c0015ff5:	c1 e1 10             	shl    ecx,0x10
c0015ff8:	89 d7                	mov    edi,edx
c0015ffa:	c1 e5 10             	shl    ebp,0x10
c0015ffd:	31 c0                	xor    eax,eax
c0015fff:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016005:	09 cf                	or     edi,ecx
c0016007:	89 fa                	mov    edx,edi
c0016009:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001600d:	88 da                	mov    dl,bl
c001600f:	89 f3                	mov    ebx,esi
c0016011:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016015:	88 d8                	mov    al,bl
c0016017:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001601b:	0f b7 c8             	movzx  ecx,ax
c001601e:	09 e9                	or     ecx,ebp
c0016020:	89 c8                	mov    eax,ecx
c0016022:	51                   	push   ecx
c0016023:	51                   	push   ecx
c0016024:	52                   	push   edx
c0016025:	50                   	push   eax
c0016026:	e8 14 56 ff ff       	call   c000b63f <datetimeToSeconds(datetime_t)>
c001602b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001602f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016035:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001603b:	83 c4 3c             	add    esp,0x3c
c001603e:	5b                   	pop    ebx
c001603f:	5e                   	pop    esi
c0016040:	5f                   	pop    edi
c0016041:	5d                   	pop    ebp
c0016042:	c3                   	ret    
c0016043:	90                   	nop

c0016044 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016044:	55                   	push   ebp
c0016045:	57                   	push   edi
c0016046:	56                   	push   esi
c0016047:	53                   	push   ebx
c0016048:	83 ec 30             	sub    esp,0x30
c001604b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001604f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016053:	6a 00                	push   0x0
c0016055:	6a 00                	push   0x0
c0016057:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001605d:	e8 5a 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016062:	83 c4 0c             	add    esp,0xc
c0016065:	6a 00                	push   0x0
c0016067:	6a 02                	push   0x2
c0016069:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001606f:	e8 48 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016074:	31 d2                	xor    edx,edx
c0016076:	89 f9                	mov    ecx,edi
c0016078:	89 f8                	mov    eax,edi
c001607a:	c1 e9 10             	shr    ecx,0x10
c001607d:	0f b6 c4             	movzx  eax,ah
c0016080:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016084:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016088:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001608c:	b9 64 00 00 00       	mov    ecx,0x64
c0016091:	89 f0                	mov    eax,esi
c0016093:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016097:	89 f0                	mov    eax,esi
c0016099:	0f b6 c4             	movzx  eax,ah
c001609c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160a0:	89 f0                	mov    eax,esi
c00160a2:	c1 e8 10             	shr    eax,0x10
c00160a5:	66 f7 f1             	div    cx
c00160a8:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c00160ad:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c00160b2:	59                   	pop    ecx
c00160b3:	5b                   	pop    ebx
c00160b4:	89 fb                	mov    ebx,edi
c00160b6:	6a 0b                	push   0xb
c00160b8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160be:	e8 e3 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00160c3:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00160c7:	83 c4 10             	add    esp,0x10
c00160ca:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c00160cf:	75 74                	jne    c0016145 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c00160d1:	b2 0a                	mov    dl,0xa
c00160d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00160d7:	0f b6 c1             	movzx  eax,cl
c00160da:	f6 f2                	div    dl
c00160dc:	88 c3                	mov    bl,al
c00160de:	88 e0                	mov    al,ah
c00160e0:	c1 e3 04             	shl    ebx,0x4
c00160e3:	09 c3                	or     ebx,eax
c00160e5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00160ea:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c00160ee:	f6 f2                	div    dl
c00160f0:	88 c1                	mov    cl,al
c00160f2:	88 e0                	mov    al,ah
c00160f4:	c1 e1 04             	shl    ecx,0x4
c00160f7:	09 c1                	or     ecx,eax
c00160f9:	89 f8                	mov    eax,edi
c00160fb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00160ff:	0f b6 c0             	movzx  eax,al
c0016102:	f6 f2                	div    dl
c0016104:	88 c3                	mov    bl,al
c0016106:	88 e0                	mov    al,ah
c0016108:	c1 e3 04             	shl    ebx,0x4
c001610b:	09 c3                	or     ebx,eax
c001610d:	89 f0                	mov    eax,esi
c001610f:	0f b6 c0             	movzx  eax,al
c0016112:	f6 f2                	div    dl
c0016114:	88 c1                	mov    cl,al
c0016116:	88 e0                	mov    al,ah
c0016118:	c1 e1 04             	shl    ecx,0x4
c001611b:	09 c1                	or     ecx,eax
c001611d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016122:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016126:	f6 f2                	div    dl
c0016128:	88 c1                	mov    cl,al
c001612a:	88 e0                	mov    al,ah
c001612c:	c1 e1 04             	shl    ecx,0x4
c001612f:	09 c1                	or     ecx,eax
c0016131:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016136:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001613a:	f6 f2                	div    dl
c001613c:	89 c5                	mov    ebp,eax
c001613e:	88 e0                	mov    al,ah
c0016140:	c1 e5 04             	shl    ebp,0x4
c0016143:	09 c5                	or     ebp,eax
c0016145:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001614a:	75 17                	jne    c0016163 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001614c:	80 fb 0b             	cmp    bl,0xb
c001614f:	76 0c                	jbe    c001615d <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016151:	80 eb 0c             	sub    bl,0xc
c0016154:	75 02                	jne    c0016158 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016156:	b3 0c                	mov    bl,0xc
c0016158:	83 cb 80             	or     ebx,0xffffff80
c001615b:	eb 06                	jmp    c0016163 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001615d:	84 db                	test   bl,bl
c001615f:	75 02                	jne    c0016163 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016161:	b3 0c                	mov    bl,0xc
c0016163:	0f b6 db             	movzx  ebx,bl
c0016166:	50                   	push   eax
c0016167:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001616c:	50                   	push   eax
c001616d:	6a 00                	push   0x0
c001616f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016175:	e8 42 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001617a:	83 c4 0c             	add    esp,0xc
c001617d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016182:	50                   	push   eax
c0016183:	6a 02                	push   0x2
c0016185:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001618b:	e8 2c 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016190:	83 c4 0c             	add    esp,0xc
c0016193:	53                   	push   ebx
c0016194:	6a 04                	push   0x4
c0016196:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001619c:	e8 1b 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161a1:	83 c4 0c             	add    esp,0xc
c00161a4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00161a9:	50                   	push   eax
c00161aa:	6a 07                	push   0x7
c00161ac:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161b2:	e8 05 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161b7:	83 c4 0c             	add    esp,0xc
c00161ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00161bf:	50                   	push   eax
c00161c0:	6a 08                	push   0x8
c00161c2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161c8:	e8 ef 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161cd:	83 c4 0c             	add    esp,0xc
c00161d0:	89 e8                	mov    eax,ebp
c00161d2:	0f b6 e8             	movzx  ebp,al
c00161d5:	55                   	push   ebp
c00161d6:	6a 09                	push   0x9
c00161d8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161de:	e8 d9 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161e3:	5a                   	pop    edx
c00161e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00161e8:	e8 9f fb ff ff       	call   c0015d8c <RTC::completeRTCRefresh()>
c00161ed:	83 c4 3c             	add    esp,0x3c
c00161f0:	b0 01                	mov    al,0x1
c00161f2:	5b                   	pop    ebx
c00161f3:	5e                   	pop    esi
c00161f4:	5f                   	pop    edi
c00161f5:	5d                   	pop    ebp
c00161f6:	c3                   	ret    

c00161f7 <rtcIRQHandler(regs*, void*)>:
c00161f7:	53                   	push   ebx
c00161f8:	83 ec 10             	sub    esp,0x10
c00161fb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00161ff:	6a 0c                	push   0xc
c0016201:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016207:	e8 9a 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001620c:	83 c4 10             	add    esp,0x10
c001620f:	84 c0                	test   al,al
c0016211:	79 24                	jns    c0016237 <rtcIRQHandler(regs*, void*)+0x40>
c0016213:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001621a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016221:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c0016228:	75 0d                	jne    c0016237 <rtcIRQHandler(regs*, void*)+0x40>
c001622a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001622e:	83 c4 08             	add    esp,0x8
c0016231:	5b                   	pop    ebx
c0016232:	e9 55 fb ff ff       	jmp    c0015d8c <RTC::completeRTCRefresh()>
c0016237:	83 c4 08             	add    esp,0x8
c001623a:	5b                   	pop    ebx
c001623b:	c3                   	ret    

c001623c <RTC::RTC()>:
c001623c:	83 ec 1c             	sub    esp,0x1c
c001623f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016243:	83 ec 08             	sub    esp,0x8
c0016246:	68 a3 f0 01 c0       	push   0xc001f0a3
c001624b:	50                   	push   eax
c001624c:	e8 c9 52 ff ff       	call   c000b51a <Clock::Clock(char const*)>
c0016251:	83 c4 10             	add    esp,0x10
c0016254:	ba c0 f0 01 c0       	mov    edx,0xc001f0c0
c0016259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001625d:	89 10                	mov    DWORD PTR [eax],edx
c001625f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016263:	83 ec 0c             	sub    esp,0xc
c0016266:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001626a:	6a 01                	push   0x1
c001626c:	68 f7 61 01 c0       	push   0xc00161f7
c0016271:	6a 08                	push   0x8
c0016273:	50                   	push   eax
c0016274:	e8 8b 57 ff ff       	call   c000ba04 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016279:	83 c4 20             	add    esp,0x20
c001627c:	89 c2                	mov    edx,eax
c001627e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016282:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016288:	fa                   	cli    
c0016289:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001628e:	40                   	inc    eax
c001628f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0016294:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016299:	83 ec 08             	sub    esp,0x8
c001629c:	6a 0b                	push   0xb
c001629e:	50                   	push   eax
c001629f:	e8 02 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00162a4:	83 c4 10             	add    esp,0x10
c00162a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162ab:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00162b0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00162b4:	83 ca 10             	or     edx,0x10
c00162b7:	81 e2 ff 00 00 00    	and    edx,0xff
c00162bd:	83 ec 04             	sub    esp,0x4
c00162c0:	52                   	push   edx
c00162c1:	6a 0b                	push   0xb
c00162c3:	50                   	push   eax
c00162c4:	e8 f3 0c ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00162c9:	83 c4 10             	add    esp,0x10
c00162cc:	83 ec 0c             	sub    esp,0xc
c00162cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d3:	e8 b4 fa ff ff       	call   c0015d8c <RTC::completeRTCRefresh()>
c00162d8:	83 c4 10             	add    esp,0x10
c00162db:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00162e0:	48                   	dec    eax
c00162e1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00162e6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00162eb:	85 c0                	test   eax,eax
c00162ed:	75 01                	jne    c00162f0 <RTC::RTC()+0xb4>
c00162ef:	fb                   	sti    
c00162f0:	90                   	nop
c00162f1:	83 c4 1c             	add    esp,0x1c
c00162f4:	c3                   	ret    
c00162f5:	66 90                	xchg   ax,ax
c00162f7:	90                   	nop

c00162f8 <HalConsoleScroll(int, int)>:
c00162f8:	83 ec 10             	sub    esp,0x10
c00162fb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016303:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001630b:	90                   	nop
c001630c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016311:	0f 8f e1 00 00 00    	jg     c00163f8 <HalConsoleScroll(int, int)+0x100>
c0016317:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001631f:	90                   	nop
c0016320:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016328:	0f 8f be 00 00 00    	jg     c00163ec <HalConsoleScroll(int, int)+0xf4>
c001632e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016332:	89 d0                	mov    eax,edx
c0016334:	c1 e0 02             	shl    eax,0x2
c0016337:	01 d0                	add    eax,edx
c0016339:	c1 e0 05             	shl    eax,0x5
c001633c:	89 c2                	mov    edx,eax
c001633e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016342:	01 d0                	add    eax,edx
c0016344:	89 c2                	mov    edx,eax
c0016346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001634a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001634d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016351:	89 d0                	mov    eax,edx
c0016353:	c1 e0 02             	shl    eax,0x2
c0016356:	01 d0                	add    eax,edx
c0016358:	c1 e0 05             	shl    eax,0x5
c001635b:	89 c2                	mov    edx,eax
c001635d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016361:	01 d0                	add    eax,edx
c0016363:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001636d:	01 c2                	add    edx,eax
c001636f:	8a 01                	mov    al,BYTE PTR [ecx]
c0016371:	88 02                	mov    BYTE PTR [edx],al
c0016373:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016378:	75 66                	jne    c00163e0 <HalConsoleScroll(int, int)+0xe8>
c001637a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001637e:	83 e0 01             	and    eax,0x1
c0016381:	74 39                	je     c00163bc <HalConsoleScroll(int, int)+0xc4>
c0016383:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016387:	83 e0 0f             	and    eax,0xf
c001638a:	88 c2                	mov    dl,al
c001638c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016390:	c1 e0 04             	shl    eax,0x4
c0016393:	88 d1                	mov    cl,dl
c0016395:	09 c1                	or     ecx,eax
c0016397:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001639b:	89 d0                	mov    eax,edx
c001639d:	c1 e0 02             	shl    eax,0x2
c00163a0:	01 d0                	add    eax,edx
c00163a2:	c1 e0 05             	shl    eax,0x5
c00163a5:	89 c2                	mov    edx,eax
c00163a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ab:	01 d0                	add    eax,edx
c00163ad:	89 c2                	mov    edx,eax
c00163af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b3:	01 d0                	add    eax,edx
c00163b5:	88 ca                	mov    dl,cl
c00163b7:	88 10                	mov    BYTE PTR [eax],dl
c00163b9:	eb 25                	jmp    c00163e0 <HalConsoleScroll(int, int)+0xe8>
c00163bb:	90                   	nop
c00163bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163c0:	89 d0                	mov    eax,edx
c00163c2:	c1 e0 02             	shl    eax,0x2
c00163c5:	01 d0                	add    eax,edx
c00163c7:	c1 e0 05             	shl    eax,0x5
c00163ca:	89 c2                	mov    edx,eax
c00163cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163d0:	01 d0                	add    eax,edx
c00163d2:	89 c2                	mov    edx,eax
c00163d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d8:	01 d0                	add    eax,edx
c00163da:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00163dd:	8d 76 00             	lea    esi,[esi+0x0]
c00163e0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00163e4:	e9 37 ff ff ff       	jmp    c0016320 <HalConsoleScroll(int, int)+0x28>
c00163e9:	8d 76 00             	lea    esi,[esi+0x0]
c00163ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00163f0:	e9 17 ff ff ff       	jmp    c001630c <HalConsoleScroll(int, int)+0x14>
c00163f5:	8d 76 00             	lea    esi,[esi+0x0]
c00163f8:	90                   	nop
c00163f9:	83 c4 10             	add    esp,0x10
c00163fc:	c3                   	ret    
c00163fd:	8d 76 00             	lea    esi,[esi+0x0]

c0016400 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016400:	83 ec 14             	sub    esp,0x14
c0016403:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016407:	88 04 24             	mov    BYTE PTR [esp],al
c001640a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001640d:	25 ff 00 00 00       	and    eax,0xff
c0016412:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016416:	89 d1                	mov    ecx,edx
c0016418:	83 e1 0f             	and    ecx,0xf
c001641b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001641f:	c1 e2 04             	shl    edx,0x4
c0016422:	81 e2 ff 00 00 00    	and    edx,0xff
c0016428:	09 ca                	or     edx,ecx
c001642a:	c1 e2 08             	shl    edx,0x8
c001642d:	09 d0                	or     eax,edx
c001642f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016434:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001643c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016440:	89 d0                	mov    eax,edx
c0016442:	c1 e0 02             	shl    eax,0x2
c0016445:	01 d0                	add    eax,edx
c0016447:	c1 e0 04             	shl    eax,0x4
c001644a:	89 c2                	mov    edx,eax
c001644c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016450:	01 d0                	add    eax,edx
c0016452:	01 c0                	add    eax,eax
c0016454:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001645c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016461:	66 89 02             	mov    WORD PTR [edx],ax
c0016464:	90                   	nop
c0016465:	83 c4 14             	add    esp,0x14
c0016468:	c3                   	ret    
c0016469:	8d 76 00             	lea    esi,[esi+0x0]

c001646c <HalConsoleCursorUpdate(int, int)>:
c001646c:	83 ec 20             	sub    esp,0x20
c001646f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016473:	89 c2                	mov    edx,eax
c0016475:	89 d0                	mov    eax,edx
c0016477:	c1 e0 02             	shl    eax,0x2
c001647a:	01 d0                	add    eax,edx
c001647c:	c1 e0 04             	shl    eax,0x4
c001647f:	89 c2                	mov    edx,eax
c0016481:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016485:	01 d0                	add    eax,edx
c0016487:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001648c:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016493:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016498:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001649c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164a0:	ee                   	out    dx,al
c00164a1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00164a6:	25 ff 00 00 00       	and    eax,0xff
c00164ab:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00164b2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00164b6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00164ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164be:	ee                   	out    dx,al
c00164bf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00164c6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00164cb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00164cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164d3:	ee                   	out    dx,al
c00164d4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00164d9:	66 c1 e8 08          	shr    ax,0x8
c00164dd:	25 ff 00 00 00       	and    eax,0xff
c00164e2:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00164e9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00164ed:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00164f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164f5:	ee                   	out    dx,al
c00164f6:	90                   	nop
c00164f7:	83 c4 20             	add    esp,0x20
c00164fa:	c3                   	ret    
c00164fb:	90                   	nop

c00164fc <FAT::getName()>:
c00164fc:	b8 f4 f0 01 c0       	mov    eax,0xc001f0f4
c0016501:	c3                   	ret    
c0016502:	66 90                	xchg   ax,ax

c0016504 <FAT::tell(void*, unsigned long long*)>:
c0016504:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016509:	75 09                	jne    c0016514 <FAT::tell(void*, unsigned long long*)+0x10>
c001650b:	b8 04 00 00 00       	mov    eax,0x4
c0016510:	c3                   	ret    
c0016511:	8d 76 00             	lea    esi,[esi+0x0]
c0016514:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016519:	75 09                	jne    c0016524 <FAT::tell(void*, unsigned long long*)+0x20>
c001651b:	b8 04 00 00 00       	mov    eax,0x4
c0016520:	c3                   	ret    
c0016521:	8d 76 00             	lea    esi,[esi+0x0]
c0016524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016528:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001652b:	ba 00 00 00 00       	mov    edx,0x0
c0016530:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016534:	89 01                	mov    DWORD PTR [ecx],eax
c0016536:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016539:	b8 00 00 00 00       	mov    eax,0x0
c001653e:	c3                   	ret    
c001653f:	90                   	nop

c0016540 <FAT::stat(void*, unsigned long long*)>:
c0016540:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016545:	75 09                	jne    c0016550 <FAT::stat(void*, unsigned long long*)+0x10>
c0016547:	b8 04 00 00 00       	mov    eax,0x4
c001654c:	c3                   	ret    
c001654d:	8d 76 00             	lea    esi,[esi+0x0]
c0016550:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016555:	75 09                	jne    c0016560 <FAT::stat(void*, unsigned long long*)+0x20>
c0016557:	b8 04 00 00 00       	mov    eax,0x4
c001655c:	c3                   	ret    
c001655d:	8d 76 00             	lea    esi,[esi+0x0]
c0016560:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016564:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016567:	ba 00 00 00 00       	mov    edx,0x0
c001656c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016570:	89 01                	mov    DWORD PTR [ecx],eax
c0016572:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016575:	b8 00 00 00 00       	mov    eax,0x0
c001657a:	c3                   	ret    
c001657b:	90                   	nop

c001657c <FAT::~FAT()>:
c001657c:	83 ec 0c             	sub    esp,0xc
c001657f:	ba 40 f1 01 c0       	mov    edx,0xc001f140
c0016584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016588:	89 10                	mov    DWORD PTR [eax],edx
c001658a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001658e:	83 ec 0c             	sub    esp,0xc
c0016591:	50                   	push   eax
c0016592:	e8 c7 43 ff ff       	call   c000a95e <Filesystem::~Filesystem()>
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	90                   	nop
c001659b:	83 c4 0c             	add    esp,0xc
c001659e:	c3                   	ret    
c001659f:	90                   	nop

c00165a0 <FAT::~FAT()>:
c00165a0:	83 ec 0c             	sub    esp,0xc
c00165a3:	83 ec 0c             	sub    esp,0xc
c00165a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165aa:	e8 cd ff ff ff       	call   c001657c <FAT::~FAT()>
c00165af:	83 c4 10             	add    esp,0x10
c00165b2:	83 ec 08             	sub    esp,0x8
c00165b5:	6a 08                	push   0x8
c00165b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165bb:	e8 63 3f ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c00165c0:	83 c4 10             	add    esp,0x10
c00165c3:	83 c4 0c             	add    esp,0xc
c00165c6:	c3                   	ret    
c00165c7:	90                   	nop

c00165c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00165c8:	83 ec 1c             	sub    esp,0x1c
c00165cb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00165d2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00165d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165db:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165e2:	83 f8 ff             	cmp    eax,0xffffffff
c00165e5:	75 35                	jne    c001661c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00165e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00165eb:	88 c2                	mov    dl,al
c00165ed:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165f2:	01 d0                	add    eax,edx
c00165f4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00165f8:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00165fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016602:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016609:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001660e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016612:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016619:	eb 19                	jmp    c0016634 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001661b:	90                   	nop
c001661c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016620:	88 c2                	mov    dl,al
c0016622:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016626:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001662d:	01 d0                	add    eax,edx
c001662f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016633:	90                   	nop
c0016634:	83 ec 04             	sub    esp,0x4
c0016637:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001663b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001663f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016643:	50                   	push   eax
c0016644:	e8 0b e8 fe ff       	call   c0004e54 <f_getlabel>
c0016649:	83 c4 10             	add    esp,0x10
c001664c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016650:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016655:	75 09                	jne    c0016660 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016657:	b8 00 00 00 00       	mov    eax,0x0
c001665c:	eb 0a                	jmp    c0016668 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001665e:	66 90                	xchg   ax,ax
c0016660:	b8 01 00 00 00       	mov    eax,0x1
c0016665:	8d 76 00             	lea    esi,[esi+0x0]
c0016668:	83 c4 1c             	add    esp,0x1c
c001666b:	c3                   	ret    

c001666c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001666c:	57                   	push   edi
c001666d:	83 ec 58             	sub    esp,0x58
c0016670:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016678:	8d 54 24 10          	lea    edx,[esp+0x10]
c001667c:	b8 00 00 00 00       	mov    eax,0x0
c0016681:	b9 0f 00 00 00       	mov    ecx,0xf
c0016686:	fc                   	cld    
c0016687:	89 d7                	mov    edi,edx
c0016689:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001668b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001668f:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016696:	83 f8 ff             	cmp    eax,0xffffffff
c0016699:	75 35                	jne    c00166d0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001669b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001669f:	88 c2                	mov    dl,al
c00166a1:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00166a6:	01 d0                	add    eax,edx
c00166a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00166ac:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00166b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166b6:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00166bd:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00166c2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00166c6:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00166cd:	eb 19                	jmp    c00166e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00166cf:	90                   	nop
c00166d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166d4:	88 c2                	mov    dl,al
c00166d6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166da:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00166e1:	01 d0                	add    eax,edx
c00166e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00166e7:	90                   	nop
c00166e8:	83 ec 08             	sub    esp,0x8
c00166eb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00166ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166f3:	50                   	push   eax
c00166f4:	e8 c7 a0 fe ff       	call   c00007c0 <strcat>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016703:	50                   	push   eax
c0016704:	e8 9c e8 fe ff       	call   c0004fa5 <f_setlabel>
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016710:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016715:	75 09                	jne    c0016720 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016717:	b8 00 00 00 00       	mov    eax,0x0
c001671c:	eb 0a                	jmp    c0016728 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001671e:	66 90                	xchg   ax,ax
c0016720:	b8 01 00 00 00       	mov    eax,0x1
c0016725:	8d 76 00             	lea    esi,[esi+0x0]
c0016728:	83 c4 58             	add    esp,0x58
c001672b:	5f                   	pop    edi
c001672c:	c3                   	ret    
c001672d:	90                   	nop
c001672e:	66 90                	xchg   ax,ax

c0016730 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016730:	83 ec 2c             	sub    esp,0x2c
c0016733:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001673b:	83 ec 08             	sub    esp,0x8
c001673e:	68 18 f1 01 c0       	push   0xc001f118
c0016743:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016747:	e8 94 9f fe ff       	call   c00006e0 <strcmp>
c001674c:	83 c4 10             	add    esp,0x10
c001674f:	85 c0                	test   eax,eax
c0016751:	0f 94 c0             	sete   al
c0016754:	84 c0                	test   al,al
c0016756:	74 10                	je     c0016768 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016758:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016760:	e9 b3 00 00 00       	jmp    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016765:	8d 76 00             	lea    esi,[esi+0x0]
c0016768:	83 ec 08             	sub    esp,0x8
c001676b:	68 0a f1 01 c0       	push   0xc001f10a
c0016770:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016774:	e8 67 9f fe ff       	call   c00006e0 <strcmp>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	85 c0                	test   eax,eax
c001677e:	0f 94 c0             	sete   al
c0016781:	84 c0                	test   al,al
c0016783:	74 0f                	je     c0016794 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016785:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001678d:	e9 86 00 00 00       	jmp    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016792:	66 90                	xchg   ax,ax
c0016794:	83 ec 08             	sub    esp,0x8
c0016797:	68 10 f1 01 c0       	push   0xc001f110
c001679c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167a0:	e8 3b 9f fe ff       	call   c00006e0 <strcmp>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	85 c0                	test   eax,eax
c00167aa:	0f 94 c0             	sete   al
c00167ad:	84 c0                	test   al,al
c00167af:	74 0b                	je     c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00167b1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167b9:	eb 5d                	jmp    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167bb:	90                   	nop
c00167bc:	83 ec 08             	sub    esp,0x8
c00167bf:	68 dc cf 01 c0       	push   0xc001cfdc
c00167c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167c8:	e8 13 9f fe ff       	call   c00006e0 <strcmp>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	85 c0                	test   eax,eax
c00167d2:	0f 94 c0             	sete   al
c00167d5:	84 c0                	test   al,al
c00167d7:	74 0b                	je     c00167e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00167d9:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00167e1:	eb 35                	jmp    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167e3:	90                   	nop
c00167e4:	83 ec 08             	sub    esp,0x8
c00167e7:	68 16 f1 01 c0       	push   0xc001f116
c00167ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167f0:	e8 eb 9e fe ff       	call   c00006e0 <strcmp>
c00167f5:	83 c4 10             	add    esp,0x10
c00167f8:	85 c0                	test   eax,eax
c00167fa:	0f 94 c0             	sete   al
c00167fd:	84 c0                	test   al,al
c00167ff:	74 0b                	je     c001680c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016801:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016809:	eb 0d                	jmp    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001680b:	90                   	nop
c001680c:	b8 08 00 00 00       	mov    eax,0x8
c0016811:	e9 ea 00 00 00       	jmp    c0016900 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016816:	66 90                	xchg   ax,ax
c0016818:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001681f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016824:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016828:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001682f:	83 f8 ff             	cmp    eax,0xffffffff
c0016832:	75 34                	jne    c0016868 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016834:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016838:	88 c2                	mov    dl,al
c001683a:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001683f:	01 d0                	add    eax,edx
c0016841:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016845:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001684b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001684f:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016856:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001685b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001685f:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016866:	eb 18                	jmp    c0016880 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016868:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001686c:	88 c2                	mov    dl,al
c001686e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016872:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016879:	01 d0                	add    eax,edx
c001687b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001687f:	90                   	nop
c0016880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016884:	88 04 24             	mov    BYTE PTR [esp],al
c0016887:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001688b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001688f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016897:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001689c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00168a4:	83 ec 0c             	sub    esp,0xc
c00168a7:	68 00 20 00 00       	push   0x2000
c00168ac:	e8 08 0f ff ff       	call   c00077b9 <malloc>
c00168b1:	83 c4 10             	add    esp,0x10
c00168b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168b8:	68 00 20 00 00       	push   0x2000
c00168bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168c5:	50                   	push   eax
c00168c6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00168ca:	50                   	push   eax
c00168cb:	e8 c5 e9 fe ff       	call   c0005295 <f_mkfs>
c00168d0:	83 c4 10             	add    esp,0x10
c00168d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00168dc:	75 0a                	jne    c00168e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00168de:	b8 00 00 00 00       	mov    eax,0x0
c00168e3:	eb 1b                	jmp    c0016900 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168e5:	8d 76 00             	lea    esi,[esi+0x0]
c00168e8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00168ed:	75 09                	jne    c00168f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00168ef:	b8 09 00 00 00       	mov    eax,0x9
c00168f4:	eb 0a                	jmp    c0016900 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168f6:	66 90                	xchg   ax,ax
c00168f8:	b8 01 00 00 00       	mov    eax,0x1
c00168fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016900:	83 c4 2c             	add    esp,0x2c
c0016903:	c3                   	ret    

c0016904 <FAT::tryMount(LogicalDisk*, int)>:
c0016904:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001690a:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001690f:	83 f8 14             	cmp    eax,0x14
c0016912:	75 18                	jne    c001692c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	68 1c f1 01 c0       	push   0xc001f11c
c001691c:	e8 7a 99 ff ff       	call   c001029b <KePanic(char const*)>
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	b0 00                	mov    al,0x0
c0016926:	e9 e9 01 00 00       	jmp    c0016b14 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001692b:	90                   	nop
c001692c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016933:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016939:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001693f:	3d 00 02 00 00       	cmp    eax,0x200
c0016944:	74 0a                	je     c0016950 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016946:	b0 00                	mov    al,0x0
c0016948:	e9 c7 01 00 00       	jmp    c0016b14 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001694d:	8d 76 00             	lea    esi,[esi+0x0]
c0016950:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016958:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001695f:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016966:	83 f8 ff             	cmp    eax,0xffffffff
c0016969:	74 09                	je     c0016974 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001696b:	b0 01                	mov    al,0x1
c001696d:	e9 a2 01 00 00       	jmp    c0016b14 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016972:	66 90                	xchg   ax,ax
c0016974:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001697e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016986:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001698d:	88 c2                	mov    dl,al
c001698f:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016994:	01 d0                	add    eax,edx
c0016996:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001699d:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00169a3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169aa:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00169b1:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00169b6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00169bd:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00169c4:	83 ec 0c             	sub    esp,0xc
c00169c7:	68 34 02 00 00       	push   0x234
c00169cc:	e8 e8 0d ff ff       	call   c00077b9 <malloc>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00169db:	83 ec 04             	sub    esp,0x4
c00169de:	6a 00                	push   0x0
c00169e0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169e7:	50                   	push   eax
c00169e8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169ef:	e8 c7 d0 fe ff       	call   c0003abb <f_mount>
c00169f4:	83 c4 10             	add    esp,0x10
c00169f7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169fe:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a06:	74 1c                	je     c0016a24 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a12:	e8 c2 0d ff ff       	call   c00077d9 <rfree>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	b0 00                	mov    al,0x0
c0016a1c:	e9 f3 00 00 00       	jmp    c0016b14 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a21:	8d 76 00             	lea    esi,[esi+0x0]
c0016a24:	83 ec 04             	sub    esp,0x4
c0016a27:	68 00 01 00 00       	push   0x100
c0016a2c:	6a 00                	push   0x0
c0016a2e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a35:	50                   	push   eax
c0016a36:	e8 95 9a fe ff       	call   c00004d0 <memset>
c0016a3b:	83 c4 10             	add    esp,0x10
c0016a3e:	83 ec 08             	sub    esp,0x8
c0016a41:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a48:	50                   	push   eax
c0016a49:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a50:	50                   	push   eax
c0016a51:	e8 6a 9d fe ff       	call   c00007c0 <strcat>
c0016a56:	83 c4 10             	add    esp,0x10
c0016a59:	83 ec 08             	sub    esp,0x8
c0016a5c:	68 2a f1 01 c0       	push   0xc001f12a
c0016a61:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a68:	50                   	push   eax
c0016a69:	e8 52 9d fe ff       	call   c00007c0 <strcat>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	83 ec 04             	sub    esp,0x4
c0016a74:	6a 01                	push   0x1
c0016a76:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016a7d:	50                   	push   eax
c0016a7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a82:	50                   	push   eax
c0016a83:	e8 95 d0 fe ff       	call   c0003b1d <f_open>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a92:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016a99:	85 c0                	test   eax,eax
c0016a9b:	74 0b                	je     c0016aa8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a9d:	78 31                	js     c0016ad0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a9f:	83 e8 04             	sub    eax,0x4
c0016aa2:	83 f8 01             	cmp    eax,0x1
c0016aa5:	77 29                	ja     c0016ad0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016aa7:	90                   	nop
c0016aa8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016ab0:	83 ec 0c             	sub    esp,0xc
c0016ab3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ab7:	50                   	push   eax
c0016ab8:	e8 13 d8 fe ff       	call   c00042d0 <f_close>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	90                   	nop
c0016ac1:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016ac9:	74 41                	je     c0016b0c <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016acb:	eb 33                	jmp    c0016b00 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016acd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ad0:	83 ec 0c             	sub    esp,0xc
c0016ad3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016ada:	e8 fa 0c ff ff       	call   c00077d9 <rfree>
c0016adf:	83 c4 10             	add    esp,0x10
c0016ae2:	83 ec 04             	sub    esp,0x4
c0016ae5:	6a 00                	push   0x0
c0016ae7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016aee:	50                   	push   eax
c0016aef:	6a 00                	push   0x0
c0016af1:	e8 c5 cf fe ff       	call   c0003abb <f_mount>
c0016af6:	83 c4 10             	add    esp,0x10
c0016af9:	b0 00                	mov    al,0x0
c0016afb:	eb 17                	jmp    c0016b14 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016afd:	8d 76 00             	lea    esi,[esi+0x0]
c0016b00:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016b05:	40                   	inc    eax
c0016b06:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016b0b:	90                   	nop
c0016b0c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b13:	90                   	nop
c0016b14:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016b1a:	c3                   	ret    
c0016b1b:	90                   	nop

c0016b1c <FAT::allocateSwapfile(char const*, int)>:
c0016b1c:	55                   	push   ebp
c0016b1d:	57                   	push   edi
c0016b1e:	56                   	push   esi
c0016b1f:	53                   	push   ebx
c0016b20:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016b26:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016b31:	83 ec 0c             	sub    esp,0xc
c0016b34:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016b3b:	e8 79 0c ff ff       	call   c00077b9 <malloc>
c0016b40:	83 c4 10             	add    esp,0x10
c0016b43:	89 c7                	mov    edi,eax
c0016b45:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016b4a:	83 ec 04             	sub    esp,0x4
c0016b4d:	50                   	push   eax
c0016b4e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016b55:	57                   	push   edi
c0016b56:	e8 33 40 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016b65:	83 ec 04             	sub    esp,0x4
c0016b68:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016b6c:	50                   	push   eax
c0016b6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016b71:	50                   	push   eax
c0016b72:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b79:	e8 7c 43 ff ff       	call   c000aefa <File::stat(unsigned long long*, bool*)>
c0016b7e:	83 c4 10             	add    esp,0x10
c0016b81:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b88:	c1 e0 14             	shl    eax,0x14
c0016b8b:	89 c7                	mov    edi,eax
c0016b8d:	89 c5                	mov    ebp,eax
c0016b8f:	c1 fd 1f             	sar    ebp,0x1f
c0016b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b9a:	89 f9                	mov    ecx,edi
c0016b9c:	31 c1                	xor    ecx,eax
c0016b9e:	89 cb                	mov    ebx,ecx
c0016ba0:	89 e9                	mov    ecx,ebp
c0016ba2:	31 d1                	xor    ecx,edx
c0016ba4:	89 ce                	mov    esi,ecx
c0016ba6:	89 f0                	mov    eax,esi
c0016ba8:	09 d8                	or     eax,ebx
c0016baa:	0f 84 9c 00 00 00    	je     c0016c4c <FAT::allocateSwapfile(char const*, int)+0x130>
c0016bb0:	83 ec 0c             	sub    esp,0xc
c0016bb3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bba:	e8 07 42 ff ff       	call   c000adc6 <File::unlink()>
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	83 ec 08             	sub    esp,0x8
c0016bc5:	6a 12                	push   0x12
c0016bc7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bce:	e8 7b 40 ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bdd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016be3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016bea:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016bf1:	c1 e0 14             	shl    eax,0x14
c0016bf4:	83 ec 04             	sub    esp,0x4
c0016bf7:	6a 01                	push   0x1
c0016bf9:	50                   	push   eax
c0016bfa:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c01:	e8 2f e5 fe ff       	call   c0005135 <f_expand>
c0016c06:	83 c4 10             	add    esp,0x10
c0016c09:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c12:	83 c0 10             	add    eax,0x10
c0016c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c17:	83 ec 0c             	sub    esp,0xc
c0016c1a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c1e:	52                   	push   edx
c0016c1f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016c23:	52                   	push   edx
c0016c24:	6a 00                	push   0x0
c0016c26:	68 00 04 00 00       	push   0x400
c0016c2b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c32:	ff d0                	call   eax
c0016c34:	83 c4 20             	add    esp,0x20
c0016c37:	83 ec 0c             	sub    esp,0xc
c0016c3a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c41:	e8 66 40 ff ff       	call   c000acac <File::close()>
c0016c46:	83 c4 10             	add    esp,0x10
c0016c49:	8d 76 00             	lea    esi,[esi+0x0]
c0016c4c:	83 ec 08             	sub    esp,0x8
c0016c4f:	6a 01                	push   0x1
c0016c51:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c58:	e8 f1 3f ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c0016c5d:	83 c4 10             	add    esp,0x10
c0016c60:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c69:	83 c0 0c             	add    eax,0xc
c0016c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c6e:	83 ec 0c             	sub    esp,0xc
c0016c71:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c75:	52                   	push   edx
c0016c76:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016c7a:	52                   	push   edx
c0016c7b:	6a 00                	push   0x0
c0016c7d:	6a 04                	push   0x4
c0016c7f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c86:	ff d0                	call   eax
c0016c88:	83 c4 20             	add    esp,0x20
c0016c8b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c92:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c98:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c9f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016ca6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016ca9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016cb0:	83 ec 0c             	sub    esp,0xc
c0016cb3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cba:	e8 ed 3f ff ff       	call   c000acac <File::close()>
c0016cbf:	83 c4 10             	add    esp,0x10
c0016cc2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016cc9:	ba 00 00 00 00       	mov    edx,0x0
c0016cce:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016cd4:	5b                   	pop    ebx
c0016cd5:	5e                   	pop    esi
c0016cd6:	5f                   	pop    edi
c0016cd7:	5d                   	pop    ebp
c0016cd8:	c3                   	ret    
c0016cd9:	90                   	nop
c0016cda:	66 90                	xchg   ax,ax

c0016cdc <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016cdc:	57                   	push   edi
c0016cdd:	56                   	push   esi
c0016cde:	53                   	push   ebx
c0016cdf:	81 ec 50 02 00 00    	sub    esp,0x250
c0016ce5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016ced:	74 0d                	je     c0016cfc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016cef:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016cf7:	75 0f                	jne    c0016d08 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0016cfc:	b8 04 00 00 00       	mov    eax,0x4
c0016d01:	e9 36 01 00 00       	jmp    c0016e3c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d06:	66 90                	xchg   ax,ax
c0016d08:	83 ec 08             	sub    esp,0x8
c0016d0b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d12:	50                   	push   eax
c0016d13:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016d1a:	e8 74 d8 fe ff       	call   c0004593 <f_readdir>
c0016d1f:	83 c4 10             	add    esp,0x10
c0016d22:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016d29:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016d3a:	83 c0 16             	add    eax,0x16
c0016d3d:	50                   	push   eax
c0016d3e:	e8 fd 97 fe ff       	call   c0000540 <strlen>
c0016d43:	83 c4 10             	add    esp,0x10
c0016d46:	ba 00 00 00 00       	mov    edx,0x0
c0016d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d4f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d53:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016d5a:	25 ff 00 00 00       	and    eax,0xff
c0016d5f:	83 e0 10             	and    eax,0x10
c0016d62:	74 08                	je     c0016d6c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016d64:	b8 02 00 00 00       	mov    eax,0x2
c0016d69:	eb 09                	jmp    c0016d74 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016d6b:	90                   	nop
c0016d6c:	b8 01 00 00 00       	mov    eax,0x1
c0016d71:	8d 76 00             	lea    esi,[esi+0x0]
c0016d74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d78:	83 ec 08             	sub    esp,0x8
c0016d7b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d82:	83 c0 16             	add    eax,0x16
c0016d85:	50                   	push   eax
c0016d86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d8a:	83 c0 10             	add    eax,0x10
c0016d8d:	50                   	push   eax
c0016d8e:	e8 6d 98 fe ff       	call   c0000600 <strcpy>
c0016d93:	83 c4 10             	add    esp,0x10
c0016d96:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d9d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016da4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016da8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016daf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016db6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016dbd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016dc4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016dcb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016dd2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016dd9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016de0:	89 c6                	mov    esi,eax
c0016de2:	89 d7                	mov    edi,edx
c0016de4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016de6:	89 c8                	mov    eax,ecx
c0016de8:	89 fa                	mov    edx,edi
c0016dea:	89 f3                	mov    ebx,esi
c0016dec:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016df3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016dfa:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e01:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e08:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e0e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016e15:	84 c0                	test   al,al
c0016e17:	75 07                	jne    c0016e20 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016e19:	b8 07 00 00 00       	mov    eax,0x7
c0016e1e:	eb 1c                	jmp    c0016e3c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e20:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016e27:	85 c0                	test   eax,eax
c0016e29:	75 09                	jne    c0016e34 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016e2b:	b8 00 00 00 00       	mov    eax,0x0
c0016e30:	eb 0a                	jmp    c0016e3c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e32:	66 90                	xchg   ax,ax
c0016e34:	b8 01 00 00 00       	mov    eax,0x1
c0016e39:	8d 76 00             	lea    esi,[esi+0x0]
c0016e3c:	81 c4 50 02 00 00    	add    esp,0x250
c0016e42:	5b                   	pop    ebx
c0016e43:	5e                   	pop    esi
c0016e44:	5f                   	pop    edi
c0016e45:	c3                   	ret    
c0016e46:	66 90                	xchg   ax,ax

c0016e48 <FAT::read(void*, unsigned long, void*, int*)>:
c0016e48:	83 ec 1c             	sub    esp,0x1c
c0016e4b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e50:	74 0a                	je     c0016e5c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016e52:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e57:	75 0b                	jne    c0016e64 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016e59:	8d 76 00             	lea    esi,[esi+0x0]
c0016e5c:	b8 04 00 00 00       	mov    eax,0x4
c0016e61:	eb 41                	jmp    c0016ea4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e63:	90                   	nop
c0016e64:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e68:	50                   	push   eax
c0016e69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e75:	e8 6e cf fe ff       	call   c0003de8 <f_read>
c0016e7a:	83 c4 10             	add    esp,0x10
c0016e7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e85:	89 c2                	mov    edx,eax
c0016e87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e8b:	89 10                	mov    DWORD PTR [eax],edx
c0016e8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e91:	85 c0                	test   eax,eax
c0016e93:	75 07                	jne    c0016e9c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016e95:	b8 00 00 00 00       	mov    eax,0x0
c0016e9a:	eb 08                	jmp    c0016ea4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e9c:	b8 01 00 00 00       	mov    eax,0x1
c0016ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea4:	83 c4 1c             	add    esp,0x1c
c0016ea7:	c3                   	ret    

c0016ea8 <FAT::write(void*, unsigned long, void*, int*)>:
c0016ea8:	83 ec 1c             	sub    esp,0x1c
c0016eab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016eb0:	74 0a                	je     c0016ebc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016eb2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016eb7:	75 0b                	jne    c0016ec4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ebc:	b8 04 00 00 00       	mov    eax,0x4
c0016ec1:	eb 41                	jmp    c0016f04 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016ec3:	90                   	nop
c0016ec4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ec8:	50                   	push   eax
c0016ec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ed1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ed5:	e8 0d d1 fe ff       	call   c0003fe7 <f_write>
c0016eda:	83 c4 10             	add    esp,0x10
c0016edd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ee1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ee5:	89 c2                	mov    edx,eax
c0016ee7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016eeb:	89 10                	mov    DWORD PTR [eax],edx
c0016eed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ef1:	85 c0                	test   eax,eax
c0016ef3:	75 07                	jne    c0016efc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016ef5:	b8 00 00 00 00       	mov    eax,0x0
c0016efa:	eb 08                	jmp    c0016f04 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016efc:	b8 01 00 00 00       	mov    eax,0x1
c0016f01:	8d 76 00             	lea    esi,[esi+0x0]
c0016f04:	83 c4 1c             	add    esp,0x1c
c0016f07:	c3                   	ret    

c0016f08 <FAT::close(void*)>:
c0016f08:	83 ec 1c             	sub    esp,0x1c
c0016f0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f10:	75 0a                	jne    c0016f1c <FAT::close(void*)+0x14>
c0016f12:	b8 04 00 00 00       	mov    eax,0x4
c0016f17:	eb 3f                	jmp    c0016f58 <FAT::close(void*)+0x50>
c0016f19:	8d 76 00             	lea    esi,[esi+0x0]
c0016f1c:	83 ec 0c             	sub    esp,0xc
c0016f1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f23:	e8 a8 d3 fe ff       	call   c00042d0 <f_close>
c0016f28:	83 c4 10             	add    esp,0x10
c0016f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f2f:	83 ec 0c             	sub    esp,0xc
c0016f32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f36:	e8 8e 08 ff ff       	call   c00077c9 <free>
c0016f3b:	83 c4 10             	add    esp,0x10
c0016f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f42:	85 c0                	test   eax,eax
c0016f44:	75 0a                	jne    c0016f50 <FAT::close(void*)+0x48>
c0016f46:	b8 00 00 00 00       	mov    eax,0x0
c0016f4b:	eb 0b                	jmp    c0016f58 <FAT::close(void*)+0x50>
c0016f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f50:	b8 01 00 00 00       	mov    eax,0x1
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	83 c4 1c             	add    esp,0x1c
c0016f5b:	c3                   	ret    

c0016f5c <FAT::closeDir(void*)>:
c0016f5c:	83 ec 1c             	sub    esp,0x1c
c0016f5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f64:	75 0a                	jne    c0016f70 <FAT::closeDir(void*)+0x14>
c0016f66:	b8 04 00 00 00       	mov    eax,0x4
c0016f6b:	eb 3f                	jmp    c0016fac <FAT::closeDir(void*)+0x50>
c0016f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f70:	83 ec 0c             	sub    esp,0xc
c0016f73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f77:	e8 f5 d5 fe ff       	call   c0004571 <f_closedir>
c0016f7c:	83 c4 10             	add    esp,0x10
c0016f7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f83:	83 ec 0c             	sub    esp,0xc
c0016f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f8a:	e8 3a 08 ff ff       	call   c00077c9 <free>
c0016f8f:	83 c4 10             	add    esp,0x10
c0016f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f96:	85 c0                	test   eax,eax
c0016f98:	75 0a                	jne    c0016fa4 <FAT::closeDir(void*)+0x48>
c0016f9a:	b8 00 00 00 00       	mov    eax,0x0
c0016f9f:	eb 0b                	jmp    c0016fac <FAT::closeDir(void*)+0x50>
c0016fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa4:	b8 01 00 00 00       	mov    eax,0x1
c0016fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fac:	83 c4 1c             	add    esp,0x1c
c0016faf:	c3                   	ret    

c0016fb0 <FAT::seek(void*, unsigned long long)>:
c0016fb0:	83 ec 2c             	sub    esp,0x2c
c0016fb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fc3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016fc8:	75 0a                	jne    c0016fd4 <FAT::seek(void*, unsigned long long)+0x24>
c0016fca:	b8 04 00 00 00       	mov    eax,0x4
c0016fcf:	eb 33                	jmp    c0017004 <FAT::seek(void*, unsigned long long)+0x54>
c0016fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fd8:	83 ec 08             	sub    esp,0x8
c0016fdb:	50                   	push   eax
c0016fdc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fe0:	e8 1a d3 fe ff       	call   c00042ff <f_lseek>
c0016fe5:	83 c4 10             	add    esp,0x10
c0016fe8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ff0:	85 c0                	test   eax,eax
c0016ff2:	75 08                	jne    c0016ffc <FAT::seek(void*, unsigned long long)+0x4c>
c0016ff4:	b8 00 00 00 00       	mov    eax,0x0
c0016ff9:	eb 09                	jmp    c0017004 <FAT::seek(void*, unsigned long long)+0x54>
c0016ffb:	90                   	nop
c0016ffc:	b8 01 00 00 00       	mov    eax,0x1
c0017001:	8d 76 00             	lea    esi,[esi+0x0]
c0017004:	83 c4 2c             	add    esp,0x2c
c0017007:	c3                   	ret    

c0017008 <fatWrapperReadDisk>:
c0017008:	53                   	push   ebx
c0017009:	83 ec 18             	sub    esp,0x18
c001700c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017010:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017014:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017018:	25 ff 00 00 00       	and    eax,0xff
c001701d:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017024:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017028:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001702c:	ba 00 00 00 00       	mov    edx,0x0
c0017031:	83 ec 0c             	sub    esp,0xc
c0017034:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017038:	53                   	push   ebx
c0017039:	52                   	push   edx
c001703a:	50                   	push   eax
c001703b:	51                   	push   ecx
c001703c:	e8 ff 5c ff ff       	call   c000cd40 <LogicalDisk::read(unsigned long long, int, void*)>
c0017041:	83 c4 20             	add    esp,0x20
c0017044:	83 c4 18             	add    esp,0x18
c0017047:	5b                   	pop    ebx
c0017048:	c3                   	ret    
c0017049:	8d 76 00             	lea    esi,[esi+0x0]

c001704c <fatWrapperWriteDisk>:
c001704c:	53                   	push   ebx
c001704d:	83 ec 18             	sub    esp,0x18
c0017050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017054:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017058:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001705c:	25 ff 00 00 00       	and    eax,0xff
c0017061:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017068:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001706c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017070:	ba 00 00 00 00       	mov    edx,0x0
c0017075:	83 ec 0c             	sub    esp,0xc
c0017078:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001707c:	53                   	push   ebx
c001707d:	52                   	push   edx
c001707e:	50                   	push   eax
c001707f:	51                   	push   ecx
c0017080:	e8 27 5d ff ff       	call   c000cdac <LogicalDisk::write(unsigned long long, int, void*)>
c0017085:	83 c4 20             	add    esp,0x20
c0017088:	83 c4 18             	add    esp,0x18
c001708b:	5b                   	pop    ebx
c001708c:	c3                   	ret    
c001708d:	8d 76 00             	lea    esi,[esi+0x0]

c0017090 <fatWrapperIoctl>:
c0017090:	53                   	push   ebx
c0017091:	83 ec 28             	sub    esp,0x28
c0017094:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017098:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001709c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00170a0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00170a4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00170a9:	75 35                	jne    c00170e0 <fatWrapperIoctl+0x50>
c00170ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170b7:	25 ff 00 00 00       	and    eax,0xff
c00170bc:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00170c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00170c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00170d3:	66 89 02             	mov    WORD PTR [edx],ax
c00170d6:	b8 00 00 00 00       	mov    eax,0x0
c00170db:	e9 c4 00 00 00       	jmp    c00171a4 <fatWrapperIoctl+0x114>
c00170e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00170e5:	75 75                	jne    c001715c <fatWrapperIoctl+0xcc>
c00170e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170ef:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170f3:	25 ff 00 00 00       	and    eax,0xff
c00170f8:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00170ff:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017105:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001710b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017111:	89 c8                	mov    eax,ecx
c0017113:	89 da                	mov    edx,ebx
c0017115:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017119:	c1 e0 0a             	shl    eax,0xa
c001711c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017120:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017126:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c001712d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017133:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017139:	89 cb                	mov    ebx,ecx
c001713b:	c1 fb 1f             	sar    ebx,0x1f
c001713e:	53                   	push   ebx
c001713f:	51                   	push   ecx
c0017140:	52                   	push   edx
c0017141:	50                   	push   eax
c0017142:	e8 a9 50 00 00       	call   c001c1f0 <__udivdi3>
c0017147:	83 c4 10             	add    esp,0x10
c001714a:	89 c2                	mov    edx,eax
c001714c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017150:	89 10                	mov    DWORD PTR [eax],edx
c0017152:	b8 00 00 00 00       	mov    eax,0x0
c0017157:	eb 4b                	jmp    c00171a4 <fatWrapperIoctl+0x114>
c0017159:	8d 76 00             	lea    esi,[esi+0x0]
c001715c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017161:	75 09                	jne    c001716c <fatWrapperIoctl+0xdc>
c0017163:	b8 00 00 00 00       	mov    eax,0x0
c0017168:	eb 3a                	jmp    c00171a4 <fatWrapperIoctl+0x114>
c001716a:	66 90                	xchg   ax,ax
c001716c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017171:	75 19                	jne    c001718c <fatWrapperIoctl+0xfc>
c0017173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017177:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001717b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001717f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017185:	b8 00 00 00 00       	mov    eax,0x0
c001718a:	eb 18                	jmp    c00171a4 <fatWrapperIoctl+0x114>
c001718c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017191:	75 09                	jne    c001719c <fatWrapperIoctl+0x10c>
c0017193:	b8 00 00 00 00       	mov    eax,0x0
c0017198:	eb 0a                	jmp    c00171a4 <fatWrapperIoctl+0x114>
c001719a:	66 90                	xchg   ax,ax
c001719c:	b8 04 00 00 00       	mov    eax,0x4
c00171a1:	8d 76 00             	lea    esi,[esi+0x0]
c00171a4:	83 c4 28             	add    esp,0x28
c00171a7:	5b                   	pop    ebx
c00171a8:	c3                   	ret    
c00171a9:	90                   	nop
c00171aa:	66 90                	xchg   ax,ax

c00171ac <FAT::FAT()>:
c00171ac:	83 ec 1c             	sub    esp,0x1c
c00171af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171b3:	83 ec 0c             	sub    esp,0xc
c00171b6:	50                   	push   eax
c00171b7:	e8 7e 37 ff ff       	call   c000a93a <Filesystem::Filesystem()>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	ba 40 f1 01 c0       	mov    edx,0xc001f140
c00171c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171c8:	89 10                	mov    DWORD PTR [eax],edx
c00171ca:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c00171d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00171dc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00171e1:	7f 15                	jg     c00171f8 <FAT::FAT()+0x4c>
c00171e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171e7:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c00171f2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00171f6:	eb e4                	jmp    c00171dc <FAT::FAT()+0x30>
c00171f8:	90                   	nop
c00171f9:	83 c4 1c             	add    esp,0x1c
c00171fc:	c3                   	ret    
c00171fd:	90                   	nop
c00171fe:	66 90                	xchg   ax,ax

c0017200 <FAT::fixFilepath(char*)>:
c0017200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017204:	8a 00                	mov    al,BYTE PTR [eax]
c0017206:	3c 40                	cmp    al,0x40
c0017208:	7e 2e                	jle    c0017238 <FAT::fixFilepath(char*)+0x38>
c001720a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001720e:	8a 00                	mov    al,BYTE PTR [eax]
c0017210:	83 e8 41             	sub    eax,0x41
c0017213:	88 c2                	mov    dl,al
c0017215:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017219:	88 10                	mov    BYTE PTR [eax],dl
c001721b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001721f:	8a 00                	mov    al,BYTE PTR [eax]
c0017221:	0f be c0             	movsx  eax,al
c0017224:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001722b:	83 c0 30             	add    eax,0x30
c001722e:	88 c2                	mov    dl,al
c0017230:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017234:	88 10                	mov    BYTE PTR [eax],dl
c0017236:	66 90                	xchg   ax,ax
c0017238:	90                   	nop
c0017239:	c3                   	ret    
c001723a:	66 90                	xchg   ax,ax

c001723c <FAT::open(char const*, void**, FileOpenMode)>:
c001723c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017242:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001724a:	74 0c                	je     c0017258 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001724c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017254:	75 0e                	jne    c0017264 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017256:	66 90                	xchg   ax,ax
c0017258:	b8 04 00 00 00       	mov    eax,0x4
c001725d:	e9 0a 01 00 00       	jmp    c001736c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017262:	66 90                	xchg   ax,ax
c0017264:	83 ec 08             	sub    esp,0x8
c0017267:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001726e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017272:	50                   	push   eax
c0017273:	e8 88 93 fe ff       	call   c0000600 <strcpy>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	83 ec 08             	sub    esp,0x8
c001727e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017282:	50                   	push   eax
c0017283:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001728a:	e8 71 ff ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c001728f:	83 c4 10             	add    esp,0x10
c0017292:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001729a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172a1:	83 e0 01             	and    eax,0x1
c00172a4:	74 0a                	je     c00172b0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00172a6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00172ae:	66 90                	xchg   ax,ax
c00172b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172b7:	83 e0 04             	and    eax,0x4
c00172ba:	74 10                	je     c00172cc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00172bc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00172c4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00172cc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172d3:	83 e0 02             	and    eax,0x2
c00172d6:	74 08                	je     c00172e0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00172d8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00172e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172e7:	83 e0 08             	and    eax,0x8
c00172ea:	74 08                	je     c00172f4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00172ec:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00172f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172fb:	83 e0 10             	and    eax,0x10
c00172fe:	74 08                	je     c0017308 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017300:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017308:	83 ec 0c             	sub    esp,0xc
c001730b:	68 28 02 00 00       	push   0x228
c0017310:	e8 a4 04 ff ff       	call   c00077b9 <malloc>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	89 c2                	mov    edx,eax
c001731a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017321:	89 10                	mov    DWORD PTR [eax],edx
c0017323:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001732a:	31 d2                	xor    edx,edx
c001732c:	88 c2                	mov    dl,al
c001732e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017335:	8b 00                	mov    eax,DWORD PTR [eax]
c0017337:	83 ec 04             	sub    esp,0x4
c001733a:	52                   	push   edx
c001733b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001733f:	52                   	push   edx
c0017340:	50                   	push   eax
c0017341:	e8 d7 c7 fe ff       	call   c0003b1d <f_open>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017350:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017358:	74 0a                	je     c0017364 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001735a:	b8 01 00 00 00       	mov    eax,0x1
c001735f:	eb 0b                	jmp    c001736c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017361:	8d 76 00             	lea    esi,[esi+0x0]
c0017364:	b8 00 00 00 00       	mov    eax,0x0
c0017369:	8d 76 00             	lea    esi,[esi+0x0]
c001736c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017372:	c3                   	ret    
c0017373:	90                   	nop

c0017374 <FAT::openDir(char const*, void**)>:
c0017374:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001737a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017382:	74 0c                	je     c0017390 <FAT::openDir(char const*, void**)+0x1c>
c0017384:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001738c:	75 0e                	jne    c001739c <FAT::openDir(char const*, void**)+0x28>
c001738e:	66 90                	xchg   ax,ax
c0017390:	b8 04 00 00 00       	mov    eax,0x4
c0017395:	e9 82 00 00 00       	jmp    c001741c <FAT::openDir(char const*, void**)+0xa8>
c001739a:	66 90                	xchg   ax,ax
c001739c:	83 ec 08             	sub    esp,0x8
c001739f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173aa:	50                   	push   eax
c00173ab:	e8 50 92 fe ff       	call   c0000600 <strcpy>
c00173b0:	83 c4 10             	add    esp,0x10
c00173b3:	83 ec 08             	sub    esp,0x8
c00173b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00173ba:	50                   	push   eax
c00173bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173c2:	e8 39 fe ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c00173c7:	83 c4 10             	add    esp,0x10
c00173ca:	83 ec 0c             	sub    esp,0xc
c00173cd:	6a 30                	push   0x30
c00173cf:	e8 e5 03 ff ff       	call   c00077b9 <malloc>
c00173d4:	83 c4 10             	add    esp,0x10
c00173d7:	89 c2                	mov    edx,eax
c00173d9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173e0:	89 10                	mov    DWORD PTR [eax],edx
c00173e2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00173eb:	83 ec 08             	sub    esp,0x8
c00173ee:	8d 54 24 14          	lea    edx,[esp+0x14]
c00173f2:	52                   	push   edx
c00173f3:	50                   	push   eax
c00173f4:	e8 ad d0 fe ff       	call   c00044a6 <f_opendir>
c00173f9:	83 c4 10             	add    esp,0x10
c00173fc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017403:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001740b:	74 07                	je     c0017414 <FAT::openDir(char const*, void**)+0xa0>
c001740d:	b8 01 00 00 00       	mov    eax,0x1
c0017412:	eb 08                	jmp    c001741c <FAT::openDir(char const*, void**)+0xa8>
c0017414:	b8 00 00 00 00       	mov    eax,0x0
c0017419:	8d 76 00             	lea    esi,[esi+0x0]
c001741c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017422:	c3                   	ret    
c0017423:	90                   	nop

c0017424 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017424:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001742a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017432:	75 0c                	jne    c0017440 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017434:	b8 04 00 00 00       	mov    eax,0x4
c0017439:	e9 d6 00 00 00       	jmp    c0017514 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001743e:	66 90                	xchg   ax,ax
c0017440:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017448:	75 0a                	jne    c0017454 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001744a:	b8 04 00 00 00       	mov    eax,0x4
c001744f:	e9 c0 00 00 00       	jmp    c0017514 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017454:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001745c:	75 0a                	jne    c0017468 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001745e:	b8 04 00 00 00       	mov    eax,0x4
c0017463:	e9 ac 00 00 00       	jmp    c0017514 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017468:	83 ec 08             	sub    esp,0x8
c001746b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017472:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017479:	50                   	push   eax
c001747a:	e8 81 91 fe ff       	call   c0000600 <strcpy>
c001747f:	83 c4 10             	add    esp,0x10
c0017482:	83 ec 08             	sub    esp,0x8
c0017485:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001748c:	50                   	push   eax
c001748d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017494:	e8 67 fd ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c0017499:	83 c4 10             	add    esp,0x10
c001749c:	83 ec 08             	sub    esp,0x8
c001749f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00174a3:	50                   	push   eax
c00174a4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174ab:	50                   	push   eax
c00174ac:	e8 74 d1 fe ff       	call   c0004625 <f_stat>
c00174b1:	83 c4 10             	add    esp,0x10
c00174b4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00174bb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00174c2:	85 c0                	test   eax,eax
c00174c4:	74 0a                	je     c00174d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00174c6:	83 f8 04             	cmp    eax,0x4
c00174c9:	74 39                	je     c0017504 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00174cb:	eb 3f                	jmp    c001750c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00174cd:	8d 76 00             	lea    esi,[esi+0x0]
c00174d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00174d4:	25 ff 00 00 00       	and    eax,0xff
c00174d9:	83 e0 10             	and    eax,0x10
c00174dc:	0f 95 c2             	setne  dl
c00174df:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00174e6:	88 10                	mov    BYTE PTR [eax],dl
c00174e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174ec:	ba 00 00 00 00       	mov    edx,0x0
c00174f1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00174f8:	89 01                	mov    DWORD PTR [ecx],eax
c00174fa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00174fd:	b8 00 00 00 00       	mov    eax,0x0
c0017502:	eb 10                	jmp    c0017514 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017504:	b8 02 00 00 00       	mov    eax,0x2
c0017509:	eb 09                	jmp    c0017514 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001750b:	90                   	nop
c001750c:	b8 01 00 00 00       	mov    eax,0x1
c0017511:	8d 76 00             	lea    esi,[esi+0x0]
c0017514:	81 c4 2c 02 00 00    	add    esp,0x22c
c001751a:	c3                   	ret    
c001751b:	90                   	nop

c001751c <FAT::unlink(char const*)>:
c001751c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017522:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001752a:	75 08                	jne    c0017534 <FAT::unlink(char const*)+0x18>
c001752c:	b8 04 00 00 00       	mov    eax,0x4
c0017531:	eb 61                	jmp    c0017594 <FAT::unlink(char const*)+0x78>
c0017533:	90                   	nop
c0017534:	83 ec 08             	sub    esp,0x8
c0017537:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001753e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017542:	50                   	push   eax
c0017543:	e8 b8 90 fe ff       	call   c0000600 <strcpy>
c0017548:	83 c4 10             	add    esp,0x10
c001754b:	83 ec 08             	sub    esp,0x8
c001754e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017552:	50                   	push   eax
c0017553:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001755a:	e8 a1 fc ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c001755f:	83 c4 10             	add    esp,0x10
c0017562:	83 ec 0c             	sub    esp,0xc
c0017565:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017569:	50                   	push   eax
c001756a:	e8 1b d3 fe ff       	call   c000488a <f_unlink>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017579:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017580:	85 c0                	test   eax,eax
c0017582:	75 08                	jne    c001758c <FAT::unlink(char const*)+0x70>
c0017584:	b8 00 00 00 00       	mov    eax,0x0
c0017589:	eb 09                	jmp    c0017594 <FAT::unlink(char const*)+0x78>
c001758b:	90                   	nop
c001758c:	b8 01 00 00 00       	mov    eax,0x1
c0017591:	8d 76 00             	lea    esi,[esi+0x0]
c0017594:	81 c4 1c 01 00 00    	add    esp,0x11c
c001759a:	c3                   	ret    
c001759b:	90                   	nop

c001759c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001759c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00175a2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00175a9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00175b0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00175b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00175b8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00175c0:	75 0a                	jne    c00175cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00175c2:	b8 04 00 00 00       	mov    eax,0x4
c00175c7:	e9 54 01 00 00       	jmp    c0017720 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00175cc:	83 ec 08             	sub    esp,0x8
c00175cf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00175d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00175da:	50                   	push   eax
c00175db:	e8 20 90 fe ff       	call   c0000600 <strcpy>
c00175e0:	83 c4 10             	add    esp,0x10
c00175e3:	83 ec 08             	sub    esp,0x8
c00175e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00175ea:	50                   	push   eax
c00175eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00175f2:	e8 09 fc ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c00175f7:	83 c4 10             	add    esp,0x10
c00175fa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017602:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001760a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001760e:	25 ff 00 00 00       	and    eax,0xff
c0017613:	83 e0 01             	and    eax,0x1
c0017616:	74 08                	je     c0017620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017618:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017620:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017624:	25 ff 00 00 00       	and    eax,0xff
c0017629:	83 e0 02             	and    eax,0x2
c001762c:	74 0a                	je     c0017638 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001762e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017636:	66 90                	xchg   ax,ax
c0017638:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001763c:	25 ff 00 00 00       	and    eax,0xff
c0017641:	83 e0 04             	and    eax,0x4
c0017644:	74 0a                	je     c0017650 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017646:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001764e:	66 90                	xchg   ax,ax
c0017650:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017654:	25 ff 00 00 00       	and    eax,0xff
c0017659:	83 e0 08             	and    eax,0x8
c001765c:	74 0a                	je     c0017668 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001765e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017666:	66 90                	xchg   ax,ax
c0017668:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001766c:	25 ff 00 00 00       	and    eax,0xff
c0017671:	83 e0 01             	and    eax,0x1
c0017674:	74 0a                	je     c0017680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017676:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001767e:	66 90                	xchg   ax,ax
c0017680:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017684:	25 ff 00 00 00       	and    eax,0xff
c0017689:	83 e0 02             	and    eax,0x2
c001768c:	74 0a                	je     c0017698 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001768e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017696:	66 90                	xchg   ax,ax
c0017698:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001769c:	25 ff 00 00 00       	and    eax,0xff
c00176a1:	83 e0 04             	and    eax,0x4
c00176a4:	74 0a                	je     c00176b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00176a6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00176ae:	66 90                	xchg   ax,ax
c00176b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176b4:	25 ff 00 00 00       	and    eax,0xff
c00176b9:	83 e0 08             	and    eax,0x8
c00176bc:	74 0a                	je     c00176c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00176be:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00176c6:	66 90                	xchg   ax,ax
c00176c8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00176cf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00176d6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00176dd:	31 d2                	xor    edx,edx
c00176df:	88 c2                	mov    dl,al
c00176e1:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00176e8:	25 ff 00 00 00       	and    eax,0xff
c00176ed:	83 ec 04             	sub    esp,0x4
c00176f0:	52                   	push   edx
c00176f1:	50                   	push   eax
c00176f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00176f6:	50                   	push   eax
c00176f7:	e8 01 d6 fe ff       	call   c0004cfd <f_chmod>
c00176fc:	83 c4 10             	add    esp,0x10
c00176ff:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017706:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001770d:	85 c0                	test   eax,eax
c001770f:	75 07                	jne    c0017718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017711:	b8 00 00 00 00       	mov    eax,0x0
c0017716:	eb 08                	jmp    c0017720 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017718:	b8 01 00 00 00       	mov    eax,0x1
c001771d:	8d 76 00             	lea    esi,[esi+0x0]
c0017720:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017726:	c3                   	ret    
c0017727:	90                   	nop

c0017728 <FAT::rename(char const*, char const*)>:
c0017728:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001772e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017736:	74 0c                	je     c0017744 <FAT::rename(char const*, char const*)+0x1c>
c0017738:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017740:	75 0e                	jne    c0017750 <FAT::rename(char const*, char const*)+0x28>
c0017742:	66 90                	xchg   ax,ax
c0017744:	b8 04 00 00 00       	mov    eax,0x4
c0017749:	e9 9e 00 00 00       	jmp    c00177ec <FAT::rename(char const*, char const*)+0xc4>
c001774e:	66 90                	xchg   ax,ax
c0017750:	83 ec 08             	sub    esp,0x8
c0017753:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001775a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017761:	50                   	push   eax
c0017762:	e8 99 8e fe ff       	call   c0000600 <strcpy>
c0017767:	83 c4 10             	add    esp,0x10
c001776a:	83 ec 08             	sub    esp,0x8
c001776d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017774:	50                   	push   eax
c0017775:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001777c:	e8 7f fa ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c0017781:	83 c4 10             	add    esp,0x10
c0017784:	83 ec 08             	sub    esp,0x8
c0017787:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001778e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017792:	50                   	push   eax
c0017793:	e8 68 8e fe ff       	call   c0000600 <strcpy>
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	83 ec 08             	sub    esp,0x8
c001779e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177a2:	50                   	push   eax
c00177a3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177aa:	e8 51 fa ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c00177af:	83 c4 10             	add    esp,0x10
c00177b2:	83 ec 08             	sub    esp,0x8
c00177b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177b9:	50                   	push   eax
c00177ba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177c1:	50                   	push   eax
c00177c2:	e8 80 d3 fe ff       	call   c0004b47 <f_rename>
c00177c7:	83 c4 10             	add    esp,0x10
c00177ca:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00177d1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00177d8:	85 c0                	test   eax,eax
c00177da:	75 08                	jne    c00177e4 <FAT::rename(char const*, char const*)+0xbc>
c00177dc:	b8 00 00 00 00       	mov    eax,0x0
c00177e1:	eb 09                	jmp    c00177ec <FAT::rename(char const*, char const*)+0xc4>
c00177e3:	90                   	nop
c00177e4:	b8 01 00 00 00       	mov    eax,0x1
c00177e9:	8d 76 00             	lea    esi,[esi+0x0]
c00177ec:	81 c4 1c 02 00 00    	add    esp,0x21c
c00177f2:	c3                   	ret    
c00177f3:	90                   	nop

c00177f4 <FAT::mkdir(char const*)>:
c00177f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00177fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017802:	75 08                	jne    c001780c <FAT::mkdir(char const*)+0x18>
c0017804:	b8 04 00 00 00       	mov    eax,0x4
c0017809:	eb 61                	jmp    c001786c <FAT::mkdir(char const*)+0x78>
c001780b:	90                   	nop
c001780c:	83 ec 08             	sub    esp,0x8
c001780f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017816:	8d 44 24 18          	lea    eax,[esp+0x18]
c001781a:	50                   	push   eax
c001781b:	e8 e0 8d fe ff       	call   c0000600 <strcpy>
c0017820:	83 c4 10             	add    esp,0x10
c0017823:	83 ec 08             	sub    esp,0x8
c0017826:	8d 44 24 14          	lea    eax,[esp+0x14]
c001782a:	50                   	push   eax
c001782b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017832:	e8 c9 f9 ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c0017837:	83 c4 10             	add    esp,0x10
c001783a:	83 ec 0c             	sub    esp,0xc
c001783d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017841:	50                   	push   eax
c0017842:	e8 65 d1 fe ff       	call   c00049ac <f_mkdir>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017851:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017858:	85 c0                	test   eax,eax
c001785a:	75 08                	jne    c0017864 <FAT::mkdir(char const*)+0x70>
c001785c:	b8 00 00 00 00       	mov    eax,0x0
c0017861:	eb 09                	jmp    c001786c <FAT::mkdir(char const*)+0x78>
c0017863:	90                   	nop
c0017864:	b8 01 00 00 00       	mov    eax,0x1
c0017869:	8d 76 00             	lea    esi,[esi+0x0]
c001786c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017872:	c3                   	ret    
c0017873:	90                   	nop

c0017874 <FAT::exists(char const*)>:
c0017874:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001787a:	83 ec 08             	sub    esp,0x8
c001787d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017884:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017888:	50                   	push   eax
c0017889:	e8 72 8d fe ff       	call   c0000600 <strcpy>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	83 ec 08             	sub    esp,0x8
c0017894:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017898:	50                   	push   eax
c0017899:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178a0:	e8 5b f9 ff ff       	call   c0017200 <FAT::fixFilepath(char*)>
c00178a5:	83 c4 10             	add    esp,0x10
c00178a8:	83 ec 08             	sub    esp,0x8
c00178ab:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00178b2:	50                   	push   eax
c00178b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178b7:	50                   	push   eax
c00178b8:	e8 68 cd fe ff       	call   c0004625 <f_stat>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00178c7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00178ce:	85 c0                	test   eax,eax
c00178d0:	75 06                	jne    c00178d8 <FAT::exists(char const*)+0x64>
c00178d2:	b0 01                	mov    al,0x1
c00178d4:	eb 06                	jmp    c00178dc <FAT::exists(char const*)+0x68>
c00178d6:	66 90                	xchg   ax,ax
c00178d8:	b0 00                	mov    al,0x0
c00178da:	66 90                	xchg   ax,ax
c00178dc:	81 c4 2c 02 00 00    	add    esp,0x22c
c00178e2:	c3                   	ret    
c00178e3:	90                   	nop

c00178e4 <isoReadDiscSectorHelper>:
c00178e4:	83 ec 2c             	sub    esp,0x2c
c00178e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00178ef:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00178f4:	83 e8 41             	sub    eax,0x41
c00178f7:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00178fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017902:	ba 00 00 00 00       	mov    edx,0x0
c0017907:	83 ec 0c             	sub    esp,0xc
c001790a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001790e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017912:	52                   	push   edx
c0017913:	50                   	push   eax
c0017914:	51                   	push   ecx
c0017915:	e8 26 54 ff ff       	call   c000cd40 <LogicalDisk::read(unsigned long long, int, void*)>
c001791a:	83 c4 20             	add    esp,0x20
c001791d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017921:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017926:	74 0c                	je     c0017934 <isoReadDiscSectorHelper+0x50>
c0017928:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001792c:	c1 e0 0b             	shl    eax,0xb
c001792f:	eb 0b                	jmp    c001793c <isoReadDiscSectorHelper+0x58>
c0017931:	8d 76 00             	lea    esi,[esi+0x0]
c0017934:	b8 00 00 00 00       	mov    eax,0x0
c0017939:	8d 76 00             	lea    esi,[esi+0x0]
c001793c:	83 c4 2c             	add    esp,0x2c
c001793f:	c3                   	ret    

c0017940 <iso_kprintf>:
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017948:	83 ec 08             	sub    esp,0x8
c001794b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001794f:	50                   	push   eax
c0017950:	e8 e1 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017955:	83 c4 10             	add    esp,0x10
c0017958:	90                   	nop
c0017959:	83 c4 0c             	add    esp,0xc
c001795c:	c3                   	ret    
c001795d:	8d 76 00             	lea    esi,[esi+0x0]

c0017960 <iso_kprintfd>:
c0017960:	83 ec 0c             	sub    esp,0xc
c0017963:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017968:	83 ec 08             	sub    esp,0x8
c001796b:	68 a0 f1 01 c0       	push   0xc001f1a0
c0017970:	50                   	push   eax
c0017971:	e8 c0 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001797e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017982:	83 ec 08             	sub    esp,0x8
c0017985:	52                   	push   edx
c0017986:	50                   	push   eax
c0017987:	e8 64 0d ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001798c:	83 c4 10             	add    esp,0x10
c001798f:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017994:	83 ec 08             	sub    esp,0x8
c0017997:	68 21 f0 01 c0       	push   0xc001f021
c001799c:	50                   	push   eax
c001799d:	e8 94 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00179a2:	83 c4 10             	add    esp,0x10
c00179a5:	90                   	nop
c00179a6:	83 c4 0c             	add    esp,0xc
c00179a9:	c3                   	ret    

c00179aa <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179aa:	b8 08 00 00 00       	mov    eax,0x8
c00179af:	c3                   	ret    

c00179b0 <ISO9660::getName()>:
c00179b0:	b8 a3 f1 01 c0       	mov    eax,0xc001f1a3
c00179b5:	c3                   	ret    

c00179b6 <ISO9660::closeDir(void*)>:
c00179b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00179bc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179bf:	90                   	nop

c00179c0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179c0:	b8 01 00 00 00       	mov    eax,0x1
c00179c5:	c3                   	ret    

c00179c6 <ISO9660::unlink(char const*)>:
c00179c6:	b8 01 00 00 00       	mov    eax,0x1
c00179cb:	c3                   	ret    

c00179cc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179cc:	b8 03 00 00 00       	mov    eax,0x3
c00179d1:	c3                   	ret    

c00179d2 <ISO9660::rename(char const*, char const*)>:
c00179d2:	b8 01 00 00 00       	mov    eax,0x1
c00179d7:	c3                   	ret    

c00179d8 <ISO9660::mkdir(char const*)>:
c00179d8:	b8 01 00 00 00       	mov    eax,0x1
c00179dd:	c3                   	ret    

c00179de <ISO9660::~ISO9660()>:
c00179de:	83 ec 0c             	sub    esp,0xc
c00179e1:	ba f4 f1 01 c0       	mov    edx,0xc001f1f4
c00179e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ea:	89 10                	mov    DWORD PTR [eax],edx
c00179ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f0:	83 ec 0c             	sub    esp,0xc
c00179f3:	50                   	push   eax
c00179f4:	e8 65 2f ff ff       	call   c000a95e <Filesystem::~Filesystem()>
c00179f9:	83 c4 10             	add    esp,0x10
c00179fc:	90                   	nop
c00179fd:	83 c4 0c             	add    esp,0xc
c0017a00:	c3                   	ret    
c0017a01:	90                   	nop

c0017a02 <ISO9660::~ISO9660()>:
c0017a02:	83 ec 0c             	sub    esp,0xc
c0017a05:	83 ec 0c             	sub    esp,0xc
c0017a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a0c:	e8 cd ff ff ff       	call   c00179de <ISO9660::~ISO9660()>
c0017a11:	83 c4 10             	add    esp,0x10
c0017a14:	83 ec 08             	sub    esp,0x8
c0017a17:	6a 08                	push   0x8
c0017a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a1d:	e8 01 2b ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c0017a22:	83 c4 10             	add    esp,0x10
c0017a25:	83 c4 0c             	add    esp,0xc
c0017a28:	c3                   	ret    
c0017a29:	90                   	nop

c0017a2a <ISO9660::exists(char const*)>:
c0017a2a:	83 ec 18             	sub    esp,0x18
c0017a2d:	68 be f1 01 c0       	push   0xc001f1be
c0017a32:	e8 64 88 ff ff       	call   c001029b <KePanic(char const*)>
c0017a37:	31 c0                	xor    eax,eax
c0017a39:	83 c4 1c             	add    esp,0x1c
c0017a3c:	c3                   	ret    
c0017a3d:	90                   	nop

c0017a3e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a3e:	56                   	push   esi
c0017a3f:	53                   	push   ebx
c0017a40:	50                   	push   eax
c0017a41:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a45:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a49:	85 db                	test   ebx,ebx
c0017a4b:	0f 84 82 00 00 00    	je     c0017ad3 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017a51:	85 f6                	test   esi,esi
c0017a53:	74 7e                	je     c0017ad3 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017a55:	ba 03 00 00 00       	mov    edx,0x3
c0017a5a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a5f:	75 77                	jne    c0017ad8 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a61:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a64:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a6a:	74 34                	je     c0017aa0 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017a6c:	83 ec 0c             	sub    esp,0xc
c0017a6f:	50                   	push   eax
c0017a70:	e8 4a ed fe ff       	call   c00067bf <init_percd>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	ba 0b 00 00 00       	mov    edx,0xb
c0017a7d:	40                   	inc    eax
c0017a7e:	74 58                	je     c0017ad8 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a80:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a87:	74 10                	je     c0017a99 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017a89:	83 ec 0c             	sub    esp,0xc
c0017a8c:	68 dc f1 01 c0       	push   0xc001f1dc
c0017a91:	e8 05 88 ff ff       	call   c001029b <KePanic(char const*)>
c0017a96:	83 c4 10             	add    esp,0x10
c0017a99:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a9b:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017aa0:	83 ec 0c             	sub    esp,0xc
c0017aa3:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017aaa:	83 c3 03             	add    ebx,0x3
c0017aad:	50                   	push   eax
c0017aae:	e8 0c ed fe ff       	call   c00067bf <init_percd>
c0017ab3:	59                   	pop    ecx
c0017ab4:	58                   	pop    eax
c0017ab5:	6a 00                	push   0x0
c0017ab7:	53                   	push   ebx
c0017ab8:	e8 40 e8 fe ff       	call   c00062fd <iso_open>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	ba 01 00 00 00       	mov    edx,0x1
c0017ac5:	83 f8 ff             	cmp    eax,0xffffffff
c0017ac8:	74 0e                	je     c0017ad8 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017aca:	83 c0 64             	add    eax,0x64
c0017acd:	31 d2                	xor    edx,edx
c0017acf:	89 06                	mov    DWORD PTR [esi],eax
c0017ad1:	eb 05                	jmp    c0017ad8 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017ad3:	ba 04 00 00 00       	mov    edx,0x4
c0017ad8:	89 d0                	mov    eax,edx
c0017ada:	5a                   	pop    edx
c0017adb:	5b                   	pop    ebx
c0017adc:	5e                   	pop    esi
c0017add:	c3                   	ret    

c0017ade <ISO9660::openDir(char const*, void**)>:
c0017ade:	56                   	push   esi
c0017adf:	53                   	push   ebx
c0017ae0:	50                   	push   eax
c0017ae1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017ae5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ae9:	85 db                	test   ebx,ebx
c0017aeb:	74 76                	je     c0017b63 <ISO9660::openDir(char const*, void**)+0x85>
c0017aed:	85 f6                	test   esi,esi
c0017aef:	74 72                	je     c0017b63 <ISO9660::openDir(char const*, void**)+0x85>
c0017af1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017af4:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017afa:	74 34                	je     c0017b30 <ISO9660::openDir(char const*, void**)+0x52>
c0017afc:	83 ec 0c             	sub    esp,0xc
c0017aff:	50                   	push   eax
c0017b00:	e8 ba ec fe ff       	call   c00067bf <init_percd>
c0017b05:	83 c4 10             	add    esp,0x10
c0017b08:	ba 0b 00 00 00       	mov    edx,0xb
c0017b0d:	40                   	inc    eax
c0017b0e:	74 58                	je     c0017b68 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b10:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017b17:	74 10                	je     c0017b29 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b19:	83 ec 0c             	sub    esp,0xc
c0017b1c:	68 dc f1 01 c0       	push   0xc001f1dc
c0017b21:	e8 75 87 ff ff       	call   c001029b <KePanic(char const*)>
c0017b26:	83 c4 10             	add    esp,0x10
c0017b29:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b2b:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017b30:	83 ec 0c             	sub    esp,0xc
c0017b33:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017b3a:	83 c3 03             	add    ebx,0x3
c0017b3d:	50                   	push   eax
c0017b3e:	e8 7c ec fe ff       	call   c00067bf <init_percd>
c0017b43:	59                   	pop    ecx
c0017b44:	58                   	pop    eax
c0017b45:	6a 01                	push   0x1
c0017b47:	53                   	push   ebx
c0017b48:	e8 b0 e7 fe ff       	call   c00062fd <iso_open>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	ba 01 00 00 00       	mov    edx,0x1
c0017b55:	83 f8 ff             	cmp    eax,0xffffffff
c0017b58:	74 0e                	je     c0017b68 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b5a:	83 c0 64             	add    eax,0x64
c0017b5d:	31 d2                	xor    edx,edx
c0017b5f:	89 06                	mov    DWORD PTR [esi],eax
c0017b61:	eb 05                	jmp    c0017b68 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b63:	ba 04 00 00 00       	mov    edx,0x4
c0017b68:	89 d0                	mov    eax,edx
c0017b6a:	5a                   	pop    edx
c0017b6b:	5b                   	pop    ebx
c0017b6c:	5e                   	pop    esi
c0017b6d:	c3                   	ret    

c0017b6e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b6e:	53                   	push   ebx
c0017b6f:	83 ec 08             	sub    esp,0x8
c0017b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b76:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b7a:	85 c0                	test   eax,eax
c0017b7c:	74 25                	je     c0017ba3 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b7e:	85 db                	test   ebx,ebx
c0017b80:	74 21                	je     c0017ba3 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b82:	83 e8 64             	sub    eax,0x64
c0017b85:	52                   	push   edx
c0017b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b8e:	50                   	push   eax
c0017b8f:	e8 11 e8 fe ff       	call   c00063a5 <iso_read>
c0017b94:	83 c4 10             	add    esp,0x10
c0017b97:	89 03                	mov    DWORD PTR [ebx],eax
c0017b99:	09 d0                	or     eax,edx
c0017b9b:	0f 94 c0             	sete   al
c0017b9e:	0f b6 c0             	movzx  eax,al
c0017ba1:	eb 05                	jmp    c0017ba8 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017ba3:	b8 04 00 00 00       	mov    eax,0x4
c0017ba8:	83 c4 08             	add    esp,0x8
c0017bab:	5b                   	pop    ebx
c0017bac:	c3                   	ret    
c0017bad:	90                   	nop

c0017bae <ISO9660::seek(void*, unsigned long long)>:
c0017bae:	57                   	push   edi
c0017baf:	56                   	push   esi
c0017bb0:	b8 04 00 00 00       	mov    eax,0x4
c0017bb5:	51                   	push   ecx
c0017bb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bbe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bc2:	85 d2                	test   edx,edx
c0017bc4:	74 1c                	je     c0017be2 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017bc6:	6a 00                	push   0x0
c0017bc8:	83 ea 64             	sub    edx,0x64
c0017bcb:	57                   	push   edi
c0017bcc:	56                   	push   esi
c0017bcd:	52                   	push   edx
c0017bce:	e8 e8 e8 fe ff       	call   c00064bb <iso_seek>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	31 f0                	xor    eax,esi
c0017bd8:	31 fa                	xor    edx,edi
c0017bda:	09 d0                	or     eax,edx
c0017bdc:	0f 95 c0             	setne  al
c0017bdf:	0f b6 c0             	movzx  eax,al
c0017be2:	5a                   	pop    edx
c0017be3:	5e                   	pop    esi
c0017be4:	5f                   	pop    edi
c0017be5:	c3                   	ret    

c0017be6 <ISO9660::tell(void*, unsigned long long*)>:
c0017be6:	53                   	push   ebx
c0017be7:	83 ec 08             	sub    esp,0x8
c0017bea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bf2:	85 c0                	test   eax,eax
c0017bf4:	74 1c                	je     c0017c12 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bf6:	85 db                	test   ebx,ebx
c0017bf8:	74 18                	je     c0017c12 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bfa:	83 ec 0c             	sub    esp,0xc
c0017bfd:	83 e8 64             	sub    eax,0x64
c0017c00:	50                   	push   eax
c0017c01:	e8 39 e9 fe ff       	call   c000653f <iso_tell>
c0017c06:	83 c4 10             	add    esp,0x10
c0017c09:	89 03                	mov    DWORD PTR [ebx],eax
c0017c0b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c0e:	31 c0                	xor    eax,eax
c0017c10:	eb 05                	jmp    c0017c17 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c12:	b8 04 00 00 00       	mov    eax,0x4
c0017c17:	83 c4 08             	add    esp,0x8
c0017c1a:	5b                   	pop    ebx
c0017c1b:	c3                   	ret    

c0017c1c <ISO9660::stat(void*, unsigned long long*)>:
c0017c1c:	53                   	push   ebx
c0017c1d:	83 ec 08             	sub    esp,0x8
c0017c20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c24:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c28:	85 c0                	test   eax,eax
c0017c2a:	74 20                	je     c0017c4c <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c2c:	85 db                	test   ebx,ebx
c0017c2e:	74 1c                	je     c0017c4c <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c30:	83 ec 0c             	sub    esp,0xc
c0017c33:	83 e8 64             	sub    eax,0x64
c0017c36:	50                   	push   eax
c0017c37:	e8 34 e9 fe ff       	call   c0006570 <iso_total>
c0017c3c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c43:	89 03                	mov    DWORD PTR [ebx],eax
c0017c45:	83 c4 10             	add    esp,0x10
c0017c48:	31 c0                	xor    eax,eax
c0017c4a:	eb 05                	jmp    c0017c51 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c4c:	b8 04 00 00 00       	mov    eax,0x4
c0017c51:	83 c4 08             	add    esp,0x8
c0017c54:	5b                   	pop    ebx
c0017c55:	c3                   	ret    

c0017c56 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c56:	55                   	push   ebp
c0017c57:	57                   	push   edi
c0017c58:	56                   	push   esi
c0017c59:	53                   	push   ebx
c0017c5a:	83 ec 0c             	sub    esp,0xc
c0017c5d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c61:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c65:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c69:	85 ff                	test   edi,edi
c0017c6b:	0f 94 c2             	sete   dl
c0017c6e:	85 f6                	test   esi,esi
c0017c70:	0f 94 c0             	sete   al
c0017c73:	08 c2                	or     dl,al
c0017c75:	0f 85 9e 00 00 00    	jne    c0017d19 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017c7b:	85 db                	test   ebx,ebx
c0017c7d:	0f 84 96 00 00 00    	je     c0017d19 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017c83:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c86:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c8c:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c93:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c96:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017c9c:	74 34                	je     c0017cd2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017c9e:	83 ec 0c             	sub    esp,0xc
c0017ca1:	50                   	push   eax
c0017ca2:	e8 18 eb fe ff       	call   c00067bf <init_percd>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	ba 0b 00 00 00       	mov    edx,0xb
c0017caf:	40                   	inc    eax
c0017cb0:	74 6c                	je     c0017d1e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017cb2:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017cb9:	74 10                	je     c0017ccb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017cbb:	83 ec 0c             	sub    esp,0xc
c0017cbe:	68 dc f1 01 c0       	push   0xc001f1dc
c0017cc3:	e8 d3 85 ff ff       	call   c001029b <KePanic(char const*)>
c0017cc8:	83 c4 10             	add    esp,0x10
c0017ccb:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ccd:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017cd2:	83 c3 03             	add    ebx,0x3
c0017cd5:	52                   	push   edx
c0017cd6:	52                   	push   edx
c0017cd7:	6a 00                	push   0x0
c0017cd9:	53                   	push   ebx
c0017cda:	e8 1e e6 fe ff       	call   c00062fd <iso_open>
c0017cdf:	83 c4 10             	add    esp,0x10
c0017ce2:	89 c5                	mov    ebp,eax
c0017ce4:	83 f8 ff             	cmp    eax,0xffffffff
c0017ce7:	75 0f                	jne    c0017cf8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017ce9:	50                   	push   eax
c0017cea:	50                   	push   eax
c0017ceb:	6a 01                	push   0x1
c0017ced:	53                   	push   ebx
c0017cee:	e8 0a e6 fe ff       	call   c00062fd <iso_open>
c0017cf3:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cf6:	eb 1a                	jmp    c0017d12 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017cf8:	83 ec 0c             	sub    esp,0xc
c0017cfb:	50                   	push   eax
c0017cfc:	e8 6f e8 fe ff       	call   c0006570 <iso_total>
c0017d01:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d08:	89 06                	mov    DWORD PTR [esi],eax
c0017d0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d0d:	e8 75 e6 fe ff       	call   c0006387 <iso_close>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	31 d2                	xor    edx,edx
c0017d17:	eb 05                	jmp    c0017d1e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d19:	ba 04 00 00 00       	mov    edx,0x4
c0017d1e:	83 c4 0c             	add    esp,0xc
c0017d21:	89 d0                	mov    eax,edx
c0017d23:	5b                   	pop    ebx
c0017d24:	5e                   	pop    esi
c0017d25:	5f                   	pop    edi
c0017d26:	5d                   	pop    ebp
c0017d27:	c3                   	ret    

c0017d28 <ISO9660::close(void*)>:
c0017d28:	83 ec 0c             	sub    esp,0xc
c0017d2b:	b8 04 00 00 00       	mov    eax,0x4
c0017d30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d34:	85 d2                	test   edx,edx
c0017d36:	74 11                	je     c0017d49 <ISO9660::close(void*)+0x21>
c0017d38:	83 ec 0c             	sub    esp,0xc
c0017d3b:	83 ea 64             	sub    edx,0x64
c0017d3e:	52                   	push   edx
c0017d3f:	e8 43 e6 fe ff       	call   c0006387 <iso_close>
c0017d44:	83 c4 10             	add    esp,0x10
c0017d47:	31 c0                	xor    eax,eax
c0017d49:	83 c4 0c             	add    esp,0xc
c0017d4c:	c3                   	ret    
c0017d4d:	90                   	nop

c0017d4e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d4e:	55                   	push   ebp
c0017d4f:	57                   	push   edi
c0017d50:	56                   	push   esi
c0017d51:	53                   	push   ebx
c0017d52:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d58:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d5f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d66:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d6d:	85 c0                	test   eax,eax
c0017d6f:	0f 84 96 00 00 00    	je     c0017e0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d75:	85 db                	test   ebx,ebx
c0017d77:	0f 84 8e 00 00 00    	je     c0017e0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d7d:	83 ec 0c             	sub    esp,0xc
c0017d80:	83 e8 64             	sub    eax,0x64
c0017d83:	50                   	push   eax
c0017d84:	e8 38 e8 fe ff       	call   c00065c1 <iso_readdir>
c0017d89:	83 c4 10             	add    esp,0x10
c0017d8c:	89 c6                	mov    esi,eax
c0017d8e:	85 c0                	test   eax,eax
c0017d90:	75 18                	jne    c0017daa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017d92:	52                   	push   edx
c0017d93:	68 10 01 00 00       	push   0x110
c0017d98:	6a 00                	push   0x0
c0017d9a:	57                   	push   edi
c0017d9b:	e8 30 87 fe ff       	call   c00004d0 <memset>
c0017da0:	83 c4 10             	add    esp,0x10
c0017da3:	b8 01 00 00 00       	mov    eax,0x1
c0017da8:	eb 66                	jmp    c0017e10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017daa:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017db0:	8d 68 08             	lea    ebp,[eax+0x8]
c0017db3:	83 ec 0c             	sub    esp,0xc
c0017db6:	55                   	push   ebp
c0017db7:	e8 84 87 fe ff       	call   c0000540 <strlen>
c0017dbc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017dcf:	75 0a                	jne    c0017ddb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017dd1:	b8 02 00 00 00       	mov    eax,0x2
c0017dd6:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017dd9:	74 05                	je     c0017de0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017ddb:	b8 01 00 00 00       	mov    eax,0x1
c0017de0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017de4:	50                   	push   eax
c0017de5:	50                   	push   eax
c0017de6:	55                   	push   ebp
c0017de7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017deb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017def:	50                   	push   eax
c0017df0:	e8 0b 88 fe ff       	call   c0000600 <strcpy>
c0017df5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017dfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dfe:	31 c0                	xor    eax,eax
c0017e00:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	eb 05                	jmp    c0017e10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e0b:	b8 04 00 00 00       	mov    eax,0x4
c0017e10:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e16:	5b                   	pop    ebx
c0017e17:	5e                   	pop    esi
c0017e18:	5f                   	pop    edi
c0017e19:	5d                   	pop    ebp
c0017e1a:	c3                   	ret    

c0017e1b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e1b:	57                   	push   edi
c0017e1c:	56                   	push   esi
c0017e1d:	53                   	push   ebx
c0017e1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e22:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e26:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e2a:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017e30:	75 08                	jne    c0017e3a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e32:	38 1d 10 fc 01 c0    	cmp    BYTE PTR ds:0xc001fc10,bl
c0017e38:	74 4a                	je     c0017e84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e3a:	83 ec 0c             	sub    esp,0xc
c0017e3d:	31 d2                	xor    edx,edx
c0017e3f:	68 40 53 02 c0       	push   0xc0025340
c0017e44:	0f be c3             	movsx  eax,bl
c0017e47:	6a 01                	push   0x1
c0017e49:	52                   	push   edx
c0017e4a:	56                   	push   esi
c0017e4b:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017e52:	e8 e9 4e ff ff       	call   c000cd40 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e57:	83 c4 20             	add    esp,0x20
c0017e5a:	85 c0                	test   eax,eax
c0017e5c:	75 0e                	jne    c0017e6c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e5e:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017e64:	88 1d 10 fc 01 c0    	mov    BYTE PTR ds:0xc001fc10,bl
c0017e6a:	eb 18                	jmp    c0017e84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e6c:	50                   	push   eax
c0017e6d:	68 00 08 00 00       	push   0x800
c0017e72:	6a 00                	push   0x0
c0017e74:	57                   	push   edi
c0017e75:	e8 56 86 fe ff       	call   c00004d0 <memset>
c0017e7a:	83 c4 10             	add    esp,0x10
c0017e7d:	b8 01 00 00 00       	mov    eax,0x1
c0017e82:	eb 0e                	jmp    c0017e92 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017e84:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017e89:	b9 00 08 00 00       	mov    ecx,0x800
c0017e8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e90:	31 c0                	xor    eax,eax
c0017e92:	5b                   	pop    ebx
c0017e93:	5e                   	pop    esi
c0017e94:	5f                   	pop    edi
c0017e95:	c3                   	ret    

c0017e96 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e96:	53                   	push   ebx
c0017e97:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e9d:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017ea7:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017eae:	8d 58 41             	lea    ebx,[eax+0x41]
c0017eb1:	0f be db             	movsx  ebx,bl
c0017eb4:	53                   	push   ebx
c0017eb5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017eb9:	50                   	push   eax
c0017eba:	6a 10                	push   0x10
c0017ebc:	e8 5a ff ff ff       	call   c0017e1b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017ec1:	83 c4 10             	add    esp,0x10
c0017ec4:	31 d2                	xor    edx,edx
c0017ec6:	85 c0                	test   eax,eax
c0017ec8:	75 33                	jne    c0017efd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eca:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017ecf:	75 2c                	jne    c0017efd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ed1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017ed6:	75 25                	jne    c0017efd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ed8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017edd:	75 1e                	jne    c0017efd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017edf:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017ee4:	75 17                	jne    c0017efd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ee6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017eeb:	75 10                	jne    c0017efd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eed:	83 ec 0c             	sub    esp,0xc
c0017ef0:	53                   	push   ebx
c0017ef1:	e8 c9 e8 fe ff       	call   c00067bf <init_percd>
c0017ef6:	83 c4 10             	add    esp,0x10
c0017ef9:	40                   	inc    eax
c0017efa:	0f 95 c2             	setne  dl
c0017efd:	88 d0                	mov    al,dl
c0017eff:	81 c4 08 08 00 00    	add    esp,0x808
c0017f05:	5b                   	pop    ebx
c0017f06:	c3                   	ret    
c0017f07:	90                   	nop

c0017f08 <ISO9660::ISO9660()>:
c0017f08:	83 ec 0c             	sub    esp,0xc
c0017f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f0f:	83 ec 0c             	sub    esp,0xc
c0017f12:	50                   	push   eax
c0017f13:	e8 22 2a ff ff       	call   c000a93a <Filesystem::Filesystem()>
c0017f18:	83 c4 10             	add    esp,0x10
c0017f1b:	ba f4 f1 01 c0       	mov    edx,0xc001f1f4
c0017f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f24:	89 10                	mov    DWORD PTR [eax],edx
c0017f26:	e8 96 e9 fe ff       	call   c00068c1 <fs_iso9660_init>
c0017f2b:	90                   	nop
c0017f2c:	83 c4 0c             	add    esp,0xc
c0017f2f:	c3                   	ret    

c0017f30 <SoundCard::beginPlayback()>:
c0017f30:	c7 44 24 04 54 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f254
c0017f38:	e9 5e 83 ff ff       	jmp    c001029b <KePanic(char const*)>
c0017f3d:	90                   	nop

c0017f3e <SoundCard::stopPlayback()>:
c0017f3e:	c7 44 24 04 54 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f254
c0017f46:	e9 50 83 ff ff       	jmp    c001029b <KePanic(char const*)>
c0017f4b:	90                   	nop

c0017f4c <SoundCard::SoundCard(char const*)>:
c0017f4c:	83 ec 1c             	sub    esp,0x1c
c0017f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f53:	83 ec 08             	sub    esp,0x8
c0017f56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f5a:	50                   	push   eax
c0017f5b:	e8 90 3c ff ff       	call   c000bbf0 <Device::Device(char const*)>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	ba a0 f2 01 c0       	mov    edx,0xc001f2a0
c0017f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6c:	89 10                	mov    DWORD PTR [eax],edx
c0017f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f72:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f7d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f8b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f99:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017fb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017fb9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017fbe:	7f 19                	jg     c0017fd9 <SoundCard::SoundCard(char const*)+0x8d>
c0017fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fc8:	83 c2 54             	add    edx,0x54
c0017fcb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017fd3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fd7:	eb e0                	jmp    c0017fb9 <SoundCard::SoundCard(char const*)+0x6d>
c0017fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fdd:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fe4:	90                   	nop
c0017fe5:	83 c4 1c             	add    esp,0x1c
c0017fe8:	c3                   	ret    
c0017fe9:	90                   	nop

c0017fea <SoundCard::~SoundCard()>:
c0017fea:	83 ec 0c             	sub    esp,0xc
c0017fed:	ba a0 f2 01 c0       	mov    edx,0xc001f2a0
c0017ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff6:	89 10                	mov    DWORD PTR [eax],edx
c0017ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ffc:	83 ec 0c             	sub    esp,0xc
c0017fff:	50                   	push   eax
c0018000:	e8 55 39 ff ff       	call   c000b95a <Device::~Device()>
c0018005:	83 c4 10             	add    esp,0x10
c0018008:	90                   	nop
c0018009:	83 c4 0c             	add    esp,0xc
c001800c:	c3                   	ret    
c001800d:	90                   	nop

c001800e <SoundCard::~SoundCard()>:
c001800e:	83 ec 0c             	sub    esp,0xc
c0018011:	83 ec 0c             	sub    esp,0xc
c0018014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018018:	e8 cd ff ff ff       	call   c0017fea <SoundCard::~SoundCard()>
c001801d:	83 c4 10             	add    esp,0x10
c0018020:	83 ec 08             	sub    esp,0x8
c0018023:	68 e8 01 00 00       	push   0x1e8
c0018028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001802c:	e8 f2 24 ff ff       	call   c000a523 <operator delete(void*, unsigned long)>
c0018031:	83 c4 10             	add    esp,0x10
c0018034:	83 c4 0c             	add    esp,0xc
c0018037:	c3                   	ret    

c0018038 <SoundCard::configureRates(int, int, int)>:
c0018038:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001803c:	31 c0                	xor    eax,eax
c001803e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018045:	75 20                	jne    c0018067 <SoundCard::configureRates(int, int, int)+0x2f>
c0018047:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001804b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018051:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018055:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001805b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001805f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018065:	b0 01                	mov    al,0x1
c0018067:	c3                   	ret    

c0018068 <SoundCard::getSamples16(int, short*)>:
c0018068:	55                   	push   ebp
c0018069:	57                   	push   edi
c001806a:	31 ff                	xor    edi,edi
c001806c:	56                   	push   esi
c001806d:	53                   	push   ebx
c001806e:	31 db                	xor    ebx,ebx
c0018070:	83 ec 10             	sub    esp,0x10
c0018073:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018077:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001807b:	8d 04 36             	lea    eax,[esi+esi*1]
c001807e:	50                   	push   eax
c001807f:	6a 00                	push   0x0
c0018081:	55                   	push   ebp
c0018082:	e8 49 84 fe ff       	call   c00004d0 <memset>
c0018087:	83 c4 10             	add    esp,0x10
c001808a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001808e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018095:	85 c0                	test   eax,eax
c0018097:	74 1b                	je     c00180b4 <SoundCard::getSamples16(int, short*)+0x4c>
c0018099:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001809d:	75 15                	jne    c00180b4 <SoundCard::getSamples16(int, short*)+0x4c>
c001809f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180a3:	55                   	push   ebp
c00180a4:	56                   	push   esi
c00180a5:	50                   	push   eax
c00180a6:	e8 ed 02 00 00       	call   c0018398 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00180ab:	83 c4 10             	add    esp,0x10
c00180ae:	39 c7                	cmp    edi,eax
c00180b0:	7d 02                	jge    c00180b4 <SoundCard::getSamples16(int, short*)+0x4c>
c00180b2:	89 c7                	mov    edi,eax
c00180b4:	43                   	inc    ebx
c00180b5:	83 fb 20             	cmp    ebx,0x20
c00180b8:	75 d0                	jne    c001808a <SoundCard::getSamples16(int, short*)+0x22>
c00180ba:	83 c4 0c             	add    esp,0xc
c00180bd:	89 f8                	mov    eax,edi
c00180bf:	5b                   	pop    ebx
c00180c0:	5e                   	pop    esi
c00180c1:	5f                   	pop    edi
c00180c2:	5d                   	pop    ebp
c00180c3:	c3                   	ret    

c00180c4 <SoundCard::getSamples32(int, int*)>:
c00180c4:	55                   	push   ebp
c00180c5:	57                   	push   edi
c00180c6:	31 ff                	xor    edi,edi
c00180c8:	56                   	push   esi
c00180c9:	31 f6                	xor    esi,esi
c00180cb:	53                   	push   ebx
c00180cc:	83 ec 10             	sub    esp,0x10
c00180cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180d7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180db:	c1 e0 02             	shl    eax,0x2
c00180de:	50                   	push   eax
c00180df:	6a 00                	push   0x0
c00180e1:	55                   	push   ebp
c00180e2:	e8 e9 83 fe ff       	call   c00004d0 <memset>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00180f1:	85 c0                	test   eax,eax
c00180f3:	74 1b                	je     c0018110 <SoundCard::getSamples32(int, int*)+0x4c>
c00180f5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180f9:	75 15                	jne    c0018110 <SoundCard::getSamples32(int, int*)+0x4c>
c00180fb:	53                   	push   ebx
c00180fc:	55                   	push   ebp
c00180fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018101:	50                   	push   eax
c0018102:	e8 55 03 00 00       	call   c001845c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	39 c6                	cmp    esi,eax
c001810c:	7d 02                	jge    c0018110 <SoundCard::getSamples32(int, int*)+0x4c>
c001810e:	89 c6                	mov    esi,eax
c0018110:	47                   	inc    edi
c0018111:	83 ff 20             	cmp    edi,0x20
c0018114:	75 d4                	jne    c00180ea <SoundCard::getSamples32(int, int*)+0x26>
c0018116:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001811c:	85 f6                	test   esi,esi
c001811e:	75 0f                	jne    c001812f <SoundCard::getSamples32(int, int*)+0x6b>
c0018120:	84 c0                	test   al,al
c0018122:	74 1b                	je     c001813f <SoundCard::getSamples32(int, int*)+0x7b>
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018129:	53                   	push   ebx
c001812a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001812d:	eb 0d                	jmp    c001813c <SoundCard::getSamples32(int, int*)+0x78>
c001812f:	84 c0                	test   al,al
c0018131:	75 0c                	jne    c001813f <SoundCard::getSamples32(int, int*)+0x7b>
c0018133:	83 ec 0c             	sub    esp,0xc
c0018136:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018138:	53                   	push   ebx
c0018139:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001813c:	83 c4 10             	add    esp,0x10
c001813f:	83 c4 0c             	add    esp,0xc
c0018142:	89 f0                	mov    eax,esi
c0018144:	5b                   	pop    ebx
c0018145:	5e                   	pop    esi
c0018146:	5f                   	pop    edi
c0018147:	5d                   	pop    ebp
c0018148:	c3                   	ret    
c0018149:	90                   	nop

c001814a <SoundCard::addChannel(SoundPort*)>:
c001814a:	83 ec 0c             	sub    esp,0xc
c001814d:	31 c0                	xor    eax,eax
c001814f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018153:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001815b:	74 1b                	je     c0018178 <SoundCard::addChannel(SoundPort*)+0x2e>
c001815d:	40                   	inc    eax
c001815e:	83 f8 20             	cmp    eax,0x20
c0018161:	75 f0                	jne    c0018153 <SoundCard::addChannel(SoundPort*)+0x9>
c0018163:	83 ec 0c             	sub    esp,0xc
c0018166:	68 79 f2 01 c0       	push   0xc001f279
c001816b:	e8 2b 81 ff ff       	call   c001029b <KePanic(char const*)>
c0018170:	83 c4 10             	add    esp,0x10
c0018173:	83 c8 ff             	or     eax,0xffffffff
c0018176:	eb 0b                	jmp    c0018183 <SoundCard::addChannel(SoundPort*)+0x39>
c0018178:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001817c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018183:	83 c4 0c             	add    esp,0xc
c0018186:	c3                   	ret    
c0018187:	90                   	nop

c0018188 <SoundCard::removeChannel(int)>:
c0018188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001818c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018190:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001819b:	c3                   	ret    

c001819c <SoundPort::SoundPort(int, int, int, int)>:
c001819c:	83 ec 0c             	sub    esp,0xc
c001819f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ae:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181ba:	89 10                	mov    DWORD PTR [eax],edx
c00181bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181cf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181d2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181d7:	75 13                	jne    c00181ec <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00181df:	05 a0 0f 00 00       	add    eax,0xfa0
c00181e4:	01 c0                	add    eax,eax
c00181e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181ea:	66 90                	xchg   ax,ax
c00181ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181f4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018206:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018209:	c1 e0 02             	shl    eax,0x2
c001820c:	83 ec 0c             	sub    esp,0xc
c001820f:	50                   	push   eax
c0018210:	e8 a4 f5 fe ff       	call   c00077b9 <malloc>
c0018215:	83 c4 10             	add    esp,0x10
c0018218:	89 c2                	mov    edx,eax
c001821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018221:	90                   	nop
c0018222:	83 c4 0c             	add    esp,0xc
c0018225:	c3                   	ret    
c0018226:	66 90                	xchg   ax,ax

c0018228 <SoundPort::~SoundPort()>:
c0018228:	83 ec 0c             	sub    esp,0xc
c001822b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018232:	85 c0                	test   eax,eax
c0018234:	74 1e                	je     c0018254 <SoundPort::~SoundPort()+0x2c>
c0018236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001823d:	83 ec 0c             	sub    esp,0xc
c0018240:	50                   	push   eax
c0018241:	e8 83 f5 fe ff       	call   c00077c9 <free>
c0018246:	83 c4 10             	add    esp,0x10
c0018249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018254:	90                   	nop
c0018255:	83 c4 0c             	add    esp,0xc
c0018258:	c3                   	ret    
c0018259:	90                   	nop
c001825a:	66 90                	xchg   ax,ax

c001825c <SoundPort::unpause()>:
c001825c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018260:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018264:	c3                   	ret    
c0018265:	90                   	nop
c0018266:	66 90                	xchg   ax,ax

c0018268 <SoundPort::pause()>:
c0018268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001826c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018270:	c3                   	ret    
c0018271:	90                   	nop
c0018272:	66 90                	xchg   ax,ax

c0018274 <SoundPort::getBufferUsed()>:
c0018274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018278:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001827b:	c3                   	ret    

c001827c <SoundPort::getBufferSize()>:
c001827c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018280:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018283:	c3                   	ret    

c0018284 <SoundPort::buffer16(short*, int)>:
c0018284:	55                   	push   ebp
c0018285:	57                   	push   edi
c0018286:	56                   	push   esi
c0018287:	53                   	push   ebx
c0018288:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001828c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018290:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018293:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018296:	74 68                	je     c0018300 <SoundPort::buffer16(short*, int)+0x7c>
c0018298:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001829c:	85 c9                	test   ecx,ecx
c001829e:	7e 60                	jle    c0018300 <SoundPort::buffer16(short*, int)+0x7c>
c00182a0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00182a4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182a7:	c1 e1 0f             	shl    ecx,0xf
c00182aa:	8d 70 01             	lea    esi,[eax+0x1]
c00182ad:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182b0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00182b3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182b6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182b9:	74 4d                	je     c0018308 <SoundPort::buffer16(short*, int)+0x84>
c00182bb:	31 f6                	xor    esi,esi
c00182bd:	eb 21                	jmp    c00182e0 <SoundPort::buffer16(short*, int)+0x5c>
c00182bf:	90                   	nop
c00182c0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182c5:	8d 79 01             	lea    edi,[ecx+0x1]
c00182c8:	c1 e3 0f             	shl    ebx,0xf
c00182cb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182ce:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182d1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182d4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182d7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182da:	74 1c                	je     c00182f8 <SoundPort::buffer16(short*, int)+0x74>
c00182dc:	89 c6                	mov    esi,eax
c00182de:	66 90                	xchg   ax,ax
c00182e0:	8d 46 01             	lea    eax,[esi+0x1]
c00182e3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182e7:	75 d7                	jne    c00182c0 <SoundPort::buffer16(short*, int)+0x3c>
c00182e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182ed:	8d 76 00             	lea    esi,[esi+0x0]
c00182f0:	5b                   	pop    ebx
c00182f1:	5e                   	pop    esi
c00182f2:	5f                   	pop    edi
c00182f3:	5d                   	pop    ebp
c00182f4:	c3                   	ret    
c00182f5:	8d 76 00             	lea    esi,[esi+0x0]
c00182f8:	5b                   	pop    ebx
c00182f9:	8d 46 02             	lea    eax,[esi+0x2]
c00182fc:	5e                   	pop    esi
c00182fd:	5f                   	pop    edi
c00182fe:	5d                   	pop    ebp
c00182ff:	c3                   	ret    
c0018300:	5b                   	pop    ebx
c0018301:	31 c0                	xor    eax,eax
c0018303:	5e                   	pop    esi
c0018304:	5f                   	pop    edi
c0018305:	5d                   	pop    ebp
c0018306:	c3                   	ret    
c0018307:	90                   	nop
c0018308:	b8 01 00 00 00       	mov    eax,0x1
c001830d:	eb e1                	jmp    c00182f0 <SoundPort::buffer16(short*, int)+0x6c>
c001830f:	90                   	nop

c0018310 <SoundPort::buffer32(int*, int)>:
c0018310:	55                   	push   ebp
c0018311:	57                   	push   edi
c0018312:	56                   	push   esi
c0018313:	53                   	push   ebx
c0018314:	51                   	push   ecx
c0018315:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001831d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018320:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018324:	89 04 24             	mov    DWORD PTR [esp],eax
c0018327:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001832a:	74 5c                	je     c0018388 <SoundPort::buffer32(int*, int)+0x78>
c001832c:	85 c0                	test   eax,eax
c001832e:	7e 58                	jle    c0018388 <SoundPort::buffer32(int*, int)+0x78>
c0018330:	8d 71 01             	lea    esi,[ecx+0x1]
c0018333:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018336:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018339:	8b 37                	mov    esi,DWORD PTR [edi]
c001833b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001833e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018341:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018344:	74 4a                	je     c0018390 <SoundPort::buffer32(int*, int)+0x80>
c0018346:	31 f6                	xor    esi,esi
c0018348:	eb 1e                	jmp    c0018368 <SoundPort::buffer32(int*, int)+0x58>
c001834a:	66 90                	xchg   ax,ax
c001834c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001834f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018352:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018355:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018358:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001835c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001835f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018362:	74 18                	je     c001837c <SoundPort::buffer32(int*, int)+0x6c>
c0018364:	89 de                	mov    esi,ebx
c0018366:	66 90                	xchg   ax,ax
c0018368:	8d 5e 01             	lea    ebx,[esi+0x1]
c001836b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001836e:	75 dc                	jne    c001834c <SoundPort::buffer32(int*, int)+0x3c>
c0018370:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018373:	90                   	nop
c0018374:	5a                   	pop    edx
c0018375:	5b                   	pop    ebx
c0018376:	5e                   	pop    esi
c0018377:	5f                   	pop    edi
c0018378:	5d                   	pop    ebp
c0018379:	c3                   	ret    
c001837a:	66 90                	xchg   ax,ax
c001837c:	5a                   	pop    edx
c001837d:	8d 46 02             	lea    eax,[esi+0x2]
c0018380:	5b                   	pop    ebx
c0018381:	5e                   	pop    esi
c0018382:	5f                   	pop    edi
c0018383:	5d                   	pop    ebp
c0018384:	c3                   	ret    
c0018385:	8d 76 00             	lea    esi,[esi+0x0]
c0018388:	5a                   	pop    edx
c0018389:	31 c0                	xor    eax,eax
c001838b:	5b                   	pop    ebx
c001838c:	5e                   	pop    esi
c001838d:	5f                   	pop    edi
c001838e:	5d                   	pop    ebp
c001838f:	c3                   	ret    
c0018390:	b8 01 00 00 00       	mov    eax,0x1
c0018395:	eb dd                	jmp    c0018374 <SoundPort::buffer32(int*, int)+0x64>
c0018397:	90                   	nop

c0018398 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018398:	57                   	push   edi
c0018399:	56                   	push   esi
c001839a:	53                   	push   ebx
c001839b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001839f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00183a3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00183a9:	39 03                	cmp    DWORD PTR [ebx],eax
c00183ab:	74 13                	je     c00183c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00183ad:	83 ec 0c             	sub    esp,0xc
c00183b0:	68 cc f2 01 c0       	push   0xc001f2cc
c00183b5:	e8 e1 7e ff ff       	call   c001029b <KePanic(char const*)>
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	8d 76 00             	lea    esi,[esi+0x0]
c00183c0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183c6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183c9:	74 11                	je     c00183dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183cb:	83 ec 0c             	sub    esp,0xc
c00183ce:	68 0b f3 01 c0       	push   0xc001f30b
c00183d3:	e8 c3 7e ff ff       	call   c001029b <KePanic(char const*)>
c00183d8:	83 c4 10             	add    esp,0x10
c00183db:	90                   	nop
c00183dc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183e2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183e5:	74 11                	je     c00183f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183e7:	83 ec 0c             	sub    esp,0xc
c00183ea:	68 0b f3 01 c0       	push   0xc001f30b
c00183ef:	e8 a7 7e ff ff       	call   c001029b <KePanic(char const*)>
c00183f4:	83 c4 10             	add    esp,0x10
c00183f7:	90                   	nop
c00183f8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183fb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183ff:	7e 07                	jle    c0018408 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018401:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018405:	8d 76 00             	lea    esi,[esi+0x0]
c0018408:	85 f6                	test   esi,esi
c001840a:	7e 2c                	jle    c0018438 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001840c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018410:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018413:	31 c9                	xor    ecx,ecx
c0018415:	01 d7                	add    edi,edx
c0018417:	90                   	nop
c0018418:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001841b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001841e:	85 c0                	test   eax,eax
c0018420:	79 06                	jns    c0018428 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018422:	05 ff 7f 00 00       	add    eax,0x7fff
c0018427:	90                   	nop
c0018428:	c1 f8 0f             	sar    eax,0xf
c001842b:	83 c1 04             	add    ecx,0x4
c001842e:	66 01 02             	add    WORD PTR [edx],ax
c0018431:	83 c2 02             	add    edx,0x2
c0018434:	39 d7                	cmp    edi,edx
c0018436:	75 e0                	jne    c0018418 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018438:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001843b:	50                   	push   eax
c001843c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001843f:	29 f0                	sub    eax,esi
c0018441:	c1 e0 02             	shl    eax,0x2
c0018444:	50                   	push   eax
c0018445:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018448:	50                   	push   eax
c0018449:	52                   	push   edx
c001844a:	e8 91 7f fe ff       	call   c00003e0 <memmove>
c001844f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	89 f0                	mov    eax,esi
c0018457:	5b                   	pop    ebx
c0018458:	5e                   	pop    esi
c0018459:	5f                   	pop    edi
c001845a:	c3                   	ret    
c001845b:	90                   	nop

c001845c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001845c:	57                   	push   edi
c001845d:	56                   	push   esi
c001845e:	53                   	push   ebx
c001845f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018463:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018467:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001846b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018471:	39 06                	cmp    DWORD PTR [esi],eax
c0018473:	74 13                	je     c0018488 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018475:	83 ec 0c             	sub    esp,0xc
c0018478:	68 ec f2 01 c0       	push   0xc001f2ec
c001847d:	e8 19 7e ff ff       	call   c001029b <KePanic(char const*)>
c0018482:	83 c4 10             	add    esp,0x10
c0018485:	8d 76 00             	lea    esi,[esi+0x0]
c0018488:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001848e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018491:	74 11                	je     c00184a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018493:	83 ec 0c             	sub    esp,0xc
c0018496:	68 27 f3 01 c0       	push   0xc001f327
c001849b:	e8 fb 7d ff ff       	call   c001029b <KePanic(char const*)>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	90                   	nop
c00184a4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00184aa:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00184ad:	74 11                	je     c00184c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00184af:	83 ec 0c             	sub    esp,0xc
c00184b2:	68 27 f3 01 c0       	push   0xc001f327
c00184b7:	e8 df 7d ff ff       	call   c001029b <KePanic(char const*)>
c00184bc:	83 c4 10             	add    esp,0x10
c00184bf:	90                   	nop
c00184c0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00184c3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184c7:	7e 07                	jle    c00184d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184c9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184cd:	8d 76 00             	lea    esi,[esi+0x0]
c00184d0:	85 ff                	test   edi,edi
c00184d2:	7e 1c                	jle    c00184f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184d4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184db:	31 c0                	xor    eax,eax
c00184dd:	8d 76 00             	lea    esi,[esi+0x0]
c00184e0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184e3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184e6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184e9:	83 c0 04             	add    eax,0x4
c00184ec:	39 c1                	cmp    ecx,eax
c00184ee:	75 f0                	jne    c00184e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00184f0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184f3:	50                   	push   eax
c00184f4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00184f7:	29 f8                	sub    eax,edi
c00184f9:	c1 e0 02             	shl    eax,0x2
c00184fc:	50                   	push   eax
c00184fd:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018500:	50                   	push   eax
c0018501:	52                   	push   edx
c0018502:	e8 d9 7e fe ff       	call   c00003e0 <memmove>
c0018507:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001850a:	83 c4 10             	add    esp,0x10
c001850d:	89 f8                	mov    eax,edi
c001850f:	5b                   	pop    ebx
c0018510:	5e                   	pop    esi
c0018511:	5f                   	pop    edi
c0018512:	c3                   	ret    
c0018513:	90                   	nop

c0018514 <PCI::open(int, int, void*)>:
c0018514:	83 ec 18             	sub    esp,0x18
c0018517:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001851b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001851f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018525:	8b 10                	mov    edx,DWORD PTR [eax]
c0018527:	50                   	push   eax
c0018528:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001852b:	31 c0                	xor    eax,eax
c001852d:	83 c4 1c             	add    esp,0x1c
c0018530:	c3                   	ret    
c0018531:	90                   	nop

c0018532 <PCI::close(int, int, void*)>:
c0018532:	31 c0                	xor    eax,eax
c0018534:	c3                   	ret    
c0018535:	90                   	nop

c0018536 <PCI::PCI()>:
c0018536:	83 ec 0c             	sub    esp,0xc
c0018539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001853d:	83 ec 08             	sub    esp,0x8
c0018540:	68 43 f3 01 c0       	push   0xc001f343
c0018545:	50                   	push   eax
c0018546:	e8 61 2e ff ff       	call   c000b3ac <Bus::Bus(char const*)>
c001854b:	83 c4 10             	add    esp,0x10
c001854e:	ba ec f3 01 c0       	mov    edx,0xc001f3ec
c0018553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018557:	89 10                	mov    DWORD PTR [eax],edx
c0018559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001856b:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c0018570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018574:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001857a:	31 d2                	xor    edx,edx
c001857c:	88 c2                	mov    dl,al
c001857e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018582:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018593:	31 d2                	xor    edx,edx
c0018595:	88 c2                	mov    dl,al
c0018597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00185a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185aa:	8d 50 01             	lea    edx,[eax+0x1]
c00185ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185b1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00185b7:	31 d2                	xor    edx,edx
c00185b9:	88 c2                	mov    dl,al
c00185bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185bf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00185c3:	83 c9 c0             	or     ecx,0xffffffc0
c00185c6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185ca:	90                   	nop
c00185cb:	83 c4 0c             	add    esp,0xc
c00185ce:	c3                   	ret    
c00185cf:	90                   	nop

c00185d0 <PCI::readBAR8(unsigned int, int)>:
c00185d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185d8:	f6 c2 01             	test   dl,0x1
c00185db:	74 07                	je     c00185e4 <PCI::readBAR8(unsigned int, int)+0x14>
c00185dd:	83 e2 fc             	and    edx,0xfffffffc
c00185e0:	01 c2                	add    edx,eax
c00185e2:	ec                   	in     al,dx
c00185e3:	c3                   	ret    
c00185e4:	83 e2 f0             	and    edx,0xfffffff0
c00185e7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185ea:	c3                   	ret    
c00185eb:	90                   	nop

c00185ec <PCI::readBAR16(unsigned int, int)>:
c00185ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185f4:	f6 c2 01             	test   dl,0x1
c00185f7:	74 08                	je     c0018601 <PCI::readBAR16(unsigned int, int)+0x15>
c00185f9:	83 e2 fc             	and    edx,0xfffffffc
c00185fc:	01 c2                	add    edx,eax
c00185fe:	66 ed                	in     ax,dx
c0018600:	c3                   	ret    
c0018601:	83 e2 f0             	and    edx,0xfffffff0
c0018604:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018608:	c3                   	ret    
c0018609:	90                   	nop

c001860a <PCI::readBAR32(unsigned int, int)>:
c001860a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001860e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018612:	f6 c2 01             	test   dl,0x1
c0018615:	74 07                	je     c001861e <PCI::readBAR32(unsigned int, int)+0x14>
c0018617:	83 e2 fc             	and    edx,0xfffffffc
c001861a:	01 c2                	add    edx,eax
c001861c:	ed                   	in     eax,dx
c001861d:	c3                   	ret    
c001861e:	83 e2 f0             	and    edx,0xfffffff0
c0018621:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018624:	c3                   	ret    
c0018625:	90                   	nop

c0018626 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001862a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001862e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018632:	f6 c2 01             	test   dl,0x1
c0018635:	74 07                	je     c001863e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018637:	83 e2 fc             	and    edx,0xfffffffc
c001863a:	01 ca                	add    edx,ecx
c001863c:	ee                   	out    dx,al
c001863d:	c3                   	ret    
c001863e:	83 e2 f0             	and    edx,0xfffffff0
c0018641:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018644:	c3                   	ret    
c0018645:	90                   	nop

c0018646 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018646:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001864a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001864e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018652:	f6 c2 01             	test   dl,0x1
c0018655:	74 08                	je     c001865f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018657:	83 e2 fc             	and    edx,0xfffffffc
c001865a:	01 ca                	add    edx,ecx
c001865c:	66 ef                	out    dx,ax
c001865e:	c3                   	ret    
c001865f:	83 e2 f0             	and    edx,0xfffffff0
c0018662:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018666:	c3                   	ret    
c0018667:	90                   	nop

c0018668 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001866c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018670:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018674:	f6 c2 01             	test   dl,0x1
c0018677:	74 07                	je     c0018680 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018679:	83 e2 fc             	and    edx,0xfffffffc
c001867c:	01 ca                	add    edx,ecx
c001867e:	ef                   	out    dx,eax
c001867f:	c3                   	ret    
c0018680:	83 e2 f0             	and    edx,0xfffffff0
c0018683:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018686:	c3                   	ret    
c0018687:	90                   	nop

c0018688 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018688:	55                   	push   ebp
c0018689:	57                   	push   edi
c001868a:	56                   	push   esi
c001868b:	53                   	push   ebx
c001868c:	83 ec 0c             	sub    esp,0xc
c001868f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018693:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018697:	89 f0                	mov    eax,esi
c0018699:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001869d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00186a1:	3c 07                	cmp    al,0x7
c00186a3:	76 10                	jbe    c00186b5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00186a5:	83 ec 0c             	sub    esp,0xc
c00186a8:	68 4b f3 01 c0       	push   0xc001f34b
c00186ad:	e8 e9 7b ff ff       	call   c001029b <KePanic(char const*)>
c00186b2:	83 c4 10             	add    esp,0x10
c00186b5:	80 fb 0f             	cmp    bl,0xf
c00186b8:	76 10                	jbe    c00186ca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00186ba:	83 ec 0c             	sub    esp,0xc
c00186bd:	68 7b f3 01 c0       	push   0xc001f37b
c00186c2:	e8 d4 7b ff ff       	call   c001029b <KePanic(char const*)>
c00186c7:	83 c4 10             	add    esp,0x10
c00186ca:	8d 04 36             	lea    eax,[esi+esi*1]
c00186cd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186d2:	83 c8 f0             	or     eax,0xfffffff0
c00186d5:	ee                   	out    dx,al
c00186d6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186db:	89 e8                	mov    eax,ebp
c00186dd:	ee                   	out    dx,al
c00186de:	83 c4 0c             	add    esp,0xc
c00186e1:	89 d8                	mov    eax,ebx
c00186e3:	66 81 e7 fc 00       	and    di,0xfc
c00186e8:	5b                   	pop    ebx
c00186e9:	c1 e0 08             	shl    eax,0x8
c00186ec:	5e                   	pop    esi
c00186ed:	09 f8                	or     eax,edi
c00186ef:	5f                   	pop    edi
c00186f0:	66 0d 00 c0          	or     ax,0xc000
c00186f4:	5d                   	pop    ebp
c00186f5:	c3                   	ret    

c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186f6:	57                   	push   edi
c00186f7:	56                   	push   esi
c00186f8:	53                   	push   ebx
c00186f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018701:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001870b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001870f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018713:	83 ff 01             	cmp    edi,0x1
c0018716:	75 3e                	jne    c0018756 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018718:	89 de                	mov    esi,ebx
c001871a:	0f b6 c0             	movzx  eax,al
c001871d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018723:	c1 e0 10             	shl    eax,0x10
c0018726:	0f b6 c9             	movzx  ecx,cl
c0018729:	09 f0                	or     eax,esi
c001872b:	c1 e1 08             	shl    ecx,0x8
c001872e:	0f b6 d2             	movzx  edx,dl
c0018731:	09 c8                	or     eax,ecx
c0018733:	c1 e2 0b             	shl    edx,0xb
c0018736:	09 d0                	or     eax,edx
c0018738:	ba f8 0c 00 00       	mov    edx,0xcf8
c001873d:	0d 00 00 00 80       	or     eax,0x80000000
c0018742:	ef                   	out    dx,eax
c0018743:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018748:	ed                   	in     eax,dx
c0018749:	83 e3 02             	and    ebx,0x2
c001874c:	0f b6 cb             	movzx  ecx,bl
c001874f:	c1 e1 03             	shl    ecx,0x3
c0018752:	d3 e8                	shr    eax,cl
c0018754:	eb 43                	jmp    c0018799 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018756:	83 ff 02             	cmp    edi,0x2
c0018759:	75 2c                	jne    c0018787 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001875b:	83 ec 0c             	sub    esp,0xc
c001875e:	0f b6 c9             	movzx  ecx,cl
c0018761:	0f b6 d2             	movzx  edx,dl
c0018764:	0f b6 fb             	movzx  edi,bl
c0018767:	0f b6 c0             	movzx  eax,al
c001876a:	57                   	push   edi
c001876b:	51                   	push   ecx
c001876c:	52                   	push   edx
c001876d:	50                   	push   eax
c001876e:	56                   	push   esi
c001876f:	e8 14 ff ff ff       	call   c0018688 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018774:	89 c2                	mov    edx,eax
c0018776:	ed                   	in     eax,dx
c0018777:	83 e3 02             	and    ebx,0x2
c001877a:	83 c4 20             	add    esp,0x20
c001877d:	0f b6 cb             	movzx  ecx,bl
c0018780:	c1 e1 03             	shl    ecx,0x3
c0018783:	d3 e8                	shr    eax,cl
c0018785:	eb 12                	jmp    c0018799 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	68 ab f3 01 c0       	push   0xc001f3ab
c001878f:	e8 07 7b ff ff       	call   c001029b <KePanic(char const*)>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	31 c0                	xor    eax,eax
c0018799:	5b                   	pop    ebx
c001879a:	5e                   	pop    esi
c001879b:	5f                   	pop    edi
c001879c:	c3                   	ret    
c001879d:	90                   	nop

c001879e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001879e:	83 ec 18             	sub    esp,0x18
c00187a1:	6a 00                	push   0x0
c00187a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a8:	50                   	push   eax
c00187a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ae:	50                   	push   eax
c00187af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b4:	50                   	push   eax
c00187b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b9:	e8 38 ff ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187be:	83 c4 2c             	add    esp,0x2c
c00187c1:	c3                   	ret    

c00187c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00187c2:	83 ec 18             	sub    esp,0x18
c00187c5:	6a 0e                	push   0xe
c00187c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187cc:	50                   	push   eax
c00187cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d2:	50                   	push   eax
c00187d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d8:	50                   	push   eax
c00187d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187dd:	e8 14 ff ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e2:	83 c4 2c             	add    esp,0x2c
c00187e5:	0f b6 c0             	movzx  eax,al
c00187e8:	c3                   	ret    
c00187e9:	90                   	nop

c00187ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187ea:	55                   	push   ebp
c00187eb:	57                   	push   edi
c00187ec:	56                   	push   esi
c00187ed:	53                   	push   ebx
c00187ee:	83 ec 18             	sub    esp,0x18
c00187f1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00187f6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187fb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018800:	6a 0a                	push   0xa
c0018802:	56                   	push   esi
c0018803:	55                   	push   ebp
c0018804:	57                   	push   edi
c0018805:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018809:	e8 e8 fe ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001880e:	83 c4 14             	add    esp,0x14
c0018811:	89 c3                	mov    ebx,eax
c0018813:	6a 0a                	push   0xa
c0018815:	0f b6 db             	movzx  ebx,bl
c0018818:	56                   	push   esi
c0018819:	55                   	push   ebp
c001881a:	57                   	push   edi
c001881b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001881f:	e8 d2 fe ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018824:	83 c4 2c             	add    esp,0x2c
c0018827:	25 00 ff 00 00       	and    eax,0xff00
c001882c:	09 d8                	or     eax,ebx
c001882e:	5b                   	pop    ebx
c001882f:	5e                   	pop    esi
c0018830:	5f                   	pop    edi
c0018831:	5d                   	pop    ebp
c0018832:	c3                   	ret    
c0018833:	90                   	nop

c0018834 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018834:	83 ec 18             	sub    esp,0x18
c0018837:	6a 08                	push   0x8
c0018839:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883e:	50                   	push   eax
c001883f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018844:	50                   	push   eax
c0018845:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001884a:	50                   	push   eax
c001884b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001884f:	e8 a2 fe ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018854:	83 c4 2c             	add    esp,0x2c
c0018857:	0f b6 c4             	movzx  eax,ah
c001885a:	c3                   	ret    
c001885b:	90                   	nop

c001885c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001885c:	83 ec 18             	sub    esp,0x18
c001885f:	6a 08                	push   0x8
c0018861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018866:	50                   	push   eax
c0018867:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001886c:	50                   	push   eax
c001886d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018872:	50                   	push   eax
c0018873:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018877:	e8 7a fe ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001887c:	83 c4 2c             	add    esp,0x2c
c001887f:	c3                   	ret    

c0018880 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018880:	83 ec 18             	sub    esp,0x18
c0018883:	6a 3c                	push   0x3c
c0018885:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888a:	50                   	push   eax
c001888b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018890:	50                   	push   eax
c0018891:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018896:	50                   	push   eax
c0018897:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001889b:	e8 56 fe ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a0:	83 c4 2c             	add    esp,0x2c
c00188a3:	c3                   	ret    

c00188a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00188a4:	83 ec 18             	sub    esp,0x18
c00188a7:	6a 18                	push   0x18
c00188a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ae:	50                   	push   eax
c00188af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b4:	50                   	push   eax
c00188b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ba:	50                   	push   eax
c00188bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188bf:	e8 32 fe ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188c4:	83 c4 2c             	add    esp,0x2c
c00188c7:	0f b6 c4             	movzx  eax,ah
c00188ca:	c3                   	ret    
c00188cb:	90                   	nop

c00188cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188cc:	55                   	push   ebp
c00188cd:	57                   	push   edi
c00188ce:	56                   	push   esi
c00188cf:	53                   	push   ebx
c00188d0:	83 ec 28             	sub    esp,0x28
c00188d3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188d7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188dc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188e1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188e6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00188ed:	8d 43 12             	lea    eax,[ebx+0x12]
c00188f0:	83 c3 10             	add    ebx,0x10
c00188f3:	0f b6 c0             	movzx  eax,al
c00188f6:	0f b6 db             	movzx  ebx,bl
c00188f9:	50                   	push   eax
c00188fa:	51                   	push   ecx
c00188fb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188ff:	57                   	push   edi
c0018900:	55                   	push   ebp
c0018901:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018905:	e8 ec fd ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001890a:	83 c4 14             	add    esp,0x14
c001890d:	89 c6                	mov    esi,eax
c001890f:	53                   	push   ebx
c0018910:	c1 e6 10             	shl    esi,0x10
c0018913:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018917:	51                   	push   ecx
c0018918:	57                   	push   edi
c0018919:	55                   	push   ebp
c001891a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001891e:	e8 d3 fd ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018923:	83 c4 3c             	add    esp,0x3c
c0018926:	0f b7 c0             	movzx  eax,ax
c0018929:	5b                   	pop    ebx
c001892a:	09 f0                	or     eax,esi
c001892c:	5e                   	pop    esi
c001892d:	5f                   	pop    edi
c001892e:	5d                   	pop    ebp
c001892f:	c3                   	ret    

c0018930 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018930:	55                   	push   ebp
c0018931:	57                   	push   edi
c0018932:	56                   	push   esi
c0018933:	53                   	push   ebx
c0018934:	83 ec 0c             	sub    esp,0xc
c0018937:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001893b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001893f:	89 f5                	mov    ebp,esi
c0018941:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018947:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001894b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001894f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018953:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018957:	83 f9 01             	cmp    ecx,0x1
c001895a:	75 5d                	jne    c00189b9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001895c:	0f b6 c8             	movzx  ecx,al
c001895f:	0f b6 d2             	movzx  edx,dl
c0018962:	c1 e1 10             	shl    ecx,0x10
c0018965:	c1 e2 0b             	shl    edx,0xb
c0018968:	89 f0                	mov    eax,esi
c001896a:	25 fc 00 00 00       	and    eax,0xfc
c001896f:	09 c1                	or     ecx,eax
c0018971:	89 e8                	mov    eax,ebp
c0018973:	0f b6 c0             	movzx  eax,al
c0018976:	c1 e0 08             	shl    eax,0x8
c0018979:	09 c1                	or     ecx,eax
c001897b:	09 d1                	or     ecx,edx
c001897d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018982:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018988:	89 c8                	mov    eax,ecx
c001898a:	ef                   	out    dx,eax
c001898b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018990:	ed                   	in     eax,dx
c0018991:	0f b7 db             	movzx  ebx,bx
c0018994:	83 e6 02             	and    esi,0x2
c0018997:	74 0a                	je     c00189a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018999:	0f b7 d0             	movzx  edx,ax
c001899c:	c1 e3 10             	shl    ebx,0x10
c001899f:	09 d3                	or     ebx,edx
c00189a1:	eb 05                	jmp    c00189a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00189a3:	66 31 c0             	xor    ax,ax
c00189a6:	09 c3                	or     ebx,eax
c00189a8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189ad:	89 c8                	mov    eax,ecx
c00189af:	ef                   	out    dx,eax
c00189b0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189b5:	89 d8                	mov    eax,ebx
c00189b7:	eb 41                	jmp    c00189fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189b9:	83 f9 02             	cmp    ecx,0x2
c00189bc:	75 45                	jne    c0018a03 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00189be:	83 ec 0c             	sub    esp,0xc
c00189c1:	0f b6 d2             	movzx  edx,dl
c00189c4:	89 f1                	mov    ecx,esi
c00189c6:	0f b6 c0             	movzx  eax,al
c00189c9:	0f b6 f1             	movzx  esi,cl
c00189cc:	89 e9                	mov    ecx,ebp
c00189ce:	56                   	push   esi
c00189cf:	0f b6 c9             	movzx  ecx,cl
c00189d2:	51                   	push   ecx
c00189d3:	52                   	push   edx
c00189d4:	50                   	push   eax
c00189d5:	57                   	push   edi
c00189d6:	e8 ad fc ff ff       	call   c0018688 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189db:	89 c2                	mov    edx,eax
c00189dd:	ed                   	in     eax,dx
c00189de:	83 c4 20             	add    esp,0x20
c00189e1:	0f b7 db             	movzx  ebx,bx
c00189e4:	f6 c2 02             	test   dl,0x2
c00189e7:	74 0c                	je     c00189f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189e9:	0f b7 c8             	movzx  ecx,ax
c00189ec:	89 d8                	mov    eax,ebx
c00189ee:	c1 e0 10             	shl    eax,0x10
c00189f1:	09 c8                	or     eax,ecx
c00189f3:	eb 05                	jmp    c00189fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189f5:	66 31 c0             	xor    ax,ax
c00189f8:	09 d8                	or     eax,ebx
c00189fa:	ef                   	out    dx,eax
c00189fb:	83 c4 0c             	add    esp,0xc
c00189fe:	5b                   	pop    ebx
c00189ff:	5e                   	pop    esi
c0018a00:	5f                   	pop    edi
c0018a01:	5d                   	pop    ebp
c0018a02:	c3                   	ret    
c0018a03:	c7 44 24 20 ab f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f3ab
c0018a0b:	83 c4 0c             	add    esp,0xc
c0018a0e:	5b                   	pop    ebx
c0018a0f:	5e                   	pop    esi
c0018a10:	5f                   	pop    edi
c0018a11:	5d                   	pop    ebp
c0018a12:	e9 84 78 ff ff       	jmp    c001029b <KePanic(char const*)>
c0018a17:	90                   	nop

c0018a18 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a18:	55                   	push   ebp
c0018a19:	57                   	push   edi
c0018a1a:	56                   	push   esi
c0018a1b:	53                   	push   ebx
c0018a1c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a22:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018a29:	0f 85 84 00 00 00    	jne    c0018ab3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a2f:	83 ec 0c             	sub    esp,0xc
c0018a32:	68 14 01 00 00       	push   0x114
c0018a37:	e8 7d ed fe ff       	call   c00077b9 <malloc>
c0018a3c:	83 c4 0c             	add    esp,0xc
c0018a3f:	89 c3                	mov    ebx,eax
c0018a41:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0018a47:	68 b1 f3 01 c0       	push   0xc001f3b1
c0018a4c:	50                   	push   eax
c0018a4d:	e8 3c 21 ff ff       	call   c000ab8e <File::File(char const*, Process*)>
c0018a52:	5a                   	pop    edx
c0018a53:	59                   	pop    ecx
c0018a54:	6a 01                	push   0x1
c0018a56:	53                   	push   ebx
c0018a57:	e8 f2 21 ff ff       	call   c000ac4e <File::open(FileOpenMode)>
c0018a5c:	83 c4 0c             	add    esp,0xc
c0018a5f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a63:	50                   	push   eax
c0018a64:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a68:	50                   	push   eax
c0018a69:	53                   	push   ebx
c0018a6a:	e8 8b 24 ff ff       	call   c000aefa <File::stat(unsigned long long*, bool*)>
c0018a6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a73:	40                   	inc    eax
c0018a74:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a77:	e8 3d ed fe ff       	call   c00077b9 <malloc>
c0018a7c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a80:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c0018a85:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a89:	5e                   	pop    esi
c0018a8a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a8c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a90:	51                   	push   ecx
c0018a91:	50                   	push   eax
c0018a92:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a96:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a9a:	53                   	push   ebx
c0018a9b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a9e:	83 c4 14             	add    esp,0x14
c0018aa1:	53                   	push   ebx
c0018aa2:	e8 05 22 ff ff       	call   c000acac <File::close()>
c0018aa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018aab:	83 c4 10             	add    esp,0x10
c0018aae:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c0018ab3:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c0018ab8:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c0018abe:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ac1:	31 ff                	xor    edi,edi
c0018ac3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018acb:	31 f6                	xor    esi,esi
c0018acd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018ad2:	31 db                	xor    ebx,ebx
c0018ad4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018adc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018ae1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018ae8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018aec:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018af3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018af7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018afa:	0f 8e 6b 01 00 00    	jle    c0018c6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b00:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b03:	d4 40                	aam    0x40
c0018b05:	d5 39                	aad    0x39
c0018b07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b0b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b0f:	d4 40                	aam    0x40
c0018b11:	d5 39                	aad    0x39
c0018b13:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b17:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b1b:	d4 40                	aam    0x40
c0018b1d:	d5 39                	aad    0x39
c0018b1f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b23:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b27:	d4 40                	aam    0x40
c0018b29:	d5 39                	aad    0x39
c0018b2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b2f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b33:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b37:	3c 56                	cmp    al,0x56
c0018b39:	74 45                	je     c0018b80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b3b:	d4 40                	aam    0x40
c0018b3d:	d5 39                	aad    0x39
c0018b3f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b42:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b46:	0f b6 c9             	movzx  ecx,cl
c0018b49:	c1 e1 04             	shl    ecx,0x4
c0018b4c:	d4 40                	aam    0x40
c0018b4e:	d5 39                	aad    0x39
c0018b50:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b53:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b57:	0f b6 db             	movzx  ebx,bl
c0018b5a:	09 cb                	or     ebx,ecx
c0018b5c:	c1 e3 04             	shl    ebx,0x4
c0018b5f:	d4 40                	aam    0x40
c0018b61:	d5 39                	aad    0x39
c0018b63:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b66:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b6a:	0f b6 c9             	movzx  ecx,cl
c0018b6d:	09 cb                	or     ebx,ecx
c0018b6f:	c1 e3 04             	shl    ebx,0x4
c0018b72:	89 d9                	mov    ecx,ebx
c0018b74:	d4 40                	aam    0x40
c0018b76:	d5 39                	aad    0x39
c0018b78:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b7b:	0f b6 db             	movzx  ebx,bl
c0018b7e:	09 cb                	or     ebx,ecx
c0018b80:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b84:	80 f9 44             	cmp    cl,0x44
c0018b87:	74 47                	je     c0018bd0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b89:	88 c8                	mov    al,cl
c0018b8b:	d4 40                	aam    0x40
c0018b8d:	d5 39                	aad    0x39
c0018b8f:	83 e8 30             	sub    eax,0x30
c0018b92:	0f b6 e8             	movzx  ebp,al
c0018b95:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b99:	c1 e5 04             	shl    ebp,0x4
c0018b9c:	d4 40                	aam    0x40
c0018b9e:	d5 39                	aad    0x39
c0018ba0:	83 e8 30             	sub    eax,0x30
c0018ba3:	0f b6 f0             	movzx  esi,al
c0018ba6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018baa:	09 ee                	or     esi,ebp
c0018bac:	c1 e6 04             	shl    esi,0x4
c0018baf:	d4 40                	aam    0x40
c0018bb1:	d5 39                	aad    0x39
c0018bb3:	83 e8 30             	sub    eax,0x30
c0018bb6:	0f b6 e8             	movzx  ebp,al
c0018bb9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018bbd:	09 ee                	or     esi,ebp
c0018bbf:	c1 e6 04             	shl    esi,0x4
c0018bc2:	89 f5                	mov    ebp,esi
c0018bc4:	d4 40                	aam    0x40
c0018bc6:	d5 39                	aad    0x39
c0018bc8:	83 e8 30             	sub    eax,0x30
c0018bcb:	0f b6 f0             	movzx  esi,al
c0018bce:	09 ee                	or     esi,ebp
c0018bd0:	83 c7 10             	add    edi,0x10
c0018bd3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018bd7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018bda:	3c 0a                	cmp    al,0xa
c0018bdc:	74 09                	je     c0018be7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bde:	45                   	inc    ebp
c0018bdf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018be2:	75 16                	jne    c0018bfa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018be4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018be7:	3c 0a                	cmp    al,0xa
c0018be9:	0f 94 c0             	sete   al
c0018bec:	0f b6 c0             	movzx  eax,al
c0018bef:	01 c7                	add    edi,eax
c0018bf1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018bf6:	75 0c                	jne    c0018c04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018bf8:	eb 15                	jmp    c0018c0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018bfa:	47                   	inc    edi
c0018bfb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018bfe:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c02:	eb d3                	jmp    c0018bd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c04:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c09:	0f 85 e8 fe ff ff    	jne    c0018af7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c0f:	80 f9 44             	cmp    cl,0x44
c0018c12:	74 0b                	je     c0018c1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c14:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c19:	0f 85 d8 fe ff ff    	jne    c0018af7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c1f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c23:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c27:	c1 e1 04             	shl    ecx,0x4
c0018c2a:	83 e8 30             	sub    eax,0x30
c0018c2d:	09 c8                	or     eax,ecx
c0018c2f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c33:	0f 85 be fe ff ff    	jne    c0018af7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c39:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c3d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c41:	c1 e1 04             	shl    ecx,0x4
c0018c44:	83 e8 30             	sub    eax,0x30
c0018c47:	09 c8                	or     eax,ecx
c0018c49:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c4d:	0f 85 a4 fe ff ff    	jne    c0018af7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c53:	50                   	push   eax
c0018c54:	50                   	push   eax
c0018c55:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c59:	50                   	push   eax
c0018c5a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c61:	e8 9a 79 fe ff       	call   c0000600 <strcpy>
c0018c66:	83 c4 10             	add    esp,0x10
c0018c69:	eb 15                	jmp    c0018c80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c6b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c72:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c7d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c80:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c87:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c8d:	5b                   	pop    ebx
c0018c8e:	5e                   	pop    esi
c0018c8f:	5f                   	pop    edi
c0018c90:	5d                   	pop    ebp
c0018c91:	c3                   	ret    

c0018c92 <PCI::checkBus(unsigned char)>:
c0018c92:	56                   	push   esi
c0018c93:	53                   	push   ebx
c0018c94:	31 f6                	xor    esi,esi
c0018c96:	51                   	push   ecx
c0018c97:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c9b:	0f b6 c3             	movzx  eax,bl
c0018c9e:	52                   	push   edx
c0018c9f:	56                   	push   esi
c0018ca0:	46                   	inc    esi
c0018ca1:	50                   	push   eax
c0018ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ca6:	e8 f3 02 00 00       	call   c0018f9e <PCI::checkDevice(unsigned char, unsigned char)>
c0018cab:	83 c4 10             	add    esp,0x10
c0018cae:	83 fe 20             	cmp    esi,0x20
c0018cb1:	75 e8                	jne    c0018c9b <PCI::checkBus(unsigned char)+0x9>
c0018cb3:	58                   	pop    eax
c0018cb4:	5b                   	pop    ebx
c0018cb5:	5e                   	pop    esi
c0018cb6:	c3                   	ret    
c0018cb7:	90                   	nop

c0018cb8 <PCI::foundDevice(PCIDeviceInfo)>:
c0018cb8:	55                   	push   ebp
c0018cb9:	57                   	push   edi
c0018cba:	56                   	push   esi
c0018cbb:	53                   	push   ebx
c0018cbc:	83 ec 1c             	sub    esp,0x1c
c0018cbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018cc3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018cc9:	0f 84 52 01 00 00    	je     c0018e21 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018ccf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018cd3:	66 81 f9 06 04       	cmp    cx,0x406
c0018cd8:	75 2c                	jne    c0018d06 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018cda:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cdf:	50                   	push   eax
c0018ce0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018ce5:	50                   	push   eax
c0018ce6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018ceb:	50                   	push   eax
c0018cec:	56                   	push   esi
c0018ced:	e8 b2 fb ff ff       	call   c00188a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018cf2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018cf6:	0f b6 c0             	movzx  eax,al
c0018cf9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018cfd:	83 c4 2c             	add    esp,0x2c
c0018d00:	5b                   	pop    ebx
c0018d01:	5e                   	pop    esi
c0018d02:	5f                   	pop    edi
c0018d03:	5d                   	pop    ebp
c0018d04:	eb 8c                	jmp    c0018c92 <PCI::checkBus(unsigned char)>
c0018d06:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d0a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d14:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d18:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d1c:	88 d3                	mov    bl,dl
c0018d1e:	85 c0                	test   eax,eax
c0018d20:	74 33                	je     c0018d55 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d22:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d25:	85 d2                	test   edx,edx
c0018d27:	74 28                	je     c0018d51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d29:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d2f:	31 ef                	xor    edi,ebp
c0018d31:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d37:	75 18                	jne    c0018d51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d3d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d43:	75 0c                	jne    c0018d51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d45:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d4b:	0f 84 d0 00 00 00    	je     c0018e21 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d53:	eb c9                	jmp    c0018d1e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d55:	66 81 f9 01 06       	cmp    cx,0x601
c0018d5a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d5e:	75 19                	jne    c0018d79 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d60:	83 ec 0c             	sub    esp,0xc
c0018d63:	68 64 01 00 00       	push   0x164
c0018d68:	e8 4c ea fe ff       	call   c00077b9 <malloc>
c0018d6d:	89 c5                	mov    ebp,eax
c0018d6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d72:	e8 47 0e 00 00       	call   c0019bbe <SATABus::SATABus()>
c0018d77:	eb 1e                	jmp    c0018d97 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d79:	66 81 f9 01 01       	cmp    cx,0x101
c0018d7e:	75 60                	jne    c0018de0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d80:	83 ec 0c             	sub    esp,0xc
c0018d83:	68 70 02 00 00       	push   0x270
c0018d88:	e8 2c ea fe ff       	call   c00077b9 <malloc>
c0018d8d:	89 c5                	mov    ebp,eax
c0018d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d92:	e8 cb 02 00 00       	call   c0019062 <IDE::IDE()>
c0018d97:	58                   	pop    eax
c0018d98:	5a                   	pop    edx
c0018d99:	55                   	push   ebp
c0018d9a:	56                   	push   esi
c0018d9b:	e8 b8 2c ff ff       	call   c000ba58 <Device::addChild(Device*)>
c0018da0:	83 ec 1c             	sub    esp,0x1c
c0018da3:	b9 09 00 00 00       	mov    ecx,0x9
c0018da8:	fc                   	cld    
c0018da9:	89 e7                	mov    edi,esp
c0018dab:	89 de                	mov    esi,ebx
c0018dad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018daf:	55                   	push   ebp
c0018db0:	e8 e9 2b ff ff       	call   c000b99e <Device::preOpenPCI(PCIDeviceInfo)>
c0018db5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018db8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018dbc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018dc4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018dcc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018dd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018dd7:	83 c4 4c             	add    esp,0x4c
c0018dda:	5b                   	pop    ebx
c0018ddb:	5e                   	pop    esi
c0018ddc:	5f                   	pop    edi
c0018ddd:	5d                   	pop    ebp
c0018dde:	ff e0                	jmp    eax
c0018de0:	83 ec 0c             	sub    esp,0xc
c0018de3:	68 58 01 00 00       	push   0x158
c0018de8:	e8 cc e9 fe ff       	call   c00077b9 <malloc>
c0018ded:	89 c5                	mov    ebp,eax
c0018def:	58                   	pop    eax
c0018df0:	5a                   	pop    edx
c0018df1:	68 ca f3 01 c0       	push   0xc001f3ca
c0018df6:	55                   	push   ebp
c0018df7:	e8 fa 2e ff ff       	call   c000bcf6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018dfc:	59                   	pop    ecx
c0018dfd:	5f                   	pop    edi
c0018dfe:	55                   	push   ebp
c0018dff:	56                   	push   esi
c0018e00:	e8 53 2c ff ff       	call   c000ba58 <Device::addChild(Device*)>
c0018e05:	b9 09 00 00 00       	mov    ecx,0x9
c0018e0a:	fc                   	cld    
c0018e0b:	89 df                	mov    edi,ebx
c0018e0d:	89 de                	mov    esi,ebx
c0018e0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e11:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e15:	83 c4 2c             	add    esp,0x2c
c0018e18:	5b                   	pop    ebx
c0018e19:	5e                   	pop    esi
c0018e1a:	5f                   	pop    edi
c0018e1b:	5d                   	pop    ebp
c0018e1c:	e9 7d 2b ff ff       	jmp    c000b99e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e21:	83 c4 1c             	add    esp,0x1c
c0018e24:	5b                   	pop    ebx
c0018e25:	5e                   	pop    esi
c0018e26:	5f                   	pop    edi
c0018e27:	5d                   	pop    ebp
c0018e28:	c3                   	ret    
c0018e29:	90                   	nop

c0018e2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e2a:	55                   	push   ebp
c0018e2b:	57                   	push   edi
c0018e2c:	56                   	push   esi
c0018e2d:	53                   	push   ebx
c0018e2e:	83 ec 68             	sub    esp,0x68
c0018e31:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e35:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e40:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e47:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e50:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e57:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e60:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e65:	6a 0c                	push   0xc
c0018e67:	57                   	push   edi
c0018e68:	53                   	push   ebx
c0018e69:	56                   	push   esi
c0018e6a:	55                   	push   ebp
c0018e6b:	e8 86 f8 ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e70:	83 c4 20             	add    esp,0x20
c0018e73:	57                   	push   edi
c0018e74:	53                   	push   ebx
c0018e75:	56                   	push   esi
c0018e76:	55                   	push   ebp
c0018e77:	e8 6e f9 ff ff       	call   c00187ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e7c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e81:	57                   	push   edi
c0018e82:	53                   	push   ebx
c0018e83:	56                   	push   esi
c0018e84:	55                   	push   ebp
c0018e85:	e8 f6 f9 ff ff       	call   c0018880 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e8a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e8e:	83 c4 14             	add    esp,0x14
c0018e91:	6a 3c                	push   0x3c
c0018e93:	57                   	push   edi
c0018e94:	53                   	push   ebx
c0018e95:	56                   	push   esi
c0018e96:	55                   	push   ebp
c0018e97:	e8 5a f8 ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e9c:	0f b6 c4             	movzx  eax,ah
c0018e9f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018ea3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018ea7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018eab:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018eb0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018eb6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018ebc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018ec0:	83 c4 20             	add    esp,0x20
c0018ec3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ec8:	74 30                	je     c0018efa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018eca:	31 c0                	xor    eax,eax
c0018ecc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018ed0:	7e 28                	jle    c0018efa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ed2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018eda:	39 cb                	cmp    ebx,ecx
c0018edc:	75 19                	jne    c0018ef7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ede:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018ee6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018eea:	75 0b                	jne    c0018ef7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018eec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018ef3:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018ef7:	40                   	inc    eax
c0018ef8:	eb d2                	jmp    c0018ecc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018efa:	31 d2                	xor    edx,edx
c0018efc:	83 ec 0c             	sub    esp,0xc
c0018eff:	57                   	push   edi
c0018f00:	53                   	push   ebx
c0018f01:	56                   	push   esi
c0018f02:	52                   	push   edx
c0018f03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f07:	55                   	push   ebp
c0018f08:	e8 bf f9 ff ff       	call   c00188cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f11:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f15:	42                   	inc    edx
c0018f16:	83 c4 20             	add    esp,0x20
c0018f19:	83 fa 06             	cmp    edx,0x6
c0018f1c:	75 de                	jne    c0018efc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f1e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f23:	83 ec 0c             	sub    esp,0xc
c0018f26:	86 e0                	xchg   al,ah
c0018f28:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f2d:	6a 02                	push   0x2
c0018f2f:	57                   	push   edi
c0018f30:	53                   	push   ebx
c0018f31:	56                   	push   esi
c0018f32:	55                   	push   ebp
c0018f33:	e8 be f7 ff ff       	call   c00186f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f38:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f3d:	83 c4 20             	add    esp,0x20
c0018f40:	57                   	push   edi
c0018f41:	53                   	push   ebx
c0018f42:	56                   	push   esi
c0018f43:	55                   	push   ebp
c0018f44:	e8 eb f8 ff ff       	call   c0018834 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f49:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f4d:	57                   	push   edi
c0018f4e:	53                   	push   ebx
c0018f4f:	56                   	push   esi
c0018f50:	55                   	push   ebp
c0018f51:	e8 48 f8 ff ff       	call   c001879e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f56:	b9 09 00 00 00       	mov    ecx,0x9
c0018f5b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f60:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f64:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f68:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f6c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f70:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f74:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f78:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f7c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f80:	83 ec 0c             	sub    esp,0xc
c0018f83:	fc                   	cld    
c0018f84:	89 e7                	mov    edi,esp
c0018f86:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f8a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f8c:	55                   	push   ebp
c0018f8d:	e8 26 fd ff ff       	call   c0018cb8 <PCI::foundDevice(PCIDeviceInfo)>
c0018f92:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f98:	5b                   	pop    ebx
c0018f99:	5e                   	pop    esi
c0018f9a:	5f                   	pop    edi
c0018f9b:	5d                   	pop    ebp
c0018f9c:	c3                   	ret    
c0018f9d:	90                   	nop

c0018f9e <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f9e:	55                   	push   ebp
c0018f9f:	57                   	push   edi
c0018fa0:	56                   	push   esi
c0018fa1:	53                   	push   ebx
c0018fa2:	83 ec 0c             	sub    esp,0xc
c0018fa5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018fa9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018fae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018fb3:	6a 00                	push   0x0
c0018fb5:	56                   	push   esi
c0018fb6:	57                   	push   edi
c0018fb7:	55                   	push   ebp
c0018fb8:	e8 e1 f7 ff ff       	call   c001879e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fbd:	6a 00                	push   0x0
c0018fbf:	56                   	push   esi
c0018fc0:	57                   	push   edi
c0018fc1:	55                   	push   ebp
c0018fc2:	e8 63 fe ff ff       	call   c0018e2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fc7:	83 c4 20             	add    esp,0x20
c0018fca:	6a 00                	push   0x0
c0018fcc:	56                   	push   esi
c0018fcd:	57                   	push   edi
c0018fce:	55                   	push   ebp
c0018fcf:	e8 ee f7 ff ff       	call   c00187c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fd4:	83 c4 10             	add    esp,0x10
c0018fd7:	84 c0                	test   al,al
c0018fd9:	79 27                	jns    c0019002 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fdb:	bb 01 00 00 00       	mov    ebx,0x1
c0018fe0:	53                   	push   ebx
c0018fe1:	56                   	push   esi
c0018fe2:	57                   	push   edi
c0018fe3:	55                   	push   ebp
c0018fe4:	e8 b5 f7 ff ff       	call   c001879e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fe9:	83 c4 10             	add    esp,0x10
c0018fec:	66 40                	inc    ax
c0018fee:	74 0c                	je     c0018ffc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018ff0:	53                   	push   ebx
c0018ff1:	56                   	push   esi
c0018ff2:	57                   	push   edi
c0018ff3:	55                   	push   ebp
c0018ff4:	e8 31 fe ff ff       	call   c0018e2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ff9:	83 c4 10             	add    esp,0x10
c0018ffc:	43                   	inc    ebx
c0018ffd:	83 fb 08             	cmp    ebx,0x8
c0019000:	75 de                	jne    c0018fe0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019002:	83 c4 0c             	add    esp,0xc
c0019005:	5b                   	pop    ebx
c0019006:	5e                   	pop    esi
c0019007:	5f                   	pop    edi
c0019008:	5d                   	pop    ebp
c0019009:	c3                   	ret    

c001900a <PCI::detect()>:
c001900a:	56                   	push   esi
c001900b:	53                   	push   ebx
c001900c:	53                   	push   ebx
c001900d:	31 db                	xor    ebx,ebx
c001900f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019013:	6a 00                	push   0x0
c0019015:	6a 00                	push   0x0
c0019017:	6a 00                	push   0x0
c0019019:	56                   	push   esi
c001901a:	e8 a3 f7 ff ff       	call   c00187c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	a8 80                	test   al,0x80
c0019024:	75 21                	jne    c0019047 <PCI::detect()+0x3d>
c0019026:	51                   	push   ecx
c0019027:	51                   	push   ecx
c0019028:	6a 00                	push   0x0
c001902a:	56                   	push   esi
c001902b:	e8 62 fc ff ff       	call   c0018c92 <PCI::checkBus(unsigned char)>
c0019030:	83 c4 10             	add    esp,0x10
c0019033:	eb 24                	jmp    c0019059 <PCI::detect()+0x4f>
c0019035:	52                   	push   edx
c0019036:	52                   	push   edx
c0019037:	53                   	push   ebx
c0019038:	43                   	inc    ebx
c0019039:	56                   	push   esi
c001903a:	e8 53 fc ff ff       	call   c0018c92 <PCI::checkBus(unsigned char)>
c001903f:	83 c4 10             	add    esp,0x10
c0019042:	83 fb 08             	cmp    ebx,0x8
c0019045:	74 12                	je     c0019059 <PCI::detect()+0x4f>
c0019047:	53                   	push   ebx
c0019048:	6a 00                	push   0x0
c001904a:	6a 00                	push   0x0
c001904c:	56                   	push   esi
c001904d:	e8 4c f7 ff ff       	call   c001879e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019052:	83 c4 10             	add    esp,0x10
c0019055:	66 40                	inc    ax
c0019057:	74 dc                	je     c0019035 <PCI::detect()+0x2b>
c0019059:	58                   	pop    eax
c001905a:	5b                   	pop    ebx
c001905b:	5e                   	pop    esi
c001905c:	c3                   	ret    
c001905d:	90                   	nop

c001905e <IDE::close(int, int, void*)>:
c001905e:	83 c8 ff             	or     eax,0xffffffff
c0019061:	c3                   	ret    

c0019062 <IDE::IDE()>:
c0019062:	83 ec 0c             	sub    esp,0xc
c0019065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019069:	83 ec 08             	sub    esp,0x8
c001906c:	68 10 f4 01 c0       	push   0xc001f410
c0019071:	50                   	push   eax
c0019072:	e8 25 2d ff ff       	call   c000bd9c <HardDiskController::HardDiskController(char const*)>
c0019077:	83 c4 10             	add    esp,0x10
c001907a:	ba a0 f4 01 c0       	mov    edx,0xc001f4a0
c001907f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019083:	89 10                	mov    DWORD PTR [eax],edx
c0019085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019089:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019090:	90                   	nop
c0019091:	83 c4 0c             	add    esp,0xc
c0019094:	c3                   	ret    
c0019095:	90                   	nop

c0019096 <IDE::prepareInterrupt(unsigned char)>:
c0019096:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001909b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001909f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00190a7:	c3                   	ret    

c00190a8 <selectDrive(unsigned char, unsigned char)>:
c00190a8:	c3                   	ret    
c00190a9:	90                   	nop

c00190aa <IDE::getBase(unsigned char)>:
c00190aa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00190af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190b3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00190bb:	c3                   	ret    

c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00190bc:	55                   	push   ebp
c00190bd:	57                   	push   edi
c00190be:	56                   	push   esi
c00190bf:	53                   	push   ebx
c00190c0:	83 ec 1c             	sub    esp,0x1c
c00190c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190cb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190ce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190d6:	80 f9 03             	cmp    cl,0x3
c00190d9:	77 51                	ja     c001912c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190df:	0f b6 f2             	movzx  esi,dl
c00190e2:	0f b6 db             	movzx  ebx,bl
c00190e5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190e8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00190ec:	83 ca 80             	or     edx,0xffffff80
c00190ef:	0f b6 d2             	movzx  edx,dl
c00190f2:	52                   	push   edx
c00190f3:	6a 0c                	push   0xc
c00190f5:	56                   	push   esi
c00190f6:	57                   	push   edi
c00190f7:	e8 c0 ff ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190fc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019101:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019105:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019109:	ee                   	out    dx,al
c001910a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001910f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019113:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019117:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001911b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019123:	83 c4 2c             	add    esp,0x2c
c0019126:	5b                   	pop    ebx
c0019127:	5e                   	pop    esi
c0019128:	5f                   	pop    edi
c0019129:	5d                   	pop    ebp
c001912a:	eb 90                	jmp    c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001912c:	80 fb 07             	cmp    bl,0x7
c001912f:	77 12                	ja     c0019143 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019131:	0f b6 d2             	movzx  edx,dl
c0019134:	0f b6 db             	movzx  ebx,bl
c0019137:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001913f:	89 da                	mov    edx,ebx
c0019141:	eb 2f                	jmp    c0019172 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019143:	80 fb 0d             	cmp    bl,0xd
c0019146:	77 13                	ja     c001915b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019148:	0f b6 d2             	movzx  edx,dl
c001914b:	0f b6 db             	movzx  ebx,bl
c001914e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019155:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019159:	eb 17                	jmp    c0019172 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001915b:	80 fb 15             	cmp    bl,0x15
c001915e:	77 13                	ja     c0019173 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019160:	0f b6 d2             	movzx  edx,dl
c0019163:	0f b6 db             	movzx  ebx,bl
c0019166:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001916e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019172:	ee                   	out    dx,al
c0019173:	83 c4 1c             	add    esp,0x1c
c0019176:	5b                   	pop    ebx
c0019177:	5e                   	pop    esi
c0019178:	5f                   	pop    edi
c0019179:	5d                   	pop    ebp
c001917a:	c3                   	ret    
c001917b:	90                   	nop

c001917c <IDE::read(unsigned char, unsigned char)>:
c001917c:	55                   	push   ebp
c001917d:	57                   	push   edi
c001917e:	56                   	push   esi
c001917f:	53                   	push   ebx
c0019180:	83 ec 1c             	sub    esp,0x1c
c0019183:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019187:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001918b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001918e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019192:	3c 03                	cmp    al,0x3
c0019194:	77 43                	ja     c00191d9 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019196:	0f b6 f2             	movzx  esi,dl
c0019199:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001919c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00191a0:	83 c8 80             	or     eax,0xffffff80
c00191a3:	0f b6 c0             	movzx  eax,al
c00191a6:	50                   	push   eax
c00191a7:	6a 0c                	push   0xc
c00191a9:	56                   	push   esi
c00191aa:	57                   	push   edi
c00191ab:	e8 0c ff ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191b0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00191b5:	0f b6 c3             	movzx  eax,bl
c00191b8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00191bc:	ec                   	in     al,dx
c00191bd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00191c1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191c6:	52                   	push   edx
c00191c7:	6a 0c                	push   0xc
c00191c9:	56                   	push   esi
c00191ca:	57                   	push   edi
c00191cb:	e8 ec fe ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191d0:	83 c4 20             	add    esp,0x20
c00191d3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191d7:	eb 49                	jmp    c0019222 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191d9:	80 fb 07             	cmp    bl,0x7
c00191dc:	77 12                	ja     c00191f0 <IDE::read(unsigned char, unsigned char)+0x74>
c00191de:	0f b6 d2             	movzx  edx,dl
c00191e1:	0f b6 c3             	movzx  eax,bl
c00191e4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00191ec:	89 c2                	mov    edx,eax
c00191ee:	eb 31                	jmp    c0019221 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191f0:	80 fb 0d             	cmp    bl,0xd
c00191f3:	77 13                	ja     c0019208 <IDE::read(unsigned char, unsigned char)+0x8c>
c00191f5:	0f b6 d2             	movzx  edx,dl
c00191f8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191ff:	0f b6 d3             	movzx  edx,bl
c0019202:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019206:	eb 19                	jmp    c0019221 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019208:	31 c0                	xor    eax,eax
c001920a:	80 fb 15             	cmp    bl,0x15
c001920d:	77 13                	ja     c0019222 <IDE::read(unsigned char, unsigned char)+0xa6>
c001920f:	0f b6 d2             	movzx  edx,dl
c0019212:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001921a:	0f b6 d3             	movzx  edx,bl
c001921d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019221:	ec                   	in     al,dx
c0019222:	83 c4 1c             	add    esp,0x1c
c0019225:	5b                   	pop    ebx
c0019226:	5e                   	pop    esi
c0019227:	5f                   	pop    edi
c0019228:	5d                   	pop    ebp
c0019229:	c3                   	ret    

c001922a <IDE::waitInterrupt(unsigned char)>:
c001922a:	57                   	push   edi
c001922b:	56                   	push   esi
c001922c:	31 f6                	xor    esi,esi
c001922e:	53                   	push   ebx
c001922f:	83 ec 10             	sub    esp,0x10
c0019232:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019236:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001923a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001923e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019243:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001924a:	84 db                	test   bl,bl
c001924c:	75 33                	jne    c0019281 <IDE::waitInterrupt(unsigned char)+0x57>
c001924e:	52                   	push   edx
c001924f:	6a 0c                	push   0xc
c0019251:	50                   	push   eax
c0019252:	57                   	push   edi
c0019253:	e8 24 ff ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019258:	83 c4 10             	add    esp,0x10
c001925b:	a8 01                	test   al,0x1
c001925d:	75 2a                	jne    c0019289 <IDE::waitInterrupt(unsigned char)+0x5f>
c001925f:	f7 c6 04 00 00 00    	test   esi,0x4
c0019265:	75 12                	jne    c0019279 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019267:	83 fe 32             	cmp    esi,0x32
c001926a:	7e 0d                	jle    c0019279 <IDE::waitInterrupt(unsigned char)+0x4f>
c001926c:	83 ec 0c             	sub    esp,0xc
c001926f:	6a 64                	push   0x64
c0019271:	e8 1a a9 ff ff       	call   c0013b90 <milliTenthSleep(unsigned int)>
c0019276:	83 c4 10             	add    esp,0x10
c0019279:	83 fe 3c             	cmp    esi,0x3c
c001927c:	74 0b                	je     c0019289 <IDE::waitInterrupt(unsigned char)+0x5f>
c001927e:	46                   	inc    esi
c001927f:	eb bd                	jmp    c001923e <IDE::waitInterrupt(unsigned char)+0x14>
c0019281:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019289:	83 c4 10             	add    esp,0x10
c001928c:	88 d8                	mov    al,bl
c001928e:	5b                   	pop    ebx
c001928f:	5e                   	pop    esi
c0019290:	5f                   	pop    edi
c0019291:	c3                   	ret    

c0019292 <ideChannel0IRQHandler(regs*, void*)>:
c0019292:	83 ec 10             	sub    esp,0x10
c0019295:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019299:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00192a0:	6a 07                	push   0x7
c00192a2:	6a 00                	push   0x0
c00192a4:	50                   	push   eax
c00192a5:	e8 d2 fe ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c00192aa:	83 c4 1c             	add    esp,0x1c
c00192ad:	c3                   	ret    

c00192ae <ideChannel1IRQHandler(regs*, void*)>:
c00192ae:	83 ec 10             	sub    esp,0x10
c00192b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192b5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00192bc:	6a 07                	push   0x7
c00192be:	6a 01                	push   0x1
c00192c0:	50                   	push   eax
c00192c1:	e8 b6 fe ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c00192c6:	83 c4 1c             	add    esp,0x1c
c00192c9:	c3                   	ret    

c00192ca <IDE::enableIRQs(unsigned char, bool)>:
c00192ca:	57                   	push   edi
c00192cb:	56                   	push   esi
c00192cc:	be 04 00 00 00       	mov    esi,0x4
c00192d1:	53                   	push   ebx
c00192d2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192db:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192e0:	0f 94 c0             	sete   al
c00192e3:	01 c0                	add    eax,eax
c00192e5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00192ec:	0f b6 c0             	movzx  eax,al
c00192ef:	50                   	push   eax
c00192f0:	6a 0c                	push   0xc
c00192f2:	57                   	push   edi
c00192f3:	53                   	push   ebx
c00192f4:	e8 c3 fd ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192f9:	83 c4 10             	add    esp,0x10
c00192fc:	50                   	push   eax
c00192fd:	6a 0c                	push   0xc
c00192ff:	57                   	push   edi
c0019300:	53                   	push   ebx
c0019301:	e8 76 fe ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019306:	83 c4 10             	add    esp,0x10
c0019309:	4e                   	dec    esi
c001930a:	75 f0                	jne    c00192fc <IDE::enableIRQs(unsigned char, bool)+0x32>
c001930c:	5b                   	pop    ebx
c001930d:	5e                   	pop    esi
c001930e:	5f                   	pop    edi
c001930f:	c3                   	ret    

c0019310 <IDE::open(int, int, void*)>:
c0019310:	55                   	push   ebp
c0019311:	57                   	push   edi
c0019312:	56                   	push   esi
c0019313:	53                   	push   ebx
c0019314:	83 ec 1c             	sub    esp,0x1c
c0019317:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001931b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019324:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001932d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019334:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001933b:	0f 85 b0 02 00 00    	jne    c00195f1 <IDE::open(int, int, void*)+0x2e1>
c0019341:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019347:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001934b:	83 e0 7f             	and    eax,0x7f
c001934e:	3c 05                	cmp    al,0x5
c0019350:	74 04                	je     c0019356 <IDE::open(int, int, void*)+0x46>
c0019352:	3c 0f                	cmp    al,0xf
c0019354:	75 32                	jne    c0019388 <IDE::open(int, int, void*)+0x78>
c0019356:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001935c:	83 e0 fc             	and    eax,0xfffffffc
c001935f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019366:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001936c:	83 e0 fc             	and    eax,0xfffffffc
c001936f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019376:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001937c:	83 e0 fc             	and    eax,0xfffffffc
c001937f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019386:	eb 14                	jmp    c001939c <IDE::open(int, int, void*)+0x8c>
c0019388:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019392:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001939c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00193a3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00193aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193ae:	89 c6                	mov    esi,eax
c00193b0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193b5:	c1 e6 10             	shl    esi,0x10
c00193b8:	89 e8                	mov    eax,ebp
c00193ba:	89 fa                	mov    edx,edi
c00193bc:	c1 e0 0b             	shl    eax,0xb
c00193bf:	09 f0                	or     eax,esi
c00193c1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193c8:	c1 e6 08             	shl    esi,0x8
c00193cb:	09 c6                	or     esi,eax
c00193cd:	89 f0                	mov    eax,esi
c00193cf:	0d 08 00 00 80       	or     eax,0x80000008
c00193d4:	ef                   	out    dx,eax
c00193d5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193da:	89 ca                	mov    edx,ecx
c00193dc:	ed                   	in     eax,dx
c00193dd:	c1 e8 10             	shr    eax,0x10
c00193e0:	3d ff ff 00 00       	cmp    eax,0xffff
c00193e5:	0f 84 f5 00 00 00    	je     c00194e0 <IDE::open(int, int, void*)+0x1d0>
c00193eb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00193f1:	89 fa                	mov    edx,edi
c00193f3:	89 f0                	mov    eax,esi
c00193f5:	ef                   	out    dx,eax
c00193f6:	b0 fe                	mov    al,0xfe
c00193f8:	89 ca                	mov    edx,ecx
c00193fa:	ee                   	out    dx,al
c00193fb:	89 f0                	mov    eax,esi
c00193fd:	89 fa                	mov    edx,edi
c00193ff:	ef                   	out    dx,eax
c0019400:	89 ca                	mov    edx,ecx
c0019402:	ed                   	in     eax,dx
c0019403:	3c fe                	cmp    al,0xfe
c0019405:	0f 85 a9 00 00 00    	jne    c00194b4 <IDE::open(int, int, void*)+0x1a4>
c001940b:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019411:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019418:	74 33                	je     c001944d <IDE::open(int, int, void*)+0x13d>
c001941a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019420:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019424:	40                   	inc    eax
c0019425:	83 ec 0c             	sub    esp,0xc
c0019428:	0f b6 c0             	movzx  eax,al
c001942b:	50                   	push   eax
c001942c:	55                   	push   ebp
c001942d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019431:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019437:	51                   	push   ecx
c0019438:	e8 77 53 ff ff       	call   c000e7b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001943d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019442:	83 c4 1c             	add    esp,0x1c
c0019445:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001944b:	eb 0a                	jmp    c0019457 <IDE::open(int, int, void*)+0x147>
c001944d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019457:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001945e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019465:	c1 e1 10             	shl    ecx,0x10
c0019468:	c1 e0 08             	shl    eax,0x8
c001946b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019470:	09 c1                	or     ecx,eax
c0019472:	89 fa                	mov    edx,edi
c0019474:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001947b:	c1 e0 0b             	shl    eax,0xb
c001947e:	09 c1                	or     ecx,eax
c0019480:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019486:	89 c8                	mov    eax,ecx
c0019488:	ef                   	out    dx,eax
c0019489:	be fc 0c 00 00       	mov    esi,0xcfc
c001948e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019494:	89 f2                	mov    edx,esi
c0019496:	ee                   	out    dx,al
c0019497:	89 c8                	mov    eax,ecx
c0019499:	89 fa                	mov    edx,edi
c001949b:	ef                   	out    dx,eax
c001949c:	89 f2                	mov    edx,esi
c001949e:	ed                   	in     eax,dx
c001949f:	0f b6 c0             	movzx  eax,al
c00194a2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00194a8:	74 46                	je     c00194f0 <IDE::open(int, int, void*)+0x1e0>
c00194aa:	83 ec 0c             	sub    esp,0xc
c00194ad:	68 28 f4 01 c0       	push   0xc001f428
c00194b2:	eb 34                	jmp    c00194e8 <IDE::open(int, int, void*)+0x1d8>
c00194b4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00194bd:	75 17                	jne    c00194d6 <IDE::open(int, int, void*)+0x1c6>
c00194bf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194c4:	74 07                	je     c00194cd <IDE::open(int, int, void*)+0x1bd>
c00194c6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194cb:	75 09                	jne    c00194d6 <IDE::open(int, int, void*)+0x1c6>
c00194cd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194d4:	eb 1a                	jmp    c00194f0 <IDE::open(int, int, void*)+0x1e0>
c00194d6:	83 ec 0c             	sub    esp,0xc
c00194d9:	68 30 f4 01 c0       	push   0xc001f430
c00194de:	eb 08                	jmp    c00194e8 <IDE::open(int, int, void*)+0x1d8>
c00194e0:	83 ec 0c             	sub    esp,0xc
c00194e3:	68 61 f4 01 c0       	push   0xc001f461
c00194e8:	e8 ae 6d ff ff       	call   c001029b <KePanic(char const*)>
c00194ed:	83 c4 10             	add    esp,0x10
c00194f0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00194f7:	79 1a                	jns    c0019513 <IDE::open(int, int, void*)+0x203>
c00194f9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194ff:	83 e0 fc             	and    eax,0xfffffffc
c0019502:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019509:	83 c0 08             	add    eax,0x8
c001950c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019513:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019519:	89 c2                	mov    edx,eax
c001951b:	83 e2 0f             	and    edx,0xf
c001951e:	66 83 fa 08          	cmp    dx,0x8
c0019522:	75 0a                	jne    c001952e <IDE::open(int, int, void*)+0x21e>
c0019524:	83 e8 02             	sub    eax,0x2
c0019527:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001952e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019534:	89 c2                	mov    edx,eax
c0019536:	83 e2 0f             	and    edx,0xf
c0019539:	66 83 fa 08          	cmp    dx,0x8
c001953d:	75 0a                	jne    c0019549 <IDE::open(int, int, void*)+0x239>
c001953f:	83 e8 02             	sub    eax,0x2
c0019542:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019549:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019550:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019557:	89 d0                	mov    eax,edx
c0019559:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001955c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019560:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019564:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019567:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001956c:	0f b6 c9             	movzx  ecx,cl
c001956f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019576:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019579:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001957d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019581:	8d 50 02             	lea    edx,[eax+0x2]
c0019584:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019589:	0f b6 d2             	movzx  edx,dl
c001958c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019592:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019595:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019599:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001959d:	8d 48 03             	lea    ecx,[eax+0x3]
c00195a0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195a5:	0f b6 c9             	movzx  ecx,cl
c00195a8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00195ae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195b1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195b5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00195b9:	8d 50 04             	lea    edx,[eax+0x4]
c00195bc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00195c2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195c7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195ce:	66 85 f6             	test   si,si
c00195d1:	74 5b                	je     c001962e <IDE::open(int, int, void*)+0x31e>
c00195d3:	0f b6 d2             	movzx  edx,dl
c00195d6:	83 c0 05             	add    eax,0x5
c00195d9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195dc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195e0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195e4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195ea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195ef:	eb 3d                	jmp    c001962e <IDE::open(int, int, void*)+0x31e>
c00195f1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00195f7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195fe:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019605:	66 05 06 02          	add    ax,0x206
c0019609:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019610:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019617:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001961e:	66 05 06 02          	add    ax,0x206
c0019622:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019629:	e9 e5 fe ff ff       	jmp    c0019513 <IDE::open(int, int, void*)+0x203>
c001962e:	50                   	push   eax
c001962f:	50                   	push   eax
c0019630:	6a 00                	push   0x0
c0019632:	53                   	push   ebx
c0019633:	e8 5e fa ff ff       	call   c0019096 <IDE::prepareInterrupt(unsigned char)>
c0019638:	5a                   	pop    edx
c0019639:	59                   	pop    ecx
c001963a:	6a 01                	push   0x1
c001963c:	53                   	push   ebx
c001963d:	e8 54 fa ff ff       	call   c0019096 <IDE::prepareInterrupt(unsigned char)>
c0019642:	83 c4 0c             	add    esp,0xc
c0019645:	6a 00                	push   0x0
c0019647:	6a 00                	push   0x0
c0019649:	53                   	push   ebx
c001964a:	e8 7b fc ff ff       	call   c00192ca <IDE::enableIRQs(unsigned char, bool)>
c001964f:	83 c4 0c             	add    esp,0xc
c0019652:	6a 00                	push   0x0
c0019654:	6a 01                	push   0x1
c0019656:	53                   	push   ebx
c0019657:	e8 6e fc ff ff       	call   c00192ca <IDE::enableIRQs(unsigned char, bool)>
c001965c:	83 c4 10             	add    esp,0x10
c001965f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019666:	74 34                	je     c001969c <IDE::open(int, int, void*)+0x38c>
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	53                   	push   ebx
c001966c:	6a 01                	push   0x1
c001966e:	68 92 92 01 c0       	push   0xc0019292
c0019673:	6a 0e                	push   0xe
c0019675:	53                   	push   ebx
c0019676:	e8 89 23 ff ff       	call   c000ba04 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001967b:	83 c4 14             	add    esp,0x14
c001967e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019684:	53                   	push   ebx
c0019685:	6a 01                	push   0x1
c0019687:	68 ae 92 01 c0       	push   0xc00192ae
c001968c:	6a 0f                	push   0xf
c001968e:	53                   	push   ebx
c001968f:	e8 70 23 ff ff       	call   c000ba04 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019694:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001969a:	eb 38                	jmp    c00196d4 <IDE::open(int, int, void*)+0x3c4>
c001969c:	83 ec 0c             	sub    esp,0xc
c001969f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00196a9:	53                   	push   ebx
c00196aa:	6a 00                	push   0x0
c00196ac:	68 92 92 01 c0       	push   0xc0019292
c00196b1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00196b7:	53                   	push   ebx
c00196b8:	e8 47 23 ff ff       	call   c000ba04 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196bd:	83 c4 14             	add    esp,0x14
c00196c0:	53                   	push   ebx
c00196c1:	6a 00                	push   0x0
c00196c3:	68 ae 92 01 c0       	push   0xc00192ae
c00196c8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196ce:	53                   	push   ebx
c00196cf:	e8 30 23 ff ff       	call   c000ba04 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196d6:	83 c4 20             	add    esp,0x20
c00196d9:	83 ec 0c             	sub    esp,0xc
c00196dc:	53                   	push   ebx
c00196dd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196e0:	83 c4 0c             	add    esp,0xc
c00196e3:	6a 07                	push   0x7
c00196e5:	6a 00                	push   0x0
c00196e7:	53                   	push   ebx
c00196e8:	e8 8f fa ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c00196ed:	83 c4 0c             	add    esp,0xc
c00196f0:	6a 07                	push   0x7
c00196f2:	6a 01                	push   0x1
c00196f4:	53                   	push   ebx
c00196f5:	e8 82 fa ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c00196fa:	83 c4 0c             	add    esp,0xc
c00196fd:	6a 01                	push   0x1
c00196ff:	6a 00                	push   0x0
c0019701:	53                   	push   ebx
c0019702:	e8 c3 fb ff ff       	call   c00192ca <IDE::enableIRQs(unsigned char, bool)>
c0019707:	83 c4 0c             	add    esp,0xc
c001970a:	6a 01                	push   0x1
c001970c:	6a 01                	push   0x1
c001970e:	53                   	push   ebx
c001970f:	e8 b6 fb ff ff       	call   c00192ca <IDE::enableIRQs(unsigned char, bool)>
c0019714:	83 c4 2c             	add    esp,0x2c
c0019717:	31 c0                	xor    eax,eax
c0019719:	5b                   	pop    ebx
c001971a:	5e                   	pop    esi
c001971b:	5f                   	pop    edi
c001971c:	5d                   	pop    ebp
c001971d:	c3                   	ret    

c001971e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001971e:	55                   	push   ebp
c001971f:	57                   	push   edi
c0019720:	56                   	push   esi
c0019721:	53                   	push   ebx
c0019722:	83 ec 1c             	sub    esp,0x1c
c0019725:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019729:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001972d:	8d 50 f8             	lea    edx,[eax-0x8]
c0019730:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019734:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019738:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001973c:	80 fa 03             	cmp    dl,0x3
c001973f:	77 5d                	ja     c001979e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019741:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019749:	0f b6 db             	movzx  ebx,bl
c001974c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001974f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019753:	83 ca 80             	or     edx,0xffffff80
c0019756:	0f b6 d2             	movzx  edx,dl
c0019759:	52                   	push   edx
c001975a:	6a 0c                	push   0xc
c001975c:	53                   	push   ebx
c001975d:	56                   	push   esi
c001975e:	e8 59 f9 ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019763:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019768:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001976c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019770:	0f b6 c0             	movzx  eax,al
c0019773:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019777:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019779:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001977e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019782:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019786:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001978a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019792:	83 c4 2c             	add    esp,0x2c
c0019795:	5b                   	pop    ebx
c0019796:	5e                   	pop    esi
c0019797:	5f                   	pop    edi
c0019798:	5d                   	pop    ebp
c0019799:	e9 1e f9 ff ff       	jmp    c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001979e:	3c 07                	cmp    al,0x7
c00197a0:	77 10                	ja     c00197b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00197a2:	0f b6 db             	movzx  ebx,bl
c00197a5:	0f b6 d0             	movzx  edx,al
c00197a8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00197b0:	eb 2d                	jmp    c00197df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197b2:	3c 0d                	cmp    al,0xd
c00197b4:	77 13                	ja     c00197c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00197b6:	0f b6 db             	movzx  ebx,bl
c00197b9:	0f b6 c0             	movzx  eax,al
c00197bc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00197c3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197c7:	eb 16                	jmp    c00197df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197c9:	3c 15                	cmp    al,0x15
c00197cb:	77 14                	ja     c00197e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197cd:	0f b6 db             	movzx  ebx,bl
c00197d0:	0f b6 c0             	movzx  eax,al
c00197d3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197db:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197e1:	83 c4 1c             	add    esp,0x1c
c00197e4:	5b                   	pop    ebx
c00197e5:	5e                   	pop    esi
c00197e6:	5f                   	pop    edi
c00197e7:	5d                   	pop    ebp
c00197e8:	c3                   	ret    
c00197e9:	90                   	nop

c00197ea <IDE::detect()>:
c00197ea:	55                   	push   ebp
c00197eb:	57                   	push   edi
c00197ec:	56                   	push   esi
c00197ed:	53                   	push   ebx
c00197ee:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00197f4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197fb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019802:	0f 85 97 02 00 00    	jne    c0019a9f <IDE::detect()+0x2b5>
c0019808:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001980f:	31 f6                	xor    esi,esi
c0019811:	31 ed                	xor    ebp,ebp
c0019813:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001981b:	89 e8                	mov    eax,ebp
c001981d:	c1 e0 06             	shl    eax,0x6
c0019820:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019828:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001982c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019830:	c1 e0 04             	shl    eax,0x4
c0019833:	83 c8 a0             	or     eax,0xffffffa0
c0019836:	0f b6 c0             	movzx  eax,al
c0019839:	50                   	push   eax
c001983a:	6a 06                	push   0x6
c001983c:	56                   	push   esi
c001983d:	53                   	push   ebx
c001983e:	e8 79 f8 ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019843:	83 c4 0c             	add    esp,0xc
c0019846:	6a 0c                	push   0xc
c0019848:	56                   	push   esi
c0019849:	53                   	push   ebx
c001984a:	e8 2d f9 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c001984f:	83 c4 0c             	add    esp,0xc
c0019852:	6a 0c                	push   0xc
c0019854:	56                   	push   esi
c0019855:	53                   	push   ebx
c0019856:	e8 21 f9 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c001985b:	83 c4 0c             	add    esp,0xc
c001985e:	6a 0c                	push   0xc
c0019860:	56                   	push   esi
c0019861:	53                   	push   ebx
c0019862:	e8 15 f9 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019867:	83 c4 0c             	add    esp,0xc
c001986a:	6a 0c                	push   0xc
c001986c:	56                   	push   esi
c001986d:	53                   	push   ebx
c001986e:	e8 09 f9 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019873:	68 ec 00 00 00       	push   0xec
c0019878:	6a 07                	push   0x7
c001987a:	56                   	push   esi
c001987b:	53                   	push   ebx
c001987c:	e8 3b f8 ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019881:	83 c4 1c             	add    esp,0x1c
c0019884:	6a 0c                	push   0xc
c0019886:	56                   	push   esi
c0019887:	53                   	push   ebx
c0019888:	e8 ef f8 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c001988d:	83 c4 0c             	add    esp,0xc
c0019890:	6a 0c                	push   0xc
c0019892:	56                   	push   esi
c0019893:	53                   	push   ebx
c0019894:	e8 e3 f8 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019899:	83 c4 0c             	add    esp,0xc
c001989c:	6a 0c                	push   0xc
c001989e:	56                   	push   esi
c001989f:	53                   	push   ebx
c00198a0:	e8 d7 f8 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c00198a5:	83 c4 0c             	add    esp,0xc
c00198a8:	6a 0c                	push   0xc
c00198aa:	56                   	push   esi
c00198ab:	53                   	push   ebx
c00198ac:	e8 cb f8 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c00198b1:	83 c4 0c             	add    esp,0xc
c00198b4:	6a 0c                	push   0xc
c00198b6:	56                   	push   esi
c00198b7:	53                   	push   ebx
c00198b8:	e8 bf f8 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c00198bd:	83 c4 10             	add    esp,0x10
c00198c0:	84 c0                	test   al,al
c00198c2:	0f 84 5f 01 00 00    	je     c0019a27 <IDE::detect()+0x23d>
c00198c8:	31 ff                	xor    edi,edi
c00198ca:	50                   	push   eax
c00198cb:	6a 0c                	push   0xc
c00198cd:	56                   	push   esi
c00198ce:	53                   	push   ebx
c00198cf:	e8 a8 f8 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c00198d4:	83 c4 10             	add    esp,0x10
c00198d7:	a8 01                	test   al,0x1
c00198d9:	0f 85 69 01 00 00    	jne    c0019a48 <IDE::detect()+0x25e>
c00198df:	84 c0                	test   al,al
c00198e1:	78 04                	js     c00198e7 <IDE::detect()+0xfd>
c00198e3:	a8 08                	test   al,0x8
c00198e5:	75 23                	jne    c001990a <IDE::detect()+0x120>
c00198e7:	47                   	inc    edi
c00198e8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00198ee:	7e da                	jle    c00198ca <IDE::detect()+0xe0>
c00198f0:	83 ec 0c             	sub    esp,0xc
c00198f3:	6a 32                	push   0x32
c00198f5:	e8 96 a2 ff ff       	call   c0013b90 <milliTenthSleep(unsigned int)>
c00198fa:	83 c4 10             	add    esp,0x10
c00198fd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019903:	75 c5                	jne    c00198ca <IDE::detect()+0xe0>
c0019905:	e9 3e 01 00 00       	jmp    c0019a48 <IDE::detect()+0x25e>
c001990a:	31 c9                	xor    ecx,ecx
c001990c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019910:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019914:	83 ec 0c             	sub    esp,0xc
c0019917:	68 80 00 00 00       	push   0x80
c001991c:	57                   	push   edi
c001991d:	6a 00                	push   0x0
c001991f:	56                   	push   esi
c0019920:	53                   	push   ebx
c0019921:	e8 f8 fd ff ff       	call   c001971e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019926:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001992b:	89 e8                	mov    eax,ebp
c001992d:	89 d1                	mov    ecx,edx
c001992f:	c1 e0 06             	shl    eax,0x6
c0019932:	01 d8                	add    eax,ebx
c0019934:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001993b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019942:	89 f2                	mov    edx,esi
c0019944:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001994a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001994e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019954:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019958:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001995f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019967:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001996e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019976:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001997c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019983:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019989:	8d 54 24 58          	lea    edx,[esp+0x58]
c001998d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019991:	83 c4 20             	add    esp,0x20
c0019994:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019997:	83 c0 02             	add    eax,0x2
c001999a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00199a0:	83 c7 02             	add    edi,0x2
c00199a3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00199a6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00199ac:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00199b0:	75 e2                	jne    c0019994 <IDE::detect()+0x1aa>
c00199b2:	89 e8                	mov    eax,ebp
c00199b4:	c1 e0 06             	shl    eax,0x6
c00199b7:	01 d8                	add    eax,ebx
c00199b9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00199bf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199c6:	66 c1 ea 09          	shr    dx,0x9
c00199ca:	83 e2 01             	and    edx,0x1
c00199cd:	84 c9                	test   cl,cl
c00199cf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199d5:	75 22                	jne    c00199f9 <IDE::detect()+0x20f>
c00199d7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199de:	74 46                	je     c0019a26 <IDE::detect()+0x23c>
c00199e0:	83 ec 0c             	sub    esp,0xc
c00199e3:	68 7c 01 00 00       	push   0x17c
c00199e8:	e8 cc dd fe ff       	call   c00077b9 <malloc>
c00199ed:	89 c7                	mov    edi,eax
c00199ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00199f2:	e8 11 05 00 00       	call   c0019f08 <ATA::ATA()>
c00199f7:	eb 17                	jmp    c0019a10 <IDE::detect()+0x226>
c00199f9:	83 ec 0c             	sub    esp,0xc
c00199fc:	68 84 01 00 00       	push   0x184
c0019a01:	e8 b3 dd fe ff       	call   c00077b9 <malloc>
c0019a06:	89 c7                	mov    edi,eax
c0019a08:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a0b:	e8 f0 0a 00 00       	call   c001a500 <ATAPI::ATAPI()>
c0019a10:	5a                   	pop    edx
c0019a11:	59                   	pop    ecx
c0019a12:	57                   	push   edi
c0019a13:	53                   	push   ebx
c0019a14:	e8 3f 20 ff ff       	call   c000ba58 <Device::addChild(Device*)>
c0019a19:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a1b:	53                   	push   ebx
c0019a1c:	55                   	push   ebp
c0019a1d:	6a 00                	push   0x0
c0019a1f:	57                   	push   edi
c0019a20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a23:	83 c4 20             	add    esp,0x20
c0019a26:	45                   	inc    ebp
c0019a27:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a2c:	74 0d                	je     c0019a3b <IDE::detect()+0x251>
c0019a2e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a36:	e9 e0 fd ff ff       	jmp    c001981b <IDE::detect()+0x31>
c0019a3b:	4e                   	dec    esi
c0019a3c:	74 61                	je     c0019a9f <IDE::detect()+0x2b5>
c0019a3e:	be 01 00 00 00       	mov    esi,0x1
c0019a43:	e9 cb fd ff ff       	jmp    c0019813 <IDE::detect()+0x29>
c0019a48:	50                   	push   eax
c0019a49:	6a 04                	push   0x4
c0019a4b:	56                   	push   esi
c0019a4c:	53                   	push   ebx
c0019a4d:	e8 2a f7 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019a52:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a56:	83 c4 0c             	add    esp,0xc
c0019a59:	6a 05                	push   0x5
c0019a5b:	56                   	push   esi
c0019a5c:	53                   	push   ebx
c0019a5d:	e8 1a f7 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019a62:	83 c4 10             	add    esp,0x10
c0019a65:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a69:	80 fa 14             	cmp    dl,0x14
c0019a6c:	75 04                	jne    c0019a72 <IDE::detect()+0x288>
c0019a6e:	3c eb                	cmp    al,0xeb
c0019a70:	eb 07                	jmp    c0019a79 <IDE::detect()+0x28f>
c0019a72:	3c 96                	cmp    al,0x96
c0019a74:	75 b1                	jne    c0019a27 <IDE::detect()+0x23d>
c0019a76:	80 fa 69             	cmp    dl,0x69
c0019a79:	75 ac                	jne    c0019a27 <IDE::detect()+0x23d>
c0019a7b:	68 a1 00 00 00       	push   0xa1
c0019a80:	6a 07                	push   0x7
c0019a82:	56                   	push   esi
c0019a83:	53                   	push   ebx
c0019a84:	e8 33 f6 ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a89:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a90:	e8 fb a0 ff ff       	call   c0013b90 <milliTenthSleep(unsigned int)>
c0019a95:	83 c4 10             	add    esp,0x10
c0019a98:	b1 01                	mov    cl,0x1
c0019a9a:	e9 6d fe ff ff       	jmp    c001990c <IDE::detect()+0x122>
c0019a9f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019aa5:	5b                   	pop    ebx
c0019aa6:	5e                   	pop    esi
c0019aa7:	5f                   	pop    edi
c0019aa8:	5d                   	pop    ebp
c0019aa9:	c3                   	ret    

c0019aaa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019aaa:	55                   	push   ebp
c0019aab:	57                   	push   edi
c0019aac:	56                   	push   esi
c0019aad:	53                   	push   ebx
c0019aae:	83 ec 1c             	sub    esp,0x1c
c0019ab1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ab5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ab9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019abd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019ac1:	88 c3                	mov    bl,al
c0019ac3:	84 c0                	test   al,al
c0019ac5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ac9:	0f 84 81 00 00 00    	je     c0019b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019acf:	83 ec 0c             	sub    esp,0xc
c0019ad2:	68 8b f4 01 c0       	push   0xc001f48b
c0019ad7:	e8 3d 0b ff ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c0019adc:	83 c4 10             	add    esp,0x10
c0019adf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ae3:	3c 01                	cmp    al,0x1
c0019ae5:	74 63                	je     c0019b4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019ae7:	3c 02                	cmp    al,0x2
c0019ae9:	75 53                	jne    c0019b3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019aeb:	01 f6                	add    esi,esi
c0019aed:	09 ee                	or     esi,ebp
c0019aef:	50                   	push   eax
c0019af0:	89 f0                	mov    eax,esi
c0019af2:	6a 01                	push   0x1
c0019af4:	0f b6 f0             	movzx  esi,al
c0019af7:	c1 e6 06             	shl    esi,0x6
c0019afa:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b02:	50                   	push   eax
c0019b03:	57                   	push   edi
c0019b04:	e8 73 f6 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019b09:	83 c4 10             	add    esp,0x10
c0019b0c:	a8 01                	test   al,0x1
c0019b0e:	74 02                	je     c0019b12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b10:	b3 07                	mov    bl,0x7
c0019b12:	a8 02                	test   al,0x2
c0019b14:	74 02                	je     c0019b18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b16:	b3 03                	mov    bl,0x3
c0019b18:	a8 04                	test   al,0x4
c0019b1a:	74 02                	je     c0019b1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b1c:	b3 14                	mov    bl,0x14
c0019b1e:	a8 08                	test   al,0x8
c0019b20:	74 02                	je     c0019b24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b22:	b3 03                	mov    bl,0x3
c0019b24:	a8 10                	test   al,0x10
c0019b26:	74 02                	je     c0019b2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b28:	b3 15                	mov    bl,0x15
c0019b2a:	a8 20                	test   al,0x20
c0019b2c:	74 02                	je     c0019b30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b2e:	b3 03                	mov    bl,0x3
c0019b30:	a8 40                	test   al,0x40
c0019b32:	74 02                	je     c0019b36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b34:	b3 16                	mov    bl,0x16
c0019b36:	84 c0                	test   al,al
c0019b38:	79 16                	jns    c0019b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b3a:	b3 0d                	mov    bl,0xd
c0019b3c:	eb 12                	jmp    c0019b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b3e:	3c 03                	cmp    al,0x3
c0019b40:	74 0c                	je     c0019b4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b42:	3c 04                	cmp    al,0x4
c0019b44:	75 0a                	jne    c0019b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b46:	b3 08                	mov    bl,0x8
c0019b48:	eb 06                	jmp    c0019b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b4a:	b3 13                	mov    bl,0x13
c0019b4c:	eb 02                	jmp    c0019b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b4e:	b3 17                	mov    bl,0x17
c0019b50:	83 c4 1c             	add    esp,0x1c
c0019b53:	88 d8                	mov    al,bl
c0019b55:	5b                   	pop    ebx
c0019b56:	5e                   	pop    esi
c0019b57:	5f                   	pop    edi
c0019b58:	5d                   	pop    ebp
c0019b59:	c3                   	ret    

c0019b5a <IDE::polling(unsigned char, unsigned int)>:
c0019b5a:	55                   	push   ebp
c0019b5b:	bd 04 00 00 00       	mov    ebp,0x4
c0019b60:	57                   	push   edi
c0019b61:	56                   	push   esi
c0019b62:	53                   	push   ebx
c0019b63:	83 ec 0c             	sub    esp,0xc
c0019b66:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b6a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b6e:	0f b6 f3             	movzx  esi,bl
c0019b71:	52                   	push   edx
c0019b72:	6a 0c                	push   0xc
c0019b74:	56                   	push   esi
c0019b75:	57                   	push   edi
c0019b76:	e8 01 f6 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019b7b:	83 c4 10             	add    esp,0x10
c0019b7e:	4d                   	dec    ebp
c0019b7f:	75 ed                	jne    c0019b6e <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b81:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b86:	50                   	push   eax
c0019b87:	6a 0c                	push   0xc
c0019b89:	56                   	push   esi
c0019b8a:	57                   	push   edi
c0019b8b:	e8 ec f5 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019b90:	83 c4 10             	add    esp,0x10
c0019b93:	a8 01                	test   al,0x1
c0019b95:	75 17                	jne    c0019bae <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b97:	a8 20                	test   al,0x20
c0019b99:	75 0f                	jne    c0019baa <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b9b:	4b                   	dec    ebx
c0019b9c:	74 10                	je     c0019bae <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b9e:	84 c0                	test   al,al
c0019ba0:	78 e4                	js     c0019b86 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019ba2:	a8 08                	test   al,0x8
c0019ba4:	74 e0                	je     c0019b86 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019ba6:	31 c0                	xor    eax,eax
c0019ba8:	eb 06                	jmp    c0019bb0 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019baa:	b0 01                	mov    al,0x1
c0019bac:	eb 02                	jmp    c0019bb0 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bae:	b0 02                	mov    al,0x2
c0019bb0:	83 c4 0c             	add    esp,0xc
c0019bb3:	5b                   	pop    ebx
c0019bb4:	5e                   	pop    esi
c0019bb5:	5f                   	pop    edi
c0019bb6:	5d                   	pop    ebp
c0019bb7:	c3                   	ret    

c0019bb8 <SATABus::close(int, int, void*)>:
c0019bb8:	31 c0                	xor    eax,eax
c0019bba:	c3                   	ret    
c0019bbb:	90                   	nop

c0019bbc <SATABus::detect()>:
c0019bbc:	c3                   	ret    
c0019bbd:	90                   	nop

c0019bbe <SATABus::SATABus()>:
c0019bbe:	83 ec 0c             	sub    esp,0xc
c0019bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bc5:	83 ec 08             	sub    esp,0x8
c0019bc8:	68 c4 f4 01 c0       	push   0xc001f4c4
c0019bcd:	50                   	push   eax
c0019bce:	e8 c9 21 ff ff       	call   c000bd9c <HardDiskController::HardDiskController(char const*)>
c0019bd3:	83 c4 10             	add    esp,0x10
c0019bd6:	ba f0 f4 01 c0       	mov    edx,0xc001f4f0
c0019bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bdf:	89 10                	mov    DWORD PTR [eax],edx
c0019be1:	83 ec 0c             	sub    esp,0xc
c0019be4:	6a 50                	push   0x50
c0019be6:	e8 68 df fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019beb:	83 c4 10             	add    esp,0x10
c0019bee:	89 c2                	mov    edx,eax
c0019bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019bfa:	83 ec 0c             	sub    esp,0xc
c0019bfd:	6a 50                	push   0x50
c0019bff:	e8 81 f6 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	89 c2                	mov    edx,eax
c0019c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c0d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c13:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019c18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c1c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c26:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c2c:	83 ec 0c             	sub    esp,0xc
c0019c2f:	6a 03                	push   0x3
c0019c31:	6a 50                	push   0x50
c0019c33:	51                   	push   ecx
c0019c34:	52                   	push   edx
c0019c35:	50                   	push   eax
c0019c36:	e8 b7 ff fe ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c3b:	83 c4 20             	add    esp,0x20
c0019c3e:	90                   	nop
c0019c3f:	83 c4 0c             	add    esp,0xc
c0019c42:	c3                   	ret    
c0019c43:	90                   	nop

c0019c44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c48:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c4b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c4e:	09 c2                	or     edx,eax
c0019c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c5a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c5c:	31 c0                	xor    eax,eax
c0019c5e:	c1 e9 08             	shr    ecx,0x8
c0019c61:	83 e1 0f             	and    ecx,0xf
c0019c64:	39 c8                	cmp    eax,ecx
c0019c66:	74 0a                	je     c0019c72 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c68:	f6 c2 01             	test   dl,0x1
c0019c6b:	74 08                	je     c0019c75 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c6d:	d1 ea                	shr    edx,1
c0019c6f:	40                   	inc    eax
c0019c70:	eb f2                	jmp    c0019c64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c72:	83 c8 ff             	or     eax,0xffffffff
c0019c75:	c3                   	ret    

c0019c76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c7a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c7d:	89 c2                	mov    edx,eax
c0019c7f:	c1 ea 08             	shr    edx,0x8
c0019c82:	83 e2 0f             	and    edx,0xf
c0019c85:	fe ca                	dec    dl
c0019c87:	75 31                	jne    c0019cba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c89:	83 e0 0f             	and    eax,0xf
c0019c8c:	3c 03                	cmp    al,0x3
c0019c8e:	75 2a                	jne    c0019cba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c90:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c93:	b8 02 00 00 00       	mov    eax,0x2
c0019c98:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c9e:	74 1c                	je     c0019cbc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019ca0:	b8 04 00 00 00       	mov    eax,0x4
c0019ca5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019cab:	74 0f                	je     c0019cbc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cad:	31 c0                	xor    eax,eax
c0019caf:	83 fa 03             	cmp    edx,0x3
c0019cb2:	0f 94 c0             	sete   al
c0019cb5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019cb9:	c3                   	ret    
c0019cba:	31 c0                	xor    eax,eax
c0019cbc:	c3                   	ret    
c0019cbd:	90                   	nop

c0019cbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cc2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cc5:	0f ba e2 0f          	bt     edx,0xf
c0019cc9:	72 f7                	jb     c0019cc2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019ccb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cce:	83 ca 10             	or     edx,0x10
c0019cd1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cd4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cd7:	83 ca 01             	or     edx,0x1
c0019cda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cdd:	c3                   	ret    

c0019cde <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ce5:	83 e2 fe             	and    edx,0xfffffffe
c0019ce8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ceb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cee:	83 e2 ef             	and    edx,0xffffffef
c0019cf1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cf4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cf7:	0f ba e2 0e          	bt     edx,0xe
c0019cfb:	72 f7                	jb     c0019cf4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cfd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d00:	0f ba e2 0f          	bt     edx,0xf
c0019d04:	72 ee                	jb     c0019cf4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d06:	c3                   	ret    
c0019d07:	90                   	nop

c0019d08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d08:	55                   	push   ebp
c0019d09:	57                   	push   edi
c0019d0a:	56                   	push   esi
c0019d0b:	53                   	push   ebx
c0019d0c:	83 ec 1c             	sub    esp,0x1c
c0019d0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d17:	53                   	push   ebx
c0019d18:	56                   	push   esi
c0019d19:	e8 c0 ff ff ff       	call   c0019cde <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d1e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d22:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d28:	83 ec 0c             	sub    esp,0xc
c0019d2b:	c1 e5 0a             	shl    ebp,0xa
c0019d2e:	01 e8                	add    eax,ebp
c0019d30:	89 03                	mov    DWORD PTR [ebx],eax
c0019d32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d34:	68 00 04 00 00       	push   0x400
c0019d39:	6a 00                	push   0x0
c0019d3b:	50                   	push   eax
c0019d3c:	e8 8f 67 fe ff       	call   c00004d0 <memset>
c0019d41:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d47:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d4b:	01 e8                	add    eax,ebp
c0019d4d:	83 c4 1c             	add    esp,0x1c
c0019d50:	89 03                	mov    DWORD PTR [ebx],eax
c0019d52:	c1 e2 08             	shl    edx,0x8
c0019d55:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d5c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d62:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d68:	01 f8                	add    eax,edi
c0019d6a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d6d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d70:	68 00 01 00 00       	push   0x100
c0019d75:	6a 00                	push   0x0
c0019d77:	50                   	push   eax
c0019d78:	e8 53 67 fe ff       	call   c00004d0 <memset>
c0019d7d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d83:	01 fa                	add    edx,edi
c0019d85:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d89:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d8c:	c1 e7 0d             	shl    edi,0xd
c0019d8f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d96:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d9c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019da2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019da6:	31 ff                	xor    edi,edi
c0019da8:	83 c4 10             	add    esp,0x10
c0019dab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019db1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019db5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019dbb:	83 c5 20             	add    ebp,0x20
c0019dbe:	01 f8                	add    eax,edi
c0019dc0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dc3:	52                   	push   edx
c0019dc4:	68 00 01 00 00       	push   0x100
c0019dc9:	6a 00                	push   0x0
c0019dcb:	50                   	push   eax
c0019dcc:	e8 ff 66 fe ff       	call   c00004d0 <memset>
c0019dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dd5:	83 c4 10             	add    esp,0x10
c0019dd8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019dde:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019de5:	01 f8                	add    eax,edi
c0019de7:	81 c7 00 01 00 00    	add    edi,0x100
c0019ded:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019df0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019df6:	75 b3                	jne    c0019dab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019df8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019dff:	50                   	push   eax
c0019e00:	50                   	push   eax
c0019e01:	53                   	push   ebx
c0019e02:	56                   	push   esi
c0019e03:	e8 b6 fe ff ff       	call   c0019cbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e08:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e0f:	83 c4 2c             	add    esp,0x2c
c0019e12:	5b                   	pop    ebx
c0019e13:	5e                   	pop    esi
c0019e14:	5f                   	pop    edi
c0019e15:	5d                   	pop    ebp
c0019e16:	c3                   	ret    
c0019e17:	90                   	nop

c0019e18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e18:	55                   	push   ebp
c0019e19:	57                   	push   edi
c0019e1a:	56                   	push   esi
c0019e1b:	53                   	push   ebx
c0019e1c:	31 db                	xor    ebx,ebx
c0019e1e:	83 ec 0c             	sub    esp,0xc
c0019e21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e29:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e2c:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e32:	74 7a                	je     c0019eae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e34:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e38:	89 d8                	mov    eax,ebx
c0019e3a:	c1 e0 07             	shl    eax,0x7
c0019e3d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e44:	55                   	push   ebp
c0019e45:	56                   	push   esi
c0019e46:	e8 2b fe ff ff       	call   c0019c76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e4b:	5a                   	pop    edx
c0019e4c:	83 f8 01             	cmp    eax,0x1
c0019e4f:	59                   	pop    ecx
c0019e50:	75 21                	jne    c0019e73 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e52:	50                   	push   eax
c0019e53:	53                   	push   ebx
c0019e54:	55                   	push   ebp
c0019e55:	56                   	push   esi
c0019e56:	e8 ad fe ff ff       	call   c0019d08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e5b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e62:	e8 52 d9 fe ff       	call   c00077b9 <malloc>
c0019e67:	89 c5                	mov    ebp,eax
c0019e69:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e6c:	e8 43 0d 00 00       	call   c001abb4 <SATA::SATA()>
c0019e71:	eb 24                	jmp    c0019e97 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e73:	83 f8 04             	cmp    eax,0x4
c0019e76:	75 36                	jne    c0019eae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e78:	51                   	push   ecx
c0019e79:	53                   	push   ebx
c0019e7a:	55                   	push   ebp
c0019e7b:	56                   	push   esi
c0019e7c:	e8 87 fe ff ff       	call   c0019d08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e81:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e88:	e8 2c d9 fe ff       	call   c00077b9 <malloc>
c0019e8d:	89 c5                	mov    ebp,eax
c0019e8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e92:	e8 79 10 00 00       	call   c001af10 <SATAPI::SATAPI()>
c0019e97:	58                   	pop    eax
c0019e98:	5a                   	pop    edx
c0019e99:	55                   	push   ebp
c0019e9a:	56                   	push   esi
c0019e9b:	e8 b8 1b ff ff       	call   c000ba58 <Device::addChild(Device*)>
c0019ea0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ea3:	56                   	push   esi
c0019ea4:	6a 00                	push   0x0
c0019ea6:	53                   	push   ebx
c0019ea7:	55                   	push   ebp
c0019ea8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019eab:	83 c4 20             	add    esp,0x20
c0019eae:	d1 ef                	shr    edi,1
c0019eb0:	43                   	inc    ebx
c0019eb1:	83 fb 20             	cmp    ebx,0x20
c0019eb4:	0f 85 72 ff ff ff    	jne    c0019e2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019eba:	83 c4 0c             	add    esp,0xc
c0019ebd:	5b                   	pop    ebx
c0019ebe:	5e                   	pop    esi
c0019ebf:	5f                   	pop    edi
c0019ec0:	5d                   	pop    ebp
c0019ec1:	c3                   	ret    

c0019ec2 <SATABus::open(int, int, void*)>:
c0019ec2:	83 ec 14             	sub    esp,0x14
c0019ec5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ec9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019ecf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ed5:	52                   	push   edx
c0019ed6:	50                   	push   eax
c0019ed7:	e8 3c ff ff ff       	call   c0019e18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019edc:	31 c0                	xor    eax,eax
c0019ede:	83 c4 1c             	add    esp,0x1c
c0019ee1:	c3                   	ret    

c0019ee2 <ATA::close(int, int, void*)>:
c0019ee2:	83 ec 0c             	sub    esp,0xc
c0019ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019eef:	85 c0                	test   eax,eax
c0019ef1:	74 0c                	je     c0019eff <ATA::close(int, int, void*)+0x1d>
c0019ef3:	83 ec 0c             	sub    esp,0xc
c0019ef6:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ef8:	50                   	push   eax
c0019ef9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019efc:	83 c4 10             	add    esp,0x10
c0019eff:	31 c0                	xor    eax,eax
c0019f01:	83 c4 0c             	add    esp,0xc
c0019f04:	c3                   	ret    
c0019f05:	90                   	nop

c0019f06 <ATA::powerSaving(PowerSavingLevel)>:
c0019f06:	c3                   	ret    
c0019f07:	90                   	nop

c0019f08 <ATA::ATA()>:
c0019f08:	83 ec 0c             	sub    esp,0xc
c0019f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f0f:	83 ec 04             	sub    esp,0x4
c0019f12:	68 00 02 00 00       	push   0x200
c0019f17:	68 bd f5 01 c0       	push   0xc001f5bd
c0019f1c:	50                   	push   eax
c0019f1d:	e8 04 1f ff ff       	call   c000be26 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f22:	83 c4 10             	add    esp,0x10
c0019f25:	ba 30 f5 01 c0       	mov    edx,0xc001f530
c0019f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f2e:	89 10                	mov    DWORD PTR [eax],edx
c0019f30:	90                   	nop
c0019f31:	83 c4 0c             	add    esp,0xc
c0019f34:	c3                   	ret    
c0019f35:	90                   	nop

c0019f36 <ATA::flush(bool)>:
c0019f36:	53                   	push   ebx
c0019f37:	83 ec 08             	sub    esp,0x8
c0019f3a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f43:	19 c0                	sbb    eax,eax
c0019f45:	83 e0 fd             	and    eax,0xfffffffd
c0019f48:	05 ea 00 00 00       	add    eax,0xea
c0019f4d:	50                   	push   eax
c0019f4e:	6a 07                	push   0x7
c0019f50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f57:	50                   	push   eax
c0019f58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f5e:	e8 59 f1 ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f63:	83 c4 0c             	add    esp,0xc
c0019f66:	6a 00                	push   0x0
c0019f68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f6f:	50                   	push   eax
c0019f70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f76:	e8 df fb ff ff       	call   c0019b5a <IDE::polling(unsigned char, unsigned int)>
c0019f7b:	83 c4 18             	add    esp,0x18
c0019f7e:	5b                   	pop    ebx
c0019f7f:	c3                   	ret    

c0019f80 <ATA::readyForCommand()>:
c0019f80:	56                   	push   esi
c0019f81:	53                   	push   ebx
c0019f82:	53                   	push   ebx
c0019f83:	31 db                	xor    ebx,ebx
c0019f85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f89:	51                   	push   ecx
c0019f8a:	6a 0c                	push   0xc
c0019f8c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f93:	50                   	push   eax
c0019f94:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f9a:	e8 dd f1 ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c0019f9f:	83 c4 10             	add    esp,0x10
c0019fa2:	a8 88                	test   al,0x88
c0019fa4:	74 1f                	je     c0019fc5 <ATA::readyForCommand()+0x45>
c0019fa6:	43                   	inc    ebx
c0019fa7:	83 fb 63             	cmp    ebx,0x63
c0019faa:	7e dd                	jle    c0019f89 <ATA::readyForCommand()+0x9>
c0019fac:	83 ec 0c             	sub    esp,0xc
c0019faf:	6a 0a                	push   0xa
c0019fb1:	e8 da 9b ff ff       	call   c0013b90 <milliTenthSleep(unsigned int)>
c0019fb6:	83 c4 10             	add    esp,0x10
c0019fb9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019fbf:	75 c8                	jne    c0019f89 <ATA::readyForCommand()+0x9>
c0019fc1:	31 c0                	xor    eax,eax
c0019fc3:	eb 02                	jmp    c0019fc7 <ATA::readyForCommand()+0x47>
c0019fc5:	b0 01                	mov    al,0x1
c0019fc7:	5a                   	pop    edx
c0019fc8:	5b                   	pop    ebx
c0019fc9:	5e                   	pop    esi
c0019fca:	c3                   	ret    
c0019fcb:	90                   	nop

c0019fcc <ATA::access(unsigned long long, int, void*, bool)>:
c0019fcc:	55                   	push   ebp
c0019fcd:	57                   	push   edi
c0019fce:	56                   	push   esi
c0019fcf:	53                   	push   ebx
c0019fd0:	83 ec 2c             	sub    esp,0x2c
c0019fd3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019fd7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fdb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019fdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fe3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fe7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019feb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ff9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019fff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a003:	c1 e0 06             	shl    eax,0x6
c001a006:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a00e:	74 5d                	je     c001a06d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a010:	89 fa                	mov    edx,edi
c001a012:	89 f0                	mov    eax,esi
c001a014:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a018:	c1 ea 1c             	shr    edx,0x1c
c001a01b:	89 d1                	mov    ecx,edx
c001a01d:	09 c1                	or     ecx,eax
c001a01f:	74 25                	je     c001a046 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a021:	31 ed                	xor    ebp,ebp
c001a023:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a02a:	89 fa                	mov    edx,edi
c001a02c:	89 f0                	mov    eax,esi
c001a02e:	0f ad d0             	shrd   eax,edx,cl
c001a031:	d3 ea                	shr    edx,cl
c001a033:	f6 c1 20             	test   cl,0x20
c001a036:	74 02                	je     c001a03a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a038:	89 d0                	mov    eax,edx
c001a03a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a03e:	45                   	inc    ebp
c001a03f:	83 fd 06             	cmp    ebp,0x6
c001a042:	75 df                	jne    c001a023 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a044:	eb 76                	jmp    c001a0bc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a046:	89 f0                	mov    eax,esi
c001a048:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a04d:	89 fa                	mov    edx,edi
c001a04f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a056:	0f ac d0 10          	shrd   eax,edx,0x10
c001a05a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a05f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a063:	c1 ee 18             	shr    esi,0x18
c001a066:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a06b:	eb 56                	jmp    c001a0c3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a06d:	6a 00                	push   0x0
c001a06f:	6a 3f                	push   0x3f
c001a071:	57                   	push   edi
c001a072:	56                   	push   esi
c001a073:	e8 78 22 00 00       	call   c001c2f0 <__umoddi3>
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	40                   	inc    eax
c001a07c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a080:	6a 00                	push   0x0
c001a082:	68 f0 03 00 00       	push   0x3f0
c001a087:	57                   	push   edi
c001a088:	56                   	push   esi
c001a089:	e8 62 21 00 00       	call   c001c1f0 <__udivdi3>
c001a08e:	83 c4 10             	add    esp,0x10
c001a091:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a096:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a09d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0a2:	6a 00                	push   0x0
c001a0a4:	6a 3f                	push   0x3f
c001a0a6:	57                   	push   edi
c001a0a7:	56                   	push   esi
c001a0a8:	e8 43 21 00 00       	call   c001c1f0 <__udivdi3>
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	89 c6                	mov    esi,eax
c001a0b2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a0b7:	83 e6 0f             	and    esi,0xf
c001a0ba:	eb 07                	jmp    c001a0c3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0bc:	31 f6                	xor    esi,esi
c001a0be:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a0c3:	bf 01 00 00 00       	mov    edi,0x1
c001a0c8:	50                   	push   eax
c001a0c9:	6a 00                	push   0x0
c001a0cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0d2:	50                   	push   eax
c001a0d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0d7:	e8 ee f1 ff ff       	call   c00192ca <IDE::enableIRQs(unsigned char, bool)>
c001a0dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0df:	e8 9c fe ff ff       	call   c0019f80 <ATA::readyForCommand()>
c001a0e4:	83 c4 10             	add    esp,0x10
c001a0e7:	84 c0                	test   al,al
c001a0e9:	0f 84 4e 02 00 00    	je     c001a33d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a0ef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0f5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0fb:	c1 e0 04             	shl    eax,0x4
c001a0fe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a105:	09 c6                	or     esi,eax
c001a107:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a10c:	75 05                	jne    c001a113 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a10e:	83 ce a0             	or     esi,0xffffffa0
c001a111:	eb 03                	jmp    c001a116 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a113:	83 ce e0             	or     esi,0xffffffe0
c001a116:	89 f0                	mov    eax,esi
c001a118:	0f b6 f0             	movzx  esi,al
c001a11b:	56                   	push   esi
c001a11c:	6a 06                	push   0x6
c001a11e:	51                   	push   ecx
c001a11f:	52                   	push   edx
c001a120:	e8 97 ef ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a125:	83 c4 10             	add    esp,0x10
c001a128:	6a 00                	push   0x0
c001a12a:	6a 01                	push   0x1
c001a12c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a133:	50                   	push   eax
c001a134:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a13a:	e8 7d ef ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a13f:	83 c4 10             	add    esp,0x10
c001a142:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a147:	75 6e                	jne    c001a1b7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a149:	6a 00                	push   0x0
c001a14b:	6a 08                	push   0x8
c001a14d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a154:	50                   	push   eax
c001a155:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a15b:	e8 5c ef ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a160:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a165:	50                   	push   eax
c001a166:	6a 09                	push   0x9
c001a168:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a16f:	50                   	push   eax
c001a170:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a176:	e8 41 ef ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a17b:	83 c4 20             	add    esp,0x20
c001a17e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a183:	50                   	push   eax
c001a184:	6a 0a                	push   0xa
c001a186:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a18d:	50                   	push   eax
c001a18e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a194:	e8 23 ef ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a199:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a19e:	50                   	push   eax
c001a19f:	6a 0b                	push   0xb
c001a1a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a8:	50                   	push   eax
c001a1a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1af:	e8 08 ef ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b4:	83 c4 20             	add    esp,0x20
c001a1b7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a1bc:	50                   	push   eax
c001a1bd:	6a 02                	push   0x2
c001a1bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c6:	50                   	push   eax
c001a1c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1cd:	e8 ea ee ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1d2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1d7:	50                   	push   eax
c001a1d8:	6a 03                	push   0x3
c001a1da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e1:	50                   	push   eax
c001a1e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e8:	e8 cf ee ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ed:	83 c4 20             	add    esp,0x20
c001a1f0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a1f5:	50                   	push   eax
c001a1f6:	6a 04                	push   0x4
c001a1f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ff:	50                   	push   eax
c001a200:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a206:	e8 b1 ee ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a20b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a210:	50                   	push   eax
c001a211:	6a 05                	push   0x5
c001a213:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a21a:	50                   	push   eax
c001a21b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a221:	e8 96 ee ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a226:	83 c4 20             	add    esp,0x20
c001a229:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a22e:	0f 94 c0             	sete   al
c001a231:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a236:	74 09                	je     c001a241 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a238:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a23f:	eb 07                	jmp    c001a248 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a241:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a248:	0f b6 c0             	movzx  eax,al
c001a24b:	50                   	push   eax
c001a24c:	6a 07                	push   0x7
c001a24e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a255:	50                   	push   eax
c001a256:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a25c:	e8 5b ee ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a261:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a265:	83 c4 10             	add    esp,0x10
c001a268:	85 f6                	test   esi,esi
c001a26a:	0f 84 ae 00 00 00    	je     c001a31e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a270:	50                   	push   eax
c001a271:	6a 01                	push   0x1
c001a273:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a27a:	50                   	push   eax
c001a27b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a281:	e8 d4 f8 ff ff       	call   c0019b5a <IDE::polling(unsigned char, unsigned int)>
c001a286:	83 c4 10             	add    esp,0x10
c001a289:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a28f:	84 c0                	test   al,al
c001a291:	74 20                	je     c001a2b3 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a293:	0f b6 f8             	movzx  edi,al
c001a296:	0f b6 d2             	movzx  edx,dl
c001a299:	57                   	push   edi
c001a29a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a2a1:	50                   	push   eax
c001a2a2:	52                   	push   edx
c001a2a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2a9:	e8 fc f7 ff ff       	call   c0019aaa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a2ae:	e9 87 00 00 00       	jmp    c001a33a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a2b3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2b8:	74 33                	je     c001a2ed <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a2ba:	31 ed                	xor    ebp,ebp
c001a2bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2c0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2c4:	50                   	push   eax
c001a2c5:	50                   	push   eax
c001a2c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2cd:	50                   	push   eax
c001a2ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d4:	e8 d1 ed ff ff       	call   c00190aa <IDE::getBase(unsigned char)>
c001a2d9:	89 c2                	mov    edx,eax
c001a2db:	89 f8                	mov    eax,edi
c001a2dd:	66 ef                	out    dx,ax
c001a2df:	45                   	inc    ebp
c001a2e0:	83 c4 10             	add    esp,0x10
c001a2e3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2e9:	75 d1                	jne    c001a2bc <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2eb:	eb 23                	jmp    c001a310 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a2ed:	0f b6 d2             	movzx  edx,dl
c001a2f0:	51                   	push   ecx
c001a2f1:	51                   	push   ecx
c001a2f2:	52                   	push   edx
c001a2f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2f9:	e8 ac ed ff ff       	call   c00190aa <IDE::getBase(unsigned char)>
c001a2fe:	b9 00 01 00 00       	mov    ecx,0x100
c001a303:	89 c2                	mov    edx,eax
c001a305:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a309:	fc                   	cld    
c001a30a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a30d:	83 c4 10             	add    esp,0x10
c001a310:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a318:	4e                   	dec    esi
c001a319:	e9 4a ff ff ff       	jmp    c001a268 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a31e:	31 ff                	xor    edi,edi
c001a320:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a325:	74 16                	je     c001a33d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a327:	50                   	push   eax
c001a328:	50                   	push   eax
c001a329:	31 c0                	xor    eax,eax
c001a32b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a330:	0f 94 c0             	sete   al
c001a333:	50                   	push   eax
c001a334:	53                   	push   ebx
c001a335:	e8 fc fb ff ff       	call   c0019f36 <ATA::flush(bool)>
c001a33a:	83 c4 10             	add    esp,0x10
c001a33d:	83 c4 2c             	add    esp,0x2c
c001a340:	89 f8                	mov    eax,edi
c001a342:	5b                   	pop    ebx
c001a343:	5e                   	pop    esi
c001a344:	5f                   	pop    edi
c001a345:	5d                   	pop    ebp
c001a346:	c3                   	ret    
c001a347:	90                   	nop

c001a348 <ATA::read(unsigned long long, int, void*)>:
c001a348:	57                   	push   edi
c001a349:	b8 04 00 00 00       	mov    eax,0x4
c001a34e:	56                   	push   esi
c001a34f:	53                   	push   ebx
c001a350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a354:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a358:	8d 7a ff             	lea    edi,[edx-0x1]
c001a35b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a35f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a363:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a369:	77 25                	ja     c001a390 <ATA::read(unsigned long long, int, void*)+0x48>
c001a36b:	b8 06 00 00 00       	mov    eax,0x6
c001a370:	85 f6                	test   esi,esi
c001a372:	74 1c                	je     c001a390 <ATA::read(unsigned long long, int, void*)+0x48>
c001a374:	50                   	push   eax
c001a375:	50                   	push   eax
c001a376:	6a 00                	push   0x0
c001a378:	56                   	push   esi
c001a379:	52                   	push   edx
c001a37a:	53                   	push   ebx
c001a37b:	51                   	push   ecx
c001a37c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a380:	e8 47 fc ff ff       	call   c0019fcc <ATA::access(unsigned long long, int, void*, bool)>
c001a385:	83 c4 20             	add    esp,0x20
c001a388:	85 c0                	test   eax,eax
c001a38a:	0f 95 c0             	setne  al
c001a38d:	0f b6 c0             	movzx  eax,al
c001a390:	5b                   	pop    ebx
c001a391:	5e                   	pop    esi
c001a392:	5f                   	pop    edi
c001a393:	c3                   	ret    

c001a394 <ATA::write(unsigned long long, int, void*)>:
c001a394:	57                   	push   edi
c001a395:	b8 04 00 00 00       	mov    eax,0x4
c001a39a:	56                   	push   esi
c001a39b:	53                   	push   ebx
c001a39c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3a4:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3ab:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3af:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3b5:	77 25                	ja     c001a3dc <ATA::write(unsigned long long, int, void*)+0x48>
c001a3b7:	b8 06 00 00 00       	mov    eax,0x6
c001a3bc:	85 f6                	test   esi,esi
c001a3be:	74 1c                	je     c001a3dc <ATA::write(unsigned long long, int, void*)+0x48>
c001a3c0:	50                   	push   eax
c001a3c1:	50                   	push   eax
c001a3c2:	6a 01                	push   0x1
c001a3c4:	56                   	push   esi
c001a3c5:	52                   	push   edx
c001a3c6:	53                   	push   ebx
c001a3c7:	51                   	push   ecx
c001a3c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3cc:	e8 fb fb ff ff       	call   c0019fcc <ATA::access(unsigned long long, int, void*, bool)>
c001a3d1:	83 c4 20             	add    esp,0x20
c001a3d4:	85 c0                	test   eax,eax
c001a3d6:	0f 95 c0             	setne  al
c001a3d9:	0f b6 c0             	movzx  eax,al
c001a3dc:	5b                   	pop    ebx
c001a3dd:	5e                   	pop    esi
c001a3de:	5f                   	pop    edi
c001a3df:	c3                   	ret    

c001a3e0 <ATA::detectCHS()>:
c001a3e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3e4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a3ea:	c1 e0 06             	shl    eax,0x6
c001a3ed:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a3f3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a3fd:	c7 44 24 04 14 f5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f514
c001a405:	e9 91 5e ff ff       	jmp    c001029b <KePanic(char const*)>

c001a40a <ATA::open(int, int, void*)>:
c001a40a:	53                   	push   ebx
c001a40b:	83 ec 08             	sub    esp,0x8
c001a40e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a412:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a41a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a420:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a426:	c1 e0 06             	shl    eax,0x6
c001a429:	01 d0                	add    eax,edx
c001a42b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a432:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a438:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a43f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a449:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a44f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a456:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a45d:	75 0c                	jne    c001a46b <ATA::open(int, int, void*)+0x61>
c001a45f:	83 ec 0c             	sub    esp,0xc
c001a462:	53                   	push   ebx
c001a463:	e8 78 ff ff ff       	call   c001a3e0 <ATA::detectCHS()>
c001a468:	83 c4 10             	add    esp,0x10
c001a46b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a471:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a477:	c1 e0 06             	shl    eax,0x6
c001a47a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a481:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a48b:	d1 e8                	shr    eax,1
c001a48d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a493:	6a 04                	push   0x4
c001a495:	6a 0c                	push   0xc
c001a497:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a49e:	50                   	push   eax
c001a49f:	52                   	push   edx
c001a4a0:	e8 17 ec ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4a5:	90                   	nop
c001a4a6:	90                   	nop
c001a4a7:	6a 00                	push   0x0
c001a4a9:	6a 0c                	push   0xc
c001a4ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4b2:	50                   	push   eax
c001a4b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4b9:	e8 fe eb ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4be:	83 c4 14             	add    esp,0x14
c001a4c1:	53                   	push   ebx
c001a4c2:	e8 c7 19 ff ff       	call   c000be8e <PhysicalDisk::startCache()>
c001a4c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4ca:	e8 77 2a ff ff       	call   c000cf46 <createPartitionsForDisk(PhysicalDisk*)>
c001a4cf:	31 c0                	xor    eax,eax
c001a4d1:	83 c4 18             	add    esp,0x18
c001a4d4:	5b                   	pop    ebx
c001a4d5:	c3                   	ret    

c001a4d6 <ATAPI::write(unsigned long long, int, void*)>:
c001a4d6:	b8 03 00 00 00       	mov    eax,0x3
c001a4db:	c3                   	ret    

c001a4dc <ATAPI::close(int, int, void*)>:
c001a4dc:	83 ec 0c             	sub    esp,0xc
c001a4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4e9:	85 c0                	test   eax,eax
c001a4eb:	74 0c                	je     c001a4f9 <ATAPI::close(int, int, void*)+0x1d>
c001a4ed:	83 ec 0c             	sub    esp,0xc
c001a4f0:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4f2:	50                   	push   eax
c001a4f3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a4f6:	83 c4 10             	add    esp,0x10
c001a4f9:	31 c0                	xor    eax,eax
c001a4fb:	83 c4 0c             	add    esp,0xc
c001a4fe:	c3                   	ret    
c001a4ff:	90                   	nop

c001a500 <ATAPI::ATAPI()>:
c001a500:	83 ec 0c             	sub    esp,0xc
c001a503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a507:	83 ec 04             	sub    esp,0x4
c001a50a:	68 00 08 00 00       	push   0x800
c001a50f:	68 5d f6 01 c0       	push   0xc001f65d
c001a514:	50                   	push   eax
c001a515:	e8 0c 19 ff ff       	call   c000be26 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a51a:	83 c4 10             	add    esp,0x10
c001a51d:	ba 78 f5 01 c0       	mov    edx,0xc001f578
c001a522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a526:	89 10                	mov    DWORD PTR [eax],edx
c001a528:	90                   	nop
c001a529:	83 c4 0c             	add    esp,0xc
c001a52c:	c3                   	ret    
c001a52d:	90                   	nop

c001a52e <ATAPI::readyForCommand()>:
c001a52e:	56                   	push   esi
c001a52f:	53                   	push   ebx
c001a530:	53                   	push   ebx
c001a531:	31 db                	xor    ebx,ebx
c001a533:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a537:	51                   	push   ecx
c001a538:	6a 0c                	push   0xc
c001a53a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a541:	50                   	push   eax
c001a542:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a548:	e8 2f ec ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c001a54d:	83 c4 10             	add    esp,0x10
c001a550:	a8 88                	test   al,0x88
c001a552:	74 25                	je     c001a579 <ATAPI::readyForCommand()+0x4b>
c001a554:	43                   	inc    ebx
c001a555:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a55b:	7e da                	jle    c001a537 <ATAPI::readyForCommand()+0x9>
c001a55d:	83 ec 0c             	sub    esp,0xc
c001a560:	68 5e 01 00 00       	push   0x15e
c001a565:	e8 26 96 ff ff       	call   c0013b90 <milliTenthSleep(unsigned int)>
c001a56a:	83 c4 10             	add    esp,0x10
c001a56d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a573:	75 c2                	jne    c001a537 <ATAPI::readyForCommand()+0x9>
c001a575:	31 c0                	xor    eax,eax
c001a577:	eb 02                	jmp    c001a57b <ATAPI::readyForCommand()+0x4d>
c001a579:	b0 01                	mov    al,0x1
c001a57b:	5a                   	pop    edx
c001a57c:	5b                   	pop    ebx
c001a57d:	5e                   	pop    esi
c001a57e:	c3                   	ret    
c001a57f:	90                   	nop

c001a580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a580:	55                   	push   ebp
c001a581:	57                   	push   edi
c001a582:	56                   	push   esi
c001a583:	53                   	push   ebx
c001a584:	83 ec 20             	sub    esp,0x20
c001a587:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a58b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a58f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a593:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a597:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a59b:	6a 01                	push   0x1
c001a59d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5a4:	50                   	push   eax
c001a5a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5ab:	e8 1a ed ff ff       	call   c00192ca <IDE::enableIRQs(unsigned char, bool)>
c001a5b0:	5e                   	pop    esi
c001a5b1:	58                   	pop    eax
c001a5b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5b9:	50                   	push   eax
c001a5ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5c0:	e8 d1 ea ff ff       	call   c0019096 <IDE::prepareInterrupt(unsigned char)>
c001a5c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a5c8:	e8 61 ff ff ff       	call   c001a52e <ATAPI::readyForCommand()>
c001a5cd:	83 c4 10             	add    esp,0x10
c001a5d0:	84 c0                	test   al,al
c001a5d2:	75 0a                	jne    c001a5de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a5d4:	bb 01 00 00 00       	mov    ebx,0x1
c001a5d9:	e9 57 02 00 00       	jmp    c001a835 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5de:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a5e4:	c1 e0 04             	shl    eax,0x4
c001a5e7:	0f b6 c0             	movzx  eax,al
c001a5ea:	50                   	push   eax
c001a5eb:	6a 06                	push   0x6
c001a5ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5f4:	50                   	push   eax
c001a5f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5fb:	e8 bc ea ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a600:	6a 00                	push   0x0
c001a602:	6a 01                	push   0x1
c001a604:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a60b:	50                   	push   eax
c001a60c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a612:	e8 a5 ea ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a617:	83 c4 20             	add    esp,0x20
c001a61a:	0f b6 c3             	movzx  eax,bl
c001a61d:	0f b6 df             	movzx  ebx,bh
c001a620:	50                   	push   eax
c001a621:	6a 04                	push   0x4
c001a623:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a62a:	50                   	push   eax
c001a62b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a631:	e8 86 ea ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a636:	53                   	push   ebx
c001a637:	6a 05                	push   0x5
c001a639:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a640:	50                   	push   eax
c001a641:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a647:	e8 70 ea ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a64c:	83 c4 20             	add    esp,0x20
c001a64f:	68 a0 00 00 00       	push   0xa0
c001a654:	6a 07                	push   0x7
c001a656:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a65d:	50                   	push   eax
c001a65e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a664:	e8 53 ea ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a669:	83 c4 0c             	add    esp,0xc
c001a66c:	6a 01                	push   0x1
c001a66e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a675:	50                   	push   eax
c001a676:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a67c:	e8 d9 f4 ff ff       	call   c0019b5a <IDE::polling(unsigned char, unsigned int)>
c001a681:	83 c4 10             	add    esp,0x10
c001a684:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a68a:	84 c0                	test   al,al
c001a68c:	74 23                	je     c001a6b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a68e:	0f b6 d8             	movzx  ebx,al
c001a691:	0f b6 d2             	movzx  edx,dl
c001a694:	53                   	push   ebx
c001a695:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a69c:	50                   	push   eax
c001a69d:	52                   	push   edx
c001a69e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6a4:	e8 01 f4 ff ff       	call   c0019aaa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a6a9:	83 c4 10             	add    esp,0x10
c001a6ac:	e9 84 01 00 00       	jmp    c001a835 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a6b1:	0f b6 d2             	movzx  edx,dl
c001a6b4:	53                   	push   ebx
c001a6b5:	53                   	push   ebx
c001a6b6:	52                   	push   edx
c001a6b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6bd:	e8 e8 e9 ff ff       	call   c00190aa <IDE::getBase(unsigned char)>
c001a6c2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a6c6:	b9 06 00 00 00       	mov    ecx,0x6
c001a6cb:	89 c2                	mov    edx,eax
c001a6cd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a6d0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a6d4:	83 c4 10             	add    esp,0x10
c001a6d7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6dd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6e4:	85 db                	test   ebx,ebx
c001a6e6:	0f 84 ec 00 00 00    	je     c001a7d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a6ec:	51                   	push   ecx
c001a6ed:	51                   	push   ecx
c001a6ee:	52                   	push   edx
c001a6ef:	50                   	push   eax
c001a6f0:	e8 35 eb ff ff       	call   c001922a <IDE::waitInterrupt(unsigned char)>
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	84 c0                	test   al,al
c001a6fa:	0f 84 d4 fe ff ff    	je     c001a5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a700:	56                   	push   esi
c001a701:	56                   	push   esi
c001a702:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a709:	50                   	push   eax
c001a70a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a710:	e8 81 e9 ff ff       	call   c0019096 <IDE::prepareInterrupt(unsigned char)>
c001a715:	83 c4 0c             	add    esp,0xc
c001a718:	6a 04                	push   0x4
c001a71a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a721:	50                   	push   eax
c001a722:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a728:	e8 4f ea ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c001a72d:	83 c4 0c             	add    esp,0xc
c001a730:	89 c6                	mov    esi,eax
c001a732:	6a 05                	push   0x5
c001a734:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a73b:	50                   	push   eax
c001a73c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a742:	e8 35 ea ff ff       	call   c001917c <IDE::read(unsigned char, unsigned char)>
c001a747:	89 f1                	mov    ecx,esi
c001a749:	0f b6 c0             	movzx  eax,al
c001a74c:	0f b6 f1             	movzx  esi,cl
c001a74f:	c1 e0 08             	shl    eax,0x8
c001a752:	09 c6                	or     esi,eax
c001a754:	d1 fe                	sar    esi,1
c001a756:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a75a:	83 c4 10             	add    esp,0x10
c001a75d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a762:	74 41                	je     c001a7a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a764:	31 c9                	xor    ecx,ecx
c001a766:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a76c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a773:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a777:	75 0a                	jne    c001a783 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a779:	01 c9                	add    ecx,ecx
c001a77b:	01 cd                	add    ebp,ecx
c001a77d:	4b                   	dec    ebx
c001a77e:	e9 54 ff ff ff       	jmp    c001a6d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a783:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a788:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a78c:	51                   	push   ecx
c001a78d:	51                   	push   ecx
c001a78e:	52                   	push   edx
c001a78f:	50                   	push   eax
c001a790:	e8 15 e9 ff ff       	call   c00190aa <IDE::getBase(unsigned char)>
c001a795:	89 c2                	mov    edx,eax
c001a797:	89 f0                	mov    eax,esi
c001a799:	66 ef                	out    dx,ax
c001a79b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a79f:	83 c4 10             	add    esp,0x10
c001a7a2:	41                   	inc    ecx
c001a7a3:	eb c1                	jmp    c001a766 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a7a5:	31 f6                	xor    esi,esi
c001a7a7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7ad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7b4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a7b8:	75 06                	jne    c001a7c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a7ba:	01 f6                	add    esi,esi
c001a7bc:	01 f5                	add    ebp,esi
c001a7be:	eb bd                	jmp    c001a77d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a7c0:	51                   	push   ecx
c001a7c1:	51                   	push   ecx
c001a7c2:	52                   	push   edx
c001a7c3:	50                   	push   eax
c001a7c4:	e8 e1 e8 ff ff       	call   c00190aa <IDE::getBase(unsigned char)>
c001a7c9:	89 c2                	mov    edx,eax
c001a7cb:	66 ed                	in     ax,dx
c001a7cd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a7d2:	83 c4 10             	add    esp,0x10
c001a7d5:	46                   	inc    esi
c001a7d6:	eb cf                	jmp    c001a7a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a7d8:	51                   	push   ecx
c001a7d9:	51                   	push   ecx
c001a7da:	52                   	push   edx
c001a7db:	50                   	push   eax
c001a7dc:	e8 49 ea ff ff       	call   c001922a <IDE::waitInterrupt(unsigned char)>
c001a7e1:	83 c4 10             	add    esp,0x10
c001a7e4:	84 c0                	test   al,al
c001a7e6:	0f 84 e8 fd ff ff    	je     c001a5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a7ec:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a7f1:	52                   	push   edx
c001a7f2:	52                   	push   edx
c001a7f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7fa:	50                   	push   eax
c001a7fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a801:	e8 90 e8 ff ff       	call   c0019096 <IDE::prepareInterrupt(unsigned char)>
c001a806:	83 c4 10             	add    esp,0x10
c001a809:	50                   	push   eax
c001a80a:	50                   	push   eax
c001a80b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a812:	50                   	push   eax
c001a813:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a819:	e8 8c e8 ff ff       	call   c00190aa <IDE::getBase(unsigned char)>
c001a81e:	8d 50 07             	lea    edx,[eax+0x7]
c001a821:	ec                   	in     al,dx
c001a822:	83 c4 10             	add    esp,0x10
c001a825:	a8 88                	test   al,0x88
c001a827:	74 0a                	je     c001a833 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a829:	4b                   	dec    ebx
c001a82a:	75 dd                	jne    c001a809 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a82c:	bb 02 00 00 00       	mov    ebx,0x2
c001a831:	eb 02                	jmp    c001a835 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a833:	31 db                	xor    ebx,ebx
c001a835:	83 c4 1c             	add    esp,0x1c
c001a838:	89 d8                	mov    eax,ebx
c001a83a:	5b                   	pop    ebx
c001a83b:	5e                   	pop    esi
c001a83c:	5f                   	pop    edi
c001a83d:	5d                   	pop    ebp
c001a83e:	c3                   	ret    
c001a83f:	90                   	nop

c001a840 <ATAPI::diskRemoved()>:
c001a840:	53                   	push   ebx
c001a841:	83 ec 14             	sub    esp,0x14
c001a844:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a848:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a84f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a855:	e8 6c 24 ff ff       	call   c000ccc6 <LogicalDisk::unmount()>
c001a85a:	58                   	pop    eax
c001a85b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a861:	e8 a6 2d ff ff       	call   c000d60c <VCache::writeWriteBuffer()>
c001a866:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a86c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a870:	83 c4 18             	add    esp,0x18
c001a873:	5b                   	pop    ebx
c001a874:	e9 83 2d ff ff       	jmp    c000d5fc <VCache::invalidateReadBuffer()>
c001a879:	90                   	nop

c001a87a <ATAPI::eject()>:
c001a87a:	57                   	push   edi
c001a87b:	b9 03 00 00 00       	mov    ecx,0x3
c001a880:	53                   	push   ebx
c001a881:	83 ec 14             	sub    esp,0x14
c001a884:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a888:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a88c:	fc                   	cld    
c001a88d:	31 c0                	xor    eax,eax
c001a88f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a891:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a896:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a89b:	50                   	push   eax
c001a89c:	50                   	push   eax
c001a89d:	6a 00                	push   0x0
c001a89f:	6a 00                	push   0x0
c001a8a1:	6a 00                	push   0x0
c001a8a3:	6a 02                	push   0x2
c001a8a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8a9:	50                   	push   eax
c001a8aa:	53                   	push   ebx
c001a8ab:	e8 d0 fc ff ff       	call   c001a580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8b0:	83 c4 14             	add    esp,0x14
c001a8b3:	53                   	push   ebx
c001a8b4:	e8 87 ff ff ff       	call   c001a840 <ATAPI::diskRemoved()>
c001a8b9:	83 c4 24             	add    esp,0x24
c001a8bc:	31 c0                	xor    eax,eax
c001a8be:	5b                   	pop    ebx
c001a8bf:	5f                   	pop    edi
c001a8c0:	c3                   	ret    
c001a8c1:	90                   	nop

c001a8c2 <ATAPI::diskInserted()>:
c001a8c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a8cd:	c3                   	ret    

c001a8ce <ATAPI::detectMedia()>:
c001a8ce:	56                   	push   esi
c001a8cf:	53                   	push   ebx
c001a8d0:	83 ec 28             	sub    esp,0x28
c001a8d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a8d7:	6a 0c                	push   0xc
c001a8d9:	6a 00                	push   0x0
c001a8db:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a8df:	56                   	push   esi
c001a8e0:	e8 eb 5b fe ff       	call   c00004d0 <memset>
c001a8e5:	58                   	pop    eax
c001a8e6:	5a                   	pop    edx
c001a8e7:	6a 00                	push   0x0
c001a8e9:	6a 00                	push   0x0
c001a8eb:	6a 00                	push   0x0
c001a8ed:	6a 00                	push   0x0
c001a8ef:	56                   	push   esi
c001a8f0:	53                   	push   ebx
c001a8f1:	e8 8a fc ff ff       	call   c001a580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8f6:	83 c4 1c             	add    esp,0x1c
c001a8f9:	6a 0c                	push   0xc
c001a8fb:	6a 00                	push   0x0
c001a8fd:	56                   	push   esi
c001a8fe:	e8 cd 5b fe ff       	call   c00004d0 <memset>
c001a903:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a908:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a90d:	59                   	pop    ecx
c001a90e:	58                   	pop    eax
c001a90f:	6a 01                	push   0x1
c001a911:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a915:	50                   	push   eax
c001a916:	6a 00                	push   0x0
c001a918:	6a 12                	push   0x12
c001a91a:	56                   	push   esi
c001a91b:	53                   	push   ebx
c001a91c:	e8 5f fc ff ff       	call   c001a580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a921:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a925:	83 c4 20             	add    esp,0x20
c001a928:	83 e0 7f             	and    eax,0x7f
c001a92b:	3c 70                	cmp    al,0x70
c001a92d:	74 15                	je     c001a944 <ATAPI::detectMedia()+0x76>
c001a92f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a936:	75 0c                	jne    c001a944 <ATAPI::detectMedia()+0x76>
c001a938:	83 ec 0c             	sub    esp,0xc
c001a93b:	53                   	push   ebx
c001a93c:	e8 81 ff ff ff       	call   c001a8c2 <ATAPI::diskInserted()>
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a948:	83 e0 0f             	and    eax,0xf
c001a94b:	3c 02                	cmp    al,0x2
c001a94d:	75 1b                	jne    c001a96a <ATAPI::detectMedia()+0x9c>
c001a94f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a954:	75 2d                	jne    c001a983 <ATAPI::detectMedia()+0xb5>
c001a956:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a95d:	74 24                	je     c001a983 <ATAPI::detectMedia()+0xb5>
c001a95f:	83 ec 0c             	sub    esp,0xc
c001a962:	53                   	push   ebx
c001a963:	e8 d8 fe ff ff       	call   c001a840 <ATAPI::diskRemoved()>
c001a968:	eb 16                	jmp    c001a980 <ATAPI::detectMedia()+0xb2>
c001a96a:	84 c0                	test   al,al
c001a96c:	75 15                	jne    c001a983 <ATAPI::detectMedia()+0xb5>
c001a96e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a975:	75 0c                	jne    c001a983 <ATAPI::detectMedia()+0xb5>
c001a977:	83 ec 0c             	sub    esp,0xc
c001a97a:	53                   	push   ebx
c001a97b:	e8 42 ff ff ff       	call   c001a8c2 <ATAPI::diskInserted()>
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	83 c4 24             	add    esp,0x24
c001a986:	5b                   	pop    ebx
c001a987:	5e                   	pop    esi
c001a988:	c3                   	ret    
c001a989:	90                   	nop

c001a98a <ATAPI::open(int, int, void*)>:
c001a98a:	56                   	push   esi
c001a98b:	53                   	push   ebx
c001a98c:	50                   	push   eax
c001a98d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a991:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a995:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a999:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a99f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a9a5:	c1 e0 06             	shl    eax,0x6
c001a9a8:	01 d0                	add    eax,edx
c001a9aa:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a9b1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a9b7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a9be:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a9c8:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a9ce:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a9d5:	6a 04                	push   0x4
c001a9d7:	6a 0c                	push   0xc
c001a9d9:	51                   	push   ecx
c001a9da:	52                   	push   edx
c001a9db:	e8 dc e6 ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9e0:	90                   	nop
c001a9e1:	90                   	nop
c001a9e2:	6a 00                	push   0x0
c001a9e4:	6a 0c                	push   0xc
c001a9e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a9ed:	50                   	push   eax
c001a9ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9f4:	e8 c3 e6 ff ff       	call   c00190bc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9f9:	83 c4 14             	add    esp,0x14
c001a9fc:	68 74 01 00 00       	push   0x174
c001aa01:	e8 b3 cd fe ff       	call   c00077b9 <malloc>
c001aa06:	83 c4 0c             	add    esp,0xc
c001aa09:	89 c6                	mov    esi,eax
c001aa0b:	6a 00                	push   0x0
c001aa0d:	68 ff ff ff 7f       	push   0x7fffffff
c001aa12:	6a 00                	push   0x0
c001aa14:	6a 00                	push   0x0
c001aa16:	53                   	push   ebx
c001aa17:	68 14 f7 01 c0       	push   0xc001f714
c001aa1c:	50                   	push   eax
c001aa1d:	e8 f0 20 ff ff       	call   c000cb12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa22:	83 c4 14             	add    esp,0x14
c001aa25:	56                   	push   esi
c001aa26:	e8 9d 21 ff ff       	call   c000cbc8 <LogicalDisk::assignDriveLetter()>
c001aa2b:	5a                   	pop    edx
c001aa2c:	0f be c0             	movsx  eax,al
c001aa2f:	59                   	pop    ecx
c001aa30:	50                   	push   eax
c001aa31:	68 60 f5 01 c0       	push   0xc001f560
c001aa36:	e8 de fb fe ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001aa3b:	58                   	pop    eax
c001aa3c:	5a                   	pop    edx
c001aa3d:	56                   	push   esi
c001aa3e:	53                   	push   ebx
c001aa3f:	e8 14 10 ff ff       	call   c000ba58 <Device::addChild(Device*)>
c001aa44:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa4d:	e8 3c 14 ff ff       	call   c000be8e <PhysicalDisk::startCache()>
c001aa52:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa5c:	e8 6d fe ff ff       	call   c001a8ce <ATAPI::detectMedia()>
c001aa61:	83 c4 14             	add    esp,0x14
c001aa64:	31 c0                	xor    eax,eax
c001aa66:	5b                   	pop    ebx
c001aa67:	5e                   	pop    esi
c001aa68:	c3                   	ret    
c001aa69:	90                   	nop

c001aa6a <ATAPI::read(unsigned long long, int, void*)>:
c001aa6a:	55                   	push   ebp
c001aa6b:	57                   	push   edi
c001aa6c:	56                   	push   esi
c001aa6d:	53                   	push   ebx
c001aa6e:	83 ec 1c             	sub    esp,0x1c
c001aa71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa75:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa79:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa7d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa84:	74 3c                	je     c001aac2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa86:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa8a:	b9 03 00 00 00       	mov    ecx,0x3
c001aa8f:	fc                   	cld    
c001aa90:	31 c0                	xor    eax,eax
c001aa92:	0f ce                	bswap  esi
c001aa94:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa96:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa9b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa9f:	89 e8                	mov    eax,ebp
c001aaa1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aaa5:	50                   	push   eax
c001aaa6:	50                   	push   eax
c001aaa7:	55                   	push   ebp
c001aaa8:	c1 e5 0b             	shl    ebp,0xb
c001aaab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aaaf:	6a 00                	push   0x0
c001aab1:	55                   	push   ebp
c001aab2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aab6:	50                   	push   eax
c001aab7:	53                   	push   ebx
c001aab8:	e8 c3 fa ff ff       	call   c001a580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aabd:	83 c4 20             	add    esp,0x20
c001aac0:	eb 1a                	jmp    c001aadc <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aac2:	83 ec 0c             	sub    esp,0xc
c001aac5:	53                   	push   ebx
c001aac6:	e8 03 fe ff ff       	call   c001a8ce <ATAPI::detectMedia()>
c001aacb:	83 c4 10             	add    esp,0x10
c001aace:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aad5:	75 af                	jne    c001aa86 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aad7:	b8 02 00 00 00       	mov    eax,0x2
c001aadc:	83 c4 1c             	add    esp,0x1c
c001aadf:	5b                   	pop    ebx
c001aae0:	5e                   	pop    esi
c001aae1:	5f                   	pop    edi
c001aae2:	5d                   	pop    ebp
c001aae3:	c3                   	ret    

c001aae4 <SATA::close(int, int, void*)>:
c001aae4:	83 ec 0c             	sub    esp,0xc
c001aae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaeb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aaf1:	85 c0                	test   eax,eax
c001aaf3:	74 0c                	je     c001ab01 <SATA::close(int, int, void*)+0x1d>
c001aaf5:	83 ec 0c             	sub    esp,0xc
c001aaf8:	8b 10                	mov    edx,DWORD PTR [eax]
c001aafa:	50                   	push   eax
c001aafb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aafe:	83 c4 10             	add    esp,0x10
c001ab01:	31 c0                	xor    eax,eax
c001ab03:	83 c4 0c             	add    esp,0xc
c001ab06:	c3                   	ret    
c001ab07:	90                   	nop

c001ab08 <SATA::powerSaving(PowerSavingLevel)>:
c001ab08:	c3                   	ret    
c001ab09:	90                   	nop

c001ab0a <SATA::open(int, int, void*)>:
c001ab0a:	56                   	push   esi
c001ab0b:	53                   	push   ebx
c001ab0c:	50                   	push   eax
c001ab0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab15:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab1f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab25:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab33:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab3d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab43:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab4a:	e8 46 cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ab4f:	89 c6                	mov    esi,eax
c001ab51:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab57:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab5d:	e8 33 cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ab62:	39 c6                	cmp    esi,eax
c001ab64:	74 10                	je     c001ab76 <SATA::open(int, int, void*)+0x6c>
c001ab66:	83 ec 0c             	sub    esp,0xc
c001ab69:	68 a8 f5 01 c0       	push   0xc001f5a8
c001ab6e:	e8 28 57 ff ff       	call   c001029b <KePanic(char const*)>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	83 ec 0c             	sub    esp,0xc
c001ab79:	6a 02                	push   0x2
c001ab7b:	e8 05 e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001ab80:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab86:	6a 03                	push   0x3
c001ab88:	50                   	push   eax
c001ab89:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ab8f:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001ab95:	e8 5e ed fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab9a:	83 c4 14             	add    esp,0x14
c001ab9d:	53                   	push   ebx
c001ab9e:	e8 eb 12 ff ff       	call   c000be8e <PhysicalDisk::startCache()>
c001aba3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aba6:	e8 9b 23 ff ff       	call   c000cf46 <createPartitionsForDisk(PhysicalDisk*)>
c001abab:	83 c4 14             	add    esp,0x14
c001abae:	31 c0                	xor    eax,eax
c001abb0:	5b                   	pop    ebx
c001abb1:	5e                   	pop    esi
c001abb2:	c3                   	ret    
c001abb3:	90                   	nop

c001abb4 <SATA::SATA()>:
c001abb4:	83 ec 0c             	sub    esp,0xc
c001abb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbb:	83 ec 04             	sub    esp,0x4
c001abbe:	68 00 02 00 00       	push   0x200
c001abc3:	68 bc f5 01 c0       	push   0xc001f5bc
c001abc8:	50                   	push   eax
c001abc9:	e8 58 12 ff ff       	call   c000be26 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001abce:	83 c4 10             	add    esp,0x10
c001abd1:	ba 2c f6 01 c0       	mov    edx,0xc001f62c
c001abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abda:	89 10                	mov    DWORD PTR [eax],edx
c001abdc:	90                   	nop
c001abdd:	83 c4 0c             	add    esp,0xc
c001abe0:	c3                   	ret    
c001abe1:	90                   	nop

c001abe2 <SATA::access(unsigned long long, int, void*, bool)>:
c001abe2:	55                   	push   ebp
c001abe3:	57                   	push   edi
c001abe4:	56                   	push   esi
c001abe5:	53                   	push   ebx
c001abe6:	83 ec 2c             	sub    esp,0x2c
c001abe9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001abed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001abf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abf5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001abf9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001abfd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac06:	7e 10                	jle    c001ac18 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac08:	83 ec 0c             	sub    esp,0xc
c001ac0b:	68 cc f5 01 c0       	push   0xc001f5cc
c001ac10:	e8 86 56 ff ff       	call   c001029b <KePanic(char const*)>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac1e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac2e:	89 d0                	mov    eax,edx
c001ac30:	c1 e0 07             	shl    eax,0x7
c001ac33:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac37:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac41:	51                   	push   ecx
c001ac42:	8d 42 02             	lea    eax,[edx+0x2]
c001ac45:	51                   	push   ecx
c001ac46:	c1 e0 07             	shl    eax,0x7
c001ac49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac4d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac51:	50                   	push   eax
c001ac52:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac58:	e8 e7 ef ff ff       	call   c0019c44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac61:	83 c4 10             	add    esp,0x10
c001ac64:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac6d:	0f 84 4f 01 00 00    	je     c001adc2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac73:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac77:	c1 e0 09             	shl    eax,0x9
c001ac7a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac83:	74 0e                	je     c001ac93 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac85:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac8b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ac8f:	89 c1                	mov    ecx,eax
c001ac91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac97:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac9d:	8d 42 02             	lea    eax,[edx+0x2]
c001aca0:	c1 e0 07             	shl    eax,0x7
c001aca3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aca7:	8b 00                	mov    eax,DWORD PTR [eax]
c001aca9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001acaf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001acb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acb9:	c1 e1 05             	shl    ecx,0x5
c001acbc:	01 c8                	add    eax,ecx
c001acbe:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001acc2:	83 e1 01             	and    ecx,0x1
c001acc5:	89 ce                	mov    esi,ecx
c001acc7:	8a 08                	mov    cl,BYTE PTR [eax]
c001acc9:	c1 e6 06             	shl    esi,0x6
c001accc:	83 e1 bf             	and    ecx,0xffffffbf
c001accf:	09 f1                	or     ecx,esi
c001acd1:	88 08                	mov    BYTE PTR [eax],cl
c001acd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001acd5:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001acdb:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ace1:	89 08                	mov    DWORD PTR [eax],ecx
c001ace3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ace9:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001acef:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001acf5:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001acf8:	50                   	push   eax
c001acf9:	68 90 00 00 00       	push   0x90
c001acfe:	6a 00                	push   0x0
c001ad00:	56                   	push   esi
c001ad01:	e8 ca 57 fe ff       	call   c00004d0 <memset>
c001ad06:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad0c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad10:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad16:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad1e:	83 c4 10             	add    esp,0x10
c001ad21:	48                   	dec    eax
c001ad22:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad27:	89 c1                	mov    ecx,eax
c001ad29:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad2f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad34:	09 c8                	or     eax,ecx
c001ad36:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad3c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad3f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad46:	66 25 00 7f          	and    ax,0x7f00
c001ad4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad4e:	66 0d 27 80          	or     ax,0x8027
c001ad52:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad57:	66 89 06             	mov    WORD PTR [esi],ax
c001ad5a:	19 c0                	sbb    eax,eax
c001ad5c:	83 e0 f0             	and    eax,0xfffffff0
c001ad5f:	83 c0 35             	add    eax,0x35
c001ad62:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad65:	89 e8                	mov    eax,ebp
c001ad67:	c1 e8 10             	shr    eax,0x10
c001ad6a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad6d:	89 e8                	mov    eax,ebp
c001ad6f:	c1 e8 18             	shr    eax,0x18
c001ad72:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad75:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad79:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad80:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad87:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad8b:	89 d6                	mov    esi,edx
c001ad8d:	31 c0                	xor    eax,eax
c001ad8f:	c1 e6 07             	shl    esi,0x7
c001ad92:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad96:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad9c:	80 e1 88             	and    cl,0x88
c001ad9f:	74 0a                	je     c001adab <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ada1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ada6:	74 0a                	je     c001adb2 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ada8:	40                   	inc    eax
c001ada9:	eb eb                	jmp    c001ad96 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001adab:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001adb0:	75 17                	jne    c001adc9 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001adb2:	83 ec 0c             	sub    esp,0xc
c001adb5:	68 05 f6 01 c0       	push   0xc001f605
c001adba:	e8 5a f8 fe ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001adbf:	83 c4 10             	add    esp,0x10
c001adc2:	b8 01 00 00 00       	mov    eax,0x1
c001adc7:	eb 5d                	jmp    c001ae26 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001adc9:	b8 01 00 00 00       	mov    eax,0x1
c001adce:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001add2:	c1 e2 07             	shl    edx,0x7
c001add5:	d3 e0                	shl    eax,cl
c001add7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001addb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ade1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ade7:	85 c8                	test   eax,ecx
c001ade9:	74 16                	je     c001ae01 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001adeb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001adf1:	0f ba e1 1e          	bt     ecx,0x1e
c001adf5:	73 ea                	jae    c001ade1 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001adf7:	83 ec 0c             	sub    esp,0xc
c001adfa:	68 13 f6 01 c0       	push   0xc001f613
c001adff:	eb b9                	jmp    c001adba <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae01:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae07:	0f ba e0 1e          	bt     eax,0x1e
c001ae0b:	72 b5                	jb     c001adc2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae0d:	31 c0                	xor    eax,eax
c001ae0f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae14:	75 10                	jne    c001ae26 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae16:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae1c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae20:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae26:	83 c4 2c             	add    esp,0x2c
c001ae29:	5b                   	pop    ebx
c001ae2a:	5e                   	pop    esi
c001ae2b:	5f                   	pop    edi
c001ae2c:	5d                   	pop    ebp
c001ae2d:	c3                   	ret    

c001ae2e <SATA::read(unsigned long long, int, void*)>:
c001ae2e:	57                   	push   edi
c001ae2f:	b8 04 00 00 00       	mov    eax,0x4
c001ae34:	56                   	push   esi
c001ae35:	53                   	push   ebx
c001ae36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae3e:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae45:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae49:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae4f:	77 25                	ja     c001ae76 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae51:	b8 06 00 00 00       	mov    eax,0x6
c001ae56:	85 f6                	test   esi,esi
c001ae58:	74 1c                	je     c001ae76 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae5a:	50                   	push   eax
c001ae5b:	50                   	push   eax
c001ae5c:	6a 00                	push   0x0
c001ae5e:	56                   	push   esi
c001ae5f:	52                   	push   edx
c001ae60:	53                   	push   ebx
c001ae61:	51                   	push   ecx
c001ae62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae66:	e8 77 fd ff ff       	call   c001abe2 <SATA::access(unsigned long long, int, void*, bool)>
c001ae6b:	83 c4 20             	add    esp,0x20
c001ae6e:	85 c0                	test   eax,eax
c001ae70:	0f 95 c0             	setne  al
c001ae73:	0f b6 c0             	movzx  eax,al
c001ae76:	5b                   	pop    ebx
c001ae77:	5e                   	pop    esi
c001ae78:	5f                   	pop    edi
c001ae79:	c3                   	ret    

c001ae7a <SATA::write(unsigned long long, int, void*)>:
c001ae7a:	55                   	push   ebp
c001ae7b:	b8 04 00 00 00       	mov    eax,0x4
c001ae80:	57                   	push   edi
c001ae81:	56                   	push   esi
c001ae82:	53                   	push   ebx
c001ae83:	83 ec 0c             	sub    esp,0xc
c001ae86:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae8e:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ae91:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae95:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae99:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae9f:	77 3d                	ja     c001aede <SATA::write(unsigned long long, int, void*)+0x64>
c001aea1:	b8 06 00 00 00       	mov    eax,0x6
c001aea6:	85 ed                	test   ebp,ebp
c001aea8:	74 34                	je     c001aede <SATA::write(unsigned long long, int, void*)+0x64>
c001aeaa:	c1 e3 09             	shl    ebx,0x9
c001aead:	01 eb                	add    ebx,ebp
c001aeaf:	89 d6                	mov    esi,edx
c001aeb1:	89 cf                	mov    edi,ecx
c001aeb3:	83 c6 01             	add    esi,0x1
c001aeb6:	83 d7 00             	adc    edi,0x0
c001aeb9:	50                   	push   eax
c001aeba:	50                   	push   eax
c001aebb:	6a 01                	push   0x1
c001aebd:	55                   	push   ebp
c001aebe:	81 c5 00 02 00 00    	add    ebp,0x200
c001aec4:	6a 01                	push   0x1
c001aec6:	51                   	push   ecx
c001aec7:	52                   	push   edx
c001aec8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aecc:	e8 11 fd ff ff       	call   c001abe2 <SATA::access(unsigned long long, int, void*, bool)>
c001aed1:	83 c4 20             	add    esp,0x20
c001aed4:	89 f2                	mov    edx,esi
c001aed6:	89 f9                	mov    ecx,edi
c001aed8:	39 dd                	cmp    ebp,ebx
c001aeda:	75 d3                	jne    c001aeaf <SATA::write(unsigned long long, int, void*)+0x35>
c001aedc:	31 c0                	xor    eax,eax
c001aede:	83 c4 0c             	add    esp,0xc
c001aee1:	5b                   	pop    ebx
c001aee2:	5e                   	pop    esi
c001aee3:	5f                   	pop    edi
c001aee4:	5d                   	pop    ebp
c001aee5:	c3                   	ret    

c001aee6 <SATAPI::write(unsigned long long, int, void*)>:
c001aee6:	b8 03 00 00 00       	mov    eax,0x3
c001aeeb:	c3                   	ret    

c001aeec <SATAPI::close(int, int, void*)>:
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aef9:	85 c0                	test   eax,eax
c001aefb:	74 0c                	je     c001af09 <SATAPI::close(int, int, void*)+0x1d>
c001aefd:	83 ec 0c             	sub    esp,0xc
c001af00:	8b 10                	mov    edx,DWORD PTR [eax]
c001af02:	50                   	push   eax
c001af03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af06:	83 c4 10             	add    esp,0x10
c001af09:	31 c0                	xor    eax,eax
c001af0b:	83 c4 0c             	add    esp,0xc
c001af0e:	c3                   	ret    
c001af0f:	90                   	nop

c001af10 <SATAPI::SATAPI()>:
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af17:	83 ec 04             	sub    esp,0x4
c001af1a:	68 00 08 00 00       	push   0x800
c001af1f:	68 5c f6 01 c0       	push   0xc001f65c
c001af24:	50                   	push   eax
c001af25:	e8 fc 0e ff ff       	call   c000be26 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af2a:	83 c4 10             	add    esp,0x10
c001af2d:	ba 64 f7 01 c0       	mov    edx,0xc001f764
c001af32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af36:	89 10                	mov    DWORD PTR [eax],edx
c001af38:	90                   	nop
c001af39:	83 c4 0c             	add    esp,0xc
c001af3c:	c3                   	ret    
c001af3d:	90                   	nop

c001af3e <SATAPI::diskRemoved()>:
c001af3e:	c3                   	ret    
c001af3f:	90                   	nop

c001af40 <SATAPI::diskInserted()>:
c001af40:	83 ec 18             	sub    esp,0x18
c001af43:	68 68 f6 01 c0       	push   0xc001f668
c001af48:	e8 cc f6 fe ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001af4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af51:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001af58:	83 c4 1c             	add    esp,0x1c
c001af5b:	c3                   	ret    

c001af5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001af5c:	55                   	push   ebp
c001af5d:	57                   	push   edi
c001af5e:	56                   	push   esi
c001af5f:	53                   	push   ebx
c001af60:	83 ec 38             	sub    esp,0x38
c001af63:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af67:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af6b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af6f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af73:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af77:	68 80 f6 01 c0       	push   0xc001f680
c001af7c:	e8 98 f6 fe ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001af81:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001af87:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af91:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af9b:	83 c0 02             	add    eax,0x2
c001af9e:	c1 e0 07             	shl    eax,0x7
c001afa1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001afa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001afa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afad:	c1 e0 07             	shl    eax,0x7
c001afb0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001afb4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afb8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001afc2:	58                   	pop    eax
c001afc3:	5a                   	pop    edx
c001afc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001afc8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001afce:	e8 71 ec ff ff       	call   c0019c44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001afd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001afd7:	83 c4 10             	add    esp,0x10
c001afda:	b8 01 00 00 00       	mov    eax,0x1
c001afdf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001afe4:	0f 84 49 02 00 00    	je     c001b233 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001afea:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aff4:	8b 00                	mov    eax,DWORD PTR [eax]
c001aff6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001affc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b002:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b006:	c1 e1 05             	shl    ecx,0x5
c001b009:	01 c8                	add    eax,ecx
c001b00b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b00d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b013:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b019:	89 08                	mov    DWORD PTR [eax],ecx
c001b01b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b021:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b027:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b02d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b030:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b033:	50                   	push   eax
c001b034:	68 90 00 00 00       	push   0x90
c001b039:	6a 00                	push   0x0
c001b03b:	53                   	push   ebx
c001b03c:	e8 8f 54 fe ff       	call   c00004d0 <memset>
c001b041:	b9 0c 00 00 00       	mov    ecx,0xc
c001b046:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b04a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b04c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b052:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b056:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b05c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b060:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b064:	48                   	dec    eax
c001b065:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b06a:	89 c1                	mov    ecx,eax
c001b06c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b072:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b077:	09 c8                	or     eax,ecx
c001b079:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b07f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b082:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b089:	66 25 00 7f          	and    ax,0x7f00
c001b08d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b091:	66 0d 27 80          	or     ax,0x8027
c001b095:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b099:	66 89 03             	mov    WORD PTR [ebx],ax
c001b09c:	89 d0                	mov    eax,edx
c001b09e:	c1 ea 18             	shr    edx,0x18
c001b0a1:	c1 e8 10             	shr    eax,0x10
c001b0a4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b0a7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b0aa:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b0ae:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b0b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b0b5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b0b8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b0bc:	83 c4 10             	add    esp,0x10
c001b0bf:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b0c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0c7:	31 c0                	xor    eax,eax
c001b0c9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b0cf:	80 e1 88             	and    cl,0x88
c001b0d2:	74 0a                	je     c001b0de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b0d4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0d9:	74 0a                	je     c001b0e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b0db:	40                   	inc    eax
c001b0dc:	eb eb                	jmp    c001b0c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b0de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0e3:	75 43                	jne    c001b128 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b0e5:	83 ec 0c             	sub    esp,0xc
c001b0e8:	68 9a f6 01 c0       	push   0xc001f69a
c001b0ed:	e8 27 f5 fe ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001b0f2:	58                   	pop    eax
c001b0f3:	5a                   	pop    edx
c001b0f4:	68 af f6 01 c0       	push   0xc001f6af
c001b0f9:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b0ff:	e8 32 d6 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b104:	59                   	pop    ecx
c001b105:	5b                   	pop    ebx
c001b106:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b10a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b110:	e8 c9 eb ff ff       	call   c0019cde <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b115:	5e                   	pop    esi
c001b116:	5f                   	pop    edi
c001b117:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b11b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b121:	e8 98 eb ff ff       	call   c0019cbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b126:	eb 48                	jmp    c001b170 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b128:	be 01 00 00 00       	mov    esi,0x1
c001b12d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b131:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b135:	d3 e6                	shl    esi,cl
c001b137:	c1 e7 07             	shl    edi,0x7
c001b13a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b140:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b145:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b149:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b14f:	85 c6                	test   esi,eax
c001b151:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b157:	0f 84 a3 00 00 00    	je     c001b200 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b15d:	0f ba e0 1e          	bt     eax,0x1e
c001b161:	73 1a                	jae    c001b17d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b163:	83 ec 0c             	sub    esp,0xc
c001b166:	68 c1 f6 01 c0       	push   0xc001f6c1
c001b16b:	e8 a9 f4 fe ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	b8 01 00 00 00       	mov    eax,0x1
c001b178:	e9 b6 00 00 00       	jmp    c001b233 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b17d:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b183:	83 f8 0d             	cmp    eax,0xd
c001b186:	77 0a                	ja     c001b192 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b188:	83 ec 0c             	sub    esp,0xc
c001b18b:	68 c8 00 00 00       	push   0xc8
c001b190:	eb 28                	jmp    c001b1ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b192:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b198:	83 f8 0d             	cmp    eax,0xd
c001b19b:	77 0a                	ja     c001b1a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b19d:	83 ec 0c             	sub    esp,0xc
c001b1a0:	68 58 02 00 00       	push   0x258
c001b1a5:	eb 13                	jmp    c001b1ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b1a7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b1ad:	83 f8 06             	cmp    eax,0x6
c001b1b0:	77 10                	ja     c001b1c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b1b2:	83 ec 0c             	sub    esp,0xc
c001b1b5:	68 dc 05 00 00       	push   0x5dc
c001b1ba:	e8 d1 89 ff ff       	call   c0013b90 <milliTenthSleep(unsigned int)>
c001b1bf:	83 c4 10             	add    esp,0x10
c001b1c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b1c6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b1c9:	75 06                	jne    c001b1d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b1cb:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b1cf:	74 15                	je     c001b1e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b1d1:	83 fb 06             	cmp    ebx,0x6
c001b1d4:	77 10                	ja     c001b1e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b1d6:	83 ec 0c             	sub    esp,0xc
c001b1d9:	68 c4 09 00 00       	push   0x9c4
c001b1de:	e8 ad 89 ff ff       	call   c0013b90 <milliTenthSleep(unsigned int)>
c001b1e3:	83 c4 10             	add    esp,0x10
c001b1e6:	43                   	inc    ebx
c001b1e7:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b1ed:	0f 85 56 ff ff ff    	jne    c001b149 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b1f3:	83 ec 0c             	sub    esp,0xc
c001b1f6:	68 d4 f6 01 c0       	push   0xc001f6d4
c001b1fb:	e9 6b ff ff ff       	jmp    c001b16b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b200:	0f ba e0 1e          	bt     eax,0x1e
c001b204:	73 0d                	jae    c001b213 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b206:	83 ec 0c             	sub    esp,0xc
c001b209:	68 e8 f6 01 c0       	push   0xc001f6e8
c001b20e:	e9 58 ff ff ff       	jmp    c001b16b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b213:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b218:	74 17                	je     c001b231 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b21a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b21f:	74 10                	je     c001b231 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b221:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b227:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b22b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b22f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b231:	31 c0                	xor    eax,eax
c001b233:	83 c4 2c             	add    esp,0x2c
c001b236:	5b                   	pop    ebx
c001b237:	5e                   	pop    esi
c001b238:	5f                   	pop    edi
c001b239:	5d                   	pop    ebp
c001b23a:	c3                   	ret    
c001b23b:	90                   	nop

c001b23c <SATAPI::eject()>:
c001b23c:	57                   	push   edi
c001b23d:	b9 03 00 00 00       	mov    ecx,0x3
c001b242:	83 ec 18             	sub    esp,0x18
c001b245:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b249:	fc                   	cld    
c001b24a:	31 c0                	xor    eax,eax
c001b24c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b24e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b253:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b258:	50                   	push   eax
c001b259:	6a 00                	push   0x0
c001b25b:	6a 00                	push   0x0
c001b25d:	6a 00                	push   0x0
c001b25f:	6a 00                	push   0x0
c001b261:	6a 02                	push   0x2
c001b263:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b267:	50                   	push   eax
c001b268:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b26c:	e8 eb fc ff ff       	call   c001af5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b271:	31 c0                	xor    eax,eax
c001b273:	83 c4 38             	add    esp,0x38
c001b276:	5f                   	pop    edi
c001b277:	c3                   	ret    

c001b278 <SATAPI::detectMedia()>:
c001b278:	53                   	push   ebx
c001b279:	83 ec 14             	sub    esp,0x14
c001b27c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b280:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b286:	e8 81 23 ff ff       	call   c000d60c <VCache::writeWriteBuffer()>
c001b28b:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b291:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b295:	83 c4 18             	add    esp,0x18
c001b298:	5b                   	pop    ebx
c001b299:	e9 5e 23 ff ff       	jmp    c000d5fc <VCache::invalidateReadBuffer()>

c001b29e <SATAPI::open(int, int, void*)>:
c001b29e:	56                   	push   esi
c001b29f:	53                   	push   ebx
c001b2a0:	51                   	push   ecx
c001b2a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2a9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b2b3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b2b9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b2c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2c7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b2d1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b2d7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b2de:	e8 b2 c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b2e3:	89 c6                	mov    esi,eax
c001b2e5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b2eb:	81 c6 00 10 00 00    	add    esi,0x1000
c001b2f1:	e8 9f c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b2f6:	39 c6                	cmp    esi,eax
c001b2f8:	74 10                	je     c001b30a <SATAPI::open(int, int, void*)+0x6c>
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	68 fd f6 01 c0       	push   0xc001f6fd
c001b302:	e8 94 4f ff ff       	call   c001029b <KePanic(char const*)>
c001b307:	83 c4 10             	add    esp,0x10
c001b30a:	83 ec 0c             	sub    esp,0xc
c001b30d:	6a 02                	push   0x2
c001b30f:	e8 71 df fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b314:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b31a:	6a 03                	push   0x3
c001b31c:	50                   	push   eax
c001b31d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b323:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b329:	e8 ca e5 fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b32e:	83 c4 14             	add    esp,0x14
c001b331:	68 74 01 00 00       	push   0x174
c001b336:	e8 7e c4 fe ff       	call   c00077b9 <malloc>
c001b33b:	83 c4 0c             	add    esp,0xc
c001b33e:	89 c6                	mov    esi,eax
c001b340:	6a 00                	push   0x0
c001b342:	68 ff ff ff 7f       	push   0x7fffffff
c001b347:	6a 00                	push   0x0
c001b349:	6a 00                	push   0x0
c001b34b:	53                   	push   ebx
c001b34c:	68 13 f7 01 c0       	push   0xc001f713
c001b351:	50                   	push   eax
c001b352:	e8 bb 17 ff ff       	call   c000cb12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b357:	83 c4 14             	add    esp,0x14
c001b35a:	56                   	push   esi
c001b35b:	e8 68 18 ff ff       	call   c000cbc8 <LogicalDisk::assignDriveLetter()>
c001b360:	5a                   	pop    edx
c001b361:	0f be c0             	movsx  eax,al
c001b364:	59                   	pop    ecx
c001b365:	50                   	push   eax
c001b366:	68 60 f5 01 c0       	push   0xc001f560
c001b36b:	e8 a9 f2 fe ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001b370:	58                   	pop    eax
c001b371:	5a                   	pop    edx
c001b372:	56                   	push   esi
c001b373:	53                   	push   ebx
c001b374:	e8 df 06 ff ff       	call   c000ba58 <Device::addChild(Device*)>
c001b379:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b37f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b382:	e8 07 0b ff ff       	call   c000be8e <PhysicalDisk::startCache()>
c001b387:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b38e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b391:	e8 e2 fe ff ff       	call   c001b278 <SATAPI::detectMedia()>
c001b396:	83 c4 14             	add    esp,0x14
c001b399:	31 c0                	xor    eax,eax
c001b39b:	5b                   	pop    ebx
c001b39c:	5e                   	pop    esi
c001b39d:	c3                   	ret    

c001b39e <SATAPI::read(unsigned long long, int, void*)>:
c001b39e:	57                   	push   edi
c001b39f:	56                   	push   esi
c001b3a0:	53                   	push   ebx
c001b3a1:	83 ec 3c             	sub    esp,0x3c
c001b3a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b3a8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b3ac:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b3b0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b3b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b3bc:	68 21 f7 01 c0       	push   0xc001f721
c001b3c1:	e8 53 f2 fe ff       	call   c000a619 <Dbg::kprintf(char const*, ...)>
c001b3c6:	83 c4 10             	add    esp,0x10
c001b3c9:	83 fe 04             	cmp    esi,0x4
c001b3cc:	7e 10                	jle    c001b3de <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b3ce:	83 ec 0c             	sub    esp,0xc
c001b3d1:	68 32 f7 01 c0       	push   0xc001f732
c001b3d6:	e8 c0 4e ff ff       	call   c001029b <KePanic(char const*)>
c001b3db:	83 c4 10             	add    esp,0x10
c001b3de:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b3e4:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b3ea:	51                   	push   ecx
c001b3eb:	50                   	push   eax
c001b3ec:	83 c0 02             	add    eax,0x2
c001b3ef:	c1 e0 07             	shl    eax,0x7
c001b3f2:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b3f8:	50                   	push   eax
c001b3f9:	52                   	push   edx
c001b3fa:	e8 09 e9 ff ff       	call   c0019d08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b3ff:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b403:	b9 03 00 00 00       	mov    ecx,0x3
c001b408:	fc                   	cld    
c001b409:	31 c0                	xor    eax,eax
c001b40b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b40d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b412:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b417:	83 c4 0c             	add    esp,0xc
c001b41a:	6a 00                	push   0x0
c001b41c:	6a 00                	push   0x0
c001b41e:	6a 00                	push   0x0
c001b420:	6a 00                	push   0x0
c001b422:	6a 02                	push   0x2
c001b424:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b428:	50                   	push   eax
c001b429:	53                   	push   ebx
c001b42a:	e8 2d fb ff ff       	call   c001af5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b42f:	83 c4 20             	add    esp,0x20
c001b432:	85 c0                	test   eax,eax
c001b434:	75 44                	jne    c001b47a <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b436:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b43a:	b9 03 00 00 00       	mov    ecx,0x3
c001b43f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b441:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b445:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b44a:	0f c8                	bswap  eax
c001b44c:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b450:	89 f0                	mov    eax,esi
c001b452:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b456:	50                   	push   eax
c001b457:	56                   	push   esi
c001b458:	c1 e6 0b             	shl    esi,0xb
c001b45b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b45f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b467:	56                   	push   esi
c001b468:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b46c:	50                   	push   eax
c001b46d:	53                   	push   ebx
c001b46e:	e8 e9 fa ff ff       	call   c001af5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b473:	83 c4 20             	add    esp,0x20
c001b476:	85 c0                	test   eax,eax
c001b478:	74 14                	je     c001b48e <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b47a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b47e:	83 ec 0c             	sub    esp,0xc
c001b481:	53                   	push   ebx
c001b482:	e8 f1 fd ff ff       	call   c001b278 <SATAPI::detectMedia()>
c001b487:	83 c4 10             	add    esp,0x10
c001b48a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b48e:	83 c4 30             	add    esp,0x30
c001b491:	5b                   	pop    ebx
c001b492:	5e                   	pop    esi
c001b493:	5f                   	pop    edi
c001b494:	c3                   	ret    
c001b495:	90                   	nop

c001b496 <IOAPIC::close(int, int, void*)>:
c001b496:	b8 00 00 00 00       	mov    eax,0x0
c001b49b:	c3                   	ret    

c001b49c <apicGetBase()>:
c001b49c:	55                   	push   ebp
c001b49d:	89 e5                	mov    ebp,esp
c001b49f:	83 ec 18             	sub    esp,0x18
c001b4a2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b4a7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b4ad:	83 e0 08             	and    eax,0x8
c001b4b0:	84 c0                	test   al,al
c001b4b2:	75 07                	jne    c001b4bb <apicGetBase()+0x1f>
c001b4b4:	b8 00 00 00 00       	mov    eax,0x0
c001b4b9:	eb 21                	jmp    c001b4dc <apicGetBase()+0x40>
c001b4bb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b4c0:	83 ec 08             	sub    esp,0x8
c001b4c3:	6a 1b                	push   0x1b
c001b4c5:	50                   	push   eax
c001b4c6:	e8 27 b9 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b4cb:	83 c4 10             	add    esp,0x10
c001b4ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b4d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b4d4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4d7:	25 00 00 ff ff       	and    eax,0xffff0000
c001b4dc:	c9                   	leave  
c001b4dd:	c3                   	ret    

c001b4de <IOAPIC::IOAPIC()>:
c001b4de:	83 ec 0c             	sub    esp,0xc
c001b4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e5:	83 ec 08             	sub    esp,0x8
c001b4e8:	68 94 f7 01 c0       	push   0xc001f794
c001b4ed:	50                   	push   eax
c001b4ee:	e8 fd 06 ff ff       	call   c000bbf0 <Device::Device(char const*)>
c001b4f3:	83 c4 10             	add    esp,0x10
c001b4f6:	ba a4 f7 01 c0       	mov    edx,0xc001f7a4
c001b4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4ff:	89 10                	mov    DWORD PTR [eax],edx
c001b501:	90                   	nop
c001b502:	83 c4 0c             	add    esp,0xc
c001b505:	c3                   	ret    

c001b506 <apicOpen()>:
c001b506:	55                   	push   ebp
c001b507:	89 e5                	mov    ebp,esp
c001b509:	53                   	push   ebx
c001b50a:	83 ec 34             	sub    esp,0x34
c001b50d:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b512:	83 f0 01             	xor    eax,0x1
c001b515:	84 c0                	test   al,al
c001b517:	0f 84 9d 00 00 00    	je     c001b5ba <apicOpen()+0xb4>
c001b51d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b521:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b526:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b529:	0f 83 84 00 00 00    	jae    c001b5b3 <apicOpen()+0xad>
c001b52f:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b536:	83 ec 0c             	sub    esp,0xc
c001b539:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b53c:	e8 78 c2 fe ff       	call   c00077b9 <malloc>
c001b541:	83 c4 10             	add    esp,0x10
c001b544:	89 c3                	mov    ebx,eax
c001b546:	83 ec 0c             	sub    esp,0xc
c001b549:	53                   	push   ebx
c001b54a:	e8 8f ff ff ff       	call   c001b4de <IOAPIC::IOAPIC()>
c001b54f:	83 c4 10             	add    esp,0x10
c001b552:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b555:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b558:	25 ff 00 00 00       	and    eax,0xff
c001b55d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b560:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b567:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b56c:	40                   	inc    eax
c001b56d:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b572:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b577:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b57d:	83 ec 08             	sub    esp,0x8
c001b580:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b583:	50                   	push   eax
c001b584:	e8 cf 04 ff ff       	call   c000ba58 <Device::addChild(Device*)>
c001b589:	83 c4 10             	add    esp,0x10
c001b58c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b58f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b591:	83 c0 08             	add    eax,0x8
c001b594:	8b 10                	mov    edx,DWORD PTR [eax]
c001b596:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b599:	25 ff 00 00 00       	and    eax,0xff
c001b59e:	6a 00                	push   0x0
c001b5a0:	6a 00                	push   0x0
c001b5a2:	50                   	push   eax
c001b5a3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5a6:	ff d2                	call   edx
c001b5a8:	83 c4 10             	add    esp,0x10
c001b5ab:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b5ae:	e9 6e ff ff ff       	jmp    c001b521 <apicOpen()+0x1b>
c001b5b3:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b5ba:	e8 dd fe ff ff       	call   c001b49c <apicGetBase()>
c001b5bf:	05 f0 00 00 00       	add    eax,0xf0
c001b5c4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b5c7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5ca:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5cc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b5cf:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b5d6:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b5dd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5e0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b5e3:	89 10                	mov    DWORD PTR [eax],edx
c001b5e5:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b5ec:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b5f1:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b5f4:	7d 70                	jge    c001b666 <apicOpen()+0x160>
c001b5f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5f9:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b600:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b603:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b606:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b60d:	c1 e8 08             	shr    eax,0x8
c001b610:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b614:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b617:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b61e:	c1 e8 18             	shr    eax,0x18
c001b621:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b624:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b628:	75 37                	jne    c001b661 <apicOpen()+0x15b>
c001b62a:	e8 6d fe ff ff       	call   c001b49c <apicGetBase()>
c001b62f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b633:	75 07                	jne    c001b63c <apicOpen()+0x136>
c001b635:	ba 60 03 00 00       	mov    edx,0x360
c001b63a:	eb 05                	jmp    c001b641 <apicOpen()+0x13b>
c001b63c:	ba 50 03 00 00       	mov    edx,0x350
c001b641:	01 d0                	add    eax,edx
c001b643:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b646:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b649:	8b 00                	mov    eax,DWORD PTR [eax]
c001b64b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b64e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b655:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b659:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b65c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b65f:	89 10                	mov    DWORD PTR [eax],edx
c001b661:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b664:	eb 86                	jmp    c001b5ec <apicOpen()+0xe6>
c001b666:	90                   	nop
c001b667:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b66a:	c9                   	leave  
c001b66b:	c3                   	ret    

c001b66c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b66c:	55                   	push   ebp
c001b66d:	89 e5                	mov    ebp,esp
c001b66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b672:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b678:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b67b:	72 1d                	jb     c001b69a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b67d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b680:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b689:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b68f:	01 d0                	add    eax,edx
c001b691:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b694:	73 04                	jae    c001b69a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b696:	b0 01                	mov    al,0x1
c001b698:	eb 02                	jmp    c001b69c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b69a:	b0 00                	mov    al,0x0
c001b69c:	5d                   	pop    ebp
c001b69d:	c3                   	ret    

c001b69e <IOAPIC::read(int)>:
c001b69e:	55                   	push   ebp
c001b69f:	89 e5                	mov    ebp,esp
c001b6a1:	83 ec 10             	sub    esp,0x10
c001b6a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6a7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6ad:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6b3:	31 d2                	xor    edx,edx
c001b6b5:	88 c2                	mov    dl,al
c001b6b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6ba:	89 10                	mov    DWORD PTR [eax],edx
c001b6bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6bf:	83 c0 10             	add    eax,0x10
c001b6c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6c4:	c9                   	leave  
c001b6c5:	c3                   	ret    

c001b6c6 <IOAPIC::open(int, int, void*)>:
c001b6c6:	55                   	push   ebp
c001b6c7:	89 e5                	mov    ebp,esp
c001b6c9:	57                   	push   edi
c001b6ca:	56                   	push   esi
c001b6cb:	53                   	push   ebx
c001b6cc:	83 ec 04             	sub    esp,0x4
c001b6cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b6d5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6e4:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b6f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6fd:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b707:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b70d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b710:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b719:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b71f:	89 c6                	mov    esi,eax
c001b721:	81 e6 ff 00 00 00    	and    esi,0xff
c001b727:	89 d0                	mov    eax,edx
c001b729:	ba 00 00 00 00       	mov    edx,0x0
c001b72e:	89 c7                	mov    edi,eax
c001b730:	83 e7 ff             	and    edi,0xffffffff
c001b733:	89 f9                	mov    ecx,edi
c001b735:	89 d0                	mov    eax,edx
c001b737:	25 ff 00 00 00       	and    eax,0xff
c001b73c:	89 c3                	mov    ebx,eax
c001b73e:	89 c8                	mov    eax,ecx
c001b740:	89 da                	mov    edx,ebx
c001b742:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b745:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b748:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b74c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b750:	83 e0 00             	and    eax,0x0
c001b753:	09 d0                	or     eax,edx
c001b755:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b762:	8d 50 01             	lea    edx,[eax+0x1]
c001b765:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b768:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b76e:	31 d2                	xor    edx,edx
c001b770:	88 c2                	mov    dl,al
c001b772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b775:	83 c2 08             	add    edx,0x8
c001b778:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b77c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b782:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b788:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b78c:	6a 01                	push   0x1
c001b78e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b791:	e8 08 ff ff ff       	call   c001b69e <IOAPIC::read(int)>
c001b796:	83 c4 08             	add    esp,0x8
c001b799:	c1 f8 10             	sar    eax,0x10
c001b79c:	25 ff 00 00 00       	and    eax,0xff
c001b7a1:	8d 50 01             	lea    edx,[eax+0x1]
c001b7a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7a7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b7ad:	b8 00 00 00 00       	mov    eax,0x0
c001b7b2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b7b5:	5b                   	pop    ebx
c001b7b6:	5e                   	pop    esi
c001b7b7:	5f                   	pop    edi
c001b7b8:	5d                   	pop    ebp
c001b7b9:	c3                   	ret    

c001b7ba <IOAPIC::write(int, int)>:
c001b7ba:	55                   	push   ebp
c001b7bb:	89 e5                	mov    ebp,esp
c001b7bd:	83 ec 10             	sub    esp,0x10
c001b7c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7c9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b7cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7cf:	31 d2                	xor    edx,edx
c001b7d1:	88 c2                	mov    dl,al
c001b7d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7d6:	89 10                	mov    DWORD PTR [eax],edx
c001b7d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7db:	8d 50 10             	lea    edx,[eax+0x10]
c001b7de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7e1:	89 02                	mov    DWORD PTR [edx],eax
c001b7e3:	90                   	nop
c001b7e4:	c9                   	leave  
c001b7e5:	c3                   	ret    

c001b7e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b7e6:	55                   	push   ebp
c001b7e7:	89 e5                	mov    ebp,esp
c001b7e9:	53                   	push   ebx
c001b7ea:	83 ec 2c             	sub    esp,0x2c
c001b7ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7f0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b7f3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b7f6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b7f9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b7fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7ff:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b802:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b805:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b808:	88 d8                	mov    al,bl
c001b80a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b80d:	88 c8                	mov    al,cl
c001b80f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b812:	88 d0                	mov    al,dl
c001b814:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b817:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b81a:	25 ff 00 00 00       	and    eax,0xff
c001b81f:	83 c0 08             	add    eax,0x8
c001b822:	01 c0                	add    eax,eax
c001b824:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b827:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b82a:	25 ff 00 00 00       	and    eax,0xff
c001b82f:	83 c0 08             	add    eax,0x8
c001b832:	01 c0                	add    eax,eax
c001b834:	40                   	inc    eax
c001b835:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b838:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b83b:	50                   	push   eax
c001b83c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b83f:	e8 5a fe ff ff       	call   c001b69e <IOAPIC::read(int)>
c001b844:	83 c4 08             	add    esp,0x8
c001b847:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b84a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b851:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b854:	c1 e0 18             	shl    eax,0x18
c001b857:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b85a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b85d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b860:	52                   	push   edx
c001b861:	50                   	push   eax
c001b862:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b865:	e8 50 ff ff ff       	call   c001b7ba <IOAPIC::write(int, int)>
c001b86a:	83 c4 0c             	add    esp,0xc
c001b86d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b870:	50                   	push   eax
c001b871:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b874:	e8 25 fe ff ff       	call   c001b69e <IOAPIC::read(int)>
c001b879:	83 c4 08             	add    esp,0x8
c001b87c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b87f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b886:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b88d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b894:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b898:	74 09                	je     c001b8a3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b89a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b8a1:	eb 07                	jmp    c001b8aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b8a3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b8aa:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b8ae:	74 09                	je     c001b8b9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b8b0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b8b7:	eb 07                	jmp    c001b8c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b8b9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b8c0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b8c7:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b8ca:	25 ff 00 00 00       	and    eax,0xff
c001b8cf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b8d2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b8d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8d8:	52                   	push   edx
c001b8d9:	50                   	push   eax
c001b8da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8dd:	e8 d8 fe ff ff       	call   c001b7ba <IOAPIC::write(int, int)>
c001b8e2:	83 c4 0c             	add    esp,0xc
c001b8e5:	90                   	nop
c001b8e6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b8e9:	c9                   	leave  
c001b8ea:	c3                   	ret    
c001b8eb:	90                   	nop

c001b8ec <APICTimer::close(int, int, void*)>:
c001b8ec:	b8 00 00 00 00       	mov    eax,0x0
c001b8f1:	c3                   	ret    
c001b8f2:	66 90                	xchg   ax,ax

c001b8f4 <apicTimerHandler(regs*, void*)>:
c001b8f4:	83 ec 0c             	sub    esp,0xc
c001b8f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b8fd:	b8 10 27 00 00       	mov    eax,0x2710
c001b902:	ba 00 00 00 00       	mov    edx,0x0
c001b907:	f7 f1                	div    ecx
c001b909:	83 ec 0c             	sub    esp,0xc
c001b90c:	50                   	push   eax
c001b90d:	e8 1a 1a ff ff       	call   c000d32c <timerHandler(unsigned int)>
c001b912:	83 c4 10             	add    esp,0x10
c001b915:	90                   	nop
c001b916:	83 c4 0c             	add    esp,0xc
c001b919:	c3                   	ret    
c001b91a:	66 90                	xchg   ax,ax

c001b91c <APICTimer::open(int, int, void*)>:
c001b91c:	83 ec 0c             	sub    esp,0xc
c001b91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b923:	8b 00                	mov    eax,DWORD PTR [eax]
c001b925:	83 c0 24             	add    eax,0x24
c001b928:	8b 00                	mov    eax,DWORD PTR [eax]
c001b92a:	83 ec 08             	sub    esp,0x8
c001b92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b935:	ff d0                	call   eax
c001b937:	83 c4 10             	add    esp,0x10
c001b93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b942:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b950:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b956:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b95a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	51                   	push   ecx
c001b964:	6a 01                	push   0x1
c001b966:	68 f4 b8 01 c0       	push   0xc001b8f4
c001b96b:	52                   	push   edx
c001b96c:	50                   	push   eax
c001b96d:	e8 92 00 ff ff       	call   c000ba04 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b972:	83 c4 20             	add    esp,0x20
c001b975:	89 c2                	mov    edx,eax
c001b977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b981:	b8 00 00 00 00       	mov    eax,0x0
c001b986:	83 c4 0c             	add    esp,0xc
c001b989:	c3                   	ret    
c001b98a:	66 90                	xchg   ax,ax

c001b98c <APICTimer::write(int)>:
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	83 ec 0c             	sub    esp,0xc
c001b992:	68 c8 f7 01 c0       	push   0xc001f7c8
c001b997:	e8 ff 48 ff ff       	call   c001029b <KePanic(char const*)>
c001b99c:	83 c4 10             	add    esp,0x10
c001b99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9ad:	90                   	nop
c001b9ae:	83 c4 0c             	add    esp,0xc
c001b9b1:	c3                   	ret    
c001b9b2:	66 90                	xchg   ax,ax

c001b9b4 <APICTimer::APICTimer()>:
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9bb:	83 ec 08             	sub    esp,0x8
c001b9be:	68 d8 f7 01 c0       	push   0xc001f7d8
c001b9c3:	50                   	push   eax
c001b9c4:	e8 97 18 ff ff       	call   c000d260 <Timer::Timer(char const*)>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	ba ec f7 01 c0       	mov    edx,0xc001f7ec
c001b9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d5:	89 10                	mov    DWORD PTR [eax],edx
c001b9d7:	90                   	nop
c001b9d8:	83 c4 0c             	add    esp,0xc
c001b9db:	c3                   	ret    

c001b9dc <PIT::write(int)>:
c001b9dc:	83 ec 10             	sub    esp,0x10
c001b9df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9f1:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b9f6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b9fb:	99                   	cdq    
c001b9fc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba04:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba0b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba10:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba14:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba19:	ee                   	out    dx,al
c001ba1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba1e:	25 ff 00 00 00       	and    eax,0xff
c001ba23:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba2a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba2e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba32:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ba37:	ee                   	out    dx,al
c001ba38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba3c:	c1 f8 08             	sar    eax,0x8
c001ba3f:	25 ff 00 00 00       	and    eax,0xff
c001ba44:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ba4b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ba4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba58:	ee                   	out    dx,al
c001ba59:	90                   	nop
c001ba5a:	83 c4 10             	add    esp,0x10
c001ba5d:	c3                   	ret    
c001ba5e:	66 90                	xchg   ax,ax

c001ba60 <pitHandler(regs*, void*)>:
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001ba69:	b8 10 27 00 00       	mov    eax,0x2710
c001ba6e:	99                   	cdq    
c001ba6f:	f7 f9                	idiv   ecx
c001ba71:	83 ec 0c             	sub    esp,0xc
c001ba74:	50                   	push   eax
c001ba75:	e8 b2 18 ff ff       	call   c000d32c <timerHandler(unsigned int)>
c001ba7a:	83 c4 10             	add    esp,0x10
c001ba7d:	90                   	nop
c001ba7e:	83 c4 0c             	add    esp,0xc
c001ba81:	c3                   	ret    
c001ba82:	66 90                	xchg   ax,ax

c001ba84 <PIT::open(int, int, void*)>:
c001ba84:	83 ec 0c             	sub    esp,0xc
c001ba87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba8d:	83 c0 24             	add    eax,0x24
c001ba90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba92:	83 ec 08             	sub    esp,0x8
c001ba95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba9d:	ff d0                	call   eax
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa6:	83 ec 0c             	sub    esp,0xc
c001baa9:	6a 00                	push   0x0
c001baab:	6a 01                	push   0x1
c001baad:	68 60 ba 01 c0       	push   0xc001ba60
c001bab2:	6a 00                	push   0x0
c001bab4:	50                   	push   eax
c001bab5:	e8 4a ff fe ff       	call   c000ba04 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001baba:	83 c4 20             	add    esp,0x20
c001babd:	89 c2                	mov    edx,eax
c001babf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bac9:	b8 00 00 00 00       	mov    eax,0x0
c001bace:	83 c4 0c             	add    esp,0xc
c001bad1:	c3                   	ret    
c001bad2:	66 90                	xchg   ax,ax

c001bad4 <PIT::close(int, int, void*)>:
c001bad4:	83 ec 0c             	sub    esp,0xc
c001bad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001badb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae9:	6a 01                	push   0x1
c001baeb:	68 60 ba 01 c0       	push   0xc001ba60
c001baf0:	6a 00                	push   0x0
c001baf2:	50                   	push   eax
c001baf3:	e8 42 ff fe ff       	call   c000ba3a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001baf8:	83 c4 10             	add    esp,0x10
c001bafb:	b8 00 00 00 00       	mov    eax,0x0
c001bb00:	83 c4 0c             	add    esp,0xc
c001bb03:	c3                   	ret    

c001bb04 <PIT::PIT()>:
c001bb04:	83 ec 0c             	sub    esp,0xc
c001bb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb0b:	83 ec 08             	sub    esp,0x8
c001bb0e:	68 14 f8 01 c0       	push   0xc001f814
c001bb13:	50                   	push   eax
c001bb14:	e8 47 17 ff ff       	call   c000d260 <Timer::Timer(char const*)>
c001bb19:	83 c4 10             	add    esp,0x10
c001bb1c:	ba 3c f8 01 c0       	mov    edx,0xc001f83c
c001bb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb25:	89 10                	mov    DWORD PTR [eax],edx
c001bb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb31:	31 d2                	xor    edx,edx
c001bb33:	88 c2                	mov    dl,al
c001bb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb39:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb4a:	31 d2                	xor    edx,edx
c001bb4c:	88 c2                	mov    dl,al
c001bb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb52:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb61:	8d 50 01             	lea    edx,[eax+0x1]
c001bb64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb68:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb6e:	31 d2                	xor    edx,edx
c001bb70:	88 c2                	mov    dl,al
c001bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb76:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bb7a:	83 e1 3f             	and    ecx,0x3f
c001bb7d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bb81:	90                   	nop
c001bb82:	83 c4 0c             	add    esp,0xc
c001bb85:	c3                   	ret    
c001bb86:	66 90                	xchg   ax,ax
c001bb88:	66 90                	xchg   ax,ax
c001bb8a:	66 90                	xchg   ax,ax
c001bb8c:	66 90                	xchg   ax,ax
c001bb8e:	66 90                	xchg   ax,ax

c001bb90 <avxDetect>:
c001bb90:	b8 01 00 00 00       	mov    eax,0x1
c001bb95:	0f a2                	cpuid  
c001bb97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bb9d:	74 15                	je     c001bbb4 <avxDetect.noAVX>
c001bb9f:	b8 01 00 00 00       	mov    eax,0x1
c001bba4:	0f a2                	cpuid  
c001bba6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bbac:	74 06                	je     c001bbb4 <avxDetect.noAVX>
c001bbae:	b8 01 00 00 00       	mov    eax,0x1
c001bbb3:	c3                   	ret    

c001bbb4 <avxDetect.noAVX>:
c001bbb4:	b8 00 00 00 00       	mov    eax,0x0
c001bbb9:	c3                   	ret    

c001bbba <avxSave>:
c001bbba:	53                   	push   ebx
c001bbbb:	52                   	push   edx
c001bbbc:	31 c0                	xor    eax,eax
c001bbbe:	48                   	dec    eax
c001bbbf:	89 c2                	mov    edx,eax
c001bbc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbc5:	0f ae 23             	xsave  [ebx]
c001bbc8:	5a                   	pop    edx
c001bbc9:	5b                   	pop    ebx
c001bbca:	c3                   	ret    

c001bbcb <avxLoad>:
c001bbcb:	53                   	push   ebx
c001bbcc:	52                   	push   edx
c001bbcd:	31 c0                	xor    eax,eax
c001bbcf:	48                   	dec    eax
c001bbd0:	89 c2                	mov    edx,eax
c001bbd2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbd6:	0f ae 2b             	xrstor [ebx]
c001bbd9:	5a                   	pop    edx
c001bbda:	5b                   	pop    ebx
c001bbdb:	c3                   	ret    

c001bbdc <avxInit>:
c001bbdc:	e8 b7 02 00 00       	call   c001be98 <sseInit>
c001bbe1:	50                   	push   eax
c001bbe2:	51                   	push   ecx
c001bbe3:	0f 20 e0             	mov    eax,cr4
c001bbe6:	0d 00 00 04 00       	or     eax,0x40000
c001bbeb:	0f 22 e0             	mov    cr4,eax
c001bbee:	31 c9                	xor    ecx,ecx
c001bbf0:	0f 01 d0             	xgetbv 
c001bbf3:	0d 07 00 00 00       	or     eax,0x7
c001bbf8:	0f 01 d1             	xsetbv 
c001bbfb:	59                   	pop    ecx
c001bbfc:	58                   	pop    eax
c001bbfd:	c3                   	ret    

c001bbfe <avxClose>:
c001bbfe:	c3                   	ret    

c001bbff <wouldSheSayYes>:
c001bbff:	c3                   	ret    
c001bc00:	49                   	dec    ecx
c001bc01:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc05:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc09:	75 20                	jne    c001bc2b <isr0+0xb>
c001bc0b:	4e                   	dec    esi
c001bc0c:	79 61                	jns    c001bc6f <isr7+0x3>
c001bc0e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc13:	66 90                	xchg   ax,ax
c001bc15:	66 90                	xchg   ax,ax
c001bc17:	66 90                	xchg   ax,ax
c001bc19:	66 90                	xchg   ax,ax
c001bc1b:	66 90                	xchg   ax,ax
c001bc1d:	66 90                	xchg   ax,ax
c001bc1f:	90                   	nop

c001bc20 <isr0>:
c001bc20:	fa                   	cli    
c001bc21:	68 00 00 00 00       	push   0x0
c001bc26:	68 00 00 00 00       	push   0x0
c001bc2b:	e9 44 01 00 00       	jmp    c001bd74 <int_common_stub>

c001bc30 <isr1>:
c001bc30:	fa                   	cli    
c001bc31:	6a 00                	push   0x0
c001bc33:	6a 01                	push   0x1
c001bc35:	e9 3a 01 00 00       	jmp    c001bd74 <int_common_stub>

c001bc3a <isr2>:
c001bc3a:	fa                   	cli    
c001bc3b:	6a 00                	push   0x0
c001bc3d:	6a 02                	push   0x2
c001bc3f:	e9 30 01 00 00       	jmp    c001bd74 <int_common_stub>

c001bc44 <isr3>:
c001bc44:	fa                   	cli    
c001bc45:	6a 00                	push   0x0
c001bc47:	6a 03                	push   0x3
c001bc49:	e9 26 01 00 00       	jmp    c001bd74 <int_common_stub>

c001bc4e <isr4>:
c001bc4e:	fa                   	cli    
c001bc4f:	6a 00                	push   0x0
c001bc51:	6a 04                	push   0x4
c001bc53:	e9 1c 01 00 00       	jmp    c001bd74 <int_common_stub>

c001bc58 <isr5>:
c001bc58:	fa                   	cli    
c001bc59:	6a 00                	push   0x0
c001bc5b:	6a 05                	push   0x5
c001bc5d:	e9 12 01 00 00       	jmp    c001bd74 <int_common_stub>

c001bc62 <isr6>:
c001bc62:	fa                   	cli    
c001bc63:	6a 00                	push   0x0
c001bc65:	6a 06                	push   0x6
c001bc67:	e9 08 01 00 00       	jmp    c001bd74 <int_common_stub>

c001bc6c <isr7>:
c001bc6c:	fa                   	cli    
c001bc6d:	6a 00                	push   0x0
c001bc6f:	6a 07                	push   0x7
c001bc71:	e9 fe 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bc76 <isr8>:
c001bc76:	fa                   	cli    
c001bc77:	6a 08                	push   0x8
c001bc79:	e9 f6 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bc7e <isr9>:
c001bc7e:	fa                   	cli    
c001bc7f:	6a 00                	push   0x0
c001bc81:	6a 09                	push   0x9
c001bc83:	e9 ec 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bc88 <isr10>:
c001bc88:	fa                   	cli    
c001bc89:	6a 0a                	push   0xa
c001bc8b:	e9 e4 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bc90 <isr11>:
c001bc90:	fa                   	cli    
c001bc91:	6a 0b                	push   0xb
c001bc93:	e9 dc 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bc98 <isr12>:
c001bc98:	fa                   	cli    
c001bc99:	6a 0c                	push   0xc
c001bc9b:	e9 d4 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bca0 <isr13>:
c001bca0:	fa                   	cli    
c001bca1:	6a 0d                	push   0xd
c001bca3:	e9 cc 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bca8 <isr14>:
c001bca8:	fa                   	cli    
c001bca9:	6a 0e                	push   0xe
c001bcab:	e9 c4 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bcb0 <isr15>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 00                	push   0x0
c001bcb3:	6a 0f                	push   0xf
c001bcb5:	e9 ba 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bcba <isr16>:
c001bcba:	fa                   	cli    
c001bcbb:	6a 00                	push   0x0
c001bcbd:	6a 10                	push   0x10
c001bcbf:	e9 b0 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bcc4 <isr17>:
c001bcc4:	fa                   	cli    
c001bcc5:	6a 00                	push   0x0
c001bcc7:	6a 11                	push   0x11
c001bcc9:	e9 a6 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bcce <isr18>:
c001bcce:	fa                   	cli    
c001bccf:	6a 00                	push   0x0
c001bcd1:	6a 12                	push   0x12
c001bcd3:	e9 9c 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bcd8 <irq3>:
c001bcd8:	fa                   	cli    
c001bcd9:	6a 00                	push   0x0
c001bcdb:	6a 23                	push   0x23
c001bcdd:	e9 92 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bce2 <irq4>:
c001bce2:	fa                   	cli    
c001bce3:	6a 00                	push   0x0
c001bce5:	6a 24                	push   0x24
c001bce7:	e9 88 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bcec <irq5>:
c001bcec:	fa                   	cli    
c001bced:	6a 00                	push   0x0
c001bcef:	6a 25                	push   0x25
c001bcf1:	e9 7e 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bcf6 <irq6>:
c001bcf6:	fa                   	cli    
c001bcf7:	6a 00                	push   0x0
c001bcf9:	6a 26                	push   0x26
c001bcfb:	e9 74 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd00 <irq7>:
c001bd00:	fa                   	cli    
c001bd01:	6a 00                	push   0x0
c001bd03:	6a 27                	push   0x27
c001bd05:	e9 6a 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd0a <irq8>:
c001bd0a:	fa                   	cli    
c001bd0b:	6a 00                	push   0x0
c001bd0d:	6a 28                	push   0x28
c001bd0f:	e9 60 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd14 <irq9>:
c001bd14:	fa                   	cli    
c001bd15:	6a 00                	push   0x0
c001bd17:	6a 29                	push   0x29
c001bd19:	e9 56 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd1e <irq10>:
c001bd1e:	fa                   	cli    
c001bd1f:	6a 00                	push   0x0
c001bd21:	6a 2a                	push   0x2a
c001bd23:	e9 4c 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd28 <irq11>:
c001bd28:	fa                   	cli    
c001bd29:	6a 00                	push   0x0
c001bd2b:	6a 2b                	push   0x2b
c001bd2d:	e9 42 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd32 <irq12>:
c001bd32:	fa                   	cli    
c001bd33:	6a 00                	push   0x0
c001bd35:	6a 2c                	push   0x2c
c001bd37:	e9 38 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd3c <irq13>:
c001bd3c:	fa                   	cli    
c001bd3d:	6a 00                	push   0x0
c001bd3f:	6a 2d                	push   0x2d
c001bd41:	e9 2e 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd46 <irq14>:
c001bd46:	fa                   	cli    
c001bd47:	6a 00                	push   0x0
c001bd49:	6a 2e                	push   0x2e
c001bd4b:	e9 24 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd50 <irq15>:
c001bd50:	fa                   	cli    
c001bd51:	6a 00                	push   0x0
c001bd53:	6a 2f                	push   0x2f
c001bd55:	e9 1a 00 00 00       	jmp    c001bd74 <int_common_stub>

c001bd5a <irq1>:
c001bd5a:	fa                   	cli    
c001bd5b:	6a 00                	push   0x0
c001bd5d:	6a 21                	push   0x21
c001bd5f:	eb 13                	jmp    c001bd74 <int_common_stub>

c001bd61 <irq2>:
c001bd61:	fa                   	cli    
c001bd62:	6a 00                	push   0x0
c001bd64:	6a 22                	push   0x22
c001bd66:	eb 0c                	jmp    c001bd74 <int_common_stub>

c001bd68 <isr96>:
c001bd68:	6a 00                	push   0x0
c001bd6a:	6a 60                	push   0x60
c001bd6c:	fb                   	sti    
c001bd6d:	eb 37                	jmp    c001bda6 <syscall_common_stub>

c001bd6f <irq0>:
c001bd6f:	fa                   	cli    
c001bd70:	6a 00                	push   0x0
c001bd72:	6a 20                	push   0x20

c001bd74 <int_common_stub>:
c001bd74:	60                   	pusha  
c001bd75:	1e                   	push   ds
c001bd76:	06                   	push   es
c001bd77:	0f a0                	push   fs
c001bd79:	0f a8                	push   gs
c001bd7b:	66 b8 10 00          	mov    ax,0x10
c001bd7f:	66 8e d8             	mov    ds,ax
c001bd82:	66 8e c0             	mov    es,ax
c001bd85:	66 8e e0             	mov    fs,ax
c001bd88:	66 8e e8             	mov    gs,ax
c001bd8b:	54                   	push   esp
c001bd8c:	fc                   	cld    
c001bd8d:	e8 72 01 ff ff       	call   c000bf04 <int_handler>
c001bd92:	81 c4 04 00 00 00    	add    esp,0x4
c001bd98:	0f a9                	pop    gs
c001bd9a:	0f a1                	pop    fs
c001bd9c:	07                   	pop    es
c001bd9d:	1f                   	pop    ds
c001bd9e:	61                   	popa   
c001bd9f:	81 c4 08 00 00 00    	add    esp,0x8
c001bda5:	cf                   	iret   

c001bda6 <syscall_common_stub>:
c001bda6:	60                   	pusha  
c001bda7:	1e                   	push   ds
c001bda8:	06                   	push   es
c001bda9:	0f a0                	push   fs
c001bdab:	0f a8                	push   gs
c001bdad:	66 b8 10 00          	mov    ax,0x10
c001bdb1:	66 8e d8             	mov    ds,ax
c001bdb4:	66 8e c0             	mov    es,ax
c001bdb7:	66 8e e0             	mov    fs,ax
c001bdba:	66 8e e8             	mov    gs,ax
c001bdbd:	54                   	push   esp
c001bdbe:	fc                   	cld    
c001bdbf:	e8 40 01 ff ff       	call   c000bf04 <int_handler>
c001bdc4:	81 c4 04 00 00 00    	add    esp,0x4
c001bdca:	0f a9                	pop    gs
c001bdcc:	0f a1                	pop    fs
c001bdce:	07                   	pop    es
c001bdcf:	1f                   	pop    ds
c001bdd0:	e8 1a 4a ff ff       	call   c00107ef <KiCheckSignalZ>
c001bdd5:	3d 00 00 00 00       	cmp    eax,0x0
c001bdda:	74 1d                	je     c001bdf9 <syscall_common_stub.skipSignals>
c001bddc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bde0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bde4:	89 e3                	mov    ebx,esp
c001bde6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bde9:	51                   	push   ecx
c001bdea:	68 01 be 01 c0       	push   0xc001be01
c001bdef:	89 dc                	mov    esp,ebx
c001bdf1:	61                   	popa   
c001bdf2:	81 c4 08 00 00 00    	add    esp,0x8
c001bdf8:	cf                   	iret   

c001bdf9 <syscall_common_stub.skipSignals>:
c001bdf9:	61                   	popa   
c001bdfa:	81 c4 08 00 00 00    	add    esp,0x8
c001be00:	cf                   	iret   

c001be01 <irq16>:
c001be01:	fa                   	cli    
c001be02:	6a 00                	push   0x0
c001be04:	6a 30                	push   0x30
c001be06:	e9 69 ff ff ff       	jmp    c001bd74 <int_common_stub>

c001be0b <irq17>:
c001be0b:	fa                   	cli    
c001be0c:	6a 00                	push   0x0
c001be0e:	6a 31                	push   0x31
c001be10:	e9 5f ff ff ff       	jmp    c001bd74 <int_common_stub>

c001be15 <irq18>:
c001be15:	fa                   	cli    
c001be16:	6a 00                	push   0x0
c001be18:	6a 32                	push   0x32
c001be1a:	e9 55 ff ff ff       	jmp    c001bd74 <int_common_stub>

c001be1f <irq19>:
c001be1f:	fa                   	cli    
c001be20:	6a 00                	push   0x0
c001be22:	6a 33                	push   0x33
c001be24:	e9 4b ff ff ff       	jmp    c001bd74 <int_common_stub>

c001be29 <irq20>:
c001be29:	fa                   	cli    
c001be2a:	6a 00                	push   0x0
c001be2c:	6a 34                	push   0x34
c001be2e:	e9 41 ff ff ff       	jmp    c001bd74 <int_common_stub>

c001be33 <irq21>:
c001be33:	fa                   	cli    
c001be34:	6a 00                	push   0x0
c001be36:	6a 35                	push   0x35
c001be38:	e9 37 ff ff ff       	jmp    c001bd74 <int_common_stub>

c001be3d <irq22>:
c001be3d:	fa                   	cli    
c001be3e:	6a 00                	push   0x0
c001be40:	6a 36                	push   0x36
c001be42:	e9 2d ff ff ff       	jmp    c001bd74 <int_common_stub>

c001be47 <irq23>:
c001be47:	fa                   	cli    
c001be48:	6a 00                	push   0x0
c001be4a:	6a 37                	push   0x37
c001be4c:	e9 23 ff ff ff       	jmp    c001bd74 <int_common_stub>
c001be51:	66 90                	xchg   ax,ax
c001be53:	66 90                	xchg   ax,ax
c001be55:	66 90                	xchg   ax,ax
c001be57:	66 90                	xchg   ax,ax
c001be59:	66 90                	xchg   ax,ax
c001be5b:	66 90                	xchg   ax,ax
c001be5d:	66 90                	xchg   ax,ax
c001be5f:	90                   	nop

c001be60 <i386GetRDRAND>:
c001be60:	b9 64 00 00 00       	mov    ecx,0x64

c001be65 <retry>:
c001be65:	0f c7 f0             	rdrand eax
c001be68:	72 05                	jb     c001be6f <retry.done>
c001be6a:	e2 f9                	loop   c001be65 <retry>

c001be6c <retry.fail>:
c001be6c:	31 c0                	xor    eax,eax
c001be6e:	c3                   	ret    

c001be6f <retry.done>:
c001be6f:	c3                   	ret    

c001be70 <absolutelyNoChanceInHell>:
c001be70:	b8 01 00 00 00       	mov    eax,0x1
c001be75:	0f a2                	cpuid  
c001be77:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be7d:	74 06                	je     c001be85 <sseDetect.noSSE>
c001be7f:	b8 01 00 00 00       	mov    eax,0x1
c001be84:	c3                   	ret    

c001be85 <sseDetect.noSSE>:
c001be85:	31 c0                	xor    eax,eax
c001be87:	c3                   	ret    

c001be88 <sseSave>:
c001be88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be8c:	0f ae 00             	fxsave [eax]
c001be8f:	c3                   	ret    

c001be90 <sseLoad>:
c001be90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be94:	0f ae 08             	fxrstor [eax]
c001be97:	c3                   	ret    

c001be98 <sseInit>:
c001be98:	e8 42 00 00 00       	call   c001bedf <x87Init>
c001be9d:	0f 20 e0             	mov    eax,cr4
c001bea0:	66 0d 00 06          	or     ax,0x600
c001bea4:	0f 22 e0             	mov    cr4,eax
c001bea7:	c3                   	ret    

c001bea8 <sseClose>:
c001bea8:	c3                   	ret    
c001bea9:	66 90                	xchg   ax,ax
c001beab:	66 90                	xchg   ax,ax
c001bead:	66 90                	xchg   ax,ax
c001beaf:	90                   	nop

c001beb0 <value_37F>:
c001beb0:	7f 03                	jg     c001beb5 <value_37A+0x1>

c001beb2 <value_37E>:
c001beb2:	7e 03                	jle    c001beb7 <x87Detect+0x1>

c001beb4 <value_37A>:
c001beb4:	7a 03                	jp     c001beb9 <x87Detect+0x3>

c001beb6 <x87Detect>:
c001beb6:	b8 01 00 00 00       	mov    eax,0x1
c001bebb:	0f a2                	cpuid  
c001bebd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bec3:	74 06                	je     c001becb <x87Detect.nox87>
c001bec5:	b8 01 00 00 00       	mov    eax,0x1
c001beca:	c3                   	ret    

c001becb <x87Detect.nox87>:
c001becb:	b8 00 00 00 00       	mov    eax,0x0
c001bed0:	c3                   	ret    

c001bed1 <x87Save>:
c001bed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bed5:	dd 30                	fnsave [eax]
c001bed7:	c3                   	ret    

c001bed8 <x87Load>:
c001bed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bedc:	dd 20                	frstor [eax]
c001bede:	c3                   	ret    

c001bedf <x87Init>:
c001bedf:	0f 20 c0             	mov    eax,cr0
c001bee2:	66 25 fb ff          	and    ax,0xfffb
c001bee6:	66 0d 22 00          	or     ax,0x22
c001beea:	0f 22 c0             	mov    cr0,eax
c001beed:	db e3                	fninit 
c001beef:	0f 06                	clts   
c001bef1:	d9 2d b4 be 01 c0    	fldcw  WORD PTR ds:0xc001beb4
c001bef7:	c3                   	ret    

c001bef8 <x87Close>:
c001bef8:	c3                   	ret    
c001bef9:	66 90                	xchg   ax,ax
c001befb:	90                   	nop

c001befc <__do_global_ctors_aux>:
c001befc:	a1 ac ce 01 c0       	mov    eax,ds:0xc001ceac
c001bf01:	83 f8 ff             	cmp    eax,0xffffffff
c001bf04:	74 1a                	je     c001bf20 <__do_global_ctors_aux+0x24>
c001bf06:	55                   	push   ebp
c001bf07:	89 e5                	mov    ebp,esp
c001bf09:	53                   	push   ebx
c001bf0a:	52                   	push   edx
c001bf0b:	bb ac ce 01 c0       	mov    ebx,0xc001ceac
c001bf10:	ff d0                	call   eax
c001bf12:	83 eb 04             	sub    ebx,0x4
c001bf15:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf17:	83 f8 ff             	cmp    eax,0xffffffff
c001bf1a:	75 f4                	jne    c001bf10 <__do_global_ctors_aux+0x14>
c001bf1c:	58                   	pop    eax
c001bf1d:	5b                   	pop    ebx
c001bf1e:	5d                   	pop    ebp
c001bf1f:	c3                   	ret    
c001bf20:	c3                   	ret    
c001bf21:	66 90                	xchg   ax,ax
c001bf23:	90                   	nop

c001bf24 <__divdi3>:
c001bf24:	55                   	push   ebp
c001bf25:	57                   	push   edi
c001bf26:	56                   	push   esi
c001bf27:	53                   	push   ebx
c001bf28:	83 ec 1c             	sub    esp,0x1c
c001bf2b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf33:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf36:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf3e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf42:	85 db                	test   ebx,ebx
c001bf44:	0f 88 8e 00 00 00    	js     c001bfd8 <__divdi3+0xb4>
c001bf4a:	89 dd                	mov    ebp,ebx
c001bf4c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf54:	89 d3                	mov    ebx,edx
c001bf56:	85 d2                	test   edx,edx
c001bf58:	79 0d                	jns    c001bf67 <__divdi3+0x43>
c001bf5a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf5e:	f7 d8                	neg    eax
c001bf60:	83 d2 00             	adc    edx,0x0
c001bf63:	f7 da                	neg    edx
c001bf65:	89 d3                	mov    ebx,edx
c001bf67:	89 c7                	mov    edi,eax
c001bf69:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf6c:	85 db                	test   ebx,ebx
c001bf6e:	75 48                	jne    c001bfb8 <__divdi3+0x94>
c001bf70:	39 ef                	cmp    edi,ebp
c001bf72:	76 24                	jbe    c001bf98 <__divdi3+0x74>
c001bf74:	89 ea                	mov    edx,ebp
c001bf76:	f7 f7                	div    edi
c001bf78:	89 c1                	mov    ecx,eax
c001bf7a:	31 f6                	xor    esi,esi
c001bf7c:	89 c8                	mov    eax,ecx
c001bf7e:	89 f2                	mov    edx,esi
c001bf80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf84:	85 c9                	test   ecx,ecx
c001bf86:	74 07                	je     c001bf8f <__divdi3+0x6b>
c001bf88:	f7 d8                	neg    eax
c001bf8a:	83 d2 00             	adc    edx,0x0
c001bf8d:	f7 da                	neg    edx
c001bf8f:	83 c4 1c             	add    esp,0x1c
c001bf92:	5b                   	pop    ebx
c001bf93:	5e                   	pop    esi
c001bf94:	5f                   	pop    edi
c001bf95:	5d                   	pop    ebp
c001bf96:	c3                   	ret    
c001bf97:	90                   	nop
c001bf98:	85 ff                	test   edi,edi
c001bf9a:	75 0b                	jne    c001bfa7 <__divdi3+0x83>
c001bf9c:	b8 01 00 00 00       	mov    eax,0x1
c001bfa1:	31 d2                	xor    edx,edx
c001bfa3:	f7 f3                	div    ebx
c001bfa5:	89 c7                	mov    edi,eax
c001bfa7:	31 d2                	xor    edx,edx
c001bfa9:	89 e8                	mov    eax,ebp
c001bfab:	f7 f7                	div    edi
c001bfad:	89 c6                	mov    esi,eax
c001bfaf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfb2:	f7 f7                	div    edi
c001bfb4:	89 c1                	mov    ecx,eax
c001bfb6:	eb c4                	jmp    c001bf7c <__divdi3+0x58>
c001bfb8:	39 eb                	cmp    ebx,ebp
c001bfba:	77 3c                	ja     c001bff8 <__divdi3+0xd4>
c001bfbc:	0f bd f3             	bsr    esi,ebx
c001bfbf:	83 f6 1f             	xor    esi,0x1f
c001bfc2:	75 40                	jne    c001c004 <__divdi3+0xe0>
c001bfc4:	39 eb                	cmp    ebx,ebp
c001bfc6:	72 09                	jb     c001bfd1 <__divdi3+0xad>
c001bfc8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bfcb:	0f 87 97 00 00 00    	ja     c001c068 <__divdi3+0x144>
c001bfd1:	b9 01 00 00 00       	mov    ecx,0x1
c001bfd6:	eb a4                	jmp    c001bf7c <__divdi3+0x58>
c001bfd8:	f7 d9                	neg    ecx
c001bfda:	83 d3 00             	adc    ebx,0x0
c001bfdd:	f7 db                	neg    ebx
c001bfdf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bfe2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bfe6:	89 dd                	mov    ebp,ebx
c001bfe8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bff0:	e9 5f ff ff ff       	jmp    c001bf54 <__divdi3+0x30>
c001bff5:	8d 76 00             	lea    esi,[esi+0x0]
c001bff8:	31 f6                	xor    esi,esi
c001bffa:	31 c9                	xor    ecx,ecx
c001bffc:	e9 7b ff ff ff       	jmp    c001bf7c <__divdi3+0x58>
c001c001:	8d 76 00             	lea    esi,[esi+0x0]
c001c004:	b8 20 00 00 00       	mov    eax,0x20
c001c009:	29 f0                	sub    eax,esi
c001c00b:	89 f1                	mov    ecx,esi
c001c00d:	d3 e3                	shl    ebx,cl
c001c00f:	89 fa                	mov    edx,edi
c001c011:	88 c1                	mov    cl,al
c001c013:	d3 ea                	shr    edx,cl
c001c015:	09 da                	or     edx,ebx
c001c017:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c01b:	89 f1                	mov    ecx,esi
c001c01d:	d3 e7                	shl    edi,cl
c001c01f:	89 eb                	mov    ebx,ebp
c001c021:	88 c1                	mov    cl,al
c001c023:	d3 eb                	shr    ebx,cl
c001c025:	89 f1                	mov    ecx,esi
c001c027:	d3 e5                	shl    ebp,cl
c001c029:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c02c:	88 c1                	mov    cl,al
c001c02e:	d3 ea                	shr    edx,cl
c001c030:	09 d5                	or     ebp,edx
c001c032:	89 e8                	mov    eax,ebp
c001c034:	89 da                	mov    edx,ebx
c001c036:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c03a:	89 d3                	mov    ebx,edx
c001c03c:	89 c5                	mov    ebp,eax
c001c03e:	f7 e7                	mul    edi
c001c040:	39 d3                	cmp    ebx,edx
c001c042:	72 18                	jb     c001c05c <__divdi3+0x138>
c001c044:	74 0a                	je     c001c050 <__divdi3+0x12c>
c001c046:	89 e9                	mov    ecx,ebp
c001c048:	31 f6                	xor    esi,esi
c001c04a:	e9 2d ff ff ff       	jmp    c001bf7c <__divdi3+0x58>
c001c04f:	90                   	nop
c001c050:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c053:	89 f1                	mov    ecx,esi
c001c055:	d3 e7                	shl    edi,cl
c001c057:	39 c7                	cmp    edi,eax
c001c059:	73 eb                	jae    c001c046 <__divdi3+0x122>
c001c05b:	90                   	nop
c001c05c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c05f:	31 f6                	xor    esi,esi
c001c061:	e9 16 ff ff ff       	jmp    c001bf7c <__divdi3+0x58>
c001c066:	66 90                	xchg   ax,ax
c001c068:	31 c9                	xor    ecx,ecx
c001c06a:	e9 0d ff ff ff       	jmp    c001bf7c <__divdi3+0x58>
c001c06f:	90                   	nop

c001c070 <__moddi3>:
c001c070:	55                   	push   ebp
c001c071:	57                   	push   edi
c001c072:	56                   	push   esi
c001c073:	53                   	push   ebx
c001c074:	83 ec 2c             	sub    esp,0x2c
c001c077:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c07b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c07f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c083:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c087:	85 db                	test   ebx,ebx
c001c089:	0f 88 85 00 00 00    	js     c001c114 <__moddi3+0xa4>
c001c08f:	89 de                	mov    esi,ebx
c001c091:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c099:	89 d7                	mov    edi,edx
c001c09b:	85 d2                	test   edx,edx
c001c09d:	79 09                	jns    c001c0a8 <__moddi3+0x38>
c001c09f:	f7 d8                	neg    eax
c001c0a1:	83 d2 00             	adc    edx,0x0
c001c0a4:	f7 da                	neg    edx
c001c0a6:	89 d7                	mov    edi,edx
c001c0a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0ac:	89 cd                	mov    ebp,ecx
c001c0ae:	85 ff                	test   edi,edi
c001c0b0:	75 52                	jne    c001c104 <__moddi3+0x94>
c001c0b2:	89 c3                	mov    ebx,eax
c001c0b4:	39 f0                	cmp    eax,esi
c001c0b6:	76 24                	jbe    c001c0dc <__moddi3+0x6c>
c001c0b8:	89 c8                	mov    eax,ecx
c001c0ba:	89 f2                	mov    edx,esi
c001c0bc:	f7 f3                	div    ebx
c001c0be:	89 d6                	mov    esi,edx
c001c0c0:	89 f0                	mov    eax,esi
c001c0c2:	31 d2                	xor    edx,edx
c001c0c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0c8:	85 c9                	test   ecx,ecx
c001c0ca:	74 07                	je     c001c0d3 <__moddi3+0x63>
c001c0cc:	f7 d8                	neg    eax
c001c0ce:	83 d2 00             	adc    edx,0x0
c001c0d1:	f7 da                	neg    edx
c001c0d3:	83 c4 2c             	add    esp,0x2c
c001c0d6:	5b                   	pop    ebx
c001c0d7:	5e                   	pop    esi
c001c0d8:	5f                   	pop    edi
c001c0d9:	5d                   	pop    ebp
c001c0da:	c3                   	ret    
c001c0db:	90                   	nop
c001c0dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c0e0:	85 db                	test   ebx,ebx
c001c0e2:	75 0d                	jne    c001c0f1 <__moddi3+0x81>
c001c0e4:	b8 01 00 00 00       	mov    eax,0x1
c001c0e9:	31 d2                	xor    edx,edx
c001c0eb:	f7 f7                	div    edi
c001c0ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0f1:	89 f0                	mov    eax,esi
c001c0f3:	31 d2                	xor    edx,edx
c001c0f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0f9:	f7 f7                	div    edi
c001c0fb:	89 e8                	mov    eax,ebp
c001c0fd:	f7 f7                	div    edi
c001c0ff:	89 d6                	mov    esi,edx
c001c101:	eb bd                	jmp    c001c0c0 <__moddi3+0x50>
c001c103:	90                   	nop
c001c104:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c108:	39 f7                	cmp    edi,esi
c001c10a:	76 20                	jbe    c001c12c <__moddi3+0xbc>
c001c10c:	89 c8                	mov    eax,ecx
c001c10e:	89 f2                	mov    edx,esi
c001c110:	eb b2                	jmp    c001c0c4 <__moddi3+0x54>
c001c112:	66 90                	xchg   ax,ax
c001c114:	f7 d9                	neg    ecx
c001c116:	83 d3 00             	adc    ebx,0x0
c001c119:	f7 db                	neg    ebx
c001c11b:	89 de                	mov    esi,ebx
c001c11d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c125:	e9 6f ff ff ff       	jmp    c001c099 <__moddi3+0x29>
c001c12a:	66 90                	xchg   ax,ax
c001c12c:	0f bd c7             	bsr    eax,edi
c001c12f:	83 f0 1f             	xor    eax,0x1f
c001c132:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c136:	75 24                	jne    c001c15c <__moddi3+0xec>
c001c138:	39 f7                	cmp    edi,esi
c001c13a:	72 06                	jb     c001c142 <__moddi3+0xd2>
c001c13c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c140:	77 0c                	ja     c001c14e <__moddi3+0xde>
c001c142:	89 e9                	mov    ecx,ebp
c001c144:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c148:	19 fe                	sbb    esi,edi
c001c14a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c14e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c152:	89 f2                	mov    edx,esi
c001c154:	e9 6b ff ff ff       	jmp    c001c0c4 <__moddi3+0x54>
c001c159:	8d 76 00             	lea    esi,[esi+0x0]
c001c15c:	b8 20 00 00 00       	mov    eax,0x20
c001c161:	89 c2                	mov    edx,eax
c001c163:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c167:	29 da                	sub    edx,ebx
c001c169:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c16d:	88 d9                	mov    cl,bl
c001c16f:	d3 e7                	shl    edi,cl
c001c171:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c175:	88 d1                	mov    cl,dl
c001c177:	d3 e8                	shr    eax,cl
c001c179:	09 c7                	or     edi,eax
c001c17b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c17f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c183:	89 d8                	mov    eax,ebx
c001c185:	88 d9                	mov    cl,bl
c001c187:	d3 e7                	shl    edi,cl
c001c189:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c18d:	89 f3                	mov    ebx,esi
c001c18f:	88 d1                	mov    cl,dl
c001c191:	d3 eb                	shr    ebx,cl
c001c193:	89 c7                	mov    edi,eax
c001c195:	88 c1                	mov    cl,al
c001c197:	d3 e6                	shl    esi,cl
c001c199:	89 e8                	mov    eax,ebp
c001c19b:	88 d1                	mov    cl,dl
c001c19d:	d3 e8                	shr    eax,cl
c001c19f:	09 f0                	or     eax,esi
c001c1a1:	89 f9                	mov    ecx,edi
c001c1a3:	d3 e5                	shl    ebp,cl
c001c1a5:	89 da                	mov    edx,ebx
c001c1a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1ab:	89 d3                	mov    ebx,edx
c001c1ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1b1:	89 c6                	mov    esi,eax
c001c1b3:	89 d1                	mov    ecx,edx
c001c1b5:	39 d3                	cmp    ebx,edx
c001c1b7:	72 27                	jb     c001c1e0 <__moddi3+0x170>
c001c1b9:	74 21                	je     c001c1dc <__moddi3+0x16c>
c001c1bb:	29 f5                	sub    ebp,esi
c001c1bd:	19 cb                	sbb    ebx,ecx
c001c1bf:	89 de                	mov    esi,ebx
c001c1c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1c5:	d3 e6                	shl    esi,cl
c001c1c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1cb:	89 f9                	mov    ecx,edi
c001c1cd:	d3 ed                	shr    ebp,cl
c001c1cf:	09 ee                	or     esi,ebp
c001c1d1:	89 f0                	mov    eax,esi
c001c1d3:	d3 eb                	shr    ebx,cl
c001c1d5:	89 da                	mov    edx,ebx
c001c1d7:	e9 e8 fe ff ff       	jmp    c001c0c4 <__moddi3+0x54>
c001c1dc:	39 c5                	cmp    ebp,eax
c001c1de:	73 db                	jae    c001c1bb <__moddi3+0x14b>
c001c1e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c1e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c1e8:	89 d1                	mov    ecx,edx
c001c1ea:	89 c6                	mov    esi,eax
c001c1ec:	eb cd                	jmp    c001c1bb <__moddi3+0x14b>
c001c1ee:	66 90                	xchg   ax,ax

c001c1f0 <__udivdi3>:
c001c1f0:	55                   	push   ebp
c001c1f1:	57                   	push   edi
c001c1f2:	56                   	push   esi
c001c1f3:	53                   	push   ebx
c001c1f4:	83 ec 1c             	sub    esp,0x1c
c001c1f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c1ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c203:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c207:	85 d2                	test   edx,edx
c001c209:	75 41                	jne    c001c24c <__udivdi3+0x5c>
c001c20b:	39 f7                	cmp    edi,esi
c001c20d:	76 15                	jbe    c001c224 <__udivdi3+0x34>
c001c20f:	89 e8                	mov    eax,ebp
c001c211:	89 f2                	mov    edx,esi
c001c213:	f7 f7                	div    edi
c001c215:	31 db                	xor    ebx,ebx
c001c217:	89 da                	mov    edx,ebx
c001c219:	83 c4 1c             	add    esp,0x1c
c001c21c:	5b                   	pop    ebx
c001c21d:	5e                   	pop    esi
c001c21e:	5f                   	pop    edi
c001c21f:	5d                   	pop    ebp
c001c220:	c3                   	ret    
c001c221:	8d 76 00             	lea    esi,[esi+0x0]
c001c224:	89 f9                	mov    ecx,edi
c001c226:	85 ff                	test   edi,edi
c001c228:	75 0b                	jne    c001c235 <__udivdi3+0x45>
c001c22a:	b8 01 00 00 00       	mov    eax,0x1
c001c22f:	31 d2                	xor    edx,edx
c001c231:	f7 f7                	div    edi
c001c233:	89 c1                	mov    ecx,eax
c001c235:	31 d2                	xor    edx,edx
c001c237:	89 f0                	mov    eax,esi
c001c239:	f7 f1                	div    ecx
c001c23b:	89 c3                	mov    ebx,eax
c001c23d:	89 e8                	mov    eax,ebp
c001c23f:	f7 f1                	div    ecx
c001c241:	89 da                	mov    edx,ebx
c001c243:	83 c4 1c             	add    esp,0x1c
c001c246:	5b                   	pop    ebx
c001c247:	5e                   	pop    esi
c001c248:	5f                   	pop    edi
c001c249:	5d                   	pop    ebp
c001c24a:	c3                   	ret    
c001c24b:	90                   	nop
c001c24c:	39 f2                	cmp    edx,esi
c001c24e:	77 1c                	ja     c001c26c <__udivdi3+0x7c>
c001c250:	0f bd da             	bsr    ebx,edx
c001c253:	83 f3 1f             	xor    ebx,0x1f
c001c256:	75 24                	jne    c001c27c <__udivdi3+0x8c>
c001c258:	39 f2                	cmp    edx,esi
c001c25a:	72 08                	jb     c001c264 <__udivdi3+0x74>
c001c25c:	39 ef                	cmp    edi,ebp
c001c25e:	0f 87 84 00 00 00    	ja     c001c2e8 <__udivdi3+0xf8>
c001c264:	b8 01 00 00 00       	mov    eax,0x1
c001c269:	eb ac                	jmp    c001c217 <__udivdi3+0x27>
c001c26b:	90                   	nop
c001c26c:	31 db                	xor    ebx,ebx
c001c26e:	31 c0                	xor    eax,eax
c001c270:	89 da                	mov    edx,ebx
c001c272:	83 c4 1c             	add    esp,0x1c
c001c275:	5b                   	pop    ebx
c001c276:	5e                   	pop    esi
c001c277:	5f                   	pop    edi
c001c278:	5d                   	pop    ebp
c001c279:	c3                   	ret    
c001c27a:	66 90                	xchg   ax,ax
c001c27c:	b8 20 00 00 00       	mov    eax,0x20
c001c281:	29 d8                	sub    eax,ebx
c001c283:	88 d9                	mov    cl,bl
c001c285:	d3 e2                	shl    edx,cl
c001c287:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c28b:	89 fa                	mov    edx,edi
c001c28d:	88 c1                	mov    cl,al
c001c28f:	d3 ea                	shr    edx,cl
c001c291:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c295:	09 d1                	or     ecx,edx
c001c297:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c29b:	88 d9                	mov    cl,bl
c001c29d:	d3 e7                	shl    edi,cl
c001c29f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2a3:	89 f7                	mov    edi,esi
c001c2a5:	88 c1                	mov    cl,al
c001c2a7:	d3 ef                	shr    edi,cl
c001c2a9:	88 d9                	mov    cl,bl
c001c2ab:	d3 e6                	shl    esi,cl
c001c2ad:	89 ea                	mov    edx,ebp
c001c2af:	88 c1                	mov    cl,al
c001c2b1:	d3 ea                	shr    edx,cl
c001c2b3:	09 d6                	or     esi,edx
c001c2b5:	89 f0                	mov    eax,esi
c001c2b7:	89 fa                	mov    edx,edi
c001c2b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2bd:	89 d7                	mov    edi,edx
c001c2bf:	89 c6                	mov    esi,eax
c001c2c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2c5:	39 d7                	cmp    edi,edx
c001c2c7:	72 13                	jb     c001c2dc <__udivdi3+0xec>
c001c2c9:	74 09                	je     c001c2d4 <__udivdi3+0xe4>
c001c2cb:	89 f0                	mov    eax,esi
c001c2cd:	31 db                	xor    ebx,ebx
c001c2cf:	e9 43 ff ff ff       	jmp    c001c217 <__udivdi3+0x27>
c001c2d4:	88 d9                	mov    cl,bl
c001c2d6:	d3 e5                	shl    ebp,cl
c001c2d8:	39 c5                	cmp    ebp,eax
c001c2da:	73 ef                	jae    c001c2cb <__udivdi3+0xdb>
c001c2dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c2df:	31 db                	xor    ebx,ebx
c001c2e1:	e9 31 ff ff ff       	jmp    c001c217 <__udivdi3+0x27>
c001c2e6:	66 90                	xchg   ax,ax
c001c2e8:	31 c0                	xor    eax,eax
c001c2ea:	e9 28 ff ff ff       	jmp    c001c217 <__udivdi3+0x27>
c001c2ef:	90                   	nop

c001c2f0 <__umoddi3>:
c001c2f0:	55                   	push   ebp
c001c2f1:	57                   	push   edi
c001c2f2:	56                   	push   esi
c001c2f3:	53                   	push   ebx
c001c2f4:	83 ec 1c             	sub    esp,0x1c
c001c2f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c2fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c2ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c303:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c307:	89 da                	mov    edx,ebx
c001c309:	85 c0                	test   eax,eax
c001c30b:	75 37                	jne    c001c344 <__umoddi3+0x54>
c001c30d:	39 df                	cmp    edi,ebx
c001c30f:	76 13                	jbe    c001c324 <__umoddi3+0x34>
c001c311:	89 f0                	mov    eax,esi
c001c313:	f7 f7                	div    edi
c001c315:	89 d0                	mov    eax,edx
c001c317:	31 d2                	xor    edx,edx
c001c319:	83 c4 1c             	add    esp,0x1c
c001c31c:	5b                   	pop    ebx
c001c31d:	5e                   	pop    esi
c001c31e:	5f                   	pop    edi
c001c31f:	5d                   	pop    ebp
c001c320:	c3                   	ret    
c001c321:	8d 76 00             	lea    esi,[esi+0x0]
c001c324:	89 fd                	mov    ebp,edi
c001c326:	85 ff                	test   edi,edi
c001c328:	75 0b                	jne    c001c335 <__umoddi3+0x45>
c001c32a:	b8 01 00 00 00       	mov    eax,0x1
c001c32f:	31 d2                	xor    edx,edx
c001c331:	f7 f7                	div    edi
c001c333:	89 c5                	mov    ebp,eax
c001c335:	89 d8                	mov    eax,ebx
c001c337:	31 d2                	xor    edx,edx
c001c339:	f7 f5                	div    ebp
c001c33b:	89 f0                	mov    eax,esi
c001c33d:	f7 f5                	div    ebp
c001c33f:	89 d0                	mov    eax,edx
c001c341:	eb d4                	jmp    c001c317 <__umoddi3+0x27>
c001c343:	90                   	nop
c001c344:	89 f1                	mov    ecx,esi
c001c346:	39 d8                	cmp    eax,ebx
c001c348:	76 0a                	jbe    c001c354 <__umoddi3+0x64>
c001c34a:	89 f0                	mov    eax,esi
c001c34c:	83 c4 1c             	add    esp,0x1c
c001c34f:	5b                   	pop    ebx
c001c350:	5e                   	pop    esi
c001c351:	5f                   	pop    edi
c001c352:	5d                   	pop    ebp
c001c353:	c3                   	ret    
c001c354:	0f bd e8             	bsr    ebp,eax
c001c357:	83 f5 1f             	xor    ebp,0x1f
c001c35a:	75 1c                	jne    c001c378 <__umoddi3+0x88>
c001c35c:	39 d8                	cmp    eax,ebx
c001c35e:	72 04                	jb     c001c364 <__umoddi3+0x74>
c001c360:	39 f7                	cmp    edi,esi
c001c362:	77 08                	ja     c001c36c <__umoddi3+0x7c>
c001c364:	89 da                	mov    edx,ebx
c001c366:	29 fe                	sub    esi,edi
c001c368:	19 c2                	sbb    edx,eax
c001c36a:	89 f1                	mov    ecx,esi
c001c36c:	89 c8                	mov    eax,ecx
c001c36e:	83 c4 1c             	add    esp,0x1c
c001c371:	5b                   	pop    ebx
c001c372:	5e                   	pop    esi
c001c373:	5f                   	pop    edi
c001c374:	5d                   	pop    ebp
c001c375:	c3                   	ret    
c001c376:	66 90                	xchg   ax,ax
c001c378:	ba 20 00 00 00       	mov    edx,0x20
c001c37d:	29 ea                	sub    edx,ebp
c001c37f:	89 e9                	mov    ecx,ebp
c001c381:	d3 e0                	shl    eax,cl
c001c383:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c387:	89 f8                	mov    eax,edi
c001c389:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c38d:	88 d1                	mov    cl,dl
c001c38f:	d3 e8                	shr    eax,cl
c001c391:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c395:	09 c1                	or     ecx,eax
c001c397:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c39b:	89 e9                	mov    ecx,ebp
c001c39d:	d3 e7                	shl    edi,cl
c001c39f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3a3:	89 d8                	mov    eax,ebx
c001c3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3a9:	88 d1                	mov    cl,dl
c001c3ab:	d3 e8                	shr    eax,cl
c001c3ad:	89 c7                	mov    edi,eax
c001c3af:	89 e9                	mov    ecx,ebp
c001c3b1:	d3 e3                	shl    ebx,cl
c001c3b3:	89 f0                	mov    eax,esi
c001c3b5:	88 d1                	mov    cl,dl
c001c3b7:	d3 e8                	shr    eax,cl
c001c3b9:	09 d8                	or     eax,ebx
c001c3bb:	89 e9                	mov    ecx,ebp
c001c3bd:	d3 e6                	shl    esi,cl
c001c3bf:	89 f3                	mov    ebx,esi
c001c3c1:	89 fa                	mov    edx,edi
c001c3c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3c7:	89 d1                	mov    ecx,edx
c001c3c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3cd:	89 c6                	mov    esi,eax
c001c3cf:	89 d7                	mov    edi,edx
c001c3d1:	39 d1                	cmp    ecx,edx
c001c3d3:	72 27                	jb     c001c3fc <__umoddi3+0x10c>
c001c3d5:	74 21                	je     c001c3f8 <__umoddi3+0x108>
c001c3d7:	89 ca                	mov    edx,ecx
c001c3d9:	29 f3                	sub    ebx,esi
c001c3db:	19 fa                	sbb    edx,edi
c001c3dd:	89 d0                	mov    eax,edx
c001c3df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c3e3:	d3 e0                	shl    eax,cl
c001c3e5:	89 e9                	mov    ecx,ebp
c001c3e7:	d3 eb                	shr    ebx,cl
c001c3e9:	09 d8                	or     eax,ebx
c001c3eb:	d3 ea                	shr    edx,cl
c001c3ed:	83 c4 1c             	add    esp,0x1c
c001c3f0:	5b                   	pop    ebx
c001c3f1:	5e                   	pop    esi
c001c3f2:	5f                   	pop    edi
c001c3f3:	5d                   	pop    ebp
c001c3f4:	c3                   	ret    
c001c3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3f8:	39 c3                	cmp    ebx,eax
c001c3fa:	73 db                	jae    c001c3d7 <__umoddi3+0xe7>
c001c3fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c400:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c404:	89 d7                	mov    edi,edx
c001c406:	89 c6                	mov    esi,eax
c001c408:	eb cd                	jmp    c001c3d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c40a <_init>:
c001c40a:	55                   	push   ebp
c001c40b:	89 e5                	mov    ebp,esp
c001c40d:	e8 e2 3c fe ff       	call   c00000f4 <frame_dummy>
c001c412:	e8 e5 fa ff ff       	call   c001befc <__do_global_ctors_aux>
c001c417:	5d                   	pop    ebp
c001c418:	c3                   	ret    

Disassembly of section .fini:

c001c419 <_fini>:
c001c419:	55                   	push   ebp
c001c41a:	89 e5                	mov    ebp,esp
c001c41c:	e8 63 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c421:	5d                   	pop    ebp
c001c422:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c424 <Computer::~Computer()>:
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	ba d8 d6 01 c0       	mov    edx,0xc001d6d8
c001c42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c430:	89 10                	mov    DWORD PTR [eax],edx
c001c432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c436:	83 ec 0c             	sub    esp,0xc
c001c439:	50                   	push   eax
c001c43a:	e8 1b f5 fe ff       	call   c000b95a <Device::~Device()>
c001c43f:	83 c4 10             	add    esp,0x10
c001c442:	90                   	nop
c001c443:	83 c4 0c             	add    esp,0xc
c001c446:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c448 <Computer::~Computer()>:
c001c448:	83 ec 0c             	sub    esp,0xc
c001c44b:	83 ec 0c             	sub    esp,0xc
c001c44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c452:	e8 cd ff ff ff       	call   c001c424 <Computer::~Computer()>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	83 ec 08             	sub    esp,0x8
c001c45d:	68 70 01 00 00       	push   0x170
c001c462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c466:	e8 b8 e0 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001c46b:	83 c4 10             	add    esp,0x10
c001c46e:	83 c4 0c             	add    esp,0xc
c001c471:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c472 <idleCommon()>:
c001c472:	83 ec 0c             	sub    esp,0xc
c001c475:	fa                   	cli    
c001c476:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c47c:	e8 0f 74 ff ff       	call   c0013890 <schedule()>
c001c481:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c486:	48                   	dec    eax
c001c487:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c48c:	75 01                	jne    c001c48f <idleCommon()+0x1d>
c001c48e:	fb                   	sti    
c001c48f:	83 c4 0c             	add    esp,0xc
c001c492:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c494 <LinkedList<UnixFile>::~LinkedList()>:
c001c494:	90                   	nop
c001c495:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c496 <LinkedList<UnixFile>::LinkedList()>:
c001c496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c49a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4d6:	90                   	nop
c001c4d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c4d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c4d8:	83 ec 0c             	sub    esp,0xc
c001c4db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4e0:	75 10                	jne    c001c4f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c4e2:	83 ec 0c             	sub    esp,0xc
c001c4e5:	68 38 d9 01 c0       	push   0xc001d938
c001c4ea:	e8 ac 3d ff ff       	call   c001029b <KePanic(char const*)>
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4f8:	85 c0                	test   eax,eax
c001c4fa:	74 34                	je     c001c530 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c503:	85 c0                	test   eax,eax
c001c505:	74 29                	je     c001c530 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c50e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c512:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c519:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c51d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c527:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c52e:	eb 65                	jmp    c001c595 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c534:	8b 00                	mov    eax,DWORD PTR [eax]
c001c536:	85 c0                	test   eax,eax
c001c538:	75 4b                	jne    c001c585 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c541:	85 c0                	test   eax,eax
c001c543:	75 40                	jne    c001c585 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c549:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c54d:	89 10                	mov    DWORD PTR [eax],edx
c001c54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c553:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c557:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c561:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c56f:	85 c0                	test   eax,eax
c001c571:	74 22                	je     c001c595 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c573:	83 ec 0c             	sub    esp,0xc
c001c576:	68 5a d9 01 c0       	push   0xc001d95a
c001c57b:	e8 1b 3d ff ff       	call   c001029b <KePanic(char const*)>
c001c580:	83 c4 10             	add    esp,0x10
c001c583:	eb 10                	jmp    c001c595 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c585:	83 ec 0c             	sub    esp,0xc
c001c588:	68 64 d9 01 c0       	push   0xc001d964
c001c58d:	e8 09 3d ff ff       	call   c001029b <KePanic(char const*)>
c001c592:	83 c4 10             	add    esp,0x10
c001c595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c599:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c59c:	8d 50 01             	lea    edx,[eax+0x1]
c001c59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5a6:	90                   	nop
c001c5a7:	83 c4 0c             	add    esp,0xc
c001c5aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5ac <LinkedList<UnixFile>::getFirstElement()>:
c001c5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c5b4 <LinkedList<UnixFile>::removeFirst()>:
c001c5b4:	83 ec 0c             	sub    esp,0xc
c001c5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5bd:	85 c0                	test   eax,eax
c001c5bf:	75 12                	jne    c001c5d3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	68 70 d9 01 c0       	push   0xc001d970
c001c5c9:	e8 cd 3c ff ff       	call   c001029b <KePanic(char const*)>
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	eb 7e                	jmp    c001c651 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5dd:	85 c0                	test   eax,eax
c001c5df:	74 10                	je     c001c5f1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c5e1:	83 ec 0c             	sub    esp,0xc
c001c5e4:	68 bb d9 01 c0       	push   0xc001d9bb
c001c5e9:	e8 ad 3c ff ff       	call   c001029b <KePanic(char const*)>
c001c5ee:	83 c4 10             	add    esp,0x10
c001c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5fa:	85 c0                	test   eax,eax
c001c5fc:	75 33                	jne    c001c631 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c602:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c617:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c61a:	83 f8 01             	cmp    eax,0x1
c001c61d:	74 21                	je     c001c640 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c61f:	83 ec 0c             	sub    esp,0xc
c001c622:	68 94 d9 01 c0       	push   0xc001d994
c001c627:	e8 6f 3c ff ff       	call   c001029b <KePanic(char const*)>
c001c62c:	83 c4 10             	add    esp,0x10
c001c62f:	eb 0f                	jmp    c001c640 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c635:	8b 00                	mov    eax,DWORD PTR [eax]
c001c637:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63e:	89 10                	mov    DWORD PTR [eax],edx
c001c640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c644:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c647:	8d 50 ff             	lea    edx,[eax-0x1]
c001c64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c651:	83 c4 0c             	add    esp,0xc
c001c654:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c656 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c656:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c65a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c65d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c65e <DriverlessDevice::~DriverlessDevice()>:
c001c65e:	ba 3c e0 01 c0       	mov    edx,0xc001e03c
c001c663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c667:	89 10                	mov    DWORD PTR [eax],edx
c001c669:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c66d:	50                   	push   eax
c001c66e:	e8 e7 f2 fe ff       	call   c000b95a <Device::~Device()>
c001c673:	83 c4 04             	add    esp,0x4
c001c676:	90                   	nop
c001c677:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c678 <DriverlessDevice::~DriverlessDevice()>:
c001c678:	83 ec 0c             	sub    esp,0xc
c001c67b:	83 ec 0c             	sub    esp,0xc
c001c67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c682:	e8 d7 ff ff ff       	call   c001c65e <DriverlessDevice::~DriverlessDevice()>
c001c687:	83 c4 10             	add    esp,0x10
c001c68a:	83 ec 08             	sub    esp,0x8
c001c68d:	68 58 01 00 00       	push   0x158
c001c692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c696:	e8 88 de fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001c69b:	83 c4 10             	add    esp,0x10
c001c69e:	83 c4 0c             	add    esp,0xc
c001c6a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6a2 <LinkedList<Device>::addElement(Device*)>:
c001c6a2:	83 ec 0c             	sub    esp,0xc
c001c6a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6aa:	75 10                	jne    c001c6bc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6ac:	83 ec 0c             	sub    esp,0xc
c001c6af:	68 38 d9 01 c0       	push   0xc001d938
c001c6b4:	e8 e2 3b ff ff       	call   c001029b <KePanic(char const*)>
c001c6b9:	83 c4 10             	add    esp,0x10
c001c6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6c2:	85 c0                	test   eax,eax
c001c6c4:	74 3a                	je     c001c700 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6cd:	85 c0                	test   eax,eax
c001c6cf:	74 2f                	je     c001c700 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6dc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6f4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6fe:	eb 68                	jmp    c001c768 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c704:	8b 00                	mov    eax,DWORD PTR [eax]
c001c706:	85 c0                	test   eax,eax
c001c708:	75 4e                	jne    c001c758 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c711:	85 c0                	test   eax,eax
c001c713:	75 43                	jne    c001c758 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c719:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c71d:	89 10                	mov    DWORD PTR [eax],edx
c001c71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c723:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c727:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c731:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c73b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c742:	85 c0                	test   eax,eax
c001c744:	74 22                	je     c001c768 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c746:	83 ec 0c             	sub    esp,0xc
c001c749:	68 5a d9 01 c0       	push   0xc001d95a
c001c74e:	e8 48 3b ff ff       	call   c001029b <KePanic(char const*)>
c001c753:	83 c4 10             	add    esp,0x10
c001c756:	eb 10                	jmp    c001c768 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	68 64 d9 01 c0       	push   0xc001d964
c001c760:	e8 36 3b ff ff       	call   c001029b <KePanic(char const*)>
c001c765:	83 c4 10             	add    esp,0x10
c001c768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c76f:	8d 50 01             	lea    edx,[eax+0x1]
c001c772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c776:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c779:	90                   	nop
c001c77a:	83 c4 0c             	add    esp,0xc
c001c77d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c77e <LinkedList<Device>::LinkedList()>:
c001c77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c782:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c797:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7be:	90                   	nop
c001c7bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7c6:	85 c0                	test   eax,eax
c001c7c8:	75 0e                	jne    c001c7d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7d1:	85 c0                	test   eax,eax
c001c7d3:	75 03                	jne    c001c7d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7d5:	b0 01                	mov    al,0x1
c001c7d7:	c3                   	ret    
c001c7d8:	b0 00                	mov    al,0x0
c001c7da:	90                   	nop
c001c7db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c7dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c7dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c7e4:	83 ec 0c             	sub    esp,0xc
c001c7e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ed:	85 c0                	test   eax,eax
c001c7ef:	75 17                	jne    c001c808 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c7f1:	83 ec 0c             	sub    esp,0xc
c001c7f4:	68 70 d9 01 c0       	push   0xc001d970
c001c7f9:	e8 9d 3a ff ff       	call   c001029b <KePanic(char const*)>
c001c7fe:	83 c4 10             	add    esp,0x10
c001c801:	e9 92 00 00 00       	jmp    c001c898 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c806:	66 90                	xchg   ax,ax
c001c808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c80f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c812:	85 c0                	test   eax,eax
c001c814:	0f 95 c0             	setne  al
c001c817:	84 c0                	test   al,al
c001c819:	74 11                	je     c001c82c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c81b:	83 ec 0c             	sub    esp,0xc
c001c81e:	68 bb d9 01 c0       	push   0xc001d9bb
c001c823:	e8 73 3a ff ff       	call   c001029b <KePanic(char const*)>
c001c828:	83 c4 10             	add    esp,0x10
c001c82b:	90                   	nop
c001c82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c830:	8b 00                	mov    eax,DWORD PTR [eax]
c001c832:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c835:	85 c0                	test   eax,eax
c001c837:	0f 94 c0             	sete   al
c001c83a:	84 c0                	test   al,al
c001c83c:	74 36                	je     c001c874 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c842:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c85a:	83 f8 01             	cmp    eax,0x1
c001c85d:	74 25                	je     c001c884 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c85f:	83 ec 0c             	sub    esp,0xc
c001c862:	68 94 d9 01 c0       	push   0xc001d994
c001c867:	e8 2f 3a ff ff       	call   c001029b <KePanic(char const*)>
c001c86c:	83 c4 10             	add    esp,0x10
c001c86f:	eb 13                	jmp    c001c884 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c871:	8d 76 00             	lea    esi,[esi+0x0]
c001c874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c878:	8b 00                	mov    eax,DWORD PTR [eax]
c001c87a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c881:	89 10                	mov    DWORD PTR [eax],edx
c001c883:	90                   	nop
c001c884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c888:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c88b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c892:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c895:	8d 76 00             	lea    esi,[esi+0x0]
c001c898:	83 c4 0c             	add    esp,0xc
c001c89b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c89c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c89c:	83 ec 0c             	sub    esp,0xc
c001c89f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8a4:	75 12                	jne    c001c8b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8a6:	83 ec 0c             	sub    esp,0xc
c001c8a9:	68 38 d9 01 c0       	push   0xc001d938
c001c8ae:	e8 e8 39 ff ff       	call   c001029b <KePanic(char const*)>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	66 90                	xchg   ax,ax
c001c8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8be:	85 c0                	test   eax,eax
c001c8c0:	74 36                	je     c001c8f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8c9:	85 c0                	test   eax,eax
c001c8cb:	74 2b                	je     c001c8f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8d8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8f4:	eb 6a                	jmp    c001c960 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8f6:	66 90                	xchg   ax,ax
c001c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8fe:	85 c0                	test   eax,eax
c001c900:	75 4e                	jne    c001c950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c909:	85 c0                	test   eax,eax
c001c90b:	75 43                	jne    c001c950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c911:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c915:	89 10                	mov    DWORD PTR [eax],edx
c001c917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c91f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c929:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c934:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c937:	85 c0                	test   eax,eax
c001c939:	74 25                	je     c001c960 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c93b:	83 ec 0c             	sub    esp,0xc
c001c93e:	68 5a d9 01 c0       	push   0xc001d95a
c001c943:	e8 53 39 ff ff       	call   c001029b <KePanic(char const*)>
c001c948:	83 c4 10             	add    esp,0x10
c001c94b:	eb 13                	jmp    c001c960 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c94d:	8d 76 00             	lea    esi,[esi+0x0]
c001c950:	83 ec 0c             	sub    esp,0xc
c001c953:	68 64 d9 01 c0       	push   0xc001d964
c001c958:	e8 3e 39 ff ff       	call   c001029b <KePanic(char const*)>
c001c95d:	83 c4 10             	add    esp,0x10
c001c960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c964:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c967:	8d 50 01             	lea    edx,[eax+0x1]
c001c96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c96e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c971:	90                   	nop
c001c972:	83 c4 0c             	add    esp,0xc
c001c975:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c978 <ACPI::~ACPI()>:
c001c978:	83 ec 0c             	sub    esp,0xc
c001c97b:	ba b4 e5 01 c0       	mov    edx,0xc001e5b4
c001c980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c984:	89 10                	mov    DWORD PTR [eax],edx
c001c986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98a:	83 ec 0c             	sub    esp,0xc
c001c98d:	50                   	push   eax
c001c98e:	e8 c7 ef fe ff       	call   c000b95a <Device::~Device()>
c001c993:	83 c4 10             	add    esp,0x10
c001c996:	90                   	nop
c001c997:	83 c4 0c             	add    esp,0xc
c001c99a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c99c <ACPI::~ACPI()>:
c001c99c:	83 ec 0c             	sub    esp,0xc
c001c99f:	83 ec 0c             	sub    esp,0xc
c001c9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9a6:	e8 cd ff ff ff       	call   c001c978 <ACPI::~ACPI()>
c001c9ab:	83 c4 10             	add    esp,0x10
c001c9ae:	83 ec 08             	sub    esp,0x8
c001c9b1:	68 64 12 00 00       	push   0x1264
c001c9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ba:	e8 64 db fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	83 c4 0c             	add    esp,0xc
c001c9c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9c8 <LinkedList<Device>::~LinkedList()>:
c001c9c8:	90                   	nop
c001c9c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9cc <LinkedList<Device>::isEmpty()>:
c001c9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9d2:	85 c0                	test   eax,eax
c001c9d4:	75 0e                	jne    c001c9e4 <LinkedList<Device>::isEmpty()+0x18>
c001c9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9dd:	85 c0                	test   eax,eax
c001c9df:	75 03                	jne    c001c9e4 <LinkedList<Device>::isEmpty()+0x18>
c001c9e1:	b0 01                	mov    al,0x1
c001c9e3:	c3                   	ret    
c001c9e4:	b0 00                	mov    al,0x0
c001c9e6:	90                   	nop
c001c9e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c9e8 <LinkedList<Device>::getFirstElement()>:
c001c9e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c9f0 <LinkedList<Device>::removeFirst()>:
c001c9f0:	83 ec 0c             	sub    esp,0xc
c001c9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9f9:	85 c0                	test   eax,eax
c001c9fb:	75 17                	jne    c001ca14 <LinkedList<Device>::removeFirst()+0x24>
c001c9fd:	83 ec 0c             	sub    esp,0xc
c001ca00:	68 70 d9 01 c0       	push   0xc001d970
c001ca05:	e8 91 38 ff ff       	call   c001029b <KePanic(char const*)>
c001ca0a:	83 c4 10             	add    esp,0x10
c001ca0d:	e9 92 00 00 00       	jmp    c001caa4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca12:	66 90                	xchg   ax,ax
c001ca14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca1b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca21:	85 c0                	test   eax,eax
c001ca23:	74 13                	je     c001ca38 <LinkedList<Device>::removeFirst()+0x48>
c001ca25:	83 ec 0c             	sub    esp,0xc
c001ca28:	68 bb d9 01 c0       	push   0xc001d9bb
c001ca2d:	e8 69 38 ff ff       	call   c001029b <KePanic(char const*)>
c001ca32:	83 c4 10             	add    esp,0x10
c001ca35:	8d 76 00             	lea    esi,[esi+0x0]
c001ca38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca3e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca44:	85 c0                	test   eax,eax
c001ca46:	75 34                	jne    c001ca7c <LinkedList<Device>::removeFirst()+0x8c>
c001ca48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca64:	83 f8 01             	cmp    eax,0x1
c001ca67:	74 27                	je     c001ca90 <LinkedList<Device>::removeFirst()+0xa0>
c001ca69:	83 ec 0c             	sub    esp,0xc
c001ca6c:	68 94 d9 01 c0       	push   0xc001d994
c001ca71:	e8 25 38 ff ff       	call   c001029b <KePanic(char const*)>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	eb 15                	jmp    c001ca90 <LinkedList<Device>::removeFirst()+0xa0>
c001ca7b:	90                   	nop
c001ca7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca82:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8c:	89 10                	mov    DWORD PTR [eax],edx
c001ca8e:	66 90                	xchg   ax,ax
c001ca90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca97:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001caa1:	8d 76 00             	lea    esi,[esi+0x0]
c001caa4:	83 c4 0c             	add    esp,0xc
c001caa7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001caa8 <CPU::~CPU()>:
c001caa8:	83 ec 0c             	sub    esp,0xc
c001caab:	ba 50 e7 01 c0       	mov    edx,0xc001e750
c001cab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab4:	89 10                	mov    DWORD PTR [eax],edx
c001cab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caba:	83 ec 0c             	sub    esp,0xc
c001cabd:	50                   	push   eax
c001cabe:	e8 97 ee fe ff       	call   c000b95a <Device::~Device()>
c001cac3:	83 c4 10             	add    esp,0x10
c001cac6:	90                   	nop
c001cac7:	83 c4 0c             	add    esp,0xc
c001caca:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cacc <CPU::~CPU()>:
c001cacc:	83 ec 0c             	sub    esp,0xc
c001cacf:	83 ec 0c             	sub    esp,0xc
c001cad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cad6:	e8 cd ff ff ff       	call   c001caa8 <CPU::~CPU()>
c001cadb:	83 c4 10             	add    esp,0x10
c001cade:	83 ec 08             	sub    esp,0x8
c001cae1:	68 94 11 00 00       	push   0x1194
c001cae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caea:	e8 34 da fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001caef:	83 c4 10             	add    esp,0x10
c001caf2:	83 c4 0c             	add    esp,0xc
c001caf5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001caf8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001caf8:	90                   	nop
c001caf9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cafc <ThreadControlBlock::ThreadControlBlock()>:
c001cafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb00:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb0b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb16:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb21:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb37:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb43:	90                   	nop
c001cb44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb88:	90                   	nop
c001cb89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb93:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cb94 <PCI::~PCI()>:
c001cb94:	83 ec 0c             	sub    esp,0xc
c001cb97:	ba ec f3 01 c0       	mov    edx,0xc001f3ec
c001cb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba0:	89 10                	mov    DWORD PTR [eax],edx
c001cba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba6:	83 ec 0c             	sub    esp,0xc
c001cba9:	50                   	push   eax
c001cbaa:	e8 35 e8 fe ff       	call   c000b3e4 <Bus::~Bus()>
c001cbaf:	83 c4 10             	add    esp,0x10
c001cbb2:	90                   	nop
c001cbb3:	83 c4 0c             	add    esp,0xc
c001cbb6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cbb8 <PCI::~PCI()>:
c001cbb8:	83 ec 0c             	sub    esp,0xc
c001cbbb:	83 ec 0c             	sub    esp,0xc
c001cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbc2:	e8 cd ff ff ff       	call   c001cb94 <PCI::~PCI()>
c001cbc7:	83 c4 10             	add    esp,0x10
c001cbca:	83 ec 08             	sub    esp,0x8
c001cbcd:	68 5c 01 00 00       	push   0x15c
c001cbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd6:	e8 48 d9 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001cbdb:	83 c4 10             	add    esp,0x10
c001cbde:	83 c4 0c             	add    esp,0xc
c001cbe1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cbe2 <IDE::~IDE()>:
c001cbe2:	83 ec 0c             	sub    esp,0xc
c001cbe5:	ba a0 f4 01 c0       	mov    edx,0xc001f4a0
c001cbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbee:	89 10                	mov    DWORD PTR [eax],edx
c001cbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf4:	83 ec 0c             	sub    esp,0xc
c001cbf7:	50                   	push   eax
c001cbf8:	e8 d7 f1 fe ff       	call   c000bdd4 <HardDiskController::~HardDiskController()>
c001cbfd:	83 c4 10             	add    esp,0x10
c001cc00:	90                   	nop
c001cc01:	83 c4 0c             	add    esp,0xc
c001cc04:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc06 <IDE::~IDE()>:
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	83 ec 0c             	sub    esp,0xc
c001cc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc10:	e8 cd ff ff ff       	call   c001cbe2 <IDE::~IDE()>
c001cc15:	83 c4 10             	add    esp,0x10
c001cc18:	83 ec 08             	sub    esp,0x8
c001cc1b:	68 70 02 00 00       	push   0x270
c001cc20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc24:	e8 fa d8 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001cc29:	83 c4 10             	add    esp,0x10
c001cc2c:	83 c4 0c             	add    esp,0xc
c001cc2f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc30 <SATABus::~SATABus()>:
c001cc30:	83 ec 0c             	sub    esp,0xc
c001cc33:	ba f0 f4 01 c0       	mov    edx,0xc001f4f0
c001cc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3c:	89 10                	mov    DWORD PTR [eax],edx
c001cc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc42:	83 ec 0c             	sub    esp,0xc
c001cc45:	50                   	push   eax
c001cc46:	e8 89 f1 fe ff       	call   c000bdd4 <HardDiskController::~HardDiskController()>
c001cc4b:	83 c4 10             	add    esp,0x10
c001cc4e:	90                   	nop
c001cc4f:	83 c4 0c             	add    esp,0xc
c001cc52:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc54 <SATABus::~SATABus()>:
c001cc54:	83 ec 0c             	sub    esp,0xc
c001cc57:	83 ec 0c             	sub    esp,0xc
c001cc5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5e:	e8 cd ff ff ff       	call   c001cc30 <SATABus::~SATABus()>
c001cc63:	83 c4 10             	add    esp,0x10
c001cc66:	83 ec 08             	sub    esp,0x8
c001cc69:	68 64 01 00 00       	push   0x164
c001cc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc72:	e8 ac d8 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001cc77:	83 c4 10             	add    esp,0x10
c001cc7a:	83 c4 0c             	add    esp,0xc
c001cc7d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc7e <ATA::~ATA()>:
c001cc7e:	83 ec 0c             	sub    esp,0xc
c001cc81:	ba 30 f5 01 c0       	mov    edx,0xc001f530
c001cc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8a:	89 10                	mov    DWORD PTR [eax],edx
c001cc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc90:	83 ec 0c             	sub    esp,0xc
c001cc93:	50                   	push   eax
c001cc94:	e8 1d f2 fe ff       	call   c000beb6 <PhysicalDisk::~PhysicalDisk()>
c001cc99:	83 c4 10             	add    esp,0x10
c001cc9c:	90                   	nop
c001cc9d:	83 c4 0c             	add    esp,0xc
c001cca0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cca2 <ATA::~ATA()>:
c001cca2:	83 ec 0c             	sub    esp,0xc
c001cca5:	83 ec 0c             	sub    esp,0xc
c001cca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccac:	e8 cd ff ff ff       	call   c001cc7e <ATA::~ATA()>
c001ccb1:	83 c4 10             	add    esp,0x10
c001ccb4:	83 ec 08             	sub    esp,0x8
c001ccb7:	68 7c 01 00 00       	push   0x17c
c001ccbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc0:	e8 5e d8 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001ccc5:	83 c4 10             	add    esp,0x10
c001ccc8:	83 c4 0c             	add    esp,0xc
c001cccb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cccc <ATAPI::~ATAPI()>:
c001cccc:	83 ec 0c             	sub    esp,0xc
c001cccf:	ba 78 f5 01 c0       	mov    edx,0xc001f578
c001ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd8:	89 10                	mov    DWORD PTR [eax],edx
c001ccda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccde:	83 ec 0c             	sub    esp,0xc
c001cce1:	50                   	push   eax
c001cce2:	e8 cf f1 fe ff       	call   c000beb6 <PhysicalDisk::~PhysicalDisk()>
c001cce7:	83 c4 10             	add    esp,0x10
c001ccea:	90                   	nop
c001cceb:	83 c4 0c             	add    esp,0xc
c001ccee:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ccf0 <ATAPI::~ATAPI()>:
c001ccf0:	83 ec 0c             	sub    esp,0xc
c001ccf3:	83 ec 0c             	sub    esp,0xc
c001ccf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccfa:	e8 cd ff ff ff       	call   c001cccc <ATAPI::~ATAPI()>
c001ccff:	83 c4 10             	add    esp,0x10
c001cd02:	83 ec 08             	sub    esp,0x8
c001cd05:	68 84 01 00 00       	push   0x184
c001cd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0e:	e8 10 d8 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001cd13:	83 c4 10             	add    esp,0x10
c001cd16:	83 c4 0c             	add    esp,0xc
c001cd19:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd1a <SATA::~SATA()>:
c001cd1a:	83 ec 0c             	sub    esp,0xc
c001cd1d:	ba 2c f6 01 c0       	mov    edx,0xc001f62c
c001cd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd26:	89 10                	mov    DWORD PTR [eax],edx
c001cd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2c:	83 ec 0c             	sub    esp,0xc
c001cd2f:	50                   	push   eax
c001cd30:	e8 81 f1 fe ff       	call   c000beb6 <PhysicalDisk::~PhysicalDisk()>
c001cd35:	83 c4 10             	add    esp,0x10
c001cd38:	90                   	nop
c001cd39:	83 c4 0c             	add    esp,0xc
c001cd3c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd3e <SATA::~SATA()>:
c001cd3e:	83 ec 0c             	sub    esp,0xc
c001cd41:	83 ec 0c             	sub    esp,0xc
c001cd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd48:	e8 cd ff ff ff       	call   c001cd1a <SATA::~SATA()>
c001cd4d:	83 c4 10             	add    esp,0x10
c001cd50:	83 ec 08             	sub    esp,0x8
c001cd53:	68 7c 01 00 00       	push   0x17c
c001cd58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd5c:	e8 c2 d7 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001cd61:	83 c4 10             	add    esp,0x10
c001cd64:	83 c4 0c             	add    esp,0xc
c001cd67:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd68 <SATAPI::~SATAPI()>:
c001cd68:	83 ec 0c             	sub    esp,0xc
c001cd6b:	ba 64 f7 01 c0       	mov    edx,0xc001f764
c001cd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd74:	89 10                	mov    DWORD PTR [eax],edx
c001cd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd7a:	83 ec 0c             	sub    esp,0xc
c001cd7d:	50                   	push   eax
c001cd7e:	e8 33 f1 fe ff       	call   c000beb6 <PhysicalDisk::~PhysicalDisk()>
c001cd83:	83 c4 10             	add    esp,0x10
c001cd86:	90                   	nop
c001cd87:	83 c4 0c             	add    esp,0xc
c001cd8a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd8c <SATAPI::~SATAPI()>:
c001cd8c:	83 ec 0c             	sub    esp,0xc
c001cd8f:	83 ec 0c             	sub    esp,0xc
c001cd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd96:	e8 cd ff ff ff       	call   c001cd68 <SATAPI::~SATAPI()>
c001cd9b:	83 c4 10             	add    esp,0x10
c001cd9e:	83 ec 08             	sub    esp,0x8
c001cda1:	68 84 01 00 00       	push   0x184
c001cda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdaa:	e8 74 d7 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001cdaf:	83 c4 10             	add    esp,0x10
c001cdb2:	83 c4 0c             	add    esp,0xc
c001cdb5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cdb6 <IOAPIC::~IOAPIC()>:
c001cdb6:	83 ec 0c             	sub    esp,0xc
c001cdb9:	ba a4 f7 01 c0       	mov    edx,0xc001f7a4
c001cdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc2:	89 10                	mov    DWORD PTR [eax],edx
c001cdc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc8:	83 ec 0c             	sub    esp,0xc
c001cdcb:	50                   	push   eax
c001cdcc:	e8 89 eb fe ff       	call   c000b95a <Device::~Device()>
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	90                   	nop
c001cdd5:	83 c4 0c             	add    esp,0xc
c001cdd8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cdda <IOAPIC::~IOAPIC()>:
c001cdda:	83 ec 0c             	sub    esp,0xc
c001cddd:	83 ec 0c             	sub    esp,0xc
c001cde0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cde4:	e8 cd ff ff ff       	call   c001cdb6 <IOAPIC::~IOAPIC()>
c001cde9:	83 c4 10             	add    esp,0x10
c001cdec:	83 ec 08             	sub    esp,0x8
c001cdef:	68 68 01 00 00       	push   0x168
c001cdf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf8:	e8 26 d7 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001cdfd:	83 c4 10             	add    esp,0x10
c001ce00:	83 c4 0c             	add    esp,0xc
c001ce03:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce04 <APICTimer::~APICTimer()>:
c001ce04:	83 ec 0c             	sub    esp,0xc
c001ce07:	ba ec f7 01 c0       	mov    edx,0xc001f7ec
c001ce0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce10:	89 10                	mov    DWORD PTR [eax],edx
c001ce12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce16:	83 ec 0c             	sub    esp,0xc
c001ce19:	50                   	push   eax
c001ce1a:	e8 79 04 ff ff       	call   c000d298 <Timer::~Timer()>
c001ce1f:	83 c4 10             	add    esp,0x10
c001ce22:	90                   	nop
c001ce23:	83 c4 0c             	add    esp,0xc
c001ce26:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce28 <APICTimer::~APICTimer()>:
c001ce28:	83 ec 0c             	sub    esp,0xc
c001ce2b:	83 ec 0c             	sub    esp,0xc
c001ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce32:	e8 cd ff ff ff       	call   c001ce04 <APICTimer::~APICTimer()>
c001ce37:	83 c4 10             	add    esp,0x10
c001ce3a:	83 ec 08             	sub    esp,0x8
c001ce3d:	68 60 01 00 00       	push   0x160
c001ce42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce46:	e8 d8 d6 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001ce4b:	83 c4 10             	add    esp,0x10
c001ce4e:	83 c4 0c             	add    esp,0xc
c001ce51:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce54 <PIT::~PIT()>:
c001ce54:	83 ec 0c             	sub    esp,0xc
c001ce57:	ba 3c f8 01 c0       	mov    edx,0xc001f83c
c001ce5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce60:	89 10                	mov    DWORD PTR [eax],edx
c001ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce66:	83 ec 0c             	sub    esp,0xc
c001ce69:	50                   	push   eax
c001ce6a:	e8 29 04 ff ff       	call   c000d298 <Timer::~Timer()>
c001ce6f:	83 c4 10             	add    esp,0x10
c001ce72:	90                   	nop
c001ce73:	83 c4 0c             	add    esp,0xc
c001ce76:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce78 <PIT::~PIT()>:
c001ce78:	83 ec 0c             	sub    esp,0xc
c001ce7b:	83 ec 0c             	sub    esp,0xc
c001ce7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce82:	e8 cd ff ff ff       	call   c001ce54 <PIT::~PIT()>
c001ce87:	83 c4 10             	add    esp,0x10
c001ce8a:	83 ec 08             	sub    esp,0x8
c001ce8d:	68 5c 01 00 00       	push   0x15c
c001ce92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce96:	e8 88 d6 fe ff       	call   c000a523 <operator delete(void*, unsigned long)>
c001ce9b:	83 c4 10             	add    esp,0x10
c001ce9e:	83 c4 0c             	add    esp,0xc
c001cea1:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 41 e8 01 c0       	mov    esi,0xc001e841
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 5d e8 01 c0       	mov    esi,0xc001e85d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
