
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 49 9a 00 00       	call   c0009a69 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f9 0d 02 00       	call   c0020e1e <_init>
c0000025:	c3                   	ret    
c0000026:	bb 78 1a 02 c0       	mov    ebx,0xc0021a78
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 84 1a 02 c0    	cmp    ebx,0xc0021a84
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 5a 02 c0       	mov    eax,0xc0025a98
c0000049:	3d 98 5a 02 c0       	cmp    eax,0xc0025a98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 5a 02 c0       	push   0xc0025a98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 5a 02 c0       	mov    eax,0xc0025a98
c0000075:	2d 98 5a 02 c0       	sub    eax,0xc0025a98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 5a 02 c0       	push   0xc0025a98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 5c 02 c0 00 	cmp    BYTE PTR ds:0xc0025c20,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 8c 1a 02 c0       	mov    ebx,0xc0021a8c
c00000bb:	81 eb 88 1a 02 c0    	sub    ebx,0xc0021a88
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 88 1a 02 c0       	mov    esi,0xc0021a88
c00000ca:	a1 24 5c 02 c0       	mov    eax,ds:0xc0025c24
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 5c 02 c0       	mov    ds:0xc0025c24,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 5c 02 c0       	mov    eax,ds:0xc0025c24
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 5a 02 c0       	push   0xc0025a98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 5c 02 c0 01 	mov    BYTE PTR ds:0xc0025c20,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 5c 02 c0       	push   0xc0025c28
c000012c:	68 98 5a 02 c0       	push   0xc0025a98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 ce 73 01 00       	call   c00176a6 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 81 c4 00 00       	call   c000c771 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 ac 73 01 00       	call   c00176a6 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 5b 78 01 00       	call   c0017b74 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 66 7e 01 00       	call   c0018188 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 70 60 02 c0 	lgdtd  ds:0xc0026070
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 fe e1 00 00       	call   c000e715 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 62 83 00 00       	jmp    c00088e2 <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 40 5c 02 c0       	mov    ds:0xc0025c40,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 40 5c 02 c0    	mov    DWORD PTR ds:0xc0025c40,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 40 5c 02 c0    	mov    ebx,DWORD PTR ds:0xc0025c40
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 a0 1a 02 c0 02 	test   BYTE PTR [edx-0x3ffde560],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 a0 1a 02 c0 01 	test   BYTE PTR [edx-0x3ffde560],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 a0 1a 02 c0 08 	test   BYTE PTR [edx-0x3ffde560],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 a0 1a 02 c0 04 	test   BYTE PTR [ebx-0x3ffde560],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 a0 1a 02 c0 01 	test   BYTE PTR [edx-0x3ffde560],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 60 5c 02 c0    	mov    ecx,DWORD PTR ds:0xc0025c60
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 60 5c 02 c0    	mov    DWORD PTR ds:0xc0025c60,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 64 5c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda39c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 64 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda39c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 60 5c 02 c0    	mov    DWORD PTR ds:0xc0025c60,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 8c 5c 02 c0    	cmp    DWORD PTR ds:0xc0025c8c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 9c 5c 02 c0    	mov    ecx,DWORD PTR ds:0xc0025c9c
c0000d6c:	c7 42 0c 94 5c 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025c94
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 9c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c9c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 8c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c8c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 60 5c 02 c0 02 	test   BYTE PTR ds:0xc0025c60,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 1f 8a 00 00       	call   c000986c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 61 89 00 00       	call   c000986c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 4b 89 00 00       	call   c000986c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 27 89 00 00       	call   c000986c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 60 5c 02 c0    	mov    edi,DWORD PTR ds:0xc0025c60
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 64 5c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda39c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 64 5c 02 c0 	mov    DWORD PTR [edx*4-0x3ffda39c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 94 5c 02 c0 	lea    edx,[eax*8-0x3ffda36c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d a0 5c 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ca0
c00010ee:	81 fb 94 5c 02 c0    	cmp    ebx,0xc0025c94
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 94 5c 02 c0       	cmp    eax,0xc0025c94
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 90 5c 02 c0    	cmp    DWORD PTR ds:0xc0025c90,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 9c 5c 02 c0       	mov    ds:0xc0025c9c,eax
c000112a:	a3 a0 5c 02 c0       	mov    ds:0xc0025ca0,eax
c000112f:	a3 90 5c 02 c0       	mov    ds:0xc0025c90,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 94 5c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025c94
c000113d:	c7 40 0c 94 5c 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025c94
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 a0 5c 02 c0       	mov    ds:0xc0025ca0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 94 5c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025c94
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 58 5c 02 c0 	lea    ebp,[edx*4-0x3ffda3a8]
c000118e:	8b 14 95 60 5c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda3a0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 60 5c 02 c0 	lea    ecx,[edx*4-0x3ffda3a0]
c00011a9:	8b 14 95 60 5c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda3a0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 94 5f 02 c0 	or     DWORD PTR [edi*4-0x3ffda06c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 94 5c 02 c0 	lea    eax,[eax*8-0x3ffda36c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 9c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c9c,ecx
c0001263:	89 0d a0 5c 02 c0    	mov    DWORD PTR ds:0xc0025ca0,ecx
c0001269:	c7 41 08 94 5c 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025c94
c0001270:	c7 41 0c 94 5c 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025c94
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 8c 5c 02 c0 	lea    edx,[ecx*8-0x3ffda374]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 94 5f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffda06c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 94 5f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffda06c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 8c 5c 02 c0 	lea    edx,[eax*4-0x3ffda374]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 94 5f 02 c0 	mov    DWORD PTR [ebx*4-0x3ffda06c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 9c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c9c,edi
c0001336:	89 3d a0 5c 02 c0    	mov    DWORD PTR ds:0xc0025ca0,edi
c000133c:	c7 47 08 94 5c 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025c94
c0001343:	c7 47 0c 94 5c 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025c94
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 90 5c 02 c0    	mov    DWORD PTR ds:0xc0025c90,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 8c 5c 02 c0       	mov    eax,ds:0xc0025c8c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 8c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c8c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 60 5c 02 c0       	mov    edx,0xc0025c60
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 60 5c 02 c0 00 	cmp    DWORD PTR ds:0xc0025c60,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fb4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d b4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 8c 5c 02 c0    	cmp    DWORD PTR ds:0xc0025c8c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 8c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c8c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 60 5c 02 c0 00 	cmp    DWORD PTR ds:0xc0025c60,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 bc 5f 02 c0    	push   DWORD PTR ds:0xc0025fbc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 60 5c 02 c0 00 	cmp    DWORD PTR ds:0xc0025c60,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 bc 5f 02 c0       	mov    eax,ds:0xc0025fbc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 8c 5c 02 c0 00 	cmp    DWORD PTR ds:0xc0025c8c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 8c 5c 02 c0       	mov    eax,ds:0xc0025c8c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 64 5c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda39c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 94 5c 02 c0       	mov    eax,0xc0025c94
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 8c 5f 02 c0       	cmp    eax,0xc0025f8c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 c4 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fc4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 d4 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fd4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 a4 1b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde45c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 60 5c 02 c0       	mov    eax,ds:0xc0025c60
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 60 5c 02 c0       	mov    ds:0xc0025c60,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ac 5f 02 c0    	mov    DWORD PTR ds:0xc0025fac,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fb4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 00 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8900]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 30 92 01 00       	jmp    c001ad56 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 00 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8900]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 62 92 01 00       	jmp    c001ad9e <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 00 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8900]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 8b 92 01 00       	jmp    c001ade6 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 c6 ed 01 00       	call   c0020c04 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 c0 1c 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffde340]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 c0 1c 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffde340]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba c0 1b 02 c0       	mov    edx,0xc0021bc0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 84 47 02 c0       	mov    edx,0xc0024784
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ec 1c 02 c0       	mov    edx,0xc0021cec
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 00 60 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffda000]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 e0 5f 02 c0    	mov    ax,ds:0xc0025fe0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 e0 5f 02 c0    	mov    ds:0xc0025fe0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 c3 db 01 00       	call   c0020c04 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 fd 4f 00 00       	call   c00085da <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 f2 1c 02 c0       	mov    eax,0xc0021cf2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 7f 48 00 00       	call   c00085f2 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 40 1c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde3c0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 fb 1c 02 c0       	mov    eax,0xc0021cfb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 5b 48 00 00       	call   c00086f4 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 c0 1c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde340]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 37 47 00 00       	call   c00086f4 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 1e 47 00 00       	call   c00086f4 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 4b 46 00 00       	call   c00086f4 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 38 46 00 00       	call   c00086f4 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 8e c5 01 00       	call   c0020c04 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba c0 1b 02 c0       	mov    edx,0xc0021bc0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba d0 1b 02 c0       	mov    edx,0xc0021bd0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 81 3a 00 00       	call   c0008686 <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 00 60 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda000]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 00 60 02 c0 	mov    DWORD PTR [edx*4-0x3ffda000],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2a 33 00 00       	call   c00085da <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 65 2c 00 00       	call   c00085da <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 55 af 01 00       	call   c0020c04 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 3b af 01 00       	call   c0020c04 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 38 26 00 00       	call   c00085da <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 66 25 00 00       	call   c00085da <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d5 24 00 00       	call   c00085da <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 93 20 00 00       	call   c00085da <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c5 1f 00 00       	call   c00085da <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 76 1b 00 00       	call   c00085da <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 94 1a 00 00       	call   c00085da <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b5 19 00 00       	call   c00085da <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 3e 19 00 00       	call   c0008686 <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 17 1c 02 c0       	mov    eax,0xc0021c17
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 d4 17 00 00       	call   c00086f4 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c5 16 00 00       	call   c00085f2 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 10 1c 02 c0       	mov    eax,0xc0021c10
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 d4 9a 01 00       	call   c0020c04 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 00 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda000]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 00 1c 02 c0       	mov    esi,0xc0021c00
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 48 94 01 00       	call   c0020c04 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 0c 0e 00 00       	call   c00086f4 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 e0 0d 00 00       	call   c00086f4 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba e0 1b 02 c0       	mov    edx,0xc0021be0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba f0 1b 02 c0       	mov    edx,0xc0021bf0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 02 1d 02 c0       	mov    edx,0xc0021d02
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 0e 1d 02 c0       	mov    edx,0xc0021d0e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 22 1d 02 c0       	mov    edx,0xc0021d22
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 75 00 00 00       	call   c00085da <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 58 00 00 00       	call   c00085da <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 d0 13 00 00       	call   c00099a3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    

c00085da <ff_memfree>:
c00085da:	83 ec 0c             	sub    esp,0xc
c00085dd:	83 ec 0c             	sub    esp,0xc
c00085e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e4:	e8 ca 13 00 00       	call   c00099b3 <free>
c00085e9:	83 c4 10             	add    esp,0x10
c00085ec:	90                   	nop
c00085ed:	83 c4 0c             	add    esp,0xc
c00085f0:	c3                   	ret    
c00085f1:	90                   	nop

c00085f2 <ff_uni2oem>:
c00085f2:	83 ec 14             	sub    esp,0x14
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085fd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008604:	c7 44 24 0c 40 20 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022040
c000860c:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008611:	77 0b                	ja     c000861e <ff_uni2oem+0x2c>
c0008613:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008617:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861c:	eb 5e                	jmp    c000867c <ff_uni2oem+0x8a>
c000861e:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008626:	77 54                	ja     c000867c <ff_uni2oem+0x8a>
c0008628:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000862e:	75 4c                	jne    c000867c <ff_uni2oem+0x8a>
c0008630:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008637:	eb 0d                	jmp    c0008646 <ff_uni2oem+0x54>
c0008639:	90                   	nop
c000863a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000863f:	40                   	inc    eax
c0008640:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008645:	90                   	nop
c0008646:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864c:	77 1c                	ja     c000866a <ff_uni2oem+0x78>
c000864e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008653:	01 c0                	add    eax,eax
c0008655:	89 c2                	mov    edx,eax
c0008657:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865b:	01 d0                	add    eax,edx
c000865d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008660:	0f b7 c0             	movzx  eax,ax
c0008663:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008667:	75 d1                	jne    c000863a <ff_uni2oem+0x48>
c0008669:	90                   	nop
c000866a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000866f:	83 e8 80             	sub    eax,0xffffff80
c0008672:	25 ff 00 00 00       	and    eax,0xff
c0008677:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008681:	83 c4 14             	add    esp,0x14
c0008684:	c3                   	ret    
c0008685:	90                   	nop

c0008686 <ff_oem2uni>:
c0008686:	83 ec 18             	sub    esp,0x18
c0008689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008691:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008696:	66 89 04 24          	mov    WORD PTR [esp],ax
c000869a:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a1:	c7 44 24 10 40 20 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022040
c00086a9:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086af:	77 0b                	ja     c00086bc <ff_oem2uni+0x36>
c00086b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086ba:	eb 2e                	jmp    c00086ea <ff_oem2uni+0x64>
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 26                	jne    c00086ea <ff_oem2uni+0x64>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1d                	ja     c00086ea <ff_oem2uni+0x64>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	90                   	nop
c00086ea:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086ef:	83 c4 18             	add    esp,0x18
c00086f2:	c3                   	ret    
c00086f3:	90                   	nop

c00086f4 <ff_wtoupper>:
c00086f4:	83 ec 10             	sub    esp,0x10
c00086f7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00086ff:	0f 87 43 01 00 00    	ja     c0008848 <ff_wtoupper+0x154>
c0008705:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008709:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000870e:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008715:	77 07                	ja     c000871e <ff_wtoupper+0x2a>
c0008717:	b8 40 1e 02 c0       	mov    eax,0xc0021e40
c000871c:	eb 06                	jmp    c0008724 <ff_wtoupper+0x30>
c000871e:	b8 80 1d 02 c0       	mov    eax,0xc0021d80
c0008723:	90                   	nop
c0008724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000872c:	8d 50 02             	lea    edx,[eax+0x2]
c000872f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008733:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008736:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000873b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008741:	0f 84 f7 00 00 00    	je     c000883e <ff_wtoupper+0x14a>
c0008747:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000874c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008751:	0f 82 e7 00 00 00    	jb     c000883e <ff_wtoupper+0x14a>
c0008757:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000875b:	8d 50 02             	lea    edx,[eax+0x2]
c000875e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008762:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008765:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000876a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000876f:	66 c1 e8 08          	shr    ax,0x8
c0008773:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008778:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000877f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008784:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008789:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000878e:	01 ca                	add    edx,ecx
c0008790:	39 d0                	cmp    eax,edx
c0008792:	0f 8d 88 00 00 00    	jge    c0008820 <ff_wtoupper+0x12c>
c0008798:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000879d:	83 f8 08             	cmp    eax,0x8
c00087a0:	0f 87 96 00 00 00    	ja     c000883c <ff_wtoupper+0x148>
c00087a6:	8b 04 85 40 1d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde2c0]
c00087ad:	ff e0                	jmp    eax
c00087af:	90                   	nop
c00087b0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087b5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ba:	29 c2                	sub    edx,eax
c00087bc:	89 d0                	mov    eax,edx
c00087be:	01 c0                	add    eax,eax
c00087c0:	89 c2                	mov    edx,eax
c00087c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087c6:	01 d0                	add    eax,edx
c00087c8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087cb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d0:	eb 4c                	jmp    c000881e <ff_wtoupper+0x12a>
c00087d2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087d7:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087db:	83 e0 01             	and    eax,0x1
c00087de:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087e3:	eb 39                	jmp    c000881e <ff_wtoupper+0x12a>
c00087e5:	90                   	nop
c00087e6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087ec:	eb 30                	jmp    c000881e <ff_wtoupper+0x12a>
c00087ee:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087f4:	eb 28                	jmp    c000881e <ff_wtoupper+0x12a>
c00087f6:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00087fc:	eb 20                	jmp    c000881e <ff_wtoupper+0x12a>
c00087fe:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008804:	eb 18                	jmp    c000881e <ff_wtoupper+0x12a>
c0008806:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000880c:	eb 10                	jmp    c000881e <ff_wtoupper+0x12a>
c000880e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008814:	eb 08                	jmp    c000881e <ff_wtoupper+0x12a>
c0008816:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000881d:	90                   	nop
c000881e:	eb 1c                	jmp    c000883c <ff_wtoupper+0x148>
c0008820:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008826:	0f 85 fc fe ff ff    	jne    c0008728 <ff_wtoupper+0x34>
c000882c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008831:	01 c0                	add    eax,eax
c0008833:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008837:	e9 ec fe ff ff       	jmp    c0008728 <ff_wtoupper+0x34>
c000883c:	90                   	nop
c000883d:	90                   	nop
c000883e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008843:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008847:	90                   	nop
c0008848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000884c:	83 c4 10             	add    esp,0x10
c000884f:	c3                   	ret    

c0008850 <CPU::current()>:
c0008850:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0008855:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000885b:	c3                   	ret    

c000885c <operator new(unsigned long)>:
c000885c:	e9 42 11 00 00       	jmp    c00099a3 <malloc>

c0008861 <operator delete(void*)>:
c0008861:	e9 5d 11 00 00       	jmp    c00099c3 <rfree>

c0008866 <disableIRQs()>:
c0008866:	fa                   	cli    
c0008867:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c000886d:	c3                   	ret    

c000886e <enableIRQs()>:
c000886e:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0008873:	48                   	dec    eax
c0008874:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0008879:	75 01                	jne    c000887c <enableIRQs()+0xe>
c000887b:	fb                   	sti    
c000887c:	c3                   	ret    

c000887d <lockScheduler()>:
c000887d:	fa                   	cli    
c000887e:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0008884:	c3                   	ret    

c0008885 <unlockScheduler()>:
c0008885:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000888a:	48                   	dec    eax
c000888b:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0008890:	75 01                	jne    c0008893 <unlockScheduler()+0xe>
c0008892:	fb                   	sti    
c0008893:	c3                   	ret    

c0008894 <lockStuff()>:
c0008894:	fa                   	cli    
c0008895:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c000889b:	ff 05 64 75 02 c0    	inc    DWORD PTR ds:0xc0027564
c00088a1:	c3                   	ret    

c00088a2 <unlockStuff()>:
c00088a2:	83 ec 0c             	sub    esp,0xc
c00088a5:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c00088aa:	48                   	dec    eax
c00088ab:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c00088b0:	75 18                	jne    c00088ca <unlockStuff()+0x28>
c00088b2:	83 3d 60 75 02 c0 00 	cmp    DWORD PTR ds:0xc0027560,0x0
c00088b9:	74 0f                	je     c00088ca <unlockStuff()+0x28>
c00088bb:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c00088c5:	e8 06 f5 00 00       	call   c0017dd0 <schedule()>
c00088ca:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00088cf:	48                   	dec    eax
c00088d0:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00088d5:	75 01                	jne    c00088d8 <unlockStuff()+0x36>
c00088d7:	fb                   	sti    
c00088d8:	83 c4 0c             	add    esp,0xc
c00088db:	c3                   	ret    

c00088dc <Virt::getAKernelVAS()>:
c00088dc:	a1 d0 61 02 c0       	mov    eax,ds:0xc00261d0
c00088e1:	c3                   	ret    

c00088e2 <__not_memcpy>:
c00088e2:	57                   	push   edi
c00088e3:	56                   	push   esi
c00088e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00088f0:	89 c7                	mov    edi,eax
c00088f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00088f4:	5e                   	pop    esi
c00088f5:	5f                   	pop    edi
c00088f6:	c3                   	ret    
c00088f7:	90                   	nop

c00088f8 <Krnl::resolveCompatibilitySymbol(char*)>:
c00088f8:	83 ec 0c             	sub    esp,0xc
c00088fb:	83 ec 08             	sub    esp,0x8
c00088fe:	68 40 21 02 c0       	push   0xc0022140
c0008903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008907:	e8 c0 7e ff ff       	call   c00007cc <strcmp>
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	85 c0                	test   eax,eax
c0008911:	0f 94 c0             	sete   al
c0008914:	84 c0                	test   al,al
c0008916:	74 0a                	je     c0008922 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c0008918:	b8 68 60 02 c0       	mov    eax,0xc0026068
c000891d:	e9 e6 00 00 00       	jmp    c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0x110>
c0008922:	83 ec 08             	sub    esp,0x8
c0008925:	68 49 21 02 c0       	push   0xc0022149
c000892a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000892e:	e8 99 7e ff ff       	call   c00007cc <strcmp>
c0008933:	83 c4 10             	add    esp,0x10
c0008936:	85 c0                	test   eax,eax
c0008938:	0f 94 c0             	sete   al
c000893b:	84 c0                	test   al,al
c000893d:	74 0b                	je     c000894a <Krnl::resolveCompatibilitySymbol(char*)+0x52>
c000893f:	b8 04 0c 02 c0       	mov    eax,0xc0020c04
c0008944:	e9 bf 00 00 00       	jmp    c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0x110>
c0008949:	90                   	nop
c000894a:	83 ec 08             	sub    esp,0x8
c000894d:	68 53 21 02 c0       	push   0xc0022153
c0008952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008956:	e8 71 7e ff ff       	call   c00007cc <strcmp>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	85 c0                	test   eax,eax
c0008960:	0f 94 c0             	sete   al
c0008963:	84 c0                	test   al,al
c0008965:	74 0b                	je     c0008972 <Krnl::resolveCompatibilitySymbol(char*)+0x7a>
c0008967:	b8 38 09 02 c0       	mov    eax,0xc0020938
c000896c:	e9 97 00 00 00       	jmp    c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0x110>
c0008971:	90                   	nop
c0008972:	83 ec 08             	sub    esp,0x8
c0008975:	68 5c 21 02 c0       	push   0xc002215c
c000897a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000897e:	e8 49 7e ff ff       	call   c00007cc <strcmp>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	85 c0                	test   eax,eax
c0008988:	0f 94 c0             	sete   al
c000898b:	84 c0                	test   al,al
c000898d:	74 07                	je     c0008996 <Krnl::resolveCompatibilitySymbol(char*)+0x9e>
c000898f:	b8 04 0d 02 c0       	mov    eax,0xc0020d04
c0008994:	eb 72                	jmp    c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0x110>
c0008996:	83 ec 08             	sub    esp,0x8
c0008999:	68 66 21 02 c0       	push   0xc0022166
c000899e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a2:	e8 25 7e ff ff       	call   c00007cc <strcmp>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	85 c0                	test   eax,eax
c00089ac:	0f 94 c0             	sete   al
c00089af:	84 c0                	test   al,al
c00089b1:	74 07                	je     c00089ba <Krnl::resolveCompatibilitySymbol(char*)+0xc2>
c00089b3:	b8 84 0a 02 c0       	mov    eax,0xc0020a84
c00089b8:	eb 4e                	jmp    c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0x110>
c00089ba:	83 ec 08             	sub    esp,0x8
c00089bd:	68 6f 21 02 c0       	push   0xc002216f
c00089c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089c6:	e8 01 7e ff ff       	call   c00007cc <strcmp>
c00089cb:	83 c4 10             	add    esp,0x10
c00089ce:	85 c0                	test   eax,eax
c00089d0:	0f 94 c0             	sete   al
c00089d3:	84 c0                	test   al,al
c00089d5:	74 07                	je     c00089de <Krnl::resolveCompatibilitySymbol(char*)+0xe6>
c00089d7:	b8 6c 60 02 c0       	mov    eax,0xc002606c
c00089dc:	eb 2a                	jmp    c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0x110>
c00089de:	83 ec 08             	sub    esp,0x8
c00089e1:	68 7c 21 02 c0       	push   0xc002217c
c00089e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ea:	e8 dd 7d ff ff       	call   c00007cc <strcmp>
c00089ef:	83 c4 10             	add    esp,0x10
c00089f2:	85 c0                	test   eax,eax
c00089f4:	0f 94 c0             	sete   al
c00089f7:	84 c0                	test   al,al
c00089f9:	74 07                	je     c0008a02 <Krnl::resolveCompatibilitySymbol(char*)+0x10a>
c00089fb:	b8 6d 60 02 c0       	mov    eax,0xc002606d
c0008a00:	eb 06                	jmp    c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0x110>
c0008a02:	b8 00 00 00 00       	mov    eax,0x0
c0008a07:	90                   	nop
c0008a08:	83 c4 0c             	add    esp,0xc
c0008a0b:	c3                   	ret    

c0008a0c <Computer::close(int, int, void*)>:
c0008a0c:	57                   	push   edi
c0008a0d:	56                   	push   esi
c0008a0e:	53                   	push   ebx
c0008a0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a17:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a1b:	83 ec 0c             	sub    esp,0xc
c0008a1e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a24:	e8 a5 55 00 00       	call   c000dfce <Device::closeAll()>
c0008a29:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a2f:	83 c4 10             	add    esp,0x10
c0008a32:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a34:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a38:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a48:	5b                   	pop    ebx
c0008a49:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a4c:	5e                   	pop    esi
c0008a4d:	5f                   	pop    edi
c0008a4e:	ff e0                	jmp    eax

c0008a50 <Krnl::firstTask()>:
c0008a50:	53                   	push   ebx
c0008a51:	83 ec 14             	sub    esp,0x14
c0008a54:	68 89 21 02 c0       	push   0xc0022189
c0008a59:	e8 9f 0f 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008a5e:	fb                   	sti    
c0008a5f:	c7 04 24 a0 21 02 c0 	mov    DWORD PTR [esp],0xc00221a0
c0008a66:	e8 92 0f 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008a6b:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a72:	e8 2c 0f 00 00       	call   c00099a3 <malloc>
c0008a77:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a7e:	89 c3                	mov    ebx,eax
c0008a80:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c0008a86:	68 b9 21 02 c0       	push   0xc00221b9
c0008a8b:	6a 01                	push   0x1
c0008a8d:	50                   	push   eax
c0008a8e:	e8 2f ef 00 00       	call   c00179c2 <Process::Process(bool, char const*, Process*, char**)>
c0008a93:	83 c4 20             	add    esp,0x20
c0008a96:	68 ff 00 00 00       	push   0xff
c0008a9b:	6a 00                	push   0x0
c0008a9d:	68 a1 93 00 c0       	push   0xc00093a1
c0008aa2:	53                   	push   ebx
c0008aa3:	e8 16 f1 00 00       	call   c0017bbe <Process::createThread(void (*)(void*), void*, int)>
c0008aa8:	6a 7a                	push   0x7a
c0008aaa:	6a 00                	push   0x0
c0008aac:	68 a2 85 01 c0       	push   0xc00185a2
c0008ab1:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c0008ab7:	e8 02 f1 00 00       	call   c0017bbe <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	83 c4 14             	add    esp,0x14
c0008abf:	a3 48 75 02 c0       	mov    ds:0xc0027548,eax
c0008ac4:	68 60 23 02 c0       	push   0xc0022360
c0008ac9:	c6 05 6d 60 02 c0 01 	mov    BYTE PTR ds:0xc002606d,0x1
c0008ad0:	e8 28 0f 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008ad5:	e8 7b fe 00 00       	call   c0018955 <Vm::initialise8086()>
c0008ada:	e8 bb 42 00 00       	call   c000cd9a <Fs::initVFS()>
c0008adf:	c7 04 24 c6 21 02 c0 	mov    DWORD PTR [esp],0xc00221c6
c0008ae6:	e8 12 0f 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008aeb:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0008af0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008af6:	8b 10                	mov    edx,DWORD PTR [eax]
c0008af8:	6a 00                	push   0x0
c0008afa:	6a 00                	push   0x0
c0008afc:	6a 00                	push   0x0
c0008afe:	50                   	push   eax
c0008aff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b02:	83 c4 14             	add    esp,0x14
c0008b05:	68 60 23 02 c0       	push   0xc0022360
c0008b0a:	e8 ee 0e 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008b0f:	e8 32 d7 00 00       	call   c0016246 <Sys::loadSyscalls()>
c0008b14:	e8 21 b6 00 00       	call   c001413a <Krnl::loadSystemEnv()>
c0008b19:	83 c4 0c             	add    esp,0xc
c0008b1c:	6a 3a                	push   0x3a
c0008b1e:	68 e0 21 02 c0       	push   0xc00221e0
c0008b23:	68 e9 21 02 c0       	push   0xc00221e9
c0008b28:	e8 dc c4 00 00       	call   c0015009 <Reg::readIntWithDefault(char*, char*, int)>
c0008b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b30:	e8 51 4d 00 00       	call   c000d886 <User::loadClockSettings(int)>
c0008b35:	c7 04 24 84 23 02 c0 	mov    DWORD PTR [esp],0xc0022384
c0008b3c:	e8 bc 0e 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008b41:	58                   	pop    eax
c0008b42:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0008b47:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b4d:	e8 3c 54 00 00       	call   c000df8e <Device::loadDriversForAll()>
c0008b52:	c7 04 24 f1 21 02 c0 	mov    DWORD PTR [esp],0xc00221f1
c0008b59:	e8 9f 0e 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008b5e:	e8 3f b1 00 00       	call   c0013ca2 <Krnl::startCPUs()>
c0008b63:	c7 04 24 0b 22 02 c0 	mov    DWORD PTR [esp],0xc002220b
c0008b6a:	e8 8e 0e 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008b6f:	5a                   	pop    edx
c0008b70:	8b 1d 68 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026068
c0008b76:	59                   	pop    ecx
c0008b77:	6a 01                	push   0x1
c0008b79:	68 1c 22 02 c0       	push   0xc002221c
c0008b7e:	e8 93 e8 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c0008b83:	5a                   	pop    edx
c0008b84:	59                   	pop    ecx
c0008b85:	53                   	push   ebx
c0008b86:	50                   	push   eax
c0008b87:	e8 bb ea 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c0008b8c:	83 c4 10             	add    esp,0x10
c0008b8f:	83 ec 0c             	sub    esp,0xc
c0008b92:	6a 02                	push   0x2
c0008b94:	e8 19 f4 00 00       	call   c0017fb2 <blockTask(TaskState)>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	eb f1                	jmp    c0008b8f <Krnl::firstTask()+0x13f>

c0008b9e <Computer::Computer()>:
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ba5:	83 ec 08             	sub    esp,0x8
c0008ba8:	68 38 22 02 c0       	push   0xc0022238
c0008bad:	50                   	push   eax
c0008bae:	e8 95 54 00 00       	call   c000e048 <Device::Device(char const*)>
c0008bb3:	83 c4 10             	add    esp,0x10
c0008bb6:	ba 34 24 02 c0       	mov    edx,0xc0022434
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	89 10                	mov    DWORD PTR [eax],edx
c0008bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd3:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008be7:	83 ca 04             	or     edx,0x4
c0008bea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008bfa:	0f b6 d0             	movzx  edx,al
c0008bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c01:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c12:	0f b6 d0             	movzx  edx,al
c0008c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c19:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c22:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c28:	8d 50 01             	lea    edx,[eax+0x1]
c0008c2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c2f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c35:	0f b6 d0             	movzx  edx,al
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c40:	83 e1 3f             	and    ecx,0x3f
c0008c43:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c69:	0f b6 d0             	movzx  edx,al
c0008c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c70:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c7f:	8d 50 01             	lea    edx,[eax+0x1]
c0008c82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c86:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c8c:	0f b6 d0             	movzx  edx,al
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c97:	83 e1 3f             	and    ecx,0x3f
c0008c9a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc0:	0f b6 d0             	movzx  edx,al
c0008cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cd6:	8d 50 01             	lea    edx,[eax+0x1]
c0008cd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cdd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ce3:	0f b6 d0             	movzx  edx,al
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cee:	83 e1 3f             	and    ecx,0x3f
c0008cf1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cf5:	90                   	nop
c0008cf6:	83 c4 0c             	add    esp,0xc
c0008cf9:	c3                   	ret    

c0008cfa <Computer::setBootMessage(char const*)>:
c0008cfa:	c3                   	ret    
c0008cfb:	90                   	nop

c0008cfc <Computer::detectFeatures()>:
c0008cfc:	55                   	push   ebp
c0008cfd:	57                   	push   edi
c0008cfe:	56                   	push   esi
c0008cff:	53                   	push   ebx
c0008d00:	83 ec 1c             	sub    esp,0x1c
c0008d03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d07:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d11:	e8 03 75 ff ff       	call   c0000219 <detectCPUID>
c0008d16:	85 c0                	test   eax,eax
c0008d18:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d1e:	0f 95 c2             	setne  dl
c0008d21:	83 e0 fd             	and    eax,0xfffffffd
c0008d24:	d1 e2                	shl    edx,1
c0008d26:	09 d0                	or     eax,edx
c0008d28:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d2e:	a8 02                	test   al,0x2
c0008d30:	75 46                	jne    c0008d78 <Computer::detectFeatures()+0x7c>
c0008d32:	f6 05 81 60 02 c0 04 	test   BYTE PTR ds:0xc0026081,0x4
c0008d39:	74 07                	je     c0008d42 <Computer::detectFeatures()+0x46>
c0008d3b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d42:	e8 7f 7b 01 00       	call   c00208c6 <x87Detect>
c0008d47:	83 e0 01             	and    eax,0x1
c0008d4a:	c1 e0 04             	shl    eax,0x4
c0008d4d:	88 c2                	mov    dl,al
c0008d4f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d55:	83 e0 ef             	and    eax,0xffffffef
c0008d58:	09 d0                	or     eax,edx
c0008d5a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d60:	a8 10                	test   al,0x10
c0008d62:	0f 85 2a 01 00 00    	jne    c0008e92 <Computer::detectFeatures()+0x196>
c0008d68:	84 c0                	test   al,al
c0008d6a:	0f 88 45 01 00 00    	js     c0008eb5 <Computer::detectFeatures()+0x1b9>
c0008d70:	83 c4 1c             	add    esp,0x1c
c0008d73:	5b                   	pop    ebx
c0008d74:	5e                   	pop    esi
c0008d75:	5f                   	pop    edi
c0008d76:	5d                   	pop    ebp
c0008d77:	c3                   	ret    
c0008d78:	83 ec 0c             	sub    esp,0xc
c0008d7b:	6a 20                	push   0x20
c0008d7d:	e8 22 9e 00 00       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0008d82:	83 e0 01             	and    eax,0x1
c0008d85:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008d8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d92:	83 e0 f7             	and    eax,0xfffffff7
c0008d95:	09 d0                	or     eax,edx
c0008d97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d9d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008da4:	e8 fb 9d 00 00       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0008da9:	83 e0 01             	and    eax,0x1
c0008dac:	88 c2                	mov    dl,al
c0008dae:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008db4:	83 e0 fe             	and    eax,0xfffffffe
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dbf:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008dc6:	e8 d9 9d 00 00       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	c1 e0 07             	shl    eax,0x7
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 7f             	and    eax,0x7f
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008de8:	e8 b7 9d 00 00       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	83 e0 01             	and    eax,0x1
c0008df3:	c1 e0 05             	shl    eax,0x5
c0008df6:	88 c2                	mov    dl,al
c0008df8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dfe:	83 e0 df             	and    eax,0xffffffdf
c0008e01:	09 d0                	or     eax,edx
c0008e03:	f7 05 80 60 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026080,0x401
c0008e0d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e13:	0f 84 c2 00 00 00    	je     c0008edb <Computer::detectFeatures()+0x1df>
c0008e19:	83 e0 fe             	and    eax,0xfffffffe
c0008e1c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e22:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e28:	88 c2                	mov    dl,al
c0008e2a:	83 e2 09             	and    edx,0x9
c0008e2d:	fe ca                	dec    dl
c0008e2f:	75 09                	jne    c0008e3a <Computer::detectFeatures()+0x13e>
c0008e31:	83 e0 fe             	and    eax,0xfffffffe
c0008e34:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3a:	83 ec 0c             	sub    esp,0xc
c0008e3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e41:	50                   	push   eax
c0008e42:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e46:	55                   	push   ebp
c0008e47:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e4b:	57                   	push   edi
c0008e4c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e50:	56                   	push   esi
c0008e51:	68 00 00 00 80       	push   0x80000000
c0008e56:	e8 c5 9c 00 00       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e5b:	83 c4 20             	add    esp,0x20
c0008e5e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e69:	0f 86 c3 fe ff ff    	jbe    c0008d32 <Computer::detectFeatures()+0x36>
c0008e6f:	83 ec 0c             	sub    esp,0xc
c0008e72:	50                   	push   eax
c0008e73:	55                   	push   ebp
c0008e74:	57                   	push   edi
c0008e75:	56                   	push   esi
c0008e76:	68 01 00 00 80       	push   0x80000001
c0008e7b:	e8 a0 9c 00 00       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e80:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008e8a:	83 c4 20             	add    esp,0x20
c0008e8d:	e9 a0 fe ff ff       	jmp    c0008d32 <Computer::detectFeatures()+0x36>
c0008e92:	e8 e9 79 01 00       	call   c0020880 <absolutelyNoChanceInHell>
c0008e97:	88 c2                	mov    dl,al
c0008e99:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e9f:	c1 e2 07             	shl    edx,0x7
c0008ea2:	83 e0 7f             	and    eax,0x7f
c0008ea5:	09 d0                	or     eax,edx
c0008ea7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ead:	84 c0                	test   al,al
c0008eaf:	0f 89 bb fe ff ff    	jns    c0008d70 <Computer::detectFeatures()+0x74>
c0008eb5:	e8 a6 79 01 00       	call   c0020860 <avxDetect>
c0008eba:	83 e0 01             	and    eax,0x1
c0008ebd:	c1 e0 05             	shl    eax,0x5
c0008ec0:	88 c2                	mov    dl,al
c0008ec2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ec8:	83 e0 df             	and    eax,0xffffffdf
c0008ecb:	09 d0                	or     eax,edx
c0008ecd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ed3:	83 c4 1c             	add    esp,0x1c
c0008ed6:	5b                   	pop    ebx
c0008ed7:	5e                   	pop    esi
c0008ed8:	5f                   	pop    edi
c0008ed9:	5d                   	pop    ebp
c0008eda:	c3                   	ret    
c0008edb:	83 ec 0c             	sub    esp,0xc
c0008ede:	68 00 02 00 00       	push   0x200
c0008ee3:	e8 bc 9c 00 00       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0008ee8:	83 c4 10             	add    esp,0x10
c0008eeb:	83 e0 01             	and    eax,0x1
c0008eee:	88 c2                	mov    dl,al
c0008ef0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ef6:	83 e0 fe             	and    eax,0xfffffffe
c0008ef9:	09 d0                	or     eax,edx
c0008efb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f01:	e9 1c ff ff ff       	jmp    c0008e22 <Computer::detectFeatures()+0x126>

c0008f06 <Computer::displayFeatures()>:
c0008f06:	c3                   	ret    
c0008f07:	90                   	nop

c0008f08 <Computer::rdmsr(unsigned int)>:
c0008f08:	83 ec 0c             	sub    esp,0xc
c0008f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f0f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f16:	74 0a                	je     c0008f22 <Computer::rdmsr(unsigned int)+0x1a>
c0008f18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f1c:	0f 32                	rdmsr  
c0008f1e:	83 c4 0c             	add    esp,0xc
c0008f21:	c3                   	ret    
c0008f22:	83 ec 0c             	sub    esp,0xc
c0008f25:	68 41 22 02 c0       	push   0xc0022241
c0008f2a:	e8 14 b3 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0008f2f:	83 c4 10             	add    esp,0x10
c0008f32:	eb e4                	jmp    c0008f18 <Computer::rdmsr(unsigned int)+0x10>

c0008f34 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f34:	57                   	push   edi
c0008f35:	56                   	push   esi
c0008f36:	52                   	push   edx
c0008f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f3b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f43:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f4a:	74 0e                	je     c0008f5a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f4c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f50:	89 f0                	mov    eax,esi
c0008f52:	89 fa                	mov    edx,edi
c0008f54:	0f 30                	wrmsr  
c0008f56:	58                   	pop    eax
c0008f57:	5e                   	pop    esi
c0008f58:	5f                   	pop    edi
c0008f59:	c3                   	ret    
c0008f5a:	83 ec 0c             	sub    esp,0xc
c0008f5d:	68 47 22 02 c0       	push   0xc0022247
c0008f62:	e8 dc b2 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0008f67:	83 c4 10             	add    esp,0x10
c0008f6a:	eb e0                	jmp    c0008f4c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f6c <Computer::nmiEnabled()>:
c0008f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f70:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f76:	c3                   	ret    
c0008f77:	90                   	nop

c0008f78 <Computer::readCMOS(unsigned char)>:
c0008f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f7c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f83:	19 c0                	sbb    eax,eax
c0008f85:	83 e0 80             	and    eax,0xffffff80
c0008f88:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008f8c:	e6 70                	out    0x70,al
c0008f8e:	e4 71                	in     al,0x71
c0008f90:	c3                   	ret    
c0008f91:	90                   	nop

c0008f92 <Computer::enableNMI(bool)>:
c0008f92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f9a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fa0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fa8:	eb ce                	jmp    c0008f78 <Computer::readCMOS(unsigned char)>

c0008faa <Computer::open(int, int, void*)>:
c0008faa:	56                   	push   esi
c0008fab:	53                   	push   ebx
c0008fac:	83 ec 10             	sub    esp,0x10
c0008faf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fb3:	68 a4 23 02 c0       	push   0xc00223a4
c0008fb8:	e8 40 0a 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0008fbd:	58                   	pop    eax
c0008fbe:	f6 05 80 60 02 c0 04 	test   BYTE PTR ds:0xc0026080,0x4
c0008fc5:	5a                   	pop    edx
c0008fc6:	0f 94 05 40 54 02 c0 	sete   BYTE PTR ds:0xc0025440
c0008fcd:	68 58 01 00 00       	push   0x158
c0008fd2:	68 4d 22 02 c0       	push   0xc002224d
c0008fd7:	e8 28 3a 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0008fdc:	59                   	pop    ecx
c0008fdd:	5e                   	pop    esi
c0008fde:	68 14 01 00 00       	push   0x114
c0008fe3:	68 63 22 02 c0       	push   0xc0022263
c0008fe8:	e8 17 3a 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0008fed:	58                   	pop    eax
c0008fee:	5a                   	pop    edx
c0008fef:	6a 14                	push   0x14
c0008ff1:	68 77 22 02 c0       	push   0xc0022277
c0008ff6:	e8 09 3a 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0008ffb:	59                   	pop    ecx
c0008ffc:	5e                   	pop    esi
c0008ffd:	68 1f 07 00 00       	push   0x71f
c0009002:	68 8a 22 02 c0       	push   0xc002228a
c0009007:	e8 f8 39 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000900c:	58                   	pop    eax
c000900d:	5a                   	pop    edx
c000900e:	6a 5f                	push   0x5f
c0009010:	68 a1 22 02 c0       	push   0xc00222a1
c0009015:	e8 ea 39 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000901a:	c7 04 24 b7 22 02 c0 	mov    DWORD PTR [esp],0xc00222b7
c0009021:	e8 de 39 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009026:	c7 04 24 c9 22 02 c0 	mov    DWORD PTR [esp],0xc00222c9
c000902d:	e8 cb 09 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0009032:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009039:	e8 65 09 00 00       	call   c00099a3 <malloc>
c000903e:	89 c6                	mov    esi,eax
c0009040:	89 04 24             	mov    DWORD PTR [esp],eax
c0009043:	e8 f2 8c 00 00       	call   c0011d3a <ACPI::ACPI()>
c0009048:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000904e:	c7 04 24 e3 22 02 c0 	mov    DWORD PTR [esp],0xc00222e3
c0009055:	e8 a3 09 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c000905a:	59                   	pop    ecx
c000905b:	5e                   	pop    esi
c000905c:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0009062:	53                   	push   ebx
c0009063:	e8 dc 4d 00 00       	call   c000de44 <Device::addChild(Device*)>
c0009068:	c7 04 24 c8 23 02 c0 	mov    DWORD PTR [esp],0xc00223c8
c000906f:	e8 89 09 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0009074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009077:	e8 80 fc ff ff       	call   c0008cfc <Computer::detectFeatures()>
c000907c:	c7 04 24 e8 23 02 c0 	mov    DWORD PTR [esp],0xc00223e8
c0009083:	e8 75 09 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0009088:	c7 04 24 fd 22 02 c0 	mov    DWORD PTR [esp],0xc00222fd
c000908f:	e8 69 09 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0009094:	58                   	pop    eax
c0009095:	5a                   	pop    edx
c0009096:	6a 01                	push   0x1
c0009098:	53                   	push   ebx
c0009099:	e8 f4 fe ff ff       	call   c0008f92 <Computer::enableNMI(bool)>
c000909e:	c7 04 24 f1 21 02 c0 	mov    DWORD PTR [esp],0xc00221f1
c00090a5:	e8 53 09 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00090aa:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090b1:	e8 ed 08 00 00       	call   c00099a3 <malloc>
c00090b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b9:	89 c6                	mov    esi,eax
c00090bb:	e8 9c 9b 00 00       	call   c0012c5c <CPU::CPU()>
c00090c0:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090c6:	59                   	pop    ecx
c00090c7:	58                   	pop    eax
c00090c8:	56                   	push   esi
c00090c9:	53                   	push   ebx
c00090ca:	e8 75 4d 00 00       	call   c000de44 <Device::addChild(Device*)>
c00090cf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00090d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090db:	6a 00                	push   0x0
c00090dd:	6a 00                	push   0x0
c00090df:	50                   	push   eax
c00090e0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090e3:	83 c4 14             	add    esp,0x14
c00090e6:	68 08 24 02 c0       	push   0xc0022408
c00090eb:	e8 0d 09 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00090f0:	e8 e7 52 00 00       	call   c000e3dc <setupFPU()>
c00090f5:	83 c4 10             	add    esp,0x10
c00090f8:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00090fe:	85 c0                	test   eax,eax
c0009100:	74 1f                	je     c0009121 <Computer::open(int, int, void*)+0x177>
c0009102:	83 ec 08             	sub    esp,0x8
c0009105:	50                   	push   eax
c0009106:	53                   	push   ebx
c0009107:	e8 38 4d 00 00       	call   c000de44 <Device::addChild(Device*)>
c000910c:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009112:	8b 10                	mov    edx,DWORD PTR [eax]
c0009114:	6a 00                	push   0x0
c0009116:	6a 00                	push   0x0
c0009118:	6a 00                	push   0x0
c000911a:	50                   	push   eax
c000911b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000911e:	83 c4 20             	add    esp,0x20
c0009121:	83 ec 0c             	sub    esp,0xc
c0009124:	68 0e 23 02 c0       	push   0xc002230e
c0009129:	e8 cf 08 00 00       	call   c00099fd <Krnl::setBootMessage(char const*)>
c000912e:	c7 04 24 50 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a50
c0009135:	e8 92 eb 00 00       	call   c0017ccc <setupMultitasking(void (*)())>
c000913a:	83 c4 14             	add    esp,0x14
c000913d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009142:	5b                   	pop    ebx
c0009143:	5e                   	pop    esi
c0009144:	c3                   	ret    
c0009145:	90                   	nop

c0009146 <Computer::disableNMI()>:
c0009146:	6a 00                	push   0x0
c0009148:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000914c:	e8 41 fe ff ff       	call   c0008f92 <Computer::enableNMI(bool)>
c0009151:	58                   	pop    eax
c0009152:	5a                   	pop    edx
c0009153:	c3                   	ret    

c0009154 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009158:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000915f:	19 c0                	sbb    eax,eax
c0009161:	83 e0 80             	and    eax,0xffffff80
c0009164:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009168:	e6 70                	out    0x70,al
c000916a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000916e:	e6 71                	out    0x71,al
c0009170:	c3                   	ret    
c0009171:	90                   	nop

c0009172 <Computer::handleNMI()>:
c0009172:	56                   	push   esi
c0009173:	53                   	push   ebx
c0009174:	83 ec 10             	sub    esp,0x10
c0009177:	e4 92                	in     al,0x92
c0009179:	89 c6                	mov    esi,eax
c000917b:	e4 61                	in     al,0x61
c000917d:	68 29 23 02 c0       	push   0xc0022329
c0009182:	88 c3                	mov    bl,al
c0009184:	e8 7b 38 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009189:	83 c4 10             	add    esp,0x10
c000918c:	83 e6 10             	and    esi,0x10
c000918f:	75 0d                	jne    c000919e <Computer::handleNMI()+0x2c>
c0009191:	f6 c3 40             	test   bl,0x40
c0009194:	75 1d                	jne    c00091b3 <Computer::handleNMI()+0x41>
c0009196:	84 db                	test   bl,bl
c0009198:	78 2d                	js     c00091c7 <Computer::handleNMI()+0x55>
c000919a:	58                   	pop    eax
c000919b:	5b                   	pop    ebx
c000919c:	5e                   	pop    esi
c000919d:	c3                   	ret    
c000919e:	83 ec 0c             	sub    esp,0xc
c00091a1:	68 3a 23 02 c0       	push   0xc002233a
c00091a6:	e8 98 b0 00 00       	call   c0014243 <Krnl::panic(char const*)>
c00091ab:	83 c4 10             	add    esp,0x10
c00091ae:	f6 c3 40             	test   bl,0x40
c00091b1:	74 e3                	je     c0009196 <Computer::handleNMI()+0x24>
c00091b3:	83 ec 0c             	sub    esp,0xc
c00091b6:	68 47 23 02 c0       	push   0xc0022347
c00091bb:	e8 83 b0 00 00       	call   c0014243 <Krnl::panic(char const*)>
c00091c0:	83 c4 10             	add    esp,0x10
c00091c3:	84 db                	test   bl,bl
c00091c5:	79 d3                	jns    c000919a <Computer::handleNMI()+0x28>
c00091c7:	c7 44 24 10 51 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022351
c00091cf:	5a                   	pop    edx
c00091d0:	5b                   	pop    ebx
c00091d1:	5e                   	pop    esi
c00091d2:	e9 6c b0 00 00       	jmp    c0014243 <Krnl::panic(char const*)>
c00091d7:	90                   	nop

c00091d8 <Computer::setDiskActivityLight(int, bool)>:
c00091d8:	56                   	push   esi
c00091d9:	53                   	push   ebx
c00091da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091de:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091e3:	77 1b                	ja     c0009200 <Computer::setDiskActivityLight(int, bool)+0x28>
c00091e5:	e4 92                	in     al,0x92
c00091e7:	bb 40 00 00 00       	mov    ebx,0x40
c00091ec:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00091f0:	89 da                	mov    edx,ebx
c00091f2:	d3 e2                	shl    edx,cl
c00091f4:	89 f1                	mov    ecx,esi
c00091f6:	f7 d2                	not    edx
c00091f8:	d3 e3                	shl    ebx,cl
c00091fa:	21 d0                	and    eax,edx
c00091fc:	09 d8                	or     eax,ebx
c00091fe:	e6 92                	out    0x92,al
c0009200:	5b                   	pop    ebx
c0009201:	5e                   	pop    esi
c0009202:	c3                   	ret    
c0009203:	90                   	nop

c0009204 <GDTEntry::setBase(unsigned int)>:
c0009204:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009208:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000920c:	89 c1                	mov    ecx,eax
c000920e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009212:	c1 e9 10             	shr    ecx,0x10
c0009215:	c1 e8 18             	shr    eax,0x18
c0009218:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000921b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setLimit(unsigned int)>:
c0009220:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009228:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000922b:	66 89 01             	mov    WORD PTR [ecx],ax
c000922e:	83 e2 f0             	and    edx,0xfffffff0
c0009231:	c1 e8 10             	shr    eax,0x10
c0009234:	83 e0 0f             	and    eax,0xf
c0009237:	09 d0                	or     eax,edx
c0009239:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000923c:	c3                   	ret    
c000923d:	90                   	nop

c000923e <GDT::GDT()>:
c000923e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009242:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000924c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009252:	90                   	nop
c0009253:	c3                   	ret    

c0009254 <GDT::addEntry(GDTEntry)>:
c0009254:	53                   	push   ebx
c0009255:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009259:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000925d:	8b 02                	mov    eax,DWORD PTR [edx]
c000925f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009263:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009267:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000926b:	8d 48 01             	lea    ecx,[eax+0x1]
c000926e:	c1 e0 03             	shl    eax,0x3
c0009271:	89 0a                	mov    DWORD PTR [edx],ecx
c0009273:	5b                   	pop    ebx
c0009274:	c3                   	ret    
c0009275:	90                   	nop

c0009276 <GDT::getNumberOfEntries()>:
c0009276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000927a:	8b 00                	mov    eax,DWORD PTR [eax]
c000927c:	c3                   	ret    
c000927d:	90                   	nop

c000927e <GDT::flush()>:
c000927e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009282:	8b 10                	mov    edx,DWORD PTR [eax]
c0009284:	83 c0 04             	add    eax,0x4
c0009287:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000928e:	a3 72 60 02 c0       	mov    ds:0xc0026072,eax
c0009293:	66 89 15 70 60 02 c0 	mov    WORD PTR ds:0xc0026070,dx
c000929a:	e9 e6 70 ff ff       	jmp    c0000385 <loadGDT>
c000929f:	90                   	nop

c00092a0 <GDT::setup()>:
c00092a0:	55                   	push   ebp
c00092a1:	57                   	push   edi
c00092a2:	56                   	push   esi
c00092a3:	53                   	push   ebx
c00092a4:	83 ec 3c             	sub    esp,0x3c
c00092a7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092ab:	6a 00                	push   0x0
c00092ad:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092b1:	53                   	push   ebx
c00092b2:	e8 4d ff ff ff       	call   c0009204 <GDTEntry::setBase(unsigned int)>
c00092b7:	6a 00                	push   0x0
c00092b9:	53                   	push   ebx
c00092ba:	e8 61 ff ff ff       	call   c0009220 <GDTEntry::setLimit(unsigned int)>
c00092bf:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092cd:	53                   	push   ebx
c00092ce:	e8 31 ff ff ff       	call   c0009204 <GDTEntry::setBase(unsigned int)>
c00092d3:	68 ff ff ff 00       	push   0xffffff
c00092d8:	53                   	push   ebx
c00092d9:	e8 42 ff ff ff       	call   c0009220 <GDTEntry::setLimit(unsigned int)>
c00092de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092e2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00092e7:	0d 00 9a c0 00       	or     eax,0xc09a00
c00092ec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00092f0:	83 c4 20             	add    esp,0x20
c00092f3:	6a 00                	push   0x0
c00092f5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00092f9:	53                   	push   ebx
c00092fa:	e8 05 ff ff ff       	call   c0009204 <GDTEntry::setBase(unsigned int)>
c00092ff:	68 ff ff ff 00       	push   0xffffff
c0009304:	53                   	push   ebx
c0009305:	e8 16 ff ff ff       	call   c0009220 <GDTEntry::setLimit(unsigned int)>
c000930a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000930e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009312:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009316:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000931a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000931e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009323:	0d 00 92 c0 00       	or     eax,0xc09200
c0009328:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000932c:	89 d8                	mov    eax,ebx
c000932e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009332:	80 cc 60             	or     ah,0x60
c0009335:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009339:	83 c4 0c             	add    esp,0xc
c000933c:	89 f8                	mov    eax,edi
c000933e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009342:	80 cc 60             	or     ah,0x60
c0009345:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009349:	89 c7                	mov    edi,eax
c000934b:	55                   	push   ebp
c000934c:	e8 03 ff ff ff       	call   c0009254 <GDT::addEntry(GDTEntry)>
c0009351:	83 c4 0c             	add    esp,0xc
c0009354:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009358:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000935c:	55                   	push   ebp
c000935d:	e8 f2 fe ff ff       	call   c0009254 <GDT::addEntry(GDTEntry)>
c0009362:	83 c4 0c             	add    esp,0xc
c0009365:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009369:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000936d:	55                   	push   ebp
c000936e:	e8 e1 fe ff ff       	call   c0009254 <GDT::addEntry(GDTEntry)>
c0009373:	83 c4 0c             	add    esp,0xc
c0009376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000937a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000937e:	53                   	push   ebx
c000937f:	51                   	push   ecx
c0009380:	55                   	push   ebp
c0009381:	e8 ce fe ff ff       	call   c0009254 <GDT::addEntry(GDTEntry)>
c0009386:	83 c4 0c             	add    esp,0xc
c0009389:	57                   	push   edi
c000938a:	56                   	push   esi
c000938b:	55                   	push   ebp
c000938c:	e8 c3 fe ff ff       	call   c0009254 <GDT::addEntry(GDTEntry)>
c0009391:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009394:	e8 e5 fe ff ff       	call   c000927e <GDT::flush()>
c0009399:	83 c4 4c             	add    esp,0x4c
c000939c:	5b                   	pop    ebx
c000939d:	5e                   	pop    esi
c000939e:	5f                   	pop    edi
c000939f:	5d                   	pop    ebp
c00093a0:	c3                   	ret    

c00093a1 <idleFunction(void*)>:
c00093a1:	53                   	push   ebx
c00093a2:	83 ec 08             	sub    esp,0x8
c00093a5:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00093aa:	48                   	dec    eax
c00093ab:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00093b0:	75 01                	jne    c00093b3 <idleFunction(void*)+0x12>
c00093b2:	fb                   	sti    
c00093b3:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00093b8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093be:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093c5:	74 3c                	je     c0009403 <idleFunction(void*)+0x62>
c00093c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ce:	74 33                	je     c0009403 <idleFunction(void*)+0x62>
c00093d0:	31 db                	xor    ebx,ebx
c00093d2:	52                   	push   edx
c00093d3:	52                   	push   edx
c00093d4:	68 e1 00 00 00       	push   0xe1
c00093d9:	50                   	push   eax
c00093da:	e8 29 fb ff ff       	call   c0008f08 <Computer::rdmsr(unsigned int)>
c00093df:	53                   	push   ebx
c00093e0:	83 e0 02             	and    eax,0x2
c00093e3:	50                   	push   eax
c00093e4:	68 e1 00 00 00       	push   0xe1
c00093e9:	ff 35 68 60 02 c0    	push   DWORD PTR ds:0xc0026068
c00093ef:	e8 40 fb ff ff       	call   c0008f34 <Computer::wrmsr(unsigned int, unsigned long long)>
c00093f4:	83 c4 20             	add    esp,0x20
c00093f7:	e8 b8 6d ff ff       	call   c00001b4 <doTPAUSE>
c00093fc:	e8 85 7a 01 00       	call   c0020e86 <idleCommon()>
c0009401:	eb f4                	jmp    c00093f7 <idleFunction(void*)+0x56>
c0009403:	fb                   	sti    
c0009404:	f4                   	hlt    
c0009405:	e8 7c 7a 01 00       	call   c0020e86 <idleCommon()>
c000940a:	eb f7                	jmp    c0009403 <idleFunction(void*)+0x62>

c000940c <IDTEntry::IDTEntry(bool)>:
c000940c:	83 ec 04             	sub    esp,0x4
c000940f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009413:	88 04 24             	mov    BYTE PTR [esp],al
c0009416:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000941a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009420:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009424:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009428:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000942c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000942f:	83 e2 f0             	and    edx,0xfffffff0
c0009432:	83 ca 0e             	or     edx,0xe
c0009435:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000943c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000943f:	83 e2 ef             	and    edx,0xffffffef
c0009442:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009445:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009449:	74 05                	je     c0009450 <IDTEntry::IDTEntry(bool)+0x44>
c000944b:	b2 03                	mov    dl,0x3
c000944d:	eb 03                	jmp    c0009452 <IDTEntry::IDTEntry(bool)+0x46>
c000944f:	90                   	nop
c0009450:	b2 00                	mov    dl,0x0
c0009452:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009456:	83 e2 03             	and    edx,0x3
c0009459:	88 d1                	mov    cl,dl
c000945b:	c1 e1 05             	shl    ecx,0x5
c000945e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009461:	83 e2 9f             	and    edx,0xffffff9f
c0009464:	09 ca                	or     edx,ecx
c0009466:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000946d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009470:	83 ca 80             	or     edx,0xffffff80
c0009473:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009476:	90                   	nop
c0009477:	83 c4 04             	add    esp,0x4
c000947a:	c3                   	ret    
c000947b:	90                   	nop

c000947c <IDTEntry::setOffset(unsigned int)>:
c000947c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009480:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009484:	66 89 02             	mov    WORD PTR [edx],ax
c0009487:	c1 e8 10             	shr    eax,0x10
c000948a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000948e:	c3                   	ret    
c000948f:	90                   	nop

c0009490 <IDT::IDT()>:
c0009490:	90                   	nop
c0009491:	c3                   	ret    

c0009492 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0009492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009496:	83 c0 30             	add    eax,0x30
c0009499:	c3                   	ret    

c000949a <IDT::addEntry(IDTEntry, int)>:
c000949a:	53                   	push   ebx
c000949b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000949f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094ab:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ae:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094b2:	5b                   	pop    ebx
c00094b3:	c3                   	ret    

c00094b4 <IDT::addEntry(int, void (*)(), bool)>:
c00094b4:	53                   	push   ebx
c00094b5:	83 ec 10             	sub    esp,0x10
c00094b8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094bd:	50                   	push   eax
c00094be:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094c2:	53                   	push   ebx
c00094c3:	e8 44 ff ff ff       	call   c000940c <IDTEntry::IDTEntry(bool)>
c00094c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094cc:	53                   	push   ebx
c00094cd:	e8 aa ff ff ff       	call   c000947c <IDTEntry::setOffset(unsigned int)>
c00094d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00094e2:	e8 b3 ff ff ff       	call   c000949a <IDT::addEntry(IDTEntry, int)>
c00094e7:	83 c4 30             	add    esp,0x30
c00094ea:	5b                   	pop    ebx
c00094eb:	c3                   	ret    

c00094ec <IDT::flush()>:
c00094ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f0:	66 c7 05 78 60 02 c0 ff 07 	mov    WORD PTR ds:0xc0026078,0x7ff
c00094f9:	a3 7a 60 02 c0       	mov    ds:0xc002607a,eax
c00094fe:	0f 01 1d 78 60 02 c0 	lidtd  ds:0xc0026078
c0009505:	c3                   	ret    

c0009506 <IDT::setup()>:
c0009506:	57                   	push   edi
c0009507:	56                   	push   esi
c0009508:	53                   	push   ebx
c0009509:	83 ec 10             	sub    esp,0x10
c000950c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009510:	6a 00                	push   0x0
c0009512:	68 a5 03 00 c0       	push   0xc00003a5
c0009517:	6a 00                	push   0x0
c0009519:	53                   	push   ebx
c000951a:	e8 95 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000951f:	6a 00                	push   0x0
c0009521:	68 b5 03 00 c0       	push   0xc00003b5
c0009526:	6a 01                	push   0x1
c0009528:	53                   	push   ebx
c0009529:	e8 86 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000952e:	83 c4 20             	add    esp,0x20
c0009531:	6a 00                	push   0x0
c0009533:	68 bf 03 00 c0       	push   0xc00003bf
c0009538:	6a 02                	push   0x2
c000953a:	53                   	push   ebx
c000953b:	e8 74 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009540:	6a 00                	push   0x0
c0009542:	68 c9 03 00 c0       	push   0xc00003c9
c0009547:	6a 03                	push   0x3
c0009549:	53                   	push   ebx
c000954a:	e8 65 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000954f:	83 c4 20             	add    esp,0x20
c0009552:	6a 00                	push   0x0
c0009554:	68 d3 03 00 c0       	push   0xc00003d3
c0009559:	6a 04                	push   0x4
c000955b:	53                   	push   ebx
c000955c:	e8 53 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009561:	6a 00                	push   0x0
c0009563:	68 dd 03 00 c0       	push   0xc00003dd
c0009568:	6a 05                	push   0x5
c000956a:	53                   	push   ebx
c000956b:	e8 44 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009570:	83 c4 20             	add    esp,0x20
c0009573:	6a 00                	push   0x0
c0009575:	68 e7 03 00 c0       	push   0xc00003e7
c000957a:	6a 06                	push   0x6
c000957c:	53                   	push   ebx
c000957d:	e8 32 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009582:	6a 00                	push   0x0
c0009584:	68 f1 03 00 c0       	push   0xc00003f1
c0009589:	6a 07                	push   0x7
c000958b:	53                   	push   ebx
c000958c:	e8 23 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009591:	83 c4 20             	add    esp,0x20
c0009594:	6a 00                	push   0x0
c0009596:	68 fb 03 00 c0       	push   0xc00003fb
c000959b:	6a 08                	push   0x8
c000959d:	53                   	push   ebx
c000959e:	e8 11 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00095a3:	6a 00                	push   0x0
c00095a5:	68 03 04 00 c0       	push   0xc0000403
c00095aa:	6a 09                	push   0x9
c00095ac:	53                   	push   ebx
c00095ad:	e8 02 ff ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00095b2:	83 c4 20             	add    esp,0x20
c00095b5:	6a 00                	push   0x0
c00095b7:	68 0d 04 00 c0       	push   0xc000040d
c00095bc:	6a 0a                	push   0xa
c00095be:	53                   	push   ebx
c00095bf:	e8 f0 fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00095c4:	6a 00                	push   0x0
c00095c6:	68 15 04 00 c0       	push   0xc0000415
c00095cb:	6a 0b                	push   0xb
c00095cd:	53                   	push   ebx
c00095ce:	e8 e1 fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00095d3:	83 c4 20             	add    esp,0x20
c00095d6:	6a 00                	push   0x0
c00095d8:	68 1d 04 00 c0       	push   0xc000041d
c00095dd:	6a 0c                	push   0xc
c00095df:	53                   	push   ebx
c00095e0:	e8 cf fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00095e5:	6a 00                	push   0x0
c00095e7:	68 25 04 00 c0       	push   0xc0000425
c00095ec:	6a 0d                	push   0xd
c00095ee:	53                   	push   ebx
c00095ef:	e8 c0 fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00095f4:	83 c4 20             	add    esp,0x20
c00095f7:	6a 00                	push   0x0
c00095f9:	68 2d 04 00 c0       	push   0xc000042d
c00095fe:	6a 0e                	push   0xe
c0009600:	53                   	push   ebx
c0009601:	e8 ae fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009606:	6a 00                	push   0x0
c0009608:	68 35 04 00 c0       	push   0xc0000435
c000960d:	6a 0f                	push   0xf
c000960f:	53                   	push   ebx
c0009610:	e8 9f fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009615:	83 c4 20             	add    esp,0x20
c0009618:	6a 00                	push   0x0
c000961a:	68 3f 04 00 c0       	push   0xc000043f
c000961f:	6a 10                	push   0x10
c0009621:	53                   	push   ebx
c0009622:	e8 8d fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009627:	6a 00                	push   0x0
c0009629:	68 49 04 00 c0       	push   0xc0000449
c000962e:	6a 11                	push   0x11
c0009630:	53                   	push   ebx
c0009631:	e8 7e fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009636:	83 c4 20             	add    esp,0x20
c0009639:	6a 00                	push   0x0
c000963b:	68 53 04 00 c0       	push   0xc0000453
c0009640:	6a 12                	push   0x12
c0009642:	53                   	push   ebx
c0009643:	e8 6c fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009648:	6a 01                	push   0x1
c000964a:	68 ed 04 00 c0       	push   0xc00004ed
c000964f:	6a 60                	push   0x60
c0009651:	53                   	push   ebx
c0009652:	e8 5d fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009657:	83 c4 20             	add    esp,0x20
c000965a:	6a 00                	push   0x0
c000965c:	68 f4 04 00 c0       	push   0xc00004f4
c0009661:	6a 20                	push   0x20
c0009663:	53                   	push   ebx
c0009664:	e8 4b fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009669:	6a 00                	push   0x0
c000966b:	68 df 04 00 c0       	push   0xc00004df
c0009670:	6a 21                	push   0x21
c0009672:	53                   	push   ebx
c0009673:	e8 3c fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009678:	83 c4 20             	add    esp,0x20
c000967b:	6a 00                	push   0x0
c000967d:	68 e6 04 00 c0       	push   0xc00004e6
c0009682:	6a 22                	push   0x22
c0009684:	53                   	push   ebx
c0009685:	e8 2a fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000968a:	6a 00                	push   0x0
c000968c:	68 5d 04 00 c0       	push   0xc000045d
c0009691:	6a 23                	push   0x23
c0009693:	53                   	push   ebx
c0009694:	e8 1b fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009699:	83 c4 20             	add    esp,0x20
c000969c:	6a 00                	push   0x0
c000969e:	68 67 04 00 c0       	push   0xc0000467
c00096a3:	6a 24                	push   0x24
c00096a5:	53                   	push   ebx
c00096a6:	e8 09 fe ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00096ab:	6a 00                	push   0x0
c00096ad:	68 71 04 00 c0       	push   0xc0000471
c00096b2:	6a 25                	push   0x25
c00096b4:	53                   	push   ebx
c00096b5:	e8 fa fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00096ba:	83 c4 20             	add    esp,0x20
c00096bd:	6a 00                	push   0x0
c00096bf:	68 7b 04 00 c0       	push   0xc000047b
c00096c4:	6a 26                	push   0x26
c00096c6:	53                   	push   ebx
c00096c7:	e8 e8 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00096cc:	6a 00                	push   0x0
c00096ce:	68 85 04 00 c0       	push   0xc0000485
c00096d3:	6a 27                	push   0x27
c00096d5:	53                   	push   ebx
c00096d6:	e8 d9 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00096db:	83 c4 20             	add    esp,0x20
c00096de:	6a 00                	push   0x0
c00096e0:	68 8f 04 00 c0       	push   0xc000048f
c00096e5:	6a 28                	push   0x28
c00096e7:	53                   	push   ebx
c00096e8:	e8 c7 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00096ed:	6a 00                	push   0x0
c00096ef:	68 99 04 00 c0       	push   0xc0000499
c00096f4:	6a 29                	push   0x29
c00096f6:	53                   	push   ebx
c00096f7:	e8 b8 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00096fc:	83 c4 20             	add    esp,0x20
c00096ff:	6a 00                	push   0x0
c0009701:	68 a3 04 00 c0       	push   0xc00004a3
c0009706:	6a 2a                	push   0x2a
c0009708:	53                   	push   ebx
c0009709:	e8 a6 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000970e:	6a 00                	push   0x0
c0009710:	68 ad 04 00 c0       	push   0xc00004ad
c0009715:	6a 2b                	push   0x2b
c0009717:	53                   	push   ebx
c0009718:	e8 97 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000971d:	83 c4 20             	add    esp,0x20
c0009720:	6a 00                	push   0x0
c0009722:	68 b7 04 00 c0       	push   0xc00004b7
c0009727:	6a 2c                	push   0x2c
c0009729:	53                   	push   ebx
c000972a:	e8 85 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000972f:	6a 00                	push   0x0
c0009731:	68 c1 04 00 c0       	push   0xc00004c1
c0009736:	6a 2d                	push   0x2d
c0009738:	53                   	push   ebx
c0009739:	e8 76 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000973e:	83 c4 20             	add    esp,0x20
c0009741:	6a 00                	push   0x0
c0009743:	68 cb 04 00 c0       	push   0xc00004cb
c0009748:	6a 2e                	push   0x2e
c000974a:	53                   	push   ebx
c000974b:	e8 64 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009750:	6a 00                	push   0x0
c0009752:	68 d5 04 00 c0       	push   0xc00004d5
c0009757:	6a 2f                	push   0x2f
c0009759:	53                   	push   ebx
c000975a:	e8 55 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c000975f:	83 c4 20             	add    esp,0x20
c0009762:	6a 00                	push   0x0
c0009764:	68 2b 05 00 c0       	push   0xc000052b
c0009769:	6a 30                	push   0x30
c000976b:	53                   	push   ebx
c000976c:	e8 43 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009771:	6a 00                	push   0x0
c0009773:	68 35 05 00 c0       	push   0xc0000535
c0009778:	6a 31                	push   0x31
c000977a:	53                   	push   ebx
c000977b:	e8 34 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009780:	83 c4 20             	add    esp,0x20
c0009783:	6a 00                	push   0x0
c0009785:	68 3f 05 00 c0       	push   0xc000053f
c000978a:	6a 32                	push   0x32
c000978c:	53                   	push   ebx
c000978d:	e8 22 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c0009792:	6a 00                	push   0x0
c0009794:	68 49 05 00 c0       	push   0xc0000549
c0009799:	6a 33                	push   0x33
c000979b:	53                   	push   ebx
c000979c:	e8 13 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00097a1:	83 c4 20             	add    esp,0x20
c00097a4:	6a 00                	push   0x0
c00097a6:	68 53 05 00 c0       	push   0xc0000553
c00097ab:	6a 34                	push   0x34
c00097ad:	53                   	push   ebx
c00097ae:	e8 01 fd ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00097b3:	6a 00                	push   0x0
c00097b5:	68 5d 05 00 c0       	push   0xc000055d
c00097ba:	6a 35                	push   0x35
c00097bc:	53                   	push   ebx
c00097bd:	e8 f2 fc ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00097c2:	83 c4 20             	add    esp,0x20
c00097c5:	6a 00                	push   0x0
c00097c7:	68 67 05 00 c0       	push   0xc0000567
c00097cc:	6a 36                	push   0x36
c00097ce:	53                   	push   ebx
c00097cf:	e8 e0 fc ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00097d4:	6a 00                	push   0x0
c00097d6:	68 71 05 00 c0       	push   0xc0000571
c00097db:	6a 37                	push   0x37
c00097dd:	53                   	push   ebx
c00097de:	e8 d1 fc ff ff       	call   c00094b4 <IDT::addEntry(int, void (*)(), bool)>
c00097e3:	83 c4 1c             	add    esp,0x1c
c00097e6:	6a 03                	push   0x3
c00097e8:	6a 02                	push   0x2
c00097ea:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c00097f0:	e8 dd 25 00 00       	call   c000bdd2 <VAS::allocatePages(int, int)>
c00097f5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00097fc:	89 c6                	mov    esi,eax
c00097fe:	e8 a0 01 00 00       	call   c00099a3 <malloc>
c0009803:	81 c6 00 20 00 00    	add    esi,0x2000
c0009809:	89 04 24             	mov    DWORD PTR [esp],eax
c000980c:	89 c7                	mov    edi,eax
c000980e:	e8 5d 17 00 00       	call   c000af70 <TSS::TSS()>
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	68 fb 03 00 c0       	push   0xc00003fb
c000981b:	56                   	push   esi
c000981c:	57                   	push   edi
c000981d:	e8 8e 17 00 00       	call   c000afb0 <TSS::setup(unsigned long, unsigned long)>
c0009822:	89 c6                	mov    esi,eax
c0009824:	58                   	pop    eax
c0009825:	5a                   	pop    edx
c0009826:	6a 00                	push   0x0
c0009828:	8d 44 24 14          	lea    eax,[esp+0x14]
c000982c:	50                   	push   eax
c000982d:	e8 da fb ff ff       	call   c000940c <IDTEntry::IDTEntry(bool)>
c0009832:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009836:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000983b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009842:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009848:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000984c:	80 ce 05             	or     dh,0x5
c000984f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009852:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009856:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000985a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000985d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009860:	e8 87 fc ff ff       	call   c00094ec <IDT::flush()>
c0009865:	83 c4 20             	add    esp,0x20
c0009868:	5b                   	pop    ebx
c0009869:	5e                   	pop    esi
c000986a:	5f                   	pop    edi
c000986b:	c3                   	ret    

c000986c <sbrk>:
c000986c:	55                   	push   ebp
c000986d:	57                   	push   edi
c000986e:	56                   	push   esi
c000986f:	53                   	push   ebx
c0009870:	83 ec 24             	sub    esp,0x24
c0009873:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009877:	53                   	push   ebx
c0009878:	68 58 24 02 c0       	push   0xc0022458
c000987d:	e8 82 31 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009882:	83 c4 10             	add    esp,0x10
c0009885:	85 db                	test   ebx,ebx
c0009887:	74 5f                	je     c00098e8 <sbrk+0x7c>
c0009889:	78 64                	js     c00098ef <sbrk+0x83>
c000988b:	a1 cc 52 02 c0       	mov    eax,ds:0xc00252cc
c0009890:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009894:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000989a:	89 dd                	mov    ebp,ebx
c000989c:	78 69                	js     c0009907 <sbrk+0x9b>
c000989e:	c1 fd 0c             	sar    ebp,0xc
c00098a1:	bb 00 00 00 00       	mov    ebx,0x0
c00098a6:	8b 35 d0 61 02 c0    	mov    esi,DWORD PTR ds:0xc00261d0
c00098ac:	8b 3d cc 52 02 c0    	mov    edi,DWORD PTR ds:0xc00252cc
c00098b2:	e8 e8 04 00 00       	call   c0009d9f <Phys::allocatePage()>
c00098b7:	68 01 04 00 00       	push   0x401
c00098bc:	57                   	push   edi
c00098bd:	50                   	push   eax
c00098be:	56                   	push   esi
c00098bf:	e8 0c 24 00 00       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098c4:	81 05 cc 52 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00252cc,0x1000
c00098ce:	43                   	inc    ebx
c00098cf:	83 c4 10             	add    esp,0x10
c00098d2:	39 dd                	cmp    ebp,ebx
c00098d4:	75 d0                	jne    c00098a6 <sbrk+0x3a>
c00098d6:	0f 20 d8             	mov    eax,cr3
c00098d9:	0f 22 d8             	mov    cr3,eax
c00098dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e0:	83 c4 1c             	add    esp,0x1c
c00098e3:	5b                   	pop    ebx
c00098e4:	5e                   	pop    esi
c00098e5:	5f                   	pop    edi
c00098e6:	5d                   	pop    ebp
c00098e7:	c3                   	ret    
c00098e8:	a1 cc 52 02 c0       	mov    eax,ds:0xc00252cc
c00098ed:	eb f1                	jmp    c00098e0 <sbrk+0x74>
c00098ef:	83 ec 08             	sub    esp,0x8
c00098f2:	53                   	push   ebx
c00098f3:	68 84 24 02 c0       	push   0xc0022484
c00098f8:	e8 07 31 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00098fd:	83 c4 10             	add    esp,0x10
c0009900:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009905:	eb d9                	jmp    c00098e0 <sbrk+0x74>
c0009907:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000990d:	eb 8f                	jmp    c000989e <sbrk+0x32>

c000990f <mmap>:
c000990f:	83 ec 18             	sub    esp,0x18
c0009912:	68 76 24 02 c0       	push   0xc0022476
c0009917:	e8 27 a9 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000991c:	b8 00 00 00 00       	mov    eax,0x0
c0009921:	83 c4 1c             	add    esp,0x1c
c0009924:	c3                   	ret    

c0009925 <munmap>:
c0009925:	83 ec 18             	sub    esp,0x18
c0009928:	68 7b 24 02 c0       	push   0xc002247b
c000992d:	e8 11 a9 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0009932:	b8 00 00 00 00       	mov    eax,0x0
c0009937:	83 c4 1c             	add    esp,0x1c
c000993a:	c3                   	ret    

c000993b <liballoc_lock()>:
c000993b:	fa                   	cli    
c000993c:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0009942:	b8 00 00 00 00       	mov    eax,0x0
c0009947:	c3                   	ret    

c0009948 <liballoc_unlock()>:
c0009948:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000994d:	48                   	dec    eax
c000994e:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0009953:	75 01                	jne    c0009956 <liballoc_unlock()+0xe>
c0009955:	fb                   	sti    
c0009956:	b8 00 00 00 00       	mov    eax,0x0
c000995b:	c3                   	ret    

c000995c <liballoc_alloc(int)>:
c000995c:	83 ec 10             	sub    esp,0x10
c000995f:	6a 01                	push   0x1
c0009961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009965:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c000996b:	e8 62 24 00 00       	call   c000bdd2 <VAS::allocatePages(int, int)>
c0009970:	83 c4 1c             	add    esp,0x1c
c0009973:	c3                   	ret    

c0009974 <liballoc_free(void*, int)>:
c0009974:	83 ec 14             	sub    esp,0x14
c0009977:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000997b:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c0009981:	e8 f6 20 00 00       	call   c000ba7c <VAS::freeAllocatedPages(unsigned long)>
c0009986:	b8 00 00 00 00       	mov    eax,0x0
c000998b:	83 c4 1c             	add    esp,0x1c
c000998e:	c3                   	ret    

c000998f <realloc>:
c000998f:	83 ec 14             	sub    esp,0x14
c0009992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000999a:	e8 c1 7b ff ff       	call   c0001560 <dlrealloc>
c000999f:	83 c4 1c             	add    esp,0x1c
c00099a2:	c3                   	ret    

c00099a3 <malloc>:
c00099a3:	83 ec 18             	sub    esp,0x18
c00099a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099aa:	e8 74 76 ff ff       	call   c0001023 <dlmalloc>
c00099af:	83 c4 1c             	add    esp,0x1c
c00099b2:	c3                   	ret    

c00099b3 <free>:
c00099b3:	83 ec 18             	sub    esp,0x18
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 09 73 ff ff       	call   c0000cc8 <dlfree>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <rfree>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 f9 72 ff ff       	call   c0000cc8 <dlfree>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <calloc>:
c00099d3:	56                   	push   esi
c00099d4:	53                   	push   ebx
c00099d5:	83 ec 10             	sub    esp,0x10
c00099d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099dc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00099e1:	53                   	push   ebx
c00099e2:	e8 bc ff ff ff       	call   c00099a3 <malloc>
c00099e7:	89 c6                	mov    esi,eax
c00099e9:	83 c4 0c             	add    esp,0xc
c00099ec:	53                   	push   ebx
c00099ed:	6a 00                	push   0x0
c00099ef:	50                   	push   eax
c00099f0:	e8 8f 6c ff ff       	call   c0000684 <memset>
c00099f5:	89 f0                	mov    eax,esi
c00099f7:	83 c4 14             	add    esp,0x14
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	c3                   	ret    

c00099fd <Krnl::setBootMessage(char const*)>:
c00099fd:	57                   	push   edi
c00099fe:	56                   	push   esi
c00099ff:	53                   	push   ebx
c0009a00:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a06:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a0d:	68 9e 00 00 00       	push   0x9e
c0009a12:	6a 00                	push   0x0
c0009a14:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a18:	56                   	push   esi
c0009a19:	e8 66 6c ff ff       	call   c0000684 <memset>
c0009a1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a21:	e8 7a 6c ff ff       	call   c00006a0 <strlen>
c0009a26:	ba 50 00 00 00       	mov    edx,0x50
c0009a2b:	83 c4 10             	add    esp,0x10
c0009a2e:	29 c2                	sub    edx,eax
c0009a30:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a34:	d1 ea                	shr    edx,1
c0009a36:	84 c0                	test   al,al
c0009a38:	74 19                	je     c0009a53 <Krnl::setBootMessage(char const*)+0x56>
c0009a3a:	01 d2                	add    edx,edx
c0009a3c:	43                   	inc    ebx
c0009a3d:	01 f2                	add    edx,esi
c0009a3f:	80 cc 0f             	or     ah,0xf
c0009a42:	83 c2 02             	add    edx,0x2
c0009a45:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a49:	43                   	inc    ebx
c0009a4a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a4f:	84 c0                	test   al,al
c0009a51:	75 ec                	jne    c0009a3f <Krnl::setBootMessage(char const*)+0x42>
c0009a53:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a58:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a5f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a65:	5b                   	pop    ebx
c0009a66:	5e                   	pop    esi
c0009a67:	5f                   	pop    edi
c0009a68:	c3                   	ret    

c0009a69 <kernel_main>:
c0009a69:	57                   	push   edi
c0009a6a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a6f:	56                   	push   esi
c0009a70:	89 fa                	mov    edx,edi
c0009a72:	53                   	push   ebx
c0009a73:	31 f6                	xor    esi,esi
c0009a75:	83 ec 2c             	sub    esp,0x2c
c0009a78:	89 f0                	mov    eax,esi
c0009a7a:	ee                   	out    dx,al
c0009a7b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009a80:	b0 80                	mov    al,0x80
c0009a82:	89 da                	mov    edx,ebx
c0009a84:	ee                   	out    dx,al
c0009a85:	b1 03                	mov    cl,0x3
c0009a87:	ba f8 03 00 00       	mov    edx,0x3f8
c0009a8c:	88 c8                	mov    al,cl
c0009a8e:	ee                   	out    dx,al
c0009a8f:	89 f0                	mov    eax,esi
c0009a91:	89 fa                	mov    edx,edi
c0009a93:	ee                   	out    dx,al
c0009a94:	88 c8                	mov    al,cl
c0009a96:	89 da                	mov    edx,ebx
c0009a98:	ee                   	out    dx,al
c0009a99:	b0 c7                	mov    al,0xc7
c0009a9b:	ba fa 03 00 00       	mov    edx,0x3fa
c0009aa0:	ee                   	out    dx,al
c0009aa1:	b0 0b                	mov    al,0xb
c0009aa3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009aa8:	ee                   	out    dx,al
c0009aa9:	68 b4 24 02 c0       	push   0xc00224b4
c0009aae:	e8 51 2f 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009ab3:	e8 b8 09 00 00       	call   c000a470 <installVgaTextImplementation()>
c0009ab8:	0f b6 05 e0 52 02 c0 	movzx  eax,BYTE PTR ds:0xc00252e0
c0009abf:	83 c4 10             	add    esp,0x10
c0009ac2:	84 c0                	test   al,al
c0009ac4:	74 6c                	je     c0009b32 <kernel_main+0xc9>
c0009ac6:	31 db                	xor    ebx,ebx
c0009ac8:	bf 0a 00 00 00       	mov    edi,0xa
c0009acd:	be 05 00 00 00       	mov    esi,0x5
c0009ad2:	31 c9                	xor    ecx,ecx
c0009ad4:	eb 2a                	jmp    c0009b00 <kernel_main+0x97>
c0009ad6:	3c 0d                	cmp    al,0xd
c0009ad8:	74 1a                	je     c0009af4 <kernel_main+0x8b>
c0009ada:	3c 0a                	cmp    al,0xa
c0009adc:	74 40                	je     c0009b1e <kernel_main+0xb5>
c0009ade:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ae1:	80 cc 0e             	or     ah,0xe
c0009ae4:	c1 e2 04             	shl    edx,0x4
c0009ae7:	01 ca                	add    edx,ecx
c0009ae9:	41                   	inc    ecx
c0009aea:	01 fa                	add    edx,edi
c0009aec:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009af4:	43                   	inc    ebx
c0009af5:	0f b6 83 e0 52 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdad20]
c0009afc:	84 c0                	test   al,al
c0009afe:	74 32                	je     c0009b32 <kernel_main+0xc9>
c0009b00:	80 b9 16 53 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffdacea],0xdb
c0009b07:	75 cd                	jne    c0009ad6 <kernel_main+0x6d>
c0009b09:	0f b6 91 15 53 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffdaceb]
c0009b10:	83 e2 fe             	and    edx,0xfffffffe
c0009b13:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b19:	75 bb                	jne    c0009ad6 <kernel_main+0x6d>
c0009b1b:	47                   	inc    edi
c0009b1c:	eb b8                	jmp    c0009ad6 <kernel_main+0x6d>
c0009b1e:	43                   	inc    ebx
c0009b1f:	46                   	inc    esi
c0009b20:	31 c9                	xor    ecx,ecx
c0009b22:	0f b6 83 e0 52 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdad20]
c0009b29:	bf 0a 00 00 00       	mov    edi,0xa
c0009b2e:	84 c0                	test   al,al
c0009b30:	75 ce                	jne    c0009b00 <kernel_main+0x97>
c0009b32:	83 ec 0c             	sub    esp,0xc
c0009b35:	68 cc 24 02 c0       	push   0xc00224cc
c0009b3a:	e8 be fe ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0009b3f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b44:	a3 80 60 02 c0       	mov    ds:0xc0026080,eax
c0009b49:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b4e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b53:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b58:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b5b:	e8 cb 03 00 00       	call   c0009f2b <Phys::physicalMemorySetup(unsigned int)>
c0009b60:	e8 83 1c 00 00       	call   c000b7e8 <Virt::virtualMemorySetup()>
c0009b65:	58                   	pop    eax
c0009b66:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b6a:	53                   	push   ebx
c0009b6b:	e8 34 1d 00 00       	call   c000b8a4 <VAS::VAS()>
c0009b70:	89 1d d0 61 02 c0    	mov    DWORD PTR ds:0xc00261d0,ebx
c0009b76:	e8 a5 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b7b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009b82:	e8 1c fe ff ff       	call   c00099a3 <malloc>
c0009b87:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b8a:	89 c6                	mov    esi,eax
c0009b8c:	e8 0d f0 ff ff       	call   c0008b9e <Computer::Computer()>
c0009b91:	6a 00                	push   0x0
c0009b93:	89 35 68 60 02 c0    	mov    DWORD PTR ds:0xc0026068,esi
c0009b99:	6a 00                	push   0x0
c0009b9b:	6a 00                	push   0x0
c0009b9d:	56                   	push   esi
c0009b9e:	e8 07 f4 ff ff       	call   c0008faa <Computer::open(int, int, void*)>
c0009ba3:	83 c4 14             	add    esp,0x14
c0009ba6:	53                   	push   ebx
c0009ba7:	e8 a8 1f 00 00       	call   c000bb54 <VAS::~VAS()>
c0009bac:	83 c4 30             	add    esp,0x30
c0009baf:	5b                   	pop    ebx
c0009bb0:	5e                   	pop    esi
c0009bb1:	5f                   	pop    edi
c0009bb2:	c3                   	ret    

c0009bb3 <Phys::allocateDMA(unsigned long)>:
c0009bb3:	55                   	push   ebp
c0009bb4:	31 ed                	xor    ebp,ebp
c0009bb6:	57                   	push   edi
c0009bb7:	56                   	push   esi
c0009bb8:	53                   	push   ebx
c0009bb9:	31 db                	xor    ebx,ebx
c0009bbb:	83 ec 18             	sub    esp,0x18
c0009bbe:	68 eb 24 02 c0       	push   0xc00224eb
c0009bc3:	e8 3c 2e 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009bc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bcc:	31 d2                	xor    edx,edx
c0009bce:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0009bd4:	83 c4 10             	add    esp,0x10
c0009bd7:	c1 ee 0c             	shr    esi,0xc
c0009bda:	31 c9                	xor    ecx,ecx
c0009bdc:	eb 17                	jmp    c0009bf5 <Phys::allocateDMA(unsigned long)+0x42>
c0009bde:	85 c9                	test   ecx,ecx
c0009be0:	75 04                	jne    c0009be6 <Phys::allocateDMA(unsigned long)+0x33>
c0009be2:	89 d5                	mov    ebp,edx
c0009be4:	89 d3                	mov    ebx,edx
c0009be6:	8d 41 01             	lea    eax,[ecx+0x1]
c0009be9:	39 c6                	cmp    esi,eax
c0009beb:	74 23                	je     c0009c10 <Phys::allocateDMA(unsigned long)+0x5d>
c0009bed:	42                   	inc    edx
c0009bee:	89 c1                	mov    ecx,eax
c0009bf0:	83 fa 2f             	cmp    edx,0x2f
c0009bf3:	7f 11                	jg     c0009c06 <Phys::allocateDMA(unsigned long)+0x53>
c0009bf5:	80 ba c0 60 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd9f40],0x0
c0009bfc:	74 e0                	je     c0009bde <Phys::allocateDMA(unsigned long)+0x2b>
c0009bfe:	31 c9                	xor    ecx,ecx
c0009c00:	42                   	inc    edx
c0009c01:	83 fa 2f             	cmp    edx,0x2f
c0009c04:	7e ef                	jle    c0009bf5 <Phys::allocateDMA(unsigned long)+0x42>
c0009c06:	83 c4 0c             	add    esp,0xc
c0009c09:	31 c0                	xor    eax,eax
c0009c0b:	5b                   	pop    ebx
c0009c0c:	5e                   	pop    esi
c0009c0d:	5f                   	pop    edi
c0009c0e:	5d                   	pop    ebp
c0009c0f:	c3                   	ret    
c0009c10:	8d 14 33             	lea    edx,[ebx+esi*1]
c0009c13:	89 d7                	mov    edi,edx
c0009c15:	4f                   	dec    edi
c0009c16:	79 03                	jns    c0009c1b <Phys::allocateDMA(unsigned long)+0x68>
c0009c18:	8d 7a 0e             	lea    edi,[edx+0xe]
c0009c1b:	c1 ff 04             	sar    edi,0x4
c0009c1e:	89 da                	mov    edx,ebx
c0009c20:	c1 fa 04             	sar    edx,0x4
c0009c23:	39 fa                	cmp    edx,edi
c0009c25:	75 43                	jne    c0009c6a <Phys::allocateDMA(unsigned long)+0xb7>
c0009c27:	85 c0                	test   eax,eax
c0009c29:	74 1a                	je     c0009c45 <Phys::allocateDMA(unsigned long)+0x92>
c0009c2b:	be c0 60 02 c0       	mov    esi,0xc00260c0
c0009c30:	8d 93 c0 60 02 c0    	lea    edx,[ebx-0x3ffd9f40]
c0009c36:	f7 d6                	not    esi
c0009c38:	29 de                	sub    esi,ebx
c0009c3a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c3d:	42                   	inc    edx
c0009c3e:	8d 04 16             	lea    eax,[esi+edx*1]
c0009c41:	39 c1                	cmp    ecx,eax
c0009c43:	7f f5                	jg     c0009c3a <Phys::allocateDMA(unsigned long)+0x87>
c0009c45:	83 ec 0c             	sub    esp,0xc
c0009c48:	68 04 25 02 c0       	push   0xc0022504
c0009c4d:	e8 b2 2d 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009c52:	83 c4 10             	add    esp,0x10
c0009c55:	85 ff                	test   edi,edi
c0009c57:	74 17                	je     c0009c70 <Phys::allocateDMA(unsigned long)+0xbd>
c0009c59:	83 c4 0c             	add    esp,0xc
c0009c5c:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c0009c62:	5b                   	pop    ebx
c0009c63:	c1 e0 0c             	shl    eax,0xc
c0009c66:	5e                   	pop    esi
c0009c67:	5f                   	pop    edi
c0009c68:	5d                   	pop    ebp
c0009c69:	c3                   	ret    
c0009c6a:	89 ea                	mov    edx,ebp
c0009c6c:	31 c9                	xor    ecx,ecx
c0009c6e:	eb 90                	jmp    c0009c00 <Phys::allocateDMA(unsigned long)+0x4d>
c0009c70:	83 c4 0c             	add    esp,0xc
c0009c73:	c1 e3 0c             	shl    ebx,0xc
c0009c76:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c0009c7c:	5b                   	pop    ebx
c0009c7d:	5e                   	pop    esi
c0009c7e:	5f                   	pop    edi
c0009c7f:	5d                   	pop    ebp
c0009c80:	c3                   	ret    

c0009c81 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009c81:	83 ec 18             	sub    esp,0x18
c0009c84:	68 1b 25 02 c0       	push   0xc002251b
c0009c89:	e8 76 2d 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009c8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009c92:	83 c4 10             	add    esp,0x10
c0009c95:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c0009c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c9f:	c1 e9 0c             	shr    ecx,0xc
c0009ca2:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c0009caa:	76 29                	jbe    c0009cd5 <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c0009cac:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c0009cb2:	c1 ea 0c             	shr    edx,0xc
c0009cb5:	83 c2 10             	add    edx,0x10
c0009cb8:	85 c9                	test   ecx,ecx
c0009cba:	74 15                	je     c0009cd1 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c0009cbc:	8d 82 c0 60 02 c0    	lea    eax,[edx-0x3ffd9f40]
c0009cc2:	8d 94 11 c0 60 02 c0 	lea    edx,[ecx+edx*1-0x3ffd9f40]
c0009cc9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009ccc:	40                   	inc    eax
c0009ccd:	39 d0                	cmp    eax,edx
c0009ccf:	75 f8                	jne    c0009cc9 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c0009cd1:	83 c4 0c             	add    esp,0xc
c0009cd4:	c3                   	ret    
c0009cd5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c0009cdb:	c1 ea 0c             	shr    edx,0xc
c0009cde:	eb d8                	jmp    c0009cb8 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c0009ce0 <Phys::setPageState(unsigned long, bool)>:
c0009ce0:	56                   	push   esi
c0009ce1:	ba 01 00 00 00       	mov    edx,0x1
c0009ce6:	53                   	push   ebx
c0009ce7:	8b 35 24 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025424
c0009ced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009cf5:	89 c8                	mov    eax,ecx
c0009cf7:	83 e1 07             	and    ecx,0x7
c0009cfa:	c1 e8 03             	shr    eax,0x3
c0009cfd:	d3 e3                	shl    ebx,cl
c0009cff:	01 c6                	add    esi,eax
c0009d01:	d3 e2                	shl    edx,cl
c0009d03:	f7 d2                	not    edx
c0009d05:	20 16                	and    BYTE PTR [esi],dl
c0009d07:	03 05 24 54 02 c0    	add    eax,DWORD PTR ds:0xc0025424
c0009d0d:	08 18                	or     BYTE PTR [eax],bl
c0009d0f:	5b                   	pop    ebx
c0009d10:	5e                   	pop    esi
c0009d11:	c3                   	ret    

c0009d12 <Phys::getPageState(unsigned long)>:
c0009d12:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d16:	8b 15 24 54 02 c0    	mov    edx,DWORD PTR ds:0xc0025424
c0009d1c:	89 c8                	mov    eax,ecx
c0009d1e:	83 e1 07             	and    ecx,0x7
c0009d21:	c1 e8 03             	shr    eax,0x3
c0009d24:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d28:	d3 f8                	sar    eax,cl
c0009d2a:	83 e0 01             	and    eax,0x1
c0009d2d:	c3                   	ret    

c0009d2e <Phys::freePage(unsigned long)>:
c0009d2e:	53                   	push   ebx
c0009d2f:	83 ec 10             	sub    esp,0x10
c0009d32:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d36:	53                   	push   ebx
c0009d37:	68 31 25 02 c0       	push   0xc0022531
c0009d3c:	e8 c3 2c 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009d41:	83 c4 10             	add    esp,0x10
c0009d44:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c0009d4a:	76 3d                	jbe    c0009d89 <Phys::freePage(unsigned long)+0x5b>
c0009d4c:	83 ec 0c             	sub    esp,0xc
c0009d4f:	c1 eb 0c             	shr    ebx,0xc
c0009d52:	53                   	push   ebx
c0009d53:	e8 ba ff ff ff       	call   c0009d12 <Phys::getPageState(unsigned long)>
c0009d58:	83 c4 10             	add    esp,0x10
c0009d5b:	84 c0                	test   al,al
c0009d5d:	74 19                	je     c0009d78 <Phys::freePage(unsigned long)+0x4a>
c0009d5f:	83 ec 08             	sub    esp,0x8
c0009d62:	ff 0d b0 60 02 c0    	dec    DWORD PTR ds:0xc00260b0
c0009d68:	6a 00                	push   0x0
c0009d6a:	53                   	push   ebx
c0009d6b:	e8 70 ff ff ff       	call   c0009ce0 <Phys::setPageState(unsigned long, bool)>
c0009d70:	83 c4 10             	add    esp,0x10
c0009d73:	83 c4 08             	add    esp,0x8
c0009d76:	5b                   	pop    ebx
c0009d77:	c3                   	ret    
c0009d78:	c7 44 24 10 44 25 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022544
c0009d80:	83 c4 08             	add    esp,0x8
c0009d83:	5b                   	pop    ebx
c0009d84:	e9 ba a4 00 00       	jmp    c0014243 <Krnl::panic(char const*)>
c0009d89:	83 ec 08             	sub    esp,0x8
c0009d8c:	68 00 10 00 00       	push   0x1000
c0009d91:	53                   	push   ebx
c0009d92:	e8 ea fe ff ff       	call   c0009c81 <Phys::freeDMA(unsigned long, unsigned long)>
c0009d97:	83 c4 10             	add    esp,0x10
c0009d9a:	83 c4 08             	add    esp,0x8
c0009d9d:	5b                   	pop    ebx
c0009d9e:	c3                   	ret    

c0009d9f <Phys::allocatePage()>:
c0009d9f:	56                   	push   esi
c0009da0:	53                   	push   ebx
c0009da1:	83 ec 14             	sub    esp,0x14
c0009da4:	8b 35 a4 60 02 c0    	mov    esi,DWORD PTR ds:0xc00260a4
c0009daa:	89 f3                	mov    ebx,esi
c0009dac:	eb 0a                	jmp    c0009db8 <Phys::allocatePage()+0x19>
c0009dae:	89 1d a4 60 02 c0    	mov    DWORD PTR ds:0xc00260a4,ebx
c0009db4:	39 de                	cmp    esi,ebx
c0009db6:	74 24                	je     c0009ddc <Phys::allocatePage()+0x3d>
c0009db8:	53                   	push   ebx
c0009db9:	e8 54 ff ff ff       	call   c0009d12 <Phys::getPageState(unsigned long)>
c0009dbe:	5a                   	pop    edx
c0009dbf:	84 c0                	test   al,al
c0009dc1:	74 76                	je     c0009e39 <Phys::allocatePage()+0x9a>
c0009dc3:	43                   	inc    ebx
c0009dc4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009dca:	75 e2                	jne    c0009dae <Phys::allocatePage()+0xf>
c0009dcc:	31 db                	xor    ebx,ebx
c0009dce:	c7 05 a4 60 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00260a4,0x0
c0009dd8:	39 de                	cmp    esi,ebx
c0009dda:	75 dc                	jne    c0009db8 <Phys::allocatePage()+0x19>
c0009ddc:	83 ec 0c             	sub    esp,0xc
c0009ddf:	68 78 25 02 c0       	push   0xc0022578
c0009de4:	e8 1b 2c 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009de9:	58                   	pop    eax
c0009dea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009def:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009df2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009df8:	e8 8d 28 00 00       	call   c000c68a <VAS::scanForEviction()>
c0009dfd:	83 c4 10             	add    esp,0x10
c0009e00:	85 c0                	test   eax,eax
c0009e02:	75 76                	jne    c0009e7a <Phys::allocatePage()+0xdb>
c0009e04:	83 ec 0c             	sub    esp,0xc
c0009e07:	68 00 10 00 00       	push   0x1000
c0009e0c:	e8 a2 fd ff ff       	call   c0009bb3 <Phys::allocateDMA(unsigned long)>
c0009e11:	83 c4 10             	add    esp,0x10
c0009e14:	85 c0                	test   eax,eax
c0009e16:	75 5c                	jne    c0009e74 <Phys::allocatePage()+0xd5>
c0009e18:	83 ec 0c             	sub    esp,0xc
c0009e1b:	68 90 25 02 c0       	push   0xc0022590
c0009e20:	e8 1e a4 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0009e25:	83 c4 10             	add    esp,0x10
c0009e28:	8b 1d a4 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260a4
c0009e2e:	53                   	push   ebx
c0009e2f:	e8 de fe ff ff       	call   c0009d12 <Phys::getPageState(unsigned long)>
c0009e34:	5a                   	pop    edx
c0009e35:	84 c0                	test   al,al
c0009e37:	75 8a                	jne    c0009dc3 <Phys::allocatePage()+0x24>
c0009e39:	6a 01                	push   0x1
c0009e3b:	53                   	push   ebx
c0009e3c:	e8 9f fe ff ff       	call   c0009ce0 <Phys::setPageState(unsigned long, bool)>
c0009e41:	5a                   	pop    edx
c0009e42:	a1 b0 60 02 c0       	mov    eax,ds:0xc00260b0
c0009e47:	59                   	pop    ecx
c0009e48:	40                   	inc    eax
c0009e49:	8b 15 a4 60 02 c0    	mov    edx,DWORD PTR ds:0xc00260a4
c0009e4f:	a3 b0 60 02 c0       	mov    ds:0xc00260b0,eax
c0009e54:	c1 e2 0c             	shl    edx,0xc
c0009e57:	52                   	push   edx
c0009e58:	ff 35 b4 60 02 c0    	push   DWORD PTR ds:0xc00260b4
c0009e5e:	50                   	push   eax
c0009e5f:	68 5a 25 02 c0       	push   0xc002255a
c0009e64:	e8 9b 2b 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009e69:	a1 a4 60 02 c0       	mov    eax,ds:0xc00260a4
c0009e6e:	83 c4 10             	add    esp,0x10
c0009e71:	c1 e0 0c             	shl    eax,0xc
c0009e74:	83 c4 14             	add    esp,0x14
c0009e77:	5b                   	pop    ebx
c0009e78:	5e                   	pop    esi
c0009e79:	c3                   	ret    
c0009e7a:	83 ec 08             	sub    esp,0x8
c0009e7d:	89 c2                	mov    edx,eax
c0009e7f:	6a 01                	push   0x1
c0009e81:	c1 ea 0c             	shr    edx,0xc
c0009e84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e88:	52                   	push   edx
c0009e89:	e8 52 fe ff ff       	call   c0009ce0 <Phys::setPageState(unsigned long, bool)>
c0009e8e:	83 c4 10             	add    esp,0x10
c0009e91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e95:	eb dd                	jmp    c0009e74 <Phys::allocatePage()+0xd5>

c0009e97 <Phys::allocateContiguousPages(int)>:
c0009e97:	57                   	push   edi
c0009e98:	56                   	push   esi
c0009e99:	53                   	push   ebx
c0009e9a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009e9e:	fa                   	cli    
c0009e9f:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0009ea5:	31 db                	xor    ebx,ebx
c0009ea7:	85 db                	test   ebx,ebx
c0009ea9:	75 11                	jne    c0009ebc <Phys::allocateContiguousPages(int)+0x25>
c0009eab:	e8 ef fe ff ff       	call   c0009d9f <Phys::allocatePage()>
c0009eb0:	83 fe 01             	cmp    esi,0x1
c0009eb3:	89 c7                	mov    edi,eax
c0009eb5:	74 21                	je     c0009ed8 <Phys::allocateContiguousPages(int)+0x41>
c0009eb7:	bb 01 00 00 00       	mov    ebx,0x1
c0009ebc:	e8 de fe ff ff       	call   c0009d9f <Phys::allocatePage()>
c0009ec1:	89 da                	mov    edx,ebx
c0009ec3:	c1 e2 0c             	shl    edx,0xc
c0009ec6:	01 fa                	add    edx,edi
c0009ec8:	39 c2                	cmp    edx,eax
c0009eca:	74 20                	je     c0009eec <Phys::allocateContiguousPages(int)+0x55>
c0009ecc:	bb 01 00 00 00       	mov    ebx,0x1
c0009ed1:	89 c7                	mov    edi,eax
c0009ed3:	83 fe 01             	cmp    esi,0x1
c0009ed6:	75 e4                	jne    c0009ebc <Phys::allocateContiguousPages(int)+0x25>
c0009ed8:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0009edd:	48                   	dec    eax
c0009ede:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0009ee3:	75 01                	jne    c0009ee6 <Phys::allocateContiguousPages(int)+0x4f>
c0009ee5:	fb                   	sti    
c0009ee6:	89 f8                	mov    eax,edi
c0009ee8:	5b                   	pop    ebx
c0009ee9:	5e                   	pop    esi
c0009eea:	5f                   	pop    edi
c0009eeb:	c3                   	ret    
c0009eec:	43                   	inc    ebx
c0009eed:	39 f3                	cmp    ebx,esi
c0009eef:	75 b6                	jne    c0009ea7 <Phys::allocateContiguousPages(int)+0x10>
c0009ef1:	eb e5                	jmp    c0009ed8 <Phys::allocateContiguousPages(int)+0x41>

c0009ef3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009ef3:	56                   	push   esi
c0009ef4:	53                   	push   ebx
c0009ef5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ef9:	39 1d a8 60 02 c0    	cmp    DWORD PTR ds:0xc00260a8,ebx
c0009eff:	73 06                	jae    c0009f07 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f01:	89 1d a8 60 02 c0    	mov    DWORD PTR ds:0xc00260a8,ebx
c0009f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f0b:	c1 eb 0c             	shr    ebx,0xc
c0009f0e:	c1 e8 0c             	shr    eax,0xc
c0009f11:	39 d8                	cmp    eax,ebx
c0009f13:	73 13                	jae    c0009f28 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f15:	6a 00                	push   0x0
c0009f17:	8d 70 01             	lea    esi,[eax+0x1]
c0009f1a:	50                   	push   eax
c0009f1b:	e8 c0 fd ff ff       	call   c0009ce0 <Phys::setPageState(unsigned long, bool)>
c0009f20:	5a                   	pop    edx
c0009f21:	89 f0                	mov    eax,esi
c0009f23:	59                   	pop    ecx
c0009f24:	39 f3                	cmp    ebx,esi
c0009f26:	75 ed                	jne    c0009f15 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f28:	5b                   	pop    ebx
c0009f29:	5e                   	pop    esi
c0009f2a:	c3                   	ret    

c0009f2b <Phys::physicalMemorySetup(unsigned int)>:
c0009f2b:	55                   	push   ebp
c0009f2c:	57                   	push   edi
c0009f2d:	56                   	push   esi
c0009f2e:	53                   	push   ebx
c0009f2f:	83 ec 40             	sub    esp,0x40
c0009f32:	6a 30                	push   0x30
c0009f34:	6a 00                	push   0x0
c0009f36:	68 c0 60 02 c0       	push   0xc00260c0
c0009f3b:	e8 44 67 ff ff       	call   c0000684 <memset>
c0009f40:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f49:	05 00 10 00 00       	add    eax,0x1000
c0009f4e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009f52:	5b                   	pop    ebx
c0009f53:	31 db                	xor    ebx,ebx
c0009f55:	5e                   	pop    esi
c0009f56:	50                   	push   eax
c0009f57:	68 9e 25 02 c0       	push   0xc002259e
c0009f5c:	e8 a3 2a 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009f61:	83 c4 10             	add    esp,0x10
c0009f64:	83 ec 08             	sub    esp,0x8
c0009f67:	6a 01                	push   0x1
c0009f69:	53                   	push   ebx
c0009f6a:	43                   	inc    ebx
c0009f6b:	e8 70 fd ff ff       	call   c0009ce0 <Phys::setPageState(unsigned long, bool)>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009f79:	75 e9                	jne    c0009f64 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009f7b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009f82:	66 85 c0             	test   ax,ax
c0009f85:	0f 84 8e 01 00 00    	je     c000a119 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009f8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f8f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009f9b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fa0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fa4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009fac:	eb 15                	jmp    c0009fc3 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009fae:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fb2:	83 c3 18             	add    ebx,0x18
c0009fb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009fb9:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009fbd:	0f 84 66 01 00 00    	je     c000a129 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009fc3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009fc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009fc9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009fcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fd4:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009fd6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009fd9:	01 f0                	add    eax,esi
c0009fdb:	55                   	push   ebp
c0009fdc:	11 fa                	adc    edx,edi
c0009fde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fe2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009fe6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009fea:	56                   	push   esi
c0009feb:	68 e0 25 02 c0       	push   0xc00225e0
c0009ff0:	e8 0f 2a 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0009ff5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	09 f8                	or     eax,edi
c0009ffe:	0f 85 25 01 00 00    	jne    c000a129 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a004:	4d                   	dec    ebp
c000a005:	75 a7                	jne    c0009fae <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a007:	ba 00 00 08 00       	mov    edx,0x80000
c000a00c:	89 c1                	mov    ecx,eax
c000a00e:	39 f2                	cmp    edx,esi
c000a010:	19 f9                	sbb    ecx,edi
c000a012:	0f 82 a7 00 00 00    	jb     c000a0bf <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a018:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a01c:	89 c1                	mov    ecx,eax
c000a01e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a022:	0f 83 97 00 00 00    	jae    c000a0bf <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a028:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a02d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a031:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a035:	39 fa                	cmp    edx,edi
c000a037:	19 e8                	sbb    eax,ebp
c000a039:	0f 82 14 01 00 00    	jb     c000a153 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000a03f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a043:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a047:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a04d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a052:	83 d5 ff             	adc    ebp,0xffffffff
c000a055:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a059:	31 c0                	xor    eax,eax
c000a05b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a05f:	39 fa                	cmp    edx,edi
c000a061:	89 c1                	mov    ecx,eax
c000a063:	19 e9                	sbb    ecx,ebp
c000a065:	0f 83 43 ff ff ff    	jae    c0009fae <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a06b:	be 00 00 08 00       	mov    esi,0x80000
c000a070:	50                   	push   eax
c000a071:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a075:	57                   	push   edi
c000a076:	56                   	push   esi
c000a077:	68 04 26 02 c0       	push   0xc0022604
c000a07c:	e8 83 29 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000a081:	5a                   	pop    edx
c000a082:	59                   	pop    ecx
c000a083:	57                   	push   edi
c000a084:	56                   	push   esi
c000a085:	e8 69 fe ff ff       	call   c0009ef3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a08a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a08e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a092:	83 c4 0c             	add    esp,0xc
c000a095:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a099:	03 05 b4 60 02 c0    	add    eax,DWORD PTR ds:0xc00260b4
c000a09f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0a6:	a3 b4 60 02 c0       	mov    ds:0xc00260b4,eax
c000a0ab:	52                   	push   edx
c000a0ac:	50                   	push   eax
c000a0ad:	68 c4 25 02 c0       	push   0xc00225c4
c000a0b2:	e8 4d 29 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000a0b7:	83 c4 10             	add    esp,0x10
c000a0ba:	e9 ef fe ff ff       	jmp    c0009fae <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0bf:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a0c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a0cb:	39 ea                	cmp    edx,ebp
c000a0cd:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a0d1:	0f 82 d7 fe ff ff    	jb     c0009fae <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0d7:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a0dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a0e0:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a0e4:	0f 83 c4 fe ff ff    	jae    c0009fae <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0ea:	39 ee                	cmp    esi,ebp
c000a0ec:	89 f8                	mov    eax,edi
c000a0ee:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a0f2:	0f 83 78 ff ff ff    	jae    c000a070 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a0f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a0fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a100:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a104:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a108:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a10c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a110:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a114:	e9 57 ff ff ff       	jmp    c000a070 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a119:	83 ec 0c             	sub    esp,0xc
c000a11c:	68 b6 25 02 c0       	push   0xc00225b6
c000a121:	e8 1d a1 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000a126:	83 c4 10             	add    esp,0x10
c000a129:	bb 40 01 00 00       	mov    ebx,0x140
c000a12e:	83 ec 08             	sub    esp,0x8
c000a131:	6a 00                	push   0x0
c000a133:	53                   	push   ebx
c000a134:	43                   	inc    ebx
c000a135:	e8 a6 fb ff ff       	call   c0009ce0 <Phys::setPageState(unsigned long, bool)>
c000a13a:	ff 05 b4 60 02 c0    	inc    DWORD PTR ds:0xc00260b4
c000a140:	83 c4 10             	add    esp,0x10
c000a143:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a149:	75 e3                	jne    c000a12e <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a14b:	83 c4 3c             	add    esp,0x3c
c000a14e:	5b                   	pop    ebx
c000a14f:	5e                   	pop    esi
c000a150:	5f                   	pop    edi
c000a151:	5d                   	pop    ebp
c000a152:	c3                   	ret    
c000a153:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a15b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a163:	e9 d7 fe ff ff       	jmp    c000a03f <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a168 <Pipe::isAtty()>:
c000a168:	31 c0                	xor    eax,eax
c000a16a:	c3                   	ret    
c000a16b:	90                   	nop

c000a16c <Pipe::~Pipe()>:
c000a16c:	83 ec 0c             	sub    esp,0xc
c000a16f:	ba 70 26 02 c0       	mov    edx,0xc0022670
c000a174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a178:	89 10                	mov    DWORD PTR [eax],edx
c000a17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17e:	83 ec 0c             	sub    esp,0xc
c000a181:	50                   	push   eax
c000a182:	e8 41 12 00 00       	call   c000b3c8 <UnixFile::~UnixFile()>
c000a187:	83 c4 10             	add    esp,0x10
c000a18a:	90                   	nop
c000a18b:	83 c4 0c             	add    esp,0xc
c000a18e:	c3                   	ret    
c000a18f:	90                   	nop

c000a190 <Pipe::~Pipe()>:
c000a190:	83 ec 0c             	sub    esp,0xc
c000a193:	83 ec 0c             	sub    esp,0xc
c000a196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a19a:	e8 cd ff ff ff       	call   c000a16c <Pipe::~Pipe()>
c000a19f:	83 c4 10             	add    esp,0x10
c000a1a2:	83 ec 08             	sub    esp,0x8
c000a1a5:	6a 20                	push   0x20
c000a1a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ab:	e8 73 27 00 00       	call   c000c923 <operator delete(void*, unsigned long)>
c000a1b0:	83 c4 10             	add    esp,0x10
c000a1b3:	83 c4 0c             	add    esp,0xc
c000a1b6:	c3                   	ret    
c000a1b7:	90                   	nop

c000a1b8 <Pipe::read(unsigned long long, void*, int*)>:
c000a1b8:	55                   	push   ebp
c000a1b9:	57                   	push   edi
c000a1ba:	56                   	push   esi
c000a1bb:	53                   	push   ebx
c000a1bc:	83 ec 1c             	sub    esp,0x1c
c000a1bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a1c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a1c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a1cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a1ce:	89 c8                	mov    eax,ecx
c000a1d0:	99                   	cdq    
c000a1d1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a1d5:	74 24                	je     c000a1fb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a1d7:	39 f9                	cmp    ecx,edi
c000a1d9:	89 d1                	mov    ecx,edx
c000a1db:	19 f1                	sbb    ecx,esi
c000a1dd:	73 1c                	jae    c000a1fb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a1df:	fa                   	cli    
c000a1e0:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c000a1e6:	e8 e5 db 00 00       	call   c0017dd0 <schedule()>
c000a1eb:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000a1f0:	48                   	dec    eax
c000a1f1:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000a1f6:	75 d3                	jne    c000a1cb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a1f8:	fb                   	sti    
c000a1f9:	eb d0                	jmp    c000a1cb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a1fb:	39 f8                	cmp    eax,edi
c000a1fd:	89 d1                	mov    ecx,edx
c000a1ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a202:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a206:	19 f1                	sbb    ecx,esi
c000a208:	73 07                	jae    c000a211 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a20a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a211:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a214:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a217:	29 f7                	sub    edi,esi
c000a219:	89 f8                	mov    eax,edi
c000a21b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a21f:	99                   	cdq    
c000a220:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a227:	19 d0                	sbb    eax,edx
c000a229:	73 07                	jae    c000a232 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a22e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a232:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a235:	89 ea                	mov    edx,ebp
c000a237:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a23b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a240:	74 0d                	je     c000a24f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a242:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a245:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a24d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a24f:	85 d2                	test   edx,edx
c000a251:	74 11                	je     c000a264 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a257:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a25a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a25e:	89 d1                	mov    ecx,edx
c000a260:	89 c7                	mov    edi,eax
c000a262:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a264:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a267:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a26a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a26d:	99                   	cdq    
c000a26e:	89 f7                	mov    edi,esi
c000a270:	03 04 24             	add    eax,DWORD PTR [esp]
c000a273:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a277:	c1 ff 1f             	sar    edi,0x1f
c000a27a:	57                   	push   edi
c000a27b:	56                   	push   esi
c000a27c:	52                   	push   edx
c000a27d:	50                   	push   eax
c000a27e:	e8 81 6a 01 00       	call   c0020d04 <__umoddi3>
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a289:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a28e:	75 10                	jne    c000a2a0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a290:	83 ec 0c             	sub    esp,0xc
c000a293:	68 2d 26 02 c0       	push   0xc002262d
c000a298:	e8 a6 9f 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000a29d:	83 c4 10             	add    esp,0x10
c000a2a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a2a4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a2a7:	89 10                	mov    DWORD PTR [eax],edx
c000a2a9:	83 c4 1c             	add    esp,0x1c
c000a2ac:	31 c0                	xor    eax,eax
c000a2ae:	5b                   	pop    ebx
c000a2af:	5e                   	pop    esi
c000a2b0:	5f                   	pop    edi
c000a2b1:	5d                   	pop    ebp
c000a2b2:	c3                   	ret    
c000a2b3:	90                   	nop

c000a2b4 <Pipe::write(unsigned long long, void*, int*)>:
c000a2b4:	55                   	push   ebp
c000a2b5:	57                   	push   edi
c000a2b6:	56                   	push   esi
c000a2b7:	53                   	push   ebx
c000a2b8:	83 ec 1c             	sub    esp,0x1c
c000a2bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a2bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a2c3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a2c6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a2ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000a2cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a2d1:	89 d8                	mov    eax,ebx
c000a2d3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a2d6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a2da:	89 d6                	mov    esi,edx
c000a2dc:	89 d7                	mov    edi,edx
c000a2de:	c1 ff 1f             	sar    edi,0x1f
c000a2e1:	03 34 24             	add    esi,DWORD PTR [esp]
c000a2e4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a2e8:	c1 f8 1f             	sar    eax,0x1f
c000a2eb:	39 f3                	cmp    ebx,esi
c000a2ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2f5:	19 f8                	sbb    eax,edi
c000a2f7:	b8 01 00 00 00       	mov    eax,0x1
c000a2fc:	72 6e                	jb     c000a36c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a2fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a301:	01 d0                	add    eax,edx
c000a303:	99                   	cdq    
c000a304:	f7 fb                	idiv   ebx
c000a306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a30a:	29 d3                	sub    ebx,edx
c000a30c:	89 d7                	mov    edi,edx
c000a30e:	89 de                	mov    esi,ebx
c000a310:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a313:	c1 fb 1f             	sar    ebx,0x1f
c000a316:	39 f2                	cmp    edx,esi
c000a318:	19 d8                	sbb    eax,ebx
c000a31a:	b8 00 00 00 00       	mov    eax,0x0
c000a31f:	72 04                	jb     c000a325 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a321:	89 d0                	mov    eax,edx
c000a323:	29 f0                	sub    eax,esi
c000a325:	89 d3                	mov    ebx,edx
c000a327:	29 c3                	sub    ebx,eax
c000a329:	74 0b                	je     c000a336 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a32b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a32e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a332:	89 d9                	mov    ecx,ebx
c000a334:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a336:	85 c0                	test   eax,eax
c000a338:	74 0d                	je     c000a347 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a33a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a33e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a341:	89 de                	mov    esi,ebx
c000a343:	89 c1                	mov    ecx,eax
c000a345:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a347:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a34a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a34f:	75 10                	jne    c000a361 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a351:	83 ec 0c             	sub    esp,0xc
c000a354:	68 49 26 02 c0       	push   0xc0022649
c000a359:	e8 e5 9e 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000a35e:	83 c4 10             	add    esp,0x10
c000a361:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a365:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a368:	89 08                	mov    DWORD PTR [eax],ecx
c000a36a:	31 c0                	xor    eax,eax
c000a36c:	83 c4 1c             	add    esp,0x1c
c000a36f:	5b                   	pop    ebx
c000a370:	5e                   	pop    esi
c000a371:	5f                   	pop    edi
c000a372:	5d                   	pop    ebp
c000a373:	c3                   	ret    

c000a374 <Pipe::Pipe(int)>:
c000a374:	83 ec 0c             	sub    esp,0xc
c000a377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a37b:	83 ec 08             	sub    esp,0x8
c000a37e:	6a 00                	push   0x0
c000a380:	50                   	push   eax
c000a381:	e8 60 0e 00 00       	call   c000b1e6 <UnixFile::UnixFile(int)>
c000a386:	83 c4 10             	add    esp,0x10
c000a389:	ba 70 26 02 c0       	mov    edx,0xc0022670
c000a38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a392:	89 10                	mov    DWORD PTR [eax],edx
c000a394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a39c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3a3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ae:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a3b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a3b9:	83 ec 0c             	sub    esp,0xc
c000a3bc:	50                   	push   eax
c000a3bd:	e8 e1 f5 ff ff       	call   c00099a3 <malloc>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	89 c2                	mov    edx,eax
c000a3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a3d6:	90                   	nop
c000a3d7:	83 c4 0c             	add    esp,0xc
c000a3da:	c3                   	ret    
c000a3db:	90                   	nop

c000a3dc <VgaText::isAtty()>:
c000a3dc:	b0 01                	mov    al,0x1
c000a3de:	c3                   	ret    
c000a3df:	90                   	nop

c000a3e0 <VgaText::~VgaText()>:
c000a3e0:	83 ec 0c             	sub    esp,0xc
c000a3e3:	ba f8 26 02 c0       	mov    edx,0xc00226f8
c000a3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ec:	89 10                	mov    DWORD PTR [eax],edx
c000a3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3f2:	83 ec 0c             	sub    esp,0xc
c000a3f5:	50                   	push   eax
c000a3f6:	e8 cd 0f 00 00       	call   c000b3c8 <UnixFile::~UnixFile()>
c000a3fb:	83 c4 10             	add    esp,0x10
c000a3fe:	90                   	nop
c000a3ff:	83 c4 0c             	add    esp,0xc
c000a402:	c3                   	ret    
c000a403:	90                   	nop

c000a404 <VgaText::~VgaText()>:
c000a404:	83 ec 0c             	sub    esp,0xc
c000a407:	83 ec 0c             	sub    esp,0xc
c000a40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40e:	e8 cd ff ff ff       	call   c000a3e0 <VgaText::~VgaText()>
c000a413:	83 c4 10             	add    esp,0x10
c000a416:	83 ec 08             	sub    esp,0x8
c000a419:	68 c4 02 00 00       	push   0x2c4
c000a41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a422:	e8 fc 24 00 00       	call   c000c923 <operator delete(void*, unsigned long)>
c000a427:	83 c4 10             	add    esp,0x10
c000a42a:	83 c4 0c             	add    esp,0xc
c000a42d:	c3                   	ret    

c000a42e <VgaText::read(unsigned long long, void*, int*)>:
c000a42e:	83 ec 10             	sub    esp,0x10
c000a431:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a435:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a43d:	e8 40 58 00 00       	call   c000fc82 <readKeyboard(VgaText*, char*, unsigned long)>
c000a442:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a446:	89 02                	mov    DWORD PTR [edx],eax
c000a448:	31 c0                	xor    eax,eax
c000a44a:	83 c4 1c             	add    esp,0x1c
c000a44d:	c3                   	ret    

c000a44e <setTerminalScrollLock(bool)>:
c000a44e:	c3                   	ret    

c000a44f <addToTerminalCycle(VgaText*)>:
c000a44f:	8b 15 20 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026120
c000a455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a459:	85 d2                	test   edx,edx
c000a45b:	75 09                	jne    c000a466 <addToTerminalCycle(VgaText*)+0x17>
c000a45d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a460:	a3 20 61 02 c0       	mov    ds:0xc0026120,eax
c000a465:	c3                   	ret    
c000a466:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a469:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a46c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a46f:	c3                   	ret    

c000a470 <installVgaTextImplementation()>:
c000a470:	83 ec 10             	sub    esp,0x10
c000a473:	6a 20                	push   0x20
c000a475:	6a 00                	push   0x0
c000a477:	68 00 61 02 c0       	push   0xc0026100
c000a47c:	e8 03 62 ff ff       	call   c0000684 <memset>
c000a481:	83 c4 1c             	add    esp,0x1c
c000a484:	c3                   	ret    

c000a485 <scrollTerminalScrollLock(int)>:
c000a485:	c3                   	ret    

c000a486 <VgaText::updateTitle()>:
c000a486:	53                   	push   ebx
c000a487:	31 c0                	xor    eax,eax
c000a489:	83 ec 58             	sub    esp,0x58
c000a48c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a490:	89 e1                	mov    ecx,esp
c000a492:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a496:	40                   	inc    eax
c000a497:	83 f8 50             	cmp    eax,0x50
c000a49a:	75 f6                	jne    c000a492 <VgaText::updateTitle()+0xc>
c000a49c:	31 c0                	xor    eax,eax
c000a49e:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a4a5:	84 db                	test   bl,bl
c000a4a7:	74 06                	je     c000a4af <VgaText::updateTitle()+0x29>
c000a4a9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a4ac:	40                   	inc    eax
c000a4ad:	eb ef                	jmp    c000a49e <VgaText::updateTitle()+0x18>
c000a4af:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a4b2:	85 c0                	test   eax,eax
c000a4b4:	74 09                	je     c000a4bf <VgaText::updateTitle()+0x39>
c000a4b6:	53                   	push   ebx
c000a4b7:	53                   	push   ebx
c000a4b8:	51                   	push   ecx
c000a4b9:	52                   	push   edx
c000a4ba:	ff d0                	call   eax
c000a4bc:	83 c4 10             	add    esp,0x10
c000a4bf:	83 c4 58             	add    esp,0x58
c000a4c2:	5b                   	pop    ebx
c000a4c3:	c3                   	ret    

c000a4c4 <VgaText::load()>:
c000a4c4:	53                   	push   ebx
c000a4c5:	31 c0                	xor    eax,eax
c000a4c7:	83 ec 58             	sub    esp,0x58
c000a4ca:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a4ce:	89 e2                	mov    edx,esp
c000a4d0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a4d4:	40                   	inc    eax
c000a4d5:	83 f8 50             	cmp    eax,0x50
c000a4d8:	75 f6                	jne    c000a4d0 <VgaText::load()+0xc>
c000a4da:	31 c0                	xor    eax,eax
c000a4dc:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a4e3:	84 c9                	test   cl,cl
c000a4e5:	74 06                	je     c000a4ed <VgaText::load()+0x29>
c000a4e7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a4ea:	40                   	inc    eax
c000a4eb:	eb ef                	jmp    c000a4dc <VgaText::load()+0x18>
c000a4ed:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a4f0:	85 c0                	test   eax,eax
c000a4f2:	74 09                	je     c000a4fd <VgaText::load()+0x39>
c000a4f4:	51                   	push   ecx
c000a4f5:	51                   	push   ecx
c000a4f6:	52                   	push   edx
c000a4f7:	53                   	push   ebx
c000a4f8:	ff d0                	call   eax
c000a4fa:	83 c4 10             	add    esp,0x10
c000a4fd:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a500:	85 c0                	test   eax,eax
c000a502:	74 09                	je     c000a50d <VgaText::load()+0x49>
c000a504:	83 ec 0c             	sub    esp,0xc
c000a507:	53                   	push   ebx
c000a508:	ff d0                	call   eax
c000a50a:	83 c4 10             	add    esp,0x10
c000a50d:	83 c4 58             	add    esp,0x58
c000a510:	5b                   	pop    ebx
c000a511:	c3                   	ret    

c000a512 <VgaText::updateCursor()>:
c000a512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a516:	39 05 24 61 02 c0    	cmp    DWORD PTR ds:0xc0026124,eax
c000a51c:	75 09                	jne    c000a527 <VgaText::updateCursor()+0x15>
c000a51e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a521:	85 c0                	test   eax,eax
c000a523:	74 02                	je     c000a527 <VgaText::updateCursor()+0x15>
c000a525:	ff e0                	jmp    eax
c000a527:	c3                   	ret    

c000a528 <VgaText::doANSI_SGR(int)>:
c000a528:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a530:	85 d2                	test   edx,edx
c000a532:	75 0b                	jne    c000a53f <VgaText::doANSI_SGR(int)+0x17>
c000a534:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a537:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a53a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a53d:	eb 59                	jmp    c000a598 <VgaText::doANSI_SGR(int)+0x70>
c000a53f:	83 fa 07             	cmp    edx,0x7
c000a542:	75 0b                	jne    c000a54f <VgaText::doANSI_SGR(int)+0x27>
c000a544:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a547:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a54a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a54d:	eb 49                	jmp    c000a598 <VgaText::doANSI_SGR(int)+0x70>
c000a54f:	83 fa 1b             	cmp    edx,0x1b
c000a552:	74 e0                	je     c000a534 <VgaText::doANSI_SGR(int)+0xc>
c000a554:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a557:	83 f9 07             	cmp    ecx,0x7
c000a55a:	77 09                	ja     c000a565 <VgaText::doANSI_SGR(int)+0x3d>
c000a55c:	8b 14 8d 60 54 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaba0]
c000a563:	eb 20                	jmp    c000a585 <VgaText::doANSI_SGR(int)+0x5d>
c000a565:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a568:	83 f9 07             	cmp    ecx,0x7
c000a56b:	77 09                	ja     c000a576 <VgaText::doANSI_SGR(int)+0x4e>
c000a56d:	8b 14 8d 60 54 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaba0]
c000a574:	eb 22                	jmp    c000a598 <VgaText::doANSI_SGR(int)+0x70>
c000a576:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a579:	83 f9 07             	cmp    ecx,0x7
c000a57c:	77 0b                	ja     c000a589 <VgaText::doANSI_SGR(int)+0x61>
c000a57e:	8b 14 95 18 53 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdace8]
c000a585:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a588:	c3                   	ret    
c000a589:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a58c:	83 f9 07             	cmp    ecx,0x7
c000a58f:	77 0a                	ja     c000a59b <VgaText::doANSI_SGR(int)+0x73>
c000a591:	8b 14 95 f0 52 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdad10]
c000a598:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a59b:	c3                   	ret    

c000a59c <VgaText::setDefaultBgColour(VgaColour)>:
c000a59c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5a4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a5a7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a5aa:	c3                   	ret    
c000a5ab:	90                   	nop

c000a5ac <VgaText::setDefaultFgColour(VgaColour)>:
c000a5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5b4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a5b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5ba:	c3                   	ret    
c000a5bb:	90                   	nop

c000a5bc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a5bc:	53                   	push   ebx
c000a5bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a5c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a5c9:	51                   	push   ecx
c000a5ca:	e8 cd ff ff ff       	call   c000a59c <VgaText::setDefaultBgColour(VgaColour)>
c000a5cf:	58                   	pop    eax
c000a5d0:	5a                   	pop    edx
c000a5d1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a5d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a5d9:	5b                   	pop    ebx
c000a5da:	eb d0                	jmp    c000a5ac <VgaText::setDefaultFgColour(VgaColour)>

c000a5dc <VgaText::setTitleTextColour(VgaColour)>:
c000a5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5e4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a5e7:	e9 9a fe ff ff       	jmp    c000a486 <VgaText::updateTitle()>

c000a5ec <VgaText::setTitleColour(VgaColour)>:
c000a5ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a5f7:	e9 8a fe ff ff       	jmp    c000a486 <VgaText::updateTitle()>

c000a5fc <VgaText::setTitle(char*)>:
c000a5fc:	53                   	push   ebx
c000a5fd:	83 ec 10             	sub    esp,0x10
c000a600:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a608:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a60e:	50                   	push   eax
c000a60f:	e8 2c 61 ff ff       	call   c0000740 <strcpy>
c000a614:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a618:	83 c4 18             	add    esp,0x18
c000a61b:	5b                   	pop    ebx
c000a61c:	e9 65 fe ff ff       	jmp    c000a486 <VgaText::updateTitle()>
c000a621:	90                   	nop

c000a622 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a622:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a626:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a62b:	83 e0 0f             	and    eax,0xf
c000a62e:	c1 e2 04             	shl    edx,0x4
c000a631:	09 d0                	or     eax,edx
c000a633:	c3                   	ret    

c000a634 <VgaText::scrollScreen()>:
c000a634:	55                   	push   ebp
c000a635:	b9 01 00 00 00       	mov    ecx,0x1
c000a63a:	57                   	push   edi
c000a63b:	56                   	push   esi
c000a63c:	53                   	push   ebx
c000a63d:	83 ec 0c             	sub    esp,0xc
c000a640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a644:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a64a:	31 ff                	xor    edi,edi
c000a64c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a64f:	83 f9 17             	cmp    ecx,0x17
c000a652:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a655:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a65c:	75 27                	jne    c000a685 <VgaText::scrollScreen()+0x51>
c000a65e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a661:	01 f5                	add    ebp,esi
c000a663:	f7 c7 01 00 00 00    	test   edi,0x1
c000a669:	74 16                	je     c000a681 <VgaText::scrollScreen()+0x4d>
c000a66b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a66f:	50                   	push   eax
c000a670:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a674:	50                   	push   eax
c000a675:	e8 a8 ff ff ff       	call   c000a622 <VgaText::combineColours(unsigned char, unsigned char)>
c000a67a:	5a                   	pop    edx
c000a67b:	5a                   	pop    edx
c000a67c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a67f:	eb 04                	jmp    c000a685 <VgaText::scrollScreen()+0x51>
c000a681:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a685:	47                   	inc    edi
c000a686:	46                   	inc    esi
c000a687:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a68d:	75 bd                	jne    c000a64c <VgaText::scrollScreen()+0x18>
c000a68f:	41                   	inc    ecx
c000a690:	83 f9 18             	cmp    ecx,0x18
c000a693:	75 af                	jne    c000a644 <VgaText::scrollScreen()+0x10>
c000a695:	39 1d 24 61 02 c0    	cmp    DWORD PTR ds:0xc0026124,ebx
c000a69b:	75 1b                	jne    c000a6b8 <VgaText::scrollScreen()+0x84>
c000a69d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a6a1:	74 05                	je     c000a6a8 <VgaText::scrollScreen()+0x74>
c000a6a3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a6a6:	eb 10                	jmp    c000a6b8 <VgaText::scrollScreen()+0x84>
c000a6a8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a6ab:	85 c0                	test   eax,eax
c000a6ad:	74 09                	je     c000a6b8 <VgaText::scrollScreen()+0x84>
c000a6af:	83 ec 0c             	sub    esp,0xc
c000a6b2:	53                   	push   ebx
c000a6b3:	ff d0                	call   eax
c000a6b5:	83 c4 10             	add    esp,0x10
c000a6b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a6bc:	83 c4 0c             	add    esp,0xc
c000a6bf:	5b                   	pop    ebx
c000a6c0:	5e                   	pop    esi
c000a6c1:	5f                   	pop    edi
c000a6c2:	5d                   	pop    ebp
c000a6c3:	e9 4a fe ff ff       	jmp    c000a512 <VgaText::updateCursor()>

c000a6c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a6c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a6cd:	c1 e0 08             	shl    eax,0x8
c000a6d0:	89 c2                	mov    edx,eax
c000a6d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a6d7:	09 d0                	or     eax,edx
c000a6d9:	c3                   	ret    

c000a6da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a6da:	56                   	push   esi
c000a6db:	53                   	push   ebx
c000a6dc:	51                   	push   ecx
c000a6dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a6e1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a6e6:	50                   	push   eax
c000a6e7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a6ec:	50                   	push   eax
c000a6ed:	e8 30 ff ff ff       	call   c000a622 <VgaText::combineColours(unsigned char, unsigned char)>
c000a6f2:	5b                   	pop    ebx
c000a6f3:	0f b6 c0             	movzx  eax,al
c000a6f6:	5e                   	pop    esi
c000a6f7:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a6fc:	50                   	push   eax
c000a6fd:	53                   	push   ebx
c000a6fe:	e8 c5 ff ff ff       	call   c000a6c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000a703:	5a                   	pop    edx
c000a704:	5e                   	pop    esi
c000a705:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a708:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a70e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a712:	0f b7 d2             	movzx  edx,dx
c000a715:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a719:	39 0d 24 61 02 c0    	cmp    DWORD PTR ds:0xc0026124,ecx
c000a71f:	75 10                	jne    c000a731 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a721:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a724:	85 c0                	test   eax,eax
c000a726:	74 09                	je     c000a731 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a728:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a72c:	5a                   	pop    edx
c000a72d:	5b                   	pop    ebx
c000a72e:	5e                   	pop    esi
c000a72f:	ff e0                	jmp    eax
c000a731:	58                   	pop    eax
c000a732:	5b                   	pop    ebx
c000a733:	5e                   	pop    esi
c000a734:	c3                   	ret    
c000a735:	90                   	nop

c000a736 <VgaText::getCursorX()>:
c000a736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a73a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a73d:	c3                   	ret    

c000a73e <VgaText::getCursorY()>:
c000a73e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a742:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a745:	c3                   	ret    

c000a746 <VgaText::setCursor(int, int)>:
c000a746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a74a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a74e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a751:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a758:	e9 b5 fd ff ff       	jmp    c000a512 <VgaText::updateCursor()>

c000a75d <setActiveTerminal(VgaText*)>:
c000a75d:	53                   	push   ebx
c000a75e:	83 ec 08             	sub    esp,0x8
c000a761:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a765:	85 db                	test   ebx,ebx
c000a767:	75 11                	jne    c000a77a <setActiveTerminal(VgaText*)+0x1d>
c000a769:	c7 44 24 10 84 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022684
c000a771:	83 c4 08             	add    esp,0x8
c000a774:	5b                   	pop    ebx
c000a775:	e9 c9 9a 00 00       	jmp    c0014243 <Krnl::panic(char const*)>
c000a77a:	a1 24 61 02 c0       	mov    eax,ds:0xc0026124
c000a77f:	85 c0                	test   eax,eax
c000a781:	74 0c                	je     c000a78f <setActiveTerminal(VgaText*)+0x32>
c000a783:	83 ec 0c             	sub    esp,0xc
c000a786:	50                   	push   eax
c000a787:	e8 86 fd ff ff       	call   c000a512 <VgaText::updateCursor()>
c000a78c:	83 c4 10             	add    esp,0x10
c000a78f:	89 1d 24 61 02 c0    	mov    DWORD PTR ds:0xc0026124,ebx
c000a795:	51                   	push   ecx
c000a796:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a799:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a79c:	53                   	push   ebx
c000a79d:	e8 a4 ff ff ff       	call   c000a746 <VgaText::setCursor(int, int)>
c000a7a2:	83 c4 10             	add    esp,0x10
c000a7a5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a7a9:	75 07                	jne    c000a7b2 <setActiveTerminal(VgaText*)+0x55>
c000a7ab:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a7b2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7b6:	83 c4 08             	add    esp,0x8
c000a7b9:	5b                   	pop    ebx
c000a7ba:	e9 05 fd ff ff       	jmp    c000a4c4 <VgaText::load()>

c000a7bf <doTerminalCycle()>:
c000a7bf:	83 ec 18             	sub    esp,0x18
c000a7c2:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c000a7c7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a7ca:	50                   	push   eax
c000a7cb:	a3 20 61 02 c0       	mov    ds:0xc0026120,eax
c000a7d0:	e8 88 ff ff ff       	call   c000a75d <setActiveTerminal(VgaText*)>
c000a7d5:	83 c4 1c             	add    esp,0x1c
c000a7d8:	c3                   	ret    
c000a7d9:	90                   	nop

c000a7da <VgaText::setCursorX(int)>:
c000a7da:	83 ec 10             	sub    esp,0x10
c000a7dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a7e1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a7e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e8:	50                   	push   eax
c000a7e9:	e8 58 ff ff ff       	call   c000a746 <VgaText::setCursor(int, int)>
c000a7ee:	83 c4 1c             	add    esp,0x1c
c000a7f1:	c3                   	ret    

c000a7f2 <VgaText::setCursorY(int)>:
c000a7f2:	83 ec 10             	sub    esp,0x10
c000a7f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a7f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7fd:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a800:	50                   	push   eax
c000a801:	e8 40 ff ff ff       	call   c000a746 <VgaText::setCursor(int, int)>
c000a806:	83 c4 1c             	add    esp,0x1c
c000a809:	c3                   	ret    

c000a80a <VgaText::incrementCursor(bool)>:
c000a80a:	56                   	push   esi
c000a80b:	53                   	push   ebx
c000a80c:	51                   	push   ecx
c000a80d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a811:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a815:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a818:	40                   	inc    eax
c000a819:	83 f8 50             	cmp    eax,0x50
c000a81c:	74 05                	je     c000a823 <VgaText::incrementCursor(bool)+0x19>
c000a81e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a821:	eb 24                	jmp    c000a847 <VgaText::incrementCursor(bool)+0x3d>
c000a823:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a826:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a82d:	8d 50 01             	lea    edx,[eax+0x1]
c000a830:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a833:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a836:	75 0f                	jne    c000a847 <VgaText::incrementCursor(bool)+0x3d>
c000a838:	83 ec 0c             	sub    esp,0xc
c000a83b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a83e:	53                   	push   ebx
c000a83f:	e8 f0 fd ff ff       	call   c000a634 <VgaText::scrollScreen()>
c000a844:	83 c4 10             	add    esp,0x10
c000a847:	89 f0                	mov    eax,esi
c000a849:	84 c0                	test   al,al
c000a84b:	74 0c                	je     c000a859 <VgaText::incrementCursor(bool)+0x4f>
c000a84d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a851:	5a                   	pop    edx
c000a852:	5b                   	pop    ebx
c000a853:	5e                   	pop    esi
c000a854:	e9 b9 fc ff ff       	jmp    c000a512 <VgaText::updateCursor()>
c000a859:	58                   	pop    eax
c000a85a:	5b                   	pop    ebx
c000a85b:	5e                   	pop    esi
c000a85c:	c3                   	ret    
c000a85d:	90                   	nop

c000a85e <VgaText::decrementCursor(bool)>:
c000a85e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a862:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a866:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a869:	85 c0                	test   eax,eax
c000a86b:	74 04                	je     c000a871 <VgaText::decrementCursor(bool)+0x13>
c000a86d:	48                   	dec    eax
c000a86e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a871:	84 c9                	test   cl,cl
c000a873:	74 09                	je     c000a87e <VgaText::decrementCursor(bool)+0x20>
c000a875:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a879:	e9 94 fc ff ff       	jmp    c000a512 <VgaText::updateCursor()>
c000a87e:	c3                   	ret    
c000a87f:	90                   	nop

c000a880 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a880:	53                   	push   ebx
c000a881:	83 ec 08             	sub    esp,0x8
c000a884:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a888:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a88c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a890:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a894:	3c 07                	cmp    al,0x7
c000a896:	75 2a                	jne    c000a8c2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a898:	a1 d8 61 02 c0       	mov    eax,ds:0xc00261d8
c000a89d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a8a5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a8ad:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a8b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b9:	83 c4 08             	add    esp,0x8
c000a8bc:	5b                   	pop    ebx
c000a8bd:	e9 58 2f 00 00       	jmp    c000d81a <Buzzer::beep(int, int, bool)>
c000a8c2:	3c 0d                	cmp    al,0xd
c000a8c4:	75 09                	jne    c000a8cf <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a8c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8cd:	eb 2c                	jmp    c000a8fb <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a8cf:	3c 0a                	cmp    al,0xa
c000a8d1:	75 31                	jne    c000a904 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a8d3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a8d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8dd:	8d 50 01             	lea    edx,[eax+0x1]
c000a8e0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a8e3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a8e6:	75 0f                	jne    c000a8f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a8e8:	83 ec 0c             	sub    esp,0xc
c000a8eb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a8ee:	53                   	push   ebx
c000a8ef:	e8 40 fd ff ff       	call   c000a634 <VgaText::scrollScreen()>
c000a8f4:	83 c4 10             	add    esp,0x10
c000a8f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8fb:	83 c4 08             	add    esp,0x8
c000a8fe:	5b                   	pop    ebx
c000a8ff:	e9 0e fc ff ff       	jmp    c000a512 <VgaText::updateCursor()>
c000a904:	3c 08                	cmp    al,0x8
c000a906:	75 25                	jne    c000a92d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a908:	50                   	push   eax
c000a909:	50                   	push   eax
c000a90a:	6a 01                	push   0x1
c000a90c:	53                   	push   ebx
c000a90d:	e8 4c ff ff ff       	call   c000a85e <VgaText::decrementCursor(bool)>
c000a912:	5a                   	pop    edx
c000a913:	59                   	pop    ecx
c000a914:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a917:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a91a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a91d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a920:	6a 20                	push   0x20
c000a922:	53                   	push   ebx
c000a923:	e8 b2 fd ff ff       	call   c000a6da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a928:	83 c4 28             	add    esp,0x28
c000a92b:	5b                   	pop    ebx
c000a92c:	c3                   	ret    
c000a92d:	83 ec 08             	sub    esp,0x8
c000a930:	0f be c0             	movsx  eax,al
c000a933:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a936:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a939:	51                   	push   ecx
c000a93a:	52                   	push   edx
c000a93b:	50                   	push   eax
c000a93c:	53                   	push   ebx
c000a93d:	e8 98 fd ff ff       	call   c000a6da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a942:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a946:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a94e:	83 c4 28             	add    esp,0x28
c000a951:	5b                   	pop    ebx
c000a952:	e9 b3 fe ff ff       	jmp    c000a80a <VgaText::incrementCursor(bool)>
c000a957:	90                   	nop

c000a958 <VgaText::doUpdate()>:
c000a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000a95f:	85 c0                	test   eax,eax
c000a961:	74 02                	je     c000a965 <VgaText::doUpdate()+0xd>
c000a963:	ff e0                	jmp    eax
c000a965:	c3                   	ret    

c000a966 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a966:	55                   	push   ebp
c000a967:	31 ed                	xor    ebp,ebp
c000a969:	57                   	push   edi
c000a96a:	56                   	push   esi
c000a96b:	53                   	push   ebx
c000a96c:	83 ec 1c             	sub    esp,0x1c
c000a96f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a973:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a978:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a97f:	50                   	push   eax
c000a980:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a985:	50                   	push   eax
c000a986:	e8 97 fc ff ff       	call   c000a622 <VgaText::combineColours(unsigned char, unsigned char)>
c000a98b:	59                   	pop    ecx
c000a98c:	0f b6 c0             	movzx  eax,al
c000a98f:	5e                   	pop    esi
c000a990:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a995:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a999:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a99c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9a0:	0f b7 f6             	movzx  esi,si
c000a9a3:	01 f6                	add    esi,esi
c000a9a5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9a8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a9ab:	84 c0                	test   al,al
c000a9ad:	0f 84 fd 00 00 00    	je     c000aab0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000a9b3:	3c 0d                	cmp    al,0xd
c000a9b5:	75 0c                	jne    c000a9c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000a9b7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9be:	e9 e7 00 00 00       	jmp    c000aaaa <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000a9c3:	3c 0a                	cmp    al,0xa
c000a9c5:	75 47                	jne    c000aa0e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000a9c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9d1:	8d 48 01             	lea    ecx,[eax+0x1]
c000a9d4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000a9d7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000a9da:	75 0f                	jne    c000a9eb <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000a9dc:	83 ec 0c             	sub    esp,0xc
c000a9df:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9e2:	53                   	push   ebx
c000a9e3:	e8 4c fc ff ff       	call   c000a634 <VgaText::scrollScreen()>
c000a9e8:	83 c4 10             	add    esp,0x10
c000a9eb:	83 ec 0c             	sub    esp,0xc
c000a9ee:	31 ed                	xor    ebp,ebp
c000a9f0:	53                   	push   ebx
c000a9f1:	e8 1c fb ff ff       	call   c000a512 <VgaText::updateCursor()>
c000a9f6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9fb:	83 c4 10             	add    esp,0x10
c000a9fe:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa01:	0f b7 f6             	movzx  esi,si
c000aa04:	01 f6                	add    esi,esi
c000aa06:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa09:	e9 9c 00 00 00       	jmp    c000aaaa <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa0e:	3c 08                	cmp    al,0x8
c000aa10:	75 35                	jne    c000aa47 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aa12:	56                   	push   esi
c000aa13:	56                   	push   esi
c000aa14:	6a 01                	push   0x1
c000aa16:	53                   	push   ebx
c000aa17:	e8 42 fe ff ff       	call   c000a85e <VgaText::decrementCursor(bool)>
c000aa1c:	58                   	pop    eax
c000aa1d:	5a                   	pop    edx
c000aa1e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa21:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa24:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa27:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa2a:	6a 20                	push   0x20
c000aa2c:	53                   	push   ebx
c000aa2d:	e8 a8 fc ff ff       	call   c000a6da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa32:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa37:	83 c4 20             	add    esp,0x20
c000aa3a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa3d:	0f b7 f6             	movzx  esi,si
c000aa40:	01 f6                	add    esi,esi
c000aa42:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa45:	eb 63                	jmp    c000aaaa <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa47:	51                   	push   ecx
c000aa48:	51                   	push   ecx
c000aa49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa4d:	50                   	push   eax
c000aa4e:	e8 75 fc ff ff       	call   c000a6c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000aa53:	83 c4 10             	add    esp,0x10
c000aa56:	66 89 06             	mov    WORD PTR [esi],ax
c000aa59:	39 1d 24 61 02 c0    	cmp    DWORD PTR ds:0xc0026124,ebx
c000aa5f:	75 21                	jne    c000aa82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aa61:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000aa64:	85 c0                	test   eax,eax
c000aa66:	74 1a                	je     c000aa82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aa68:	52                   	push   edx
c000aa69:	52                   	push   edx
c000aa6a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa6d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa74:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa78:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000aa7b:	51                   	push   ecx
c000aa7c:	53                   	push   ebx
c000aa7d:	ff d0                	call   eax
c000aa7f:	83 c4 20             	add    esp,0x20
c000aa82:	83 c6 02             	add    esi,0x2
c000aa85:	50                   	push   eax
c000aa86:	50                   	push   eax
c000aa87:	6a 00                	push   0x0
c000aa89:	53                   	push   ebx
c000aa8a:	e8 7b fd ff ff       	call   c000a80a <VgaText::incrementCursor(bool)>
c000aa8f:	83 c4 10             	add    esp,0x10
c000aa92:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aa96:	75 0d                	jne    c000aaa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000aa98:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa9d:	0f b7 f6             	movzx  esi,si
c000aaa0:	01 f6                	add    esi,esi
c000aaa2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aaa5:	bd 01 00 00 00       	mov    ebp,0x1
c000aaaa:	47                   	inc    edi
c000aaab:	e9 f8 fe ff ff       	jmp    c000a9a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000aab0:	83 ec 0c             	sub    esp,0xc
c000aab3:	53                   	push   ebx
c000aab4:	e8 59 fa ff ff       	call   c000a512 <VgaText::updateCursor()>
c000aab9:	83 c4 10             	add    esp,0x10
c000aabc:	89 e8                	mov    eax,ebp
c000aabe:	84 c0                	test   al,al
c000aac0:	74 0c                	je     c000aace <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000aac2:	83 ec 0c             	sub    esp,0xc
c000aac5:	53                   	push   ebx
c000aac6:	e8 8d fe ff ff       	call   c000a958 <VgaText::doUpdate()>
c000aacb:	83 c4 10             	add    esp,0x10
c000aace:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aad5:	83 c4 1c             	add    esp,0x1c
c000aad8:	5b                   	pop    ebx
c000aad9:	5e                   	pop    esi
c000aada:	5f                   	pop    edi
c000aadb:	5d                   	pop    ebp
c000aadc:	c3                   	ret    
c000aadd:	90                   	nop

c000aade <VgaText::clearScreen()>:
c000aade:	57                   	push   edi
c000aadf:	56                   	push   esi
c000aae0:	31 f6                	xor    esi,esi
c000aae2:	53                   	push   ebx
c000aae3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aae7:	52                   	push   edx
c000aae8:	6a 00                	push   0x0
c000aaea:	6a 00                	push   0x0
c000aaec:	53                   	push   ebx
c000aaed:	e8 54 fc ff ff       	call   c000a746 <VgaText::setCursor(int, int)>
c000aaf2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aaf9:	83 c4 10             	add    esp,0x10
c000aafc:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aaff:	7e 20                	jle    c000ab21 <VgaText::clearScreen()+0x43>
c000ab01:	31 ff                	xor    edi,edi
c000ab03:	50                   	push   eax
c000ab04:	50                   	push   eax
c000ab05:	56                   	push   esi
c000ab06:	57                   	push   edi
c000ab07:	47                   	inc    edi
c000ab08:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab0b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab0e:	6a 20                	push   0x20
c000ab10:	53                   	push   ebx
c000ab11:	e8 c4 fb ff ff       	call   c000a6da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab16:	83 c4 20             	add    esp,0x20
c000ab19:	83 ff 50             	cmp    edi,0x50
c000ab1c:	75 e5                	jne    c000ab03 <VgaText::clearScreen()+0x25>
c000ab1e:	46                   	inc    esi
c000ab1f:	eb db                	jmp    c000aafc <VgaText::clearScreen()+0x1e>
c000ab21:	83 ec 0c             	sub    esp,0xc
c000ab24:	53                   	push   ebx
c000ab25:	e8 2e fe ff ff       	call   c000a958 <VgaText::doUpdate()>
c000ab2a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab31:	83 c4 10             	add    esp,0x10
c000ab34:	5b                   	pop    ebx
c000ab35:	5e                   	pop    esi
c000ab36:	5f                   	pop    edi
c000ab37:	c3                   	ret    

c000ab38 <VgaText::putchar(char)>:
c000ab38:	56                   	push   esi
c000ab39:	53                   	push   ebx
c000ab3a:	83 ec 14             	sub    esp,0x14
c000ab3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ab41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ab45:	3c 5b                	cmp    al,0x5b
c000ab47:	75 18                	jne    c000ab61 <VgaText::putchar(char)+0x29>
c000ab49:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ab4d:	74 1f                	je     c000ab6e <VgaText::putchar(char)+0x36>
c000ab4f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ab55:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ab5c:	e9 bd 00 00 00       	jmp    c000ac1e <VgaText::putchar(char)+0xe6>
c000ab61:	3c 1b                	cmp    al,0x1b
c000ab63:	75 09                	jne    c000ab6e <VgaText::putchar(char)+0x36>
c000ab65:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ab69:	e9 b0 00 00 00       	jmp    c000ac1e <VgaText::putchar(char)+0xe6>
c000ab6e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ab71:	84 c9                	test   cl,cl
c000ab73:	0f 84 92 00 00 00    	je     c000ac0b <VgaText::putchar(char)+0xd3>
c000ab79:	8d 50 c0             	lea    edx,[eax-0x40]
c000ab7c:	80 fa 3e             	cmp    dl,0x3e
c000ab7f:	77 76                	ja     c000abf7 <VgaText::putchar(char)+0xbf>
c000ab81:	3c 6d                	cmp    al,0x6d
c000ab83:	75 47                	jne    c000abcc <VgaText::putchar(char)+0x94>
c000ab85:	31 f6                	xor    esi,esi
c000ab87:	31 d2                	xor    edx,edx
c000ab89:	31 c0                	xor    eax,eax
c000ab8b:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ab8e:	7e 2d                	jle    c000abbd <VgaText::putchar(char)+0x85>
c000ab90:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ab95:	80 fa 3b             	cmp    dl,0x3b
c000ab98:	75 17                	jne    c000abb1 <VgaText::putchar(char)+0x79>
c000ab9a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ab9e:	50                   	push   eax
c000ab9f:	53                   	push   ebx
c000aba0:	e8 83 f9 ff ff       	call   c000a528 <VgaText::doANSI_SGR(int)>
c000aba5:	59                   	pop    ecx
c000aba6:	31 d2                	xor    edx,edx
c000aba8:	58                   	pop    eax
c000aba9:	31 c0                	xor    eax,eax
c000abab:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000abaf:	eb 09                	jmp    c000abba <VgaText::putchar(char)+0x82>
c000abb1:	6b c0 0a             	imul   eax,eax,0xa
c000abb4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000abb8:	88 ca                	mov    dl,cl
c000abba:	46                   	inc    esi
c000abbb:	eb ce                	jmp    c000ab8b <VgaText::putchar(char)+0x53>
c000abbd:	84 d2                	test   dl,dl
c000abbf:	74 2e                	je     c000abef <VgaText::putchar(char)+0xb7>
c000abc1:	50                   	push   eax
c000abc2:	53                   	push   ebx
c000abc3:	e8 60 f9 ff ff       	call   c000a528 <VgaText::doANSI_SGR(int)>
c000abc8:	58                   	pop    eax
c000abc9:	5a                   	pop    edx
c000abca:	eb 23                	jmp    c000abef <VgaText::putchar(char)+0xb7>
c000abcc:	3c 4a                	cmp    al,0x4a
c000abce:	75 1f                	jne    c000abef <VgaText::putchar(char)+0xb7>
c000abd0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000abd4:	75 19                	jne    c000abef <VgaText::putchar(char)+0xb7>
c000abd6:	83 ec 0c             	sub    esp,0xc
c000abd9:	53                   	push   ebx
c000abda:	e8 ff fe ff ff       	call   c000aade <VgaText::clearScreen()>
c000abdf:	83 c4 0c             	add    esp,0xc
c000abe2:	6a 00                	push   0x0
c000abe4:	6a 00                	push   0x0
c000abe6:	53                   	push   ebx
c000abe7:	e8 5a fb ff ff       	call   c000a746 <VgaText::setCursor(int, int)>
c000abec:	83 c4 10             	add    esp,0x10
c000abef:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000abf5:	eb 27                	jmp    c000ac1e <VgaText::putchar(char)+0xe6>
c000abf7:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000abfa:	83 fa 0e             	cmp    edx,0xe
c000abfd:	7f 1f                	jg     c000ac1e <VgaText::putchar(char)+0xe6>
c000abff:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ac02:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ac05:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ac09:	eb 13                	jmp    c000ac1e <VgaText::putchar(char)+0xe6>
c000ac0b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac0e:	0f be c0             	movsx  eax,al
c000ac11:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac14:	50                   	push   eax
c000ac15:	53                   	push   ebx
c000ac16:	e8 65 fc ff ff       	call   c000a880 <VgaText::putchar(char, VgaColour, VgaColour)>
c000ac1b:	83 c4 10             	add    esp,0x10
c000ac1e:	83 c4 14             	add    esp,0x14
c000ac21:	5b                   	pop    ebx
c000ac22:	5e                   	pop    esi
c000ac23:	c3                   	ret    

c000ac24 <VgaText::putx(unsigned int)>:
c000ac24:	57                   	push   edi
c000ac25:	b9 11 00 00 00       	mov    ecx,0x11
c000ac2a:	56                   	push   esi
c000ac2b:	be 92 26 02 c0       	mov    esi,0xc0022692
c000ac30:	53                   	push   ebx
c000ac31:	83 ec 20             	sub    esp,0x20
c000ac34:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ac38:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ac3c:	fc                   	cld    
c000ac3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac3f:	be 08 00 00 00       	mov    esi,0x8
c000ac44:	50                   	push   eax
c000ac45:	50                   	push   eax
c000ac46:	89 d8                	mov    eax,ebx
c000ac48:	c1 e3 04             	shl    ebx,0x4
c000ac4b:	c1 e8 1c             	shr    eax,0x1c
c000ac4e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ac53:	50                   	push   eax
c000ac54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac58:	e8 db fe ff ff       	call   c000ab38 <VgaText::putchar(char)>
c000ac5d:	83 c4 10             	add    esp,0x10
c000ac60:	4e                   	dec    esi
c000ac61:	75 e1                	jne    c000ac44 <VgaText::putx(unsigned int)+0x20>
c000ac63:	83 c4 20             	add    esp,0x20
c000ac66:	5b                   	pop    ebx
c000ac67:	5e                   	pop    esi
c000ac68:	5f                   	pop    edi
c000ac69:	c3                   	ret    

c000ac6a <VgaText::puts(char const*)>:
c000ac6a:	53                   	push   ebx
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ac72:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac75:	84 c0                	test   al,al
c000ac77:	74 12                	je     c000ac8b <VgaText::puts(char const*)+0x21>
c000ac79:	43                   	inc    ebx
c000ac7a:	51                   	push   ecx
c000ac7b:	51                   	push   ecx
c000ac7c:	50                   	push   eax
c000ac7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac81:	e8 b2 fe ff ff       	call   c000ab38 <VgaText::putchar(char)>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	eb e7                	jmp    c000ac72 <VgaText::puts(char const*)+0x8>
c000ac8b:	83 c4 08             	add    esp,0x8
c000ac8e:	5b                   	pop    ebx
c000ac8f:	c3                   	ret    

c000ac90 <VgaText::VgaText(char const*)>:
c000ac90:	57                   	push   edi
c000ac91:	56                   	push   esi
c000ac92:	53                   	push   ebx
c000ac93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac97:	83 ec 08             	sub    esp,0x8
c000ac9a:	6a 00                	push   0x0
c000ac9c:	50                   	push   eax
c000ac9d:	e8 44 05 00 00       	call   c000b1e6 <UnixFile::UnixFile(int)>
c000aca2:	83 c4 10             	add    esp,0x10
c000aca5:	ba f8 26 02 c0       	mov    edx,0xc00226f8
c000acaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acae:	89 10                	mov    DWORD PTR [eax],edx
c000acb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acb4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000acbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acbf:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000acc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acca:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000acce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000acd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acda:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ace1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ace5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000acf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acfb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ad02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad06:	8d 50 60             	lea    edx,[eax+0x60]
c000ad09:	bb 00 61 02 c0       	mov    ebx,0xc0026100
c000ad0e:	b8 08 00 00 00       	mov    eax,0x8
c000ad13:	fc                   	cld    
c000ad14:	89 d7                	mov    edi,edx
c000ad16:	89 de                	mov    esi,ebx
c000ad18:	89 c1                	mov    ecx,eax
c000ad1a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad20:	05 82 00 00 00       	add    eax,0x82
c000ad25:	83 ec 08             	sub    esp,0x8
c000ad28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad2c:	50                   	push   eax
c000ad2d:	e8 0e 5a ff ff       	call   c0000740 <strcpy>
c000ad32:	83 c4 10             	add    esp,0x10
c000ad35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad39:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ad40:	83 ec 0c             	sub    esp,0xc
c000ad43:	6a 01                	push   0x1
c000ad45:	e8 df 08 00 00       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c000ad4a:	83 c4 10             	add    esp,0x10
c000ad4d:	89 c2                	mov    edx,eax
c000ad4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad53:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ad56:	8b 1d d0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261d0
c000ad5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad63:	89 c6                	mov    esi,eax
c000ad65:	e8 35 f0 ff ff       	call   c0009d9f <Phys::allocatePage()>
c000ad6a:	68 05 0c 00 00       	push   0xc05
c000ad6f:	56                   	push   esi
c000ad70:	50                   	push   eax
c000ad71:	53                   	push   ebx
c000ad72:	e8 59 0f 00 00       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad7e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad81:	83 ec 04             	sub    esp,0x4
c000ad84:	68 00 0f 00 00       	push   0xf00
c000ad89:	6a 00                	push   0x0
c000ad8b:	50                   	push   eax
c000ad8c:	e8 f3 58 ff ff       	call   c0000684 <memset>
c000ad91:	83 c4 10             	add    esp,0x10
c000ad94:	83 ec 04             	sub    esp,0x4
c000ad97:	6a 00                	push   0x0
c000ad99:	6a 07                	push   0x7
c000ad9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad9f:	e8 18 f8 ff ff       	call   c000a5bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	83 ec 04             	sub    esp,0x4
c000adaa:	6a 00                	push   0x0
c000adac:	6a 00                	push   0x0
c000adae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adb2:	e8 8f f9 ff ff       	call   c000a746 <VgaText::setCursor(int, int)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	83 ec 0c             	sub    esp,0xc
c000adbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adc1:	e8 18 fd ff ff       	call   c000aade <VgaText::clearScreen()>
c000adc6:	83 c4 10             	add    esp,0x10
c000adc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adcd:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000add1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add5:	05 02 01 00 00       	add    eax,0x102
c000adda:	83 ec 04             	sub    esp,0x4
c000addd:	68 96 00 00 00       	push   0x96
c000ade2:	6a 00                	push   0x0
c000ade4:	50                   	push   eax
c000ade5:	e8 9a 58 ff ff       	call   c0000684 <memset>
c000adea:	83 c4 10             	add    esp,0x10
c000aded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf1:	05 98 01 00 00       	add    eax,0x198
c000adf6:	83 ec 04             	sub    esp,0x4
c000adf9:	68 2c 01 00 00       	push   0x12c
c000adfe:	6a 00                	push   0x0
c000ae00:	50                   	push   eax
c000ae01:	e8 7e 58 ff ff       	call   c0000684 <memset>
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	90                   	nop
c000ae0a:	5b                   	pop    ebx
c000ae0b:	5e                   	pop    esi
c000ae0c:	5f                   	pop    edi
c000ae0d:	c3                   	ret    

c000ae0e <VgaText::receiveKey(unsigned char)>:
c000ae0e:	55                   	push   ebp
c000ae0f:	57                   	push   edi
c000ae10:	56                   	push   esi
c000ae11:	53                   	push   ebx
c000ae12:	83 ec 1c             	sub    esp,0x1c
c000ae15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ae19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae1d:	84 db                	test   bl,bl
c000ae1f:	0f 84 c9 00 00 00    	je     c000aeee <VgaText::receiveKey(unsigned char)+0xe0>
c000ae25:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ae2b:	80 fb 08             	cmp    bl,0x8
c000ae2e:	75 2c                	jne    c000ae5c <VgaText::receiveKey(unsigned char)+0x4e>
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	57                   	push   edi
c000ae34:	e8 67 58 ff ff       	call   c00006a0 <strlen>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 c0                	test   eax,eax
c000ae3e:	74 41                	je     c000ae81 <VgaText::receiveKey(unsigned char)+0x73>
c000ae40:	50                   	push   eax
c000ae41:	50                   	push   eax
c000ae42:	6a 08                	push   0x8
c000ae44:	56                   	push   esi
c000ae45:	e8 ee fc ff ff       	call   c000ab38 <VgaText::putchar(char)>
c000ae4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ae4d:	e8 4e 58 ff ff       	call   c00006a0 <strlen>
c000ae52:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000ae5a:	eb 22                	jmp    c000ae7e <VgaText::receiveKey(unsigned char)+0x70>
c000ae5c:	0f be c3             	movsx  eax,bl
c000ae5f:	52                   	push   edx
c000ae60:	52                   	push   edx
c000ae61:	50                   	push   eax
c000ae62:	56                   	push   esi
c000ae63:	e8 d0 fc ff ff       	call   c000ab38 <VgaText::putchar(char)>
c000ae68:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000ae6c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae71:	59                   	pop    ecx
c000ae72:	5d                   	pop    ebp
c000ae73:	8d 44 24 16          	lea    eax,[esp+0x16]
c000ae77:	50                   	push   eax
c000ae78:	57                   	push   edi
c000ae79:	e8 02 5a ff ff       	call   c0000880 <strcat>
c000ae7e:	83 c4 10             	add    esp,0x10
c000ae81:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000ae88:	75 05                	jne    c000ae8f <VgaText::receiveKey(unsigned char)+0x81>
c000ae8a:	80 fb 0a             	cmp    bl,0xa
c000ae8d:	75 53                	jne    c000aee2 <VgaText::receiveKey(unsigned char)+0xd4>
c000ae8f:	83 ec 0c             	sub    esp,0xc
c000ae92:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000ae98:	53                   	push   ebx
c000ae99:	e8 02 58 ff ff       	call   c00006a0 <strlen>
c000ae9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000aea1:	89 c5                	mov    ebp,eax
c000aea3:	e8 f8 57 ff ff       	call   c00006a0 <strlen>
c000aea8:	83 c4 10             	add    esp,0x10
c000aeab:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000aeaf:	3d 2c 01 00 00       	cmp    eax,0x12c
c000aeb4:	76 10                	jbe    c000aec6 <VgaText::receiveKey(unsigned char)+0xb8>
c000aeb6:	83 ec 0c             	sub    esp,0xc
c000aeb9:	68 a3 26 02 c0       	push   0xc00226a3
c000aebe:	e8 80 93 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000aec3:	83 c4 10             	add    esp,0x10
c000aec6:	50                   	push   eax
c000aec7:	50                   	push   eax
c000aec8:	57                   	push   edi
c000aec9:	53                   	push   ebx
c000aeca:	e8 b1 59 ff ff       	call   c0000880 <strcat>
c000aecf:	83 c4 0c             	add    esp,0xc
c000aed2:	68 96 00 00 00       	push   0x96
c000aed7:	6a 00                	push   0x0
c000aed9:	57                   	push   edi
c000aeda:	e8 a5 57 ff ff       	call   c0000684 <memset>
c000aedf:	83 c4 10             	add    esp,0x10
c000aee2:	83 ec 0c             	sub    esp,0xc
c000aee5:	56                   	push   esi
c000aee6:	e8 6d fa ff ff       	call   c000a958 <VgaText::doUpdate()>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	83 c4 1c             	add    esp,0x1c
c000aef1:	5b                   	pop    ebx
c000aef2:	5e                   	pop    esi
c000aef3:	5f                   	pop    edi
c000aef4:	5d                   	pop    ebp
c000aef5:	c3                   	ret    

c000aef6 <VgaText::write(unsigned long long, void*, int*)>:
c000aef6:	55                   	push   ebp
c000aef7:	57                   	push   edi
c000aef8:	56                   	push   esi
c000aef9:	53                   	push   ebx
c000aefa:	83 ec 0c             	sub    esp,0xc
c000aefd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000af01:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000af05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000af09:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000af10:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000af13:	39 eb                	cmp    ebx,ebp
c000af15:	74 13                	je     c000af2a <VgaText::write(unsigned long long, void*, int*)+0x34>
c000af17:	43                   	inc    ebx
c000af18:	50                   	push   eax
c000af19:	50                   	push   eax
c000af1a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000af1e:	50                   	push   eax
c000af1f:	56                   	push   esi
c000af20:	e8 13 fc ff ff       	call   c000ab38 <VgaText::putchar(char)>
c000af25:	83 c4 10             	add    esp,0x10
c000af28:	eb e9                	jmp    c000af13 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000af2a:	83 ec 0c             	sub    esp,0xc
c000af2d:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000af34:	56                   	push   esi
c000af35:	e8 1e fa ff ff       	call   c000a958 <VgaText::doUpdate()>
c000af3a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000af3e:	89 38                	mov    DWORD PTR [eax],edi
c000af40:	83 c4 1c             	add    esp,0x1c
c000af43:	31 c0                	xor    eax,eax
c000af45:	5b                   	pop    ebx
c000af46:	5e                   	pop    esi
c000af47:	5f                   	pop    edi
c000af48:	5d                   	pop    ebp
c000af49:	c3                   	ret    

c000af4a <newTerminal(char*)>:
c000af4a:	83 ec 28             	sub    esp,0x28
c000af4d:	68 c4 02 00 00       	push   0x2c4
c000af52:	e8 4c ea ff ff       	call   c00099a3 <malloc>
c000af57:	5a                   	pop    edx
c000af58:	59                   	pop    ecx
c000af59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000af5d:	50                   	push   eax
c000af5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af62:	e8 29 fd ff ff       	call   c000ac90 <VgaText::VgaText(char const*)>
c000af67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000af6b:	83 c4 2c             	add    esp,0x2c
c000af6e:	c3                   	ret    
c000af6f:	90                   	nop

c000af70 <TSS::TSS()>:
c000af70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af7b:	90                   	nop
c000af7c:	c3                   	ret    
c000af7d:	90                   	nop

c000af7e <TSS::setESP(unsigned long)>:
c000af7e:	55                   	push   ebp
c000af7f:	89 e5                	mov    ebp,esp
c000af81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000af87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000af8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af8d:	90                   	nop
c000af8e:	5d                   	pop    ebp
c000af8f:	c3                   	ret    

c000af90 <TSS::flush()>:
c000af90:	55                   	push   ebp
c000af91:	89 e5                	mov    ebp,esp
c000af93:	83 ec 10             	sub    esp,0x10
c000af96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af99:	8b 00                	mov    eax,DWORD PTR [eax]
c000af9b:	83 c8 03             	or     eax,0x3
c000af9e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000afa2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000afa6:	66 89 d0             	mov    ax,dx
c000afa9:	0f 00 d8             	ltr    ax
c000afac:	90                   	nop
c000afad:	c9                   	leave  
c000afae:	c3                   	ret    
c000afaf:	90                   	nop

c000afb0 <TSS::setup(unsigned long, unsigned long)>:
c000afb0:	55                   	push   ebp
c000afb1:	89 e5                	mov    ebp,esp
c000afb3:	83 ec 18             	sub    esp,0x18
c000afb6:	83 ec 0c             	sub    esp,0xc
c000afb9:	6a 68                	push   0x68
c000afbb:	e8 e3 e9 ff ff       	call   c00099a3 <malloc>
c000afc0:	83 c4 10             	add    esp,0x10
c000afc3:	89 c2                	mov    edx,eax
c000afc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afc8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000afcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000afd1:	83 ec 04             	sub    esp,0x4
c000afd4:	6a 68                	push   0x68
c000afd6:	6a 00                	push   0x0
c000afd8:	50                   	push   eax
c000afd9:	e8 a6 56 ff ff       	call   c0000684 <memset>
c000afde:	83 c4 10             	add    esp,0x10
c000afe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000afe7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000afed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aff3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000aff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000affc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000afff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b002:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b00b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b017:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b01d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b023:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b02c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b02f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b03b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b047:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b04d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b053:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b056:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b05c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b062:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b06b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b075:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b078:	0f 20 da             	mov    edx,cr3
c000b07b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b07e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b081:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b087:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b08a:	83 ec 08             	sub    esp,0x8
c000b08d:	50                   	push   eax
c000b08e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b091:	50                   	push   eax
c000b092:	e8 6d e1 ff ff       	call   c0009204 <GDTEntry::setBase(unsigned int)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	83 ec 08             	sub    esp,0x8
c000b09d:	6a 68                	push   0x68
c000b09f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b0a2:	50                   	push   eax
c000b0a3:	e8 78 e1 ff ff       	call   c0009220 <GDTEntry::setLimit(unsigned int)>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b0af:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b0b2:	83 e0 0f             	and    eax,0xf
c000b0b5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b0b8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b0bb:	83 c8 40             	or     eax,0x40
c000b0be:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b0c1:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000b0c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b0cc:	05 78 01 00 00       	add    eax,0x178
c000b0d1:	83 ec 04             	sub    esp,0x4
c000b0d4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b0d7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b0da:	50                   	push   eax
c000b0db:	e8 74 e1 ff ff       	call   c0009254 <GDT::addEntry(GDTEntry)>
c000b0e0:	83 c4 10             	add    esp,0x10
c000b0e3:	89 c2                	mov    edx,eax
c000b0e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e8:	89 10                	mov    DWORD PTR [eax],edx
c000b0ea:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000b0ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b0f5:	05 78 01 00 00       	add    eax,0x178
c000b0fa:	83 ec 0c             	sub    esp,0xc
c000b0fd:	50                   	push   eax
c000b0fe:	e8 7b e1 ff ff       	call   c000927e <GDT::flush()>
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b109:	8b 00                	mov    eax,DWORD PTR [eax]
c000b10b:	c9                   	leave  
c000b10c:	c3                   	ret    
c000b10d:	90                   	nop

c000b10e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b10e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b112:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b119:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b11e:	75 08                	jne    c000b128 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b120:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b126:	eb 38                	jmp    c000b160 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b128:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b12d:	75 17                	jne    c000b146 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b12f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b134:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b137:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b13d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b13f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b143:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b146:	89 c1                	mov    ecx,eax
c000b148:	83 e1 fd             	and    ecx,0xfffffffd
c000b14b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b151:	74 cd                	je     c000b120 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b153:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b158:	83 e0 ef             	and    eax,0xffffffef
c000b15b:	83 f8 08             	cmp    eax,0x8
c000b15e:	76 c0                	jbe    c000b120 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b160:	31 c0                	xor    eax,eax
c000b162:	c3                   	ret    
c000b163:	90                   	nop

c000b164 <ReservedFilename::isAtty()>:
c000b164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b168:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b16b:	31 c0                	xor    eax,eax
c000b16d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b173:	74 09                	je     c000b17e <ReservedFilename::isAtty()+0x1a>
c000b175:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b17b:	0f 94 c0             	sete   al
c000b17e:	c3                   	ret    
c000b17f:	90                   	nop

c000b180 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b184:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b188:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b18b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b18f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b194:	75 08                	jne    c000b19e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b196:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b19c:	eb 3d                	jmp    c000b1db <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b19e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b1a3:	75 17                	jne    c000b1bc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b1a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b1ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b1b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b1b9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b1bc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b1c1:	75 04                	jne    c000b1c7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b1c3:	89 0a                	mov    DWORD PTR [edx],ecx
c000b1c5:	eb 14                	jmp    c000b1db <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b1c7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b1cc:	74 c8                	je     c000b196 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b1ce:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b1d3:	83 e0 ef             	and    eax,0xffffffef
c000b1d6:	83 f8 08             	cmp    eax,0x8
c000b1d9:	76 bb                	jbe    c000b196 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b1db:	31 c0                	xor    eax,eax
c000b1dd:	c3                   	ret    

c000b1de <UnixFile::getFileDescriptor()>:
c000b1de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1e5:	c3                   	ret    

c000b1e6 <UnixFile::UnixFile(int)>:
c000b1e6:	53                   	push   ebx
c000b1e7:	83 ec 28             	sub    esp,0x28
c000b1ea:	ba c0 27 02 c0       	mov    edx,0xc00227c0
c000b1ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1f3:	89 10                	mov    DWORD PTR [eax],edx
c000b1f5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b1fd:	0f 8f 8c 01 00 00    	jg     c000b38f <UnixFile::UnixFile(int)+0x1a9>
c000b203:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000b208:	8d 50 01             	lea    edx,[eax+0x1]
c000b20b:	89 15 a0 54 02 c0    	mov    DWORD PTR ds:0xc00254a0,edx
c000b211:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b215:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b218:	83 ec 08             	sub    esp,0x8
c000b21b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b21f:	68 b8 61 02 c0       	push   0xc00261b8
c000b224:	e8 c3 5c 01 00       	call   c0020eec <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	a0 b4 61 02 c0       	mov    al,ds:0xc00261b4
c000b231:	83 f0 01             	xor    eax,0x1
c000b234:	84 c0                	test   al,al
c000b236:	0f 84 54 01 00 00    	je     c000b390 <UnixFile::UnixFile(int)+0x1aa>
c000b23c:	c6 05 b4 61 02 c0 01 	mov    BYTE PTR ds:0xc00261b4,0x1
c000b243:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b24b:	83 ec 0c             	sub    esp,0xc
c000b24e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b252:	e8 4c e7 ff ff       	call   c00099a3 <malloc>
c000b257:	83 c4 10             	add    esp,0x10
c000b25a:	89 c3                	mov    ebx,eax
c000b25c:	83 ec 08             	sub    esp,0x8
c000b25f:	68 03 ff ff 0f       	push   0xfffff03
c000b264:	53                   	push   ebx
c000b265:	e8 2c 01 00 00       	call   c000b396 <ReservedFilename::ReservedFilename(int)>
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	89 1d ac 61 02 c0    	mov    DWORD PTR ds:0xc00261ac,ebx
c000b273:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b27b:	83 ec 0c             	sub    esp,0xc
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 1c e7 ff ff       	call   c00099a3 <malloc>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 c3                	mov    ebx,eax
c000b28c:	83 ec 08             	sub    esp,0x8
c000b28f:	68 01 ff ff 0f       	push   0xfffff01
c000b294:	53                   	push   ebx
c000b295:	e8 fc 00 00 00       	call   c000b396 <ReservedFilename::ReservedFilename(int)>
c000b29a:	83 c4 10             	add    esp,0x10
c000b29d:	89 1d b0 61 02 c0    	mov    DWORD PTR ds:0xc00261b0,ebx
c000b2a3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b2ab:	83 ec 0c             	sub    esp,0xc
c000b2ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b2b2:	e8 ec e6 ff ff       	call   c00099a3 <malloc>
c000b2b7:	83 c4 10             	add    esp,0x10
c000b2ba:	89 c3                	mov    ebx,eax
c000b2bc:	83 ec 08             	sub    esp,0x8
c000b2bf:	68 00 ff ff 0f       	push   0xfffff00
c000b2c4:	53                   	push   ebx
c000b2c5:	e8 cc 00 00 00       	call   c000b396 <ReservedFilename::ReservedFilename(int)>
c000b2ca:	83 c4 10             	add    esp,0x10
c000b2cd:	89 1d a4 61 02 c0    	mov    DWORD PTR ds:0xc00261a4,ebx
c000b2d3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b2db:	83 ec 0c             	sub    esp,0xc
c000b2de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b2e2:	e8 bc e6 ff ff       	call   c00099a3 <malloc>
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	89 c3                	mov    ebx,eax
c000b2ec:	83 ec 08             	sub    esp,0x8
c000b2ef:	68 02 ff ff 0f       	push   0xfffff02
c000b2f4:	53                   	push   ebx
c000b2f5:	e8 9c 00 00 00       	call   c000b396 <ReservedFilename::ReservedFilename(int)>
c000b2fa:	83 c4 10             	add    esp,0x10
c000b2fd:	89 1d a8 61 02 c0    	mov    DWORD PTR ds:0xc00261a8,ebx
c000b303:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b30b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b310:	7f 7e                	jg     c000b390 <UnixFile::UnixFile(int)+0x1aa>
c000b312:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b31a:	83 ec 0c             	sub    esp,0xc
c000b31d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b321:	e8 7d e6 ff ff       	call   c00099a3 <malloc>
c000b326:	83 c4 10             	add    esp,0x10
c000b329:	89 c3                	mov    ebx,eax
c000b32b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b32f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b334:	83 ec 08             	sub    esp,0x8
c000b337:	50                   	push   eax
c000b338:	53                   	push   ebx
c000b339:	e8 58 00 00 00       	call   c000b396 <ReservedFilename::ReservedFilename(int)>
c000b33e:	83 c4 10             	add    esp,0x10
c000b341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b345:	89 1c 85 80 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9e80],ebx
c000b34c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b354:	83 ec 0c             	sub    esp,0xc
c000b357:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b35b:	e8 43 e6 ff ff       	call   c00099a3 <malloc>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 c3                	mov    ebx,eax
c000b365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b369:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b36e:	83 ec 08             	sub    esp,0x8
c000b371:	50                   	push   eax
c000b372:	53                   	push   ebx
c000b373:	e8 1e 00 00 00       	call   c000b396 <ReservedFilename::ReservedFilename(int)>
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b37f:	89 1c 85 40 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ec0],ebx
c000b386:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b38a:	e9 7c ff ff ff       	jmp    c000b30b <UnixFile::UnixFile(int)+0x125>
c000b38f:	90                   	nop
c000b390:	83 c4 28             	add    esp,0x28
c000b393:	5b                   	pop    ebx
c000b394:	c3                   	ret    
c000b395:	90                   	nop

c000b396 <ReservedFilename::ReservedFilename(int)>:
c000b396:	83 ec 0c             	sub    esp,0xc
c000b399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39d:	83 ec 08             	sub    esp,0x8
c000b3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a4:	50                   	push   eax
c000b3a5:	e8 3c fe ff ff       	call   c000b1e6 <UnixFile::UnixFile(int)>
c000b3aa:	83 c4 10             	add    esp,0x10
c000b3ad:	ba dc 27 02 c0       	mov    edx,0xc00227dc
c000b3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b6:	89 10                	mov    DWORD PTR [eax],edx
c000b3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b3c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3c3:	90                   	nop
c000b3c4:	83 c4 0c             	add    esp,0xc
c000b3c7:	c3                   	ret    

c000b3c8 <UnixFile::~UnixFile()>:
c000b3c8:	83 ec 1c             	sub    esp,0x1c
c000b3cb:	ba c0 27 02 c0       	mov    edx,0xc00227c0
c000b3d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3d4:	89 10                	mov    DWORD PTR [eax],edx
c000b3d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3dd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b3e2:	7f 73                	jg     c000b457 <UnixFile::~UnixFile()+0x8f>
c000b3e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	68 b8 61 02 c0       	push   0xc00261b8
c000b3f4:	e8 c7 5b 01 00       	call   c0020fc0 <LinkedList<UnixFile>::getFirstElement()>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	68 b8 61 02 c0       	push   0xc00261b8
c000b408:	e8 bb 5b 01 00       	call   c0020fc8 <LinkedList<UnixFile>::removeFirst()>
c000b40d:	83 c4 10             	add    esp,0x10
c000b410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b414:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b418:	74 40                	je     c000b45a <UnixFile::~UnixFile()+0x92>
c000b41a:	83 ec 08             	sub    esp,0x8
c000b41d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b421:	68 b8 61 02 c0       	push   0xc00261b8
c000b426:	e8 c1 5a 01 00       	call   c0020eec <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b432:	8d 50 01             	lea    edx,[eax+0x1]
c000b435:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b439:	3d 88 13 00 00       	cmp    eax,0x1388
c000b43e:	0f 94 c0             	sete   al
c000b441:	84 c0                	test   al,al
c000b443:	74 a7                	je     c000b3ec <UnixFile::~UnixFile()+0x24>
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	68 98 27 02 c0       	push   0xc0022798
c000b44d:	e8 f1 8d 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000b452:	83 c4 10             	add    esp,0x10
c000b455:	eb 95                	jmp    c000b3ec <UnixFile::~UnixFile()+0x24>
c000b457:	90                   	nop
c000b458:	eb 01                	jmp    c000b45b <UnixFile::~UnixFile()+0x93>
c000b45a:	90                   	nop
c000b45b:	90                   	nop
c000b45c:	83 c4 1c             	add    esp,0x1c
c000b45f:	c3                   	ret    

c000b460 <UnixFile::~UnixFile()>:
c000b460:	83 ec 0c             	sub    esp,0xc
c000b463:	83 ec 0c             	sub    esp,0xc
c000b466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46a:	e8 59 ff ff ff       	call   c000b3c8 <UnixFile::~UnixFile()>
c000b46f:	83 c4 10             	add    esp,0x10
c000b472:	83 ec 08             	sub    esp,0x8
c000b475:	6a 0c                	push   0xc
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	e8 a3 14 00 00       	call   c000c923 <operator delete(void*, unsigned long)>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	83 c4 0c             	add    esp,0xc
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <ReservedFilename::~ReservedFilename()>:
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	ba dc 27 02 c0       	mov    edx,0xc00227dc
c000b490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b494:	89 10                	mov    DWORD PTR [eax],edx
c000b496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49a:	83 ec 0c             	sub    esp,0xc
c000b49d:	50                   	push   eax
c000b49e:	e8 25 ff ff ff       	call   c000b3c8 <UnixFile::~UnixFile()>
c000b4a3:	83 c4 10             	add    esp,0x10
c000b4a6:	90                   	nop
c000b4a7:	83 c4 0c             	add    esp,0xc
c000b4aa:	c3                   	ret    
c000b4ab:	90                   	nop

c000b4ac <ReservedFilename::~ReservedFilename()>:
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	83 ec 0c             	sub    esp,0xc
c000b4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b6:	e8 cd ff ff ff       	call   c000b488 <ReservedFilename::~ReservedFilename()>
c000b4bb:	83 c4 10             	add    esp,0x10
c000b4be:	83 ec 08             	sub    esp,0x8
c000b4c1:	6a 0c                	push   0xc
c000b4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c7:	e8 57 14 00 00       	call   c000c923 <operator delete(void*, unsigned long)>
c000b4cc:	83 c4 10             	add    esp,0x10
c000b4cf:	83 c4 0c             	add    esp,0xc
c000b4d2:	c3                   	ret    

c000b4d3 <getFromFileDescriptor(int)>:
c000b4d3:	53                   	push   ebx
c000b4d4:	83 ec 08             	sub    esp,0x8
c000b4d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4db:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b4e1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b4e7:	7f 2c                	jg     c000b515 <getFromFileDescriptor(int)+0x42>
c000b4e9:	83 ec 0c             	sub    esp,0xc
c000b4ec:	68 b8 61 02 c0       	push   0xc00261b8
c000b4f1:	e8 ca 5a 01 00       	call   c0020fc0 <LinkedList<UnixFile>::getFirstElement()>
c000b4f6:	83 c4 10             	add    esp,0x10
c000b4f9:	85 c0                	test   eax,eax
c000b4fb:	75 04                	jne    c000b501 <getFromFileDescriptor(int)+0x2e>
c000b4fd:	31 c0                	xor    eax,eax
c000b4ff:	eb 6e                	jmp    c000b56f <getFromFileDescriptor(int)+0x9c>
c000b501:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b504:	74 69                	je     c000b56f <getFromFileDescriptor(int)+0x9c>
c000b506:	52                   	push   edx
c000b507:	52                   	push   edx
c000b508:	50                   	push   eax
c000b509:	68 b8 61 02 c0       	push   0xc00261b8
c000b50e:	e8 57 5b 01 00       	call   c002106a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b513:	eb e1                	jmp    c000b4f6 <getFromFileDescriptor(int)+0x23>
c000b515:	a1 ac 61 02 c0       	mov    eax,ds:0xc00261ac
c000b51a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b520:	74 4d                	je     c000b56f <getFromFileDescriptor(int)+0x9c>
c000b522:	a1 b0 61 02 c0       	mov    eax,ds:0xc00261b0
c000b527:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b52d:	74 40                	je     c000b56f <getFromFileDescriptor(int)+0x9c>
c000b52f:	a1 a8 61 02 c0       	mov    eax,ds:0xc00261a8
c000b534:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b53a:	74 33                	je     c000b56f <getFromFileDescriptor(int)+0x9c>
c000b53c:	a1 a4 61 02 c0       	mov    eax,ds:0xc00261a4
c000b541:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b547:	74 26                	je     c000b56f <getFromFileDescriptor(int)+0x9c>
c000b549:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b54f:	83 f8 08             	cmp    eax,0x8
c000b552:	77 09                	ja     c000b55d <getFromFileDescriptor(int)+0x8a>
c000b554:	8b 04 85 80 61 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9e80]
c000b55b:	eb 12                	jmp    c000b56f <getFromFileDescriptor(int)+0x9c>
c000b55d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b563:	83 fb 08             	cmp    ebx,0x8
c000b566:	77 95                	ja     c000b4fd <getFromFileDescriptor(int)+0x2a>
c000b568:	8b 04 9d 40 61 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9ec0]
c000b56f:	83 c4 08             	add    esp,0x8
c000b572:	5b                   	pop    ebx
c000b573:	c3                   	ret    

c000b574 <__static_initialization_and_destruction_0(int, int)>:
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b57c:	75 34                	jne    c000b5b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b57e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b586:	75 2a                	jne    c000b5b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b588:	83 ec 0c             	sub    esp,0xc
c000b58b:	68 b8 61 02 c0       	push   0xc00261b8
c000b590:	e8 15 59 01 00       	call   c0020eaa <LinkedList<UnixFile>::LinkedList()>
c000b595:	83 c4 10             	add    esp,0x10
c000b598:	83 ec 04             	sub    esp,0x4
c000b59b:	68 c8 52 02 c0       	push   0xc00252c8
c000b5a0:	68 b8 61 02 c0       	push   0xc00261b8
c000b5a5:	68 a8 0e 02 c0       	push   0xc0020ea8
c000b5aa:	e8 ee 12 00 00       	call   c000c89d <__cxa_atexit>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	90                   	nop
c000b5b3:	83 c4 0c             	add    esp,0xc
c000b5b6:	c3                   	ret    

c000b5b7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b5b7:	83 ec 0c             	sub    esp,0xc
c000b5ba:	83 ec 08             	sub    esp,0x8
c000b5bd:	68 ff ff 00 00       	push   0xffff
c000b5c2:	6a 01                	push   0x1
c000b5c4:	e8 ab ff ff ff       	call   c000b574 <__static_initialization_and_destruction_0(int, int)>
c000b5c9:	83 c4 10             	add    esp,0x10
c000b5cc:	83 c4 0c             	add    esp,0xc
c000b5cf:	c3                   	ret    

c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b5d0:	53                   	push   ebx
c000b5d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5d9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b5df:	89 c8                	mov    eax,ecx
c000b5e1:	d1 e8                	shr    eax,1
c000b5e3:	03 05 a8 54 02 c0    	add    eax,DWORD PTR ds:0xc00254a8
c000b5e9:	83 e1 01             	and    ecx,0x1
c000b5ec:	8a 10                	mov    dl,BYTE PTR [eax]
c000b5ee:	75 09                	jne    c000b5f9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b5f0:	83 e2 f0             	and    edx,0xfffffff0
c000b5f3:	09 da                	or     edx,ebx
c000b5f5:	88 10                	mov    BYTE PTR [eax],dl
c000b5f7:	5b                   	pop    ebx
c000b5f8:	c3                   	ret    
c000b5f9:	c1 e3 04             	shl    ebx,0x4
c000b5fc:	83 e2 0f             	and    edx,0xf
c000b5ff:	09 da                	or     edx,ebx
c000b601:	88 10                	mov    BYTE PTR [eax],dl
c000b603:	5b                   	pop    ebx
c000b604:	c3                   	ret    

c000b605 <Virt::getPageState(unsigned long)>:
c000b605:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b609:	8b 0d a8 54 02 c0    	mov    ecx,DWORD PTR ds:0xc00254a8
c000b60f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b615:	89 d0                	mov    eax,edx
c000b617:	d1 e8                	shr    eax,1
c000b619:	83 e2 01             	and    edx,0x1
c000b61c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b61f:	75 04                	jne    c000b625 <Virt::getPageState(unsigned long)+0x20>
c000b621:	83 e0 0f             	and    eax,0xf
c000b624:	c3                   	ret    
c000b625:	c0 e8 04             	shr    al,0x4
c000b628:	c3                   	ret    

c000b629 <Virt::allocateKernelVirtualPages(int)>:
c000b629:	55                   	push   ebp
c000b62a:	31 ed                	xor    ebp,ebp
c000b62c:	57                   	push   edi
c000b62d:	56                   	push   esi
c000b62e:	53                   	push   ebx
c000b62f:	31 db                	xor    ebx,ebx
c000b631:	83 ec 1c             	sub    esp,0x1c
c000b634:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b638:	8b 3d a4 54 02 c0    	mov    edi,DWORD PTR ds:0xc00254a4
c000b63e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b643:	57                   	push   edi
c000b644:	e8 bc ff ff ff       	call   c000b605 <Virt::getPageState(unsigned long)>
c000b649:	5a                   	pop    edx
c000b64a:	84 c0                	test   al,al
c000b64c:	75 3a                	jne    c000b688 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b64e:	85 db                	test   ebx,ebx
c000b650:	75 02                	jne    c000b654 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b652:	89 fd                	mov    ebp,edi
c000b654:	43                   	inc    ebx
c000b655:	39 f3                	cmp    ebx,esi
c000b657:	74 5a                	je     c000b6b3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b659:	47                   	inc    edi
c000b65a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b660:	76 31                	jbe    c000b693 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b662:	c7 05 a4 54 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00254a4,0xc8000
c000b66c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b671:	75 28                	jne    c000b69b <Virt::allocateKernelVirtualPages(int)+0x72>
c000b673:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b678:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b67d:	57                   	push   edi
c000b67e:	e8 82 ff ff ff       	call   c000b605 <Virt::getPageState(unsigned long)>
c000b683:	5a                   	pop    edx
c000b684:	84 c0                	test   al,al
c000b686:	74 c6                	je     c000b64e <Virt::allocateKernelVirtualPages(int)+0x25>
c000b688:	31 db                	xor    ebx,ebx
c000b68a:	47                   	inc    edi
c000b68b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b691:	77 cf                	ja     c000b662 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b693:	89 3d a4 54 02 c0    	mov    DWORD PTR ds:0xc00254a4,edi
c000b699:	eb a8                	jmp    c000b643 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b69b:	83 ec 0c             	sub    esp,0xc
c000b69e:	68 f0 27 02 c0       	push   0xc00227f0
c000b6a3:	e8 9b 8b 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000b6a8:	8b 3d a4 54 02 c0    	mov    edi,DWORD PTR ds:0xc00254a4
c000b6ae:	83 c4 10             	add    esp,0x10
c000b6b1:	eb 90                	jmp    c000b643 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b6b3:	89 2d a4 54 02 c0    	mov    DWORD PTR ds:0xc00254a4,ebp
c000b6b9:	4b                   	dec    ebx
c000b6ba:	74 5f                	je     c000b71b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b6bc:	85 f6                	test   esi,esi
c000b6be:	74 3d                	je     c000b6fd <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b6c0:	89 e8                	mov    eax,ebp
c000b6c2:	31 db                	xor    ebx,ebx
c000b6c4:	8d 7e ff             	lea    edi,[esi-0x1]
c000b6c7:	eb 14                	jmp    c000b6dd <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b6c9:	6a 01                	push   0x1
c000b6cb:	43                   	inc    ebx
c000b6cc:	50                   	push   eax
c000b6cd:	e8 fe fe ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b6d2:	58                   	pop    eax
c000b6d3:	39 f3                	cmp    ebx,esi
c000b6d5:	5a                   	pop    edx
c000b6d6:	74 25                	je     c000b6fd <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b6d8:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000b6dd:	8d 50 01             	lea    edx,[eax+0x1]
c000b6e0:	85 db                	test   ebx,ebx
c000b6e2:	89 15 a4 54 02 c0    	mov    DWORD PTR ds:0xc00254a4,edx
c000b6e8:	74 20                	je     c000b70a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b6ea:	39 df                	cmp    edi,ebx
c000b6ec:	75 db                	jne    c000b6c9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b6ee:	6a 03                	push   0x3
c000b6f0:	43                   	inc    ebx
c000b6f1:	50                   	push   eax
c000b6f2:	e8 d9 fe ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b6f7:	59                   	pop    ecx
c000b6f8:	39 f3                	cmp    ebx,esi
c000b6fa:	58                   	pop    eax
c000b6fb:	75 db                	jne    c000b6d8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b6fd:	83 c4 1c             	add    esp,0x1c
c000b700:	89 e8                	mov    eax,ebp
c000b702:	5b                   	pop    ebx
c000b703:	c1 e0 0c             	shl    eax,0xc
c000b706:	5e                   	pop    esi
c000b707:	5f                   	pop    edi
c000b708:	5d                   	pop    ebp
c000b709:	c3                   	ret    
c000b70a:	6a 02                	push   0x2
c000b70c:	bb 01 00 00 00       	mov    ebx,0x1
c000b711:	50                   	push   eax
c000b712:	e8 b9 fe ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b717:	58                   	pop    eax
c000b718:	5a                   	pop    edx
c000b719:	eb bd                	jmp    c000b6d8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b71b:	6a 04                	push   0x4
c000b71d:	8d 45 01             	lea    eax,[ebp+0x1]
c000b720:	55                   	push   ebp
c000b721:	a3 a4 54 02 c0       	mov    ds:0xc00254a4,eax
c000b726:	e8 a5 fe ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b72b:	59                   	pop    ecx
c000b72c:	89 e8                	mov    eax,ebp
c000b72e:	5b                   	pop    ebx
c000b72f:	c1 e0 0c             	shl    eax,0xc
c000b732:	83 c4 1c             	add    esp,0x1c
c000b735:	5b                   	pop    ebx
c000b736:	5e                   	pop    esi
c000b737:	5f                   	pop    edi
c000b738:	5d                   	pop    ebp
c000b739:	c3                   	ret    

c000b73a <Virt::freeSwapfilePage(unsigned long)>:
c000b73a:	53                   	push   ebx
c000b73b:	8b 15 cc 61 02 c0    	mov    edx,DWORD PTR ds:0xc00261cc
c000b741:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b745:	b8 01 00 00 00       	mov    eax,0x1
c000b74a:	89 cb                	mov    ebx,ecx
c000b74c:	d3 e0                	shl    eax,cl
c000b74e:	c1 eb 05             	shr    ebx,0x5
c000b751:	f7 d0                	not    eax
c000b753:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b756:	5b                   	pop    ebx
c000b757:	c3                   	ret    

c000b758 <Virt::swapIDToSector(unsigned long)>:
c000b758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b75c:	0f af 05 ac 54 02 c0 	imul   eax,DWORD PTR ds:0xc00254ac
c000b763:	03 05 b4 54 02 c0    	add    eax,DWORD PTR ds:0xc00254b4
c000b769:	c3                   	ret    

c000b76a <Virt::allocateSwapfilePage()>:
c000b76a:	55                   	push   ebp
c000b76b:	31 d2                	xor    edx,edx
c000b76d:	57                   	push   edi
c000b76e:	56                   	push   esi
c000b76f:	53                   	push   ebx
c000b770:	83 ec 0c             	sub    esp,0xc
c000b773:	8b 0d ac 54 02 c0    	mov    ecx,DWORD PTR ds:0xc00254ac
c000b779:	a1 b0 54 02 c0       	mov    eax,ds:0xc00254b0
c000b77e:	f7 f1                	div    ecx
c000b780:	39 0d b0 54 02 c0    	cmp    DWORD PTR ds:0xc00254b0,ecx
c000b786:	72 2d                	jb     c000b7b5 <Virt::allocateSwapfilePage()+0x4b>
c000b788:	8b 35 cc 61 02 c0    	mov    esi,DWORD PTR ds:0xc00261cc
c000b78e:	8b 16                	mov    edx,DWORD PTR [esi]
c000b790:	f6 c2 01             	test   dl,0x1
c000b793:	74 3c                	je     c000b7d1 <Virt::allocateSwapfilePage()+0x67>
c000b795:	31 c9                	xor    ecx,ecx
c000b797:	bf 01 00 00 00       	mov    edi,0x1
c000b79c:	eb 12                	jmp    c000b7b0 <Virt::allocateSwapfilePage()+0x46>
c000b79e:	89 fd                	mov    ebp,edi
c000b7a0:	89 ca                	mov    edx,ecx
c000b7a2:	d3 e5                	shl    ebp,cl
c000b7a4:	c1 ea 05             	shr    edx,0x5
c000b7a7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b7aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b7ac:	85 ea                	test   edx,ebp
c000b7ae:	74 2a                	je     c000b7da <Virt::allocateSwapfilePage()+0x70>
c000b7b0:	41                   	inc    ecx
c000b7b1:	39 c8                	cmp    eax,ecx
c000b7b3:	77 e9                	ja     c000b79e <Virt::allocateSwapfilePage()+0x34>
c000b7b5:	83 ec 0c             	sub    esp,0xc
c000b7b8:	68 d0 29 02 c0       	push   0xc00229d0
c000b7bd:	e8 81 8a 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000b7c2:	83 c4 10             	add    esp,0x10
c000b7c5:	31 c9                	xor    ecx,ecx
c000b7c7:	83 c4 0c             	add    esp,0xc
c000b7ca:	89 c8                	mov    eax,ecx
c000b7cc:	5b                   	pop    ebx
c000b7cd:	5e                   	pop    esi
c000b7ce:	5f                   	pop    edi
c000b7cf:	5d                   	pop    ebp
c000b7d0:	c3                   	ret    
c000b7d1:	89 f3                	mov    ebx,esi
c000b7d3:	bd 01 00 00 00       	mov    ebp,0x1
c000b7d8:	31 c9                	xor    ecx,ecx
c000b7da:	09 ea                	or     edx,ebp
c000b7dc:	89 c8                	mov    eax,ecx
c000b7de:	89 13                	mov    DWORD PTR [ebx],edx
c000b7e0:	83 c4 0c             	add    esp,0xc
c000b7e3:	5b                   	pop    ebx
c000b7e4:	5e                   	pop    esi
c000b7e5:	5f                   	pop    edi
c000b7e6:	5d                   	pop    ebp
c000b7e7:	c3                   	ret    

c000b7e8 <Virt::virtualMemorySetup()>:
c000b7e8:	53                   	push   ebx
c000b7e9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b7ee:	6a 0f                	push   0xf
c000b7f0:	53                   	push   ebx
c000b7f1:	43                   	inc    ebx
c000b7f2:	e8 d9 fd ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7f7:	58                   	pop    eax
c000b7f8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b7fe:	5a                   	pop    edx
c000b7ff:	75 ed                	jne    c000b7ee <Virt::virtualMemorySetup()+0x6>
c000b801:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b806:	6a 00                	push   0x0
c000b808:	53                   	push   ebx
c000b809:	43                   	inc    ebx
c000b80a:	e8 c1 fd ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b80f:	59                   	pop    ecx
c000b810:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b816:	58                   	pop    eax
c000b817:	75 ed                	jne    c000b806 <Virt::virtualMemorySetup()+0x1e>
c000b819:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b81e:	6a 0f                	push   0xf
c000b820:	53                   	push   ebx
c000b821:	43                   	inc    ebx
c000b822:	e8 a9 fd ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b827:	58                   	pop    eax
c000b828:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b82e:	5a                   	pop    edx
c000b82f:	75 ed                	jne    c000b81e <Virt::virtualMemorySetup()+0x36>
c000b831:	5b                   	pop    ebx
c000b832:	c3                   	ret    

c000b833 <Virt::setupPageSwapping(int)>:
c000b833:	53                   	push   ebx
c000b834:	83 ec 0c             	sub    esp,0xc
c000b837:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b83b:	a1 68 66 02 c0       	mov    eax,ds:0xc0026668
c000b840:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b846:	8b 10                	mov    edx,DWORD PTR [eax]
c000b848:	53                   	push   ebx
c000b849:	c1 e3 0b             	shl    ebx,0xb
c000b84c:	68 e7 29 02 c0       	push   0xc00229e7
c000b851:	50                   	push   eax
c000b852:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b855:	89 1d b0 54 02 c0    	mov    DWORD PTR ds:0xc00254b0,ebx
c000b85b:	c6 05 b8 54 02 c0 43 	mov    BYTE PTR ds:0xc00254b8,0x43
c000b862:	c1 eb 08             	shr    ebx,0x8
c000b865:	a3 b4 54 02 c0       	mov    ds:0xc00254b4,eax
c000b86a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b86d:	c7 05 ac 54 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00254ac,0x8
c000b877:	e8 27 e1 ff ff       	call   c00099a3 <malloc>
c000b87c:	83 c4 0c             	add    esp,0xc
c000b87f:	89 c1                	mov    ecx,eax
c000b881:	a3 cc 61 02 c0       	mov    ds:0xc00261cc,eax
c000b886:	31 d2                	xor    edx,edx
c000b888:	a1 b0 54 02 c0       	mov    eax,ds:0xc00254b0
c000b88d:	f7 35 ac 54 02 c0    	div    DWORD PTR ds:0xc00254ac
c000b893:	c1 e8 05             	shr    eax,0x5
c000b896:	50                   	push   eax
c000b897:	6a 00                	push   0x0
c000b899:	51                   	push   ecx
c000b89a:	e8 e5 4d ff ff       	call   c0000684 <memset>
c000b89f:	83 c4 18             	add    esp,0x18
c000b8a2:	5b                   	pop    ebx
c000b8a3:	c3                   	ret    

c000b8a4 <VAS::VAS()>:
c000b8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b8af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b8ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8be:	a3 d0 61 02 c0       	mov    ds:0xc00261d0,eax
c000b8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8c7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b8cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8cf:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b8d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8d6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b8dd:	90                   	nop
c000b8de:	c3                   	ret    
c000b8df:	90                   	nop

c000b8e0 <VAS::VAS(VAS*)>:
c000b8e0:	83 ec 0c             	sub    esp,0xc
c000b8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b8f9:	83 ec 0c             	sub    esp,0xc
c000b8fc:	68 10 28 02 c0       	push   0xc0022810
c000b901:	e8 3d 89 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	90                   	nop
c000b90a:	83 c4 0c             	add    esp,0xc
c000b90d:	c3                   	ret    

c000b90e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b90e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b912:	89 c2                	mov    edx,eax
c000b914:	c1 e8 0a             	shr    eax,0xa
c000b917:	c1 ea 16             	shr    edx,0x16
c000b91a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b91f:	19 c9                	sbb    ecx,ecx
c000b921:	c1 e2 0c             	shl    edx,0xc
c000b924:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b92a:	25 fc 0f 00 00       	and    eax,0xffc
c000b92f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b936:	01 d0                	add    eax,edx
c000b938:	c3                   	ret    
c000b939:	90                   	nop

c000b93a <VAS::getPageTableEntry(unsigned long)>:
c000b93a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b93e:	89 ca                	mov    edx,ecx
c000b940:	c1 e9 0a             	shr    ecx,0xa
c000b943:	c1 ea 16             	shr    edx,0x16
c000b946:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b94c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b952:	c1 e0 0c             	shl    eax,0xc
c000b955:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b958:	c3                   	ret    

c000b959 <Virt::freeKernelVirtualPages(unsigned long)>:
c000b959:	57                   	push   edi
c000b95a:	56                   	push   esi
c000b95b:	be 01 00 00 00       	mov    esi,0x1
c000b960:	53                   	push   ebx
c000b961:	83 ec 10             	sub    esp,0x10
c000b964:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b968:	c1 eb 0c             	shr    ebx,0xc
c000b96b:	eb 3f                	jmp    c000b9ac <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b96d:	83 ec 08             	sub    esp,0x8
c000b970:	57                   	push   edi
c000b971:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c000b977:	e8 be ff ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000b97c:	83 c4 10             	add    esp,0x10
c000b97f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b981:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b985:	f6 c4 04             	test   ah,0x4
c000b988:	75 5f                	jne    c000b9e9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b98a:	80 fa 04             	cmp    dl,0x4
c000b98d:	74 78                	je     c000ba07 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b98f:	80 fa 02             	cmp    dl,0x2
c000b992:	0f 84 88 00 00 00    	je     c000ba20 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b998:	80 fa 03             	cmp    dl,0x3
c000b99b:	0f 84 ad 00 00 00    	je     c000ba4e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000b9a1:	fe ca                	dec    dl
c000b9a3:	0f 84 92 00 00 00    	je     c000ba3b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b9a9:	43                   	inc    ebx
c000b9aa:	31 f6                	xor    esi,esi
c000b9ac:	53                   	push   ebx
c000b9ad:	89 df                	mov    edi,ebx
c000b9af:	e8 51 fc ff ff       	call   c000b605 <Virt::getPageState(unsigned long)>
c000b9b4:	c1 e7 0c             	shl    edi,0xc
c000b9b7:	59                   	pop    ecx
c000b9b8:	84 c0                	test   al,al
c000b9ba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000b9be:	75 ad                	jne    c000b96d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000b9c0:	83 ec 0c             	sub    esp,0xc
c000b9c3:	68 fe 29 02 c0       	push   0xc00229fe
c000b9c8:	e8 76 88 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000b9cd:	58                   	pop    eax
c000b9ce:	5a                   	pop    edx
c000b9cf:	57                   	push   edi
c000b9d0:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c000b9d6:	e8 5f ff ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000b9db:	83 c4 10             	add    esp,0x10
c000b9de:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9e0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b9e4:	f6 c4 04             	test   ah,0x4
c000b9e7:	74 c0                	je     c000b9a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b9e9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000b9ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b9f2:	83 ec 0c             	sub    esp,0xc
c000b9f5:	50                   	push   eax
c000b9f6:	e8 33 e3 ff ff       	call   c0009d2e <Phys::freePage(unsigned long)>
c000b9fb:	83 c4 10             	add    esp,0x10
c000b9fe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba02:	80 fa 04             	cmp    dl,0x4
c000ba05:	75 88                	jne    c000b98f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000ba07:	89 f0                	mov    eax,esi
c000ba09:	84 c0                	test   al,al
c000ba0b:	75 47                	jne    c000ba54 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000ba0d:	c7 44 24 20 34 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022834
c000ba15:	83 c4 10             	add    esp,0x10
c000ba18:	5b                   	pop    ebx
c000ba19:	5e                   	pop    esi
c000ba1a:	5f                   	pop    edi
c000ba1b:	e9 23 88 00 00       	jmp    c0014243 <Krnl::panic(char const*)>
c000ba20:	89 f0                	mov    eax,esi
c000ba22:	84 c0                	test   al,al
c000ba24:	75 15                	jne    c000ba3b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba26:	83 ec 0c             	sub    esp,0xc
c000ba29:	68 1a 2a 02 c0       	push   0xc0022a1a
c000ba2e:	e8 10 88 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000ba33:	83 c4 10             	add    esp,0x10
c000ba36:	e9 6e ff ff ff       	jmp    c000b9a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba3b:	83 ec 08             	sub    esp,0x8
c000ba3e:	6a 00                	push   0x0
c000ba40:	53                   	push   ebx
c000ba41:	e8 8a fb ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba46:	83 c4 10             	add    esp,0x10
c000ba49:	e9 5b ff ff ff       	jmp    c000b9a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba4e:	89 f0                	mov    eax,esi
c000ba50:	84 c0                	test   al,al
c000ba52:	75 15                	jne    c000ba69 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000ba54:	83 ec 08             	sub    esp,0x8
c000ba57:	6a 00                	push   0x0
c000ba59:	53                   	push   ebx
c000ba5a:	e8 71 fb ff ff       	call   c000b5d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	83 c4 10             	add    esp,0x10
c000ba65:	5b                   	pop    ebx
c000ba66:	5e                   	pop    esi
c000ba67:	5f                   	pop    edi
c000ba68:	c3                   	ret    
c000ba69:	c7 44 24 20 36 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022a36
c000ba71:	83 c4 10             	add    esp,0x10
c000ba74:	5b                   	pop    ebx
c000ba75:	5e                   	pop    esi
c000ba76:	5f                   	pop    edi
c000ba77:	e9 c7 87 00 00       	jmp    c0014243 <Krnl::panic(char const*)>

c000ba7c <VAS::freeAllocatedPages(unsigned long)>:
c000ba7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ba84:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000ba88:	74 09                	je     c000ba93 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000ba8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba8e:	e9 c6 fe ff ff       	jmp    c000b959 <Virt::freeKernelVirtualPages(unsigned long)>
c000ba93:	c7 44 24 04 58 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022858
c000ba9b:	e9 64 0f 00 00       	jmp    c000ca04 <Dbg::kprintf(char const*, ...)>

c000baa0 <VAS::virtualToPhysical(unsigned long)>:
c000baa0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000baa4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000baa8:	e8 8d fe ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000baad:	5a                   	pop    edx
c000baae:	8b 00                	mov    eax,DWORD PTR [eax]
c000bab0:	59                   	pop    ecx
c000bab1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bab6:	c3                   	ret    
c000bab7:	90                   	nop

c000bab8 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bab8:	55                   	push   ebp
c000bab9:	57                   	push   edi
c000baba:	56                   	push   esi
c000babb:	53                   	push   ebx
c000babc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bac0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bac4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bac8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bacc:	85 db                	test   ebx,ebx
c000bace:	7e 22                	jle    c000baf2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bad0:	c1 e3 0c             	shl    ebx,0xc
c000bad3:	01 f3                	add    ebx,esi
c000bad5:	56                   	push   esi
c000bad6:	81 c6 00 10 00 00    	add    esi,0x1000
c000badc:	55                   	push   ebp
c000badd:	e8 58 fe ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000bae2:	5a                   	pop    edx
c000bae3:	59                   	pop    ecx
c000bae4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bae6:	21 f9                	and    ecx,edi
c000bae8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000baec:	39 f3                	cmp    ebx,esi
c000baee:	89 08                	mov    DWORD PTR [eax],ecx
c000baf0:	75 e3                	jne    c000bad5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000baf2:	5b                   	pop    ebx
c000baf3:	5e                   	pop    esi
c000baf4:	5f                   	pop    edi
c000baf5:	5d                   	pop    ebp
c000baf6:	c3                   	ret    
c000baf7:	90                   	nop

c000baf8 <VAS::setToWriteCombining(unsigned long, int)>:
c000baf8:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000bafd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb03:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bb0a:	75 01                	jne    c000bb0d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bb0c:	c3                   	ret    
c000bb0d:	68 80 00 00 00       	push   0x80
c000bb12:	6a ff                	push   0xffffffff
c000bb14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb20:	e8 93 ff ff ff       	call   c000bab8 <VAS::reflagRange(unsigned long, int, int, int)>
c000bb25:	83 c4 14             	add    esp,0x14
c000bb28:	c3                   	ret    
c000bb29:	90                   	nop

c000bb2a <VAS::mapOtherVASIn(bool, VAS*)>:
c000bb2a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bb2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb33:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bb36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb3a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bb3d:	19 c0                	sbb    eax,eax
c000bb3f:	83 ca 03             	or     edx,0x3
c000bb42:	83 e0 fc             	and    eax,0xfffffffc
c000bb45:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bb4c:	0f 20 d8             	mov    eax,cr3
c000bb4f:	0f 22 d8             	mov    cr3,eax
c000bb52:	c3                   	ret    
c000bb53:	90                   	nop

c000bb54 <VAS::~VAS()>:
c000bb54:	83 ec 2c             	sub    esp,0x2c
c000bb57:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bb5f:	fa                   	cli    
c000bb60:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000bb65:	40                   	inc    eax
c000bb66:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000bb6b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bb70:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bb75:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bb7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bb7f:	6a 01                	push   0x1
c000bb81:	50                   	push   eax
c000bb82:	e8 a3 ff ff ff       	call   c000bb2a <VAS::mapOtherVASIn(bool, VAS*)>
c000bb87:	83 c4 0c             	add    esp,0xc
c000bb8a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb92:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bb9a:	0f 8f d4 00 00 00    	jg     c000bc74 <VAS::~VAS()+0x120>
c000bba0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bba4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bba7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bbab:	c1 e2 02             	shl    edx,0x2
c000bbae:	01 d0                	add    eax,edx
c000bbb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbba:	83 e0 01             	and    eax,0x1
c000bbbd:	0f 84 a8 00 00 00    	je     c000bc6b <VAS::~VAS()+0x117>
c000bbc3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bbcb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bbd3:	7f 72                	jg     c000bc47 <VAS::~VAS()+0xf3>
c000bbd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bbd9:	c1 e0 0a             	shl    eax,0xa
c000bbdc:	89 c2                	mov    edx,eax
c000bbde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bbe2:	01 d0                	add    eax,edx
c000bbe4:	c1 e0 0c             	shl    eax,0xc
c000bbe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbeb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bbf0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbf2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bbf5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bbfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbff:	6a 01                	push   0x1
c000bc01:	50                   	push   eax
c000bc02:	e8 07 fd ff ff       	call   c000b90e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bc07:	83 c4 0c             	add    esp,0xc
c000bc0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc12:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc1c:	25 01 04 00 00       	and    eax,0x401
c000bc21:	3d 01 04 00 00       	cmp    eax,0x401
c000bc26:	75 19                	jne    c000bc41 <VAS::~VAS()+0xed>
c000bc28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc2c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc31:	83 ec 0c             	sub    esp,0xc
c000bc34:	50                   	push   eax
c000bc35:	e8 f4 e0 ff ff       	call   c0009d2e <Phys::freePage(unsigned long)>
c000bc3a:	83 c4 10             	add    esp,0x10
c000bc3d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bc41:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bc45:	eb 84                	jmp    c000bbcb <VAS::~VAS()+0x77>
c000bc47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc4b:	25 00 04 00 00       	and    eax,0x400
c000bc50:	74 19                	je     c000bc6b <VAS::~VAS()+0x117>
c000bc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc56:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc5b:	83 ec 0c             	sub    esp,0xc
c000bc5e:	50                   	push   eax
c000bc5f:	e8 ca e0 ff ff       	call   c0009d2e <Phys::freePage(unsigned long)>
c000bc64:	83 c4 10             	add    esp,0x10
c000bc67:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bc6b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bc6f:	e9 1e ff ff ff       	jmp    c000bb92 <VAS::~VAS()+0x3e>
c000bc74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc7b:	83 ec 0c             	sub    esp,0xc
c000bc7e:	50                   	push   eax
c000bc7f:	e8 d5 fc ff ff       	call   c000b959 <Virt::freeKernelVirtualPages(unsigned long)>
c000bc84:	83 c4 10             	add    esp,0x10
c000bc87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bc8e:	83 ec 0c             	sub    esp,0xc
c000bc91:	50                   	push   eax
c000bc92:	e8 97 e0 ff ff       	call   c0009d2e <Phys::freePage(unsigned long)>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bc9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bca2:	c1 e0 02             	shl    eax,0x2
c000bca5:	83 ec 08             	sub    esp,0x8
c000bca8:	50                   	push   eax
c000bca9:	68 7c 28 02 c0       	push   0xc002287c
c000bcae:	e8 51 0d 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000bcb3:	83 c4 10             	add    esp,0x10
c000bcb6:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000bcbb:	48                   	dec    eax
c000bcbc:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000bcc1:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000bcc6:	85 c0                	test   eax,eax
c000bcc8:	75 01                	jne    c000bccb <VAS::~VAS()+0x177>
c000bcca:	fb                   	sti    
c000bccb:	90                   	nop
c000bccc:	83 c4 2c             	add    esp,0x2c
c000bccf:	c3                   	ret    

c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bcd0:	55                   	push   ebp
c000bcd1:	57                   	push   edi
c000bcd2:	56                   	push   esi
c000bcd3:	53                   	push   ebx
c000bcd4:	83 ec 1c             	sub    esp,0x1c
c000bcd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bcdb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bcdf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bce5:	77 08                	ja     c000bcef <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bce7:	0f 20 d8             	mov    eax,cr3
c000bcea:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bced:	75 47                	jne    c000bd36 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bcef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bcf3:	09 d8                	or     eax,ebx
c000bcf5:	a9 ff 0f 00 00       	test   eax,0xfff
c000bcfa:	75 57                	jne    c000bd53 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bcfc:	89 de                	mov    esi,ebx
c000bcfe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bd01:	c1 ee 16             	shr    esi,0x16
c000bd04:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bd0b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bd0f:	74 54                	je     c000bd65 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bd11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd15:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bd1b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bd1f:	c1 e6 0c             	shl    esi,0xc
c000bd22:	c1 eb 0a             	shr    ebx,0xa
c000bd25:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bd2b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bd2e:	83 c4 1c             	add    esp,0x1c
c000bd31:	5b                   	pop    ebx
c000bd32:	5e                   	pop    esi
c000bd33:	5f                   	pop    edi
c000bd34:	5d                   	pop    ebp
c000bd35:	c3                   	ret    
c000bd36:	83 ec 0c             	sub    esp,0xc
c000bd39:	68 9c 28 02 c0       	push   0xc002289c
c000bd3e:	e8 c1 0c 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000bd43:	83 c4 10             	add    esp,0x10
c000bd46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd4a:	09 d8                	or     eax,ebx
c000bd4c:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd51:	74 a9                	je     c000bcfc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bd53:	83 ec 0c             	sub    esp,0xc
c000bd56:	68 04 29 02 c0       	push   0xc0022904
c000bd5b:	e8 e3 84 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000bd60:	83 c4 10             	add    esp,0x10
c000bd63:	eb 97                	jmp    c000bcfc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bd65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd69:	e8 31 e0 ff ff       	call   c0009d9f <Phys::allocatePage()>
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	89 c5                	mov    ebp,eax
c000bd73:	8b 0d d0 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261d0
c000bd79:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bd7d:	6a 01                	push   0x1
c000bd7f:	e8 a5 f8 ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c000bd84:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bd8b:	6a 01                	push   0x1
c000bd8d:	50                   	push   eax
c000bd8e:	55                   	push   ebp
c000bd8f:	81 cd 07 04 00 00    	or     ebp,0x407
c000bd95:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bd99:	51                   	push   ecx
c000bd9a:	e8 27 02 00 00       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bd9f:	83 c4 1c             	add    esp,0x1c
c000bda2:	68 00 10 00 00       	push   0x1000
c000bda7:	6a 00                	push   0x0
c000bda9:	50                   	push   eax
c000bdaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdae:	e8 d1 48 ff ff       	call   c0000684 <memset>
c000bdb3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bdb7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bdba:	e8 9a fb ff ff       	call   c000b959 <Virt::freeKernelVirtualPages(unsigned long)>
c000bdbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdc3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bdc6:	83 c4 10             	add    esp,0x10
c000bdc9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000bdcc:	e9 40 ff ff ff       	jmp    c000bd11 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000bdd1:	90                   	nop

c000bdd2 <VAS::allocatePages(int, int)>:
c000bdd2:	55                   	push   ebp
c000bdd3:	57                   	push   edi
c000bdd4:	56                   	push   esi
c000bdd5:	53                   	push   ebx
c000bdd6:	83 ec 1c             	sub    esp,0x1c
c000bdd9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bddd:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000bde2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bde8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bdee:	83 e0 01             	and    eax,0x1
c000bdf1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bdf5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bdf9:	0f 85 cc 00 00 00    	jne    c000becb <VAS::allocatePages(int, int)+0xf9>
c000bdff:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000be02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be06:	85 c0                	test   eax,eax
c000be08:	0f 84 a1 00 00 00    	je     c000beaf <VAS::allocatePages(int, int)+0xdd>
c000be0e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000be12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be16:	c1 e6 0c             	shl    esi,0xc
c000be19:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000be1d:	85 c0                	test   eax,eax
c000be1f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000be22:	7e 33                	jle    c000be57 <VAS::allocatePages(int, int)+0x85>
c000be24:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be28:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be2c:	81 cd 00 04 00 00    	or     ebp,0x400
c000be32:	e8 68 df ff ff       	call   c0009d9f <Phys::allocatePage()>
c000be37:	55                   	push   ebp
c000be38:	53                   	push   ebx
c000be39:	50                   	push   eax
c000be3a:	57                   	push   edi
c000be3b:	e8 90 fe ff ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000be40:	83 c4 10             	add    esp,0x10
c000be43:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000be48:	74 03                	je     c000be4d <VAS::allocatePages(int, int)+0x7b>
c000be4a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be4d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000be53:	39 de                	cmp    esi,ebx
c000be55:	75 db                	jne    c000be32 <VAS::allocatePages(int, int)+0x60>
c000be57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000be5c:	75 12                	jne    c000be70 <VAS::allocatePages(int, int)+0x9e>
c000be5e:	0f 20 d8             	mov    eax,cr3
c000be61:	0f 22 d8             	mov    cr3,eax
c000be64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be68:	83 c4 1c             	add    esp,0x1c
c000be6b:	5b                   	pop    ebx
c000be6c:	5e                   	pop    esi
c000be6d:	5f                   	pop    edi
c000be6e:	5d                   	pop    ebp
c000be6f:	c3                   	ret    
c000be70:	c1 ee 0a             	shr    esi,0xa
c000be73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be77:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000be7d:	c1 eb 0a             	shr    ebx,0xa
c000be80:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000be86:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000be8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000be92:	39 c3                	cmp    ebx,eax
c000be94:	77 ce                	ja     c000be64 <VAS::allocatePages(int, int)+0x92>
c000be96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be99:	81 c3 00 10 00 00    	add    ebx,0x1000
c000be9f:	39 d8                	cmp    eax,ebx
c000bea1:	73 f3                	jae    c000be96 <VAS::allocatePages(int, int)+0xc4>
c000bea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bea7:	83 c4 1c             	add    esp,0x1c
c000beaa:	5b                   	pop    ebx
c000beab:	5e                   	pop    esi
c000beac:	5f                   	pop    edi
c000bead:	5d                   	pop    ebp
c000beae:	c3                   	ret    
c000beaf:	83 ec 0c             	sub    esp,0xc
c000beb2:	68 28 29 02 c0       	push   0xc0022928
c000beb7:	e8 87 83 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000bebc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bebf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bec3:	83 c4 10             	add    esp,0x10
c000bec6:	e9 43 ff ff ff       	jmp    c000be0e <VAS::allocatePages(int, int)+0x3c>
c000becb:	83 ec 0c             	sub    esp,0xc
c000bece:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bed2:	e8 52 f7 ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c000bed7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bedb:	83 c4 10             	add    esp,0x10
c000bede:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bee3:	0f 87 9b 00 00 00    	ja     c000bf84 <VAS::allocatePages(int, int)+0x1b2>
c000bee9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000beed:	85 d2                	test   edx,edx
c000beef:	7e 3c                	jle    c000bf2d <VAS::allocatePages(int, int)+0x15b>
c000bef1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bef5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bef9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000befd:	c1 e5 0c             	shl    ebp,0xc
c000bf00:	81 ce 00 04 00 00    	or     esi,0x400
c000bf06:	01 dd                	add    ebp,ebx
c000bf08:	e8 92 de ff ff       	call   c0009d9f <Phys::allocatePage()>
c000bf0d:	56                   	push   esi
c000bf0e:	53                   	push   ebx
c000bf0f:	50                   	push   eax
c000bf10:	57                   	push   edi
c000bf11:	e8 ba fd ff ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf16:	83 c4 10             	add    esp,0x10
c000bf19:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf1e:	74 03                	je     c000bf23 <VAS::allocatePages(int, int)+0x151>
c000bf20:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf23:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf29:	39 dd                	cmp    ebp,ebx
c000bf2b:	75 db                	jne    c000bf08 <VAS::allocatePages(int, int)+0x136>
c000bf2d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf32:	0f 84 26 ff ff ff    	je     c000be5e <VAS::allocatePages(int, int)+0x8c>
c000bf38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf40:	89 d3                	mov    ebx,edx
c000bf42:	c1 e0 0c             	shl    eax,0xc
c000bf45:	c1 eb 0a             	shr    ebx,0xa
c000bf48:	01 d0                	add    eax,edx
c000bf4a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf50:	c1 e8 0a             	shr    eax,0xa
c000bf53:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf5e:	2d 00 00 40 00       	sub    eax,0x400000
c000bf63:	39 c3                	cmp    ebx,eax
c000bf65:	0f 87 f9 fe ff ff    	ja     c000be64 <VAS::allocatePages(int, int)+0x92>
c000bf6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf74:	39 d8                	cmp    eax,ebx
c000bf76:	73 f3                	jae    c000bf6b <VAS::allocatePages(int, int)+0x199>
c000bf78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf7c:	83 c4 1c             	add    esp,0x1c
c000bf7f:	5b                   	pop    ebx
c000bf80:	5e                   	pop    esi
c000bf81:	5f                   	pop    edi
c000bf82:	5d                   	pop    ebp
c000bf83:	c3                   	ret    
c000bf84:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000bf89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bf8f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000bf96:	0f 84 4d ff ff ff    	je     c000bee9 <VAS::allocatePages(int, int)+0x117>
c000bf9c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000bfa4:	e9 40 ff ff ff       	jmp    c000bee9 <VAS::allocatePages(int, int)+0x117>
c000bfa9:	90                   	nop

c000bfaa <VAS::setCPUSpecific(unsigned long)>:
c000bfaa:	83 ec 0c             	sub    esp,0xc
c000bfad:	6a 05                	push   0x5
c000bfaf:	68 00 00 40 c2       	push   0xc2400000
c000bfb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfbc:	e8 0f fd ff ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bfc1:	83 c4 1c             	add    esp,0x1c
c000bfc4:	c3                   	ret    
c000bfc5:	90                   	nop

c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000bfc6:	55                   	push   ebp
c000bfc7:	57                   	push   edi
c000bfc8:	56                   	push   esi
c000bfc9:	53                   	push   ebx
c000bfca:	83 ec 1c             	sub    esp,0x1c
c000bfcd:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000bfd2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bfd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfdc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bfe0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bfe6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000bfea:	83 e0 01             	and    eax,0x1
c000bfed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bff1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bff5:	85 c0                	test   eax,eax
c000bff7:	7e 39                	jle    c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000bff9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bffd:	89 f3                	mov    ebx,esi
c000bfff:	c1 e0 0c             	shl    eax,0xc
c000c002:	01 f0                	add    eax,esi
c000c004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c008:	55                   	push   ebp
c000c009:	53                   	push   ebx
c000c00a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c00e:	29 f0                	sub    eax,esi
c000c010:	01 d8                	add    eax,ebx
c000c012:	50                   	push   eax
c000c013:	57                   	push   edi
c000c014:	e8 b7 fc ff ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c021:	74 03                	je     c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c023:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c026:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c02c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c030:	75 d6                	jne    c000c008 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c032:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c037:	75 10                	jne    c000c049 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c039:	0f 20 d8             	mov    eax,cr3
c000c03c:	0f 22 d8             	mov    cr3,eax
c000c03f:	83 c4 1c             	add    esp,0x1c
c000c042:	89 f0                	mov    eax,esi
c000c044:	5b                   	pop    ebx
c000c045:	5e                   	pop    esi
c000c046:	5f                   	pop    edi
c000c047:	5d                   	pop    ebp
c000c048:	c3                   	ret    
c000c049:	89 f3                	mov    ebx,esi
c000c04b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c04f:	c1 eb 0a             	shr    ebx,0xa
c000c052:	c1 e0 0c             	shl    eax,0xc
c000c055:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c05b:	01 f0                	add    eax,esi
c000c05d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c063:	c1 e8 0a             	shr    eax,0xa
c000c066:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c06b:	2d 00 00 40 00       	sub    eax,0x400000
c000c070:	39 c3                	cmp    ebx,eax
c000c072:	77 cb                	ja     c000c03f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c074:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c077:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c07d:	39 d8                	cmp    eax,ebx
c000c07f:	73 f3                	jae    c000c074 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c081:	83 c4 1c             	add    esp,0x1c
c000c084:	89 f0                	mov    eax,esi
c000c086:	5b                   	pop    ebx
c000c087:	5e                   	pop    esi
c000c088:	5f                   	pop    edi
c000c089:	5d                   	pop    ebp
c000c08a:	c3                   	ret    
c000c08b:	90                   	nop

c000c08c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c08c:	55                   	push   ebp
c000c08d:	57                   	push   edi
c000c08e:	56                   	push   esi
c000c08f:	53                   	push   ebx
c000c090:	83 ec 1c             	sub    esp,0x1c
c000c093:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c097:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c09b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c09f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c0a3:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0a8:	75 4a                	jne    c000c0f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c0aa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c0ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0b1:	c1 eb 16             	shr    ebx,0x16
c000c0b4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c0bb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c0bf:	74 4d                	je     c000c10e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c0c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c0c9:	c1 e8 0a             	shr    eax,0xa
c000c0cc:	80 fa 01             	cmp    dl,0x1
c000c0cf:	19 d2                	sbb    edx,edx
c000c0d1:	c1 e3 0c             	shl    ebx,0xc
c000c0d4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c0d8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c0de:	25 fc 0f 00 00       	and    eax,0xffc
c000c0e3:	01 d8                	add    eax,ebx
c000c0e5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c0ec:	83 c4 1c             	add    esp,0x1c
c000c0ef:	5b                   	pop    ebx
c000c0f0:	5e                   	pop    esi
c000c0f1:	5f                   	pop    edi
c000c0f2:	5d                   	pop    ebp
c000c0f3:	c3                   	ret    
c000c0f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c0f8:	83 ec 0c             	sub    esp,0xc
c000c0fb:	68 54 29 02 c0       	push   0xc0022954
c000c100:	e8 3e 81 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000c105:	83 c4 10             	add    esp,0x10
c000c108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c10c:	eb 9c                	jmp    c000c0aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c10e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c112:	e8 88 dc ff ff       	call   c0009d9f <Phys::allocatePage()>
c000c117:	83 ec 0c             	sub    esp,0xc
c000c11a:	89 c5                	mov    ebp,eax
c000c11c:	8b 0d d0 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261d0
c000c122:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c126:	6a 01                	push   0x1
c000c128:	e8 fc f4 ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c000c12d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c134:	6a 01                	push   0x1
c000c136:	50                   	push   eax
c000c137:	55                   	push   ebp
c000c138:	81 cd 07 04 00 00    	or     ebp,0x407
c000c13e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c142:	51                   	push   ecx
c000c143:	e8 7e fe ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c148:	83 c4 1c             	add    esp,0x1c
c000c14b:	68 00 10 00 00       	push   0x1000
c000c150:	6a 00                	push   0x0
c000c152:	50                   	push   eax
c000c153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c157:	e8 28 45 ff ff       	call   c0000684 <memset>
c000c15c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c160:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c163:	e8 f1 f7 ff ff       	call   c000b959 <Virt::freeKernelVirtualPages(unsigned long)>
c000c168:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c16b:	83 c4 10             	add    esp,0x10
c000c16e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c171:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c175:	e9 47 ff ff ff       	jmp    c000c0c1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c17a <VAS::VAS(bool)>:
c000c17a:	53                   	push   ebx
c000c17b:	83 ec 28             	sub    esp,0x28
c000c17e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c182:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c18a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c191:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c195:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c19c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1a0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c1a4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c1a7:	e8 f3 db ff ff       	call   c0009d9f <Phys::allocatePage()>
c000c1ac:	89 c2                	mov    edx,eax
c000c1ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1b2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c1b5:	8b 1d d0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261d0
c000c1bb:	83 ec 0c             	sub    esp,0xc
c000c1be:	6a 01                	push   0x1
c000c1c0:	e8 64 f4 ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c000c1c5:	83 c4 10             	add    esp,0x10
c000c1c8:	89 c2                	mov    edx,eax
c000c1ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c1d1:	83 ec 0c             	sub    esp,0xc
c000c1d4:	6a 03                	push   0x3
c000c1d6:	6a 01                	push   0x1
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	53                   	push   ebx
c000c1db:	e8 e6 fd ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1e0:	83 c4 20             	add    esp,0x20
c000c1e3:	89 c2                	mov    edx,eax
c000c1e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c1ec:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c1f4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c1fc:	7f 1c                	jg     c000c21a <VAS::VAS(bool)+0xa0>
c000c1fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c202:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c205:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c209:	c1 e2 02             	shl    edx,0x2
c000c20c:	01 d0                	add    eax,edx
c000c20e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c214:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c218:	eb da                	jmp    c000c1f4 <VAS::VAS(bool)+0x7a>
c000c21a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c222:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c22a:	7f 7a                	jg     c000c2a6 <VAS::VAS(bool)+0x12c>
c000c22c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c230:	2d 00 02 00 00       	sub    eax,0x200
c000c235:	c1 e0 0c             	shl    eax,0xc
c000c238:	83 c8 03             	or     eax,0x3
c000c23b:	89 c2                	mov    edx,eax
c000c23d:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000c242:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c248:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c24e:	83 e0 10             	and    eax,0x10
c000c251:	84 c0                	test   al,al
c000c253:	74 07                	je     c000c25c <VAS::VAS(bool)+0xe2>
c000c255:	b8 00 01 00 00       	mov    eax,0x100
c000c25a:	eb 05                	jmp    c000c261 <VAS::VAS(bool)+0xe7>
c000c25c:	b8 00 00 00 00       	mov    eax,0x0
c000c261:	09 d0                	or     eax,edx
c000c263:	89 c1                	mov    ecx,eax
c000c265:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c269:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c26c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c270:	c1 e2 02             	shl    edx,0x2
c000c273:	01 d0                	add    eax,edx
c000c275:	89 ca                	mov    edx,ecx
c000c277:	89 10                	mov    DWORD PTR [eax],edx
c000c279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c27d:	2d 40 03 00 00       	sub    eax,0x340
c000c282:	83 f8 7f             	cmp    eax,0x7f
c000c285:	77 16                	ja     c000c29d <VAS::VAS(bool)+0x123>
c000c287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c28b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c28e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c292:	c1 e2 02             	shl    edx,0x2
c000c295:	01 d0                	add    eax,edx
c000c297:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c29d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c2a1:	e9 7c ff ff ff       	jmp    c000c222 <VAS::VAS(bool)+0xa8>
c000c2a6:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000c2ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2b1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c2b7:	83 e0 10             	and    eax,0x10
c000c2ba:	84 c0                	test   al,al
c000c2bc:	74 07                	je     c000c2c5 <VAS::VAS(bool)+0x14b>
c000c2be:	b8 03 41 00 00       	mov    eax,0x4103
c000c2c3:	eb 05                	jmp    c000c2ca <VAS::VAS(bool)+0x150>
c000c2c5:	b8 03 40 00 00       	mov    eax,0x4003
c000c2ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c2ce:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c2d1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c2d7:	89 02                	mov    DWORD PTR [edx],eax
c000c2d9:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000c2de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2e4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c2ea:	83 ec 08             	sub    esp,0x8
c000c2ed:	50                   	push   eax
c000c2ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f2:	e8 b3 fc ff ff       	call   c000bfaa <VAS::setCPUSpecific(unsigned long)>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2fe:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c301:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000c306:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c30c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c312:	83 e0 10             	and    eax,0x10
c000c315:	84 c0                	test   al,al
c000c317:	74 07                	je     c000c320 <VAS::VAS(bool)+0x1a6>
c000c319:	b8 00 01 00 00       	mov    eax,0x100
c000c31e:	eb 05                	jmp    c000c325 <VAS::VAS(bool)+0x1ab>
c000c320:	b8 00 00 00 00       	mov    eax,0x0
c000c325:	09 c2                	or     edx,eax
c000c327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c32b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c32e:	05 fc 0f 00 00       	add    eax,0xffc
c000c333:	83 ca 03             	or     edx,0x3
c000c336:	89 10                	mov    DWORD PTR [eax],edx
c000c338:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000c33d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c343:	83 ec 0c             	sub    esp,0xc
c000c346:	50                   	push   eax
c000c347:	e8 f8 1d 00 00       	call   c000e144 <Device::getName()>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	83 ec 08             	sub    esp,0x8
c000c352:	68 50 2a 02 c0       	push   0xc0022a50
c000c357:	50                   	push   eax
c000c358:	e8 6f 44 ff ff       	call   c00007cc <strcmp>
c000c35d:	83 c4 10             	add    esp,0x10
c000c360:	85 c0                	test   eax,eax
c000c362:	0f 94 c0             	sete   al
c000c365:	84 c0                	test   al,al
c000c367:	0f 84 87 00 00 00    	je     c000c3f4 <VAS::VAS(bool)+0x27a>
c000c36d:	fa                   	cli    
c000c36e:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000c373:	40                   	inc    eax
c000c374:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000c379:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000c37e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c384:	05 7c 09 00 00       	add    eax,0x97c
c000c389:	83 ec 0c             	sub    esp,0xc
c000c38c:	50                   	push   eax
c000c38d:	e8 00 d1 ff ff       	call   c0009492 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c392:	83 c4 10             	add    esp,0x10
c000c395:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c39a:	89 c3                	mov    ebx,eax
c000c39c:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000c3a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3a7:	05 7c 09 00 00       	add    eax,0x97c
c000c3ac:	83 ec 0c             	sub    esp,0xc
c000c3af:	50                   	push   eax
c000c3b0:	e8 dd d0 ff ff       	call   c0009492 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c3b5:	83 c4 10             	add    esp,0x10
c000c3b8:	83 ec 08             	sub    esp,0x8
c000c3bb:	50                   	push   eax
c000c3bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3c0:	e8 75 f5 ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3cf:	6a 11                	push   0x11
c000c3d1:	53                   	push   ebx
c000c3d2:	50                   	push   eax
c000c3d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3d7:	e8 f4 f8 ff ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3dc:	83 c4 10             	add    esp,0x10
c000c3df:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000c3e4:	48                   	dec    eax
c000c3e5:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000c3ea:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000c3ef:	85 c0                	test   eax,eax
c000c3f1:	75 01                	jne    c000c3f4 <VAS::VAS(bool)+0x27a>
c000c3f3:	fb                   	sti    
c000c3f4:	90                   	nop
c000c3f5:	83 c4 28             	add    esp,0x28
c000c3f8:	5b                   	pop    ebx
c000c3f9:	c3                   	ret    

c000c3fa <VAS::evict(unsigned long)>:
c000c3fa:	55                   	push   ebp
c000c3fb:	57                   	push   edi
c000c3fc:	56                   	push   esi
c000c3fd:	53                   	push   ebx
c000c3fe:	83 ec 28             	sub    esp,0x28
c000c401:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c405:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c409:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40d:	68 5e 2a 02 c0       	push   0xc0022a5e
c000c412:	e8 ed 05 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c417:	e8 4e f3 ff ff       	call   c000b76a <Virt::allocateSwapfilePage()>
c000c41c:	5a                   	pop    edx
c000c41d:	89 c7                	mov    edi,eax
c000c41f:	59                   	pop    ecx
c000c420:	50                   	push   eax
c000c421:	68 7b 2a 02 c0       	push   0xc0022a7b
c000c426:	e8 d9 05 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c42b:	83 c4 10             	add    esp,0x10
c000c42e:	8b 1d ac 54 02 c0    	mov    ebx,DWORD PTR ds:0xc00254ac
c000c434:	85 db                	test   ebx,ebx
c000c436:	7e 3d                	jle    c000c475 <VAS::evict(unsigned long)+0x7b>
c000c438:	89 ee                	mov    esi,ebp
c000c43a:	31 db                	xor    ebx,ebx
c000c43c:	83 ec 0c             	sub    esp,0xc
c000c43f:	57                   	push   edi
c000c440:	e8 13 f3 ff ff       	call   c000b758 <Virt::swapIDToSector(unsigned long)>
c000c445:	89 34 24             	mov    DWORD PTR [esp],esi
c000c448:	01 d8                	add    eax,ebx
c000c44a:	6a 01                	push   0x1
c000c44c:	31 d2                	xor    edx,edx
c000c44e:	43                   	inc    ebx
c000c44f:	52                   	push   edx
c000c450:	81 c6 00 02 00 00    	add    esi,0x200
c000c456:	50                   	push   eax
c000c457:	0f be 05 b8 54 02 c0 	movsx  eax,BYTE PTR ds:0xc00254b8
c000c45e:	ff 34 85 5c 65 02 c0 	push   DWORD PTR [eax*4-0x3ffd9aa4]
c000c465:	e8 12 3d 00 00       	call   c001017c <LogicalDisk::write(unsigned long long, int, void*)>
c000c46a:	83 c4 20             	add    esp,0x20
c000c46d:	39 1d ac 54 02 c0    	cmp    DWORD PTR ds:0xc00254ac,ebx
c000c473:	7f c7                	jg     c000c43c <VAS::evict(unsigned long)+0x42>
c000c475:	83 ec 08             	sub    esp,0x8
c000c478:	c1 e7 0b             	shl    edi,0xb
c000c47b:	55                   	push   ebp
c000c47c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c480:	e8 b5 f4 ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000c485:	5a                   	pop    edx
c000c486:	89 c6                	mov    esi,eax
c000c488:	59                   	pop    ecx
c000c489:	ff 30                	push   DWORD PTR [eax]
c000c48b:	68 8b 2a 02 c0       	push   0xc0022a8b
c000c490:	e8 6f 05 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c495:	8b 16                	mov    edx,DWORD PTR [esi]
c000c497:	89 d3                	mov    ebx,edx
c000c499:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c49f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c4a5:	09 d7                	or     edi,edx
c000c4a7:	89 3e                	mov    DWORD PTR [esi],edi
c000c4a9:	5e                   	pop    esi
c000c4aa:	58                   	pop    eax
c000c4ab:	57                   	push   edi
c000c4ac:	68 a4 2a 02 c0       	push   0xc0022aa4
c000c4b1:	e8 4e 05 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c4b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4b9:	ff 05 c8 61 02 c0    	inc    DWORD PTR ds:0xc00261c8
c000c4bf:	e8 6a d8 ff ff       	call   c0009d2e <Phys::freePage(unsigned long)>
c000c4c4:	0f 20 d8             	mov    eax,cr3
c000c4c7:	0f 22 d8             	mov    cr3,eax
c000c4ca:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c000c4d0:	55                   	push   ebp
c000c4d1:	53                   	push   ebx
c000c4d2:	68 78 29 02 c0       	push   0xc0022978
c000c4d7:	e8 28 05 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c4dc:	a1 c4 61 02 c0       	mov    eax,ds:0xc00261c4
c000c4e1:	c7 44 24 50 bd 2a 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022abd
c000c4e9:	8d 50 01             	lea    edx,[eax+0x1]
c000c4ec:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c4f0:	89 15 c4 61 02 c0    	mov    DWORD PTR ds:0xc00261c4,edx
c000c4f6:	83 c4 3c             	add    esp,0x3c
c000c4f9:	5b                   	pop    ebx
c000c4fa:	5e                   	pop    esi
c000c4fb:	5f                   	pop    edi
c000c4fc:	5d                   	pop    ebp
c000c4fd:	e9 02 05 00 00       	jmp    c000ca04 <Dbg::kprintf(char const*, ...)>

c000c502 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c502:	55                   	push   ebp
c000c503:	57                   	push   edi
c000c504:	56                   	push   esi
c000c505:	53                   	push   ebx
c000c506:	83 ec 24             	sub    esp,0x24
c000c509:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c50d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c511:	68 ce 2a 02 c0       	push   0xc0022ace
c000c516:	e8 e9 04 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c51b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c51f:	58                   	pop    eax
c000c520:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c526:	5a                   	pop    edx
c000c527:	57                   	push   edi
c000c528:	53                   	push   ebx
c000c529:	e8 0c f4 ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000c52e:	59                   	pop    ecx
c000c52f:	5e                   	pop    esi
c000c530:	89 c6                	mov    esi,eax
c000c532:	ff 30                	push   DWORD PTR [eax]
c000c534:	68 e1 2a 02 c0       	push   0xc0022ae1
c000c539:	e8 c6 04 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c53e:	83 c4 10             	add    esp,0x10
c000c541:	85 ff                	test   edi,edi
c000c543:	74 0a                	je     c000c54f <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c545:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c547:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c54d:	74 0a                	je     c000c559 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c54f:	83 c4 1c             	add    esp,0x1c
c000c552:	31 c0                	xor    eax,eax
c000c554:	5b                   	pop    ebx
c000c555:	5e                   	pop    esi
c000c556:	5f                   	pop    edi
c000c557:	5d                   	pop    ebp
c000c558:	c3                   	ret    
c000c559:	83 ec 08             	sub    esp,0x8
c000c55c:	c1 ed 0b             	shr    ebp,0xb
c000c55f:	55                   	push   ebp
c000c560:	68 ef 2a 02 c0       	push   0xc0022aef
c000c565:	e8 9a 04 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c56a:	e8 30 d8 ff ff       	call   c0009d9f <Phys::allocatePage()>
c000c56f:	59                   	pop    ecx
c000c570:	5a                   	pop    edx
c000c571:	50                   	push   eax
c000c572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c576:	68 fa 2a 02 c0       	push   0xc0022afa
c000c57b:	e8 84 04 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c580:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c584:	8b 16                	mov    edx,DWORD PTR [esi]
c000c586:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c58c:	09 d0                	or     eax,edx
c000c58e:	0d 01 08 00 00       	or     eax,0x801
c000c593:	89 06                	mov    DWORD PTR [esi],eax
c000c595:	59                   	pop    ecx
c000c596:	5e                   	pop    esi
c000c597:	50                   	push   eax
c000c598:	68 0f 2b 02 c0       	push   0xc0022b0f
c000c59d:	e8 62 04 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c5a2:	0f 20 d8             	mov    eax,cr3
c000c5a5:	83 c4 0c             	add    esp,0xc
c000c5a8:	53                   	push   ebx
c000c5a9:	50                   	push   eax
c000c5aa:	68 27 2b 02 c0       	push   0xc0022b27
c000c5af:	e8 50 04 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c5b4:	c7 04 24 3f 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b3f
c000c5bb:	e8 44 04 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c5c0:	83 c4 10             	add    esp,0x10
c000c5c3:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000c5c8:	85 c0                	test   eax,eax
c000c5ca:	7e 3d                	jle    c000c609 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c5cc:	89 fe                	mov    esi,edi
c000c5ce:	31 db                	xor    ebx,ebx
c000c5d0:	83 ec 0c             	sub    esp,0xc
c000c5d3:	55                   	push   ebp
c000c5d4:	e8 7f f1 ff ff       	call   c000b758 <Virt::swapIDToSector(unsigned long)>
c000c5d9:	89 34 24             	mov    DWORD PTR [esp],esi
c000c5dc:	01 d8                	add    eax,ebx
c000c5de:	6a 01                	push   0x1
c000c5e0:	31 d2                	xor    edx,edx
c000c5e2:	43                   	inc    ebx
c000c5e3:	52                   	push   edx
c000c5e4:	81 c6 00 02 00 00    	add    esi,0x200
c000c5ea:	50                   	push   eax
c000c5eb:	0f be 05 b8 54 02 c0 	movsx  eax,BYTE PTR ds:0xc00254b8
c000c5f2:	ff 34 85 5c 65 02 c0 	push   DWORD PTR [eax*4-0x3ffd9aa4]
c000c5f9:	e8 12 3b 00 00       	call   c0010110 <LogicalDisk::read(unsigned long long, int, void*)>
c000c5fe:	83 c4 20             	add    esp,0x20
c000c601:	39 1d ac 54 02 c0    	cmp    DWORD PTR ds:0xc00254ac,ebx
c000c607:	7f c7                	jg     c000c5d0 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c609:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c000c60e:	48                   	dec    eax
c000c60f:	52                   	push   edx
c000c610:	a3 c8 61 02 c0       	mov    ds:0xc00261c8,eax
c000c615:	50                   	push   eax
c000c616:	57                   	push   edi
c000c617:	68 4f 2b 02 c0       	push   0xc0022b4f
c000c61c:	e8 e3 03 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c621:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c624:	e8 11 f1 ff ff       	call   c000b73a <Virt::freeSwapfilePage(unsigned long)>
c000c629:	c7 04 24 64 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b64
c000c630:	e8 cf 03 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c635:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000c63a:	83 c4 10             	add    esp,0x10
c000c63d:	48                   	dec    eax
c000c63e:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000c643:	85 c0                	test   eax,eax
c000c645:	75 01                	jne    c000c648 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c647:	fb                   	sti    
c000c648:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c64c:	25 ff 0f 00 00       	and    eax,0xfff
c000c651:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c656:	77 20                	ja     c000c678 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c658:	0f 20 d8             	mov    eax,cr3
c000c65b:	0f 22 d8             	mov    cr3,eax
c000c65e:	83 ec 0c             	sub    esp,0xc
c000c661:	68 8a 2b 02 c0       	push   0xc0022b8a
c000c666:	e8 99 03 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c66b:	83 c4 10             	add    esp,0x10
c000c66e:	b0 01                	mov    al,0x1
c000c670:	83 c4 1c             	add    esp,0x1c
c000c673:	5b                   	pop    ebx
c000c674:	5e                   	pop    esi
c000c675:	5f                   	pop    edi
c000c676:	5d                   	pop    ebp
c000c677:	c3                   	ret    
c000c678:	83 ec 0c             	sub    esp,0xc
c000c67b:	68 7a 2b 02 c0       	push   0xc0022b7a
c000c680:	e8 7f 03 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	eb ce                	jmp    c000c658 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c68a <VAS::scanForEviction()>:
c000c68a:	55                   	push   ebp
c000c68b:	31 ed                	xor    ebp,ebp
c000c68d:	57                   	push   edi
c000c68e:	56                   	push   esi
c000c68f:	53                   	push   ebx
c000c690:	83 ec 0c             	sub    esp,0xc
c000c693:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c697:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c69a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c6a0:	75 0e                	jne    c000c6b0 <VAS::scanForEviction()+0x26>
c000c6a2:	89 da                	mov    edx,ebx
c000c6a4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c6a7:	c1 ea 16             	shr    edx,0x16
c000c6aa:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c6ae:	74 4e                	je     c000c6fe <VAS::scanForEviction()+0x74>
c000c6b0:	53                   	push   ebx
c000c6b1:	56                   	push   esi
c000c6b2:	e8 83 f2 ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000c6b7:	5f                   	pop    edi
c000c6b8:	8b 38                	mov    edi,DWORD PTR [eax]
c000c6ba:	5a                   	pop    edx
c000c6bb:	89 fa                	mov    edx,edi
c000c6bd:	81 e2 01 08 00 00    	and    edx,0x801
c000c6c3:	81 fa 01 08 00 00    	cmp    edx,0x801
c000c6c9:	74 3e                	je     c000c709 <VAS::scanForEviction()+0x7f>
c000c6cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6d1:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c6d7:	76 2b                	jbe    c000c704 <VAS::scanForEviction()+0x7a>
c000c6d9:	45                   	inc    ebp
c000c6da:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c6e1:	83 fd 04             	cmp    ebp,0x4
c000c6e4:	74 35                	je     c000c71b <VAS::scanForEviction()+0x91>
c000c6e6:	31 db                	xor    ebx,ebx
c000c6e8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c6ee:	75 c0                	jne    c000c6b0 <VAS::scanForEviction()+0x26>
c000c6f0:	89 da                	mov    edx,ebx
c000c6f2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c6f5:	c1 ea 16             	shr    edx,0x16
c000c6f8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c6fc:	75 b2                	jne    c000c6b0 <VAS::scanForEviction()+0x26>
c000c6fe:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c704:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c707:	eb 91                	jmp    c000c69a <VAS::scanForEviction()+0x10>
c000c709:	f7 c7 20 00 00 00    	test   edi,0x20
c000c70f:	74 22                	je     c000c733 <VAS::scanForEviction()+0xa9>
c000c711:	83 e7 df             	and    edi,0xffffffdf
c000c714:	89 38                	mov    DWORD PTR [eax],edi
c000c716:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c719:	eb b0                	jmp    c000c6cb <VAS::scanForEviction()+0x41>
c000c71b:	83 ec 0c             	sub    esp,0xc
c000c71e:	68 a8 29 02 c0       	push   0xc00229a8
c000c723:	e8 1b 7b 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000c728:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c72b:	83 c4 10             	add    esp,0x10
c000c72e:	e9 67 ff ff ff       	jmp    c000c69a <VAS::scanForEviction()+0x10>
c000c733:	83 ec 08             	sub    esp,0x8
c000c736:	53                   	push   ebx
c000c737:	68 98 2b 02 c0       	push   0xc0022b98
c000c73c:	e8 c3 02 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c741:	58                   	pop    eax
c000c742:	5a                   	pop    edx
c000c743:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c746:	56                   	push   esi
c000c747:	e8 ae fc ff ff       	call   c000c3fa <VAS::evict(unsigned long)>
c000c74c:	59                   	pop    ecx
c000c74d:	5b                   	pop    ebx
c000c74e:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c751:	68 ac 2b 02 c0       	push   0xc0022bac
c000c756:	e8 a9 02 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c75b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c762:	89 f8                	mov    eax,edi
c000c764:	83 c4 1c             	add    esp,0x1c
c000c767:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c76c:	5b                   	pop    ebx
c000c76d:	5e                   	pop    esi
c000c76e:	5f                   	pop    edi
c000c76f:	5d                   	pop    ebp
c000c770:	c3                   	ret    

c000c771 <mapVASFirstTime>:
c000c771:	55                   	push   ebp
c000c772:	57                   	push   edi
c000c773:	56                   	push   esi
c000c774:	53                   	push   ebx
c000c775:	83 ec 0c             	sub    esp,0xc
c000c778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c77d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c780:	4a                   	dec    edx
c000c781:	0f 84 fe 00 00 00    	je     c000c885 <mapVASFirstTime+0x114>
c000c787:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c78a:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c78d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c792:	c1 e5 15             	shl    ebp,0x15
c000c795:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c79a:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c7a0:	29 eb                	sub    ebx,ebp
c000c7a2:	29 ef                	sub    edi,ebp
c000c7a4:	83 ec 08             	sub    esp,0x8
c000c7a7:	53                   	push   ebx
c000c7a8:	68 d8 2b 02 c0       	push   0xc0022bd8
c000c7ad:	e8 52 02 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c7b2:	e8 e8 d5 ff ff       	call   c0009d9f <Phys::allocatePage()>
c000c7b7:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c7be:	6a 01                	push   0x1
c000c7c0:	53                   	push   ebx
c000c7c1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c7c7:	50                   	push   eax
c000c7c8:	56                   	push   esi
c000c7c9:	e8 f8 f7 ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7ce:	83 c4 20             	add    esp,0x20
c000c7d1:	39 fb                	cmp    ebx,edi
c000c7d3:	75 cf                	jne    c000c7a4 <mapVASFirstTime+0x33>
c000c7d5:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c7da:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c7df:	29 eb                	sub    ebx,ebp
c000c7e1:	29 ef                	sub    edi,ebp
c000c7e3:	83 ec 08             	sub    esp,0x8
c000c7e6:	53                   	push   ebx
c000c7e7:	68 f4 2b 02 c0       	push   0xc0022bf4
c000c7ec:	e8 13 02 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c7f1:	58                   	pop    eax
c000c7f2:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c7f6:	5a                   	pop    edx
c000c7f7:	19 c0                	sbb    eax,eax
c000c7f9:	83 e0 04             	and    eax,0x4
c000c7fc:	05 03 04 00 00       	add    eax,0x403
c000c801:	50                   	push   eax
c000c802:	68 19 2b 02 c0       	push   0xc0022b19
c000c807:	e8 f8 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c80c:	e8 8e d5 ff ff       	call   c0009d9f <Phys::allocatePage()>
c000c811:	59                   	pop    ecx
c000c812:	89 c5                	mov    ebp,eax
c000c814:	58                   	pop    eax
c000c815:	55                   	push   ebp
c000c816:	68 08 2c 02 c0       	push   0xc0022c08
c000c81b:	e8 e4 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c820:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c824:	19 d2                	sbb    edx,edx
c000c826:	83 e2 04             	and    edx,0x4
c000c829:	81 c2 03 04 00 00    	add    edx,0x403
c000c82f:	89 14 24             	mov    DWORD PTR [esp],edx
c000c832:	6a 01                	push   0x1
c000c834:	53                   	push   ebx
c000c835:	55                   	push   ebp
c000c836:	56                   	push   esi
c000c837:	e8 8a f7 ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c83c:	83 c4 18             	add    esp,0x18
c000c83f:	53                   	push   ebx
c000c840:	56                   	push   esi
c000c841:	e8 f4 f0 ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c000c846:	5a                   	pop    edx
c000c847:	59                   	pop    ecx
c000c848:	ff 30                	push   DWORD PTR [eax]
c000c84a:	68 24 2c 02 c0       	push   0xc0022c24
c000c84f:	e8 b0 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c854:	0f 20 d8             	mov    eax,cr3
c000c857:	83 c4 0c             	add    esp,0xc
c000c85a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c860:	56                   	push   esi
c000c861:	50                   	push   eax
c000c862:	68 27 2b 02 c0       	push   0xc0022b27
c000c867:	e8 98 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c86c:	83 c4 10             	add    esp,0x10
c000c86f:	39 df                	cmp    edi,ebx
c000c871:	0f 85 6c ff ff ff    	jne    c000c7e3 <mapVASFirstTime+0x72>
c000c877:	0f 20 d8             	mov    eax,cr3
c000c87a:	0f 22 d8             	mov    cr3,eax
c000c87d:	83 c4 0c             	add    esp,0xc
c000c880:	5b                   	pop    ebx
c000c881:	5e                   	pop    esi
c000c882:	5f                   	pop    edi
c000c883:	5d                   	pop    ebp
c000c884:	c3                   	ret    
c000c885:	83 ec 0c             	sub    esp,0xc
c000c888:	68 bf 2b 02 c0       	push   0xc0022bbf
c000c88d:	e8 72 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	83 c4 0c             	add    esp,0xc
c000c898:	5b                   	pop    ebx
c000c899:	5e                   	pop    esi
c000c89a:	5f                   	pop    edi
c000c89b:	5d                   	pop    ebp
c000c89c:	c3                   	ret    

c000c89d <__cxa_atexit>:
c000c89d:	31 c0                	xor    eax,eax
c000c89f:	c3                   	ret    

c000c8a0 <__cxa_finalize>:
c000c8a0:	c3                   	ret    

c000c8a1 <__stack_chk_fail>:
c000c8a1:	55                   	push   ebp
c000c8a2:	89 e5                	mov    ebp,esp
c000c8a4:	83 ec 14             	sub    esp,0x14
c000c8a7:	68 2f 2c 02 c0       	push   0xc0022c2f
c000c8ac:	e8 53 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c8b1:	58                   	pop    eax
c000c8b2:	5a                   	pop    edx
c000c8b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c8b6:	68 7f 2c 02 c0       	push   0xc0022c7f
c000c8bb:	e8 44 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c8c0:	59                   	pop    ecx
c000c8c1:	58                   	pop    eax
c000c8c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c8c8:	68 7f 2c 02 c0       	push   0xc0022c7f
c000c8cd:	e8 32 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c8d2:	5a                   	pop    edx
c000c8d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8d6:	59                   	pop    ecx
c000c8d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8d9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c8dc:	68 7f 2c 02 c0       	push   0xc0022c7f
c000c8e1:	e8 1e 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c8e6:	5a                   	pop    edx
c000c8e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8ea:	59                   	pop    ecx
c000c8eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c8f2:	68 7f 2c 02 c0       	push   0xc0022c7f
c000c8f7:	e8 08 01 00 00       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000c8fc:	c7 04 24 87 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c87
c000c903:	e8 3b 79 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000c908:	83 c4 10             	add    esp,0x10
c000c90b:	c9                   	leave  
c000c90c:	c3                   	ret    

c000c90d <__cxa_pure_virtual>:
c000c90d:	83 ec 18             	sub    esp,0x18
c000c910:	68 9f 2c 02 c0       	push   0xc0022c9f
c000c915:	e8 29 79 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000c91a:	83 c4 1c             	add    esp,0x1c
c000c91d:	c3                   	ret    

c000c91e <operator new[](unsigned long)>:
c000c91e:	e9 80 d0 ff ff       	jmp    c00099a3 <malloc>

c000c923 <operator delete(void*, unsigned long)>:
c000c923:	e9 9b d0 ff ff       	jmp    c00099c3 <rfree>

c000c928 <operator delete[](void*)>:
c000c928:	e9 96 d0 ff ff       	jmp    c00099c3 <rfree>

c000c92d <operator delete[](void*, unsigned long)>:
c000c92d:	e9 91 d0 ff ff       	jmp    c00099c3 <rfree>

c000c932 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c932:	55                   	push   ebp
c000c933:	b9 11 00 00 00       	mov    ecx,0x11
c000c938:	57                   	push   edi
c000c939:	56                   	push   esi
c000c93a:	be 92 26 02 c0       	mov    esi,0xc0022692
c000c93f:	53                   	push   ebx
c000c940:	83 ec 20             	sub    esp,0x20
c000c943:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c947:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c94b:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c94f:	fc                   	cld    
c000c950:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c952:	89 ee                	mov    esi,ebp
c000c954:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c958:	eb 02                	jmp    c000c95c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c95a:	89 c6                	mov    esi,eax
c000c95c:	31 d2                	xor    edx,edx
c000c95e:	41                   	inc    ecx
c000c95f:	89 f0                	mov    eax,esi
c000c961:	f7 f3                	div    ebx
c000c963:	39 de                	cmp    esi,ebx
c000c965:	73 f3                	jae    c000c95a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c967:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c96a:	eb 02                	jmp    c000c96e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c96c:	89 c5                	mov    ebp,eax
c000c96e:	31 d2                	xor    edx,edx
c000c970:	49                   	dec    ecx
c000c971:	89 e8                	mov    eax,ebp
c000c973:	f7 f3                	div    ebx
c000c975:	39 dd                	cmp    ebp,ebx
c000c977:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c97b:	88 11                	mov    BYTE PTR [ecx],dl
c000c97d:	73 ed                	jae    c000c96c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c97f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c983:	83 c4 20             	add    esp,0x20
c000c986:	5b                   	pop    ebx
c000c987:	5e                   	pop    esi
c000c988:	5f                   	pop    edi
c000c989:	5d                   	pop    ebp
c000c98a:	c3                   	ret    

c000c98b <Dbg::logc(char)>:
c000c98b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c98f:	f6 05 80 60 02 c0 10 	test   BYTE PTR ds:0xc0026080,0x10
c000c996:	75 12                	jne    c000c9aa <Dbg::logc(char)+0x1f>
c000c998:	ba fd 03 00 00       	mov    edx,0x3fd
c000c99d:	ec                   	in     al,dx
c000c99e:	a8 20                	test   al,0x20
c000c9a0:	74 fb                	je     c000c99d <Dbg::logc(char)+0x12>
c000c9a2:	ba f8 03 00 00       	mov    edx,0x3f8
c000c9a7:	88 c8                	mov    al,cl
c000c9a9:	ee                   	out    dx,al
c000c9aa:	c3                   	ret    

c000c9ab <Dbg::logs(char*)>:
c000c9ab:	53                   	push   ebx
c000c9ac:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c9b0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c9b3:	84 c0                	test   al,al
c000c9b5:	74 0f                	je     c000c9c6 <Dbg::logs(char*)+0x1b>
c000c9b7:	50                   	push   eax
c000c9b8:	43                   	inc    ebx
c000c9b9:	e8 cd ff ff ff       	call   c000c98b <Dbg::logc(char)>
c000c9be:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c9c1:	5a                   	pop    edx
c000c9c2:	84 c0                	test   al,al
c000c9c4:	75 f1                	jne    c000c9b7 <Dbg::logs(char*)+0xc>
c000c9c6:	5b                   	pop    ebx
c000c9c7:	c3                   	ret    

c000c9c8 <Dbg::logWriteInt(unsigned int)>:
c000c9c8:	83 ec 10             	sub    esp,0x10
c000c9cb:	6a 0a                	push   0xa
c000c9cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c9d1:	50                   	push   eax
c000c9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d6:	e8 57 ff ff ff       	call   c000c932 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c9db:	50                   	push   eax
c000c9dc:	e8 ca ff ff ff       	call   c000c9ab <Dbg::logs(char*)>
c000c9e1:	83 c4 20             	add    esp,0x20
c000c9e4:	c3                   	ret    

c000c9e5 <Dbg::logWriteIntBase(unsigned int, int)>:
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c9ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c9f0:	50                   	push   eax
c000c9f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f5:	e8 38 ff ff ff       	call   c000c932 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c9fa:	50                   	push   eax
c000c9fb:	e8 ab ff ff ff       	call   c000c9ab <Dbg::logs(char*)>
c000ca00:	83 c4 20             	add    esp,0x20
c000ca03:	c3                   	ret    

c000ca04 <Dbg::kprintf(char const*, ...)>:
c000ca04:	55                   	push   ebp
c000ca05:	57                   	push   edi
c000ca06:	56                   	push   esi
c000ca07:	53                   	push   ebx
c000ca08:	83 ec 0c             	sub    esp,0xc
c000ca0b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca0f:	f6 05 80 60 02 c0 10 	test   BYTE PTR ds:0xc0026080,0x10
c000ca16:	74 08                	je     c000ca20 <Dbg::kprintf(char const*, ...)+0x1c>
c000ca18:	83 c4 0c             	add    esp,0xc
c000ca1b:	5b                   	pop    ebx
c000ca1c:	5e                   	pop    esi
c000ca1d:	5f                   	pop    edi
c000ca1e:	5d                   	pop    ebp
c000ca1f:	c3                   	ret    
c000ca20:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca24:	31 db                	xor    ebx,ebx
c000ca26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca2a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca2d:	84 c0                	test   al,al
c000ca2f:	74 e7                	je     c000ca18 <Dbg::kprintf(char const*, ...)+0x14>
c000ca31:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca34:	3c 25                	cmp    al,0x25
c000ca36:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ca39:	75 44                	jne    c000ca7f <Dbg::kprintf(char const*, ...)+0x7b>
c000ca3b:	83 c3 02             	add    ebx,0x2
c000ca3e:	8a 07                	mov    al,BYTE PTR [edi]
c000ca40:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ca43:	83 e8 25             	sub    eax,0x25
c000ca46:	3c 53                	cmp    al,0x53
c000ca48:	0f 87 c9 00 00 00    	ja     c000cb17 <Dbg::kprintf(char const*, ...)+0x113>
c000ca4e:	0f b6 c0             	movzx  eax,al
c000ca51:	ff 24 85 b4 2c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd34c]
c000ca58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca5c:	89 c8                	mov    eax,ecx
c000ca5e:	83 c1 04             	add    ecx,0x4
c000ca61:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ca65:	ff 30                	push   DWORD PTR [eax]
c000ca67:	e8 5c ff ff ff       	call   c000c9c8 <Dbg::logWriteInt(unsigned int)>
c000ca6c:	5f                   	pop    edi
c000ca6d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ca71:	84 c0                	test   al,al
c000ca73:	74 a3                	je     c000ca18 <Dbg::kprintf(char const*, ...)+0x14>
c000ca75:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca78:	3c 25                	cmp    al,0x25
c000ca7a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ca7d:	74 bc                	je     c000ca3b <Dbg::kprintf(char const*, ...)+0x37>
c000ca7f:	50                   	push   eax
c000ca80:	89 eb                	mov    ebx,ebp
c000ca82:	e8 04 ff ff ff       	call   c000c98b <Dbg::logc(char)>
c000ca87:	89 fd                	mov    ebp,edi
c000ca89:	58                   	pop    eax
c000ca8a:	eb e1                	jmp    c000ca6d <Dbg::kprintf(char const*, ...)+0x69>
c000ca8c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca90:	89 c8                	mov    eax,ecx
c000ca92:	83 c1 04             	add    ecx,0x4
c000ca95:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ca99:	ff 30                	push   DWORD PTR [eax]
c000ca9b:	e8 0b ff ff ff       	call   c000c9ab <Dbg::logs(char*)>
c000caa0:	58                   	pop    eax
c000caa1:	eb ca                	jmp    c000ca6d <Dbg::kprintf(char const*, ...)+0x69>
c000caa3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000caa7:	89 d0                	mov    eax,edx
c000caa9:	83 c2 04             	add    edx,0x4
c000caac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cab0:	ff 30                	push   DWORD PTR [eax]
c000cab2:	e8 11 ff ff ff       	call   c000c9c8 <Dbg::logWriteInt(unsigned int)>
c000cab7:	58                   	pop    eax
c000cab8:	eb b3                	jmp    c000ca6d <Dbg::kprintf(char const*, ...)+0x69>
c000caba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cabe:	89 d0                	mov    eax,edx
c000cac0:	83 c2 04             	add    edx,0x4
c000cac3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cac6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000caca:	50                   	push   eax
c000cacb:	e8 bb fe ff ff       	call   c000c98b <Dbg::logc(char)>
c000cad0:	58                   	pop    eax
c000cad1:	eb 9a                	jmp    c000ca6d <Dbg::kprintf(char const*, ...)+0x69>
c000cad3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cad7:	89 c8                	mov    eax,ecx
c000cad9:	83 c1 04             	add    ecx,0x4
c000cadc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cae0:	6a 10                	push   0x10
c000cae2:	ff 30                	push   DWORD PTR [eax]
c000cae4:	e8 fc fe ff ff       	call   c000c9e5 <Dbg::logWriteIntBase(unsigned int, int)>
c000cae9:	59                   	pop    ecx
c000caea:	5f                   	pop    edi
c000caeb:	eb 80                	jmp    c000ca6d <Dbg::kprintf(char const*, ...)+0x69>
c000caed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000caf1:	89 d0                	mov    eax,edx
c000caf3:	83 c2 08             	add    edx,0x8
c000caf6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cafa:	6a 10                	push   0x10
c000cafc:	ff 30                	push   DWORD PTR [eax]
c000cafe:	e8 e2 fe ff ff       	call   c000c9e5 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb03:	58                   	pop    eax
c000cb04:	5a                   	pop    edx
c000cb05:	e9 63 ff ff ff       	jmp    c000ca6d <Dbg::kprintf(char const*, ...)+0x69>
c000cb0a:	6a 25                	push   0x25
c000cb0c:	e8 7a fe ff ff       	call   c000c98b <Dbg::logc(char)>
c000cb11:	58                   	pop    eax
c000cb12:	e9 56 ff ff ff       	jmp    c000ca6d <Dbg::kprintf(char const*, ...)+0x69>
c000cb17:	6a 25                	push   0x25
c000cb19:	e8 6d fe ff ff       	call   c000c98b <Dbg::logc(char)>
c000cb1e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb21:	50                   	push   eax
c000cb22:	e8 64 fe ff ff       	call   c000c98b <Dbg::logc(char)>
c000cb27:	5a                   	pop    edx
c000cb28:	59                   	pop    ecx
c000cb29:	e9 3f ff ff ff       	jmp    c000ca6d <Dbg::kprintf(char const*, ...)+0x69>

c000cb2e <File::read(unsigned long long, void*, int*)>:
c000cb2e:	53                   	push   ebx
c000cb2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb33:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb37:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cb3e:	3c 19                	cmp    al,0x19
c000cb40:	77 35                	ja     c000cb77 <File::read(unsigned long long, void*, int*)+0x49>
c000cb42:	8b 04 85 60 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd99a0]
c000cb49:	85 c0                	test   eax,eax
c000cb4b:	74 2a                	je     c000cb77 <File::read(unsigned long long, void*, int*)+0x49>
c000cb4d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cb53:	85 c0                	test   eax,eax
c000cb55:	74 20                	je     c000cb77 <File::read(unsigned long long, void*, int*)+0x49>
c000cb57:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cb5b:	74 21                	je     c000cb7e <File::read(unsigned long long, void*, int*)+0x50>
c000cb5d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cb5f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb63:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cb69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb71:	5b                   	pop    ebx
c000cb72:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cb75:	ff e0                	jmp    eax
c000cb77:	b8 0b 00 00 00       	mov    eax,0xb
c000cb7c:	eb 05                	jmp    c000cb83 <File::read(unsigned long long, void*, int*)+0x55>
c000cb7e:	b8 05 00 00 00       	mov    eax,0x5
c000cb83:	5b                   	pop    ebx
c000cb84:	c3                   	ret    
c000cb85:	90                   	nop

c000cb86 <File::write(unsigned long long, void*, int*)>:
c000cb86:	53                   	push   ebx
c000cb87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb8b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb8f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cb96:	3c 19                	cmp    al,0x19
c000cb98:	77 35                	ja     c000cbcf <File::write(unsigned long long, void*, int*)+0x49>
c000cb9a:	8b 04 85 60 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd99a0]
c000cba1:	85 c0                	test   eax,eax
c000cba3:	74 2a                	je     c000cbcf <File::write(unsigned long long, void*, int*)+0x49>
c000cba5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbab:	85 c0                	test   eax,eax
c000cbad:	74 20                	je     c000cbcf <File::write(unsigned long long, void*, int*)+0x49>
c000cbaf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbb3:	74 21                	je     c000cbd6 <File::write(unsigned long long, void*, int*)+0x50>
c000cbb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbb7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbbb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbc9:	5b                   	pop    ebx
c000cbca:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cbcd:	ff e0                	jmp    eax
c000cbcf:	b8 0b 00 00 00       	mov    eax,0xb
c000cbd4:	eb 05                	jmp    c000cbdb <File::write(unsigned long long, void*, int*)+0x55>
c000cbd6:	b8 05 00 00 00       	mov    eax,0x5
c000cbdb:	5b                   	pop    ebx
c000cbdc:	c3                   	ret    
c000cbdd:	90                   	nop

c000cbde <Directory::read(unsigned long long, void*, int*)>:
c000cbde:	53                   	push   ebx
c000cbdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbe3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbe7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbee:	3c 19                	cmp    al,0x19
c000cbf0:	77 35                	ja     c000cc27 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cbf2:	8b 04 85 60 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd99a0]
c000cbf9:	85 c0                	test   eax,eax
c000cbfb:	74 2a                	je     c000cc27 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cbfd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc03:	85 c0                	test   eax,eax
c000cc05:	74 20                	je     c000cc27 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc0b:	74 21                	je     c000cc2e <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc0d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc13:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc21:	5b                   	pop    ebx
c000cc22:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc25:	ff e0                	jmp    eax
c000cc27:	b8 0b 00 00 00       	mov    eax,0xb
c000cc2c:	eb 05                	jmp    c000cc33 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc2e:	b8 05 00 00 00       	mov    eax,0x5
c000cc33:	5b                   	pop    ebx
c000cc34:	c3                   	ret    
c000cc35:	90                   	nop

c000cc36 <Directory::write(unsigned long long, void*, int*)>:
c000cc36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc3a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cc41:	b8 0b 00 00 00       	mov    eax,0xb
c000cc46:	80 fa 19             	cmp    dl,0x19
c000cc49:	77 18                	ja     c000cc63 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cc4b:	8b 14 95 60 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99a0]
c000cc52:	85 d2                	test   edx,edx
c000cc54:	74 0d                	je     c000cc63 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cc56:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cc5d:	19 c0                	sbb    eax,eax
c000cc5f:	83 e0 0a             	and    eax,0xa
c000cc62:	40                   	inc    eax
c000cc63:	c3                   	ret    

c000cc64 <File::isAtty()>:
c000cc64:	31 c0                	xor    eax,eax
c000cc66:	c3                   	ret    
c000cc67:	90                   	nop

c000cc68 <Directory::isAtty()>:
c000cc68:	31 c0                	xor    eax,eax
c000cc6a:	c3                   	ret    
c000cc6b:	90                   	nop

c000cc6c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cc6c:	b8 0a 00 00 00       	mov    eax,0xa
c000cc71:	c3                   	ret    

c000cc72 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cc72:	b8 0a 00 00 00       	mov    eax,0xa
c000cc77:	c3                   	ret    

c000cc78 <Filesystem::allocateSwapfile(char const*, int)>:
c000cc78:	31 c0                	xor    eax,eax
c000cc7a:	31 d2                	xor    edx,edx
c000cc7c:	c3                   	ret    
c000cc7d:	90                   	nop

c000cc7e <File::~File()>:
c000cc7e:	83 ec 0c             	sub    esp,0xc
c000cc81:	ba 74 2e 02 c0       	mov    edx,0xc0022e74
c000cc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc8a:	89 10                	mov    DWORD PTR [eax],edx
c000cc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc90:	83 ec 0c             	sub    esp,0xc
c000cc93:	50                   	push   eax
c000cc94:	e8 2f e7 ff ff       	call   c000b3c8 <UnixFile::~UnixFile()>
c000cc99:	83 c4 10             	add    esp,0x10
c000cc9c:	90                   	nop
c000cc9d:	83 c4 0c             	add    esp,0xc
c000cca0:	c3                   	ret    
c000cca1:	90                   	nop

c000cca2 <File::~File()>:
c000cca2:	83 ec 0c             	sub    esp,0xc
c000cca5:	83 ec 0c             	sub    esp,0xc
c000cca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccac:	e8 cd ff ff ff       	call   c000cc7e <File::~File()>
c000ccb1:	83 c4 10             	add    esp,0x10
c000ccb4:	83 ec 08             	sub    esp,0x8
c000ccb7:	68 14 01 00 00       	push   0x114
c000ccbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc0:	e8 5e fc ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000ccc5:	83 c4 10             	add    esp,0x10
c000ccc8:	83 c4 0c             	add    esp,0xc
c000cccb:	c3                   	ret    

c000cccc <Directory::~Directory()>:
c000cccc:	83 ec 0c             	sub    esp,0xc
c000cccf:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c000ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd8:	89 10                	mov    DWORD PTR [eax],edx
c000ccda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccde:	83 ec 0c             	sub    esp,0xc
c000cce1:	50                   	push   eax
c000cce2:	e8 e1 e6 ff ff       	call   c000b3c8 <UnixFile::~UnixFile()>
c000cce7:	83 c4 10             	add    esp,0x10
c000ccea:	90                   	nop
c000cceb:	83 c4 0c             	add    esp,0xc
c000ccee:	c3                   	ret    
c000ccef:	90                   	nop

c000ccf0 <Directory::~Directory()>:
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	83 ec 0c             	sub    esp,0xc
c000ccf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfa:	e8 cd ff ff ff       	call   c000cccc <Directory::~Directory()>
c000ccff:	83 c4 10             	add    esp,0x10
c000cd02:	83 ec 08             	sub    esp,0x8
c000cd05:	68 14 01 00 00       	push   0x114
c000cd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd0e:	e8 10 fc ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	83 c4 0c             	add    esp,0xc
c000cd19:	c3                   	ret    

c000cd1a <Filesystem::Filesystem()>:
c000cd1a:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c000cd1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd23:	89 10                	mov    DWORD PTR [eax],edx
c000cd25:	8b 15 d4 61 02 c0    	mov    edx,DWORD PTR ds:0xc00261d4
c000cd2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cd32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd36:	a3 d4 61 02 c0       	mov    ds:0xc00261d4,eax
c000cd3b:	90                   	nop
c000cd3c:	c3                   	ret    
c000cd3d:	90                   	nop

c000cd3e <Filesystem::~Filesystem()>:
c000cd3e:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c000cd43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd47:	89 10                	mov    DWORD PTR [eax],edx
c000cd49:	90                   	nop
c000cd4a:	c3                   	ret    
c000cd4b:	90                   	nop

c000cd4c <Filesystem::~Filesystem()>:
c000cd4c:	83 ec 0c             	sub    esp,0xc
c000cd4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd53:	e8 e6 ff ff ff       	call   c000cd3e <Filesystem::~Filesystem()>
c000cd58:	83 c4 04             	add    esp,0x4
c000cd5b:	83 ec 08             	sub    esp,0x8
c000cd5e:	6a 08                	push   0x8
c000cd60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd64:	e8 ba fb ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000cd69:	83 c4 10             	add    esp,0x10
c000cd6c:	83 c4 0c             	add    esp,0xc
c000cd6f:	c3                   	ret    

c000cd70 <Fs::getcwd(Process*, char*, int)>:
c000cd70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd74:	31 c0                	xor    eax,eax
c000cd76:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cd79:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cd7d:	7d 15                	jge    c000cd94 <Fs::getcwd(Process*, char*, int)+0x24>
c000cd7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd83:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cd8a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cd8d:	84 c9                	test   cl,cl
c000cd8f:	74 06                	je     c000cd97 <Fs::getcwd(Process*, char*, int)+0x27>
c000cd91:	40                   	inc    eax
c000cd92:	eb e2                	jmp    c000cd76 <Fs::getcwd(Process*, char*, int)+0x6>
c000cd94:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cd97:	31 c0                	xor    eax,eax
c000cd99:	c3                   	ret    

c000cd9a <Fs::initVFS()>:
c000cd9a:	83 ec 18             	sub    esp,0x18
c000cd9d:	6a 08                	push   0x8
c000cd9f:	e8 ff cb ff ff       	call   c00099a3 <malloc>
c000cda4:	89 04 24             	mov    DWORD PTR [esp],eax
c000cda7:	e8 40 e1 00 00       	call   c001aeec <FAT::FAT()>
c000cdac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cdb3:	e8 eb cb ff ff       	call   c00099a3 <malloc>
c000cdb8:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdbb:	e8 4c f3 00 00       	call   c001c10c <ISO9660::ISO9660()>
c000cdc0:	83 c4 1c             	add    esp,0x1c
c000cdc3:	c3                   	ret    

c000cdc4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000cdc4:	55                   	push   ebp
c000cdc5:	57                   	push   edi
c000cdc6:	56                   	push   esi
c000cdc7:	53                   	push   ebx
c000cdc8:	81 ec 10 04 00 00    	sub    esp,0x410
c000cdce:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000cdd5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000cddc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000cde3:	68 00 04 00 00       	push   0x400
c000cde8:	6a 00                	push   0x0
c000cdea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000cdee:	56                   	push   esi
c000cdef:	e8 90 38 ff ff       	call   c0000684 <memset>
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000cdfb:	75 0b                	jne    c000ce08 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000cdfd:	50                   	push   eax
c000cdfe:	50                   	push   eax
c000cdff:	57                   	push   edi
c000ce00:	56                   	push   esi
c000ce01:	e8 3a 39 ff ff       	call   c0000740 <strcpy>
c000ce06:	eb 41                	jmp    c000ce49 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce08:	8a 07                	mov    al,BYTE PTR [edi]
c000ce0a:	3c 5c                	cmp    al,0x5c
c000ce0c:	74 04                	je     c000ce12 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce0e:	3c 2f                	cmp    al,0x2f
c000ce10:	75 18                	jne    c000ce2a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce12:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce15:	3c 60                	cmp    al,0x60
c000ce17:	7e 03                	jle    c000ce1c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce19:	83 e8 20             	sub    eax,0x20
c000ce1c:	88 04 24             	mov    BYTE PTR [esp],al
c000ce1f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce26:	50                   	push   eax
c000ce27:	50                   	push   eax
c000ce28:	eb 18                	jmp    c000ce42 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce2a:	50                   	push   eax
c000ce2b:	50                   	push   eax
c000ce2c:	55                   	push   ebp
c000ce2d:	56                   	push   esi
c000ce2e:	e8 0d 39 ff ff       	call   c0000740 <strcpy>
c000ce33:	5a                   	pop    edx
c000ce34:	59                   	pop    ecx
c000ce35:	68 9a 44 02 c0       	push   0xc002449a
c000ce3a:	56                   	push   esi
c000ce3b:	e8 40 3a ff ff       	call   c0000880 <strcat>
c000ce40:	5d                   	pop    ebp
c000ce41:	58                   	pop    eax
c000ce42:	57                   	push   edi
c000ce43:	56                   	push   esi
c000ce44:	e8 37 3a ff ff       	call   c0000880 <strcat>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ce4f:	3c 60                	cmp    al,0x60
c000ce51:	7e 03                	jle    c000ce56 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000ce53:	83 e8 20             	sub    eax,0x20
c000ce56:	88 04 24             	mov    BYTE PTR [esp],al
c000ce59:	88 03                	mov    BYTE PTR [ebx],al
c000ce5b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce62:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ce68:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ce6c:	bf 03 00 00 00       	mov    edi,0x3
c000ce71:	b8 03 00 00 00       	mov    eax,0x3
c000ce76:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000ce79:	84 d2                	test   dl,dl
c000ce7b:	0f 84 91 00 00 00    	je     c000cf12 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000ce81:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ce84:	80 fa 5c             	cmp    dl,0x5c
c000ce87:	74 05                	je     c000ce8e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000ce89:	80 fa 2f             	cmp    dl,0x2f
c000ce8c:	75 12                	jne    c000cea0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ce8e:	89 c5                	mov    ebp,eax
c000ce90:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ce95:	74 09                	je     c000cea0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ce97:	40                   	inc    eax
c000ce98:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ce9c:	89 cf                	mov    edi,ecx
c000ce9e:	eb d6                	jmp    c000ce76 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cea0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cea5:	75 5b                	jne    c000cf02 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cea7:	80 fa 2e             	cmp    dl,0x2e
c000ceaa:	75 56                	jne    c000cf02 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ceac:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ceb0:	74 19                	je     c000cecb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ceb2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ceb7:	74 53                	je     c000cf0c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ceb9:	89 f9                	mov    ecx,edi
c000cebb:	41                   	inc    ecx
c000cebc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cebf:	80 fa 2f             	cmp    dl,0x2f
c000cec2:	74 f7                	je     c000cebb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cec4:	80 fa 5c             	cmp    dl,0x5c
c000cec7:	74 f2                	je     c000cebb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cec9:	eb d1                	jmp    c000ce9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cecb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ced0:	74 3a                	je     c000cf0c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ced2:	83 f8 03             	cmp    eax,0x3
c000ced5:	74 c5                	je     c000ce9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ced7:	41                   	inc    ecx
c000ced8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cedb:	80 fa 2f             	cmp    dl,0x2f
c000cede:	74 f7                	je     c000ced7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cee0:	80 fa 5c             	cmp    dl,0x5c
c000cee3:	74 f2                	je     c000ced7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cee5:	48                   	dec    eax
c000cee6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ceea:	75 06                	jne    c000cef2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ceec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cef0:	eb f3                	jmp    c000cee5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cef2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cef6:	74 07                	je     c000ceff <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cef8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cefc:	48                   	dec    eax
c000cefd:	eb f3                	jmp    c000cef2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ceff:	40                   	inc    eax
c000cf00:	eb 9a                	jmp    c000ce9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf02:	80 fa 2f             	cmp    dl,0x2f
c000cf05:	74 95                	je     c000ce9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf07:	80 fa 5c             	cmp    dl,0x5c
c000cf0a:	74 90                	je     c000ce9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf0c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf0f:	40                   	inc    eax
c000cf10:	eb 8a                	jmp    c000ce9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf12:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf16:	83 ec 0c             	sub    esp,0xc
c000cf19:	53                   	push   ebx
c000cf1a:	e8 81 37 ff ff       	call   c00006a0 <strlen>
c000cf1f:	83 c4 10             	add    esp,0x10
c000cf22:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf27:	75 26                	jne    c000cf4f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf29:	83 ec 0c             	sub    esp,0xc
c000cf2c:	53                   	push   ebx
c000cf2d:	e8 6e 37 ff ff       	call   c00006a0 <strlen>
c000cf32:	83 c4 10             	add    esp,0x10
c000cf35:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cf3a:	74 26                	je     c000cf62 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cf3c:	83 ec 0c             	sub    esp,0xc
c000cf3f:	53                   	push   ebx
c000cf40:	e8 5b 37 ff ff       	call   c00006a0 <strlen>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cf4d:	eb c7                	jmp    c000cf16 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cf4f:	83 ec 0c             	sub    esp,0xc
c000cf52:	53                   	push   ebx
c000cf53:	e8 48 37 ff ff       	call   c00006a0 <strlen>
c000cf58:	83 c4 10             	add    esp,0x10
c000cf5b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf60:	74 c7                	je     c000cf29 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cf62:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cf68:	5b                   	pop    ebx
c000cf69:	5e                   	pop    esi
c000cf6a:	5f                   	pop    edi
c000cf6b:	5d                   	pop    ebp
c000cf6c:	c3                   	ret    
c000cf6d:	90                   	nop

c000cf6e <File::File(char const*, Process*)>:
c000cf6e:	83 ec 0c             	sub    esp,0xc
c000cf71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf75:	83 ec 08             	sub    esp,0x8
c000cf78:	6a 00                	push   0x0
c000cf7a:	50                   	push   eax
c000cf7b:	e8 66 e2 ff ff       	call   c000b1e6 <UnixFile::UnixFile(int)>
c000cf80:	83 c4 10             	add    esp,0x10
c000cf83:	ba 74 2e 02 c0       	mov    edx,0xc0022e74
c000cf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8c:	89 10                	mov    DWORD PTR [eax],edx
c000cf8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf92:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cf98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf9c:	83 c0 0d             	add    eax,0xd
c000cf9f:	83 ec 04             	sub    esp,0x4
c000cfa2:	52                   	push   edx
c000cfa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa7:	50                   	push   eax
c000cfa8:	e8 17 fe ff ff       	call   c000cdc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000cfad:	83 c4 10             	add    esp,0x10
c000cfb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfb4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000cfb7:	8d 50 bf             	lea    edx,[eax-0x41]
c000cfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfbe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000cfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000cfcc:	90                   	nop
c000cfcd:	83 c4 0c             	add    esp,0xc
c000cfd0:	c3                   	ret    
c000cfd1:	90                   	nop

c000cfd2 <File::open(FileOpenMode)>:
c000cfd2:	53                   	push   ebx
c000cfd3:	b8 0b 00 00 00       	mov    eax,0xb
c000cfd8:	83 ec 08             	sub    esp,0x8
c000cfdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cfdf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000cfe6:	80 fa 19             	cmp    dl,0x19
c000cfe9:	77 40                	ja     c000d02b <File::open(FileOpenMode)+0x59>
c000cfeb:	8b 14 95 60 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99a0]
c000cff2:	85 d2                	test   edx,edx
c000cff4:	74 35                	je     c000d02b <File::open(FileOpenMode)+0x59>
c000cff6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cffc:	85 d2                	test   edx,edx
c000cffe:	74 2b                	je     c000d02b <File::open(FileOpenMode)+0x59>
c000d000:	b8 06 00 00 00       	mov    eax,0x6
c000d005:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d009:	75 20                	jne    c000d02b <File::open(FileOpenMode)+0x59>
c000d00b:	8b 02                	mov    eax,DWORD PTR [edx]
c000d00d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d013:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d017:	51                   	push   ecx
c000d018:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d01b:	51                   	push   ecx
c000d01c:	52                   	push   edx
c000d01d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d020:	83 c4 10             	add    esp,0x10
c000d023:	85 c0                	test   eax,eax
c000d025:	75 04                	jne    c000d02b <File::open(FileOpenMode)+0x59>
c000d027:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d02b:	83 c4 08             	add    esp,0x8
c000d02e:	5b                   	pop    ebx
c000d02f:	c3                   	ret    

c000d030 <File::close()>:
c000d030:	53                   	push   ebx
c000d031:	b8 0b 00 00 00       	mov    eax,0xb
c000d036:	83 ec 08             	sub    esp,0x8
c000d039:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d03d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d044:	80 fa 19             	cmp    dl,0x19
c000d047:	77 41                	ja     c000d08a <File::close()+0x5a>
c000d049:	8b 1c 95 60 66 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd99a0]
c000d050:	85 db                	test   ebx,ebx
c000d052:	74 36                	je     c000d08a <File::close()+0x5a>
c000d054:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d05b:	74 2d                	je     c000d08a <File::close()+0x5a>
c000d05d:	b8 05 00 00 00       	mov    eax,0x5
c000d062:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d066:	74 22                	je     c000d08a <File::close()+0x5a>
c000d068:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d06c:	8b 04 95 60 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd99a0]
c000d073:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d079:	53                   	push   ebx
c000d07a:	53                   	push   ebx
c000d07b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d07d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d083:	50                   	push   eax
c000d084:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	83 c4 08             	add    esp,0x8
c000d08d:	5b                   	pop    ebx
c000d08e:	c3                   	ret    
c000d08f:	90                   	nop

c000d090 <File::seek(unsigned long long)>:
c000d090:	56                   	push   esi
c000d091:	53                   	push   ebx
c000d092:	b8 0b 00 00 00       	mov    eax,0xb
c000d097:	51                   	push   ecx
c000d098:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d09c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d0a0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d0a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d0ab:	80 fa 19             	cmp    dl,0x19
c000d0ae:	77 31                	ja     c000d0e1 <File::seek(unsigned long long)+0x51>
c000d0b0:	8b 14 95 60 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99a0]
c000d0b7:	85 d2                	test   edx,edx
c000d0b9:	74 26                	je     c000d0e1 <File::seek(unsigned long long)+0x51>
c000d0bb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d0c1:	85 d2                	test   edx,edx
c000d0c3:	74 1c                	je     c000d0e1 <File::seek(unsigned long long)+0x51>
c000d0c5:	b8 05 00 00 00       	mov    eax,0x5
c000d0ca:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d0ce:	74 11                	je     c000d0e1 <File::seek(unsigned long long)+0x51>
c000d0d0:	8b 02                	mov    eax,DWORD PTR [edx]
c000d0d2:	53                   	push   ebx
c000d0d3:	51                   	push   ecx
c000d0d4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d0da:	52                   	push   edx
c000d0db:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	5a                   	pop    edx
c000d0e2:	5b                   	pop    ebx
c000d0e3:	5e                   	pop    esi
c000d0e4:	c3                   	ret    
c000d0e5:	90                   	nop

c000d0e6 <File::tell(unsigned long long*)>:
c000d0e6:	83 ec 0c             	sub    esp,0xc
c000d0e9:	b8 0b 00 00 00       	mov    eax,0xb
c000d0ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0f2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0f9:	80 fa 19             	cmp    dl,0x19
c000d0fc:	77 34                	ja     c000d132 <File::tell(unsigned long long*)+0x4c>
c000d0fe:	8b 14 95 60 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99a0]
c000d105:	85 d2                	test   edx,edx
c000d107:	74 29                	je     c000d132 <File::tell(unsigned long long*)+0x4c>
c000d109:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d10f:	85 d2                	test   edx,edx
c000d111:	74 1f                	je     c000d132 <File::tell(unsigned long long*)+0x4c>
c000d113:	b8 05 00 00 00       	mov    eax,0x5
c000d118:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d11c:	74 14                	je     c000d132 <File::tell(unsigned long long*)+0x4c>
c000d11e:	50                   	push   eax
c000d11f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d121:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d125:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d12b:	52                   	push   edx
c000d12c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d12f:	83 c4 10             	add    esp,0x10
c000d132:	83 c4 0c             	add    esp,0xc
c000d135:	c3                   	ret    

c000d136 <File::rewind()>:
c000d136:	83 ec 10             	sub    esp,0x10
c000d139:	6a 00                	push   0x0
c000d13b:	6a 00                	push   0x0
c000d13d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d141:	e8 4a ff ff ff       	call   c000d090 <File::seek(unsigned long long)>
c000d146:	83 c4 1c             	add    esp,0x1c
c000d149:	c3                   	ret    

c000d14a <File::unlink()>:
c000d14a:	83 ec 0c             	sub    esp,0xc
c000d14d:	b8 0b 00 00 00       	mov    eax,0xb
c000d152:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d156:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d15d:	80 f9 19             	cmp    cl,0x19
c000d160:	77 2f                	ja     c000d191 <File::unlink()+0x47>
c000d162:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d169:	85 c9                	test   ecx,ecx
c000d16b:	74 24                	je     c000d191 <File::unlink()+0x47>
c000d16d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d173:	85 c9                	test   ecx,ecx
c000d175:	74 1a                	je     c000d191 <File::unlink()+0x47>
c000d177:	b8 06 00 00 00       	mov    eax,0x6
c000d17c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d180:	75 0f                	jne    c000d191 <File::unlink()+0x47>
c000d182:	83 c2 0d             	add    edx,0xd
c000d185:	50                   	push   eax
c000d186:	50                   	push   eax
c000d187:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d189:	52                   	push   edx
c000d18a:	51                   	push   ecx
c000d18b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d18e:	83 c4 10             	add    esp,0x10
c000d191:	83 c4 0c             	add    esp,0xc
c000d194:	c3                   	ret    
c000d195:	90                   	nop

c000d196 <File::rename(char const*)>:
c000d196:	83 ec 0c             	sub    esp,0xc
c000d199:	b8 0b 00 00 00       	mov    eax,0xb
c000d19e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1a9:	80 f9 19             	cmp    cl,0x19
c000d1ac:	77 32                	ja     c000d1e0 <File::rename(char const*)+0x4a>
c000d1ae:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d1b5:	85 c9                	test   ecx,ecx
c000d1b7:	74 27                	je     c000d1e0 <File::rename(char const*)+0x4a>
c000d1b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1bf:	85 c9                	test   ecx,ecx
c000d1c1:	74 1d                	je     c000d1e0 <File::rename(char const*)+0x4a>
c000d1c3:	b8 06 00 00 00       	mov    eax,0x6
c000d1c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1cc:	75 12                	jne    c000d1e0 <File::rename(char const*)+0x4a>
c000d1ce:	83 c2 0d             	add    edx,0xd
c000d1d1:	50                   	push   eax
c000d1d2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1d8:	52                   	push   edx
c000d1d9:	51                   	push   ecx
c000d1da:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d1dd:	83 c4 10             	add    esp,0x10
c000d1e0:	83 c4 0c             	add    esp,0xc
c000d1e3:	c3                   	ret    

c000d1e4 <File::chfatattr(unsigned char, unsigned char)>:
c000d1e4:	57                   	push   edi
c000d1e5:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ea:	56                   	push   esi
c000d1eb:	53                   	push   ebx
c000d1ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d1f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d1ff:	80 f9 19             	cmp    cl,0x19
c000d202:	77 37                	ja     c000d23b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d204:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d20b:	85 c9                	test   ecx,ecx
c000d20d:	74 2c                	je     c000d23b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d20f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d215:	85 c9                	test   ecx,ecx
c000d217:	74 22                	je     c000d23b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d219:	b8 06 00 00 00       	mov    eax,0x6
c000d21e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d222:	75 17                	jne    c000d23b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d224:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d226:	89 f0                	mov    eax,esi
c000d228:	83 c2 0d             	add    edx,0xd
c000d22b:	0f b6 f0             	movzx  esi,al
c000d22e:	0f b6 db             	movzx  ebx,bl
c000d231:	56                   	push   esi
c000d232:	53                   	push   ebx
c000d233:	52                   	push   edx
c000d234:	51                   	push   ecx
c000d235:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	5b                   	pop    ebx
c000d23c:	5e                   	pop    esi
c000d23d:	5f                   	pop    edi
c000d23e:	c3                   	ret    
c000d23f:	90                   	nop

c000d240 <File::exists()>:
c000d240:	83 ec 0c             	sub    esp,0xc
c000d243:	31 c0                	xor    eax,eax
c000d245:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d249:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d250:	80 f9 19             	cmp    cl,0x19
c000d253:	77 24                	ja     c000d279 <File::exists()+0x39>
c000d255:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d25c:	85 c9                	test   ecx,ecx
c000d25e:	74 19                	je     c000d279 <File::exists()+0x39>
c000d260:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d266:	85 c9                	test   ecx,ecx
c000d268:	74 0f                	je     c000d279 <File::exists()+0x39>
c000d26a:	83 c2 0d             	add    edx,0xd
c000d26d:	50                   	push   eax
c000d26e:	50                   	push   eax
c000d26f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d271:	52                   	push   edx
c000d272:	51                   	push   ecx
c000d273:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d276:	83 c4 10             	add    esp,0x10
c000d279:	83 c4 0c             	add    esp,0xc
c000d27c:	c3                   	ret    
c000d27d:	90                   	nop

c000d27e <File::stat(unsigned long long*, bool*)>:
c000d27e:	56                   	push   esi
c000d27f:	53                   	push   ebx
c000d280:	50                   	push   eax
c000d281:	b8 0b 00 00 00       	mov    eax,0xb
c000d286:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d28a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d28e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d295:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d299:	80 f9 19             	cmp    cl,0x19
c000d29c:	77 3d                	ja     c000d2db <File::stat(unsigned long long*, bool*)+0x5d>
c000d29e:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d2a5:	85 c9                	test   ecx,ecx
c000d2a7:	74 32                	je     c000d2db <File::stat(unsigned long long*, bool*)+0x5d>
c000d2a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2af:	85 c9                	test   ecx,ecx
c000d2b1:	74 28                	je     c000d2db <File::stat(unsigned long long*, bool*)+0x5d>
c000d2b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2b9:	74 13                	je     c000d2ce <File::stat(unsigned long long*, bool*)+0x50>
c000d2bb:	83 ec 04             	sub    esp,0x4
c000d2be:	56                   	push   esi
c000d2bf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d2c5:	51                   	push   ecx
c000d2c6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d2c9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d2cc:	eb 0a                	jmp    c000d2d8 <File::stat(unsigned long long*, bool*)+0x5a>
c000d2ce:	53                   	push   ebx
c000d2cf:	83 c2 0d             	add    edx,0xd
c000d2d2:	56                   	push   esi
c000d2d3:	52                   	push   edx
c000d2d4:	51                   	push   ecx
c000d2d5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d2d8:	83 c4 10             	add    esp,0x10
c000d2db:	5a                   	pop    edx
c000d2dc:	5b                   	pop    ebx
c000d2dd:	5e                   	pop    esi
c000d2de:	c3                   	ret    

c000d2df <Fs::setcwd(Process*, char*)>:
c000d2df:	55                   	push   ebp
c000d2e0:	57                   	push   edi
c000d2e1:	56                   	push   esi
c000d2e2:	53                   	push   ebx
c000d2e3:	81 ec 20 02 00 00    	sub    esp,0x220
c000d2e9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d2f0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d2f6:	57                   	push   edi
c000d2f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d2fe:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d302:	56                   	push   esi
c000d303:	e8 bc fa ff ff       	call   c000cdc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d308:	89 34 24             	mov    DWORD PTR [esp],esi
c000d30b:	e8 90 33 ff ff       	call   c00006a0 <strlen>
c000d310:	83 c4 10             	add    esp,0x10
c000d313:	83 f8 02             	cmp    eax,0x2
c000d316:	77 17                	ja     c000d32f <Fs::setcwd(Process*, char*)+0x50>
c000d318:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d31d:	83 e8 41             	sub    eax,0x41
c000d320:	83 f8 19             	cmp    eax,0x19
c000d323:	76 24                	jbe    c000d349 <Fs::setcwd(Process*, char*)+0x6a>
c000d325:	b8 03 00 00 00       	mov    eax,0x3
c000d32a:	e9 e0 00 00 00       	jmp    c000d40f <Fs::setcwd(Process*, char*)+0x130>
c000d32f:	83 ec 0c             	sub    esp,0xc
c000d332:	56                   	push   esi
c000d333:	e8 68 33 ff ff       	call   c00006a0 <strlen>
c000d338:	83 c4 10             	add    esp,0x10
c000d33b:	83 f8 03             	cmp    eax,0x3
c000d33e:	75 34                	jne    c000d374 <Fs::setcwd(Process*, char*)+0x95>
c000d340:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d345:	75 2d                	jne    c000d374 <Fs::setcwd(Process*, char*)+0x95>
c000d347:	eb cf                	jmp    c000d318 <Fs::setcwd(Process*, char*)+0x39>
c000d349:	8b 14 85 60 66 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd99a0]
c000d350:	b8 05 00 00 00       	mov    eax,0x5
c000d355:	85 d2                	test   edx,edx
c000d357:	0f 84 b2 00 00 00    	je     c000d40f <Fs::setcwd(Process*, char*)+0x130>
c000d35d:	b8 06 00 00 00       	mov    eax,0x6
c000d362:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d369:	0f 85 92 00 00 00    	jne    c000d401 <Fs::setcwd(Process*, char*)+0x122>
c000d36f:	e9 9b 00 00 00       	jmp    c000d40f <Fs::setcwd(Process*, char*)+0x130>
c000d374:	83 ec 0c             	sub    esp,0xc
c000d377:	68 14 01 00 00       	push   0x114
c000d37c:	e8 22 c6 ff ff       	call   c00099a3 <malloc>
c000d381:	83 c4 0c             	add    esp,0xc
c000d384:	89 c3                	mov    ebx,eax
c000d386:	55                   	push   ebp
c000d387:	56                   	push   esi
c000d388:	50                   	push   eax
c000d389:	e8 e0 fb ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c000d38e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d393:	83 c4 0c             	add    esp,0xc
c000d396:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d39a:	50                   	push   eax
c000d39b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d39f:	50                   	push   eax
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 d8 fe ff ff       	call   c000d27e <File::stat(unsigned long long*, bool*)>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	83 f8 02             	cmp    eax,0x2
c000d3ac:	74 04                	je     c000d3b2 <Fs::setcwd(Process*, char*)+0xd3>
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	74 1c                	je     c000d3ce <Fs::setcwd(Process*, char*)+0xef>
c000d3b2:	b8 01 00 00 00       	mov    eax,0x1
c000d3b7:	85 db                	test   ebx,ebx
c000d3b9:	74 54                	je     c000d40f <Fs::setcwd(Process*, char*)+0x130>
c000d3bb:	83 ec 0c             	sub    esp,0xc
c000d3be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3c0:	53                   	push   ebx
c000d3c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3c4:	83 c4 10             	add    esp,0x10
c000d3c7:	b8 01 00 00 00       	mov    eax,0x1
c000d3cc:	eb 41                	jmp    c000d40f <Fs::setcwd(Process*, char*)+0x130>
c000d3ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3d3:	75 1c                	jne    c000d3f1 <Fs::setcwd(Process*, char*)+0x112>
c000d3d5:	b8 02 00 00 00       	mov    eax,0x2
c000d3da:	85 db                	test   ebx,ebx
c000d3dc:	74 31                	je     c000d40f <Fs::setcwd(Process*, char*)+0x130>
c000d3de:	83 ec 0c             	sub    esp,0xc
c000d3e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3e3:	53                   	push   ebx
c000d3e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3e7:	83 c4 10             	add    esp,0x10
c000d3ea:	b8 02 00 00 00       	mov    eax,0x2
c000d3ef:	eb 1e                	jmp    c000d40f <Fs::setcwd(Process*, char*)+0x130>
c000d3f1:	85 db                	test   ebx,ebx
c000d3f3:	74 0c                	je     c000d401 <Fs::setcwd(Process*, char*)+0x122>
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3fa:	53                   	push   ebx
c000d3fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3fe:	83 c4 10             	add    esp,0x10
c000d401:	50                   	push   eax
c000d402:	50                   	push   eax
c000d403:	56                   	push   esi
c000d404:	57                   	push   edi
c000d405:	e8 36 33 ff ff       	call   c0000740 <strcpy>
c000d40a:	83 c4 10             	add    esp,0x10
c000d40d:	31 c0                	xor    eax,eax
c000d40f:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d415:	5b                   	pop    ebx
c000d416:	5e                   	pop    esi
c000d417:	5f                   	pop    edi
c000d418:	5d                   	pop    ebp
c000d419:	c3                   	ret    

c000d41a <Directory::Directory(char const*, Process*)>:
c000d41a:	83 ec 0c             	sub    esp,0xc
c000d41d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d421:	83 ec 08             	sub    esp,0x8
c000d424:	6a 00                	push   0x0
c000d426:	50                   	push   eax
c000d427:	e8 ba dd ff ff       	call   c000b1e6 <UnixFile::UnixFile(int)>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c000d434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d438:	89 10                	mov    DWORD PTR [eax],edx
c000d43a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d43e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d448:	83 c0 0d             	add    eax,0xd
c000d44b:	83 ec 04             	sub    esp,0x4
c000d44e:	52                   	push   edx
c000d44f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d453:	50                   	push   eax
c000d454:	e8 6b f9 ff ff       	call   c000cdc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d459:	83 c4 10             	add    esp,0x10
c000d45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d460:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d463:	8d 50 bf             	lea    edx,[eax-0x41]
c000d466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d46a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d474:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d478:	90                   	nop
c000d479:	83 c4 0c             	add    esp,0xc
c000d47c:	c3                   	ret    
c000d47d:	90                   	nop

c000d47e <Directory::open()>:
c000d47e:	53                   	push   ebx
c000d47f:	b8 0b 00 00 00       	mov    eax,0xb
c000d484:	83 ec 08             	sub    esp,0x8
c000d487:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d48b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d492:	80 fa 19             	cmp    dl,0x19
c000d495:	77 3d                	ja     c000d4d4 <Directory::open()+0x56>
c000d497:	8b 14 95 60 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99a0]
c000d49e:	85 d2                	test   edx,edx
c000d4a0:	74 32                	je     c000d4d4 <Directory::open()+0x56>
c000d4a2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d4a8:	85 d2                	test   edx,edx
c000d4aa:	74 28                	je     c000d4d4 <Directory::open()+0x56>
c000d4ac:	b8 06 00 00 00       	mov    eax,0x6
c000d4b1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d4b5:	75 1d                	jne    c000d4d4 <Directory::open()+0x56>
c000d4b7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d4bd:	50                   	push   eax
c000d4be:	8b 02                	mov    eax,DWORD PTR [edx]
c000d4c0:	51                   	push   ecx
c000d4c1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d4c4:	51                   	push   ecx
c000d4c5:	52                   	push   edx
c000d4c6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	85 c0                	test   eax,eax
c000d4ce:	75 04                	jne    c000d4d4 <Directory::open()+0x56>
c000d4d0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d4d4:	83 c4 08             	add    esp,0x8
c000d4d7:	5b                   	pop    ebx
c000d4d8:	c3                   	ret    
c000d4d9:	90                   	nop

c000d4da <Directory::close()>:
c000d4da:	53                   	push   ebx
c000d4db:	b8 0b 00 00 00       	mov    eax,0xb
c000d4e0:	83 ec 08             	sub    esp,0x8
c000d4e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d4e7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d4ee:	80 fa 19             	cmp    dl,0x19
c000d4f1:	77 41                	ja     c000d534 <Directory::close()+0x5a>
c000d4f3:	8b 1c 95 60 66 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd99a0]
c000d4fa:	85 db                	test   ebx,ebx
c000d4fc:	74 36                	je     c000d534 <Directory::close()+0x5a>
c000d4fe:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d505:	74 2d                	je     c000d534 <Directory::close()+0x5a>
c000d507:	b8 05 00 00 00       	mov    eax,0x5
c000d50c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d510:	74 22                	je     c000d534 <Directory::close()+0x5a>
c000d512:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d516:	8b 04 95 60 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd99a0]
c000d51d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d523:	53                   	push   ebx
c000d524:	53                   	push   ebx
c000d525:	8b 10                	mov    edx,DWORD PTR [eax]
c000d527:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d52d:	50                   	push   eax
c000d52e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d531:	83 c4 10             	add    esp,0x10
c000d534:	83 c4 08             	add    esp,0x8
c000d537:	5b                   	pop    ebx
c000d538:	c3                   	ret    
c000d539:	90                   	nop

c000d53a <Directory::unlink()>:
c000d53a:	83 ec 0c             	sub    esp,0xc
c000d53d:	b8 0b 00 00 00       	mov    eax,0xb
c000d542:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d546:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d54d:	80 f9 19             	cmp    cl,0x19
c000d550:	77 2f                	ja     c000d581 <Directory::unlink()+0x47>
c000d552:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d559:	85 c9                	test   ecx,ecx
c000d55b:	74 24                	je     c000d581 <Directory::unlink()+0x47>
c000d55d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d563:	85 c9                	test   ecx,ecx
c000d565:	74 1a                	je     c000d581 <Directory::unlink()+0x47>
c000d567:	b8 06 00 00 00       	mov    eax,0x6
c000d56c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d570:	75 0f                	jne    c000d581 <Directory::unlink()+0x47>
c000d572:	83 c2 0d             	add    edx,0xd
c000d575:	50                   	push   eax
c000d576:	50                   	push   eax
c000d577:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d579:	52                   	push   edx
c000d57a:	51                   	push   ecx
c000d57b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d57e:	83 c4 10             	add    esp,0x10
c000d581:	83 c4 0c             	add    esp,0xc
c000d584:	c3                   	ret    
c000d585:	90                   	nop

c000d586 <Directory::rename(char const*)>:
c000d586:	83 ec 0c             	sub    esp,0xc
c000d589:	b8 0b 00 00 00       	mov    eax,0xb
c000d58e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d592:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d599:	80 f9 19             	cmp    cl,0x19
c000d59c:	77 32                	ja     c000d5d0 <Directory::rename(char const*)+0x4a>
c000d59e:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d5a5:	85 c9                	test   ecx,ecx
c000d5a7:	74 27                	je     c000d5d0 <Directory::rename(char const*)+0x4a>
c000d5a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5af:	85 c9                	test   ecx,ecx
c000d5b1:	74 1d                	je     c000d5d0 <Directory::rename(char const*)+0x4a>
c000d5b3:	b8 06 00 00 00       	mov    eax,0x6
c000d5b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5bc:	75 12                	jne    c000d5d0 <Directory::rename(char const*)+0x4a>
c000d5be:	83 c2 0d             	add    edx,0xd
c000d5c1:	50                   	push   eax
c000d5c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5c8:	52                   	push   edx
c000d5c9:	51                   	push   ecx
c000d5ca:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d5cd:	83 c4 10             	add    esp,0x10
c000d5d0:	83 c4 0c             	add    esp,0xc
c000d5d3:	c3                   	ret    

c000d5d4 <Directory::exists()>:
c000d5d4:	83 ec 0c             	sub    esp,0xc
c000d5d7:	31 c0                	xor    eax,eax
c000d5d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5dd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5e4:	80 f9 19             	cmp    cl,0x19
c000d5e7:	77 24                	ja     c000d60d <Directory::exists()+0x39>
c000d5e9:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d5f0:	85 c9                	test   ecx,ecx
c000d5f2:	74 19                	je     c000d60d <Directory::exists()+0x39>
c000d5f4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5fa:	85 c9                	test   ecx,ecx
c000d5fc:	74 0f                	je     c000d60d <Directory::exists()+0x39>
c000d5fe:	83 c2 0d             	add    edx,0xd
c000d601:	50                   	push   eax
c000d602:	50                   	push   eax
c000d603:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d605:	52                   	push   edx
c000d606:	51                   	push   ecx
c000d607:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d60a:	83 c4 10             	add    esp,0x10
c000d60d:	83 c4 0c             	add    esp,0xc
c000d610:	c3                   	ret    
c000d611:	90                   	nop

c000d612 <Directory::read(dirent*)>:
c000d612:	83 ec 1c             	sub    esp,0x1c
c000d615:	b8 0b 00 00 00       	mov    eax,0xb
c000d61a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d61e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d625:	80 fa 19             	cmp    dl,0x19
c000d628:	77 30                	ja     c000d65a <Directory::read(dirent*)+0x48>
c000d62a:	8b 14 95 60 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99a0]
c000d631:	85 d2                	test   edx,edx
c000d633:	74 25                	je     c000d65a <Directory::read(dirent*)+0x48>
c000d635:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d63c:	74 1c                	je     c000d65a <Directory::read(dirent*)+0x48>
c000d63e:	83 ec 0c             	sub    esp,0xc
c000d641:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d643:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d647:	52                   	push   edx
c000d648:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d64c:	6a 00                	push   0x0
c000d64e:	68 10 01 00 00       	push   0x110
c000d653:	51                   	push   ecx
c000d654:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d657:	83 c4 20             	add    esp,0x20
c000d65a:	83 c4 1c             	add    esp,0x1c
c000d65d:	c3                   	ret    

c000d65e <Directory::create()>:
c000d65e:	83 ec 0c             	sub    esp,0xc
c000d661:	b8 0b 00 00 00       	mov    eax,0xb
c000d666:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d66a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d671:	80 f9 19             	cmp    cl,0x19
c000d674:	77 2f                	ja     c000d6a5 <Directory::create()+0x47>
c000d676:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c000d67d:	85 c9                	test   ecx,ecx
c000d67f:	74 24                	je     c000d6a5 <Directory::create()+0x47>
c000d681:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d687:	85 c9                	test   ecx,ecx
c000d689:	74 1a                	je     c000d6a5 <Directory::create()+0x47>
c000d68b:	b8 06 00 00 00       	mov    eax,0x6
c000d690:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d694:	75 0f                	jne    c000d6a5 <Directory::create()+0x47>
c000d696:	83 c2 0d             	add    edx,0xd
c000d699:	50                   	push   eax
c000d69a:	50                   	push   eax
c000d69b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d69d:	52                   	push   edx
c000d69e:	51                   	push   ecx
c000d69f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d6a2:	83 c4 10             	add    esp,0x10
c000d6a5:	83 c4 0c             	add    esp,0xc
c000d6a8:	c3                   	ret    
c000d6a9:	90                   	nop

c000d6aa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d6aa:	b8 0a 00 00 00       	mov    eax,0xa
c000d6af:	c3                   	ret    

c000d6b0 <Bus::Bus(char const*)>:
c000d6b0:	83 ec 0c             	sub    esp,0xc
c000d6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b7:	83 ec 08             	sub    esp,0x8
c000d6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6be:	50                   	push   eax
c000d6bf:	e8 84 09 00 00       	call   c000e048 <Device::Device(char const*)>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c000d6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d0:	89 10                	mov    DWORD PTR [eax],edx
c000d6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d6e0:	90                   	nop
c000d6e1:	83 c4 0c             	add    esp,0xc
c000d6e4:	c3                   	ret    
c000d6e5:	90                   	nop

c000d6e6 <Bus::~Bus()>:
c000d6e6:	83 ec 0c             	sub    esp,0xc
c000d6e9:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c000d6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f2:	89 10                	mov    DWORD PTR [eax],edx
c000d6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f8:	83 ec 0c             	sub    esp,0xc
c000d6fb:	50                   	push   eax
c000d6fc:	e8 11 06 00 00       	call   c000dd12 <Device::~Device()>
c000d701:	83 c4 10             	add    esp,0x10
c000d704:	90                   	nop
c000d705:	83 c4 0c             	add    esp,0xc
c000d708:	c3                   	ret    
c000d709:	90                   	nop

c000d70a <Bus::~Bus()>:
c000d70a:	83 ec 0c             	sub    esp,0xc
c000d70d:	83 ec 0c             	sub    esp,0xc
c000d710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d714:	e8 cd ff ff ff       	call   c000d6e6 <Bus::~Bus()>
c000d719:	83 c4 10             	add    esp,0x10
c000d71c:	83 ec 08             	sub    esp,0x8
c000d71f:	68 58 01 00 00       	push   0x158
c000d724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d728:	e8 f6 f1 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000d72d:	83 c4 10             	add    esp,0x10
c000d730:	83 c4 0c             	add    esp,0xc
c000d733:	c3                   	ret    

c000d734 <Buzzer::Buzzer(char const*)>:
c000d734:	83 ec 0c             	sub    esp,0xc
c000d737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73b:	83 ec 08             	sub    esp,0x8
c000d73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d742:	50                   	push   eax
c000d743:	e8 00 09 00 00       	call   c000e048 <Device::Device(char const*)>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	ba d8 2e 02 c0       	mov    edx,0xc0022ed8
c000d750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d754:	89 10                	mov    DWORD PTR [eax],edx
c000d756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d768:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d772:	90                   	nop
c000d773:	83 c4 0c             	add    esp,0xc
c000d776:	c3                   	ret    
c000d777:	90                   	nop

c000d778 <Buzzer::~Buzzer()>:
c000d778:	83 ec 0c             	sub    esp,0xc
c000d77b:	ba d8 2e 02 c0       	mov    edx,0xc0022ed8
c000d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d784:	89 10                	mov    DWORD PTR [eax],edx
c000d786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78a:	83 ec 0c             	sub    esp,0xc
c000d78d:	50                   	push   eax
c000d78e:	e8 7f 05 00 00       	call   c000dd12 <Device::~Device()>
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	90                   	nop
c000d797:	83 c4 0c             	add    esp,0xc
c000d79a:	c3                   	ret    
c000d79b:	90                   	nop

c000d79c <Buzzer::~Buzzer()>:
c000d79c:	83 ec 0c             	sub    esp,0xc
c000d79f:	83 ec 0c             	sub    esp,0xc
c000d7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a6:	e8 cd ff ff ff       	call   c000d778 <Buzzer::~Buzzer()>
c000d7ab:	83 c4 10             	add    esp,0x10
c000d7ae:	83 ec 08             	sub    esp,0x8
c000d7b1:	68 5c 01 00 00       	push   0x15c
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	e8 64 f1 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	83 c4 0c             	add    esp,0xc
c000d7c5:	c3                   	ret    

c000d7c6 <Buzzer::stop()>:
c000d7c6:	83 ec 14             	sub    esp,0x14
c000d7c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d7cd:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7cf:	6a 00                	push   0x0
c000d7d1:	50                   	push   eax
c000d7d2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d7d5:	83 c4 1c             	add    esp,0x1c
c000d7d8:	c3                   	ret    

c000d7d9 <beepThread(void*)>:
c000d7d9:	53                   	push   ebx
c000d7da:	83 ec 08             	sub    esp,0x8
c000d7dd:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000d7e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d7e6:	48                   	dec    eax
c000d7e7:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000d7ec:	75 02                	jne    c000d7f0 <beepThread(void*)+0x17>
c000d7ee:	fb                   	sti    
c000d7ef:	90                   	nop
c000d7f0:	83 ec 0c             	sub    esp,0xc
c000d7f3:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d7fa:	50                   	push   eax
c000d7fb:	e8 ac a8 00 00       	call   c00180ac <milliTenthSleep(unsigned int)>
c000d800:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d803:	e8 be ff ff ff       	call   c000d7c6 <Buzzer::stop()>
c000d808:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d810:	83 c4 18             	add    esp,0x18
c000d813:	5b                   	pop    ebx
c000d814:	e9 99 a7 00 00       	jmp    c0017fb2 <blockTask(TaskState)>
c000d819:	90                   	nop

c000d81a <Buzzer::beep(int, int, bool)>:
c000d81a:	57                   	push   edi
c000d81b:	56                   	push   esi
c000d81c:	53                   	push   ebx
c000d81d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d821:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d825:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d829:	50                   	push   eax
c000d82a:	50                   	push   eax
c000d82b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d82d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d831:	53                   	push   ebx
c000d832:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 f8                	mov    eax,edi
c000d83a:	84 c0                	test   al,al
c000d83c:	74 1c                	je     c000d85a <Buzzer::beep(int, int, bool)+0x40>
c000d83e:	83 ec 0c             	sub    esp,0xc
c000d841:	6b f6 0a             	imul   esi,esi,0xa
c000d844:	56                   	push   esi
c000d845:	e8 62 a8 00 00       	call   c00180ac <milliTenthSleep(unsigned int)>
c000d84a:	83 c4 10             	add    esp,0x10
c000d84d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d851:	5b                   	pop    ebx
c000d852:	5e                   	pop    esi
c000d853:	5f                   	pop    edi
c000d854:	e9 6d ff ff ff       	jmp    c000d7c6 <Buzzer::stop()>
c000d859:	90                   	nop
c000d85a:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d860:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000d865:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d86d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d871:	c7 44 24 14 d9 d7 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d7d9
c000d879:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d87d:	5b                   	pop    ebx
c000d87e:	5e                   	pop    esi
c000d87f:	5f                   	pop    edi
c000d880:	e9 39 a3 00 00       	jmp    c0017bbe <Process::createThread(void (*)(void*), void*, int)>
c000d885:	90                   	nop

c000d886 <User::loadClockSettings(int)>:
c000d886:	53                   	push   ebx
c000d887:	83 ec 14             	sub    esp,0x14
c000d88a:	68 14 01 00 00       	push   0x114
c000d88f:	e8 0f c1 ff ff       	call   c00099a3 <malloc>
c000d894:	83 c4 0c             	add    esp,0xc
c000d897:	89 c3                	mov    ebx,eax
c000d899:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c000d89f:	68 00 2f 02 c0       	push   0xc0022f00
c000d8a4:	50                   	push   eax
c000d8a5:	e8 c4 f6 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c000d8aa:	58                   	pop    eax
c000d8ab:	5a                   	pop    edx
c000d8ac:	6a 01                	push   0x1
c000d8ae:	53                   	push   ebx
c000d8af:	e8 1e f7 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c000d8b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8b7:	e8 74 f7 ff ff       	call   c000d030 <File::close()>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	85 db                	test   ebx,ebx
c000d8c1:	74 0f                	je     c000d8d2 <User::loadClockSettings(int)+0x4c>
c000d8c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d8cc:	83 c4 08             	add    esp,0x8
c000d8cf:	5b                   	pop    ebx
c000d8d0:	ff e0                	jmp    eax
c000d8d2:	83 c4 08             	add    esp,0x8
c000d8d5:	5b                   	pop    ebx
c000d8d6:	c3                   	ret    
c000d8d7:	90                   	nop

c000d8d8 <Clock::Clock(char const*)>:
c000d8d8:	83 ec 0c             	sub    esp,0xc
c000d8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8df:	83 ec 08             	sub    esp,0x8
c000d8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e6:	50                   	push   eax
c000d8e7:	e8 5c 07 00 00       	call   c000e048 <Device::Device(char const*)>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	ba 28 2f 02 c0       	mov    edx,0xc0022f28
c000d8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f8:	89 10                	mov    DWORD PTR [eax],edx
c000d8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8fe:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d908:	90                   	nop
c000d909:	83 c4 0c             	add    esp,0xc
c000d90c:	c3                   	ret    
c000d90d:	90                   	nop

c000d90e <Clock::~Clock()>:
c000d90e:	83 ec 0c             	sub    esp,0xc
c000d911:	ba 28 2f 02 c0       	mov    edx,0xc0022f28
c000d916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91a:	89 10                	mov    DWORD PTR [eax],edx
c000d91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d920:	83 ec 0c             	sub    esp,0xc
c000d923:	50                   	push   eax
c000d924:	e8 e9 03 00 00       	call   c000dd12 <Device::~Device()>
c000d929:	83 c4 10             	add    esp,0x10
c000d92c:	90                   	nop
c000d92d:	83 c4 0c             	add    esp,0xc
c000d930:	c3                   	ret    
c000d931:	90                   	nop

c000d932 <Clock::~Clock()>:
c000d932:	83 ec 0c             	sub    esp,0xc
c000d935:	83 ec 0c             	sub    esp,0xc
c000d938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93c:	e8 cd ff ff ff       	call   c000d90e <Clock::~Clock()>
c000d941:	83 c4 10             	add    esp,0x10
c000d944:	83 ec 08             	sub    esp,0x8
c000d947:	68 58 01 00 00       	push   0x158
c000d94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d950:	e8 ce ef ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000d955:	83 c4 10             	add    esp,0x10
c000d958:	83 c4 0c             	add    esp,0xc
c000d95b:	c3                   	ret    

c000d95c <Clock::timeInSecondsLocal()>:
c000d95c:	53                   	push   ebx
c000d95d:	83 ec 14             	sub    esp,0x14
c000d960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d964:	8b 10                	mov    edx,DWORD PTR [eax]
c000d966:	50                   	push   eax
c000d967:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d96a:	0f b6 0d dc 61 02 c0 	movzx  ecx,BYTE PTR ds:0xc00261dc
c000d971:	03 0d e0 61 02 c0    	add    ecx,DWORD PTR ds:0xc00261e0
c000d977:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d97d:	89 cb                	mov    ebx,ecx
c000d97f:	c1 fb 1f             	sar    ebx,0x1f
c000d982:	01 c8                	add    eax,ecx
c000d984:	11 da                	adc    edx,ebx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	31 c9                	xor    ecx,ecx
c000d98b:	80 3d dd 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261dd,0x0
c000d992:	74 05                	je     c000d999 <Clock::timeInSecondsLocal()+0x3d>
c000d994:	b9 08 07 00 00       	mov    ecx,0x708
c000d999:	31 db                	xor    ebx,ebx
c000d99b:	01 c8                	add    eax,ecx
c000d99d:	11 da                	adc    edx,ebx
c000d99f:	83 c4 08             	add    esp,0x8
c000d9a2:	5b                   	pop    ebx
c000d9a3:	c3                   	ret    

c000d9a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000d9a4:	57                   	push   edi
c000d9a5:	56                   	push   esi
c000d9a6:	53                   	push   ebx
c000d9a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d9ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d9af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d9b5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000d9b8:	0f b6 05 dc 61 02 c0 	movzx  eax,BYTE PTR ds:0xc00261dc
c000d9bf:	03 05 e0 61 02 c0    	add    eax,DWORD PTR ds:0xc00261e0
c000d9c5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000d9cb:	99                   	cdq    
c000d9cc:	29 c6                	sub    esi,eax
c000d9ce:	19 d7                	sbb    edi,edx
c000d9d0:	89 f0                	mov    eax,esi
c000d9d2:	89 fa                	mov    edx,edi
c000d9d4:	31 f6                	xor    esi,esi
c000d9d6:	80 3d dd 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261dd,0x0
c000d9dd:	74 05                	je     c000d9e4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000d9df:	be 08 07 00 00       	mov    esi,0x708
c000d9e4:	31 ff                	xor    edi,edi
c000d9e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000d9ea:	29 f0                	sub    eax,esi
c000d9ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9f0:	19 fa                	sbb    edx,edi
c000d9f2:	89 d8                	mov    eax,ebx
c000d9f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d9f8:	5b                   	pop    ebx
c000d9f9:	5e                   	pop    esi
c000d9fa:	5f                   	pop    edi
c000d9fb:	ff e0                	jmp    eax

c000d9fd <datetimeToSeconds(datetime_t)>:
c000d9fd:	55                   	push   ebp
c000d9fe:	57                   	push   edi
c000d9ff:	56                   	push   esi
c000da00:	53                   	push   ebx
c000da01:	83 ec 14             	sub    esp,0x14
c000da04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da08:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da0c:	89 d3                	mov    ebx,edx
c000da0e:	0f b6 c6             	movzx  eax,dh
c000da11:	c1 eb 10             	shr    ebx,0x10
c000da14:	48                   	dec    eax
c000da15:	66 81 eb 6c 07       	sub    bx,0x76c
c000da1a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da1e:	0f b6 f5             	movzx  esi,ch
c000da21:	89 cf                	mov    edi,ecx
c000da23:	6b f6 3c             	imul   esi,esi,0x3c
c000da26:	c1 ef 10             	shr    edi,0x10
c000da29:	0f b6 c9             	movzx  ecx,cl
c000da2c:	89 f8                	mov    eax,edi
c000da2e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da34:	0f b6 f8             	movzx  edi,al
c000da37:	0f b6 d2             	movzx  edx,dl
c000da3a:	01 fe                	add    esi,edi
c000da3c:	01 f1                	add    ecx,esi
c000da3e:	0f b7 f3             	movzx  esi,bx
c000da41:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000da45:	c1 f9 1f             	sar    ecx,0x1f
c000da48:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000da4d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000da51:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000da56:	8b 0c 8d 60 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0a0]
c000da5d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000da61:	76 29                	jbe    c000da8c <datetimeToSeconds(datetime_t)+0x8f>
c000da63:	f6 c3 03             	test   bl,0x3
c000da66:	75 24                	jne    c000da8c <datetimeToSeconds(datetime_t)+0x8f>
c000da68:	31 d2                	xor    edx,edx
c000da6a:	bf 64 00 00 00       	mov    edi,0x64
c000da6f:	89 d8                	mov    eax,ebx
c000da71:	66 f7 f7             	div    di
c000da74:	66 85 d2             	test   dx,dx
c000da77:	75 12                	jne    c000da8b <datetimeToSeconds(datetime_t)+0x8e>
c000da79:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000da7f:	bf 90 01 00 00       	mov    edi,0x190
c000da84:	99                   	cdq    
c000da85:	f7 ff                	idiv   edi
c000da87:	85 d2                	test   edx,edx
c000da89:	75 01                	jne    c000da8c <datetimeToSeconds(datetime_t)+0x8f>
c000da8b:	41                   	inc    ecx
c000da8c:	66 83 fb 46          	cmp    bx,0x46
c000da90:	76 45                	jbe    c000dad7 <datetimeToSeconds(datetime_t)+0xda>
c000da92:	bb 46 00 00 00       	mov    ebx,0x46
c000da97:	bf 64 00 00 00       	mov    edi,0x64
c000da9c:	bd 90 01 00 00       	mov    ebp,0x190
c000daa1:	b8 6d 01 00 00       	mov    eax,0x16d
c000daa6:	f6 c3 03             	test   bl,0x3
c000daa9:	75 23                	jne    c000dace <datetimeToSeconds(datetime_t)+0xd1>
c000daab:	89 d8                	mov    eax,ebx
c000daad:	99                   	cdq    
c000daae:	f7 ff                	idiv   edi
c000dab0:	b8 6e 01 00 00       	mov    eax,0x16e
c000dab5:	85 d2                	test   edx,edx
c000dab7:	75 15                	jne    c000dace <datetimeToSeconds(datetime_t)+0xd1>
c000dab9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dabf:	99                   	cdq    
c000dac0:	f7 fd                	idiv   ebp
c000dac2:	83 fa 01             	cmp    edx,0x1
c000dac5:	19 c0                	sbb    eax,eax
c000dac7:	f7 d0                	not    eax
c000dac9:	05 6e 01 00 00       	add    eax,0x16e
c000dace:	01 c1                	add    ecx,eax
c000dad0:	43                   	inc    ebx
c000dad1:	39 f3                	cmp    ebx,esi
c000dad3:	7c cc                	jl     c000daa1 <datetimeToSeconds(datetime_t)+0xa4>
c000dad5:	eb 35                	jmp    c000db0c <datetimeToSeconds(datetime_t)+0x10f>
c000dad7:	74 33                	je     c000db0c <datetimeToSeconds(datetime_t)+0x10f>
c000dad9:	b8 45 00 00 00       	mov    eax,0x45
c000dade:	89 c2                	mov    edx,eax
c000dae0:	83 e2 03             	and    edx,0x3
c000dae3:	39 f0                	cmp    eax,esi
c000dae5:	7e 0f                	jle    c000daf6 <datetimeToSeconds(datetime_t)+0xf9>
c000dae7:	83 fa 01             	cmp    edx,0x1
c000daea:	19 d2                	sbb    edx,edx
c000daec:	48                   	dec    eax
c000daed:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000daf4:	eb e8                	jmp    c000dade <datetimeToSeconds(datetime_t)+0xe1>
c000daf6:	b8 6d 01 00 00       	mov    eax,0x16d
c000dafb:	85 d2                	test   edx,edx
c000dafd:	75 0b                	jne    c000db0a <datetimeToSeconds(datetime_t)+0x10d>
c000daff:	66 83 fb 01          	cmp    bx,0x1
c000db03:	19 c0                	sbb    eax,eax
c000db05:	05 6e 01 00 00       	add    eax,0x16e
c000db0a:	29 c1                	sub    ecx,eax
c000db0c:	b8 80 51 01 00       	mov    eax,0x15180
c000db11:	f7 e9                	imul   ecx
c000db13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db1b:	83 c4 14             	add    esp,0x14
c000db1e:	5b                   	pop    ebx
c000db1f:	5e                   	pop    esi
c000db20:	5f                   	pop    edi
c000db21:	5d                   	pop    ebp
c000db22:	c3                   	ret    
c000db23:	90                   	nop

c000db24 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db24:	57                   	push   edi
c000db25:	56                   	push   esi
c000db26:	53                   	push   ebx
c000db27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db2b:	8b 06                	mov    eax,DWORD PTR [esi]
c000db2d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000db30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db38:	e8 c0 fe ff ff       	call   c000d9fd <datetimeToSeconds(datetime_t)>
c000db3d:	59                   	pop    ecx
c000db3e:	0f b6 0d dc 61 02 c0 	movzx  ecx,BYTE PTR ds:0xc00261dc
c000db45:	5b                   	pop    ebx
c000db46:	03 0d e0 61 02 c0    	add    ecx,DWORD PTR ds:0xc00261e0
c000db4c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000db52:	89 cb                	mov    ebx,ecx
c000db54:	c1 fb 1f             	sar    ebx,0x1f
c000db57:	29 c8                	sub    eax,ecx
c000db59:	19 da                	sbb    edx,ebx
c000db5b:	31 c9                	xor    ecx,ecx
c000db5d:	80 3d dd 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261dd,0x0
c000db64:	74 05                	je     c000db6b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000db66:	b9 08 07 00 00       	mov    ecx,0x708
c000db6b:	31 db                	xor    ebx,ebx
c000db6d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000db71:	29 c8                	sub    eax,ecx
c000db73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000db77:	19 da                	sbb    edx,ebx
c000db79:	89 f8                	mov    eax,edi
c000db7b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000db7f:	5b                   	pop    ebx
c000db80:	5e                   	pop    esi
c000db81:	5f                   	pop    edi
c000db82:	ff e0                	jmp    eax

c000db84 <secondsToDatetime(unsigned long long)>:
c000db84:	55                   	push   ebp
c000db85:	57                   	push   edi
c000db86:	56                   	push   esi
c000db87:	53                   	push   ebx
c000db88:	83 ec 1c             	sub    esp,0x1c
c000db8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000db8f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000db93:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000db97:	6a 00                	push   0x0
c000db99:	68 80 51 01 00       	push   0x15180
c000db9e:	55                   	push   ebp
c000db9f:	57                   	push   edi
c000dba0:	e8 5f 30 01 00       	call   c0020c04 <__udivdi3>
c000dba5:	83 c4 10             	add    esp,0x10
c000dba8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dbae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb2:	6a 00                	push   0x0
c000dbb4:	68 80 51 01 00       	push   0x15180
c000dbb9:	55                   	push   ebp
c000dbba:	57                   	push   edi
c000dbbb:	bf 10 0e 00 00       	mov    edi,0xe10
c000dbc0:	e8 3f 31 01 00       	call   c0020d04 <__umoddi3>
c000dbc5:	83 c4 10             	add    esp,0x10
c000dbc8:	99                   	cdq    
c000dbc9:	f7 ff                	idiv   edi
c000dbcb:	bf 3c 00 00 00       	mov    edi,0x3c
c000dbd0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dbd3:	89 d0                	mov    eax,edx
c000dbd5:	99                   	cdq    
c000dbd6:	f7 ff                	idiv   edi
c000dbd8:	85 db                	test   ebx,ebx
c000dbda:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dbdd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dbe0:	79 11                	jns    c000dbf3 <secondsToDatetime(unsigned long long)+0x6f>
c000dbe2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dbe6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dbec:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dbf1:	eb 07                	jmp    c000dbfa <secondsToDatetime(unsigned long long)+0x76>
c000dbf3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dbf8:	89 d8                	mov    eax,ebx
c000dbfa:	bf b4 05 00 00       	mov    edi,0x5b4
c000dbff:	99                   	cdq    
c000dc00:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc05:	f7 f9                	idiv   ecx
c000dc07:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc10:	31 d2                	xor    edx,edx
c000dc12:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc1a:	01 c3                	add    ebx,eax
c000dc1c:	89 d8                	mov    eax,ebx
c000dc1e:	f7 f1                	div    ecx
c000dc20:	31 d2                	xor    edx,edx
c000dc22:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc25:	89 d8                	mov    eax,ebx
c000dc27:	f7 f7                	div    edi
c000dc29:	31 d2                	xor    edx,edx
c000dc2b:	29 c1                	sub    ecx,eax
c000dc2d:	89 d8                	mov    eax,ebx
c000dc2f:	f7 f5                	div    ebp
c000dc31:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dc36:	29 c1                	sub    ecx,eax
c000dc38:	31 d2                	xor    edx,edx
c000dc3a:	89 c8                	mov    eax,ecx
c000dc3c:	f7 f5                	div    ebp
c000dc3e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dc43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc47:	31 d2                	xor    edx,edx
c000dc49:	89 c8                	mov    eax,ecx
c000dc4b:	f7 f5                	div    ebp
c000dc4d:	31 d2                	xor    edx,edx
c000dc4f:	01 c3                	add    ebx,eax
c000dc51:	89 c8                	mov    eax,ecx
c000dc53:	f7 f7                	div    edi
c000dc55:	bf 99 00 00 00       	mov    edi,0x99
c000dc5a:	29 c3                	sub    ebx,eax
c000dc5c:	31 d2                	xor    edx,edx
c000dc5e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dc66:	29 c3                	sub    ebx,eax
c000dc68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dc6b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dc6e:	bb 05 00 00 00       	mov    ebx,0x5
c000dc73:	83 c1 02             	add    ecx,0x2
c000dc76:	89 c8                	mov    eax,ecx
c000dc78:	f7 f7                	div    edi
c000dc7a:	31 d2                	xor    edx,edx
c000dc7c:	89 c7                	mov    edi,eax
c000dc7e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dc84:	83 c0 02             	add    eax,0x2
c000dc87:	f7 f3                	div    ebx
c000dc89:	89 eb                	mov    ebx,ebp
c000dc8b:	29 c3                	sub    ebx,eax
c000dc8d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dc93:	88 1e                	mov    BYTE PTR [esi],bl
c000dc95:	19 c0                	sbb    eax,eax
c000dc97:	31 d2                	xor    edx,edx
c000dc99:	83 e0 0c             	and    eax,0xc
c000dc9c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dca0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dca8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dcac:	83 f9 01             	cmp    ecx,0x1
c000dcaf:	0f 96 c2             	setbe  dl
c000dcb2:	41                   	inc    ecx
c000dcb3:	01 d0                	add    eax,edx
c000dcb5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dcb8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dcbc:	83 c4 1c             	add    esp,0x1c
c000dcbf:	89 f0                	mov    eax,esi
c000dcc1:	5b                   	pop    ebx
c000dcc2:	5e                   	pop    esi
c000dcc3:	5f                   	pop    edi
c000dcc4:	5d                   	pop    ebp
c000dcc5:	c2 04 00             	ret    0x4

c000dcc8 <Clock::timeInDatetimeLocal()>:
c000dcc8:	53                   	push   ebx
c000dcc9:	83 ec 14             	sub    esp,0x14
c000dccc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dcd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dcd4:	e8 83 fc ff ff       	call   c000d95c <Clock::timeInSecondsLocal()>
c000dcd9:	83 c4 0c             	add    esp,0xc
c000dcdc:	52                   	push   edx
c000dcdd:	50                   	push   eax
c000dcde:	53                   	push   ebx
c000dcdf:	e8 a0 fe ff ff       	call   c000db84 <secondsToDatetime(unsigned long long)>
c000dce4:	89 d8                	mov    eax,ebx
c000dce6:	83 c4 14             	add    esp,0x14
c000dce9:	5b                   	pop    ebx
c000dcea:	c2 04 00             	ret    0x4
c000dced:	90                   	nop

c000dcee <Device::hibernate()>:
c000dcee:	c3                   	ret    
c000dcef:	90                   	nop

c000dcf0 <Device::wake()>:
c000dcf0:	c3                   	ret    
c000dcf1:	90                   	nop

c000dcf2 <Device::detect()>:
c000dcf2:	c3                   	ret    
c000dcf3:	90                   	nop

c000dcf4 <Device::disableLegacy()>:
c000dcf4:	c3                   	ret    
c000dcf5:	90                   	nop

c000dcf6 <Device::powerSaving(PowerSavingLevel)>:
c000dcf6:	c3                   	ret    
c000dcf7:	90                   	nop

c000dcf8 <DriverlessDevice::close(int, int, void*)>:
c000dcf8:	31 c0                	xor    eax,eax
c000dcfa:	c3                   	ret    
c000dcfb:	90                   	nop

c000dcfc <DriverlessDevice::detect()>:
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <DriverlessDevice::open(int, int, void*)>:
c000dcfe:	83 ec 18             	sub    esp,0x18
c000dd01:	68 90 2f 02 c0       	push   0xc0022f90
c000dd06:	e8 38 65 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000dd0b:	83 c8 ff             	or     eax,0xffffffff
c000dd0e:	83 c4 1c             	add    esp,0x1c
c000dd11:	c3                   	ret    

c000dd12 <Device::~Device()>:
c000dd12:	ba f0 2f 02 c0       	mov    edx,0xc0022ff0
c000dd17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd1b:	89 10                	mov    DWORD PTR [eax],edx
c000dd1d:	90                   	nop
c000dd1e:	c3                   	ret    
c000dd1f:	90                   	nop

c000dd20 <Device::~Device()>:
c000dd20:	83 ec 0c             	sub    esp,0xc
c000dd23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd27:	e8 e6 ff ff ff       	call   c000dd12 <Device::~Device()>
c000dd2c:	83 c4 04             	add    esp,0x4
c000dd2f:	83 ec 08             	sub    esp,0x8
c000dd32:	68 58 01 00 00       	push   0x158
c000dd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd3b:	e8 e3 eb ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000dd40:	83 c4 10             	add    esp,0x10
c000dd43:	83 c4 0c             	add    esp,0xc
c000dd46:	c3                   	ret    
c000dd47:	90                   	nop

c000dd48 <Device::findAndLoadDriver()>:
c000dd48:	c7 44 24 04 ae 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fae
c000dd50:	e9 af ec ff ff       	jmp    c000ca04 <Dbg::kprintf(char const*, ...)>
c000dd55:	90                   	nop

c000dd56 <Device::preOpenPCI(PCIDeviceInfo)>:
c000dd56:	57                   	push   edi
c000dd57:	b9 09 00 00 00       	mov    ecx,0x9
c000dd5c:	56                   	push   esi
c000dd5d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dd61:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dd65:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dd6f:	81 c7 18 01 00 00    	add    edi,0x118
c000dd75:	fc                   	cld    
c000dd76:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000dd78:	5e                   	pop    esi
c000dd79:	5f                   	pop    edi
c000dd7a:	c3                   	ret    
c000dd7b:	90                   	nop

c000dd7c <Device::preOpenACPI(void*, char*, char*)>:
c000dd7c:	57                   	push   edi
c000dd7d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000dd82:	56                   	push   esi
c000dd83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd8b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000dd95:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000dd9b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000dda1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dda5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dda7:	b9 0e 00 00 00       	mov    ecx,0xe
c000ddac:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ddb2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ddb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddb8:	5e                   	pop    esi
c000ddb9:	5f                   	pop    edi
c000ddba:	c3                   	ret    
c000ddbb:	90                   	nop

c000ddbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ddbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddc0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000ddc5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000ddcc:	75 0b                	jne    c000ddd9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000ddce:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddd0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ddd4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ddd7:	eb 1e                	jmp    c000ddf7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000ddd9:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000ddde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dde4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000ddea:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ddec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ddf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddf4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000ddf7:	ff e0                	jmp    eax
c000ddf9:	90                   	nop

c000ddfa <Device::getParent()>:
c000ddfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddfe:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de04:	c3                   	ret    
c000de05:	90                   	nop

c000de06 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de0a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de0f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de16:	75 0b                	jne    c000de23 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de18:	8b 00                	mov    eax,DWORD PTR [eax]
c000de1a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de1e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de21:	eb 1e                	jmp    c000de41 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de23:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000de28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de2e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de34:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de36:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de3e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000de41:	ff e0                	jmp    eax
c000de43:	90                   	nop

c000de44 <Device::addChild(Device*)>:
c000de44:	53                   	push   ebx
c000de45:	83 ec 08             	sub    esp,0x8
c000de48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de50:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000de56:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000de5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000de5e:	85 d2                	test   edx,edx
c000de60:	74 04                	je     c000de66 <Device::addChild(Device*)+0x22>
c000de62:	89 d3                	mov    ebx,edx
c000de64:	eb f6                	jmp    c000de5c <Device::addChild(Device*)+0x18>
c000de66:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000de69:	83 ec 0c             	sub    esp,0xc
c000de6c:	6a 08                	push   0x8
c000de6e:	e8 30 bb ff ff       	call   c00099a3 <malloc>
c000de73:	89 03                	mov    DWORD PTR [ebx],eax
c000de75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000de7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000de82:	83 c4 18             	add    esp,0x18
c000de85:	5b                   	pop    ebx
c000de86:	c3                   	ret    
c000de87:	90                   	nop

c000de88 <Device::removeAllChildren()>:
c000de88:	56                   	push   esi
c000de89:	53                   	push   ebx
c000de8a:	52                   	push   edx
c000de8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de8f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000de95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000de98:	74 17                	je     c000deb1 <Device::removeAllChildren()+0x29>
c000de9a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000de9d:	85 c0                	test   eax,eax
c000de9f:	74 0c                	je     c000dead <Device::removeAllChildren()+0x25>
c000dea1:	83 ec 0c             	sub    esp,0xc
c000dea4:	8b 10                	mov    edx,DWORD PTR [eax]
c000dea6:	50                   	push   eax
c000dea7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000deaa:	83 c4 10             	add    esp,0x10
c000dead:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000deaf:	eb e4                	jmp    c000de95 <Device::removeAllChildren()+0xd>
c000deb1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000deb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000debd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dec3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000deca:	58                   	pop    eax
c000decb:	5b                   	pop    ebx
c000decc:	5e                   	pop    esi
c000decd:	c3                   	ret    

c000dece <Device::hibernateAll()>:
c000dece:	53                   	push   ebx
c000decf:	83 ec 14             	sub    esp,0x14
c000ded2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ded6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ded8:	53                   	push   ebx
c000ded9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dedc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dee2:	83 c4 10             	add    esp,0x10
c000dee5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dee8:	74 0f                	je     c000def9 <Device::hibernateAll()+0x2b>
c000deea:	83 ec 0c             	sub    esp,0xc
c000deed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000def0:	e8 d9 ff ff ff       	call   c000dece <Device::hibernateAll()>
c000def5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000def7:	eb e9                	jmp    c000dee2 <Device::hibernateAll()+0x14>
c000def9:	83 c4 08             	add    esp,0x8
c000defc:	5b                   	pop    ebx
c000defd:	c3                   	ret    

c000defe <Device::wakeAll()>:
c000defe:	53                   	push   ebx
c000deff:	83 ec 14             	sub    esp,0x14
c000df02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df08:	53                   	push   ebx
c000df09:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df12:	83 c4 10             	add    esp,0x10
c000df15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df18:	74 0f                	je     c000df29 <Device::wakeAll()+0x2b>
c000df1a:	83 ec 0c             	sub    esp,0xc
c000df1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df20:	e8 d9 ff ff ff       	call   c000defe <Device::wakeAll()>
c000df25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df27:	eb e9                	jmp    c000df12 <Device::wakeAll()+0x14>
c000df29:	83 c4 08             	add    esp,0x8
c000df2c:	5b                   	pop    ebx
c000df2d:	c3                   	ret    

c000df2e <Device::detectAll()>:
c000df2e:	53                   	push   ebx
c000df2f:	83 ec 14             	sub    esp,0x14
c000df32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df36:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df38:	53                   	push   ebx
c000df39:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000df3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df48:	74 0f                	je     c000df59 <Device::detectAll()+0x2b>
c000df4a:	83 ec 0c             	sub    esp,0xc
c000df4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df50:	e8 d9 ff ff ff       	call   c000df2e <Device::detectAll()>
c000df55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df57:	eb e9                	jmp    c000df42 <Device::detectAll()+0x14>
c000df59:	83 c4 08             	add    esp,0x8
c000df5c:	5b                   	pop    ebx
c000df5d:	c3                   	ret    

c000df5e <Device::disableLegacyAll()>:
c000df5e:	53                   	push   ebx
c000df5f:	83 ec 14             	sub    esp,0x14
c000df62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df66:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df68:	53                   	push   ebx
c000df69:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000df6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df72:	83 c4 10             	add    esp,0x10
c000df75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df78:	74 0f                	je     c000df89 <Device::disableLegacyAll()+0x2b>
c000df7a:	83 ec 0c             	sub    esp,0xc
c000df7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df80:	e8 d9 ff ff ff       	call   c000df5e <Device::disableLegacyAll()>
c000df85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df87:	eb e9                	jmp    c000df72 <Device::disableLegacyAll()+0x14>
c000df89:	83 c4 08             	add    esp,0x8
c000df8c:	5b                   	pop    ebx
c000df8d:	c3                   	ret    

c000df8e <Device::loadDriversForAll()>:
c000df8e:	53                   	push   ebx
c000df8f:	83 ec 08             	sub    esp,0x8
c000df92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df96:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000df9d:	75 0c                	jne    c000dfab <Device::loadDriversForAll()+0x1d>
c000df9f:	83 ec 0c             	sub    esp,0xc
c000dfa2:	53                   	push   ebx
c000dfa3:	e8 a0 fd ff ff       	call   c000dd48 <Device::findAndLoadDriver()>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfb1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfb4:	74 12                	je     c000dfc8 <Device::loadDriversForAll()+0x3a>
c000dfb6:	83 ec 0c             	sub    esp,0xc
c000dfb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfbc:	e8 cd ff ff ff       	call   c000df8e <Device::loadDriversForAll()>
c000dfc1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	eb e9                	jmp    c000dfb1 <Device::loadDriversForAll()+0x23>
c000dfc8:	83 c4 08             	add    esp,0x8
c000dfcb:	5b                   	pop    ebx
c000dfcc:	c3                   	ret    
c000dfcd:	90                   	nop

c000dfce <Device::closeAll()>:
c000dfce:	53                   	push   ebx
c000dfcf:	83 ec 08             	sub    esp,0x8
c000dfd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfd8:	6a 00                	push   0x0
c000dfda:	6a 00                	push   0x0
c000dfdc:	6a 00                	push   0x0
c000dfde:	53                   	push   ebx
c000dfdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dfe2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfe8:	83 c4 10             	add    esp,0x10
c000dfeb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfee:	74 0f                	je     c000dfff <Device::closeAll()+0x31>
c000dff0:	83 ec 0c             	sub    esp,0xc
c000dff3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dff6:	e8 d3 ff ff ff       	call   c000dfce <Device::closeAll()>
c000dffb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dffd:	eb e9                	jmp    c000dfe8 <Device::closeAll()+0x1a>
c000dfff:	83 c4 08             	add    esp,0x8
c000e002:	5b                   	pop    ebx
c000e003:	c3                   	ret    

c000e004 <Device::powerSavingAll(PowerSavingLevel)>:
c000e004:	56                   	push   esi
c000e005:	53                   	push   ebx
c000e006:	83 ec 0c             	sub    esp,0xc
c000e009:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e00d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e011:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e013:	56                   	push   esi
c000e014:	53                   	push   ebx
c000e015:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e018:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e01e:	83 c4 10             	add    esp,0x10
c000e021:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e024:	74 0f                	je     c000e035 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e026:	52                   	push   edx
c000e027:	52                   	push   edx
c000e028:	56                   	push   esi
c000e029:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e02c:	e8 d3 ff ff ff       	call   c000e004 <Device::powerSavingAll(PowerSavingLevel)>
c000e031:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e033:	eb e9                	jmp    c000e01e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e035:	58                   	pop    eax
c000e036:	5b                   	pop    ebx
c000e037:	5e                   	pop    esi
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <Device::setName(char const*)>:
c000e03a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e042:	e9 f9 26 ff ff       	jmp    c0000740 <strcpy>
c000e047:	90                   	nop

c000e048 <Device::Device(char const*)>:
c000e048:	83 ec 1c             	sub    esp,0x1c
c000e04b:	ba f0 2f 02 c0       	mov    edx,0xc0022ff0
c000e050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e054:	89 10                	mov    DWORD PTR [eax],edx
c000e056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e05a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e068:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e076:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e084:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e08e:	83 ec 08             	sub    esp,0x8
c000e091:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e095:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e099:	e8 9c ff ff ff       	call   c000e03a <Device::setName(char const*)>
c000e09e:	83 c4 10             	add    esp,0x10
c000e0a1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e0a9:	83 ec 0c             	sub    esp,0xc
c000e0ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0b0:	e8 ee b8 ff ff       	call   c00099a3 <malloc>
c000e0b5:	83 c4 10             	add    esp,0x10
c000e0b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e0be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e0c9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e0cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e0d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e0df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0e3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e0e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0f4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e0fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e10a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e118:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e126:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e134:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e13e:	90                   	nop
c000e13f:	83 c4 1c             	add    esp,0x1c
c000e142:	c3                   	ret    
c000e143:	90                   	nop

c000e144 <Device::getName()>:
c000e144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e148:	05 d0 00 00 00       	add    eax,0xd0
c000e14d:	c3                   	ret    

c000e14e <DriverlessDevice::DriverlessDevice(char const*)>:
c000e14e:	83 ec 0c             	sub    esp,0xc
c000e151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e155:	83 ec 08             	sub    esp,0x8
c000e158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e15c:	50                   	push   eax
c000e15d:	e8 e6 fe ff ff       	call   c000e048 <Device::Device(char const*)>
c000e162:	83 c4 10             	add    esp,0x10
c000e165:	ba 1c 30 02 c0       	mov    edx,0xc002301c
c000e16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e16e:	89 10                	mov    DWORD PTR [eax],edx
c000e170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e174:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e17e:	90                   	nop
c000e17f:	83 c4 0c             	add    esp,0xc
c000e182:	c3                   	ret    
c000e183:	90                   	nop

c000e184 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e184:	57                   	push   edi
c000e185:	56                   	push   esi
c000e186:	53                   	push   ebx
c000e187:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e18b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e18f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e193:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e199:	75 0c                	jne    c000e1a7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e19b:	52                   	push   edx
c000e19c:	52                   	push   edx
c000e19d:	53                   	push   ebx
c000e19e:	56                   	push   esi
c000e19f:	e8 12 2f 01 00       	call   c00210b6 <LinkedList<Device>::addElement(Device*)>
c000e1a4:	83 c4 10             	add    esp,0x10
c000e1a7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1b0:	74 12                	je     c000e1c4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e1b2:	50                   	push   eax
c000e1b3:	57                   	push   edi
c000e1b4:	56                   	push   esi
c000e1b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1b8:	e8 c7 ff ff ff       	call   c000e184 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e1bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	eb e9                	jmp    c000e1ad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e1c4:	5b                   	pop    ebx
c000e1c5:	5e                   	pop    esi
c000e1c6:	5f                   	pop    edi
c000e1c7:	c3                   	ret    

c000e1c8 <getDevicesOfType(DeviceType)>:
c000e1c8:	53                   	push   ebx
c000e1c9:	83 ec 14             	sub    esp,0x14
c000e1cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1d0:	53                   	push   ebx
c000e1d1:	e8 bc 2f 01 00       	call   c0021192 <LinkedList<Device>::LinkedList()>
c000e1d6:	83 c4 0c             	add    esp,0xc
c000e1d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1dd:	53                   	push   ebx
c000e1de:	ff 35 68 60 02 c0    	push   DWORD PTR ds:0xc0026068
c000e1e4:	e8 9b ff ff ff       	call   c000e184 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e1e9:	89 d8                	mov    eax,ebx
c000e1eb:	83 c4 18             	add    esp,0x18
c000e1ee:	5b                   	pop    ebx
c000e1ef:	c2 04 00             	ret    0x4

c000e1f2 <HardDiskController::HardDiskController(char const*)>:
c000e1f2:	83 ec 0c             	sub    esp,0xc
c000e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1f9:	83 ec 08             	sub    esp,0x8
c000e1fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e200:	50                   	push   eax
c000e201:	e8 42 fe ff ff       	call   c000e048 <Device::Device(char const*)>
c000e206:	83 c4 10             	add    esp,0x10
c000e209:	ba 48 30 02 c0       	mov    edx,0xc0023048
c000e20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e212:	89 10                	mov    DWORD PTR [eax],edx
c000e214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e218:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e222:	90                   	nop
c000e223:	83 c4 0c             	add    esp,0xc
c000e226:	c3                   	ret    
c000e227:	90                   	nop

c000e228 <HardDiskController::~HardDiskController()>:
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	ba 48 30 02 c0       	mov    edx,0xc0023048
c000e230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e234:	89 10                	mov    DWORD PTR [eax],edx
c000e236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e23a:	83 ec 0c             	sub    esp,0xc
c000e23d:	50                   	push   eax
c000e23e:	e8 cf fa ff ff       	call   c000dd12 <Device::~Device()>
c000e243:	83 c4 10             	add    esp,0x10
c000e246:	90                   	nop
c000e247:	83 c4 0c             	add    esp,0xc
c000e24a:	c3                   	ret    
c000e24b:	90                   	nop

c000e24c <HardDiskController::~HardDiskController()>:
c000e24c:	83 ec 0c             	sub    esp,0xc
c000e24f:	83 ec 0c             	sub    esp,0xc
c000e252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e256:	e8 cd ff ff ff       	call   c000e228 <HardDiskController::~HardDiskController()>
c000e25b:	83 c4 10             	add    esp,0x10
c000e25e:	83 ec 08             	sub    esp,0x8
c000e261:	68 58 01 00 00       	push   0x158
c000e266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e26a:	e8 b4 e6 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000e26f:	83 c4 10             	add    esp,0x10
c000e272:	83 c4 0c             	add    esp,0xc
c000e275:	c3                   	ret    

c000e276 <PhysicalDisk::eject()>:
c000e276:	83 c8 ff             	or     eax,0xffffffff
c000e279:	c3                   	ret    

c000e27a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e27a:	83 ec 0c             	sub    esp,0xc
c000e27d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e281:	83 ec 08             	sub    esp,0x8
c000e284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e288:	50                   	push   eax
c000e289:	e8 ba fd ff ff       	call   c000e048 <Device::Device(char const*)>
c000e28e:	83 c4 10             	add    esp,0x10
c000e291:	ba 74 30 02 c0       	mov    edx,0xc0023074
c000e296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e29a:	89 10                	mov    DWORD PTR [eax],edx
c000e29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e2c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e2dc:	90                   	nop
c000e2dd:	83 c4 0c             	add    esp,0xc
c000e2e0:	c3                   	ret    
c000e2e1:	90                   	nop

c000e2e2 <PhysicalDisk::startCache()>:
c000e2e2:	56                   	push   esi
c000e2e3:	53                   	push   ebx
c000e2e4:	83 ec 10             	sub    esp,0x10
c000e2e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2eb:	6a 44                	push   0x44
c000e2ed:	e8 b1 b6 ff ff       	call   c00099a3 <malloc>
c000e2f2:	89 c6                	mov    esi,eax
c000e2f4:	58                   	pop    eax
c000e2f5:	5a                   	pop    edx
c000e2f6:	53                   	push   ebx
c000e2f7:	56                   	push   esi
c000e2f8:	e8 0d 26 00 00       	call   c001090a <VCache::VCache(PhysicalDisk*)>
c000e2fd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e303:	83 c4 14             	add    esp,0x14
c000e306:	5b                   	pop    ebx
c000e307:	5e                   	pop    esi
c000e308:	c3                   	ret    
c000e309:	90                   	nop

c000e30a <PhysicalDisk::~PhysicalDisk()>:
c000e30a:	83 ec 0c             	sub    esp,0xc
c000e30d:	ba 74 30 02 c0       	mov    edx,0xc0023074
c000e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e316:	89 10                	mov    DWORD PTR [eax],edx
c000e318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31c:	83 ec 0c             	sub    esp,0xc
c000e31f:	50                   	push   eax
c000e320:	e8 ed f9 ff ff       	call   c000dd12 <Device::~Device()>
c000e325:	83 c4 10             	add    esp,0x10
c000e328:	90                   	nop
c000e329:	83 c4 0c             	add    esp,0xc
c000e32c:	c3                   	ret    
c000e32d:	90                   	nop

c000e32e <PhysicalDisk::~PhysicalDisk()>:
c000e32e:	83 ec 0c             	sub    esp,0xc
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e338:	e8 cd ff ff ff       	call   c000e30a <PhysicalDisk::~PhysicalDisk()>
c000e33d:	83 c4 10             	add    esp,0x10
c000e340:	83 ec 08             	sub    esp,0x8
c000e343:	68 6c 01 00 00       	push   0x16c
c000e348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34c:	e8 d2 e5 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000e351:	83 c4 10             	add    esp,0x10
c000e354:	83 c4 0c             	add    esp,0xc
c000e357:	c3                   	ret    

c000e358 <FPU::FPU(char const*)>:
c000e358:	83 ec 0c             	sub    esp,0xc
c000e35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35f:	83 ec 08             	sub    esp,0x8
c000e362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e366:	50                   	push   eax
c000e367:	e8 dc fc ff ff       	call   c000e048 <Device::Device(char const*)>
c000e36c:	83 c4 10             	add    esp,0x10
c000e36f:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c000e374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e378:	89 10                	mov    DWORD PTR [eax],edx
c000e37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e388:	90                   	nop
c000e389:	83 c4 0c             	add    esp,0xc
c000e38c:	c3                   	ret    
c000e38d:	90                   	nop

c000e38e <FPU::~FPU()>:
c000e38e:	83 ec 0c             	sub    esp,0xc
c000e391:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c000e396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39a:	89 10                	mov    DWORD PTR [eax],edx
c000e39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a0:	83 ec 0c             	sub    esp,0xc
c000e3a3:	50                   	push   eax
c000e3a4:	e8 69 f9 ff ff       	call   c000dd12 <Device::~Device()>
c000e3a9:	83 c4 10             	add    esp,0x10
c000e3ac:	90                   	nop
c000e3ad:	83 c4 0c             	add    esp,0xc
c000e3b0:	c3                   	ret    
c000e3b1:	90                   	nop

c000e3b2 <FPU::~FPU()>:
c000e3b2:	83 ec 0c             	sub    esp,0xc
c000e3b5:	83 ec 0c             	sub    esp,0xc
c000e3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3bc:	e8 cd ff ff ff       	call   c000e38e <FPU::~FPU()>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	83 ec 08             	sub    esp,0x8
c000e3c7:	68 58 01 00 00       	push   0x158
c000e3cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d0:	e8 4e e5 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000e3d5:	83 c4 10             	add    esp,0x10
c000e3d8:	83 c4 0c             	add    esp,0xc
c000e3db:	c3                   	ret    

c000e3dc <setupFPU()>:
c000e3dc:	53                   	push   ebx
c000e3dd:	83 ec 08             	sub    esp,0x8
c000e3e0:	8b 15 68 60 02 c0    	mov    edx,DWORD PTR ds:0xc0026068
c000e3e6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e3ed:	74 19                	je     c000e408 <setupFPU()+0x2c>
c000e3ef:	83 ec 0c             	sub    esp,0xc
c000e3f2:	68 58 01 00 00       	push   0x158
c000e3f7:	e8 a7 b5 ff ff       	call   c00099a3 <malloc>
c000e3fc:	89 c3                	mov    ebx,eax
c000e3fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000e401:	e8 b4 13 01 00       	call   c001f7ba <AVX::AVX()>
c000e406:	eb 5e                	jmp    c000e466 <setupFPU()+0x8a>
c000e408:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e40e:	84 c0                	test   al,al
c000e410:	79 1a                	jns    c000e42c <setupFPU()+0x50>
c000e412:	83 ec 0c             	sub    esp,0xc
c000e415:	68 58 01 00 00       	push   0x158
c000e41a:	e8 84 b5 ff ff       	call   c00099a3 <malloc>
c000e41f:	89 c3                	mov    ebx,eax
c000e421:	89 04 24             	mov    DWORD PTR [esp],eax
c000e424:	e8 b7 14 01 00       	call   c001f8e0 <SSE::SSE()>
c000e429:	eb 3b                	jmp    c000e466 <setupFPU()+0x8a>
c000e42b:	90                   	nop
c000e42c:	a8 20                	test   al,0x20
c000e42e:	74 1a                	je     c000e44a <setupFPU()+0x6e>
c000e430:	83 ec 0c             	sub    esp,0xc
c000e433:	68 58 01 00 00       	push   0x158
c000e438:	e8 66 b5 ff ff       	call   c00099a3 <malloc>
c000e43d:	89 c3                	mov    ebx,eax
c000e43f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e442:	e8 03 14 01 00       	call   c001f84a <MMX::MMX()>
c000e447:	eb 1d                	jmp    c000e466 <setupFPU()+0x8a>
c000e449:	90                   	nop
c000e44a:	a8 10                	test   al,0x10
c000e44c:	74 1e                	je     c000e46c <setupFPU()+0x90>
c000e44e:	83 ec 0c             	sub    esp,0xc
c000e451:	68 58 01 00 00       	push   0x158
c000e456:	e8 48 b5 ff ff       	call   c00099a3 <malloc>
c000e45b:	89 c3                	mov    ebx,eax
c000e45d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e460:	e8 09 15 01 00       	call   c001f96e <x87::x87()>
c000e465:	90                   	nop
c000e466:	83 c4 10             	add    esp,0x10
c000e469:	eb 25                	jmp    c000e490 <setupFPU()+0xb4>
c000e46b:	90                   	nop
c000e46c:	83 e0 ef             	and    eax,0xffffffef
c000e46f:	83 ec 0c             	sub    esp,0xc
c000e472:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e478:	68 a4 30 02 c0       	push   0xc00230a4
c000e47d:	e8 82 e5 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e482:	0f 20 c0             	mov    eax,cr0
c000e485:	83 c8 04             	or     eax,0x4
c000e488:	0f 22 c0             	mov    cr0,eax
c000e48b:	31 db                	xor    ebx,ebx
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 d8                	mov    eax,ebx
c000e492:	83 c4 08             	add    esp,0x8
c000e495:	5b                   	pop    ebx
c000e496:	c3                   	ret    
c000e497:	90                   	nop

c000e498 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e49c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4a0:	c1 e0 04             	shl    eax,0x4
c000e4a3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e4a7:	8d 50 10             	lea    edx,[eax+0x10]
c000e4aa:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e4b0:	74 08                	je     c000e4ba <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e4b2:	83 c0 04             	add    eax,0x4
c000e4b5:	39 d0                	cmp    eax,edx
c000e4b7:	75 f1                	jne    c000e4aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e4b9:	c3                   	ret    
c000e4ba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e4c4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e4ce:	eb e2                	jmp    c000e4b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e4d0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e4d0:	57                   	push   edi
c000e4d1:	31 c0                	xor    eax,eax
c000e4d3:	56                   	push   esi
c000e4d4:	53                   	push   ebx
c000e4d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e4d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e4dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e4e1:	89 da                	mov    edx,ebx
c000e4e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e4e7:	c1 e2 04             	shl    edx,0x4
c000e4ea:	01 ca                	add    edx,ecx
c000e4ec:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e4f4:	74 16                	je     c000e50c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e4f6:	40                   	inc    eax
c000e4f7:	83 f8 04             	cmp    eax,0x4
c000e4fa:	75 f0                	jne    c000e4ec <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e4fc:	c7 44 24 10 e8 30 02 c0 	mov    DWORD PTR [esp+0x10],0xc00230e8
c000e504:	5b                   	pop    ebx
c000e505:	5e                   	pop    esi
c000e506:	5f                   	pop    edi
c000e507:	e9 37 5d 00 00       	jmp    c0014243 <Krnl::panic(char const*)>
c000e50c:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e50f:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e512:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e518:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e51e:	5b                   	pop    ebx
c000e51f:	5e                   	pop    esi
c000e520:	5f                   	pop    edi
c000e521:	c3                   	ret    

c000e522 <doubleFault(regs*, void*)>:
c000e522:	55                   	push   ebp
c000e523:	89 e5                	mov    ebp,esp
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	83 ec 0c             	sub    esp,0xc
c000e52b:	68 f5 30 02 c0       	push   0xc00230f5
c000e530:	e8 0e 5d 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000e535:	83 c4 10             	add    esp,0x10
c000e538:	90                   	nop
c000e539:	c9                   	leave  
c000e53a:	c3                   	ret    
c000e53b:	90                   	nop

c000e53c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e53c:	56                   	push   esi
c000e53d:	53                   	push   ebx
c000e53e:	50                   	push   eax
c000e53f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e543:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e547:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e54c:	75 35                	jne    c000e583 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e54e:	8d 43 20             	lea    eax,[ebx+0x20]
c000e551:	31 d2                	xor    edx,edx
c000e553:	89 c1                	mov    ecx,eax
c000e555:	c1 e1 04             	shl    ecx,0x4
c000e558:	01 f1                	add    ecx,esi
c000e55a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e562:	74 3e                	je     c000e5a2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e564:	42                   	inc    edx
c000e565:	83 fa 04             	cmp    edx,0x4
c000e568:	75 f0                	jne    c000e55a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e56a:	83 ec 0c             	sub    esp,0xc
c000e56d:	68 0f 31 02 c0       	push   0xc002310f
c000e572:	e8 cc 5c 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000e577:	83 c4 10             	add    esp,0x10
c000e57a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e57f:	5a                   	pop    edx
c000e580:	5b                   	pop    ebx
c000e581:	5e                   	pop    esi
c000e582:	c3                   	ret    
c000e583:	83 ec 0c             	sub    esp,0xc
c000e586:	56                   	push   esi
c000e587:	e8 b8 fb ff ff       	call   c000e144 <Device::getName()>
c000e58c:	83 c4 10             	add    esp,0x10
c000e58f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e592:	75 ba                	jne    c000e54e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e594:	83 fb 0f             	cmp    ebx,0xf
c000e597:	7f 29                	jg     c000e5c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e599:	0f b6 9b 60 57 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda8a0]
c000e5a0:	eb ac                	jmp    c000e54e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e5a2:	8d 04 82             	lea    eax,[edx+eax*4]
c000e5a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e5a9:	8d 04 86             	lea    eax,[esi+eax*4]
c000e5ac:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e5b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e5b6:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e5bc:	89 d8                	mov    eax,ebx
c000e5be:	5a                   	pop    edx
c000e5bf:	5b                   	pop    ebx
c000e5c0:	5e                   	pop    esi
c000e5c1:	c3                   	ret    
c000e5c2:	83 ec 0c             	sub    esp,0xc
c000e5c5:	68 02 31 02 c0       	push   0xc0023102
c000e5ca:	e8 74 5c 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000e5cf:	83 c4 10             	add    esp,0x10
c000e5d2:	e9 77 ff ff ff       	jmp    c000e54e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e5d7:	90                   	nop

c000e5d8 <InterruptController::clearAllHandlers(int, bool)>:
c000e5d8:	56                   	push   esi
c000e5d9:	53                   	push   ebx
c000e5da:	52                   	push   edx
c000e5db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e5e3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e5e8:	75 61                	jne    c000e64b <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e5ea:	8d 46 20             	lea    eax,[esi+0x20]
c000e5ed:	c1 e6 04             	shl    esi,0x4
c000e5f0:	c1 e0 04             	shl    eax,0x4
c000e5f3:	01 de                	add    esi,ebx
c000e5f5:	01 d8                	add    eax,ebx
c000e5f7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e601:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e60b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e615:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e61f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e629:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e633:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e63d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e647:	58                   	pop    eax
c000e648:	5b                   	pop    ebx
c000e649:	5e                   	pop    esi
c000e64a:	c3                   	ret    
c000e64b:	83 ec 0c             	sub    esp,0xc
c000e64e:	53                   	push   ebx
c000e64f:	e8 f0 fa ff ff       	call   c000e144 <Device::getName()>
c000e654:	83 c4 10             	add    esp,0x10
c000e657:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e65a:	75 8e                	jne    c000e5ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e65c:	83 fe 0f             	cmp    esi,0xf
c000e65f:	7f 09                	jg     c000e66a <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e661:	0f b6 b6 60 57 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda8a0]
c000e668:	eb 80                	jmp    c000e5ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	68 1c 31 02 c0       	push   0xc002311c
c000e672:	e8 cc 5b 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000e677:	83 c4 10             	add    esp,0x10
c000e67a:	e9 6b ff ff ff       	jmp    c000e5ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e67f:	90                   	nop

c000e680 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e680:	56                   	push   esi
c000e681:	53                   	push   ebx
c000e682:	52                   	push   edx
c000e683:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e68b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e690:	75 3a                	jne    c000e6cc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e692:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e696:	8d 50 20             	lea    edx,[eax+0x20]
c000e699:	c1 e2 04             	shl    edx,0x4
c000e69c:	8d 04 16             	lea    eax,[esi+edx*1]
c000e69f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e6a3:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e6a9:	74 0b                	je     c000e6b6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e6ab:	83 c0 04             	add    eax,0x4
c000e6ae:	39 d0                	cmp    eax,edx
c000e6b0:	75 f1                	jne    c000e6a3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e6b2:	58                   	pop    eax
c000e6b3:	5b                   	pop    ebx
c000e6b4:	5e                   	pop    esi
c000e6b5:	c3                   	ret    
c000e6b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e6c0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e6ca:	eb df                	jmp    c000e6ab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e6cc:	83 ec 0c             	sub    esp,0xc
c000e6cf:	56                   	push   esi
c000e6d0:	e8 6f fa ff ff       	call   c000e144 <Device::getName()>
c000e6d5:	83 c4 10             	add    esp,0x10
c000e6d8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e6db:	75 b5                	jne    c000e692 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e6dd:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e6e2:	7f 11                	jg     c000e6f5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e6e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e6e8:	0f b6 80 60 57 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda8a0]
c000e6ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e6f3:	eb 9d                	jmp    c000e692 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e6f5:	83 ec 0c             	sub    esp,0xc
c000e6f8:	68 29 31 02 c0       	push   0xc0023129
c000e6fd:	e8 41 5b 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000e702:	83 c4 10             	add    esp,0x10
c000e705:	eb 8b                	jmp    c000e692 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e707 <nmiHandler(regs*, void*)>:
c000e707:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000e70c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e710:	e9 5d aa ff ff       	jmp    c0009172 <Computer::handleNMI()>

c000e715 <int_handler>:
c000e715:	55                   	push   ebp
c000e716:	57                   	push   edi
c000e717:	56                   	push   esi
c000e718:	53                   	push   ebx
c000e719:	83 ec 0c             	sub    esp,0xc
c000e71c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e720:	80 3d 84 6b 02 c0 00 	cmp    BYTE PTR ds:0xc0026b84,0x0
c000e727:	74 0b                	je     c000e734 <int_handler+0x1f>
c000e729:	fa                   	cli    
c000e72a:	f4                   	hlt    
c000e72b:	80 3d 84 6b 02 c0 00 	cmp    BYTE PTR ds:0xc0026b84,0x0
c000e732:	75 f5                	jne    c000e729 <int_handler+0x14>
c000e734:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000e739:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e73c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e742:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e748:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e74b:	83 f8 17             	cmp    eax,0x17
c000e74e:	77 13                	ja     c000e763 <int_handler+0x4e>
c000e750:	83 ec 08             	sub    esp,0x8
c000e753:	8b 17                	mov    edx,DWORD PTR [edi]
c000e755:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e758:	0f b6 c0             	movzx  eax,al
c000e75b:	50                   	push   eax
c000e75c:	57                   	push   edi
c000e75d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e760:	83 c4 10             	add    esp,0x10
c000e763:	83 c3 15             	add    ebx,0x15
c000e766:	c1 e3 04             	shl    ebx,0x4
c000e769:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e76d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e774:	31 db                	xor    ebx,ebx
c000e776:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e77a:	85 c0                	test   eax,eax
c000e77c:	74 13                	je     c000e791 <int_handler+0x7c>
c000e77e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e781:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e785:	74 1c                	je     c000e7a3 <int_handler+0x8e>
c000e787:	83 ec 08             	sub    esp,0x8
c000e78a:	52                   	push   edx
c000e78b:	56                   	push   esi
c000e78c:	ff d0                	call   eax
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	43                   	inc    ebx
c000e792:	83 fb 04             	cmp    ebx,0x4
c000e795:	75 df                	jne    c000e776 <int_handler+0x61>
c000e797:	83 c4 0c             	add    esp,0xc
c000e79a:	31 c0                	xor    eax,eax
c000e79c:	5b                   	pop    ebx
c000e79d:	31 d2                	xor    edx,edx
c000e79f:	5e                   	pop    esi
c000e7a0:	5f                   	pop    edi
c000e7a1:	5d                   	pop    ebp
c000e7a2:	c3                   	ret    
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	52                   	push   edx
c000e7a7:	56                   	push   esi
c000e7a8:	ff d0                	call   eax
c000e7aa:	83 c4 10             	add    esp,0x10
c000e7ad:	83 c4 0c             	add    esp,0xc
c000e7b0:	5b                   	pop    ebx
c000e7b1:	5e                   	pop    esi
c000e7b2:	5f                   	pop    edi
c000e7b3:	5d                   	pop    ebp
c000e7b4:	c3                   	ret    
c000e7b5:	90                   	nop

c000e7b6 <InterruptController::InterruptController(char const*)>:
c000e7b6:	83 ec 1c             	sub    esp,0x1c
c000e7b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7bd:	83 ec 08             	sub    esp,0x8
c000e7c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7c4:	50                   	push   eax
c000e7c5:	e8 7e f8 ff ff       	call   c000e048 <Device::Device(char const*)>
c000e7ca:	83 c4 10             	add    esp,0x10
c000e7cd:	ba e0 33 02 c0       	mov    edx,0xc00233e0
c000e7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d6:	89 10                	mov    DWORD PTR [eax],edx
c000e7d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7dc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e7e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7ee:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e7f6:	7f 5e                	jg     c000e856 <InterruptController::InterruptController(char const*)+0xa0>
c000e7f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e800:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e805:	7f 49                	jg     c000e850 <InterruptController::InterruptController(char const*)+0x9a>
c000e807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e80b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e80f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e816:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e81a:	01 ca                	add    edx,ecx
c000e81c:	83 c2 54             	add    edx,0x54
c000e81f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e82b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e82f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e836:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e83a:	01 ca                	add    edx,ecx
c000e83c:	81 c2 54 04 00 00    	add    edx,0x454
c000e842:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e84a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e84e:	eb b0                	jmp    c000e800 <InterruptController::InterruptController(char const*)+0x4a>
c000e850:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e854:	eb 98                	jmp    c000e7ee <InterruptController::InterruptController(char const*)+0x38>
c000e856:	90                   	nop
c000e857:	83 c4 1c             	add    esp,0x1c
c000e85a:	c3                   	ret    
c000e85b:	90                   	nop

c000e85c <InterruptController::~InterruptController()>:
c000e85c:	83 ec 0c             	sub    esp,0xc
c000e85f:	ba e0 33 02 c0       	mov    edx,0xc00233e0
c000e864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e868:	89 10                	mov    DWORD PTR [eax],edx
c000e86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86e:	83 ec 0c             	sub    esp,0xc
c000e871:	50                   	push   eax
c000e872:	e8 9b f4 ff ff       	call   c000dd12 <Device::~Device()>
c000e877:	83 c4 10             	add    esp,0x10
c000e87a:	90                   	nop
c000e87b:	83 c4 0c             	add    esp,0xc
c000e87e:	c3                   	ret    
c000e87f:	90                   	nop

c000e880 <InterruptController::~InterruptController()>:
c000e880:	83 ec 0c             	sub    esp,0xc
c000e883:	83 ec 0c             	sub    esp,0xc
c000e886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e88a:	e8 cd ff ff ff       	call   c000e85c <InterruptController::~InterruptController()>
c000e88f:	83 c4 10             	add    esp,0x10
c000e892:	83 ec 08             	sub    esp,0x8
c000e895:	68 58 21 00 00       	push   0x2158
c000e89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e89e:	e8 80 e0 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000e8a3:	83 c4 10             	add    esp,0x10
c000e8a6:	83 c4 0c             	add    esp,0xc
c000e8a9:	c3                   	ret    

c000e8aa <displayDebugInfo(regs*)>:
c000e8aa:	55                   	push   ebp
c000e8ab:	57                   	push   edi
c000e8ac:	56                   	push   esi
c000e8ad:	53                   	push   ebx
c000e8ae:	83 ec 24             	sub    esp,0x24
c000e8b1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8b5:	0f 20 c2             	mov    edx,cr0
c000e8b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e8bc:	0f 20 d7             	mov    edi,cr2
c000e8bf:	0f 20 de             	mov    esi,cr3
c000e8c2:	0f 20 e5             	mov    ebp,cr4
c000e8c5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e8c8:	68 36 31 02 c0       	push   0xc0023136
c000e8cd:	e8 32 e1 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e8d2:	59                   	pop    ecx
c000e8d3:	58                   	pop    eax
c000e8d4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e8d7:	68 41 31 02 c0       	push   0xc0023141
c000e8dc:	e8 23 e1 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e8e1:	58                   	pop    eax
c000e8e2:	5a                   	pop    edx
c000e8e3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e8e6:	68 4c 31 02 c0       	push   0xc002314c
c000e8eb:	e8 14 e1 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e8f0:	59                   	pop    ecx
c000e8f1:	58                   	pop    eax
c000e8f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e8f5:	68 57 31 02 c0       	push   0xc0023157
c000e8fa:	e8 05 e1 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e8ff:	58                   	pop    eax
c000e900:	5a                   	pop    edx
c000e901:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e904:	68 62 31 02 c0       	push   0xc0023162
c000e909:	e8 f6 e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e90e:	59                   	pop    ecx
c000e90f:	58                   	pop    eax
c000e910:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e913:	68 6d 31 02 c0       	push   0xc002316d
c000e918:	e8 e7 e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e91d:	58                   	pop    eax
c000e91e:	5a                   	pop    edx
c000e91f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e922:	68 78 31 02 c0       	push   0xc0023178
c000e927:	e8 d8 e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e92c:	59                   	pop    ecx
c000e92d:	58                   	pop    eax
c000e92e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e931:	68 83 31 02 c0       	push   0xc0023183
c000e936:	e8 c9 e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e93b:	58                   	pop    eax
c000e93c:	5a                   	pop    edx
c000e93d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e940:	68 8e 31 02 c0       	push   0xc002318e
c000e945:	e8 ba e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e94a:	59                   	pop    ecx
c000e94b:	58                   	pop    eax
c000e94c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e94f:	68 9d 31 02 c0       	push   0xc002319d
c000e954:	e8 ab e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e959:	58                   	pop    eax
c000e95a:	5a                   	pop    edx
c000e95b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e95e:	68 a8 31 02 c0       	push   0xc00231a8
c000e963:	e8 9c e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e968:	59                   	pop    ecx
c000e969:	58                   	pop    eax
c000e96a:	57                   	push   edi
c000e96b:	68 b3 31 02 c0       	push   0xc00231b3
c000e970:	e8 8f e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e975:	58                   	pop    eax
c000e976:	5a                   	pop    edx
c000e977:	56                   	push   esi
c000e978:	68 be 31 02 c0       	push   0xc00231be
c000e97d:	e8 82 e0 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000e982:	59                   	pop    ecx
c000e983:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000e988:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e98e:	e8 ca bd ff ff       	call   c000a75d <setActiveTerminal(VgaText*)>
c000e993:	58                   	pop    eax
c000e994:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000e997:	5a                   	pop    edx
c000e998:	c1 e0 05             	shl    eax,0x5
c000e99b:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e9a0:	50                   	push   eax
c000e9a1:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000e9a6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9ac:	e8 b9 c2 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000e9b1:	59                   	pop    ecx
c000e9b2:	58                   	pop    eax
c000e9b3:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000e9b8:	68 c9 31 02 c0       	push   0xc00231c9
c000e9bd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9c3:	e8 a2 c2 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000e9c8:	58                   	pop    eax
c000e9c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9ce:	5a                   	pop    edx
c000e9cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e9d2:	83 c0 0c             	add    eax,0xc
c000e9d5:	50                   	push   eax
c000e9d6:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000e9db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9e1:	e8 84 c2 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000e9e6:	59                   	pop    ecx
c000e9e7:	58                   	pop    eax
c000e9e8:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000e9ed:	68 d2 31 02 c0       	push   0xc00231d2
c000e9f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9f8:	e8 6d c2 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000e9fd:	58                   	pop    eax
c000e9fe:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ea03:	5a                   	pop    edx
c000ea04:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea0d:	e8 12 c2 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ea12:	59                   	pop    ecx
c000ea13:	58                   	pop    eax
c000ea14:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ea19:	68 da 31 02 c0       	push   0xc00231da
c000ea1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea24:	e8 41 c2 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ea29:	58                   	pop    eax
c000ea2a:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ea2f:	5a                   	pop    edx
c000ea30:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ea33:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea39:	e8 e6 c1 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ea3e:	59                   	pop    ecx
c000ea3f:	58                   	pop    eax
c000ea40:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ea45:	68 e2 31 02 c0       	push   0xc00231e2
c000ea4a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea50:	e8 15 c2 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ea55:	58                   	pop    eax
c000ea56:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ea5b:	5a                   	pop    edx
c000ea5c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ea5f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea65:	e8 ba c1 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ea6a:	59                   	pop    ecx
c000ea6b:	58                   	pop    eax
c000ea6c:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ea71:	68 ea 31 02 c0       	push   0xc00231ea
c000ea76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea7c:	e8 e9 c1 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ea81:	58                   	pop    eax
c000ea82:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ea87:	5a                   	pop    edx
c000ea88:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ea8b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea91:	e8 8e c1 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ea96:	59                   	pop    ecx
c000ea97:	58                   	pop    eax
c000ea98:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ea9d:	68 f2 31 02 c0       	push   0xc00231f2
c000eaa2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaa8:	e8 bd c1 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000eaad:	58                   	pop    eax
c000eaae:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eab3:	5a                   	pop    edx
c000eab4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eab7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eabd:	e8 62 c1 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000eac2:	59                   	pop    ecx
c000eac3:	58                   	pop    eax
c000eac4:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eac9:	68 fa 31 02 c0       	push   0xc00231fa
c000eace:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ead4:	e8 91 c1 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ead9:	58                   	pop    eax
c000eada:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eadf:	5a                   	pop    edx
c000eae0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eae3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eae9:	e8 36 c1 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000eaee:	59                   	pop    ecx
c000eaef:	58                   	pop    eax
c000eaf0:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eaf5:	68 02 32 02 c0       	push   0xc0023202
c000eafa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb00:	e8 65 c1 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000eb05:	58                   	pop    eax
c000eb06:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eb0b:	5a                   	pop    edx
c000eb0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb10:	52                   	push   edx
c000eb11:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb17:	e8 08 c1 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000eb1c:	59                   	pop    ecx
c000eb1d:	58                   	pop    eax
c000eb1e:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eb23:	68 0b 32 02 c0       	push   0xc002320b
c000eb28:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb2e:	e8 37 c1 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000eb33:	58                   	pop    eax
c000eb34:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eb39:	5a                   	pop    edx
c000eb3a:	57                   	push   edi
c000eb3b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb41:	e8 de c0 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000eb46:	59                   	pop    ecx
c000eb47:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eb4c:	5f                   	pop    edi
c000eb4d:	68 13 32 02 c0       	push   0xc0023213
c000eb52:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb58:	e8 0d c1 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000eb5d:	58                   	pop    eax
c000eb5e:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eb63:	5a                   	pop    edx
c000eb64:	56                   	push   esi
c000eb65:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb6b:	e8 b4 c0 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000eb70:	59                   	pop    ecx
c000eb71:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eb76:	5e                   	pop    esi
c000eb77:	68 1b 32 02 c0       	push   0xc002321b
c000eb7c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb82:	e8 e3 c0 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000eb87:	5f                   	pop    edi
c000eb88:	58                   	pop    eax
c000eb89:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eb8e:	55                   	push   ebp
c000eb8f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb95:	e8 8a c0 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000eb9a:	58                   	pop    eax
c000eb9b:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eba0:	5a                   	pop    edx
c000eba1:	68 23 32 02 c0       	push   0xc0023223
c000eba6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebac:	e8 b9 c0 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ebb1:	0f 21 c0             	mov    eax,db0
c000ebb4:	59                   	pop    ecx
c000ebb5:	5e                   	pop    esi
c000ebb6:	50                   	push   eax
c000ebb7:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ebbc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebc2:	e8 5d c0 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ebc7:	5f                   	pop    edi
c000ebc8:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ebcd:	5d                   	pop    ebp
c000ebce:	68 2c 32 02 c0       	push   0xc002322c
c000ebd3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebd9:	e8 8c c0 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ebde:	0f 21 c8             	mov    eax,db1
c000ebe1:	5a                   	pop    edx
c000ebe2:	59                   	pop    ecx
c000ebe3:	50                   	push   eax
c000ebe4:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ebe9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebef:	e8 30 c0 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ebf4:	5e                   	pop    esi
c000ebf5:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ebfa:	5f                   	pop    edi
c000ebfb:	68 34 32 02 c0       	push   0xc0023234
c000ec00:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec06:	e8 5f c0 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ec0b:	0f 21 d0             	mov    eax,db2
c000ec0e:	5d                   	pop    ebp
c000ec0f:	5a                   	pop    edx
c000ec10:	50                   	push   eax
c000ec11:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ec16:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec1c:	e8 03 c0 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ec21:	59                   	pop    ecx
c000ec22:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ec27:	5e                   	pop    esi
c000ec28:	68 3c 32 02 c0       	push   0xc002323c
c000ec2d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec33:	e8 32 c0 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ec38:	0f 21 d8             	mov    eax,db3
c000ec3b:	5f                   	pop    edi
c000ec3c:	5d                   	pop    ebp
c000ec3d:	50                   	push   eax
c000ec3e:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ec43:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec49:	e8 d6 bf ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ec4e:	58                   	pop    eax
c000ec4f:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ec54:	5a                   	pop    edx
c000ec55:	68 44 32 02 c0       	push   0xc0023244
c000ec5a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec60:	e8 05 c0 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ec65:	0f 21 f0             	mov    eax,db6
c000ec68:	59                   	pop    ecx
c000ec69:	5e                   	pop    esi
c000ec6a:	50                   	push   eax
c000ec6b:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ec70:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec76:	e8 a9 bf ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ec7b:	5f                   	pop    edi
c000ec7c:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ec81:	5d                   	pop    ebp
c000ec82:	68 4c 32 02 c0       	push   0xc002324c
c000ec87:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec8d:	e8 d8 bf ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ec92:	0f 21 f8             	mov    eax,db7
c000ec95:	5a                   	pop    edx
c000ec96:	59                   	pop    ecx
c000ec97:	50                   	push   eax
c000ec98:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ec9d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eca3:	e8 7c bf ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000eca8:	5e                   	pop    esi
c000eca9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ecac:	e8 14 87 00 00       	call   c00173c5 <Thr::getDriverNameFromAddress(unsigned long)>
c000ecb1:	83 c4 10             	add    esp,0x10
c000ecb4:	85 c0                	test   eax,eax
c000ecb6:	74 7d                	je     c000ed35 <displayDebugInfo(regs*)+0x48b>
c000ecb8:	89 c6                	mov    esi,eax
c000ecba:	50                   	push   eax
c000ecbb:	50                   	push   eax
c000ecbc:	56                   	push   esi
c000ecbd:	68 54 32 02 c0       	push   0xc0023254
c000ecc2:	e8 3d dd ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000ecc7:	5a                   	pop    edx
c000ecc8:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000eccd:	59                   	pop    ecx
c000ecce:	68 62 32 02 c0       	push   0xc0023262
c000ecd3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd9:	e8 8c bf ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ecde:	5f                   	pop    edi
c000ecdf:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ece4:	5d                   	pop    ebp
c000ece5:	56                   	push   esi
c000ece6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecec:	e8 79 bf ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ecf1:	58                   	pop    eax
c000ecf2:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ecf7:	5a                   	pop    edx
c000ecf8:	68 6e 32 02 c0       	push   0xc002326e
c000ecfd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed03:	e8 62 bf ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c000ed08:	59                   	pop    ecx
c000ed09:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000ed0e:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ed14:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed17:	e8 e0 86 00 00       	call   c00173fc <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed1c:	5b                   	pop    ebx
c000ed1d:	5d                   	pop    ebp
c000ed1e:	50                   	push   eax
c000ed1f:	57                   	push   edi
c000ed20:	e8 ff be ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c000ed25:	58                   	pop    eax
c000ed26:	5a                   	pop    edx
c000ed27:	56                   	push   esi
c000ed28:	68 7a 32 02 c0       	push   0xc002327a
c000ed2d:	e8 d2 dc ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000ed32:	83 c4 10             	add    esp,0x10
c000ed35:	fa                   	cli    
c000ed36:	f4                   	hlt    
c000ed37:	eb fe                	jmp    c000ed37 <displayDebugInfo(regs*)+0x48d>

c000ed39 <x87EmulHandler(regs*, void*)>:
c000ed39:	83 ec 0c             	sub    esp,0xc
c000ed3c:	0f 20 c2             	mov    edx,cr0
c000ed3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed44:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000ed48:	75 4b                	jne    c000ed95 <x87EmulHandler(regs*, void*)+0x5c>
c000ed4a:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000ed4f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000ed55:	85 c0                	test   eax,eax
c000ed57:	74 05                	je     c000ed5e <x87EmulHandler(regs*, void*)+0x25>
c000ed59:	83 e2 08             	and    edx,0x8
c000ed5c:	75 17                	jne    c000ed75 <x87EmulHandler(regs*, void*)+0x3c>
c000ed5e:	83 ec 0c             	sub    esp,0xc
c000ed61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed65:	e8 4c aa 00 00       	call   c00197b6 <Vm::x87Handler(regs*)>
c000ed6a:	83 c4 10             	add    esp,0x10
c000ed6d:	84 c0                	test   al,al
c000ed6f:	74 24                	je     c000ed95 <x87EmulHandler(regs*, void*)+0x5c>
c000ed71:	83 c4 0c             	add    esp,0xc
c000ed74:	c3                   	ret    
c000ed75:	83 ec 0c             	sub    esp,0xc
c000ed78:	68 a0 32 02 c0       	push   0xc00232a0
c000ed7d:	e8 82 dc ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000ed82:	0f 06                	clts   
c000ed84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed89:	83 c4 10             	add    esp,0x10
c000ed8c:	a3 e8 61 02 c0       	mov    ds:0xc00261e8,eax
c000ed91:	83 c4 0c             	add    esp,0xc
c000ed94:	c3                   	ret    
c000ed95:	83 ec 0c             	sub    esp,0xc
c000ed98:	68 8a 32 02 c0       	push   0xc002328a
c000ed9d:	e8 62 dc ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000eda2:	5a                   	pop    edx
c000eda3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eda7:	e8 fe fa ff ff       	call   c000e8aa <displayDebugInfo(regs*)>

c000edac <gpFault(regs*, void*)>:
c000edac:	53                   	push   ebx
c000edad:	83 ec 14             	sub    esp,0x14
c000edb0:	c7 05 e4 61 02 c0 84 8c 01 c0 	mov    DWORD PTR ds:0xc00261e4,0xc0018c84
c000edba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000edbe:	53                   	push   ebx
c000edbf:	e8 c0 9e 00 00       	call   c0018c84 <Vm::faultHandler(regs*)>
c000edc4:	83 c4 10             	add    esp,0x10
c000edc7:	84 c0                	test   al,al
c000edc9:	74 05                	je     c000edd0 <gpFault(regs*, void*)+0x24>
c000edcb:	83 c4 08             	add    esp,0x8
c000edce:	5b                   	pop    ebx
c000edcf:	c3                   	ret    
c000edd0:	83 ec 0c             	sub    esp,0xc
c000edd3:	68 ad 32 02 c0       	push   0xc00232ad
c000edd8:	e8 27 dc ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000eddd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ede0:	e8 c5 fa ff ff       	call   c000e8aa <displayDebugInfo(regs*)>

c000ede5 <pgFault(regs*, void*)>:
c000ede5:	53                   	push   ebx
c000ede6:	83 ec 10             	sub    esp,0x10
c000ede9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eded:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000edf0:	68 c8 32 02 c0       	push   0xc00232c8
c000edf5:	e8 0a dc ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000edfa:	0f 20 d0             	mov    eax,cr2
c000edfd:	5a                   	pop    edx
c000edfe:	59                   	pop    ecx
c000edff:	50                   	push   eax
c000ee00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee05:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee08:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ee0e:	e8 ef d6 ff ff       	call   c000c502 <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee13:	83 c4 10             	add    esp,0x10
c000ee16:	84 c0                	test   al,al
c000ee18:	74 05                	je     c000ee1f <pgFault(regs*, void*)+0x3a>
c000ee1a:	83 c4 08             	add    esp,0x8
c000ee1d:	5b                   	pop    ebx
c000ee1e:	c3                   	ret    
c000ee1f:	83 ec 0c             	sub    esp,0xc
c000ee22:	68 dd 32 02 c0       	push   0xc00232dd
c000ee27:	e8 d8 db ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000ee2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee2f:	e8 76 fa ff ff       	call   c000e8aa <displayDebugInfo(regs*)>

c000ee34 <otherISRHandler(regs*, void*)>:
c000ee34:	53                   	push   ebx
c000ee35:	83 ec 0c             	sub    esp,0xc
c000ee38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee3c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ee3f:	50                   	push   eax
c000ee40:	50                   	push   eax
c000ee41:	68 ea 32 02 c0       	push   0xc00232ea
c000ee46:	e8 b9 db ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000ee4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee4e:	e8 57 fa ff ff       	call   c000e8aa <displayDebugInfo(regs*)>

c000ee53 <opcodeFault(regs*, void*)>:
c000ee53:	55                   	push   ebp
c000ee54:	89 e5                	mov    ebp,esp
c000ee56:	56                   	push   esi
c000ee57:	53                   	push   ebx
c000ee58:	83 ec 30             	sub    esp,0x30
c000ee5b:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000ee60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ee66:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000ee6c:	84 c0                	test   al,al
c000ee6e:	74 24                	je     c000ee94 <opcodeFault(regs*, void*)+0x41>
c000ee70:	83 ec 0c             	sub    esp,0xc
c000ee73:	68 08 33 02 c0       	push   0xc0023308
c000ee78:	e8 87 db ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000ee7d:	83 c4 10             	add    esp,0x10
c000ee80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ee86:	8d 50 19             	lea    edx,[eax+0x19]
c000ee89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee8c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ee8f:	e9 7b 03 00 00       	jmp    c000f20f <opcodeFault(regs*, void*)+0x3bc>
c000ee94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ee9a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ee9d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000eea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eea4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eea7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000eeaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eead:	8a 00                	mov    al,BYTE PTR [eax]
c000eeaf:	3c f0                	cmp    al,0xf0
c000eeb1:	75 17                	jne    c000eeca <opcodeFault(regs*, void*)+0x77>
c000eeb3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eeb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eeb9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eebc:	8d 50 01             	lea    edx,[eax+0x1]
c000eebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eec2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000eec5:	e9 d6 00 00 00       	jmp    c000efa0 <opcodeFault(regs*, void*)+0x14d>
c000eeca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eecd:	8a 00                	mov    al,BYTE PTR [eax]
c000eecf:	3c f2                	cmp    al,0xf2
c000eed1:	74 09                	je     c000eedc <opcodeFault(regs*, void*)+0x89>
c000eed3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eed6:	8a 00                	mov    al,BYTE PTR [eax]
c000eed8:	3c f3                	cmp    al,0xf3
c000eeda:	75 1b                	jne    c000eef7 <opcodeFault(regs*, void*)+0xa4>
c000eedc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000eee0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eee6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eee9:	8d 50 01             	lea    edx,[eax+0x1]
c000eeec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eeef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000eef2:	e9 a9 00 00 00       	jmp    c000efa0 <opcodeFault(regs*, void*)+0x14d>
c000eef7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eefa:	8a 00                	mov    al,BYTE PTR [eax]
c000eefc:	3c 66                	cmp    al,0x66
c000eefe:	75 1b                	jne    c000ef1b <opcodeFault(regs*, void*)+0xc8>
c000ef00:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef04:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef0a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef0d:	8d 50 01             	lea    edx,[eax+0x1]
c000ef10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef13:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef16:	e9 85 00 00 00       	jmp    c000efa0 <opcodeFault(regs*, void*)+0x14d>
c000ef1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef1e:	8a 00                	mov    al,BYTE PTR [eax]
c000ef20:	3c 67                	cmp    al,0x67
c000ef22:	75 18                	jne    c000ef3c <opcodeFault(regs*, void*)+0xe9>
c000ef24:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef31:	8d 50 01             	lea    edx,[eax+0x1]
c000ef34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef3a:	eb 64                	jmp    c000efa0 <opcodeFault(regs*, void*)+0x14d>
c000ef3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef3f:	8a 00                	mov    al,BYTE PTR [eax]
c000ef41:	3c 2e                	cmp    al,0x2e
c000ef43:	74 09                	je     c000ef4e <opcodeFault(regs*, void*)+0xfb>
c000ef45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef48:	8a 00                	mov    al,BYTE PTR [eax]
c000ef4a:	3c 3e                	cmp    al,0x3e
c000ef4c:	75 18                	jne    c000ef66 <opcodeFault(regs*, void*)+0x113>
c000ef4e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef52:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef5b:	8d 50 01             	lea    edx,[eax+0x1]
c000ef5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef61:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef64:	eb 3a                	jmp    c000efa0 <opcodeFault(regs*, void*)+0x14d>
c000ef66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef69:	8a 00                	mov    al,BYTE PTR [eax]
c000ef6b:	3c 36                	cmp    al,0x36
c000ef6d:	74 1b                	je     c000ef8a <opcodeFault(regs*, void*)+0x137>
c000ef6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef72:	8a 00                	mov    al,BYTE PTR [eax]
c000ef74:	3c 26                	cmp    al,0x26
c000ef76:	74 12                	je     c000ef8a <opcodeFault(regs*, void*)+0x137>
c000ef78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef7b:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7d:	3c 64                	cmp    al,0x64
c000ef7f:	74 09                	je     c000ef8a <opcodeFault(regs*, void*)+0x137>
c000ef81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef84:	8a 00                	mov    al,BYTE PTR [eax]
c000ef86:	3c 65                	cmp    al,0x65
c000ef88:	75 16                	jne    c000efa0 <opcodeFault(regs*, void*)+0x14d>
c000ef8a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef8e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef94:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef97:	8d 50 01             	lea    edx,[eax+0x1]
c000ef9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef9d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efa0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efa3:	8a 00                	mov    al,BYTE PTR [eax]
c000efa5:	3c 0f                	cmp    al,0xf
c000efa7:	0f 85 8d 01 00 00    	jne    c000f13a <opcodeFault(regs*, void*)+0x2e7>
c000efad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb0:	40                   	inc    eax
c000efb1:	8a 00                	mov    al,BYTE PTR [eax]
c000efb3:	3c c7                	cmp    al,0xc7
c000efb5:	0f 85 7f 01 00 00    	jne    c000f13a <opcodeFault(regs*, void*)+0x2e7>
c000efbb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efc1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efc4:	8d 50 01             	lea    edx,[eax+0x1]
c000efc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efcd:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000efd0:	50                   	push   eax
c000efd1:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000efd4:	50                   	push   eax
c000efd5:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000efd8:	50                   	push   eax
c000efd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000efdc:	e8 7b 49 00 00       	call   c001395c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000efe1:	83 c4 10             	add    esp,0x10
c000efe4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000efe7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000efea:	83 f0 01             	xor    eax,0x1
c000efed:	84 c0                	test   al,al
c000efef:	0f 84 45 01 00 00    	je     c000f13a <opcodeFault(regs*, void*)+0x2e7>
c000eff5:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000eff8:	3c 01                	cmp    al,0x1
c000effa:	0f 85 3a 01 00 00    	jne    c000f13a <opcodeFault(regs*, void*)+0x2e7>
c000f000:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f003:	83 f0 01             	xor    eax,0x1
c000f006:	84 c0                	test   al,al
c000f008:	0f 84 2c 01 00 00    	je     c000f13a <opcodeFault(regs*, void*)+0x2e7>
c000f00e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f011:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f014:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f017:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f01e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f021:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f024:	89 c2                	mov    edx,eax
c000f026:	b8 00 00 00 00       	mov    eax,0x0
c000f02b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f02e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f034:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f037:	ba 00 00 00 00       	mov    edx,0x0
c000f03c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f03f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f045:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f048:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f04b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f052:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f055:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f058:	89 c2                	mov    edx,eax
c000f05a:	b8 00 00 00 00       	mov    eax,0x0
c000f05f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f062:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f068:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f06b:	ba 00 00 00 00       	mov    edx,0x0
c000f070:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f073:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f076:	fa                   	cli    
c000f077:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f07c:	40                   	inc    eax
c000f07d:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000f082:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f085:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f088:	8b 00                	mov    eax,DWORD PTR [eax]
c000f08a:	89 c1                	mov    ecx,eax
c000f08c:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f08f:	89 cb                	mov    ebx,ecx
c000f091:	89 d0                	mov    eax,edx
c000f093:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f096:	89 c6                	mov    esi,eax
c000f098:	89 f0                	mov    eax,esi
c000f09a:	09 d8                	or     eax,ebx
c000f09c:	85 c0                	test   eax,eax
c000f09e:	75 21                	jne    c000f0c1 <opcodeFault(regs*, void*)+0x26e>
c000f0a0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f0a3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0a6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0a9:	89 01                	mov    DWORD PTR [ecx],eax
c000f0ab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f0ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0b4:	83 c8 40             	or     eax,0x40
c000f0b7:	89 c2                	mov    edx,eax
c000f0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0bc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f0bf:	eb 3e                	jmp    c000f0ff <opcodeFault(regs*, void*)+0x2ac>
c000f0c1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0cc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f0cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f0d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0d5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f0d8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f0db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f0de:	89 d0                	mov    eax,edx
c000f0e0:	31 d2                	xor    edx,edx
c000f0e2:	89 c3                	mov    ebx,eax
c000f0e4:	89 d6                	mov    esi,edx
c000f0e6:	89 da                	mov    edx,ebx
c000f0e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0eb:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f0ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0f4:	83 e0 bf             	and    eax,0xffffffbf
c000f0f7:	89 c2                	mov    edx,eax
c000f0f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0fc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f0ff:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f104:	48                   	dec    eax
c000f105:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000f10a:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f10f:	85 c0                	test   eax,eax
c000f111:	75 01                	jne    c000f114 <opcodeFault(regs*, void*)+0x2c1>
c000f113:	fb                   	sti    
c000f114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f117:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f11a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f11d:	01 c2                	add    edx,eax
c000f11f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f122:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f125:	83 ec 0c             	sub    esp,0xc
c000f128:	68 2b 33 02 c0       	push   0xc002332b
c000f12d:	e8 d2 d8 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000f132:	83 c4 10             	add    esp,0x10
c000f135:	e9 d5 00 00 00       	jmp    c000f20f <opcodeFault(regs*, void*)+0x3bc>
c000f13a:	83 ec 0c             	sub    esp,0xc
c000f13d:	68 3e 33 02 c0       	push   0xc002333e
c000f142:	e8 bd d8 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000f147:	83 c4 10             	add    esp,0x10
c000f14a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f14d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f153:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f156:	c1 e0 04             	shl    eax,0x4
c000f159:	01 d0                	add    eax,edx
c000f15b:	83 c0 03             	add    eax,0x3
c000f15e:	8a 00                	mov    al,BYTE PTR [eax]
c000f160:	0f b6 d8             	movzx  ebx,al
c000f163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f166:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f16c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f16f:	c1 e0 04             	shl    eax,0x4
c000f172:	01 d0                	add    eax,edx
c000f174:	83 c0 02             	add    eax,0x2
c000f177:	8a 00                	mov    al,BYTE PTR [eax]
c000f179:	0f b6 c8             	movzx  ecx,al
c000f17c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f17f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f185:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f188:	c1 e0 04             	shl    eax,0x4
c000f18b:	01 d0                	add    eax,edx
c000f18d:	40                   	inc    eax
c000f18e:	8a 00                	mov    al,BYTE PTR [eax]
c000f190:	0f b6 d0             	movzx  edx,al
c000f193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f196:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f19c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f19f:	c1 e0 04             	shl    eax,0x4
c000f1a2:	01 f0                	add    eax,esi
c000f1a4:	8a 00                	mov    al,BYTE PTR [eax]
c000f1a6:	0f b6 c0             	movzx  eax,al
c000f1a9:	83 ec 0c             	sub    esp,0xc
c000f1ac:	53                   	push   ebx
c000f1ad:	51                   	push   ecx
c000f1ae:	52                   	push   edx
c000f1af:	50                   	push   eax
c000f1b0:	68 50 33 02 c0       	push   0xc0023350
c000f1b5:	e8 4a d8 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1c3:	83 c0 03             	add    eax,0x3
c000f1c6:	8a 00                	mov    al,BYTE PTR [eax]
c000f1c8:	0f b6 d8             	movzx  ebx,al
c000f1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1d1:	83 c0 02             	add    eax,0x2
c000f1d4:	8a 00                	mov    al,BYTE PTR [eax]
c000f1d6:	0f b6 c8             	movzx  ecx,al
c000f1d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1df:	40                   	inc    eax
c000f1e0:	8a 00                	mov    al,BYTE PTR [eax]
c000f1e2:	0f b6 d0             	movzx  edx,al
c000f1e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1eb:	8a 00                	mov    al,BYTE PTR [eax]
c000f1ed:	0f b6 c0             	movzx  eax,al
c000f1f0:	83 ec 0c             	sub    esp,0xc
c000f1f3:	53                   	push   ebx
c000f1f4:	51                   	push   ecx
c000f1f5:	52                   	push   edx
c000f1f6:	50                   	push   eax
c000f1f7:	68 78 33 02 c0       	push   0xc0023378
c000f1fc:	e8 03 d8 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c000f201:	83 c4 20             	add    esp,0x20
c000f204:	83 ec 0c             	sub    esp,0xc
c000f207:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f20a:	e8 9b f6 ff ff       	call   c000e8aa <displayDebugInfo(regs*)>
c000f20f:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f212:	5b                   	pop    ebx
c000f213:	5e                   	pop    esi
c000f214:	5d                   	pop    ebp
c000f215:	c3                   	ret    

c000f216 <displayProgramFault(char const*)>:
c000f216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f21b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f21e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f224:	85 c0                	test   eax,eax
c000f226:	74 15                	je     c000f23d <displayProgramFault(char const*)+0x27>
c000f228:	83 ec 0c             	sub    esp,0xc
c000f22b:	6a 04                	push   0x4
c000f22d:	6a 0f                	push   0xf
c000f22f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f233:	50                   	push   eax
c000f234:	e8 2d b7 ff ff       	call   c000a966 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f239:	83 c4 1c             	add    esp,0x1c
c000f23c:	c3                   	ret    
c000f23d:	c3                   	ret    

c000f23e <setupInterruptController()>:
c000f23e:	55                   	push   ebp
c000f23f:	89 e5                	mov    ebp,esp
c000f241:	53                   	push   ebx
c000f242:	83 ec 24             	sub    esp,0x24
c000f245:	b8 00 00 00 00       	mov    eax,0x0
c000f24a:	85 c0                	test   eax,eax
c000f24c:	0f 95 c0             	setne  al
c000f24f:	84 c0                	test   al,al
c000f251:	74 5b                	je     c000f2ae <setupInterruptController()+0x70>
c000f253:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f25a:	83 ec 0c             	sub    esp,0xc
c000f25d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f260:	e8 3e a7 ff ff       	call   c00099a3 <malloc>
c000f265:	83 c4 10             	add    esp,0x10
c000f268:	89 c3                	mov    ebx,eax
c000f26a:	83 ec 0c             	sub    esp,0xc
c000f26d:	53                   	push   ebx
c000f26e:	e8 39 09 01 00       	call   c001fbac <APIC::APIC()>
c000f273:	83 c4 10             	add    esp,0x10
c000f276:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f279:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f27c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f27f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f281:	83 c0 08             	add    eax,0x8
c000f284:	8b 00                	mov    eax,DWORD PTR [eax]
c000f286:	6a 00                	push   0x0
c000f288:	6a 00                	push   0x0
c000f28a:	6a 00                	push   0x0
c000f28c:	52                   	push   edx
c000f28d:	ff d0                	call   eax
c000f28f:	83 c4 10             	add    esp,0x10
c000f292:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000f297:	83 ec 08             	sub    esp,0x8
c000f29a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f29d:	50                   	push   eax
c000f29e:	e8 a1 eb ff ff       	call   c000de44 <Device::addChild(Device*)>
c000f2a3:	83 c4 10             	add    esp,0x10
c000f2a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2a9:	e9 79 03 00 00       	jmp    c000f627 <setupInterruptController()+0x3e9>
c000f2ae:	a0 c0 69 02 c0       	mov    al,ds:0xc00269c0
c000f2b3:	84 c0                	test   al,al
c000f2b5:	75 14                	jne    c000f2cb <setupInterruptController()+0x8d>
c000f2b7:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000f2bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f2c2:	83 e2 fe             	and    edx,0xfffffffe
c000f2c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f2cb:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000f2d0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f2d6:	83 e0 01             	and    eax,0x1
c000f2d9:	84 c0                	test   al,al
c000f2db:	0f 95 c0             	setne  al
c000f2de:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f2e1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f2e8:	83 ec 0c             	sub    esp,0xc
c000f2eb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f2ee:	e8 b0 a6 ff ff       	call   c00099a3 <malloc>
c000f2f3:	83 c4 10             	add    esp,0x10
c000f2f6:	89 c3                	mov    ebx,eax
c000f2f8:	83 ec 0c             	sub    esp,0xc
c000f2fb:	53                   	push   ebx
c000f2fc:	e8 03 0e 01 00       	call   c0020104 <PIC::PIC()>
c000f301:	83 c4 10             	add    esp,0x10
c000f304:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f307:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f30a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f30d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f30f:	83 c0 08             	add    eax,0x8
c000f312:	8b 00                	mov    eax,DWORD PTR [eax]
c000f314:	6a 00                	push   0x0
c000f316:	6a 00                	push   0x0
c000f318:	6a 00                	push   0x0
c000f31a:	52                   	push   edx
c000f31b:	ff d0                	call   eax
c000f31d:	83 c4 10             	add    esp,0x10
c000f320:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f324:	74 73                	je     c000f399 <setupInterruptController()+0x15b>
c000f326:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f329:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f32c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f32e:	83 c0 0c             	add    eax,0xc
c000f331:	8b 00                	mov    eax,DWORD PTR [eax]
c000f333:	6a 00                	push   0x0
c000f335:	6a 00                	push   0x0
c000f337:	6a 00                	push   0x0
c000f339:	52                   	push   edx
c000f33a:	ff d0                	call   eax
c000f33c:	83 c4 10             	add    esp,0x10
c000f33f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f343:	74 15                	je     c000f35a <setupInterruptController()+0x11c>
c000f345:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f348:	8b 00                	mov    eax,DWORD PTR [eax]
c000f34a:	83 c0 04             	add    eax,0x4
c000f34d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f34f:	83 ec 0c             	sub    esp,0xc
c000f352:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f355:	ff d0                	call   eax
c000f357:	83 c4 10             	add    esp,0x10
c000f35a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f361:	83 ec 0c             	sub    esp,0xc
c000f364:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f367:	e8 37 a6 ff ff       	call   c00099a3 <malloc>
c000f36c:	83 c4 10             	add    esp,0x10
c000f36f:	89 c3                	mov    ebx,eax
c000f371:	83 ec 0c             	sub    esp,0xc
c000f374:	53                   	push   ebx
c000f375:	e8 32 08 01 00       	call   c001fbac <APIC::APIC()>
c000f37a:	83 c4 10             	add    esp,0x10
c000f37d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f380:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f383:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f386:	8b 00                	mov    eax,DWORD PTR [eax]
c000f388:	83 c0 08             	add    eax,0x8
c000f38b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38d:	6a 00                	push   0x0
c000f38f:	6a 00                	push   0x0
c000f391:	6a 00                	push   0x0
c000f393:	52                   	push   edx
c000f394:	ff d0                	call   eax
c000f396:	83 c4 10             	add    esp,0x10
c000f399:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c000f39e:	83 ec 08             	sub    esp,0x8
c000f3a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3a4:	50                   	push   eax
c000f3a5:	e8 9a ea ff ff       	call   c000de44 <Device::addChild(Device*)>
c000f3aa:	83 c4 10             	add    esp,0x10
c000f3ad:	c7 05 e8 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261e8,0x0
c000f3b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3bc:	83 c0 24             	add    eax,0x24
c000f3bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c1:	6a 00                	push   0x0
c000f3c3:	68 34 ee 00 c0       	push   0xc000ee34
c000f3c8:	6a 00                	push   0x0
c000f3ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3cd:	ff d0                	call   eax
c000f3cf:	83 c4 10             	add    esp,0x10
c000f3d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3d7:	83 c0 24             	add    eax,0x24
c000f3da:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3dc:	6a 00                	push   0x0
c000f3de:	68 34 ee 00 c0       	push   0xc000ee34
c000f3e3:	6a 01                	push   0x1
c000f3e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3e8:	ff d0                	call   eax
c000f3ea:	83 c4 10             	add    esp,0x10
c000f3ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f2:	83 c0 24             	add    eax,0x24
c000f3f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f7:	6a 00                	push   0x0
c000f3f9:	68 07 e7 00 c0       	push   0xc000e707
c000f3fe:	6a 02                	push   0x2
c000f400:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f403:	ff d0                	call   eax
c000f405:	83 c4 10             	add    esp,0x10
c000f408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f40b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f40d:	83 c0 24             	add    eax,0x24
c000f410:	8b 00                	mov    eax,DWORD PTR [eax]
c000f412:	6a 00                	push   0x0
c000f414:	68 34 ee 00 c0       	push   0xc000ee34
c000f419:	6a 03                	push   0x3
c000f41b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f41e:	ff d0                	call   eax
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f426:	8b 00                	mov    eax,DWORD PTR [eax]
c000f428:	83 c0 24             	add    eax,0x24
c000f42b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f42d:	6a 00                	push   0x0
c000f42f:	68 34 ee 00 c0       	push   0xc000ee34
c000f434:	6a 04                	push   0x4
c000f436:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f439:	ff d0                	call   eax
c000f43b:	83 c4 10             	add    esp,0x10
c000f43e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f441:	8b 00                	mov    eax,DWORD PTR [eax]
c000f443:	83 c0 24             	add    eax,0x24
c000f446:	8b 00                	mov    eax,DWORD PTR [eax]
c000f448:	6a 00                	push   0x0
c000f44a:	68 34 ee 00 c0       	push   0xc000ee34
c000f44f:	6a 05                	push   0x5
c000f451:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f454:	ff d0                	call   eax
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f45c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f45e:	83 c0 24             	add    eax,0x24
c000f461:	8b 00                	mov    eax,DWORD PTR [eax]
c000f463:	6a 00                	push   0x0
c000f465:	68 53 ee 00 c0       	push   0xc000ee53
c000f46a:	6a 06                	push   0x6
c000f46c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f46f:	ff d0                	call   eax
c000f471:	83 c4 10             	add    esp,0x10
c000f474:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f477:	8b 00                	mov    eax,DWORD PTR [eax]
c000f479:	83 c0 24             	add    eax,0x24
c000f47c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f47e:	6a 00                	push   0x0
c000f480:	68 39 ed 00 c0       	push   0xc000ed39
c000f485:	6a 07                	push   0x7
c000f487:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f48a:	ff d0                	call   eax
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f492:	8b 00                	mov    eax,DWORD PTR [eax]
c000f494:	83 c0 24             	add    eax,0x24
c000f497:	8b 00                	mov    eax,DWORD PTR [eax]
c000f499:	6a 00                	push   0x0
c000f49b:	68 22 e5 00 c0       	push   0xc000e522
c000f4a0:	6a 08                	push   0x8
c000f4a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4a5:	ff d0                	call   eax
c000f4a7:	83 c4 10             	add    esp,0x10
c000f4aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4af:	83 c0 24             	add    eax,0x24
c000f4b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 34 ee 00 c0       	push   0xc000ee34
c000f4bb:	6a 09                	push   0x9
c000f4bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4c0:	ff d0                	call   eax
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ca:	83 c0 24             	add    eax,0x24
c000f4cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4cf:	6a 00                	push   0x0
c000f4d1:	68 34 ee 00 c0       	push   0xc000ee34
c000f4d6:	6a 0a                	push   0xa
c000f4d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4db:	ff d0                	call   eax
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e5:	83 c0 24             	add    eax,0x24
c000f4e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ea:	6a 00                	push   0x0
c000f4ec:	68 34 ee 00 c0       	push   0xc000ee34
c000f4f1:	6a 0b                	push   0xb
c000f4f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4f6:	ff d0                	call   eax
c000f4f8:	83 c4 10             	add    esp,0x10
c000f4fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f500:	83 c0 24             	add    eax,0x24
c000f503:	8b 00                	mov    eax,DWORD PTR [eax]
c000f505:	6a 00                	push   0x0
c000f507:	68 34 ee 00 c0       	push   0xc000ee34
c000f50c:	6a 0c                	push   0xc
c000f50e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f511:	ff d0                	call   eax
c000f513:	83 c4 10             	add    esp,0x10
c000f516:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f519:	8b 00                	mov    eax,DWORD PTR [eax]
c000f51b:	83 c0 24             	add    eax,0x24
c000f51e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f520:	6a 00                	push   0x0
c000f522:	68 ac ed 00 c0       	push   0xc000edac
c000f527:	6a 0d                	push   0xd
c000f529:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f52c:	ff d0                	call   eax
c000f52e:	83 c4 10             	add    esp,0x10
c000f531:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f534:	8b 00                	mov    eax,DWORD PTR [eax]
c000f536:	83 c0 24             	add    eax,0x24
c000f539:	8b 00                	mov    eax,DWORD PTR [eax]
c000f53b:	6a 00                	push   0x0
c000f53d:	68 e5 ed 00 c0       	push   0xc000ede5
c000f542:	6a 0e                	push   0xe
c000f544:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f547:	ff d0                	call   eax
c000f549:	83 c4 10             	add    esp,0x10
c000f54c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f54f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f551:	83 c0 24             	add    eax,0x24
c000f554:	8b 00                	mov    eax,DWORD PTR [eax]
c000f556:	6a 00                	push   0x0
c000f558:	68 34 ee 00 c0       	push   0xc000ee34
c000f55d:	6a 0f                	push   0xf
c000f55f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f562:	ff d0                	call   eax
c000f564:	83 c4 10             	add    esp,0x10
c000f567:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f56a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56c:	83 c0 24             	add    eax,0x24
c000f56f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f571:	6a 00                	push   0x0
c000f573:	68 34 ee 00 c0       	push   0xc000ee34
c000f578:	6a 10                	push   0x10
c000f57a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f57d:	ff d0                	call   eax
c000f57f:	83 c4 10             	add    esp,0x10
c000f582:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f585:	8b 00                	mov    eax,DWORD PTR [eax]
c000f587:	83 c0 24             	add    eax,0x24
c000f58a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58c:	6a 00                	push   0x0
c000f58e:	68 34 ee 00 c0       	push   0xc000ee34
c000f593:	6a 11                	push   0x11
c000f595:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f598:	ff d0                	call   eax
c000f59a:	83 c4 10             	add    esp,0x10
c000f59d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a2:	83 c0 24             	add    eax,0x24
c000f5a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a7:	6a 00                	push   0x0
c000f5a9:	68 34 ee 00 c0       	push   0xc000ee34
c000f5ae:	6a 12                	push   0x12
c000f5b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5b3:	ff d0                	call   eax
c000f5b5:	83 c4 10             	add    esp,0x10
c000f5b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5bd:	83 c0 24             	add    eax,0x24
c000f5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c2:	6a 00                	push   0x0
c000f5c4:	68 34 ee 00 c0       	push   0xc000ee34
c000f5c9:	6a 13                	push   0x13
c000f5cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5ce:	ff d0                	call   eax
c000f5d0:	83 c4 10             	add    esp,0x10
c000f5d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d8:	83 c0 24             	add    eax,0x24
c000f5db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 34 ee 00 c0       	push   0xc000ee34
c000f5e4:	6a 14                	push   0x14
c000f5e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5e9:	ff d0                	call   eax
c000f5eb:	83 c4 10             	add    esp,0x10
c000f5ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f3:	83 c0 24             	add    eax,0x24
c000f5f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f8:	6a 00                	push   0x0
c000f5fa:	68 34 ee 00 c0       	push   0xc000ee34
c000f5ff:	6a 1e                	push   0x1e
c000f601:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f604:	ff d0                	call   eax
c000f606:	83 c4 10             	add    esp,0x10
c000f609:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f60c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60e:	83 c0 24             	add    eax,0x24
c000f611:	8b 00                	mov    eax,DWORD PTR [eax]
c000f613:	6a 00                	push   0x0
c000f615:	68 3b 64 01 c0       	push   0xc001643b
c000f61a:	6a 60                	push   0x60
c000f61c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f61f:	ff d0                	call   eax
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f627:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f62a:	c9                   	leave  
c000f62b:	c3                   	ret    

c000f62c <InterruptController::convertLegacyIRQNumber(int)>:
c000f62c:	55                   	push   ebp
c000f62d:	89 e5                	mov    ebp,esp
c000f62f:	83 ec 08             	sub    esp,0x8
c000f632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f635:	83 ec 0c             	sub    esp,0xc
c000f638:	50                   	push   eax
c000f639:	e8 06 eb ff ff       	call   c000e144 <Device::getName()>
c000f63e:	83 c4 10             	add    esp,0x10
c000f641:	8a 00                	mov    al,BYTE PTR [eax]
c000f643:	3c 41                	cmp    al,0x41
c000f645:	0f 94 c0             	sete   al
c000f648:	84 c0                	test   al,al
c000f64a:	74 28                	je     c000f674 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f64c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f650:	7f 12                	jg     c000f664 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f652:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f655:	05 60 57 02 c0       	add    eax,0xc0025760
c000f65a:	8a 00                	mov    al,BYTE PTR [eax]
c000f65c:	0f b6 c0             	movzx  eax,al
c000f65f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f662:	eb 10                	jmp    c000f674 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f664:	83 ec 0c             	sub    esp,0xc
c000f667:	68 a0 33 02 c0       	push   0xc00233a0
c000f66c:	e8 d2 4b 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000f671:	83 c4 10             	add    esp,0x10
c000f674:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f677:	c9                   	leave  
c000f678:	c3                   	ret    
c000f679:	90                   	nop

c000f67a <startGUI(void*)>:
c000f67a:	55                   	push   ebp
c000f67b:	89 e5                	mov    ebp,esp
c000f67d:	53                   	push   ebx
c000f67e:	83 ec 04             	sub    esp,0x4
c000f681:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f686:	48                   	dec    eax
c000f687:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000f68c:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f691:	85 c0                	test   eax,eax
c000f693:	75 01                	jne    c000f696 <startGUI(void*)+0x1c>
c000f695:	fb                   	sti    
c000f696:	8b 1d 68 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026068
c000f69c:	83 ec 08             	sub    esp,0x8
c000f69f:	6a 01                	push   0x1
c000f6a1:	68 20 34 02 c0       	push   0xc0023420
c000f6a6:	e8 6b 7d 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c000f6ab:	83 c4 10             	add    esp,0x10
c000f6ae:	83 ec 08             	sub    esp,0x8
c000f6b1:	53                   	push   ebx
c000f6b2:	50                   	push   eax
c000f6b3:	e8 8f 7f 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	8b 1d 68 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026068
c000f6c1:	83 ec 08             	sub    esp,0x8
c000f6c4:	6a 01                	push   0x1
c000f6c6:	68 3a 34 02 c0       	push   0xc002343a
c000f6cb:	e8 46 7d 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c000f6d0:	83 c4 10             	add    esp,0x10
c000f6d3:	83 ec 08             	sub    esp,0x8
c000f6d6:	53                   	push   ebx
c000f6d7:	50                   	push   eax
c000f6d8:	e8 6a 7f 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c000f6dd:	83 c4 10             	add    esp,0x10
c000f6e0:	90                   	nop
c000f6e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f6e4:	c9                   	leave  
c000f6e5:	c3                   	ret    

c000f6e6 <startGUIVESA(void*)>:
c000f6e6:	55                   	push   ebp
c000f6e7:	89 e5                	mov    ebp,esp
c000f6e9:	53                   	push   ebx
c000f6ea:	83 ec 04             	sub    esp,0x4
c000f6ed:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f6f2:	48                   	dec    eax
c000f6f3:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000f6f8:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f6fd:	85 c0                	test   eax,eax
c000f6ff:	75 01                	jne    c000f702 <startGUIVESA(void*)+0x1c>
c000f701:	fb                   	sti    
c000f702:	8b 1d 68 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026068
c000f708:	83 ec 08             	sub    esp,0x8
c000f70b:	6a 01                	push   0x1
c000f70d:	68 54 34 02 c0       	push   0xc0023454
c000f712:	e8 ff 7c 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c000f717:	83 c4 10             	add    esp,0x10
c000f71a:	83 ec 08             	sub    esp,0x8
c000f71d:	53                   	push   ebx
c000f71e:	50                   	push   eax
c000f71f:	e8 23 7f 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c000f724:	83 c4 10             	add    esp,0x10
c000f727:	8b 1d 68 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026068
c000f72d:	83 ec 08             	sub    esp,0x8
c000f730:	6a 01                	push   0x1
c000f732:	68 3a 34 02 c0       	push   0xc002343a
c000f737:	e8 da 7c 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c000f73c:	83 c4 10             	add    esp,0x10
c000f73f:	83 ec 08             	sub    esp,0x8
c000f742:	53                   	push   ebx
c000f743:	50                   	push   eax
c000f744:	e8 fe 7e 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c000f749:	83 c4 10             	add    esp,0x10
c000f74c:	90                   	nop
c000f74d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f750:	c9                   	leave  
c000f751:	c3                   	ret    

c000f752 <sendKeyToTerminal(unsigned char)>:
c000f752:	55                   	push   ebp
c000f753:	89 e5                	mov    ebp,esp
c000f755:	83 ec 28             	sub    esp,0x28
c000f758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f75b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f75e:	a1 24 61 02 c0       	mov    eax,ds:0xc0026124
c000f763:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f767:	83 ec 08             	sub    esp,0x8
c000f76a:	52                   	push   edx
c000f76b:	50                   	push   eax
c000f76c:	e8 9d b6 ff ff       	call   c000ae0e <VgaText::receiveKey(unsigned char)>
c000f771:	83 c4 10             	add    esp,0x10
c000f774:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f778:	0f 85 8f 00 00 00    	jne    c000f80d <sendKeyToTerminal(unsigned char)+0xbb>
c000f77e:	fa                   	cli    
c000f77f:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f784:	40                   	inc    eax
c000f785:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000f78a:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c000f78f:	40                   	inc    eax
c000f790:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c000f795:	a1 00 62 02 c0       	mov    eax,ds:0xc0026200
c000f79a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f79d:	c7 05 00 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026200,0x0
c000f7a7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f7ab:	74 1f                	je     c000f7cc <sendKeyToTerminal(unsigned char)+0x7a>
c000f7ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f7b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f7b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f7b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7bc:	83 ec 0c             	sub    esp,0xc
c000f7bf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f7c2:	e8 97 8a 00 00       	call   c001825e <unblockTask(ThreadControlBlock*)>
c000f7c7:	83 c4 10             	add    esp,0x10
c000f7ca:	eb db                	jmp    c000f7a7 <sendKeyToTerminal(unsigned char)+0x55>
c000f7cc:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c000f7d1:	48                   	dec    eax
c000f7d2:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c000f7d7:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c000f7dc:	85 c0                	test   eax,eax
c000f7de:	75 18                	jne    c000f7f8 <sendKeyToTerminal(unsigned char)+0xa6>
c000f7e0:	a1 60 75 02 c0       	mov    eax,ds:0xc0027560
c000f7e5:	85 c0                	test   eax,eax
c000f7e7:	74 0f                	je     c000f7f8 <sendKeyToTerminal(unsigned char)+0xa6>
c000f7e9:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c000f7f3:	e8 d8 85 00 00       	call   c0017dd0 <schedule()>
c000f7f8:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f7fd:	48                   	dec    eax
c000f7fe:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000f803:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000f808:	85 c0                	test   eax,eax
c000f80a:	75 01                	jne    c000f80d <sendKeyToTerminal(unsigned char)+0xbb>
c000f80c:	fb                   	sti    
c000f80d:	90                   	nop
c000f80e:	c9                   	leave  
c000f80f:	c3                   	ret    

c000f810 <sendKeyboardToken(KeyboardToken)>:
c000f810:	55                   	push   ebp
c000f811:	89 e5                	mov    ebp,esp
c000f813:	83 ec 18             	sub    esp,0x18
c000f816:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f81c:	0f b7 c0             	movzx  eax,ax
c000f81f:	83 f2 01             	xor    edx,0x1
c000f822:	88 90 20 62 02 c0    	mov    BYTE PTR [eax-0x3ffd9de0],dl
c000f828:	a1 08 62 02 c0       	mov    eax,ds:0xc0026208
c000f82d:	85 c0                	test   eax,eax
c000f82f:	74 24                	je     c000f855 <sendKeyboardToken(KeyboardToken)+0x45>
c000f831:	8b 0d 08 62 02 c0    	mov    ecx,DWORD PTR ds:0xc0026208
c000f837:	83 ec 04             	sub    esp,0x4
c000f83a:	68 20 62 02 c0       	push   0xc0026220
c000f83f:	83 ec 08             	sub    esp,0x8
c000f842:	89 e2                	mov    edx,esp
c000f844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f847:	89 02                	mov    DWORD PTR [edx],eax
c000f849:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f84c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f850:	ff d1                	call   ecx
c000f852:	83 c4 10             	add    esp,0x10
c000f855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f858:	66 3d 03 02          	cmp    ax,0x203
c000f85c:	75 07                	jne    c000f865 <sendKeyboardToken(KeyboardToken)+0x55>
c000f85e:	a0 20 63 02 c0       	mov    al,ds:0xc0026320
c000f863:	84 c0                	test   al,al
c000f865:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f869:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f86c:	a0 28 66 02 c0       	mov    al,ds:0xc0026628
c000f871:	38 c2                	cmp    dl,al
c000f873:	74 1c                	je     c000f891 <sendKeyboardToken(KeyboardToken)+0x81>
c000f875:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f878:	a2 28 66 02 c0       	mov    ds:0xc0026628,al
c000f87d:	a0 28 66 02 c0       	mov    al,ds:0xc0026628
c000f882:	0f b6 c0             	movzx  eax,al
c000f885:	83 ec 0c             	sub    esp,0xc
c000f888:	50                   	push   eax
c000f889:	e8 c0 ab ff ff       	call   c000a44e <setTerminalScrollLock(bool)>
c000f88e:	83 c4 10             	add    esp,0x10
c000f891:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f894:	84 c0                	test   al,al
c000f896:	0f 84 ae 00 00 00    	je     c000f94a <sendKeyboardToken(KeyboardToken)+0x13a>
c000f89c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f89f:	66 3d 10 03          	cmp    ax,0x310
c000f8a3:	75 06                	jne    c000f8ab <sendKeyboardToken(KeyboardToken)+0x9b>
c000f8a5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ae:	66 3d 11 03          	cmp    ax,0x311
c000f8b2:	75 06                	jne    c000f8ba <sendKeyboardToken(KeyboardToken)+0xaa>
c000f8b4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f8ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8bd:	66 3d 12 03          	cmp    ax,0x312
c000f8c1:	75 06                	jne    c000f8c9 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f8c3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f8c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8cc:	66 3d 13 03          	cmp    ax,0x313
c000f8d0:	75 06                	jne    c000f8d8 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f8d2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f8d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8db:	66 3d 14 03          	cmp    ax,0x314
c000f8df:	75 06                	jne    c000f8e7 <sendKeyboardToken(KeyboardToken)+0xd7>
c000f8e1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f8e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ea:	66 3d 15 03          	cmp    ax,0x315
c000f8ee:	75 06                	jne    c000f8f6 <sendKeyboardToken(KeyboardToken)+0xe6>
c000f8f0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8f9:	66 3d 16 03          	cmp    ax,0x316
c000f8fd:	75 06                	jne    c000f905 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f8ff:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f908:	66 3d 17 03          	cmp    ax,0x317
c000f90c:	75 06                	jne    c000f914 <sendKeyboardToken(KeyboardToken)+0x104>
c000f90e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f917:	66 3d 18 03          	cmp    ax,0x318
c000f91b:	75 06                	jne    c000f923 <sendKeyboardToken(KeyboardToken)+0x113>
c000f91d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f926:	66 3d 19 03          	cmp    ax,0x319
c000f92a:	75 06                	jne    c000f932 <sendKeyboardToken(KeyboardToken)+0x122>
c000f92c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f935:	66 3d 1a 03          	cmp    ax,0x31a
c000f939:	0f 85 c9 00 00 00    	jne    c000fa08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f93f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f945:	e9 be 00 00 00       	jmp    c000fa08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f94a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94d:	66 3d 10 03          	cmp    ax,0x310
c000f951:	75 0a                	jne    c000f95d <sendKeyboardToken(KeyboardToken)+0x14d>
c000f953:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f959:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f95d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f960:	66 3d 11 03          	cmp    ax,0x311
c000f964:	75 0a                	jne    c000f970 <sendKeyboardToken(KeyboardToken)+0x160>
c000f966:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f96c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f973:	66 3d 12 03          	cmp    ax,0x312
c000f977:	75 0a                	jne    c000f983 <sendKeyboardToken(KeyboardToken)+0x173>
c000f979:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f97f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f986:	66 3d 13 03          	cmp    ax,0x313
c000f98a:	75 0a                	jne    c000f996 <sendKeyboardToken(KeyboardToken)+0x186>
c000f98c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000f992:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f999:	66 3d 14 03          	cmp    ax,0x314
c000f99d:	75 0a                	jne    c000f9a9 <sendKeyboardToken(KeyboardToken)+0x199>
c000f99f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000f9a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ac:	66 3d 15 03          	cmp    ax,0x315
c000f9b0:	75 0a                	jne    c000f9bc <sendKeyboardToken(KeyboardToken)+0x1ac>
c000f9b2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f9b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9bf:	66 3d 16 03          	cmp    ax,0x316
c000f9c3:	75 0a                	jne    c000f9cf <sendKeyboardToken(KeyboardToken)+0x1bf>
c000f9c5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000f9cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d2:	66 3d 17 03          	cmp    ax,0x317
c000f9d6:	75 0a                	jne    c000f9e2 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000f9d8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000f9de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e5:	66 3d 18 03          	cmp    ax,0x318
c000f9e9:	75 0a                	jne    c000f9f5 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000f9eb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000f9f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f8:	66 3d 19 03          	cmp    ax,0x319
c000f9fc:	75 0a                	jne    c000fa08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9fe:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa04:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa0b:	66 3d 00 02          	cmp    ax,0x200
c000fa0f:	75 2c                	jne    c000fa3d <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa11:	a0 20 66 02 c0       	mov    al,ds:0xc0026620
c000fa16:	83 f0 01             	xor    eax,0x1
c000fa19:	84 c0                	test   al,al
c000fa1b:	74 20                	je     c000fa3d <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa1d:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000fa22:	6a 01                	push   0x1
c000fa24:	6a 00                	push   0x0
c000fa26:	68 7a f6 00 c0       	push   0xc000f67a
c000fa2b:	50                   	push   eax
c000fa2c:	e8 8d 81 00 00       	call   c0017bbe <Process::createThread(void (*)(void*), void*, int)>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	c6 05 20 66 02 c0 01 	mov    BYTE PTR ds:0xc0026620,0x1
c000fa3b:	eb 33                	jmp    c000fa70 <sendKeyboardToken(KeyboardToken)+0x260>
c000fa3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa40:	66 3d 01 02          	cmp    ax,0x201
c000fa44:	75 2a                	jne    c000fa70 <sendKeyboardToken(KeyboardToken)+0x260>
c000fa46:	a0 20 66 02 c0       	mov    al,ds:0xc0026620
c000fa4b:	83 f0 01             	xor    eax,0x1
c000fa4e:	84 c0                	test   al,al
c000fa50:	74 1e                	je     c000fa70 <sendKeyboardToken(KeyboardToken)+0x260>
c000fa52:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c000fa57:	6a 01                	push   0x1
c000fa59:	6a 00                	push   0x0
c000fa5b:	68 e6 f6 00 c0       	push   0xc000f6e6
c000fa60:	50                   	push   eax
c000fa61:	e8 58 81 00 00       	call   c0017bbe <Process::createThread(void (*)(void*), void*, int)>
c000fa66:	83 c4 10             	add    esp,0x10
c000fa69:	c6 05 20 66 02 c0 01 	mov    BYTE PTR ds:0xc0026620,0x1
c000fa70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa73:	66 3d 1d 03          	cmp    ax,0x31d
c000fa77:	75 06                	jne    c000fa7f <sendKeyboardToken(KeyboardToken)+0x26f>
c000fa79:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fa7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa82:	66 3d 1c 03          	cmp    ax,0x31c
c000fa86:	75 06                	jne    c000fa8e <sendKeyboardToken(KeyboardToken)+0x27e>
c000fa88:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fa8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa91:	66 3d 1b 03          	cmp    ax,0x31b
c000fa95:	75 06                	jne    c000fa9d <sendKeyboardToken(KeyboardToken)+0x28d>
c000fa97:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fa9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa0:	66 3d 1e 03          	cmp    ax,0x31e
c000faa4:	75 06                	jne    c000faac <sendKeyboardToken(KeyboardToken)+0x29c>
c000faa6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000faac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faaf:	66 3d 1f 03          	cmp    ax,0x31f
c000fab3:	75 06                	jne    c000fabb <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fab5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fabe:	66 3d 1a 03          	cmp    ax,0x31a
c000fac2:	75 06                	jne    c000faca <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fac4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000faca:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000face:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fad1:	83 f0 01             	xor    eax,0x1
c000fad4:	84 c0                	test   al,al
c000fad6:	74 77                	je     c000fb4f <sendKeyboardToken(KeyboardToken)+0x33f>
c000fad8:	a0 21 63 02 c0       	mov    al,ds:0xc0026321
c000fadd:	84 c0                	test   al,al
c000fadf:	74 41                	je     c000fb22 <sendKeyboardToken(KeyboardToken)+0x312>
c000fae1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fae5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fae9:	74 2b                	je     c000fb16 <sendKeyboardToken(KeyboardToken)+0x306>
c000faeb:	8b 15 24 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026624
c000faf1:	89 d0                	mov    eax,edx
c000faf3:	c1 e0 02             	shl    eax,0x2
c000faf6:	01 d0                	add    eax,edx
c000faf8:	01 c0                	add    eax,eax
c000fafa:	a3 24 66 02 c0       	mov    ds:0xc0026624,eax
c000faff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb02:	0f b7 c0             	movzx  eax,ax
c000fb05:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb08:	a1 24 66 02 c0       	mov    eax,ds:0xc0026624
c000fb0d:	01 d0                	add    eax,edx
c000fb0f:	a3 24 66 02 c0       	mov    ds:0xc0026624,eax
c000fb14:	eb 6d                	jmp    c000fb83 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb16:	c7 05 24 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026624,0x0
c000fb20:	eb 61                	jmp    c000fb83 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb22:	a1 24 66 02 c0       	mov    eax,ds:0xc0026624
c000fb27:	85 c0                	test   eax,eax
c000fb29:	74 18                	je     c000fb43 <sendKeyboardToken(KeyboardToken)+0x333>
c000fb2b:	a1 24 66 02 c0       	mov    eax,ds:0xc0026624
c000fb30:	0f b6 c0             	movzx  eax,al
c000fb33:	83 ec 0c             	sub    esp,0xc
c000fb36:	50                   	push   eax
c000fb37:	e8 16 fc ff ff       	call   c000f752 <sendKeyToTerminal(unsigned char)>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb43:	c7 05 24 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026624,0x0
c000fb4d:	eb 34                	jmp    c000fb83 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb52:	66 3d 01 01          	cmp    ax,0x101
c000fb56:	75 2b                	jne    c000fb83 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb58:	a1 24 66 02 c0       	mov    eax,ds:0xc0026624
c000fb5d:	85 c0                	test   eax,eax
c000fb5f:	74 18                	je     c000fb79 <sendKeyboardToken(KeyboardToken)+0x369>
c000fb61:	a1 24 66 02 c0       	mov    eax,ds:0xc0026624
c000fb66:	0f b6 c0             	movzx  eax,al
c000fb69:	83 ec 0c             	sub    esp,0xc
c000fb6c:	50                   	push   eax
c000fb6d:	e8 e0 fb ff ff       	call   c000f752 <sendKeyToTerminal(unsigned char)>
c000fb72:	83 c4 10             	add    esp,0x10
c000fb75:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb79:	c7 05 24 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026624,0x0
c000fb83:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fb86:	83 f0 01             	xor    eax,0x1
c000fb89:	84 c0                	test   al,al
c000fb8b:	74 4c                	je     c000fbd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fb8d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb90:	83 f0 01             	xor    eax,0x1
c000fb93:	84 c0                	test   al,al
c000fb95:	74 42                	je     c000fbd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fb97:	a0 20 63 02 c0       	mov    al,ds:0xc0026320
c000fb9c:	83 f0 01             	xor    eax,0x1
c000fb9f:	84 c0                	test   al,al
c000fba1:	74 36                	je     c000fbd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fba6:	66 83 f8 1f          	cmp    ax,0x1f
c000fbaa:	76 09                	jbe    c000fbb5 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fbac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbaf:	66 83 f8 7e          	cmp    ax,0x7e
c000fbb3:	76 12                	jbe    c000fbc7 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fbb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbb8:	66 83 f8 0a          	cmp    ax,0xa
c000fbbc:	74 09                	je     c000fbc7 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fbbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbc1:	66 83 f8 08          	cmp    ax,0x8
c000fbc5:	75 12                	jne    c000fbd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbca:	0f b6 c0             	movzx  eax,al
c000fbcd:	83 ec 0c             	sub    esp,0xc
c000fbd0:	50                   	push   eax
c000fbd1:	e8 7c fb ff ff       	call   c000f752 <sendKeyToTerminal(unsigned char)>
c000fbd6:	83 c4 10             	add    esp,0x10
c000fbd9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fbdc:	83 f0 01             	xor    eax,0x1
c000fbdf:	84 c0                	test   al,al
c000fbe1:	74 4f                	je     c000fc32 <sendKeyboardToken(KeyboardToken)+0x422>
c000fbe3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fbe6:	83 f0 01             	xor    eax,0x1
c000fbe9:	84 c0                	test   al,al
c000fbeb:	74 45                	je     c000fc32 <sendKeyboardToken(KeyboardToken)+0x422>
c000fbed:	a0 20 63 02 c0       	mov    al,ds:0xc0026320
c000fbf2:	84 c0                	test   al,al
c000fbf4:	74 3c                	je     c000fc32 <sendKeyboardToken(KeyboardToken)+0x422>
c000fbf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbf9:	66 83 f8 3f          	cmp    ax,0x3f
c000fbfd:	76 33                	jbe    c000fc32 <sendKeyboardToken(KeyboardToken)+0x422>
c000fbff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc02:	66 83 f8 7f          	cmp    ax,0x7f
c000fc06:	77 2a                	ja     c000fc32 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc0b:	88 c2                	mov    dl,al
c000fc0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc10:	66 83 f8 5f          	cmp    ax,0x5f
c000fc14:	76 04                	jbe    c000fc1a <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc16:	b0 20                	mov    al,0x20
c000fc18:	eb 02                	jmp    c000fc1c <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc1a:	b0 00                	mov    al,0x0
c000fc1c:	29 c2                	sub    edx,eax
c000fc1e:	88 d0                	mov    al,dl
c000fc20:	83 e8 40             	sub    eax,0x40
c000fc23:	0f b6 c0             	movzx  eax,al
c000fc26:	83 ec 0c             	sub    esp,0xc
c000fc29:	50                   	push   eax
c000fc2a:	e8 23 fb ff ff       	call   c000f752 <sendKeyToTerminal(unsigned char)>
c000fc2f:	83 c4 10             	add    esp,0x10
c000fc32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc35:	66 3d 00 03          	cmp    ax,0x300
c000fc39:	75 0f                	jne    c000fc4a <sendKeyboardToken(KeyboardToken)+0x43a>
c000fc3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc3e:	83 f0 01             	xor    eax,0x1
c000fc41:	84 c0                	test   al,al
c000fc43:	74 05                	je     c000fc4a <sendKeyboardToken(KeyboardToken)+0x43a>
c000fc45:	e8 75 ab ff ff       	call   c000a7bf <doTerminalCycle()>
c000fc4a:	90                   	nop
c000fc4b:	c9                   	leave  
c000fc4c:	c3                   	ret    

c000fc4d <clearInternalKeybuffer(VgaText*)>:
c000fc4d:	55                   	push   ebp
c000fc4e:	89 e5                	mov    ebp,esp
c000fc50:	83 ec 08             	sub    esp,0x8
c000fc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc56:	05 98 01 00 00       	add    eax,0x198
c000fc5b:	83 ec 0c             	sub    esp,0xc
c000fc5e:	50                   	push   eax
c000fc5f:	e8 3c 0a ff ff       	call   c00006a0 <strlen>
c000fc64:	83 c4 10             	add    esp,0x10
c000fc67:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fc6a:	81 c2 98 01 00 00    	add    edx,0x198
c000fc70:	83 ec 04             	sub    esp,0x4
c000fc73:	50                   	push   eax
c000fc74:	6a 00                	push   0x0
c000fc76:	52                   	push   edx
c000fc77:	e8 08 0a ff ff       	call   c0000684 <memset>
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	90                   	nop
c000fc80:	c9                   	leave  
c000fc81:	c3                   	ret    

c000fc82 <readKeyboard(VgaText*, char*, unsigned long)>:
c000fc82:	55                   	push   ebp
c000fc83:	89 e5                	mov    ebp,esp
c000fc85:	83 ec 18             	sub    esp,0x18
c000fc88:	a1 08 62 02 c0       	mov    eax,ds:0xc0026208
c000fc8d:	85 c0                	test   eax,eax
c000fc8f:	74 2a                	je     c000fcbb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fc91:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fc97:	8b 0d 08 62 02 c0    	mov    ecx,DWORD PTR ds:0xc0026208
c000fc9d:	83 ec 04             	sub    esp,0x4
c000fca0:	68 20 62 02 c0       	push   0xc0026220
c000fca5:	83 ec 08             	sub    esp,0x8
c000fca8:	89 e2                	mov    edx,esp
c000fcaa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fcad:	89 02                	mov    DWORD PTR [edx],eax
c000fcaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fcb2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fcb6:	ff d1                	call   ecx
c000fcb8:	83 c4 10             	add    esp,0x10
c000fcbb:	fb                   	sti    
c000fcbc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fcc3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fcc7:	0f 84 a1 00 00 00    	je     c000fd6e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd0:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fcd6:	84 c0                	test   al,al
c000fcd8:	75 28                	jne    c000fd02 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fcda:	fa                   	cli    
c000fcdb:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000fce0:	40                   	inc    eax
c000fce1:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000fce6:	e8 e5 80 00 00       	call   c0017dd0 <schedule()>
c000fceb:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000fcf0:	48                   	dec    eax
c000fcf1:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c000fcf6:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c000fcfb:	85 c0                	test   eax,eax
c000fcfd:	75 ce                	jne    c000fccd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fcff:	fb                   	sti    
c000fd00:	eb cb                	jmp    c000fccd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd05:	8d 50 01             	lea    edx,[eax+0x1]
c000fd08:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd0e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd14:	88 10                	mov    BYTE PTR [eax],dl
c000fd16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd19:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd1f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fd22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd25:	05 98 01 00 00       	add    eax,0x198
c000fd2a:	83 ec 0c             	sub    esp,0xc
c000fd2d:	50                   	push   eax
c000fd2e:	e8 6d 09 ff ff       	call   c00006a0 <strlen>
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd39:	81 c2 98 01 00 00    	add    edx,0x198
c000fd3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fd42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd45:	81 c2 98 01 00 00    	add    edx,0x198
c000fd4b:	83 ec 04             	sub    esp,0x4
c000fd4e:	50                   	push   eax
c000fd4f:	51                   	push   ecx
c000fd50:	52                   	push   edx
c000fd51:	e8 66 08 ff ff       	call   c00005bc <memmove>
c000fd56:	83 c4 10             	add    esp,0x10
c000fd59:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fd5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fd5f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fd63:	0f 85 5a ff ff ff    	jne    c000fcc3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fd69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd6c:	eb 03                	jmp    c000fd71 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fd6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd71:	c9                   	leave  
c000fd72:	c3                   	ret    
c000fd73:	90                   	nop

c000fd74 <Keyboard::Keyboard(char const*)>:
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd7b:	83 ec 08             	sub    esp,0x8
c000fd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd82:	50                   	push   eax
c000fd83:	e8 c0 e2 ff ff       	call   c000e048 <Device::Device(char const*)>
c000fd88:	83 c4 10             	add    esp,0x10
c000fd8b:	ba 78 34 02 c0       	mov    edx,0xc0023478
c000fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd94:	89 10                	mov    DWORD PTR [eax],edx
c000fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd9a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fda4:	c6 05 04 62 02 c0 01 	mov    BYTE PTR ds:0xc0026204,0x1
c000fdab:	90                   	nop
c000fdac:	83 c4 0c             	add    esp,0xc
c000fdaf:	c3                   	ret    

c000fdb0 <Keyboard::~Keyboard()>:
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	ba 78 34 02 c0       	mov    edx,0xc0023478
c000fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdbc:	89 10                	mov    DWORD PTR [eax],edx
c000fdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc2:	83 ec 0c             	sub    esp,0xc
c000fdc5:	50                   	push   eax
c000fdc6:	e8 47 df ff ff       	call   c000dd12 <Device::~Device()>
c000fdcb:	83 c4 10             	add    esp,0x10
c000fdce:	90                   	nop
c000fdcf:	83 c4 0c             	add    esp,0xc
c000fdd2:	c3                   	ret    
c000fdd3:	90                   	nop

c000fdd4 <Keyboard::~Keyboard()>:
c000fdd4:	83 ec 0c             	sub    esp,0xc
c000fdd7:	83 ec 0c             	sub    esp,0xc
c000fdda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdde:	e8 cd ff ff ff       	call   c000fdb0 <Keyboard::~Keyboard()>
c000fde3:	83 c4 10             	add    esp,0x10
c000fde6:	83 ec 08             	sub    esp,0x8
c000fde9:	68 5c 01 00 00       	push   0x15c
c000fdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf2:	e8 2c cb ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000fdf7:	83 c4 10             	add    esp,0x10
c000fdfa:	83 c4 0c             	add    esp,0xc
c000fdfd:	c3                   	ret    

c000fdfe <LogicalDisk::close(int, int, void*)>:
c000fdfe:	83 c8 ff             	or     eax,0xffffffff
c000fe01:	c3                   	ret    

c000fe02 <LogicalDisk::~LogicalDisk()>:
c000fe02:	83 ec 0c             	sub    esp,0xc
c000fe05:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c000fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0e:	89 10                	mov    DWORD PTR [eax],edx
c000fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	50                   	push   eax
c000fe18:	e8 f5 de ff ff       	call   c000dd12 <Device::~Device()>
c000fe1d:	83 c4 10             	add    esp,0x10
c000fe20:	90                   	nop
c000fe21:	83 c4 0c             	add    esp,0xc
c000fe24:	c3                   	ret    
c000fe25:	90                   	nop

c000fe26 <LogicalDisk::~LogicalDisk()>:
c000fe26:	83 ec 0c             	sub    esp,0xc
c000fe29:	83 ec 0c             	sub    esp,0xc
c000fe2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe30:	e8 cd ff ff ff       	call   c000fe02 <LogicalDisk::~LogicalDisk()>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	83 ec 08             	sub    esp,0x8
c000fe3b:	68 74 01 00 00       	push   0x174
c000fe40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe44:	e8 da ca ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c000fe49:	83 c4 10             	add    esp,0x10
c000fe4c:	83 c4 0c             	add    esp,0xc
c000fe4f:	c3                   	ret    

c000fe50 <LogicalDisk::open(int, int, void*)>:
c000fe50:	83 ec 18             	sub    esp,0x18
c000fe53:	68 a4 34 02 c0       	push   0xc00234a4
c000fe58:	e8 e6 43 00 00       	call   c0014243 <Krnl::panic(char const*)>
c000fe5d:	83 c8 ff             	or     eax,0xffffffff
c000fe60:	83 c4 1c             	add    esp,0x1c
c000fe63:	c3                   	ret    

c000fe64 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fe64:	53                   	push   ebx
c000fe65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe71:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000fe77:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000fe7d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000fe83:	77 10                	ja     c000fe95 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000fe85:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000fe8b:	89 d3                	mov    ebx,edx
c000fe8d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000fe93:	72 05                	jb     c000fe9a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000fe95:	83 c8 ff             	or     eax,0xffffffff
c000fe98:	89 c2                	mov    edx,eax
c000fe9a:	5b                   	pop    ebx
c000fe9b:	c3                   	ret    

c000fe9c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000fe9c:	56                   	push   esi
c000fe9d:	83 c8 ff             	or     eax,0xffffffff
c000fea0:	53                   	push   ebx
c000fea1:	89 c2                	mov    edx,eax
c000fea3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fea7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000feab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000feaf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000feb5:	77 27                	ja     c000fede <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000feb7:	89 d8                	mov    eax,ebx
c000feb9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000febf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000fec5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000feca:	89 c2                	mov    edx,eax
c000fecc:	73 10                	jae    c000fede <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000fece:	89 c8                	mov    eax,ecx
c000fed0:	89 da                	mov    edx,ebx
c000fed2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000fed8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000fede:	5b                   	pop    ebx
c000fedf:	5e                   	pop    esi
c000fee0:	c3                   	ret    
c000fee1:	90                   	nop

c000fee2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000fee2:	83 ec 1c             	sub    esp,0x1c
c000fee5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000fee9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000feed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fef5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fef9:	89 04 24             	mov    DWORD PTR [esp],eax
c000fefc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff08:	83 ec 08             	sub    esp,0x8
c000ff0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff0f:	50                   	push   eax
c000ff10:	e8 33 e1 ff ff       	call   c000e048 <Device::Device(char const*)>
c000ff15:	83 c4 10             	add    esp,0x10
c000ff18:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c000ff1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff21:	89 10                	mov    DWORD PTR [eax],edx
c000ff23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff27:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ff2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff32:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ff39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff3d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ff47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ff4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff53:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ff59:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ff5f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ff63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ff66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ff6a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ff70:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ff76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ff7e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ff84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff88:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ff92:	90                   	nop
c000ff93:	83 c4 1c             	add    esp,0x1c
c000ff96:	c3                   	ret    
c000ff97:	90                   	nop

c000ff98 <LogicalDisk::assignDriveLetter()>:
c000ff98:	55                   	push   ebp
c000ff99:	57                   	push   edi
c000ff9a:	56                   	push   esi
c000ff9b:	53                   	push   ebx
c000ff9c:	83 ec 14             	sub    esp,0x14
c000ff9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffa3:	8b 3d 40 66 02 c0    	mov    edi,DWORD PTR ds:0xc0026640
c000ffa9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ffaf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ffb3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ffb9:	8b 3d 44 66 02 c0    	mov    edi,DWORD PTR ds:0xc0026644
c000ffbf:	3c 01                	cmp    al,0x1
c000ffc1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ffc5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ffc9:	19 c0                	sbb    eax,eax
c000ffcb:	83 e0 02             	and    eax,0x2
c000ffce:	83 c0 41             	add    eax,0x41
c000ffd1:	0f be e8             	movsx  ebp,al
c000ffd4:	3c 43                	cmp    al,0x43
c000ffd6:	75 10                	jne    c000ffe8 <LogicalDisk::assignDriveLetter()+0x50>
c000ffd8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ffdf:	75 5d                	jne    c001003e <LogicalDisk::assignDriveLetter()+0xa6>
c000ffe1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ffe6:	75 56                	jne    c001003e <LogicalDisk::assignDriveLetter()+0xa6>
c000ffe8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ffeb:	ba 01 00 00 00       	mov    edx,0x1
c000fff0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fff4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fff8:	d3 e2                	shl    edx,cl
c000fffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fffe:	89 d7                	mov    edi,edx
c0010000:	89 d6                	mov    esi,edx
c0010002:	c1 ff 1f             	sar    edi,0x1f
c0010005:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010009:	21 f9                	and    ecx,edi
c001000b:	09 d1                	or     ecx,edx
c001000d:	75 2f                	jne    c001003e <LogicalDisk::assignDriveLetter()+0xa6>
c001000f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010013:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010017:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001001d:	09 f2                	or     edx,esi
c001001f:	89 15 40 66 02 c0    	mov    DWORD PTR ds:0xc0026640,edx
c0010025:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010029:	09 fa                	or     edx,edi
c001002b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001002f:	89 15 44 66 02 c0    	mov    DWORD PTR ds:0xc0026644,edx
c0010035:	89 1c bd 60 66 02 c0 	mov    DWORD PTR [edi*4-0x3ffd99a0],ebx
c001003c:	eb 08                	jmp    c0010046 <LogicalDisk::assignDriveLetter()+0xae>
c001003e:	45                   	inc    ebp
c001003f:	40                   	inc    eax
c0010040:	3c 5b                	cmp    al,0x5b
c0010042:	75 90                	jne    c000ffd4 <LogicalDisk::assignDriveLetter()+0x3c>
c0010044:	31 c0                	xor    eax,eax
c0010046:	83 c4 14             	add    esp,0x14
c0010049:	5b                   	pop    ebx
c001004a:	5e                   	pop    esi
c001004b:	5f                   	pop    edi
c001004c:	5d                   	pop    ebp
c001004d:	c3                   	ret    

c001004e <LogicalDisk::mount()>:
c001004e:	56                   	push   esi
c001004f:	53                   	push   ebx
c0010050:	53                   	push   ebx
c0010051:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010055:	8b 1d d4 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261d4
c001005b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010065:	85 db                	test   ebx,ebx
c0010067:	74 27                	je     c0010090 <LogicalDisk::mount()+0x42>
c0010069:	51                   	push   ecx
c001006a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010071:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010073:	83 e8 41             	sub    eax,0x41
c0010076:	50                   	push   eax
c0010077:	56                   	push   esi
c0010078:	53                   	push   ebx
c0010079:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001007c:	83 c4 10             	add    esp,0x10
c001007f:	84 c0                	test   al,al
c0010081:	74 08                	je     c001008b <LogicalDisk::mount()+0x3d>
c0010083:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010089:	eb 07                	jmp    c0010092 <LogicalDisk::mount()+0x44>
c001008b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001008e:	eb d5                	jmp    c0010065 <LogicalDisk::mount()+0x17>
c0010090:	31 c0                	xor    eax,eax
c0010092:	5a                   	pop    edx
c0010093:	5b                   	pop    ebx
c0010094:	5e                   	pop    esi
c0010095:	c3                   	ret    

c0010096 <LogicalDisk::unmount()>:
c0010096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001009a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00100a4:	c3                   	ret    
c00100a5:	90                   	nop

c00100a6 <LogicalDisk::eject()>:
c00100a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00100b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00100b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00100b6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00100b9:	90                   	nop

c00100ba <LogicalDisk::unassignDriveLetter()>:
c00100ba:	57                   	push   edi
c00100bb:	56                   	push   esi
c00100bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100c0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00100c7:	84 c9                	test   cl,cl
c00100c9:	75 0f                	jne    c00100da <LogicalDisk::unassignDriveLetter()+0x20>
c00100cb:	c7 44 24 0c c8 34 02 c0 	mov    DWORD PTR [esp+0xc],0xc00234c8
c00100d3:	5e                   	pop    esi
c00100d4:	5f                   	pop    edi
c00100d5:	e9 69 41 00 00       	jmp    c0014243 <Krnl::panic(char const*)>
c00100da:	83 e9 41             	sub    ecx,0x41
c00100dd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00100e4:	b8 01 00 00 00       	mov    eax,0x1
c00100e9:	c7 04 8d 60 66 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd99a0],0x0
c00100f4:	d3 e0                	shl    eax,cl
c00100f6:	89 c7                	mov    edi,eax
c00100f8:	f7 d0                	not    eax
c00100fa:	c1 ff 1f             	sar    edi,0x1f
c00100fd:	21 05 40 66 02 c0    	and    DWORD PTR ds:0xc0026640,eax
c0010103:	89 fe                	mov    esi,edi
c0010105:	f7 d6                	not    esi
c0010107:	21 35 44 66 02 c0    	and    DWORD PTR ds:0xc0026644,esi
c001010d:	5e                   	pop    esi
c001010e:	5f                   	pop    edi
c001010f:	c3                   	ret    

c0010110 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010110:	57                   	push   edi
c0010111:	56                   	push   esi
c0010112:	53                   	push   ebx
c0010113:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010117:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001011b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001011f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010123:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010129:	77 41                	ja     c001016c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001012b:	99                   	cdq    
c001012c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010132:	01 c8                	add    eax,ecx
c0010134:	11 da                	adc    edx,ebx
c0010136:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001013c:	19 d7                	sbb    edi,edx
c001013e:	72 33                	jb     c0010173 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010140:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010146:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001014c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010150:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010154:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001015a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010160:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010164:	5b                   	pop    ebx
c0010165:	5e                   	pop    esi
c0010166:	5f                   	pop    edi
c0010167:	e9 18 0b 00 00       	jmp    c0010c84 <VCache::read(unsigned long long, int, void*)>
c001016c:	b8 05 00 00 00       	mov    eax,0x5
c0010171:	eb 05                	jmp    c0010178 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010173:	b8 07 00 00 00       	mov    eax,0x7
c0010178:	5b                   	pop    ebx
c0010179:	5e                   	pop    esi
c001017a:	5f                   	pop    edi
c001017b:	c3                   	ret    

c001017c <LogicalDisk::write(unsigned long long, int, void*)>:
c001017c:	57                   	push   edi
c001017d:	56                   	push   esi
c001017e:	53                   	push   ebx
c001017f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010183:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010187:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001018b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001018f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010195:	77 41                	ja     c00101d8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010197:	99                   	cdq    
c0010198:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001019e:	01 c8                	add    eax,ecx
c00101a0:	11 da                	adc    edx,ebx
c00101a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101a8:	19 d7                	sbb    edi,edx
c00101aa:	72 33                	jb     c00101df <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00101ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00101c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00101cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101d0:	5b                   	pop    ebx
c00101d1:	5e                   	pop    esi
c00101d2:	5f                   	pop    edi
c00101d3:	e9 72 09 00 00       	jmp    c0010b4a <VCache::write(unsigned long long, int, void*)>
c00101d8:	b8 05 00 00 00       	mov    eax,0x5
c00101dd:	eb 05                	jmp    c00101e4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00101df:	b8 07 00 00 00       	mov    eax,0x7
c00101e4:	5b                   	pop    ebx
c00101e5:	5e                   	pop    esi
c00101e6:	5f                   	pop    edi
c00101e7:	c3                   	ret    

c00101e8 <Mouse::Mouse(char const*)>:
c00101e8:	83 ec 0c             	sub    esp,0xc
c00101eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101ef:	83 ec 08             	sub    esp,0x8
c00101f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101f6:	50                   	push   eax
c00101f7:	e8 4c de ff ff       	call   c000e048 <Device::Device(char const*)>
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	ba 1c 35 02 c0       	mov    edx,0xc002351c
c0010204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010208:	89 10                	mov    DWORD PTR [eax],edx
c001020a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001020e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010218:	90                   	nop
c0010219:	83 c4 0c             	add    esp,0xc
c001021c:	c3                   	ret    
c001021d:	90                   	nop

c001021e <Mouse::~Mouse()>:
c001021e:	83 ec 0c             	sub    esp,0xc
c0010221:	ba 1c 35 02 c0       	mov    edx,0xc002351c
c0010226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001022a:	89 10                	mov    DWORD PTR [eax],edx
c001022c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010230:	83 ec 0c             	sub    esp,0xc
c0010233:	50                   	push   eax
c0010234:	e8 d9 da ff ff       	call   c000dd12 <Device::~Device()>
c0010239:	83 c4 10             	add    esp,0x10
c001023c:	90                   	nop
c001023d:	83 c4 0c             	add    esp,0xc
c0010240:	c3                   	ret    
c0010241:	90                   	nop

c0010242 <Mouse::~Mouse()>:
c0010242:	83 ec 0c             	sub    esp,0xc
c0010245:	83 ec 0c             	sub    esp,0xc
c0010248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001024c:	e8 cd ff ff ff       	call   c001021e <Mouse::~Mouse()>
c0010251:	83 c4 10             	add    esp,0x10
c0010254:	83 ec 08             	sub    esp,0x8
c0010257:	68 58 01 00 00       	push   0x158
c001025c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010260:	e8 be c6 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0010265:	83 c4 10             	add    esp,0x10
c0010268:	83 c4 0c             	add    esp,0xc
c001026b:	c3                   	ret    

c001026c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001026c:	55                   	push   ebp
c001026d:	57                   	push   edi
c001026e:	56                   	push   esi
c001026f:	53                   	push   ebx
c0010270:	81 ec 28 01 00 00    	sub    esp,0x128
c0010276:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001027d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010284:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001028b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010292:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010296:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001029a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00102a1:	e8 9e de ff ff       	call   c000e144 <Device::getName()>
c00102a6:	5a                   	pop    edx
c00102a7:	59                   	pop    ecx
c00102a8:	50                   	push   eax
c00102a9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00102ad:	55                   	push   ebp
c00102ae:	e8 8d 04 ff ff       	call   c0000740 <strcpy>
c00102b3:	5b                   	pop    ebx
c00102b4:	58                   	pop    eax
c00102b5:	68 40 35 02 c0       	push   0xc0023540
c00102ba:	55                   	push   ebp
c00102bb:	e8 c0 05 ff ff       	call   c0000880 <strcat>
c00102c0:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00102c7:	e8 d7 96 ff ff       	call   c00099a3 <malloc>
c00102cc:	83 c4 0c             	add    esp,0xc
c00102cf:	89 c3                	mov    ebx,eax
c00102d1:	57                   	push   edi
c00102d2:	56                   	push   esi
c00102d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102db:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00102e2:	55                   	push   ebp
c00102e3:	50                   	push   eax
c00102e4:	e8 f9 fb ff ff       	call   c000fee2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00102e9:	83 c4 14             	add    esp,0x14
c00102ec:	53                   	push   ebx
c00102ed:	e8 a6 fc ff ff       	call   c000ff98 <LogicalDisk::assignDriveLetter()>
c00102f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f5:	e8 54 fd ff ff       	call   c001004e <LogicalDisk::mount()>
c00102fa:	58                   	pop    eax
c00102fb:	5a                   	pop    edx
c00102fc:	53                   	push   ebx
c00102fd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010304:	e8 3b db ff ff       	call   c000de44 <Device::addChild(Device*)>
c0010309:	81 c4 2c 01 00 00    	add    esp,0x12c
c001030f:	5b                   	pop    ebx
c0010310:	5e                   	pop    esi
c0010311:	5f                   	pop    edi
c0010312:	5d                   	pop    ebp
c0010313:	c3                   	ret    

c0010314 <createPartitionsForDisk(PhysicalDisk*)>:
c0010314:	55                   	push   ebp
c0010315:	57                   	push   edi
c0010316:	56                   	push   esi
c0010317:	53                   	push   ebx
c0010318:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001031e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010325:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001032b:	3d 00 02 00 00       	cmp    eax,0x200
c0010330:	74 27                	je     c0010359 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010332:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010338:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001033e:	83 ec 10             	sub    esp,0x10
c0010341:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010345:	99                   	cdq    
c0010346:	c1 e6 0a             	shl    esi,0xa
c0010349:	52                   	push   edx
c001034a:	89 fd                	mov    ebp,edi
c001034c:	50                   	push   eax
c001034d:	55                   	push   ebp
c001034e:	56                   	push   esi
c001034f:	e8 b0 08 01 00       	call   c0020c04 <__udivdi3>
c0010354:	e9 b1 00 00 00       	jmp    c001040a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010359:	83 ec 0c             	sub    esp,0xc
c001035c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001035e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010362:	56                   	push   esi
c0010363:	6a 01                	push   0x1
c0010365:	6a 00                	push   0x0
c0010367:	6a 00                	push   0x0
c0010369:	53                   	push   ebx
c001036a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001036d:	83 c4 20             	add    esp,0x20
c0010370:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010378:	75 0a                	jne    c0010384 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001037a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010382:	74 2c                	je     c00103b0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010384:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001038a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010390:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010396:	83 ec 10             	sub    esp,0x10
c0010399:	0f a4 c2 0a          	shld   edx,eax,0xa
c001039d:	89 f7                	mov    edi,esi
c001039f:	c1 e0 0a             	shl    eax,0xa
c00103a2:	c1 ff 1f             	sar    edi,0x1f
c00103a5:	57                   	push   edi
c00103a6:	56                   	push   esi
c00103a7:	52                   	push   edx
c00103a8:	50                   	push   eax
c00103a9:	e8 56 08 01 00       	call   c0020c04 <__udivdi3>
c00103ae:	eb 5a                	jmp    c001040a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103b0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00103b7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00103be:	83 e1 7f             	and    ecx,0x7f
c00103c1:	83 e0 7f             	and    eax,0x7f
c00103c4:	01 c1                	add    ecx,eax
c00103c6:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00103cd:	83 e0 7f             	and    eax,0x7f
c00103d0:	01 c1                	add    ecx,eax
c00103d2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00103d9:	83 e0 7f             	and    eax,0x7f
c00103dc:	00 c1                	add    cl,al
c00103de:	74 41                	je     c0010421 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00103e0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00103e6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00103ec:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00103f2:	83 ec 10             	sub    esp,0x10
c00103f5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00103f9:	89 f7                	mov    edi,esi
c00103fb:	c1 e0 0a             	shl    eax,0xa
c00103fe:	c1 ff 1f             	sar    edi,0x1f
c0010401:	57                   	push   edi
c0010402:	56                   	push   esi
c0010403:	52                   	push   edx
c0010404:	50                   	push   eax
c0010405:	e8 fa 07 01 00       	call   c0020c04 <__udivdi3>
c001040a:	83 c4 14             	add    esp,0x14
c001040d:	52                   	push   edx
c001040e:	50                   	push   eax
c001040f:	6a 00                	push   0x0
c0010411:	6a 00                	push   0x0
c0010413:	53                   	push   ebx
c0010414:	e8 53 fe ff ff       	call   c001026c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010419:	83 c4 20             	add    esp,0x20
c001041c:	e9 79 01 00 00       	jmp    c001059a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010421:	89 f0                	mov    eax,esi
c0010423:	31 f6                	xor    esi,esi
c0010425:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001042c:	75 02                	jne    c0010430 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001042e:	89 f1                	mov    ecx,esi
c0010430:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010437:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001043e:	c1 e2 08             	shl    edx,0x8
c0010441:	c1 e7 10             	shl    edi,0x10
c0010444:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001044c:	09 fa                	or     edx,edi
c001044e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010456:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001045d:	83 c0 10             	add    eax,0x10
c0010460:	09 fa                	or     edx,edi
c0010462:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010469:	c1 e7 18             	shl    edi,0x18
c001046c:	09 fa                	or     edx,edi
c001046e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010475:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010479:	c1 e7 10             	shl    edi,0x10
c001047c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010483:	c1 e2 08             	shl    edx,0x8
c0010486:	09 fa                	or     edx,edi
c0010488:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001048f:	09 fa                	or     edx,edi
c0010491:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010498:	c1 e7 18             	shl    edi,0x18
c001049b:	09 fa                	or     edx,edi
c001049d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00104a1:	46                   	inc    esi
c00104a2:	83 fe 04             	cmp    esi,0x4
c00104a5:	0f 85 7a ff ff ff    	jne    c0010425 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00104ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104af:	83 f0 01             	xor    eax,0x1
c00104b2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00104b6:	75 57                	jne    c001050f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00104b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104bc:	83 f0 01             	xor    eax,0x1
c00104bf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00104c3:	75 4a                	jne    c001050f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00104c5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00104c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00104d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00104d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00104df:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00104e5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00104eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00104ef:	89 f7                	mov    edi,esi
c00104f1:	c1 e0 0a             	shl    eax,0xa
c00104f4:	c1 ff 1f             	sar    edi,0x1f
c00104f7:	57                   	push   edi
c00104f8:	56                   	push   esi
c00104f9:	52                   	push   edx
c00104fa:	50                   	push   eax
c00104fb:	e8 04 07 01 00       	call   c0020c04 <__udivdi3>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010507:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001050b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001050f:	84 c9                	test   cl,cl
c0010511:	74 53                	je     c0010566 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010513:	0f b6 c9             	movzx  ecx,cl
c0010516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001051e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010522:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010526:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001052a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001052e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010532:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010536:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001053a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001053e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010546:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001054a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001054e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010552:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010556:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001055a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001055e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010562:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010566:	31 ed                	xor    ebp,ebp
c0010568:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001056c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010570:	89 f8                	mov    eax,edi
c0010572:	09 f0                	or     eax,esi
c0010574:	74 1e                	je     c0010594 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010576:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001057a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001057e:	89 d1                	mov    ecx,edx
c0010580:	09 c1                	or     ecx,eax
c0010582:	74 10                	je     c0010594 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	57                   	push   edi
c0010588:	56                   	push   esi
c0010589:	52                   	push   edx
c001058a:	50                   	push   eax
c001058b:	53                   	push   ebx
c001058c:	e8 db fc ff ff       	call   c001026c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010591:	83 c4 20             	add    esp,0x20
c0010594:	45                   	inc    ebp
c0010595:	83 fd 04             	cmp    ebp,0x4
c0010598:	75 ce                	jne    c0010568 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001059a:	81 c4 5c 02 00 00    	add    esp,0x25c
c00105a0:	5b                   	pop    ebx
c00105a1:	5e                   	pop    esi
c00105a2:	5f                   	pop    edi
c00105a3:	5d                   	pop    ebp
c00105a4:	c3                   	ret    
c00105a5:	90                   	nop

c00105a6 <Serial::Serial(char const*)>:
c00105a6:	83 ec 0c             	sub    esp,0xc
c00105a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ad:	83 ec 08             	sub    esp,0x8
c00105b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b4:	50                   	push   eax
c00105b5:	e8 8e da ff ff       	call   c000e048 <Device::Device(char const*)>
c00105ba:	83 c4 10             	add    esp,0x10
c00105bd:	ba 54 35 02 c0       	mov    edx,0xc0023554
c00105c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c6:	89 10                	mov    DWORD PTR [eax],edx
c00105c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105cc:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00105d6:	90                   	nop
c00105d7:	83 c4 0c             	add    esp,0xc
c00105da:	c3                   	ret    
c00105db:	90                   	nop

c00105dc <Serial::~Serial()>:
c00105dc:	83 ec 0c             	sub    esp,0xc
c00105df:	ba 54 35 02 c0       	mov    edx,0xc0023554
c00105e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e8:	89 10                	mov    DWORD PTR [eax],edx
c00105ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ee:	83 ec 0c             	sub    esp,0xc
c00105f1:	50                   	push   eax
c00105f2:	e8 1b d7 ff ff       	call   c000dd12 <Device::~Device()>
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	90                   	nop
c00105fb:	83 c4 0c             	add    esp,0xc
c00105fe:	c3                   	ret    
c00105ff:	90                   	nop

c0010600 <Serial::~Serial()>:
c0010600:	83 ec 0c             	sub    esp,0xc
c0010603:	83 ec 0c             	sub    esp,0xc
c0010606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060a:	e8 cd ff ff ff       	call   c00105dc <Serial::~Serial()>
c001060f:	83 c4 10             	add    esp,0x10
c0010612:	83 ec 08             	sub    esp,0x8
c0010615:	68 58 01 00 00       	push   0x158
c001061a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001061e:	e8 00 c3 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0010623:	83 c4 10             	add    esp,0x10
c0010626:	83 c4 0c             	add    esp,0xc
c0010629:	c3                   	ret    

c001062a <Timer::Timer(char const*)>:
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010631:	83 ec 08             	sub    esp,0x8
c0010634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010638:	50                   	push   eax
c0010639:	e8 0a da ff ff       	call   c000e048 <Device::Device(char const*)>
c001063e:	83 c4 10             	add    esp,0x10
c0010641:	ba 98 35 02 c0       	mov    edx,0xc0023598
c0010646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064a:	89 10                	mov    DWORD PTR [eax],edx
c001064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010650:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001065a:	90                   	nop
c001065b:	83 c4 0c             	add    esp,0xc
c001065e:	c3                   	ret    
c001065f:	90                   	nop

c0010660 <Timer::~Timer()>:
c0010660:	83 ec 0c             	sub    esp,0xc
c0010663:	ba 98 35 02 c0       	mov    edx,0xc0023598
c0010668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066c:	89 10                	mov    DWORD PTR [eax],edx
c001066e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010672:	83 ec 0c             	sub    esp,0xc
c0010675:	50                   	push   eax
c0010676:	e8 97 d6 ff ff       	call   c000dd12 <Device::~Device()>
c001067b:	83 c4 10             	add    esp,0x10
c001067e:	90                   	nop
c001067f:	83 c4 0c             	add    esp,0xc
c0010682:	c3                   	ret    
c0010683:	90                   	nop

c0010684 <Timer::~Timer()>:
c0010684:	83 ec 0c             	sub    esp,0xc
c0010687:	83 ec 0c             	sub    esp,0xc
c001068a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001068e:	e8 cd ff ff ff       	call   c0010660 <Timer::~Timer()>
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	83 ec 08             	sub    esp,0x8
c0010699:	68 5c 01 00 00       	push   0x15c
c001069e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a2:	e8 7c c2 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	83 c4 0c             	add    esp,0xc
c00106ad:	c3                   	ret    

c00106ae <Timer::read()>:
c00106ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00106b8:	c3                   	ret    

c00106b9 <timerHandler(unsigned int)>:
c00106b9:	56                   	push   esi
c00106ba:	53                   	push   ebx
c00106bb:	51                   	push   ecx
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	01 05 cc 66 02 c0    	add    DWORD PTR ds:0xc00266cc,eax
c00106c6:	80 3d 6d 60 02 c0 00 	cmp    BYTE PTR ds:0xc002606d,0x0
c00106cd:	0f 84 3b 01 00 00    	je     c001080e <timerHandler(unsigned int)+0x155>
c00106d3:	fa                   	cli    
c00106d4:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00106da:	83 ec 0c             	sub    esp,0xc
c00106dd:	ff 05 64 75 02 c0    	inc    DWORD PTR ds:0xc0027564
c00106e3:	68 78 75 02 c0       	push   0xc0027578
c00106e8:	e8 e7 0a 01 00       	call   c00211d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00106ed:	83 c4 10             	add    esp,0x10
c00106f0:	84 c0                	test   al,al
c00106f2:	0f 85 9a 00 00 00    	jne    c0010792 <timerHandler(unsigned int)+0xd9>
c00106f8:	83 ec 0c             	sub    esp,0xc
c00106fb:	68 78 75 02 c0       	push   0xc0027578
c0010700:	e8 eb 0a 01 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010705:	83 c4 10             	add    esp,0x10
c0010708:	89 c6                	mov    esi,eax
c001070a:	83 ec 0c             	sub    esp,0xc
c001070d:	68 78 75 02 c0       	push   0xc0027578
c0010712:	e8 d9 0a 01 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010717:	c7 04 24 78 75 02 c0 	mov    DWORD PTR [esp],0xc0027578
c001071e:	89 c3                	mov    ebx,eax
c0010720:	e8 d3 0a 01 00       	call   c00211f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010725:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010728:	83 c4 10             	add    esp,0x10
c001072b:	3b 05 cc 66 02 c0    	cmp    eax,DWORD PTR ds:0xc00266cc
c0010731:	77 21                	ja     c0010754 <timerHandler(unsigned int)+0x9b>
c0010733:	83 ec 0c             	sub    esp,0xc
c0010736:	53                   	push   ebx
c0010737:	e8 22 7b 00 00       	call   c001825e <unblockTask(ThreadControlBlock*)>
c001073c:	83 c4 10             	add    esp,0x10
c001073f:	39 de                	cmp    esi,ebx
c0010741:	75 23                	jne    c0010766 <timerHandler(unsigned int)+0xad>
c0010743:	83 ec 0c             	sub    esp,0xc
c0010746:	68 78 75 02 c0       	push   0xc0027578
c001074b:	e8 a0 0a 01 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010750:	89 c6                	mov    esi,eax
c0010752:	eb 0e                	jmp    c0010762 <timerHandler(unsigned int)+0xa9>
c0010754:	52                   	push   edx
c0010755:	52                   	push   edx
c0010756:	53                   	push   ebx
c0010757:	68 78 75 02 c0       	push   0xc0027578
c001075c:	e8 49 0b 01 00       	call   c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010761:	90                   	nop
c0010762:	83 c4 10             	add    esp,0x10
c0010765:	90                   	nop
c0010766:	83 ec 0c             	sub    esp,0xc
c0010769:	68 78 75 02 c0       	push   0xc0027578
c001076e:	e8 61 0a 01 00       	call   c00211d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010773:	83 c4 10             	add    esp,0x10
c0010776:	84 c0                	test   al,al
c0010778:	75 18                	jne    c0010792 <timerHandler(unsigned int)+0xd9>
c001077a:	83 ec 0c             	sub    esp,0xc
c001077d:	68 78 75 02 c0       	push   0xc0027578
c0010782:	e8 69 0a 01 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010787:	83 c4 10             	add    esp,0x10
c001078a:	39 f0                	cmp    eax,esi
c001078c:	0f 85 78 ff ff ff    	jne    c001070a <timerHandler(unsigned int)+0x51>
c0010792:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010797:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001079b:	74 3d                	je     c00107da <timerHandler(unsigned int)+0x121>
c001079d:	80 3d 6c 60 02 c0 00 	cmp    BYTE PTR ds:0xc002606c,0x0
c00107a4:	74 34                	je     c00107da <timerHandler(unsigned int)+0x121>
c00107a6:	fa                   	cli    
c00107a7:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00107ad:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c00107b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00107b8:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c00107bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00107c1:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c00107c4:	72 06                	jb     c00107cc <timerHandler(unsigned int)+0x113>
c00107c6:	e8 05 76 00 00       	call   c0017dd0 <schedule()>
c00107cb:	90                   	nop
c00107cc:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00107d1:	48                   	dec    eax
c00107d2:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00107d7:	75 01                	jne    c00107da <timerHandler(unsigned int)+0x121>
c00107d9:	fb                   	sti    
c00107da:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c00107df:	48                   	dec    eax
c00107e0:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c00107e5:	75 19                	jne    c0010800 <timerHandler(unsigned int)+0x147>
c00107e7:	83 3d 60 75 02 c0 00 	cmp    DWORD PTR ds:0xc0027560,0x0
c00107ee:	74 10                	je     c0010800 <timerHandler(unsigned int)+0x147>
c00107f0:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c00107fa:	e8 d1 75 00 00       	call   c0017dd0 <schedule()>
c00107ff:	90                   	nop
c0010800:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0010805:	48                   	dec    eax
c0010806:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c001080b:	75 01                	jne    c001080e <timerHandler(unsigned int)+0x155>
c001080d:	fb                   	sti    
c001080e:	58                   	pop    eax
c001080f:	5b                   	pop    ebx
c0010810:	5e                   	pop    esi
c0010811:	c3                   	ret    

c0010812 <setupTimer(int)>:
c0010812:	57                   	push   edi
c0010813:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0010818:	56                   	push   esi
c0010819:	53                   	push   ebx
c001081a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001081e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010824:	83 ec 0c             	sub    esp,0xc
c0010827:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001082d:	e8 12 d9 ff ff       	call   c000e144 <Device::getName()>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010838:	0f 85 92 00 00 00    	jne    c00108d0 <setupTimer(int)+0xbe>
c001083e:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0010843:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001084a:	0f 84 80 00 00 00    	je     c00108d0 <setupTimer(int)+0xbe>
c0010850:	83 ec 0c             	sub    esp,0xc
c0010853:	68 5c 01 00 00       	push   0x15c
c0010858:	e8 46 91 ff ff       	call   c00099a3 <malloc>
c001085d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010860:	89 c3                	mov    ebx,eax
c0010862:	e8 73 ff 00 00       	call   c00207da <PIT::PIT()>
c0010867:	59                   	pop    ecx
c0010868:	5f                   	pop    edi
c0010869:	53                   	push   ebx
c001086a:	ff 35 68 60 02 c0    	push   DWORD PTR ds:0xc0026068
c0010870:	e8 cf d5 ff ff       	call   c000de44 <Device::addChild(Device*)>
c0010875:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010877:	6a 00                	push   0x0
c0010879:	6a 00                	push   0x0
c001087b:	56                   	push   esi
c001087c:	53                   	push   ebx
c001087d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010880:	83 c4 14             	add    esp,0x14
c0010883:	68 60 01 00 00       	push   0x160
c0010888:	e8 16 91 ff ff       	call   c00099a3 <malloc>
c001088d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010890:	89 c7                	mov    edi,eax
c0010892:	e8 fd fd 00 00       	call   c0020694 <APICTimer::APICTimer()>
c0010897:	6a 00                	push   0x0
c0010899:	6a 00                	push   0x0
c001089b:	56                   	push   esi
c001089c:	57                   	push   edi
c001089d:	e8 f4 fc 00 00       	call   c0020596 <APICTimer::open(int, int, void*)>
c00108a2:	83 c4 20             	add    esp,0x20
c00108a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108a7:	6a 00                	push   0x0
c00108a9:	6a 00                	push   0x0
c00108ab:	6a 00                	push   0x0
c00108ad:	53                   	push   ebx
c00108ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00108b1:	58                   	pop    eax
c00108b2:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00108b7:	5a                   	pop    edx
c00108b8:	57                   	push   edi
c00108b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00108bf:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00108c5:	e8 7a d5 ff ff       	call   c000de44 <Device::addChild(Device*)>
c00108ca:	83 c4 10             	add    esp,0x10
c00108cd:	eb 35                	jmp    c0010904 <setupTimer(int)+0xf2>
c00108cf:	90                   	nop
c00108d0:	83 ec 0c             	sub    esp,0xc
c00108d3:	68 5c 01 00 00       	push   0x15c
c00108d8:	e8 c6 90 ff ff       	call   c00099a3 <malloc>
c00108dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00108e0:	89 c3                	mov    ebx,eax
c00108e2:	e8 f3 fe 00 00       	call   c00207da <PIT::PIT()>
c00108e7:	58                   	pop    eax
c00108e8:	5a                   	pop    edx
c00108e9:	53                   	push   ebx
c00108ea:	ff 35 68 60 02 c0    	push   DWORD PTR ds:0xc0026068
c00108f0:	e8 4f d5 ff ff       	call   c000de44 <Device::addChild(Device*)>
c00108f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108f7:	6a 00                	push   0x0
c00108f9:	6a 00                	push   0x0
c00108fb:	56                   	push   esi
c00108fc:	53                   	push   ebx
c00108fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010900:	83 c4 20             	add    esp,0x20
c0010903:	90                   	nop
c0010904:	89 d8                	mov    eax,ebx
c0010906:	5b                   	pop    ebx
c0010907:	5e                   	pop    esi
c0010908:	5f                   	pop    edi
c0010909:	c3                   	ret    

c001090a <VCache::VCache(PhysicalDisk*)>:
c001090a:	53                   	push   ebx
c001090b:	83 ec 18             	sub    esp,0x18
c001090e:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c0010913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010917:	89 10                	mov    DWORD PTR [eax],edx
c0010919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001091d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010928:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001092f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010933:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001093a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010945:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001094c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010957:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001095e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010962:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001096a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010971:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001097c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010984:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001098c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010994:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001099b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00109a3:	83 ec 0c             	sub    esp,0xc
c00109a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109aa:	e8 f4 8f ff ff       	call   c00099a3 <malloc>
c00109af:	83 c4 10             	add    esp,0x10
c00109b2:	89 c3                	mov    ebx,eax
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	53                   	push   ebx
c00109b8:	e8 ef 71 00 00       	call   c0017bac <Mutex::Mutex()>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00109c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00109cf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00109d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109d6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00109dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109e1:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00109e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109f2:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00109f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00109fe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a02:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a05:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a0c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a14:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010a1a:	05 00 01 00 00       	add    eax,0x100
c0010a1f:	c1 e0 04             	shl    eax,0x4
c0010a22:	83 ec 0c             	sub    esp,0xc
c0010a25:	50                   	push   eax
c0010a26:	e8 78 8f ff ff       	call   c00099a3 <malloc>
c0010a2b:	83 c4 10             	add    esp,0x10
c0010a2e:	89 c2                	mov    edx,eax
c0010a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a34:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010a37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a3b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a46:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010a4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a4e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010a54:	c1 e0 07             	shl    eax,0x7
c0010a57:	83 ec 0c             	sub    esp,0xc
c0010a5a:	50                   	push   eax
c0010a5b:	e8 43 8f ff ff       	call   c00099a3 <malloc>
c0010a60:	83 c4 10             	add    esp,0x10
c0010a63:	89 c2                	mov    edx,eax
c0010a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a69:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010a6c:	90                   	nop
c0010a6d:	83 c4 18             	add    esp,0x18
c0010a70:	5b                   	pop    ebx
c0010a71:	c3                   	ret    

c0010a72 <VCache::invalidateReadBuffer()>:
c0010a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a76:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010a7c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a80:	c3                   	ret    
c0010a81:	90                   	nop

c0010a82 <VCache::writeWriteBuffer()>:
c0010a82:	53                   	push   ebx
c0010a83:	83 ec 0c             	sub    esp,0xc
c0010a86:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a8a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010a8d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010a90:	68 c0 35 02 c0       	push   0xc00235c0
c0010a95:	e8 6a bf ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010a9a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010a9d:	5a                   	pop    edx
c0010a9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aa0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010aa3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010aa6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010aa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010aac:	50                   	push   eax
c0010aad:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010ab0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010ab7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010abe:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010ac2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010ac9:	83 c4 28             	add    esp,0x28
c0010acc:	5b                   	pop    ebx
c0010acd:	c3                   	ret    

c0010ace <VCache::~VCache()>:
c0010ace:	83 ec 0c             	sub    esp,0xc
c0010ad1:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c0010ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ada:	89 10                	mov    DWORD PTR [eax],edx
c0010adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010ae3:	84 c0                	test   al,al
c0010ae5:	74 0f                	je     c0010af6 <VCache::~VCache()+0x28>
c0010ae7:	83 ec 0c             	sub    esp,0xc
c0010aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aee:	e8 8f ff ff ff       	call   c0010a82 <VCache::writeWriteBuffer()>
c0010af3:	83 c4 10             	add    esp,0x10
c0010af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010afd:	83 ec 0c             	sub    esp,0xc
c0010b00:	50                   	push   eax
c0010b01:	e8 ad 8e ff ff       	call   c00099b3 <free>
c0010b06:	83 c4 10             	add    esp,0x10
c0010b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010b10:	83 ec 0c             	sub    esp,0xc
c0010b13:	50                   	push   eax
c0010b14:	e8 9a 8e ff ff       	call   c00099b3 <free>
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	90                   	nop
c0010b1d:	83 c4 0c             	add    esp,0xc
c0010b20:	c3                   	ret    
c0010b21:	90                   	nop

c0010b22 <VCache::~VCache()>:
c0010b22:	83 ec 0c             	sub    esp,0xc
c0010b25:	83 ec 0c             	sub    esp,0xc
c0010b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b2c:	e8 9d ff ff ff       	call   c0010ace <VCache::~VCache()>
c0010b31:	83 c4 10             	add    esp,0x10
c0010b34:	83 ec 08             	sub    esp,0x8
c0010b37:	6a 44                	push   0x44
c0010b39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b3d:	e8 e1 bd ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0010b42:	83 c4 10             	add    esp,0x10
c0010b45:	83 c4 0c             	add    esp,0xc
c0010b48:	c3                   	ret    
c0010b49:	90                   	nop

c0010b4a <VCache::write(unsigned long long, int, void*)>:
c0010b4a:	55                   	push   ebp
c0010b4b:	31 c0                	xor    eax,eax
c0010b4d:	57                   	push   edi
c0010b4e:	56                   	push   esi
c0010b4f:	53                   	push   ebx
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b57:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b5b:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010b5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b63:	90                   	nop
c0010b64:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010b68:	7d 16                	jge    c0010b80 <VCache::write(unsigned long long, int, void*)+0x36>
c0010b6a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010b6d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010b73:	0f af c8             	imul   ecx,eax
c0010b76:	89 ca                	mov    edx,ecx
c0010b78:	01 f2                	add    edx,esi
c0010b7a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010b7c:	40                   	inc    eax
c0010b7d:	eb e5                	jmp    c0010b64 <VCache::write(unsigned long long, int, void*)+0x1a>
c0010b7f:	90                   	nop
c0010b80:	83 ec 0c             	sub    esp,0xc
c0010b83:	68 e4 35 02 c0       	push   0xc00235e4
c0010b88:	e8 77 be ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010b94:	74 0c                	je     c0010ba2 <VCache::write(unsigned long long, int, void*)+0x58>
c0010b96:	83 ec 0c             	sub    esp,0xc
c0010b99:	53                   	push   ebx
c0010b9a:	e8 d3 fe ff ff       	call   c0010a72 <VCache::invalidateReadBuffer()>
c0010b9f:	83 c4 10             	add    esp,0x10
c0010ba2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ba6:	74 64                	je     c0010c0c <VCache::write(unsigned long long, int, void*)+0xc2>
c0010ba8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bab:	99                   	cdq    
c0010bac:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010baf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010bb2:	31 f8                	xor    eax,edi
c0010bb4:	89 d1                	mov    ecx,edx
c0010bb6:	89 ca                	mov    edx,ecx
c0010bb8:	31 ea                	xor    edx,ebp
c0010bba:	09 d0                	or     eax,edx
c0010bbc:	75 42                	jne    c0010c00 <VCache::write(unsigned long long, int, void*)+0xb6>
c0010bbe:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010bc3:	75 3b                	jne    c0010c00 <VCache::write(unsigned long long, int, void*)+0xb6>
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	68 0b 36 02 c0       	push   0xc002360b
c0010bcd:	e8 32 be ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010bd2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010bd5:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010bd8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010bde:	0f af f9             	imul   edi,ecx
c0010be1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010be4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010be6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010be9:	83 c4 10             	add    esp,0x10
c0010bec:	40                   	inc    eax
c0010bed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010bf0:	83 c0 80             	add    eax,0xffffff80
c0010bf3:	75 77                	jne    c0010c6c <VCache::write(unsigned long long, int, void*)+0x122>
c0010bf5:	83 ec 0c             	sub    esp,0xc
c0010bf8:	53                   	push   ebx
c0010bf9:	e8 84 fe ff ff       	call   c0010a82 <VCache::writeWriteBuffer()>
c0010bfe:	eb 40                	jmp    c0010c40 <VCache::write(unsigned long long, int, void*)+0xf6>
c0010c00:	83 ec 0c             	sub    esp,0xc
c0010c03:	53                   	push   ebx
c0010c04:	e8 79 fe ff ff       	call   c0010a82 <VCache::writeWriteBuffer()>
c0010c09:	83 c4 10             	add    esp,0x10
c0010c0c:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0010c11:	7f 33                	jg     c0010c46 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010c13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010c17:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010c1a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c1d:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010c20:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010c24:	52                   	push   edx
c0010c25:	56                   	push   esi
c0010c26:	6a 01                	push   0x1
c0010c28:	68 21 36 02 c0       	push   0xc0023621
c0010c2d:	e8 d2 bd ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010c32:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c35:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c38:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c40:	83 c4 10             	add    esp,0x10
c0010c43:	eb 27                	jmp    c0010c6c <VCache::write(unsigned long long, int, void*)+0x122>
c0010c45:	90                   	nop
c0010c46:	50                   	push   eax
c0010c47:	56                   	push   esi
c0010c48:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010c4c:	68 42 36 02 c0       	push   0xc0023642
c0010c51:	e8 ae bd ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010c56:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c59:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c62:	55                   	push   ebp
c0010c63:	57                   	push   edi
c0010c64:	50                   	push   eax
c0010c65:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010c68:	83 c4 20             	add    esp,0x20
c0010c6b:	90                   	nop
c0010c6c:	83 ec 0c             	sub    esp,0xc
c0010c6f:	68 5f 36 02 c0       	push   0xc002365f
c0010c74:	e8 8b bd ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010c79:	83 c4 1c             	add    esp,0x1c
c0010c7c:	31 c0                	xor    eax,eax
c0010c7e:	5b                   	pop    ebx
c0010c7f:	5e                   	pop    esi
c0010c80:	5f                   	pop    edi
c0010c81:	5d                   	pop    ebp
c0010c82:	c3                   	ret    
c0010c83:	90                   	nop

c0010c84 <VCache::read(unsigned long long, int, void*)>:
c0010c84:	55                   	push   ebp
c0010c85:	57                   	push   edi
c0010c86:	56                   	push   esi
c0010c87:	53                   	push   ebx
c0010c88:	83 ec 1c             	sub    esp,0x1c
c0010c8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010c8f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010c93:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c96:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010c9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c9e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010ca2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010ca6:	31 c0                	xor    eax,eax
c0010ca8:	39 f0                	cmp    eax,esi
c0010caa:	7d 16                	jge    c0010cc2 <VCache::read(unsigned long long, int, void*)+0x3e>
c0010cac:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010caf:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010cb5:	0f af f8             	imul   edi,eax
c0010cb8:	89 fa                	mov    edx,edi
c0010cba:	01 ea                	add    edx,ebp
c0010cbc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010cbe:	40                   	inc    eax
c0010cbf:	eb e7                	jmp    c0010ca8 <VCache::read(unsigned long long, int, void*)+0x24>
c0010cc1:	90                   	nop
c0010cc2:	83 ec 0c             	sub    esp,0xc
c0010cc5:	68 7f 36 02 c0       	push   0xc002367f
c0010cca:	e8 35 bd ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010cd6:	74 0c                	je     c0010ce4 <VCache::read(unsigned long long, int, void*)+0x60>
c0010cd8:	83 ec 0c             	sub    esp,0xc
c0010cdb:	53                   	push   ebx
c0010cdc:	e8 a1 fd ff ff       	call   c0010a82 <VCache::writeWriteBuffer()>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	83 fe 01             	cmp    esi,0x1
c0010ce7:	75 79                	jne    c0010d62 <VCache::read(unsigned long long, int, void*)+0xde>
c0010ce9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cec:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010cf3:	75 6d                	jne    c0010d62 <VCache::read(unsigned long long, int, void*)+0xde>
c0010cf5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010cf8:	89 d1                	mov    ecx,edx
c0010cfa:	f7 d9                	neg    ecx
c0010cfc:	89 cf                	mov    edi,ecx
c0010cfe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010d02:	c1 ff 1f             	sar    edi,0x1f
c0010d05:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010d08:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010d0c:	89 ce                	mov    esi,ecx
c0010d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d12:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010d16:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010d1a:	89 cf                	mov    edi,ecx
c0010d1c:	74 0a                	je     c0010d28 <VCache::read(unsigned long long, int, void*)+0xa4>
c0010d1e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010d21:	75 05                	jne    c0010d28 <VCache::read(unsigned long long, int, void*)+0xa4>
c0010d23:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010d26:	74 1c                	je     c0010d44 <VCache::read(unsigned long long, int, void*)+0xc0>
c0010d28:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010d2c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010d2f:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010d32:	83 ec 0c             	sub    esp,0xc
c0010d35:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010d37:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010d3a:	52                   	push   edx
c0010d3b:	57                   	push   edi
c0010d3c:	56                   	push   esi
c0010d3d:	50                   	push   eax
c0010d3e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010d41:	83 c4 20             	add    esp,0x20
c0010d44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d47:	89 ef                	mov    edi,ebp
c0010d49:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010d4f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010d52:	8d 70 ff             	lea    esi,[eax-0x1]
c0010d55:	23 34 24             	and    esi,DWORD PTR [esp]
c0010d58:	0f af f1             	imul   esi,ecx
c0010d5b:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010d5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d60:	eb 30                	jmp    c0010d92 <VCache::read(unsigned long long, int, void*)+0x10e>
c0010d62:	83 ec 0c             	sub    esp,0xc
c0010d65:	53                   	push   ebx
c0010d66:	e8 07 fd ff ff       	call   c0010a72 <VCache::invalidateReadBuffer()>
c0010d6b:	83 c4 0c             	add    esp,0xc
c0010d6e:	55                   	push   ebp
c0010d6f:	56                   	push   esi
c0010d70:	68 a5 36 02 c0       	push   0xc00236a5
c0010d75:	e8 8a bc ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010d7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d82:	56                   	push   esi
c0010d83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d8b:	50                   	push   eax
c0010d8c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010d8f:	83 c4 20             	add    esp,0x20
c0010d92:	83 ec 0c             	sub    esp,0xc
c0010d95:	68 c1 36 02 c0       	push   0xc00236c1
c0010d9a:	e8 65 bc ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0010d9f:	83 c4 2c             	add    esp,0x2c
c0010da2:	31 c0                	xor    eax,eax
c0010da4:	5b                   	pop    ebx
c0010da5:	5e                   	pop    esi
c0010da6:	5f                   	pop    edi
c0010da7:	5d                   	pop    ebp
c0010da8:	c3                   	ret    
c0010da9:	90                   	nop

c0010daa <Video::putrect(int, int, int, int, unsigned int)>:
c0010daa:	55                   	push   ebp
c0010dab:	57                   	push   edi
c0010dac:	56                   	push   esi
c0010dad:	53                   	push   ebx
c0010dae:	83 ec 1c             	sub    esp,0x1c
c0010db1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010db5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010db9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010dbd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010dc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010dc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dc9:	01 df                	add    edi,ebx
c0010dcb:	39 fb                	cmp    ebx,edi
c0010dcd:	7d 1f                	jge    c0010dee <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010dcf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010dd3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010dd7:	7d 12                	jge    c0010deb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010dd9:	8b 16                	mov    edx,DWORD PTR [esi]
c0010ddb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010ddf:	53                   	push   ebx
c0010de0:	55                   	push   ebp
c0010de1:	45                   	inc    ebp
c0010de2:	56                   	push   esi
c0010de3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010de6:	83 c4 10             	add    esp,0x10
c0010de9:	eb e8                	jmp    c0010dd3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010deb:	43                   	inc    ebx
c0010dec:	eb dd                	jmp    c0010dcb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010dee:	83 c4 1c             	add    esp,0x1c
c0010df1:	5b                   	pop    ebx
c0010df2:	5e                   	pop    esi
c0010df3:	5f                   	pop    edi
c0010df4:	5d                   	pop    ebp
c0010df5:	c3                   	ret    

c0010df6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010df6:	55                   	push   ebp
c0010df7:	57                   	push   edi
c0010df8:	31 ff                	xor    edi,edi
c0010dfa:	56                   	push   esi
c0010dfb:	53                   	push   ebx
c0010dfc:	83 ec 1c             	sub    esp,0x1c
c0010dff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010e03:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e07:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010e0e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010e13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e17:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010e1b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010e1f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010e22:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010e26:	01 f9                	add    ecx,edi
c0010e28:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010e2c:	7d 2f                	jge    c0010e5d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010e2e:	31 f6                	xor    esi,esi
c0010e30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010e34:	01 f2                	add    edx,esi
c0010e36:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010e3a:	7d 1a                	jge    c0010e56 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010e3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e3f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010e42:	46                   	inc    esi
c0010e43:	51                   	push   ecx
c0010e44:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010e48:	52                   	push   edx
c0010e49:	55                   	push   ebp
c0010e4a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e54:	eb da                	jmp    c0010e30 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010e56:	47                   	inc    edi
c0010e57:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010e5b:	eb c5                	jmp    c0010e22 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010e5d:	83 c4 1c             	add    esp,0x1c
c0010e60:	5b                   	pop    ebx
c0010e61:	5e                   	pop    esi
c0010e62:	5f                   	pop    edi
c0010e63:	5d                   	pop    ebp
c0010e64:	c3                   	ret    
c0010e65:	90                   	nop

c0010e66 <Video::blit(unsigned int*, int, int, int, int)>:
c0010e66:	55                   	push   ebp
c0010e67:	57                   	push   edi
c0010e68:	56                   	push   esi
c0010e69:	53                   	push   ebx
c0010e6a:	83 ec 1c             	sub    esp,0x1c
c0010e6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010e71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e75:	85 c0                	test   eax,eax
c0010e77:	79 02                	jns    c0010e7b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010e79:	31 c0                	xor    eax,eax
c0010e7b:	c1 e0 02             	shl    eax,0x2
c0010e7e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010e82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010e8a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010e8e:	39 d8                	cmp    eax,ebx
c0010e90:	7e 49                	jle    c0010edb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010e92:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010e98:	7c 41                	jl     c0010edb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010e9a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010e9e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010ea2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010ea6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010eaa:	39 f9                	cmp    ecx,edi
c0010eac:	7e 22                	jle    c0010ed0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010eae:	83 c5 04             	add    ebp,0x4
c0010eb1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010eb7:	7c 14                	jl     c0010ecd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010eb9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010ebb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010ebe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010ec2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010ec6:	56                   	push   esi
c0010ec7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010eca:	83 c4 10             	add    esp,0x10
c0010ecd:	47                   	inc    edi
c0010ece:	eb d2                	jmp    c0010ea2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ed4:	43                   	inc    ebx
c0010ed5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010ed9:	eb ab                	jmp    c0010e86 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010edb:	83 c4 1c             	add    esp,0x1c
c0010ede:	5b                   	pop    ebx
c0010edf:	5e                   	pop    esi
c0010ee0:	5f                   	pop    edi
c0010ee1:	5d                   	pop    ebp
c0010ee2:	c3                   	ret    
c0010ee3:	90                   	nop

c0010ee4 <Video::clearScreen(unsigned int)>:
c0010ee4:	57                   	push   edi
c0010ee5:	56                   	push   esi
c0010ee6:	53                   	push   ebx
c0010ee7:	31 db                	xor    ebx,ebx
c0010ee9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010eed:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010ef3:	7e 1f                	jle    c0010f14 <Video::clearScreen(unsigned int)+0x30>
c0010ef5:	31 ff                	xor    edi,edi
c0010ef7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010efd:	7e 12                	jle    c0010f11 <Video::clearScreen(unsigned int)+0x2d>
c0010eff:	8b 06                	mov    eax,DWORD PTR [esi]
c0010f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f05:	53                   	push   ebx
c0010f06:	57                   	push   edi
c0010f07:	47                   	inc    edi
c0010f08:	56                   	push   esi
c0010f09:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f0c:	83 c4 10             	add    esp,0x10
c0010f0f:	eb e6                	jmp    c0010ef7 <Video::clearScreen(unsigned int)+0x13>
c0010f11:	43                   	inc    ebx
c0010f12:	eb d9                	jmp    c0010eed <Video::clearScreen(unsigned int)+0x9>
c0010f14:	5b                   	pop    ebx
c0010f15:	5e                   	pop    esi
c0010f16:	5f                   	pop    edi
c0010f17:	c3                   	ret    

c0010f18 <Video::putpixel(int, int, unsigned int)>:
c0010f18:	c7 44 24 04 f0 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc00236f0
c0010f20:	e9 1e 33 00 00       	jmp    c0014243 <Krnl::panic(char const*)>
c0010f25:	90                   	nop

c0010f26 <Video::Video(char const*)>:
c0010f26:	83 ec 0c             	sub    esp,0xc
c0010f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2d:	83 ec 08             	sub    esp,0x8
c0010f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f34:	50                   	push   eax
c0010f35:	e8 0e d1 ff ff       	call   c000e048 <Device::Device(char const*)>
c0010f3a:	83 c4 10             	add    esp,0x10
c0010f3d:	ba 60 37 02 c0       	mov    edx,0xc0023760
c0010f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f46:	89 10                	mov    DWORD PTR [eax],edx
c0010f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010f56:	90                   	nop
c0010f57:	83 c4 0c             	add    esp,0xc
c0010f5a:	c3                   	ret    
c0010f5b:	90                   	nop

c0010f5c <Video::~Video()>:
c0010f5c:	83 ec 0c             	sub    esp,0xc
c0010f5f:	ba 60 37 02 c0       	mov    edx,0xc0023760
c0010f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f68:	89 10                	mov    DWORD PTR [eax],edx
c0010f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6e:	83 ec 0c             	sub    esp,0xc
c0010f71:	50                   	push   eax
c0010f72:	e8 9b cd ff ff       	call   c000dd12 <Device::~Device()>
c0010f77:	83 c4 10             	add    esp,0x10
c0010f7a:	90                   	nop
c0010f7b:	83 c4 0c             	add    esp,0xc
c0010f7e:	c3                   	ret    
c0010f7f:	90                   	nop

c0010f80 <Video::~Video()>:
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	83 ec 0c             	sub    esp,0xc
c0010f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f8a:	e8 cd ff ff ff       	call   c0010f5c <Video::~Video()>
c0010f8f:	83 c4 10             	add    esp,0x10
c0010f92:	83 ec 08             	sub    esp,0x8
c0010f95:	68 64 01 00 00       	push   0x164
c0010f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9e:	e8 80 b9 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	83 c4 0c             	add    esp,0xc
c0010fa9:	c3                   	ret    

c0010faa <Video::isMonochrome()>:
c0010faa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fae:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0010fb4:	c3                   	ret    
c0010fb5:	90                   	nop

c0010fb6 <Video::getWidth()>:
c0010fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010fc0:	c3                   	ret    
c0010fc1:	90                   	nop

c0010fc2 <Video::getHeight()>:
c0010fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fc6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010fcc:	c3                   	ret    
c0010fcd:	90                   	nop

c0010fce <Video::drawCursor(int, int, unsigned char*, int)>:
c0010fce:	55                   	push   ebp
c0010fcf:	57                   	push   edi
c0010fd0:	56                   	push   esi
c0010fd1:	53                   	push   ebx
c0010fd2:	83 ec 2c             	sub    esp,0x2c
c0010fd5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010fd9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fdd:	83 f8 01             	cmp    eax,0x1
c0010fe0:	19 c9                	sbb    ecx,ecx
c0010fe2:	31 db                	xor    ebx,ebx
c0010fe4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0010fe8:	89 cd                	mov    ebp,ecx
c0010fea:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0010ff2:	f7 d5                	not    ebp
c0010ff4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0010ffa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010ffe:	01 d8                	add    eax,ebx
c0011000:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011004:	56                   	push   esi
c0011005:	e8 b8 ff ff ff       	call   c0010fc2 <Video::getHeight()>
c001100a:	59                   	pop    ecx
c001100b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001100f:	7e 70                	jle    c0011081 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011011:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011015:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011019:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001101c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011020:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011024:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001102b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001102f:	89 f8                	mov    eax,edi
c0011031:	83 c0 20             	add    eax,0x20
c0011034:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011038:	56                   	push   esi
c0011039:	e8 78 ff ff ff       	call   c0010fb6 <Video::getWidth()>
c001103e:	5a                   	pop    edx
c001103f:	39 c7                	cmp    edi,eax
c0011041:	7d 34                	jge    c0011077 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011043:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011048:	74 05                	je     c001104f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001104a:	8b 06                	mov    eax,DWORD PTR [esi]
c001104c:	55                   	push   ebp
c001104d:	eb 0d                	jmp    c001105c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001104f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011054:	74 12                	je     c0011068 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011056:	8b 06                	mov    eax,DWORD PTR [esi]
c0011058:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001105c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011060:	57                   	push   edi
c0011061:	56                   	push   esi
c0011062:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001106c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011070:	47                   	inc    edi
c0011071:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011075:	75 c1                	jne    c0011038 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011077:	43                   	inc    ebx
c0011078:	83 fb 20             	cmp    ebx,0x20
c001107b:	0f 85 79 ff ff ff    	jne    c0010ffa <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011081:	83 c4 2c             	add    esp,0x2c
c0011084:	5b                   	pop    ebx
c0011085:	5e                   	pop    esi
c0011086:	5f                   	pop    edi
c0011087:	5d                   	pop    ebp
c0011088:	c3                   	ret    
c0011089:	90                   	nop

c001108a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001108a:	55                   	push   ebp
c001108b:	57                   	push   edi
c001108c:	56                   	push   esi
c001108d:	53                   	push   ebx
c001108e:	83 ec 28             	sub    esp,0x28
c0011091:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011095:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011099:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001109d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00110a1:	c1 e6 08             	shl    esi,0x8
c00110a4:	01 c6                	add    esi,eax
c00110a6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00110aa:	c1 e0 08             	shl    eax,0x8
c00110ad:	01 d0                	add    eax,edx
c00110af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110b7:	0f af c6             	imul   eax,esi
c00110ba:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00110c1:	50                   	push   eax
c00110c2:	e8 dc 88 ff ff       	call   c00099a3 <malloc>
c00110c7:	83 c4 10             	add    esp,0x10
c00110ca:	89 c7                	mov    edi,eax
c00110cc:	85 c0                	test   eax,eax
c00110ce:	75 10                	jne    c00110e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00110d0:	83 ec 0c             	sub    esp,0xc
c00110d3:	68 11 37 02 c0       	push   0xc0023711
c00110d8:	e8 66 31 00 00       	call   c0014243 <Krnl::panic(char const*)>
c00110dd:	83 c4 10             	add    esp,0x10
c00110e0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00110e3:	ba 12 00 00 00       	mov    edx,0x12
c00110e8:	84 c0                	test   al,al
c00110ea:	74 11                	je     c00110fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00110ec:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00110f0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00110f4:	c1 fa 03             	sar    edx,0x3
c00110f7:	0f af d1             	imul   edx,ecx
c00110fa:	83 c2 12             	add    edx,0x12
c00110fd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011101:	74 04                	je     c0011107 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011103:	85 f6                	test   esi,esi
c0011105:	75 12                	jne    c0011119 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011107:	83 ec 0c             	sub    esp,0xc
c001110a:	68 21 37 02 c0       	push   0xc0023721
c001110f:	e8 f0 b8 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0011114:	e9 b8 00 00 00       	jmp    c00111d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011119:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001111d:	80 f9 02             	cmp    cl,0x2
c0011120:	0f 85 96 00 00 00    	jne    c00111bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011126:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001112b:	75 0e                	jne    c001113b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001112d:	84 c0                	test   al,al
c001112f:	75 0a                	jne    c001113b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011131:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011134:	83 e8 18             	sub    eax,0x18
c0011137:	a8 f7                	test   al,0xf7
c0011139:	74 0a                	je     c0011145 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001113b:	83 ec 0c             	sub    esp,0xc
c001113e:	68 36 37 02 c0       	push   0xc0023736
c0011143:	eb 7f                	jmp    c00111c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011145:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001114d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011155:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011159:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011161:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011165:	75 0c                	jne    c0011173 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011167:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001116c:	c1 e0 18             	shl    eax,0x18
c001116f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011173:	45                   	inc    ebp
c0011174:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011179:	c1 e1 10             	shl    ecx,0x10
c001117c:	89 c8                	mov    eax,ecx
c001117e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011183:	c1 e1 08             	shl    ecx,0x8
c0011186:	09 c1                	or     ecx,eax
c0011188:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001118c:	09 c1                	or     ecx,eax
c001118e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011192:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011196:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001119a:	c1 f8 03             	sar    eax,0x3
c001119d:	01 c2                	add    edx,eax
c001119f:	89 e8                	mov    eax,ebp
c00111a1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00111a5:	39 c6                	cmp    esi,eax
c00111a7:	7f b0                	jg     c0011159 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00111a9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00111ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00111b1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00111b4:	7e 22                	jle    c00111d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00111b6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00111ba:	eb 99                	jmp    c0011155 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00111bc:	50                   	push   eax
c00111bd:	50                   	push   eax
c00111be:	51                   	push   ecx
c00111bf:	68 44 37 02 c0       	push   0xc0023744
c00111c4:	e8 3b b8 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00111c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111cc:	e8 e2 87 ff ff       	call   c00099b3 <free>
c00111d1:	83 c4 10             	add    esp,0x10
c00111d4:	31 ff                	xor    edi,edi
c00111d6:	eb 0f                	jmp    c00111e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00111d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00111dc:	89 30                	mov    DWORD PTR [eax],esi
c00111de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00111e2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00111e5:	89 30                	mov    DWORD PTR [eax],esi
c00111e7:	83 c4 1c             	add    esp,0x1c
c00111ea:	89 f8                	mov    eax,edi
c00111ec:	5b                   	pop    ebx
c00111ed:	5e                   	pop    esi
c00111ee:	5f                   	pop    edi
c00111ef:	5d                   	pop    ebp
c00111f0:	c3                   	ret    
c00111f1:	90                   	nop

c00111f2 <Video::putTGA(int, int, unsigned char*, int)>:
c00111f2:	55                   	push   ebp
c00111f3:	57                   	push   edi
c00111f4:	56                   	push   esi
c00111f5:	53                   	push   ebx
c00111f6:	83 ec 28             	sub    esp,0x28
c00111f9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00111fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011201:	50                   	push   eax
c0011202:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011206:	50                   	push   eax
c0011207:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001120b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001120f:	56                   	push   esi
c0011210:	e8 75 fe ff ff       	call   c001108a <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011215:	83 c4 20             	add    esp,0x20
c0011218:	85 c0                	test   eax,eax
c001121a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001121e:	74 35                	je     c0011255 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011220:	89 c7                	mov    edi,eax
c0011222:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011226:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001122a:	39 d8                	cmp    eax,ebx
c001122c:	7e 27                	jle    c0011255 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001122e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011232:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011236:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001123a:	39 e8                	cmp    eax,ebp
c001123c:	7e 14                	jle    c0011252 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001123e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011240:	83 c7 04             	add    edi,0x4
c0011243:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011246:	53                   	push   ebx
c0011247:	55                   	push   ebp
c0011248:	45                   	inc    ebp
c0011249:	56                   	push   esi
c001124a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001124d:	83 c4 10             	add    esp,0x10
c0011250:	eb e0                	jmp    c0011232 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011252:	43                   	inc    ebx
c0011253:	eb cd                	jmp    c0011222 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011255:	83 c4 1c             	add    esp,0x1c
c0011258:	5b                   	pop    ebx
c0011259:	5e                   	pop    esi
c001125a:	5f                   	pop    edi
c001125b:	5d                   	pop    ebp
c001125c:	c3                   	ret    
c001125d:	90                   	nop

c001125e <ACPI::close(int, int, void*)>:
c001125e:	83 ec 1c             	sub    esp,0x1c
c0011261:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011269:	74 0b                	je     c0011276 <ACPI::close(int, int, void*)+0x18>
c001126b:	b8 00 00 00 00       	mov    eax,0x0
c0011270:	e9 91 00 00 00       	jmp    c0011306 <ACPI::close(int, int, void*)+0xa8>
c0011275:	90                   	nop
c0011276:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001127b:	75 29                	jne    c00112a6 <ACPI::close(int, int, void*)+0x48>
c001127d:	a1 e8 66 02 c0       	mov    eax,ds:0xc00266e8
c0011282:	85 c0                	test   eax,eax
c0011284:	74 08                	je     c001128e <ACPI::close(int, int, void*)+0x30>
c0011286:	a1 e8 66 02 c0       	mov    eax,ds:0xc00266e8
c001128b:	ff d0                	call   eax
c001128d:	90                   	nop
c001128e:	83 ec 0c             	sub    esp,0xc
c0011291:	68 a0 37 02 c0       	push   0xc00237a0
c0011296:	e8 a8 2f 00 00       	call   c0014243 <Krnl::panic(char const*)>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112a3:	eb 61                	jmp    c0011306 <ACPI::close(int, int, void*)+0xa8>
c00112a5:	90                   	nop
c00112a6:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00112ab:	75 53                	jne    c0011300 <ACPI::close(int, int, void*)+0xa2>
c00112ad:	a1 e4 66 02 c0       	mov    eax,ds:0xc00266e4
c00112b2:	85 c0                	test   eax,eax
c00112b4:	74 08                	je     c00112be <ACPI::close(int, int, void*)+0x60>
c00112b6:	a1 e4 66 02 c0       	mov    eax,ds:0xc00266e4
c00112bb:	ff d0                	call   eax
c00112bd:	90                   	nop
c00112be:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00112c3:	90                   	nop
c00112c4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00112c9:	83 e0 02             	and    eax,0x2
c00112cc:	74 1c                	je     c00112ea <ACPI::close(int, int, void*)+0x8c>
c00112ce:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00112d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112d9:	89 c2                	mov    edx,eax
c00112db:	ec                   	in     al,dx
c00112dc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00112e0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00112e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00112e8:	eb da                	jmp    c00112c4 <ACPI::close(int, int, void*)+0x66>
c00112ea:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00112f1:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00112f6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00112fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112fe:	ee                   	out    dx,al
c00112ff:	90                   	nop
c0011300:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011305:	90                   	nop
c0011306:	83 c4 1c             	add    esp,0x1c
c0011309:	c3                   	ret    

c001130a <findRSDP()>:
c001130a:	83 ec 1c             	sub    esp,0x1c
c001130d:	83 ec 0c             	sub    esp,0xc
c0011310:	68 7b 38 02 c0       	push   0xc002387b
c0011315:	e8 e3 86 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0011322:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011328:	83 e0 04             	and    eax,0x4
c001132b:	84 c0                	test   al,al
c001132d:	75 0b                	jne    c001133a <findRSDP()+0x30>
c001132f:	b8 00 00 00 00       	mov    eax,0x0
c0011334:	e9 9f 00 00 00       	jmp    c00113d8 <findRSDP()+0xce>
c0011339:	90                   	nop
c001133a:	a1 b4 60 02 c0       	mov    eax,ds:0xc00260b4
c001133f:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011344:	7f 1c                	jg     c0011362 <findRSDP()+0x58>
c0011346:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001134b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011351:	83 e2 fb             	and    edx,0xfffffffb
c0011354:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001135a:	b8 00 00 00 00       	mov    eax,0x0
c001135f:	eb 77                	jmp    c00113d8 <findRSDP()+0xce>
c0011361:	90                   	nop
c0011362:	83 ec 0c             	sub    esp,0xc
c0011365:	68 8b 38 02 c0       	push   0xc002388b
c001136a:	e8 8e 86 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c001136f:	83 c4 10             	add    esp,0x10
c0011372:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001137a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011382:	77 3e                	ja     c00113c2 <findRSDP()+0xb8>
c0011384:	83 ec 04             	sub    esp,0x4
c0011387:	6a 08                	push   0x8
c0011389:	68 a4 38 02 c0       	push   0xc00238a4
c001138e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011392:	e8 e9 f1 fe ff       	call   c0000580 <memcmp>
c0011397:	83 c4 10             	add    esp,0x10
c001139a:	85 c0                	test   eax,eax
c001139c:	0f 94 c0             	sete   al
c001139f:	84 c0                	test   al,al
c00113a1:	74 17                	je     c00113ba <findRSDP()+0xb0>
c00113a3:	83 ec 0c             	sub    esp,0xc
c00113a6:	68 ad 38 02 c0       	push   0xc00238ad
c00113ab:	e8 4d 86 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00113b0:	83 c4 10             	add    esp,0x10
c00113b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113b7:	eb 1f                	jmp    c00113d8 <findRSDP()+0xce>
c00113b9:	90                   	nop
c00113ba:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00113bf:	eb b9                	jmp    c001137a <findRSDP()+0x70>
c00113c1:	90                   	nop
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	68 bb 38 02 c0       	push   0xc00238bb
c00113ca:	e8 2e 86 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00113cf:	83 c4 10             	add    esp,0x10
c00113d2:	b8 00 00 00 00       	mov    eax,0x0
c00113d7:	90                   	nop
c00113d8:	83 c4 1c             	add    esp,0x1c
c00113db:	c3                   	ret    

c00113dc <loadACPITables(unsigned char*)>:
c00113dc:	57                   	push   edi
c00113dd:	56                   	push   esi
c00113de:	53                   	push   ebx
c00113df:	83 ec 60             	sub    esp,0x60
c00113e2:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00113e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00113ed:	83 e0 04             	and    eax,0x4
c00113f0:	84 c0                	test   al,al
c00113f2:	0f 84 36 02 00 00    	je     c001162e <loadACPITables(unsigned char*)+0x252>
c00113f8:	a0 00 69 02 c0       	mov    al,ds:0xc0026900
c00113fd:	84 c0                	test   al,al
c00113ff:	74 75                	je     c0011476 <loadACPITables(unsigned char*)+0x9a>
c0011401:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011405:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011409:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001140d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011410:	83 e8 24             	sub    eax,0x24
c0011413:	c1 e8 03             	shr    eax,0x3
c0011416:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001141a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011422:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011426:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001142a:	0f 8d b4 00 00 00    	jge    c00114e4 <loadACPITables(unsigned char*)+0x108>
c0011430:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011434:	83 c0 24             	add    eax,0x24
c0011437:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001143b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001143f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011443:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011447:	c1 e0 03             	shl    eax,0x3
c001144a:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001144e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011452:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011455:	8b 00                	mov    eax,DWORD PTR [eax]
c0011457:	89 c1                	mov    ecx,eax
c0011459:	a1 ec 66 02 c0       	mov    eax,ds:0xc00266ec
c001145e:	8d 50 01             	lea    edx,[eax+0x1]
c0011461:	89 15 ec 66 02 c0    	mov    DWORD PTR ds:0xc00266ec,edx
c0011467:	89 ca                	mov    edx,ecx
c0011469:	89 14 c5 04 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd98fc],edx
c0011470:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011474:	eb ac                	jmp    c0011422 <loadACPITables(unsigned char*)+0x46>
c0011476:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001147a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001147e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011485:	83 e8 24             	sub    eax,0x24
c0011488:	c1 e8 02             	shr    eax,0x2
c001148b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001148f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011497:	90                   	nop
c0011498:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001149c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00114a0:	7d 42                	jge    c00114e4 <loadACPITables(unsigned char*)+0x108>
c00114a2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114a6:	83 c0 24             	add    eax,0x24
c00114a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00114ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00114b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00114b5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00114b9:	c1 e0 02             	shl    eax,0x2
c00114bc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00114c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00114c6:	a1 ec 66 02 c0       	mov    eax,ds:0xc00266ec
c00114cb:	8d 50 01             	lea    edx,[eax+0x1]
c00114ce:	89 15 ec 66 02 c0    	mov    DWORD PTR ds:0xc00266ec,edx
c00114d4:	89 ca                	mov    edx,ecx
c00114d6:	89 14 c5 04 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd98fc],edx
c00114dd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00114e1:	eb b5                	jmp    c0011498 <loadACPITables(unsigned char*)+0xbc>
c00114e3:	90                   	nop
c00114e4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00114ec:	a1 ec 66 02 c0       	mov    eax,ds:0xc00266ec
c00114f1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00114f5:	0f 8d 35 01 00 00    	jge    c0011630 <loadACPITables(unsigned char*)+0x254>
c00114fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00114ff:	8b 04 c5 04 67 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd98fc]
c0011506:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001150a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001150e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011516:	25 ff 0f 00 00       	and    eax,0xfff
c001151b:	89 c6                	mov    esi,eax
c001151d:	8b 1d d0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261d0
c0011523:	83 ec 0c             	sub    esp,0xc
c0011526:	6a 01                	push   0x1
c0011528:	e8 fc a0 ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c001152d:	83 c4 10             	add    esp,0x10
c0011530:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011534:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001153a:	83 ec 0c             	sub    esp,0xc
c001153d:	6a 01                	push   0x1
c001153f:	6a 01                	push   0x1
c0011541:	50                   	push   eax
c0011542:	52                   	push   edx
c0011543:	53                   	push   ebx
c0011544:	e8 7d aa ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011549:	83 c4 20             	add    esp,0x20
c001154c:	09 f0                	or     eax,esi
c001154e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011552:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011556:	c1 e0 03             	shl    eax,0x3
c0011559:	05 00 67 02 c0       	add    eax,0xc0026700
c001155e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011562:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001156a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011572:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011576:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001157a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001157e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011582:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011586:	89 c6                	mov    esi,eax
c0011588:	89 d7                	mov    edi,edx
c001158a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001158c:	89 c8                	mov    eax,ecx
c001158e:	89 fa                	mov    edx,edi
c0011590:	89 f3                	mov    ebx,esi
c0011592:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011596:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001159a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001159e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00115a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00115ad:	05 00 10 00 00       	add    eax,0x1000
c00115b2:	c1 e8 0c             	shr    eax,0xc
c00115b5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00115b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00115c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c5:	25 ff 0f 00 00       	and    eax,0xfff
c00115ca:	89 c6                	mov    esi,eax
c00115cc:	8b 1d d0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261d0
c00115d2:	83 ec 0c             	sub    esp,0xc
c00115d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00115d9:	e8 4b a0 ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c00115de:	83 c4 10             	add    esp,0x10
c00115e1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115e5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00115eb:	83 ec 0c             	sub    esp,0xc
c00115ee:	6a 01                	push   0x1
c00115f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115f4:	50                   	push   eax
c00115f5:	52                   	push   edx
c00115f6:	53                   	push   ebx
c00115f7:	e8 ca a9 ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00115fc:	83 c4 20             	add    esp,0x20
c00115ff:	09 f0                	or     eax,esi
c0011601:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011609:	83 ec 0c             	sub    esp,0xc
c001160c:	50                   	push   eax
c001160d:	e8 47 a3 ff ff       	call   c000b959 <Virt::freeKernelVirtualPages(unsigned long)>
c0011612:	83 c4 10             	add    esp,0x10
c0011615:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011619:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001161d:	89 14 c5 04 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd98fc],edx
c0011624:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011628:	e9 bf fe ff ff       	jmp    c00114ec <loadACPITables(unsigned char*)+0x110>
c001162d:	90                   	nop
c001162e:	90                   	nop
c001162f:	90                   	nop
c0011630:	83 c4 60             	add    esp,0x60
c0011633:	5b                   	pop    ebx
c0011634:	5e                   	pop    esi
c0011635:	5f                   	pop    edi
c0011636:	c3                   	ret    
c0011637:	90                   	nop

c0011638 <findRSDT(unsigned char*)>:
c0011638:	57                   	push   edi
c0011639:	56                   	push   esi
c001163a:	53                   	push   ebx
c001163b:	83 ec 50             	sub    esp,0x50
c001163e:	83 ec 0c             	sub    esp,0xc
c0011641:	68 cf 38 02 c0       	push   0xc00238cf
c0011646:	e8 b2 83 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c001164b:	83 c4 10             	add    esp,0x10
c001164e:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0011653:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011659:	83 e0 04             	and    eax,0x4
c001165c:	84 c0                	test   al,al
c001165e:	75 0a                	jne    c001166a <findRSDT(unsigned char*)+0x32>
c0011660:	b8 00 00 00 00       	mov    eax,0x0
c0011665:	e9 82 01 00 00       	jmp    c00117ec <findRSDT(unsigned char*)+0x1b4>
c001166a:	83 ec 0c             	sub    esp,0xc
c001166d:	68 e1 38 02 c0       	push   0xc00238e1
c0011672:	e8 86 83 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0011677:	83 c4 10             	add    esp,0x10
c001167a:	89 e0                	mov    eax,esp
c001167c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011680:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011684:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011688:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011690:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011694:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011698:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001169c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00116a0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00116a4:	89 c6                	mov    esi,eax
c00116a6:	89 d7                	mov    edi,edx
c00116a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116aa:	89 c8                	mov    eax,ecx
c00116ac:	89 fa                	mov    edx,edi
c00116ae:	89 f3                	mov    ebx,esi
c00116b0:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00116b4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00116b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	68 f3 38 02 c0       	push   0xc00238f3
c00116c4:	e8 34 83 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00116d0:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00116d4:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00116dc:	83 ec 0c             	sub    esp,0xc
c00116df:	68 05 39 02 c0       	push   0xc0023905
c00116e4:	e8 14 83 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00116f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00116f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116fc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011700:	83 ec 04             	sub    esp,0x4
c0011703:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011707:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001170b:	68 c4 37 02 c0       	push   0xc00237c4
c0011710:	e8 ef b2 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0011715:	83 c4 10             	add    esp,0x10
c0011718:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001171c:	25 ff 0f 00 00       	and    eax,0xfff
c0011721:	89 c6                	mov    esi,eax
c0011723:	8b 1d d0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261d0
c0011729:	83 ec 0c             	sub    esp,0xc
c001172c:	6a 02                	push   0x2
c001172e:	e8 f6 9e ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c0011733:	83 c4 10             	add    esp,0x10
c0011736:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001173a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011740:	83 ec 0c             	sub    esp,0xc
c0011743:	6a 01                	push   0x1
c0011745:	6a 02                	push   0x2
c0011747:	50                   	push   eax
c0011748:	52                   	push   edx
c0011749:	53                   	push   ebx
c001174a:	e8 77 a8 ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001174f:	83 c4 20             	add    esp,0x20
c0011752:	09 f0                	or     eax,esi
c0011754:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011758:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001175c:	25 ff 0f 00 00       	and    eax,0xfff
c0011761:	89 c6                	mov    esi,eax
c0011763:	8b 1d d0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261d0
c0011769:	83 ec 0c             	sub    esp,0xc
c001176c:	6a 02                	push   0x2
c001176e:	e8 b6 9e ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c0011773:	83 c4 10             	add    esp,0x10
c0011776:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001177a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011780:	83 ec 0c             	sub    esp,0xc
c0011783:	6a 01                	push   0x1
c0011785:	6a 02                	push   0x2
c0011787:	50                   	push   eax
c0011788:	52                   	push   edx
c0011789:	53                   	push   ebx
c001178a:	e8 37 a8 ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001178f:	83 c4 20             	add    esp,0x20
c0011792:	09 f0                	or     eax,esi
c0011794:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011798:	83 ec 04             	sub    esp,0x4
c001179b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001179f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117a3:	68 e4 37 02 c0       	push   0xc00237e4
c00117a8:	e8 57 b2 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00117b5:	75 11                	jne    c00117c8 <findRSDT(unsigned char*)+0x190>
c00117b7:	c6 05 00 69 02 c0 00 	mov    BYTE PTR ds:0xc0026900,0x0
c00117be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00117c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00117c6:	eb 20                	jmp    c00117e8 <findRSDT(unsigned char*)+0x1b0>
c00117c8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00117cd:	75 11                	jne    c00117e0 <findRSDT(unsigned char*)+0x1a8>
c00117cf:	c6 05 00 69 02 c0 01 	mov    BYTE PTR ds:0xc0026900,0x1
c00117d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00117da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00117de:	eb 08                	jmp    c00117e8 <findRSDT(unsigned char*)+0x1b0>
c00117e0:	b8 00 00 00 00       	mov    eax,0x0
c00117e5:	eb 05                	jmp    c00117ec <findRSDT(unsigned char*)+0x1b4>
c00117e7:	90                   	nop
c00117e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00117ec:	83 c4 50             	add    esp,0x50
c00117ef:	5b                   	pop    ebx
c00117f0:	5e                   	pop    esi
c00117f1:	5f                   	pop    edi
c00117f2:	c3                   	ret    
c00117f3:	90                   	nop

c00117f4 <findDataTable(unsigned char*, char*)>:
c00117f4:	83 ec 1c             	sub    esp,0x1c
c00117f7:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00117fc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011802:	83 e0 04             	and    eax,0x4
c0011805:	84 c0                	test   al,al
c0011807:	75 07                	jne    c0011810 <findDataTable(unsigned char*, char*)+0x1c>
c0011809:	b8 00 00 00 00       	mov    eax,0x0
c001180e:	eb 54                	jmp    c0011864 <findDataTable(unsigned char*, char*)+0x70>
c0011810:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011818:	a1 ec 66 02 c0       	mov    eax,ds:0xc00266ec
c001181d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011821:	7d 3b                	jge    c001185e <findDataTable(unsigned char*, char*)+0x6a>
c0011823:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011827:	c1 e0 03             	shl    eax,0x3
c001182a:	05 00 67 02 c0       	add    eax,0xc0026700
c001182f:	83 ec 04             	sub    esp,0x4
c0011832:	6a 04                	push   0x4
c0011834:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011838:	50                   	push   eax
c0011839:	e8 42 ed fe ff       	call   c0000580 <memcmp>
c001183e:	83 c4 10             	add    esp,0x10
c0011841:	85 c0                	test   eax,eax
c0011843:	0f 94 c0             	sete   al
c0011846:	84 c0                	test   al,al
c0011848:	74 0e                	je     c0011858 <findDataTable(unsigned char*, char*)+0x64>
c001184a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001184e:	8b 04 c5 04 67 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd98fc]
c0011855:	eb 0d                	jmp    c0011864 <findDataTable(unsigned char*, char*)+0x70>
c0011857:	90                   	nop
c0011858:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001185c:	eb ba                	jmp    c0011818 <findDataTable(unsigned char*, char*)+0x24>
c001185e:	b8 00 00 00 00       	mov    eax,0x0
c0011863:	90                   	nop
c0011864:	83 c4 1c             	add    esp,0x1c
c0011867:	c3                   	ret    

c0011868 <scanMADT()>:
c0011868:	53                   	push   ebx
c0011869:	83 ec 38             	sub    esp,0x38
c001186c:	83 ec 0c             	sub    esp,0xc
c001186f:	68 17 39 02 c0       	push   0xc0023917
c0011874:	e8 84 81 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	a1 80 60 02 c0       	mov    eax,ds:0xc0026080
c0011881:	25 00 04 00 00       	and    eax,0x400
c0011886:	74 14                	je     c001189c <scanMADT()+0x34>
c0011888:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001188d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011893:	83 e2 fb             	and    edx,0xfffffffb
c0011896:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001189c:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00118a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118a7:	83 e0 04             	and    eax,0x4
c00118aa:	84 c0                	test   al,al
c00118ac:	0f 84 7c 04 00 00    	je     c0011d2e <scanMADT()+0x4c6>
c00118b2:	83 ec 0c             	sub    esp,0xc
c00118b5:	68 24 39 02 c0       	push   0xc0023924
c00118ba:	e8 3e 81 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00118bf:	83 c4 10             	add    esp,0x10
c00118c2:	e8 43 fa ff ff       	call   c001130a <findRSDP()>
c00118c7:	a3 0c 69 02 c0       	mov    ds:0xc002690c,eax
c00118cc:	a1 0c 69 02 c0       	mov    eax,ds:0xc002690c
c00118d1:	85 c0                	test   eax,eax
c00118d3:	75 19                	jne    c00118ee <scanMADT()+0x86>
c00118d5:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00118da:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00118e0:	83 e2 fb             	and    edx,0xfffffffb
c00118e3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00118e9:	e9 46 04 00 00       	jmp    c0011d34 <scanMADT()+0x4cc>
c00118ee:	83 ec 0c             	sub    esp,0xc
c00118f1:	68 36 39 02 c0       	push   0xc0023936
c00118f6:	e8 02 81 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00118fb:	83 c4 10             	add    esp,0x10
c00118fe:	a1 0c 69 02 c0       	mov    eax,ds:0xc002690c
c0011903:	83 ec 0c             	sub    esp,0xc
c0011906:	50                   	push   eax
c0011907:	e8 2c fd ff ff       	call   c0011638 <findRSDT(unsigned char*)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	a3 08 69 02 c0       	mov    ds:0xc0026908,eax
c0011914:	a1 08 69 02 c0       	mov    eax,ds:0xc0026908
c0011919:	85 c0                	test   eax,eax
c001191b:	75 19                	jne    c0011936 <scanMADT()+0xce>
c001191d:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0011922:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011928:	83 e2 fb             	and    edx,0xfffffffb
c001192b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011931:	e9 fe 03 00 00       	jmp    c0011d34 <scanMADT()+0x4cc>
c0011936:	83 ec 0c             	sub    esp,0xc
c0011939:	68 46 39 02 c0       	push   0xc0023946
c001193e:	e8 ba 80 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0011943:	83 c4 10             	add    esp,0x10
c0011946:	a1 08 69 02 c0       	mov    eax,ds:0xc0026908
c001194b:	83 ec 0c             	sub    esp,0xc
c001194e:	50                   	push   eax
c001194f:	e8 88 fa ff ff       	call   c00113dc <loadACPITables(unsigned char*)>
c0011954:	83 c4 10             	add    esp,0x10
c0011957:	a1 08 69 02 c0       	mov    eax,ds:0xc0026908
c001195c:	83 ec 08             	sub    esp,0x8
c001195f:	68 5e 39 02 c0       	push   0xc002395e
c0011964:	50                   	push   eax
c0011965:	e8 8a fe ff ff       	call   c00117f4 <findDataTable(unsigned char*, char*)>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011971:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011976:	75 1a                	jne    c0011992 <scanMADT()+0x12a>
c0011978:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001197d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011983:	83 e2 fe             	and    edx,0xfffffffe
c0011986:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001198c:	e9 a3 03 00 00       	jmp    c0011d34 <scanMADT()+0x4cc>
c0011991:	90                   	nop
c0011992:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001199a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001199e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119a1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00119a5:	0f 87 89 03 00 00    	ja     c0011d34 <scanMADT()+0x4cc>
c00119ab:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00119b3:	0f 87 7b 03 00 00    	ja     c0011d34 <scanMADT()+0x4cc>
c00119b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119c5:	8d 50 01             	lea    edx,[eax+0x1]
c00119c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00119cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00119d0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00119d4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00119d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119dc:	8d 50 01             	lea    edx,[eax+0x1]
c00119df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00119e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00119e7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00119eb:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00119ef:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00119f4:	0f 86 38 03 00 00    	jbe    c0011d32 <scanMADT()+0x4ca>
c00119fa:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00119ff:	75 57                	jne    c0011a58 <scanMADT()+0x1f0>
c0011a01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a05:	8d 50 01             	lea    edx,[eax+0x1]
c0011a08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a0c:	8a 15 00 6b 02 c0    	mov    dl,BYTE PTR ds:0xc0026b00
c0011a12:	0f b6 d2             	movzx  edx,dl
c0011a15:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011a19:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011a1d:	88 82 40 6b 02 c0    	mov    BYTE PTR [edx-0x3ffd94c0],al
c0011a23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a27:	8d 50 01             	lea    edx,[eax+0x1]
c0011a2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a2e:	8a 15 00 6b 02 c0    	mov    dl,BYTE PTR ds:0xc0026b00
c0011a34:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011a37:	88 0d 00 6b 02 c0    	mov    BYTE PTR ds:0xc0026b00,cl
c0011a3d:	0f b6 d2             	movzx  edx,dl
c0011a40:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011a44:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011a48:	88 82 20 6b 02 c0    	mov    BYTE PTR [edx-0x3ffd94e0],al
c0011a4e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011a53:	e9 c2 02 00 00       	jmp    c0011d1a <scanMADT()+0x4b2>
c0011a58:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011a5d:	0f 85 15 01 00 00    	jne    c0011b78 <scanMADT()+0x310>
c0011a63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a67:	8d 50 01             	lea    edx,[eax+0x1]
c0011a6a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a6e:	8a 15 c0 69 02 c0    	mov    dl,BYTE PTR ds:0xc00269c0
c0011a74:	0f b6 d2             	movzx  edx,dl
c0011a77:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011a7b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011a7f:	88 82 e0 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9620],al
c0011a85:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011a89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a91:	01 d0                	add    eax,edx
c0011a93:	83 c0 2c             	add    eax,0x2c
c0011a96:	8a 00                	mov    al,BYTE PTR [eax]
c0011a98:	0f b6 d0             	movzx  edx,al
c0011a9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a9f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011aa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011aa6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011aaa:	0f b6 c0             	movzx  eax,al
c0011aad:	c1 e0 08             	shl    eax,0x8
c0011ab0:	89 d1                	mov    ecx,edx
c0011ab2:	09 c1                	or     ecx,eax
c0011ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ab8:	8d 50 02             	lea    edx,[eax+0x2]
c0011abb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011abf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ac3:	0f b6 c0             	movzx  eax,al
c0011ac6:	c1 e0 10             	shl    eax,0x10
c0011ac9:	09 c1                	or     ecx,eax
c0011acb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011acf:	8d 50 03             	lea    edx,[eax+0x3]
c0011ad2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ad6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ada:	0f b6 c0             	movzx  eax,al
c0011add:	c1 e0 18             	shl    eax,0x18
c0011ae0:	09 c1                	or     ecx,eax
c0011ae2:	89 ca                	mov    edx,ecx
c0011ae4:	a0 c0 69 02 c0       	mov    al,ds:0xc00269c0
c0011ae9:	0f b6 c0             	movzx  eax,al
c0011aec:	89 14 85 00 6a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9600],edx
c0011af3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011af8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011afc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b00:	01 d0                	add    eax,edx
c0011b02:	83 c0 2c             	add    eax,0x2c
c0011b05:	8a 00                	mov    al,BYTE PTR [eax]
c0011b07:	0f b6 d0             	movzx  edx,al
c0011b0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b0e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b15:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b19:	0f b6 c0             	movzx  eax,al
c0011b1c:	c1 e0 08             	shl    eax,0x8
c0011b1f:	89 d1                	mov    ecx,edx
c0011b21:	09 c1                	or     ecx,eax
c0011b23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b27:	8d 50 02             	lea    edx,[eax+0x2]
c0011b2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b2e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b32:	0f b6 c0             	movzx  eax,al
c0011b35:	c1 e0 10             	shl    eax,0x10
c0011b38:	09 c1                	or     ecx,eax
c0011b3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b3e:	8d 50 03             	lea    edx,[eax+0x3]
c0011b41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b45:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b49:	0f b6 c0             	movzx  eax,al
c0011b4c:	c1 e0 18             	shl    eax,0x18
c0011b4f:	09 c1                	or     ecx,eax
c0011b51:	89 ca                	mov    edx,ecx
c0011b53:	a0 c0 69 02 c0       	mov    al,ds:0xc00269c0
c0011b58:	0f b6 c0             	movzx  eax,al
c0011b5b:	89 14 85 80 6a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9580],edx
c0011b62:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b67:	a0 c0 69 02 c0       	mov    al,ds:0xc00269c0
c0011b6c:	40                   	inc    eax
c0011b6d:	a2 c0 69 02 c0       	mov    ds:0xc00269c0,al
c0011b72:	e9 a3 01 00 00       	jmp    c0011d1a <scanMADT()+0x4b2>
c0011b77:	90                   	nop
c0011b78:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011b7d:	0f 85 e9 00 00 00    	jne    c0011c6c <scanMADT()+0x404>
c0011b83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b87:	8d 50 01             	lea    edx,[eax+0x1]
c0011b8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b92:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011b96:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011b9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b9e:	8d 50 01             	lea    edx,[eax+0x1]
c0011ba1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ba5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ba9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011bad:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011bb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bb9:	01 d0                	add    eax,edx
c0011bbb:	83 c0 2c             	add    eax,0x2c
c0011bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0011bc0:	0f b6 d0             	movzx  edx,al
c0011bc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bd2:	0f b6 c0             	movzx  eax,al
c0011bd5:	c1 e0 08             	shl    eax,0x8
c0011bd8:	89 d1                	mov    ecx,edx
c0011bda:	09 c1                	or     ecx,eax
c0011bdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011be0:	8d 50 02             	lea    edx,[eax+0x2]
c0011be3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011be7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011beb:	0f b6 c0             	movzx  eax,al
c0011bee:	c1 e0 10             	shl    eax,0x10
c0011bf1:	09 c1                	or     ecx,eax
c0011bf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bf7:	8d 50 03             	lea    edx,[eax+0x3]
c0011bfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bfe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c02:	0f b6 c0             	movzx  eax,al
c0011c05:	c1 e0 18             	shl    eax,0x18
c0011c08:	09 c8                	or     eax,ecx
c0011c0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c0e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c1b:	01 d0                	add    eax,edx
c0011c1d:	83 c0 2c             	add    eax,0x2c
c0011c20:	8a 00                	mov    al,BYTE PTR [eax]
c0011c22:	0f b6 c0             	movzx  eax,al
c0011c25:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011c29:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011c2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c30:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011c34:	0f b6 d2             	movzx  edx,dl
c0011c37:	c1 e2 08             	shl    edx,0x8
c0011c3a:	09 d0                	or     eax,edx
c0011c3c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011c41:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011c46:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011c4b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c4f:	88 90 60 57 02 c0    	mov    BYTE PTR [eax-0x3ffda8a0],dl
c0011c55:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011c5a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011c5f:	66 89 84 12 a0 69 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9660],ax
c0011c67:	e9 ae 00 00 00       	jmp    c0011d1a <scanMADT()+0x4b2>
c0011c6c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011c71:	0f 85 97 00 00 00    	jne    c0011d0e <scanMADT()+0x4a6>
c0011c77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c86:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c8a:	0f b6 c0             	movzx  eax,al
c0011c8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011c91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c99:	01 d0                	add    eax,edx
c0011c9b:	83 c0 2c             	add    eax,0x2c
c0011c9e:	8a 00                	mov    al,BYTE PTR [eax]
c0011ca0:	0f b6 d0             	movzx  edx,al
c0011ca3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ca7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011caa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011cb2:	0f b6 c0             	movzx  eax,al
c0011cb5:	c1 e0 08             	shl    eax,0x8
c0011cb8:	09 d0                	or     eax,edx
c0011cba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011cbe:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011cc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cc7:	8d 50 01             	lea    edx,[eax+0x1]
c0011cca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cd2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cd6:	0f b6 c0             	movzx  eax,al
c0011cd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ce1:	c1 e0 08             	shl    eax,0x8
c0011ce4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011ce8:	89 c1                	mov    ecx,eax
c0011cea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cee:	c1 e0 18             	shl    eax,0x18
c0011cf1:	89 c3                	mov    ebx,eax
c0011cf3:	a1 10 69 02 c0       	mov    eax,ds:0xc0026910
c0011cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0011cfb:	89 15 10 69 02 c0    	mov    DWORD PTR ds:0xc0026910,edx
c0011d01:	09 d9                	or     ecx,ebx
c0011d03:	89 ca                	mov    edx,ecx
c0011d05:	89 14 85 20 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd96e0],edx
c0011d0c:	eb 0c                	jmp    c0011d1a <scanMADT()+0x4b2>
c0011d0e:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011d13:	75 05                	jne    c0011d1a <scanMADT()+0x4b2>
c0011d15:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011d1a:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011d1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011d23:	01 d0                	add    eax,edx
c0011d25:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d29:	e9 6c fc ff ff       	jmp    c001199a <scanMADT()+0x132>
c0011d2e:	90                   	nop
c0011d2f:	eb 03                	jmp    c0011d34 <scanMADT()+0x4cc>
c0011d31:	90                   	nop
c0011d32:	90                   	nop
c0011d33:	90                   	nop
c0011d34:	83 c4 38             	add    esp,0x38
c0011d37:	5b                   	pop    ebx
c0011d38:	c3                   	ret    
c0011d39:	90                   	nop

c0011d3a <ACPI::ACPI()>:
c0011d3a:	83 ec 0c             	sub    esp,0xc
c0011d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d41:	83 ec 08             	sub    esp,0x8
c0011d44:	68 63 39 02 c0       	push   0xc0023963
c0011d49:	50                   	push   eax
c0011d4a:	e8 f9 c2 ff ff       	call   c000e048 <Device::Device(char const*)>
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	ba ec 3a 02 c0       	mov    edx,0xc0023aec
c0011d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d5b:	89 10                	mov    DWORD PTR [eax],edx
c0011d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d61:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d6c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d7a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011d84:	83 ec 0c             	sub    esp,0xc
c0011d87:	68 68 39 02 c0       	push   0xc0023968
c0011d8c:	e8 6c 7c ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	e8 cf fa ff ff       	call   c0011868 <scanMADT()>
c0011d99:	90                   	nop
c0011d9a:	83 c4 0c             	add    esp,0xc
c0011d9d:	c3                   	ret    

c0011d9e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011d9e:	83 ec 2c             	sub    esp,0x2c
c0011da1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011da5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011da9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011dad:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011db1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011db6:	88 d0                	mov    al,dl
c0011db8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011dbc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011dc1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011dc9:	90                   	nop
c0011dca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dce:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011dd4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011dd8:	0f 8d 98 00 00 00    	jge    c0011e76 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd8>
c0011dde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011de2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011de6:	83 c2 2a             	add    edx,0x2a
c0011de9:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011ded:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011df2:	75 78                	jne    c0011e6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xce>
c0011df4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011df8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011dfc:	83 c2 2a             	add    edx,0x2a
c0011dff:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011e03:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011e07:	75 63                	jne    c0011e6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xce>
c0011e09:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e0e:	74 3a                	je     c0011e4a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011e10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e18:	83 c2 2a             	add    edx,0x2a
c0011e1b:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e26:	39 c2                	cmp    edx,eax
c0011e28:	74 10                	je     c0011e3a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011e2a:	83 ec 0c             	sub    esp,0xc
c0011e2d:	68 04 38 02 c0       	push   0xc0023804
c0011e32:	e8 0c 24 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0011e37:	83 c4 10             	add    esp,0x10
c0011e3a:	83 ec 0c             	sub    esp,0xc
c0011e3d:	68 76 39 02 c0       	push   0xc0023976
c0011e42:	e8 fc 23 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0011e47:	83 c4 10             	add    esp,0x10
c0011e4a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011e4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e52:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e56:	83 c2 2a             	add    edx,0x2a
c0011e59:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011e5d:	8b 02                	mov    eax,DWORD PTR [edx]
c0011e5f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011e62:	89 01                	mov    DWORD PTR [ecx],eax
c0011e64:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011e67:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011e6c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e70:	e9 55 ff ff ff       	jmp    c0011dca <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011e75:	90                   	nop
c0011e76:	90                   	nop
c0011e77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e7b:	83 c4 2c             	add    esp,0x2c
c0011e7e:	c2 04 00             	ret    0x4
c0011e81:	90                   	nop

c0011e82 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011e82:	83 ec 1c             	sub    esp,0x1c
c0011e85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e89:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011e8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e91:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011e96:	88 c8                	mov    al,cl
c0011e98:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011e9c:	88 d0                	mov    al,dl
c0011e9e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ea6:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011eb0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011eb3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011eb7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ebf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011ec5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011ec9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed0:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ed9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011edf:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011ee3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011eea:	83 c2 2a             	add    edx,0x2a
c0011eed:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011eff:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f06:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f0e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f14:	8d 50 01             	lea    edx,[eax+0x1]
c0011f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f1b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f25:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f2b:	3d 00 02 00 00       	cmp    eax,0x200
c0011f30:	75 10                	jne    c0011f42 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011f32:	83 ec 0c             	sub    esp,0xc
c0011f35:	68 85 39 02 c0       	push   0xc0023985
c0011f3a:	e8 04 23 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0011f3f:	83 c4 10             	add    esp,0x10
c0011f42:	90                   	nop
c0011f43:	83 c4 1c             	add    esp,0x1c
c0011f46:	c3                   	ret    
c0011f47:	90                   	nop

c0011f48 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0011f48:	b8 00 00 00 00       	mov    eax,0x0
c0011f4d:	c3                   	ret    

c0011f4e <ACPI::detectPCI()>:
c0011f4e:	53                   	push   ebx
c0011f4f:	83 ec 28             	sub    esp,0x28
c0011f52:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011f57:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0011f5c:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0011f61:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011f67:	83 e0 04             	and    eax,0x4
c0011f6a:	84 c0                	test   al,al
c0011f6c:	74 2c                	je     c0011f9a <ACPI::detectPCI()+0x4c>
c0011f6e:	a1 08 69 02 c0       	mov    eax,ds:0xc0026908
c0011f73:	83 ec 08             	sub    esp,0x8
c0011f76:	68 a2 39 02 c0       	push   0xc00239a2
c0011f7b:	50                   	push   eax
c0011f7c:	e8 73 f8 ff ff       	call   c00117f4 <findDataTable(unsigned char*, char*)>
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f88:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011f8d:	74 0b                	je     c0011f9a <ACPI::detectPCI()+0x4c>
c0011f8f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011f94:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0011f99:	90                   	nop
c0011f9a:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0011fa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fa6:	8a 00                	mov    al,BYTE PTR [eax]
c0011fa8:	3c 01                	cmp    al,0x1
c0011faa:	75 0c                	jne    c0011fb8 <ACPI::detectPCI()+0x6a>
c0011fac:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011fb1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0011fb6:	eb 26                	jmp    c0011fde <ACPI::detectPCI()+0x90>
c0011fb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fbc:	8a 00                	mov    al,BYTE PTR [eax]
c0011fbe:	3c 02                	cmp    al,0x2
c0011fc0:	75 1c                	jne    c0011fde <ACPI::detectPCI()+0x90>
c0011fc2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011fc7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0011fcc:	74 10                	je     c0011fde <ACPI::detectPCI()+0x90>
c0011fce:	83 ec 0c             	sub    esp,0xc
c0011fd1:	68 34 38 02 c0       	push   0xc0023834
c0011fd6:	e8 68 22 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011fe2:	83 f0 01             	xor    eax,0x1
c0011fe5:	84 c0                	test   al,al
c0011fe7:	74 41                	je     c001202a <ACPI::detectPCI()+0xdc>
c0011fe9:	e8 62 e1 fe ff       	call   c0000150 <manualPCIProbe>
c0011fee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ff2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ff7:	75 0d                	jne    c0012006 <ACPI::detectPCI()+0xb8>
c0011ff9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011ffe:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012003:	eb 25                	jmp    c001202a <ACPI::detectPCI()+0xdc>
c0012005:	90                   	nop
c0012006:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001200b:	75 1d                	jne    c001202a <ACPI::detectPCI()+0xdc>
c001200d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012012:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012017:	74 11                	je     c001202a <ACPI::detectPCI()+0xdc>
c0012019:	83 ec 0c             	sub    esp,0xc
c001201c:	68 34 38 02 c0       	push   0xc0023834
c0012021:	e8 1d 22 00 00       	call   c0014243 <Krnl::panic(char const*)>
c0012026:	83 c4 10             	add    esp,0x10
c0012029:	90                   	nop
c001202a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001202f:	0f 84 81 00 00 00    	je     c00120b6 <ACPI::detectPCI()+0x168>
c0012035:	83 ec 0c             	sub    esp,0xc
c0012038:	68 a7 39 02 c0       	push   0xc00239a7
c001203d:	e8 bb 79 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0012042:	83 c4 10             	add    esp,0x10
c0012045:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001204d:	83 ec 0c             	sub    esp,0xc
c0012050:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012054:	e8 4a 79 ff ff       	call   c00099a3 <malloc>
c0012059:	83 c4 10             	add    esp,0x10
c001205c:	89 c3                	mov    ebx,eax
c001205e:	83 ec 0c             	sub    esp,0xc
c0012061:	53                   	push   ebx
c0012062:	e8 af a7 00 00       	call   c001c816 <PCI::PCI()>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001206e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012072:	83 ec 08             	sub    esp,0x8
c0012075:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012079:	50                   	push   eax
c001207a:	e8 c5 bd ff ff       	call   c000de44 <Device::addChild(Device*)>
c001207f:	83 c4 10             	add    esp,0x10
c0012082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012086:	8b 00                	mov    eax,DWORD PTR [eax]
c0012088:	83 c0 08             	add    eax,0x8
c001208b:	8b 00                	mov    eax,DWORD PTR [eax]
c001208d:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012092:	74 08                	je     c001209c <ACPI::detectPCI()+0x14e>
c0012094:	ba 01 00 00 00       	mov    edx,0x1
c0012099:	eb 07                	jmp    c00120a2 <ACPI::detectPCI()+0x154>
c001209b:	90                   	nop
c001209c:	ba 02 00 00 00       	mov    edx,0x2
c00120a1:	90                   	nop
c00120a2:	6a 00                	push   0x0
c00120a4:	6a 00                	push   0x0
c00120a6:	52                   	push   edx
c00120a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120ab:	ff d0                	call   eax
c00120ad:	83 c4 10             	add    esp,0x10
c00120b0:	e9 9f 00 00 00       	jmp    c0012154 <ACPI::detectPCI()+0x206>
c00120b5:	90                   	nop
c00120b6:	83 ec 0c             	sub    esp,0xc
c00120b9:	68 bf 39 02 c0       	push   0xc00239bf
c00120be:	e8 41 a9 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	83 ec 0c             	sub    esp,0xc
c00120c9:	68 ca 39 02 c0       	push   0xc00239ca
c00120ce:	e8 2a 79 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00120d3:	83 c4 10             	add    esp,0x10
c00120d6:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00120dd:	83 ec 0c             	sub    esp,0xc
c00120e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00120e4:	e8 ba 78 ff ff       	call   c00099a3 <malloc>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	89 c3                	mov    ebx,eax
c00120ee:	83 ec 0c             	sub    esp,0xc
c00120f1:	53                   	push   ebx
c00120f2:	e8 89 b2 00 00       	call   c001d380 <IDE::IDE()>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00120fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012102:	83 ec 08             	sub    esp,0x8
c0012105:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012109:	50                   	push   eax
c001210a:	e8 35 bd ff ff       	call   c000de44 <Device::addChild(Device*)>
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012116:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012124:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001212d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012131:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001213a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001213e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012140:	83 c0 08             	add    eax,0x8
c0012143:	8b 00                	mov    eax,DWORD PTR [eax]
c0012145:	6a 00                	push   0x0
c0012147:	6a 00                	push   0x0
c0012149:	6a 00                	push   0x0
c001214b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001214f:	ff d0                	call   eax
c0012151:	83 c4 10             	add    esp,0x10
c0012154:	90                   	nop
c0012155:	83 c4 28             	add    esp,0x28
c0012158:	5b                   	pop    ebx
c0012159:	c3                   	ret    

c001215a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001215a:	83 ec 1c             	sub    esp,0x1c
c001215d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012161:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012164:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012168:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001216d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012172:	83 ec 08             	sub    esp,0x8
c0012175:	52                   	push   edx
c0012176:	50                   	push   eax
c0012177:	e8 fc 6d ff ff       	call   c0008f78 <Computer::readCMOS(unsigned char)>
c001217c:	83 c4 10             	add    esp,0x10
c001217f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012183:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0012188:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001218d:	83 ec 04             	sub    esp,0x4
c0012190:	6a 01                	push   0x1
c0012192:	52                   	push   edx
c0012193:	50                   	push   eax
c0012194:	e8 bb 6f ff ff       	call   c0009154 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012199:	83 c4 10             	add    esp,0x10
c001219c:	90                   	nop
c001219d:	83 c4 1c             	add    esp,0x1c
c00121a0:	c3                   	ret    
c00121a1:	90                   	nop

c00121a2 <ACPI::sleep()>:
c00121a2:	83 ec 0c             	sub    esp,0xc
c00121a5:	a1 e0 66 02 c0       	mov    eax,ds:0xc00266e0
c00121aa:	85 c0                	test   eax,eax
c00121ac:	74 08                	je     c00121b6 <ACPI::sleep()+0x14>
c00121ae:	a1 e0 66 02 c0       	mov    eax,ds:0xc00266e0
c00121b3:	ff d0                	call   eax
c00121b5:	90                   	nop
c00121b6:	90                   	nop
c00121b7:	83 c4 0c             	add    esp,0xc
c00121ba:	c3                   	ret    
c00121bb:	90                   	nop

c00121bc <ACPI::open(int, int, void*)>:
c00121bc:	57                   	push   edi
c00121bd:	56                   	push   esi
c00121be:	53                   	push   ebx
c00121bf:	81 ec 70 01 00 00    	sub    esp,0x170
c00121c5:	83 ec 0c             	sub    esp,0xc
c00121c8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00121cf:	e8 7a fd ff ff       	call   c0011f4e <ACPI::detectPCI()>
c00121d4:	83 c4 10             	add    esp,0x10
c00121d7:	83 ec 0c             	sub    esp,0xc
c00121da:	68 5c 38 02 c0       	push   0xc002385c
c00121df:	e8 19 78 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00121e4:	83 c4 10             	add    esp,0x10
c00121e7:	83 ec 0c             	sub    esp,0xc
c00121ea:	68 df 39 02 c0       	push   0xc00239df
c00121ef:	e8 ab 47 00 00       	call   c001699f <Thr::loadKernelSymbolTable(char const*)>
c00121f4:	83 c4 10             	add    esp,0x10
c00121f7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00121ff:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001220a:	83 ec 0c             	sub    esp,0xc
c001220d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012214:	e8 8a 77 ff ff       	call   c00099a3 <malloc>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	89 c3                	mov    ebx,eax
c001221e:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0012223:	83 ec 04             	sub    esp,0x4
c0012226:	50                   	push   eax
c0012227:	68 fd 39 02 c0       	push   0xc00239fd
c001222c:	53                   	push   ebx
c001222d:	e8 3c ad ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0012232:	83 c4 10             	add    esp,0x10
c0012235:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001223c:	83 ec 08             	sub    esp,0x8
c001223f:	6a 01                	push   0x1
c0012241:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012248:	e8 85 ad ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c001224d:	83 c4 10             	add    esp,0x10
c0012250:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012257:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001225f:	75 15                	jne    c0012276 <ACPI::open(int, int, void*)+0xba>
c0012261:	83 ec 0c             	sub    esp,0xc
c0012264:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001226b:	e8 c0 ad ff ff       	call   c000d030 <File::close()>
c0012270:	83 c4 10             	add    esp,0x10
c0012273:	eb 09                	jmp    c001227e <ACPI::open(int, int, void*)+0xc2>
c0012275:	90                   	nop
c0012276:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001227e:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012286:	74 1e                	je     c00122a6 <ACPI::open(int, int, void*)+0xea>
c0012288:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001228f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012291:	83 c0 08             	add    eax,0x8
c0012294:	8b 00                	mov    eax,DWORD PTR [eax]
c0012296:	83 ec 0c             	sub    esp,0xc
c0012299:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00122a0:	ff d0                	call   eax
c00122a2:	83 c4 10             	add    esp,0x10
c00122a5:	90                   	nop
c00122a6:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00122ad:	83 f0 01             	xor    eax,0x1
c00122b0:	84 c0                	test   al,al
c00122b2:	74 40                	je     c00122f4 <ACPI::open(int, int, void*)+0x138>
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	68 1b 3a 02 c0       	push   0xc0023a1b
c00122bc:	e8 3c 77 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00122c1:	83 c4 10             	add    esp,0x10
c00122c4:	83 ec 04             	sub    esp,0x4
c00122c7:	6a 0c                	push   0xc
c00122c9:	68 36 3a 02 c0       	push   0xc0023a36
c00122ce:	68 47 3a 02 c0       	push   0xc0023a47
c00122d3:	e8 31 2d 00 00       	call   c0015009 <Reg::readIntWithDefault(char*, char*, int)>
c00122d8:	83 c4 10             	add    esp,0x10
c00122db:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00122e2:	83 ec 0c             	sub    esp,0xc
c00122e5:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00122ec:	e8 42 95 ff ff       	call   c000b833 <Virt::setupPageSwapping(int)>
c00122f1:	83 c4 10             	add    esp,0x10
c00122f4:	83 ec 0c             	sub    esp,0xc
c00122f7:	68 c6 21 02 c0       	push   0xc00221c6
c00122fc:	e8 fc 76 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0012301:	83 c4 10             	add    esp,0x10
c0012304:	8b 1d 68 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026068
c001230a:	83 ec 08             	sub    esp,0x8
c001230d:	6a 01                	push   0x1
c001230f:	68 4e 3a 02 c0       	push   0xc0023a4e
c0012314:	e8 fd 50 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	83 ec 08             	sub    esp,0x8
c001231f:	53                   	push   ebx
c0012320:	50                   	push   eax
c0012321:	e8 21 53 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c0012326:	83 c4 10             	add    esp,0x10
c0012329:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012330:	83 ec 08             	sub    esp,0x8
c0012333:	6a 12                	push   0x12
c0012335:	50                   	push   eax
c0012336:	e8 8d be ff ff       	call   c000e1c8 <getDevicesOfType(DeviceType)>
c001233b:	83 c4 0c             	add    esp,0xc
c001233e:	83 ec 0c             	sub    esp,0xc
c0012341:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012348:	50                   	push   eax
c0012349:	e8 80 f0 00 00       	call   c00213ce <LinkedList<Device>::isEmpty()>
c001234e:	83 c4 10             	add    esp,0x10
c0012351:	83 f0 01             	xor    eax,0x1
c0012354:	84 c0                	test   al,al
c0012356:	0f 84 44 01 00 00    	je     c00124a0 <ACPI::open(int, int, void*)+0x2e4>
c001235c:	83 ec 0c             	sub    esp,0xc
c001235f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012366:	50                   	push   eax
c0012367:	e8 7e f0 00 00       	call   c00213ea <LinkedList<Device>::getFirstElement()>
c001236c:	83 c4 10             	add    esp,0x10
c001236f:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012376:	83 ec 0c             	sub    esp,0xc
c0012379:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012380:	50                   	push   eax
c0012381:	e8 6c f0 00 00       	call   c00213f2 <LinkedList<Device>::removeFirst()>
c0012386:	83 c4 10             	add    esp,0x10
c0012389:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012390:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012397:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001239e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00123a2:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00123a8:	ba 09 00 00 00       	mov    edx,0x9
c00123ad:	fc                   	cld    
c00123ae:	89 c7                	mov    edi,eax
c00123b0:	89 de                	mov    esi,ebx
c00123b2:	89 d1                	mov    ecx,edx
c00123b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00123b6:	83 ec 08             	sub    esp,0x8
c00123b9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00123bd:	50                   	push   eax
c00123be:	83 ec 24             	sub    esp,0x24
c00123c1:	89 e0                	mov    eax,esp
c00123c3:	89 c3                	mov    ebx,eax
c00123c5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00123c9:	ba 09 00 00 00       	mov    edx,0x9
c00123ce:	89 df                	mov    edi,ebx
c00123d0:	89 c6                	mov    esi,eax
c00123d2:	89 d1                	mov    ecx,edx
c00123d4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00123d6:	e8 19 a9 00 00       	call   c001ccf4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00123db:	83 c4 30             	add    esp,0x30
c00123de:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00123e5:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00123ed:	0f 84 4b ff ff ff    	je     c001233e <ACPI::open(int, int, void*)+0x182>
c00123f3:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00123fe:	83 ec 0c             	sub    esp,0xc
c0012401:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012408:	e8 96 75 ff ff       	call   c00099a3 <malloc>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	89 c3                	mov    ebx,eax
c0012412:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0012417:	83 ec 04             	sub    esp,0x4
c001241a:	50                   	push   eax
c001241b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012422:	53                   	push   ebx
c0012423:	e8 46 ab ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0012428:	83 c4 10             	add    esp,0x10
c001242b:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012432:	83 ec 0c             	sub    esp,0xc
c0012435:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001243c:	e8 ff ad ff ff       	call   c000d240 <File::exists()>
c0012441:	83 c4 10             	add    esp,0x10
c0012444:	84 c0                	test   al,al
c0012446:	74 28                	je     c0012470 <ACPI::open(int, int, void*)+0x2b4>
c0012448:	83 ec 08             	sub    esp,0x8
c001244b:	6a 01                	push   0x1
c001244d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012454:	e8 bd 4f 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c0012459:	83 c4 10             	add    esp,0x10
c001245c:	83 ec 08             	sub    esp,0x8
c001245f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012466:	50                   	push   eax
c0012467:	e8 db 51 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c001246c:	83 c4 10             	add    esp,0x10
c001246f:	90                   	nop
c0012470:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012478:	0f 84 c0 fe ff ff    	je     c001233e <ACPI::open(int, int, void*)+0x182>
c001247e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012485:	8b 00                	mov    eax,DWORD PTR [eax]
c0012487:	83 c0 08             	add    eax,0x8
c001248a:	8b 00                	mov    eax,DWORD PTR [eax]
c001248c:	83 ec 0c             	sub    esp,0xc
c001248f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012496:	ff d0                	call   eax
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	e9 9e fe ff ff       	jmp    c001233e <ACPI::open(int, int, void*)+0x182>
c00124a0:	83 ec 0c             	sub    esp,0xc
c00124a3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124aa:	50                   	push   eax
c00124ab:	e8 1c ef 00 00       	call   c00213cc <LinkedList<Device>::~LinkedList()>
c00124b0:	83 c4 10             	add    esp,0x10
c00124b3:	8b 1d 68 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026068
c00124b9:	83 ec 08             	sub    esp,0x8
c00124bc:	6a 01                	push   0x1
c00124be:	68 69 3a 02 c0       	push   0xc0023a69
c00124c3:	e8 4e 4f 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c00124c8:	83 c4 10             	add    esp,0x10
c00124cb:	83 ec 08             	sub    esp,0x8
c00124ce:	53                   	push   ebx
c00124cf:	50                   	push   eax
c00124d0:	e8 72 51 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	8b 1d 68 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026068
c00124de:	83 ec 08             	sub    esp,0x8
c00124e1:	6a 01                	push   0x1
c00124e3:	68 86 3a 02 c0       	push   0xc0023a86
c00124e8:	e8 29 4f 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	83 ec 08             	sub    esp,0x8
c00124f3:	53                   	push   ebx
c00124f4:	50                   	push   eax
c00124f5:	e8 4d 51 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c00124fa:	83 c4 10             	add    esp,0x10
c00124fd:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0012502:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012508:	83 e0 04             	and    eax,0x4
c001250b:	84 c0                	test   al,al
c001250d:	0f 84 0f 01 00 00    	je     c0012622 <ACPI::open(int, int, void*)+0x466>
c0012513:	83 ec 0c             	sub    esp,0xc
c0012516:	68 a3 3a 02 c0       	push   0xc0023aa3
c001251b:	e8 dd 74 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0012520:	83 c4 10             	add    esp,0x10
c0012523:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001252e:	83 ec 0c             	sub    esp,0xc
c0012531:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012538:	e8 66 74 ff ff       	call   c00099a3 <malloc>
c001253d:	83 c4 10             	add    esp,0x10
c0012540:	89 c3                	mov    ebx,eax
c0012542:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0012547:	83 ec 04             	sub    esp,0x4
c001254a:	50                   	push   eax
c001254b:	68 c0 3a 02 c0       	push   0xc0023ac0
c0012550:	53                   	push   ebx
c0012551:	e8 18 aa ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012560:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012568:	74 1a                	je     c0012584 <ACPI::open(int, int, void*)+0x3c8>
c001256a:	83 ec 0c             	sub    esp,0xc
c001256d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012574:	e8 c7 ac ff ff       	call   c000d240 <File::exists()>
c0012579:	83 c4 10             	add    esp,0x10
c001257c:	84 c0                	test   al,al
c001257e:	74 04                	je     c0012584 <ACPI::open(int, int, void*)+0x3c8>
c0012580:	b0 01                	mov    al,0x1
c0012582:	eb 02                	jmp    c0012586 <ACPI::open(int, int, void*)+0x3ca>
c0012584:	b0 00                	mov    al,0x0
c0012586:	84 c0                	test   al,al
c0012588:	74 26                	je     c00125b0 <ACPI::open(int, int, void*)+0x3f4>
c001258a:	83 ec 08             	sub    esp,0x8
c001258d:	6a 01                	push   0x1
c001258f:	68 c0 3a 02 c0       	push   0xc0023ac0
c0012594:	e8 7d 4e 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c0012599:	83 c4 10             	add    esp,0x10
c001259c:	83 ec 08             	sub    esp,0x8
c001259f:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00125a6:	50                   	push   eax
c00125a7:	e8 9b 50 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c00125ac:	83 c4 10             	add    esp,0x10
c00125af:	90                   	nop
c00125b0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00125b8:	74 28                	je     c00125e2 <ACPI::open(int, int, void*)+0x426>
c00125ba:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00125c2:	74 1e                	je     c00125e2 <ACPI::open(int, int, void*)+0x426>
c00125c4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00125cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00125cd:	83 c0 08             	add    eax,0x8
c00125d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00125d2:	83 ec 0c             	sub    esp,0xc
c00125d5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00125dc:	ff d0                	call   eax
c00125de:	83 c4 10             	add    esp,0x10
c00125e1:	90                   	nop
c00125e2:	a1 08 69 02 c0       	mov    eax,ds:0xc0026908
c00125e7:	83 ec 08             	sub    esp,0x8
c00125ea:	68 dd 3a 02 c0       	push   0xc0023add
c00125ef:	50                   	push   eax
c00125f0:	e8 ff f1 ff ff       	call   c00117f4 <findDataTable(unsigned char*, char*)>
c00125f5:	83 c4 10             	add    esp,0x10
c00125f8:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00125ff:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012607:	74 19                	je     c0012622 <ACPI::open(int, int, void*)+0x466>
c0012609:	83 ec 08             	sub    esp,0x8
c001260c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012613:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001261a:	e8 3b fb ff ff       	call   c001215a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	b8 00 00 00 00       	mov    eax,0x0
c0012627:	81 c4 70 01 00 00    	add    esp,0x170
c001262d:	5b                   	pop    ebx
c001262e:	5e                   	pop    esi
c001262f:	5f                   	pop    edi
c0012630:	c3                   	ret    
c0012631:	90                   	nop

c0012632 <CPU::close(int, int, void*)>:
c0012632:	31 c0                	xor    eax,eax
c0012634:	c3                   	ret    
c0012635:	90                   	nop

c0012636 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012636:	55                   	push   ebp
c0012637:	57                   	push   edi
c0012638:	56                   	push   esi
c0012639:	53                   	push   ebx
c001263a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001263e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012642:	89 ce                	mov    esi,ecx
c0012644:	89 d5                	mov    ebp,edx
c0012646:	80 f9 04             	cmp    cl,0x4
c0012649:	75 28                	jne    c0012673 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001264b:	8d 42 f9             	lea    eax,[edx-0x7]
c001264e:	3c 03                	cmp    al,0x3
c0012650:	0f 86 63 01 00 00    	jbe    c00127b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012656:	80 fa 03             	cmp    dl,0x3
c0012659:	0f 84 5a 01 00 00    	je     c00127b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001265f:	8d 7a f2             	lea    edi,[edx-0xe]
c0012662:	b8 30 59 02 c0       	mov    eax,0xc0025930
c0012667:	89 fb                	mov    ebx,edi
c0012669:	80 fb 01             	cmp    bl,0x1
c001266c:	77 4e                	ja     c00126bc <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001266e:	e9 52 01 00 00       	jmp    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012673:	80 f9 05             	cmp    cl,0x5
c0012676:	75 4d                	jne    c00126c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012678:	b8 40 59 02 c0       	mov    eax,0xc0025940
c001267d:	80 fa 03             	cmp    dl,0x3
c0012680:	0f 86 3f 01 00 00    	jbe    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012686:	8d 7a fa             	lea    edi,[edx-0x6]
c0012689:	b8 50 59 02 c0       	mov    eax,0xc0025950
c001268e:	89 fb                	mov    ebx,edi
c0012690:	80 fb 01             	cmp    bl,0x1
c0012693:	0f 86 2c 01 00 00    	jbe    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012699:	b8 60 59 02 c0       	mov    eax,0xc0025960
c001269e:	80 fa 08             	cmp    dl,0x8
c00126a1:	0f 84 1e 01 00 00    	je     c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00126a7:	89 d7                	mov    edi,edx
c00126a9:	b8 70 59 02 c0       	mov    eax,0xc0025970
c00126ae:	83 e7 fb             	and    edi,0xfffffffb
c00126b1:	89 fb                	mov    ebx,edi
c00126b3:	80 fb 09             	cmp    bl,0x9
c00126b6:	0f 84 09 01 00 00    	je     c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00126bc:	31 c0                	xor    eax,eax
c00126be:	89 eb                	mov    ebx,ebp
c00126c0:	0f b6 fb             	movzx  edi,bl
c00126c3:	eb 30                	jmp    c00126f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00126c5:	31 c0                	xor    eax,eax
c00126c7:	80 f9 06             	cmp    cl,0x6
c00126ca:	75 f2                	jne    c00126be <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00126cc:	80 fa 0a             	cmp    dl,0xa
c00126cf:	77 ed                	ja     c00126be <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00126d1:	bf de 05 00 00       	mov    edi,0x5de
c00126d6:	0f a3 d7             	bt     edi,edx
c00126d9:	73 e3                	jae    c00126be <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00126db:	b8 80 59 02 c0       	mov    eax,0xc0025980
c00126e0:	e9 e0 00 00 00       	jmp    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00126e5:	39 c7                	cmp    edi,eax
c00126e7:	0f 84 d3 00 00 00    	je     c00127c0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00126ed:	40                   	inc    eax
c00126ee:	3d d0 00 00 00       	cmp    eax,0xd0
c00126f3:	74 09                	je     c00126fe <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00126f5:	89 f3                	mov    ebx,esi
c00126f7:	80 fb 0f             	cmp    bl,0xf
c00126fa:	75 f1                	jne    c00126ed <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00126fc:	eb e7                	jmp    c00126e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00126fe:	80 f9 10             	cmp    cl,0x10
c0012701:	75 14                	jne    c0012717 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012703:	8d 42 fc             	lea    eax,[edx-0x4]
c0012706:	83 e0 fb             	and    eax,0xfffffffb
c0012709:	3c 02                	cmp    al,0x2
c001270b:	76 34                	jbe    c0012741 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001270d:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012712:	80 fa 02             	cmp    dl,0x2
c0012715:	eb 24                	jmp    c001273b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012717:	80 f9 11             	cmp    cl,0x11
c001271a:	75 13                	jne    c001272f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001271c:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012721:	80 fa 03             	cmp    dl,0x3
c0012724:	0f 85 9b 00 00 00    	jne    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001272a:	e9 91 00 00 00       	jmp    c00127c0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001272f:	80 f9 12             	cmp    cl,0x12
c0012732:	75 14                	jne    c0012748 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012734:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012739:	fe ca                	dec    dl
c001273b:	0f 85 84 00 00 00    	jne    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012741:	b8 a0 59 02 c0       	mov    eax,0xc00259a0
c0012746:	eb 7d                	jmp    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012748:	80 f9 14             	cmp    cl,0x14
c001274b:	75 12                	jne    c001275f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001274d:	4a                   	dec    edx
c001274e:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012753:	80 fa 01             	cmp    dl,0x1
c0012756:	77 6d                	ja     c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012758:	b8 b0 59 02 c0       	mov    eax,0xc00259b0
c001275d:	eb 66                	jmp    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001275f:	80 f9 15             	cmp    cl,0x15
c0012762:	75 31                	jne    c0012795 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012764:	b8 c0 59 02 c0       	mov    eax,0xc00259c0
c0012769:	80 fa 01             	cmp    dl,0x1
c001276c:	74 57                	je     c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001276e:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012773:	80 fa 13             	cmp    dl,0x13
c0012776:	76 0c                	jbe    c0012784 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012778:	80 fa 30             	cmp    dl,0x30
c001277b:	75 48                	jne    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001277d:	b8 e0 59 02 c0       	mov    eax,0xc00259e0
c0012782:	eb 41                	jmp    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012784:	b9 04 00 09 00       	mov    ecx,0x90004
c0012789:	0f a3 d1             	bt     ecx,edx
c001278c:	73 37                	jae    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001278e:	b8 d0 59 02 c0       	mov    eax,0xc00259d0
c0012793:	eb 30                	jmp    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012795:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c001279a:	80 f9 16             	cmp    cl,0x16
c001279d:	75 26                	jne    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001279f:	b8 f0 59 02 c0       	mov    eax,0xc00259f0
c00127a4:	84 d2                	test   dl,dl
c00127a6:	74 1d                	je     c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127a8:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c00127ad:	80 fa 30             	cmp    dl,0x30
c00127b0:	75 13                	jne    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127b2:	b8 00 5a 02 c0       	mov    eax,0xc0025a00
c00127b7:	eb 0c                	jmp    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127b9:	b8 20 59 02 c0       	mov    eax,0xc0025920
c00127be:	eb 05                	jmp    c00127c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127c0:	b8 90 59 02 c0       	mov    eax,0xc0025990
c00127c5:	5b                   	pop    ebx
c00127c6:	5e                   	pop    esi
c00127c7:	5f                   	pop    edi
c00127c8:	5d                   	pop    ebp
c00127c9:	c3                   	ret    

c00127ca <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00127ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127d2:	80 f9 04             	cmp    cl,0x4
c00127d5:	75 6b                	jne    c0012842 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00127d7:	b8 80 57 02 c0       	mov    eax,0xc0025780
c00127dc:	80 fa 01             	cmp    dl,0x1
c00127df:	0f 86 92 02 00 00    	jbe    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00127e5:	b8 90 57 02 c0       	mov    eax,0xc0025790
c00127ea:	80 fa 02             	cmp    dl,0x2
c00127ed:	0f 84 84 02 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00127f3:	b8 a0 57 02 c0       	mov    eax,0xc00257a0
c00127f8:	80 fa 03             	cmp    dl,0x3
c00127fb:	0f 84 76 02 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012801:	b8 b0 57 02 c0       	mov    eax,0xc00257b0
c0012806:	80 fa 04             	cmp    dl,0x4
c0012809:	0f 84 68 02 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001280f:	b8 c0 57 02 c0       	mov    eax,0xc00257c0
c0012814:	80 fa 05             	cmp    dl,0x5
c0012817:	0f 84 5a 02 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001281d:	b8 a0 57 02 c0       	mov    eax,0xc00257a0
c0012822:	80 fa 07             	cmp    dl,0x7
c0012825:	0f 84 4c 02 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001282b:	83 ea 08             	sub    edx,0x8
c001282e:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012833:	80 fa 01             	cmp    dl,0x1
c0012836:	0f 87 3b 02 00 00    	ja     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001283c:	b8 d0 57 02 c0       	mov    eax,0xc00257d0
c0012841:	c3                   	ret    
c0012842:	80 f9 05             	cmp    cl,0x5
c0012845:	75 45                	jne    c001288c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012847:	8d 4a ff             	lea    ecx,[edx-0x1]
c001284a:	b8 e0 57 02 c0       	mov    eax,0xc00257e0
c001284f:	80 f9 02             	cmp    cl,0x2
c0012852:	0f 86 1f 02 00 00    	jbe    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012858:	80 fa 04             	cmp    dl,0x4
c001285b:	0f 84 f3 01 00 00    	je     c0012a54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012861:	80 fa 07             	cmp    dl,0x7
c0012864:	0f 84 0d 02 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001286a:	b8 f0 57 02 c0       	mov    eax,0xc00257f0
c001286f:	80 fa 08             	cmp    dl,0x8
c0012872:	0f 84 ff 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012878:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c001287d:	80 fa 09             	cmp    dl,0x9
c0012880:	0f 85 f1 01 00 00    	jne    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012886:	b8 00 58 02 c0       	mov    eax,0xc0025800
c001288b:	c3                   	ret    
c001288c:	80 f9 06             	cmp    cl,0x6
c001288f:	0f 85 85 01 00 00    	jne    c0012a1a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012895:	b8 10 58 02 c0       	mov    eax,0xc0025810
c001289a:	80 fa 01             	cmp    dl,0x1
c001289d:	0f 84 d4 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128a3:	8d 42 fb             	lea    eax,[edx-0x5]
c00128a6:	3c 01                	cmp    al,0x1
c00128a8:	0f 86 ac 01 00 00    	jbe    c0012a5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00128ae:	80 fa 03             	cmp    dl,0x3
c00128b1:	0f 84 a3 01 00 00    	je     c0012a5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00128b7:	8d 4a f9             	lea    ecx,[edx-0x7]
c00128ba:	b8 30 58 02 c0       	mov    eax,0xc0025830
c00128bf:	80 f9 01             	cmp    cl,0x1
c00128c2:	0f 86 af 01 00 00    	jbe    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128c8:	80 fa 09             	cmp    dl,0x9
c00128cb:	0f 84 8f 01 00 00    	je     c0012a60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00128d1:	8d 4a f6             	lea    ecx,[edx-0xa]
c00128d4:	80 f9 01             	cmp    cl,0x1
c00128d7:	0f 86 9a 01 00 00    	jbe    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128dd:	b8 40 58 02 c0       	mov    eax,0xc0025840
c00128e2:	80 fa 0d             	cmp    dl,0xd
c00128e5:	0f 84 8c 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128eb:	b8 50 58 02 c0       	mov    eax,0xc0025850
c00128f0:	80 fa 0e             	cmp    dl,0xe
c00128f3:	0f 84 7e 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128f9:	b8 60 58 02 c0       	mov    eax,0xc0025860
c00128fe:	80 fa 0f             	cmp    dl,0xf
c0012901:	0f 84 70 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012907:	b8 40 58 02 c0       	mov    eax,0xc0025840
c001290c:	80 fa 15             	cmp    dl,0x15
c001290f:	0f 84 62 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012915:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012918:	b8 60 58 02 c0       	mov    eax,0xc0025860
c001291d:	80 f9 01             	cmp    cl,0x1
c0012920:	0f 86 51 01 00 00    	jbe    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012926:	80 fa 1a             	cmp    dl,0x1a
c0012929:	0f 84 37 01 00 00    	je     c0012a66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001292f:	80 fa 1c             	cmp    dl,0x1c
c0012932:	0f 84 34 01 00 00    	je     c0012a6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012938:	80 fa 1d             	cmp    dl,0x1d
c001293b:	0f 84 36 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012941:	b8 90 58 02 c0       	mov    eax,0xc0025890
c0012946:	80 fa 25             	cmp    dl,0x25
c0012949:	0f 84 28 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001294f:	8d 4a da             	lea    ecx,[edx-0x26]
c0012952:	b8 80 58 02 c0       	mov    eax,0xc0025880
c0012957:	80 f9 01             	cmp    cl,0x1
c001295a:	0f 86 17 01 00 00    	jbe    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012960:	b8 a0 58 02 c0       	mov    eax,0xc00258a0
c0012965:	80 fa 2a             	cmp    dl,0x2a
c0012968:	0f 84 09 01 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001296e:	b8 90 58 02 c0       	mov    eax,0xc0025890
c0012973:	80 fa 2c             	cmp    dl,0x2c
c0012976:	0f 84 fb 00 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001297c:	b8 a0 58 02 c0       	mov    eax,0xc00258a0
c0012981:	80 fa 2d             	cmp    dl,0x2d
c0012984:	0f 84 ed 00 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001298a:	b8 70 58 02 c0       	mov    eax,0xc0025870
c001298f:	80 fa 2e             	cmp    dl,0x2e
c0012992:	0f 84 df 00 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012998:	b8 90 58 02 c0       	mov    eax,0xc0025890
c001299d:	80 fa 2f             	cmp    dl,0x2f
c00129a0:	0f 84 d1 00 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129a6:	8d 4a cb             	lea    ecx,[edx-0x35]
c00129a9:	b8 80 58 02 c0       	mov    eax,0xc0025880
c00129ae:	80 f9 01             	cmp    cl,0x1
c00129b1:	0f 86 c0 00 00 00    	jbe    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129b7:	b8 b0 58 02 c0       	mov    eax,0xc00258b0
c00129bc:	80 fa 37             	cmp    dl,0x37
c00129bf:	0f 84 b2 00 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129c5:	b8 c0 58 02 c0       	mov    eax,0xc00258c0
c00129ca:	80 fa 3a             	cmp    dl,0x3a
c00129cd:	0f 84 a4 00 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129d3:	b8 d0 58 02 c0       	mov    eax,0xc00258d0
c00129d8:	80 fa 3c             	cmp    dl,0x3c
c00129db:	0f 84 96 00 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e1:	b8 e0 58 02 c0       	mov    eax,0xc00258e0
c00129e6:	80 fa 3d             	cmp    dl,0x3d
c00129e9:	0f 84 88 00 00 00    	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ef:	b8 c0 58 02 c0       	mov    eax,0xc00258c0
c00129f4:	80 fa 3e             	cmp    dl,0x3e
c00129f7:	74 7e                	je     c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129f9:	8d 42 bb             	lea    eax,[edx-0x45]
c00129fc:	3c 01                	cmp    al,0x1
c00129fe:	76 72                	jbe    c0012a72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012a00:	80 fa 3f             	cmp    dl,0x3f
c0012a03:	74 6d                	je     c0012a72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012a05:	80 fa 4a             	cmp    dl,0x4a
c0012a08:	74 0a                	je     c0012a14 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012a0a:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012a0f:	80 fa 4d             	cmp    dl,0x4d
c0012a12:	75 63                	jne    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a14:	b8 b0 58 02 c0       	mov    eax,0xc00258b0
c0012a19:	c3                   	ret    
c0012a1a:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012a1f:	80 f9 0b             	cmp    cl,0xb
c0012a22:	75 0a                	jne    c0012a2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012a24:	fe ca                	dec    dl
c0012a26:	75 4f                	jne    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a28:	b8 f0 58 02 c0       	mov    eax,0xc00258f0
c0012a2d:	c3                   	ret    
c0012a2e:	80 f9 0f             	cmp    cl,0xf
c0012a31:	75 44                	jne    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a33:	b8 00 59 02 c0       	mov    eax,0xc0025900
c0012a38:	80 fa 02             	cmp    dl,0x2
c0012a3b:	76 3a                	jbe    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a3d:	8d 42 fd             	lea    eax,[edx-0x3]
c0012a40:	3c 01                	cmp    al,0x1
c0012a42:	76 0a                	jbe    c0012a4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012a44:	b8 65 3c 02 c0       	mov    eax,0xc0023c65
c0012a49:	80 fa 06             	cmp    dl,0x6
c0012a4c:	75 29                	jne    c0012a77 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a4e:	b8 10 59 02 c0       	mov    eax,0xc0025910
c0012a53:	c3                   	ret    
c0012a54:	b8 f0 57 02 c0       	mov    eax,0xc00257f0
c0012a59:	c3                   	ret    
c0012a5a:	b8 20 58 02 c0       	mov    eax,0xc0025820
c0012a5f:	c3                   	ret    
c0012a60:	b8 40 58 02 c0       	mov    eax,0xc0025840
c0012a65:	c3                   	ret    
c0012a66:	b8 70 58 02 c0       	mov    eax,0xc0025870
c0012a6b:	c3                   	ret    
c0012a6c:	b8 80 58 02 c0       	mov    eax,0xc0025880
c0012a71:	c3                   	ret    
c0012a72:	b8 d0 58 02 c0       	mov    eax,0xc00258d0
c0012a77:	c3                   	ret    

c0012a78 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012a78:	60                   	pusha  
c0012a79:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a85:	9c                   	pushf  
c0012a86:	fa                   	cli    
c0012a87:	0f 09                	wbinvd 
c0012a89:	0f 30                	wrmsr  
c0012a8b:	9d                   	popf   
c0012a8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a90:	89 02                	mov    DWORD PTR [edx],eax
c0012a92:	61                   	popa   
c0012a93:	c3                   	ret    

c0012a94 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012a94:	60                   	pusha  
c0012a95:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a99:	9c                   	pushf  
c0012a9a:	fa                   	cli    
c0012a9b:	0f 09                	wbinvd 
c0012a9d:	31 c0                	xor    eax,eax
c0012a9f:	31 d2                	xor    edx,edx
c0012aa1:	0f 32                	rdmsr  
c0012aa3:	9d                   	popf   
c0012aa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aa8:	89 02                	mov    DWORD PTR [edx],eax
c0012aaa:	61                   	popa   
c0012aab:	c3                   	ret    

c0012aac <CPU::AMD_K6_writeback(int, int, int)>:
c0012aac:	56                   	push   esi
c0012aad:	53                   	push   ebx
c0012aae:	83 ec 10             	sub    esp,0x10
c0012ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012aba:	75 5d                	jne    c0012b19 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012abc:	83 f8 08             	cmp    eax,0x8
c0012abf:	75 09                	jne    c0012aca <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012ac1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012ac6:	7e 13                	jle    c0012adb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012ac8:	eb 30                	jmp    c0012afa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012aca:	83 f8 06             	cmp    eax,0x6
c0012acd:	7c 4a                	jl     c0012b19 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012acf:	83 f8 07             	cmp    eax,0x7
c0012ad2:	7e 07                	jle    c0012adb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012ad4:	83 f8 09             	cmp    eax,0x9
c0012ad7:	74 21                	je     c0012afa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012ad9:	eb 3e                	jmp    c0012b19 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012adb:	89 e6                	mov    esi,esp
c0012add:	8b 1d a8 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260a8
c0012ae3:	56                   	push   esi
c0012ae4:	c1 eb 15             	shr    ebx,0x15
c0012ae7:	68 82 00 00 c0       	push   0xc0000082
c0012aec:	83 e3 7e             	and    ebx,0x7e
c0012aef:	e8 a0 ff ff ff       	call   c0012a94 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012af4:	56                   	push   esi
c0012af5:	6a 00                	push   0x0
c0012af7:	53                   	push   ebx
c0012af8:	eb 12                	jmp    c0012b0c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012afa:	89 e3                	mov    ebx,esp
c0012afc:	53                   	push   ebx
c0012afd:	68 82 00 00 c0       	push   0xc0000082
c0012b02:	e8 8d ff ff ff       	call   c0012a94 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012b07:	53                   	push   ebx
c0012b08:	6a 00                	push   0x0
c0012b0a:	6a 00                	push   0x0
c0012b0c:	68 82 00 00 c0       	push   0xc0000082
c0012b11:	e8 62 ff ff ff       	call   c0012a78 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012b16:	83 c4 18             	add    esp,0x18
c0012b19:	83 c4 10             	add    esp,0x10
c0012b1c:	5b                   	pop    ebx
c0012b1d:	5e                   	pop    esi
c0012b1e:	c3                   	ret    
c0012b1f:	90                   	nop

c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012b20:	55                   	push   ebp
c0012b21:	57                   	push   edi
c0012b22:	56                   	push   esi
c0012b23:	53                   	push   ebx
c0012b24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012b2c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012b30:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012b34:	39 05 20 5a 02 c0    	cmp    DWORD PTR ds:0xc0025a20,eax
c0012b3a:	75 23                	jne    c0012b5f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012b3c:	a1 6c 6b 02 c0       	mov    eax,ds:0xc0026b6c
c0012b41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012b45:	89 06                	mov    DWORD PTR [esi],eax
c0012b47:	a1 68 6b 02 c0       	mov    eax,ds:0xc0026b68
c0012b4c:	89 07                	mov    DWORD PTR [edi],eax
c0012b4e:	a1 64 6b 02 c0       	mov    eax,ds:0xc0026b64
c0012b53:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012b56:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c0012b5b:	89 02                	mov    DWORD PTR [edx],eax
c0012b5d:	eb 3f                	jmp    c0012b9e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012b5f:	31 c9                	xor    ecx,ecx
c0012b61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b65:	0f a2                	cpuid  
c0012b67:	89 06                	mov    DWORD PTR [esi],eax
c0012b69:	89 1f                	mov    DWORD PTR [edi],ebx
c0012b6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b6f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012b72:	89 10                	mov    DWORD PTR [eax],edx
c0012b74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b78:	a3 20 5a 02 c0       	mov    ds:0xc0025a20,eax
c0012b7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b7f:	a3 6c 6b 02 c0       	mov    ds:0xc0026b6c,eax
c0012b84:	8b 07                	mov    eax,DWORD PTR [edi]
c0012b86:	a3 68 6b 02 c0       	mov    ds:0xc0026b68,eax
c0012b8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b8e:	a3 64 6b 02 c0       	mov    ds:0xc0026b64,eax
c0012b93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b97:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b99:	a3 60 6b 02 c0       	mov    ds:0xc0026b60,eax
c0012b9e:	5b                   	pop    ebx
c0012b9f:	5e                   	pop    esi
c0012ba0:	5f                   	pop    edi
c0012ba1:	5d                   	pop    ebp
c0012ba2:	c3                   	ret    
c0012ba3:	90                   	nop

c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>:
c0012ba4:	83 ec 10             	sub    esp,0x10
c0012ba7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012bab:	50                   	push   eax
c0012bac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012bb0:	50                   	push   eax
c0012bb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012bb5:	50                   	push   eax
c0012bb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012bba:	50                   	push   eax
c0012bbb:	6a 01                	push   0x1
c0012bbd:	e8 5e ff ff ff       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012bc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012bc6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012bca:	0f 95 c0             	setne  al
c0012bcd:	83 c4 24             	add    esp,0x24
c0012bd0:	c3                   	ret    
c0012bd1:	90                   	nop

c0012bd2 <CPU::cpuidCheckECX(unsigned int)>:
c0012bd2:	83 ec 10             	sub    esp,0x10
c0012bd5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012bd9:	50                   	push   eax
c0012bda:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012bde:	50                   	push   eax
c0012bdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012be3:	50                   	push   eax
c0012be4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012be8:	50                   	push   eax
c0012be9:	6a 01                	push   0x1
c0012beb:	e8 30 ff ff ff       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012bf0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012bf4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012bf8:	0f 95 c0             	setne  al
c0012bfb:	83 c4 24             	add    esp,0x24
c0012bfe:	c3                   	ret    
c0012bff:	90                   	nop

c0012c00 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012c00:	83 ec 10             	sub    esp,0x10
c0012c03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c07:	50                   	push   eax
c0012c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c0c:	50                   	push   eax
c0012c0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c11:	50                   	push   eax
c0012c12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c16:	50                   	push   eax
c0012c17:	6a 07                	push   0x7
c0012c19:	e8 02 ff ff ff       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c22:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012c26:	0f 95 c0             	setne  al
c0012c29:	83 c4 24             	add    esp,0x24
c0012c2c:	c3                   	ret    
c0012c2d:	90                   	nop

c0012c2e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012c2e:	83 ec 10             	sub    esp,0x10
c0012c31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c35:	50                   	push   eax
c0012c36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c3a:	50                   	push   eax
c0012c3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c3f:	50                   	push   eax
c0012c40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c44:	50                   	push   eax
c0012c45:	6a 07                	push   0x7
c0012c47:	e8 d4 fe ff ff       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c50:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012c54:	0f 95 c0             	setne  al
c0012c57:	83 c4 24             	add    esp,0x24
c0012c5a:	c3                   	ret    
c0012c5b:	90                   	nop

c0012c5c <CPU::CPU()>:
c0012c5c:	83 ec 0c             	sub    esp,0xc
c0012c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c63:	83 ec 08             	sub    esp,0x8
c0012c66:	68 65 3c 02 c0       	push   0xc0023c65
c0012c6b:	50                   	push   eax
c0012c6c:	e8 d7 b3 ff ff       	call   c000e048 <Device::Device(char const*)>
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	ba 88 3e 02 c0       	mov    edx,0xc0023e88
c0012c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7d:	89 10                	mov    DWORD PTR [eax],edx
c0012c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c83:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c91:	05 78 01 00 00       	add    eax,0x178
c0012c96:	83 ec 0c             	sub    esp,0xc
c0012c99:	50                   	push   eax
c0012c9a:	e8 9f 65 ff ff       	call   c000923e <GDT::GDT()>
c0012c9f:	83 c4 10             	add    esp,0x10
c0012ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca6:	05 7c 09 00 00       	add    eax,0x97c
c0012cab:	83 ec 0c             	sub    esp,0xc
c0012cae:	50                   	push   eax
c0012caf:	e8 dc 67 ff ff       	call   c0009490 <IDT::IDT()>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cbb:	05 7c 11 00 00       	add    eax,0x117c
c0012cc0:	83 ec 0c             	sub    esp,0xc
c0012cc3:	50                   	push   eax
c0012cc4:	e8 a7 82 ff ff       	call   c000af70 <TSS::TSS()>
c0012cc9:	83 c4 10             	add    esp,0x10
c0012ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cdb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012ce5:	90                   	nop
c0012ce6:	83 c4 0c             	add    esp,0xc
c0012ce9:	c3                   	ret    

c0012cea <CPU::displayFeatures()>:
c0012cea:	c3                   	ret    
c0012ceb:	90                   	nop

c0012cec <CPU::detectFeatures()>:
c0012cec:	55                   	push   ebp
c0012ced:	57                   	push   edi
c0012cee:	56                   	push   esi
c0012cef:	53                   	push   ebx
c0012cf0:	83 ec 50             	sub    esp,0x50
c0012cf3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012cf7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012d01:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012d08:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012d0e:	6a 0d                	push   0xd
c0012d10:	6a 00                	push   0x0
c0012d12:	55                   	push   ebp
c0012d13:	e8 6c d9 fe ff       	call   c0000684 <memset>
c0012d18:	83 c4 10             	add    esp,0x10
c0012d1b:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0012d20:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012d27:	0f 84 22 09 00 00    	je     c001364f <CPU::detectFeatures()+0x963>
c0012d2d:	83 ec 0c             	sub    esp,0xc
c0012d30:	89 ef                	mov    edi,ebp
c0012d32:	6a 10                	push   0x10
c0012d34:	e8 6b fe ff ff       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0012d39:	83 e0 01             	and    eax,0x1
c0012d3c:	8d 14 00             	lea    edx,[eax+eax*1]
c0012d3f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012d45:	83 e0 fd             	and    eax,0xfffffffd
c0012d48:	09 d0                	or     eax,edx
c0012d4a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012d50:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012d57:	e8 48 fe ff ff       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0012d5c:	83 e0 01             	and    eax,0x1
c0012d5f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012d66:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012d6c:	83 e0 fb             	and    eax,0xfffffffb
c0012d6f:	09 d0                	or     eax,edx
c0012d71:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012d77:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012d7e:	e8 21 fe ff ff       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0012d83:	83 e0 01             	and    eax,0x1
c0012d86:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012d8d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012d93:	83 e0 f7             	and    eax,0xfffffff7
c0012d96:	09 d0                	or     eax,edx
c0012d98:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012d9e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012da5:	e8 fa fd ff ff       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0012daa:	83 e0 01             	and    eax,0x1
c0012dad:	c1 e0 04             	shl    eax,0x4
c0012db0:	88 c2                	mov    dl,al
c0012db2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012db8:	83 e0 ef             	and    eax,0xffffffef
c0012dbb:	09 d0                	or     eax,edx
c0012dbd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012dc3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012dca:	e8 d5 fd ff ff       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0012dcf:	83 e0 01             	and    eax,0x1
c0012dd2:	c1 e0 05             	shl    eax,0x5
c0012dd5:	88 c2                	mov    dl,al
c0012dd7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ddd:	83 e0 df             	and    eax,0xffffffdf
c0012de0:	09 d0                	or     eax,edx
c0012de2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012de8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012def:	e8 b0 fd ff ff       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0012df4:	83 e0 01             	and    eax,0x1
c0012df7:	8d 14 00             	lea    edx,[eax+eax*1]
c0012dfa:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012e00:	83 e0 fd             	and    eax,0xfffffffd
c0012e03:	09 d0                	or     eax,edx
c0012e05:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012e0b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012e12:	e8 8d fd ff ff       	call   c0012ba4 <CPU::cpuidCheckEDX(unsigned int)>
c0012e17:	83 e0 01             	and    eax,0x1
c0012e1a:	c1 e0 06             	shl    eax,0x6
c0012e1d:	88 c2                	mov    dl,al
c0012e1f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012e25:	83 e0 bf             	and    eax,0xffffffbf
c0012e28:	09 d0                	or     eax,edx
c0012e2a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012e30:	58                   	pop    eax
c0012e31:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e35:	50                   	push   eax
c0012e36:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e3a:	50                   	push   eax
c0012e3b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012e3f:	56                   	push   esi
c0012e40:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e44:	50                   	push   eax
c0012e45:	6a 00                	push   0x0
c0012e47:	e8 d4 fc ff ff       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012e4c:	b8 04 00 00 00       	mov    eax,0x4
c0012e51:	89 c1                	mov    ecx,eax
c0012e53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e55:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012e5b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012e5f:	89 c1                	mov    ecx,eax
c0012e61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e63:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012e69:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012e6d:	89 c1                	mov    ecx,eax
c0012e6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e71:	83 c4 18             	add    esp,0x18
c0012e74:	68 10 3b 02 c0       	push   0xc0023b10
c0012e79:	55                   	push   ebp
c0012e7a:	e8 4d d9 fe ff       	call   c00007cc <strcmp>
c0012e7f:	83 c4 10             	add    esp,0x10
c0012e82:	85 c0                	test   eax,eax
c0012e84:	75 0f                	jne    c0012e95 <CPU::detectFeatures()+0x1a9>
c0012e86:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012e90:	e9 22 02 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012e95:	50                   	push   eax
c0012e96:	50                   	push   eax
c0012e97:	68 1d 3b 02 c0       	push   0xc0023b1d
c0012e9c:	55                   	push   ebp
c0012e9d:	e8 2a d9 fe ff       	call   c00007cc <strcmp>
c0012ea2:	83 c4 10             	add    esp,0x10
c0012ea5:	85 c0                	test   eax,eax
c0012ea7:	74 dd                	je     c0012e86 <CPU::detectFeatures()+0x19a>
c0012ea9:	50                   	push   eax
c0012eaa:	50                   	push   eax
c0012eab:	68 2a 3b 02 c0       	push   0xc0023b2a
c0012eb0:	55                   	push   ebp
c0012eb1:	e8 16 d9 fe ff       	call   c00007cc <strcmp>
c0012eb6:	83 c4 10             	add    esp,0x10
c0012eb9:	85 c0                	test   eax,eax
c0012ebb:	74 2a                	je     c0012ee7 <CPU::detectFeatures()+0x1fb>
c0012ebd:	50                   	push   eax
c0012ebe:	50                   	push   eax
c0012ebf:	68 37 3b 02 c0       	push   0xc0023b37
c0012ec4:	55                   	push   ebp
c0012ec5:	e8 02 d9 fe ff       	call   c00007cc <strcmp>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	85 c0                	test   eax,eax
c0012ecf:	74 16                	je     c0012ee7 <CPU::detectFeatures()+0x1fb>
c0012ed1:	50                   	push   eax
c0012ed2:	50                   	push   eax
c0012ed3:	68 44 3b 02 c0       	push   0xc0023b44
c0012ed8:	55                   	push   ebp
c0012ed9:	e8 ee d8 fe ff       	call   c00007cc <strcmp>
c0012ede:	83 c4 10             	add    esp,0x10
c0012ee1:	85 c0                	test   eax,eax
c0012ee3:	74 48                	je     c0012f2d <CPU::detectFeatures()+0x241>
c0012ee5:	eb 0f                	jmp    c0012ef6 <CPU::detectFeatures()+0x20a>
c0012ee7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012ef1:	e9 c1 01 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012ef6:	50                   	push   eax
c0012ef7:	50                   	push   eax
c0012ef8:	68 51 3b 02 c0       	push   0xc0023b51
c0012efd:	55                   	push   ebp
c0012efe:	e8 c9 d8 fe ff       	call   c00007cc <strcmp>
c0012f03:	83 c4 10             	add    esp,0x10
c0012f06:	85 c0                	test   eax,eax
c0012f08:	74 23                	je     c0012f2d <CPU::detectFeatures()+0x241>
c0012f0a:	57                   	push   edi
c0012f0b:	57                   	push   edi
c0012f0c:	68 5e 3b 02 c0       	push   0xc0023b5e
c0012f11:	55                   	push   ebp
c0012f12:	e8 b5 d8 fe ff       	call   c00007cc <strcmp>
c0012f17:	83 c4 10             	add    esp,0x10
c0012f1a:	85 c0                	test   eax,eax
c0012f1c:	75 1e                	jne    c0012f3c <CPU::detectFeatures()+0x250>
c0012f1e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012f28:	e9 8a 01 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012f2d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012f37:	e9 7b 01 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012f3c:	56                   	push   esi
c0012f3d:	56                   	push   esi
c0012f3e:	68 6b 3b 02 c0       	push   0xc0023b6b
c0012f43:	55                   	push   ebp
c0012f44:	e8 83 d8 fe ff       	call   c00007cc <strcmp>
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	85 c0                	test   eax,eax
c0012f4e:	75 0f                	jne    c0012f5f <CPU::detectFeatures()+0x273>
c0012f50:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0012f5a:	e9 58 01 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012f5f:	51                   	push   ecx
c0012f60:	51                   	push   ecx
c0012f61:	68 2a 3b 02 c0       	push   0xc0023b2a
c0012f66:	55                   	push   ebp
c0012f67:	e8 60 d8 fe ff       	call   c00007cc <strcmp>
c0012f6c:	83 c4 10             	add    esp,0x10
c0012f6f:	85 c0                	test   eax,eax
c0012f71:	75 0f                	jne    c0012f82 <CPU::detectFeatures()+0x296>
c0012f73:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0012f7d:	e9 35 01 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012f82:	52                   	push   edx
c0012f83:	52                   	push   edx
c0012f84:	68 78 3b 02 c0       	push   0xc0023b78
c0012f89:	55                   	push   ebp
c0012f8a:	e8 3d d8 fe ff       	call   c00007cc <strcmp>
c0012f8f:	83 c4 10             	add    esp,0x10
c0012f92:	85 c0                	test   eax,eax
c0012f94:	75 0f                	jne    c0012fa5 <CPU::detectFeatures()+0x2b9>
c0012f96:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0012fa0:	e9 12 01 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012fa5:	50                   	push   eax
c0012fa6:	50                   	push   eax
c0012fa7:	68 85 3b 02 c0       	push   0xc0023b85
c0012fac:	55                   	push   ebp
c0012fad:	e8 1a d8 fe ff       	call   c00007cc <strcmp>
c0012fb2:	83 c4 10             	add    esp,0x10
c0012fb5:	85 c0                	test   eax,eax
c0012fb7:	75 0f                	jne    c0012fc8 <CPU::detectFeatures()+0x2dc>
c0012fb9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0012fc3:	e9 ef 00 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012fc8:	50                   	push   eax
c0012fc9:	50                   	push   eax
c0012fca:	68 92 3b 02 c0       	push   0xc0023b92
c0012fcf:	55                   	push   ebp
c0012fd0:	e8 f7 d7 fe ff       	call   c00007cc <strcmp>
c0012fd5:	83 c4 10             	add    esp,0x10
c0012fd8:	85 c0                	test   eax,eax
c0012fda:	75 0f                	jne    c0012feb <CPU::detectFeatures()+0x2ff>
c0012fdc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0012fe6:	e9 cc 00 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0012feb:	50                   	push   eax
c0012fec:	50                   	push   eax
c0012fed:	68 9f 3b 02 c0       	push   0xc0023b9f
c0012ff2:	55                   	push   ebp
c0012ff3:	e8 d4 d7 fe ff       	call   c00007cc <strcmp>
c0012ff8:	83 c4 10             	add    esp,0x10
c0012ffb:	85 c0                	test   eax,eax
c0012ffd:	75 0f                	jne    c001300e <CPU::detectFeatures()+0x322>
c0012fff:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013009:	e9 a9 00 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c001300e:	50                   	push   eax
c001300f:	50                   	push   eax
c0013010:	68 ac 3b 02 c0       	push   0xc0023bac
c0013015:	55                   	push   ebp
c0013016:	e8 b1 d7 fe ff       	call   c00007cc <strcmp>
c001301b:	83 c4 10             	add    esp,0x10
c001301e:	85 c0                	test   eax,eax
c0013020:	75 0f                	jne    c0013031 <CPU::detectFeatures()+0x345>
c0013022:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001302c:	e9 86 00 00 00       	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0013031:	50                   	push   eax
c0013032:	50                   	push   eax
c0013033:	68 b9 3b 02 c0       	push   0xc0023bb9
c0013038:	55                   	push   ebp
c0013039:	e8 8e d7 fe ff       	call   c00007cc <strcmp>
c001303e:	83 c4 10             	add    esp,0x10
c0013041:	85 c0                	test   eax,eax
c0013043:	75 0c                	jne    c0013051 <CPU::detectFeatures()+0x365>
c0013045:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001304f:	eb 66                	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0013051:	50                   	push   eax
c0013052:	50                   	push   eax
c0013053:	68 c6 3b 02 c0       	push   0xc0023bc6
c0013058:	55                   	push   ebp
c0013059:	e8 6e d7 fe ff       	call   c00007cc <strcmp>
c001305e:	83 c4 10             	add    esp,0x10
c0013061:	85 c0                	test   eax,eax
c0013063:	75 0c                	jne    c0013071 <CPU::detectFeatures()+0x385>
c0013065:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001306f:	eb 46                	jmp    c00130b7 <CPU::detectFeatures()+0x3cb>
c0013071:	57                   	push   edi
c0013072:	57                   	push   edi
c0013073:	68 d3 3b 02 c0       	push   0xc0023bd3
c0013078:	55                   	push   ebp
c0013079:	e8 4e d7 fe ff       	call   c00007cc <strcmp>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	85 c0                	test   eax,eax
c0013083:	74 e0                	je     c0013065 <CPU::detectFeatures()+0x379>
c0013085:	56                   	push   esi
c0013086:	56                   	push   esi
c0013087:	68 e0 3b 02 c0       	push   0xc0023be0
c001308c:	55                   	push   ebp
c001308d:	e8 3a d7 fe ff       	call   c00007cc <strcmp>
c0013092:	83 c4 10             	add    esp,0x10
c0013095:	85 c0                	test   eax,eax
c0013097:	74 cc                	je     c0013065 <CPU::detectFeatures()+0x379>
c0013099:	51                   	push   ecx
c001309a:	51                   	push   ecx
c001309b:	68 ed 3b 02 c0       	push   0xc0023bed
c00130a0:	55                   	push   ebp
c00130a1:	e8 26 d7 fe ff       	call   c00007cc <strcmp>
c00130a6:	83 c4 10             	add    esp,0x10
c00130a9:	85 c0                	test   eax,eax
c00130ab:	74 b8                	je     c0013065 <CPU::detectFeatures()+0x379>
c00130ad:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00130b7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00130bc:	0f 86 be 00 00 00    	jbe    c0013180 <CPU::detectFeatures()+0x494>
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	68 80 00 00 00       	push   0x80
c00130ca:	e8 31 fb ff ff       	call   c0012c00 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00130cf:	83 e0 01             	and    eax,0x1
c00130d2:	c1 e0 06             	shl    eax,0x6
c00130d5:	88 c2                	mov    dl,al
c00130d7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00130dd:	83 e0 bf             	and    eax,0xffffffbf
c00130e0:	09 d0                	or     eax,edx
c00130e2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00130e8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00130ef:	e8 0c fb ff ff       	call   c0012c00 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00130f4:	83 e0 01             	and    eax,0x1
c00130f7:	c1 e0 04             	shl    eax,0x4
c00130fa:	88 c2                	mov    dl,al
c00130fc:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013102:	83 e0 ef             	and    eax,0xffffffef
c0013105:	09 d0                	or     eax,edx
c0013107:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001310d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013114:	e8 e7 fa ff ff       	call   c0012c00 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013119:	c1 e0 07             	shl    eax,0x7
c001311c:	88 c2                	mov    dl,al
c001311e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013124:	83 e0 7f             	and    eax,0x7f
c0013127:	09 d0                	or     eax,edx
c0013129:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001312f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013136:	e8 f3 fa ff ff       	call   c0012c2e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001313b:	83 e0 01             	and    eax,0x1
c001313e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013145:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001314b:	83 e0 f7             	and    eax,0xfffffff7
c001314e:	09 d0                	or     eax,edx
c0013150:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013156:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001315d:	e8 cc fa ff ff       	call   c0012c2e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	83 e0 01             	and    eax,0x1
c0013168:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001316f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013175:	83 e0 fb             	and    eax,0xfffffffb
c0013178:	09 d0                	or     eax,edx
c001317a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013180:	83 ec 0c             	sub    esp,0xc
c0013183:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013187:	50                   	push   eax
c0013188:	8d 44 24 28          	lea    eax,[esp+0x28]
c001318c:	50                   	push   eax
c001318d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013191:	56                   	push   esi
c0013192:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013196:	50                   	push   eax
c0013197:	6a 01                	push   0x1
c0013199:	e8 82 f9 ff ff       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001319e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00131a2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00131a8:	88 ca                	mov    dl,cl
c00131aa:	83 e0 f0             	and    eax,0xfffffff0
c00131ad:	83 e2 0f             	and    edx,0xf
c00131b0:	09 d0                	or     eax,edx
c00131b2:	88 ca                	mov    dl,cl
c00131b4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00131ba:	c0 ea 04             	shr    dl,0x4
c00131bd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00131c1:	0f b6 c2             	movzx  eax,dl
c00131c4:	83 c4 20             	add    esp,0x20
c00131c7:	c1 e0 06             	shl    eax,0x6
c00131ca:	89 c7                	mov    edi,eax
c00131cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00131d2:	66 25 3f c0          	and    ax,0xc03f
c00131d6:	09 f8                	or     eax,edi
c00131d8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00131df:	89 c8                	mov    eax,ecx
c00131e1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00131e8:	c1 e8 08             	shr    eax,0x8
c00131eb:	83 e5 3f             	and    ebp,0x3f
c00131ee:	83 e0 0f             	and    eax,0xf
c00131f1:	89 c7                	mov    edi,eax
c00131f3:	c1 e7 06             	shl    edi,0x6
c00131f6:	09 ef                	or     edi,ebp
c00131f8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00131ff:	89 fa                	mov    edx,edi
c0013201:	83 e5 c0             	and    ebp,0xffffffc0
c0013204:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001320a:	88 c2                	mov    dl,al
c001320c:	c0 ea 02             	shr    dl,0x2
c001320f:	89 d7                	mov    edi,edx
c0013211:	09 ef                	or     edi,ebp
c0013213:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013219:	89 fa                	mov    edx,edi
c001321b:	83 e5 cf             	and    ebp,0xffffffcf
c001321e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013224:	89 cf                	mov    edi,ecx
c0013226:	c1 ef 0c             	shr    edi,0xc
c0013229:	83 e7 03             	and    edi,0x3
c001322c:	c1 e7 04             	shl    edi,0x4
c001322f:	09 ef                	or     edi,ebp
c0013231:	3c 06                	cmp    al,0x6
c0013233:	89 fa                	mov    edx,edi
c0013235:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001323b:	74 04                	je     c0013241 <CPU::detectFeatures()+0x555>
c001323d:	3c 0f                	cmp    al,0xf
c001323f:	75 5c                	jne    c001329d <CPU::detectFeatures()+0x5b1>
c0013241:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013245:	89 cf                	mov    edi,ecx
c0013247:	c1 ef 10             	shr    edi,0x10
c001324a:	c1 e7 04             	shl    edi,0x4
c001324d:	09 fa                	or     edx,edi
c001324f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013255:	0f b6 d2             	movzx  edx,dl
c0013258:	66 81 e7 3f c0       	and    di,0xc03f
c001325d:	c1 e2 06             	shl    edx,0x6
c0013260:	09 fa                	or     edx,edi
c0013262:	3c 0f                	cmp    al,0xf
c0013264:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001326b:	75 30                	jne    c001329d <CPU::detectFeatures()+0x5b1>
c001326d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013273:	c1 e9 14             	shr    ecx,0x14
c0013276:	83 e0 3f             	and    eax,0x3f
c0013279:	83 c1 0f             	add    ecx,0xf
c001327c:	88 ca                	mov    dl,cl
c001327e:	c0 e9 02             	shr    cl,0x2
c0013281:	c1 e2 06             	shl    edx,0x6
c0013284:	09 d0                	or     eax,edx
c0013286:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001328c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013292:	83 e0 c0             	and    eax,0xffffffc0
c0013295:	09 c1                	or     ecx,eax
c0013297:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001329d:	83 ec 0c             	sub    esp,0xc
c00132a0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00132a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132ab:	50                   	push   eax
c00132ac:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00132b0:	55                   	push   ebp
c00132b1:	56                   	push   esi
c00132b2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00132b6:	57                   	push   edi
c00132b7:	68 00 00 00 80       	push   0x80000000
c00132bc:	e8 5f f8 ff ff       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132c1:	83 c4 20             	add    esp,0x20
c00132c4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00132cc:	76 22                	jbe    c00132f0 <CPU::detectFeatures()+0x604>
c00132ce:	83 ec 0c             	sub    esp,0xc
c00132d1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132d5:	50                   	push   eax
c00132d6:	55                   	push   ebp
c00132d7:	56                   	push   esi
c00132d8:	57                   	push   edi
c00132d9:	68 01 00 00 80       	push   0x80000001
c00132de:	e8 3d f8 ff ff       	call   c0012b20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132e3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00132ed:	83 c4 20             	add    esp,0x20
c00132f0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00132f6:	83 f8 01             	cmp    eax,0x1
c00132f9:	75 6f                	jne    c001336a <CPU::detectFeatures()+0x67e>
c00132fb:	51                   	push   ecx
c00132fc:	51                   	push   ecx
c00132fd:	68 f9 3b 02 c0       	push   0xc0023bf9
c0013302:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013306:	56                   	push   esi
c0013307:	e8 34 d4 fe ff       	call   c0000740 <strcpy>
c001330c:	5f                   	pop    edi
c001330d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013313:	5d                   	pop    ebp
c0013314:	66 c1 e8 06          	shr    ax,0x6
c0013318:	0f b6 c0             	movzx  eax,al
c001331b:	50                   	push   eax
c001331c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013322:	c1 e8 0e             	shr    eax,0xe
c0013325:	0f b6 c0             	movzx  eax,al
c0013328:	50                   	push   eax
c0013329:	e8 9c f4 ff ff       	call   c00127ca <CPU::lookupIntelName(unsigned char, unsigned char)>
c001332e:	5a                   	pop    edx
c001332f:	59                   	pop    ecx
c0013330:	50                   	push   eax
c0013331:	56                   	push   esi
c0013332:	e8 49 d5 fe ff       	call   c0000880 <strcat>
c0013337:	5f                   	pop    edi
c0013338:	5d                   	pop    ebp
c0013339:	56                   	push   esi
c001333a:	53                   	push   ebx
c001333b:	e8 fa ac ff ff       	call   c000e03a <Device::setName(char const*)>
c0013340:	58                   	pop    eax
c0013341:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013347:	5a                   	pop    edx
c0013348:	68 00 3c 02 c0       	push   0xc0023c00
c001334d:	50                   	push   eax
c001334e:	e8 79 d4 fe ff       	call   c00007cc <strcmp>
c0013353:	83 c4 10             	add    esp,0x10
c0013356:	85 c0                	test   eax,eax
c0013358:	0f 85 71 03 00 00    	jne    c00136cf <CPU::detectFeatures()+0x9e3>
c001335e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013365:	e9 65 03 00 00       	jmp    c00136cf <CPU::detectFeatures()+0x9e3>
c001336a:	83 f8 02             	cmp    eax,0x2
c001336d:	0f 85 b5 00 00 00    	jne    c0013428 <CPU::detectFeatures()+0x73c>
c0013373:	57                   	push   edi
c0013374:	57                   	push   edi
c0013375:	68 12 3c 02 c0       	push   0xc0023c12
c001337a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001337e:	56                   	push   esi
c001337f:	e8 bc d3 fe ff       	call   c0000740 <strcpy>
c0013384:	5d                   	pop    ebp
c0013385:	58                   	pop    eax
c0013386:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001338c:	66 c1 e8 06          	shr    ax,0x6
c0013390:	0f b6 c0             	movzx  eax,al
c0013393:	50                   	push   eax
c0013394:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001339a:	c1 e8 0e             	shr    eax,0xe
c001339d:	0f b6 c0             	movzx  eax,al
c00133a0:	50                   	push   eax
c00133a1:	e8 90 f2 ff ff       	call   c0012636 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00133a6:	5a                   	pop    edx
c00133a7:	59                   	pop    ecx
c00133a8:	50                   	push   eax
c00133a9:	56                   	push   esi
c00133aa:	e8 d1 d4 fe ff       	call   c0000880 <strcat>
c00133af:	5f                   	pop    edi
c00133b0:	5d                   	pop    ebp
c00133b1:	56                   	push   esi
c00133b2:	53                   	push   ebx
c00133b3:	e8 82 ac ff ff       	call   c000e03a <Device::setName(char const*)>
c00133b8:	58                   	pop    eax
c00133b9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00133bf:	5a                   	pop    edx
c00133c0:	68 17 3c 02 c0       	push   0xc0023c17
c00133c5:	50                   	push   eax
c00133c6:	e8 01 d4 fe ff       	call   c00007cc <strcmp>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	85 c0                	test   eax,eax
c00133d0:	75 20                	jne    c00133f2 <CPU::detectFeatures()+0x706>
c00133d2:	8b 15 68 60 02 c0    	mov    edx,DWORD PTR ds:0xc0026068
c00133d8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00133de:	a8 01                	test   al,0x1
c00133e0:	74 10                	je     c00133f2 <CPU::detectFeatures()+0x706>
c00133e2:	83 e0 fe             	and    eax,0xfffffffe
c00133e5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00133eb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00133f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133f8:	c1 e8 0e             	shr    eax,0xe
c00133fb:	3c 05                	cmp    al,0x5
c00133fd:	0f 85 cc 02 00 00    	jne    c00136cf <CPU::detectFeatures()+0x9e3>
c0013403:	56                   	push   esi
c0013404:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001340a:	83 e0 0f             	and    eax,0xf
c001340d:	50                   	push   eax
c001340e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013414:	66 c1 e8 06          	shr    ax,0x6
c0013418:	0f b6 c0             	movzx  eax,al
c001341b:	50                   	push   eax
c001341c:	6a 05                	push   0x5
c001341e:	e8 89 f6 ff ff       	call   c0012aac <CPU::AMD_K6_writeback(int, int, int)>
c0013423:	e9 1f 02 00 00       	jmp    c0013647 <CPU::detectFeatures()+0x95b>
c0013428:	8d 50 fd             	lea    edx,[eax-0x3]
c001342b:	83 fa 01             	cmp    edx,0x1
c001342e:	76 09                	jbe    c0013439 <CPU::detectFeatures()+0x74d>
c0013430:	83 f8 06             	cmp    eax,0x6
c0013433:	0f 85 91 01 00 00    	jne    c00135ca <CPU::detectFeatures()+0x8de>
c0013439:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001343f:	c1 ea 0e             	shr    edx,0xe
c0013442:	80 fa 05             	cmp    dl,0x5
c0013445:	75 7b                	jne    c00134c2 <CPU::detectFeatures()+0x7d6>
c0013447:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001344d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013452:	66 81 fa 00 01       	cmp    dx,0x100
c0013457:	75 0c                	jne    c0013465 <CPU::detectFeatures()+0x779>
c0013459:	51                   	push   ecx
c001345a:	51                   	push   ecx
c001345b:	68 1e 3c 02 c0       	push   0xc0023c1e
c0013460:	e9 dc 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c0013465:	66 81 fa 00 02       	cmp    dx,0x200
c001346a:	75 0c                	jne    c0013478 <CPU::detectFeatures()+0x78c>
c001346c:	52                   	push   edx
c001346d:	52                   	push   edx
c001346e:	68 31 3c 02 c0       	push   0xc0023c31
c0013473:	e9 c9 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c0013478:	66 81 fa 40 02       	cmp    dx,0x240
c001347d:	75 0c                	jne    c001348b <CPU::detectFeatures()+0x79f>
c001347f:	50                   	push   eax
c0013480:	50                   	push   eax
c0013481:	68 43 3c 02 c0       	push   0xc0023c43
c0013486:	e9 b6 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c001348b:	83 f8 06             	cmp    eax,0x6
c001348e:	75 0c                	jne    c001349c <CPU::detectFeatures()+0x7b0>
c0013490:	50                   	push   eax
c0013491:	50                   	push   eax
c0013492:	68 55 3c 02 c0       	push   0xc0023c55
c0013497:	e9 a5 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c001349c:	83 f8 04             	cmp    eax,0x4
c001349f:	75 0c                	jne    c00134ad <CPU::detectFeatures()+0x7c1>
c00134a1:	50                   	push   eax
c00134a2:	50                   	push   eax
c00134a3:	68 61 3c 02 c0       	push   0xc0023c61
c00134a8:	e9 94 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c00134ad:	83 f8 03             	cmp    eax,0x3
c00134b0:	0f 85 19 02 00 00    	jne    c00136cf <CPU::detectFeatures()+0x9e3>
c00134b6:	50                   	push   eax
c00134b7:	50                   	push   eax
c00134b8:	68 69 3c 02 c0       	push   0xc0023c69
c00134bd:	e9 7f 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c00134c2:	80 fa 06             	cmp    dl,0x6
c00134c5:	0f 85 db 00 00 00    	jne    c00135a6 <CPU::detectFeatures()+0x8ba>
c00134cb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00134d1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00134d6:	66 81 fa 80 01       	cmp    dx,0x180
c00134db:	75 0c                	jne    c00134e9 <CPU::detectFeatures()+0x7fd>
c00134dd:	50                   	push   eax
c00134de:	50                   	push   eax
c00134df:	68 74 3c 02 c0       	push   0xc0023c74
c00134e4:	e9 58 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c00134e9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00134ef:	66 f7 c1 80 ff       	test   cx,0xff80
c00134f4:	75 0c                	jne    c0013502 <CPU::detectFeatures()+0x816>
c00134f6:	50                   	push   eax
c00134f7:	50                   	push   eax
c00134f8:	68 84 3c 02 c0       	push   0xc0023c84
c00134fd:	e9 3f 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c0013502:	66 81 fa 40 02       	cmp    dx,0x240
c0013507:	75 0c                	jne    c0013515 <CPU::detectFeatures()+0x829>
c0013509:	55                   	push   ebp
c001350a:	55                   	push   ebp
c001350b:	68 8b 3c 02 c0       	push   0xc0023c8b
c0013510:	e9 2c 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c0013515:	66 81 fa 80 02       	cmp    dx,0x280
c001351a:	75 0c                	jne    c0013528 <CPU::detectFeatures()+0x83c>
c001351c:	57                   	push   edi
c001351d:	57                   	push   edi
c001351e:	68 94 3c 02 c0       	push   0xc0023c94
c0013523:	e9 19 01 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c0013528:	66 81 fa 40 03       	cmp    dx,0x340
c001352d:	74 ed                	je     c001351c <CPU::detectFeatures()+0x830>
c001352f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013534:	75 0c                	jne    c0013542 <CPU::detectFeatures()+0x856>
c0013536:	56                   	push   esi
c0013537:	56                   	push   esi
c0013538:	68 9b 3c 02 c0       	push   0xc0023c9b
c001353d:	e9 ff 00 00 00       	jmp    c0013641 <CPU::detectFeatures()+0x955>
c0013542:	83 f8 06             	cmp    eax,0x6
c0013545:	0f 84 45 ff ff ff    	je     c0013490 <CPU::detectFeatures()+0x7a4>
c001354b:	83 f8 04             	cmp    eax,0x4
c001354e:	0f 84 4d ff ff ff    	je     c00134a1 <CPU::detectFeatures()+0x7b5>
c0013554:	83 f8 03             	cmp    eax,0x3
c0013557:	0f 85 72 01 00 00    	jne    c00136cf <CPU::detectFeatures()+0x9e3>
c001355d:	51                   	push   ecx
c001355e:	51                   	push   ecx
c001355f:	68 a4 3c 02 c0       	push   0xc0023ca4
c0013564:	53                   	push   ebx
c0013565:	e8 d0 aa ff ff       	call   c000e03a <Device::setName(char const*)>
c001356a:	b1 c1                	mov    cl,0xc1
c001356c:	88 c8                	mov    al,cl
c001356e:	e6 22                	out    0x22,al
c0013570:	e4 23                	in     al,0x23
c0013572:	88 c2                	mov    dl,al
c0013574:	88 c8                	mov    al,cl
c0013576:	e6 22                	out    0x22,al
c0013578:	88 d0                	mov    al,dl
c001357a:	83 c8 10             	or     eax,0x10
c001357d:	e6 23                	out    0x23,al
c001357f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013586:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013589:	89 d0                	mov    eax,edx
c001358b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013591:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013595:	40                   	inc    eax
c0013596:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001359c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00135a1:	e9 a1 00 00 00       	jmp    c0013647 <CPU::detectFeatures()+0x95b>
c00135a6:	83 f8 06             	cmp    eax,0x6
c00135a9:	0f 84 e1 fe ff ff    	je     c0013490 <CPU::detectFeatures()+0x7a4>
c00135af:	83 f8 04             	cmp    eax,0x4
c00135b2:	0f 84 e9 fe ff ff    	je     c00134a1 <CPU::detectFeatures()+0x7b5>
c00135b8:	83 f8 03             	cmp    eax,0x3
c00135bb:	0f 85 0e 01 00 00    	jne    c00136cf <CPU::detectFeatures()+0x9e3>
c00135c1:	52                   	push   edx
c00135c2:	52                   	push   edx
c00135c3:	68 af 3c 02 c0       	push   0xc0023caf
c00135c8:	eb 77                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c00135ca:	83 f8 07             	cmp    eax,0x7
c00135cd:	75 09                	jne    c00135d8 <CPU::detectFeatures()+0x8ec>
c00135cf:	50                   	push   eax
c00135d0:	50                   	push   eax
c00135d1:	68 b9 3c 02 c0       	push   0xc0023cb9
c00135d6:	eb 69                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c00135d8:	83 f8 0a             	cmp    eax,0xa
c00135db:	75 09                	jne    c00135e6 <CPU::detectFeatures()+0x8fa>
c00135dd:	50                   	push   eax
c00135de:	50                   	push   eax
c00135df:	68 c4 3c 02 c0       	push   0xc0023cc4
c00135e4:	eb 5b                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c00135e6:	83 f8 0b             	cmp    eax,0xb
c00135e9:	75 09                	jne    c00135f4 <CPU::detectFeatures()+0x908>
c00135eb:	50                   	push   eax
c00135ec:	50                   	push   eax
c00135ed:	68 cc 3c 02 c0       	push   0xc0023ccc
c00135f2:	eb 4d                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c00135f4:	83 f8 08             	cmp    eax,0x8
c00135f7:	75 09                	jne    c0013602 <CPU::detectFeatures()+0x916>
c00135f9:	50                   	push   eax
c00135fa:	50                   	push   eax
c00135fb:	68 d5 3c 02 c0       	push   0xc0023cd5
c0013600:	eb 3f                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c0013602:	83 f8 09             	cmp    eax,0x9
c0013605:	75 09                	jne    c0013610 <CPU::detectFeatures()+0x924>
c0013607:	50                   	push   eax
c0013608:	50                   	push   eax
c0013609:	68 dd 3c 02 c0       	push   0xc0023cdd
c001360e:	eb 31                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c0013610:	83 f8 05             	cmp    eax,0x5
c0013613:	75 09                	jne    c001361e <CPU::detectFeatures()+0x932>
c0013615:	50                   	push   eax
c0013616:	50                   	push   eax
c0013617:	68 e5 3c 02 c0       	push   0xc0023ce5
c001361c:	eb 23                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c001361e:	83 f8 0c             	cmp    eax,0xc
c0013621:	75 09                	jne    c001362c <CPU::detectFeatures()+0x940>
c0013623:	55                   	push   ebp
c0013624:	55                   	push   ebp
c0013625:	68 f3 3c 02 c0       	push   0xc0023cf3
c001362a:	eb 15                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c001362c:	83 f8 0d             	cmp    eax,0xd
c001362f:	75 09                	jne    c001363a <CPU::detectFeatures()+0x94e>
c0013631:	57                   	push   edi
c0013632:	57                   	push   edi
c0013633:	68 fe 3c 02 c0       	push   0xc0023cfe
c0013638:	eb 07                	jmp    c0013641 <CPU::detectFeatures()+0x955>
c001363a:	56                   	push   esi
c001363b:	56                   	push   esi
c001363c:	68 12 3d 02 c0       	push   0xc0023d12
c0013641:	53                   	push   ebx
c0013642:	e8 f3 a9 ff ff       	call   c000e03a <Device::setName(char const*)>
c0013647:	83 c4 10             	add    esp,0x10
c001364a:	e9 80 00 00 00       	jmp    c00136cf <CPU::detectFeatures()+0x9e3>
c001364f:	51                   	push   ecx
c0013650:	51                   	push   ecx
c0013651:	68 5e 3b 02 c0       	push   0xc0023b5e
c0013656:	55                   	push   ebp
c0013657:	e8 e4 d0 fe ff       	call   c0000740 <strcpy>
c001365c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013666:	e8 78 cb fe ff       	call   c00001e3 <is486>
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	85 c0                	test   eax,eax
c0013670:	74 2b                	je     c001369d <CPU::detectFeatures()+0x9b1>
c0013672:	52                   	push   edx
c0013673:	52                   	push   edx
c0013674:	68 1e 3d 02 c0       	push   0xc0023d1e
c0013679:	53                   	push   ebx
c001367a:	e8 bb a9 ff ff       	call   c000e03a <Device::setName(char const*)>
c001367f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013686:	0f 20 c0             	mov    eax,cr0
c0013689:	83 e0 14             	and    eax,0x14
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	83 f8 04             	cmp    eax,0x4
c0013692:	75 1f                	jne    c00136b3 <CPU::detectFeatures()+0x9c7>
c0013694:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001369b:	eb 32                	jmp    c00136cf <CPU::detectFeatures()+0x9e3>
c001369d:	50                   	push   eax
c001369e:	50                   	push   eax
c001369f:	68 29 3d 02 c0       	push   0xc0023d29
c00136a4:	53                   	push   ebx
c00136a5:	e8 90 a9 ff ff       	call   c000e03a <Device::setName(char const*)>
c00136aa:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00136b1:	eb d3                	jmp    c0013686 <CPU::detectFeatures()+0x99a>
c00136b3:	e8 06 cb fe ff       	call   c00001be <hasLegacyFPU>
c00136b8:	83 e0 01             	and    eax,0x1
c00136bb:	8d 14 00             	lea    edx,[eax+eax*1]
c00136be:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00136c4:	83 e0 fd             	and    eax,0xfffffffd
c00136c7:	09 d0                	or     eax,edx
c00136c9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00136cf:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00136d6:	83 c4 4c             	add    esp,0x4c
c00136d9:	5b                   	pop    ebx
c00136da:	5e                   	pop    esi
c00136db:	5f                   	pop    edi
c00136dc:	5d                   	pop    ebp
c00136dd:	c3                   	ret    

c00136de <CPU::setupSMEP()>:
c00136de:	0f 20 e0             	mov    eax,cr4
c00136e1:	0d 00 00 10 00       	or     eax,0x100000
c00136e6:	0f 22 e0             	mov    cr4,eax
c00136e9:	c3                   	ret    

c00136ea <CPU::setupUMIP()>:
c00136ea:	0f 20 e0             	mov    eax,cr4
c00136ed:	80 cc 08             	or     ah,0x8
c00136f0:	0f 22 e0             	mov    cr4,eax
c00136f3:	c3                   	ret    

c00136f4 <CPU::setupTSC()>:
c00136f4:	0f 20 e0             	mov    eax,cr4
c00136f7:	83 c8 04             	or     eax,0x4
c00136fa:	0f 22 e0             	mov    cr4,eax
c00136fd:	c3                   	ret    

c00136fe <CPU::setupLargePages()>:
c00136fe:	0f 20 e0             	mov    eax,cr4
c0013701:	83 c8 10             	or     eax,0x10
c0013704:	0f 22 e0             	mov    cr4,eax
c0013707:	c3                   	ret    

c0013708 <CPU::setupPAT()>:
c0013708:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001370d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013714:	74 2c                	je     c0013742 <CPU::setupPAT()+0x3a>
c0013716:	53                   	push   ebx
c0013717:	83 ec 10             	sub    esp,0x10
c001371a:	68 77 02 00 00       	push   0x277
c001371f:	50                   	push   eax
c0013720:	e8 e3 57 ff ff       	call   c0008f08 <Computer::rdmsr(unsigned int)>
c0013725:	83 e2 f8             	and    edx,0xfffffff8
c0013728:	83 ca 01             	or     edx,0x1
c001372b:	52                   	push   edx
c001372c:	50                   	push   eax
c001372d:	68 77 02 00 00       	push   0x277
c0013732:	ff 35 68 60 02 c0    	push   DWORD PTR ds:0xc0026068
c0013738:	e8 f7 57 ff ff       	call   c0008f34 <Computer::wrmsr(unsigned int, unsigned long long)>
c001373d:	83 c4 28             	add    esp,0x28
c0013740:	5b                   	pop    ebx
c0013741:	c3                   	ret    
c0013742:	c3                   	ret    
c0013743:	90                   	nop

c0013744 <CPU::setupMTRR()>:
c0013744:	c3                   	ret    
c0013745:	90                   	nop

c0013746 <CPU::setupGlobalPages()>:
c0013746:	0f 20 e0             	mov    eax,cr4
c0013749:	0c 80                	or     al,0x80
c001374b:	0f 22 e0             	mov    cr4,eax
c001374e:	c3                   	ret    
c001374f:	90                   	nop

c0013750 <CPU::allowUsermodeDataAccess()>:
c0013750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013754:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001375b:	74 03                	je     c0013760 <CPU::allowUsermodeDataAccess()+0x10>
c001375d:	0f 01 cb             	stac   
c0013760:	c3                   	ret    
c0013761:	90                   	nop

c0013762 <CPU::prohibitUsermodeDataAccess()>:
c0013762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013766:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001376d:	74 03                	je     c0013772 <CPU::prohibitUsermodeDataAccess()+0x10>
c001376f:	0f 01 ca             	clac   
c0013772:	c3                   	ret    
c0013773:	90                   	nop

c0013774 <CPU::setupSMAP()>:
c0013774:	0f 20 e0             	mov    eax,cr4
c0013777:	0d 00 00 20 00       	or     eax,0x200000
c001377c:	0f 22 e0             	mov    cr4,eax
c001377f:	eb e1                	jmp    c0013762 <CPU::prohibitUsermodeDataAccess()>
c0013781:	90                   	nop

c0013782 <CPU::setupFeatures()>:
c0013782:	83 ec 0c             	sub    esp,0xc
c0013785:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013789:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0013790:	74 07                	je     c0013799 <CPU::setupFeatures()+0x17>
c0013792:	52                   	push   edx
c0013793:	e8 46 ff ff ff       	call   c00136de <CPU::setupSMEP()>
c0013798:	58                   	pop    eax
c0013799:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00137a0:	74 07                	je     c00137a9 <CPU::setupFeatures()+0x27>
c00137a2:	52                   	push   edx
c00137a3:	e8 cc ff ff ff       	call   c0013774 <CPU::setupSMAP()>
c00137a8:	58                   	pop    eax
c00137a9:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00137b0:	74 07                	je     c00137b9 <CPU::setupFeatures()+0x37>
c00137b2:	52                   	push   edx
c00137b3:	e8 32 ff ff ff       	call   c00136ea <CPU::setupUMIP()>
c00137b8:	58                   	pop    eax
c00137b9:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00137c0:	74 07                	je     c00137c9 <CPU::setupFeatures()+0x47>
c00137c2:	52                   	push   edx
c00137c3:	e8 2c ff ff ff       	call   c00136f4 <CPU::setupTSC()>
c00137c8:	58                   	pop    eax
c00137c9:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00137d0:	74 07                	je     c00137d9 <CPU::setupFeatures()+0x57>
c00137d2:	52                   	push   edx
c00137d3:	e8 26 ff ff ff       	call   c00136fe <CPU::setupLargePages()>
c00137d8:	59                   	pop    ecx
c00137d9:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00137e0:	74 07                	je     c00137e9 <CPU::setupFeatures()+0x67>
c00137e2:	52                   	push   edx
c00137e3:	e8 5e ff ff ff       	call   c0013746 <CPU::setupGlobalPages()>
c00137e8:	58                   	pop    eax
c00137e9:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00137f0:	74 0c                	je     c00137fe <CPU::setupFeatures()+0x7c>
c00137f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00137f6:	83 c4 0c             	add    esp,0xc
c00137f9:	e9 0a ff ff ff       	jmp    c0013708 <CPU::setupPAT()>
c00137fe:	83 c4 0c             	add    esp,0xc
c0013801:	c3                   	ret    

c0013802 <CPU::open(int, int, void*)>:
c0013802:	57                   	push   edi
c0013803:	56                   	push   esi
c0013804:	53                   	push   ebx
c0013805:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013809:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001380d:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013813:	83 ec 0c             	sub    esp,0xc
c0013816:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001381c:	68 34 3d 02 c0       	push   0xc0023d34
c0013821:	e8 d7 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0013826:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001382c:	89 04 24             	mov    DWORD PTR [esp],eax
c001382f:	e8 6c 5a ff ff       	call   c00092a0 <GDT::setup()>
c0013834:	c7 04 24 46 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d46
c001383b:	e8 bd 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0013840:	83 c4 0c             	add    esp,0xc
c0013843:	6a 00                	push   0x0
c0013845:	68 ef be ad de       	push   0xdeadbeef
c001384a:	57                   	push   edi
c001384b:	e8 60 77 ff ff       	call   c000afb0 <TSS::setup(unsigned long, unsigned long)>
c0013850:	c7 04 24 58 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d58
c0013857:	e8 a1 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c001385c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001385f:	e8 2c 77 ff ff       	call   c000af90 <TSS::flush()>
c0013864:	c7 04 24 6c 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d6c
c001386b:	e8 8d 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0013870:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013876:	89 04 24             	mov    DWORD PTR [esp],eax
c0013879:	e8 88 5c ff ff       	call   c0009506 <IDT::setup()>
c001387e:	c7 04 24 7e 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d7e
c0013885:	e8 73 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c001388a:	b8 00 04 00 00       	mov    eax,0x400
c001388f:	0f 23 f8             	mov    db7,eax
c0013892:	c7 04 24 9c 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d9c
c0013899:	e8 5f 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c001389e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00138a8:	e8 f2 64 ff ff       	call   c0009d9f <Phys::allocatePage()>
c00138ad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00138b3:	89 30                	mov    DWORD PTR [eax],esi
c00138b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00138bb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00138be:	c7 04 24 be 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dbe
c00138c5:	e8 33 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00138ca:	58                   	pop    eax
c00138cb:	5a                   	pop    edx
c00138cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00138d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00138d6:	e8 cf 86 ff ff       	call   c000bfaa <VAS::setCPUSpecific(unsigned long)>
c00138db:	c7 04 24 e6 3d 02 c0 	mov    DWORD PTR [esp],0xc0023de6
c00138e2:	e8 16 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00138e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138ea:	e8 fd f3 ff ff       	call   c0012cec <CPU::detectFeatures()>
c00138ef:	c7 04 24 09 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e09
c00138f6:	e8 02 61 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c00138fb:	e8 3e b9 ff ff       	call   c000f23e <setupInterruptController()>
c0013900:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013906:	c7 04 24 2d 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e2d
c001390d:	e8 eb 60 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0013912:	a1 80 60 02 c0       	mov    eax,ds:0xc0026080
c0013917:	83 e0 10             	and    eax,0x10
c001391a:	83 f8 01             	cmp    eax,0x1
c001391d:	19 c0                	sbb    eax,eax
c001391f:	83 e0 46             	and    eax,0x46
c0013922:	83 c0 1e             	add    eax,0x1e
c0013925:	89 04 24             	mov    DWORD PTR [esp],eax
c0013928:	e8 e5 ce ff ff       	call   c0010812 <setupTimer(int)>
c001392d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013933:	c7 04 24 48 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e48
c001393a:	e8 be 60 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c001393f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013942:	e8 3b fe ff ff       	call   c0013782 <CPU::setupFeatures()>
c0013947:	c7 04 24 63 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e63
c001394e:	e8 aa 60 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c0013953:	83 c4 10             	add    esp,0x10
c0013956:	31 c0                	xor    eax,eax
c0013958:	5b                   	pop    ebx
c0013959:	5e                   	pop    esi
c001395a:	5f                   	pop    edi
c001395b:	c3                   	ret    

c001395c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001395c:	57                   	push   edi
c001395d:	56                   	push   esi
c001395e:	53                   	push   ebx
c001395f:	51                   	push   ecx
c0013960:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013964:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013967:	0f 02 c0             	lar    eax,ax
c001396a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001396d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013971:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013974:	88 ca                	mov    dl,cl
c0013976:	c0 ea 06             	shr    dl,0x6
c0013979:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001397d:	89 ca                	mov    edx,ecx
c001397f:	66 c1 ea 03          	shr    dx,0x3
c0013983:	83 e2 07             	and    edx,0x7
c0013986:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001398b:	88 17                	mov    BYTE PTR [edi],dl
c001398d:	0f 84 a6 01 00 00    	je     c0013b39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013993:	83 e1 07             	and    ecx,0x7
c0013996:	80 f9 04             	cmp    cl,0x4
c0013999:	0f 84 98 00 00 00    	je     c0013a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001399f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00139a4:	0f 95 c0             	setne  al
c00139a7:	80 f9 05             	cmp    cl,0x5
c00139aa:	0f 95 c2             	setne  dl
c00139ad:	08 c2                	or     dl,al
c00139af:	74 79                	je     c0013a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00139b1:	84 c9                	test   cl,cl
c00139b3:	75 05                	jne    c00139ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00139b5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00139b8:	eb 3c                	jmp    c00139f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00139ba:	80 f9 01             	cmp    cl,0x1
c00139bd:	75 05                	jne    c00139c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00139bf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00139c2:	eb 32                	jmp    c00139f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00139c4:	80 f9 02             	cmp    cl,0x2
c00139c7:	75 05                	jne    c00139ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00139c9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00139cc:	eb 28                	jmp    c00139f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00139ce:	31 c0                	xor    eax,eax
c00139d0:	80 f9 03             	cmp    cl,0x3
c00139d3:	75 05                	jne    c00139da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00139d5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00139d8:	eb 1c                	jmp    c00139f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00139da:	80 f9 05             	cmp    cl,0x5
c00139dd:	75 05                	jne    c00139e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00139df:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00139e2:	eb 12                	jmp    c00139f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00139e4:	80 f9 06             	cmp    cl,0x6
c00139e7:	75 05                	jne    c00139ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00139e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00139ec:	eb 08                	jmp    c00139f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00139ee:	80 f9 07             	cmp    cl,0x7
c00139f1:	75 03                	jne    c00139f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00139f3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00139f6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00139fb:	75 10                	jne    c0013a0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00139fd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013a01:	b9 03 00 00 00       	mov    ecx,0x3
c0013a06:	01 d0                	add    eax,edx
c0013a08:	e9 37 01 00 00       	jmp    c0013b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013a0d:	b9 02 00 00 00       	mov    ecx,0x2
c0013a12:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013a17:	0f 85 27 01 00 00    	jne    c0013b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013a1d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013a20:	b9 06 00 00 00       	mov    ecx,0x6
c0013a25:	e9 1a 01 00 00       	jmp    c0013b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013a2a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013a2d:	b9 06 00 00 00       	mov    ecx,0x6
c0013a32:	e9 0f 01 00 00       	jmp    c0013b46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013a37:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013a3a:	88 ca                	mov    dl,cl
c0013a3c:	c0 ea 06             	shr    dl,0x6
c0013a3f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013a43:	89 ca                	mov    edx,ecx
c0013a45:	66 c1 ea 03          	shr    dx,0x3
c0013a49:	83 e2 07             	and    edx,0x7
c0013a4c:	80 e1 07             	and    cl,0x7
c0013a4f:	75 05                	jne    c0013a56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013a51:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013a54:	eb 4c                	jmp    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013a56:	80 f9 01             	cmp    cl,0x1
c0013a59:	75 05                	jne    c0013a60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013a5b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013a5e:	eb 42                	jmp    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013a60:	80 f9 02             	cmp    cl,0x2
c0013a63:	75 05                	jne    c0013a6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013a65:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013a68:	eb 38                	jmp    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013a6a:	80 f9 03             	cmp    cl,0x3
c0013a6d:	75 05                	jne    c0013a74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013a6f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013a72:	eb 2e                	jmp    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013a74:	80 f9 04             	cmp    cl,0x4
c0013a77:	75 12                	jne    c0013a8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013a79:	f6 c4 60             	test   ah,0x60
c0013a7c:	75 08                	jne    c0013a86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013a7e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013a81:	8d 78 14             	lea    edi,[eax+0x14]
c0013a84:	eb 1c                	jmp    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013a86:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013a89:	eb 17                	jmp    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013a8b:	80 f9 05             	cmp    cl,0x5
c0013a8e:	75 05                	jne    c0013a95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013a90:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013a93:	eb 0d                	jmp    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013a95:	80 f9 06             	cmp    cl,0x6
c0013a98:	75 05                	jne    c0013a9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013a9a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013a9d:	eb 03                	jmp    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013a9f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013aa2:	84 d2                	test   dl,dl
c0013aa4:	75 05                	jne    c0013aab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013aa6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013aa9:	eb 3c                	jmp    c0013ae7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013aab:	80 fa 01             	cmp    dl,0x1
c0013aae:	75 05                	jne    c0013ab5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013ab0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013ab3:	eb 32                	jmp    c0013ae7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ab5:	80 fa 02             	cmp    dl,0x2
c0013ab8:	75 05                	jne    c0013abf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013aba:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013abd:	eb 28                	jmp    c0013ae7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013abf:	80 fa 03             	cmp    dl,0x3
c0013ac2:	75 05                	jne    c0013ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013ac4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013ac7:	eb 1e                	jmp    c0013ae7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ac9:	31 c0                	xor    eax,eax
c0013acb:	80 fa 04             	cmp    dl,0x4
c0013ace:	74 17                	je     c0013ae7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ad0:	80 fa 05             	cmp    dl,0x5
c0013ad3:	75 05                	jne    c0013ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013ad5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013ad8:	eb 0d                	jmp    c0013ae7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ada:	80 fa 06             	cmp    dl,0x6
c0013add:	75 05                	jne    c0013ae4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013adf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ae2:	eb 03                	jmp    c0013ae7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ae4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013ae7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013aec:	0f 94 c2             	sete   dl
c0013aef:	80 f9 05             	cmp    cl,0x5
c0013af2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013af6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013afb:	d3 e0                	shl    eax,cl
c0013afd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013b01:	74 0a                	je     c0013b0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013b03:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013b06:	b9 07 00 00 00       	mov    ecx,0x7
c0013b0b:	eb 37                	jmp    c0013b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b0d:	01 f8                	add    eax,edi
c0013b0f:	b9 03 00 00 00       	mov    ecx,0x3
c0013b14:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013b19:	74 2b                	je     c0013b46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b1b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013b20:	75 0d                	jne    c0013b2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013b22:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013b26:	01 c8                	add    eax,ecx
c0013b28:	b9 04 00 00 00       	mov    ecx,0x4
c0013b2d:	eb 17                	jmp    c0013b46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b2f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013b32:	b9 07 00 00 00       	mov    ecx,0x7
c0013b37:	eb 0d                	jmp    c0013b46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b39:	b9 02 00 00 00       	mov    ecx,0x2
c0013b3e:	b2 01                	mov    dl,0x1
c0013b40:	31 c0                	xor    eax,eax
c0013b42:	eb 02                	jmp    c0013b46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b44:	31 d2                	xor    edx,edx
c0013b46:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b4a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013b4c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013b50:	88 11                	mov    BYTE PTR [ecx],dl
c0013b52:	5a                   	pop    edx
c0013b53:	5b                   	pop    ebx
c0013b54:	5e                   	pop    esi
c0013b55:	5f                   	pop    edi
c0013b56:	c3                   	ret    

c0013b57 <Krnl::smpEntry()>:
c0013b57:	eb fe                	jmp    c0013b57 <Krnl::smpEntry()>

c0013b59 <Krnl::startCPU(int)>:
c0013b59:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0013b5e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013b65:	0f 84 36 01 00 00    	je     c0013ca1 <Krnl::startCPU(int)+0x148>
c0013b6b:	53                   	push   ebx
c0013b6c:	83 ec 10             	sub    esp,0x10
c0013b6f:	fa                   	cli    
c0013b70:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0013b76:	6a 1b                	push   0x1b
c0013b78:	ff 35 68 60 02 c0    	push   DWORD PTR ds:0xc0026068
c0013b7e:	e8 85 53 ff ff       	call   c0008f08 <Computer::rdmsr(unsigned int)>
c0013b83:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b88:	89 c3                	mov    ebx,eax
c0013b8a:	58                   	pop    eax
c0013b8b:	5a                   	pop    edx
c0013b8c:	53                   	push   ebx
c0013b8d:	68 ac 3e 02 c0       	push   0xc0023eac
c0013b92:	e8 6d 8e ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0013b97:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013ba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ba5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013baf:	c1 e0 18             	shl    eax,0x18
c0013bb2:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013bb8:	83 c4 10             	add    esp,0x10
c0013bbb:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013bc1:	09 c2                	or     edx,eax
c0013bc3:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013bc9:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013bcf:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013bd5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013bdb:	80 cd c5             	or     ch,0xc5
c0013bde:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013be4:	f3 90                	pause  
c0013be6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013be8:	0f ba e1 0c          	bt     ecx,0xc
c0013bec:	72 f6                	jb     c0013be4 <Krnl::startCPU(int)+0x8b>
c0013bee:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013bf4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013bfa:	09 c1                	or     ecx,eax
c0013bfc:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013c02:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013c08:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013c0e:	80 cd 85             	or     ch,0x85
c0013c11:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013c17:	f3 90                	pause  
c0013c19:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013c1b:	0f ba e1 0c          	bt     ecx,0xc
c0013c1f:	72 f6                	jb     c0013c17 <Krnl::startCPU(int)+0xbe>
c0013c21:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c2b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013c31:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013c37:	09 c1                	or     ecx,eax
c0013c39:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013c3f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013c45:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013c4b:	81 c9 02 06 00 00    	or     ecx,0x602
c0013c51:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013c57:	f3 90                	pause  
c0013c59:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013c5b:	0f ba e1 0c          	bt     ecx,0xc
c0013c5f:	72 f6                	jb     c0013c57 <Krnl::startCPU(int)+0xfe>
c0013c61:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c6b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013c71:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013c77:	09 c8                	or     eax,ecx
c0013c79:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013c7f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013c85:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013c8a:	0d 02 06 00 00       	or     eax,0x602
c0013c8f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013c95:	f3 90                	pause  
c0013c97:	8b 02                	mov    eax,DWORD PTR [edx]
c0013c99:	0f ba e0 0c          	bt     eax,0xc
c0013c9d:	72 f6                	jb     c0013c95 <Krnl::startCPU(int)+0x13c>
c0013c9f:	eb fe                	jmp    c0013c9f <Krnl::startCPU(int)+0x146>
c0013ca1:	c3                   	ret    

c0013ca2 <Krnl::startCPUs()>:
c0013ca2:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0013ca7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013cad:	88 c2                	mov    dl,al
c0013caf:	83 e2 0a             	and    edx,0xa
c0013cb2:	80 fa 0a             	cmp    dl,0xa
c0013cb5:	75 09                	jne    c0013cc0 <Krnl::startCPUs()+0x1e>
c0013cb7:	a8 01                	test   al,0x1
c0013cb9:	74 05                	je     c0013cc0 <Krnl::startCPUs()+0x1e>
c0013cbb:	e9 db c4 fe ff       	jmp    c000019b <prepareTramp>
c0013cc0:	c3                   	ret    
c0013cc1:	90                   	nop

c0013cc2 <EnvVarContainer::getEnv(char const*)>:
c0013cc2:	57                   	push   edi
c0013cc3:	56                   	push   esi
c0013cc4:	53                   	push   ebx
c0013cc5:	31 db                	xor    ebx,ebx
c0013cc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ccb:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013ccd:	7e 2b                	jle    c0013cfa <EnvVarContainer::getEnv(char const*)+0x38>
c0013ccf:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013cd6:	50                   	push   eax
c0013cd7:	50                   	push   eax
c0013cd8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013cdb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013cde:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ce2:	e8 e5 ca fe ff       	call   c00007cc <strcmp>
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	85 c0                	test   eax,eax
c0013cec:	75 09                	jne    c0013cf7 <EnvVarContainer::getEnv(char const*)+0x35>
c0013cee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013cf1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013cf5:	eb 05                	jmp    c0013cfc <EnvVarContainer::getEnv(char const*)+0x3a>
c0013cf7:	43                   	inc    ebx
c0013cf8:	eb d1                	jmp    c0013ccb <EnvVarContainer::getEnv(char const*)+0x9>
c0013cfa:	31 c0                	xor    eax,eax
c0013cfc:	5b                   	pop    ebx
c0013cfd:	5e                   	pop    esi
c0013cfe:	5f                   	pop    edi
c0013cff:	c3                   	ret    

c0013d00 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013d00:	55                   	push   ebp
c0013d01:	57                   	push   edi
c0013d02:	56                   	push   esi
c0013d03:	53                   	push   ebx
c0013d04:	83 ec 28             	sub    esp,0x28
c0013d07:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013d0b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013d0f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013d13:	56                   	push   esi
c0013d14:	e8 87 c9 fe ff       	call   c00006a0 <strlen>
c0013d19:	40                   	inc    eax
c0013d1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d1d:	e8 81 5c ff ff       	call   c00099a3 <malloc>
c0013d22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d29:	e8 72 c9 fe ff       	call   c00006a0 <strlen>
c0013d2e:	40                   	inc    eax
c0013d2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d32:	e8 6c 5c ff ff       	call   c00099a3 <malloc>
c0013d37:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d3e:	e8 5d c9 fe ff       	call   c00006a0 <strlen>
c0013d43:	83 c4 0c             	add    esp,0xc
c0013d46:	40                   	inc    eax
c0013d47:	50                   	push   eax
c0013d48:	6a 00                	push   0x0
c0013d4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d4e:	e8 31 c9 fe ff       	call   c0000684 <memset>
c0013d53:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d56:	e8 45 c9 fe ff       	call   c00006a0 <strlen>
c0013d5b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d5f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d67:	89 de                	mov    esi,ebx
c0013d69:	e8 32 c9 fe ff       	call   c00006a0 <strlen>
c0013d6e:	83 c4 0c             	add    esp,0xc
c0013d71:	40                   	inc    eax
c0013d72:	50                   	push   eax
c0013d73:	6a 00                	push   0x0
c0013d75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d79:	e8 06 c9 fe ff       	call   c0000684 <memset>
c0013d7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d81:	e8 1a c9 fe ff       	call   c00006a0 <strlen>
c0013d86:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013d92:	40                   	inc    eax
c0013d93:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013d96:	c1 e0 03             	shl    eax,0x3
c0013d99:	5a                   	pop    edx
c0013d9a:	59                   	pop    ecx
c0013d9b:	50                   	push   eax
c0013d9c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013d9f:	e8 eb 5b ff ff       	call   c000998f <realloc>
c0013da4:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013da8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013dab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013dae:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013db2:	b9 08 00 00 00       	mov    ecx,0x8
c0013db7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013db9:	83 c4 2c             	add    esp,0x2c
c0013dbc:	5b                   	pop    ebx
c0013dbd:	5e                   	pop    esi
c0013dbe:	5f                   	pop    edi
c0013dbf:	5d                   	pop    ebp
c0013dc0:	c3                   	ret    
c0013dc1:	90                   	nop

c0013dc2 <EnvVarContainer::deleteEnv(char const*)>:
c0013dc2:	c3                   	ret    
c0013dc3:	90                   	nop

c0013dc4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013dc4:	55                   	push   ebp
c0013dc5:	57                   	push   edi
c0013dc6:	56                   	push   esi
c0013dc7:	53                   	push   ebx
c0013dc8:	81 ec 38 01 00 00    	sub    esp,0x138
c0013dce:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013dd5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013ddc:	68 14 01 00 00       	push   0x114
c0013de1:	e8 bd 5b ff ff       	call   c00099a3 <malloc>
c0013de6:	83 c4 0c             	add    esp,0xc
c0013de9:	89 c3                	mov    ebx,eax
c0013deb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013dee:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013df5:	50                   	push   eax
c0013df6:	e8 73 91 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0013dfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dfe:	e8 3d 94 ff ff       	call   c000d240 <File::exists()>
c0013e03:	83 c4 10             	add    esp,0x10
c0013e06:	84 c0                	test   al,al
c0013e08:	75 31                	jne    c0013e3b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013e0a:	50                   	push   eax
c0013e0b:	50                   	push   eax
c0013e0c:	6a 12                	push   0x12
c0013e0e:	53                   	push   ebx
c0013e0f:	e8 be 91 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c0013e14:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e16:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013e19:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e1c:	e8 7f c8 fe ff       	call   c00006a0 <strlen>
c0013e21:	5a                   	pop    edx
c0013e22:	31 d2                	xor    edx,edx
c0013e24:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013e28:	51                   	push   ecx
c0013e29:	56                   	push   esi
c0013e2a:	52                   	push   edx
c0013e2b:	50                   	push   eax
c0013e2c:	53                   	push   ebx
c0013e2d:	ff d7                	call   edi
c0013e2f:	83 c4 14             	add    esp,0x14
c0013e32:	53                   	push   ebx
c0013e33:	e8 f8 91 ff ff       	call   c000d030 <File::close()>
c0013e38:	83 c4 10             	add    esp,0x10
c0013e3b:	56                   	push   esi
c0013e3c:	31 f6                	xor    esi,esi
c0013e3e:	68 00 01 00 00       	push   0x100
c0013e43:	6a 00                	push   0x0
c0013e45:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013e49:	50                   	push   eax
c0013e4a:	e8 35 c8 fe ff       	call   c0000684 <memset>
c0013e4f:	5f                   	pop    edi
c0013e50:	58                   	pop    eax
c0013e51:	6a 01                	push   0x1
c0013e53:	53                   	push   ebx
c0013e54:	e8 79 91 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e69:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013e6d:	51                   	push   ecx
c0013e6e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013e72:	52                   	push   edx
c0013e73:	6a 00                	push   0x0
c0013e75:	6a 01                	push   0x1
c0013e77:	53                   	push   ebx
c0013e78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e7b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013e7f:	83 c4 20             	add    esp,0x20
c0013e82:	3c 0d                	cmp    al,0xd
c0013e84:	0f 84 09 01 00 00    	je     c0013f93 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013e8a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013e8f:	0f 84 ef 00 00 00    	je     c0013f84 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013e95:	3c 0a                	cmp    al,0xa
c0013e97:	74 13                	je     c0013eac <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013e99:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013e9e:	74 0c                	je     c0013eac <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013ea0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013ea6:	0f 8e d8 00 00 00    	jle    c0013f84 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013eac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013eb0:	83 ec 0c             	sub    esp,0xc
c0013eb3:	8d 78 01             	lea    edi,[eax+0x1]
c0013eb6:	57                   	push   edi
c0013eb7:	e8 e7 5a ff ff       	call   c00099a3 <malloc>
c0013ebc:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013ec0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013ec4:	8d 56 04             	lea    edx,[esi+0x4]
c0013ec7:	89 14 24             	mov    DWORD PTR [esp],edx
c0013eca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ece:	e8 d0 5a ff ff       	call   c00099a3 <malloc>
c0013ed3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013ed7:	83 c4 0c             	add    esp,0xc
c0013eda:	57                   	push   edi
c0013edb:	6a 00                	push   0x0
c0013edd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013ee1:	e8 9e c7 fe ff       	call   c0000684 <memset>
c0013ee6:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013eea:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013eee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ef2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ef4:	83 c4 0c             	add    esp,0xc
c0013ef7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013efb:	52                   	push   edx
c0013efc:	6a 00                	push   0x0
c0013efe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013f02:	e8 7d c7 fe ff       	call   c0000684 <memset>
c0013f07:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013f0b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013f0f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f12:	e8 89 c7 fe ff       	call   c00006a0 <strlen>
c0013f17:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0013f1b:	89 c1                	mov    ecx,eax
c0013f1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f1f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013f22:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0013f25:	40                   	inc    eax
c0013f26:	83 c4 10             	add    esp,0x10
c0013f29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013f2c:	85 d2                	test   edx,edx
c0013f2e:	75 0c                	jne    c0013f3c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0013f30:	83 ec 0c             	sub    esp,0xc
c0013f33:	6a 08                	push   0x8
c0013f35:	e8 69 5a ff ff       	call   c00099a3 <malloc>
c0013f3a:	eb 0c                	jmp    c0013f48 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0013f3c:	c1 e0 03             	shl    eax,0x3
c0013f3f:	51                   	push   ecx
c0013f40:	51                   	push   ecx
c0013f41:	50                   	push   eax
c0013f42:	52                   	push   edx
c0013f43:	e8 47 5a ff ff       	call   c000998f <realloc>
c0013f48:	83 c4 10             	add    esp,0x10
c0013f4b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013f4e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013f51:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013f54:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013f58:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013f5c:	b9 08 00 00 00       	mov    ecx,0x8
c0013f61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f63:	31 f6                	xor    esi,esi
c0013f65:	50                   	push   eax
c0013f66:	68 00 01 00 00       	push   0x100
c0013f6b:	6a 00                	push   0x0
c0013f6d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f71:	50                   	push   eax
c0013f72:	e8 0d c7 fe ff       	call   c0000684 <memset>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f82:	eb 0f                	jmp    c0013f93 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f84:	3c 3d                	cmp    al,0x3d
c0013f86:	74 07                	je     c0013f8f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0013f88:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0013f8c:	46                   	inc    esi
c0013f8d:	eb 04                	jmp    c0013f93 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f8f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013f93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f98:	0f 85 c6 fe ff ff    	jne    c0013e64 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0013f9e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013fa4:	5b                   	pop    ebx
c0013fa5:	5e                   	pop    esi
c0013fa6:	5f                   	pop    edi
c0013fa7:	5d                   	pop    ebp
c0013fa8:	c3                   	ret    
c0013fa9:	90                   	nop

c0013faa <EnvVarContainer::__loadSystem()>:
c0013faa:	83 ec 10             	sub    esp,0x10
c0013fad:	68 40 5a 02 c0       	push   0xc0025a40
c0013fb2:	68 bd 3e 02 c0       	push   0xc0023ebd
c0013fb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fbb:	e8 04 fe ff ff       	call   c0013dc4 <EnvVarContainer::loadFrom(char const*, char const*)>
c0013fc0:	83 c4 1c             	add    esp,0x1c
c0013fc3:	c3                   	ret    

c0013fc4 <EnvVarContainer::__loadUser()>:
c0013fc4:	c3                   	ret    
c0013fc5:	90                   	nop

c0013fc6 <EnvVarContainer::EnvVarContainer(Process*)>:
c0013fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fd8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013fdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fe6:	90                   	nop
c0013fe7:	c3                   	ret    

c0013fe8 <EnvVarContainer::~EnvVarContainer()>:
c0013fe8:	83 ec 0c             	sub    esp,0xc
c0013feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ff2:	85 c0                	test   eax,eax
c0013ff4:	74 1d                	je     c0014013 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0013ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ffa:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ffc:	85 c0                	test   eax,eax
c0013ffe:	74 13                	je     c0014013 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014007:	83 ec 0c             	sub    esp,0xc
c001400a:	50                   	push   eax
c001400b:	e8 a3 59 ff ff       	call   c00099b3 <free>
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	90                   	nop
c0014014:	83 c4 0c             	add    esp,0xc
c0014017:	c3                   	ret    

c0014018 <Krnl::getEnv(Process*, char const*)>:
c0014018:	53                   	push   ebx
c0014019:	83 ec 08             	sub    esp,0x8
c001401c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014020:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014024:	39 05 90 75 02 c0    	cmp    DWORD PTR ds:0xc0027590,eax
c001402a:	74 04                	je     c0014030 <Krnl::getEnv(Process*, char const*)+0x18>
c001402c:	85 c0                	test   eax,eax
c001402e:	75 0b                	jne    c001403b <Krnl::getEnv(Process*, char const*)+0x23>
c0014030:	a1 74 6b 02 c0       	mov    eax,ds:0xc0026b74
c0014035:	85 c0                	test   eax,eax
c0014037:	75 19                	jne    c0014052 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014039:	eb 27                	jmp    c0014062 <Krnl::getEnv(Process*, char const*)+0x4a>
c001403b:	52                   	push   edx
c001403c:	52                   	push   edx
c001403d:	53                   	push   ebx
c001403e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014044:	e8 79 fc ff ff       	call   c0013cc2 <EnvVarContainer::getEnv(char const*)>
c0014049:	83 c4 10             	add    esp,0x10
c001404c:	85 c0                	test   eax,eax
c001404e:	75 28                	jne    c0014078 <Krnl::getEnv(Process*, char const*)+0x60>
c0014050:	eb de                	jmp    c0014030 <Krnl::getEnv(Process*, char const*)+0x18>
c0014052:	52                   	push   edx
c0014053:	52                   	push   edx
c0014054:	53                   	push   ebx
c0014055:	50                   	push   eax
c0014056:	e8 67 fc ff ff       	call   c0013cc2 <EnvVarContainer::getEnv(char const*)>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	85 c0                	test   eax,eax
c0014060:	75 16                	jne    c0014078 <Krnl::getEnv(Process*, char const*)+0x60>
c0014062:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014066:	a1 78 6b 02 c0       	mov    eax,ds:0xc0026b78
c001406b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001406f:	83 c4 08             	add    esp,0x8
c0014072:	5b                   	pop    ebx
c0014073:	e9 4a fc ff ff       	jmp    c0013cc2 <EnvVarContainer::getEnv(char const*)>
c0014078:	83 c4 08             	add    esp,0x8
c001407b:	5b                   	pop    ebx
c001407c:	c3                   	ret    

c001407d <Krnl::setEnvSystem(char const*, char const*)>:
c001407d:	83 ec 10             	sub    esp,0x10
c0014080:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014084:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014088:	ff 35 78 6b 02 c0    	push   DWORD PTR ds:0xc0026b78
c001408e:	e8 6d fc ff ff       	call   c0013d00 <EnvVarContainer::setEnv(char const*, char const*)>
c0014093:	83 c4 1c             	add    esp,0x1c
c0014096:	c3                   	ret    

c0014097 <Krnl::setEnvUser(char const*, char const*)>:
c0014097:	a1 74 6b 02 c0       	mov    eax,ds:0xc0026b74
c001409c:	85 c0                	test   eax,eax
c001409e:	74 15                	je     c00140b5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00140a0:	83 ec 10             	sub    esp,0x10
c00140a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140ab:	50                   	push   eax
c00140ac:	e8 4f fc ff ff       	call   c0013d00 <EnvVarContainer::setEnv(char const*, char const*)>
c00140b1:	83 c4 1c             	add    esp,0x1c
c00140b4:	c3                   	ret    
c00140b5:	c3                   	ret    

c00140b6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00140b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ba:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00140c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140c4:	e9 37 fc ff ff       	jmp    c0013d00 <EnvVarContainer::setEnv(char const*, char const*)>

c00140c9 <Krnl::deleteEnvSystem(char const*)>:
c00140c9:	c3                   	ret    

c00140ca <Krnl::deleteEnvUser(char const*)>:
c00140ca:	c3                   	ret    

c00140cb <Krnl::deleteEnvProcess(Process*, char const*)>:
c00140cb:	c3                   	ret    

c00140cc <Krnl::newProcessEnv(Process*)>:
c00140cc:	83 ec 28             	sub    esp,0x28
c00140cf:	6a 0c                	push   0xc
c00140d1:	e8 cd 58 ff ff       	call   c00099a3 <malloc>
c00140d6:	5a                   	pop    edx
c00140d7:	59                   	pop    ecx
c00140d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00140dc:	50                   	push   eax
c00140dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140e1:	e8 e0 fe ff ff       	call   c0013fc6 <EnvVarContainer::EnvVarContainer(Process*)>
c00140e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140ea:	83 c4 2c             	add    esp,0x2c
c00140ed:	c3                   	ret    

c00140ee <Krnl::copyProcessEnv(Process*, Process*)>:
c00140ee:	57                   	push   edi
c00140ef:	56                   	push   esi
c00140f0:	53                   	push   ebx
c00140f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f5:	83 ec 0c             	sub    esp,0xc
c00140f8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00140fe:	6a 0c                	push   0xc
c0014100:	e8 9e 58 ff ff       	call   c00099a3 <malloc>
c0014105:	89 c3                	mov    ebx,eax
c0014107:	58                   	pop    eax
c0014108:	5a                   	pop    edx
c0014109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001410d:	53                   	push   ebx
c001410e:	e8 b3 fe ff ff       	call   c0013fc6 <EnvVarContainer::EnvVarContainer(Process*)>
c0014113:	8b 07                	mov    eax,DWORD PTR [edi]
c0014115:	89 03                	mov    DWORD PTR [ebx],eax
c0014117:	c1 e0 03             	shl    eax,0x3
c001411a:	89 04 24             	mov    DWORD PTR [esp],eax
c001411d:	e8 81 58 ff ff       	call   c00099a3 <malloc>
c0014122:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014125:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014127:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001412a:	c1 e1 03             	shl    ecx,0x3
c001412d:	89 c7                	mov    edi,eax
c001412f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014131:	83 c4 10             	add    esp,0x10
c0014134:	89 d8                	mov    eax,ebx
c0014136:	5b                   	pop    ebx
c0014137:	5e                   	pop    esi
c0014138:	5f                   	pop    edi
c0014139:	c3                   	ret    

c001413a <Krnl::loadSystemEnv()>:
c001413a:	53                   	push   ebx
c001413b:	83 ec 14             	sub    esp,0x14
c001413e:	6a 0c                	push   0xc
c0014140:	e8 5e 58 ff ff       	call   c00099a3 <malloc>
c0014145:	89 c3                	mov    ebx,eax
c0014147:	58                   	pop    eax
c0014148:	5a                   	pop    edx
c0014149:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c001414f:	53                   	push   ebx
c0014150:	e8 71 fe ff ff       	call   c0013fc6 <EnvVarContainer::EnvVarContainer(Process*)>
c0014155:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014158:	89 1d 78 6b 02 c0    	mov    DWORD PTR ds:0xc0026b78,ebx
c001415e:	e8 47 fe ff ff       	call   c0013faa <EnvVarContainer::__loadSystem()>
c0014163:	83 c4 18             	add    esp,0x18
c0014166:	5b                   	pop    ebx
c0014167:	c3                   	ret    

c0014168 <Krnl::loadUserEnv()>:
c0014168:	53                   	push   ebx
c0014169:	83 ec 14             	sub    esp,0x14
c001416c:	6a 0c                	push   0xc
c001416e:	e8 30 58 ff ff       	call   c00099a3 <malloc>
c0014173:	89 c3                	mov    ebx,eax
c0014175:	58                   	pop    eax
c0014176:	5a                   	pop    edx
c0014177:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c001417d:	53                   	push   ebx
c001417e:	e8 43 fe ff ff       	call   c0013fc6 <EnvVarContainer::EnvVarContainer(Process*)>
c0014183:	89 1d 74 6b 02 c0    	mov    DWORD PTR ds:0xc0026b74,ebx
c0014189:	83 c4 18             	add    esp,0x18
c001418c:	5b                   	pop    ebx
c001418d:	c3                   	ret    

c001418e <Krnl::flushEnv()>:
c001418e:	c3                   	ret    

c001418f <Krnl::getProcessTotalEnvCount(Process*)>:
c001418f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014193:	8b 15 74 6b 02 c0    	mov    edx,DWORD PTR ds:0xc0026b74
c0014199:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001419f:	a1 78 6b 02 c0       	mov    eax,ds:0xc0026b78
c00141a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00141a6:	03 01                	add    eax,DWORD PTR [ecx]
c00141a8:	85 d2                	test   edx,edx
c00141aa:	74 02                	je     c00141ae <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00141ac:	03 02                	add    eax,DWORD PTR [edx]
c00141ae:	c3                   	ret    

c00141af <Krnl::getProcessEnvPair(Process*, int)>:
c00141af:	57                   	push   edi
c00141b0:	56                   	push   esi
c00141b1:	8b 35 74 6b 02 c0    	mov    esi,DWORD PTR ds:0xc0026b74
c00141b7:	53                   	push   ebx
c00141b8:	85 f6                	test   esi,esi
c00141ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141c2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00141c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141ce:	75 16                	jne    c00141e6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00141d0:	39 c2                	cmp    edx,eax
c00141d2:	7c 16                	jl     c00141ea <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00141d4:	8b 0d 78 6b 02 c0    	mov    ecx,DWORD PTR ds:0xc0026b78
c00141da:	8b 31                	mov    esi,DWORD PTR [ecx]
c00141dc:	01 c6                	add    esi,eax
c00141de:	39 d6                	cmp    esi,edx
c00141e0:	7e 3c                	jle    c001421e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00141e2:	29 c2                	sub    edx,eax
c00141e4:	eb 04                	jmp    c00141ea <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00141e6:	39 c2                	cmp    edx,eax
c00141e8:	7d 05                	jge    c00141ef <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00141ea:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00141ed:	eb 20                	jmp    c001420f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00141ef:	8b 3e                	mov    edi,DWORD PTR [esi]
c00141f1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00141f4:	39 d1                	cmp    ecx,edx
c00141f6:	7e 04                	jle    c00141fc <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00141f8:	29 c2                	sub    edx,eax
c00141fa:	eb 10                	jmp    c001420c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00141fc:	8b 35 78 6b 02 c0    	mov    esi,DWORD PTR ds:0xc0026b78
c0014202:	03 0e                	add    ecx,DWORD PTR [esi]
c0014204:	39 d1                	cmp    ecx,edx
c0014206:	7e 16                	jle    c001421e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014208:	29 c2                	sub    edx,eax
c001420a:	29 fa                	sub    edx,edi
c001420c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001420f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014212:	8b 02                	mov    eax,DWORD PTR [edx]
c0014214:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014217:	89 03                	mov    DWORD PTR [ebx],eax
c0014219:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001421c:	eb 1d                	jmp    c001423b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001421e:	83 ec 0c             	sub    esp,0xc
c0014221:	68 df 3e 02 c0       	push   0xc0023edf
c0014226:	e8 18 00 00 00       	call   c0014243 <Krnl::panic(char const*)>
c001422b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014231:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014238:	83 c4 10             	add    esp,0x10
c001423b:	89 d8                	mov    eax,ebx
c001423d:	5b                   	pop    ebx
c001423e:	5e                   	pop    esi
c001423f:	5f                   	pop    edi
c0014240:	c2 04 00             	ret    0x4

c0014243 <Krnl::panic(char const*)>:
c0014243:	55                   	push   ebp
c0014244:	89 e5                	mov    ebp,esp
c0014246:	53                   	push   ebx
c0014247:	83 ec 10             	sub    esp,0x10
c001424a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001424d:	fa                   	cli    
c001424e:	c6 05 84 6b 02 c0 01 	mov    BYTE PTR ds:0xc0026b84,0x1
c0014255:	53                   	push   ebx
c0014256:	e8 a2 57 ff ff       	call   c00099fd <Krnl::setBootMessage(char const*)>
c001425b:	58                   	pop    eax
c001425c:	c6 05 40 54 02 c0 00 	mov    BYTE PTR ds:0xc0025440,0x0
c0014263:	5a                   	pop    edx
c0014264:	53                   	push   ebx
c0014265:	68 f9 3e 02 c0       	push   0xc0023ef9
c001426a:	e8 95 87 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001426f:	59                   	pop    ecx
c0014270:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014275:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001427b:	e8 dd 64 ff ff       	call   c000a75d <setActiveTerminal(VgaText*)>
c0014280:	83 c4 0c             	add    esp,0xc
c0014283:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014288:	6a 01                	push   0x1
c001428a:	6a 0f                	push   0xf
c001428c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014292:	e8 25 63 ff ff       	call   c000a5bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014297:	58                   	pop    eax
c0014298:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001429d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00142a3:	e8 36 68 ff ff       	call   c000aade <VgaText::clearScreen()>
c00142a8:	58                   	pop    eax
c00142a9:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00142ae:	5a                   	pop    edx
c00142af:	68 12 3f 02 c0       	push   0xc0023f12
c00142b4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00142ba:	e8 ab 69 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00142bf:	59                   	pop    ecx
c00142c0:	58                   	pop    eax
c00142c1:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00142c6:	68 b8 3f 02 c0       	push   0xc0023fb8
c00142cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00142d1:	e8 94 69 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00142d6:	58                   	pop    eax
c00142d7:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00142dc:	5a                   	pop    edx
c00142dd:	68 2e 3f 02 c0       	push   0xc0023f2e
c00142e2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00142e8:	e8 7d 69 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00142ed:	59                   	pop    ecx
c00142ee:	58                   	pop    eax
c00142ef:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00142f4:	53                   	push   ebx
c00142f5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00142fb:	e8 6a 69 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c0014300:	58                   	pop    eax
c0014301:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014306:	5a                   	pop    edx
c0014307:	68 4e 3f 02 c0       	push   0xc0023f4e
c001430c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014312:	e8 53 69 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c0014317:	a1 80 6b 02 c0       	mov    eax,ds:0xc0026b80
c001431c:	83 c4 10             	add    esp,0x10
c001431f:	85 c0                	test   eax,eax
c0014321:	74 02                	je     c0014325 <Krnl::panic(char const*)+0xe2>
c0014323:	ff d0                	call   eax
c0014325:	83 ec 0c             	sub    esp,0xc
c0014328:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001432b:	e8 95 30 00 00       	call   c00173c5 <Thr::getDriverNameFromAddress(unsigned long)>
c0014330:	83 c4 10             	add    esp,0x10
c0014333:	89 c3                	mov    ebx,eax
c0014335:	85 c0                	test   eax,eax
c0014337:	0f 84 4e 02 00 00    	je     c001458b <Krnl::panic(char const*)+0x348>
c001433d:	83 ec 08             	sub    esp,0x8
c0014340:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014345:	68 f4 3f 02 c0       	push   0xc0023ff4
c001434a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014350:	e8 15 69 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c0014355:	58                   	pop    eax
c0014356:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001435b:	5a                   	pop    edx
c001435c:	68 2e 3f 02 c0       	push   0xc0023f2e
c0014361:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014367:	e8 fe 68 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c001436c:	59                   	pop    ecx
c001436d:	58                   	pop    eax
c001436e:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014373:	53                   	push   ebx
c0014374:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001437a:	e8 eb 68 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c001437f:	83 c4 10             	add    esp,0x10
c0014382:	83 ec 08             	sub    esp,0x8
c0014385:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001438a:	68 4d 3f 02 c0       	push   0xc0023f4d
c001438f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014395:	e8 d0 68 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c001439a:	58                   	pop    eax
c001439b:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00143a0:	5a                   	pop    edx
c00143a1:	68 4c 40 02 c0       	push   0xc002404c
c00143a6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143ac:	e8 b9 68 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00143b1:	59                   	pop    ecx
c00143b2:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00143b7:	5b                   	pop    ebx
c00143b8:	68 8c 40 02 c0       	push   0xc002408c
c00143bd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143c3:	e8 a2 68 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00143c8:	58                   	pop    eax
c00143c9:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00143ce:	5a                   	pop    edx
c00143cf:	68 39 3f 02 c0       	push   0xc0023f39
c00143d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143da:	e8 8b 68 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00143df:	59                   	pop    ecx
c00143e0:	5b                   	pop    ebx
c00143e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00143e4:	68 51 3f 02 c0       	push   0xc0023f51
c00143e9:	e8 16 86 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00143ee:	58                   	pop    eax
c00143ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00143f2:	5a                   	pop    edx
c00143f3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00143f6:	68 5a 3f 02 c0       	push   0xc0023f5a
c00143fb:	e8 04 86 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0014400:	59                   	pop    ecx
c0014401:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014404:	5b                   	pop    ebx
c0014405:	8b 00                	mov    eax,DWORD PTR [eax]
c0014407:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001440a:	68 63 3f 02 c0       	push   0xc0023f63
c001440f:	e8 f0 85 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0014414:	58                   	pop    eax
c0014415:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001441a:	5a                   	pop    edx
c001441b:	68 d0 40 02 c0       	push   0xc00240d0
c0014420:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014426:	e8 3f 68 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c001442b:	59                   	pop    ecx
c001442c:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014431:	5b                   	pop    ebx
c0014432:	68 6c 3f 02 c0       	push   0xc0023f6c
c0014437:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001443d:	e8 28 68 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c0014442:	0f 20 c0             	mov    eax,cr0
c0014445:	5a                   	pop    edx
c0014446:	59                   	pop    ecx
c0014447:	50                   	push   eax
c0014448:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001444d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014453:	e8 cc 67 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c0014458:	5b                   	pop    ebx
c0014459:	58                   	pop    eax
c001445a:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001445f:	68 76 3f 02 c0       	push   0xc0023f76
c0014464:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001446a:	e8 fb 67 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c001446f:	0f 20 d0             	mov    eax,cr2
c0014472:	5a                   	pop    edx
c0014473:	59                   	pop    ecx
c0014474:	50                   	push   eax
c0014475:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001447a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014480:	e8 9f 67 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c0014485:	5b                   	pop    ebx
c0014486:	58                   	pop    eax
c0014487:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001448c:	68 80 3f 02 c0       	push   0xc0023f80
c0014491:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014497:	e8 ce 67 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c001449c:	0f 20 d8             	mov    eax,cr3
c001449f:	5a                   	pop    edx
c00144a0:	59                   	pop    ecx
c00144a1:	50                   	push   eax
c00144a2:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00144a7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144ad:	e8 72 67 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c00144b2:	5b                   	pop    ebx
c00144b3:	58                   	pop    eax
c00144b4:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00144b9:	68 93 3f 02 c0       	push   0xc0023f93
c00144be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144c4:	e8 a1 67 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00144c9:	0f 20 e0             	mov    eax,cr4
c00144cc:	5a                   	pop    edx
c00144cd:	59                   	pop    ecx
c00144ce:	50                   	push   eax
c00144cf:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00144d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144da:	e8 45 67 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c00144df:	5b                   	pop    ebx
c00144e0:	58                   	pop    eax
c00144e1:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00144e6:	68 9d 3f 02 c0       	push   0xc0023f9d
c00144eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144f1:	e8 74 67 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00144f6:	5a                   	pop    edx
c00144f7:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00144fc:	59                   	pop    ecx
c00144fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014503:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014506:	50                   	push   eax
c0014507:	e8 18 67 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c001450c:	5b                   	pop    ebx
c001450d:	58                   	pop    eax
c001450e:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014513:	68 b4 3f 02 c0       	push   0xc0023fb4
c0014518:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001451e:	e8 47 67 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c0014523:	5a                   	pop    edx
c0014524:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014529:	59                   	pop    ecx
c001452a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014530:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014533:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014536:	50                   	push   eax
c0014537:	e8 e8 66 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c001453c:	5b                   	pop    ebx
c001453d:	58                   	pop    eax
c001453e:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014543:	68 b4 3f 02 c0       	push   0xc0023fb4
c0014548:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001454e:	e8 17 67 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c0014553:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014558:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001455b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014561:	8b 12                	mov    edx,DWORD PTR [edx]
c0014563:	59                   	pop    ecx
c0014564:	5b                   	pop    ebx
c0014565:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014568:	50                   	push   eax
c0014569:	e8 b6 66 ff ff       	call   c000ac24 <VgaText::putx(unsigned int)>
c001456e:	83 c4 10             	add    esp,0x10
c0014571:	b2 fe                	mov    dl,0xfe
c0014573:	e4 60                	in     al,0x60
c0014575:	3c 1c                	cmp    al,0x1c
c0014577:	74 04                	je     c001457d <Krnl::panic(char const*)+0x33a>
c0014579:	3c 5a                	cmp    al,0x5a
c001457b:	75 f6                	jne    c0014573 <Krnl::panic(char const*)+0x330>
c001457d:	e4 64                	in     al,0x64
c001457f:	a8 02                	test   al,0x2
c0014581:	75 fa                	jne    c001457d <Krnl::panic(char const*)+0x33a>
c0014583:	88 d0                	mov    al,dl
c0014585:	e6 64                	out    0x64,al
c0014587:	fa                   	cli    
c0014588:	f4                   	hlt    
c0014589:	eb e8                	jmp    c0014573 <Krnl::panic(char const*)+0x330>
c001458b:	50                   	push   eax
c001458c:	50                   	push   eax
c001458d:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0014592:	68 20 40 02 c0       	push   0xc0024020
c0014597:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001459d:	e8 c8 66 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00145a2:	58                   	pop    eax
c00145a3:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00145a8:	5a                   	pop    edx
c00145a9:	68 2e 3f 02 c0       	push   0xc0023f2e
c00145ae:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145b4:	e8 b1 66 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00145b9:	59                   	pop    ecx
c00145ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145bf:	5b                   	pop    ebx
c00145c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145c3:	83 c0 0c             	add    eax,0xc
c00145c6:	50                   	push   eax
c00145c7:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c00145cc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145d2:	e8 93 66 ff ff       	call   c000ac6a <VgaText::puts(char const*)>
c00145d7:	83 c4 10             	add    esp,0x10
c00145da:	e9 a3 fd ff ff       	jmp    c0014382 <Krnl::panic(char const*)+0x13f>
c00145df:	90                   	nop

c00145e0 <Net::switchEndian16(unsigned short)>:
c00145e0:	83 ec 04             	sub    esp,0x4
c00145e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145e7:	66 89 04 24          	mov    WORD PTR [esp],ax
c00145eb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00145ef:	c1 f8 08             	sar    eax,0x8
c00145f2:	89 c2                	mov    edx,eax
c00145f4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00145f8:	c1 e0 08             	shl    eax,0x8
c00145fb:	09 d0                	or     eax,edx
c00145fd:	83 c4 04             	add    esp,0x4
c0014600:	c3                   	ret    
c0014601:	90                   	nop

c0014602 <Net::switchEndian32(unsigned int)>:
c0014602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014606:	c1 e8 18             	shr    eax,0x18
c0014609:	89 c2                	mov    edx,eax
c001460b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001460f:	c1 e0 08             	shl    eax,0x8
c0014612:	25 00 00 ff 00       	and    eax,0xff0000
c0014617:	09 c2                	or     edx,eax
c0014619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001461d:	c1 e8 08             	shr    eax,0x8
c0014620:	25 00 ff 00 00       	and    eax,0xff00
c0014625:	09 c2                	or     edx,eax
c0014627:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001462b:	c1 e0 18             	shl    eax,0x18
c001462e:	09 d0                	or     eax,edx
c0014630:	c3                   	ret    
c0014631:	90                   	nop

c0014632 <Net::crc32Calc(unsigned char*, int)>:
c0014632:	83 ec 10             	sub    esp,0x10
c0014635:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001463a:	75 08                	jne    c0014644 <Net::crc32Calc(unsigned char*, int)+0x12>
c001463c:	b8 00 00 00 00       	mov    eax,0x0
c0014641:	eb 7f                	jmp    c00146c2 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014643:	90                   	nop
c0014644:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014649:	7f 07                	jg     c0014652 <Net::crc32Calc(unsigned char*, int)+0x20>
c001464b:	b8 00 00 00 00       	mov    eax,0x0
c0014650:	eb 70                	jmp    c00146c2 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014652:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001465a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014662:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014666:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001466a:	7d 50                	jge    c00146bc <Net::crc32Calc(unsigned char*, int)+0x8a>
c001466c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014674:	01 d0                	add    eax,edx
c0014676:	8a 00                	mov    al,BYTE PTR [eax]
c0014678:	0f b6 c0             	movzx  eax,al
c001467b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001467f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014687:	90                   	nop
c0014688:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001468d:	7f 27                	jg     c00146b6 <Net::crc32Calc(unsigned char*, int)+0x84>
c001468f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014693:	83 e0 01             	and    eax,0x1
c0014696:	74 0e                	je     c00146a6 <Net::crc32Calc(unsigned char*, int)+0x74>
c0014698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001469c:	d1 e8                	shr    eax,1
c001469e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00146a3:	eb 07                	jmp    c00146ac <Net::crc32Calc(unsigned char*, int)+0x7a>
c00146a5:	90                   	nop
c00146a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146aa:	d1 e8                	shr    eax,1
c00146ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146b0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146b4:	eb d2                	jmp    c0014688 <Net::crc32Calc(unsigned char*, int)+0x56>
c00146b6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146ba:	eb a6                	jmp    c0014662 <Net::crc32Calc(unsigned char*, int)+0x30>
c00146bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146c0:	f7 d0                	not    eax
c00146c2:	83 c4 10             	add    esp,0x10
c00146c5:	c3                   	ret    

c00146c6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00146c6:	57                   	push   edi
c00146c7:	56                   	push   esi
c00146c8:	53                   	push   ebx
c00146c9:	83 ec 60             	sub    esp,0x60
c00146cc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00146d3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00146d7:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00146df:	90                   	nop
c00146e0:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00146e5:	7f 1b                	jg     c0014702 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3c>
c00146e7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00146ee:	8d 50 01             	lea    edx,[eax+0x1]
c00146f1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00146f8:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00146fb:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00146ff:	eb df                	jmp    c00146e0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1a>
c0014701:	90                   	nop
c0014702:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014709:	8d 50 01             	lea    edx,[eax+0x1]
c001470c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014713:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014716:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001471d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014721:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014725:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014729:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014731:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014735:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014739:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001473d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014741:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014745:	89 c6                	mov    esi,eax
c0014747:	89 d7                	mov    edi,edx
c0014749:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001474b:	89 c8                	mov    eax,ecx
c001474d:	89 fa                	mov    edx,edi
c001474f:	89 f3                	mov    ebx,esi
c0014751:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014755:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014759:	89 04 24             	mov    DWORD PTR [esp],eax
c001475c:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014764:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001476b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001476f:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014773:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014777:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001477f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014787:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001478b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001478f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014793:	89 c6                	mov    esi,eax
c0014795:	89 d7                	mov    edi,edx
c0014797:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014799:	89 c8                	mov    eax,ecx
c001479b:	89 fa                	mov    edx,edi
c001479d:	89 f3                	mov    ebx,esi
c001479f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00147a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00147a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ab:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00147b3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00147ba:	0f b7 c0             	movzx  eax,ax
c00147bd:	c1 f8 08             	sar    eax,0x8
c00147c0:	89 c1                	mov    ecx,eax
c00147c2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147c9:	8d 50 01             	lea    edx,[eax+0x1]
c00147cc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147d3:	88 ca                	mov    dl,cl
c00147d5:	88 10                	mov    BYTE PTR [eax],dl
c00147d7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00147de:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147e5:	8d 48 01             	lea    ecx,[eax+0x1]
c00147e8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00147ef:	88 10                	mov    BYTE PTR [eax],dl
c00147f1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00147f5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00147f9:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014800:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014804:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014808:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001480c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014810:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014814:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014818:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001481c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014820:	89 c6                	mov    esi,eax
c0014822:	89 d7                	mov    edi,edx
c0014824:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014826:	89 c8                	mov    eax,ecx
c0014828:	89 fa                	mov    edx,edi
c001482a:	89 f3                	mov    ebx,esi
c001482c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014830:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014834:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014838:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001483c:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014843:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001484a:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001484e:	50                   	push   eax
c001484f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014853:	e8 da fd ff ff       	call   c0014632 <Net::crc32Calc(unsigned char*, int)>
c0014858:	83 c4 08             	add    esp,0x8
c001485b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001485f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014863:	c1 e8 18             	shr    eax,0x18
c0014866:	89 c1                	mov    ecx,eax
c0014868:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001486f:	8d 50 01             	lea    edx,[eax+0x1]
c0014872:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014879:	88 ca                	mov    dl,cl
c001487b:	88 10                	mov    BYTE PTR [eax],dl
c001487d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014881:	c1 e8 10             	shr    eax,0x10
c0014884:	89 c1                	mov    ecx,eax
c0014886:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001488d:	8d 50 01             	lea    edx,[eax+0x1]
c0014890:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014897:	88 ca                	mov    dl,cl
c0014899:	88 10                	mov    BYTE PTR [eax],dl
c001489b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001489f:	c1 e8 08             	shr    eax,0x8
c00148a2:	89 c1                	mov    ecx,eax
c00148a4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148ab:	8d 50 01             	lea    edx,[eax+0x1]
c00148ae:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148b5:	88 ca                	mov    dl,cl
c00148b7:	88 10                	mov    BYTE PTR [eax],dl
c00148b9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148c0:	8d 50 01             	lea    edx,[eax+0x1]
c00148c3:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148ca:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00148ce:	88 10                	mov    BYTE PTR [eax],dl
c00148d0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148d4:	83 c4 60             	add    esp,0x60
c00148d7:	5b                   	pop    ebx
c00148d8:	5e                   	pop    esi
c00148d9:	5f                   	pop    edi
c00148da:	c3                   	ret    
c00148db:	90                   	nop

c00148dc <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00148dc:	57                   	push   edi
c00148dd:	56                   	push   esi
c00148de:	53                   	push   ebx
c00148df:	83 ec 70             	sub    esp,0x70
c00148e2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00148e9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00148ed:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00148f5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00148fc:	83 c0 0e             	add    eax,0xe
c00148ff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014903:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001490a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001490e:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014916:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001491a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001491e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014922:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014926:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001492a:	89 c6                	mov    esi,eax
c001492c:	89 d7                	mov    edi,edx
c001492e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014930:	89 c8                	mov    eax,ecx
c0014932:	89 fa                	mov    edx,edi
c0014934:	89 f3                	mov    ebx,esi
c0014936:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001493a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001493e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014942:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001494a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014951:	83 c0 08             	add    eax,0x8
c0014954:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014958:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001495f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014963:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001496b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001496f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014973:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014977:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001497b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001497f:	89 c6                	mov    esi,eax
c0014981:	89 d7                	mov    edi,edx
c0014983:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014985:	89 c8                	mov    eax,ecx
c0014987:	89 fa                	mov    edx,edi
c0014989:	89 f3                	mov    ebx,esi
c001498b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001498f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014993:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014997:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001499f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149a6:	8d 50 01             	lea    edx,[eax+0x1]
c00149a9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00149b0:	8a 00                	mov    al,BYTE PTR [eax]
c00149b2:	0f b6 c0             	movzx  eax,al
c00149b5:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00149ba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149c1:	8d 50 01             	lea    edx,[eax+0x1]
c00149c4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00149cb:	8a 00                	mov    al,BYTE PTR [eax]
c00149cd:	0f b6 c0             	movzx  eax,al
c00149d0:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c00149d5:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c00149da:	c1 e0 08             	shl    eax,0x8
c00149dd:	89 c2                	mov    edx,eax
c00149df:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00149e3:	09 d0                	or     eax,edx
c00149e5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00149ec:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00149f0:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c00149f8:	75 46                	jne    c0014a40 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00149fa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a01:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014a04:	66 3d dc 05          	cmp    ax,0x5dc
c0014a08:	77 16                	ja     c0014a20 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014a0a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a11:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014a14:	0f b7 c0             	movzx  eax,ax
c0014a17:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014a1e:	eb 20                	jmp    c0014a40 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014a20:	83 ec 0c             	sub    esp,0xc
c0014a23:	68 f8 40 02 c0       	push   0xc00240f8
c0014a28:	e8 d7 7f ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0014a2d:	83 c4 10             	add    esp,0x10
c0014a30:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a37:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014a3b:	e9 18 01 00 00       	jmp    c0014b58 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014a40:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a47:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014a4e:	8b 12                	mov    edx,DWORD PTR [edx]
c0014a50:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014a54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014a5b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014a5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a77:	89 c6                	mov    esi,eax
c0014a79:	89 d7                	mov    edi,edx
c0014a7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a7d:	89 c8                	mov    eax,ecx
c0014a7f:	89 fa                	mov    edx,edi
c0014a81:	89 f3                	mov    ebx,esi
c0014a83:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014a87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014a8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a8e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a95:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014a9c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014aa3:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014aad:	8a 00                	mov    al,BYTE PTR [eax]
c0014aaf:	0f b6 c0             	movzx  eax,al
c0014ab2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014ab6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014abd:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac9:	0f b6 c0             	movzx  eax,al
c0014acc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014ad0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ad7:	8d 50 01             	lea    edx,[eax+0x1]
c0014ada:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ae1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ae3:	0f b6 c0             	movzx  eax,al
c0014ae6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014aea:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014af1:	8d 50 01             	lea    edx,[eax+0x1]
c0014af4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014afb:	8a 00                	mov    al,BYTE PTR [eax]
c0014afd:	0f b6 c0             	movzx  eax,al
c0014b00:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014b04:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014b08:	c1 e0 18             	shl    eax,0x18
c0014b0b:	89 c2                	mov    edx,eax
c0014b0d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014b11:	c1 e0 10             	shl    eax,0x10
c0014b14:	09 c2                	or     edx,eax
c0014b16:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014b1a:	c1 e0 08             	shl    eax,0x8
c0014b1d:	09 d0                	or     eax,edx
c0014b1f:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014b23:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014b27:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b2e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014b32:	83 e8 04             	sub    eax,0x4
c0014b35:	83 ec 08             	sub    esp,0x8
c0014b38:	50                   	push   eax
c0014b39:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b3d:	e8 f0 fa ff ff       	call   c0014632 <Net::crc32Calc(unsigned char*, int)>
c0014b42:	83 c4 10             	add    esp,0x10
c0014b45:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014b49:	0f 94 c2             	sete   dl
c0014b4c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b53:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014b56:	90                   	nop
c0014b57:	90                   	nop
c0014b58:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b5f:	83 c4 70             	add    esp,0x70
c0014b62:	5b                   	pop    ebx
c0014b63:	5e                   	pop    esi
c0014b64:	5f                   	pop    edi
c0014b65:	c2 04 00             	ret    0x4

c0014b68 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014b68:	55                   	push   ebp
c0014b69:	57                   	push   edi
c0014b6a:	56                   	push   esi
c0014b6b:	53                   	push   ebx
c0014b6c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014b72:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014b79:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014b7b:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014b7e:	80 fb 40             	cmp    bl,0x40
c0014b81:	75 1b                	jne    c0014b9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014b83:	8a 16                	mov    dl,BYTE PTR [esi]
c0014b85:	84 d2                	test   dl,dl
c0014b87:	0f 84 f1 00 00 00    	je     c0014c7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014b8d:	8d 46 01             	lea    eax,[esi+0x1]
c0014b90:	80 fa 3a             	cmp    dl,0x3a
c0014b93:	74 04                	je     c0014b99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014b95:	89 c6                	mov    esi,eax
c0014b97:	eb ea                	jmp    c0014b83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014b99:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014b9c:	89 c6                	mov    esi,eax
c0014b9e:	50                   	push   eax
c0014b9f:	6a 40                	push   0x40
c0014ba1:	6a 00                	push   0x0
c0014ba3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014ba7:	50                   	push   eax
c0014ba8:	e8 d7 ba fe ff       	call   c0000684 <memset>
c0014bad:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014bb4:	31 c0                	xor    eax,eax
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014bbb:	84 c9                	test   cl,cl
c0014bbd:	0f 84 bb 00 00 00    	je     c0014c7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014bc3:	3d c7 00 00 00       	cmp    eax,0xc7
c0014bc8:	0f 8f b0 00 00 00    	jg     c0014c7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014bce:	80 f9 0a             	cmp    cl,0xa
c0014bd1:	0f 85 98 00 00 00    	jne    c0014c6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014bd7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014bdc:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014be0:	a8 df                	test   al,0xdf
c0014be2:	0f 94 c1             	sete   cl
c0014be5:	3c 23                	cmp    al,0x23
c0014be7:	0f 94 c2             	sete   dl
c0014bea:	08 d1                	or     cl,dl
c0014bec:	75 4a                	jne    c0014c38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014bee:	8d 50 f7             	lea    edx,[eax-0x9]
c0014bf1:	80 fa 01             	cmp    dl,0x1
c0014bf4:	76 42                	jbe    c0014c38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014bf6:	3c 5b                	cmp    al,0x5b
c0014bf8:	75 42                	jne    c0014c3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014bfa:	80 fb 40             	cmp    bl,0x40
c0014bfd:	75 39                	jne    c0014c38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014bff:	83 ec 0c             	sub    esp,0xc
c0014c02:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014c06:	52                   	push   edx
c0014c07:	e8 94 ba fe ff       	call   c00006a0 <strlen>
c0014c0c:	83 c4 10             	add    esp,0x10
c0014c0f:	83 f8 3f             	cmp    eax,0x3f
c0014c12:	77 6a                	ja     c0014c7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c14:	50                   	push   eax
c0014c15:	50                   	push   eax
c0014c16:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014c1a:	52                   	push   edx
c0014c1b:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014c1f:	52                   	push   edx
c0014c20:	e8 1b bb fe ff       	call   c0000740 <strcpy>
c0014c25:	58                   	pop    eax
c0014c26:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014c2a:	52                   	push   edx
c0014c2b:	e8 70 ba fe ff       	call   c00006a0 <strlen>
c0014c30:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014c35:	83 c4 10             	add    esp,0x10
c0014c38:	31 d2                	xor    edx,edx
c0014c3a:	eb 3a                	jmp    c0014c76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014c3c:	80 fb 40             	cmp    bl,0x40
c0014c3f:	74 06                	je     c0014c47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014c41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014c45:	eb 20                	jmp    c0014c67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014c47:	50                   	push   eax
c0014c48:	50                   	push   eax
c0014c49:	55                   	push   ebp
c0014c4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014c4e:	50                   	push   eax
c0014c4f:	e8 78 bb fe ff       	call   c00007cc <strcmp>
c0014c54:	83 c4 10             	add    esp,0x10
c0014c57:	85 c0                	test   eax,eax
c0014c59:	75 dd                	jne    c0014c38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014c5b:	eb e4                	jmp    c0014c41 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014c5d:	8d 50 01             	lea    edx,[eax+0x1]
c0014c60:	80 f9 3d             	cmp    cl,0x3d
c0014c63:	74 1d                	je     c0014c82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014c65:	89 d0                	mov    eax,edx
c0014c67:	8a 08                	mov    cl,BYTE PTR [eax]
c0014c69:	84 c9                	test   cl,cl
c0014c6b:	75 f0                	jne    c0014c5d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014c6d:	eb 0f                	jmp    c0014c7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c6f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c72:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014c76:	47                   	inc    edi
c0014c77:	89 d0                	mov    eax,edx
c0014c79:	e9 3b ff ff ff       	jmp    c0014bb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014c7e:	31 c0                	xor    eax,eax
c0014c80:	eb 33                	jmp    c0014cb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014c82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014c86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014c89:	50                   	push   eax
c0014c8a:	50                   	push   eax
c0014c8b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014c8f:	50                   	push   eax
c0014c90:	56                   	push   esi
c0014c91:	e8 36 bb fe ff       	call   c00007cc <strcmp>
c0014c96:	83 c4 10             	add    esp,0x10
c0014c99:	85 c0                	test   eax,eax
c0014c9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c9f:	75 97                	jne    c0014c38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014ca1:	51                   	push   ecx
c0014ca2:	51                   	push   ecx
c0014ca3:	52                   	push   edx
c0014ca4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014cab:	e8 90 ba fe ff       	call   c0000740 <strcpy>
c0014cb0:	83 c4 10             	add    esp,0x10
c0014cb3:	b0 01                	mov    al,0x1
c0014cb5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014cbb:	5b                   	pop    ebx
c0014cbc:	5e                   	pop    esi
c0014cbd:	5f                   	pop    edi
c0014cbe:	5d                   	pop    ebp
c0014cbf:	c3                   	ret    

c0014cc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014cc0:	57                   	push   edi
c0014cc1:	56                   	push   esi
c0014cc2:	53                   	push   ebx
c0014cc3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014cc9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014cd0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014cd7:	53                   	push   ebx
c0014cd8:	e8 c3 b9 fe ff       	call   c00006a0 <strlen>
c0014cdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ce0:	89 c7                	mov    edi,eax
c0014ce2:	e8 b9 b9 fe ff       	call   c00006a0 <strlen>
c0014ce7:	83 c4 10             	add    esp,0x10
c0014cea:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014cee:	3d ff 00 00 00       	cmp    eax,0xff
c0014cf3:	0f 87 d3 00 00 00    	ja     c0014dcc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014cf9:	57                   	push   edi
c0014cfa:	57                   	push   edi
c0014cfb:	56                   	push   esi
c0014cfc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014d00:	56                   	push   esi
c0014d01:	e8 3a ba fe ff       	call   c0000740 <strcpy>
c0014d06:	58                   	pop    eax
c0014d07:	5a                   	pop    edx
c0014d08:	68 9a 44 02 c0       	push   0xc002449a
c0014d0d:	56                   	push   esi
c0014d0e:	e8 6d bb fe ff       	call   c0000880 <strcat>
c0014d13:	59                   	pop    ecx
c0014d14:	5f                   	pop    edi
c0014d15:	53                   	push   ebx
c0014d16:	56                   	push   esi
c0014d17:	e8 64 bb fe ff       	call   c0000880 <strcat>
c0014d1c:	58                   	pop    eax
c0014d1d:	5a                   	pop    edx
c0014d1e:	68 44 41 02 c0       	push   0xc0024144
c0014d23:	56                   	push   esi
c0014d24:	e8 57 bb fe ff       	call   c0000880 <strcat>
c0014d29:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014d30:	e8 6e 4c ff ff       	call   c00099a3 <malloc>
c0014d35:	83 c4 0c             	add    esp,0xc
c0014d38:	89 c3                	mov    ebx,eax
c0014d3a:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c0014d40:	56                   	push   esi
c0014d41:	50                   	push   eax
c0014d42:	e8 27 82 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0014d47:	83 c4 10             	add    esp,0x10
c0014d4a:	85 db                	test   ebx,ebx
c0014d4c:	74 7e                	je     c0014dcc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014d4e:	51                   	push   ecx
c0014d4f:	51                   	push   ecx
c0014d50:	6a 01                	push   0x1
c0014d52:	53                   	push   ebx
c0014d53:	e8 7a 82 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c0014d58:	83 c4 10             	add    esp,0x10
c0014d5b:	85 c0                	test   eax,eax
c0014d5d:	74 08                	je     c0014d67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014d5f:	83 ec 0c             	sub    esp,0xc
c0014d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d64:	53                   	push   ebx
c0014d65:	eb 5f                	jmp    c0014dc6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014d67:	52                   	push   edx
c0014d68:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014d6c:	50                   	push   eax
c0014d6d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014d71:	50                   	push   eax
c0014d72:	53                   	push   ebx
c0014d73:	e8 06 85 ff ff       	call   c000d27e <File::stat(unsigned long long*, bool*)>
c0014d78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d7c:	83 c4 10             	add    esp,0x10
c0014d7f:	89 c1                	mov    ecx,eax
c0014d81:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014d85:	74 31                	je     c0014db8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014d87:	83 ec 0c             	sub    esp,0xc
c0014d8a:	50                   	push   eax
c0014d8b:	e8 13 4c ff ff       	call   c00099a3 <malloc>
c0014d90:	89 c6                	mov    esi,eax
c0014d92:	58                   	pop    eax
c0014d93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d95:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014d99:	52                   	push   edx
c0014d9a:	56                   	push   esi
c0014d9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014d9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014da3:	53                   	push   ebx
c0014da4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014da7:	83 c4 20             	add    esp,0x20
c0014daa:	85 c0                	test   eax,eax
c0014dac:	75 0a                	jne    c0014db8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014dae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014db2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014db6:	74 18                	je     c0014dd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014db8:	83 ec 0c             	sub    esp,0xc
c0014dbb:	53                   	push   ebx
c0014dbc:	e8 6f 82 ff ff       	call   c000d030 <File::close()>
c0014dc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014dc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	31 c0                	xor    eax,eax
c0014dce:	eb 3b                	jmp    c0014e0b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014dd0:	83 ec 0c             	sub    esp,0xc
c0014dd3:	53                   	push   ebx
c0014dd4:	e8 57 82 ff ff       	call   c000d030 <File::close()>
c0014dd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ddb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014dde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014de1:	83 c4 0c             	add    esp,0xc
c0014de4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014deb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014df2:	56                   	push   esi
c0014df3:	e8 70 fd ff ff       	call   c0014b68 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014df8:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dfb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014dff:	e8 af 4b ff ff       	call   c00099b3 <free>
c0014e04:	83 c4 10             	add    esp,0x10
c0014e07:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014e0b:	81 c4 20 01 00 00    	add    esp,0x120
c0014e11:	5b                   	pop    ebx
c0014e12:	5e                   	pop    esi
c0014e13:	5f                   	pop    edi
c0014e14:	c3                   	ret    

c0014e15 <Reg::getLine(char*, char*, char*)>:
c0014e15:	57                   	push   edi
c0014e16:	56                   	push   esi
c0014e17:	53                   	push   ebx
c0014e18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014e20:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014e24:	57                   	push   edi
c0014e25:	56                   	push   esi
c0014e26:	53                   	push   ebx
c0014e27:	68 49 41 02 c0       	push   0xc0024149
c0014e2c:	e8 8f fe ff ff       	call   c0014cc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014e31:	83 c4 10             	add    esp,0x10
c0014e34:	84 c0                	test   al,al
c0014e36:	75 10                	jne    c0014e48 <Reg::getLine(char*, char*, char*)+0x33>
c0014e38:	57                   	push   edi
c0014e39:	56                   	push   esi
c0014e3a:	53                   	push   ebx
c0014e3b:	68 6e 41 02 c0       	push   0xc002416e
c0014e40:	e8 7b fe ff ff       	call   c0014cc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014e45:	83 c4 10             	add    esp,0x10
c0014e48:	5b                   	pop    ebx
c0014e49:	5e                   	pop    esi
c0014e4a:	5f                   	pop    edi
c0014e4b:	c3                   	ret    

c0014e4c <Reg::readInt(char*, char*, int*)>:
c0014e4c:	55                   	push   ebp
c0014e4d:	57                   	push   edi
c0014e4e:	56                   	push   esi
c0014e4f:	53                   	push   ebx
c0014e50:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014e56:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014e5a:	57                   	push   edi
c0014e5b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014e62:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014e69:	e8 a7 ff ff ff       	call   c0014e15 <Reg::getLine(char*, char*, char*)>
c0014e6e:	83 c4 10             	add    esp,0x10
c0014e71:	84 c0                	test   al,al
c0014e73:	0f 84 b3 00 00 00    	je     c0014f2c <Reg::readInt(char*, char*, int*)+0xe0>
c0014e79:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014e7d:	80 fa 2b             	cmp    dl,0x2b
c0014e80:	74 0c                	je     c0014e8e <Reg::readInt(char*, char*, int*)+0x42>
c0014e82:	80 fa 2d             	cmp    dl,0x2d
c0014e85:	75 0e                	jne    c0014e95 <Reg::readInt(char*, char*, int*)+0x49>
c0014e87:	ba 01 00 00 00       	mov    edx,0x1
c0014e8c:	eb 0b                	jmp    c0014e99 <Reg::readInt(char*, char*, int*)+0x4d>
c0014e8e:	ba 01 00 00 00       	mov    edx,0x1
c0014e93:	eb 02                	jmp    c0014e97 <Reg::readInt(char*, char*, int*)+0x4b>
c0014e95:	31 d2                	xor    edx,edx
c0014e97:	31 c0                	xor    eax,eax
c0014e99:	be 0a 00 00 00       	mov    esi,0xa
c0014e9e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014ea3:	75 20                	jne    c0014ec5 <Reg::readInt(char*, char*, int*)+0x79>
c0014ea5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014ea9:	80 f9 78             	cmp    cl,0x78
c0014eac:	75 0a                	jne    c0014eb8 <Reg::readInt(char*, char*, int*)+0x6c>
c0014eae:	83 c2 02             	add    edx,0x2
c0014eb1:	be 10 00 00 00       	mov    esi,0x10
c0014eb6:	eb 0d                	jmp    c0014ec5 <Reg::readInt(char*, char*, int*)+0x79>
c0014eb8:	80 f9 62             	cmp    cl,0x62
c0014ebb:	75 08                	jne    c0014ec5 <Reg::readInt(char*, char*, int*)+0x79>
c0014ebd:	83 c2 02             	add    edx,0x2
c0014ec0:	be 02 00 00 00       	mov    esi,0x2
c0014ec5:	01 d7                	add    edi,edx
c0014ec7:	31 d2                	xor    edx,edx
c0014ec9:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014ecb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014ecf:	80 fb 0d             	cmp    bl,0xd
c0014ed2:	0f 94 c3             	sete   bl
c0014ed5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014eda:	0f 94 c1             	sete   cl
c0014edd:	08 cb                	or     bl,cl
c0014edf:	75 3a                	jne    c0014f1b <Reg::readInt(char*, char*, int*)+0xcf>
c0014ee1:	0f af d6             	imul   edx,esi
c0014ee4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014ee9:	83 fe 10             	cmp    esi,0x10
c0014eec:	75 26                	jne    c0014f14 <Reg::readInt(char*, char*, int*)+0xc8>
c0014eee:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014ef2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0014ef5:	89 e9                	mov    ecx,ebp
c0014ef7:	80 f9 05             	cmp    cl,0x5
c0014efa:	77 06                	ja     c0014f02 <Reg::readInt(char*, char*, int*)+0xb6>
c0014efc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0014f00:	eb 16                	jmp    c0014f18 <Reg::readInt(char*, char*, int*)+0xcc>
c0014f02:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014f06:	83 e9 61             	sub    ecx,0x61
c0014f09:	80 f9 05             	cmp    cl,0x5
c0014f0c:	77 06                	ja     c0014f14 <Reg::readInt(char*, char*, int*)+0xc8>
c0014f0e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0014f12:	eb 04                	jmp    c0014f18 <Reg::readInt(char*, char*, int*)+0xcc>
c0014f14:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0014f18:	47                   	inc    edi
c0014f19:	eb ae                	jmp    c0014ec9 <Reg::readInt(char*, char*, int*)+0x7d>
c0014f1b:	84 c0                	test   al,al
c0014f1d:	74 02                	je     c0014f21 <Reg::readInt(char*, char*, int*)+0xd5>
c0014f1f:	f7 da                	neg    edx
c0014f21:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0014f28:	89 10                	mov    DWORD PTR [eax],edx
c0014f2a:	88 d8                	mov    al,bl
c0014f2c:	81 c4 ec 00 00 00    	add    esp,0xec
c0014f32:	5b                   	pop    ebx
c0014f33:	5e                   	pop    esi
c0014f34:	5f                   	pop    edi
c0014f35:	5d                   	pop    ebp
c0014f36:	c3                   	ret    

c0014f37 <Reg::readString(char*, char*, char*, int)>:
c0014f37:	57                   	push   edi
c0014f38:	56                   	push   esi
c0014f39:	53                   	push   ebx
c0014f3a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0014f40:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0014f47:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0014f4b:	57                   	push   edi
c0014f4c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0014f53:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0014f5a:	e8 b6 fe ff ff       	call   c0014e15 <Reg::getLine(char*, char*, char*)>
c0014f5f:	83 c4 10             	add    esp,0x10
c0014f62:	89 c6                	mov    esi,eax
c0014f64:	84 c0                	test   al,al
c0014f66:	74 44                	je     c0014fac <Reg::readString(char*, char*, char*, int)+0x75>
c0014f68:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0014f6f:	31 c0                	xor    eax,eax
c0014f71:	4a                   	dec    edx
c0014f72:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0014f75:	84 c9                	test   cl,cl
c0014f77:	74 0f                	je     c0014f88 <Reg::readString(char*, char*, char*, int)+0x51>
c0014f79:	39 c2                	cmp    edx,eax
c0014f7b:	7e 0b                	jle    c0014f88 <Reg::readString(char*, char*, char*, int)+0x51>
c0014f7d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0014f80:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0014f85:	40                   	inc    eax
c0014f86:	eb ea                	jmp    c0014f72 <Reg::readString(char*, char*, char*, int)+0x3b>
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	53                   	push   ebx
c0014f8c:	e8 0f b7 fe ff       	call   c00006a0 <strlen>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0014f99:	75 11                	jne    c0014fac <Reg::readString(char*, char*, char*, int)+0x75>
c0014f9b:	83 ec 0c             	sub    esp,0xc
c0014f9e:	53                   	push   ebx
c0014f9f:	e8 fc b6 fe ff       	call   c00006a0 <strlen>
c0014fa4:	83 c4 10             	add    esp,0x10
c0014fa7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0014fac:	81 c4 d0 00 00 00    	add    esp,0xd0
c0014fb2:	89 f0                	mov    eax,esi
c0014fb4:	5b                   	pop    ebx
c0014fb5:	5e                   	pop    esi
c0014fb6:	5f                   	pop    edi
c0014fb7:	c3                   	ret    

c0014fb8 <Reg::readBool(char*, char*, bool*)>:
c0014fb8:	83 ec 20             	sub    esp,0x20
c0014fbb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014fbf:	50                   	push   eax
c0014fc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fc8:	e8 7f fe ff ff       	call   c0014e4c <Reg::readInt(char*, char*, int*)>
c0014fcd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014fd2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014fd6:	0f 95 02             	setne  BYTE PTR [edx]
c0014fd9:	83 c4 2c             	add    esp,0x2c
c0014fdc:	c3                   	ret    

c0014fdd <Reg::readBoolWithDefault(char*, char*, bool)>:
c0014fdd:	53                   	push   ebx
c0014fde:	83 ec 1c             	sub    esp,0x1c
c0014fe1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0014fe5:	8d 44 24 13          	lea    eax,[esp+0x13]
c0014fe9:	50                   	push   eax
c0014fea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ff2:	e8 c1 ff ff ff       	call   c0014fb8 <Reg::readBool(char*, char*, bool*)>
c0014ff7:	83 c4 10             	add    esp,0x10
c0014ffa:	84 c0                	test   al,al
c0014ffc:	74 04                	je     c0015002 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0014ffe:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015002:	88 d8                	mov    al,bl
c0015004:	83 c4 18             	add    esp,0x18
c0015007:	5b                   	pop    ebx
c0015008:	c3                   	ret    

c0015009 <Reg::readIntWithDefault(char*, char*, int)>:
c0015009:	53                   	push   ebx
c001500a:	83 ec 1c             	sub    esp,0x1c
c001500d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015011:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015015:	50                   	push   eax
c0015016:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001501a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001501e:	e8 29 fe ff ff       	call   c0014e4c <Reg::readInt(char*, char*, int*)>
c0015023:	83 c4 10             	add    esp,0x10
c0015026:	84 c0                	test   al,al
c0015028:	74 04                	je     c001502e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001502a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001502e:	89 d8                	mov    eax,ebx
c0015030:	83 c4 18             	add    esp,0x18
c0015033:	5b                   	pop    ebx
c0015034:	c3                   	ret    

c0015035 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015035:	57                   	push   edi
c0015036:	56                   	push   esi
c0015037:	56                   	push   esi
c0015038:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001503c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015040:	56                   	push   esi
c0015041:	57                   	push   edi
c0015042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001504a:	e8 e8 fe ff ff       	call   c0014f37 <Reg::readString(char*, char*, char*, int)>
c001504f:	83 c4 10             	add    esp,0x10
c0015052:	84 c0                	test   al,al
c0015054:	75 1a                	jne    c0015070 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015056:	51                   	push   ecx
c0015057:	56                   	push   esi
c0015058:	6a 00                	push   0x0
c001505a:	57                   	push   edi
c001505b:	e8 24 b6 fe ff       	call   c0000684 <memset>
c0015060:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015063:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015067:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015069:	83 c4 10             	add    esp,0x10
c001506c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015070:	89 f8                	mov    eax,edi
c0015072:	5a                   	pop    edx
c0015073:	5e                   	pop    esi
c0015074:	5f                   	pop    edi
c0015075:	c3                   	ret    

c0015076 <Sys::eject(regs*)>:
c0015076:	83 ec 0c             	sub    esp,0xc
c0015079:	83 ca ff             	or     edx,0xffffffff
c001507c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015080:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015083:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015088:	83 e9 41             	sub    ecx,0x41
c001508b:	83 f9 19             	cmp    ecx,0x19
c001508e:	77 18                	ja     c00150a8 <Sys::eject(regs*)+0x32>
c0015090:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c0015097:	85 c9                	test   ecx,ecx
c0015099:	74 0d                	je     c00150a8 <Sys::eject(regs*)+0x32>
c001509b:	83 ec 0c             	sub    esp,0xc
c001509e:	51                   	push   ecx
c001509f:	e8 02 b0 ff ff       	call   c00100a6 <LogicalDisk::eject()>
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	99                   	cdq    
c00150a8:	83 c4 0c             	add    esp,0xc
c00150ab:	c3                   	ret    

c00150ac <Sys::exit(regs*)>:
c00150ac:	83 ec 18             	sub    esp,0x18
c00150af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00150b6:	e8 c9 35 00 00       	call   c0018684 <terminateTask(int)>
c00150bb:	83 c8 ff             	or     eax,0xffffffff
c00150be:	83 c4 1c             	add    esp,0x1c
c00150c1:	89 c2                	mov    edx,eax
c00150c3:	c3                   	ret    

c00150c4 <Sys::getCwd(regs*)>:
c00150c4:	83 ec 10             	sub    esp,0x10
c00150c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00150cb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00150ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00150d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150d6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00150d9:	e8 92 7c ff ff       	call   c000cd70 <Fs::getcwd(Process*, char*, int)>
c00150de:	83 c4 1c             	add    esp,0x1c
c00150e1:	99                   	cdq    
c00150e2:	c3                   	ret    

c00150e3 <Sys::getPID(regs*)>:
c00150e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ed:	99                   	cdq    
c00150ee:	c3                   	ret    

c00150ef <Sys::getRAMData(regs*)>:
c00150ef:	8b 0d b4 60 02 c0    	mov    ecx,DWORD PTR ds:0xc00260b4
c00150f5:	69 05 b0 60 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00260b0,0xc8
c00150ff:	99                   	cdq    
c0015100:	f7 f9                	idiv   ecx
c0015102:	c1 e0 18             	shl    eax,0x18
c0015105:	09 c8                	or     eax,ecx
c0015107:	99                   	cdq    
c0015108:	c3                   	ret    

c0015109 <Sys::getVGAPtr(regs*)>:
c0015109:	55                   	push   ebp
c001510a:	57                   	push   edi
c001510b:	56                   	push   esi
c001510c:	53                   	push   ebx
c001510d:	83 ec 18             	sub    esp,0x18
c0015110:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015114:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015117:	e8 a8 30 00 00       	call   c00181c4 <Thr::processFromPID(int)>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	89 c1                	mov    ecx,eax
c0015121:	b8 01 00 00 00       	mov    eax,0x1
c0015126:	85 c9                	test   ecx,ecx
c0015128:	74 59                	je     c0015183 <Sys::getVGAPtr(regs*)+0x7a>
c001512a:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015130:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015134:	74 0c                	je     c0015142 <Sys::getVGAPtr(regs*)+0x39>
c0015136:	83 ec 0c             	sub    esp,0xc
c0015139:	53                   	push   ebx
c001513a:	e8 1e 56 ff ff       	call   c000a75d <setActiveTerminal(VgaText*)>
c001513f:	83 c4 10             	add    esp,0x10
c0015142:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015145:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015148:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001514d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001514f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015152:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015155:	81 c3 82 00 00 00    	add    ebx,0x82
c001515b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015161:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015164:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015167:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001516d:	50                   	push   eax
c001516e:	50                   	push   eax
c001516f:	53                   	push   ebx
c0015170:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015173:	05 a8 0f 00 00       	add    eax,0xfa8
c0015178:	50                   	push   eax
c0015179:	e8 c2 b5 fe ff       	call   c0000740 <strcpy>
c001517e:	83 c4 10             	add    esp,0x10
c0015181:	31 c0                	xor    eax,eax
c0015183:	83 c4 0c             	add    esp,0xc
c0015186:	31 d2                	xor    edx,edx
c0015188:	5b                   	pop    ebx
c0015189:	5e                   	pop    esi
c001518a:	5f                   	pop    edi
c001518b:	5d                   	pop    ebp
c001518c:	c3                   	ret    

c001518d <Sys::loadDLL(regs*)>:
c001518d:	56                   	push   esi
c001518e:	53                   	push   ebx
c001518f:	31 d2                	xor    edx,edx
c0015191:	51                   	push   ecx
c0015192:	b8 01 00 00 00       	mov    eax,0x1
c0015197:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001519b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001519f:	0f 84 8c 00 00 00    	je     c0015231 <Sys::loadDLL(regs*)+0xa4>
c00151a5:	83 ec 0c             	sub    esp,0xc
c00151a8:	68 14 01 00 00       	push   0x114
c00151ad:	e8 f1 47 ff ff       	call   c00099a3 <malloc>
c00151b2:	83 c4 0c             	add    esp,0xc
c00151b5:	89 c3                	mov    ebx,eax
c00151b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151bc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00151bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00151c2:	53                   	push   ebx
c00151c3:	e8 a6 7d ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	31 d2                	xor    edx,edx
c00151cd:	b8 02 00 00 00       	mov    eax,0x2
c00151d2:	85 db                	test   ebx,ebx
c00151d4:	74 5b                	je     c0015231 <Sys::loadDLL(regs*)+0xa4>
c00151d6:	83 ec 0c             	sub    esp,0xc
c00151d9:	53                   	push   ebx
c00151da:	e8 61 80 ff ff       	call   c000d240 <File::exists()>
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	84 c0                	test   al,al
c00151e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151e6:	75 11                	jne    c00151f9 <Sys::loadDLL(regs*)+0x6c>
c00151e8:	83 ec 0c             	sub    esp,0xc
c00151eb:	53                   	push   ebx
c00151ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151ef:	83 c4 10             	add    esp,0x10
c00151f2:	b8 03 00 00 00       	mov    eax,0x3
c00151f7:	eb 36                	jmp    c001522f <Sys::loadDLL(regs*)+0xa2>
c00151f9:	83 ec 0c             	sub    esp,0xc
c00151fc:	53                   	push   ebx
c00151fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015200:	58                   	pop    eax
c0015201:	5a                   	pop    edx
c0015202:	6a 00                	push   0x0
c0015204:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015207:	e8 0a 22 00 00       	call   c0017416 <Thr::loadDLL(char const*, bool)>
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	89 c1                	mov    ecx,eax
c0015211:	31 d2                	xor    edx,edx
c0015213:	b8 04 00 00 00       	mov    eax,0x4
c0015218:	85 c9                	test   ecx,ecx
c001521a:	74 15                	je     c0015231 <Sys::loadDLL(regs*)+0xa4>
c001521c:	53                   	push   ebx
c001521d:	53                   	push   ebx
c001521e:	ff 35 68 60 02 c0    	push   DWORD PTR ds:0xc0026068
c0015224:	51                   	push   ecx
c0015225:	e8 1d 24 00 00       	call   c0017647 <Thr::executeDLL(unsigned long, void*)>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	31 c0                	xor    eax,eax
c001522f:	31 d2                	xor    edx,edx
c0015231:	59                   	pop    ecx
c0015232:	5b                   	pop    ebx
c0015233:	5e                   	pop    esi
c0015234:	c3                   	ret    

c0015235 <Sys::read(regs*)>:
c0015235:	57                   	push   edi
c0015236:	56                   	push   esi
c0015237:	53                   	push   ebx
c0015238:	83 ec 10             	sub    esp,0x10
c001523b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001523f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015242:	83 f8 02             	cmp    eax,0x2
c0015245:	77 10                	ja     c0015257 <Sys::read(regs*)+0x22>
c0015247:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001524c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001524f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015255:	eb 0e                	jmp    c0015265 <Sys::read(regs*)+0x30>
c0015257:	83 ec 0c             	sub    esp,0xc
c001525a:	50                   	push   eax
c001525b:	e8 73 62 ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c0015260:	83 c4 10             	add    esp,0x10
c0015263:	89 c1                	mov    ecx,eax
c0015265:	83 c8 ff             	or     eax,0xffffffff
c0015268:	85 c9                	test   ecx,ecx
c001526a:	89 c2                	mov    edx,eax
c001526c:	74 28                	je     c0015296 <Sys::read(regs*)+0x61>
c001526e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015276:	31 ff                	xor    edi,edi
c0015278:	83 ec 0c             	sub    esp,0xc
c001527b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001527d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015281:	52                   	push   edx
c0015282:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015285:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015288:	57                   	push   edi
c0015289:	56                   	push   esi
c001528a:	51                   	push   ecx
c001528b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001528e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015292:	83 c4 20             	add    esp,0x20
c0015295:	99                   	cdq    
c0015296:	83 c4 10             	add    esp,0x10
c0015299:	5b                   	pop    ebx
c001529a:	5e                   	pop    esi
c001529b:	5f                   	pop    edi
c001529c:	c3                   	ret    

c001529d <Sys::sbrk(regs*)>:
c001529d:	56                   	push   esi
c001529e:	53                   	push   ebx
c001529f:	50                   	push   eax
c00152a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152ac:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00152af:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00152b5:	85 db                	test   ebx,ebx
c00152b7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00152ba:	74 02                	je     c00152be <Sys::sbrk(regs*)+0x21>
c00152bc:	79 06                	jns    c00152c4 <Sys::sbrk(regs*)+0x27>
c00152be:	89 f0                	mov    eax,esi
c00152c0:	31 d2                	xor    edx,edx
c00152c2:	eb 2a                	jmp    c00152ee <Sys::sbrk(regs*)+0x51>
c00152c4:	83 c8 ff             	or     eax,0xffffffff
c00152c7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00152cd:	89 c2                	mov    edx,eax
c00152cf:	77 1d                	ja     c00152ee <Sys::sbrk(regs*)+0x51>
c00152d1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00152d7:	50                   	push   eax
c00152d8:	c1 ea 0c             	shr    edx,0xc
c00152db:	68 07 0c 00 00       	push   0xc07
c00152e0:	52                   	push   edx
c00152e1:	51                   	push   ecx
c00152e2:	e8 eb 6a ff ff       	call   c000bdd2 <VAS::allocatePages(int, int)>
c00152e7:	89 f0                	mov    eax,esi
c00152e9:	31 d2                	xor    edx,edx
c00152eb:	83 c4 10             	add    esp,0x10
c00152ee:	59                   	pop    ecx
c00152ef:	5b                   	pop    ebx
c00152f0:	5e                   	pop    esi
c00152f1:	c3                   	ret    

c00152f2 <Sys::setCwd(regs*)>:
c00152f2:	83 ec 14             	sub    esp,0x14
c00152f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00152fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015301:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015304:	e8 d6 7f ff ff       	call   c000d2df <Fs::setcwd(Process*, char*)>
c0015309:	83 c4 1c             	add    esp,0x1c
c001530c:	99                   	cdq    
c001530d:	c3                   	ret    

c001530e <Sys::setTime(regs*)>:
c001530e:	55                   	push   ebp
c001530f:	31 c9                	xor    ecx,ecx
c0015311:	57                   	push   edi
c0015312:	bd 0c 00 00 00       	mov    ebp,0xc
c0015317:	56                   	push   esi
c0015318:	53                   	push   ebx
c0015319:	31 db                	xor    ebx,ebx
c001531b:	83 ec 10             	sub    esp,0x10
c001531e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015322:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015325:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015328:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001532b:	89 c2                	mov    edx,eax
c001532d:	66 81 ef 6c 07       	sub    di,0x76c
c0015332:	83 e2 1f             	and    edx,0x1f
c0015335:	c1 e7 10             	shl    edi,0x10
c0015338:	42                   	inc    edx
c0015339:	c1 e8 05             	shr    eax,0x5
c001533c:	88 d1                	mov    cl,dl
c001533e:	31 d2                	xor    edx,edx
c0015340:	f7 f5                	div    ebp
c0015342:	89 dd                	mov    ebp,ebx
c0015344:	88 d5                	mov    ch,dl
c0015346:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001534c:	0f b7 c1             	movzx  eax,cx
c001534f:	31 d2                	xor    edx,edx
c0015351:	09 f8                	or     eax,edi
c0015353:	bf 3c 00 00 00       	mov    edi,0x3c
c0015358:	89 c1                	mov    ecx,eax
c001535a:	89 f0                	mov    eax,esi
c001535c:	f7 f7                	div    edi
c001535e:	c1 e2 10             	shl    edx,0x10
c0015361:	09 d5                	or     ebp,edx
c0015363:	31 d2                	xor    edx,edx
c0015365:	89 eb                	mov    ebx,ebp
c0015367:	f7 f7                	div    edi
c0015369:	bf 10 0e 00 00       	mov    edi,0xe10
c001536e:	88 d7                	mov    bh,dl
c0015370:	89 f0                	mov    eax,esi
c0015372:	31 d2                	xor    edx,edx
c0015374:	f7 f7                	div    edi
c0015376:	bf 18 00 00 00       	mov    edi,0x18
c001537b:	31 d2                	xor    edx,edx
c001537d:	f7 f7                	div    edi
c001537f:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0015384:	88 d3                	mov    bl,dl
c0015386:	53                   	push   ebx
c0015387:	51                   	push   ecx
c0015388:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001538e:	e8 91 87 ff ff       	call   c000db24 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015393:	83 c4 1c             	add    esp,0x1c
c0015396:	83 f0 01             	xor    eax,0x1
c0015399:	5b                   	pop    ebx
c001539a:	0f b6 c0             	movzx  eax,al
c001539d:	5e                   	pop    esi
c001539e:	31 d2                	xor    edx,edx
c00153a0:	5f                   	pop    edi
c00153a1:	5d                   	pop    ebp
c00153a2:	c3                   	ret    

c00153a3 <Sys::timezone(regs*)>:
c00153a3:	53                   	push   ebx
c00153a4:	83 ec 08             	sub    esp,0x8
c00153a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153ab:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00153af:	75 17                	jne    c00153c8 <Sys::timezone(regs*)+0x25>
c00153b1:	83 ec 0c             	sub    esp,0xc
c00153b4:	68 89 41 02 c0       	push   0xc0024189
c00153b9:	e8 46 76 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00153be:	83 c8 ff             	or     eax,0xffffffff
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	89 c2                	mov    edx,eax
c00153c6:	eb 20                	jmp    c00153e8 <Sys::timezone(regs*)+0x45>
c00153c8:	83 ec 0c             	sub    esp,0xc
c00153cb:	68 9e 41 02 c0       	push   0xc002419e
c00153d0:	e8 2f 76 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00153d5:	58                   	pop    eax
c00153d6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00153d9:	e8 a8 84 ff ff       	call   c000d886 <User::loadClockSettings(int)>
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	b8 01 00 00 00       	mov    eax,0x1
c00153e6:	31 d2                	xor    edx,edx
c00153e8:	83 c4 08             	add    esp,0x8
c00153eb:	5b                   	pop    ebx
c00153ec:	c3                   	ret    

c00153ed <Sys::write(regs*)>:
c00153ed:	57                   	push   edi
c00153ee:	56                   	push   esi
c00153ef:	53                   	push   ebx
c00153f0:	83 ec 10             	sub    esp,0x10
c00153f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00153f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00153fa:	83 f8 02             	cmp    eax,0x2
c00153fd:	77 10                	ja     c001540f <Sys::write(regs*)+0x22>
c00153ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015404:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015407:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001540d:	eb 0e                	jmp    c001541d <Sys::write(regs*)+0x30>
c001540f:	83 ec 0c             	sub    esp,0xc
c0015412:	50                   	push   eax
c0015413:	e8 bb 60 ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	89 c1                	mov    ecx,eax
c001541d:	83 c8 ff             	or     eax,0xffffffff
c0015420:	85 c9                	test   ecx,ecx
c0015422:	89 c2                	mov    edx,eax
c0015424:	74 28                	je     c001544e <Sys::write(regs*)+0x61>
c0015426:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001542e:	31 ff                	xor    edi,edi
c0015430:	83 ec 0c             	sub    esp,0xc
c0015433:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015435:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015439:	52                   	push   edx
c001543a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001543d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015440:	57                   	push   edi
c0015441:	56                   	push   esi
c0015442:	51                   	push   ecx
c0015443:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015446:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001544a:	83 c4 20             	add    esp,0x20
c001544d:	99                   	cdq    
c001544e:	83 c4 10             	add    esp,0x10
c0015451:	5b                   	pop    ebx
c0015452:	5e                   	pop    esi
c0015453:	5f                   	pop    edi
c0015454:	c3                   	ret    

c0015455 <Sys::wsbe(regs*)>:
c0015455:	57                   	push   edi
c0015456:	b9 0b 00 00 00       	mov    ecx,0xb
c001545b:	56                   	push   esi
c001545c:	be dd 41 02 c0       	mov    esi,0xc00241dd
c0015461:	53                   	push   ebx
c0015462:	83 ec 30             	sub    esp,0x30
c0015465:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015469:	fc                   	cld    
c001546a:	83 ec 0c             	sub    esp,0xc
c001546d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001546f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015478:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001547b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015481:	8b 06                	mov    eax,DWORD PTR [esi]
c0015483:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015486:	57                   	push   edi
c0015487:	e8 14 b2 fe ff       	call   c00006a0 <strlen>
c001548c:	5a                   	pop    edx
c001548d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015491:	52                   	push   edx
c0015492:	31 d2                	xor    edx,edx
c0015494:	57                   	push   edi
c0015495:	52                   	push   edx
c0015496:	50                   	push   eax
c0015497:	56                   	push   esi
c0015498:	ff d3                	call   ebx
c001549a:	83 c4 14             	add    esp,0x14
c001549d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00154a1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00154a4:	e8 db 31 00 00       	call   c0018684 <terminateTask(int)>
c00154a9:	83 c4 40             	add    esp,0x40
c00154ac:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00154b1:	5b                   	pop    ebx
c00154b2:	31 d2                	xor    edx,edx
c00154b4:	5e                   	pop    esi
c00154b5:	5f                   	pop    edi
c00154b6:	c3                   	ret    

c00154b7 <Sys::yield(regs*)>:
c00154b7:	83 ec 0c             	sub    esp,0xc
c00154ba:	fa                   	cli    
c00154bb:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00154c1:	e8 0a 29 00 00       	call   c0017dd0 <schedule()>
c00154c6:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00154cb:	48                   	dec    eax
c00154cc:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00154d1:	75 01                	jne    c00154d4 <Sys::yield(regs*)+0x1d>
c00154d3:	fb                   	sti    
c00154d4:	8b 15 cc 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266cc
c00154da:	83 c4 0c             	add    esp,0xc
c00154dd:	89 d0                	mov    eax,edx
c00154df:	c1 ea 11             	shr    edx,0x11
c00154e2:	c1 e0 07             	shl    eax,0x7
c00154e5:	25 80 30 0f 00       	and    eax,0xf3080
c00154ea:	31 d0                	xor    eax,edx
c00154ec:	31 d2                	xor    edx,edx
c00154ee:	c3                   	ret    

c00154ef <sysCallSeekDir(regs*)>:
c00154ef:	31 c0                	xor    eax,eax
c00154f1:	31 d2                	xor    edx,edx
c00154f3:	c3                   	ret    

c00154f4 <sysCallTellDir(regs*)>:
c00154f4:	31 c0                	xor    eax,eax
c00154f6:	31 d2                	xor    edx,edx
c00154f8:	c3                   	ret    

c00154f9 <sysCallVerify(regs*)>:
c00154f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154fd:	31 d2                	xor    edx,edx
c00154ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015502:	c3                   	ret    

c0015503 <sysCallGetArgc(regs*)>:
c0015503:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015508:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001550b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015511:	99                   	cdq    
c0015512:	c3                   	ret    

c0015513 <sysFormatDisk(regs*)>:
c0015513:	56                   	push   esi
c0015514:	53                   	push   ebx
c0015515:	53                   	push   ebx
c0015516:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001551a:	8b 1d d4 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261d4
c0015520:	eb 25                	jmp    c0015547 <sysFormatDisk(regs*)+0x34>
c0015522:	83 ec 0c             	sub    esp,0xc
c0015525:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015528:	8b 13                	mov    edx,DWORD PTR [ebx]
c001552a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001552d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015530:	50                   	push   eax
c0015531:	ff 34 85 60 66 02 c0 	push   DWORD PTR [eax*4-0x3ffd99a0]
c0015538:	53                   	push   ebx
c0015539:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001553c:	83 c4 20             	add    esp,0x20
c001553f:	83 f8 08             	cmp    eax,0x8
c0015542:	75 12                	jne    c0015556 <sysFormatDisk(regs*)+0x43>
c0015544:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015547:	85 db                	test   ebx,ebx
c0015549:	75 d7                	jne    c0015522 <sysFormatDisk(regs*)+0xf>
c001554b:	59                   	pop    ecx
c001554c:	b8 03 00 00 00       	mov    eax,0x3
c0015551:	31 d2                	xor    edx,edx
c0015553:	5b                   	pop    ebx
c0015554:	5e                   	pop    esi
c0015555:	c3                   	ret    
c0015556:	85 c0                	test   eax,eax
c0015558:	74 1b                	je     c0015575 <sysFormatDisk(regs*)+0x62>
c001555a:	83 f8 09             	cmp    eax,0x9
c001555d:	74 0b                	je     c001556a <sysFormatDisk(regs*)+0x57>
c001555f:	59                   	pop    ecx
c0015560:	b8 02 00 00 00       	mov    eax,0x2
c0015565:	31 d2                	xor    edx,edx
c0015567:	5b                   	pop    ebx
c0015568:	5e                   	pop    esi
c0015569:	c3                   	ret    
c001556a:	59                   	pop    ecx
c001556b:	b8 01 00 00 00       	mov    eax,0x1
c0015570:	31 d2                	xor    edx,edx
c0015572:	5b                   	pop    ebx
c0015573:	5e                   	pop    esi
c0015574:	c3                   	ret    
c0015575:	59                   	pop    ecx
c0015576:	31 c0                	xor    eax,eax
c0015578:	31 d2                	xor    edx,edx
c001557a:	5b                   	pop    ebx
c001557b:	5e                   	pop    esi
c001557c:	c3                   	ret    

c001557d <sysSetDiskVolumeLabel(regs*)>:
c001557d:	56                   	push   esi
c001557e:	53                   	push   ebx
c001557f:	53                   	push   ebx
c0015580:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015584:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015587:	83 f8 19             	cmp    eax,0x19
c001558a:	77 2d                	ja     c00155b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001558c:	8b 0c 85 60 66 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd99a0]
c0015593:	85 c9                	test   ecx,ecx
c0015595:	74 22                	je     c00155b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015597:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001559a:	85 db                	test   ebx,ebx
c001559c:	74 1b                	je     c00155b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001559e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00155a4:	85 d2                	test   edx,edx
c00155a6:	74 11                	je     c00155b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00155a8:	8b 32                	mov    esi,DWORD PTR [edx]
c00155aa:	53                   	push   ebx
c00155ab:	50                   	push   eax
c00155ac:	51                   	push   ecx
c00155ad:	52                   	push   edx
c00155ae:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00155b1:	83 c4 10             	add    esp,0x10
c00155b4:	99                   	cdq    
c00155b5:	59                   	pop    ecx
c00155b6:	5b                   	pop    ebx
c00155b7:	5e                   	pop    esi
c00155b8:	c3                   	ret    
c00155b9:	59                   	pop    ecx
c00155ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00155bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00155c4:	5b                   	pop    ebx
c00155c5:	5e                   	pop    esi
c00155c6:	c3                   	ret    

c00155c7 <sysGetDiskVolumeLabel(regs*)>:
c00155c7:	57                   	push   edi
c00155c8:	56                   	push   esi
c00155c9:	53                   	push   ebx
c00155ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00155d1:	83 fa 19             	cmp    edx,0x19
c00155d4:	77 38                	ja     c001560e <sysGetDiskVolumeLabel(regs*)+0x47>
c00155d6:	8b 0c 95 60 66 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd99a0]
c00155dd:	85 c9                	test   ecx,ecx
c00155df:	74 2d                	je     c001560e <sysGetDiskVolumeLabel(regs*)+0x47>
c00155e1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00155e4:	85 db                	test   ebx,ebx
c00155e6:	74 26                	je     c001560e <sysGetDiskVolumeLabel(regs*)+0x47>
c00155e8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00155eb:	85 f6                	test   esi,esi
c00155ed:	74 1f                	je     c001560e <sysGetDiskVolumeLabel(regs*)+0x47>
c00155ef:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00155f5:	85 c0                	test   eax,eax
c00155f7:	74 15                	je     c001560e <sysGetDiskVolumeLabel(regs*)+0x47>
c00155f9:	83 ec 0c             	sub    esp,0xc
c00155fc:	8b 38                	mov    edi,DWORD PTR [eax]
c00155fe:	56                   	push   esi
c00155ff:	53                   	push   ebx
c0015600:	52                   	push   edx
c0015601:	51                   	push   ecx
c0015602:	50                   	push   eax
c0015603:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015606:	83 c4 20             	add    esp,0x20
c0015609:	99                   	cdq    
c001560a:	5b                   	pop    ebx
c001560b:	5e                   	pop    esi
c001560c:	5f                   	pop    edi
c001560d:	c3                   	ret    
c001560e:	5b                   	pop    ebx
c001560f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015614:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015619:	5e                   	pop    esi
c001561a:	5f                   	pop    edi
c001561b:	c3                   	ret    

c001561c <sysShutdown(regs*)>:
c001561c:	83 ec 0c             	sub    esp,0xc
c001561f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015623:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015626:	85 c0                	test   eax,eax
c0015628:	74 18                	je     c0015642 <sysShutdown(regs*)+0x26>
c001562a:	83 f8 01             	cmp    eax,0x1
c001562d:	74 38                	je     c0015667 <sysShutdown(regs*)+0x4b>
c001562f:	83 f8 02             	cmp    eax,0x2
c0015632:	74 24                	je     c0015658 <sysShutdown(regs*)+0x3c>
c0015634:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015639:	ba ff ff ff ff       	mov    edx,0xffffffff
c001563e:	83 c4 0c             	add    esp,0xc
c0015641:	c3                   	ret    
c0015642:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0015647:	8b 10                	mov    edx,DWORD PTR [eax]
c0015649:	6a 00                	push   0x0
c001564b:	6a 00                	push   0x0
c001564d:	6a 00                	push   0x0
c001564f:	50                   	push   eax
c0015650:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	eb dc                	jmp    c0015634 <sysShutdown(regs*)+0x18>
c0015658:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001565d:	8b 10                	mov    edx,DWORD PTR [eax]
c001565f:	6a 00                	push   0x0
c0015661:	6a 00                	push   0x0
c0015663:	6a 01                	push   0x1
c0015665:	eb e8                	jmp    c001564f <sysShutdown(regs*)+0x33>
c0015667:	a1 e0 66 02 c0       	mov    eax,ds:0xc00266e0
c001566c:	85 c0                	test   eax,eax
c001566e:	74 02                	je     c0015672 <sysShutdown(regs*)+0x56>
c0015670:	ff d0                	call   eax
c0015672:	31 c0                	xor    eax,eax
c0015674:	31 d2                	xor    edx,edx
c0015676:	83 c4 0c             	add    esp,0xc
c0015679:	c3                   	ret    

c001567a <sysCallRealpath(regs*)>:
c001567a:	83 ec 0c             	sub    esp,0xc
c001567d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015681:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015684:	85 d2                	test   edx,edx
c0015686:	74 07                	je     c001568f <sysCallRealpath(regs*)+0x15>
c0015688:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001568b:	85 c0                	test   eax,eax
c001568d:	75 0b                	jne    c001569a <sysCallRealpath(regs*)+0x20>
c001568f:	b8 01 00 00 00       	mov    eax,0x1
c0015694:	31 d2                	xor    edx,edx
c0015696:	83 c4 0c             	add    esp,0xc
c0015699:	c3                   	ret    
c001569a:	51                   	push   ecx
c001569b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00156a1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00156a4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00156aa:	51                   	push   ecx
c00156ab:	52                   	push   edx
c00156ac:	50                   	push   eax
c00156ad:	e8 12 77 ff ff       	call   c000cdc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00156b2:	83 c4 10             	add    esp,0x10
c00156b5:	31 c0                	xor    eax,eax
c00156b7:	31 d2                	xor    edx,edx
c00156b9:	83 c4 0c             	add    esp,0xc
c00156bc:	c3                   	ret    

c00156bd <sysCallReadDir(regs*)>:
c00156bd:	53                   	push   ebx
c00156be:	83 ec 18             	sub    esp,0x18
c00156c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00156c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00156c8:	83 f8 02             	cmp    eax,0x2
c00156cb:	76 60                	jbe    c001572d <sysCallReadDir(regs*)+0x70>
c00156cd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00156d4:	77 48                	ja     c001571e <sysCallReadDir(regs*)+0x61>
c00156d6:	83 ec 0c             	sub    esp,0xc
c00156d9:	50                   	push   eax
c00156da:	e8 f4 5d ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c00156df:	83 c4 10             	add    esp,0x10
c00156e2:	85 c0                	test   eax,eax
c00156e4:	74 38                	je     c001571e <sysCallReadDir(regs*)+0x61>
c00156e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00156ee:	83 ec 0c             	sub    esp,0xc
c00156f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00156f3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00156f7:	51                   	push   ecx
c00156f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156fb:	6a 00                	push   0x0
c00156fd:	68 10 01 00 00       	push   0x110
c0015702:	50                   	push   eax
c0015703:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015706:	83 c4 20             	add    esp,0x20
c0015709:	85 c0                	test   eax,eax
c001570b:	74 29                	je     c0015736 <sysCallReadDir(regs*)+0x79>
c001570d:	83 f8 07             	cmp    eax,0x7
c0015710:	74 1b                	je     c001572d <sysCallReadDir(regs*)+0x70>
c0015712:	b8 02 00 00 00       	mov    eax,0x2
c0015717:	31 d2                	xor    edx,edx
c0015719:	83 c4 18             	add    esp,0x18
c001571c:	5b                   	pop    ebx
c001571d:	c3                   	ret    
c001571e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015723:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015728:	83 c4 18             	add    esp,0x18
c001572b:	5b                   	pop    ebx
c001572c:	c3                   	ret    
c001572d:	b8 01 00 00 00       	mov    eax,0x1
c0015732:	31 d2                	xor    edx,edx
c0015734:	eb e3                	jmp    c0015719 <sysCallReadDir(regs*)+0x5c>
c0015736:	31 c0                	xor    eax,eax
c0015738:	31 d2                	xor    edx,edx
c001573a:	eb dd                	jmp    c0015719 <sysCallReadDir(regs*)+0x5c>

c001573c <sysCallIsATTY(regs*)>:
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015743:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015746:	83 f8 02             	cmp    eax,0x2
c0015749:	76 07                	jbe    c0015752 <sysCallIsATTY(regs*)+0x16>
c001574b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015750:	75 26                	jne    c0015778 <sysCallIsATTY(regs*)+0x3c>
c0015752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015757:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001575a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015760:	85 c0                	test   eax,eax
c0015762:	74 24                	je     c0015788 <sysCallIsATTY(regs*)+0x4c>
c0015764:	83 ec 0c             	sub    esp,0xc
c0015767:	8b 10                	mov    edx,DWORD PTR [eax]
c0015769:	50                   	push   eax
c001576a:	ff 12                	call   DWORD PTR [edx]
c001576c:	31 d2                	xor    edx,edx
c001576e:	0f b6 c0             	movzx  eax,al
c0015771:	83 c4 10             	add    esp,0x10
c0015774:	83 c4 0c             	add    esp,0xc
c0015777:	c3                   	ret    
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	50                   	push   eax
c001577c:	e8 52 5d ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c0015781:	83 c4 10             	add    esp,0x10
c0015784:	85 c0                	test   eax,eax
c0015786:	75 dc                	jne    c0015764 <sysCallIsATTY(regs*)+0x28>
c0015788:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001578d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015792:	83 c4 0c             	add    esp,0xc
c0015795:	c3                   	ret    

c0015796 <sysCallSeek(regs*)>:
c0015796:	53                   	push   ebx
c0015797:	83 ec 08             	sub    esp,0x8
c001579a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001579e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00157a1:	8d 50 fd             	lea    edx,[eax-0x3]
c00157a4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00157aa:	77 32                	ja     c00157de <sysCallSeek(regs*)+0x48>
c00157ac:	83 ec 0c             	sub    esp,0xc
c00157af:	50                   	push   eax
c00157b0:	e8 1e 5d ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c00157b5:	83 c4 0c             	add    esp,0xc
c00157b8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00157bb:	31 db                	xor    ebx,ebx
c00157bd:	53                   	push   ebx
c00157be:	51                   	push   ecx
c00157bf:	50                   	push   eax
c00157c0:	e8 cb 78 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c00157c5:	83 c4 10             	add    esp,0x10
c00157c8:	85 c0                	test   eax,eax
c00157ca:	0f 95 c0             	setne  al
c00157cd:	31 d2                	xor    edx,edx
c00157cf:	0f b6 c0             	movzx  eax,al
c00157d2:	f7 d8                	neg    eax
c00157d4:	83 d2 00             	adc    edx,0x0
c00157d7:	83 c4 08             	add    esp,0x8
c00157da:	f7 da                	neg    edx
c00157dc:	5b                   	pop    ebx
c00157dd:	c3                   	ret    
c00157de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157e8:	83 c4 08             	add    esp,0x8
c00157eb:	5b                   	pop    ebx
c00157ec:	c3                   	ret    

c00157ed <sysCallTell(regs*)>:
c00157ed:	53                   	push   ebx
c00157ee:	83 ec 08             	sub    esp,0x8
c00157f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00157f8:	83 f8 02             	cmp    eax,0x2
c00157fb:	76 4d                	jbe    c001584a <sysCallTell(regs*)+0x5d>
c00157fd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015802:	76 19                	jbe    c001581d <sysCallTell(regs*)+0x30>
c0015804:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015807:	31 d2                	xor    edx,edx
c0015809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001580f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015816:	31 c0                	xor    eax,eax
c0015818:	83 c4 08             	add    esp,0x8
c001581b:	5b                   	pop    ebx
c001581c:	c3                   	ret    
c001581d:	83 ec 0c             	sub    esp,0xc
c0015820:	50                   	push   eax
c0015821:	e8 ad 5c ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c0015826:	5a                   	pop    edx
c0015827:	59                   	pop    ecx
c0015828:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001582b:	50                   	push   eax
c001582c:	e8 b5 78 ff ff       	call   c000d0e6 <File::tell(unsigned long long*)>
c0015831:	83 c4 10             	add    esp,0x10
c0015834:	85 c0                	test   eax,eax
c0015836:	0f 95 c0             	setne  al
c0015839:	31 d2                	xor    edx,edx
c001583b:	0f b6 c0             	movzx  eax,al
c001583e:	f7 d8                	neg    eax
c0015840:	83 d2 00             	adc    edx,0x0
c0015843:	83 c4 08             	add    esp,0x8
c0015846:	f7 da                	neg    edx
c0015848:	5b                   	pop    ebx
c0015849:	c3                   	ret    
c001584a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001584f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015854:	83 c4 08             	add    esp,0x8
c0015857:	5b                   	pop    ebx
c0015858:	c3                   	ret    

c0015859 <sysCallSize(regs*)>:
c0015859:	53                   	push   ebx
c001585a:	83 ec 18             	sub    esp,0x18
c001585d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015861:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015864:	83 f8 02             	cmp    eax,0x2
c0015867:	76 53                	jbe    c00158bc <sysCallSize(regs*)+0x63>
c0015869:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001586e:	76 19                	jbe    c0015889 <sysCallSize(regs*)+0x30>
c0015870:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015873:	31 d2                	xor    edx,edx
c0015875:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001587b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015882:	31 c0                	xor    eax,eax
c0015884:	83 c4 18             	add    esp,0x18
c0015887:	5b                   	pop    ebx
c0015888:	c3                   	ret    
c0015889:	83 ec 0c             	sub    esp,0xc
c001588c:	50                   	push   eax
c001588d:	e8 41 5c ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c0015892:	83 c4 0c             	add    esp,0xc
c0015895:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015899:	52                   	push   edx
c001589a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001589d:	50                   	push   eax
c001589e:	e8 db 79 ff ff       	call   c000d27e <File::stat(unsigned long long*, bool*)>
c00158a3:	83 c4 10             	add    esp,0x10
c00158a6:	85 c0                	test   eax,eax
c00158a8:	0f 95 c0             	setne  al
c00158ab:	31 d2                	xor    edx,edx
c00158ad:	0f b6 c0             	movzx  eax,al
c00158b0:	f7 d8                	neg    eax
c00158b2:	83 d2 00             	adc    edx,0x0
c00158b5:	83 c4 18             	add    esp,0x18
c00158b8:	f7 da                	neg    edx
c00158ba:	5b                   	pop    ebx
c00158bb:	c3                   	ret    
c00158bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158c6:	83 c4 18             	add    esp,0x18
c00158c9:	5b                   	pop    ebx
c00158ca:	c3                   	ret    

c00158cb <sysCallSizeFromFilename(regs*)>:
c00158cb:	57                   	push   edi
c00158cc:	56                   	push   esi
c00158cd:	53                   	push   ebx
c00158ce:	83 ec 20             	sub    esp,0x20
c00158d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00158d5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00158d8:	83 fb 02             	cmp    ebx,0x2
c00158db:	0f 86 88 00 00 00    	jbe    c0015969 <sysCallSizeFromFilename(regs*)+0x9e>
c00158e1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00158e7:	76 1b                	jbe    c0015904 <sysCallSizeFromFilename(regs*)+0x39>
c00158e9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00158ec:	31 d2                	xor    edx,edx
c00158ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00158f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158fb:	83 c4 20             	add    esp,0x20
c00158fe:	31 c0                	xor    eax,eax
c0015900:	5b                   	pop    ebx
c0015901:	5e                   	pop    esi
c0015902:	5f                   	pop    edi
c0015903:	c3                   	ret    
c0015904:	83 ec 0c             	sub    esp,0xc
c0015907:	68 14 01 00 00       	push   0x114
c001590c:	e8 92 40 ff ff       	call   c00099a3 <malloc>
c0015911:	83 c4 0c             	add    esp,0xc
c0015914:	89 c7                	mov    edi,eax
c0015916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001591b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001591e:	53                   	push   ebx
c001591f:	57                   	push   edi
c0015920:	e8 49 76 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0015925:	83 c4 0c             	add    esp,0xc
c0015928:	8d 44 24 23          	lea    eax,[esp+0x23]
c001592c:	50                   	push   eax
c001592d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015930:	57                   	push   edi
c0015931:	e8 48 79 ff ff       	call   c000d27e <File::stat(unsigned long long*, bool*)>
c0015936:	83 c4 10             	add    esp,0x10
c0015939:	85 ff                	test   edi,edi
c001593b:	74 14                	je     c0015951 <sysCallSizeFromFilename(regs*)+0x86>
c001593d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015941:	8b 17                	mov    edx,DWORD PTR [edi]
c0015943:	83 ec 0c             	sub    esp,0xc
c0015946:	57                   	push   edi
c0015947:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015951:	85 c0                	test   eax,eax
c0015953:	0f 95 c0             	setne  al
c0015956:	31 d2                	xor    edx,edx
c0015958:	0f b6 c0             	movzx  eax,al
c001595b:	f7 d8                	neg    eax
c001595d:	83 d2 00             	adc    edx,0x0
c0015960:	83 c4 20             	add    esp,0x20
c0015963:	f7 da                	neg    edx
c0015965:	5b                   	pop    ebx
c0015966:	5e                   	pop    esi
c0015967:	5f                   	pop    edi
c0015968:	c3                   	ret    
c0015969:	83 c4 20             	add    esp,0x20
c001596c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015971:	5b                   	pop    ebx
c0015972:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015977:	5e                   	pop    esi
c0015978:	5f                   	pop    edi
c0015979:	c3                   	ret    

c001597a <sysCallClose(regs*)>:
c001597a:	53                   	push   ebx
c001597b:	83 ec 08             	sub    esp,0x8
c001597e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015982:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015985:	83 f8 02             	cmp    eax,0x2
c0015988:	76 41                	jbe    c00159cb <sysCallClose(regs*)+0x51>
c001598a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015990:	83 fa 01             	cmp    edx,0x1
c0015993:	76 2d                	jbe    c00159c2 <sysCallClose(regs*)+0x48>
c0015995:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001599a:	77 2f                	ja     c00159cb <sysCallClose(regs*)+0x51>
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	50                   	push   eax
c00159a0:	e8 2e 5b ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c00159a5:	89 c3                	mov    ebx,eax
c00159a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00159aa:	e8 81 76 ff ff       	call   c000d030 <File::close()>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	85 db                	test   ebx,ebx
c00159b4:	74 0c                	je     c00159c2 <sysCallClose(regs*)+0x48>
c00159b6:	83 ec 0c             	sub    esp,0xc
c00159b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159bb:	53                   	push   ebx
c00159bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159bf:	83 c4 10             	add    esp,0x10
c00159c2:	31 c0                	xor    eax,eax
c00159c4:	31 d2                	xor    edx,edx
c00159c6:	83 c4 08             	add    esp,0x8
c00159c9:	5b                   	pop    ebx
c00159ca:	c3                   	ret    
c00159cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159d5:	83 c4 08             	add    esp,0x8
c00159d8:	5b                   	pop    ebx
c00159d9:	c3                   	ret    

c00159da <sysCallOpenDir(regs*)>:
c00159da:	56                   	push   esi
c00159db:	53                   	push   ebx
c00159dc:	53                   	push   ebx
c00159dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159e1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00159e4:	85 f6                	test   esi,esi
c00159e6:	74 59                	je     c0015a41 <sysCallOpenDir(regs*)+0x67>
c00159e8:	83 ec 0c             	sub    esp,0xc
c00159eb:	68 14 01 00 00       	push   0x114
c00159f0:	e8 ae 3f ff ff       	call   c00099a3 <malloc>
c00159f5:	83 c4 0c             	add    esp,0xc
c00159f8:	89 c6                	mov    esi,eax
c00159fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ff:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a02:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a05:	56                   	push   esi
c0015a06:	e8 0f 7a ff ff       	call   c000d41a <Directory::Directory(char const*, Process*)>
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	85 f6                	test   esi,esi
c0015a10:	74 2f                	je     c0015a41 <sysCallOpenDir(regs*)+0x67>
c0015a12:	83 ec 0c             	sub    esp,0xc
c0015a15:	56                   	push   esi
c0015a16:	e8 63 7a ff ff       	call   c000d47e <Directory::open()>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	85 c0                	test   eax,eax
c0015a20:	75 1f                	jne    c0015a41 <sysCallOpenDir(regs*)+0x67>
c0015a22:	83 ec 0c             	sub    esp,0xc
c0015a25:	56                   	push   esi
c0015a26:	e8 b3 57 ff ff       	call   c000b1de <UnixFile::getFileDescriptor()>
c0015a2b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015a2e:	83 c4 10             	add    esp,0x10
c0015a31:	89 02                	mov    DWORD PTR [edx],eax
c0015a33:	c1 f8 1f             	sar    eax,0x1f
c0015a36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a39:	31 c0                	xor    eax,eax
c0015a3b:	59                   	pop    ecx
c0015a3c:	31 d2                	xor    edx,edx
c0015a3e:	5b                   	pop    ebx
c0015a3f:	5e                   	pop    esi
c0015a40:	c3                   	ret    
c0015a41:	59                   	pop    ecx
c0015a42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a4c:	5b                   	pop    ebx
c0015a4d:	5e                   	pop    esi
c0015a4e:	c3                   	ret    

c0015a4f <sysCallCloseDir(regs*)>:
c0015a4f:	53                   	push   ebx
c0015a50:	83 ec 08             	sub    esp,0x8
c0015a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a5a:	8d 50 fd             	lea    edx,[eax-0x3]
c0015a5d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015a63:	77 2f                	ja     c0015a94 <sysCallCloseDir(regs*)+0x45>
c0015a65:	83 ec 0c             	sub    esp,0xc
c0015a68:	50                   	push   eax
c0015a69:	e8 65 5a ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c0015a6e:	89 c3                	mov    ebx,eax
c0015a70:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a73:	e8 62 7a ff ff       	call   c000d4da <Directory::close()>
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	85 db                	test   ebx,ebx
c0015a7d:	74 0c                	je     c0015a8b <sysCallCloseDir(regs*)+0x3c>
c0015a7f:	83 ec 0c             	sub    esp,0xc
c0015a82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a84:	53                   	push   ebx
c0015a85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	31 c0                	xor    eax,eax
c0015a8d:	31 d2                	xor    edx,edx
c0015a8f:	83 c4 08             	add    esp,0x8
c0015a92:	5b                   	pop    ebx
c0015a93:	c3                   	ret    
c0015a94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a9e:	83 c4 08             	add    esp,0x8
c0015aa1:	5b                   	pop    ebx
c0015aa2:	c3                   	ret    

c0015aa3 <sysCallMakeDir(regs*)>:
c0015aa3:	56                   	push   esi
c0015aa4:	53                   	push   ebx
c0015aa5:	83 ec 10             	sub    esp,0x10
c0015aa8:	68 14 01 00 00       	push   0x114
c0015aad:	e8 f1 3e ff ff       	call   c00099a3 <malloc>
c0015ab2:	83 c4 0c             	add    esp,0xc
c0015ab5:	89 c3                	mov    ebx,eax
c0015ab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015abc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015abf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ac3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015ac6:	53                   	push   ebx
c0015ac7:	e8 4e 79 ff ff       	call   c000d41a <Directory::Directory(char const*, Process*)>
c0015acc:	83 c4 10             	add    esp,0x10
c0015acf:	85 db                	test   ebx,ebx
c0015ad1:	74 32                	je     c0015b05 <sysCallMakeDir(regs*)+0x62>
c0015ad3:	83 ec 0c             	sub    esp,0xc
c0015ad6:	53                   	push   ebx
c0015ad7:	e8 82 7b ff ff       	call   c000d65e <Directory::create()>
c0015adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015adf:	89 c6                	mov    esi,eax
c0015ae1:	e8 f4 79 ff ff       	call   c000d4da <Directory::close()>
c0015ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ae8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015aeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	31 c0                	xor    eax,eax
c0015af3:	59                   	pop    ecx
c0015af4:	85 f6                	test   esi,esi
c0015af6:	5b                   	pop    ebx
c0015af7:	0f 95 c0             	setne  al
c0015afa:	5e                   	pop    esi
c0015afb:	31 d2                	xor    edx,edx
c0015afd:	f7 d8                	neg    eax
c0015aff:	83 d2 00             	adc    edx,0x0
c0015b02:	f7 da                	neg    edx
c0015b04:	c3                   	ret    
c0015b05:	59                   	pop    ecx
c0015b06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b10:	5b                   	pop    ebx
c0015b11:	5e                   	pop    esi
c0015b12:	c3                   	ret    

c0015b13 <sysCallWait(regs*)>:
c0015b13:	83 ec 10             	sub    esp,0x10
c0015b16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b1a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015b1d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b20:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015b23:	e8 b8 24 00 00       	call   c0017fe0 <waitTask(int, int*, int)>
c0015b28:	83 c4 1c             	add    esp,0x1c
c0015b2b:	99                   	cdq    
c0015b2c:	c3                   	ret    

c0015b2d <sysCallNotImpl(regs*)>:
c0015b2d:	83 ec 18             	sub    esp,0x18
c0015b30:	68 09 42 02 c0       	push   0xc0024209
c0015b35:	e8 09 e7 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0015b3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b44:	83 c4 1c             	add    esp,0x1c
c0015b47:	c3                   	ret    

c0015b48 <sysPanic(regs*)>:
c0015b48:	83 ec 18             	sub    esp,0x18
c0015b4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b4f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b52:	e8 ec e6 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0015b57:	b8 01 00 00 00       	mov    eax,0x1
c0015b5c:	31 d2                	xor    edx,edx
c0015b5e:	83 c4 1c             	add    esp,0x1c
c0015b61:	c3                   	ret    

c0015b62 <sysCallRmdir(regs*)>:
c0015b62:	56                   	push   esi
c0015b63:	53                   	push   ebx
c0015b64:	83 ec 20             	sub    esp,0x20
c0015b67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015b6b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015b6e:	68 14 01 00 00       	push   0x114
c0015b73:	e8 2b 3e ff ff       	call   c00099a3 <malloc>
c0015b78:	83 c4 0c             	add    esp,0xc
c0015b7b:	89 c3                	mov    ebx,eax
c0015b7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b82:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b85:	56                   	push   esi
c0015b86:	53                   	push   ebx
c0015b87:	e8 e2 73 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0015b8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b8f:	e8 b6 75 ff ff       	call   c000d14a <File::unlink()>
c0015b94:	83 c4 10             	add    esp,0x10
c0015b97:	85 db                	test   ebx,ebx
c0015b99:	74 14                	je     c0015baf <sysCallRmdir(regs*)+0x4d>
c0015b9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b9f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ba1:	83 ec 0c             	sub    esp,0xc
c0015ba4:	53                   	push   ebx
c0015ba5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015baf:	85 c0                	test   eax,eax
c0015bb1:	0f 95 c0             	setne  al
c0015bb4:	31 d2                	xor    edx,edx
c0015bb6:	0f b6 c0             	movzx  eax,al
c0015bb9:	f7 d8                	neg    eax
c0015bbb:	83 d2 00             	adc    edx,0x0
c0015bbe:	83 c4 14             	add    esp,0x14
c0015bc1:	f7 da                	neg    edx
c0015bc3:	5b                   	pop    ebx
c0015bc4:	5e                   	pop    esi
c0015bc5:	c3                   	ret    

c0015bc6 <sysCallUnlink(regs*)>:
c0015bc6:	56                   	push   esi
c0015bc7:	53                   	push   ebx
c0015bc8:	83 ec 20             	sub    esp,0x20
c0015bcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bcf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015bd2:	68 14 01 00 00       	push   0x114
c0015bd7:	e8 c7 3d ff ff       	call   c00099a3 <malloc>
c0015bdc:	83 c4 0c             	add    esp,0xc
c0015bdf:	89 c3                	mov    ebx,eax
c0015be1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015be6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015be9:	56                   	push   esi
c0015bea:	53                   	push   ebx
c0015beb:	e8 7e 73 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0015bf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bf3:	e8 52 75 ff ff       	call   c000d14a <File::unlink()>
c0015bf8:	83 c4 10             	add    esp,0x10
c0015bfb:	85 db                	test   ebx,ebx
c0015bfd:	74 14                	je     c0015c13 <sysCallUnlink(regs*)+0x4d>
c0015bff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c03:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c05:	83 ec 0c             	sub    esp,0xc
c0015c08:	53                   	push   ebx
c0015c09:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015c0c:	83 c4 10             	add    esp,0x10
c0015c0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c13:	85 c0                	test   eax,eax
c0015c15:	0f 95 c0             	setne  al
c0015c18:	31 d2                	xor    edx,edx
c0015c1a:	0f b6 c0             	movzx  eax,al
c0015c1d:	f7 d8                	neg    eax
c0015c1f:	83 d2 00             	adc    edx,0x0
c0015c22:	83 c4 14             	add    esp,0x14
c0015c25:	f7 da                	neg    edx
c0015c27:	5b                   	pop    ebx
c0015c28:	5e                   	pop    esi
c0015c29:	c3                   	ret    

c0015c2a <sysCallGetArgv(regs*)>:
c0015c2a:	83 ec 0c             	sub    esp,0xc
c0015c2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c31:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015c34:	85 c0                	test   eax,eax
c0015c36:	78 2b                	js     c0015c63 <sysCallGetArgv(regs*)+0x39>
c0015c38:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c3e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015c41:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015c47:	7d 1a                	jge    c0015c63 <sysCallGetArgv(regs*)+0x39>
c0015c49:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015c50:	85 c0                	test   eax,eax
c0015c52:	74 17                	je     c0015c6b <sysCallGetArgv(regs*)+0x41>
c0015c54:	83 ec 08             	sub    esp,0x8
c0015c57:	50                   	push   eax
c0015c58:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015c5b:	e8 e0 aa fe ff       	call   c0000740 <strcpy>
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	31 c0                	xor    eax,eax
c0015c65:	31 d2                	xor    edx,edx
c0015c67:	83 c4 0c             	add    esp,0xc
c0015c6a:	c3                   	ret    
c0015c6b:	b8 01 00 00 00       	mov    eax,0x1
c0015c70:	31 d2                	xor    edx,edx
c0015c72:	83 c4 0c             	add    esp,0xc
c0015c75:	c3                   	ret    

c0015c76 <sysCallTTYName(regs*)>:
c0015c76:	56                   	push   esi
c0015c77:	53                   	push   ebx
c0015c78:	53                   	push   ebx
c0015c79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c7d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015c80:	85 c0                	test   eax,eax
c0015c82:	74 5f                	je     c0015ce3 <sysCallTTYName(regs*)+0x6d>
c0015c84:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015c87:	83 f8 02             	cmp    eax,0x2
c0015c8a:	77 3e                	ja     c0015cca <sysCallTTYName(regs*)+0x54>
c0015c8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c94:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015c9a:	85 db                	test   ebx,ebx
c0015c9c:	74 45                	je     c0015ce3 <sysCallTTYName(regs*)+0x6d>
c0015c9e:	83 ec 0c             	sub    esp,0xc
c0015ca1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ca3:	53                   	push   ebx
c0015ca4:	ff 10                	call   DWORD PTR [eax]
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	84 c0                	test   al,al
c0015cab:	74 41                	je     c0015cee <sysCallTTYName(regs*)+0x78>
c0015cad:	83 ec 08             	sub    esp,0x8
c0015cb0:	81 c3 82 00 00 00    	add    ebx,0x82
c0015cb6:	53                   	push   ebx
c0015cb7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015cba:	e8 81 aa fe ff       	call   c0000740 <strcpy>
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	31 c0                	xor    eax,eax
c0015cc4:	59                   	pop    ecx
c0015cc5:	31 d2                	xor    edx,edx
c0015cc7:	5b                   	pop    ebx
c0015cc8:	5e                   	pop    esi
c0015cc9:	c3                   	ret    
c0015cca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015ccf:	74 bb                	je     c0015c8c <sysCallTTYName(regs*)+0x16>
c0015cd1:	83 ec 0c             	sub    esp,0xc
c0015cd4:	50                   	push   eax
c0015cd5:	e8 f9 57 ff ff       	call   c000b4d3 <getFromFileDescriptor(int)>
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	89 c3                	mov    ebx,eax
c0015cdf:	85 db                	test   ebx,ebx
c0015ce1:	75 bb                	jne    c0015c9e <sysCallTTYName(regs*)+0x28>
c0015ce3:	59                   	pop    ecx
c0015ce4:	b8 01 00 00 00       	mov    eax,0x1
c0015ce9:	31 d2                	xor    edx,edx
c0015ceb:	5b                   	pop    ebx
c0015cec:	5e                   	pop    esi
c0015ced:	c3                   	ret    
c0015cee:	59                   	pop    ecx
c0015cef:	b8 02 00 00 00       	mov    eax,0x2
c0015cf4:	31 d2                	xor    edx,edx
c0015cf6:	5b                   	pop    ebx
c0015cf7:	5e                   	pop    esi
c0015cf8:	c3                   	ret    

c0015cf9 <sysCallUSleep(regs*)>:
c0015cf9:	83 ec 1c             	sub    esp,0x1c
c0015cfc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d00:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015d03:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015d06:	6a 00                	push   0x0
c0015d08:	6a 64                	push   0x64
c0015d0a:	52                   	push   edx
c0015d0b:	50                   	push   eax
c0015d0c:	e8 f3 ae 00 00       	call   c0020c04 <__udivdi3>
c0015d11:	83 c4 14             	add    esp,0x14
c0015d14:	50                   	push   eax
c0015d15:	e8 92 23 00 00       	call   c00180ac <milliTenthSleep(unsigned int)>
c0015d1a:	31 c0                	xor    eax,eax
c0015d1c:	31 d2                	xor    edx,edx
c0015d1e:	83 c4 1c             	add    esp,0x1c
c0015d21:	c3                   	ret    

c0015d22 <sysCallSpawn(regs*)>:
c0015d22:	56                   	push   esi
c0015d23:	53                   	push   ebx
c0015d24:	50                   	push   eax
c0015d25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d29:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015d2c:	85 c0                	test   eax,eax
c0015d2e:	75 08                	jne    c0015d38 <sysCallSpawn(regs*)+0x16>
c0015d30:	59                   	pop    ecx
c0015d31:	31 c0                	xor    eax,eax
c0015d33:	31 d2                	xor    edx,edx
c0015d35:	5b                   	pop    ebx
c0015d36:	5e                   	pop    esi
c0015d37:	c3                   	ret    
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	68 1f 07 00 00       	push   0x71f
c0015d40:	e8 5e 3c ff ff       	call   c00099a3 <malloc>
c0015d45:	83 c4 10             	add    esp,0x10
c0015d48:	89 c6                	mov    esi,eax
c0015d4a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015d4d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d50:	85 c0                	test   eax,eax
c0015d52:	75 32                	jne    c0015d86 <sysCallSpawn(regs*)+0x64>
c0015d54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d5c:	52                   	push   edx
c0015d5d:	50                   	push   eax
c0015d5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d61:	56                   	push   esi
c0015d62:	e8 75 1a 00 00       	call   c00177dc <Process::Process(char const*, Process*, char**)>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015d71:	75 bd                	jne    c0015d30 <sysCallSpawn(regs*)+0xe>
c0015d73:	83 ec 0c             	sub    esp,0xc
c0015d76:	56                   	push   esi
c0015d77:	e8 34 1f 00 00       	call   c0017cb0 <Process::createUserThread()>
c0015d7c:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	99                   	cdq    
c0015d82:	59                   	pop    ecx
c0015d83:	5b                   	pop    ebx
c0015d84:	5e                   	pop    esi
c0015d85:	c3                   	ret    
c0015d86:	31 c0                	xor    eax,eax
c0015d88:	eb d2                	jmp    c0015d5c <sysCallSpawn(regs*)+0x3a>

c0015d8a <sysCallGetEnv(regs*)>:
c0015d8a:	57                   	push   edi
c0015d8b:	56                   	push   esi
c0015d8c:	53                   	push   ebx
c0015d8d:	83 ec 1c             	sub    esp,0x1c
c0015d90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015d94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d99:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015d9c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015d9f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015da2:	e8 e8 e3 ff ff       	call   c001418f <Krnl::getProcessTotalEnvCount(Process*)>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	39 c7                	cmp    edi,eax
c0015dac:	7c 14                	jl     c0015dc2 <sysCallGetEnv(regs*)+0x38>
c0015dae:	85 f6                	test   esi,esi
c0015db0:	75 0b                	jne    c0015dbd <sysCallGetEnv(regs*)+0x33>
c0015db2:	83 c4 10             	add    esp,0x10
c0015db5:	31 c0                	xor    eax,eax
c0015db7:	5b                   	pop    ebx
c0015db8:	31 d2                	xor    edx,edx
c0015dba:	5e                   	pop    esi
c0015dbb:	5f                   	pop    edi
c0015dbc:	c3                   	ret    
c0015dbd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015dc0:	eb f0                	jmp    c0015db2 <sysCallGetEnv(regs*)+0x28>
c0015dc2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015dc6:	52                   	push   edx
c0015dc7:	57                   	push   edi
c0015dc8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dce:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015dd1:	50                   	push   eax
c0015dd2:	e8 d8 e3 ff ff       	call   c00141af <Krnl::getProcessEnvPair(Process*, int)>
c0015dd7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015dda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dde:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015de2:	83 c4 0c             	add    esp,0xc
c0015de5:	85 c9                	test   ecx,ecx
c0015de7:	75 23                	jne    c0015e0c <sysCallGetEnv(regs*)+0x82>
c0015de9:	83 ec 0c             	sub    esp,0xc
c0015dec:	50                   	push   eax
c0015ded:	e8 ae a8 fe ff       	call   c00006a0 <strlen>
c0015df2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015df5:	89 c3                	mov    ebx,eax
c0015df7:	e8 a4 a8 fe ff       	call   c00006a0 <strlen>
c0015dfc:	83 c4 10             	add    esp,0x10
c0015dff:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015e03:	83 c4 10             	add    esp,0x10
c0015e06:	31 d2                	xor    edx,edx
c0015e08:	5b                   	pop    ebx
c0015e09:	5e                   	pop    esi
c0015e0a:	5f                   	pop    edi
c0015e0b:	c3                   	ret    
c0015e0c:	83 ec 08             	sub    esp,0x8
c0015e0f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015e12:	50                   	push   eax
c0015e13:	56                   	push   esi
c0015e14:	e8 27 a9 fe ff       	call   c0000740 <strcpy>
c0015e19:	58                   	pop    eax
c0015e1a:	5a                   	pop    edx
c0015e1b:	68 23 42 02 c0       	push   0xc0024223
c0015e20:	56                   	push   esi
c0015e21:	e8 5a aa fe ff       	call   c0000880 <strcat>
c0015e26:	59                   	pop    ecx
c0015e27:	5b                   	pop    ebx
c0015e28:	57                   	push   edi
c0015e29:	56                   	push   esi
c0015e2a:	e8 51 aa fe ff       	call   c0000880 <strcat>
c0015e2f:	83 c4 10             	add    esp,0x10
c0015e32:	e9 7b ff ff ff       	jmp    c0015db2 <sysCallGetEnv(regs*)+0x28>

c0015e37 <sysAppSettings(regs*)>:
c0015e37:	57                   	push   edi
c0015e38:	56                   	push   esi
c0015e39:	56                   	push   esi
c0015e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e3e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e41:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015e47:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015e4c:	66 3d c0 09          	cmp    ax,0x9c0
c0015e50:	75 2e                	jne    c0015e80 <sysAppSettings(regs*)+0x49>
c0015e52:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015e58:	83 e0 1f             	and    eax,0x1f
c0015e5b:	3c 01                	cmp    al,0x1
c0015e5d:	74 2c                	je     c0015e8b <sysAppSettings(regs*)+0x54>
c0015e5f:	3c 07                	cmp    al,0x7
c0015e61:	0f 84 b3 00 00 00    	je     c0015f1a <sysAppSettings(regs*)+0xe3>
c0015e67:	84 c0                	test   al,al
c0015e69:	0f 84 d2 00 00 00    	je     c0015f41 <sysAppSettings(regs*)+0x10a>
c0015e6f:	3c 08                	cmp    al,0x8
c0015e71:	74 63                	je     c0015ed6 <sysAppSettings(regs*)+0x9f>
c0015e73:	59                   	pop    ecx
c0015e74:	0f b6 c0             	movzx  eax,al
c0015e77:	5e                   	pop    esi
c0015e78:	05 e8 03 00 00       	add    eax,0x3e8
c0015e7d:	5f                   	pop    edi
c0015e7e:	99                   	cdq    
c0015e7f:	c3                   	ret    
c0015e80:	b8 01 00 00 00       	mov    eax,0x1
c0015e85:	59                   	pop    ecx
c0015e86:	31 d2                	xor    edx,edx
c0015e88:	5e                   	pop    esi
c0015e89:	5f                   	pop    edi
c0015e8a:	c3                   	ret    
c0015e8b:	50                   	push   eax
c0015e8c:	68 00 01 00 00       	push   0x100
c0015e91:	6a 00                	push   0x0
c0015e93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e9b:	83 c0 0c             	add    eax,0xc
c0015e9e:	50                   	push   eax
c0015e9f:	e8 e0 a7 fe ff       	call   c0000684 <memset>
c0015ea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea9:	b9 ff 00 00 00       	mov    ecx,0xff
c0015eae:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015eb1:	83 c7 0c             	add    edi,0xc
c0015eb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015eb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ebb:	5a                   	pop    edx
c0015ebc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ebf:	59                   	pop    ecx
c0015ec0:	8d 50 0c             	lea    edx,[eax+0xc]
c0015ec3:	52                   	push   edx
c0015ec4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015eca:	e8 2d 47 ff ff       	call   c000a5fc <VgaText::setTitle(char*)>
c0015ecf:	83 c4 10             	add    esp,0x10
c0015ed2:	31 c0                	xor    eax,eax
c0015ed4:	eb af                	jmp    c0015e85 <sysAppSettings(regs*)+0x4e>
c0015ed6:	83 ec 08             	sub    esp,0x8
c0015ed9:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015edf:	83 e0 0f             	and    eax,0xf
c0015ee2:	50                   	push   eax
c0015ee3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ee8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015eeb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015ef1:	e8 f6 46 ff ff       	call   c000a5ec <VgaText::setTitleColour(VgaColour)>
c0015ef6:	5f                   	pop    edi
c0015ef7:	58                   	pop    eax
c0015ef8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015efe:	c1 e8 04             	shr    eax,0x4
c0015f01:	83 e0 0f             	and    eax,0xf
c0015f04:	50                   	push   eax
c0015f05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f0d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015f13:	e8 c4 46 ff ff       	call   c000a5dc <VgaText::setTitleTextColour(VgaColour)>
c0015f18:	eb b5                	jmp    c0015ecf <sysAppSettings(regs*)+0x98>
c0015f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f22:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015f28:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0015f2e:	c0 e8 06             	shr    al,0x6
c0015f31:	83 e0 01             	and    eax,0x1
c0015f34:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0015f3a:	31 c0                	xor    eax,eax
c0015f3c:	e9 44 ff ff ff       	jmp    c0015e85 <sysAppSettings(regs*)+0x4e>
c0015f41:	b8 02 00 00 00       	mov    eax,0x2
c0015f46:	e9 3a ff ff ff       	jmp    c0015e85 <sysAppSettings(regs*)+0x4e>

c0015f4b <sysSetFatAttrib(regs*)>:
c0015f4b:	57                   	push   edi
c0015f4c:	56                   	push   esi
c0015f4d:	53                   	push   ebx
c0015f4e:	83 ec 1c             	sub    esp,0x1c
c0015f51:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015f55:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015f58:	68 14 01 00 00       	push   0x114
c0015f5d:	e8 41 3a ff ff       	call   c00099a3 <malloc>
c0015f62:	83 c4 0c             	add    esp,0xc
c0015f65:	89 c3                	mov    ebx,eax
c0015f67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f6c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f6f:	57                   	push   edi
c0015f70:	53                   	push   ebx
c0015f71:	e8 f8 6f ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0015f76:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015f79:	83 c4 0c             	add    esp,0xc
c0015f7c:	0f b6 d4             	movzx  edx,ah
c0015f7f:	0f b6 c0             	movzx  eax,al
c0015f82:	52                   	push   edx
c0015f83:	50                   	push   eax
c0015f84:	53                   	push   ebx
c0015f85:	e8 5a 72 ff ff       	call   c000d1e4 <File::chfatattr(unsigned char, unsigned char)>
c0015f8a:	83 c4 10             	add    esp,0x10
c0015f8d:	85 db                	test   ebx,ebx
c0015f8f:	74 14                	je     c0015fa5 <sysSetFatAttrib(regs*)+0x5a>
c0015f91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f95:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f97:	83 ec 0c             	sub    esp,0xc
c0015f9a:	53                   	push   ebx
c0015f9b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015f9e:	83 c4 10             	add    esp,0x10
c0015fa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fa5:	85 c0                	test   eax,eax
c0015fa7:	0f 95 c0             	setne  al
c0015faa:	31 d2                	xor    edx,edx
c0015fac:	0f b6 c0             	movzx  eax,al
c0015faf:	f7 d8                	neg    eax
c0015fb1:	83 d2 00             	adc    edx,0x0
c0015fb4:	83 c4 10             	add    esp,0x10
c0015fb7:	f7 da                	neg    edx
c0015fb9:	5b                   	pop    ebx
c0015fba:	5e                   	pop    esi
c0015fbb:	5f                   	pop    edi
c0015fbc:	c3                   	ret    

c0015fbd <sysPipe(regs*)>:
c0015fbd:	57                   	push   edi
c0015fbe:	56                   	push   esi
c0015fbf:	53                   	push   ebx
c0015fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc4:	83 ec 0c             	sub    esp,0xc
c0015fc7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015fca:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015fcd:	6a 20                	push   0x20
c0015fcf:	e8 cf 39 ff ff       	call   c00099a3 <malloc>
c0015fd4:	89 c3                	mov    ebx,eax
c0015fd6:	58                   	pop    eax
c0015fd7:	5a                   	pop    edx
c0015fd8:	68 00 50 00 00       	push   0x5000
c0015fdd:	53                   	push   ebx
c0015fde:	e8 91 43 ff ff       	call   c000a374 <Pipe::Pipe(int)>
c0015fe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fe6:	e8 f3 51 ff ff       	call   c000b1de <UnixFile::getFileDescriptor()>
c0015feb:	89 07                	mov    DWORD PTR [edi],eax
c0015fed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ff0:	e8 e9 51 ff ff       	call   c000b1de <UnixFile::getFileDescriptor()>
c0015ff5:	83 c4 10             	add    esp,0x10
c0015ff8:	89 06                	mov    DWORD PTR [esi],eax
c0015ffa:	31 d2                	xor    edx,edx
c0015ffc:	5b                   	pop    ebx
c0015ffd:	31 c0                	xor    eax,eax
c0015fff:	5e                   	pop    esi
c0016000:	5f                   	pop    edi
c0016001:	c3                   	ret    

c0016002 <sysGetUnixTime(regs*)>:
c0016002:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0016007:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001600d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016011:	e9 46 79 ff ff       	jmp    c000d95c <Clock::timeInSecondsLocal()>

c0016016 <string_ends_with(char const*, char const*)>:
c0016016:	57                   	push   edi
c0016017:	56                   	push   esi
c0016018:	53                   	push   ebx
c0016019:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001601d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016021:	83 ec 0c             	sub    esp,0xc
c0016024:	53                   	push   ebx
c0016025:	e8 76 a6 fe ff       	call   c00006a0 <strlen>
c001602a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001602d:	89 c6                	mov    esi,eax
c001602f:	e8 6c a6 fe ff       	call   c00006a0 <strlen>
c0016034:	83 c4 10             	add    esp,0x10
c0016037:	39 c6                	cmp    esi,eax
c0016039:	7d 06                	jge    c0016041 <string_ends_with(char const*, char const*)+0x2b>
c001603b:	5b                   	pop    ebx
c001603c:	31 c0                	xor    eax,eax
c001603e:	5e                   	pop    esi
c001603f:	5f                   	pop    edi
c0016040:	c3                   	ret    
c0016041:	83 ec 08             	sub    esp,0x8
c0016044:	29 c6                	sub    esi,eax
c0016046:	57                   	push   edi
c0016047:	01 f3                	add    ebx,esi
c0016049:	53                   	push   ebx
c001604a:	e8 7d a7 fe ff       	call   c00007cc <strcmp>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	85 c0                	test   eax,eax
c0016054:	5b                   	pop    ebx
c0016055:	0f 94 c0             	sete   al
c0016058:	5e                   	pop    esi
c0016059:	0f b6 c0             	movzx  eax,al
c001605c:	5f                   	pop    edi
c001605d:	c3                   	ret    

c001605e <sysCallOpen(regs*)>:
c001605e:	56                   	push   esi
c001605f:	53                   	push   ebx
c0016060:	81 ec 04 01 00 00    	sub    esp,0x104
c0016066:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001606d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016070:	85 c9                	test   ecx,ecx
c0016072:	0f 84 ad 01 00 00    	je     c0016225 <sysCallOpen(regs*)+0x1c7>
c0016078:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001607b:	85 c0                	test   eax,eax
c001607d:	0f 84 a2 01 00 00    	je     c0016225 <sysCallOpen(regs*)+0x1c7>
c0016083:	52                   	push   edx
c0016084:	68 25 42 02 c0       	push   0xc0024225
c0016089:	50                   	push   eax
c001608a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001608e:	56                   	push   esi
c001608f:	e8 30 6d ff ff       	call   c000cdc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016094:	89 34 24             	mov    DWORD PTR [esp],esi
c0016097:	e8 04 a6 fe ff       	call   c00006a0 <strlen>
c001609c:	83 c4 10             	add    esp,0x10
c001609f:	48                   	dec    eax
c00160a0:	74 1d                	je     c00160bf <sysCallOpen(regs*)+0x61>
c00160a2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00160a5:	eb 0f                	jmp    c00160b6 <sysCallOpen(regs*)+0x58>
c00160a7:	80 fa 3a             	cmp    dl,0x3a
c00160aa:	74 0f                	je     c00160bb <sysCallOpen(regs*)+0x5d>
c00160ac:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00160b0:	48                   	dec    eax
c00160b1:	74 0c                	je     c00160bf <sysCallOpen(regs*)+0x61>
c00160b3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00160b6:	80 fa 2e             	cmp    dl,0x2e
c00160b9:	75 ec                	jne    c00160a7 <sysCallOpen(regs*)+0x49>
c00160bb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00160bf:	83 ec 08             	sub    esp,0x8
c00160c2:	68 29 42 02 c0       	push   0xc0024229
c00160c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160ca:	e8 47 ff ff ff       	call   c0016016 <string_ends_with(char const*, char const*)>
c00160cf:	83 c4 10             	add    esp,0x10
c00160d2:	85 c0                	test   eax,eax
c00160d4:	74 1d                	je     c00160f3 <sysCallOpen(regs*)+0x95>
c00160d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160d9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00160df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00160e6:	81 c4 04 01 00 00    	add    esp,0x104
c00160ec:	31 c0                	xor    eax,eax
c00160ee:	31 d2                	xor    edx,edx
c00160f0:	5b                   	pop    ebx
c00160f1:	5e                   	pop    esi
c00160f2:	c3                   	ret    
c00160f3:	83 ec 08             	sub    esp,0x8
c00160f6:	68 2e 42 02 c0       	push   0xc002422e
c00160fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160fe:	e8 13 ff ff ff       	call   c0016016 <string_ends_with(char const*, char const*)>
c0016103:	83 c4 10             	add    esp,0x10
c0016106:	85 c0                	test   eax,eax
c0016108:	75 cc                	jne    c00160d6 <sysCallOpen(regs*)+0x78>
c001610a:	83 ec 08             	sub    esp,0x8
c001610d:	68 2a 42 02 c0       	push   0xc002422a
c0016112:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016115:	e8 b2 a6 fe ff       	call   c00007cc <strcmp>
c001611a:	83 c4 10             	add    esp,0x10
c001611d:	85 c0                	test   eax,eax
c001611f:	74 b5                	je     c00160d6 <sysCallOpen(regs*)+0x78>
c0016121:	83 ec 08             	sub    esp,0x8
c0016124:	68 29 42 02 c0       	push   0xc0024229
c0016129:	56                   	push   esi
c001612a:	e8 e7 fe ff ff       	call   c0016016 <string_ends_with(char const*, char const*)>
c001612f:	83 c4 10             	add    esp,0x10
c0016132:	85 c0                	test   eax,eax
c0016134:	75 a0                	jne    c00160d6 <sysCallOpen(regs*)+0x78>
c0016136:	83 ec 08             	sub    esp,0x8
c0016139:	68 33 42 02 c0       	push   0xc0024233
c001613e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016141:	e8 d0 fe ff ff       	call   c0016016 <string_ends_with(char const*, char const*)>
c0016146:	83 c4 10             	add    esp,0x10
c0016149:	85 c0                	test   eax,eax
c001614b:	0f 85 e7 00 00 00    	jne    c0016238 <sysCallOpen(regs*)+0x1da>
c0016151:	83 ec 08             	sub    esp,0x8
c0016154:	68 38 42 02 c0       	push   0xc0024238
c0016159:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001615c:	e8 b5 fe ff ff       	call   c0016016 <string_ends_with(char const*, char const*)>
c0016161:	83 c4 10             	add    esp,0x10
c0016164:	85 c0                	test   eax,eax
c0016166:	0f 85 cc 00 00 00    	jne    c0016238 <sysCallOpen(regs*)+0x1da>
c001616c:	83 ec 08             	sub    esp,0x8
c001616f:	68 34 42 02 c0       	push   0xc0024234
c0016174:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016177:	e8 50 a6 fe ff       	call   c00007cc <strcmp>
c001617c:	83 c4 10             	add    esp,0x10
c001617f:	85 c0                	test   eax,eax
c0016181:	0f 84 b1 00 00 00    	je     c0016238 <sysCallOpen(regs*)+0x1da>
c0016187:	83 ec 08             	sub    esp,0x8
c001618a:	68 33 42 02 c0       	push   0xc0024233
c001618f:	56                   	push   esi
c0016190:	e8 81 fe ff ff       	call   c0016016 <string_ends_with(char const*, char const*)>
c0016195:	83 c4 10             	add    esp,0x10
c0016198:	85 c0                	test   eax,eax
c001619a:	0f 85 98 00 00 00    	jne    c0016238 <sysCallOpen(regs*)+0x1da>
c00161a0:	83 ec 0c             	sub    esp,0xc
c00161a3:	68 14 01 00 00       	push   0x114
c00161a8:	e8 f6 37 ff ff       	call   c00099a3 <malloc>
c00161ad:	83 c4 0c             	add    esp,0xc
c00161b0:	89 c6                	mov    esi,eax
c00161b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161bd:	56                   	push   esi
c00161be:	e8 ab 6d ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c00161c3:	83 c4 10             	add    esp,0x10
c00161c6:	85 f6                	test   esi,esi
c00161c8:	74 5b                	je     c0016225 <sysCallOpen(regs*)+0x1c7>
c00161ca:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00161cd:	0f b6 c2             	movzx  eax,dl
c00161d0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00161d3:	89 d0                	mov    eax,edx
c00161d5:	83 e0 01             	and    eax,0x1
c00161d8:	f6 c2 02             	test   dl,0x2
c00161db:	74 03                	je     c00161e0 <sysCallOpen(regs*)+0x182>
c00161dd:	83 c8 02             	or     eax,0x2
c00161e0:	f6 c2 04             	test   dl,0x4
c00161e3:	74 03                	je     c00161e8 <sysCallOpen(regs*)+0x18a>
c00161e5:	83 c8 04             	or     eax,0x4
c00161e8:	f6 c2 08             	test   dl,0x8
c00161eb:	74 03                	je     c00161f0 <sysCallOpen(regs*)+0x192>
c00161ed:	83 c8 0a             	or     eax,0xa
c00161f0:	83 e2 10             	and    edx,0x10
c00161f3:	74 03                	je     c00161f8 <sysCallOpen(regs*)+0x19a>
c00161f5:	83 c8 12             	or     eax,0x12
c00161f8:	83 ec 08             	sub    esp,0x8
c00161fb:	50                   	push   eax
c00161fc:	56                   	push   esi
c00161fd:	e8 d0 6d ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c0016202:	83 c4 10             	add    esp,0x10
c0016205:	85 c0                	test   eax,eax
c0016207:	75 1c                	jne    c0016225 <sysCallOpen(regs*)+0x1c7>
c0016209:	83 ec 0c             	sub    esp,0xc
c001620c:	56                   	push   esi
c001620d:	e8 cc 4f ff ff       	call   c000b1de <UnixFile::getFileDescriptor()>
c0016212:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016215:	83 c4 10             	add    esp,0x10
c0016218:	89 02                	mov    DWORD PTR [edx],eax
c001621a:	c1 f8 1f             	sar    eax,0x1f
c001621d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016220:	e9 c1 fe ff ff       	jmp    c00160e6 <sysCallOpen(regs*)+0x88>
c0016225:	81 c4 04 01 00 00    	add    esp,0x104
c001622b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016230:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016235:	5b                   	pop    ebx
c0016236:	5e                   	pop    esi
c0016237:	c3                   	ret    
c0016238:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001623b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016241:	e9 99 fe ff ff       	jmp    c00160df <sysCallOpen(regs*)+0x81>

c0016246 <Sys::loadSyscalls()>:
c0016246:	c7 05 a0 6b 02 c0 b7 54 01 c0 	mov    DWORD PTR ds:0xc0026ba0,0xc00154b7
c0016250:	c7 05 a4 6b 02 c0 ac 50 01 c0 	mov    DWORD PTR ds:0xc0026ba4,0xc00150ac
c001625a:	c7 05 a8 6b 02 c0 9d 52 01 c0 	mov    DWORD PTR ds:0xc0026ba8,0xc001529d
c0016264:	c7 05 ac 6b 02 c0 ed 53 01 c0 	mov    DWORD PTR ds:0xc0026bac,0xc00153ed
c001626e:	c7 05 b0 6b 02 c0 35 52 01 c0 	mov    DWORD PTR ds:0xc0026bb0,0xc0015235
c0016278:	c7 05 b4 6b 02 c0 e3 50 01 c0 	mov    DWORD PTR ds:0xc0026bb4,0xc00150e3
c0016282:	c7 05 b8 6b 02 c0 c4 50 01 c0 	mov    DWORD PTR ds:0xc0026bb8,0xc00150c4
c001628c:	c7 05 bc 6b 02 c0 f2 52 01 c0 	mov    DWORD PTR ds:0xc0026bbc,0xc00152f2
c0016296:	c7 05 c4 6b 02 c0 7a 59 01 c0 	mov    DWORD PTR ds:0xc0026bc4,0xc001597a
c00162a0:	c7 05 c0 6b 02 c0 5e 60 01 c0 	mov    DWORD PTR ds:0xc0026bc0,0xc001605e
c00162aa:	c7 05 c8 6b 02 c0 da 59 01 c0 	mov    DWORD PTR ds:0xc0026bc8,0xc00159da
c00162b4:	c7 05 cc 6b 02 c0 bd 56 01 c0 	mov    DWORD PTR ds:0xc0026bcc,0xc00156bd
c00162be:	c7 05 d0 6b 02 c0 ef 54 01 c0 	mov    DWORD PTR ds:0xc0026bd0,0xc00154ef
c00162c8:	c7 05 d4 6b 02 c0 f4 54 01 c0 	mov    DWORD PTR ds:0xc0026bd4,0xc00154f4
c00162d2:	c7 05 d8 6b 02 c0 a3 5a 01 c0 	mov    DWORD PTR ds:0xc0026bd8,0xc0015aa3
c00162dc:	c7 05 dc 6b 02 c0 4f 5a 01 c0 	mov    DWORD PTR ds:0xc0026bdc,0xc0015a4f
c00162e6:	c7 05 e0 6b 02 c0 96 57 01 c0 	mov    DWORD PTR ds:0xc0026be0,0xc0015796
c00162f0:	c7 05 e4 6b 02 c0 ed 57 01 c0 	mov    DWORD PTR ds:0xc0026be4,0xc00157ed
c00162fa:	c7 05 e8 6b 02 c0 59 58 01 c0 	mov    DWORD PTR ds:0xc0026be8,0xc0015859
c0016304:	c7 05 ec 6b 02 c0 f9 54 01 c0 	mov    DWORD PTR ds:0xc0026bec,0xc00154f9
c001630e:	c7 05 f0 6b 02 c0 13 5b 01 c0 	mov    DWORD PTR ds:0xc0026bf0,0xc0015b13
c0016318:	c7 05 f4 6b 02 c0 2d 5b 01 c0 	mov    DWORD PTR ds:0xc0026bf4,0xc0015b2d
c0016322:	c7 05 f8 6b 02 c0 2d 5b 01 c0 	mov    DWORD PTR ds:0xc0026bf8,0xc0015b2d
c001632c:	c7 05 fc 6b 02 c0 62 5b 01 c0 	mov    DWORD PTR ds:0xc0026bfc,0xc0015b62
c0016336:	c7 05 00 6c 02 c0 c6 5b 01 c0 	mov    DWORD PTR ds:0xc0026c00,0xc0015bc6
c0016340:	c7 05 04 6c 02 c0 03 55 01 c0 	mov    DWORD PTR ds:0xc0026c04,0xc0015503
c001634a:	c7 05 08 6c 02 c0 2a 5c 01 c0 	mov    DWORD PTR ds:0xc0026c08,0xc0015c2a
c0016354:	c7 05 0c 6c 02 c0 7a 56 01 c0 	mov    DWORD PTR ds:0xc0026c0c,0xc001567a
c001635e:	c7 05 10 6c 02 c0 76 5c 01 c0 	mov    DWORD PTR ds:0xc0026c10,0xc0015c76
c0016368:	c7 05 14 6c 02 c0 3c 57 01 c0 	mov    DWORD PTR ds:0xc0026c14,0xc001573c
c0016372:	c7 05 18 6c 02 c0 f9 5c 01 c0 	mov    DWORD PTR ds:0xc0026c18,0xc0015cf9
c001637c:	c7 05 1c 6c 02 c0 cb 58 01 c0 	mov    DWORD PTR ds:0xc0026c1c,0xc00158cb
c0016386:	c7 05 20 6c 02 c0 22 5d 01 c0 	mov    DWORD PTR ds:0xc0026c20,0xc0015d22
c0016390:	c7 05 24 6c 02 c0 8a 5d 01 c0 	mov    DWORD PTR ds:0xc0026c24,0xc0015d8a
c001639a:	c7 05 28 6c 02 c0 37 5e 01 c0 	mov    DWORD PTR ds:0xc0026c28,0xc0015e37
c00163a4:	c7 05 2c 6c 02 c0 13 55 01 c0 	mov    DWORD PTR ds:0xc0026c2c,0xc0015513
c00163ae:	c7 05 30 6c 02 c0 7d 55 01 c0 	mov    DWORD PTR ds:0xc0026c30,0xc001557d
c00163b8:	c7 05 34 6c 02 c0 c7 55 01 c0 	mov    DWORD PTR ds:0xc0026c34,0xc00155c7
c00163c2:	c7 05 38 6c 02 c0 4b 5f 01 c0 	mov    DWORD PTR ds:0xc0026c38,0xc0015f4b
c00163cc:	c7 05 3c 6c 02 c0 48 5b 01 c0 	mov    DWORD PTR ds:0xc0026c3c,0xc0015b48
c00163d6:	c7 05 40 6c 02 c0 1c 56 01 c0 	mov    DWORD PTR ds:0xc0026c40,0xc001561c
c00163e0:	c7 05 44 6c 02 c0 bd 5f 01 c0 	mov    DWORD PTR ds:0xc0026c44,0xc0015fbd
c00163ea:	c7 05 48 6c 02 c0 02 60 01 c0 	mov    DWORD PTR ds:0xc0026c48,0xc0016002
c00163f4:	c7 05 4c 6c 02 c0 8d 51 01 c0 	mov    DWORD PTR ds:0xc0026c4c,0xc001518d
c00163fe:	c7 05 50 6c 02 c0 0e 53 01 c0 	mov    DWORD PTR ds:0xc0026c50,0xc001530e
c0016408:	c7 05 54 6c 02 c0 a3 53 01 c0 	mov    DWORD PTR ds:0xc0026c54,0xc00153a3
c0016412:	c7 05 58 6c 02 c0 76 50 01 c0 	mov    DWORD PTR ds:0xc0026c58,0xc0015076
c001641c:	c7 05 5c 6c 02 c0 55 54 01 c0 	mov    DWORD PTR ds:0xc0026c5c,0xc0015455
c0016426:	c7 05 60 6c 02 c0 ef 50 01 c0 	mov    DWORD PTR ds:0xc0026c60,0xc00150ef
c0016430:	c7 05 64 6c 02 c0 09 51 01 c0 	mov    DWORD PTR ds:0xc0026c64,0xc0015109
c001643a:	c3                   	ret    

c001643b <Sys::systemCall(regs*, void*)>:
c001643b:	53                   	push   ebx
c001643c:	83 ec 08             	sub    esp,0x8
c001643f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016443:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016446:	83 f8 7f             	cmp    eax,0x7f
c0016449:	77 16                	ja     c0016461 <Sys::systemCall(regs*, void*)+0x26>
c001644b:	8b 14 85 a0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9460]
c0016452:	85 d2                	test   edx,edx
c0016454:	74 0b                	je     c0016461 <Sys::systemCall(regs*, void*)+0x26>
c0016456:	83 ec 0c             	sub    esp,0xc
c0016459:	53                   	push   ebx
c001645a:	ff d2                	call   edx
c001645c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001645f:	eb 0d                	jmp    c001646e <Sys::systemCall(regs*, void*)+0x33>
c0016461:	52                   	push   edx
c0016462:	52                   	push   edx
c0016463:	50                   	push   eax
c0016464:	68 3d 42 02 c0       	push   0xc002423d
c0016469:	e8 96 65 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001646e:	83 c4 10             	add    esp,0x10
c0016471:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016476:	31 d2                	xor    edx,edx
c0016478:	83 c4 08             	add    esp,0x8
c001647b:	5b                   	pop    ebx
c001647c:	c3                   	ret    

c001647d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001647d:	55                   	push   ebp
c001647e:	57                   	push   edi
c001647f:	56                   	push   esi
c0016480:	53                   	push   ebx
c0016481:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016487:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001648e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016495:	85 c0                	test   eax,eax
c0016497:	0f 95 c1             	setne  cl
c001649a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00164a2:	0f 94 c2             	sete   dl
c00164a5:	84 d1                	test   cl,dl
c00164a7:	74 23                	je     c00164cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00164a9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00164af:	74 1b                	je     c00164cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00164b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00164b7:	89 da                	mov    edx,ebx
c00164b9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00164bf:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00164c5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00164cc:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00164d3:	05 ff 0f 00 00       	add    eax,0xfff
c00164d8:	83 ec 0c             	sub    esp,0xc
c00164db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164df:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00164e5:	c1 e8 0c             	shr    eax,0xc
c00164e8:	89 fe                	mov    esi,edi
c00164ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164ee:	c1 ee 0c             	shr    esi,0xc
c00164f1:	6a 01                	push   0x1
c00164f3:	e8 31 51 ff ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c00164f8:	89 c5                	mov    ebp,eax
c00164fa:	58                   	pop    eax
c00164fb:	5a                   	pop    edx
c00164fc:	56                   	push   esi
c00164fd:	68 51 42 02 c0       	push   0xc0024251
c0016502:	e8 fd 64 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0016507:	59                   	pop    ecx
c0016508:	58                   	pop    eax
c0016509:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001650d:	68 63 42 02 c0       	push   0xc0024263
c0016512:	e8 ed 64 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016520:	0f 86 31 01 00 00    	jbe    c0016657 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016526:	c1 e6 0c             	shl    esi,0xc
c0016529:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001652c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001652f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016533:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001653a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001653d:	01 df                	add    edi,ebx
c001653f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016542:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016546:	0f 84 08 01 00 00    	je     c0016654 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001654c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016552:	76 05                	jbe    c0016559 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016554:	bf 00 10 00 00       	mov    edi,0x1000
c0016559:	83 ec 0c             	sub    esp,0xc
c001655c:	31 d2                	xor    edx,edx
c001655e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016565:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016567:	8d 44 24 28          	lea    eax,[esp+0x28]
c001656b:	50                   	push   eax
c001656c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016570:	56                   	push   esi
c0016571:	52                   	push   edx
c0016572:	57                   	push   edi
c0016573:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001657a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001657d:	83 c4 20             	add    esp,0x20
c0016580:	85 c0                	test   eax,eax
c0016582:	74 0a                	je     c001658e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016584:	53                   	push   ebx
c0016585:	53                   	push   ebx
c0016586:	50                   	push   eax
c0016587:	68 75 42 02 c0       	push   0xc0024275
c001658c:	eb 0f                	jmp    c001659d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001658e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016592:	74 20                	je     c00165b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016594:	51                   	push   ecx
c0016595:	51                   	push   ecx
c0016596:	6a 00                	push   0x0
c0016598:	68 a0 42 02 c0       	push   0xc00242a0
c001659d:	e8 62 64 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00165a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00165a5:	e8 af 53 ff ff       	call   c000b959 <Virt::freeKernelVirtualPages(unsigned long)>
c00165aa:	83 c4 10             	add    esp,0x10
c00165ad:	31 c0                	xor    eax,eax
c00165af:	e9 68 01 00 00       	jmp    c001671c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00165b4:	fa                   	cli    
c00165b5:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00165bb:	e8 df 37 ff ff       	call   c0009d9f <Phys::allocatePage()>
c00165c0:	6a 07                	push   0x7
c00165c2:	89 c7                	mov    edi,eax
c00165c4:	55                   	push   ebp
c00165c5:	50                   	push   eax
c00165c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165ce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00165d4:	e8 f7 56 ff ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00165d9:	83 c4 0c             	add    esp,0xc
c00165dc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00165e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00165e9:	6a 00                	push   0x0
c00165eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00165f9:	e8 2c 55 ff ff       	call   c000bb2a <VAS::mapOtherVASIn(bool, VAS*)>
c00165fe:	58                   	pop    eax
c00165ff:	5a                   	pop    edx
c0016600:	68 07 0c 00 00       	push   0xc07
c0016605:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016609:	57                   	push   edi
c001660a:	89 ef                	mov    edi,ebp
c001660c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016613:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016619:	6a 00                	push   0x0
c001661b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016620:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016623:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016629:	e8 5e 5a ff ff       	call   c000c08c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001662e:	b9 00 10 00 00       	mov    ecx,0x1000
c0016633:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016635:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c001663a:	83 c4 20             	add    esp,0x20
c001663d:	48                   	dec    eax
c001663e:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0016643:	85 c0                	test   eax,eax
c0016645:	75 01                	jne    c0016648 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016647:	fb                   	sti    
c0016648:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001664f:	e9 df fe ff ff       	jmp    c0016533 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016654:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016657:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001665f:	0f 86 a9 00 00 00    	jbe    c001670e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016665:	fa                   	cli    
c0016666:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c001666c:	51                   	push   ecx
c001666d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016674:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001667a:	6a 00                	push   0x0
c001667c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016681:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016684:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001668a:	e8 9b 54 ff ff       	call   c000bb2a <VAS::mapOtherVASIn(bool, VAS*)>
c001668f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016693:	c1 e6 0c             	shl    esi,0xc
c0016696:	01 de                	add    esi,ebx
c0016698:	83 c4 10             	add    esp,0x10
c001669b:	39 de                	cmp    esi,ebx
c001669d:	74 61                	je     c0016700 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001669f:	e8 fb 36 ff ff       	call   c0009d9f <Phys::allocatePage()>
c00166a4:	6a 07                	push   0x7
c00166a6:	89 c7                	mov    edi,eax
c00166a8:	55                   	push   ebp
c00166a9:	50                   	push   eax
c00166aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166b2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166b8:	e8 13 56 ff ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00166bd:	58                   	pop    eax
c00166be:	5a                   	pop    edx
c00166bf:	68 07 0c 00 00       	push   0xc07
c00166c4:	53                   	push   ebx
c00166c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00166cb:	57                   	push   edi
c00166cc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00166d3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166d9:	6a 00                	push   0x0
c00166db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166e9:	e8 9e 59 ff ff       	call   c000c08c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00166ee:	83 c4 1c             	add    esp,0x1c
c00166f1:	68 00 10 00 00       	push   0x1000
c00166f6:	6a 00                	push   0x0
c00166f8:	55                   	push   ebp
c00166f9:	e8 86 9f fe ff       	call   c0000684 <memset>
c00166fe:	eb 98                	jmp    c0016698 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016700:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0016705:	48                   	dec    eax
c0016706:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c001670b:	75 01                	jne    c001670e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001670d:	fb                   	sti    
c001670e:	83 ec 0c             	sub    esp,0xc
c0016711:	55                   	push   ebp
c0016712:	e8 42 52 ff ff       	call   c000b959 <Virt::freeKernelVirtualPages(unsigned long)>
c0016717:	83 c4 10             	add    esp,0x10
c001671a:	b0 01                	mov    al,0x1
c001671c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016722:	5b                   	pop    ebx
c0016723:	5e                   	pop    esi
c0016724:	5f                   	pop    edi
c0016725:	5d                   	pop    ebp
c0016726:	c3                   	ret    

c0016727 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016727:	55                   	push   ebp
c0016728:	57                   	push   edi
c0016729:	56                   	push   esi
c001672a:	53                   	push   ebx
c001672b:	83 ec 48             	sub    esp,0x48
c001672e:	68 14 01 00 00       	push   0x114
c0016733:	e8 6b 32 ff ff       	call   c00099a3 <malloc>
c0016738:	83 c4 0c             	add    esp,0xc
c001673b:	89 c6                	mov    esi,eax
c001673d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016741:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016745:	50                   	push   eax
c0016746:	e8 23 68 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c001674b:	58                   	pop    eax
c001674c:	5a                   	pop    edx
c001674d:	6a 01                	push   0x1
c001674f:	56                   	push   esi
c0016750:	e8 7d 68 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	85 c0                	test   eax,eax
c001675a:	0f 85 47 01 00 00    	jne    c00168a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016760:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	6a 34                	push   0x34
c001676d:	e8 31 32 ff ff       	call   c00099a3 <malloc>
c0016772:	89 c3                	mov    ebx,eax
c0016774:	58                   	pop    eax
c0016775:	8b 06                	mov    eax,DWORD PTR [esi]
c0016777:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001677b:	57                   	push   edi
c001677c:	53                   	push   ebx
c001677d:	6a 00                	push   0x0
c001677f:	6a 34                	push   0x34
c0016781:	56                   	push   esi
c0016782:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016785:	83 c4 20             	add    esp,0x20
c0016788:	85 c0                	test   eax,eax
c001678a:	0f 85 17 01 00 00    	jne    c00168a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016790:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016796:	0f 85 0b 01 00 00    	jne    c00168a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001679c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001679f:	85 c0                	test   eax,eax
c00167a1:	0f 84 00 01 00 00    	je     c00168a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00167a7:	31 d2                	xor    edx,edx
c00167a9:	55                   	push   ebp
c00167aa:	52                   	push   edx
c00167ab:	50                   	push   eax
c00167ac:	56                   	push   esi
c00167ad:	e8 de 68 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c00167b2:	83 c4 10             	add    esp,0x10
c00167b5:	85 c0                	test   eax,eax
c00167b7:	0f 85 ea 00 00 00    	jne    c00168a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00167bd:	83 ec 0c             	sub    esp,0xc
c00167c0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00167c3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00167c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00167cb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00167cf:	0f af c2             	imul   eax,edx
c00167d2:	50                   	push   eax
c00167d3:	e8 cb 31 ff ff       	call   c00099a3 <malloc>
c00167d8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00167da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00167de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00167e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00167e5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00167e9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00167ed:	0f af c2             	imul   eax,edx
c00167f0:	99                   	cdq    
c00167f1:	52                   	push   edx
c00167f2:	50                   	push   eax
c00167f3:	56                   	push   esi
c00167f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00167f7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00167fa:	83 c4 20             	add    esp,0x20
c00167fd:	85 c0                	test   eax,eax
c00167ff:	0f 84 a2 00 00 00    	je     c00168a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016805:	31 d2                	xor    edx,edx
c0016807:	51                   	push   ecx
c0016808:	52                   	push   edx
c0016809:	50                   	push   eax
c001680a:	56                   	push   esi
c001680b:	e8 80 68 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016810:	83 c4 10             	add    esp,0x10
c0016813:	85 c0                	test   eax,eax
c0016815:	0f 85 8c 00 00 00    	jne    c00168a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001681b:	83 ec 0c             	sub    esp,0xc
c001681e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016822:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016826:	31 ed                	xor    ebp,ebp
c0016828:	0f af c2             	imul   eax,edx
c001682b:	50                   	push   eax
c001682c:	e8 72 31 ff ff       	call   c00099a3 <malloc>
c0016831:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016833:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016837:	89 3c 24             	mov    DWORD PTR [esp],edi
c001683a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001683e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016842:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016846:	0f af c2             	imul   eax,edx
c0016849:	99                   	cdq    
c001684a:	52                   	push   edx
c001684b:	50                   	push   eax
c001684c:	56                   	push   esi
c001684d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016850:	83 c4 20             	add    esp,0x20
c0016853:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001685b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001685f:	0f 86 80 00 00 00    	jbe    c00168e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016865:	0f b7 fd             	movzx  edi,bp
c0016868:	c1 e7 05             	shl    edi,0x5
c001686b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001686f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016872:	75 6b                	jne    c00168df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016874:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016877:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001687b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001687e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016882:	52                   	push   edx
c0016883:	31 d2                	xor    edx,edx
c0016885:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016888:	52                   	push   edx
c0016889:	50                   	push   eax
c001688a:	56                   	push   esi
c001688b:	e8 00 68 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016890:	83 c4 10             	add    esp,0x10
c0016893:	85 c0                	test   eax,eax
c0016895:	74 17                	je     c00168ae <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016897:	83 ec 0c             	sub    esp,0xc
c001689a:	68 cc 42 02 c0       	push   0xc00242cc
c001689f:	e8 60 61 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00168a4:	83 c4 10             	add    esp,0x10
c00168a7:	31 c0                	xor    eax,eax
c00168a9:	e9 87 00 00 00       	jmp    c0016935 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00168ae:	83 ec 0c             	sub    esp,0xc
c00168b1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00168b4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00168b7:	50                   	push   eax
c00168b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00168bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168c0:	56                   	push   esi
c00168c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00168c5:	e8 b3 fb ff ff       	call   c001647d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00168ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168ce:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00168d2:	83 c4 20             	add    esp,0x20
c00168d5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00168d9:	73 04                	jae    c00168df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00168db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168df:	45                   	inc    ebp
c00168e0:	e9 76 ff ff ff       	jmp    c001685b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00168e5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00168e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00168ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168f1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00168f7:	83 ec 0c             	sub    esp,0xc
c00168fa:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016900:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016905:	05 00 10 00 00       	add    eax,0x1000
c001690a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001690d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016911:	e8 9d 30 ff ff       	call   c00099b3 <free>
c0016916:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016919:	e8 95 30 ff ff       	call   c00099b3 <free>
c001691e:	58                   	pop    eax
c001691f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016923:	e8 8b 30 ff ff       	call   c00099b3 <free>
c0016928:	89 34 24             	mov    DWORD PTR [esp],esi
c001692b:	e8 00 67 ff ff       	call   c000d030 <File::close()>
c0016930:	83 c4 10             	add    esp,0x10
c0016933:	b0 01                	mov    al,0x1
c0016935:	83 c4 3c             	add    esp,0x3c
c0016938:	5b                   	pop    ebx
c0016939:	5e                   	pop    esi
c001693a:	5f                   	pop    edi
c001693b:	5d                   	pop    ebp
c001693c:	c3                   	ret    

c001693d <Thr::runtimeReferenceHelper()>:
c001693d:	83 ec 18             	sub    esp,0x18
c0016940:	68 d4 42 02 c0       	push   0xc00242d4
c0016945:	e8 ba 60 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001694a:	fa                   	cli    
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	eb fe                	jmp    c001694e <Thr::runtimeReferenceHelper()+0x11>

c0016950 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016950:	57                   	push   edi
c0016951:	56                   	push   esi
c0016952:	53                   	push   ebx
c0016953:	31 db                	xor    ebx,ebx
c0016955:	39 1d 40 75 02 c0    	cmp    DWORD PTR ds:0xc0027540,ebx
c001695b:	7e 3c                	jle    c0016999 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001695d:	8b 34 9d c0 74 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8b40]
c0016964:	31 ff                	xor    edi,edi
c0016966:	39 3c 9d c0 73 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8c40],edi
c001696d:	7e 27                	jle    c0016996 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001696f:	50                   	push   eax
c0016970:	50                   	push   eax
c0016971:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016975:	8b 06                	mov    eax,DWORD PTR [esi]
c0016977:	03 04 9d 40 74 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8bc0]
c001697e:	50                   	push   eax
c001697f:	e8 48 9e fe ff       	call   c00007cc <strcmp>
c0016984:	83 c4 10             	add    esp,0x10
c0016987:	85 c0                	test   eax,eax
c0016989:	75 05                	jne    c0016990 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001698b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001698e:	eb 0b                	jmp    c001699b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016990:	83 c6 10             	add    esi,0x10
c0016993:	47                   	inc    edi
c0016994:	eb d0                	jmp    c0016966 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016996:	43                   	inc    ebx
c0016997:	eb bc                	jmp    c0016955 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016999:	31 c0                	xor    eax,eax
c001699b:	5b                   	pop    ebx
c001699c:	5e                   	pop    esi
c001699d:	5f                   	pop    edi
c001699e:	c3                   	ret    

c001699f <Thr::loadKernelSymbolTable(char const*)>:
c001699f:	55                   	push   ebp
c00169a0:	57                   	push   edi
c00169a1:	56                   	push   esi
c00169a2:	53                   	push   ebx
c00169a3:	83 ec 68             	sub    esp,0x68
c00169a6:	8b 35 90 75 02 c0    	mov    esi,DWORD PTR ds:0xc0027590
c00169ac:	68 14 01 00 00       	push   0x114
c00169b1:	e8 ed 2f ff ff       	call   c00099a3 <malloc>
c00169b6:	83 c4 0c             	add    esp,0xc
c00169b9:	89 c3                	mov    ebx,eax
c00169bb:	56                   	push   esi
c00169bc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00169c0:	50                   	push   eax
c00169c1:	e8 a8 65 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c00169c6:	5e                   	pop    esi
c00169c7:	5f                   	pop    edi
c00169c8:	6a 01                	push   0x1
c00169ca:	53                   	push   ebx
c00169cb:	e8 02 66 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c00169d0:	83 c4 10             	add    esp,0x10
c00169d3:	85 c0                	test   eax,eax
c00169d5:	74 0a                	je     c00169e1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00169d7:	83 ec 0c             	sub    esp,0xc
c00169da:	68 f6 42 02 c0       	push   0xc00242f6
c00169df:	eb 34                	jmp    c0016a15 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00169e1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00169e9:	83 ec 0c             	sub    esp,0xc
c00169ec:	6a 34                	push   0x34
c00169ee:	e8 b0 2f ff ff       	call   c00099a3 <malloc>
c00169f3:	59                   	pop    ecx
c00169f4:	89 c7                	mov    edi,eax
c00169f6:	8d 74 24 34          	lea    esi,[esp+0x34]
c00169fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169fc:	56                   	push   esi
c00169fd:	57                   	push   edi
c00169fe:	6a 00                	push   0x0
c0016a00:	6a 34                	push   0x34
c0016a02:	53                   	push   ebx
c0016a03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a06:	83 c4 20             	add    esp,0x20
c0016a09:	85 c0                	test   eax,eax
c0016a0b:	74 17                	je     c0016a24 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016a0d:	83 ec 0c             	sub    esp,0xc
c0016a10:	68 0d 43 02 c0       	push   0xc002430d
c0016a15:	e8 29 d8 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0016a1a:	83 c4 10             	add    esp,0x10
c0016a1d:	31 c0                	xor    eax,eax
c0016a1f:	e9 31 02 00 00       	jmp    c0016c55 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016a24:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016a2a:	75 e1                	jne    c0016a0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016a2c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016a2f:	85 c0                	test   eax,eax
c0016a31:	74 da                	je     c0016a0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016a33:	52                   	push   edx
c0016a34:	31 d2                	xor    edx,edx
c0016a36:	52                   	push   edx
c0016a37:	50                   	push   eax
c0016a38:	53                   	push   ebx
c0016a39:	e8 52 66 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	85 c0                	test   eax,eax
c0016a43:	75 c8                	jne    c0016a0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016a45:	83 ec 0c             	sub    esp,0xc
c0016a48:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016a4c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016a50:	31 ed                	xor    ebp,ebp
c0016a52:	0f af c2             	imul   eax,edx
c0016a55:	50                   	push   eax
c0016a56:	e8 48 2f ff ff       	call   c00099a3 <malloc>
c0016a5b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016a5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a61:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a68:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016a6c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016a70:	0f af c2             	imul   eax,edx
c0016a73:	99                   	cdq    
c0016a74:	52                   	push   edx
c0016a75:	50                   	push   eax
c0016a76:	53                   	push   ebx
c0016a77:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a7a:	83 c4 20             	add    esp,0x20
c0016a7d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016a85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016a8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016a95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a9d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016aa1:	0f 86 aa 00 00 00    	jbe    c0016b51 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016aa7:	0f b7 f5             	movzx  esi,bp
c0016aaa:	6b f6 28             	imul   esi,esi,0x28
c0016aad:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016ab1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016ab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ab8:	50                   	push   eax
c0016ab9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016abd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016ac1:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ac3:	6b c0 28             	imul   eax,eax,0x28
c0016ac6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016aca:	89 d0                	mov    eax,edx
c0016acc:	31 d2                	xor    edx,edx
c0016ace:	52                   	push   edx
c0016acf:	50                   	push   eax
c0016ad0:	53                   	push   ebx
c0016ad1:	e8 ba 65 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016ad6:	83 c4 0c             	add    esp,0xc
c0016ad9:	6a 20                	push   0x20
c0016adb:	6a 00                	push   0x0
c0016add:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016ae1:	52                   	push   edx
c0016ae2:	e8 9d 9b fe ff       	call   c0000684 <memset>
c0016ae7:	58                   	pop    eax
c0016ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aea:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016aee:	51                   	push   ecx
c0016aef:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016af3:	52                   	push   edx
c0016af4:	6a 00                	push   0x0
c0016af6:	6a 1f                	push   0x1f
c0016af8:	53                   	push   ebx
c0016af9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016afc:	83 c4 18             	add    esp,0x18
c0016aff:	68 24 43 02 c0       	push   0xc0024324
c0016b04:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016b08:	52                   	push   edx
c0016b09:	e8 be 9c fe ff       	call   c00007cc <strcmp>
c0016b0e:	83 c4 10             	add    esp,0x10
c0016b11:	85 c0                	test   eax,eax
c0016b13:	75 0f                	jne    c0016b24 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016b15:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016b18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b24:	50                   	push   eax
c0016b25:	50                   	push   eax
c0016b26:	68 2c 43 02 c0       	push   0xc002432c
c0016b2b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016b2f:	50                   	push   eax
c0016b30:	e8 97 9c fe ff       	call   c00007cc <strcmp>
c0016b35:	83 c4 10             	add    esp,0x10
c0016b38:	85 c0                	test   eax,eax
c0016b3a:	75 0f                	jne    c0016b4b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016b3c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016b3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b4b:	45                   	inc    ebp
c0016b4c:	e9 4c ff ff ff       	jmp    c0016a9d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016b51:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016b56:	75 10                	jne    c0016b68 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016b58:	83 ec 0c             	sub    esp,0xc
c0016b5b:	68 34 43 02 c0       	push   0xc0024334
c0016b60:	e8 de d6 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016b6d:	75 10                	jne    c0016b7f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016b6f:	83 ec 0c             	sub    esp,0xc
c0016b72:	68 34 43 02 c0       	push   0xc0024334
c0016b77:	e8 c7 d6 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0016b7c:	83 c4 10             	add    esp,0x10
c0016b7f:	31 d2                	xor    edx,edx
c0016b81:	50                   	push   eax
c0016b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b86:	52                   	push   edx
c0016b87:	50                   	push   eax
c0016b88:	53                   	push   ebx
c0016b89:	e8 02 65 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016b8e:	5a                   	pop    edx
c0016b8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b93:	e8 0b 2e ff ff       	call   c00099a3 <malloc>
c0016b98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ba0:	31 c9                	xor    ecx,ecx
c0016ba2:	5e                   	pop    esi
c0016ba3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ba5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016ba9:	55                   	push   ebp
c0016baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bae:	51                   	push   ecx
c0016baf:	52                   	push   edx
c0016bb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bb4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016bb8:	53                   	push   ebx
c0016bb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bbc:	83 c4 14             	add    esp,0x14
c0016bbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bc3:	e8 db 2d ff ff       	call   c00099a3 <malloc>
c0016bc8:	89 c6                	mov    esi,eax
c0016bca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bcc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016bcf:	56                   	push   esi
c0016bd0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016bd4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016bd8:	51                   	push   ecx
c0016bd9:	52                   	push   edx
c0016bda:	53                   	push   ebx
c0016bdb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bde:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016be2:	8b 15 40 75 02 c0    	mov    edx,DWORD PTR ds:0xc0027540
c0016be8:	83 c4 1c             	add    esp,0x1c
c0016beb:	c1 e8 04             	shr    eax,0x4
c0016bee:	89 04 95 c0 73 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8c40],eax
c0016bf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bf9:	31 d2                	xor    edx,edx
c0016bfb:	52                   	push   edx
c0016bfc:	50                   	push   eax
c0016bfd:	53                   	push   ebx
c0016bfe:	e8 8d 64 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016c03:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016c05:	31 d2                	xor    edx,edx
c0016c07:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016c0a:	56                   	push   esi
c0016c0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c0f:	52                   	push   edx
c0016c10:	50                   	push   eax
c0016c11:	53                   	push   ebx
c0016c12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c15:	83 c4 14             	add    esp,0x14
c0016c18:	53                   	push   ebx
c0016c19:	e8 12 64 ff ff       	call   c000d030 <File::close()>
c0016c1e:	5d                   	pop    ebp
c0016c1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c23:	e8 8b 2d ff ff       	call   c00099b3 <free>
c0016c28:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016c2b:	e8 83 2d ff ff       	call   c00099b3 <free>
c0016c30:	a1 40 75 02 c0       	mov    eax,ds:0xc0027540
c0016c35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016c39:	8d 50 01             	lea    edx,[eax+0x1]
c0016c3c:	89 0c 85 c0 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8b40],ecx
c0016c43:	89 34 85 40 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8bc0],esi
c0016c4a:	89 15 40 75 02 c0    	mov    DWORD PTR ds:0xc0027540,edx
c0016c50:	83 c4 10             	add    esp,0x10
c0016c53:	b0 01                	mov    al,0x1
c0016c55:	83 c4 5c             	add    esp,0x5c
c0016c58:	5b                   	pop    ebx
c0016c59:	5e                   	pop    esi
c0016c5a:	5f                   	pop    edi
c0016c5b:	5d                   	pop    ebp
c0016c5c:	c3                   	ret    

c0016c5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016c5d:	55                   	push   ebp
c0016c5e:	57                   	push   edi
c0016c5f:	56                   	push   esi
c0016c60:	53                   	push   ebx
c0016c61:	81 ec 68 03 00 00    	sub    esp,0x368
c0016c67:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016c6e:	8b 1d 90 75 02 c0    	mov    ebx,DWORD PTR ds:0xc0027590
c0016c74:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016c78:	68 14 01 00 00       	push   0x114
c0016c7d:	e8 21 2d ff ff       	call   c00099a3 <malloc>
c0016c82:	83 c4 0c             	add    esp,0xc
c0016c85:	89 c5                	mov    ebp,eax
c0016c87:	53                   	push   ebx
c0016c88:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016c8f:	50                   	push   eax
c0016c90:	e8 d9 62 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0016c95:	5e                   	pop    esi
c0016c96:	5f                   	pop    edi
c0016c97:	6a 01                	push   0x1
c0016c99:	55                   	push   ebp
c0016c9a:	e8 33 63 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c0016c9f:	83 c4 10             	add    esp,0x10
c0016ca2:	85 c0                	test   eax,eax
c0016ca4:	0f 85 a7 06 00 00    	jne    c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016caa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016cb2:	83 ec 0c             	sub    esp,0xc
c0016cb5:	6a 34                	push   0x34
c0016cb7:	e8 e7 2c ff ff       	call   c00099a3 <malloc>
c0016cbc:	5b                   	pop    ebx
c0016cbd:	89 c7                	mov    edi,eax
c0016cbf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016cc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016cc6:	53                   	push   ebx
c0016cc7:	57                   	push   edi
c0016cc8:	6a 00                	push   0x0
c0016cca:	6a 34                	push   0x34
c0016ccc:	55                   	push   ebp
c0016ccd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cd0:	83 c4 20             	add    esp,0x20
c0016cd3:	85 c0                	test   eax,eax
c0016cd5:	0f 85 76 06 00 00    	jne    c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016cdb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016ce1:	0f 85 6a 06 00 00    	jne    c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ce7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016cea:	85 c0                	test   eax,eax
c0016cec:	0f 84 5f 06 00 00    	je     c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016cf2:	31 d2                	xor    edx,edx
c0016cf4:	51                   	push   ecx
c0016cf5:	52                   	push   edx
c0016cf6:	50                   	push   eax
c0016cf7:	55                   	push   ebp
c0016cf8:	e8 93 63 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	85 c0                	test   eax,eax
c0016d02:	0f 85 49 06 00 00    	jne    c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016d0e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016d12:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016d16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016d1a:	0f af c2             	imul   eax,edx
c0016d1d:	50                   	push   eax
c0016d1e:	e8 80 2c ff ff       	call   c00099a3 <malloc>
c0016d23:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016d26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d31:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016d35:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016d39:	0f af c2             	imul   eax,edx
c0016d3c:	99                   	cdq    
c0016d3d:	52                   	push   edx
c0016d3e:	50                   	push   eax
c0016d3f:	55                   	push   ebp
c0016d40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d43:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016d46:	83 c4 20             	add    esp,0x20
c0016d49:	85 c0                	test   eax,eax
c0016d4b:	0f 84 00 06 00 00    	je     c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016d51:	52                   	push   edx
c0016d52:	31 d2                	xor    edx,edx
c0016d54:	52                   	push   edx
c0016d55:	50                   	push   eax
c0016d56:	55                   	push   ebp
c0016d57:	e8 34 63 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016d5c:	83 c4 10             	add    esp,0x10
c0016d5f:	85 c0                	test   eax,eax
c0016d61:	0f 85 ea 05 00 00    	jne    c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016d67:	83 ec 0c             	sub    esp,0xc
c0016d6a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016d6e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016d72:	31 f6                	xor    esi,esi
c0016d74:	0f af c2             	imul   eax,edx
c0016d77:	50                   	push   eax
c0016d78:	e8 26 2c ff ff       	call   c00099a3 <malloc>
c0016d7d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016d80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016d84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d8b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016d8f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016d93:	0f af c2             	imul   eax,edx
c0016d96:	99                   	cdq    
c0016d97:	52                   	push   edx
c0016d98:	50                   	push   eax
c0016d99:	55                   	push   ebp
c0016d9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d9d:	83 c4 20             	add    esp,0x20
c0016da0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016da4:	0f 86 8a 00 00 00    	jbe    c0016e34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016daa:	0f b7 de             	movzx  ebx,si
c0016dad:	c1 e3 05             	shl    ebx,0x5
c0016db0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016db4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016db7:	75 75                	jne    c0016e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016db9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dbc:	31 d2                	xor    edx,edx
c0016dbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016dc2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016dc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dc9:	50                   	push   eax
c0016dca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016dcd:	52                   	push   edx
c0016dce:	50                   	push   eax
c0016dcf:	55                   	push   ebp
c0016dd0:	e8 bb 62 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016dd5:	83 c4 10             	add    esp,0x10
c0016dd8:	85 c0                	test   eax,eax
c0016dda:	0f 85 71 05 00 00    	jne    c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016de0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016de7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016dea:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016dee:	31 d2                	xor    edx,edx
c0016df0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016dfb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016e02:	50                   	push   eax
c0016e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e0b:	52                   	push   edx
c0016e0c:	50                   	push   eax
c0016e0d:	55                   	push   ebp
c0016e0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e11:	83 c4 1c             	add    esp,0x1c
c0016e14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016e17:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016e1a:	50                   	push   eax
c0016e1b:	6a 00                	push   0x0
c0016e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e21:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016e25:	50                   	push   eax
c0016e26:	e8 59 98 fe ff       	call   c0000684 <memset>
c0016e2b:	83 c4 10             	add    esp,0x10
c0016e2e:	46                   	inc    esi
c0016e2f:	e9 6c ff ff ff       	jmp    c0016da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016e34:	53                   	push   ebx
c0016e35:	31 db                	xor    ebx,ebx
c0016e37:	68 00 01 00 00       	push   0x100
c0016e3c:	6a 00                	push   0x0
c0016e3e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016e42:	50                   	push   eax
c0016e43:	e8 3c 98 fe ff       	call   c0000684 <memset>
c0016e48:	83 c4 0c             	add    esp,0xc
c0016e4b:	68 00 01 00 00       	push   0x100
c0016e50:	6a 00                	push   0x0
c0016e52:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016e59:	50                   	push   eax
c0016e5a:	e8 25 98 fe ff       	call   c0000684 <memset>
c0016e5f:	83 c4 10             	add    esp,0x10
c0016e62:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016e72:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016e7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016e82:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016e8a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016e8e:	0f 86 30 01 00 00    	jbe    c0016fc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016e94:	0f b7 f3             	movzx  esi,bx
c0016e97:	6b f6 28             	imul   esi,esi,0x28
c0016e9a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016e9e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016ea1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ea5:	52                   	push   edx
c0016ea6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016eaa:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016eae:	8b 06                	mov    eax,DWORD PTR [esi]
c0016eb0:	6b d2 28             	imul   edx,edx,0x28
c0016eb3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016eb7:	31 d2                	xor    edx,edx
c0016eb9:	52                   	push   edx
c0016eba:	50                   	push   eax
c0016ebb:	55                   	push   ebp
c0016ebc:	e8 cf 61 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016ec1:	83 c4 0c             	add    esp,0xc
c0016ec4:	6a 20                	push   0x20
c0016ec6:	6a 00                	push   0x0
c0016ec8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016ecf:	51                   	push   ecx
c0016ed0:	e8 af 97 fe ff       	call   c0000684 <memset>
c0016ed5:	59                   	pop    ecx
c0016ed6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ed9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016edd:	52                   	push   edx
c0016ede:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016ee5:	51                   	push   ecx
c0016ee6:	6a 00                	push   0x0
c0016ee8:	6a 1f                	push   0x1f
c0016eea:	55                   	push   ebp
c0016eeb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016eee:	83 c4 1c             	add    esp,0x1c
c0016ef1:	6a 09                	push   0x9
c0016ef3:	68 4e 43 02 c0       	push   0xc002434e
c0016ef8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016eff:	51                   	push   ecx
c0016f00:	e8 7b 96 fe ff       	call   c0000580 <memcmp>
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	85 c0                	test   eax,eax
c0016f0a:	75 21                	jne    c0016f2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f14:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016f18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016f1c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016f1f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016f26:	89 d0                	mov    eax,edx
c0016f28:	40                   	inc    eax
c0016f29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f2d:	50                   	push   eax
c0016f2e:	6a 09                	push   0x9
c0016f30:	68 58 43 02 c0       	push   0xc0024358
c0016f35:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f3c:	50                   	push   eax
c0016f3d:	e8 3e 96 fe ff       	call   c0000580 <memcmp>
c0016f42:	83 c4 10             	add    esp,0x10
c0016f45:	85 c0                	test   eax,eax
c0016f47:	75 21                	jne    c0016f6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0016f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f51:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016f55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016f59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016f5c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016f63:	89 d0                	mov    eax,edx
c0016f65:	40                   	inc    eax
c0016f66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f6a:	50                   	push   eax
c0016f6b:	50                   	push   eax
c0016f6c:	68 24 43 02 c0       	push   0xc0024324
c0016f71:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f78:	50                   	push   eax
c0016f79:	e8 4e 98 fe ff       	call   c00007cc <strcmp>
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	85 c0                	test   eax,eax
c0016f83:	75 0f                	jne    c0016f94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0016f85:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016f88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f94:	50                   	push   eax
c0016f95:	50                   	push   eax
c0016f96:	68 2c 43 02 c0       	push   0xc002432c
c0016f9b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016fa2:	50                   	push   eax
c0016fa3:	e8 24 98 fe ff       	call   c00007cc <strcmp>
c0016fa8:	83 c4 10             	add    esp,0x10
c0016fab:	85 c0                	test   eax,eax
c0016fad:	75 0f                	jne    c0016fbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0016faf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016fb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016fb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016fbe:	43                   	inc    ebx
c0016fbf:	e9 c6 fe ff ff       	jmp    c0016e8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0016fc4:	31 d2                	xor    edx,edx
c0016fc6:	50                   	push   eax
c0016fc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fcb:	52                   	push   edx
c0016fcc:	50                   	push   eax
c0016fcd:	55                   	push   ebp
c0016fce:	e8 bd 60 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c0016fd3:	58                   	pop    eax
c0016fd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016fd8:	e8 c6 29 ff ff       	call   c00099a3 <malloc>
c0016fdd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fe0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0016fe4:	31 d2                	xor    edx,edx
c0016fe6:	58                   	pop    eax
c0016fe7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016feb:	53                   	push   ebx
c0016fec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ff0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ff4:	52                   	push   edx
c0016ff5:	50                   	push   eax
c0016ff6:	55                   	push   ebp
c0016ff7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ffa:	83 c4 14             	add    esp,0x14
c0016ffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017001:	e8 9d 29 ff ff       	call   c00099a3 <malloc>
c0017006:	31 d2                	xor    edx,edx
c0017008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001700c:	83 c4 0c             	add    esp,0xc
c001700f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017013:	52                   	push   edx
c0017014:	50                   	push   eax
c0017015:	55                   	push   ebp
c0017016:	e8 75 60 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c001701b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001701e:	31 d2                	xor    edx,edx
c0017020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017023:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017027:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001702b:	52                   	push   edx
c001702c:	50                   	push   eax
c001702d:	55                   	push   ebp
c001702e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017031:	83 c4 20             	add    esp,0x20
c0017034:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001703c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017040:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017044:	0f 84 0b 03 00 00    	je     c0017355 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001704a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017051:	31 d2                	xor    edx,edx
c0017053:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017057:	c1 e8 03             	shr    eax,0x3
c001705a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001705e:	51                   	push   ecx
c001705f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017063:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017067:	52                   	push   edx
c0017068:	50                   	push   eax
c0017069:	55                   	push   ebp
c001706a:	e8 21 60 ff ff       	call   c000d090 <File::seek(unsigned long long)>
c001706f:	5b                   	pop    ebx
c0017070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017074:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001707b:	e8 23 29 ff ff       	call   c00099a3 <malloc>
c0017080:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017083:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017087:	31 d2                	xor    edx,edx
c0017089:	5e                   	pop    esi
c001708a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001708e:	50                   	push   eax
c001708f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017093:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017097:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001709e:	52                   	push   edx
c001709f:	50                   	push   eax
c00170a0:	55                   	push   ebp
c00170a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170a4:	83 c4 20             	add    esp,0x20
c00170a7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00170af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00170b3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00170b7:	0f 8d 7c 02 00 00    	jge    c0017339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00170bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00170c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170c5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00170ca:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00170cd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00170d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170d5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00170d9:	89 d8                	mov    eax,ebx
c00170db:	c1 e8 08             	shr    eax,0x8
c00170de:	89 c6                	mov    esi,eax
c00170e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00170e4:	c1 e6 04             	shl    esi,0x4
c00170e7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00170eb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00170ee:	85 d2                	test   edx,edx
c00170f0:	0f 85 bf 00 00 00    	jne    c00171b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00170f6:	83 ec 0c             	sub    esp,0xc
c00170f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170fd:	03 06                	add    eax,DWORD PTR [esi]
c00170ff:	50                   	push   eax
c0017100:	e8 4b f8 ff ff       	call   c0016950 <Thr::getAddressOfKernelSymbol(char const*)>
c0017105:	83 c4 10             	add    esp,0x10
c0017108:	89 c2                	mov    edx,eax
c001710a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001710f:	85 c0                	test   eax,eax
c0017111:	0f 85 9e 00 00 00    	jne    c00171b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017117:	83 ec 0c             	sub    esp,0xc
c001711a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001711e:	03 06                	add    eax,DWORD PTR [esi]
c0017120:	50                   	push   eax
c0017121:	e8 d2 17 ff ff       	call   c00088f8 <Krnl::resolveCompatibilitySymbol(char*)>
c0017126:	83 c4 10             	add    esp,0x10
c0017129:	89 c2                	mov    edx,eax
c001712b:	85 c0                	test   eax,eax
c001712d:	0f 85 82 00 00 00    	jne    c00171b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017137:	50                   	push   eax
c0017138:	50                   	push   eax
c0017139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001713d:	03 06                	add    eax,DWORD PTR [esi]
c001713f:	50                   	push   eax
c0017140:	68 62 43 02 c0       	push   0xc0024362
c0017145:	e8 ba 58 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001714a:	58                   	pop    eax
c001714b:	5a                   	pop    edx
c001714c:	68 7c 43 02 c0       	push   0xc002437c
c0017151:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017158:	50                   	push   eax
c0017159:	e8 e2 95 fe ff       	call   c0000740 <strcpy>
c001715e:	59                   	pop    ecx
c001715f:	58                   	pop    eax
c0017160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017164:	03 06                	add    eax,DWORD PTR [esi]
c0017166:	50                   	push   eax
c0017167:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001716e:	50                   	push   eax
c001716f:	e8 0c 97 fe ff       	call   c0000880 <strcat>
c0017174:	58                   	pop    eax
c0017175:	5a                   	pop    edx
c0017176:	68 12 44 02 c0       	push   0xc0024412
c001717b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017182:	50                   	push   eax
c0017183:	e8 f8 96 fe ff       	call   c0000880 <strcat>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017190:	0f 84 5d 01 00 00    	je     c00172f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017196:	83 ec 0c             	sub    esp,0xc
c0017199:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00171a0:	50                   	push   eax
c00171a1:	e8 9d d0 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c00171a6:	83 c4 10             	add    esp,0x10
c00171a9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00171ad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00171b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00171b5:	80 fb 01             	cmp    bl,0x1
c00171b8:	0f 85 88 00 00 00    	jne    c0017246 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00171be:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00171c5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00171c9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00171cd:	01 ce                	add    esi,ecx
c00171cf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00171d5:	0f 94 c0             	sete   al
c00171d8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00171de:	0f 94 c3             	sete   bl
c00171e1:	09 c3                	or     ebx,eax
c00171e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00171e5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00171ea:	74 41                	je     c001722d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00171ec:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00171ef:	84 db                	test   bl,bl
c00171f1:	75 15                	jne    c0017208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00171f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00171f7:	66 83 f8 0c          	cmp    ax,0xc
c00171fb:	76 05                	jbe    c0017202 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00171fd:	b8 0c 00 00 00       	mov    eax,0xc
c0017202:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017206:	76 37                	jbe    c001723f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017208:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001720c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017211:	0f 84 dc 00 00 00    	je     c00172f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017217:	83 ec 0c             	sub    esp,0xc
c001721a:	68 93 43 02 c0       	push   0xc0024393
c001721f:	e8 1f d0 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0017224:	83 c4 10             	add    esp,0x10
c0017227:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001722b:	eb 12                	jmp    c001723f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001722d:	01 c1                	add    ecx,eax
c001722f:	84 db                	test   bl,bl
c0017231:	75 0c                	jne    c001723f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017233:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017237:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001723b:	77 02                	ja     c001723f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001723d:	01 d1                	add    ecx,edx
c001723f:	89 0e                	mov    DWORD PTR [esi],ecx
c0017241:	e9 ea 00 00 00       	jmp    c0017330 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017246:	80 fb 02             	cmp    bl,0x2
c0017249:	75 7c                	jne    c00172c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001724b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017252:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017256:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001725a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017260:	74 20                	je     c0017282 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017262:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017268:	74 18                	je     c0017282 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001726a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001726e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017273:	66 83 f8 0e          	cmp    ax,0xe
c0017277:	77 03                	ja     c001727c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017279:	8d 48 fc             	lea    ecx,[eax-0x4]
c001727c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017280:	76 1f                	jbe    c00172a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017282:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017286:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001728b:	74 66                	je     c00172f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001728d:	83 ec 0c             	sub    esp,0xc
c0017290:	68 af 43 02 c0       	push   0xc00243af
c0017295:	e8 a9 cf ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001729a:	83 c4 10             	add    esp,0x10
c001729d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00172a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00172a3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172a8:	74 13                	je     c00172bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00172aa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00172ae:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00172b5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00172b9:	01 c8                	add    eax,ecx
c00172bb:	eb 04                	jmp    c00172c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00172bd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00172c1:	01 c2                	add    edx,eax
c00172c3:	89 16                	mov    DWORD PTR [esi],edx
c00172c5:	eb 69                	jmp    c0017330 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00172c7:	0f b6 db             	movzx  ebx,bl
c00172ca:	50                   	push   eax
c00172cb:	50                   	push   eax
c00172cc:	53                   	push   ebx
c00172cd:	68 cb 43 02 c0       	push   0xc00243cb
c00172d2:	e8 2d 57 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00172d7:	83 c4 10             	add    esp,0x10
c00172da:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00172df:	74 12                	je     c00172f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00172e1:	83 ec 0c             	sub    esp,0xc
c00172e4:	68 d6 43 02 c0       	push   0xc00243d6
c00172e9:	e8 55 cf ff ff       	call   c0014243 <Krnl::panic(char const*)>
c00172ee:	83 c4 10             	add    esp,0x10
c00172f1:	eb 3d                	jmp    c0017330 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00172f3:	83 ec 0c             	sub    esp,0xc
c00172f6:	55                   	push   ebp
c00172f7:	e8 34 5d ff ff       	call   c000d030 <File::close()>
c00172fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017302:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017305:	59                   	pop    ecx
c0017306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001730a:	e8 a4 26 ff ff       	call   c00099b3 <free>
c001730f:	5b                   	pop    ebx
c0017310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017314:	e8 9a 26 ff ff       	call   c00099b3 <free>
c0017319:	89 3c 24             	mov    DWORD PTR [esp],edi
c001731c:	e8 92 26 ff ff       	call   c00099b3 <free>
c0017321:	5e                   	pop    esi
c0017322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017326:	e8 88 26 ff ff       	call   c00099b3 <free>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	eb 21                	jmp    c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017330:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017334:	e9 76 fd ff ff       	jmp    c00170af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017339:	83 ec 0c             	sub    esp,0xc
c001733c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017340:	e8 6e 26 ff ff       	call   c00099b3 <free>
c0017345:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017349:	83 c4 10             	add    esp,0x10
c001734c:	e9 eb fc ff ff       	jmp    c001703c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017351:	31 c0                	xor    eax,eax
c0017353:	eb 33                	jmp    c0017388 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017355:	83 ec 0c             	sub    esp,0xc
c0017358:	55                   	push   ebp
c0017359:	e8 d2 5c ff ff       	call   c000d030 <File::close()>
c001735e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017361:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017364:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017367:	58                   	pop    eax
c0017368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001736c:	e8 42 26 ff ff       	call   c00099b3 <free>
c0017371:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017374:	e8 3a 26 ff ff       	call   c00099b3 <free>
c0017379:	5a                   	pop    edx
c001737a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001737e:	e8 30 26 ff ff       	call   c00099b3 <free>
c0017383:	83 c4 10             	add    esp,0x10
c0017386:	b0 01                	mov    al,0x1
c0017388:	81 c4 5c 03 00 00    	add    esp,0x35c
c001738e:	5b                   	pop    ebx
c001738f:	5e                   	pop    esi
c0017390:	5f                   	pop    edi
c0017391:	5d                   	pop    ebp
c0017392:	c3                   	ret    

c0017393 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017393:	56                   	push   esi
c0017394:	31 d2                	xor    edx,edx
c0017396:	53                   	push   ebx
c0017397:	8b 1d a0 6d 02 c0    	mov    ebx,DWORD PTR ds:0xc0026da0
c001739d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173a1:	39 d3                	cmp    ebx,edx
c00173a3:	7e 1b                	jle    c00173c0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00173a5:	8b 04 95 c0 6f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9040]
c00173ac:	39 c8                	cmp    eax,ecx
c00173ae:	77 0d                	ja     c00173bd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00173b0:	8b 34 95 c0 6d 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9240]
c00173b7:	01 c6                	add    esi,eax
c00173b9:	39 ce                	cmp    esi,ecx
c00173bb:	77 05                	ja     c00173c2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00173bd:	42                   	inc    edx
c00173be:	eb e1                	jmp    c00173a1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00173c0:	31 c0                	xor    eax,eax
c00173c2:	5b                   	pop    ebx
c00173c3:	5e                   	pop    esi
c00173c4:	c3                   	ret    

c00173c5 <Thr::getDriverNameFromAddress(unsigned long)>:
c00173c5:	53                   	push   ebx
c00173c6:	31 c0                	xor    eax,eax
c00173c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00173cc:	8b 1d a0 6d 02 c0    	mov    ebx,DWORD PTR ds:0xc0026da0
c00173d2:	39 c3                	cmp    ebx,eax
c00173d4:	7e 22                	jle    c00173f8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00173d6:	8b 14 85 c0 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9040]
c00173dd:	39 ca                	cmp    edx,ecx
c00173df:	77 14                	ja     c00173f5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00173e1:	03 14 85 c0 6d 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9240]
c00173e8:	39 ca                	cmp    edx,ecx
c00173ea:	76 09                	jbe    c00173f5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00173ec:	8b 04 85 c0 71 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8e40]
c00173f3:	eb 05                	jmp    c00173fa <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00173f5:	40                   	inc    eax
c00173f6:	eb da                	jmp    c00173d2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00173f8:	31 c0                	xor    eax,eax
c00173fa:	5b                   	pop    ebx
c00173fb:	c3                   	ret    

c00173fc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00173fc:	53                   	push   ebx
c00173fd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017401:	53                   	push   ebx
c0017402:	e8 8c ff ff ff       	call   c0017393 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017407:	5a                   	pop    edx
c0017408:	31 d2                	xor    edx,edx
c001740a:	85 c0                	test   eax,eax
c001740c:	74 04                	je     c0017412 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001740e:	89 da                	mov    edx,ebx
c0017410:	29 c2                	sub    edx,eax
c0017412:	89 d0                	mov    eax,edx
c0017414:	5b                   	pop    ebx
c0017415:	c3                   	ret    

c0017416 <Thr::loadDLL(char const*, bool)>:
c0017416:	55                   	push   ebp
c0017417:	57                   	push   edi
c0017418:	56                   	push   esi
c0017419:	53                   	push   ebx
c001741a:	81 ec 34 01 00 00    	sub    esp,0x134
c0017420:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017427:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001742e:	56                   	push   esi
c001742f:	68 ee 43 02 c0       	push   0xc00243ee
c0017434:	e8 cb 55 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0017439:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017440:	e8 5e 25 ff ff       	call   c00099a3 <malloc>
c0017445:	83 c4 0c             	add    esp,0xc
c0017448:	89 c3                	mov    ebx,eax
c001744a:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c0017450:	56                   	push   esi
c0017451:	50                   	push   eax
c0017452:	e8 17 5b ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	85 db                	test   ebx,ebx
c001745c:	75 3c                	jne    c001749a <Thr::loadDLL(char const*, bool)+0x84>
c001745e:	89 f8                	mov    eax,edi
c0017460:	84 c0                	test   al,al
c0017462:	0f 84 d2 01 00 00    	je     c001763a <Thr::loadDLL(char const*, bool)+0x224>
c0017468:	55                   	push   ebp
c0017469:	55                   	push   ebp
c001746a:	68 ff 43 02 c0       	push   0xc00243ff
c001746f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017473:	55                   	push   ebp
c0017474:	e8 c7 92 fe ff       	call   c0000740 <strcpy>
c0017479:	58                   	pop    eax
c001747a:	5a                   	pop    edx
c001747b:	56                   	push   esi
c001747c:	55                   	push   ebp
c001747d:	e8 fe 93 fe ff       	call   c0000880 <strcat>
c0017482:	59                   	pop    ecx
c0017483:	58                   	pop    eax
c0017484:	68 12 44 02 c0       	push   0xc0024412
c0017489:	55                   	push   ebp
c001748a:	e8 f1 93 fe ff       	call   c0000880 <strcat>
c001748f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017492:	e8 ac cd ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0017497:	83 c4 10             	add    esp,0x10
c001749a:	51                   	push   ecx
c001749b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001749f:	50                   	push   eax
c00174a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00174a4:	50                   	push   eax
c00174a5:	53                   	push   ebx
c00174a6:	e8 d3 5d ff ff       	call   c000d27e <File::stat(unsigned long long*, bool*)>
c00174ab:	83 c4 10             	add    esp,0x10
c00174ae:	85 db                	test   ebx,ebx
c00174b0:	74 0c                	je     c00174be <Thr::loadDLL(char const*, bool)+0xa8>
c00174b2:	83 ec 0c             	sub    esp,0xc
c00174b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174b7:	53                   	push   ebx
c00174b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174bb:	83 c4 10             	add    esp,0x10
c00174be:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00174c3:	75 0a                	jne    c00174cf <Thr::loadDLL(char const*, bool)+0xb9>
c00174c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00174c9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00174cd:	75 3c                	jne    c001750b <Thr::loadDLL(char const*, bool)+0xf5>
c00174cf:	89 f8                	mov    eax,edi
c00174d1:	84 c0                	test   al,al
c00174d3:	0f 84 49 01 00 00    	je     c0017622 <Thr::loadDLL(char const*, bool)+0x20c>
c00174d9:	51                   	push   ecx
c00174da:	51                   	push   ecx
c00174db:	68 ff 43 02 c0       	push   0xc00243ff
c00174e0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00174e4:	53                   	push   ebx
c00174e5:	e8 56 92 fe ff       	call   c0000740 <strcpy>
c00174ea:	5d                   	pop    ebp
c00174eb:	58                   	pop    eax
c00174ec:	56                   	push   esi
c00174ed:	53                   	push   ebx
c00174ee:	e8 8d 93 fe ff       	call   c0000880 <strcat>
c00174f3:	58                   	pop    eax
c00174f4:	5a                   	pop    edx
c00174f5:	68 12 44 02 c0       	push   0xc0024412
c00174fa:	53                   	push   ebx
c00174fb:	e8 80 93 fe ff       	call   c0000880 <strcat>
c0017500:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017503:	e8 3b cd ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0017508:	83 c4 10             	add    esp,0x10
c001750b:	52                   	push   edx
c001750c:	6a 03                	push   0x3
c001750e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017512:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017516:	05 ff 0f 00 00       	add    eax,0xfff
c001751b:	83 d2 00             	adc    edx,0x0
c001751e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017522:	50                   	push   eax
c0017523:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c0017529:	e8 a4 48 ff ff       	call   c000bdd2 <VAS::allocatePages(int, int)>
c001752e:	59                   	pop    ecx
c001752f:	89 c3                	mov    ebx,eax
c0017531:	5d                   	pop    ebp
c0017532:	50                   	push   eax
c0017533:	68 a9 25 02 c0       	push   0xc00225a9
c0017538:	e8 c7 54 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001753d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017540:	e8 5b 91 fe ff       	call   c00006a0 <strlen>
c0017545:	8b 2d a0 6d 02 c0    	mov    ebp,DWORD PTR ds:0xc0026da0
c001754b:	40                   	inc    eax
c001754c:	89 04 24             	mov    DWORD PTR [esp],eax
c001754f:	e8 4f 24 ff ff       	call   c00099a3 <malloc>
c0017554:	89 04 ad c0 71 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8e40],eax
c001755b:	58                   	pop    eax
c001755c:	a1 a0 6d 02 c0       	mov    eax,ds:0xc0026da0
c0017561:	5a                   	pop    edx
c0017562:	56                   	push   esi
c0017563:	ff 34 85 c0 71 02 c0 	push   DWORD PTR [eax*4-0x3ffd8e40]
c001756a:	e8 d1 91 fe ff       	call   c0000740 <strcpy>
c001756f:	a1 a0 6d 02 c0       	mov    eax,ds:0xc0026da0
c0017574:	8d 50 01             	lea    edx,[eax+0x1]
c0017577:	89 1c 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],ebx
c001757e:	89 15 a0 6d 02 c0    	mov    DWORD PTR ds:0xc0026da0,edx
c0017584:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017588:	83 c4 0c             	add    esp,0xc
c001758b:	89 14 85 c0 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9240],edx
c0017592:	6a 01                	push   0x1
c0017594:	53                   	push   ebx
c0017595:	56                   	push   esi
c0017596:	e8 c2 f6 ff ff       	call   c0016c5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001759b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001759f:	83 c4 10             	add    esp,0x10
c00175a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00175a7:	0f 85 89 00 00 00    	jne    c0017636 <Thr::loadDLL(char const*, bool)+0x220>
c00175ad:	89 f8                	mov    eax,edi
c00175af:	84 c0                	test   al,al
c00175b1:	74 73                	je     c0017626 <Thr::loadDLL(char const*, bool)+0x210>
c00175b3:	83 ec 0c             	sub    esp,0xc
c00175b6:	68 14 44 02 c0       	push   0xc0024414
c00175bb:	e8 83 cc ff ff       	call   c0014243 <Krnl::panic(char const*)>
c00175c0:	83 c4 10             	add    esp,0x10
c00175c3:	eb 61                	jmp    c0017626 <Thr::loadDLL(char const*, bool)+0x210>
c00175c5:	50                   	push   eax
c00175c6:	50                   	push   eax
c00175c7:	89 e8                	mov    eax,ebp
c00175c9:	c1 e0 0c             	shl    eax,0xc
c00175cc:	01 d8                	add    eax,ebx
c00175ce:	50                   	push   eax
c00175cf:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c00175d5:	e8 60 43 ff ff       	call   c000b93a <VAS::getPageTableEntry(unsigned long)>
c00175da:	83 c4 10             	add    esp,0x10
c00175dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00175df:	a8 60                	test   al,0x60
c00175e1:	75 11                	jne    c00175f4 <Thr::loadDLL(char const*, bool)+0x1de>
c00175e3:	83 ec 0c             	sub    esp,0xc
c00175e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00175eb:	50                   	push   eax
c00175ec:	e8 3d 27 ff ff       	call   c0009d2e <Phys::freePage(unsigned long)>
c00175f1:	83 c4 10             	add    esp,0x10
c00175f4:	45                   	inc    ebp
c00175f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175fd:	05 ff 0f 00 00       	add    eax,0xfff
c0017602:	bf 00 00 00 00       	mov    edi,0x0
c0017607:	83 d2 00             	adc    edx,0x0
c001760a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001760e:	c1 ea 0c             	shr    edx,0xc
c0017611:	39 c5                	cmp    ebp,eax
c0017613:	89 d1                	mov    ecx,edx
c0017615:	89 f8                	mov    eax,edi
c0017617:	19 c8                	sbb    eax,ecx
c0017619:	72 aa                	jb     c00175c5 <Thr::loadDLL(char const*, bool)+0x1af>
c001761b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017620:	75 18                	jne    c001763a <Thr::loadDLL(char const*, bool)+0x224>
c0017622:	31 db                	xor    ebx,ebx
c0017624:	eb 14                	jmp    c001763a <Thr::loadDLL(char const*, bool)+0x224>
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	68 33 44 02 c0       	push   0xc0024433
c001762e:	e8 10 cc ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0017633:	83 c4 10             	add    esp,0x10
c0017636:	31 ed                	xor    ebp,ebp
c0017638:	eb bb                	jmp    c00175f5 <Thr::loadDLL(char const*, bool)+0x1df>
c001763a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017640:	89 d8                	mov    eax,ebx
c0017642:	5b                   	pop    ebx
c0017643:	5e                   	pop    esi
c0017644:	5f                   	pop    edi
c0017645:	5d                   	pop    ebp
c0017646:	c3                   	ret    

c0017647 <Thr::executeDLL(unsigned long, void*)>:
c0017647:	56                   	push   esi
c0017648:	53                   	push   ebx
c0017649:	52                   	push   edx
c001764a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001764e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017652:	85 db                	test   ebx,ebx
c0017654:	75 10                	jne    c0017666 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017656:	83 ec 0c             	sub    esp,0xc
c0017659:	68 4f 44 02 c0       	push   0xc002444f
c001765e:	e8 e0 cb ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0017663:	83 c4 10             	add    esp,0x10
c0017666:	50                   	push   eax
c0017667:	50                   	push   eax
c0017668:	53                   	push   ebx
c0017669:	68 79 44 02 c0       	push   0xc0024479
c001766e:	e8 91 53 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0017673:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017677:	89 d8                	mov    eax,ebx
c0017679:	83 c4 14             	add    esp,0x14
c001767c:	5b                   	pop    ebx
c001767d:	5e                   	pop    esi
c001767e:	ff e0                	jmp    eax

c0017680 <userModeEntryPoint(void*)>:
c0017680:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0017685:	48                   	dec    eax
c0017686:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c001768b:	75 01                	jne    c001768e <userModeEntryPoint(void*)+0xe>
c001768d:	fb                   	sti    
c001768e:	fb                   	sti    
c001768f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017694:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017697:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001769d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00176a1:	e9 b9 8b fe ff       	jmp    c000025f <goToUsermode>

c00176a6 <changeTSS>:
c00176a6:	83 ec 14             	sub    esp,0x14
c00176a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176ae:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00176b1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00176b6:	c1 e2 15             	shl    edx,0x15
c00176b9:	29 d0                	sub    eax,edx
c00176bb:	50                   	push   eax
c00176bc:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00176c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00176c7:	05 7c 11 00 00       	add    eax,0x117c
c00176cc:	50                   	push   eax
c00176cd:	e8 ac 38 ff ff       	call   c000af7e <TSS::setESP(unsigned long)>
c00176d2:	83 c4 1c             	add    esp,0x1c
c00176d5:	c3                   	ret    

c00176d6 <switchToThread(ThreadControlBlock*)>:
c00176d6:	57                   	push   edi
c00176d7:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c00176dc:	56                   	push   esi
c00176dd:	85 c0                	test   eax,eax
c00176df:	53                   	push   ebx
c00176e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00176e4:	0f 85 88 00 00 00    	jne    c0017772 <switchToThread(ThreadControlBlock*)+0x9c>
c00176ea:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00176ed:	3c ff                	cmp    al,0xff
c00176ef:	74 7d                	je     c001776e <switchToThread(ThreadControlBlock*)+0x98>
c00176f1:	0f b6 d0             	movzx  edx,al
c00176f4:	b8 00 04 00 00       	mov    eax,0x400
c00176f9:	29 d0                	sub    eax,edx
c00176fb:	d1 f8                	sar    eax,1
c00176fd:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017700:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017703:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c0017708:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001770e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017715:	74 4b                	je     c0017762 <switchToThread(ThreadControlBlock*)+0x8c>
c0017717:	0f 31                	rdtsc  
c0017719:	a3 a8 75 02 c0       	mov    ds:0xc00275a8,eax
c001771e:	89 c6                	mov    esi,eax
c0017720:	89 d7                	mov    edi,edx
c0017722:	2b 35 98 75 02 c0    	sub    esi,DWORD PTR ds:0xc0027598
c0017728:	89 15 ac 75 02 c0    	mov    DWORD PTR ds:0xc00275ac,edx
c001772e:	1b 3d 9c 75 02 c0    	sbb    edi,DWORD PTR ds:0xc002759c
c0017734:	89 35 a0 75 02 c0    	mov    DWORD PTR ds:0xc00275a0,esi
c001773a:	a3 98 75 02 c0       	mov    ds:0xc0027598,eax
c001773f:	89 3d a4 75 02 c0    	mov    DWORD PTR ds:0xc00275a4,edi
c0017745:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001774b:	89 15 9c 75 02 c0    	mov    DWORD PTR ds:0xc002759c,edx
c0017751:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017754:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017757:	01 c6                	add    esi,eax
c0017759:	11 d7                	adc    edi,edx
c001775b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001775e:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017761:	90                   	nop
c0017762:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017766:	5b                   	pop    ebx
c0017767:	5e                   	pop    esi
c0017768:	5f                   	pop    edi
c0017769:	e9 29 8b fe ff       	jmp    c0000297 <switchToThreadASM>
c001776e:	31 c0                	xor    eax,eax
c0017770:	eb 8e                	jmp    c0017700 <switchToThread(ThreadControlBlock*)+0x2a>
c0017772:	5b                   	pop    ebx
c0017773:	c7 05 60 75 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x1
c001777d:	5e                   	pop    esi
c001777e:	5f                   	pop    edi
c001777f:	c3                   	ret    

c0017780 <Process::addArgs(char**)>:
c0017780:	57                   	push   edi
c0017781:	56                   	push   esi
c0017782:	53                   	push   ebx
c0017783:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017787:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001778b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017795:	85 ff                	test   edi,edi
c0017797:	74 3f                	je     c00177d8 <Process::addArgs(char**)+0x58>
c0017799:	8b 07                	mov    eax,DWORD PTR [edi]
c001779b:	85 c0                	test   eax,eax
c001779d:	74 39                	je     c00177d8 <Process::addArgs(char**)+0x58>
c001779f:	31 db                	xor    ebx,ebx
c00177a1:	90                   	nop
c00177a2:	83 ec 0c             	sub    esp,0xc
c00177a5:	50                   	push   eax
c00177a6:	e8 f5 8e fe ff       	call   c00006a0 <strlen>
c00177ab:	40                   	inc    eax
c00177ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00177af:	e8 ef 21 ff ff       	call   c00099a3 <malloc>
c00177b4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00177bb:	5a                   	pop    edx
c00177bc:	59                   	pop    ecx
c00177bd:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00177c0:	43                   	inc    ebx
c00177c1:	50                   	push   eax
c00177c2:	e8 79 8f fe ff       	call   c0000740 <strcpy>
c00177c7:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00177cd:	83 c4 10             	add    esp,0x10
c00177d0:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00177d3:	85 c0                	test   eax,eax
c00177d5:	75 cb                	jne    c00177a2 <Process::addArgs(char**)+0x22>
c00177d7:	90                   	nop
c00177d8:	5b                   	pop    ebx
c00177d9:	5e                   	pop    esi
c00177da:	5f                   	pop    edi
c00177db:	c3                   	ret    

c00177dc <Process::Process(char const*, Process*, char**)>:
c00177dc:	56                   	push   esi
c00177dd:	53                   	push   ebx
c00177de:	83 ec 14             	sub    esp,0x14
c00177e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177e5:	05 0c 02 00 00       	add    eax,0x20c
c00177ea:	bb 07 00 00 00       	mov    ebx,0x7
c00177ef:	89 c6                	mov    esi,eax
c00177f1:	90                   	nop
c00177f2:	85 db                	test   ebx,ebx
c00177f4:	78 12                	js     c0017808 <Process::Process(char const*, Process*, char**)+0x2c>
c00177f6:	83 ec 0c             	sub    esp,0xc
c00177f9:	56                   	push   esi
c00177fa:	e8 f3 9c 00 00       	call   c00214f2 <ThreadControlBlock::ThreadControlBlock()>
c00177ff:	83 c4 10             	add    esp,0x10
c0017802:	83 c6 5f             	add    esi,0x5f
c0017805:	4b                   	dec    ebx
c0017806:	eb ea                	jmp    c00177f2 <Process::Process(char const*, Process*, char**)+0x16>
c0017808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001780c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017813:	83 ec 0c             	sub    esp,0xc
c0017816:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001781a:	e8 ad c8 ff ff       	call   c00140cc <Krnl::newProcessEnv(Process*)>
c001781f:	83 c4 10             	add    esp,0x10
c0017822:	89 c2                	mov    edx,eax
c0017824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017828:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001782e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017832:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001783b:	a1 90 5a 02 c0       	mov    eax,ds:0xc0025a90
c0017840:	8d 50 01             	lea    edx,[eax+0x1]
c0017843:	89 15 90 5a 02 c0    	mov    DWORD PTR ds:0xc0025a90,edx
c0017849:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001784d:	89 02                	mov    DWORD PTR [edx],eax
c001784f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017857:	83 ec 0c             	sub    esp,0xc
c001785a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001785e:	e8 40 21 ff ff       	call   c00099a3 <malloc>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	89 c3                	mov    ebx,eax
c0017868:	83 ec 08             	sub    esp,0x8
c001786b:	6a 00                	push   0x0
c001786d:	53                   	push   ebx
c001786e:	e8 07 49 ff ff       	call   c000c17a <VAS::VAS(bool)>
c0017873:	83 c4 10             	add    esp,0x10
c0017876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001787a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017884:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001788e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017892:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017896:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001789c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00178a6:	85 c0                	test   eax,eax
c00178a8:	74 42                	je     c00178ec <Process::Process(char const*, Process*, char**)+0x110>
c00178aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00178b4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00178ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178be:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00178c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00178ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00178d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d8:	05 0c 01 00 00       	add    eax,0x10c
c00178dd:	83 ec 08             	sub    esp,0x8
c00178e0:	52                   	push   edx
c00178e1:	50                   	push   eax
c00178e2:	e8 59 8e fe ff       	call   c0000740 <strcpy>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	eb 64                	jmp    c0017950 <Process::Process(char const*, Process*, char**)+0x174>
c00178ec:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c00178f4:	83 ec 0c             	sub    esp,0xc
c00178f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00178fb:	e8 a3 20 ff ff       	call   c00099a3 <malloc>
c0017900:	83 c4 10             	add    esp,0x10
c0017903:	89 c3                	mov    ebx,eax
c0017905:	83 ec 08             	sub    esp,0x8
c0017908:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001790c:	53                   	push   ebx
c001790d:	e8 7e 33 ff ff       	call   c000ac90 <VgaText::VgaText(char const*)>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017919:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001791f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017923:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017929:	83 ec 0c             	sub    esp,0xc
c001792c:	50                   	push   eax
c001792d:	e8 1d 2b ff ff       	call   c000a44f <addToTerminalCycle(VgaText*)>
c0017932:	83 c4 10             	add    esp,0x10
c0017935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017939:	05 0c 01 00 00       	add    eax,0x10c
c001793e:	83 ec 08             	sub    esp,0x8
c0017941:	68 98 44 02 c0       	push   0xc0024498
c0017946:	50                   	push   eax
c0017947:	e8 f4 8d fe ff       	call   c0000740 <strcpy>
c001794c:	83 c4 10             	add    esp,0x10
c001794f:	90                   	nop
c0017950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017954:	83 c0 0c             	add    eax,0xc
c0017957:	83 ec 08             	sub    esp,0x8
c001795a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001795e:	50                   	push   eax
c001795f:	e8 dc 8d fe ff       	call   c0000740 <strcpy>
c0017964:	83 c4 10             	add    esp,0x10
c0017967:	83 ec 08             	sub    esp,0x8
c001796a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001796e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017972:	e8 09 fe ff ff       	call   c0017780 <Process::addArgs(char**)>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	83 ec 08             	sub    esp,0x8
c001797d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017981:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017985:	e8 9d ed ff ff       	call   c0016727 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017991:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017995:	83 f0 01             	xor    eax,0x1
c0017998:	88 c2                	mov    dl,al
c001799a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00179a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179a9:	83 ec 08             	sub    esp,0x8
c00179ac:	50                   	push   eax
c00179ad:	68 f0 44 02 c0       	push   0xc00244f0
c00179b2:	e8 4d 50 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00179b7:	83 c4 10             	add    esp,0x10
c00179ba:	90                   	nop
c00179bb:	83 c4 14             	add    esp,0x14
c00179be:	5b                   	pop    ebx
c00179bf:	5e                   	pop    esi
c00179c0:	c3                   	ret    
c00179c1:	90                   	nop

c00179c2 <Process::Process(bool, char const*, Process*, char**)>:
c00179c2:	56                   	push   esi
c00179c3:	53                   	push   ebx
c00179c4:	83 ec 24             	sub    esp,0x24
c00179c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00179cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179d3:	05 0c 02 00 00       	add    eax,0x20c
c00179d8:	bb 07 00 00 00       	mov    ebx,0x7
c00179dd:	89 c6                	mov    esi,eax
c00179df:	90                   	nop
c00179e0:	85 db                	test   ebx,ebx
c00179e2:	78 12                	js     c00179f6 <Process::Process(bool, char const*, Process*, char**)+0x34>
c00179e4:	83 ec 0c             	sub    esp,0xc
c00179e7:	56                   	push   esi
c00179e8:	e8 05 9b 00 00       	call   c00214f2 <ThreadControlBlock::ThreadControlBlock()>
c00179ed:	83 c4 10             	add    esp,0x10
c00179f0:	83 c6 5f             	add    esi,0x5f
c00179f3:	4b                   	dec    ebx
c00179f4:	eb ea                	jmp    c00179e0 <Process::Process(bool, char const*, Process*, char**)+0x1e>
c00179f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179fa:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017a01:	83 ec 0c             	sub    esp,0xc
c0017a04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017a08:	e8 bf c6 ff ff       	call   c00140cc <Krnl::newProcessEnv(Process*)>
c0017a0d:	83 c4 10             	add    esp,0x10
c0017a10:	89 c2                	mov    edx,eax
c0017a12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a16:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017a1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a20:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017a29:	a1 90 5a 02 c0       	mov    eax,ds:0xc0025a90
c0017a2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017a31:	89 15 90 5a 02 c0    	mov    DWORD PTR ds:0xc0025a90,edx
c0017a37:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a3b:	89 02                	mov    DWORD PTR [edx],eax
c0017a3d:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017a45:	83 ec 0c             	sub    esp,0xc
c0017a48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a4c:	e8 52 1f ff ff       	call   c00099a3 <malloc>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	89 c3                	mov    ebx,eax
c0017a56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a5b:	83 ec 08             	sub    esp,0x8
c0017a5e:	50                   	push   eax
c0017a5f:	53                   	push   ebx
c0017a60:	e8 15 47 ff ff       	call   c000c17a <VAS::VAS(bool)>
c0017a65:	83 c4 10             	add    esp,0x10
c0017a68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a6c:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017a72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a76:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017a80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017a88:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017a8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a92:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a98:	85 c0                	test   eax,eax
c0017a9a:	74 42                	je     c0017ade <Process::Process(bool, char const*, Process*, char**)+0x11c>
c0017a9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aa0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017aa6:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017aac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ab0:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017ab6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017ac0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017ac6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aca:	05 0c 01 00 00       	add    eax,0x10c
c0017acf:	83 ec 08             	sub    esp,0x8
c0017ad2:	52                   	push   edx
c0017ad3:	50                   	push   eax
c0017ad4:	e8 67 8c fe ff       	call   c0000740 <strcpy>
c0017ad9:	83 c4 10             	add    esp,0x10
c0017adc:	eb 64                	jmp    c0017b42 <Process::Process(bool, char const*, Process*, char**)+0x180>
c0017ade:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017ae6:	83 ec 0c             	sub    esp,0xc
c0017ae9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017aed:	e8 b1 1e ff ff       	call   c00099a3 <malloc>
c0017af2:	83 c4 10             	add    esp,0x10
c0017af5:	89 c3                	mov    ebx,eax
c0017af7:	83 ec 08             	sub    esp,0x8
c0017afa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017afe:	53                   	push   ebx
c0017aff:	e8 8c 31 ff ff       	call   c000ac90 <VgaText::VgaText(char const*)>
c0017b04:	83 c4 10             	add    esp,0x10
c0017b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b0b:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017b11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b15:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b1b:	83 ec 0c             	sub    esp,0xc
c0017b1e:	50                   	push   eax
c0017b1f:	e8 2b 29 ff ff       	call   c000a44f <addToTerminalCycle(VgaText*)>
c0017b24:	83 c4 10             	add    esp,0x10
c0017b27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b2b:	05 0c 01 00 00       	add    eax,0x10c
c0017b30:	83 ec 08             	sub    esp,0x8
c0017b33:	68 98 44 02 c0       	push   0xc0024498
c0017b38:	50                   	push   eax
c0017b39:	e8 02 8c fe ff       	call   c0000740 <strcpy>
c0017b3e:	83 c4 10             	add    esp,0x10
c0017b41:	90                   	nop
c0017b42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b46:	83 c0 0c             	add    eax,0xc
c0017b49:	83 ec 08             	sub    esp,0x8
c0017b4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017b50:	50                   	push   eax
c0017b51:	e8 ea 8b fe ff       	call   c0000740 <strcpy>
c0017b56:	83 c4 10             	add    esp,0x10
c0017b59:	83 ec 08             	sub    esp,0x8
c0017b5c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017b60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b64:	e8 17 fc ff ff       	call   c0017780 <Process::addArgs(char**)>
c0017b69:	83 c4 10             	add    esp,0x10
c0017b6c:	90                   	nop
c0017b6d:	83 c4 24             	add    esp,0x24
c0017b70:	5b                   	pop    ebx
c0017b71:	5e                   	pop    esi
c0017b72:	c3                   	ret    
c0017b73:	90                   	nop

c0017b74 <taskStartupFunction>:
c0017b74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b79:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017b7c:	c3                   	ret    
c0017b7d:	90                   	nop

c0017b7e <Semaphore::Semaphore(int)>:
c0017b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b86:	89 10                	mov    DWORD PTR [eax],edx
c0017b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b8c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017b93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017b9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ba2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017ba9:	90                   	nop
c0017baa:	c3                   	ret    
c0017bab:	90                   	nop

c0017bac <Mutex::Mutex()>:
c0017bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bb0:	6a 01                	push   0x1
c0017bb2:	50                   	push   eax
c0017bb3:	e8 c6 ff ff ff       	call   c0017b7e <Semaphore::Semaphore(int)>
c0017bb8:	83 c4 08             	add    esp,0x8
c0017bbb:	90                   	nop
c0017bbc:	c3                   	ret    
c0017bbd:	90                   	nop

c0017bbe <Process::createThread(void (*)(void*), void*, int)>:
c0017bbe:	57                   	push   edi
c0017bbf:	31 c9                	xor    ecx,ecx
c0017bc1:	56                   	push   esi
c0017bc2:	53                   	push   ebx
c0017bc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017bc7:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017bce:	89 f2                	mov    edx,esi
c0017bd0:	0f b7 c2             	movzx  eax,dx
c0017bd3:	83 e2 01             	and    edx,0x1
c0017bd6:	74 12                	je     c0017bea <Process::createThread(void (*)(void*), void*, int)+0x2c>
c0017bd8:	d1 f8                	sar    eax,1
c0017bda:	41                   	inc    ecx
c0017bdb:	89 c2                	mov    edx,eax
c0017bdd:	83 f9 10             	cmp    ecx,0x10
c0017be0:	75 ee                	jne    c0017bd0 <Process::createThread(void (*)(void*), void*, int)+0x12>
c0017be2:	31 db                	xor    ebx,ebx
c0017be4:	89 d8                	mov    eax,ebx
c0017be6:	5b                   	pop    ebx
c0017be7:	5e                   	pop    esi
c0017be8:	5f                   	pop    edi
c0017be9:	c3                   	ret    
c0017bea:	b8 01 00 00 00       	mov    eax,0x1
c0017bef:	d3 e0                	shl    eax,cl
c0017bf1:	09 c6                	or     esi,eax
c0017bf3:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017bf6:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017bfd:	01 c0                	add    eax,eax
c0017bff:	01 c8                	add    eax,ecx
c0017c01:	8d 04 80             	lea    eax,[eax+eax*4]
c0017c04:	01 d8                	add    eax,ebx
c0017c06:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017c0d:	75 0b                	jne    c0017c1a <Process::createThread(void (*)(void*), void*, int)+0x5c>
c0017c0f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017c19:	90                   	nop
c0017c1a:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017c20:	83 ec 08             	sub    esp,0x8
c0017c23:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017c26:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017c29:	01 c0                	add    eax,eax
c0017c2b:	01 c8                	add    eax,ecx
c0017c2d:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017c30:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017c33:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017c39:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017c3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c43:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017c49:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017c4f:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017c56:	89 ca                	mov    edx,ecx
c0017c58:	f7 da                	neg    edx
c0017c5a:	c1 e2 15             	shl    edx,0x15
c0017c5d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017c63:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017c69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c6d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017c77:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017c7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c81:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017c87:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017c91:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017c9b:	53                   	push   ebx
c0017c9c:	68 84 75 02 c0       	push   0xc0027584
c0017ca1:	e8 04 96 00 00       	call   c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017ca6:	83 c4 10             	add    esp,0x10
c0017ca9:	89 d8                	mov    eax,ebx
c0017cab:	5b                   	pop    ebx
c0017cac:	5e                   	pop    esi
c0017cad:	5f                   	pop    edi
c0017cae:	c3                   	ret    
c0017caf:	90                   	nop

c0017cb0 <Process::createUserThread()>:
c0017cb0:	83 ec 0c             	sub    esp,0xc
c0017cb3:	68 80 00 00 00       	push   0x80
c0017cb8:	6a 00                	push   0x0
c0017cba:	68 80 76 01 c0       	push   0xc0017680
c0017cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cc3:	e8 f6 fe ff ff       	call   c0017bbe <Process::createThread(void (*)(void*), void*, int)>
c0017cc8:	83 c4 1c             	add    esp,0x1c
c0017ccb:	c3                   	ret    

c0017ccc <setupMultitasking(void (*)())>:
c0017ccc:	56                   	push   esi
c0017ccd:	53                   	push   ebx
c0017cce:	51                   	push   ecx
c0017ccf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017cd3:	eb 11                	jmp    c0017ce6 <setupMultitasking(void (*)())+0x1a>
c0017cd5:	90                   	nop
c0017cd6:	83 ec 0c             	sub    esp,0xc
c0017cd9:	68 84 75 02 c0       	push   0xc0027584
c0017cde:	e8 15 95 00 00       	call   c00211f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017ce3:	83 c4 10             	add    esp,0x10
c0017ce6:	83 ec 0c             	sub    esp,0xc
c0017ce9:	68 84 75 02 c0       	push   0xc0027584
c0017cee:	e8 e1 94 00 00       	call   c00211d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017cf3:	83 c4 10             	add    esp,0x10
c0017cf6:	84 c0                	test   al,al
c0017cf8:	74 dc                	je     c0017cd6 <setupMultitasking(void (*)())+0xa>
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	68 1f 07 00 00       	push   0x71f
c0017d02:	e8 9c 1c ff ff       	call   c00099a3 <malloc>
c0017d07:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017d0e:	89 c3                	mov    ebx,eax
c0017d10:	6a 00                	push   0x0
c0017d12:	68 9c 44 02 c0       	push   0xc002449c
c0017d17:	6a 01                	push   0x1
c0017d19:	50                   	push   eax
c0017d1a:	e8 a3 fc ff ff       	call   c00179c2 <Process::Process(bool, char const*, Process*, char**)>
c0017d1f:	83 c4 14             	add    esp,0x14
c0017d22:	89 1d 90 75 02 c0    	mov    DWORD PTR ds:0xc0027590,ebx
c0017d28:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017d2e:	e8 2a 2a ff ff       	call   c000a75d <setActiveTerminal(VgaText*)>
c0017d33:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017d3b:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017d45:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d4b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d4e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017d58:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017d5e:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017d64:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017d6e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017d78:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017d82:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017d88:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017d92:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017d98:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017da2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017da8:	58                   	pop    eax
c0017da9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017daf:	5a                   	pop    edx
c0017db0:	68 98 44 02 c0       	push   0xc0024498
c0017db5:	50                   	push   eax
c0017db6:	e8 85 89 fe ff       	call   c0000740 <strcpy>
c0017dbb:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017dc2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017dc6:	83 c4 14             	add    esp,0x14
c0017dc9:	5b                   	pop    ebx
c0017dca:	5e                   	pop    esi
c0017dcb:	e9 b9 84 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>

c0017dd0 <schedule()>:
c0017dd0:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c0017dd5:	85 c0                	test   eax,eax
c0017dd7:	74 0b                	je     c0017de4 <schedule()+0x14>
c0017dd9:	c7 05 60 75 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x1
c0017de3:	c3                   	ret    
c0017de4:	53                   	push   ebx
c0017de5:	83 ec 14             	sub    esp,0x14
c0017de8:	68 84 75 02 c0       	push   0xc0027584
c0017ded:	e8 e2 93 00 00       	call   c00211d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	84 c0                	test   al,al
c0017df7:	75 39                	jne    c0017e32 <schedule()+0x62>
c0017df9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dfe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017e01:	4a                   	dec    edx
c0017e02:	74 34                	je     c0017e38 <schedule()+0x68>
c0017e04:	83 ec 0c             	sub    esp,0xc
c0017e07:	68 84 75 02 c0       	push   0xc0027584
c0017e0c:	e8 df 93 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017e11:	c7 04 24 84 75 02 c0 	mov    DWORD PTR [esp],0xc0027584
c0017e18:	89 c3                	mov    ebx,eax
c0017e1a:	e8 d9 93 00 00       	call   c00211f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e1f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017e26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e29:	e8 a8 f8 ff ff       	call   c00176d6 <switchToThread(ThreadControlBlock*)>
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	90                   	nop
c0017e32:	83 c4 08             	add    esp,0x8
c0017e35:	5b                   	pop    ebx
c0017e36:	c3                   	ret    
c0017e37:	90                   	nop
c0017e38:	83 ec 08             	sub    esp,0x8
c0017e3b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017e42:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017e48:	68 84 75 02 c0       	push   0xc0027584
c0017e4d:	e8 58 94 00 00       	call   c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e52:	83 c4 10             	add    esp,0x10
c0017e55:	eb ad                	jmp    c0017e04 <schedule()+0x34>
c0017e57:	90                   	nop

c0017e58 <Semaphore::tryAcquire()>:
c0017e58:	53                   	push   ebx
c0017e59:	83 ec 08             	sub    esp,0x8
c0017e5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017e60:	fa                   	cli    
c0017e61:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0017e66:	8d 50 01             	lea    edx,[eax+0x1]
c0017e69:	89 15 68 75 02 c0    	mov    DWORD PTR ds:0xc0027568,edx
c0017e6f:	8b 15 64 75 02 c0    	mov    edx,DWORD PTR ds:0xc0027564
c0017e75:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017e78:	89 1d 64 75 02 c0    	mov    DWORD PTR ds:0xc0027564,ebx
c0017e7e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017e81:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017e83:	7c 2d                	jl     c0017eb2 <Semaphore::tryAcquire()+0x5a>
c0017e85:	89 15 64 75 02 c0    	mov    DWORD PTR ds:0xc0027564,edx
c0017e8b:	85 d2                	test   edx,edx
c0017e8d:	75 0b                	jne    c0017e9a <Semaphore::tryAcquire()+0x42>
c0017e8f:	8b 15 60 75 02 c0    	mov    edx,DWORD PTR ds:0xc0027560
c0017e95:	85 d2                	test   edx,edx
c0017e97:	75 61                	jne    c0017efa <Semaphore::tryAcquire()+0xa2>
c0017e99:	90                   	nop
c0017e9a:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0017e9f:	85 c0                	test   eax,eax
c0017ea1:	74 09                	je     c0017eac <Semaphore::tryAcquire()+0x54>
c0017ea3:	90                   	nop
c0017ea4:	31 c0                	xor    eax,eax
c0017ea6:	83 c4 08             	add    esp,0x8
c0017ea9:	5b                   	pop    ebx
c0017eaa:	c3                   	ret    
c0017eab:	90                   	nop
c0017eac:	fb                   	sti    
c0017ead:	83 c4 08             	add    esp,0x8
c0017eb0:	5b                   	pop    ebx
c0017eb1:	c3                   	ret    
c0017eb2:	43                   	inc    ebx
c0017eb3:	89 15 64 75 02 c0    	mov    DWORD PTR ds:0xc0027564,edx
c0017eb9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017ebc:	85 d2                	test   edx,edx
c0017ebe:	75 20                	jne    c0017ee0 <Semaphore::tryAcquire()+0x88>
c0017ec0:	8b 0d 60 75 02 c0    	mov    ecx,DWORD PTR ds:0xc0027560
c0017ec6:	85 c9                	test   ecx,ecx
c0017ec8:	74 16                	je     c0017ee0 <Semaphore::tryAcquire()+0x88>
c0017eca:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c0017ed4:	e8 f7 fe ff ff       	call   c0017dd0 <schedule()>
c0017ed9:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0017ede:	48                   	dec    eax
c0017edf:	90                   	nop
c0017ee0:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0017ee5:	85 c0                	test   eax,eax
c0017ee7:	75 09                	jne    c0017ef2 <Semaphore::tryAcquire()+0x9a>
c0017ee9:	fb                   	sti    
c0017eea:	b0 01                	mov    al,0x1
c0017eec:	83 c4 08             	add    esp,0x8
c0017eef:	5b                   	pop    ebx
c0017ef0:	c3                   	ret    
c0017ef1:	90                   	nop
c0017ef2:	b0 01                	mov    al,0x1
c0017ef4:	83 c4 08             	add    esp,0x8
c0017ef7:	5b                   	pop    ebx
c0017ef8:	c3                   	ret    
c0017ef9:	90                   	nop
c0017efa:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c0017f04:	e8 c7 fe ff ff       	call   c0017dd0 <schedule()>
c0017f09:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0017f0e:	48                   	dec    eax
c0017f0f:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0017f14:	85 c0                	test   eax,eax
c0017f16:	75 8c                	jne    c0017ea4 <Semaphore::tryAcquire()+0x4c>
c0017f18:	eb 92                	jmp    c0017eac <Semaphore::tryAcquire()+0x54>

c0017f1a <Semaphore::assertLocked(char const*)>:
c0017f1a:	83 ec 0c             	sub    esp,0xc
c0017f1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f21:	fa                   	cli    
c0017f22:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0017f28:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c0017f2d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f30:	89 0d 64 75 02 c0    	mov    DWORD PTR ds:0xc0027564,ecx
c0017f36:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0017f38:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0017f3b:	7c 25                	jl     c0017f62 <Semaphore::assertLocked(char const*)+0x48>
c0017f3d:	90                   	nop
c0017f3e:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c0017f43:	85 c0                	test   eax,eax
c0017f45:	75 09                	jne    c0017f50 <Semaphore::assertLocked(char const*)+0x36>
c0017f47:	a1 60 75 02 c0       	mov    eax,ds:0xc0027560
c0017f4c:	85 c0                	test   eax,eax
c0017f4e:	75 2a                	jne    c0017f7a <Semaphore::assertLocked(char const*)+0x60>
c0017f50:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0017f55:	48                   	dec    eax
c0017f56:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0017f5b:	75 01                	jne    c0017f5e <Semaphore::assertLocked(char const*)+0x44>
c0017f5d:	fb                   	sti    
c0017f5e:	83 c4 0c             	add    esp,0xc
c0017f61:	c3                   	ret    
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f69:	e8 d5 c2 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0017f6e:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	48                   	dec    eax
c0017f77:	eb c5                	jmp    c0017f3e <Semaphore::assertLocked(char const*)+0x24>
c0017f79:	90                   	nop
c0017f7a:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c0017f84:	e8 47 fe ff ff       	call   c0017dd0 <schedule()>
c0017f89:	eb c5                	jmp    c0017f50 <Semaphore::assertLocked(char const*)+0x36>
c0017f8b:	90                   	nop

c0017f8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017f8c:	83 ec 0c             	sub    esp,0xc
c0017f8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f98:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017f9b:	e8 30 fe ff ff       	call   c0017dd0 <schedule()>
c0017fa0:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0017fa5:	48                   	dec    eax
c0017fa6:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0017fab:	75 01                	jne    c0017fae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c0017fad:	fb                   	sti    
c0017fae:	83 c4 0c             	add    esp,0xc
c0017fb1:	c3                   	ret    

c0017fb2 <blockTask(TaskState)>:
c0017fb2:	83 ec 0c             	sub    esp,0xc
c0017fb5:	fa                   	cli    
c0017fb6:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0017fbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017fc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fc5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017fc8:	e8 03 fe ff ff       	call   c0017dd0 <schedule()>
c0017fcd:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0017fd2:	48                   	dec    eax
c0017fd3:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0017fd8:	75 02                	jne    c0017fdc <blockTask(TaskState)+0x2a>
c0017fda:	fb                   	sti    
c0017fdb:	90                   	nop
c0017fdc:	83 c4 0c             	add    esp,0xc
c0017fdf:	c3                   	ret    

c0017fe0 <waitTask(int, int*, int)>:
c0017fe0:	83 ec 18             	sub    esp,0x18
c0017fe3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fe8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fec:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0017fef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ff3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ff8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017ffb:	6a 07                	push   0x7
c0017ffd:	e8 b0 ff ff ff       	call   c0017fb2 <blockTask(TaskState)>
c0018002:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001800d:	85 d2                	test   edx,edx
c001800f:	74 0b                	je     c001801c <waitTask(int, int*, int)+0x3c>
c0018011:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018014:	89 02                	mov    DWORD PTR [edx],eax
c0018016:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001801b:	90                   	nop
c001801c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001801f:	83 c4 0c             	add    esp,0xc
c0018022:	c3                   	ret    
c0018023:	90                   	nop

c0018024 <milliTenthSleepUntil(unsigned int)>:
c0018024:	83 ec 0c             	sub    esp,0xc
c0018027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802b:	39 05 cc 66 02 c0    	cmp    DWORD PTR ds:0xc00266cc,eax
c0018031:	76 05                	jbe    c0018038 <milliTenthSleepUntil(unsigned int)+0x14>
c0018033:	90                   	nop
c0018034:	83 c4 0c             	add    esp,0xc
c0018037:	c3                   	ret    
c0018038:	fa                   	cli    
c0018039:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c001803f:	83 ec 08             	sub    esp,0x8
c0018042:	ff 05 64 75 02 c0    	inc    DWORD PTR ds:0xc0027564
c0018048:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001804e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018051:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018057:	68 78 75 02 c0       	push   0xc0027578
c001805c:	e8 49 92 00 00       	call   c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018061:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018068:	e8 45 ff ff ff       	call   c0017fb2 <blockTask(TaskState)>
c001806d:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c0018072:	83 c4 10             	add    esp,0x10
c0018075:	48                   	dec    eax
c0018076:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c001807b:	85 c0                	test   eax,eax
c001807d:	75 09                	jne    c0018088 <milliTenthSleepUntil(unsigned int)+0x64>
c001807f:	a1 60 75 02 c0       	mov    eax,ds:0xc0027560
c0018084:	85 c0                	test   eax,eax
c0018086:	75 12                	jne    c001809a <milliTenthSleepUntil(unsigned int)+0x76>
c0018088:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c001808d:	48                   	dec    eax
c001808e:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0018093:	75 9f                	jne    c0018034 <milliTenthSleepUntil(unsigned int)+0x10>
c0018095:	fb                   	sti    
c0018096:	83 c4 0c             	add    esp,0xc
c0018099:	c3                   	ret    
c001809a:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c00180a4:	e8 27 fd ff ff       	call   c0017dd0 <schedule()>
c00180a9:	eb dd                	jmp    c0018088 <milliTenthSleepUntil(unsigned int)+0x64>
c00180ab:	90                   	nop

c00180ac <milliTenthSleep(unsigned int)>:
c00180ac:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c00180b1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00180b5:	e9 6a ff ff ff       	jmp    c0018024 <milliTenthSleepUntil(unsigned int)>

c00180ba <sleep(unsigned int)>:
c00180ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180be:	8d 04 80             	lea    eax,[eax+eax*4]
c00180c1:	8d 04 80             	lea    eax,[eax+eax*4]
c00180c4:	8d 04 80             	lea    eax,[eax+eax*4]
c00180c7:	8d 04 80             	lea    eax,[eax+eax*4]
c00180ca:	c1 e0 04             	shl    eax,0x4
c00180cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00180d1:	eb d9                	jmp    c00180ac <milliTenthSleep(unsigned int)>
c00180d3:	90                   	nop

c00180d4 <Semaphore::acquire()>:
c00180d4:	83 ec 0c             	sub    esp,0xc
c00180d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180db:	fa                   	cli    
c00180dc:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c00180e1:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00180e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00180ea:	89 0d 64 75 02 c0    	mov    DWORD PTR ds:0xc0027564,ecx
c00180f0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00180f3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00180f5:	7d 29                	jge    c0018120 <Semaphore::acquire()+0x4c>
c00180f7:	41                   	inc    ecx
c00180f8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00180fb:	90                   	nop
c00180fc:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c0018101:	85 c0                	test   eax,eax
c0018103:	75 09                	jne    c001810e <Semaphore::acquire()+0x3a>
c0018105:	a1 60 75 02 c0       	mov    eax,ds:0xc0027560
c001810a:	85 c0                	test   eax,eax
c001810c:	75 5e                	jne    c001816c <Semaphore::acquire()+0x98>
c001810e:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0018113:	48                   	dec    eax
c0018114:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0018119:	75 01                	jne    c001811c <Semaphore::acquire()+0x48>
c001811b:	fb                   	sti    
c001811c:	83 c4 0c             	add    esp,0xc
c001811f:	c3                   	ret    
c0018120:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018125:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001812c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001812f:	85 c9                	test   ecx,ecx
c0018131:	74 4b                	je     c001817e <Semaphore::acquire()+0xaa>
c0018133:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018136:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001813c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001813f:	90                   	nop
c0018140:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018145:	83 ec 0c             	sub    esp,0xc
c0018148:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001814b:	68 18 45 02 c0       	push   0xc0024518
c0018150:	e8 af 48 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0018155:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001815c:	e8 51 fe ff ff       	call   c0017fb2 <blockTask(TaskState)>
c0018161:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c0018166:	83 c4 10             	add    esp,0x10
c0018169:	48                   	dec    eax
c001816a:	eb 90                	jmp    c00180fc <Semaphore::acquire()+0x28>
c001816c:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c0018176:	e8 55 fc ff ff       	call   c0017dd0 <schedule()>
c001817b:	eb 91                	jmp    c001810e <Semaphore::acquire()+0x3a>
c001817d:	90                   	nop
c001817e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018183:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018186:	eb b8                	jmp    c0018140 <Semaphore::acquire()+0x6c>

c0018188 <taskReturned>:
c0018188:	83 ec 18             	sub    esp,0x18
c001818b:	68 38 45 02 c0       	push   0xc0024538
c0018190:	e8 ae c0 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0018195:	83 c4 10             	add    esp,0x10
c0018198:	83 ec 0c             	sub    esp,0xc
c001819b:	6a 02                	push   0x2
c001819d:	e8 10 fe ff ff       	call   c0017fb2 <blockTask(TaskState)>
c00181a2:	fa                   	cli    
c00181a3:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00181a9:	e8 22 fc ff ff       	call   c0017dd0 <schedule()>
c00181ae:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00181b3:	83 c4 10             	add    esp,0x10
c00181b6:	48                   	dec    eax
c00181b7:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00181bc:	85 c0                	test   eax,eax
c00181be:	75 d8                	jne    c0018198 <taskReturned+0x10>
c00181c0:	fb                   	sti    
c00181c1:	eb d5                	jmp    c0018198 <taskReturned+0x10>
c00181c3:	90                   	nop

c00181c4 <Thr::processFromPID(int)>:
c00181c4:	57                   	push   edi
c00181c5:	56                   	push   esi
c00181c6:	53                   	push   ebx
c00181c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00181cb:	fa                   	cli    
c00181cc:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00181d2:	83 ec 0c             	sub    esp,0xc
c00181d5:	68 84 75 02 c0       	push   0xc0027584
c00181da:	e8 11 90 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	89 c7                	mov    edi,eax
c00181e4:	eb 14                	jmp    c00181fa <Thr::processFromPID(int)+0x36>
c00181e6:	83 ec 0c             	sub    esp,0xc
c00181e9:	68 84 75 02 c0       	push   0xc0027584
c00181ee:	e8 fd 8f 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00181f3:	83 c4 10             	add    esp,0x10
c00181f6:	39 f8                	cmp    eax,edi
c00181f8:	74 4c                	je     c0018246 <Thr::processFromPID(int)+0x82>
c00181fa:	83 ec 0c             	sub    esp,0xc
c00181fd:	68 84 75 02 c0       	push   0xc0027584
c0018202:	e8 e9 8f 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018207:	c7 04 24 84 75 02 c0 	mov    DWORD PTR [esp],0xc0027584
c001820e:	89 c3                	mov    ebx,eax
c0018210:	e8 e3 8f 00 00       	call   c00211f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018215:	58                   	pop    eax
c0018216:	5a                   	pop    edx
c0018217:	53                   	push   ebx
c0018218:	68 84 75 02 c0       	push   0xc0027584
c001821d:	e8 88 90 00 00       	call   c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018222:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018225:	83 c4 10             	add    esp,0x10
c0018228:	39 30                	cmp    DWORD PTR [eax],esi
c001822a:	75 ba                	jne    c00181e6 <Thr::processFromPID(int)+0x22>
c001822c:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0018231:	48                   	dec    eax
c0018232:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0018237:	74 09                	je     c0018242 <Thr::processFromPID(int)+0x7e>
c0018239:	90                   	nop
c001823a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001823d:	5b                   	pop    ebx
c001823e:	5e                   	pop    esi
c001823f:	5f                   	pop    edi
c0018240:	c3                   	ret    
c0018241:	90                   	nop
c0018242:	fb                   	sti    
c0018243:	eb f5                	jmp    c001823a <Thr::processFromPID(int)+0x76>
c0018245:	90                   	nop
c0018246:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c001824b:	48                   	dec    eax
c001824c:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0018251:	75 05                	jne    c0018258 <Thr::processFromPID(int)+0x94>
c0018253:	fb                   	sti    
c0018254:	5b                   	pop    ebx
c0018255:	5e                   	pop    esi
c0018256:	5f                   	pop    edi
c0018257:	c3                   	ret    
c0018258:	5b                   	pop    ebx
c0018259:	31 c0                	xor    eax,eax
c001825b:	5e                   	pop    esi
c001825c:	5f                   	pop    edi
c001825d:	c3                   	ret    

c001825e <unblockTask(ThreadControlBlock*)>:
c001825e:	53                   	push   ebx
c001825f:	83 ec 08             	sub    esp,0x8
c0018262:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018266:	fa                   	cli    
c0018267:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c001826d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018270:	85 c0                	test   eax,eax
c0018272:	74 5c                	je     c00182d0 <unblockTask(ThreadControlBlock*)+0x72>
c0018274:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018277:	48                   	dec    eax
c0018278:	74 32                	je     c00182ac <unblockTask(ThreadControlBlock*)+0x4e>
c001827a:	83 ec 0c             	sub    esp,0xc
c001827d:	68 84 75 02 c0       	push   0xc0027584
c0018282:	e8 69 8f 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018287:	83 c4 10             	add    esp,0x10
c001828a:	85 c0                	test   eax,eax
c001828c:	75 18                	jne    c00182a6 <unblockTask(ThreadControlBlock*)+0x48>
c001828e:	eb 52                	jmp    c00182e2 <unblockTask(ThreadControlBlock*)+0x84>
c0018290:	83 ec 08             	sub    esp,0x8
c0018293:	50                   	push   eax
c0018294:	68 84 75 02 c0       	push   0xc0027584
c0018299:	e8 e0 92 00 00       	call   c002157e <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001829e:	83 c4 10             	add    esp,0x10
c00182a1:	85 c0                	test   eax,eax
c00182a3:	74 3d                	je     c00182e2 <unblockTask(ThreadControlBlock*)+0x84>
c00182a5:	90                   	nop
c00182a6:	39 c3                	cmp    ebx,eax
c00182a8:	75 e6                	jne    c0018290 <unblockTask(ThreadControlBlock*)+0x32>
c00182aa:	eb 10                	jmp    c00182bc <unblockTask(ThreadControlBlock*)+0x5e>
c00182ac:	83 ec 0c             	sub    esp,0xc
c00182af:	68 ba 44 02 c0       	push   0xc00244ba
c00182b4:	e8 4b 47 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00182b9:	83 c4 10             	add    esp,0x10
c00182bc:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00182c1:	48                   	dec    eax
c00182c2:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00182c7:	75 01                	jne    c00182ca <unblockTask(ThreadControlBlock*)+0x6c>
c00182c9:	fb                   	sti    
c00182ca:	83 c4 08             	add    esp,0x8
c00182cd:	5b                   	pop    ebx
c00182ce:	c3                   	ret    
c00182cf:	90                   	nop
c00182d0:	83 ec 0c             	sub    esp,0xc
c00182d3:	68 a3 44 02 c0       	push   0xc00244a3
c00182d8:	e8 27 47 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00182dd:	83 c4 10             	add    esp,0x10
c00182e0:	eb da                	jmp    c00182bc <unblockTask(ThreadControlBlock*)+0x5e>
c00182e2:	83 ec 08             	sub    esp,0x8
c00182e5:	53                   	push   ebx
c00182e6:	68 84 75 02 c0       	push   0xc0027584
c00182eb:	e8 ba 8f 00 00       	call   c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00182f0:	83 c4 10             	add    esp,0x10
c00182f3:	eb c7                	jmp    c00182bc <unblockTask(ThreadControlBlock*)+0x5e>
c00182f5:	90                   	nop

c00182f6 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00182f6:	55                   	push   ebp
c00182f7:	57                   	push   edi
c00182f8:	56                   	push   esi
c00182f9:	53                   	push   ebx
c00182fa:	83 ec 1c             	sub    esp,0x1c
c00182fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018301:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018304:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c001830a:	85 ff                	test   edi,edi
c001830c:	7e 20                	jle    c001832e <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001830e:	31 f6                	xor    esi,esi
c0018310:	83 ec 0c             	sub    esp,0xc
c0018313:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c001831a:	46                   	inc    esi
c001831b:	e8 93 16 ff ff       	call   c00099b3 <free>
c0018320:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018323:	83 c4 10             	add    esp,0x10
c0018326:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001832c:	7f e2                	jg     c0018310 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001832e:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018338:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001833d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018340:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018343:	d3 c0                	rol    eax,cl
c0018345:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001834c:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001834f:	89 f7                	mov    edi,esi
c0018351:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018359:	0f 85 65 01 00 00    	jne    c00184c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001835f:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018365:	85 ed                	test   ebp,ebp
c0018367:	74 1b                	je     c0018384 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c0018369:	83 ec 0c             	sub    esp,0xc
c001836c:	55                   	push   ebp
c001836d:	e8 76 bc ff ff       	call   c0013fe8 <EnvVarContainer::~EnvVarContainer()>
c0018372:	59                   	pop    ecx
c0018373:	5e                   	pop    esi
c0018374:	6a 0c                	push   0xc
c0018376:	55                   	push   ebp
c0018377:	e8 a7 45 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c001837c:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001837f:	83 c4 10             	add    esp,0x10
c0018382:	89 f7                	mov    edi,esi
c0018384:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001838a:	85 c0                	test   eax,eax
c001838c:	0f 84 aa 00 00 00    	je     c001843c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c0018392:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018395:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018399:	31 c9                	xor    ecx,ecx
c001839b:	eb 11                	jmp    c00183ae <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c001839d:	90                   	nop
c001839e:	41                   	inc    ecx
c001839f:	83 f9 10             	cmp    ecx,0x10
c00183a2:	0f 84 94 00 00 00    	je     c001843c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c00183a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00183ae:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00183b5:	d3 fa                	sar    edx,cl
c00183b7:	83 e2 01             	and    edx,0x1
c00183ba:	74 e2                	je     c001839e <cleanupTerminatedTask(ThreadControlBlock*)+0xa8>
c00183bc:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00183bf:	01 d2                	add    edx,edx
c00183c1:	01 ca                	add    edx,ecx
c00183c3:	8d 14 92             	lea    edx,[edx+edx*4]
c00183c6:	01 d0                	add    eax,edx
c00183c8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00183ce:	83 fd 07             	cmp    ebp,0x7
c00183d1:	75 cb                	jne    c001839e <cleanupTerminatedTask(ThreadControlBlock*)+0xa8>
c00183d3:	05 40 02 00 00       	add    eax,0x240
c00183d8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00183db:	83 fd ff             	cmp    ebp,0xffffffff
c00183de:	0f 8c e8 00 00 00    	jl     c00184cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1d6>
c00183e4:	0f 84 9c 01 00 00    	je     c0018586 <cleanupTerminatedTask(ThreadControlBlock*)+0x290>
c00183ea:	85 ed                	test   ebp,ebp
c00183ec:	0f 84 82 01 00 00    	je     c0018574 <cleanupTerminatedTask(ThreadControlBlock*)+0x27e>
c00183f2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00183f4:	75 a8                	jne    c001839e <cleanupTerminatedTask(ThreadControlBlock*)+0xa8>
c00183f6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00183fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018400:	01 d0                	add    eax,edx
c0018402:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018406:	83 ec 0c             	sub    esp,0xc
c0018409:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001840f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018412:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018418:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001841f:	50                   	push   eax
c0018420:	e8 39 fe ff ff       	call   c001825e <unblockTask(ThreadControlBlock*)>
c0018425:	83 c4 10             	add    esp,0x10
c0018428:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001842b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001842f:	89 f7                	mov    edi,esi
c0018431:	41                   	inc    ecx
c0018432:	83 f9 10             	cmp    ecx,0x10
c0018435:	0f 85 6d ff ff ff    	jne    c00183a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb2>
c001843b:	90                   	nop
c001843c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018442:	85 c0                	test   eax,eax
c0018444:	74 5e                	je     c00184a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c0018446:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001844c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018452:	74 50                	je     c00184a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c0018454:	83 ec 0c             	sub    esp,0xc
c0018457:	68 84 75 02 c0       	push   0xc0027584
c001845c:	e8 8f 8d 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018461:	c7 04 24 84 75 02 c0 	mov    DWORD PTR [esp],0xc0027584
c0018468:	89 c7                	mov    edi,eax
c001846a:	e8 65 8d 00 00       	call   c00211d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001846f:	83 c4 10             	add    esp,0x10
c0018472:	84 c0                	test   al,al
c0018474:	0f 84 c4 00 00 00    	je     c001853e <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001847a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001847d:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018483:	85 d2                	test   edx,edx
c0018485:	74 0f                	je     c0018496 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0018487:	83 ec 0c             	sub    esp,0xc
c001848a:	8b 02                	mov    eax,DWORD PTR [edx]
c001848c:	52                   	push   edx
c001848d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018490:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018493:	83 c4 10             	add    esp,0x10
c0018496:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00184a0:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00184a3:	90                   	nop
c00184a4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00184aa:	85 db                	test   ebx,ebx
c00184ac:	74 16                	je     c00184c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c00184ae:	83 ec 0c             	sub    esp,0xc
c00184b1:	53                   	push   ebx
c00184b2:	e8 9d 36 ff ff       	call   c000bb54 <VAS::~VAS()>
c00184b7:	58                   	pop    eax
c00184b8:	5a                   	pop    edx
c00184b9:	6a 14                	push   0x14
c00184bb:	53                   	push   ebx
c00184bc:	e8 62 44 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00184c1:	83 c4 10             	add    esp,0x10
c00184c4:	83 c4 1c             	add    esp,0x1c
c00184c7:	5b                   	pop    ebx
c00184c8:	5e                   	pop    esi
c00184c9:	5f                   	pop    edi
c00184ca:	5d                   	pop    ebp
c00184cb:	c3                   	ret    
c00184cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00184d0:	83 ec 0c             	sub    esp,0xc
c00184d3:	68 6c 45 02 c0       	push   0xc002456c
c00184d8:	e8 66 bd ff ff       	call   c0014243 <Krnl::panic(char const*)>
c00184dd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184e0:	83 c4 10             	add    esp,0x10
c00184e3:	89 f7                	mov    edi,esi
c00184e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00184e9:	e9 b0 fe ff ff       	jmp    c001839e <cleanupTerminatedTask(ThreadControlBlock*)+0xa8>
c00184ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184f4:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00184fa:	75 1c                	jne    c0018518 <cleanupTerminatedTask(ThreadControlBlock*)+0x222>
c00184fc:	83 ec 0c             	sub    esp,0xc
c00184ff:	68 d4 45 02 c0       	push   0xc00245d4
c0018504:	e8 fb 44 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0018509:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018510:	e8 9d fa ff ff       	call   c0017fb2 <blockTask(TaskState)>
c0018515:	83 c4 10             	add    esp,0x10
c0018518:	83 ec 08             	sub    esp,0x8
c001851b:	56                   	push   esi
c001851c:	68 84 75 02 c0       	push   0xc0027584
c0018521:	e8 84 8d 00 00       	call   c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018526:	c7 04 24 84 75 02 c0 	mov    DWORD PTR [esp],0xc0027584
c001852d:	e8 be 8c 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	39 f8                	cmp    eax,edi
c0018537:	0f 84 3d ff ff ff    	je     c001847a <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001853d:	90                   	nop
c001853e:	83 ec 0c             	sub    esp,0xc
c0018541:	68 84 75 02 c0       	push   0xc0027584
c0018546:	e8 a5 8c 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001854b:	c7 04 24 84 75 02 c0 	mov    DWORD PTR [esp],0xc0027584
c0018552:	89 c6                	mov    esi,eax
c0018554:	e8 9f 8c 00 00       	call   c00211f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018559:	83 c4 10             	add    esp,0x10
c001855c:	39 f3                	cmp    ebx,esi
c001855e:	74 b8                	je     c0018518 <cleanupTerminatedTask(ThreadControlBlock*)+0x222>
c0018560:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018563:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018566:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001856c:	75 aa                	jne    c0018518 <cleanupTerminatedTask(ThreadControlBlock*)+0x222>
c001856e:	e9 7b ff ff ff       	jmp    c00184ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0018573:	90                   	nop
c0018574:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018578:	83 ec 0c             	sub    esp,0xc
c001857b:	68 a0 45 02 c0       	push   0xc00245a0
c0018580:	e9 53 ff ff ff       	jmp    c00184d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e2>
c0018585:	90                   	nop
c0018586:	8b 36                	mov    esi,DWORD PTR [esi]
c0018588:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001858c:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001858f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018592:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018598:	01 d7                	add    edi,edx
c001859a:	89 f8                	mov    eax,edi
c001859c:	e9 61 fe ff ff       	jmp    c0018402 <cleanupTerminatedTask(ThreadControlBlock*)+0x10c>
c00185a1:	90                   	nop

c00185a2 <cleanerTaskFunction(void*)>:
c00185a2:	53                   	push   ebx
c00185a3:	83 ec 08             	sub    esp,0x8
c00185a6:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00185ab:	48                   	dec    eax
c00185ac:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00185b1:	75 01                	jne    c00185b4 <cleanerTaskFunction(void*)+0x12>
c00185b3:	fb                   	sti    
c00185b4:	fa                   	cli    
c00185b5:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00185ba:	80 3d 4c 75 02 c0 00 	cmp    BYTE PTR ds:0xc002754c,0x0
c00185c1:	8d 50 01             	lea    edx,[eax+0x1]
c00185c4:	89 15 68 75 02 c0    	mov    DWORD PTR ds:0xc0027568,edx
c00185ca:	0f 84 a2 00 00 00    	je     c0018672 <cleanerTaskFunction(void*)+0xd0>
c00185d0:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00185d5:	85 c0                	test   eax,eax
c00185d7:	75 01                	jne    c00185da <cleanerTaskFunction(void*)+0x38>
c00185d9:	fb                   	sti    
c00185da:	c6 05 4c 75 02 c0 00 	mov    BYTE PTR ds:0xc002754c,0x0
c00185e1:	fa                   	cli    
c00185e2:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00185e8:	ff 05 64 75 02 c0    	inc    DWORD PTR ds:0xc0027564
c00185ee:	fa                   	cli    
c00185ef:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00185f5:	eb 27                	jmp    c001861e <cleanerTaskFunction(void*)+0x7c>
c00185f7:	90                   	nop
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	68 6c 75 02 c0       	push   0xc002756c
c0018600:	e8 eb 8b 00 00       	call   c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018605:	c7 04 24 6c 75 02 c0 	mov    DWORD PTR [esp],0xc002756c
c001860c:	89 c3                	mov    ebx,eax
c001860e:	e8 e5 8b 00 00       	call   c00211f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018613:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018616:	e8 db fc ff ff       	call   c00182f6 <cleanupTerminatedTask(ThreadControlBlock*)>
c001861b:	83 c4 10             	add    esp,0x10
c001861e:	83 ec 0c             	sub    esp,0xc
c0018621:	68 6c 75 02 c0       	push   0xc002756c
c0018626:	e8 a9 8b 00 00       	call   c00211d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001862b:	83 c4 10             	add    esp,0x10
c001862e:	84 c0                	test   al,al
c0018630:	74 c6                	je     c00185f8 <cleanerTaskFunction(void*)+0x56>
c0018632:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0018637:	48                   	dec    eax
c0018638:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c001863d:	75 01                	jne    c0018640 <cleanerTaskFunction(void*)+0x9e>
c001863f:	fb                   	sti    
c0018640:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c0018645:	48                   	dec    eax
c0018646:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c001864b:	0f 85 55 ff ff ff    	jne    c00185a6 <cleanerTaskFunction(void*)+0x4>
c0018651:	a1 60 75 02 c0       	mov    eax,ds:0xc0027560
c0018656:	85 c0                	test   eax,eax
c0018658:	0f 84 48 ff ff ff    	je     c00185a6 <cleanerTaskFunction(void*)+0x4>
c001865e:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c0018668:	e8 63 f7 ff ff       	call   c0017dd0 <schedule()>
c001866d:	e9 34 ff ff ff       	jmp    c00185a6 <cleanerTaskFunction(void*)+0x4>
c0018672:	83 ec 0c             	sub    esp,0xc
c0018675:	6a 02                	push   0x2
c0018677:	e8 10 f9 ff ff       	call   c0017f8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001867c:	83 c4 10             	add    esp,0x10
c001867f:	e9 56 ff ff ff       	jmp    c00185da <cleanerTaskFunction(void*)+0x38>

c0018684 <terminateTask(int)>:
c0018684:	83 ec 14             	sub    esp,0x14
c0018687:	fa                   	cli    
c0018688:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c001868e:	ff 05 64 75 02 c0    	inc    DWORD PTR ds:0xc0027564
c0018694:	fa                   	cli    
c0018695:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c001869b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001869f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186a4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00186a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186ac:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00186af:	50                   	push   eax
c00186b0:	68 6c 75 02 c0       	push   0xc002756c
c00186b5:	e8 f0 8b 00 00       	call   c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186bf:	83 c4 10             	add    esp,0x10
c00186c2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00186c9:	a1 48 75 02 c0       	mov    eax,ds:0xc0027548
c00186ce:	85 c0                	test   eax,eax
c00186d0:	74 56                	je     c0018728 <terminateTask(int)+0xa4>
c00186d2:	83 ec 0c             	sub    esp,0xc
c00186d5:	c6 05 4c 75 02 c0 01 	mov    BYTE PTR ds:0xc002754c,0x1
c00186dc:	50                   	push   eax
c00186dd:	e8 7c fb ff ff       	call   c001825e <unblockTask(ThreadControlBlock*)>
c00186e2:	83 c4 10             	add    esp,0x10
c00186e5:	90                   	nop
c00186e6:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00186eb:	48                   	dec    eax
c00186ec:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00186f1:	75 01                	jne    c00186f4 <terminateTask(int)+0x70>
c00186f3:	fb                   	sti    
c00186f4:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c00186f9:	48                   	dec    eax
c00186fa:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c00186ff:	75 09                	jne    c001870a <terminateTask(int)+0x86>
c0018701:	83 3d 60 75 02 c0 00 	cmp    DWORD PTR ds:0xc0027560,0x0
c0018708:	75 30                	jne    c001873a <terminateTask(int)+0xb6>
c001870a:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c001870f:	48                   	dec    eax
c0018710:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0018715:	75 01                	jne    c0018718 <terminateTask(int)+0x94>
c0018717:	fb                   	sti    
c0018718:	fa                   	cli    
c0018719:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c001871f:	90                   	nop
c0018720:	e8 ab f6 ff ff       	call   c0017dd0 <schedule()>
c0018725:	eb e3                	jmp    c001870a <terminateTask(int)+0x86>
c0018727:	90                   	nop
c0018728:	83 ec 0c             	sub    esp,0xc
c001872b:	68 d1 44 02 c0       	push   0xc00244d1
c0018730:	e8 cf 42 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0018735:	83 c4 10             	add    esp,0x10
c0018738:	eb ac                	jmp    c00186e6 <terminateTask(int)+0x62>
c001873a:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c0018744:	eb da                	jmp    c0018720 <terminateTask(int)+0x9c>

c0018746 <Thr::terminateFromIRQ(int)>:
c0018746:	83 ec 18             	sub    esp,0x18
c0018749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001874d:	e8 32 ff ff ff       	call   c0018684 <terminateTask(int)>

c0018752 <Semaphore::release()>:
c0018752:	83 ec 0c             	sub    esp,0xc
c0018755:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018759:	fa                   	cli    
c001875a:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c001875f:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0018765:	8d 48 01             	lea    ecx,[eax+0x1]
c0018768:	89 0d 64 75 02 c0    	mov    DWORD PTR ds:0xc0027564,ecx
c001876e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018771:	85 c9                	test   ecx,ecx
c0018773:	74 3d                	je     c00187b2 <Semaphore::release()+0x60>
c0018775:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018778:	83 ec 0c             	sub    esp,0xc
c001877b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001877e:	51                   	push   ecx
c001877f:	e8 da fa ff ff       	call   c001825e <unblockTask(ThreadControlBlock*)>
c0018784:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c0018789:	83 c4 10             	add    esp,0x10
c001878c:	48                   	dec    eax
c001878d:	90                   	nop
c001878e:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c0018793:	85 c0                	test   eax,eax
c0018795:	75 09                	jne    c00187a0 <Semaphore::release()+0x4e>
c0018797:	a1 60 75 02 c0       	mov    eax,ds:0xc0027560
c001879c:	85 c0                	test   eax,eax
c001879e:	75 18                	jne    c00187b8 <Semaphore::release()+0x66>
c00187a0:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00187a5:	48                   	dec    eax
c00187a6:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00187ab:	75 01                	jne    c00187ae <Semaphore::release()+0x5c>
c00187ad:	fb                   	sti    
c00187ae:	83 c4 0c             	add    esp,0xc
c00187b1:	c3                   	ret    
c00187b2:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00187b5:	eb d7                	jmp    c001878e <Semaphore::release()+0x3c>
c00187b7:	90                   	nop
c00187b8:	c7 05 60 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027560,0x0
c00187c2:	e8 09 f6 ff ff       	call   c0017dd0 <schedule()>
c00187c7:	eb d7                	jmp    c00187a0 <Semaphore::release()+0x4e>
c00187c9:	90                   	nop

c00187ca <__static_initialization_and_destruction_0(int, int)>:
c00187ca:	83 ec 0c             	sub    esp,0xc
c00187cd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00187d2:	0f 85 88 00 00 00    	jne    c0018860 <__static_initialization_and_destruction_0(int, int)+0x96>
c00187d8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00187e0:	75 7e                	jne    c0018860 <__static_initialization_and_destruction_0(int, int)+0x96>
c00187e2:	83 ec 0c             	sub    esp,0xc
c00187e5:	68 84 75 02 c0       	push   0xc0027584
c00187ea:	e8 4d 8d 00 00       	call   c002153c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	83 ec 04             	sub    esp,0x4
c00187f5:	68 c8 52 02 c0       	push   0xc00252c8
c00187fa:	68 84 75 02 c0       	push   0xc0027584
c00187ff:	68 f0 14 02 c0       	push   0xc00214f0
c0018804:	e8 94 40 ff ff       	call   c000c89d <__cxa_atexit>
c0018809:	83 c4 10             	add    esp,0x10
c001880c:	83 ec 0c             	sub    esp,0xc
c001880f:	68 78 75 02 c0       	push   0xc0027578
c0018814:	e8 23 8d 00 00       	call   c002153c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018819:	83 c4 10             	add    esp,0x10
c001881c:	83 ec 04             	sub    esp,0x4
c001881f:	68 c8 52 02 c0       	push   0xc00252c8
c0018824:	68 78 75 02 c0       	push   0xc0027578
c0018829:	68 f0 14 02 c0       	push   0xc00214f0
c001882e:	e8 6a 40 ff ff       	call   c000c89d <__cxa_atexit>
c0018833:	83 c4 10             	add    esp,0x10
c0018836:	83 ec 0c             	sub    esp,0xc
c0018839:	68 6c 75 02 c0       	push   0xc002756c
c001883e:	e8 f9 8c 00 00       	call   c002153c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018843:	83 c4 10             	add    esp,0x10
c0018846:	83 ec 04             	sub    esp,0x4
c0018849:	68 c8 52 02 c0       	push   0xc00252c8
c001884e:	68 6c 75 02 c0       	push   0xc002756c
c0018853:	68 f0 14 02 c0       	push   0xc00214f0
c0018858:	e8 40 40 ff ff       	call   c000c89d <__cxa_atexit>
c001885d:	83 c4 10             	add    esp,0x10
c0018860:	90                   	nop
c0018861:	83 c4 0c             	add    esp,0xc
c0018864:	c3                   	ret    
c0018865:	90                   	nop

c0018866 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018866:	83 ec 0c             	sub    esp,0xc
c0018869:	83 ec 08             	sub    esp,0x8
c001886c:	68 ff ff 00 00       	push   0xffff
c0018871:	6a 01                	push   0x1
c0018873:	e8 52 ff ff ff       	call   c00187ca <__static_initialization_and_destruction_0(int, int)>
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	83 c4 0c             	add    esp,0xc
c001887e:	c3                   	ret    

c001887f <Vm::inbv(unsigned short)>:
c001887f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018883:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018888:	75 06                	jne    c0018890 <Vm::inbv(unsigned short)+0x11>
c001888a:	a0 cc 75 02 c0       	mov    al,ds:0xc00275cc
c001888f:	c3                   	ret    
c0018890:	ec                   	in     al,dx
c0018891:	c3                   	ret    

c0018892 <Vm::outbv(unsigned short, unsigned char)>:
c0018892:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001889a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001889f:	75 25                	jne    c00188c6 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00188a1:	8b 0d cc 75 02 c0    	mov    ecx,DWORD PTR ds:0xc00275cc
c00188a7:	8d 51 01             	lea    edx,[ecx+0x1]
c00188aa:	88 81 e0 75 02 c0    	mov    BYTE PTR [ecx-0x3ffd8a20],al
c00188b0:	89 15 cc 75 02 c0    	mov    DWORD PTR ds:0xc00275cc,edx
c00188b6:	83 fa 20             	cmp    edx,0x20
c00188b9:	75 0c                	jne    c00188c7 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00188bb:	c7 05 cc 75 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00275cc,0x1f
c00188c5:	c3                   	ret    
c00188c6:	ee                   	out    dx,al
c00188c7:	c3                   	ret    

c00188c8 <Vm::realToLinear(unsigned short, unsigned short)>:
c00188c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00188cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00188d2:	c1 e0 04             	shl    eax,0x4
c00188d5:	01 d0                	add    eax,edx
c00188d7:	c3                   	ret    

c00188d8 <Vm::getSegment(unsigned int)>:
c00188d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188dc:	c1 e8 10             	shr    eax,0x10
c00188df:	c3                   	ret    

c00188e0 <Vm::getOffset(unsigned int)>:
c00188e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188e4:	c3                   	ret    

c00188e5 <Vm::mainloop2()>:
c00188e5:	83 ec 18             	sub    esp,0x18
c00188e8:	fa                   	cli    
c00188e9:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00188ef:	6a 02                	push   0x2
c00188f1:	c6 05 c5 75 02 c0 01 	mov    BYTE PTR ds:0xc00275c5,0x1
c00188f8:	e8 8f f6 ff ff       	call   c0017f8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00188fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018902:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018906:	52                   	push   edx
c0018907:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001890b:	52                   	push   edx
c001890c:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018910:	52                   	push   edx
c0018911:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018915:	50                   	push   eax
c0018916:	e8 14 79 fe ff       	call   c000022f <goToVM86>
c001891b:	83 c4 2c             	add    esp,0x2c
c001891e:	c3                   	ret    

c001891f <Vm::mainVm8086Loop(void*)>:
c001891f:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0018924:	48                   	dec    eax
c0018925:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c001892a:	75 01                	jne    c001892d <Vm::mainVm8086Loop(void*)+0xe>
c001892c:	fb                   	sti    
c001892d:	eb b6                	jmp    c00188e5 <Vm::mainloop2()>

c001892f <Vm::mainloop3(unsigned long)>:
c001892f:	83 ec 18             	sub    esp,0x18
c0018932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018936:	fa                   	cli    
c0018937:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c001893d:	6a 02                	push   0x2
c001893f:	c6 05 c4 75 02 c0 01 	mov    BYTE PTR ds:0xc00275c4,0x1
c0018946:	a3 c0 75 02 c0       	mov    ds:0xc00275c0,eax
c001894b:	e8 3c f6 ff ff       	call   c0017f8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018950:	83 c4 1c             	add    esp,0x1c
c0018953:	eb 90                	jmp    c00188e5 <Vm::mainloop2()>

c0018955 <Vm::initialise8086()>:
c0018955:	83 ec 0c             	sub    esp,0xc
c0018958:	68 80 00 00 00       	push   0x80
c001895d:	6a 00                	push   0x0
c001895f:	68 1f 89 01 c0       	push   0xc001891f
c0018964:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c001896a:	e8 4f f2 ff ff       	call   c0017bbe <Process::createThread(void (*)(void*), void*, int)>
c001896f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018976:	a3 c8 75 02 c0       	mov    ds:0xc00275c8,eax
c001897b:	68 00 01 00 00       	push   0x100
c0018980:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c0018985:	6a 00                	push   0x0
c0018987:	6a 00                	push   0x0
c0018989:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001898f:	e8 32 36 ff ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018994:	83 c4 2c             	add    esp,0x2c
c0018997:	c3                   	ret    

c0018998 <Vm::finish8086()>:
c0018998:	53                   	push   ebx
c0018999:	83 ec 08             	sub    esp,0x8
c001899c:	fa                   	cli    
c001899d:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c00189a3:	80 3d c4 75 02 c0 00 	cmp    BYTE PTR ds:0xc00275c4,0x0
c00189aa:	75 15                	jne    c00189c1 <Vm::finish8086()+0x29>
c00189ac:	e8 1f f4 ff ff       	call   c0017dd0 <schedule()>
c00189b1:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00189b6:	48                   	dec    eax
c00189b7:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c00189bc:	75 de                	jne    c001899c <Vm::finish8086()+0x4>
c00189be:	fb                   	sti    
c00189bf:	eb db                	jmp    c001899c <Vm::finish8086()+0x4>
c00189c1:	83 ec 0c             	sub    esp,0xc
c00189c4:	8b 1d c0 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275c0
c00189ca:	ff 35 c8 75 02 c0    	push   DWORD PTR ds:0xc00275c8
c00189d0:	c6 05 c4 75 02 c0 00 	mov    BYTE PTR ds:0xc00275c4,0x0
c00189d7:	e8 82 f8 ff ff       	call   c001825e <unblockTask(ThreadControlBlock*)>
c00189dc:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c00189e1:	83 c4 10             	add    esp,0x10
c00189e4:	8d 50 ff             	lea    edx,[eax-0x1]
c00189e7:	89 15 68 75 02 c0    	mov    DWORD PTR ds:0xc0027568,edx
c00189ed:	85 d2                	test   edx,edx
c00189ef:	75 01                	jne    c00189f2 <Vm::finish8086()+0x5a>
c00189f1:	fb                   	sti    
c00189f2:	89 d8                	mov    eax,ebx
c00189f4:	83 c4 08             	add    esp,0x8
c00189f7:	5b                   	pop    ebx
c00189f8:	c3                   	ret    

c00189f9 <Vm::getOutput8086(unsigned char*)>:
c00189f9:	57                   	push   edi
c00189fa:	8b 0d cc 75 02 c0    	mov    ecx,DWORD PTR ds:0xc00275cc
c0018a00:	56                   	push   esi
c0018a01:	be e0 75 02 c0       	mov    esi,0xc00275e0
c0018a06:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018a0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a0c:	a1 cc 75 02 c0       	mov    eax,ds:0xc00275cc
c0018a11:	5e                   	pop    esi
c0018a12:	c7 05 cc 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00275cc,0x0
c0018a1c:	5f                   	pop    edi
c0018a1d:	c3                   	ret    

c0018a1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018a1e:	55                   	push   ebp
c0018a1f:	57                   	push   edi
c0018a20:	56                   	push   esi
c0018a21:	53                   	push   ebx
c0018a22:	83 ec 2c             	sub    esp,0x2c
c0018a25:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018a29:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018a2d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018a31:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018a35:	fa                   	cli    
c0018a36:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0018a3c:	0f b6 35 c5 75 02 c0 	movzx  esi,BYTE PTR ds:0xc00275c5
c0018a43:	89 f0                	mov    eax,esi
c0018a45:	84 c0                	test   al,al
c0018a47:	75 1d                	jne    c0018a66 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018a49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018a4d:	e8 7e f3 ff ff       	call   c0017dd0 <schedule()>
c0018a52:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0018a57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a5b:	48                   	dec    eax
c0018a5c:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0018a61:	75 d2                	jne    c0018a35 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018a63:	fb                   	sti    
c0018a64:	eb cf                	jmp    c0018a35 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018a66:	a1 c8 75 02 c0       	mov    eax,ds:0xc00275c8
c0018a6b:	c7 05 cc 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00275cc,0x0
c0018a75:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018a79:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018a7d:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018a81:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018a85:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018a89:	50                   	push   eax
c0018a8a:	6a 20                	push   0x20
c0018a8c:	6a 00                	push   0x0
c0018a8e:	68 e0 75 02 c0       	push   0xc00275e0
c0018a93:	e8 ec 7b fe ff       	call   c0000684 <memset>
c0018a98:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018a9f:	e8 ff 0e ff ff       	call   c00099a3 <malloc>
c0018aa4:	83 c4 0c             	add    esp,0xc
c0018aa7:	89 c3                	mov    ebx,eax
c0018aa9:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c0018aaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ab3:	50                   	push   eax
c0018ab4:	e8 b5 44 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c0018ab9:	83 c4 10             	add    esp,0x10
c0018abc:	85 db                	test   ebx,ebx
c0018abe:	75 0a                	jne    c0018aca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018ac0:	83 ec 0c             	sub    esp,0xc
c0018ac3:	68 fc 45 02 c0       	push   0xc00245fc
c0018ac8:	eb 3e                	jmp    c0018b08 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018aca:	50                   	push   eax
c0018acb:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018acf:	50                   	push   eax
c0018ad0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018ad4:	50                   	push   eax
c0018ad5:	53                   	push   ebx
c0018ad6:	e8 a3 47 ff ff       	call   c000d27e <File::stat(unsigned long long*, bool*)>
c0018adb:	83 c4 10             	add    esp,0x10
c0018ade:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018ae3:	74 0a                	je     c0018aef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018ae5:	83 ec 0c             	sub    esp,0xc
c0018ae8:	68 10 46 02 c0       	push   0xc0024610
c0018aed:	eb 19                	jmp    c0018b08 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018aef:	51                   	push   ecx
c0018af0:	51                   	push   ecx
c0018af1:	6a 01                	push   0x1
c0018af3:	53                   	push   ebx
c0018af4:	e8 d9 44 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c0018af9:	83 c4 10             	add    esp,0x10
c0018afc:	85 c0                	test   eax,eax
c0018afe:	74 24                	je     c0018b24 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018b00:	83 ec 0c             	sub    esp,0xc
c0018b03:	68 29 46 02 c0       	push   0xc0024629
c0018b08:	e8 36 b7 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0018b0d:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0018b12:	83 c4 10             	add    esp,0x10
c0018b15:	48                   	dec    eax
c0018b16:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0018b1b:	85 c0                	test   eax,eax
c0018b1d:	75 01                	jne    c0018b20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018b1f:	fb                   	sti    
c0018b20:	31 f6                	xor    esi,esi
c0018b22:	eb 58                	jmp    c0018b7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018b24:	0f b7 ed             	movzx  ebp,bp
c0018b27:	50                   	push   eax
c0018b28:	0f b7 ff             	movzx  edi,di
c0018b2b:	50                   	push   eax
c0018b2c:	55                   	push   ebp
c0018b2d:	57                   	push   edi
c0018b2e:	e8 95 fd ff ff       	call   c00188c8 <Vm::realToLinear(unsigned short, unsigned short)>
c0018b33:	5a                   	pop    edx
c0018b34:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018b36:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018b3a:	51                   	push   ecx
c0018b3b:	50                   	push   eax
c0018b3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b40:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b44:	53                   	push   ebx
c0018b45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b48:	83 c4 14             	add    esp,0x14
c0018b4b:	53                   	push   ebx
c0018b4c:	e8 df 44 ff ff       	call   c000d030 <File::close()>
c0018b51:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0018b56:	83 c4 10             	add    esp,0x10
c0018b59:	48                   	dec    eax
c0018b5a:	c6 05 c5 75 02 c0 00 	mov    BYTE PTR ds:0xc00275c5,0x0
c0018b61:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0018b66:	85 c0                	test   eax,eax
c0018b68:	75 01                	jne    c0018b6b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018b6a:	fb                   	sti    
c0018b6b:	83 ec 0c             	sub    esp,0xc
c0018b6e:	ff 35 c8 75 02 c0    	push   DWORD PTR ds:0xc00275c8
c0018b74:	e8 e5 f6 ff ff       	call   c001825e <unblockTask(ThreadControlBlock*)>
c0018b79:	83 c4 10             	add    esp,0x10
c0018b7c:	83 c4 2c             	add    esp,0x2c
c0018b7f:	89 f0                	mov    eax,esi
c0018b81:	5b                   	pop    ebx
c0018b82:	5e                   	pop    esi
c0018b83:	5f                   	pop    edi
c0018b84:	5d                   	pop    ebp
c0018b85:	c3                   	ret    

c0018b86 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018b86:	57                   	push   edi
c0018b87:	56                   	push   esi
c0018b88:	53                   	push   ebx
c0018b89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b91:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b95:	83 e8 06             	sub    eax,0x6
c0018b98:	0f b7 c0             	movzx  eax,ax
c0018b9b:	50                   	push   eax
c0018b9c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018ba1:	50                   	push   eax
c0018ba2:	e8 21 fd ff ff       	call   c00188c8 <Vm::realToLinear(unsigned short, unsigned short)>
c0018ba7:	5a                   	pop    edx
c0018ba8:	5e                   	pop    esi
c0018ba9:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018bac:	8d 56 fa             	lea    edx,[esi-0x6]
c0018baf:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018bb5:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018bb8:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018bbb:	83 c2 02             	add    edx,0x2
c0018bbe:	66 89 10             	mov    WORD PTR [eax],dx
c0018bc1:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018bc4:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018bc8:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018bcb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018bcf:	89 d6                	mov    esi,edx
c0018bd1:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018bd7:	66 81 e6 ff fd       	and    si,0xfdff
c0018bdc:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018be0:	74 07                	je     c0018be9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018be2:	89 d6                	mov    esi,edx
c0018be4:	66 81 ce 00 02       	or     si,0x200
c0018be9:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018bed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018bf2:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018bf6:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018bfe:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018c01:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018c09:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018c0c:	5b                   	pop    ebx
c0018c0d:	5e                   	pop    esi
c0018c0e:	5f                   	pop    edi
c0018c0f:	c3                   	ret    

c0018c10 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018c10:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c15:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c1a:	c1 e0 04             	shl    eax,0x4
c0018c1d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018c20:	c3                   	ret    

c0018c21 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018c21:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c26:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c2b:	c1 e0 04             	shl    eax,0x4
c0018c2e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018c32:	c3                   	ret    

c0018c33 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018c33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c38:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c3d:	c1 e0 04             	shl    eax,0x4
c0018c40:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018c43:	c3                   	ret    

c0018c44 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018c44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c4e:	c1 e0 04             	shl    eax,0x4
c0018c51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c55:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018c58:	c3                   	ret    

c0018c59 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018c59:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c5e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c63:	c1 e0 04             	shl    eax,0x4
c0018c66:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c6a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018c6e:	c3                   	ret    

c0018c6f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018c6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c74:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c79:	c1 e0 04             	shl    eax,0x4
c0018c7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c80:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018c83:	c3                   	ret    

c0018c84 <Vm::faultHandler(regs*)>:
c0018c84:	55                   	push   ebp
c0018c85:	57                   	push   edi
c0018c86:	56                   	push   esi
c0018c87:	53                   	push   ebx
c0018c88:	83 ec 1c             	sub    esp,0x1c
c0018c8b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c8f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c92:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018c96:	0f b7 f8             	movzx  edi,ax
c0018c99:	52                   	push   edx
c0018c9a:	0f b7 c0             	movzx  eax,ax
c0018c9d:	50                   	push   eax
c0018c9e:	e8 25 fc ff ff       	call   c00188c8 <Vm::realToLinear(unsigned short, unsigned short)>
c0018ca3:	5a                   	pop    edx
c0018ca4:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018ca7:	59                   	pop    ecx
c0018ca8:	89 c1                	mov    ecx,eax
c0018caa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018cad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018cb1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018cb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018cba:	0f b7 c5             	movzx  eax,bp
c0018cbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cc1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018cc5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018cc9:	e8 fa fb ff ff       	call   c00188c8 <Vm::realToLinear(unsigned short, unsigned short)>
c0018cce:	5e                   	pop    esi
c0018ccf:	be 06 00 00 00       	mov    esi,0x6
c0018cd4:	5a                   	pop    edx
c0018cd5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018cda:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018cdf:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018ce2:	80 fa 9d             	cmp    dl,0x9d
c0018ce5:	0f 84 2c 02 00 00    	je     c0018f17 <Vm::faultHandler(regs*)+0x293>
c0018ceb:	0f 87 91 00 00 00    	ja     c0018d82 <Vm::faultHandler(regs*)+0xfe>
c0018cf1:	80 fa 66             	cmp    dl,0x66
c0018cf4:	0f 84 98 01 00 00    	je     c0018e92 <Vm::faultHandler(regs*)+0x20e>
c0018cfa:	77 47                	ja     c0018d43 <Vm::faultHandler(regs*)+0xbf>
c0018cfc:	80 fa 36             	cmp    dl,0x36
c0018cff:	0f 84 80 01 00 00    	je     c0018e85 <Vm::faultHandler(regs*)+0x201>
c0018d05:	77 1a                	ja     c0018d21 <Vm::faultHandler(regs*)+0x9d>
c0018d07:	80 fa 26             	cmp    dl,0x26
c0018d0a:	0f 84 4e 01 00 00    	je     c0018e5e <Vm::faultHandler(regs*)+0x1da>
c0018d10:	80 fa 2e             	cmp    dl,0x2e
c0018d13:	0f 85 e2 05 00 00    	jne    c00192fb <Vm::faultHandler(regs*)+0x677>
c0018d19:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d1c:	31 f6                	xor    esi,esi
c0018d1e:	41                   	inc    ecx
c0018d1f:	eb be                	jmp    c0018cdf <Vm::faultHandler(regs*)+0x5b>
c0018d21:	80 fa 64             	cmp    dl,0x64
c0018d24:	0f 84 41 01 00 00    	je     c0018e6b <Vm::faultHandler(regs*)+0x1e7>
c0018d2a:	0f 87 48 01 00 00    	ja     c0018e78 <Vm::faultHandler(regs*)+0x1f4>
c0018d30:	80 fa 3e             	cmp    dl,0x3e
c0018d33:	0f 85 c2 05 00 00    	jne    c00192fb <Vm::faultHandler(regs*)+0x677>
c0018d39:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d3c:	be 01 00 00 00       	mov    esi,0x1
c0018d41:	eb db                	jmp    c0018d1e <Vm::faultHandler(regs*)+0x9a>
c0018d43:	80 fa 6d             	cmp    dl,0x6d
c0018d46:	0f 84 ec 02 00 00    	je     c0019038 <Vm::faultHandler(regs*)+0x3b4>
c0018d4c:	77 17                	ja     c0018d65 <Vm::faultHandler(regs*)+0xe1>
c0018d4e:	80 fa 67             	cmp    dl,0x67
c0018d51:	0f 84 48 01 00 00    	je     c0018e9f <Vm::faultHandler(regs*)+0x21b>
c0018d57:	80 fa 6c             	cmp    dl,0x6c
c0018d5a:	0f 84 69 02 00 00    	je     c0018fc9 <Vm::faultHandler(regs*)+0x345>
c0018d60:	e9 96 05 00 00       	jmp    c00192fb <Vm::faultHandler(regs*)+0x677>
c0018d65:	80 fa 6f             	cmp    dl,0x6f
c0018d68:	0f 84 f4 03 00 00    	je     c0019162 <Vm::faultHandler(regs*)+0x4de>
c0018d6e:	0f 82 59 03 00 00    	jb     c00190cd <Vm::faultHandler(regs*)+0x449>
c0018d74:	80 fa 9c             	cmp    dl,0x9c
c0018d77:	0f 84 2f 01 00 00    	je     c0018eac <Vm::faultHandler(regs*)+0x228>
c0018d7d:	e9 79 05 00 00       	jmp    c00192fb <Vm::faultHandler(regs*)+0x677>
c0018d82:	80 fa ec             	cmp    dl,0xec
c0018d85:	0f 84 14 05 00 00    	je     c001929f <Vm::faultHandler(regs*)+0x61b>
c0018d8b:	77 7b                	ja     c0018e08 <Vm::faultHandler(regs*)+0x184>
c0018d8d:	80 fa e4             	cmp    dl,0xe4
c0018d90:	0f 84 93 04 00 00    	je     c0019229 <Vm::faultHandler(regs*)+0x5a5>
c0018d96:	77 53                	ja     c0018deb <Vm::faultHandler(regs*)+0x167>
c0018d98:	80 fa cd             	cmp    dl,0xcd
c0018d9b:	0f 84 d9 01 00 00    	je     c0018f7a <Vm::faultHandler(regs*)+0x2f6>
c0018da1:	80 fa cf             	cmp    dl,0xcf
c0018da4:	0f 85 51 05 00 00    	jne    c00192fb <Vm::faultHandler(regs*)+0x677>
c0018daa:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018dad:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018db0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018db4:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018db7:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018dbb:	81 ca 00 02 02 00    	or     edx,0x20200
c0018dc1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018dc4:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018dc8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018dce:	66 c1 e8 09          	shr    ax,0x9
c0018dd2:	83 e0 01             	and    eax,0x1
c0018dd5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018dd8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ddb:	83 c0 06             	add    eax,0x6
c0018dde:	25 ff ff 00 00       	and    eax,0xffff
c0018de3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018de6:	e9 0c 05 00 00       	jmp    c00192f7 <Vm::faultHandler(regs*)+0x673>
c0018deb:	80 fa e6             	cmp    dl,0xe6
c0018dee:	0f 84 7f 04 00 00    	je     c0019273 <Vm::faultHandler(regs*)+0x5ef>
c0018df4:	0f 82 4b 04 00 00    	jb     c0019245 <Vm::faultHandler(regs*)+0x5c1>
c0018dfa:	80 fa e7             	cmp    dl,0xe7
c0018dfd:	0f 84 87 04 00 00    	je     c001928a <Vm::faultHandler(regs*)+0x606>
c0018e03:	e9 f3 04 00 00       	jmp    c00192fb <Vm::faultHandler(regs*)+0x677>
c0018e08:	80 fa ef             	cmp    dl,0xef
c0018e0b:	0f 84 d1 04 00 00    	je     c00192e2 <Vm::faultHandler(regs*)+0x65e>
c0018e11:	77 28                	ja     c0018e3b <Vm::faultHandler(regs*)+0x1b7>
c0018e13:	80 fa ed             	cmp    dl,0xed
c0018e16:	0f 84 9f 04 00 00    	je     c00192bb <Vm::faultHandler(regs*)+0x637>
c0018e1c:	80 fa ee             	cmp    dl,0xee
c0018e1f:	0f 85 d6 04 00 00    	jne    c00192fb <Vm::faultHandler(regs*)+0x677>
c0018e25:	50                   	push   eax
c0018e26:	50                   	push   eax
c0018e27:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018e2b:	50                   	push   eax
c0018e2c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018e30:	50                   	push   eax
c0018e31:	e8 5c fa ff ff       	call   c0018892 <Vm::outbv(unsigned short, unsigned char)>
c0018e36:	e9 9f 04 00 00       	jmp    c00192da <Vm::faultHandler(regs*)+0x656>
c0018e3b:	80 fa fa             	cmp    dl,0xfa
c0018e3e:	0f 84 69 01 00 00    	je     c0018fad <Vm::faultHandler(regs*)+0x329>
c0018e44:	80 fa fb             	cmp    dl,0xfb
c0018e47:	0f 84 6e 01 00 00    	je     c0018fbb <Vm::faultHandler(regs*)+0x337>
c0018e4d:	80 fa f3             	cmp    dl,0xf3
c0018e50:	0f 85 a5 04 00 00    	jne    c00192fb <Vm::faultHandler(regs*)+0x677>
c0018e56:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e59:	e9 c0 fe ff ff       	jmp    c0018d1e <Vm::faultHandler(regs*)+0x9a>
c0018e5e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e61:	be 02 00 00 00       	mov    esi,0x2
c0018e66:	e9 b3 fe ff ff       	jmp    c0018d1e <Vm::faultHandler(regs*)+0x9a>
c0018e6b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e6e:	be 03 00 00 00       	mov    esi,0x3
c0018e73:	e9 a6 fe ff ff       	jmp    c0018d1e <Vm::faultHandler(regs*)+0x9a>
c0018e78:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e7b:	be 04 00 00 00       	mov    esi,0x4
c0018e80:	e9 99 fe ff ff       	jmp    c0018d1e <Vm::faultHandler(regs*)+0x9a>
c0018e85:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e88:	be 05 00 00 00       	mov    esi,0x5
c0018e8d:	e9 8c fe ff ff       	jmp    c0018d1e <Vm::faultHandler(regs*)+0x9a>
c0018e92:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e95:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018e9a:	e9 7f fe ff ff       	jmp    c0018d1e <Vm::faultHandler(regs*)+0x9a>
c0018e9f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ea2:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018ea7:	e9 72 fe ff ff       	jmp    c0018d1e <Vm::faultHandler(regs*)+0x9a>
c0018eac:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018eaf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018eb3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018eb8:	74 30                	je     c0018eea <Vm::faultHandler(regs*)+0x266>
c0018eba:	83 e9 04             	sub    ecx,0x4
c0018ebd:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018ec3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018ec9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018ecc:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018ecf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ed5:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0018ed9:	0f 84 15 04 00 00    	je     c00192f4 <Vm::faultHandler(regs*)+0x670>
c0018edf:	80 ce 02             	or     dh,0x2
c0018ee2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018ee5:	e9 0a 04 00 00       	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c0018eea:	83 e9 02             	sub    ecx,0x2
c0018eed:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018ef3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018ef6:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018efa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018f00:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0018f04:	74 05                	je     c0018f0b <Vm::faultHandler(regs*)+0x287>
c0018f06:	80 ce 02             	or     dh,0x2
c0018f09:	eb 03                	jmp    c0018f0e <Vm::faultHandler(regs*)+0x28a>
c0018f0b:	80 e6 fd             	and    dh,0xfd
c0018f0e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018f12:	e9 dd 03 00 00       	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c0018f17:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018f1c:	74 2a                	je     c0018f48 <Vm::faultHandler(regs*)+0x2c4>
c0018f1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018f20:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018f26:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f2c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f31:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f37:	c1 e8 09             	shr    eax,0x9
c0018f3a:	83 e0 01             	and    eax,0x1
c0018f3d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f40:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f43:	83 c0 04             	add    eax,0x4
c0018f46:	eb 25                	jmp    c0018f6d <Vm::faultHandler(regs*)+0x2e9>
c0018f48:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f4b:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f51:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f54:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018f57:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f5d:	66 c1 e8 09          	shr    ax,0x9
c0018f61:	83 e0 01             	and    eax,0x1
c0018f64:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f67:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f6a:	83 c0 02             	add    eax,0x2
c0018f6d:	25 ff ff 00 00       	and    eax,0xffff
c0018f72:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f75:	e9 7a 03 00 00       	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c0018f7a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018f7e:	3c ee                	cmp    al,0xee
c0018f80:	75 10                	jne    c0018f92 <Vm::faultHandler(regs*)+0x30e>
c0018f82:	83 ec 0c             	sub    esp,0xc
c0018f85:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018f88:	e8 a2 f9 ff ff       	call   c001892f <Vm::mainloop3(unsigned long)>
c0018f8d:	e9 4b 03 00 00       	jmp    c00192dd <Vm::faultHandler(regs*)+0x659>
c0018f92:	83 ec 0c             	sub    esp,0xc
c0018f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018f99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f9d:	51                   	push   ecx
c0018f9e:	50                   	push   eax
c0018f9f:	53                   	push   ebx
c0018fa0:	e8 e1 fb ff ff       	call   c0018b86 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018fa5:	83 c4 20             	add    esp,0x20
c0018fa8:	e9 4a 03 00 00       	jmp    c00192f7 <Vm::faultHandler(regs*)+0x673>
c0018fad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fb2:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018fb6:	e9 39 03 00 00       	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c0018fbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fc0:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0018fc4:	e9 2b 03 00 00       	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c0018fc9:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018fcc:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018fd1:	74 2b                	je     c0018ffe <Vm::faultHandler(regs*)+0x37a>
c0018fd3:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018fda:	76 22                	jbe    c0018ffe <Vm::faultHandler(regs*)+0x37a>
c0018fdc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018fe0:	50                   	push   eax
c0018fe1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018fe5:	50                   	push   eax
c0018fe6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018fea:	50                   	push   eax
c0018feb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018fef:	50                   	push   eax
c0018ff0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018ff4:	50                   	push   eax
c0018ff5:	6a 6c                	push   0x6c
c0018ff7:	6a 6c                	push   0x6c
c0018ff9:	e9 b9 01 00 00       	jmp    c00191b7 <Vm::faultHandler(regs*)+0x533>
c0018ffe:	83 ec 0c             	sub    esp,0xc
c0019001:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019005:	0f b7 f6             	movzx  esi,si
c0019008:	50                   	push   eax
c0019009:	e8 71 f8 ff ff       	call   c001887f <Vm::inbv(unsigned short)>
c001900e:	83 c4 0c             	add    esp,0xc
c0019011:	0f b6 c0             	movzx  eax,al
c0019014:	50                   	push   eax
c0019015:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019019:	50                   	push   eax
c001901a:	56                   	push   esi
c001901b:	e8 24 fc ff ff       	call   c0018c44 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019020:	83 c4 10             	add    esp,0x10
c0019023:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019026:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001902a:	74 03                	je     c001902f <Vm::faultHandler(regs*)+0x3ab>
c001902c:	48                   	dec    eax
c001902d:	eb 01                	jmp    c0019030 <Vm::faultHandler(regs*)+0x3ac>
c001902f:	40                   	inc    eax
c0019030:	0f b7 c0             	movzx  eax,ax
c0019033:	e9 8d 00 00 00       	jmp    c00190c5 <Vm::faultHandler(regs*)+0x441>
c0019038:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001903b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001903e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019043:	74 29                	je     c001906e <Vm::faultHandler(regs*)+0x3ea>
c0019045:	3d ff ff 00 00       	cmp    eax,0xffff
c001904a:	76 22                	jbe    c001906e <Vm::faultHandler(regs*)+0x3ea>
c001904c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019050:	50                   	push   eax
c0019051:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019055:	50                   	push   eax
c0019056:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001905a:	50                   	push   eax
c001905b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001905f:	50                   	push   eax
c0019060:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019064:	50                   	push   eax
c0019065:	6a 6d                	push   0x6d
c0019067:	6a 6d                	push   0x6d
c0019069:	e9 49 01 00 00       	jmp    c00191b7 <Vm::faultHandler(regs*)+0x533>
c001906e:	0f b7 c8             	movzx  ecx,ax
c0019071:	0f b7 f6             	movzx  esi,si
c0019074:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019077:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001907c:	74 20                	je     c001909e <Vm::faultHandler(regs*)+0x41a>
c001907e:	ed                   	in     eax,dx
c001907f:	55                   	push   ebp
c0019080:	50                   	push   eax
c0019081:	51                   	push   ecx
c0019082:	56                   	push   esi
c0019083:	e8 e7 fb ff ff       	call   c0018c6f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019088:	83 c4 10             	add    esp,0x10
c001908b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001908e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019092:	74 05                	je     c0019099 <Vm::faultHandler(regs*)+0x415>
c0019094:	83 e8 04             	sub    eax,0x4
c0019097:	eb 27                	jmp    c00190c0 <Vm::faultHandler(regs*)+0x43c>
c0019099:	83 c0 04             	add    eax,0x4
c001909c:	eb 22                	jmp    c00190c0 <Vm::faultHandler(regs*)+0x43c>
c001909e:	66 ed                	in     ax,dx
c00190a0:	0f b7 c0             	movzx  eax,ax
c00190a3:	57                   	push   edi
c00190a4:	50                   	push   eax
c00190a5:	51                   	push   ecx
c00190a6:	56                   	push   esi
c00190a7:	e8 ad fb ff ff       	call   c0018c59 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00190ac:	83 c4 10             	add    esp,0x10
c00190af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00190b2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00190b6:	74 05                	je     c00190bd <Vm::faultHandler(regs*)+0x439>
c00190b8:	83 e8 02             	sub    eax,0x2
c00190bb:	eb 03                	jmp    c00190c0 <Vm::faultHandler(regs*)+0x43c>
c00190bd:	83 c0 02             	add    eax,0x2
c00190c0:	25 ff ff 00 00       	and    eax,0xffff
c00190c5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00190c8:	e9 27 02 00 00       	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c00190cd:	8d 46 ff             	lea    eax,[esi-0x1]
c00190d0:	3c 05                	cmp    al,0x5
c00190d2:	77 24                	ja     c00190f8 <Vm::faultHandler(regs*)+0x474>
c00190d4:	0f b6 c0             	movzx  eax,al
c00190d7:	ff 24 85 9c 46 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb964]
c00190de:	0f b7 fd             	movzx  edi,bp
c00190e1:	eb 15                	jmp    c00190f8 <Vm::faultHandler(regs*)+0x474>
c00190e3:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00190e7:	eb 0f                	jmp    c00190f8 <Vm::faultHandler(regs*)+0x474>
c00190e9:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00190ed:	eb 09                	jmp    c00190f8 <Vm::faultHandler(regs*)+0x474>
c00190ef:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00190f3:	eb 03                	jmp    c00190f8 <Vm::faultHandler(regs*)+0x474>
c00190f5:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00190f8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00190fb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019100:	74 29                	je     c001912b <Vm::faultHandler(regs*)+0x4a7>
c0019102:	3d ff ff 00 00       	cmp    eax,0xffff
c0019107:	76 22                	jbe    c001912b <Vm::faultHandler(regs*)+0x4a7>
c0019109:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001910d:	50                   	push   eax
c001910e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019112:	50                   	push   eax
c0019113:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019117:	50                   	push   eax
c0019118:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001911c:	50                   	push   eax
c001911d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019121:	50                   	push   eax
c0019122:	6a 6e                	push   0x6e
c0019124:	6a 6e                	push   0x6e
c0019126:	e9 8c 00 00 00       	jmp    c00191b7 <Vm::faultHandler(regs*)+0x533>
c001912b:	0f b7 c0             	movzx  eax,ax
c001912e:	52                   	push   edx
c001912f:	52                   	push   edx
c0019130:	50                   	push   eax
c0019131:	57                   	push   edi
c0019132:	e8 d9 fa ff ff       	call   c0018c10 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019137:	59                   	pop    ecx
c0019138:	0f b6 c0             	movzx  eax,al
c001913b:	5e                   	pop    esi
c001913c:	50                   	push   eax
c001913d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019141:	50                   	push   eax
c0019142:	e8 4b f7 ff ff       	call   c0018892 <Vm::outbv(unsigned short, unsigned char)>
c0019147:	83 c4 10             	add    esp,0x10
c001914a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001914d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019151:	74 03                	je     c0019156 <Vm::faultHandler(regs*)+0x4d2>
c0019153:	48                   	dec    eax
c0019154:	eb 01                	jmp    c0019157 <Vm::faultHandler(regs*)+0x4d3>
c0019156:	40                   	inc    eax
c0019157:	0f b7 c0             	movzx  eax,ax
c001915a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001915d:	e9 92 01 00 00       	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c0019162:	8d 46 ff             	lea    eax,[esi-0x1]
c0019165:	3c 05                	cmp    al,0x5
c0019167:	77 1f                	ja     c0019188 <Vm::faultHandler(regs*)+0x504>
c0019169:	0f b6 c0             	movzx  eax,al
c001916c:	ff 24 85 b4 46 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb94c]
c0019173:	89 ef                	mov    edi,ebp
c0019175:	eb 11                	jmp    c0019188 <Vm::faultHandler(regs*)+0x504>
c0019177:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001917a:	eb 0c                	jmp    c0019188 <Vm::faultHandler(regs*)+0x504>
c001917c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001917f:	eb 07                	jmp    c0019188 <Vm::faultHandler(regs*)+0x504>
c0019181:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019184:	eb 02                	jmp    c0019188 <Vm::faultHandler(regs*)+0x504>
c0019186:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019188:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001918b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019190:	74 37                	je     c00191c9 <Vm::faultHandler(regs*)+0x545>
c0019192:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019198:	76 2f                	jbe    c00191c9 <Vm::faultHandler(regs*)+0x545>
c001919a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001919e:	50                   	push   eax
c001919f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191a3:	50                   	push   eax
c00191a4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00191a8:	50                   	push   eax
c00191a9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00191ad:	50                   	push   eax
c00191ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191b2:	50                   	push   eax
c00191b3:	6a 6f                	push   0x6f
c00191b5:	6a 6f                	push   0x6f
c00191b7:	68 42 46 02 c0       	push   0xc0024642
c00191bc:	e8 43 38 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c00191c1:	83 c4 20             	add    esp,0x20
c00191c4:	e9 86 01 00 00       	jmp    c001934f <Vm::faultHandler(regs*)+0x6cb>
c00191c9:	0f b7 d7             	movzx  edx,di
c00191cc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00191cf:	0f b7 c6             	movzx  eax,si
c00191d2:	81 e1 00 04 00 00    	and    ecx,0x400
c00191d8:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00191db:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191e0:	74 1d                	je     c00191ff <Vm::faultHandler(regs*)+0x57b>
c00191e2:	55                   	push   ebp
c00191e3:	55                   	push   ebp
c00191e4:	50                   	push   eax
c00191e5:	52                   	push   edx
c00191e6:	e8 48 fa ff ff       	call   c0018c33 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00191eb:	83 c4 10             	add    esp,0x10
c00191ee:	89 fa                	mov    edx,edi
c00191f0:	ef                   	out    dx,eax
c00191f1:	85 c9                	test   ecx,ecx
c00191f3:	74 05                	je     c00191fa <Vm::faultHandler(regs*)+0x576>
c00191f5:	83 ee 04             	sub    esi,0x4
c00191f8:	eb 21                	jmp    c001921b <Vm::faultHandler(regs*)+0x597>
c00191fa:	83 c6 04             	add    esi,0x4
c00191fd:	eb 1c                	jmp    c001921b <Vm::faultHandler(regs*)+0x597>
c00191ff:	55                   	push   ebp
c0019200:	55                   	push   ebp
c0019201:	50                   	push   eax
c0019202:	52                   	push   edx
c0019203:	e8 19 fa ff ff       	call   c0018c21 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019208:	83 c4 10             	add    esp,0x10
c001920b:	89 fa                	mov    edx,edi
c001920d:	66 ef                	out    dx,ax
c001920f:	85 c9                	test   ecx,ecx
c0019211:	74 05                	je     c0019218 <Vm::faultHandler(regs*)+0x594>
c0019213:	83 ee 02             	sub    esi,0x2
c0019216:	eb 03                	jmp    c001921b <Vm::faultHandler(regs*)+0x597>
c0019218:	83 c6 02             	add    esi,0x2
c001921b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019221:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019224:	e9 cb 00 00 00       	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c0019229:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019230:	83 ec 0c             	sub    esp,0xc
c0019233:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019237:	50                   	push   eax
c0019238:	e8 42 f6 ff ff       	call   c001887f <Vm::inbv(unsigned short)>
c001923d:	0f b6 c0             	movzx  eax,al
c0019240:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019243:	eb 3f                	jmp    c0019284 <Vm::faultHandler(regs*)+0x600>
c0019245:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001924a:	74 07                	je     c0019253 <Vm::faultHandler(regs*)+0x5cf>
c001924c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019250:	ed                   	in     eax,dx
c0019251:	eb 14                	jmp    c0019267 <Vm::faultHandler(regs*)+0x5e3>
c0019253:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019256:	66 31 f6             	xor    si,si
c0019259:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001925c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019260:	66 ed                	in     ax,dx
c0019262:	0f b7 c0             	movzx  eax,ax
c0019265:	09 f0                	or     eax,esi
c0019267:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001926a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001926e:	e9 84 00 00 00       	jmp    c00192f7 <Vm::faultHandler(regs*)+0x673>
c0019273:	52                   	push   edx
c0019274:	52                   	push   edx
c0019275:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019279:	50                   	push   eax
c001927a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001927e:	50                   	push   eax
c001927f:	e8 0e f6 ff ff       	call   c0018892 <Vm::outbv(unsigned short, unsigned char)>
c0019284:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019288:	eb 53                	jmp    c00192dd <Vm::faultHandler(regs*)+0x659>
c001928a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001928d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019291:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019296:	74 03                	je     c001929b <Vm::faultHandler(regs*)+0x617>
c0019298:	ef                   	out    dx,eax
c0019299:	eb cf                	jmp    c001926a <Vm::faultHandler(regs*)+0x5e6>
c001929b:	66 ef                	out    dx,ax
c001929d:	eb cb                	jmp    c001926a <Vm::faultHandler(regs*)+0x5e6>
c001929f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00192a6:	83 ec 0c             	sub    esp,0xc
c00192a9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00192ad:	50                   	push   eax
c00192ae:	e8 cc f5 ff ff       	call   c001887f <Vm::inbv(unsigned short)>
c00192b3:	0f b6 c0             	movzx  eax,al
c00192b6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00192b9:	eb 1f                	jmp    c00192da <Vm::faultHandler(regs*)+0x656>
c00192bb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00192be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00192c3:	74 03                	je     c00192c8 <Vm::faultHandler(regs*)+0x644>
c00192c5:	ed                   	in     eax,dx
c00192c6:	eb 0d                	jmp    c00192d5 <Vm::faultHandler(regs*)+0x651>
c00192c8:	66 ed                	in     ax,dx
c00192ca:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00192cd:	0f b7 c0             	movzx  eax,ax
c00192d0:	66 31 d2             	xor    dx,dx
c00192d3:	09 d0                	or     eax,edx
c00192d5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00192d8:	eb 1a                	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c00192da:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00192dd:	83 c4 10             	add    esp,0x10
c00192e0:	eb 15                	jmp    c00192f7 <Vm::faultHandler(regs*)+0x673>
c00192e2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00192e5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00192e8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00192ed:	74 03                	je     c00192f2 <Vm::faultHandler(regs*)+0x66e>
c00192ef:	ef                   	out    dx,eax
c00192f0:	eb 02                	jmp    c00192f4 <Vm::faultHandler(regs*)+0x670>
c00192f2:	66 ef                	out    dx,ax
c00192f4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00192f7:	b0 01                	mov    al,0x1
c00192f9:	eb 56                	jmp    c0019351 <Vm::faultHandler(regs*)+0x6cd>
c00192fb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00192ff:	50                   	push   eax
c0019300:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019304:	50                   	push   eax
c0019305:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019309:	50                   	push   eax
c001930a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001930e:	50                   	push   eax
c001930f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019313:	50                   	push   eax
c0019314:	52                   	push   edx
c0019315:	52                   	push   edx
c0019316:	68 6f 46 02 c0       	push   0xc002466f
c001931b:	e8 e4 36 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c0019320:	83 c4 20             	add    esp,0x20
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	6a 60                	push   0x60
c0019328:	e8 52 f5 ff ff       	call   c001887f <Vm::inbv(unsigned short)>
c001932d:	83 c4 10             	add    esp,0x10
c0019330:	3c 1c                	cmp    al,0x1c
c0019332:	74 04                	je     c0019338 <Vm::faultHandler(regs*)+0x6b4>
c0019334:	3c 5a                	cmp    al,0x5a
c0019336:	75 eb                	jne    c0019323 <Vm::faultHandler(regs*)+0x69f>
c0019338:	3c 5a                	cmp    al,0x5a
c001933a:	74 04                	je     c0019340 <Vm::faultHandler(regs*)+0x6bc>
c001933c:	3c 1c                	cmp    al,0x1c
c001933e:	75 0f                	jne    c001934f <Vm::faultHandler(regs*)+0x6cb>
c0019340:	83 ec 0c             	sub    esp,0xc
c0019343:	6a 60                	push   0x60
c0019345:	e8 35 f5 ff ff       	call   c001887f <Vm::inbv(unsigned short)>
c001934a:	83 c4 10             	add    esp,0x10
c001934d:	eb e9                	jmp    c0019338 <Vm::faultHandler(regs*)+0x6b4>
c001934f:	31 c0                	xor    eax,eax
c0019351:	83 c4 1c             	add    esp,0x1c
c0019354:	5b                   	pop    ebx
c0019355:	5e                   	pop    esi
c0019356:	5f                   	pop    edi
c0019357:	5d                   	pop    ebp
c0019358:	c3                   	ret    
c0019359:	90                   	nop

c001935a <Vm::fpuInternalTo32(unsigned long long)>:
c001935a:	57                   	push   edi
c001935b:	56                   	push   esi
c001935c:	53                   	push   ebx
c001935d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019365:	89 d6                	mov    esi,edx
c0019367:	89 d7                	mov    edi,edx
c0019369:	89 c1                	mov    ecx,eax
c001936b:	c1 ef 14             	shr    edi,0x14
c001936e:	89 d3                	mov    ebx,edx
c0019370:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019376:	31 d2                	xor    edx,edx
c0019378:	89 f8                	mov    eax,edi
c001937a:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019380:	bf ff 00 00 00       	mov    edi,0xff
c0019385:	05 80 fc ff ff       	add    eax,0xfffffc80
c001938a:	83 d2 ff             	adc    edx,0xffffffff
c001938d:	39 c7                	cmp    edi,eax
c001938f:	bf 00 00 00 00       	mov    edi,0x0
c0019394:	19 d7                	sbb    edi,edx
c0019396:	72 16                	jb     c00193ae <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019398:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001939c:	c1 e0 17             	shl    eax,0x17
c001939f:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00193a5:	09 f1                	or     ecx,esi
c00193a7:	09 c1                	or     ecx,eax
c00193a9:	89 cf                	mov    edi,ecx
c00193ab:	eb 03                	jmp    c00193b0 <Vm::fpuInternalTo32(unsigned long long)+0x56>
c00193ad:	90                   	nop
c00193ae:	31 ff                	xor    edi,edi
c00193b0:	89 f8                	mov    eax,edi
c00193b2:	5b                   	pop    ebx
c00193b3:	5e                   	pop    esi
c00193b4:	5f                   	pop    edi
c00193b5:	c3                   	ret    

c00193b6 <Vm::fpuInternalTo64(unsigned long long)>:
c00193b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00193be:	c3                   	ret    

c00193bf <Vm::fpu32ToInternal(unsigned int)>:
c00193bf:	57                   	push   edi
c00193c0:	31 ff                	xor    edi,edi
c00193c2:	56                   	push   esi
c00193c3:	53                   	push   ebx
c00193c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00193c8:	89 cb                	mov    ebx,ecx
c00193ca:	89 ce                	mov    esi,ecx
c00193cc:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00193d2:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c00193d8:	c1 e9 17             	shr    ecx,0x17
c00193db:	89 f0                	mov    eax,esi
c00193dd:	0f b6 d1             	movzx  edx,cl
c00193e0:	81 c2 80 03 00 00    	add    edx,0x380
c00193e6:	89 d1                	mov    ecx,edx
c00193e8:	89 fa                	mov    edx,edi
c00193ea:	c1 e1 14             	shl    ecx,0x14
c00193ed:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00193f1:	c1 e0 1d             	shl    eax,0x1d
c00193f4:	89 d7                	mov    edi,edx
c00193f6:	89 c6                	mov    esi,eax
c00193f8:	89 ca                	mov    edx,ecx
c00193fa:	89 f0                	mov    eax,esi
c00193fc:	09 fa                	or     edx,edi
c00193fe:	09 da                	or     edx,ebx
c0019400:	5b                   	pop    ebx
c0019401:	5e                   	pop    esi
c0019402:	5f                   	pop    edi
c0019403:	c3                   	ret    

c0019404 <Vm::fpu64ToInternal(unsigned long long)>:
c0019404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001940c:	c3                   	ret    

c001940d <Vm::fpuFloatToLong(unsigned long long)>:
c001940d:	57                   	push   edi
c001940e:	31 c0                	xor    eax,eax
c0019410:	56                   	push   esi
c0019411:	31 d2                	xor    edx,edx
c0019413:	53                   	push   ebx
c0019414:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019418:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001941c:	89 d9                	mov    ecx,ebx
c001941e:	c1 e9 14             	shr    ecx,0x14
c0019421:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019427:	89 cf                	mov    edi,ecx
c0019429:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001942f:	78 35                	js     c0019466 <Vm::fpuFloatToLong(unsigned long long)+0x59>
c0019431:	89 d9                	mov    ecx,ebx
c0019433:	89 f0                	mov    eax,esi
c0019435:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001943b:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019441:	89 ca                	mov    edx,ecx
c0019443:	b9 34 00 00 00       	mov    ecx,0x34
c0019448:	29 f9                	sub    ecx,edi
c001944a:	0f ad d0             	shrd   eax,edx,cl
c001944d:	d3 fa                	sar    edx,cl
c001944f:	f6 c1 20             	test   cl,0x20
c0019452:	74 06                	je     c001945a <Vm::fpuFloatToLong(unsigned long long)+0x4d>
c0019454:	89 d0                	mov    eax,edx
c0019456:	c1 fa 1f             	sar    edx,0x1f
c0019459:	90                   	nop
c001945a:	85 db                	test   ebx,ebx
c001945c:	79 08                	jns    c0019466 <Vm::fpuFloatToLong(unsigned long long)+0x59>
c001945e:	f7 d8                	neg    eax
c0019460:	83 d2 00             	adc    edx,0x0
c0019463:	f7 da                	neg    edx
c0019465:	90                   	nop
c0019466:	5b                   	pop    ebx
c0019467:	5e                   	pop    esi
c0019468:	5f                   	pop    edi
c0019469:	c3                   	ret    

c001946a <Vm::fpuULongToFloat(unsigned long long)>:
c001946a:	57                   	push   edi
c001946b:	31 c9                	xor    ecx,ecx
c001946d:	56                   	push   esi
c001946e:	53                   	push   ebx
c001946f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019473:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019477:	90                   	nop
c0019478:	0f ba e7 14          	bt     edi,0x14
c001947c:	72 08                	jb     c0019486 <Vm::fpuULongToFloat(unsigned long long)+0x1c>
c001947e:	01 f6                	add    esi,esi
c0019480:	11 ff                	adc    edi,edi
c0019482:	41                   	inc    ecx
c0019483:	eb f3                	jmp    c0019478 <Vm::fpuULongToFloat(unsigned long long)+0xe>
c0019485:	90                   	nop
c0019486:	89 fa                	mov    edx,edi
c0019488:	89 f0                	mov    eax,esi
c001948a:	bb 33 04 00 00       	mov    ebx,0x433
c001948f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019495:	29 cb                	sub    ebx,ecx
c0019497:	89 d9                	mov    ecx,ebx
c0019499:	5b                   	pop    ebx
c001949a:	c1 e1 14             	shl    ecx,0x14
c001949d:	5e                   	pop    esi
c001949e:	09 ca                	or     edx,ecx
c00194a0:	5f                   	pop    edi
c00194a1:	c3                   	ret    

c00194a2 <Vm::fpuLongToFloat(long long)>:
c00194a2:	56                   	push   esi
c00194a3:	31 c0                	xor    eax,eax
c00194a5:	53                   	push   ebx
c00194a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00194aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00194ae:	39 c8                	cmp    eax,ecx
c00194b0:	19 d8                	sbb    eax,ebx
c00194b2:	7d 04                	jge    c00194b8 <Vm::fpuLongToFloat(long long)+0x16>
c00194b4:	31 f6                	xor    esi,esi
c00194b6:	eb 0c                	jmp    c00194c4 <Vm::fpuLongToFloat(long long)+0x22>
c00194b8:	f7 d9                	neg    ecx
c00194ba:	be 01 00 00 00       	mov    esi,0x1
c00194bf:	83 d3 00             	adc    ebx,0x0
c00194c2:	f7 db                	neg    ebx
c00194c4:	31 c0                	xor    eax,eax
c00194c6:	0f ba e3 14          	bt     ebx,0x14
c00194ca:	72 08                	jb     c00194d4 <Vm::fpuLongToFloat(long long)+0x32>
c00194cc:	01 c9                	add    ecx,ecx
c00194ce:	11 db                	adc    ebx,ebx
c00194d0:	40                   	inc    eax
c00194d1:	eb f3                	jmp    c00194c6 <Vm::fpuLongToFloat(long long)+0x24>
c00194d3:	90                   	nop
c00194d4:	ba 33 04 00 00       	mov    edx,0x433
c00194d9:	29 c2                	sub    edx,eax
c00194db:	89 c8                	mov    eax,ecx
c00194dd:	c1 e2 14             	shl    edx,0x14
c00194e0:	89 d9                	mov    ecx,ebx
c00194e2:	89 f3                	mov    ebx,esi
c00194e4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00194ea:	09 ca                	or     edx,ecx
c00194ec:	84 db                	test   bl,bl
c00194ee:	74 06                	je     c00194f6 <Vm::fpuLongToFloat(long long)+0x54>
c00194f0:	81 ca 00 00 00 80    	or     edx,0x80000000
c00194f6:	5b                   	pop    ebx
c00194f7:	5e                   	pop    esi
c00194f8:	c3                   	ret    

c00194f9 <Vm::fpuGet0()>:
c00194f9:	31 c0                	xor    eax,eax
c00194fb:	31 d2                	xor    edx,edx
c00194fd:	c3                   	ret    

c00194fe <Vm::fpuGet1()>:
c00194fe:	b8 01 00 00 00       	mov    eax,0x1
c0019503:	31 d2                	xor    edx,edx
c0019505:	c3                   	ret    

c0019506 <Vm::fpuGetPi()>:
c0019506:	b8 03 00 00 00       	mov    eax,0x3
c001950b:	31 d2                	xor    edx,edx
c001950d:	c3                   	ret    

c001950e <Vm::fpuGetLog2E()>:
c001950e:	83 ec 18             	sub    esp,0x18
c0019511:	68 cc 46 02 c0       	push   0xc00246cc
c0019516:	e8 28 ad ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001951b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019520:	31 d2                	xor    edx,edx
c0019522:	83 c4 1c             	add    esp,0x1c
c0019525:	c3                   	ret    

c0019526 <Vm::fpuGetLogE2()>:
c0019526:	83 ec 18             	sub    esp,0x18
c0019529:	68 d8 46 02 c0       	push   0xc00246d8
c001952e:	e8 10 ad ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0019533:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019538:	31 d2                	xor    edx,edx
c001953a:	83 c4 1c             	add    esp,0x1c
c001953d:	c3                   	ret    

c001953e <Vm::fpuGetLog210()>:
c001953e:	83 ec 18             	sub    esp,0x18
c0019541:	68 e4 46 02 c0       	push   0xc00246e4
c0019546:	e8 f8 ac ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001954b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019550:	31 d2                	xor    edx,edx
c0019552:	83 c4 1c             	add    esp,0x1c
c0019555:	c3                   	ret    

c0019556 <Vm::fpuGetLog102()>:
c0019556:	83 ec 18             	sub    esp,0x18
c0019559:	68 f1 46 02 c0       	push   0xc00246f1
c001955e:	e8 e0 ac ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0019563:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019568:	31 d2                	xor    edx,edx
c001956a:	83 c4 1c             	add    esp,0x1c
c001956d:	c3                   	ret    

c001956e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001956e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019572:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001957a:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001957e:	0f 92 c0             	setb   al
c0019581:	c3                   	ret    

c0019582 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001958a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001958e:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019592:	09 c2                	or     edx,eax
c0019594:	0f 94 c0             	sete   al
c0019597:	c3                   	ret    

c0019598 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019598:	57                   	push   edi
c0019599:	56                   	push   esi
c001959a:	53                   	push   ebx
c001959b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001959f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195a3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00195a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00195ab:	57                   	push   edi
c00195ac:	56                   	push   esi
c00195ad:	53                   	push   ebx
c00195ae:	51                   	push   ecx
c00195af:	e8 ce ff ff ff       	call   c0019582 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00195b4:	83 c4 10             	add    esp,0x10
c00195b7:	88 c2                	mov    dl,al
c00195b9:	31 c0                	xor    eax,eax
c00195bb:	84 d2                	test   dl,dl
c00195bd:	75 0d                	jne    c00195cc <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x34>
c00195bf:	57                   	push   edi
c00195c0:	56                   	push   esi
c00195c1:	53                   	push   ebx
c00195c2:	51                   	push   ecx
c00195c3:	e8 a6 ff ff ff       	call   c001956e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	90                   	nop
c00195cc:	83 e0 01             	and    eax,0x1
c00195cf:	5b                   	pop    ebx
c00195d0:	88 c1                	mov    cl,al
c00195d2:	83 e2 01             	and    edx,0x1
c00195d5:	a0 01 76 02 c0       	mov    al,ds:0xc0027601
c00195da:	c1 e2 06             	shl    edx,0x6
c00195dd:	83 e0 ba             	and    eax,0xffffffba
c00195e0:	5e                   	pop    esi
c00195e1:	09 c8                	or     eax,ecx
c00195e3:	5f                   	pop    edi
c00195e4:	09 d0                	or     eax,edx
c00195e6:	a2 01 76 02 c0       	mov    ds:0xc0027601,al
c00195eb:	c3                   	ret    

c00195ec <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00195ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195f4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00195f8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00195fc:	c3                   	ret    

c00195fd <Vm::fpuAbs(unsigned long long)>:
c00195fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019601:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019605:	c3                   	ret    

c0019606 <Vm::fpuChs(unsigned long long)>:
c0019606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001960a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001960e:	f7 d8                	neg    eax
c0019610:	83 d2 00             	adc    edx,0x0
c0019613:	f7 da                	neg    edx
c0019615:	c3                   	ret    

c0019616 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019616:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001961a:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001961f:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019623:	eb c7                	jmp    c00195ec <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019625 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019625:	53                   	push   ebx
c0019626:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001962a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001962e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019632:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019636:	0f af ca             	imul   ecx,edx
c0019639:	0f af d8             	imul   ebx,eax
c001963c:	f7 e2                	mul    edx
c001963e:	01 d9                	add    ecx,ebx
c0019640:	5b                   	pop    ebx
c0019641:	01 ca                	add    edx,ecx
c0019643:	c3                   	ret    

c0019644 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019644:	83 ec 0c             	sub    esp,0xc
c0019647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001964b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001964f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019657:	e8 a8 75 00 00       	call   c0020c04 <__udivdi3>
c001965c:	83 c4 1c             	add    esp,0x1c
c001965f:	c3                   	ret    

c0019660 <Vm::fpuSquare(unsigned long long)>:
c0019660:	50                   	push   eax
c0019661:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019665:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019669:	52                   	push   edx
c001966a:	50                   	push   eax
c001966b:	52                   	push   edx
c001966c:	50                   	push   eax
c001966d:	e8 b3 ff ff ff       	call   c0019625 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019672:	83 c4 14             	add    esp,0x14
c0019675:	c3                   	ret    

c0019676 <Vm::fpuGetReg(int)>:
c0019676:	83 ec 0c             	sub    esp,0xc
c0019679:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001967e:	76 10                	jbe    c0019690 <Vm::fpuGetReg(int)+0x1a>
c0019680:	83 ec 0c             	sub    esp,0xc
c0019683:	68 fe 46 02 c0       	push   0xc00246fe
c0019688:	e8 b6 ab ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001968d:	83 c4 10             	add    esp,0x10
c0019690:	a0 01 76 02 c0       	mov    al,ds:0xc0027601
c0019695:	b9 08 00 00 00       	mov    ecx,0x8
c001969a:	c0 e8 03             	shr    al,0x3
c001969d:	83 e0 07             	and    eax,0x7
c00196a0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00196a4:	99                   	cdq    
c00196a5:	f7 f9                	idiv   ecx
c00196a7:	8b 04 d5 04 76 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd89fc]
c00196ae:	8b 14 d5 08 76 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd89f8]
c00196b5:	83 c4 0c             	add    esp,0xc
c00196b8:	c3                   	ret    

c00196b9 <Vm::fpuSetReg(int, unsigned long long)>:
c00196b9:	57                   	push   edi
c00196ba:	56                   	push   esi
c00196bb:	52                   	push   edx
c00196bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00196c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00196c4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00196c9:	76 11                	jbe    c00196dc <Vm::fpuSetReg(int, unsigned long long)+0x23>
c00196cb:	83 ec 0c             	sub    esp,0xc
c00196ce:	68 11 47 02 c0       	push   0xc0024711
c00196d3:	e8 6b ab ff ff       	call   c0014243 <Krnl::panic(char const*)>
c00196d8:	83 c4 10             	add    esp,0x10
c00196db:	90                   	nop
c00196dc:	a0 01 76 02 c0       	mov    al,ds:0xc0027601
c00196e1:	b9 08 00 00 00       	mov    ecx,0x8
c00196e6:	c0 e8 03             	shr    al,0x3
c00196e9:	83 e0 07             	and    eax,0x7
c00196ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00196f0:	99                   	cdq    
c00196f1:	f7 f9                	idiv   ecx
c00196f3:	89 34 d5 04 76 02 c0 	mov    DWORD PTR [edx*8-0x3ffd89fc],esi
c00196fa:	89 3c d5 08 76 02 c0 	mov    DWORD PTR [edx*8-0x3ffd89f8],edi
c0019701:	58                   	pop    eax
c0019702:	5e                   	pop    esi
c0019703:	5f                   	pop    edi
c0019704:	c3                   	ret    

c0019705 <Vm::fpuPush(unsigned long long)>:
c0019705:	a0 01 76 02 c0       	mov    al,ds:0xc0027601
c001970a:	c0 e8 03             	shr    al,0x3
c001970d:	83 e0 07             	and    eax,0x7
c0019710:	83 c0 07             	add    eax,0x7
c0019713:	88 c2                	mov    dl,al
c0019715:	83 e0 07             	and    eax,0x7
c0019718:	83 e2 07             	and    edx,0x7
c001971b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019722:	8a 15 01 76 02 c0    	mov    dl,BYTE PTR ds:0xc0027601
c0019728:	83 e2 c7             	and    edx,0xffffffc7
c001972b:	09 ca                	or     edx,ecx
c001972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019731:	88 15 01 76 02 c0    	mov    BYTE PTR ds:0xc0027601,dl
c0019737:	89 0c c5 08 76 02 c0 	mov    DWORD PTR [eax*8-0x3ffd89f8],ecx
c001973e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019742:	89 14 c5 04 76 02 c0 	mov    DWORD PTR [eax*8-0x3ffd89fc],edx
c0019749:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c001974e:	83 f8 08             	cmp    eax,0x8
c0019751:	75 09                	jne    c001975c <Vm::fpuPush(unsigned long long)+0x57>
c0019753:	80 0d 00 76 02 c0 40 	or     BYTE PTR ds:0xc0027600,0x40
c001975a:	c3                   	ret    
c001975b:	90                   	nop
c001975c:	40                   	inc    eax
c001975d:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c0019762:	c3                   	ret    

c0019763 <Vm::fpuPop()>:
c0019763:	8a 0d 01 76 02 c0    	mov    cl,BYTE PTR ds:0xc0027601
c0019769:	53                   	push   ebx
c001976a:	c0 e9 03             	shr    cl,0x3
c001976d:	8a 1d 01 76 02 c0    	mov    bl,BYTE PTR ds:0xc0027601
c0019773:	83 e1 07             	and    ecx,0x7
c0019776:	83 e3 c7             	and    ebx,0xffffffc7
c0019779:	8b 04 cd 04 76 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd89fc]
c0019780:	8b 14 cd 08 76 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd89f8]
c0019787:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001978e:	83 e1 38             	and    ecx,0x38
c0019791:	09 d9                	or     ecx,ebx
c0019793:	88 0d 01 76 02 c0    	mov    BYTE PTR ds:0xc0027601,cl
c0019799:	8b 0d 44 76 02 c0    	mov    ecx,DWORD PTR ds:0xc0027644
c001979f:	85 c9                	test   ecx,ecx
c00197a1:	74 09                	je     c00197ac <Vm::fpuPop()+0x49>
c00197a3:	49                   	dec    ecx
c00197a4:	89 0d 44 76 02 c0    	mov    DWORD PTR ds:0xc0027644,ecx
c00197aa:	eb 08                	jmp    c00197b4 <Vm::fpuPop()+0x51>
c00197ac:	80 0d 00 76 02 c0 40 	or     BYTE PTR ds:0xc0027600,0x40
c00197b3:	90                   	nop
c00197b4:	5b                   	pop    ebx
c00197b5:	c3                   	ret    

c00197b6 <Vm::x87Handler(regs*)>:
c00197b6:	55                   	push   ebp
c00197b7:	57                   	push   edi
c00197b8:	56                   	push   esi
c00197b9:	53                   	push   ebx
c00197ba:	83 ec 1c             	sub    esp,0x1c
c00197bd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00197c1:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00197c6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00197c9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00197d1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00197d5:	50                   	push   eax
c00197d6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00197da:	50                   	push   eax
c00197db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197df:	50                   	push   eax
c00197e0:	53                   	push   ebx
c00197e1:	e8 76 a1 ff ff       	call   c001395c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00197e6:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00197e9:	83 c4 10             	add    esp,0x10
c00197ec:	89 c6                	mov    esi,eax
c00197ee:	80 fa d9             	cmp    dl,0xd9
c00197f1:	0f 85 65 01 00 00    	jne    c001995c <Vm::x87Handler(regs*)+0x1a6>
c00197f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00197fb:	8d 50 20             	lea    edx,[eax+0x20]
c00197fe:	80 fa 0e             	cmp    dl,0xe
c0019801:	0f 87 95 00 00 00    	ja     c001989c <Vm::x87Handler(regs*)+0xe6>
c0019807:	0f b6 d2             	movzx  edx,dl
c001980a:	ff 24 95 24 47 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb8dc]
c0019811:	90                   	nop
c0019812:	e8 e2 fc ff ff       	call   c00194f9 <Vm::fpuGet0()>
c0019817:	eb 07                	jmp    c0019820 <Vm::x87Handler(regs*)+0x6a>
c0019819:	90                   	nop
c001981a:	e8 df fc ff ff       	call   c00194fe <Vm::fpuGet1()>
c001981f:	90                   	nop
c0019820:	57                   	push   edi
c0019821:	57                   	push   edi
c0019822:	52                   	push   edx
c0019823:	50                   	push   eax
c0019824:	e8 dc fe ff ff       	call   c0019705 <Vm::fpuPush(unsigned long long)>
c0019829:	90                   	nop
c001982a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001982e:	83 c4 10             	add    esp,0x10
c0019831:	90                   	nop
c0019832:	b0 01                	mov    al,0x1
c0019834:	e9 1b 0a 00 00       	jmp    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c0019839:	90                   	nop
c001983a:	83 ec 0c             	sub    esp,0xc
c001983d:	6a 00                	push   0x0
c001983f:	e8 32 fe ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019844:	59                   	pop    ecx
c0019845:	5e                   	pop    esi
c0019846:	52                   	push   edx
c0019847:	50                   	push   eax
c0019848:	e8 b9 fd ff ff       	call   c0019606 <Vm::fpuChs(unsigned long long)>
c001984d:	eb 15                	jmp    c0019864 <Vm::x87Handler(regs*)+0xae>
c001984f:	90                   	nop
c0019850:	83 ec 0c             	sub    esp,0xc
c0019853:	6a 00                	push   0x0
c0019855:	e8 1c fe ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001985a:	5f                   	pop    edi
c001985b:	5d                   	pop    ebp
c001985c:	52                   	push   edx
c001985d:	50                   	push   eax
c001985e:	e8 9a fd ff ff       	call   c00195fd <Vm::fpuAbs(unsigned long long)>
c0019863:	90                   	nop
c0019864:	83 c4 0c             	add    esp,0xc
c0019867:	90                   	nop
c0019868:	52                   	push   edx
c0019869:	50                   	push   eax
c001986a:	6a 00                	push   0x0
c001986c:	e8 48 fe ff ff       	call   c00196b9 <Vm::fpuSetReg(int, unsigned long long)>
c0019871:	eb b7                	jmp    c001982a <Vm::x87Handler(regs*)+0x74>
c0019873:	90                   	nop
c0019874:	e8 c5 fc ff ff       	call   c001953e <Vm::fpuGetLog210()>
c0019879:	eb a5                	jmp    c0019820 <Vm::x87Handler(regs*)+0x6a>
c001987b:	90                   	nop
c001987c:	e8 8d fc ff ff       	call   c001950e <Vm::fpuGetLog2E()>
c0019881:	eb 9d                	jmp    c0019820 <Vm::x87Handler(regs*)+0x6a>
c0019883:	90                   	nop
c0019884:	e8 7d fc ff ff       	call   c0019506 <Vm::fpuGetPi()>
c0019889:	eb 95                	jmp    c0019820 <Vm::x87Handler(regs*)+0x6a>
c001988b:	90                   	nop
c001988c:	e8 c5 fc ff ff       	call   c0019556 <Vm::fpuGetLog102()>
c0019891:	eb 8d                	jmp    c0019820 <Vm::x87Handler(regs*)+0x6a>
c0019893:	90                   	nop
c0019894:	e8 8d fc ff ff       	call   c0019526 <Vm::fpuGetLogE2()>
c0019899:	eb 85                	jmp    c0019820 <Vm::x87Handler(regs*)+0x6a>
c001989b:	90                   	nop
c001989c:	8d 50 40             	lea    edx,[eax+0x40]
c001989f:	80 fa 07             	cmp    dl,0x7
c00198a2:	77 16                	ja     c00198ba <Vm::x87Handler(regs*)+0x104>
c00198a4:	83 ec 0c             	sub    esp,0xc
c00198a7:	2d c0 00 00 00       	sub    eax,0xc0
c00198ac:	50                   	push   eax
c00198ad:	e8 c4 fd ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c00198b2:	59                   	pop    ecx
c00198b3:	5e                   	pop    esi
c00198b4:	e9 69 ff ff ff       	jmp    c0019822 <Vm::x87Handler(regs*)+0x6c>
c00198b9:	90                   	nop
c00198ba:	8d 50 38             	lea    edx,[eax+0x38]
c00198bd:	80 fa 07             	cmp    dl,0x7
c00198c0:	77 3c                	ja     c00198fe <Vm::x87Handler(regs*)+0x148>
c00198c2:	83 ec 0c             	sub    esp,0xc
c00198c5:	2d c8 00 00 00       	sub    eax,0xc8
c00198ca:	50                   	push   eax
c00198cb:	e8 a6 fd ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c00198d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00198d7:	89 c6                	mov    esi,eax
c00198d9:	89 d7                	mov    edi,edx
c00198db:	e8 96 fd ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c00198e0:	83 c4 0c             	add    esp,0xc
c00198e3:	52                   	push   edx
c00198e4:	50                   	push   eax
c00198e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00198e9:	2d c8 00 00 00       	sub    eax,0xc8
c00198ee:	50                   	push   eax
c00198ef:	e8 c5 fd ff ff       	call   c00196b9 <Vm::fpuSetReg(int, unsigned long long)>
c00198f4:	83 c4 0c             	add    esp,0xc
c00198f7:	57                   	push   edi
c00198f8:	56                   	push   esi
c00198f9:	e9 6c ff ff ff       	jmp    c001986a <Vm::x87Handler(regs*)+0xb4>
c00198fe:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019902:	84 d2                	test   dl,dl
c0019904:	75 10                	jne    c0019916 <Vm::x87Handler(regs*)+0x160>
c0019906:	83 ec 0c             	sub    esp,0xc
c0019909:	ff 36                	push   DWORD PTR [esi]
c001990b:	e8 af fa ff ff       	call   c00193bf <Vm::fpu32ToInternal(unsigned int)>
c0019910:	e9 c5 00 00 00       	jmp    c00199da <Vm::x87Handler(regs*)+0x224>
c0019915:	90                   	nop
c0019916:	80 fa 03             	cmp    dl,0x3
c0019919:	75 13                	jne    c001992e <Vm::x87Handler(regs*)+0x178>
c001991b:	e8 43 fe ff ff       	call   c0019763 <Vm::fpuPop()>
c0019920:	55                   	push   ebp
c0019921:	55                   	push   ebp
c0019922:	52                   	push   edx
c0019923:	50                   	push   eax
c0019924:	e8 31 fa ff ff       	call   c001935a <Vm::fpuInternalTo32(unsigned long long)>
c0019929:	e9 8c 00 00 00       	jmp    c00199ba <Vm::x87Handler(regs*)+0x204>
c001992e:	80 fa 05             	cmp    dl,0x5
c0019931:	75 0f                	jne    c0019942 <Vm::x87Handler(regs*)+0x18c>
c0019933:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019936:	66 a3 02 76 02 c0    	mov    ds:0xc0027602,ax
c001993c:	e9 e5 00 00 00       	jmp    c0019a26 <Vm::x87Handler(regs*)+0x270>
c0019941:	90                   	nop
c0019942:	31 c0                	xor    eax,eax
c0019944:	80 fa 07             	cmp    dl,0x7
c0019947:	0f 85 07 09 00 00    	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c001994d:	66 a1 02 76 02 c0    	mov    ax,ds:0xc0027602
c0019953:	66 89 06             	mov    WORD PTR [esi],ax
c0019956:	e9 cb 00 00 00       	jmp    c0019a26 <Vm::x87Handler(regs*)+0x270>
c001995b:	90                   	nop
c001995c:	80 fa d8             	cmp    dl,0xd8
c001995f:	0f 84 cd 00 00 00    	je     c0019a32 <Vm::x87Handler(regs*)+0x27c>
c0019965:	80 fa dc             	cmp    dl,0xdc
c0019968:	0f 84 18 02 00 00    	je     c0019b86 <Vm::x87Handler(regs*)+0x3d0>
c001996e:	80 fa de             	cmp    dl,0xde
c0019971:	0f 84 db 02 00 00    	je     c0019c52 <Vm::x87Handler(regs*)+0x49c>
c0019977:	80 fa dd             	cmp    dl,0xdd
c001997a:	0f 84 72 04 00 00    	je     c0019df2 <Vm::x87Handler(regs*)+0x63c>
c0019980:	80 fa da             	cmp    dl,0xda
c0019983:	0f 84 39 05 00 00    	je     c0019ec2 <Vm::x87Handler(regs*)+0x70c>
c0019989:	80 fa df             	cmp    dl,0xdf
c001998c:	0f 84 7e 05 00 00    	je     c0019f10 <Vm::x87Handler(regs*)+0x75a>
c0019992:	31 c0                	xor    eax,eax
c0019994:	80 fa db             	cmp    dl,0xdb
c0019997:	0f 85 b7 08 00 00    	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c001999d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00199a1:	80 fa 03             	cmp    dl,0x3
c00199a4:	0f 85 8c 06 00 00    	jne    c001a036 <Vm::x87Handler(regs*)+0x880>
c00199aa:	e8 b4 fd ff ff       	call   c0019763 <Vm::fpuPop()>
c00199af:	55                   	push   ebp
c00199b0:	55                   	push   ebp
c00199b1:	90                   	nop
c00199b2:	52                   	push   edx
c00199b3:	50                   	push   eax
c00199b4:	e8 54 fa ff ff       	call   c001940d <Vm::fpuFloatToLong(unsigned long long)>
c00199b9:	90                   	nop
c00199ba:	83 c4 10             	add    esp,0x10
c00199bd:	89 06                	mov    DWORD PTR [esi],eax
c00199bf:	eb 65                	jmp    c0019a26 <Vm::x87Handler(regs*)+0x270>
c00199c1:	90                   	nop
c00199c2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00199c6:	84 d2                	test   dl,dl
c00199c8:	0f 85 fc 05 00 00    	jne    c0019fca <Vm::x87Handler(regs*)+0x814>
c00199ce:	57                   	push   edi
c00199cf:	57                   	push   edi
c00199d0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00199d3:	ff 36                	push   DWORD PTR [esi]
c00199d5:	e8 2a fa ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c00199da:	5e                   	pop    esi
c00199db:	5f                   	pop    edi
c00199dc:	52                   	push   edx
c00199dd:	50                   	push   eax
c00199de:	e8 22 fd ff ff       	call   c0019705 <Vm::fpuPush(unsigned long long)>
c00199e3:	90                   	nop
c00199e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199e8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00199eb:	e9 3e fe ff ff       	jmp    c001982e <Vm::x87Handler(regs*)+0x78>
c00199f0:	80 fa 03             	cmp    dl,0x3
c00199f3:	0f 85 f1 06 00 00    	jne    c001a0ea <Vm::x87Handler(regs*)+0x934>
c00199f9:	57                   	push   edi
c00199fa:	57                   	push   edi
c00199fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00199fe:	ff 36                	push   DWORD PTR [esi]
c0019a00:	e8 ff f9 ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c0019a05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019a0c:	89 c6                	mov    esi,eax
c0019a0e:	89 d7                	mov    edi,edx
c0019a10:	e8 61 fc ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019a15:	57                   	push   edi
c0019a16:	56                   	push   esi
c0019a17:	52                   	push   edx
c0019a18:	50                   	push   eax
c0019a19:	e8 7a fb ff ff       	call   c0019598 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019a1e:	83 c4 20             	add    esp,0x20
c0019a21:	e8 3d fd ff ff       	call   c0019763 <Vm::fpuPop()>
c0019a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a2a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019a2d:	e9 00 fe ff ff       	jmp    c0019832 <Vm::x87Handler(regs*)+0x7c>
c0019a32:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a36:	8d 50 40             	lea    edx,[eax+0x40]
c0019a39:	80 fa 07             	cmp    dl,0x7
c0019a3c:	77 2a                	ja     c0019a68 <Vm::x87Handler(regs*)+0x2b2>
c0019a3e:	83 ec 0c             	sub    esp,0xc
c0019a41:	2d c0 00 00 00       	sub    eax,0xc0
c0019a46:	50                   	push   eax
c0019a47:	e8 2a fc ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019a4c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019a53:	89 c6                	mov    esi,eax
c0019a55:	89 d7                	mov    edi,edx
c0019a57:	e8 1a fc ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019a5c:	57                   	push   edi
c0019a5d:	56                   	push   esi
c0019a5e:	52                   	push   edx
c0019a5f:	50                   	push   eax
c0019a60:	e8 87 fb ff ff       	call   c00195ec <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019a65:	eb 31                	jmp    c0019a98 <Vm::x87Handler(regs*)+0x2e2>
c0019a67:	90                   	nop
c0019a68:	8d 50 38             	lea    edx,[eax+0x38]
c0019a6b:	80 fa 07             	cmp    dl,0x7
c0019a6e:	77 30                	ja     c0019aa0 <Vm::x87Handler(regs*)+0x2ea>
c0019a70:	83 ec 0c             	sub    esp,0xc
c0019a73:	2d c8 00 00 00       	sub    eax,0xc8
c0019a78:	50                   	push   eax
c0019a79:	e8 f8 fb ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019a7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019a85:	89 c6                	mov    esi,eax
c0019a87:	89 d7                	mov    edi,edx
c0019a89:	e8 e8 fb ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019a8e:	57                   	push   edi
c0019a8f:	56                   	push   esi
c0019a90:	52                   	push   edx
c0019a91:	50                   	push   eax
c0019a92:	e8 8e fb ff ff       	call   c0019625 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019a97:	90                   	nop
c0019a98:	83 c4 1c             	add    esp,0x1c
c0019a9b:	e9 c8 fd ff ff       	jmp    c0019868 <Vm::x87Handler(regs*)+0xb2>
c0019aa0:	8d 50 30             	lea    edx,[eax+0x30]
c0019aa3:	80 fa 07             	cmp    dl,0x7
c0019aa6:	77 0e                	ja     c0019ab6 <Vm::x87Handler(regs*)+0x300>
c0019aa8:	83 ec 0c             	sub    esp,0xc
c0019aab:	2d d0 00 00 00       	sub    eax,0xd0
c0019ab0:	e9 a7 03 00 00       	jmp    c0019e5c <Vm::x87Handler(regs*)+0x6a6>
c0019ab5:	90                   	nop
c0019ab6:	8d 50 28             	lea    edx,[eax+0x28]
c0019ab9:	80 fa 07             	cmp    dl,0x7
c0019abc:	77 0e                	ja     c0019acc <Vm::x87Handler(regs*)+0x316>
c0019abe:	83 ec 0c             	sub    esp,0xc
c0019ac1:	2d d8 00 00 00       	sub    eax,0xd8
c0019ac6:	e9 cd 03 00 00       	jmp    c0019e98 <Vm::x87Handler(regs*)+0x6e2>
c0019acb:	90                   	nop
c0019acc:	8d 50 20             	lea    edx,[eax+0x20]
c0019acf:	80 fa 07             	cmp    dl,0x7
c0019ad2:	77 1c                	ja     c0019af0 <Vm::x87Handler(regs*)+0x33a>
c0019ad4:	83 ec 0c             	sub    esp,0xc
c0019ad7:	2d e0 00 00 00       	sub    eax,0xe0
c0019adc:	50                   	push   eax
c0019add:	e8 94 fb ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019ae2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ae9:	89 c6                	mov    esi,eax
c0019aeb:	89 d7                	mov    edi,edx
c0019aed:	eb 23                	jmp    c0019b12 <Vm::x87Handler(regs*)+0x35c>
c0019aef:	90                   	nop
c0019af0:	8d 50 18             	lea    edx,[eax+0x18]
c0019af3:	80 fa 07             	cmp    dl,0x7
c0019af6:	77 2e                	ja     c0019b26 <Vm::x87Handler(regs*)+0x370>
c0019af8:	83 ec 0c             	sub    esp,0xc
c0019afb:	6a 00                	push   0x0
c0019afd:	e8 74 fb ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019b02:	89 c6                	mov    esi,eax
c0019b04:	89 d7                	mov    edi,edx
c0019b06:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019b0a:	2d e8 00 00 00       	sub    eax,0xe8
c0019b0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b12:	e8 5f fb ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019b17:	57                   	push   edi
c0019b18:	56                   	push   esi
c0019b19:	52                   	push   edx
c0019b1a:	50                   	push   eax
c0019b1b:	e8 f6 fa ff ff       	call   c0019616 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019b20:	e9 73 ff ff ff       	jmp    c0019a98 <Vm::x87Handler(regs*)+0x2e2>
c0019b25:	90                   	nop
c0019b26:	8d 50 10             	lea    edx,[eax+0x10]
c0019b29:	80 fa 07             	cmp    dl,0x7
c0019b2c:	77 1c                	ja     c0019b4a <Vm::x87Handler(regs*)+0x394>
c0019b2e:	83 ec 0c             	sub    esp,0xc
c0019b31:	2d f0 00 00 00       	sub    eax,0xf0
c0019b36:	50                   	push   eax
c0019b37:	e8 3a fb ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019b3c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019b43:	89 c6                	mov    esi,eax
c0019b45:	89 d7                	mov    edi,edx
c0019b47:	eb 23                	jmp    c0019b6c <Vm::x87Handler(regs*)+0x3b6>
c0019b49:	90                   	nop
c0019b4a:	3c f7                	cmp    al,0xf7
c0019b4c:	0f 86 de 03 00 00    	jbe    c0019f30 <Vm::x87Handler(regs*)+0x77a>
c0019b52:	83 ec 0c             	sub    esp,0xc
c0019b55:	6a 00                	push   0x0
c0019b57:	e8 1a fb ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019b5c:	89 c6                	mov    esi,eax
c0019b5e:	89 d7                	mov    edi,edx
c0019b60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019b64:	2d f8 00 00 00       	sub    eax,0xf8
c0019b69:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b6c:	e8 05 fb ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019b71:	57                   	push   edi
c0019b72:	56                   	push   esi
c0019b73:	52                   	push   edx
c0019b74:	50                   	push   eax
c0019b75:	e8 ca fa ff ff       	call   c0019644 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019b7a:	83 c4 1c             	add    esp,0x1c
c0019b7d:	52                   	push   edx
c0019b7e:	50                   	push   eax
c0019b7f:	6a 00                	push   0x0
c0019b81:	e9 58 02 00 00       	jmp    c0019dde <Vm::x87Handler(regs*)+0x628>
c0019b86:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019b8a:	8d 50 40             	lea    edx,[eax+0x40]
c0019b8d:	80 fa 07             	cmp    dl,0x7
c0019b90:	77 38                	ja     c0019bca <Vm::x87Handler(regs*)+0x414>
c0019b92:	83 ec 0c             	sub    esp,0xc
c0019b95:	2d c0 00 00 00       	sub    eax,0xc0
c0019b9a:	50                   	push   eax
c0019b9b:	e8 d6 fa ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019ba0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ba7:	89 c6                	mov    esi,eax
c0019ba9:	89 d7                	mov    edi,edx
c0019bab:	e8 c6 fa ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019bb0:	57                   	push   edi
c0019bb1:	56                   	push   esi
c0019bb2:	52                   	push   edx
c0019bb3:	50                   	push   eax
c0019bb4:	e8 33 fa ff ff       	call   c00195ec <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019bb9:	83 c4 1c             	add    esp,0x1c
c0019bbc:	52                   	push   edx
c0019bbd:	50                   	push   eax
c0019bbe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019bc2:	2d c0 00 00 00       	sub    eax,0xc0
c0019bc7:	eb 3f                	jmp    c0019c08 <Vm::x87Handler(regs*)+0x452>
c0019bc9:	90                   	nop
c0019bca:	8d 50 38             	lea    edx,[eax+0x38]
c0019bcd:	80 fa 07             	cmp    dl,0x7
c0019bd0:	77 3c                	ja     c0019c0e <Vm::x87Handler(regs*)+0x458>
c0019bd2:	83 ec 0c             	sub    esp,0xc
c0019bd5:	2d c8 00 00 00       	sub    eax,0xc8
c0019bda:	50                   	push   eax
c0019bdb:	e8 96 fa ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019be0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019be7:	89 c6                	mov    esi,eax
c0019be9:	89 d7                	mov    edi,edx
c0019beb:	e8 86 fa ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019bf0:	57                   	push   edi
c0019bf1:	56                   	push   esi
c0019bf2:	52                   	push   edx
c0019bf3:	50                   	push   eax
c0019bf4:	e8 2c fa ff ff       	call   c0019625 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019bf9:	83 c4 1c             	add    esp,0x1c
c0019bfc:	52                   	push   edx
c0019bfd:	50                   	push   eax
c0019bfe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c02:	2d c8 00 00 00       	sub    eax,0xc8
c0019c07:	90                   	nop
c0019c08:	50                   	push   eax
c0019c09:	e9 5e fc ff ff       	jmp    c001986c <Vm::x87Handler(regs*)+0xb6>
c0019c0e:	83 c0 18             	add    eax,0x18
c0019c11:	3c 07                	cmp    al,0x7
c0019c13:	0f 87 4b 04 00 00    	ja     c001a064 <Vm::x87Handler(regs*)+0x8ae>
c0019c19:	83 ec 0c             	sub    esp,0xc
c0019c1c:	6a 00                	push   0x0
c0019c1e:	e8 53 fa ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019c23:	89 c6                	mov    esi,eax
c0019c25:	89 d7                	mov    edi,edx
c0019c27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c2b:	2d e8 00 00 00       	sub    eax,0xe8
c0019c30:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c33:	e8 3e fa ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019c38:	57                   	push   edi
c0019c39:	56                   	push   esi
c0019c3a:	52                   	push   edx
c0019c3b:	50                   	push   eax
c0019c3c:	e8 d5 f9 ff ff       	call   c0019616 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019c41:	83 c4 1c             	add    esp,0x1c
c0019c44:	52                   	push   edx
c0019c45:	50                   	push   eax
c0019c46:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c4a:	2d e8 00 00 00       	sub    eax,0xe8
c0019c4f:	eb b7                	jmp    c0019c08 <Vm::x87Handler(regs*)+0x452>
c0019c51:	90                   	nop
c0019c52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c56:	8d 50 40             	lea    edx,[eax+0x40]
c0019c59:	80 fa 07             	cmp    dl,0x7
c0019c5c:	77 3a                	ja     c0019c98 <Vm::x87Handler(regs*)+0x4e2>
c0019c5e:	83 ec 0c             	sub    esp,0xc
c0019c61:	2d c0 00 00 00       	sub    eax,0xc0
c0019c66:	50                   	push   eax
c0019c67:	e8 0a fa ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019c6c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c73:	89 c6                	mov    esi,eax
c0019c75:	89 d7                	mov    edi,edx
c0019c77:	e8 fa f9 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019c7c:	57                   	push   edi
c0019c7d:	56                   	push   esi
c0019c7e:	52                   	push   edx
c0019c7f:	50                   	push   eax
c0019c80:	e8 67 f9 ff ff       	call   c00195ec <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c85:	83 c4 1c             	add    esp,0x1c
c0019c88:	52                   	push   edx
c0019c89:	50                   	push   eax
c0019c8a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c8e:	2d c0 00 00 00       	sub    eax,0xc0
c0019c93:	e9 a4 01 00 00       	jmp    c0019e3c <Vm::x87Handler(regs*)+0x686>
c0019c98:	8d 50 20             	lea    edx,[eax+0x20]
c0019c9b:	80 fa 07             	cmp    dl,0x7
c0019c9e:	77 3a                	ja     c0019cda <Vm::x87Handler(regs*)+0x524>
c0019ca0:	83 ec 0c             	sub    esp,0xc
c0019ca3:	2d e0 00 00 00       	sub    eax,0xe0
c0019ca8:	50                   	push   eax
c0019ca9:	e8 c8 f9 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019cae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cb5:	89 c6                	mov    esi,eax
c0019cb7:	89 d7                	mov    edi,edx
c0019cb9:	e8 b8 f9 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019cbe:	57                   	push   edi
c0019cbf:	56                   	push   esi
c0019cc0:	52                   	push   edx
c0019cc1:	50                   	push   eax
c0019cc2:	e8 4f f9 ff ff       	call   c0019616 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019cc7:	83 c4 1c             	add    esp,0x1c
c0019cca:	52                   	push   edx
c0019ccb:	50                   	push   eax
c0019ccc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019cd0:	2d e0 00 00 00       	sub    eax,0xe0
c0019cd5:	e9 62 01 00 00       	jmp    c0019e3c <Vm::x87Handler(regs*)+0x686>
c0019cda:	8d 50 18             	lea    edx,[eax+0x18]
c0019cdd:	80 fa 07             	cmp    dl,0x7
c0019ce0:	77 3c                	ja     c0019d1e <Vm::x87Handler(regs*)+0x568>
c0019ce2:	83 ec 0c             	sub    esp,0xc
c0019ce5:	6a 00                	push   0x0
c0019ce7:	e8 8a f9 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019cec:	89 c6                	mov    esi,eax
c0019cee:	89 d7                	mov    edi,edx
c0019cf0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019cf4:	2d e8 00 00 00       	sub    eax,0xe8
c0019cf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cfc:	e8 75 f9 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019d01:	57                   	push   edi
c0019d02:	56                   	push   esi
c0019d03:	52                   	push   edx
c0019d04:	50                   	push   eax
c0019d05:	e8 0c f9 ff ff       	call   c0019616 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d0a:	83 c4 1c             	add    esp,0x1c
c0019d0d:	52                   	push   edx
c0019d0e:	50                   	push   eax
c0019d0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d13:	2d e8 00 00 00       	sub    eax,0xe8
c0019d18:	e9 1f 01 00 00       	jmp    c0019e3c <Vm::x87Handler(regs*)+0x686>
c0019d1d:	90                   	nop
c0019d1e:	8d 50 38             	lea    edx,[eax+0x38]
c0019d21:	80 fa 07             	cmp    dl,0x7
c0019d24:	77 38                	ja     c0019d5e <Vm::x87Handler(regs*)+0x5a8>
c0019d26:	83 ec 0c             	sub    esp,0xc
c0019d29:	2d c8 00 00 00       	sub    eax,0xc8
c0019d2e:	50                   	push   eax
c0019d2f:	e8 42 f9 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019d34:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d3b:	89 c6                	mov    esi,eax
c0019d3d:	89 d7                	mov    edi,edx
c0019d3f:	e8 32 f9 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019d44:	57                   	push   edi
c0019d45:	56                   	push   esi
c0019d46:	52                   	push   edx
c0019d47:	50                   	push   eax
c0019d48:	e8 d8 f8 ff ff       	call   c0019625 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019d4d:	83 c4 1c             	add    esp,0x1c
c0019d50:	52                   	push   edx
c0019d51:	50                   	push   eax
c0019d52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d56:	2d c8 00 00 00       	sub    eax,0xc8
c0019d5b:	eb 7f                	jmp    c0019ddc <Vm::x87Handler(regs*)+0x626>
c0019d5d:	90                   	nop
c0019d5e:	3c f7                	cmp    al,0xf7
c0019d60:	76 38                	jbe    c0019d9a <Vm::x87Handler(regs*)+0x5e4>
c0019d62:	83 ec 0c             	sub    esp,0xc
c0019d65:	6a 00                	push   0x0
c0019d67:	e8 0a f9 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019d6c:	89 c6                	mov    esi,eax
c0019d6e:	89 d7                	mov    edi,edx
c0019d70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d74:	2d f8 00 00 00       	sub    eax,0xf8
c0019d79:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d7c:	e8 f5 f8 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019d81:	57                   	push   edi
c0019d82:	56                   	push   esi
c0019d83:	52                   	push   edx
c0019d84:	50                   	push   eax
c0019d85:	e8 ba f8 ff ff       	call   c0019644 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d8a:	83 c4 1c             	add    esp,0x1c
c0019d8d:	52                   	push   edx
c0019d8e:	50                   	push   eax
c0019d8f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d93:	2d f8 00 00 00       	sub    eax,0xf8
c0019d98:	eb 42                	jmp    c0019ddc <Vm::x87Handler(regs*)+0x626>
c0019d9a:	8d 50 10             	lea    edx,[eax+0x10]
c0019d9d:	80 fa 07             	cmp    dl,0x7
c0019da0:	0f 87 60 01 00 00    	ja     c0019f06 <Vm::x87Handler(regs*)+0x750>
c0019da6:	83 ec 0c             	sub    esp,0xc
c0019da9:	2d f0 00 00 00       	sub    eax,0xf0
c0019dae:	50                   	push   eax
c0019daf:	e8 c2 f8 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019db4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019dbb:	89 c6                	mov    esi,eax
c0019dbd:	89 d7                	mov    edi,edx
c0019dbf:	e8 b2 f8 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019dc4:	57                   	push   edi
c0019dc5:	56                   	push   esi
c0019dc6:	52                   	push   edx
c0019dc7:	50                   	push   eax
c0019dc8:	e8 77 f8 ff ff       	call   c0019644 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019dcd:	83 c4 1c             	add    esp,0x1c
c0019dd0:	52                   	push   edx
c0019dd1:	50                   	push   eax
c0019dd2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dd6:	2d f0 00 00 00       	sub    eax,0xf0
c0019ddb:	90                   	nop
c0019ddc:	50                   	push   eax
c0019ddd:	90                   	nop
c0019dde:	e8 d6 f8 ff ff       	call   c00196b9 <Vm::fpuSetReg(int, unsigned long long)>
c0019de3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019de7:	e8 77 f9 ff ff       	call   c0019763 <Vm::fpuPop()>
c0019dec:	e9 3d fa ff ff       	jmp    c001982e <Vm::x87Handler(regs*)+0x78>
c0019df1:	90                   	nop
c0019df2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019df6:	8d 50 30             	lea    edx,[eax+0x30]
c0019df9:	80 fa 07             	cmp    dl,0x7
c0019dfc:	77 1e                	ja     c0019e1c <Vm::x87Handler(regs*)+0x666>
c0019dfe:	83 ec 0c             	sub    esp,0xc
c0019e01:	6a 00                	push   0x0
c0019e03:	e8 6e f8 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019e08:	83 c4 0c             	add    esp,0xc
c0019e0b:	52                   	push   edx
c0019e0c:	50                   	push   eax
c0019e0d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e11:	2d d0 00 00 00       	sub    eax,0xd0
c0019e16:	e9 ed fd ff ff       	jmp    c0019c08 <Vm::x87Handler(regs*)+0x452>
c0019e1b:	90                   	nop
c0019e1c:	8d 50 28             	lea    edx,[eax+0x28]
c0019e1f:	80 fa 07             	cmp    dl,0x7
c0019e22:	77 28                	ja     c0019e4c <Vm::x87Handler(regs*)+0x696>
c0019e24:	83 ec 0c             	sub    esp,0xc
c0019e27:	6a 00                	push   0x0
c0019e29:	e8 48 f8 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019e2e:	83 c4 0c             	add    esp,0xc
c0019e31:	52                   	push   edx
c0019e32:	50                   	push   eax
c0019e33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e37:	2d d8 00 00 00       	sub    eax,0xd8
c0019e3c:	50                   	push   eax
c0019e3d:	e8 77 f8 ff ff       	call   c00196b9 <Vm::fpuSetReg(int, unsigned long long)>
c0019e42:	e8 1c f9 ff ff       	call   c0019763 <Vm::fpuPop()>
c0019e47:	e9 de f9 ff ff       	jmp    c001982a <Vm::x87Handler(regs*)+0x74>
c0019e4c:	8d 50 20             	lea    edx,[eax+0x20]
c0019e4f:	80 fa 07             	cmp    dl,0x7
c0019e52:	77 30                	ja     c0019e84 <Vm::x87Handler(regs*)+0x6ce>
c0019e54:	83 ec 0c             	sub    esp,0xc
c0019e57:	2d e0 00 00 00       	sub    eax,0xe0
c0019e5c:	50                   	push   eax
c0019e5d:	e8 14 f8 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019e62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e69:	89 c6                	mov    esi,eax
c0019e6b:	89 d7                	mov    edi,edx
c0019e6d:	e8 04 f8 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019e72:	57                   	push   edi
c0019e73:	56                   	push   esi
c0019e74:	52                   	push   edx
c0019e75:	50                   	push   eax
c0019e76:	e8 1d f7 ff ff       	call   c0019598 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019e7b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e7f:	e9 5e 02 00 00       	jmp    c001a0e2 <Vm::x87Handler(regs*)+0x92c>
c0019e84:	8d 50 18             	lea    edx,[eax+0x18]
c0019e87:	80 fa 07             	cmp    dl,0x7
c0019e8a:	0f 87 32 fb ff ff    	ja     c00199c2 <Vm::x87Handler(regs*)+0x20c>
c0019e90:	83 ec 0c             	sub    esp,0xc
c0019e93:	2d e8 00 00 00       	sub    eax,0xe8
c0019e98:	50                   	push   eax
c0019e99:	e8 d8 f7 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019e9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ea5:	89 c6                	mov    esi,eax
c0019ea7:	89 d7                	mov    edi,edx
c0019ea9:	e8 c8 f7 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019eae:	57                   	push   edi
c0019eaf:	56                   	push   esi
c0019eb0:	52                   	push   edx
c0019eb1:	50                   	push   eax
c0019eb2:	e8 e1 f6 ff ff       	call   c0019598 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019eb7:	83 c4 20             	add    esp,0x20
c0019eba:	e8 a4 f8 ff ff       	call   c0019763 <Vm::fpuPop()>
c0019ebf:	eb 65                	jmp    c0019f26 <Vm::x87Handler(regs*)+0x770>
c0019ec1:	90                   	nop
c0019ec2:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0019ec6:	0f 85 14 01 00 00    	jne    c0019fe0 <Vm::x87Handler(regs*)+0x82a>
c0019ecc:	83 ec 0c             	sub    esp,0xc
c0019ecf:	6a 01                	push   0x1
c0019ed1:	e8 a0 f7 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019ed6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019edd:	89 c6                	mov    esi,eax
c0019edf:	89 d7                	mov    edi,edx
c0019ee1:	e8 90 f7 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019ee6:	57                   	push   edi
c0019ee7:	56                   	push   esi
c0019ee8:	52                   	push   edx
c0019ee9:	50                   	push   eax
c0019eea:	e8 a9 f6 ff ff       	call   c0019598 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019eef:	83 c4 20             	add    esp,0x20
c0019ef2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019ef6:	e8 68 f8 ff ff       	call   c0019763 <Vm::fpuPop()>
c0019efb:	e8 63 f8 ff ff       	call   c0019763 <Vm::fpuPop()>
c0019f00:	e9 2d f9 ff ff       	jmp    c0019832 <Vm::x87Handler(regs*)+0x7c>
c0019f05:	90                   	nop
c0019f06:	3c d9                	cmp    al,0xd9
c0019f08:	0f 85 c4 02 00 00    	jne    c001a1d2 <Vm::x87Handler(regs*)+0xa1c>
c0019f0e:	eb bc                	jmp    c0019ecc <Vm::x87Handler(regs*)+0x716>
c0019f10:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0019f14:	0f 85 fc 02 00 00    	jne    c001a216 <Vm::x87Handler(regs*)+0xa60>
c0019f1a:	0f b7 05 00 76 02 c0 	movzx  eax,WORD PTR ds:0xc0027600
c0019f21:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0019f25:	90                   	nop
c0019f26:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019f2a:	e9 03 f9 ff ff       	jmp    c0019832 <Vm::x87Handler(regs*)+0x7c>
c0019f2f:	90                   	nop
c0019f30:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019f34:	84 d2                	test   dl,dl
c0019f36:	75 10                	jne    c0019f48 <Vm::x87Handler(regs*)+0x792>
c0019f38:	83 ec 0c             	sub    esp,0xc
c0019f3b:	ff 36                	push   DWORD PTR [esi]
c0019f3d:	e8 7d f4 ff ff       	call   c00193bf <Vm::fpu32ToInternal(unsigned int)>
c0019f42:	e9 31 01 00 00       	jmp    c001a078 <Vm::x87Handler(regs*)+0x8c2>
c0019f47:	90                   	nop
c0019f48:	80 fa 01             	cmp    dl,0x1
c0019f4b:	75 0f                	jne    c0019f5c <Vm::x87Handler(regs*)+0x7a6>
c0019f4d:	83 ec 0c             	sub    esp,0xc
c0019f50:	ff 36                	push   DWORD PTR [esi]
c0019f52:	e8 68 f4 ff ff       	call   c00193bf <Vm::fpu32ToInternal(unsigned int)>
c0019f57:	e9 8e 02 00 00       	jmp    c001a1ea <Vm::x87Handler(regs*)+0xa34>
c0019f5c:	80 fa 04             	cmp    dl,0x4
c0019f5f:	75 0f                	jne    c0019f70 <Vm::x87Handler(regs*)+0x7ba>
c0019f61:	83 ec 0c             	sub    esp,0xc
c0019f64:	ff 36                	push   DWORD PTR [esi]
c0019f66:	e8 54 f4 ff ff       	call   c00193bf <Vm::fpu32ToInternal(unsigned int)>
c0019f6b:	e9 8c 01 00 00       	jmp    c001a0fc <Vm::x87Handler(regs*)+0x946>
c0019f70:	80 fa 05             	cmp    dl,0x5
c0019f73:	75 1b                	jne    c0019f90 <Vm::x87Handler(regs*)+0x7da>
c0019f75:	83 ec 0c             	sub    esp,0xc
c0019f78:	6a 00                	push   0x0
c0019f7a:	e8 f7 f6 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019f7f:	89 c7                	mov    edi,eax
c0019f81:	89 d5                	mov    ebp,edx
c0019f83:	58                   	pop    eax
c0019f84:	ff 36                	push   DWORD PTR [esi]
c0019f86:	e8 34 f4 ff ff       	call   c00193bf <Vm::fpu32ToInternal(unsigned int)>
c0019f8b:	e9 aa 01 00 00       	jmp    c001a13a <Vm::x87Handler(regs*)+0x984>
c0019f90:	80 fa 06             	cmp    dl,0x6
c0019f93:	75 0f                	jne    c0019fa4 <Vm::x87Handler(regs*)+0x7ee>
c0019f95:	83 ec 0c             	sub    esp,0xc
c0019f98:	ff 36                	push   DWORD PTR [esi]
c0019f9a:	e8 20 f4 ff ff       	call   c00193bf <Vm::fpu32ToInternal(unsigned int)>
c0019f9f:	e9 b6 01 00 00       	jmp    c001a15a <Vm::x87Handler(regs*)+0x9a4>
c0019fa4:	31 c0                	xor    eax,eax
c0019fa6:	80 fa 07             	cmp    dl,0x7
c0019fa9:	0f 85 a5 02 00 00    	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c0019faf:	83 ec 0c             	sub    esp,0xc
c0019fb2:	6a 00                	push   0x0
c0019fb4:	e8 bd f6 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c0019fb9:	89 c7                	mov    edi,eax
c0019fbb:	89 d5                	mov    ebp,edx
c0019fbd:	58                   	pop    eax
c0019fbe:	ff 36                	push   DWORD PTR [esi]
c0019fc0:	e8 fa f3 ff ff       	call   c00193bf <Vm::fpu32ToInternal(unsigned int)>
c0019fc5:	e9 d4 01 00 00       	jmp    c001a19e <Vm::x87Handler(regs*)+0x9e8>
c0019fca:	80 fa 03             	cmp    dl,0x3
c0019fcd:	0f 85 dd 01 00 00    	jne    c001a1b0 <Vm::x87Handler(regs*)+0x9fa>
c0019fd3:	e8 8b f7 ff ff       	call   c0019763 <Vm::fpuPop()>
c0019fd8:	51                   	push   ecx
c0019fd9:	51                   	push   ecx
c0019fda:	e9 e9 01 00 00       	jmp    c001a1c8 <Vm::x87Handler(regs*)+0xa12>
c0019fdf:	90                   	nop
c0019fe0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019fe4:	80 fa 01             	cmp    dl,0x1
c0019fe7:	75 09                	jne    c0019ff2 <Vm::x87Handler(regs*)+0x83c>
c0019fe9:	57                   	push   edi
c0019fea:	57                   	push   edi
c0019feb:	8b 06                	mov    eax,DWORD PTR [esi]
c0019fed:	e9 ee 01 00 00       	jmp    c001a1e0 <Vm::x87Handler(regs*)+0xa2a>
c0019ff2:	80 fa 04             	cmp    dl,0x4
c0019ff5:	75 13                	jne    c001a00a <Vm::x87Handler(regs*)+0x854>
c0019ff7:	31 d2                	xor    edx,edx
c0019ff9:	51                   	push   ecx
c0019ffa:	51                   	push   ecx
c0019ffb:	8b 06                	mov    eax,DWORD PTR [esi]
c0019ffd:	52                   	push   edx
c0019ffe:	50                   	push   eax
c0019fff:	e8 9e f4 ff ff       	call   c00194a2 <Vm::fpuLongToFloat(long long)>
c001a004:	e9 f3 00 00 00       	jmp    c001a0fc <Vm::x87Handler(regs*)+0x946>
c001a009:	90                   	nop
c001a00a:	31 c0                	xor    eax,eax
c001a00c:	80 fa 07             	cmp    dl,0x7
c001a00f:	0f 85 3f 02 00 00    	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c001a015:	83 ec 0c             	sub    esp,0xc
c001a018:	6a 00                	push   0x0
c001a01a:	e8 57 f6 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a01f:	89 c7                	mov    edi,eax
c001a021:	89 d5                	mov    ebp,edx
c001a023:	58                   	pop    eax
c001a024:	8b 06                	mov    eax,DWORD PTR [esi]
c001a026:	5a                   	pop    edx
c001a027:	31 d2                	xor    edx,edx
c001a029:	52                   	push   edx
c001a02a:	50                   	push   eax
c001a02b:	e8 72 f4 ff ff       	call   c00194a2 <Vm::fpuLongToFloat(long long)>
c001a030:	e9 69 01 00 00       	jmp    c001a19e <Vm::x87Handler(regs*)+0x9e8>
c001a035:	90                   	nop
c001a036:	84 d2                	test   dl,dl
c001a038:	75 0e                	jne    c001a048 <Vm::x87Handler(regs*)+0x892>
c001a03a:	31 d2                	xor    edx,edx
c001a03c:	55                   	push   ebp
c001a03d:	55                   	push   ebp
c001a03e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a040:	52                   	push   edx
c001a041:	50                   	push   eax
c001a042:	e9 df 01 00 00       	jmp    c001a226 <Vm::x87Handler(regs*)+0xa70>
c001a047:	90                   	nop
c001a048:	31 c0                	xor    eax,eax
c001a04a:	80 fa 02             	cmp    dl,0x2
c001a04d:	0f 85 01 02 00 00    	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c001a053:	83 ec 0c             	sub    esp,0xc
c001a056:	6a 00                	push   0x0
c001a058:	e8 19 f6 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a05d:	59                   	pop    ecx
c001a05e:	5f                   	pop    edi
c001a05f:	e9 4e f9 ff ff       	jmp    c00199b2 <Vm::x87Handler(regs*)+0x1fc>
c001a064:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a068:	84 d2                	test   dl,dl
c001a06a:	75 2a                	jne    c001a096 <Vm::x87Handler(regs*)+0x8e0>
c001a06c:	50                   	push   eax
c001a06d:	50                   	push   eax
c001a06e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a071:	ff 36                	push   DWORD PTR [esi]
c001a073:	e8 8c f3 ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c001a078:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a07f:	89 c6                	mov    esi,eax
c001a081:	89 d7                	mov    edi,edx
c001a083:	e8 ee f5 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a088:	57                   	push   edi
c001a089:	56                   	push   esi
c001a08a:	52                   	push   edx
c001a08b:	50                   	push   eax
c001a08c:	e8 5b f5 ff ff       	call   c00195ec <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a091:	e9 6e 01 00 00       	jmp    c001a204 <Vm::x87Handler(regs*)+0xa4e>
c001a096:	80 fa 01             	cmp    dl,0x1
c001a099:	75 11                	jne    c001a0ac <Vm::x87Handler(regs*)+0x8f6>
c001a09b:	50                   	push   eax
c001a09c:	50                   	push   eax
c001a09d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0a0:	ff 36                	push   DWORD PTR [esi]
c001a0a2:	e8 5d f3 ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c001a0a7:	e9 3e 01 00 00       	jmp    c001a1ea <Vm::x87Handler(regs*)+0xa34>
c001a0ac:	80 fa 02             	cmp    dl,0x2
c001a0af:	0f 85 3b f9 ff ff    	jne    c00199f0 <Vm::x87Handler(regs*)+0x23a>
c001a0b5:	55                   	push   ebp
c001a0b6:	55                   	push   ebp
c001a0b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0ba:	ff 36                	push   DWORD PTR [esi]
c001a0bc:	e8 43 f3 ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c001a0c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0c8:	89 c6                	mov    esi,eax
c001a0ca:	89 d7                	mov    edi,edx
c001a0cc:	e8 a5 f5 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a0d1:	57                   	push   edi
c001a0d2:	56                   	push   esi
c001a0d3:	52                   	push   edx
c001a0d4:	50                   	push   eax
c001a0d5:	e8 be f4 ff ff       	call   c0019598 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a0de:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a0e1:	90                   	nop
c001a0e2:	83 c4 20             	add    esp,0x20
c001a0e5:	e9 48 f7 ff ff       	jmp    c0019832 <Vm::x87Handler(regs*)+0x7c>
c001a0ea:	80 fa 04             	cmp    dl,0x4
c001a0ed:	75 2b                	jne    c001a11a <Vm::x87Handler(regs*)+0x964>
c001a0ef:	51                   	push   ecx
c001a0f0:	51                   	push   ecx
c001a0f1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0f4:	ff 36                	push   DWORD PTR [esi]
c001a0f6:	e8 09 f3 ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c001a0fb:	90                   	nop
c001a0fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a103:	89 c6                	mov    esi,eax
c001a105:	89 d7                	mov    edi,edx
c001a107:	e8 6a f5 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a10c:	57                   	push   edi
c001a10d:	56                   	push   esi
c001a10e:	52                   	push   edx
c001a10f:	50                   	push   eax
c001a110:	e8 01 f5 ff ff       	call   c0019616 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a115:	e9 ea 00 00 00       	jmp    c001a204 <Vm::x87Handler(regs*)+0xa4e>
c001a11a:	80 fa 05             	cmp    dl,0x5
c001a11d:	75 29                	jne    c001a148 <Vm::x87Handler(regs*)+0x992>
c001a11f:	83 ec 0c             	sub    esp,0xc
c001a122:	6a 00                	push   0x0
c001a124:	e8 4d f5 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a129:	89 c7                	mov    edi,eax
c001a12b:	89 d5                	mov    ebp,edx
c001a12d:	58                   	pop    eax
c001a12e:	5a                   	pop    edx
c001a12f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a132:	ff 36                	push   DWORD PTR [esi]
c001a134:	e8 cb f2 ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c001a139:	90                   	nop
c001a13a:	83 c4 10             	add    esp,0x10
c001a13d:	55                   	push   ebp
c001a13e:	57                   	push   edi
c001a13f:	52                   	push   edx
c001a140:	50                   	push   eax
c001a141:	e8 d0 f4 ff ff       	call   c0019616 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a146:	eb 62                	jmp    c001a1aa <Vm::x87Handler(regs*)+0x9f4>
c001a148:	80 fa 06             	cmp    dl,0x6
c001a14b:	75 2b                	jne    c001a178 <Vm::x87Handler(regs*)+0x9c2>
c001a14d:	51                   	push   ecx
c001a14e:	51                   	push   ecx
c001a14f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a152:	ff 36                	push   DWORD PTR [esi]
c001a154:	e8 ab f2 ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c001a159:	90                   	nop
c001a15a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a161:	89 c6                	mov    esi,eax
c001a163:	89 d7                	mov    edi,edx
c001a165:	e8 0c f5 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a16a:	57                   	push   edi
c001a16b:	56                   	push   esi
c001a16c:	52                   	push   edx
c001a16d:	50                   	push   eax
c001a16e:	e8 d1 f4 ff ff       	call   c0019644 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a173:	e9 8c 00 00 00       	jmp    c001a204 <Vm::x87Handler(regs*)+0xa4e>
c001a178:	31 c0                	xor    eax,eax
c001a17a:	80 fa 07             	cmp    dl,0x7
c001a17d:	0f 85 d1 00 00 00    	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c001a183:	83 ec 0c             	sub    esp,0xc
c001a186:	6a 00                	push   0x0
c001a188:	e8 e9 f4 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a18d:	89 c7                	mov    edi,eax
c001a18f:	89 d5                	mov    ebp,edx
c001a191:	58                   	pop    eax
c001a192:	5a                   	pop    edx
c001a193:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a196:	ff 36                	push   DWORD PTR [esi]
c001a198:	e8 67 f2 ff ff       	call   c0019404 <Vm::fpu64ToInternal(unsigned long long)>
c001a19d:	90                   	nop
c001a19e:	83 c4 10             	add    esp,0x10
c001a1a1:	55                   	push   ebp
c001a1a2:	57                   	push   edi
c001a1a3:	52                   	push   edx
c001a1a4:	50                   	push   eax
c001a1a5:	e8 9a f4 ff ff       	call   c0019644 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a1aa:	83 c4 0c             	add    esp,0xc
c001a1ad:	eb 59                	jmp    c001a208 <Vm::x87Handler(regs*)+0xa52>
c001a1af:	90                   	nop
c001a1b0:	31 c0                	xor    eax,eax
c001a1b2:	80 fa 02             	cmp    dl,0x2
c001a1b5:	0f 85 99 00 00 00    	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c001a1bb:	83 ec 0c             	sub    esp,0xc
c001a1be:	6a 00                	push   0x0
c001a1c0:	e8 b1 f4 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a1c5:	59                   	pop    ecx
c001a1c6:	5f                   	pop    edi
c001a1c7:	90                   	nop
c001a1c8:	52                   	push   edx
c001a1c9:	50                   	push   eax
c001a1ca:	e8 e7 f1 ff ff       	call   c00193b6 <Vm::fpuInternalTo64(unsigned long long)>
c001a1cf:	eb 75                	jmp    c001a246 <Vm::x87Handler(regs*)+0xa90>
c001a1d1:	90                   	nop
c001a1d2:	31 c0                	xor    eax,eax
c001a1d4:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a1d9:	75 79                	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c001a1db:	50                   	push   eax
c001a1dc:	50                   	push   eax
c001a1dd:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a1e0:	31 d2                	xor    edx,edx
c001a1e2:	52                   	push   edx
c001a1e3:	50                   	push   eax
c001a1e4:	e8 b9 f2 ff ff       	call   c00194a2 <Vm::fpuLongToFloat(long long)>
c001a1e9:	90                   	nop
c001a1ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a1f1:	89 c6                	mov    esi,eax
c001a1f3:	89 d7                	mov    edi,edx
c001a1f5:	e8 7c f4 ff ff       	call   c0019676 <Vm::fpuGetReg(int)>
c001a1fa:	57                   	push   edi
c001a1fb:	56                   	push   esi
c001a1fc:	52                   	push   edx
c001a1fd:	50                   	push   eax
c001a1fe:	e8 22 f4 ff ff       	call   c0019625 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a203:	90                   	nop
c001a204:	83 c4 1c             	add    esp,0x1c
c001a207:	90                   	nop
c001a208:	52                   	push   edx
c001a209:	50                   	push   eax
c001a20a:	6a 00                	push   0x0
c001a20c:	e8 a8 f4 ff ff       	call   c00196b9 <Vm::fpuSetReg(int, unsigned long long)>
c001a211:	e9 ce f7 ff ff       	jmp    c00199e4 <Vm::x87Handler(regs*)+0x22e>
c001a216:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a21a:	80 fa 05             	cmp    dl,0x5
c001a21d:	75 11                	jne    c001a230 <Vm::x87Handler(regs*)+0xa7a>
c001a21f:	55                   	push   ebp
c001a220:	55                   	push   ebp
c001a221:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a224:	ff 36                	push   DWORD PTR [esi]
c001a226:	e8 3f f2 ff ff       	call   c001946a <Vm::fpuULongToFloat(unsigned long long)>
c001a22b:	e9 aa f7 ff ff       	jmp    c00199da <Vm::x87Handler(regs*)+0x224>
c001a230:	31 c0                	xor    eax,eax
c001a232:	80 fa 07             	cmp    dl,0x7
c001a235:	75 1d                	jne    c001a254 <Vm::x87Handler(regs*)+0xa9e>
c001a237:	e8 27 f5 ff ff       	call   c0019763 <Vm::fpuPop()>
c001a23c:	51                   	push   ecx
c001a23d:	51                   	push   ecx
c001a23e:	52                   	push   edx
c001a23f:	50                   	push   eax
c001a240:	e8 c8 f1 ff ff       	call   c001940d <Vm::fpuFloatToLong(unsigned long long)>
c001a245:	90                   	nop
c001a246:	83 c4 10             	add    esp,0x10
c001a249:	89 06                	mov    DWORD PTR [esi],eax
c001a24b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a24e:	e9 d3 f7 ff ff       	jmp    c0019a26 <Vm::x87Handler(regs*)+0x270>
c001a253:	90                   	nop
c001a254:	83 c4 1c             	add    esp,0x1c
c001a257:	5b                   	pop    ebx
c001a258:	5e                   	pop    esi
c001a259:	5f                   	pop    edi
c001a25a:	5d                   	pop    ebp
c001a25b:	c3                   	ret    

c001a25c <__static_initialization_and_destruction_0(int, int)>:
c001a25c:	83 ec 0c             	sub    esp,0xc
c001a25f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a264:	75 1a                	jne    c001a280 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a266:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a26e:	75 10                	jne    c001a280 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a270:	83 ec 0c             	sub    esp,0xc
c001a273:	68 00 76 02 c0       	push   0xc0027600
c001a278:	e8 09 73 00 00       	call   c0021586 <Vm::_FPUState::_FPUState()>
c001a27d:	83 c4 10             	add    esp,0x10
c001a280:	90                   	nop
c001a281:	83 c4 0c             	add    esp,0xc
c001a284:	c3                   	ret    
c001a285:	90                   	nop

c001a286 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a286:	83 ec 0c             	sub    esp,0xc
c001a289:	83 ec 08             	sub    esp,0x8
c001a28c:	68 ff ff 00 00       	push   0xffff
c001a291:	6a 01                	push   0x1
c001a293:	e8 c4 ff ff ff       	call   c001a25c <__static_initialization_and_destruction_0(int, int)>
c001a298:	83 c4 10             	add    esp,0x10
c001a29b:	83 c4 0c             	add    esp,0xc
c001a29e:	c3                   	ret    
c001a29f:	90                   	nop

c001a2a0 <FAT::getName()>:
c001a2a0:	b8 60 47 02 c0       	mov    eax,0xc0024760
c001a2a5:	c3                   	ret    

c001a2a6 <FAT::tell(void*, unsigned long long*)>:
c001a2a6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a2ab:	75 07                	jne    c001a2b4 <FAT::tell(void*, unsigned long long*)+0xe>
c001a2ad:	b8 04 00 00 00       	mov    eax,0x4
c001a2b2:	c3                   	ret    
c001a2b3:	90                   	nop
c001a2b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a2b9:	75 07                	jne    c001a2c2 <FAT::tell(void*, unsigned long long*)+0x1c>
c001a2bb:	b8 04 00 00 00       	mov    eax,0x4
c001a2c0:	c3                   	ret    
c001a2c1:	90                   	nop
c001a2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2c6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a2c9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a2cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2d0:	89 01                	mov    DWORD PTR [ecx],eax
c001a2d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a2d5:	b8 00 00 00 00       	mov    eax,0x0
c001a2da:	c3                   	ret    
c001a2db:	90                   	nop

c001a2dc <FAT::stat(void*, unsigned long long*)>:
c001a2dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a2e1:	75 07                	jne    c001a2ea <FAT::stat(void*, unsigned long long*)+0xe>
c001a2e3:	b8 04 00 00 00       	mov    eax,0x4
c001a2e8:	c3                   	ret    
c001a2e9:	90                   	nop
c001a2ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a2ef:	75 07                	jne    c001a2f8 <FAT::stat(void*, unsigned long long*)+0x1c>
c001a2f1:	b8 04 00 00 00       	mov    eax,0x4
c001a2f6:	c3                   	ret    
c001a2f7:	90                   	nop
c001a2f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a2ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a302:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a306:	89 01                	mov    DWORD PTR [ecx],eax
c001a308:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a30b:	b8 00 00 00 00       	mov    eax,0x0
c001a310:	c3                   	ret    
c001a311:	90                   	nop

c001a312 <FAT::~FAT()>:
c001a312:	83 ec 0c             	sub    esp,0xc
c001a315:	ba ac 47 02 c0       	mov    edx,0xc00247ac
c001a31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a31e:	89 10                	mov    DWORD PTR [eax],edx
c001a320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a324:	83 ec 0c             	sub    esp,0xc
c001a327:	50                   	push   eax
c001a328:	e8 11 2a ff ff       	call   c000cd3e <Filesystem::~Filesystem()>
c001a32d:	83 c4 10             	add    esp,0x10
c001a330:	90                   	nop
c001a331:	83 c4 0c             	add    esp,0xc
c001a334:	c3                   	ret    
c001a335:	90                   	nop

c001a336 <FAT::~FAT()>:
c001a336:	83 ec 0c             	sub    esp,0xc
c001a339:	83 ec 0c             	sub    esp,0xc
c001a33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a340:	e8 cd ff ff ff       	call   c001a312 <FAT::~FAT()>
c001a345:	83 c4 10             	add    esp,0x10
c001a348:	83 ec 08             	sub    esp,0x8
c001a34b:	6a 08                	push   0x8
c001a34d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a351:	e8 cd 25 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c001a356:	83 c4 10             	add    esp,0x10
c001a359:	83 c4 0c             	add    esp,0xc
c001a35c:	c3                   	ret    
c001a35d:	90                   	nop

c001a35e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a35e:	83 ec 1c             	sub    esp,0x1c
c001a361:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a368:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a36d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a371:	8b 04 85 80 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8980]
c001a378:	83 f8 ff             	cmp    eax,0xffffffff
c001a37b:	75 35                	jne    c001a3b2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a37d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a381:	88 c2                	mov    dl,al
c001a383:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a388:	01 d0                	add    eax,edx
c001a38a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a38e:	8b 15 60 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027660
c001a394:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a398:	89 14 85 80 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8980],edx
c001a39f:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a3a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3a8:	89 14 85 00 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8900],edx
c001a3af:	eb 19                	jmp    c001a3ca <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a3b1:	90                   	nop
c001a3b2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a3b6:	88 c2                	mov    dl,al
c001a3b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a3bc:	8b 04 85 80 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8980]
c001a3c3:	01 d0                	add    eax,edx
c001a3c5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a3c9:	90                   	nop
c001a3ca:	83 ec 04             	sub    esp,0x4
c001a3cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a3d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a3d5:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a3d9:	50                   	push   eax
c001a3da:	e8 53 c8 fe ff       	call   c0006c32 <f_getlabel>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a3eb:	75 07                	jne    c001a3f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x96>
c001a3ed:	b8 00 00 00 00       	mov    eax,0x0
c001a3f2:	eb 06                	jmp    c001a3fa <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x9c>
c001a3f4:	b8 01 00 00 00       	mov    eax,0x1
c001a3f9:	90                   	nop
c001a3fa:	83 c4 1c             	add    esp,0x1c
c001a3fd:	c3                   	ret    

c001a3fe <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a3fe:	57                   	push   edi
c001a3ff:	83 ec 58             	sub    esp,0x58
c001a402:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a40a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a40e:	b9 0f 00 00 00       	mov    ecx,0xf
c001a413:	b8 00 00 00 00       	mov    eax,0x0
c001a418:	fc                   	cld    
c001a419:	89 d7                	mov    edi,edx
c001a41b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a41d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a421:	8b 04 85 80 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8980]
c001a428:	83 f8 ff             	cmp    eax,0xffffffff
c001a42b:	75 35                	jne    c001a462 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a42d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a431:	88 c2                	mov    dl,al
c001a433:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a438:	01 d0                	add    eax,edx
c001a43a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a43e:	8b 15 60 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027660
c001a444:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a448:	89 14 85 80 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8980],edx
c001a44f:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a454:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a458:	89 14 85 00 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8900],edx
c001a45f:	eb 19                	jmp    c001a47a <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a461:	90                   	nop
c001a462:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a466:	88 c2                	mov    dl,al
c001a468:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a46c:	8b 04 85 80 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8980]
c001a473:	01 d0                	add    eax,edx
c001a475:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a479:	90                   	nop
c001a47a:	83 ec 08             	sub    esp,0x8
c001a47d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a481:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a485:	50                   	push   eax
c001a486:	e8 f5 63 fe ff       	call   c0000880 <strcat>
c001a48b:	83 c4 10             	add    esp,0x10
c001a48e:	83 ec 0c             	sub    esp,0xc
c001a491:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a495:	50                   	push   eax
c001a496:	e8 85 c9 fe ff       	call   c0006e20 <f_setlabel>
c001a49b:	83 c4 10             	add    esp,0x10
c001a49e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a4a2:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a4a7:	75 07                	jne    c001a4b0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb2>
c001a4a9:	b8 00 00 00 00       	mov    eax,0x0
c001a4ae:	eb 06                	jmp    c001a4b6 <FAT::setlabel(LogicalDisk*, int, char*)+0xb8>
c001a4b0:	b8 01 00 00 00       	mov    eax,0x1
c001a4b5:	90                   	nop
c001a4b6:	83 c4 58             	add    esp,0x58
c001a4b9:	5f                   	pop    edi
c001a4ba:	c3                   	ret    
c001a4bb:	90                   	nop

c001a4bc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a4bc:	83 ec 2c             	sub    esp,0x2c
c001a4bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a4c7:	83 ec 08             	sub    esp,0x8
c001a4ca:	68 84 47 02 c0       	push   0xc0024784
c001a4cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a4d3:	e8 f4 62 fe ff       	call   c00007cc <strcmp>
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	85 c0                	test   eax,eax
c001a4dd:	0f 94 c0             	sete   al
c001a4e0:	84 c0                	test   al,al
c001a4e2:	74 0e                	je     c001a4f2 <FAT::format(LogicalDisk*, int, char const*, int)+0x36>
c001a4e4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a4ec:	e9 ad 00 00 00       	jmp    c001a59e <FAT::format(LogicalDisk*, int, char const*, int)+0xe2>
c001a4f1:	90                   	nop
c001a4f2:	83 ec 08             	sub    esp,0x8
c001a4f5:	68 76 47 02 c0       	push   0xc0024776
c001a4fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a4fe:	e8 c9 62 fe ff       	call   c00007cc <strcmp>
c001a503:	83 c4 10             	add    esp,0x10
c001a506:	85 c0                	test   eax,eax
c001a508:	0f 94 c0             	sete   al
c001a50b:	84 c0                	test   al,al
c001a50d:	74 0d                	je     c001a51c <FAT::format(LogicalDisk*, int, char const*, int)+0x60>
c001a50f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a517:	e9 82 00 00 00       	jmp    c001a59e <FAT::format(LogicalDisk*, int, char const*, int)+0xe2>
c001a51c:	83 ec 08             	sub    esp,0x8
c001a51f:	68 7c 47 02 c0       	push   0xc002477c
c001a524:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a528:	e8 9f 62 fe ff       	call   c00007cc <strcmp>
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	85 c0                	test   eax,eax
c001a532:	0f 94 c0             	sete   al
c001a535:	84 c0                	test   al,al
c001a537:	74 0b                	je     c001a544 <FAT::format(LogicalDisk*, int, char const*, int)+0x88>
c001a539:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a541:	eb 5b                	jmp    c001a59e <FAT::format(LogicalDisk*, int, char const*, int)+0xe2>
c001a543:	90                   	nop
c001a544:	83 ec 08             	sub    esp,0x8
c001a547:	68 ec 1c 02 c0       	push   0xc0021cec
c001a54c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a550:	e8 77 62 fe ff       	call   c00007cc <strcmp>
c001a555:	83 c4 10             	add    esp,0x10
c001a558:	85 c0                	test   eax,eax
c001a55a:	0f 94 c0             	sete   al
c001a55d:	84 c0                	test   al,al
c001a55f:	74 0b                	je     c001a56c <FAT::format(LogicalDisk*, int, char const*, int)+0xb0>
c001a561:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a569:	eb 33                	jmp    c001a59e <FAT::format(LogicalDisk*, int, char const*, int)+0xe2>
c001a56b:	90                   	nop
c001a56c:	83 ec 08             	sub    esp,0x8
c001a56f:	68 82 47 02 c0       	push   0xc0024782
c001a574:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a578:	e8 4f 62 fe ff       	call   c00007cc <strcmp>
c001a57d:	83 c4 10             	add    esp,0x10
c001a580:	85 c0                	test   eax,eax
c001a582:	0f 94 c0             	sete   al
c001a585:	84 c0                	test   al,al
c001a587:	74 0b                	je     c001a594 <FAT::format(LogicalDisk*, int, char const*, int)+0xd8>
c001a589:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a591:	eb 0b                	jmp    c001a59e <FAT::format(LogicalDisk*, int, char const*, int)+0xe2>
c001a593:	90                   	nop
c001a594:	b8 08 00 00 00       	mov    eax,0x8
c001a599:	e9 e2 00 00 00       	jmp    c001a680 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c4>
c001a59e:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a5a5:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a5aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5ae:	8b 04 85 80 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8980]
c001a5b5:	83 f8 ff             	cmp    eax,0xffffffff
c001a5b8:	75 34                	jne    c001a5ee <FAT::format(LogicalDisk*, int, char const*, int)+0x132>
c001a5ba:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a5be:	88 c2                	mov    dl,al
c001a5c0:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a5c5:	01 d0                	add    eax,edx
c001a5c7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a5cb:	8b 15 60 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027660
c001a5d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5d5:	89 14 85 80 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8980],edx
c001a5dc:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a5e1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a5e5:	89 14 85 00 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8900],edx
c001a5ec:	eb 18                	jmp    c001a606 <FAT::format(LogicalDisk*, int, char const*, int)+0x14a>
c001a5ee:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a5f2:	88 c2                	mov    dl,al
c001a5f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5f8:	8b 04 85 80 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8980]
c001a5ff:	01 d0                	add    eax,edx
c001a601:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a605:	90                   	nop
c001a606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a60a:	88 04 24             	mov    BYTE PTR [esp],al
c001a60d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a611:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a615:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a61d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a622:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a62a:	83 ec 0c             	sub    esp,0xc
c001a62d:	68 00 20 00 00       	push   0x2000
c001a632:	e8 6c f3 fe ff       	call   c00099a3 <malloc>
c001a637:	83 c4 10             	add    esp,0x10
c001a63a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a63e:	68 00 20 00 00       	push   0x2000
c001a643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a647:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a64b:	50                   	push   eax
c001a64c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a650:	50                   	push   eax
c001a651:	e8 4b ce fe ff       	call   c00074a1 <f_mkfs>
c001a656:	83 c4 10             	add    esp,0x10
c001a659:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a65d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a662:	75 08                	jne    c001a66c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b0>
c001a664:	b8 00 00 00 00       	mov    eax,0x0
c001a669:	eb 15                	jmp    c001a680 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c4>
c001a66b:	90                   	nop
c001a66c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a671:	75 07                	jne    c001a67a <FAT::format(LogicalDisk*, int, char const*, int)+0x1be>
c001a673:	b8 09 00 00 00       	mov    eax,0x9
c001a678:	eb 06                	jmp    c001a680 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c4>
c001a67a:	b8 01 00 00 00       	mov    eax,0x1
c001a67f:	90                   	nop
c001a680:	83 c4 2c             	add    esp,0x2c
c001a683:	c3                   	ret    

c001a684 <FAT::tryMount(LogicalDisk*, int)>:
c001a684:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a68a:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a68f:	83 f8 14             	cmp    eax,0x14
c001a692:	75 18                	jne    c001a6ac <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a694:	83 ec 0c             	sub    esp,0xc
c001a697:	68 88 47 02 c0       	push   0xc0024788
c001a69c:	e8 a2 9b ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001a6a1:	83 c4 10             	add    esp,0x10
c001a6a4:	b0 00                	mov    al,0x0
c001a6a6:	e9 df 01 00 00       	jmp    c001a88a <FAT::tryMount(LogicalDisk*, int)+0x206>
c001a6ab:	90                   	nop
c001a6ac:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a6b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a6b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a6bf:	3d 00 02 00 00       	cmp    eax,0x200
c001a6c4:	74 08                	je     c001a6ce <FAT::tryMount(LogicalDisk*, int)+0x4a>
c001a6c6:	b0 00                	mov    al,0x0
c001a6c8:	e9 bd 01 00 00       	jmp    c001a88a <FAT::tryMount(LogicalDisk*, int)+0x206>
c001a6cd:	90                   	nop
c001a6ce:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a6d6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a6dd:	8b 04 85 80 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8980]
c001a6e4:	83 f8 ff             	cmp    eax,0xffffffff
c001a6e7:	74 07                	je     c001a6f0 <FAT::tryMount(LogicalDisk*, int)+0x6c>
c001a6e9:	b0 01                	mov    al,0x1
c001a6eb:	e9 9a 01 00 00       	jmp    c001a88a <FAT::tryMount(LogicalDisk*, int)+0x206>
c001a6f0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a6fa:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a702:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a709:	88 c2                	mov    dl,al
c001a70b:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a710:	01 d0                	add    eax,edx
c001a712:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a719:	8b 15 60 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027660
c001a71f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a726:	89 14 85 80 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8980],edx
c001a72d:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a732:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a739:	89 14 85 00 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8900],edx
c001a740:	83 ec 0c             	sub    esp,0xc
c001a743:	68 54 02 00 00       	push   0x254
c001a748:	e8 56 f2 fe ff       	call   c00099a3 <malloc>
c001a74d:	83 c4 10             	add    esp,0x10
c001a750:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a757:	83 ec 04             	sub    esp,0x4
c001a75a:	6a 00                	push   0x0
c001a75c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a763:	50                   	push   eax
c001a764:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a76b:	e8 b9 a6 fe ff       	call   c0004e29 <f_mount>
c001a770:	83 c4 10             	add    esp,0x10
c001a773:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a77a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a782:	74 1a                	je     c001a79e <FAT::tryMount(LogicalDisk*, int)+0x11a>
c001a784:	83 ec 0c             	sub    esp,0xc
c001a787:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a78e:	e8 30 f2 fe ff       	call   c00099c3 <rfree>
c001a793:	83 c4 10             	add    esp,0x10
c001a796:	b0 00                	mov    al,0x0
c001a798:	e9 ed 00 00 00       	jmp    c001a88a <FAT::tryMount(LogicalDisk*, int)+0x206>
c001a79d:	90                   	nop
c001a79e:	83 ec 04             	sub    esp,0x4
c001a7a1:	68 00 01 00 00       	push   0x100
c001a7a6:	6a 00                	push   0x0
c001a7a8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a7af:	50                   	push   eax
c001a7b0:	e8 cf 5e fe ff       	call   c0000684 <memset>
c001a7b5:	83 c4 10             	add    esp,0x10
c001a7b8:	83 ec 08             	sub    esp,0x8
c001a7bb:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a7c2:	50                   	push   eax
c001a7c3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a7ca:	50                   	push   eax
c001a7cb:	e8 b0 60 fe ff       	call   c0000880 <strcat>
c001a7d0:	83 c4 10             	add    esp,0x10
c001a7d3:	83 ec 08             	sub    esp,0x8
c001a7d6:	68 96 47 02 c0       	push   0xc0024796
c001a7db:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a7e2:	50                   	push   eax
c001a7e3:	e8 98 60 fe ff       	call   c0000880 <strcat>
c001a7e8:	83 c4 10             	add    esp,0x10
c001a7eb:	83 ec 04             	sub    esp,0x4
c001a7ee:	6a 01                	push   0x1
c001a7f0:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a7f7:	50                   	push   eax
c001a7f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a7fc:	50                   	push   eax
c001a7fd:	e8 89 a6 fe ff       	call   c0004e8b <f_open>
c001a802:	83 c4 10             	add    esp,0x10
c001a805:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a80c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a813:	85 c0                	test   eax,eax
c001a815:	74 0b                	je     c001a822 <FAT::tryMount(LogicalDisk*, int)+0x19e>
c001a817:	78 2f                	js     c001a848 <FAT::tryMount(LogicalDisk*, int)+0x1c4>
c001a819:	83 e8 04             	sub    eax,0x4
c001a81c:	83 f8 01             	cmp    eax,0x1
c001a81f:	77 27                	ja     c001a848 <FAT::tryMount(LogicalDisk*, int)+0x1c4>
c001a821:	90                   	nop
c001a822:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a82a:	83 ec 0c             	sub    esp,0xc
c001a82d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a831:	50                   	push   eax
c001a832:	e8 a6 b1 fe ff       	call   c00059dd <f_close>
c001a837:	83 c4 10             	add    esp,0x10
c001a83a:	90                   	nop
c001a83b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a843:	74 3d                	je     c001a882 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a845:	eb 2f                	jmp    c001a876 <FAT::tryMount(LogicalDisk*, int)+0x1f2>
c001a847:	90                   	nop
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a852:	e8 6c f1 fe ff       	call   c00099c3 <rfree>
c001a857:	83 c4 10             	add    esp,0x10
c001a85a:	83 ec 04             	sub    esp,0x4
c001a85d:	6a 00                	push   0x0
c001a85f:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a866:	50                   	push   eax
c001a867:	6a 00                	push   0x0
c001a869:	e8 bb a5 fe ff       	call   c0004e29 <f_mount>
c001a86e:	83 c4 10             	add    esp,0x10
c001a871:	b0 00                	mov    al,0x0
c001a873:	eb 15                	jmp    c001a88a <FAT::tryMount(LogicalDisk*, int)+0x206>
c001a875:	90                   	nop
c001a876:	a1 60 76 02 c0       	mov    eax,ds:0xc0027660
c001a87b:	40                   	inc    eax
c001a87c:	a3 60 76 02 c0       	mov    ds:0xc0027660,eax
c001a881:	90                   	nop
c001a882:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a889:	90                   	nop
c001a88a:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a890:	c3                   	ret    
c001a891:	90                   	nop

c001a892 <FAT::allocateSwapfile(char const*, int)>:
c001a892:	55                   	push   ebp
c001a893:	57                   	push   edi
c001a894:	56                   	push   esi
c001a895:	53                   	push   ebx
c001a896:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a89c:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a8a7:	83 ec 0c             	sub    esp,0xc
c001a8aa:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a8b1:	e8 ed f0 fe ff       	call   c00099a3 <malloc>
c001a8b6:	83 c4 10             	add    esp,0x10
c001a8b9:	89 c7                	mov    edi,eax
c001a8bb:	a1 90 75 02 c0       	mov    eax,ds:0xc0027590
c001a8c0:	83 ec 04             	sub    esp,0x4
c001a8c3:	50                   	push   eax
c001a8c4:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a8cb:	57                   	push   edi
c001a8cc:	e8 9d 26 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c001a8d1:	83 c4 10             	add    esp,0x10
c001a8d4:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a8db:	83 ec 04             	sub    esp,0x4
c001a8de:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a8e2:	50                   	push   eax
c001a8e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8e7:	50                   	push   eax
c001a8e8:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a8ef:	e8 8a 29 ff ff       	call   c000d27e <File::stat(unsigned long long*, bool*)>
c001a8f4:	83 c4 10             	add    esp,0x10
c001a8f7:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a8fe:	c1 e0 14             	shl    eax,0x14
c001a901:	89 c7                	mov    edi,eax
c001a903:	89 c5                	mov    ebp,eax
c001a905:	c1 fd 1f             	sar    ebp,0x1f
c001a908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a90c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a910:	89 f9                	mov    ecx,edi
c001a912:	31 c1                	xor    ecx,eax
c001a914:	89 cb                	mov    ebx,ecx
c001a916:	89 e9                	mov    ecx,ebp
c001a918:	31 d1                	xor    ecx,edx
c001a91a:	89 ce                	mov    esi,ecx
c001a91c:	89 f0                	mov    eax,esi
c001a91e:	09 d8                	or     eax,ebx
c001a920:	0f 84 98 00 00 00    	je     c001a9be <FAT::allocateSwapfile(char const*, int)+0x12c>
c001a926:	83 ec 0c             	sub    esp,0xc
c001a929:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a930:	e8 15 28 ff ff       	call   c000d14a <File::unlink()>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	83 ec 08             	sub    esp,0x8
c001a93b:	6a 12                	push   0x12
c001a93d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a944:	e8 89 26 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c001a949:	83 c4 10             	add    esp,0x10
c001a94c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a953:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a959:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a960:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a967:	c1 e0 14             	shl    eax,0x14
c001a96a:	99                   	cdq    
c001a96b:	6a 01                	push   0x1
c001a96d:	52                   	push   edx
c001a96e:	50                   	push   eax
c001a96f:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001a976:	e8 12 c7 fe ff       	call   c000708d <f_expand>
c001a97b:	83 c4 10             	add    esp,0x10
c001a97e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a985:	8b 00                	mov    eax,DWORD PTR [eax]
c001a987:	83 c0 10             	add    eax,0x10
c001a98a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a993:	52                   	push   edx
c001a994:	8d 54 24 30          	lea    edx,[esp+0x30]
c001a998:	52                   	push   edx
c001a999:	6a 00                	push   0x0
c001a99b:	68 00 04 00 00       	push   0x400
c001a9a0:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a9a7:	ff d0                	call   eax
c001a9a9:	83 c4 20             	add    esp,0x20
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a9b6:	e8 75 26 ff ff       	call   c000d030 <File::close()>
c001a9bb:	83 c4 10             	add    esp,0x10
c001a9be:	83 ec 08             	sub    esp,0x8
c001a9c1:	6a 01                	push   0x1
c001a9c3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a9ca:	e8 03 26 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a9d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9db:	83 c0 0c             	add    eax,0xc
c001a9de:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9e0:	83 ec 0c             	sub    esp,0xc
c001a9e3:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9e7:	52                   	push   edx
c001a9e8:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001a9ec:	52                   	push   edx
c001a9ed:	6a 00                	push   0x0
c001a9ef:	6a 04                	push   0x4
c001a9f1:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a9f8:	ff d0                	call   eax
c001a9fa:	83 c4 20             	add    esp,0x20
c001a9fd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aa04:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aa0a:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aa11:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001aa18:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001aa1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001aa1e:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001aa25:	83 ec 0c             	sub    esp,0xc
c001aa28:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa2f:	e8 fc 25 ff ff       	call   c000d030 <File::close()>
c001aa34:	83 c4 10             	add    esp,0x10
c001aa37:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001aa3e:	ba 00 00 00 00       	mov    edx,0x0
c001aa43:	81 c4 3c 04 00 00    	add    esp,0x43c
c001aa49:	5b                   	pop    ebx
c001aa4a:	5e                   	pop    esi
c001aa4b:	5f                   	pop    edi
c001aa4c:	5d                   	pop    ebp
c001aa4d:	c3                   	ret    

c001aa4e <FAT::readDir(void*, unsigned long, void*, int*)>:
c001aa4e:	57                   	push   edi
c001aa4f:	56                   	push   esi
c001aa50:	53                   	push   ebx
c001aa51:	81 ec 50 02 00 00    	sub    esp,0x250
c001aa57:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001aa5f:	74 0b                	je     c001aa6c <FAT::readDir(void*, unsigned long, void*, int*)+0x1e>
c001aa61:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001aa69:	75 0b                	jne    c001aa76 <FAT::readDir(void*, unsigned long, void*, int*)+0x28>
c001aa6b:	90                   	nop
c001aa6c:	b8 04 00 00 00       	mov    eax,0x4
c001aa71:	e9 2c 01 00 00       	jmp    c001aba2 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c001aa76:	83 ec 08             	sub    esp,0x8
c001aa79:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001aa80:	50                   	push   eax
c001aa81:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001aa88:	e8 5a b5 fe ff       	call   c0005fe7 <f_readdir>
c001aa8d:	83 c4 10             	add    esp,0x10
c001aa90:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001aa97:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001aa9e:	83 ec 0c             	sub    esp,0xc
c001aaa1:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001aaa8:	83 c0 1a             	add    eax,0x1a
c001aaab:	50                   	push   eax
c001aaac:	e8 ef 5b fe ff       	call   c00006a0 <strlen>
c001aab1:	83 c4 10             	add    esp,0x10
c001aab4:	ba 00 00 00 00       	mov    edx,0x0
c001aab9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aabd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aac1:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001aac8:	0f b6 c0             	movzx  eax,al
c001aacb:	83 e0 10             	and    eax,0x10
c001aace:	74 08                	je     c001aad8 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c001aad0:	b8 02 00 00 00       	mov    eax,0x2
c001aad5:	eb 07                	jmp    c001aade <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001aad7:	90                   	nop
c001aad8:	b8 01 00 00 00       	mov    eax,0x1
c001aadd:	90                   	nop
c001aade:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aae2:	83 ec 08             	sub    esp,0x8
c001aae5:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001aaec:	83 c0 1a             	add    eax,0x1a
c001aaef:	50                   	push   eax
c001aaf0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaf4:	83 c0 10             	add    eax,0x10
c001aaf7:	50                   	push   eax
c001aaf8:	e8 43 5c fe ff       	call   c0000740 <strcpy>
c001aafd:	83 c4 10             	add    esp,0x10
c001ab00:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ab07:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ab0e:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ab12:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ab19:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ab20:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ab27:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ab2e:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ab35:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ab3c:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ab43:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ab4a:	89 c6                	mov    esi,eax
c001ab4c:	89 d7                	mov    edi,edx
c001ab4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab50:	89 c8                	mov    eax,ecx
c001ab52:	89 fa                	mov    edx,edi
c001ab54:	89 f3                	mov    ebx,esi
c001ab56:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ab5d:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ab64:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ab6b:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ab72:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ab78:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ab7f:	84 c0                	test   al,al
c001ab81:	75 07                	jne    c001ab8a <FAT::readDir(void*, unsigned long, void*, int*)+0x13c>
c001ab83:	b8 07 00 00 00       	mov    eax,0x7
c001ab88:	eb 18                	jmp    c001aba2 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c001ab8a:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ab91:	85 c0                	test   eax,eax
c001ab93:	75 07                	jne    c001ab9c <FAT::readDir(void*, unsigned long, void*, int*)+0x14e>
c001ab95:	b8 00 00 00 00       	mov    eax,0x0
c001ab9a:	eb 06                	jmp    c001aba2 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c001ab9c:	b8 01 00 00 00       	mov    eax,0x1
c001aba1:	90                   	nop
c001aba2:	81 c4 50 02 00 00    	add    esp,0x250
c001aba8:	5b                   	pop    ebx
c001aba9:	5e                   	pop    esi
c001abaa:	5f                   	pop    edi
c001abab:	c3                   	ret    

c001abac <FAT::read(void*, unsigned long, void*, int*)>:
c001abac:	83 ec 1c             	sub    esp,0x1c
c001abaf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001abb4:	74 08                	je     c001abbe <FAT::read(void*, unsigned long, void*, int*)+0x12>
c001abb6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001abbb:	75 09                	jne    c001abc6 <FAT::read(void*, unsigned long, void*, int*)+0x1a>
c001abbd:	90                   	nop
c001abbe:	b8 04 00 00 00       	mov    eax,0x4
c001abc3:	eb 3f                	jmp    c001ac04 <FAT::read(void*, unsigned long, void*, int*)+0x58>
c001abc5:	90                   	nop
c001abc6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001abca:	50                   	push   eax
c001abcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001abd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001abd7:	e8 eb a6 fe ff       	call   c00052c7 <f_read>
c001abdc:	83 c4 10             	add    esp,0x10
c001abdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abe3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abe7:	89 c2                	mov    edx,eax
c001abe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abed:	89 10                	mov    DWORD PTR [eax],edx
c001abef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abf3:	85 c0                	test   eax,eax
c001abf5:	75 07                	jne    c001abfe <FAT::read(void*, unsigned long, void*, int*)+0x52>
c001abf7:	b8 00 00 00 00       	mov    eax,0x0
c001abfc:	eb 06                	jmp    c001ac04 <FAT::read(void*, unsigned long, void*, int*)+0x58>
c001abfe:	b8 01 00 00 00       	mov    eax,0x1
c001ac03:	90                   	nop
c001ac04:	83 c4 1c             	add    esp,0x1c
c001ac07:	c3                   	ret    

c001ac08 <FAT::write(void*, unsigned long, void*, int*)>:
c001ac08:	83 ec 1c             	sub    esp,0x1c
c001ac0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ac10:	74 08                	je     c001ac1a <FAT::write(void*, unsigned long, void*, int*)+0x12>
c001ac12:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ac17:	75 09                	jne    c001ac22 <FAT::write(void*, unsigned long, void*, int*)+0x1a>
c001ac19:	90                   	nop
c001ac1a:	b8 04 00 00 00       	mov    eax,0x4
c001ac1f:	eb 3f                	jmp    c001ac60 <FAT::write(void*, unsigned long, void*, int*)+0x58>
c001ac21:	90                   	nop
c001ac22:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac26:	50                   	push   eax
c001ac27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ac2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ac33:	e8 0f a9 fe ff       	call   c0005547 <f_write>
c001ac38:	83 c4 10             	add    esp,0x10
c001ac3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac43:	89 c2                	mov    edx,eax
c001ac45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac49:	89 10                	mov    DWORD PTR [eax],edx
c001ac4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac4f:	85 c0                	test   eax,eax
c001ac51:	75 07                	jne    c001ac5a <FAT::write(void*, unsigned long, void*, int*)+0x52>
c001ac53:	b8 00 00 00 00       	mov    eax,0x0
c001ac58:	eb 06                	jmp    c001ac60 <FAT::write(void*, unsigned long, void*, int*)+0x58>
c001ac5a:	b8 01 00 00 00       	mov    eax,0x1
c001ac5f:	90                   	nop
c001ac60:	83 c4 1c             	add    esp,0x1c
c001ac63:	c3                   	ret    

c001ac64 <FAT::close(void*)>:
c001ac64:	83 ec 1c             	sub    esp,0x1c
c001ac67:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ac6c:	75 08                	jne    c001ac76 <FAT::close(void*)+0x12>
c001ac6e:	b8 04 00 00 00       	mov    eax,0x4
c001ac73:	eb 39                	jmp    c001acae <FAT::close(void*)+0x4a>
c001ac75:	90                   	nop
c001ac76:	83 ec 0c             	sub    esp,0xc
c001ac79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ac7d:	e8 5b ad fe ff       	call   c00059dd <f_close>
c001ac82:	83 c4 10             	add    esp,0x10
c001ac85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac89:	83 ec 0c             	sub    esp,0xc
c001ac8c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ac90:	e8 1e ed fe ff       	call   c00099b3 <free>
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac9c:	85 c0                	test   eax,eax
c001ac9e:	75 08                	jne    c001aca8 <FAT::close(void*)+0x44>
c001aca0:	b8 00 00 00 00       	mov    eax,0x0
c001aca5:	eb 07                	jmp    c001acae <FAT::close(void*)+0x4a>
c001aca7:	90                   	nop
c001aca8:	b8 01 00 00 00       	mov    eax,0x1
c001acad:	90                   	nop
c001acae:	83 c4 1c             	add    esp,0x1c
c001acb1:	c3                   	ret    

c001acb2 <FAT::closeDir(void*)>:
c001acb2:	83 ec 1c             	sub    esp,0x1c
c001acb5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001acba:	75 08                	jne    c001acc4 <FAT::closeDir(void*)+0x12>
c001acbc:	b8 04 00 00 00       	mov    eax,0x4
c001acc1:	eb 39                	jmp    c001acfc <FAT::closeDir(void*)+0x4a>
c001acc3:	90                   	nop
c001acc4:	83 ec 0c             	sub    esp,0xc
c001acc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001accb:	e8 f5 b2 fe ff       	call   c0005fc5 <f_closedir>
c001acd0:	83 c4 10             	add    esp,0x10
c001acd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acd7:	83 ec 0c             	sub    esp,0xc
c001acda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001acde:	e8 d0 ec fe ff       	call   c00099b3 <free>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acea:	85 c0                	test   eax,eax
c001acec:	75 08                	jne    c001acf6 <FAT::closeDir(void*)+0x44>
c001acee:	b8 00 00 00 00       	mov    eax,0x0
c001acf3:	eb 07                	jmp    c001acfc <FAT::closeDir(void*)+0x4a>
c001acf5:	90                   	nop
c001acf6:	b8 01 00 00 00       	mov    eax,0x1
c001acfb:	90                   	nop
c001acfc:	83 c4 1c             	add    esp,0x1c
c001acff:	c3                   	ret    

c001ad00 <FAT::seek(void*, unsigned long long)>:
c001ad00:	83 ec 2c             	sub    esp,0x2c
c001ad03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ad0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad13:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ad18:	75 08                	jne    c001ad22 <FAT::seek(void*, unsigned long long)+0x22>
c001ad1a:	b8 04 00 00 00       	mov    eax,0x4
c001ad1f:	eb 31                	jmp    c001ad52 <FAT::seek(void*, unsigned long long)+0x52>
c001ad21:	90                   	nop
c001ad22:	83 ec 04             	sub    esp,0x4
c001ad25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ad29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ad2d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ad31:	e8 d6 ac fe ff       	call   c0005a0c <f_lseek>
c001ad36:	83 c4 10             	add    esp,0x10
c001ad39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad41:	85 c0                	test   eax,eax
c001ad43:	75 07                	jne    c001ad4c <FAT::seek(void*, unsigned long long)+0x4c>
c001ad45:	b8 00 00 00 00       	mov    eax,0x0
c001ad4a:	eb 06                	jmp    c001ad52 <FAT::seek(void*, unsigned long long)+0x52>
c001ad4c:	b8 01 00 00 00       	mov    eax,0x1
c001ad51:	90                   	nop
c001ad52:	83 c4 2c             	add    esp,0x2c
c001ad55:	c3                   	ret    

c001ad56 <fatWrapperReadDisk>:
c001ad56:	83 ec 1c             	sub    esp,0x1c
c001ad59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad5d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ad61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad65:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ad75:	8b 04 85 60 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd99a0]
c001ad7c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad80:	83 ec 0c             	sub    esp,0xc
c001ad83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad87:	52                   	push   edx
c001ad88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad90:	50                   	push   eax
c001ad91:	e8 7a 53 ff ff       	call   c0010110 <LogicalDisk::read(unsigned long long, int, void*)>
c001ad96:	83 c4 20             	add    esp,0x20
c001ad99:	83 c4 1c             	add    esp,0x1c
c001ad9c:	c3                   	ret    
c001ad9d:	90                   	nop

c001ad9e <fatWrapperWriteDisk>:
c001ad9e:	83 ec 1c             	sub    esp,0x1c
c001ada1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ada5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ada9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adad:	89 04 24             	mov    DWORD PTR [esp],eax
c001adb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001adb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001adbd:	8b 04 85 60 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd99a0]
c001adc4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001adc8:	83 ec 0c             	sub    esp,0xc
c001adcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adcf:	52                   	push   edx
c001add0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001add4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001add8:	50                   	push   eax
c001add9:	e8 9e 53 ff ff       	call   c001017c <LogicalDisk::write(unsigned long long, int, void*)>
c001adde:	83 c4 20             	add    esp,0x20
c001ade1:	83 c4 1c             	add    esp,0x1c
c001ade4:	c3                   	ret    
c001ade5:	90                   	nop

c001ade6 <fatWrapperIoctl>:
c001ade6:	53                   	push   ebx
c001ade7:	83 ec 28             	sub    esp,0x28
c001adea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001adee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adf2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001adf6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001adfa:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001adff:	75 31                	jne    c001ae32 <fatWrapperIoctl+0x4c>
c001ae01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae09:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ae0e:	8b 04 85 60 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd99a0]
c001ae15:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ae1b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ae21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae25:	66 89 02             	mov    WORD PTR [edx],ax
c001ae28:	b8 00 00 00 00       	mov    eax,0x0
c001ae2d:	e9 b4 00 00 00       	jmp    c001aee6 <fatWrapperIoctl+0x100>
c001ae32:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001ae37:	75 6b                	jne    c001aea4 <fatWrapperIoctl+0xbe>
c001ae39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae41:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ae46:	8b 04 85 60 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd99a0]
c001ae4d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ae53:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ae59:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ae5f:	89 c8                	mov    eax,ecx
c001ae61:	89 da                	mov    edx,ebx
c001ae63:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ae67:	c1 e0 0a             	shl    eax,0xa
c001ae6a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ae6f:	8b 0c 8d 60 66 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd99a0]
c001ae76:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ae7c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ae82:	89 cb                	mov    ebx,ecx
c001ae84:	c1 fb 1f             	sar    ebx,0x1f
c001ae87:	53                   	push   ebx
c001ae88:	51                   	push   ecx
c001ae89:	52                   	push   edx
c001ae8a:	50                   	push   eax
c001ae8b:	e8 74 5d 00 00       	call   c0020c04 <__udivdi3>
c001ae90:	83 c4 10             	add    esp,0x10
c001ae93:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ae97:	89 01                	mov    DWORD PTR [ecx],eax
c001ae99:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ae9c:	b8 00 00 00 00       	mov    eax,0x0
c001aea1:	eb 43                	jmp    c001aee6 <fatWrapperIoctl+0x100>
c001aea3:	90                   	nop
c001aea4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001aea9:	75 07                	jne    c001aeb2 <fatWrapperIoctl+0xcc>
c001aeab:	b8 00 00 00 00       	mov    eax,0x0
c001aeb0:	eb 34                	jmp    c001aee6 <fatWrapperIoctl+0x100>
c001aeb2:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001aeb7:	75 19                	jne    c001aed2 <fatWrapperIoctl+0xec>
c001aeb9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aebd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aec1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aec5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001aecb:	b8 00 00 00 00       	mov    eax,0x0
c001aed0:	eb 14                	jmp    c001aee6 <fatWrapperIoctl+0x100>
c001aed2:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001aed7:	75 07                	jne    c001aee0 <fatWrapperIoctl+0xfa>
c001aed9:	b8 00 00 00 00       	mov    eax,0x0
c001aede:	eb 06                	jmp    c001aee6 <fatWrapperIoctl+0x100>
c001aee0:	b8 04 00 00 00       	mov    eax,0x4
c001aee5:	90                   	nop
c001aee6:	83 c4 28             	add    esp,0x28
c001aee9:	5b                   	pop    ebx
c001aeea:	c3                   	ret    
c001aeeb:	90                   	nop

c001aeec <FAT::FAT()>:
c001aeec:	83 ec 1c             	sub    esp,0x1c
c001aeef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aef3:	83 ec 0c             	sub    esp,0xc
c001aef6:	50                   	push   eax
c001aef7:	e8 1e 1e ff ff       	call   c000cd1a <Filesystem::Filesystem()>
c001aefc:	83 c4 10             	add    esp,0x10
c001aeff:	ba ac 47 02 c0       	mov    edx,0xc00247ac
c001af04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af08:	89 10                	mov    DWORD PTR [eax],edx
c001af0a:	c7 05 60 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027660,0x0
c001af14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af1c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001af21:	7f 15                	jg     c001af38 <FAT::FAT()+0x4c>
c001af23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af27:	c7 04 85 80 76 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8980],0xffffffff
c001af32:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001af36:	eb e4                	jmp    c001af1c <FAT::FAT()+0x30>
c001af38:	90                   	nop
c001af39:	83 c4 1c             	add    esp,0x1c
c001af3c:	c3                   	ret    
c001af3d:	90                   	nop

c001af3e <FAT::fixFilepath(char*)>:
c001af3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af42:	8a 00                	mov    al,BYTE PTR [eax]
c001af44:	3c 40                	cmp    al,0x40
c001af46:	7e 2c                	jle    c001af74 <FAT::fixFilepath(char*)+0x36>
c001af48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af4c:	8a 00                	mov    al,BYTE PTR [eax]
c001af4e:	83 e8 41             	sub    eax,0x41
c001af51:	88 c2                	mov    dl,al
c001af53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af57:	88 10                	mov    BYTE PTR [eax],dl
c001af59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af5d:	8a 00                	mov    al,BYTE PTR [eax]
c001af5f:	0f be c0             	movsx  eax,al
c001af62:	8b 04 85 80 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8980]
c001af69:	83 c0 30             	add    eax,0x30
c001af6c:	88 c2                	mov    dl,al
c001af6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af72:	88 10                	mov    BYTE PTR [eax],dl
c001af74:	90                   	nop
c001af75:	c3                   	ret    

c001af76 <FAT::open(char const*, void**, FileOpenMode)>:
c001af76:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af7c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af84:	74 0a                	je     c001af90 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001af86:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001af8e:	75 0a                	jne    c001af9a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001af90:	b8 04 00 00 00       	mov    eax,0x4
c001af95:	e9 fe 00 00 00       	jmp    c001b098 <FAT::open(char const*, void**, FileOpenMode)+0x122>
c001af9a:	83 ec 08             	sub    esp,0x8
c001af9d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001afa4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001afa8:	50                   	push   eax
c001afa9:	e8 92 57 fe ff       	call   c0000740 <strcpy>
c001afae:	83 c4 10             	add    esp,0x10
c001afb1:	83 ec 08             	sub    esp,0x8
c001afb4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001afb8:	50                   	push   eax
c001afb9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001afc0:	e8 79 ff ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001afd0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001afd7:	83 e0 01             	and    eax,0x1
c001afda:	74 08                	je     c001afe4 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001afdc:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001afe4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001afeb:	83 e0 04             	and    eax,0x4
c001afee:	74 10                	je     c001b000 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aff0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aff8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b000:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b007:	83 e0 02             	and    eax,0x2
c001b00a:	74 08                	je     c001b014 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001b00c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b014:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b01b:	83 e0 08             	and    eax,0x8
c001b01e:	74 08                	je     c001b028 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001b020:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b028:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b02f:	83 e0 10             	and    eax,0x10
c001b032:	74 08                	je     c001b03c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001b034:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b03c:	83 ec 0c             	sub    esp,0xc
c001b03f:	68 50 02 00 00       	push   0x250
c001b044:	e8 5a e9 fe ff       	call   c00099a3 <malloc>
c001b049:	83 c4 10             	add    esp,0x10
c001b04c:	89 c2                	mov    edx,eax
c001b04e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b055:	89 10                	mov    DWORD PTR [eax],edx
c001b057:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b05f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b066:	8b 00                	mov    eax,DWORD PTR [eax]
c001b068:	83 ec 04             	sub    esp,0x4
c001b06b:	52                   	push   edx
c001b06c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b070:	52                   	push   edx
c001b071:	50                   	push   eax
c001b072:	e8 14 9e fe ff       	call   c0004e8b <f_open>
c001b077:	83 c4 10             	add    esp,0x10
c001b07a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b081:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b089:	74 07                	je     c001b092 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001b08b:	b8 01 00 00 00       	mov    eax,0x1
c001b090:	eb 06                	jmp    c001b098 <FAT::open(char const*, void**, FileOpenMode)+0x122>
c001b092:	b8 00 00 00 00       	mov    eax,0x0
c001b097:	90                   	nop
c001b098:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b09e:	c3                   	ret    
c001b09f:	90                   	nop

c001b0a0 <FAT::openDir(char const*, void**)>:
c001b0a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b0a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b0ae:	74 0a                	je     c001b0ba <FAT::openDir(char const*, void**)+0x1a>
c001b0b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b0b8:	75 08                	jne    c001b0c2 <FAT::openDir(char const*, void**)+0x22>
c001b0ba:	b8 04 00 00 00       	mov    eax,0x4
c001b0bf:	eb 7f                	jmp    c001b140 <FAT::openDir(char const*, void**)+0xa0>
c001b0c1:	90                   	nop
c001b0c2:	83 ec 08             	sub    esp,0x8
c001b0c5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b0cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b0d0:	50                   	push   eax
c001b0d1:	e8 6a 56 fe ff       	call   c0000740 <strcpy>
c001b0d6:	83 c4 10             	add    esp,0x10
c001b0d9:	83 ec 08             	sub    esp,0x8
c001b0dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b0e0:	50                   	push   eax
c001b0e1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b0e8:	e8 51 fe ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001b0ed:	83 c4 10             	add    esp,0x10
c001b0f0:	83 ec 0c             	sub    esp,0xc
c001b0f3:	6a 4c                	push   0x4c
c001b0f5:	e8 a9 e8 fe ff       	call   c00099a3 <malloc>
c001b0fa:	83 c4 10             	add    esp,0x10
c001b0fd:	89 c2                	mov    edx,eax
c001b0ff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b106:	89 10                	mov    DWORD PTR [eax],edx
c001b108:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b10f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b111:	83 ec 08             	sub    esp,0x8
c001b114:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b118:	52                   	push   edx
c001b119:	50                   	push   eax
c001b11a:	e8 a4 ad fe ff       	call   c0005ec3 <f_opendir>
c001b11f:	83 c4 10             	add    esp,0x10
c001b122:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b129:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b131:	74 07                	je     c001b13a <FAT::openDir(char const*, void**)+0x9a>
c001b133:	b8 01 00 00 00       	mov    eax,0x1
c001b138:	eb 06                	jmp    c001b140 <FAT::openDir(char const*, void**)+0xa0>
c001b13a:	b8 00 00 00 00       	mov    eax,0x0
c001b13f:	90                   	nop
c001b140:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b146:	c3                   	ret    
c001b147:	90                   	nop

c001b148 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b148:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b14e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b156:	75 0a                	jne    c001b162 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001b158:	b8 04 00 00 00       	mov    eax,0x4
c001b15d:	e9 cc 00 00 00       	jmp    c001b22e <FAT::stat(char const*, unsigned long long*, bool*)+0xe6>
c001b162:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b16a:	75 0a                	jne    c001b176 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001b16c:	b8 04 00 00 00       	mov    eax,0x4
c001b171:	e9 b8 00 00 00       	jmp    c001b22e <FAT::stat(char const*, unsigned long long*, bool*)+0xe6>
c001b176:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b17e:	75 0a                	jne    c001b18a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001b180:	b8 04 00 00 00       	mov    eax,0x4
c001b185:	e9 a4 00 00 00       	jmp    c001b22e <FAT::stat(char const*, unsigned long long*, bool*)+0xe6>
c001b18a:	83 ec 08             	sub    esp,0x8
c001b18d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b194:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b19b:	50                   	push   eax
c001b19c:	e8 9f 55 fe ff       	call   c0000740 <strcpy>
c001b1a1:	83 c4 10             	add    esp,0x10
c001b1a4:	83 ec 08             	sub    esp,0x8
c001b1a7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b1ae:	50                   	push   eax
c001b1af:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b1b6:	e8 83 fd ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001b1bb:	83 c4 10             	add    esp,0x10
c001b1be:	83 ec 08             	sub    esp,0x8
c001b1c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b1c5:	50                   	push   eax
c001b1c6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b1cd:	50                   	push   eax
c001b1ce:	e8 af ae fe ff       	call   c0006082 <f_stat>
c001b1d3:	83 c4 10             	add    esp,0x10
c001b1d6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b1dd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b1e4:	85 c0                	test   eax,eax
c001b1e6:	74 08                	je     c001b1f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xa8>
c001b1e8:	83 f8 04             	cmp    eax,0x4
c001b1eb:	74 33                	je     c001b220 <FAT::stat(char const*, unsigned long long*, bool*)+0xd8>
c001b1ed:	eb 39                	jmp    c001b228 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b1ef:	90                   	nop
c001b1f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b1f4:	0f b6 c0             	movzx  eax,al
c001b1f7:	83 e0 10             	and    eax,0x10
c001b1fa:	0f 95 c2             	setne  dl
c001b1fd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b204:	88 10                	mov    BYTE PTR [eax],dl
c001b206:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b209:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b20d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b214:	89 01                	mov    DWORD PTR [ecx],eax
c001b216:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b219:	b8 00 00 00 00       	mov    eax,0x0
c001b21e:	eb 0e                	jmp    c001b22e <FAT::stat(char const*, unsigned long long*, bool*)+0xe6>
c001b220:	b8 02 00 00 00       	mov    eax,0x2
c001b225:	eb 07                	jmp    c001b22e <FAT::stat(char const*, unsigned long long*, bool*)+0xe6>
c001b227:	90                   	nop
c001b228:	b8 01 00 00 00       	mov    eax,0x1
c001b22d:	90                   	nop
c001b22e:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b234:	c3                   	ret    
c001b235:	90                   	nop

c001b236 <FAT::unlink(char const*)>:
c001b236:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b23c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b244:	75 08                	jne    c001b24e <FAT::unlink(char const*)+0x18>
c001b246:	b8 04 00 00 00       	mov    eax,0x4
c001b24b:	eb 5f                	jmp    c001b2ac <FAT::unlink(char const*)+0x76>
c001b24d:	90                   	nop
c001b24e:	83 ec 08             	sub    esp,0x8
c001b251:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b258:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b25c:	50                   	push   eax
c001b25d:	e8 de 54 fe ff       	call   c0000740 <strcpy>
c001b262:	83 c4 10             	add    esp,0x10
c001b265:	83 ec 08             	sub    esp,0x8
c001b268:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b26c:	50                   	push   eax
c001b26d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b274:	e8 c5 fc ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001b279:	83 c4 10             	add    esp,0x10
c001b27c:	83 ec 0c             	sub    esp,0xc
c001b27f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b283:	50                   	push   eax
c001b284:	e8 4b b1 fe ff       	call   c00063d4 <f_unlink>
c001b289:	83 c4 10             	add    esp,0x10
c001b28c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b293:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b29a:	85 c0                	test   eax,eax
c001b29c:	75 08                	jne    c001b2a6 <FAT::unlink(char const*)+0x70>
c001b29e:	b8 00 00 00 00       	mov    eax,0x0
c001b2a3:	eb 07                	jmp    c001b2ac <FAT::unlink(char const*)+0x76>
c001b2a5:	90                   	nop
c001b2a6:	b8 01 00 00 00       	mov    eax,0x1
c001b2ab:	90                   	nop
c001b2ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b2b2:	c3                   	ret    
c001b2b3:	90                   	nop

c001b2b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b2b4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b2ba:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b2c1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b2c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b2cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b2d0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b2d8:	75 0a                	jne    c001b2e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b2da:	b8 04 00 00 00       	mov    eax,0x4
c001b2df:	e9 1e 01 00 00       	jmp    c001b402 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14e>
c001b2e4:	83 ec 08             	sub    esp,0x8
c001b2e7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b2ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b2f2:	50                   	push   eax
c001b2f3:	e8 48 54 fe ff       	call   c0000740 <strcpy>
c001b2f8:	83 c4 10             	add    esp,0x10
c001b2fb:	83 ec 08             	sub    esp,0x8
c001b2fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b302:	50                   	push   eax
c001b303:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b30a:	e8 2f fc ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001b30f:	83 c4 10             	add    esp,0x10
c001b312:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b31a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b322:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b327:	83 e0 01             	and    eax,0x1
c001b32a:	74 08                	je     c001b334 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b32c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b334:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b339:	83 e0 02             	and    eax,0x2
c001b33c:	74 08                	je     c001b346 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001b33e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b346:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b34b:	83 e0 04             	and    eax,0x4
c001b34e:	74 08                	je     c001b358 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001b350:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b358:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b35d:	83 e0 08             	and    eax,0x8
c001b360:	74 08                	je     c001b36a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001b362:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b36a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b36f:	83 e0 01             	and    eax,0x1
c001b372:	74 08                	je     c001b37c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001b374:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b37c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b381:	83 e0 02             	and    eax,0x2
c001b384:	74 08                	je     c001b38e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001b386:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b38e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b393:	83 e0 04             	and    eax,0x4
c001b396:	74 08                	je     c001b3a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001b398:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b3a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b3a5:	83 e0 08             	and    eax,0x8
c001b3a8:	74 08                	je     c001b3b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001b3aa:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b3b2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b3b9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b3c0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b3c8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b3d0:	83 ec 04             	sub    esp,0x4
c001b3d3:	52                   	push   edx
c001b3d4:	50                   	push   eax
c001b3d5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b3d9:	50                   	push   eax
c001b3da:	e8 97 b6 fe ff       	call   c0006a76 <f_chmod>
c001b3df:	83 c4 10             	add    esp,0x10
c001b3e2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b3e9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b3f0:	85 c0                	test   eax,eax
c001b3f2:	75 08                	jne    c001b3fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x148>
c001b3f4:	b8 00 00 00 00       	mov    eax,0x0
c001b3f9:	eb 07                	jmp    c001b402 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14e>
c001b3fb:	90                   	nop
c001b3fc:	b8 01 00 00 00       	mov    eax,0x1
c001b401:	90                   	nop
c001b402:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b408:	c3                   	ret    
c001b409:	90                   	nop

c001b40a <FAT::rename(char const*, char const*)>:
c001b40a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b410:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b418:	74 0a                	je     c001b424 <FAT::rename(char const*, char const*)+0x1a>
c001b41a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b422:	75 0a                	jne    c001b42e <FAT::rename(char const*, char const*)+0x24>
c001b424:	b8 04 00 00 00       	mov    eax,0x4
c001b429:	e9 9a 00 00 00       	jmp    c001b4c8 <FAT::rename(char const*, char const*)+0xbe>
c001b42e:	83 ec 08             	sub    esp,0x8
c001b431:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b438:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b43f:	50                   	push   eax
c001b440:	e8 fb 52 fe ff       	call   c0000740 <strcpy>
c001b445:	83 c4 10             	add    esp,0x10
c001b448:	83 ec 08             	sub    esp,0x8
c001b44b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b452:	50                   	push   eax
c001b453:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b45a:	e8 df fa ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	83 ec 08             	sub    esp,0x8
c001b465:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b46c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b470:	50                   	push   eax
c001b471:	e8 ca 52 fe ff       	call   c0000740 <strcpy>
c001b476:	83 c4 10             	add    esp,0x10
c001b479:	83 ec 08             	sub    esp,0x8
c001b47c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b480:	50                   	push   eax
c001b481:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b488:	e8 b1 fa ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	83 ec 08             	sub    esp,0x8
c001b493:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b497:	50                   	push   eax
c001b498:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b49f:	50                   	push   eax
c001b4a0:	e8 de b2 fe ff       	call   c0006783 <f_rename>
c001b4a5:	83 c4 10             	add    esp,0x10
c001b4a8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b4af:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b4b6:	85 c0                	test   eax,eax
c001b4b8:	75 08                	jne    c001b4c2 <FAT::rename(char const*, char const*)+0xb8>
c001b4ba:	b8 00 00 00 00       	mov    eax,0x0
c001b4bf:	eb 07                	jmp    c001b4c8 <FAT::rename(char const*, char const*)+0xbe>
c001b4c1:	90                   	nop
c001b4c2:	b8 01 00 00 00       	mov    eax,0x1
c001b4c7:	90                   	nop
c001b4c8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b4ce:	c3                   	ret    
c001b4cf:	90                   	nop

c001b4d0 <FAT::mkdir(char const*)>:
c001b4d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4de:	75 08                	jne    c001b4e8 <FAT::mkdir(char const*)+0x18>
c001b4e0:	b8 04 00 00 00       	mov    eax,0x4
c001b4e5:	eb 5f                	jmp    c001b546 <FAT::mkdir(char const*)+0x76>
c001b4e7:	90                   	nop
c001b4e8:	83 ec 08             	sub    esp,0x8
c001b4eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b4f6:	50                   	push   eax
c001b4f7:	e8 44 52 fe ff       	call   c0000740 <strcpy>
c001b4fc:	83 c4 10             	add    esp,0x10
c001b4ff:	83 ec 08             	sub    esp,0x8
c001b502:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b506:	50                   	push   eax
c001b507:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b50e:	e8 2b fa ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	83 ec 0c             	sub    esp,0xc
c001b519:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b51d:	50                   	push   eax
c001b51e:	e8 34 b0 fe ff       	call   c0006557 <f_mkdir>
c001b523:	83 c4 10             	add    esp,0x10
c001b526:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b52d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b534:	85 c0                	test   eax,eax
c001b536:	75 08                	jne    c001b540 <FAT::mkdir(char const*)+0x70>
c001b538:	b8 00 00 00 00       	mov    eax,0x0
c001b53d:	eb 07                	jmp    c001b546 <FAT::mkdir(char const*)+0x76>
c001b53f:	90                   	nop
c001b540:	b8 01 00 00 00       	mov    eax,0x1
c001b545:	90                   	nop
c001b546:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b54c:	c3                   	ret    
c001b54d:	90                   	nop

c001b54e <FAT::exists(char const*)>:
c001b54e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b554:	83 ec 08             	sub    esp,0x8
c001b557:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b55e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b562:	50                   	push   eax
c001b563:	e8 d8 51 fe ff       	call   c0000740 <strcpy>
c001b568:	83 c4 10             	add    esp,0x10
c001b56b:	83 ec 08             	sub    esp,0x8
c001b56e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b572:	50                   	push   eax
c001b573:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b57a:	e8 bf f9 ff ff       	call   c001af3e <FAT::fixFilepath(char*)>
c001b57f:	83 c4 10             	add    esp,0x10
c001b582:	83 ec 08             	sub    esp,0x8
c001b585:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b58c:	50                   	push   eax
c001b58d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b591:	50                   	push   eax
c001b592:	e8 eb aa fe ff       	call   c0006082 <f_stat>
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b5a1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b5a8:	85 c0                	test   eax,eax
c001b5aa:	75 04                	jne    c001b5b0 <FAT::exists(char const*)+0x62>
c001b5ac:	b0 01                	mov    al,0x1
c001b5ae:	eb 02                	jmp    c001b5b2 <FAT::exists(char const*)+0x64>
c001b5b0:	b0 00                	mov    al,0x0
c001b5b2:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b5b8:	c3                   	ret    
c001b5b9:	90                   	nop

c001b5ba <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b5ba:	b8 08 00 00 00       	mov    eax,0x8
c001b5bf:	c3                   	ret    

c001b5c0 <ISO9660::seek(void*, unsigned long long)>:
c001b5c0:	53                   	push   ebx
c001b5c1:	b8 04 00 00 00       	mov    eax,0x4
c001b5c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b5d2:	85 d2                	test   edx,edx
c001b5d4:	74 17                	je     c001b5ed <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b5d6:	89 c8                	mov    eax,ecx
c001b5d8:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b5db:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b5de:	b8 01 00 00 00       	mov    eax,0x1
c001b5e3:	73 08                	jae    c001b5ed <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b5e5:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b5e8:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b5eb:	31 c0                	xor    eax,eax
c001b5ed:	5b                   	pop    ebx
c001b5ee:	c3                   	ret    
c001b5ef:	90                   	nop

c001b5f0 <ISO9660::tell(void*, unsigned long long*)>:
c001b5f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b5f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5f8:	85 d2                	test   edx,edx
c001b5fa:	74 12                	je     c001b60e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b5fc:	85 c0                	test   eax,eax
c001b5fe:	74 0e                	je     c001b60e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b600:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b603:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b606:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b609:	89 10                	mov    DWORD PTR [eax],edx
c001b60b:	31 c0                	xor    eax,eax
c001b60d:	c3                   	ret    
c001b60e:	b8 04 00 00 00       	mov    eax,0x4
c001b613:	c3                   	ret    

c001b614 <ISO9660::getName()>:
c001b614:	b8 0c 48 02 c0       	mov    eax,0xc002480c
c001b619:	c3                   	ret    

c001b61a <ISO9660::stat(void*, unsigned long long*)>:
c001b61a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b61e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b622:	85 d2                	test   edx,edx
c001b624:	74 12                	je     c001b638 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b626:	85 c0                	test   eax,eax
c001b628:	74 0e                	je     c001b638 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b62a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b62d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b630:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b633:	89 10                	mov    DWORD PTR [eax],edx
c001b635:	31 c0                	xor    eax,eax
c001b637:	c3                   	ret    
c001b638:	b8 04 00 00 00       	mov    eax,0x4
c001b63d:	c3                   	ret    

c001b63e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b63e:	b8 01 00 00 00       	mov    eax,0x1
c001b643:	c3                   	ret    

c001b644 <ISO9660::unlink(char const*)>:
c001b644:	b8 01 00 00 00       	mov    eax,0x1
c001b649:	c3                   	ret    

c001b64a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b64a:	b8 01 00 00 00       	mov    eax,0x1
c001b64f:	c3                   	ret    

c001b650 <ISO9660::rename(char const*, char const*)>:
c001b650:	b8 01 00 00 00       	mov    eax,0x1
c001b655:	c3                   	ret    

c001b656 <ISO9660::mkdir(char const*)>:
c001b656:	b8 01 00 00 00       	mov    eax,0x1
c001b65b:	c3                   	ret    

c001b65c <ISO9660::close(void*)>:
c001b65c:	83 ec 0c             	sub    esp,0xc
c001b65f:	b8 04 00 00 00       	mov    eax,0x4
c001b664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b668:	85 d2                	test   edx,edx
c001b66a:	74 0e                	je     c001b67a <ISO9660::close(void*)+0x1e>
c001b66c:	83 ec 0c             	sub    esp,0xc
c001b66f:	52                   	push   edx
c001b670:	e8 3e e3 fe ff       	call   c00099b3 <free>
c001b675:	83 c4 10             	add    esp,0x10
c001b678:	31 c0                	xor    eax,eax
c001b67a:	83 c4 0c             	add    esp,0xc
c001b67d:	c3                   	ret    

c001b67e <ISO9660::closeDir(void*)>:
c001b67e:	83 ec 0c             	sub    esp,0xc
c001b681:	b8 04 00 00 00       	mov    eax,0x4
c001b686:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b68a:	85 d2                	test   edx,edx
c001b68c:	74 0e                	je     c001b69c <ISO9660::closeDir(void*)+0x1e>
c001b68e:	83 ec 0c             	sub    esp,0xc
c001b691:	52                   	push   edx
c001b692:	e8 1c e3 fe ff       	call   c00099b3 <free>
c001b697:	83 c4 10             	add    esp,0x10
c001b69a:	31 c0                	xor    eax,eax
c001b69c:	83 c4 0c             	add    esp,0xc
c001b69f:	c3                   	ret    

c001b6a0 <ISO9660::~ISO9660()>:
c001b6a0:	83 ec 0c             	sub    esp,0xc
c001b6a3:	ba 30 48 02 c0       	mov    edx,0xc0024830
c001b6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ac:	89 10                	mov    DWORD PTR [eax],edx
c001b6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b2:	83 ec 0c             	sub    esp,0xc
c001b6b5:	50                   	push   eax
c001b6b6:	e8 83 16 ff ff       	call   c000cd3e <Filesystem::~Filesystem()>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	90                   	nop
c001b6bf:	83 c4 0c             	add    esp,0xc
c001b6c2:	c3                   	ret    
c001b6c3:	90                   	nop

c001b6c4 <ISO9660::~ISO9660()>:
c001b6c4:	83 ec 0c             	sub    esp,0xc
c001b6c7:	83 ec 0c             	sub    esp,0xc
c001b6ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6ce:	e8 cd ff ff ff       	call   c001b6a0 <ISO9660::~ISO9660()>
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	83 ec 08             	sub    esp,0x8
c001b6d9:	6a 08                	push   0x8
c001b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6df:	e8 3f 12 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c001b6e4:	83 c4 10             	add    esp,0x10
c001b6e7:	83 c4 0c             	add    esp,0xc
c001b6ea:	c3                   	ret    

c001b6eb <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b6eb:	55                   	push   ebp
c001b6ec:	31 c9                	xor    ecx,ecx
c001b6ee:	57                   	push   edi
c001b6ef:	56                   	push   esi
c001b6f0:	53                   	push   ebx
c001b6f1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b6f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b6f9:	89 eb                	mov    ebx,ebp
c001b6fb:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b6ff:	39 ce                	cmp    esi,ecx
c001b701:	7e 17                	jle    c001b71a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b703:	31 d2                	xor    edx,edx
c001b705:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b709:	7d 13                	jge    c001b71e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b70b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b70f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b712:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b715:	75 0d                	jne    c001b724 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b717:	42                   	inc    edx
c001b718:	eb eb                	jmp    c001b705 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b71a:	31 c0                	xor    eax,eax
c001b71c:	eb 0a                	jmp    c001b728 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b71e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b722:	eb 04                	jmp    c001b728 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b724:	41                   	inc    ecx
c001b725:	43                   	inc    ebx
c001b726:	eb d7                	jmp    c001b6ff <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b728:	5b                   	pop    ebx
c001b729:	5e                   	pop    esi
c001b72a:	5f                   	pop    edi
c001b72b:	5d                   	pop    ebp
c001b72c:	c3                   	ret    

c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b72d:	57                   	push   edi
c001b72e:	56                   	push   esi
c001b72f:	53                   	push   ebx
c001b730:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b734:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b738:	39 0d 60 77 02 c0    	cmp    DWORD PTR ds:0xc0027760,ecx
c001b73e:	75 08                	jne    c001b748 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001b740:	38 05 94 5a 02 c0    	cmp    BYTE PTR ds:0xc0025a94,al
c001b746:	74 2b                	je     c001b773 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001b748:	83 ec 0c             	sub    esp,0xc
c001b74b:	a2 94 5a 02 c0       	mov    ds:0xc0025a94,al
c001b750:	68 80 77 02 c0       	push   0xc0027780
c001b755:	0f be c0             	movsx  eax,al
c001b758:	6a 01                	push   0x1
c001b75a:	89 0d 60 77 02 c0    	mov    DWORD PTR ds:0xc0027760,ecx
c001b760:	31 db                	xor    ebx,ebx
c001b762:	53                   	push   ebx
c001b763:	51                   	push   ecx
c001b764:	ff 34 85 5c 65 02 c0 	push   DWORD PTR [eax*4-0x3ffd9aa4]
c001b76b:	e8 a0 49 ff ff       	call   c0010110 <LogicalDisk::read(unsigned long long, int, void*)>
c001b770:	83 c4 20             	add    esp,0x20
c001b773:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b777:	be 80 77 02 c0       	mov    esi,0xc0027780
c001b77c:	b9 00 08 00 00       	mov    ecx,0x800
c001b781:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b783:	5b                   	pop    ebx
c001b784:	5e                   	pop    esi
c001b785:	5f                   	pop    edi
c001b786:	c3                   	ret    
c001b787:	90                   	nop

c001b788 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b788:	81 ec 10 08 00 00    	sub    esp,0x810
c001b78e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b795:	83 c0 41             	add    eax,0x41
c001b798:	0f be c0             	movsx  eax,al
c001b79b:	50                   	push   eax
c001b79c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b7a0:	50                   	push   eax
c001b7a1:	6a 10                	push   0x10
c001b7a3:	e8 85 ff ff ff       	call   c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b7a8:	83 c4 10             	add    esp,0x10
c001b7ab:	31 c0                	xor    eax,eax
c001b7ad:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b7b2:	75 1d                	jne    c001b7d1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b7b4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b7b9:	75 16                	jne    c001b7d1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b7bb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b7c0:	75 0f                	jne    c001b7d1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b7c2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b7c7:	75 08                	jne    c001b7d1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b7c9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b7ce:	0f 94 c0             	sete   al
c001b7d1:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b7d7:	c3                   	ret    

c001b7d8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b7d8:	55                   	push   ebp
c001b7d9:	57                   	push   edi
c001b7da:	56                   	push   esi
c001b7db:	53                   	push   ebx
c001b7dc:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001b7e2:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001b7e9:	85 ed                	test   ebp,ebp
c001b7eb:	0f 84 da 01 00 00    	je     c001b9cb <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b7f1:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b7f9:	0f 84 cc 01 00 00    	je     c001b9cb <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b7ff:	b8 01 00 00 00       	mov    eax,0x1
c001b804:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001b808:	0f 85 c2 01 00 00    	jne    c001b9d0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001b80e:	31 d2                	xor    edx,edx
c001b810:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b817:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001b81a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b81d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b820:	89 04 24             	mov    DWORD PTR [esp],eax
c001b823:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b827:	01 c8                	add    eax,ecx
c001b829:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001b82c:	11 da                	adc    edx,ebx
c001b82e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b832:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b836:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b83a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b83e:	19 d7                	sbb    edi,edx
c001b840:	72 11                	jb     c001b853 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001b842:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001b845:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001b849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b84d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b851:	eb 0c                	jmp    c001b85f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001b853:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001b857:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b85b:	29 ce                	sub    esi,ecx
c001b85d:	19 df                	sbb    edi,ebx
c001b85f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b862:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001b865:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b869:	c1 e0 0b             	shl    eax,0xb
c001b86c:	01 c8                	add    eax,ecx
c001b86e:	11 da                	adc    edx,ebx
c001b870:	89 04 24             	mov    DWORD PTR [esp],eax
c001b873:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b877:	51                   	push   ecx
c001b878:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001b87c:	50                   	push   eax
c001b87d:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001b881:	53                   	push   ebx
c001b882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b88a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b88e:	50                   	push   eax
c001b88f:	e8 99 fe ff ff       	call   c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b894:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001b897:	b8 00 08 00 00       	mov    eax,0x800
c001b89c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b8a2:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001b8a6:	29 d0                	sub    eax,edx
c001b8a8:	83 c4 10             	add    esp,0x10
c001b8ab:	89 f9                	mov    ecx,edi
c001b8ad:	39 c6                	cmp    esi,eax
c001b8af:	83 d9 00             	sbb    ecx,0x0
c001b8b2:	7d 1b                	jge    c001b8cf <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001b8b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b8b9:	75 12                	jne    c001b8cd <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001b8bb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b8c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8c8:	e9 fa 00 00 00       	jmp    c001b9c7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001b8cd:	89 f0                	mov    eax,esi
c001b8cf:	01 d3                	add    ebx,edx
c001b8d1:	31 d2                	xor    edx,edx
c001b8d3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001b8d7:	39 c2                	cmp    edx,eax
c001b8d9:	7d 14                	jge    c001b8ef <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001b8db:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001b8e2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b8e6:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001b8e9:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001b8ec:	42                   	inc    edx
c001b8ed:	eb e8                	jmp    c001b8d7 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001b8ef:	89 c2                	mov    edx,eax
c001b8f1:	85 c0                	test   eax,eax
c001b8f3:	79 02                	jns    c001b8f7 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001b8f5:	31 d2                	xor    edx,edx
c001b8f7:	01 c2                	add    edx,eax
c001b8f9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001b8fc:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001b903:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b907:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b90b:	99                   	cdq    
c001b90c:	01 c1                	add    ecx,eax
c001b90e:	11 d3                	adc    ebx,edx
c001b910:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b914:	29 c6                	sub    esi,eax
c001b916:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b91a:	19 d7                	sbb    edi,edx
c001b91c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b91f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001b923:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b928:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b92b:	b8 00 00 00 00       	mov    eax,0x0
c001b930:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b934:	7d 43                	jge    c001b979 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001b936:	52                   	push   edx
c001b937:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001b93b:	50                   	push   eax
c001b93c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b944:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b948:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b94c:	50                   	push   eax
c001b94d:	e8 db fd ff ff       	call   c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b952:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b95a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001b95f:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001b967:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b96f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b974:	83 c4 10             	add    esp,0x10
c001b977:	eb aa                	jmp    c001b923 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001b979:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b97d:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b980:	74 2a                	je     c001b9ac <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001b982:	50                   	push   eax
c001b983:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001b987:	50                   	push   eax
c001b988:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b98c:	56                   	push   esi
c001b98d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b991:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b995:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001b999:	51                   	push   ecx
c001b99a:	e8 8e fd ff ff       	call   c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b99f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b9a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b9a9:	83 c4 10             	add    esp,0x10
c001b9ac:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b9b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9bb:	89 18                	mov    DWORD PTR [eax],ebx
c001b9bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9c1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b9c4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001b9c7:	31 c0                	xor    eax,eax
c001b9c9:	eb 05                	jmp    c001b9d0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001b9cb:	b8 04 00 00 00       	mov    eax,0x4
c001b9d0:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b9d6:	5b                   	pop    ebx
c001b9d7:	5e                   	pop    esi
c001b9d8:	5f                   	pop    edi
c001b9d9:	5d                   	pop    ebp
c001b9da:	c3                   	ret    
c001b9db:	90                   	nop

c001b9dc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b9dc:	55                   	push   ebp
c001b9dd:	57                   	push   edi
c001b9de:	56                   	push   esi
c001b9df:	53                   	push   ebx
c001b9e0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b9e6:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001b9ed:	85 ed                	test   ebp,ebp
c001b9ef:	0f 84 51 02 00 00    	je     c001bc46 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001b9f5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b9fd:	0f 84 43 02 00 00    	je     c001bc46 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001ba03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ba06:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001ba09:	75 0a                	jne    c001ba15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001ba0b:	b8 07 00 00 00       	mov    eax,0x7
c001ba10:	e9 36 02 00 00       	jmp    c001bc4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ba15:	50                   	push   eax
c001ba16:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ba1a:	50                   	push   eax
c001ba1b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ba22:	53                   	push   ebx
c001ba23:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ba26:	c1 e0 0b             	shl    eax,0xb
c001ba29:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001ba2c:	c1 e8 0b             	shr    eax,0xb
c001ba2f:	50                   	push   eax
c001ba30:	e8 f8 fc ff ff       	call   c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba35:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ba38:	83 c4 10             	add    esp,0x10
c001ba3b:	89 c1                	mov    ecx,eax
c001ba3d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001ba40:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ba46:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001ba49:	84 db                	test   bl,bl
c001ba4b:	0f 85 8b 00 00 00    	jne    c001badc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001ba51:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001ba57:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ba5a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001ba60:	29 c6                	sub    esi,eax
c001ba62:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001ba66:	89 f3                	mov    ebx,esi
c001ba68:	89 f1                	mov    ecx,esi
c001ba6a:	c1 fb 1f             	sar    ebx,0x1f
c001ba6d:	01 f0                	add    eax,esi
c001ba6f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ba72:	11 da                	adc    edx,ebx
c001ba74:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba7b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ba7e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ba81:	89 d8                	mov    eax,ebx
c001ba83:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001ba87:	ba 00 00 00 00       	mov    edx,0x0
c001ba8c:	19 f8                	sbb    eax,edi
c001ba8e:	b8 00 00 00 00       	mov    eax,0x0
c001ba93:	73 08                	jae    c001ba9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001ba95:	89 f0                	mov    eax,esi
c001ba97:	89 fa                	mov    edx,edi
c001ba99:	29 c8                	sub    eax,ecx
c001ba9b:	19 da                	sbb    edx,ebx
c001ba9d:	89 d7                	mov    edi,edx
c001ba9f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001baa2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001baa5:	09 c7                	or     edi,eax
c001baa7:	0f 84 5e ff ff ff    	je     c001ba0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001baad:	57                   	push   edi
c001baae:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bab2:	50                   	push   eax
c001bab3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001baba:	53                   	push   ebx
c001babb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001babe:	c1 e0 0b             	shl    eax,0xb
c001bac1:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bac5:	c1 e8 0b             	shr    eax,0xb
c001bac8:	50                   	push   eax
c001bac9:	e8 5f fc ff ff       	call   c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bace:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bad1:	83 c4 10             	add    esp,0x10
c001bad4:	25 ff 07 00 00       	and    eax,0x7ff
c001bad9:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001badc:	31 ff                	xor    edi,edi
c001bade:	56                   	push   esi
c001badf:	6a 28                	push   0x28
c001bae1:	6a 00                	push   0x0
c001bae3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bae7:	50                   	push   eax
c001bae8:	e8 97 4b fe ff       	call   c0000684 <memset>
c001baed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001baf0:	25 ff 07 00 00       	and    eax,0x7ff
c001baf5:	89 c6                	mov    esi,eax
c001baf7:	83 c6 21             	add    esi,0x21
c001bafa:	83 d7 00             	adc    edi,0x0
c001bafd:	83 c4 10             	add    esp,0x10
c001bb00:	31 c9                	xor    ecx,ecx
c001bb02:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bb09:	83 f9 28             	cmp    ecx,0x28
c001bb0c:	88 04 24             	mov    BYTE PTR [esp],al
c001bb0f:	0f 94 c2             	sete   dl
c001bb12:	88 d0                	mov    al,dl
c001bb14:	ba ff 07 00 00       	mov    edx,0x7ff
c001bb19:	39 f2                	cmp    edx,esi
c001bb1b:	ba 00 00 00 00       	mov    edx,0x0
c001bb20:	19 fa                	sbb    edx,edi
c001bb22:	0f 92 c2             	setb   dl
c001bb25:	09 c2                	or     edx,eax
c001bb27:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bb2b:	0f 94 c0             	sete   al
c001bb2e:	08 d0                	or     al,dl
c001bb30:	75 16                	jne    c001bb48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bb32:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bb36:	74 10                	je     c001bb48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bb38:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bb3b:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bb3f:	41                   	inc    ecx
c001bb40:	83 c6 01             	add    esi,0x1
c001bb43:	83 d7 00             	adc    edi,0x0
c001bb46:	eb ba                	jmp    c001bb02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bb48:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001bb4f:	83 ec 0c             	sub    esp,0xc
c001bb52:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bb56:	56                   	push   esi
c001bb57:	e8 44 4b fe ff       	call   c00006a0 <strlen>
c001bb5c:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bb63:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bb67:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001bb6f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bb72:	5a                   	pop    edx
c001bb73:	25 ff 07 00 00       	and    eax,0x7ff
c001bb78:	59                   	pop    ecx
c001bb79:	01 f8                	add    eax,edi
c001bb7b:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001bb81:	83 e0 02             	and    eax,0x2
c001bb84:	3c 01                	cmp    al,0x1
c001bb86:	19 c0                	sbb    eax,eax
c001bb88:	83 c0 02             	add    eax,0x2
c001bb8b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bb8f:	56                   	push   esi
c001bb90:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bb94:	50                   	push   eax
c001bb95:	e8 a6 4b fe ff       	call   c0000740 <strcpy>
c001bb9a:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bb9e:	83 c4 10             	add    esp,0x10
c001bba1:	84 c0                	test   al,al
c001bba3:	75 21                	jne    c001bbc6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001bba5:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bbad:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bbb5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bbbd:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bbc4:	eb 28                	jmp    c001bbee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bbc6:	fe c8                	dec    al
c001bbc8:	75 24                	jne    c001bbee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bbca:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bbd2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bbda:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bbe2:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bbe9:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bbee:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bbf2:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bbf9:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bc00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc02:	0f b6 f3             	movzx  esi,bl
c001bc05:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bc0c:	31 db                	xor    ebx,ebx
c001bc0e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bc14:	89 df                	mov    edi,ebx
c001bc16:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bc19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc1c:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bc1f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bc22:	39 c6                	cmp    esi,eax
c001bc24:	19 d7                	sbb    edi,edx
c001bc26:	72 10                	jb     c001bc38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bc28:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bc2f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bc36:	eb 0a                	jmp    c001bc42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bc38:	29 f0                	sub    eax,esi
c001bc3a:	19 da                	sbb    edx,ebx
c001bc3c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bc3f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bc42:	31 c0                	xor    eax,eax
c001bc44:	eb 05                	jmp    c001bc4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bc46:	b8 04 00 00 00       	mov    eax,0x4
c001bc4b:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bc51:	5b                   	pop    ebx
c001bc52:	5e                   	pop    esi
c001bc53:	5f                   	pop    edi
c001bc54:	5d                   	pop    ebp
c001bc55:	c3                   	ret    

c001bc56 <readRoot(unsigned int*, unsigned int*, char)>:
c001bc56:	57                   	push   edi
c001bc57:	56                   	push   esi
c001bc58:	81 ec 38 08 00 00    	sub    esp,0x838
c001bc5e:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bc66:	50                   	push   eax
c001bc67:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bc6b:	50                   	push   eax
c001bc6c:	6a 10                	push   0x10
c001bc6e:	e8 ba fa ff ff       	call   c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc73:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bc7a:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bc7e:	b9 22 00 00 00       	mov    ecx,0x22
c001bc83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc85:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc90:	89 10                	mov    DWORD PTR [eax],edx
c001bc92:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bc99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bc9d:	89 10                	mov    DWORD PTR [eax],edx
c001bc9f:	81 c4 44 08 00 00    	add    esp,0x844
c001bca5:	b0 01                	mov    al,0x1
c001bca7:	5e                   	pop    esi
c001bca8:	5f                   	pop    edi
c001bca9:	c3                   	ret    

c001bcaa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bcaa:	55                   	push   ebp
c001bcab:	57                   	push   edi
c001bcac:	56                   	push   esi
c001bcad:	53                   	push   ebx
c001bcae:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bcb4:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bcbb:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bcc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bcc6:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bcca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bcce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bcd2:	75 03                	jne    c001bcd7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bcd4:	83 c3 02             	add    ebx,0x2
c001bcd7:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bcda:	75 03                	jne    c001bcdf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bcdc:	43                   	inc    ebx
c001bcdd:	eb f8                	jmp    c001bcd7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bcdf:	51                   	push   ecx
c001bce0:	68 00 01 00 00       	push   0x100
c001bce5:	6a 00                	push   0x0
c001bce7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bceb:	50                   	push   eax
c001bcec:	e8 93 49 fe ff       	call   c0000684 <memset>
c001bcf1:	83 c4 10             	add    esp,0x10
c001bcf4:	31 d2                	xor    edx,edx
c001bcf6:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bcf9:	84 c0                	test   al,al
c001bcfb:	74 21                	je     c001bd1e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bcfd:	3c 2f                	cmp    al,0x2f
c001bcff:	75 0b                	jne    c001bd0c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bd01:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bd05:	bd 01 00 00 00       	mov    ebp,0x1
c001bd0a:	eb 14                	jmp    c001bd20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bd0c:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bd0f:	80 f9 19             	cmp    cl,0x19
c001bd12:	77 03                	ja     c001bd17 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bd14:	83 e8 20             	sub    eax,0x20
c001bd17:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bd1b:	42                   	inc    edx
c001bd1c:	eb d8                	jmp    c001bcf6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bd1e:	31 ed                	xor    ebp,ebp
c001bd20:	83 ec 0c             	sub    esp,0xc
c001bd23:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bd2a:	e8 74 dc fe ff       	call   c00099a3 <malloc>
c001bd2f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001bd36:	89 c6                	mov    esi,eax
c001bd38:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001bd3e:	c1 ef 0b             	shr    edi,0xb
c001bd41:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001bd48:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001bd4c:	83 c4 10             	add    esp,0x10
c001bd4f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001bd54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd58:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001bd5f:	74 28                	je     c001bd89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001bd61:	52                   	push   edx
c001bd62:	57                   	push   edi
c001bd63:	50                   	push   eax
c001bd64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd68:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001bd6f:	e8 b9 f9 ff ff       	call   c001b72d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd78:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001bd7f:	05 00 08 00 00       	add    eax,0x800
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	eb cb                	jmp    c001bd54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001bd89:	83 ec 0c             	sub    esp,0xc
c001bd8c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001bd90:	57                   	push   edi
c001bd91:	e8 0a 49 fe ff       	call   c00006a0 <strlen>
c001bd96:	50                   	push   eax
c001bd97:	57                   	push   edi
c001bd98:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001bd9f:	56                   	push   esi
c001bda0:	e8 46 f9 ff ff       	call   c001b6eb <__memmem(unsigned char*, int, unsigned char*, int)>
c001bda5:	83 c4 20             	add    esp,0x20
c001bda8:	85 c0                	test   eax,eax
c001bdaa:	75 13                	jne    c001bdbf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001bdac:	83 ec 0c             	sub    esp,0xc
c001bdaf:	56                   	push   esi
c001bdb0:	e8 fe db fe ff       	call   c00099b3 <free>
c001bdb5:	83 c4 10             	add    esp,0x10
c001bdb8:	31 c0                	xor    eax,eax
c001bdba:	e9 b3 00 00 00       	jmp    c001be72 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001bdbf:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001bdc3:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001bdc7:	c1 e7 08             	shl    edi,0x8
c001bdca:	c1 e2 10             	shl    edx,0x10
c001bdcd:	09 d7                	or     edi,edx
c001bdcf:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001bdd3:	09 d7                	or     edi,edx
c001bdd5:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001bdd9:	c1 e2 18             	shl    edx,0x18
c001bddc:	09 d7                	or     edi,edx
c001bdde:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001bde2:	89 d1                	mov    ecx,edx
c001bde4:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001bde8:	c1 e1 08             	shl    ecx,0x8
c001bdeb:	c1 e2 10             	shl    edx,0x10
c001bdee:	09 ca                	or     edx,ecx
c001bdf0:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001bdf4:	09 ca                	or     edx,ecx
c001bdf6:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001bdfa:	c1 e1 18             	shl    ecx,0x18
c001bdfd:	09 ca                	or     edx,ecx
c001bdff:	89 e9                	mov    ecx,ebp
c001be01:	84 c9                	test   cl,cl
c001be03:	74 3c                	je     c001be41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001be05:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be09:	83 ec 0c             	sub    esp,0xc
c001be0c:	56                   	push   esi
c001be0d:	e8 a1 db fe ff       	call   c00099b3 <free>
c001be12:	83 c4 0c             	add    esp,0xc
c001be15:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001be1c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001be21:	50                   	push   eax
c001be22:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001be29:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001be30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be34:	52                   	push   edx
c001be35:	57                   	push   edi
c001be36:	53                   	push   ebx
c001be37:	e8 6e fe ff ff       	call   c001bcaa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001be3c:	83 c4 20             	add    esp,0x20
c001be3f:	eb 31                	jmp    c001be72 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001be41:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001be44:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001be4b:	d0 e8                	shr    al,1
c001be4d:	89 3b                	mov    DWORD PTR [ebx],edi
c001be4f:	83 e0 01             	and    eax,0x1
c001be52:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001be59:	83 ec 0c             	sub    esp,0xc
c001be5c:	89 13                	mov    DWORD PTR [ebx],edx
c001be5e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001be65:	89 03                	mov    DWORD PTR [ebx],eax
c001be67:	56                   	push   esi
c001be68:	e8 46 db fe ff       	call   c00099b3 <free>
c001be6d:	83 c4 10             	add    esp,0x10
c001be70:	b0 01                	mov    al,0x1
c001be72:	81 c4 1c 01 00 00    	add    esp,0x11c
c001be78:	5b                   	pop    ebx
c001be79:	5e                   	pop    esi
c001be7a:	5f                   	pop    edi
c001be7b:	5d                   	pop    ebp
c001be7c:	c3                   	ret    

c001be7d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001be7d:	55                   	push   ebp
c001be7e:	57                   	push   edi
c001be7f:	56                   	push   esi
c001be80:	53                   	push   ebx
c001be81:	83 ec 20             	sub    esp,0x20
c001be84:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be88:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001be8c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001be90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be98:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bea0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001bea5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001beab:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001beb1:	57                   	push   edi
c001beb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001beb6:	50                   	push   eax
c001beb7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bebb:	50                   	push   eax
c001bebc:	e8 95 fd ff ff       	call   c001bc56 <readRoot(unsigned int*, unsigned int*, char)>
c001bec1:	5a                   	pop    edx
c001bec2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bec6:	e8 d5 47 fe ff       	call   c00006a0 <strlen>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	83 f8 03             	cmp    eax,0x3
c001bed1:	77 17                	ja     c001beea <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bed3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bed7:	89 03                	mov    DWORD PTR [ebx],eax
c001bed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bedd:	89 06                	mov    DWORD PTR [esi],eax
c001bedf:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001bee6:	b0 01                	mov    al,0x1
c001bee8:	eb 19                	jmp    c001bf03 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001beea:	50                   	push   eax
c001beeb:	55                   	push   ebp
c001beec:	57                   	push   edi
c001beed:	56                   	push   esi
c001beee:	53                   	push   ebx
c001beef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bef3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bef7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001befb:	e8 aa fd ff ff       	call   c001bcaa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001bf00:	83 c4 20             	add    esp,0x20
c001bf03:	83 c4 1c             	add    esp,0x1c
c001bf06:	5b                   	pop    ebx
c001bf07:	5e                   	pop    esi
c001bf08:	5f                   	pop    edi
c001bf09:	5d                   	pop    ebp
c001bf0a:	c3                   	ret    
c001bf0b:	90                   	nop

c001bf0c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001bf0c:	57                   	push   edi
c001bf0d:	56                   	push   esi
c001bf0e:	53                   	push   ebx
c001bf0f:	83 ec 10             	sub    esp,0x10
c001bf12:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bf16:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bf1a:	85 ff                	test   edi,edi
c001bf1c:	0f 84 8b 00 00 00    	je     c001bfad <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001bf22:	85 f6                	test   esi,esi
c001bf24:	0f 84 83 00 00 00    	je     c001bfad <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001bf2a:	b8 03 00 00 00       	mov    eax,0x3
c001bf2f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001bf34:	75 7c                	jne    c001bfb2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001bf36:	83 ec 0c             	sub    esp,0xc
c001bf39:	6a 1c                	push   0x1c
c001bf3b:	e8 63 da fe ff       	call   c00099a3 <malloc>
c001bf40:	89 07                	mov    DWORD PTR [edi],eax
c001bf42:	89 c3                	mov    ebx,eax
c001bf44:	58                   	pop    eax
c001bf45:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf49:	50                   	push   eax
c001bf4a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bf4d:	50                   	push   eax
c001bf4e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bf52:	50                   	push   eax
c001bf53:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bf57:	50                   	push   eax
c001bf58:	56                   	push   esi
c001bf59:	e8 1f ff ff ff       	call   c001be7d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bf5e:	83 c4 20             	add    esp,0x20
c001bf61:	84 c0                	test   al,al
c001bf63:	74 07                	je     c001bf6c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001bf65:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bf6a:	74 0b                	je     c001bf77 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001bf6c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bf70:	b8 01 00 00 00       	mov    eax,0x1
c001bf75:	eb 3b                	jmp    c001bfb2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001bf77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf7b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bf7f:	89 03                	mov    DWORD PTR [ebx],eax
c001bf81:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bf88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bf93:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bf9a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bf9d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bfa4:	8a 06                	mov    al,BYTE PTR [esi]
c001bfa6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bfa9:	31 c0                	xor    eax,eax
c001bfab:	eb 05                	jmp    c001bfb2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001bfad:	b8 04 00 00 00       	mov    eax,0x4
c001bfb2:	83 c4 10             	add    esp,0x10
c001bfb5:	5b                   	pop    ebx
c001bfb6:	5e                   	pop    esi
c001bfb7:	5f                   	pop    edi
c001bfb8:	c3                   	ret    
c001bfb9:	90                   	nop

c001bfba <ISO9660::exists(char const*)>:
c001bfba:	83 ec 28             	sub    esp,0x28
c001bfbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfc1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bfc5:	52                   	push   edx
c001bfc6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001bfc9:	52                   	push   edx
c001bfca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001bfce:	52                   	push   edx
c001bfcf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001bfd3:	52                   	push   edx
c001bfd4:	50                   	push   eax
c001bfd5:	e8 a3 fe ff ff       	call   c001be7d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bfda:	83 c4 3c             	add    esp,0x3c
c001bfdd:	c3                   	ret    

c001bfde <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bfde:	56                   	push   esi
c001bfdf:	53                   	push   ebx
c001bfe0:	83 ec 14             	sub    esp,0x14
c001bfe3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bfe7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bfeb:	85 db                	test   ebx,ebx
c001bfed:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bff1:	0f 94 c2             	sete   dl
c001bff4:	85 f6                	test   esi,esi
c001bff6:	0f 94 c0             	sete   al
c001bff9:	08 c2                	or     dl,al
c001bffb:	75 68                	jne    c001c065 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bffd:	85 c9                	test   ecx,ecx
c001bfff:	74 64                	je     c001c065 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c001:	83 ec 0c             	sub    esp,0xc
c001c004:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c007:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c00b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c011:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c018:	50                   	push   eax
c001c019:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c01c:	50                   	push   eax
c001c01d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c021:	50                   	push   eax
c001c022:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c026:	50                   	push   eax
c001c027:	51                   	push   ecx
c001c028:	e8 50 fe ff ff       	call   c001be7d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c02d:	83 c4 20             	add    esp,0x20
c001c030:	ba 01 00 00 00       	mov    edx,0x1
c001c035:	84 c0                	test   al,al
c001c037:	74 31                	je     c001c06a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c039:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c03d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c044:	89 03                	mov    DWORD PTR [ebx],eax
c001c046:	ba 00 00 00 00       	mov    edx,0x0
c001c04b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c04f:	85 c0                	test   eax,eax
c001c051:	0f 95 06             	setne  BYTE PTR [esi]
c001c054:	74 14                	je     c001c06a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c056:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c05c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c063:	eb 05                	jmp    c001c06a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c065:	ba 04 00 00 00       	mov    edx,0x4
c001c06a:	83 c4 14             	add    esp,0x14
c001c06d:	89 d0                	mov    eax,edx
c001c06f:	5b                   	pop    ebx
c001c070:	5e                   	pop    esi
c001c071:	c3                   	ret    

c001c072 <ISO9660::openDir(char const*, void**)>:
c001c072:	57                   	push   edi
c001c073:	56                   	push   esi
c001c074:	53                   	push   ebx
c001c075:	83 ec 10             	sub    esp,0x10
c001c078:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c07c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c080:	85 ff                	test   edi,edi
c001c082:	74 7b                	je     c001c0ff <ISO9660::openDir(char const*, void**)+0x8d>
c001c084:	85 f6                	test   esi,esi
c001c086:	74 77                	je     c001c0ff <ISO9660::openDir(char const*, void**)+0x8d>
c001c088:	83 ec 0c             	sub    esp,0xc
c001c08b:	6a 1c                	push   0x1c
c001c08d:	e8 11 d9 fe ff       	call   c00099a3 <malloc>
c001c092:	89 07                	mov    DWORD PTR [edi],eax
c001c094:	89 c3                	mov    ebx,eax
c001c096:	58                   	pop    eax
c001c097:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c09b:	50                   	push   eax
c001c09c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c09f:	50                   	push   eax
c001c0a0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0a4:	50                   	push   eax
c001c0a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0a9:	50                   	push   eax
c001c0aa:	56                   	push   esi
c001c0ab:	e8 cd fd ff ff       	call   c001be7d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c0b0:	83 c4 20             	add    esp,0x20
c001c0b3:	84 c0                	test   al,al
c001c0b5:	74 07                	je     c001c0be <ISO9660::openDir(char const*, void**)+0x4c>
c001c0b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c0bc:	75 0b                	jne    c001c0c9 <ISO9660::openDir(char const*, void**)+0x57>
c001c0be:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c0c2:	b8 01 00 00 00       	mov    eax,0x1
c001c0c7:	eb 3b                	jmp    c001c104 <ISO9660::openDir(char const*, void**)+0x92>
c001c0c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0cd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c0d1:	89 03                	mov    DWORD PTR [ebx],eax
c001c0d3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c0da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0de:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c0e5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c0ec:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c0f6:	8a 06                	mov    al,BYTE PTR [esi]
c001c0f8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c0fb:	31 c0                	xor    eax,eax
c001c0fd:	eb 05                	jmp    c001c104 <ISO9660::openDir(char const*, void**)+0x92>
c001c0ff:	b8 04 00 00 00       	mov    eax,0x4
c001c104:	83 c4 10             	add    esp,0x10
c001c107:	5b                   	pop    ebx
c001c108:	5e                   	pop    esi
c001c109:	5f                   	pop    edi
c001c10a:	c3                   	ret    
c001c10b:	90                   	nop

c001c10c <ISO9660::ISO9660()>:
c001c10c:	83 ec 0c             	sub    esp,0xc
c001c10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c113:	83 ec 0c             	sub    esp,0xc
c001c116:	50                   	push   eax
c001c117:	e8 fe 0b ff ff       	call   c000cd1a <Filesystem::Filesystem()>
c001c11c:	83 c4 10             	add    esp,0x10
c001c11f:	ba 30 48 02 c0       	mov    edx,0xc0024830
c001c124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c128:	89 10                	mov    DWORD PTR [eax],edx
c001c12a:	90                   	nop
c001c12b:	83 c4 0c             	add    esp,0xc
c001c12e:	c3                   	ret    
c001c12f:	90                   	nop

c001c130 <SoundCard::beginPlayback()>:
c001c130:	c7 44 24 04 90 48 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024890
c001c138:	e9 06 81 ff ff       	jmp    c0014243 <Krnl::panic(char const*)>
c001c13d:	90                   	nop

c001c13e <SoundCard::stopPlayback()>:
c001c13e:	c7 44 24 04 c4 48 02 c0 	mov    DWORD PTR [esp+0x4],0xc00248c4
c001c146:	e9 f8 80 ff ff       	jmp    c0014243 <Krnl::panic(char const*)>
c001c14b:	90                   	nop

c001c14c <SoundCard::SoundCard(char const*)>:
c001c14c:	83 ec 1c             	sub    esp,0x1c
c001c14f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c153:	83 ec 08             	sub    esp,0x8
c001c156:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c15a:	50                   	push   eax
c001c15b:	e8 e8 1e ff ff       	call   c000e048 <Device::Device(char const*)>
c001c160:	83 c4 10             	add    esp,0x10
c001c163:	ba d0 49 02 c0       	mov    edx,0xc00249d0
c001c168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c16c:	89 10                	mov    DWORD PTR [eax],edx
c001c16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c172:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c17d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c18b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c199:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c1a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1a7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c1b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c1b9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c1be:	7f 19                	jg     c001c1d9 <SoundCard::SoundCard(char const*)+0x8d>
c001c1c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c1c8:	83 c2 54             	add    edx,0x54
c001c1cb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c1d3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c1d7:	eb e0                	jmp    c001c1b9 <SoundCard::SoundCard(char const*)+0x6d>
c001c1d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1dd:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c1e4:	90                   	nop
c001c1e5:	83 c4 1c             	add    esp,0x1c
c001c1e8:	c3                   	ret    
c001c1e9:	90                   	nop

c001c1ea <SoundCard::~SoundCard()>:
c001c1ea:	83 ec 0c             	sub    esp,0xc
c001c1ed:	ba d0 49 02 c0       	mov    edx,0xc00249d0
c001c1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f6:	89 10                	mov    DWORD PTR [eax],edx
c001c1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	50                   	push   eax
c001c200:	e8 0d 1b ff ff       	call   c000dd12 <Device::~Device()>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	90                   	nop
c001c209:	83 c4 0c             	add    esp,0xc
c001c20c:	c3                   	ret    
c001c20d:	90                   	nop

c001c20e <SoundCard::~SoundCard()>:
c001c20e:	83 ec 0c             	sub    esp,0xc
c001c211:	83 ec 0c             	sub    esp,0xc
c001c214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c218:	e8 cd ff ff ff       	call   c001c1ea <SoundCard::~SoundCard()>
c001c21d:	83 c4 10             	add    esp,0x10
c001c220:	83 ec 08             	sub    esp,0x8
c001c223:	68 e8 01 00 00       	push   0x1e8
c001c228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c22c:	e8 f2 06 ff ff       	call   c000c923 <operator delete(void*, unsigned long)>
c001c231:	83 c4 10             	add    esp,0x10
c001c234:	83 c4 0c             	add    esp,0xc
c001c237:	c3                   	ret    

c001c238 <SoundCard::configureRates(int, int, int)>:
c001c238:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c23c:	31 c0                	xor    eax,eax
c001c23e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c245:	75 20                	jne    c001c267 <SoundCard::configureRates(int, int, int)+0x2f>
c001c247:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c24b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c255:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c265:	b0 01                	mov    al,0x1
c001c267:	c3                   	ret    

c001c268 <SoundCard::getSamples16(int, short*)>:
c001c268:	55                   	push   ebp
c001c269:	57                   	push   edi
c001c26a:	31 ff                	xor    edi,edi
c001c26c:	56                   	push   esi
c001c26d:	53                   	push   ebx
c001c26e:	83 ec 28             	sub    esp,0x28
c001c271:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c275:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c279:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c27d:	68 f7 48 02 c0       	push   0xc00248f7
c001c282:	e8 7d 07 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c287:	83 c4 0c             	add    esp,0xc
c001c28a:	53                   	push   ebx
c001c28b:	6a 00                	push   0x0
c001c28d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c291:	e8 ee 43 fe ff       	call   c0000684 <memset>
c001c296:	58                   	pop    eax
c001c297:	5a                   	pop    edx
c001c298:	53                   	push   ebx
c001c299:	31 db                	xor    ebx,ebx
c001c29b:	68 16 49 02 c0       	push   0xc0024916
c001c2a0:	e8 5f 07 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c2a5:	83 c4 10             	add    esp,0x10
c001c2a8:	52                   	push   edx
c001c2a9:	52                   	push   edx
c001c2aa:	53                   	push   ebx
c001c2ab:	68 29 49 02 c0       	push   0xc0024929
c001c2b0:	e8 4f 07 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c2b5:	59                   	pop    ecx
c001c2b6:	58                   	pop    eax
c001c2b7:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c2be:	68 41 49 02 c0       	push   0xc0024941
c001c2c3:	e8 3c 07 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c2c8:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c2cf:	83 c4 10             	add    esp,0x10
c001c2d2:	85 c0                	test   eax,eax
c001c2d4:	74 44                	je     c001c31a <SoundCard::getSamples16(int, short*)+0xb2>
c001c2d6:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c2da:	75 3e                	jne    c001c31a <SoundCard::getSamples16(int, short*)+0xb2>
c001c2dc:	50                   	push   eax
c001c2dd:	50                   	push   eax
c001c2de:	53                   	push   ebx
c001c2df:	68 53 49 02 c0       	push   0xc0024953
c001c2e4:	e8 1b 07 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c2e9:	56                   	push   esi
c001c2ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c2ee:	55                   	push   ebp
c001c2ef:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c2f6:	e8 4f 03 00 00       	call   c001c64a <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c2fb:	83 c4 18             	add    esp,0x18
c001c2fe:	50                   	push   eax
c001c2ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c303:	68 6a 49 02 c0       	push   0xc002496a
c001c308:	e8 f7 06 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c30d:	83 c4 10             	add    esp,0x10
c001c310:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c314:	39 c7                	cmp    edi,eax
c001c316:	7d 02                	jge    c001c31a <SoundCard::getSamples16(int, short*)+0xb2>
c001c318:	89 c7                	mov    edi,eax
c001c31a:	43                   	inc    ebx
c001c31b:	83 fb 20             	cmp    ebx,0x20
c001c31e:	75 88                	jne    c001c2a8 <SoundCard::getSamples16(int, short*)+0x40>
c001c320:	83 c4 1c             	add    esp,0x1c
c001c323:	89 f8                	mov    eax,edi
c001c325:	5b                   	pop    ebx
c001c326:	5e                   	pop    esi
c001c327:	5f                   	pop    edi
c001c328:	5d                   	pop    ebp
c001c329:	c3                   	ret    

c001c32a <SoundCard::getSamples32(int, int*)>:
c001c32a:	55                   	push   ebp
c001c32b:	57                   	push   edi
c001c32c:	31 ff                	xor    edi,edi
c001c32e:	56                   	push   esi
c001c32f:	31 f6                	xor    esi,esi
c001c331:	53                   	push   ebx
c001c332:	83 ec 10             	sub    esp,0x10
c001c335:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c339:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c33d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c341:	c1 e0 02             	shl    eax,0x2
c001c344:	50                   	push   eax
c001c345:	6a 00                	push   0x0
c001c347:	55                   	push   ebp
c001c348:	e8 37 43 fe ff       	call   c0000684 <memset>
c001c34d:	83 c4 10             	add    esp,0x10
c001c350:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c357:	85 c0                	test   eax,eax
c001c359:	74 1b                	je     c001c376 <SoundCard::getSamples32(int, int*)+0x4c>
c001c35b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c35f:	75 15                	jne    c001c376 <SoundCard::getSamples32(int, int*)+0x4c>
c001c361:	53                   	push   ebx
c001c362:	55                   	push   ebp
c001c363:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c367:	50                   	push   eax
c001c368:	e8 d5 03 00 00       	call   c001c742 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c36d:	83 c4 10             	add    esp,0x10
c001c370:	39 c6                	cmp    esi,eax
c001c372:	7d 02                	jge    c001c376 <SoundCard::getSamples32(int, int*)+0x4c>
c001c374:	89 c6                	mov    esi,eax
c001c376:	47                   	inc    edi
c001c377:	83 ff 20             	cmp    edi,0x20
c001c37a:	75 d4                	jne    c001c350 <SoundCard::getSamples32(int, int*)+0x26>
c001c37c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c382:	85 f6                	test   esi,esi
c001c384:	75 0f                	jne    c001c395 <SoundCard::getSamples32(int, int*)+0x6b>
c001c386:	84 c0                	test   al,al
c001c388:	74 1b                	je     c001c3a5 <SoundCard::getSamples32(int, int*)+0x7b>
c001c38a:	83 ec 0c             	sub    esp,0xc
c001c38d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c38f:	53                   	push   ebx
c001c390:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c393:	eb 0d                	jmp    c001c3a2 <SoundCard::getSamples32(int, int*)+0x78>
c001c395:	84 c0                	test   al,al
c001c397:	75 0c                	jne    c001c3a5 <SoundCard::getSamples32(int, int*)+0x7b>
c001c399:	83 ec 0c             	sub    esp,0xc
c001c39c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c39e:	53                   	push   ebx
c001c39f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c3a2:	83 c4 10             	add    esp,0x10
c001c3a5:	83 c4 0c             	add    esp,0xc
c001c3a8:	89 f0                	mov    eax,esi
c001c3aa:	5b                   	pop    ebx
c001c3ab:	5e                   	pop    esi
c001c3ac:	5f                   	pop    edi
c001c3ad:	5d                   	pop    ebp
c001c3ae:	c3                   	ret    
c001c3af:	90                   	nop

c001c3b0 <SoundCard::addChannel(SoundPort*)>:
c001c3b0:	56                   	push   esi
c001c3b1:	53                   	push   ebx
c001c3b2:	53                   	push   ebx
c001c3b3:	31 db                	xor    ebx,ebx
c001c3b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3b9:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c3c1:	74 27                	je     c001c3ea <SoundCard::addChannel(SoundPort*)+0x3a>
c001c3c3:	43                   	inc    ebx
c001c3c4:	83 fb 20             	cmp    ebx,0x20
c001c3c7:	75 f0                	jne    c001c3b9 <SoundCard::addChannel(SoundPort*)+0x9>
c001c3c9:	83 ec 0c             	sub    esp,0xc
c001c3cc:	83 cb ff             	or     ebx,0xffffffff
c001c3cf:	68 8f 49 02 c0       	push   0xc002498f
c001c3d4:	e8 2b 06 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c3d9:	c7 04 24 88 49 02 c0 	mov    DWORD PTR [esp],0xc0024988
c001c3e0:	e8 5e 7e ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c3e5:	83 c4 10             	add    esp,0x10
c001c3e8:	eb 1b                	jmp    c001c405 <SoundCard::addChannel(SoundPort*)+0x55>
c001c3ea:	51                   	push   ecx
c001c3eb:	51                   	push   ecx
c001c3ec:	53                   	push   ebx
c001c3ed:	68 a7 49 02 c0       	push   0xc00249a7
c001c3f2:	e8 0d 06 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c3f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3fb:	83 c4 10             	add    esp,0x10
c001c3fe:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c405:	89 d8                	mov    eax,ebx
c001c407:	5a                   	pop    edx
c001c408:	5b                   	pop    ebx
c001c409:	5e                   	pop    esi
c001c40a:	c3                   	ret    
c001c40b:	90                   	nop

c001c40c <SoundCard::removeChannel(int)>:
c001c40c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c410:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c414:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c41f:	c3                   	ret    

c001c420 <SoundPort::SoundPort(int, int, int, int)>:
c001c420:	83 ec 0c             	sub    esp,0xc
c001c423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c427:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c432:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c43e:	89 10                	mov    DWORD PTR [eax],edx
c001c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c444:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c448:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c453:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c456:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c45b:	75 11                	jne    c001c46e <SoundPort::SoundPort(int, int, int, int)+0x4e>
c001c45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c461:	8b 00                	mov    eax,DWORD PTR [eax]
c001c463:	05 a0 0f 00 00       	add    eax,0xfa0
c001c468:	01 c0                	add    eax,eax
c001c46a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c472:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c476:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47d:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c488:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c48b:	c1 e0 02             	shl    eax,0x2
c001c48e:	83 ec 0c             	sub    esp,0xc
c001c491:	50                   	push   eax
c001c492:	e8 0c d5 fe ff       	call   c00099a3 <malloc>
c001c497:	83 c4 10             	add    esp,0x10
c001c49a:	89 c2                	mov    edx,eax
c001c49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c4a3:	90                   	nop
c001c4a4:	83 c4 0c             	add    esp,0xc
c001c4a7:	c3                   	ret    

c001c4a8 <SoundPort::~SoundPort()>:
c001c4a8:	83 ec 0c             	sub    esp,0xc
c001c4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c4b2:	85 c0                	test   eax,eax
c001c4b4:	74 1e                	je     c001c4d4 <SoundPort::~SoundPort()+0x2c>
c001c4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c4bd:	83 ec 0c             	sub    esp,0xc
c001c4c0:	50                   	push   eax
c001c4c1:	e8 ed d4 fe ff       	call   c00099b3 <free>
c001c4c6:	83 c4 10             	add    esp,0x10
c001c4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c4d4:	90                   	nop
c001c4d5:	83 c4 0c             	add    esp,0xc
c001c4d8:	c3                   	ret    
c001c4d9:	90                   	nop

c001c4da <SoundPort::unpause()>:
c001c4da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4de:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c4e2:	c3                   	ret    
c001c4e3:	90                   	nop

c001c4e4 <SoundPort::pause()>:
c001c4e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c4ec:	c3                   	ret    
c001c4ed:	90                   	nop

c001c4ee <SoundPort::getBufferUsed()>:
c001c4ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c4f5:	c3                   	ret    

c001c4f6 <SoundPort::getBufferSize()>:
c001c4f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c4fd:	c3                   	ret    

c001c4fe <SoundPort::buffer16(short*, int)>:
c001c4fe:	55                   	push   ebp
c001c4ff:	57                   	push   edi
c001c500:	56                   	push   esi
c001c501:	53                   	push   ebx
c001c502:	83 ec 1c             	sub    esp,0x1c
c001c505:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c509:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c50d:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c510:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c513:	74 7f                	je     c001c594 <SoundPort::buffer16(short*, int)+0x96>
c001c515:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c519:	85 c9                	test   ecx,ecx
c001c51b:	7e 77                	jle    c001c594 <SoundPort::buffer16(short*, int)+0x96>
c001c51d:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c521:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c524:	c1 e1 0f             	shl    ecx,0xf
c001c527:	8d 70 01             	lea    esi,[eax+0x1]
c001c52a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c52d:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c530:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c533:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c536:	74 66                	je     c001c59e <SoundPort::buffer16(short*, int)+0xa0>
c001c538:	31 f6                	xor    esi,esi
c001c53a:	eb 1e                	jmp    c001c55a <SoundPort::buffer16(short*, int)+0x5c>
c001c53c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c541:	8d 79 01             	lea    edi,[ecx+0x1]
c001c544:	c1 e3 0f             	shl    ebx,0xf
c001c547:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c54a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c54d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c550:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c553:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c556:	74 18                	je     c001c570 <SoundPort::buffer16(short*, int)+0x72>
c001c558:	89 c6                	mov    esi,eax
c001c55a:	8d 46 01             	lea    eax,[esi+0x1]
c001c55d:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c561:	75 d9                	jne    c001c53c <SoundPort::buffer16(short*, int)+0x3e>
c001c563:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c567:	83 c4 1c             	add    esp,0x1c
c001c56a:	5b                   	pop    ebx
c001c56b:	5e                   	pop    esi
c001c56c:	5f                   	pop    edi
c001c56d:	5d                   	pop    ebp
c001c56e:	c3                   	ret    
c001c56f:	90                   	nop
c001c570:	8d 46 02             	lea    eax,[esi+0x2]
c001c573:	90                   	nop
c001c574:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c578:	83 ec 0c             	sub    esp,0xc
c001c57b:	68 fc 49 02 c0       	push   0xc00249fc
c001c580:	e8 7f 04 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c585:	83 c4 10             	add    esp,0x10
c001c588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c58c:	83 c4 1c             	add    esp,0x1c
c001c58f:	5b                   	pop    ebx
c001c590:	5e                   	pop    esi
c001c591:	5f                   	pop    edi
c001c592:	5d                   	pop    ebp
c001c593:	c3                   	ret    
c001c594:	83 c4 1c             	add    esp,0x1c
c001c597:	31 c0                	xor    eax,eax
c001c599:	5b                   	pop    ebx
c001c59a:	5e                   	pop    esi
c001c59b:	5f                   	pop    edi
c001c59c:	5d                   	pop    ebp
c001c59d:	c3                   	ret    
c001c59e:	b8 01 00 00 00       	mov    eax,0x1
c001c5a3:	eb cf                	jmp    c001c574 <SoundPort::buffer16(short*, int)+0x76>
c001c5a5:	90                   	nop

c001c5a6 <SoundPort::buffer32(int*, int)>:
c001c5a6:	55                   	push   ebp
c001c5a7:	57                   	push   edi
c001c5a8:	56                   	push   esi
c001c5a9:	53                   	push   ebx
c001c5aa:	83 ec 1c             	sub    esp,0x1c
c001c5ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c5b5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5b8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c5bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5c0:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5c3:	74 73                	je     c001c638 <SoundPort::buffer32(int*, int)+0x92>
c001c5c5:	85 c0                	test   eax,eax
c001c5c7:	7e 6f                	jle    c001c638 <SoundPort::buffer32(int*, int)+0x92>
c001c5c9:	8d 71 01             	lea    esi,[ecx+0x1]
c001c5cc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c5cf:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c5d2:	8b 37                	mov    esi,DWORD PTR [edi]
c001c5d4:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c5d7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5da:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5dd:	74 63                	je     c001c642 <SoundPort::buffer32(int*, int)+0x9c>
c001c5df:	31 f6                	xor    esi,esi
c001c5e1:	eb 1b                	jmp    c001c5fe <SoundPort::buffer32(int*, int)+0x58>
c001c5e3:	90                   	nop
c001c5e4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c5e7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c5ea:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c5ed:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c5f0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c5f4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5f7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5fa:	74 18                	je     c001c614 <SoundPort::buffer32(int*, int)+0x6e>
c001c5fc:	89 de                	mov    esi,ebx
c001c5fe:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c601:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c605:	75 dd                	jne    c001c5e4 <SoundPort::buffer32(int*, int)+0x3e>
c001c607:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c60b:	83 c4 1c             	add    esp,0x1c
c001c60e:	5b                   	pop    ebx
c001c60f:	5e                   	pop    esi
c001c610:	5f                   	pop    edi
c001c611:	5d                   	pop    ebp
c001c612:	c3                   	ret    
c001c613:	90                   	nop
c001c614:	8d 46 02             	lea    eax,[esi+0x2]
c001c617:	90                   	nop
c001c618:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c61c:	83 ec 0c             	sub    esp,0xc
c001c61f:	68 17 4a 02 c0       	push   0xc0024a17
c001c624:	e8 db 03 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c630:	83 c4 1c             	add    esp,0x1c
c001c633:	5b                   	pop    ebx
c001c634:	5e                   	pop    esi
c001c635:	5f                   	pop    edi
c001c636:	5d                   	pop    ebp
c001c637:	c3                   	ret    
c001c638:	83 c4 1c             	add    esp,0x1c
c001c63b:	31 c0                	xor    eax,eax
c001c63d:	5b                   	pop    ebx
c001c63e:	5e                   	pop    esi
c001c63f:	5f                   	pop    edi
c001c640:	5d                   	pop    ebp
c001c641:	c3                   	ret    
c001c642:	b8 01 00 00 00       	mov    eax,0x1
c001c647:	eb cf                	jmp    c001c618 <SoundPort::buffer32(int*, int)+0x72>
c001c649:	90                   	nop

c001c64a <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c64a:	57                   	push   edi
c001c64b:	56                   	push   esi
c001c64c:	53                   	push   ebx
c001c64d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c651:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c655:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c65b:	39 03                	cmp    DWORD PTR [ebx],eax
c001c65d:	74 11                	je     c001c670 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x26>
c001c65f:	83 ec 0c             	sub    esp,0xc
c001c662:	68 6c 4a 02 c0       	push   0xc0024a6c
c001c667:	e8 d7 7b ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c66c:	83 c4 10             	add    esp,0x10
c001c66f:	90                   	nop
c001c670:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c676:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c679:	74 11                	je     c001c68c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x42>
c001c67b:	83 ec 0c             	sub    esp,0xc
c001c67e:	68 32 4a 02 c0       	push   0xc0024a32
c001c683:	e8 bb 7b ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c688:	83 c4 10             	add    esp,0x10
c001c68b:	90                   	nop
c001c68c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c692:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c695:	74 11                	je     c001c6a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x5e>
c001c697:	83 ec 0c             	sub    esp,0xc
c001c69a:	68 32 4a 02 c0       	push   0xc0024a32
c001c69f:	e8 9f 7b ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c6a4:	83 c4 10             	add    esp,0x10
c001c6a7:	90                   	nop
c001c6a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c6ab:	89 c6                	mov    esi,eax
c001c6ad:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c6b1:	7e 05                	jle    c001c6b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6e>
c001c6b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c6b7:	90                   	nop
c001c6b8:	85 f6                	test   esi,esi
c001c6ba:	7e 30                	jle    c001c6ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa2>
c001c6bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c6c0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c6c3:	31 c9                	xor    ecx,ecx
c001c6c5:	01 d7                	add    edi,edx
c001c6c7:	90                   	nop
c001c6c8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c6cb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c6ce:	85 c0                	test   eax,eax
c001c6d0:	79 06                	jns    c001c6d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x8e>
c001c6d2:	05 ff 7f 00 00       	add    eax,0x7fff
c001c6d7:	90                   	nop
c001c6d8:	c1 f8 0f             	sar    eax,0xf
c001c6db:	83 c1 04             	add    ecx,0x4
c001c6de:	66 01 02             	add    WORD PTR [edx],ax
c001c6e1:	83 c2 02             	add    edx,0x2
c001c6e4:	39 d7                	cmp    edi,edx
c001c6e6:	75 e0                	jne    c001c6c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7e>
c001c6e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c6eb:	90                   	nop
c001c6ec:	56                   	push   esi
c001c6ed:	89 c2                	mov    edx,eax
c001c6ef:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c6f6:	29 f2                	sub    edx,esi
c001c6f8:	52                   	push   edx
c001c6f9:	50                   	push   eax
c001c6fa:	68 8c 4a 02 c0       	push   0xc0024a8c
c001c6ff:	e8 00 03 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c704:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c707:	50                   	push   eax
c001c708:	01 f8                	add    eax,edi
c001c70a:	50                   	push   eax
c001c70b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c70e:	29 f0                	sub    eax,esi
c001c710:	c1 e0 02             	shl    eax,0x2
c001c713:	50                   	push   eax
c001c714:	68 bc 4a 02 c0       	push   0xc0024abc
c001c719:	e8 e6 02 ff ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001c71e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c721:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c724:	83 c4 1c             	add    esp,0x1c
c001c727:	01 d7                	add    edi,edx
c001c729:	29 f0                	sub    eax,esi
c001c72b:	c1 e0 02             	shl    eax,0x2
c001c72e:	50                   	push   eax
c001c72f:	57                   	push   edi
c001c730:	52                   	push   edx
c001c731:	e8 86 3e fe ff       	call   c00005bc <memmove>
c001c736:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	89 f0                	mov    eax,esi
c001c73e:	5b                   	pop    ebx
c001c73f:	5e                   	pop    esi
c001c740:	5f                   	pop    edi
c001c741:	c3                   	ret    

c001c742 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c742:	57                   	push   edi
c001c743:	56                   	push   esi
c001c744:	53                   	push   ebx
c001c745:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c749:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c74d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c751:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c757:	39 06                	cmp    DWORD PTR [esi],eax
c001c759:	74 11                	je     c001c76c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2a>
c001c75b:	83 ec 0c             	sub    esp,0xc
c001c75e:	68 e0 4a 02 c0       	push   0xc0024ae0
c001c763:	e8 db 7a ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c768:	83 c4 10             	add    esp,0x10
c001c76b:	90                   	nop
c001c76c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c772:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c775:	74 11                	je     c001c788 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x46>
c001c777:	83 ec 0c             	sub    esp,0xc
c001c77a:	68 4e 4a 02 c0       	push   0xc0024a4e
c001c77f:	e8 bf 7a ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c784:	83 c4 10             	add    esp,0x10
c001c787:	90                   	nop
c001c788:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001c78e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001c791:	74 11                	je     c001c7a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x62>
c001c793:	83 ec 0c             	sub    esp,0xc
c001c796:	68 4e 4a 02 c0       	push   0xc0024a4e
c001c79b:	e8 a3 7a ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c7a0:	83 c4 10             	add    esp,0x10
c001c7a3:	90                   	nop
c001c7a4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001c7a7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001c7ab:	7e 05                	jle    c001c7b2 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x70>
c001c7ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c7b1:	90                   	nop
c001c7b2:	85 ff                	test   edi,edi
c001c7b4:	7e 1a                	jle    c001c7d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x8e>
c001c7b6:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c7bd:	31 c0                	xor    eax,eax
c001c7bf:	90                   	nop
c001c7c0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c7c3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c7c6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001c7c9:	83 c0 04             	add    eax,0x4
c001c7cc:	39 c1                	cmp    ecx,eax
c001c7ce:	75 f0                	jne    c001c7c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x7e>
c001c7d0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c7d3:	50                   	push   eax
c001c7d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c7d7:	29 f8                	sub    eax,edi
c001c7d9:	c1 e0 02             	shl    eax,0x2
c001c7dc:	50                   	push   eax
c001c7dd:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c7e0:	50                   	push   eax
c001c7e1:	52                   	push   edx
c001c7e2:	e8 d5 3d fe ff       	call   c00005bc <memmove>
c001c7e7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001c7ea:	83 c4 10             	add    esp,0x10
c001c7ed:	89 f8                	mov    eax,edi
c001c7ef:	5b                   	pop    ebx
c001c7f0:	5e                   	pop    esi
c001c7f1:	5f                   	pop    edi
c001c7f2:	c3                   	ret    
c001c7f3:	90                   	nop

c001c7f4 <PCI::open(int, int, void*)>:
c001c7f4:	83 ec 18             	sub    esp,0x18
c001c7f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c7ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c805:	8b 10                	mov    edx,DWORD PTR [eax]
c001c807:	50                   	push   eax
c001c808:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c80b:	31 c0                	xor    eax,eax
c001c80d:	83 c4 1c             	add    esp,0x1c
c001c810:	c3                   	ret    
c001c811:	90                   	nop

c001c812 <PCI::close(int, int, void*)>:
c001c812:	31 c0                	xor    eax,eax
c001c814:	c3                   	ret    
c001c815:	90                   	nop

c001c816 <PCI::PCI()>:
c001c816:	83 ec 0c             	sub    esp,0xc
c001c819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81d:	83 ec 08             	sub    esp,0x8
c001c820:	68 ff 4a 02 c0       	push   0xc0024aff
c001c825:	50                   	push   eax
c001c826:	e8 85 0e ff ff       	call   c000d6b0 <Bus::Bus(char const*)>
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	ba e8 4b 02 c0       	mov    edx,0xc0024be8
c001c833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c837:	89 10                	mov    DWORD PTR [eax],edx
c001c839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84b:	a3 80 7f 02 c0       	mov    ds:0xc0027f80,eax
c001c850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c854:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c85a:	0f b6 d0             	movzx  edx,al
c001c85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c861:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c872:	0f b6 d0             	movzx  edx,al
c001c875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c879:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c882:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c888:	8d 50 01             	lea    edx,[eax+0x1]
c001c88b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c88f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c895:	0f b6 d0             	movzx  edx,al
c001c898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c8a0:	83 c9 c0             	or     ecx,0xffffffc0
c001c8a3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c8a7:	90                   	nop
c001c8a8:	83 c4 0c             	add    esp,0xc
c001c8ab:	c3                   	ret    

c001c8ac <PCI::readBAR8(unsigned int, int)>:
c001c8ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c8b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8b4:	f6 c2 01             	test   dl,0x1
c001c8b7:	74 07                	je     c001c8c0 <PCI::readBAR8(unsigned int, int)+0x14>
c001c8b9:	83 e2 fc             	and    edx,0xfffffffc
c001c8bc:	01 c2                	add    edx,eax
c001c8be:	ec                   	in     al,dx
c001c8bf:	c3                   	ret    
c001c8c0:	83 e2 f0             	and    edx,0xfffffff0
c001c8c3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001c8c6:	c3                   	ret    
c001c8c7:	90                   	nop

c001c8c8 <PCI::readBAR16(unsigned int, int)>:
c001c8c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c8cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8d0:	f6 c2 01             	test   dl,0x1
c001c8d3:	74 08                	je     c001c8dd <PCI::readBAR16(unsigned int, int)+0x15>
c001c8d5:	83 e2 fc             	and    edx,0xfffffffc
c001c8d8:	01 c2                	add    edx,eax
c001c8da:	66 ed                	in     ax,dx
c001c8dc:	c3                   	ret    
c001c8dd:	83 e2 f0             	and    edx,0xfffffff0
c001c8e0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001c8e4:	c3                   	ret    
c001c8e5:	90                   	nop

c001c8e6 <PCI::readBAR32(unsigned int, int)>:
c001c8e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c8ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8ee:	f6 c2 01             	test   dl,0x1
c001c8f1:	74 07                	je     c001c8fa <PCI::readBAR32(unsigned int, int)+0x14>
c001c8f3:	83 e2 fc             	and    edx,0xfffffffc
c001c8f6:	01 c2                	add    edx,eax
c001c8f8:	ed                   	in     eax,dx
c001c8f9:	c3                   	ret    
c001c8fa:	83 e2 f0             	and    edx,0xfffffff0
c001c8fd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001c900:	c3                   	ret    
c001c901:	90                   	nop

c001c902 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001c902:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c90a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c90e:	f6 c2 01             	test   dl,0x1
c001c911:	74 07                	je     c001c91a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001c913:	83 e2 fc             	and    edx,0xfffffffc
c001c916:	01 ca                	add    edx,ecx
c001c918:	ee                   	out    dx,al
c001c919:	c3                   	ret    
c001c91a:	83 e2 f0             	and    edx,0xfffffff0
c001c91d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001c920:	c3                   	ret    
c001c921:	90                   	nop

c001c922 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001c922:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c926:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c92a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c92e:	f6 c2 01             	test   dl,0x1
c001c931:	74 08                	je     c001c93b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001c933:	83 e2 fc             	and    edx,0xfffffffc
c001c936:	01 ca                	add    edx,ecx
c001c938:	66 ef                	out    dx,ax
c001c93a:	c3                   	ret    
c001c93b:	83 e2 f0             	and    edx,0xfffffff0
c001c93e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001c942:	c3                   	ret    
c001c943:	90                   	nop

c001c944 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001c944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c94c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c950:	f6 c2 01             	test   dl,0x1
c001c953:	74 07                	je     c001c95c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001c955:	83 e2 fc             	and    edx,0xfffffffc
c001c958:	01 ca                	add    edx,ecx
c001c95a:	ef                   	out    dx,eax
c001c95b:	c3                   	ret    
c001c95c:	83 e2 f0             	and    edx,0xfffffff0
c001c95f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001c962:	c3                   	ret    
c001c963:	90                   	nop

c001c964 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c964:	55                   	push   ebp
c001c965:	57                   	push   edi
c001c966:	56                   	push   esi
c001c967:	53                   	push   ebx
c001c968:	83 ec 0c             	sub    esp,0xc
c001c96b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c96f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001c973:	89 f0                	mov    eax,esi
c001c975:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c979:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c97d:	3c 07                	cmp    al,0x7
c001c97f:	76 10                	jbe    c001c991 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001c981:	83 ec 0c             	sub    esp,0xc
c001c984:	68 07 4b 02 c0       	push   0xc0024b07
c001c989:	e8 b5 78 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c98e:	83 c4 10             	add    esp,0x10
c001c991:	80 fb 0f             	cmp    bl,0xf
c001c994:	76 10                	jbe    c001c9a6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001c996:	83 ec 0c             	sub    esp,0xc
c001c999:	68 37 4b 02 c0       	push   0xc0024b37
c001c99e:	e8 a0 78 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001c9a3:	83 c4 10             	add    esp,0x10
c001c9a6:	8d 04 36             	lea    eax,[esi+esi*1]
c001c9a9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c9ae:	83 c8 f0             	or     eax,0xfffffff0
c001c9b1:	ee                   	out    dx,al
c001c9b2:	ba fa 0c 00 00       	mov    edx,0xcfa
c001c9b7:	89 e8                	mov    eax,ebp
c001c9b9:	ee                   	out    dx,al
c001c9ba:	83 c4 0c             	add    esp,0xc
c001c9bd:	89 d8                	mov    eax,ebx
c001c9bf:	66 81 e7 fc 00       	and    di,0xfc
c001c9c4:	5b                   	pop    ebx
c001c9c5:	c1 e0 08             	shl    eax,0x8
c001c9c8:	5e                   	pop    esi
c001c9c9:	09 f8                	or     eax,edi
c001c9cb:	5f                   	pop    edi
c001c9cc:	66 0d 00 c0          	or     ax,0xc000
c001c9d0:	5d                   	pop    ebp
c001c9d1:	c3                   	ret    

c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c9d2:	57                   	push   edi
c001c9d3:	56                   	push   esi
c001c9d4:	53                   	push   ebx
c001c9d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9dd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001c9e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c9e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c9eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c9ef:	83 ff 01             	cmp    edi,0x1
c001c9f2:	75 3e                	jne    c001ca32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001c9f4:	89 de                	mov    esi,ebx
c001c9f6:	0f b6 c0             	movzx  eax,al
c001c9f9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001c9ff:	c1 e0 10             	shl    eax,0x10
c001ca02:	0f b6 c9             	movzx  ecx,cl
c001ca05:	09 f0                	or     eax,esi
c001ca07:	c1 e1 08             	shl    ecx,0x8
c001ca0a:	0f b6 d2             	movzx  edx,dl
c001ca0d:	09 c8                	or     eax,ecx
c001ca0f:	c1 e2 0b             	shl    edx,0xb
c001ca12:	09 d0                	or     eax,edx
c001ca14:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ca19:	0d 00 00 00 80       	or     eax,0x80000000
c001ca1e:	ef                   	out    dx,eax
c001ca1f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ca24:	ed                   	in     eax,dx
c001ca25:	83 e3 02             	and    ebx,0x2
c001ca28:	0f b6 cb             	movzx  ecx,bl
c001ca2b:	c1 e1 03             	shl    ecx,0x3
c001ca2e:	d3 e8                	shr    eax,cl
c001ca30:	eb 43                	jmp    c001ca75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ca32:	83 ff 02             	cmp    edi,0x2
c001ca35:	75 2c                	jne    c001ca63 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001ca37:	83 ec 0c             	sub    esp,0xc
c001ca3a:	0f b6 c9             	movzx  ecx,cl
c001ca3d:	0f b6 d2             	movzx  edx,dl
c001ca40:	0f b6 fb             	movzx  edi,bl
c001ca43:	0f b6 c0             	movzx  eax,al
c001ca46:	57                   	push   edi
c001ca47:	51                   	push   ecx
c001ca48:	52                   	push   edx
c001ca49:	50                   	push   eax
c001ca4a:	56                   	push   esi
c001ca4b:	e8 14 ff ff ff       	call   c001c964 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca50:	89 c2                	mov    edx,eax
c001ca52:	ed                   	in     eax,dx
c001ca53:	83 e3 02             	and    ebx,0x2
c001ca56:	83 c4 20             	add    esp,0x20
c001ca59:	0f b6 cb             	movzx  ecx,bl
c001ca5c:	c1 e1 03             	shl    ecx,0x3
c001ca5f:	d3 e8                	shr    eax,cl
c001ca61:	eb 12                	jmp    c001ca75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ca63:	83 ec 0c             	sub    esp,0xc
c001ca66:	68 67 4b 02 c0       	push   0xc0024b67
c001ca6b:	e8 d3 77 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001ca70:	83 c4 10             	add    esp,0x10
c001ca73:	31 c0                	xor    eax,eax
c001ca75:	5b                   	pop    ebx
c001ca76:	5e                   	pop    esi
c001ca77:	5f                   	pop    edi
c001ca78:	c3                   	ret    
c001ca79:	90                   	nop

c001ca7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ca7a:	83 ec 18             	sub    esp,0x18
c001ca7d:	6a 00                	push   0x0
c001ca7f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca84:	50                   	push   eax
c001ca85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca8a:	50                   	push   eax
c001ca8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca90:	50                   	push   eax
c001ca91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca95:	e8 38 ff ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca9a:	83 c4 2c             	add    esp,0x2c
c001ca9d:	c3                   	ret    

c001ca9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ca9e:	83 ec 18             	sub    esp,0x18
c001caa1:	6a 0e                	push   0xe
c001caa3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001caa8:	50                   	push   eax
c001caa9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001caae:	50                   	push   eax
c001caaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cab4:	50                   	push   eax
c001cab5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cab9:	e8 14 ff ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cabe:	83 c4 2c             	add    esp,0x2c
c001cac1:	0f b6 c0             	movzx  eax,al
c001cac4:	c3                   	ret    
c001cac5:	90                   	nop

c001cac6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cac6:	55                   	push   ebp
c001cac7:	57                   	push   edi
c001cac8:	56                   	push   esi
c001cac9:	53                   	push   ebx
c001caca:	83 ec 18             	sub    esp,0x18
c001cacd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cad2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cad7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cadc:	6a 0a                	push   0xa
c001cade:	56                   	push   esi
c001cadf:	55                   	push   ebp
c001cae0:	57                   	push   edi
c001cae1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cae5:	e8 e8 fe ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001caea:	83 c4 14             	add    esp,0x14
c001caed:	89 c3                	mov    ebx,eax
c001caef:	6a 0a                	push   0xa
c001caf1:	0f b6 db             	movzx  ebx,bl
c001caf4:	56                   	push   esi
c001caf5:	55                   	push   ebp
c001caf6:	57                   	push   edi
c001caf7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cafb:	e8 d2 fe ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb00:	83 c4 2c             	add    esp,0x2c
c001cb03:	25 00 ff 00 00       	and    eax,0xff00
c001cb08:	09 d8                	or     eax,ebx
c001cb0a:	5b                   	pop    ebx
c001cb0b:	5e                   	pop    esi
c001cb0c:	5f                   	pop    edi
c001cb0d:	5d                   	pop    ebp
c001cb0e:	c3                   	ret    
c001cb0f:	90                   	nop

c001cb10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cb10:	83 ec 18             	sub    esp,0x18
c001cb13:	6a 08                	push   0x8
c001cb15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb1a:	50                   	push   eax
c001cb1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb20:	50                   	push   eax
c001cb21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb26:	50                   	push   eax
c001cb27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb2b:	e8 a2 fe ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb30:	83 c4 2c             	add    esp,0x2c
c001cb33:	0f b6 c4             	movzx  eax,ah
c001cb36:	c3                   	ret    
c001cb37:	90                   	nop

c001cb38 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cb38:	83 ec 18             	sub    esp,0x18
c001cb3b:	6a 08                	push   0x8
c001cb3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb42:	50                   	push   eax
c001cb43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb48:	50                   	push   eax
c001cb49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb4e:	50                   	push   eax
c001cb4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb53:	e8 7a fe ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb58:	83 c4 2c             	add    esp,0x2c
c001cb5b:	c3                   	ret    

c001cb5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cb5c:	83 ec 18             	sub    esp,0x18
c001cb5f:	6a 3c                	push   0x3c
c001cb61:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb66:	50                   	push   eax
c001cb67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb6c:	50                   	push   eax
c001cb6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb72:	50                   	push   eax
c001cb73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb77:	e8 56 fe ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb7c:	83 c4 2c             	add    esp,0x2c
c001cb7f:	c3                   	ret    

c001cb80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cb80:	83 ec 18             	sub    esp,0x18
c001cb83:	6a 18                	push   0x18
c001cb85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb8a:	50                   	push   eax
c001cb8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb90:	50                   	push   eax
c001cb91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb96:	50                   	push   eax
c001cb97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb9b:	e8 32 fe ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cba0:	83 c4 2c             	add    esp,0x2c
c001cba3:	0f b6 c4             	movzx  eax,ah
c001cba6:	c3                   	ret    
c001cba7:	90                   	nop

c001cba8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cba8:	55                   	push   ebp
c001cba9:	57                   	push   edi
c001cbaa:	56                   	push   esi
c001cbab:	53                   	push   ebx
c001cbac:	83 ec 28             	sub    esp,0x28
c001cbaf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cbb3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cbb8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cbbd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cbc2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cbc9:	8d 43 12             	lea    eax,[ebx+0x12]
c001cbcc:	83 c3 10             	add    ebx,0x10
c001cbcf:	0f b6 c0             	movzx  eax,al
c001cbd2:	0f b6 db             	movzx  ebx,bl
c001cbd5:	50                   	push   eax
c001cbd6:	51                   	push   ecx
c001cbd7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cbdb:	57                   	push   edi
c001cbdc:	55                   	push   ebp
c001cbdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cbe1:	e8 ec fd ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbe6:	83 c4 14             	add    esp,0x14
c001cbe9:	89 c6                	mov    esi,eax
c001cbeb:	53                   	push   ebx
c001cbec:	c1 e6 10             	shl    esi,0x10
c001cbef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cbf3:	51                   	push   ecx
c001cbf4:	57                   	push   edi
c001cbf5:	55                   	push   ebp
c001cbf6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cbfa:	e8 d3 fd ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbff:	83 c4 3c             	add    esp,0x3c
c001cc02:	0f b7 c0             	movzx  eax,ax
c001cc05:	5b                   	pop    ebx
c001cc06:	09 f0                	or     eax,esi
c001cc08:	5e                   	pop    esi
c001cc09:	5f                   	pop    edi
c001cc0a:	5d                   	pop    ebp
c001cc0b:	c3                   	ret    

c001cc0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cc0c:	55                   	push   ebp
c001cc0d:	57                   	push   edi
c001cc0e:	56                   	push   esi
c001cc0f:	53                   	push   ebx
c001cc10:	83 ec 0c             	sub    esp,0xc
c001cc13:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc17:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cc1b:	89 f5                	mov    ebp,esi
c001cc1d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cc23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cc33:	83 f9 01             	cmp    ecx,0x1
c001cc36:	75 5d                	jne    c001cc95 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cc38:	0f b6 c8             	movzx  ecx,al
c001cc3b:	0f b6 d2             	movzx  edx,dl
c001cc3e:	c1 e1 10             	shl    ecx,0x10
c001cc41:	c1 e2 0b             	shl    edx,0xb
c001cc44:	89 f0                	mov    eax,esi
c001cc46:	25 fc 00 00 00       	and    eax,0xfc
c001cc4b:	09 c1                	or     ecx,eax
c001cc4d:	89 e8                	mov    eax,ebp
c001cc4f:	0f b6 c0             	movzx  eax,al
c001cc52:	c1 e0 08             	shl    eax,0x8
c001cc55:	09 c1                	or     ecx,eax
c001cc57:	09 d1                	or     ecx,edx
c001cc59:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc5e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cc64:	89 c8                	mov    eax,ecx
c001cc66:	ef                   	out    dx,eax
c001cc67:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cc6c:	ed                   	in     eax,dx
c001cc6d:	0f b7 db             	movzx  ebx,bx
c001cc70:	83 e6 02             	and    esi,0x2
c001cc73:	74 0a                	je     c001cc7f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cc75:	0f b7 d0             	movzx  edx,ax
c001cc78:	c1 e3 10             	shl    ebx,0x10
c001cc7b:	09 d3                	or     ebx,edx
c001cc7d:	eb 05                	jmp    c001cc84 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cc7f:	66 31 c0             	xor    ax,ax
c001cc82:	09 c3                	or     ebx,eax
c001cc84:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc89:	89 c8                	mov    eax,ecx
c001cc8b:	ef                   	out    dx,eax
c001cc8c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cc91:	89 d8                	mov    eax,ebx
c001cc93:	eb 41                	jmp    c001ccd6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cc95:	83 f9 02             	cmp    ecx,0x2
c001cc98:	75 45                	jne    c001ccdf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cc9a:	83 ec 0c             	sub    esp,0xc
c001cc9d:	0f b6 d2             	movzx  edx,dl
c001cca0:	89 f1                	mov    ecx,esi
c001cca2:	0f b6 c0             	movzx  eax,al
c001cca5:	0f b6 f1             	movzx  esi,cl
c001cca8:	89 e9                	mov    ecx,ebp
c001ccaa:	56                   	push   esi
c001ccab:	0f b6 c9             	movzx  ecx,cl
c001ccae:	51                   	push   ecx
c001ccaf:	52                   	push   edx
c001ccb0:	50                   	push   eax
c001ccb1:	57                   	push   edi
c001ccb2:	e8 ad fc ff ff       	call   c001c964 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccb7:	89 c2                	mov    edx,eax
c001ccb9:	ed                   	in     eax,dx
c001ccba:	83 c4 20             	add    esp,0x20
c001ccbd:	0f b7 db             	movzx  ebx,bx
c001ccc0:	f6 c2 02             	test   dl,0x2
c001ccc3:	74 0c                	je     c001ccd1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001ccc5:	0f b7 c8             	movzx  ecx,ax
c001ccc8:	89 d8                	mov    eax,ebx
c001ccca:	c1 e0 10             	shl    eax,0x10
c001cccd:	09 c8                	or     eax,ecx
c001cccf:	eb 05                	jmp    c001ccd6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001ccd1:	66 31 c0             	xor    ax,ax
c001ccd4:	09 d8                	or     eax,ebx
c001ccd6:	ef                   	out    dx,eax
c001ccd7:	83 c4 0c             	add    esp,0xc
c001ccda:	5b                   	pop    ebx
c001ccdb:	5e                   	pop    esi
c001ccdc:	5f                   	pop    edi
c001ccdd:	5d                   	pop    ebp
c001ccde:	c3                   	ret    
c001ccdf:	c7 44 24 20 67 4b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024b67
c001cce7:	83 c4 0c             	add    esp,0xc
c001ccea:	5b                   	pop    ebx
c001cceb:	5e                   	pop    esi
c001ccec:	5f                   	pop    edi
c001cced:	5d                   	pop    ebp
c001ccee:	e9 50 75 ff ff       	jmp    c0014243 <Krnl::panic(char const*)>
c001ccf3:	90                   	nop

c001ccf4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001ccf4:	55                   	push   ebp
c001ccf5:	57                   	push   edi
c001ccf6:	56                   	push   esi
c001ccf7:	53                   	push   ebx
c001ccf8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ccfe:	80 3d 8c 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f8c,0x0
c001cd05:	0f 85 84 00 00 00    	jne    c001cd8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001cd0b:	83 ec 0c             	sub    esp,0xc
c001cd0e:	68 14 01 00 00       	push   0x114
c001cd13:	e8 8b cc fe ff       	call   c00099a3 <malloc>
c001cd18:	83 c4 0c             	add    esp,0xc
c001cd1b:	89 c3                	mov    ebx,eax
c001cd1d:	ff 35 90 75 02 c0    	push   DWORD PTR ds:0xc0027590
c001cd23:	68 6d 4b 02 c0       	push   0xc0024b6d
c001cd28:	50                   	push   eax
c001cd29:	e8 40 02 ff ff       	call   c000cf6e <File::File(char const*, Process*)>
c001cd2e:	5a                   	pop    edx
c001cd2f:	59                   	pop    ecx
c001cd30:	6a 01                	push   0x1
c001cd32:	53                   	push   ebx
c001cd33:	e8 9a 02 ff ff       	call   c000cfd2 <File::open(FileOpenMode)>
c001cd38:	83 c4 0c             	add    esp,0xc
c001cd3b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001cd3f:	50                   	push   eax
c001cd40:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cd44:	50                   	push   eax
c001cd45:	53                   	push   ebx
c001cd46:	e8 33 05 ff ff       	call   c000d27e <File::stat(unsigned long long*, bool*)>
c001cd4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd4f:	40                   	inc    eax
c001cd50:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd53:	e8 4b cc fe ff       	call   c00099a3 <malloc>
c001cd58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd5c:	a3 88 7f 02 c0       	mov    ds:0xc0027f88,eax
c001cd61:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cd65:	5e                   	pop    esi
c001cd66:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cd68:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001cd6c:	51                   	push   ecx
c001cd6d:	50                   	push   eax
c001cd6e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cd72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cd76:	53                   	push   ebx
c001cd77:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cd7a:	83 c4 14             	add    esp,0x14
c001cd7d:	53                   	push   ebx
c001cd7e:	e8 ad 02 ff ff       	call   c000d030 <File::close()>
c001cd83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd87:	83 c4 10             	add    esp,0x10
c001cd8a:	a3 84 7f 02 c0       	mov    ds:0xc0027f84,eax
c001cd8f:	a1 84 7f 02 c0       	mov    eax,ds:0xc0027f84
c001cd94:	8b 15 88 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f88
c001cd9a:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd9d:	31 ff                	xor    edi,edi
c001cd9f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001cda7:	31 f6                	xor    esi,esi
c001cda9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001cdae:	31 db                	xor    ebx,ebx
c001cdb0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001cdb8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001cdbd:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001cdc4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001cdc8:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001cdcf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001cdd3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001cdd6:	0f 8e 6b 01 00 00    	jle    c001cf47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001cddc:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001cddf:	d4 40                	aam    0x40
c001cde1:	d5 39                	aad    0x39
c001cde3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cde7:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001cdeb:	d4 40                	aam    0x40
c001cded:	d5 39                	aad    0x39
c001cdef:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cdf3:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001cdf7:	d4 40                	aam    0x40
c001cdf9:	d5 39                	aad    0x39
c001cdfb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cdff:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001ce03:	d4 40                	aam    0x40
c001ce05:	d5 39                	aad    0x39
c001ce07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce0b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001ce0f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ce13:	3c 56                	cmp    al,0x56
c001ce15:	74 45                	je     c001ce5c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001ce17:	d4 40                	aam    0x40
c001ce19:	d5 39                	aad    0x39
c001ce1b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001ce1e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001ce22:	0f b6 c9             	movzx  ecx,cl
c001ce25:	c1 e1 04             	shl    ecx,0x4
c001ce28:	d4 40                	aam    0x40
c001ce2a:	d5 39                	aad    0x39
c001ce2c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001ce2f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001ce33:	0f b6 db             	movzx  ebx,bl
c001ce36:	09 cb                	or     ebx,ecx
c001ce38:	c1 e3 04             	shl    ebx,0x4
c001ce3b:	d4 40                	aam    0x40
c001ce3d:	d5 39                	aad    0x39
c001ce3f:	8d 48 d0             	lea    ecx,[eax-0x30]
c001ce42:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001ce46:	0f b6 c9             	movzx  ecx,cl
c001ce49:	09 cb                	or     ebx,ecx
c001ce4b:	c1 e3 04             	shl    ebx,0x4
c001ce4e:	89 d9                	mov    ecx,ebx
c001ce50:	d4 40                	aam    0x40
c001ce52:	d5 39                	aad    0x39
c001ce54:	8d 58 d0             	lea    ebx,[eax-0x30]
c001ce57:	0f b6 db             	movzx  ebx,bl
c001ce5a:	09 cb                	or     ebx,ecx
c001ce5c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001ce60:	80 f9 44             	cmp    cl,0x44
c001ce63:	74 47                	je     c001ceac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001ce65:	88 c8                	mov    al,cl
c001ce67:	d4 40                	aam    0x40
c001ce69:	d5 39                	aad    0x39
c001ce6b:	83 e8 30             	sub    eax,0x30
c001ce6e:	0f b6 e8             	movzx  ebp,al
c001ce71:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001ce75:	c1 e5 04             	shl    ebp,0x4
c001ce78:	d4 40                	aam    0x40
c001ce7a:	d5 39                	aad    0x39
c001ce7c:	83 e8 30             	sub    eax,0x30
c001ce7f:	0f b6 f0             	movzx  esi,al
c001ce82:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001ce86:	09 ee                	or     esi,ebp
c001ce88:	c1 e6 04             	shl    esi,0x4
c001ce8b:	d4 40                	aam    0x40
c001ce8d:	d5 39                	aad    0x39
c001ce8f:	83 e8 30             	sub    eax,0x30
c001ce92:	0f b6 e8             	movzx  ebp,al
c001ce95:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001ce99:	09 ee                	or     esi,ebp
c001ce9b:	c1 e6 04             	shl    esi,0x4
c001ce9e:	89 f5                	mov    ebp,esi
c001cea0:	d4 40                	aam    0x40
c001cea2:	d5 39                	aad    0x39
c001cea4:	83 e8 30             	sub    eax,0x30
c001cea7:	0f b6 f0             	movzx  esi,al
c001ceaa:	09 ee                	or     esi,ebp
c001ceac:	83 c7 10             	add    edi,0x10
c001ceaf:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001ceb3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001ceb6:	3c 0a                	cmp    al,0xa
c001ceb8:	74 09                	je     c001cec3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001ceba:	45                   	inc    ebp
c001cebb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001cebe:	75 16                	jne    c001ced6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001cec0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001cec3:	3c 0a                	cmp    al,0xa
c001cec5:	0f 94 c0             	sete   al
c001cec8:	0f b6 c0             	movzx  eax,al
c001cecb:	01 c7                	add    edi,eax
c001cecd:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001ced2:	75 0c                	jne    c001cee0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001ced4:	eb 15                	jmp    c001ceeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001ced6:	47                   	inc    edi
c001ced7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001ceda:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001cede:	eb d3                	jmp    c001ceb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001cee0:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001cee5:	0f 85 e8 fe ff ff    	jne    c001cdd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001ceeb:	80 f9 44             	cmp    cl,0x44
c001ceee:	74 0b                	je     c001cefb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001cef0:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001cef5:	0f 85 d8 fe ff ff    	jne    c001cdd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001cefb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ceff:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001cf03:	c1 e1 04             	shl    ecx,0x4
c001cf06:	83 e8 30             	sub    eax,0x30
c001cf09:	09 c8                	or     eax,ecx
c001cf0b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001cf0f:	0f 85 be fe ff ff    	jne    c001cdd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001cf15:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001cf19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cf1d:	c1 e1 04             	shl    ecx,0x4
c001cf20:	83 e8 30             	sub    eax,0x30
c001cf23:	09 c8                	or     eax,ecx
c001cf25:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001cf29:	0f 85 a4 fe ff ff    	jne    c001cdd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001cf2f:	50                   	push   eax
c001cf30:	50                   	push   eax
c001cf31:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cf35:	50                   	push   eax
c001cf36:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001cf3d:	e8 fe 37 fe ff       	call   c0000740 <strcpy>
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	eb 15                	jmp    c001cf5c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001cf47:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001cf4e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001cf59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001cf5c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001cf63:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cf69:	5b                   	pop    ebx
c001cf6a:	5e                   	pop    esi
c001cf6b:	5f                   	pop    edi
c001cf6c:	5d                   	pop    ebp
c001cf6d:	c3                   	ret    

c001cf6e <PCI::checkBus(unsigned char)>:
c001cf6e:	56                   	push   esi
c001cf6f:	53                   	push   ebx
c001cf70:	31 db                	xor    ebx,ebx
c001cf72:	51                   	push   ecx
c001cf73:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001cf78:	52                   	push   edx
c001cf79:	53                   	push   ebx
c001cf7a:	43                   	inc    ebx
c001cf7b:	56                   	push   esi
c001cf7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf80:	e8 37 03 00 00       	call   c001d2bc <PCI::checkDevice(unsigned char, unsigned char)>
c001cf85:	83 c4 10             	add    esp,0x10
c001cf88:	83 fb 20             	cmp    ebx,0x20
c001cf8b:	75 eb                	jne    c001cf78 <PCI::checkBus(unsigned char)+0xa>
c001cf8d:	58                   	pop    eax
c001cf8e:	5b                   	pop    ebx
c001cf8f:	5e                   	pop    esi
c001cf90:	c3                   	ret    
c001cf91:	90                   	nop

c001cf92 <PCI::foundDevice(PCIDeviceInfo)>:
c001cf92:	55                   	push   ebp
c001cf93:	57                   	push   edi
c001cf94:	56                   	push   esi
c001cf95:	53                   	push   ebx
c001cf96:	83 ec 1c             	sub    esp,0x1c
c001cf99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf9d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001cfa3:	0f 84 52 01 00 00    	je     c001d0fb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001cfa9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001cfad:	66 81 f9 06 04       	cmp    cx,0x406
c001cfb2:	75 2c                	jne    c001cfe0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001cfb4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001cfb9:	50                   	push   eax
c001cfba:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001cfbf:	50                   	push   eax
c001cfc0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001cfc5:	50                   	push   eax
c001cfc6:	56                   	push   esi
c001cfc7:	e8 b4 fb ff ff       	call   c001cb80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001cfcc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cfd0:	0f b6 c0             	movzx  eax,al
c001cfd3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cfd7:	83 c4 2c             	add    esp,0x2c
c001cfda:	5b                   	pop    ebx
c001cfdb:	5e                   	pop    esi
c001cfdc:	5f                   	pop    edi
c001cfdd:	5d                   	pop    ebp
c001cfde:	eb 8e                	jmp    c001cf6e <PCI::checkBus(unsigned char)>
c001cfe0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cfe4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001cfea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cfee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cff2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001cff6:	88 d3                	mov    bl,dl
c001cff8:	85 c0                	test   eax,eax
c001cffa:	74 33                	je     c001d02f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001cffc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cfff:	85 d2                	test   edx,edx
c001d001:	74 28                	je     c001d02b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d003:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d009:	31 ef                	xor    edi,ebp
c001d00b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d011:	75 18                	jne    c001d02b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d013:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d017:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d01d:	75 0c                	jne    c001d02b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d01f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d025:	0f 84 d0 00 00 00    	je     c001d0fb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d02b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d02d:	eb c9                	jmp    c001cff8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d02f:	66 81 f9 01 06       	cmp    cx,0x601
c001d034:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d038:	75 19                	jne    c001d053 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d03a:	83 ec 0c             	sub    esp,0xc
c001d03d:	68 64 01 00 00       	push   0x164
c001d042:	e8 5c c9 fe ff       	call   c00099a3 <malloc>
c001d047:	89 c5                	mov    ebp,eax
c001d049:	89 04 24             	mov    DWORD PTR [esp],eax
c001d04c:	e8 7b 0e 00 00       	call   c001decc <SATABus::SATABus()>
c001d051:	eb 1e                	jmp    c001d071 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d053:	66 81 f9 01 01       	cmp    cx,0x101
c001d058:	75 60                	jne    c001d0ba <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d05a:	83 ec 0c             	sub    esp,0xc
c001d05d:	68 70 02 00 00       	push   0x270
c001d062:	e8 3c c9 fe ff       	call   c00099a3 <malloc>
c001d067:	89 c5                	mov    ebp,eax
c001d069:	89 04 24             	mov    DWORD PTR [esp],eax
c001d06c:	e8 0f 03 00 00       	call   c001d380 <IDE::IDE()>
c001d071:	58                   	pop    eax
c001d072:	5a                   	pop    edx
c001d073:	55                   	push   ebp
c001d074:	56                   	push   esi
c001d075:	e8 ca 0d ff ff       	call   c000de44 <Device::addChild(Device*)>
c001d07a:	83 ec 1c             	sub    esp,0x1c
c001d07d:	b9 09 00 00 00       	mov    ecx,0x9
c001d082:	fc                   	cld    
c001d083:	89 e7                	mov    edi,esp
c001d085:	89 de                	mov    esi,ebx
c001d087:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d089:	55                   	push   ebp
c001d08a:	e8 c7 0c ff ff       	call   c000dd56 <Device::preOpenPCI(PCIDeviceInfo)>
c001d08f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d092:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d096:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d09e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d0a6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d0ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d0b1:	83 c4 4c             	add    esp,0x4c
c001d0b4:	5b                   	pop    ebx
c001d0b5:	5e                   	pop    esi
c001d0b6:	5f                   	pop    edi
c001d0b7:	5d                   	pop    ebp
c001d0b8:	ff e0                	jmp    eax
c001d0ba:	83 ec 0c             	sub    esp,0xc
c001d0bd:	68 58 01 00 00       	push   0x158
c001d0c2:	e8 dc c8 fe ff       	call   c00099a3 <malloc>
c001d0c7:	89 c5                	mov    ebp,eax
c001d0c9:	58                   	pop    eax
c001d0ca:	5a                   	pop    edx
c001d0cb:	68 86 4b 02 c0       	push   0xc0024b86
c001d0d0:	55                   	push   ebp
c001d0d1:	e8 78 10 ff ff       	call   c000e14e <DriverlessDevice::DriverlessDevice(char const*)>
c001d0d6:	59                   	pop    ecx
c001d0d7:	5f                   	pop    edi
c001d0d8:	55                   	push   ebp
c001d0d9:	56                   	push   esi
c001d0da:	e8 65 0d ff ff       	call   c000de44 <Device::addChild(Device*)>
c001d0df:	b9 09 00 00 00       	mov    ecx,0x9
c001d0e4:	fc                   	cld    
c001d0e5:	89 df                	mov    edi,ebx
c001d0e7:	89 de                	mov    esi,ebx
c001d0e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d0eb:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d0ef:	83 c4 2c             	add    esp,0x2c
c001d0f2:	5b                   	pop    ebx
c001d0f3:	5e                   	pop    esi
c001d0f4:	5f                   	pop    edi
c001d0f5:	5d                   	pop    ebp
c001d0f6:	e9 5b 0c ff ff       	jmp    c000dd56 <Device::preOpenPCI(PCIDeviceInfo)>
c001d0fb:	83 c4 1c             	add    esp,0x1c
c001d0fe:	5b                   	pop    ebx
c001d0ff:	5e                   	pop    esi
c001d100:	5f                   	pop    edi
c001d101:	5d                   	pop    ebp
c001d102:	c3                   	ret    
c001d103:	90                   	nop

c001d104 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d104:	55                   	push   ebp
c001d105:	57                   	push   edi
c001d106:	56                   	push   esi
c001d107:	53                   	push   ebx
c001d108:	83 ec 68             	sub    esp,0x68
c001d10b:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d10f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d116:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d11a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d121:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d126:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d12a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d131:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d136:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d13a:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d13f:	6a 0c                	push   0xc
c001d141:	57                   	push   edi
c001d142:	53                   	push   ebx
c001d143:	56                   	push   esi
c001d144:	55                   	push   ebp
c001d145:	e8 88 f8 ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d14a:	83 c4 20             	add    esp,0x20
c001d14d:	57                   	push   edi
c001d14e:	53                   	push   ebx
c001d14f:	56                   	push   esi
c001d150:	55                   	push   ebp
c001d151:	e8 70 f9 ff ff       	call   c001cac6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d156:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d15b:	57                   	push   edi
c001d15c:	53                   	push   ebx
c001d15d:	56                   	push   esi
c001d15e:	55                   	push   ebp
c001d15f:	e8 f8 f9 ff ff       	call   c001cb5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d164:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d168:	83 c4 14             	add    esp,0x14
c001d16b:	6a 3c                	push   0x3c
c001d16d:	57                   	push   edi
c001d16e:	53                   	push   ebx
c001d16f:	56                   	push   esi
c001d170:	55                   	push   ebp
c001d171:	e8 5c f8 ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d176:	0f b6 c4             	movzx  eax,ah
c001d179:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d17d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d181:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d185:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001d18a:	83 c4 20             	add    esp,0x20
c001d18d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d193:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d19a:	74 7c                	je     c001d218 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d19c:	31 c0                	xor    eax,eax
c001d19e:	8b 15 68 60 02 c0    	mov    edx,DWORD PTR ds:0xc0026068
c001d1a4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d1aa:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d1b0:	7e 66                	jle    c001d218 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d1b2:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d1b5:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d1bc:	39 cb                	cmp    ebx,ecx
c001d1be:	75 55                	jne    c001d215 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d1c0:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d1c7:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d1cb:	75 48                	jne    c001d215 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d1cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1d1:	83 ec 0c             	sub    esp,0xc
c001d1d4:	68 a0 4b 02 c0       	push   0xc0024ba0
c001d1d9:	e8 26 f8 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001d1de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1e2:	8b 15 68 60 02 c0    	mov    edx,DWORD PTR ds:0xc0026068
c001d1e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d1ec:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d1f2:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d1fa:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d1fe:	52                   	push   edx
c001d1ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d203:	53                   	push   ebx
c001d204:	68 c5 4b 02 c0       	push   0xc0024bc5
c001d209:	e8 f6 f7 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001d20e:	83 c4 20             	add    esp,0x20
c001d211:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d215:	40                   	inc    eax
c001d216:	eb 86                	jmp    c001d19e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d218:	31 d2                	xor    edx,edx
c001d21a:	83 ec 0c             	sub    esp,0xc
c001d21d:	57                   	push   edi
c001d21e:	53                   	push   ebx
c001d21f:	56                   	push   esi
c001d220:	52                   	push   edx
c001d221:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d225:	55                   	push   ebp
c001d226:	e8 7d f9 ff ff       	call   c001cba8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d22b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d22f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d233:	42                   	inc    edx
c001d234:	83 c4 20             	add    esp,0x20
c001d237:	83 fa 06             	cmp    edx,0x6
c001d23a:	75 de                	jne    c001d21a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d23c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d241:	83 ec 0c             	sub    esp,0xc
c001d244:	86 e0                	xchg   al,ah
c001d246:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d24b:	6a 02                	push   0x2
c001d24d:	57                   	push   edi
c001d24e:	53                   	push   ebx
c001d24f:	56                   	push   esi
c001d250:	55                   	push   ebp
c001d251:	e8 7c f7 ff ff       	call   c001c9d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d256:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d25b:	83 c4 20             	add    esp,0x20
c001d25e:	57                   	push   edi
c001d25f:	53                   	push   ebx
c001d260:	56                   	push   esi
c001d261:	55                   	push   ebp
c001d262:	e8 a9 f8 ff ff       	call   c001cb10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d267:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d26b:	57                   	push   edi
c001d26c:	53                   	push   ebx
c001d26d:	56                   	push   esi
c001d26e:	55                   	push   ebp
c001d26f:	e8 06 f8 ff ff       	call   c001ca7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d274:	b9 09 00 00 00       	mov    ecx,0x9
c001d279:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d27e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d282:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d286:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d28a:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d28e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d292:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d296:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d29a:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d29e:	83 ec 0c             	sub    esp,0xc
c001d2a1:	fc                   	cld    
c001d2a2:	89 e7                	mov    edi,esp
c001d2a4:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d2a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d2aa:	55                   	push   ebp
c001d2ab:	e8 e2 fc ff ff       	call   c001cf92 <PCI::foundDevice(PCIDeviceInfo)>
c001d2b0:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d2b6:	5b                   	pop    ebx
c001d2b7:	5e                   	pop    esi
c001d2b8:	5f                   	pop    edi
c001d2b9:	5d                   	pop    ebp
c001d2ba:	c3                   	ret    
c001d2bb:	90                   	nop

c001d2bc <PCI::checkDevice(unsigned char, unsigned char)>:
c001d2bc:	55                   	push   ebp
c001d2bd:	57                   	push   edi
c001d2be:	56                   	push   esi
c001d2bf:	53                   	push   ebx
c001d2c0:	83 ec 0c             	sub    esp,0xc
c001d2c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d2c7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d2cc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d2d1:	6a 00                	push   0x0
c001d2d3:	56                   	push   esi
c001d2d4:	57                   	push   edi
c001d2d5:	55                   	push   ebp
c001d2d6:	e8 9f f7 ff ff       	call   c001ca7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d2db:	6a 00                	push   0x0
c001d2dd:	56                   	push   esi
c001d2de:	57                   	push   edi
c001d2df:	55                   	push   ebp
c001d2e0:	e8 1f fe ff ff       	call   c001d104 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d2e5:	83 c4 20             	add    esp,0x20
c001d2e8:	6a 00                	push   0x0
c001d2ea:	56                   	push   esi
c001d2eb:	57                   	push   edi
c001d2ec:	55                   	push   ebp
c001d2ed:	e8 ac f7 ff ff       	call   c001ca9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d2f2:	83 c4 10             	add    esp,0x10
c001d2f5:	84 c0                	test   al,al
c001d2f7:	79 27                	jns    c001d320 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d2f9:	bb 01 00 00 00       	mov    ebx,0x1
c001d2fe:	53                   	push   ebx
c001d2ff:	56                   	push   esi
c001d300:	57                   	push   edi
c001d301:	55                   	push   ebp
c001d302:	e8 73 f7 ff ff       	call   c001ca7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d307:	83 c4 10             	add    esp,0x10
c001d30a:	66 40                	inc    ax
c001d30c:	74 0c                	je     c001d31a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d30e:	53                   	push   ebx
c001d30f:	56                   	push   esi
c001d310:	57                   	push   edi
c001d311:	55                   	push   ebp
c001d312:	e8 ed fd ff ff       	call   c001d104 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d317:	83 c4 10             	add    esp,0x10
c001d31a:	43                   	inc    ebx
c001d31b:	83 fb 08             	cmp    ebx,0x8
c001d31e:	75 de                	jne    c001d2fe <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d320:	83 c4 0c             	add    esp,0xc
c001d323:	5b                   	pop    ebx
c001d324:	5e                   	pop    esi
c001d325:	5f                   	pop    edi
c001d326:	5d                   	pop    ebp
c001d327:	c3                   	ret    

c001d328 <PCI::detect()>:
c001d328:	56                   	push   esi
c001d329:	53                   	push   ebx
c001d32a:	53                   	push   ebx
c001d32b:	31 db                	xor    ebx,ebx
c001d32d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d331:	6a 00                	push   0x0
c001d333:	6a 00                	push   0x0
c001d335:	6a 00                	push   0x0
c001d337:	56                   	push   esi
c001d338:	e8 61 f7 ff ff       	call   c001ca9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d33d:	83 c4 10             	add    esp,0x10
c001d340:	a8 80                	test   al,0x80
c001d342:	75 21                	jne    c001d365 <PCI::detect()+0x3d>
c001d344:	51                   	push   ecx
c001d345:	51                   	push   ecx
c001d346:	6a 00                	push   0x0
c001d348:	56                   	push   esi
c001d349:	e8 20 fc ff ff       	call   c001cf6e <PCI::checkBus(unsigned char)>
c001d34e:	83 c4 10             	add    esp,0x10
c001d351:	eb 24                	jmp    c001d377 <PCI::detect()+0x4f>
c001d353:	52                   	push   edx
c001d354:	52                   	push   edx
c001d355:	53                   	push   ebx
c001d356:	43                   	inc    ebx
c001d357:	56                   	push   esi
c001d358:	e8 11 fc ff ff       	call   c001cf6e <PCI::checkBus(unsigned char)>
c001d35d:	83 c4 10             	add    esp,0x10
c001d360:	83 fb 08             	cmp    ebx,0x8
c001d363:	74 12                	je     c001d377 <PCI::detect()+0x4f>
c001d365:	53                   	push   ebx
c001d366:	6a 00                	push   0x0
c001d368:	6a 00                	push   0x0
c001d36a:	56                   	push   esi
c001d36b:	e8 0a f7 ff ff       	call   c001ca7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d370:	83 c4 10             	add    esp,0x10
c001d373:	66 40                	inc    ax
c001d375:	74 dc                	je     c001d353 <PCI::detect()+0x2b>
c001d377:	58                   	pop    eax
c001d378:	5b                   	pop    ebx
c001d379:	5e                   	pop    esi
c001d37a:	c3                   	ret    
c001d37b:	90                   	nop

c001d37c <IDE::close(int, int, void*)>:
c001d37c:	83 c8 ff             	or     eax,0xffffffff
c001d37f:	c3                   	ret    

c001d380 <IDE::IDE()>:
c001d380:	83 ec 0c             	sub    esp,0xc
c001d383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d387:	83 ec 08             	sub    esp,0x8
c001d38a:	68 0c 4c 02 c0       	push   0xc0024c0c
c001d38f:	50                   	push   eax
c001d390:	e8 5d 0e ff ff       	call   c000e1f2 <HardDiskController::HardDiskController(char const*)>
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	ba 9c 4c 02 c0       	mov    edx,0xc0024c9c
c001d39d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a1:	89 10                	mov    DWORD PTR [eax],edx
c001d3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d3ae:	90                   	nop
c001d3af:	83 c4 0c             	add    esp,0xc
c001d3b2:	c3                   	ret    
c001d3b3:	90                   	nop

c001d3b4 <IDE::prepareInterrupt(unsigned char)>:
c001d3b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d3b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d3bd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d3c5:	c3                   	ret    

c001d3c6 <selectDrive(unsigned char, unsigned char)>:
c001d3c6:	c3                   	ret    
c001d3c7:	90                   	nop

c001d3c8 <IDE::getBase(unsigned char)>:
c001d3c8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d3cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3d1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d3d9:	c3                   	ret    

c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d3da:	55                   	push   ebp
c001d3db:	57                   	push   edi
c001d3dc:	56                   	push   esi
c001d3dd:	53                   	push   ebx
c001d3de:	83 ec 1c             	sub    esp,0x1c
c001d3e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d3e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d3e9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d3ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d3f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d3f4:	80 f9 03             	cmp    cl,0x3
c001d3f7:	77 51                	ja     c001d44a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d3f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3fd:	0f b6 f2             	movzx  esi,dl
c001d400:	0f b6 db             	movzx  ebx,bl
c001d403:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d406:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d40a:	83 ca 80             	or     edx,0xffffff80
c001d40d:	0f b6 d2             	movzx  edx,dl
c001d410:	52                   	push   edx
c001d411:	6a 0c                	push   0xc
c001d413:	56                   	push   esi
c001d414:	57                   	push   edi
c001d415:	e8 c0 ff ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d41a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d41f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d423:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d427:	ee                   	out    dx,al
c001d428:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d42d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d431:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d435:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d439:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d441:	83 c4 2c             	add    esp,0x2c
c001d444:	5b                   	pop    ebx
c001d445:	5e                   	pop    esi
c001d446:	5f                   	pop    edi
c001d447:	5d                   	pop    ebp
c001d448:	eb 90                	jmp    c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d44a:	80 fb 07             	cmp    bl,0x7
c001d44d:	77 12                	ja     c001d461 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d44f:	0f b6 d2             	movzx  edx,dl
c001d452:	0f b6 db             	movzx  ebx,bl
c001d455:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d45d:	89 da                	mov    edx,ebx
c001d45f:	eb 2f                	jmp    c001d490 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d461:	80 fb 0d             	cmp    bl,0xd
c001d464:	77 13                	ja     c001d479 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d466:	0f b6 d2             	movzx  edx,dl
c001d469:	0f b6 db             	movzx  ebx,bl
c001d46c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d473:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d477:	eb 17                	jmp    c001d490 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d479:	80 fb 15             	cmp    bl,0x15
c001d47c:	77 13                	ja     c001d491 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d47e:	0f b6 d2             	movzx  edx,dl
c001d481:	0f b6 db             	movzx  ebx,bl
c001d484:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d48c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d490:	ee                   	out    dx,al
c001d491:	83 c4 1c             	add    esp,0x1c
c001d494:	5b                   	pop    ebx
c001d495:	5e                   	pop    esi
c001d496:	5f                   	pop    edi
c001d497:	5d                   	pop    ebp
c001d498:	c3                   	ret    
c001d499:	90                   	nop

c001d49a <IDE::read(unsigned char, unsigned char)>:
c001d49a:	55                   	push   ebp
c001d49b:	57                   	push   edi
c001d49c:	56                   	push   esi
c001d49d:	53                   	push   ebx
c001d49e:	83 ec 1c             	sub    esp,0x1c
c001d4a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d4a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d4a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d4ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d4b0:	3c 03                	cmp    al,0x3
c001d4b2:	77 43                	ja     c001d4f7 <IDE::read(unsigned char, unsigned char)+0x5d>
c001d4b4:	0f b6 f2             	movzx  esi,dl
c001d4b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d4ba:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d4be:	83 c8 80             	or     eax,0xffffff80
c001d4c1:	0f b6 c0             	movzx  eax,al
c001d4c4:	50                   	push   eax
c001d4c5:	6a 0c                	push   0xc
c001d4c7:	56                   	push   esi
c001d4c8:	57                   	push   edi
c001d4c9:	e8 0c ff ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4ce:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d4d3:	0f b6 c3             	movzx  eax,bl
c001d4d6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d4da:	ec                   	in     al,dx
c001d4db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d4df:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d4e4:	52                   	push   edx
c001d4e5:	6a 0c                	push   0xc
c001d4e7:	56                   	push   esi
c001d4e8:	57                   	push   edi
c001d4e9:	e8 ec fe ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4ee:	83 c4 20             	add    esp,0x20
c001d4f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d4f5:	eb 49                	jmp    c001d540 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d4f7:	80 fb 07             	cmp    bl,0x7
c001d4fa:	77 12                	ja     c001d50e <IDE::read(unsigned char, unsigned char)+0x74>
c001d4fc:	0f b6 d2             	movzx  edx,dl
c001d4ff:	0f b6 c3             	movzx  eax,bl
c001d502:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d50a:	89 c2                	mov    edx,eax
c001d50c:	eb 31                	jmp    c001d53f <IDE::read(unsigned char, unsigned char)+0xa5>
c001d50e:	80 fb 0d             	cmp    bl,0xd
c001d511:	77 13                	ja     c001d526 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d513:	0f b6 d2             	movzx  edx,dl
c001d516:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d51d:	0f b6 d3             	movzx  edx,bl
c001d520:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d524:	eb 19                	jmp    c001d53f <IDE::read(unsigned char, unsigned char)+0xa5>
c001d526:	31 c0                	xor    eax,eax
c001d528:	80 fb 15             	cmp    bl,0x15
c001d52b:	77 13                	ja     c001d540 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d52d:	0f b6 d2             	movzx  edx,dl
c001d530:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d538:	0f b6 d3             	movzx  edx,bl
c001d53b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d53f:	ec                   	in     al,dx
c001d540:	83 c4 1c             	add    esp,0x1c
c001d543:	5b                   	pop    ebx
c001d544:	5e                   	pop    esi
c001d545:	5f                   	pop    edi
c001d546:	5d                   	pop    ebp
c001d547:	c3                   	ret    

c001d548 <IDE::waitInterrupt(unsigned char)>:
c001d548:	55                   	push   ebp
c001d549:	57                   	push   edi
c001d54a:	56                   	push   esi
c001d54b:	53                   	push   ebx
c001d54c:	31 db                	xor    ebx,ebx
c001d54e:	83 ec 0c             	sub    esp,0xc
c001d551:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d555:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d55a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d562:	89 e8                	mov    eax,ebp
c001d564:	84 c0                	test   al,al
c001d566:	75 30                	jne    c001d598 <IDE::waitInterrupt(unsigned char)+0x50>
c001d568:	50                   	push   eax
c001d569:	6a 0c                	push   0xc
c001d56b:	56                   	push   esi
c001d56c:	57                   	push   edi
c001d56d:	e8 28 ff ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001d572:	83 c4 10             	add    esp,0x10
c001d575:	a8 01                	test   al,0x1
c001d577:	75 27                	jne    c001d5a0 <IDE::waitInterrupt(unsigned char)+0x58>
c001d579:	f6 c3 04             	test   bl,0x4
c001d57c:	75 12                	jne    c001d590 <IDE::waitInterrupt(unsigned char)+0x48>
c001d57e:	83 fb 32             	cmp    ebx,0x32
c001d581:	7e 0d                	jle    c001d590 <IDE::waitInterrupt(unsigned char)+0x48>
c001d583:	83 ec 0c             	sub    esp,0xc
c001d586:	6a 64                	push   0x64
c001d588:	e8 1f ab ff ff       	call   c00180ac <milliTenthSleep(unsigned int)>
c001d58d:	83 c4 10             	add    esp,0x10
c001d590:	83 fb 3c             	cmp    ebx,0x3c
c001d593:	74 0b                	je     c001d5a0 <IDE::waitInterrupt(unsigned char)+0x58>
c001d595:	43                   	inc    ebx
c001d596:	eb c2                	jmp    c001d55a <IDE::waitInterrupt(unsigned char)+0x12>
c001d598:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d5a0:	83 c4 0c             	add    esp,0xc
c001d5a3:	89 e8                	mov    eax,ebp
c001d5a5:	5b                   	pop    ebx
c001d5a6:	5e                   	pop    esi
c001d5a7:	5f                   	pop    edi
c001d5a8:	5d                   	pop    ebp
c001d5a9:	c3                   	ret    

c001d5aa <ideChannel0IRQHandler(regs*, void*)>:
c001d5aa:	83 ec 10             	sub    esp,0x10
c001d5ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d5b1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d5b8:	6a 07                	push   0x7
c001d5ba:	6a 00                	push   0x0
c001d5bc:	50                   	push   eax
c001d5bd:	e8 d8 fe ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001d5c2:	83 c4 1c             	add    esp,0x1c
c001d5c5:	c3                   	ret    

c001d5c6 <ideChannel1IRQHandler(regs*, void*)>:
c001d5c6:	83 ec 10             	sub    esp,0x10
c001d5c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d5cd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d5d4:	6a 07                	push   0x7
c001d5d6:	6a 01                	push   0x1
c001d5d8:	50                   	push   eax
c001d5d9:	e8 bc fe ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001d5de:	83 c4 1c             	add    esp,0x1c
c001d5e1:	c3                   	ret    

c001d5e2 <IDE::enableIRQs(unsigned char, bool)>:
c001d5e2:	57                   	push   edi
c001d5e3:	56                   	push   esi
c001d5e4:	be 04 00 00 00       	mov    esi,0x4
c001d5e9:	53                   	push   ebx
c001d5ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d5ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5f3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d5f8:	0f 94 c0             	sete   al
c001d5fb:	d1 e0                	shl    eax,1
c001d5fd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d604:	0f b6 c0             	movzx  eax,al
c001d607:	50                   	push   eax
c001d608:	6a 0c                	push   0xc
c001d60a:	57                   	push   edi
c001d60b:	53                   	push   ebx
c001d60c:	e8 c9 fd ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d611:	83 c4 10             	add    esp,0x10
c001d614:	50                   	push   eax
c001d615:	6a 0c                	push   0xc
c001d617:	57                   	push   edi
c001d618:	53                   	push   ebx
c001d619:	e8 7c fe ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	4e                   	dec    esi
c001d622:	75 f0                	jne    c001d614 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d624:	5b                   	pop    ebx
c001d625:	5e                   	pop    esi
c001d626:	5f                   	pop    edi
c001d627:	c3                   	ret    

c001d628 <IDE::open(int, int, void*)>:
c001d628:	55                   	push   ebp
c001d629:	57                   	push   edi
c001d62a:	56                   	push   esi
c001d62b:	53                   	push   ebx
c001d62c:	83 ec 1c             	sub    esp,0x1c
c001d62f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d633:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d63c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d645:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d64c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d653:	0f 85 b0 02 00 00    	jne    c001d909 <IDE::open(int, int, void*)+0x2e1>
c001d659:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d65f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d663:	83 e0 7f             	and    eax,0x7f
c001d666:	3c 05                	cmp    al,0x5
c001d668:	74 04                	je     c001d66e <IDE::open(int, int, void*)+0x46>
c001d66a:	3c 0f                	cmp    al,0xf
c001d66c:	75 32                	jne    c001d6a0 <IDE::open(int, int, void*)+0x78>
c001d66e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d674:	83 e0 fc             	and    eax,0xfffffffc
c001d677:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d67e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d684:	83 e0 fc             	and    eax,0xfffffffc
c001d687:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d68e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d694:	83 e0 fc             	and    eax,0xfffffffc
c001d697:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d69e:	eb 14                	jmp    c001d6b4 <IDE::open(int, int, void*)+0x8c>
c001d6a0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d6aa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d6b4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d6bb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d6c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6c6:	89 c6                	mov    esi,eax
c001d6c8:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d6cd:	c1 e6 10             	shl    esi,0x10
c001d6d0:	89 e8                	mov    eax,ebp
c001d6d2:	89 fa                	mov    edx,edi
c001d6d4:	c1 e0 0b             	shl    eax,0xb
c001d6d7:	09 f0                	or     eax,esi
c001d6d9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d6e0:	c1 e6 08             	shl    esi,0x8
c001d6e3:	09 c6                	or     esi,eax
c001d6e5:	89 f0                	mov    eax,esi
c001d6e7:	0d 08 00 00 80       	or     eax,0x80000008
c001d6ec:	ef                   	out    dx,eax
c001d6ed:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d6f2:	89 ca                	mov    edx,ecx
c001d6f4:	ed                   	in     eax,dx
c001d6f5:	c1 e8 10             	shr    eax,0x10
c001d6f8:	3d ff ff 00 00       	cmp    eax,0xffff
c001d6fd:	0f 84 f5 00 00 00    	je     c001d7f8 <IDE::open(int, int, void*)+0x1d0>
c001d703:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001d709:	89 fa                	mov    edx,edi
c001d70b:	89 f0                	mov    eax,esi
c001d70d:	ef                   	out    dx,eax
c001d70e:	b0 fe                	mov    al,0xfe
c001d710:	89 ca                	mov    edx,ecx
c001d712:	ee                   	out    dx,al
c001d713:	89 f0                	mov    eax,esi
c001d715:	89 fa                	mov    edx,edi
c001d717:	ef                   	out    dx,eax
c001d718:	89 ca                	mov    edx,ecx
c001d71a:	ed                   	in     eax,dx
c001d71b:	3c fe                	cmp    al,0xfe
c001d71d:	0f 85 a9 00 00 00    	jne    c001d7cc <IDE::open(int, int, void*)+0x1a4>
c001d723:	8b 15 68 60 02 c0    	mov    edx,DWORD PTR ds:0xc0026068
c001d729:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001d730:	74 33                	je     c001d765 <IDE::open(int, int, void*)+0x13d>
c001d732:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001d738:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001d73c:	40                   	inc    eax
c001d73d:	83 ec 0c             	sub    esp,0xc
c001d740:	0f b6 c0             	movzx  eax,al
c001d743:	50                   	push   eax
c001d744:	55                   	push   ebp
c001d745:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d749:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001d74f:	51                   	push   ecx
c001d750:	e8 49 46 ff ff       	call   c0011d9e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001d755:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001d75a:	83 c4 1c             	add    esp,0x1c
c001d75d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d763:	eb 0a                	jmp    c001d76f <IDE::open(int, int, void*)+0x147>
c001d765:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d76f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d776:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d77d:	c1 e1 10             	shl    ecx,0x10
c001d780:	c1 e0 08             	shl    eax,0x8
c001d783:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d788:	09 c1                	or     ecx,eax
c001d78a:	89 fa                	mov    edx,edi
c001d78c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d793:	c1 e0 0b             	shl    eax,0xb
c001d796:	09 c1                	or     ecx,eax
c001d798:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d79e:	89 c8                	mov    eax,ecx
c001d7a0:	ef                   	out    dx,eax
c001d7a1:	be fc 0c 00 00       	mov    esi,0xcfc
c001d7a6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001d7ac:	89 f2                	mov    edx,esi
c001d7ae:	ee                   	out    dx,al
c001d7af:	89 c8                	mov    eax,ecx
c001d7b1:	89 fa                	mov    edx,edi
c001d7b3:	ef                   	out    dx,eax
c001d7b4:	89 f2                	mov    edx,esi
c001d7b6:	ed                   	in     eax,dx
c001d7b7:	0f b6 c0             	movzx  eax,al
c001d7ba:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001d7c0:	74 46                	je     c001d808 <IDE::open(int, int, void*)+0x1e0>
c001d7c2:	83 ec 0c             	sub    esp,0xc
c001d7c5:	68 24 4c 02 c0       	push   0xc0024c24
c001d7ca:	eb 34                	jmp    c001d800 <IDE::open(int, int, void*)+0x1d8>
c001d7cc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001d7d5:	75 17                	jne    c001d7ee <IDE::open(int, int, void*)+0x1c6>
c001d7d7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001d7dc:	74 07                	je     c001d7e5 <IDE::open(int, int, void*)+0x1bd>
c001d7de:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001d7e3:	75 09                	jne    c001d7ee <IDE::open(int, int, void*)+0x1c6>
c001d7e5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d7ec:	eb 1a                	jmp    c001d808 <IDE::open(int, int, void*)+0x1e0>
c001d7ee:	83 ec 0c             	sub    esp,0xc
c001d7f1:	68 2c 4c 02 c0       	push   0xc0024c2c
c001d7f6:	eb 08                	jmp    c001d800 <IDE::open(int, int, void*)+0x1d8>
c001d7f8:	83 ec 0c             	sub    esp,0xc
c001d7fb:	68 5d 4c 02 c0       	push   0xc0024c5d
c001d800:	e8 3e 6a ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001d805:	83 c4 10             	add    esp,0x10
c001d808:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001d80f:	79 1a                	jns    c001d82b <IDE::open(int, int, void*)+0x203>
c001d811:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001d817:	83 e0 fc             	and    eax,0xfffffffc
c001d81a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001d821:	83 c0 08             	add    eax,0x8
c001d824:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001d82b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001d831:	89 c2                	mov    edx,eax
c001d833:	83 e2 0f             	and    edx,0xf
c001d836:	66 83 fa 08          	cmp    dx,0x8
c001d83a:	75 0a                	jne    c001d846 <IDE::open(int, int, void*)+0x21e>
c001d83c:	83 e8 02             	sub    eax,0x2
c001d83f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d846:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001d84c:	89 c2                	mov    edx,eax
c001d84e:	83 e2 0f             	and    edx,0xf
c001d851:	66 83 fa 08          	cmp    dx,0x8
c001d855:	75 0a                	jne    c001d861 <IDE::open(int, int, void*)+0x239>
c001d857:	83 e8 02             	sub    eax,0x2
c001d85a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001d861:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001d868:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001d86f:	89 d0                	mov    eax,edx
c001d871:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d874:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d878:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001d87c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001d87f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001d884:	0f b6 c9             	movzx  ecx,cl
c001d887:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001d88e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d891:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d895:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001d899:	8d 50 02             	lea    edx,[eax+0x2]
c001d89c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001d8a1:	0f b6 d2             	movzx  edx,dl
c001d8a4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001d8aa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d8ad:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d8b1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001d8b5:	8d 48 03             	lea    ecx,[eax+0x3]
c001d8b8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001d8bd:	0f b6 c9             	movzx  ecx,cl
c001d8c0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001d8c6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d8c9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d8cd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001d8d1:	8d 50 04             	lea    edx,[eax+0x4]
c001d8d4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001d8da:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001d8df:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001d8e6:	66 85 f6             	test   si,si
c001d8e9:	74 5b                	je     c001d946 <IDE::open(int, int, void*)+0x31e>
c001d8eb:	0f b6 d2             	movzx  edx,dl
c001d8ee:	83 c0 05             	add    eax,0x5
c001d8f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d8f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d8f8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001d8fc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001d902:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001d907:	eb 3d                	jmp    c001d946 <IDE::open(int, int, void*)+0x31e>
c001d909:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001d90f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d916:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d91d:	66 05 06 02          	add    ax,0x206
c001d921:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d928:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001d92f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d936:	66 05 06 02          	add    ax,0x206
c001d93a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001d941:	e9 e5 fe ff ff       	jmp    c001d82b <IDE::open(int, int, void*)+0x203>
c001d946:	50                   	push   eax
c001d947:	50                   	push   eax
c001d948:	6a 00                	push   0x0
c001d94a:	53                   	push   ebx
c001d94b:	e8 64 fa ff ff       	call   c001d3b4 <IDE::prepareInterrupt(unsigned char)>
c001d950:	5a                   	pop    edx
c001d951:	59                   	pop    ecx
c001d952:	6a 01                	push   0x1
c001d954:	53                   	push   ebx
c001d955:	e8 5a fa ff ff       	call   c001d3b4 <IDE::prepareInterrupt(unsigned char)>
c001d95a:	83 c4 0c             	add    esp,0xc
c001d95d:	6a 00                	push   0x0
c001d95f:	6a 00                	push   0x0
c001d961:	53                   	push   ebx
c001d962:	e8 7b fc ff ff       	call   c001d5e2 <IDE::enableIRQs(unsigned char, bool)>
c001d967:	83 c4 0c             	add    esp,0xc
c001d96a:	6a 00                	push   0x0
c001d96c:	6a 01                	push   0x1
c001d96e:	53                   	push   ebx
c001d96f:	e8 6e fc ff ff       	call   c001d5e2 <IDE::enableIRQs(unsigned char, bool)>
c001d974:	83 c4 10             	add    esp,0x10
c001d977:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001d97e:	74 34                	je     c001d9b4 <IDE::open(int, int, void*)+0x38c>
c001d980:	83 ec 0c             	sub    esp,0xc
c001d983:	53                   	push   ebx
c001d984:	6a 01                	push   0x1
c001d986:	68 aa d5 01 c0       	push   0xc001d5aa
c001d98b:	6a 0e                	push   0xe
c001d98d:	53                   	push   ebx
c001d98e:	e8 29 04 ff ff       	call   c000ddbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d993:	83 c4 14             	add    esp,0x14
c001d996:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d99c:	53                   	push   ebx
c001d99d:	6a 01                	push   0x1
c001d99f:	68 c6 d5 01 c0       	push   0xc001d5c6
c001d9a4:	6a 0f                	push   0xf
c001d9a6:	53                   	push   ebx
c001d9a7:	e8 10 04 ff ff       	call   c000ddbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d9ac:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001d9b2:	eb 38                	jmp    c001d9ec <IDE::open(int, int, void*)+0x3c4>
c001d9b4:	83 ec 0c             	sub    esp,0xc
c001d9b7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001d9c1:	53                   	push   ebx
c001d9c2:	6a 00                	push   0x0
c001d9c4:	68 aa d5 01 c0       	push   0xc001d5aa
c001d9c9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001d9cf:	53                   	push   ebx
c001d9d0:	e8 e7 03 ff ff       	call   c000ddbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d9d5:	83 c4 14             	add    esp,0x14
c001d9d8:	53                   	push   ebx
c001d9d9:	6a 00                	push   0x0
c001d9db:	68 c6 d5 01 c0       	push   0xc001d5c6
c001d9e0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001d9e6:	53                   	push   ebx
c001d9e7:	e8 d0 03 ff ff       	call   c000ddbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d9ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d9ee:	83 c4 20             	add    esp,0x20
c001d9f1:	83 ec 0c             	sub    esp,0xc
c001d9f4:	53                   	push   ebx
c001d9f5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001d9f8:	83 c4 0c             	add    esp,0xc
c001d9fb:	6a 07                	push   0x7
c001d9fd:	6a 00                	push   0x0
c001d9ff:	53                   	push   ebx
c001da00:	e8 95 fa ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001da05:	83 c4 0c             	add    esp,0xc
c001da08:	6a 07                	push   0x7
c001da0a:	6a 01                	push   0x1
c001da0c:	53                   	push   ebx
c001da0d:	e8 88 fa ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001da12:	83 c4 0c             	add    esp,0xc
c001da15:	6a 01                	push   0x1
c001da17:	6a 00                	push   0x0
c001da19:	53                   	push   ebx
c001da1a:	e8 c3 fb ff ff       	call   c001d5e2 <IDE::enableIRQs(unsigned char, bool)>
c001da1f:	83 c4 0c             	add    esp,0xc
c001da22:	6a 01                	push   0x1
c001da24:	6a 01                	push   0x1
c001da26:	53                   	push   ebx
c001da27:	e8 b6 fb ff ff       	call   c001d5e2 <IDE::enableIRQs(unsigned char, bool)>
c001da2c:	83 c4 2c             	add    esp,0x2c
c001da2f:	31 c0                	xor    eax,eax
c001da31:	5b                   	pop    ebx
c001da32:	5e                   	pop    esi
c001da33:	5f                   	pop    edi
c001da34:	5d                   	pop    ebp
c001da35:	c3                   	ret    

c001da36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001da36:	55                   	push   ebp
c001da37:	57                   	push   edi
c001da38:	56                   	push   esi
c001da39:	53                   	push   ebx
c001da3a:	83 ec 1c             	sub    esp,0x1c
c001da3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001da41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001da45:	8d 50 f8             	lea    edx,[eax-0x8]
c001da48:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da4c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001da50:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001da54:	80 fa 03             	cmp    dl,0x3
c001da57:	77 5d                	ja     c001dab6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001da59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001da5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da61:	0f b6 db             	movzx  ebx,bl
c001da64:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001da67:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001da6b:	83 ca 80             	or     edx,0xffffff80
c001da6e:	0f b6 d2             	movzx  edx,dl
c001da71:	52                   	push   edx
c001da72:	6a 0c                	push   0xc
c001da74:	53                   	push   ebx
c001da75:	56                   	push   esi
c001da76:	e8 5f f9 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da7b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001da80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001da88:	0f b6 c0             	movzx  eax,al
c001da8b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001da8f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001da91:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001da96:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001da9a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001da9e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001daa2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001daaa:	83 c4 2c             	add    esp,0x2c
c001daad:	5b                   	pop    ebx
c001daae:	5e                   	pop    esi
c001daaf:	5f                   	pop    edi
c001dab0:	5d                   	pop    ebp
c001dab1:	e9 24 f9 ff ff       	jmp    c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dab6:	3c 07                	cmp    al,0x7
c001dab8:	77 10                	ja     c001daca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001daba:	0f b6 db             	movzx  ebx,bl
c001dabd:	0f b6 d0             	movzx  edx,al
c001dac0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001dac8:	eb 2d                	jmp    c001daf7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001daca:	3c 0d                	cmp    al,0xd
c001dacc:	77 13                	ja     c001dae1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001dace:	0f b6 db             	movzx  ebx,bl
c001dad1:	0f b6 c0             	movzx  eax,al
c001dad4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001dadb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001dadf:	eb 16                	jmp    c001daf7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dae1:	3c 15                	cmp    al,0x15
c001dae3:	77 14                	ja     c001daf9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dae5:	0f b6 db             	movzx  ebx,bl
c001dae8:	0f b6 c0             	movzx  eax,al
c001daeb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001daf3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001daf7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001daf9:	83 c4 1c             	add    esp,0x1c
c001dafc:	5b                   	pop    ebx
c001dafd:	5e                   	pop    esi
c001dafe:	5f                   	pop    edi
c001daff:	5d                   	pop    ebp
c001db00:	c3                   	ret    
c001db01:	90                   	nop

c001db02 <IDE::detect()>:
c001db02:	55                   	push   ebp
c001db03:	57                   	push   edi
c001db04:	56                   	push   esi
c001db05:	53                   	push   ebx
c001db06:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001db0c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001db13:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001db1a:	0f 85 97 02 00 00    	jne    c001ddb7 <IDE::detect()+0x2b5>
c001db20:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001db27:	31 f6                	xor    esi,esi
c001db29:	31 ed                	xor    ebp,ebp
c001db2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001db33:	89 e8                	mov    eax,ebp
c001db35:	c1 e0 06             	shl    eax,0x6
c001db38:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001db40:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001db44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001db48:	c1 e0 04             	shl    eax,0x4
c001db4b:	83 c8 a0             	or     eax,0xffffffa0
c001db4e:	0f b6 c0             	movzx  eax,al
c001db51:	50                   	push   eax
c001db52:	6a 06                	push   0x6
c001db54:	56                   	push   esi
c001db55:	53                   	push   ebx
c001db56:	e8 7f f8 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db5b:	83 c4 0c             	add    esp,0xc
c001db5e:	6a 0c                	push   0xc
c001db60:	56                   	push   esi
c001db61:	53                   	push   ebx
c001db62:	e8 33 f9 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001db67:	83 c4 0c             	add    esp,0xc
c001db6a:	6a 0c                	push   0xc
c001db6c:	56                   	push   esi
c001db6d:	53                   	push   ebx
c001db6e:	e8 27 f9 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001db73:	83 c4 0c             	add    esp,0xc
c001db76:	6a 0c                	push   0xc
c001db78:	56                   	push   esi
c001db79:	53                   	push   ebx
c001db7a:	e8 1b f9 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001db7f:	83 c4 0c             	add    esp,0xc
c001db82:	6a 0c                	push   0xc
c001db84:	56                   	push   esi
c001db85:	53                   	push   ebx
c001db86:	e8 0f f9 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001db8b:	68 ec 00 00 00       	push   0xec
c001db90:	6a 07                	push   0x7
c001db92:	56                   	push   esi
c001db93:	53                   	push   ebx
c001db94:	e8 41 f8 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db99:	83 c4 1c             	add    esp,0x1c
c001db9c:	6a 0c                	push   0xc
c001db9e:	56                   	push   esi
c001db9f:	53                   	push   ebx
c001dba0:	e8 f5 f8 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dba5:	83 c4 0c             	add    esp,0xc
c001dba8:	6a 0c                	push   0xc
c001dbaa:	56                   	push   esi
c001dbab:	53                   	push   ebx
c001dbac:	e8 e9 f8 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dbb1:	83 c4 0c             	add    esp,0xc
c001dbb4:	6a 0c                	push   0xc
c001dbb6:	56                   	push   esi
c001dbb7:	53                   	push   ebx
c001dbb8:	e8 dd f8 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dbbd:	83 c4 0c             	add    esp,0xc
c001dbc0:	6a 0c                	push   0xc
c001dbc2:	56                   	push   esi
c001dbc3:	53                   	push   ebx
c001dbc4:	e8 d1 f8 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dbc9:	83 c4 0c             	add    esp,0xc
c001dbcc:	6a 0c                	push   0xc
c001dbce:	56                   	push   esi
c001dbcf:	53                   	push   ebx
c001dbd0:	e8 c5 f8 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dbd5:	83 c4 10             	add    esp,0x10
c001dbd8:	84 c0                	test   al,al
c001dbda:	0f 84 5f 01 00 00    	je     c001dd3f <IDE::detect()+0x23d>
c001dbe0:	31 ff                	xor    edi,edi
c001dbe2:	50                   	push   eax
c001dbe3:	6a 0c                	push   0xc
c001dbe5:	56                   	push   esi
c001dbe6:	53                   	push   ebx
c001dbe7:	e8 ae f8 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dbec:	83 c4 10             	add    esp,0x10
c001dbef:	a8 01                	test   al,0x1
c001dbf1:	0f 85 69 01 00 00    	jne    c001dd60 <IDE::detect()+0x25e>
c001dbf7:	84 c0                	test   al,al
c001dbf9:	78 04                	js     c001dbff <IDE::detect()+0xfd>
c001dbfb:	a8 08                	test   al,0x8
c001dbfd:	75 23                	jne    c001dc22 <IDE::detect()+0x120>
c001dbff:	47                   	inc    edi
c001dc00:	81 ff 17 01 00 00    	cmp    edi,0x117
c001dc06:	7e da                	jle    c001dbe2 <IDE::detect()+0xe0>
c001dc08:	83 ec 0c             	sub    esp,0xc
c001dc0b:	6a 32                	push   0x32
c001dc0d:	e8 9a a4 ff ff       	call   c00180ac <milliTenthSleep(unsigned int)>
c001dc12:	83 c4 10             	add    esp,0x10
c001dc15:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001dc1b:	75 c5                	jne    c001dbe2 <IDE::detect()+0xe0>
c001dc1d:	e9 3e 01 00 00       	jmp    c001dd60 <IDE::detect()+0x25e>
c001dc22:	31 c9                	xor    ecx,ecx
c001dc24:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001dc28:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001dc2c:	83 ec 0c             	sub    esp,0xc
c001dc2f:	68 80 00 00 00       	push   0x80
c001dc34:	57                   	push   edi
c001dc35:	6a 00                	push   0x0
c001dc37:	56                   	push   esi
c001dc38:	53                   	push   ebx
c001dc39:	e8 f8 fd ff ff       	call   c001da36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001dc3e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001dc43:	89 e8                	mov    eax,ebp
c001dc45:	89 d1                	mov    ecx,edx
c001dc47:	c1 e0 06             	shl    eax,0x6
c001dc4a:	01 d8                	add    eax,ebx
c001dc4c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001dc53:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001dc5a:	89 f2                	mov    edx,esi
c001dc5c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001dc62:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001dc66:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001dc6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc70:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001dc77:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001dc7f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001dc86:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001dc8e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001dc94:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001dc9b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001dca1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001dca5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dca9:	83 c4 20             	add    esp,0x20
c001dcac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001dcaf:	83 c0 02             	add    eax,0x2
c001dcb2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001dcb8:	83 c7 02             	add    edi,0x2
c001dcbb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001dcbe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001dcc4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001dcc8:	75 e2                	jne    c001dcac <IDE::detect()+0x1aa>
c001dcca:	89 e8                	mov    eax,ebp
c001dccc:	c1 e0 06             	shl    eax,0x6
c001dccf:	01 d8                	add    eax,ebx
c001dcd1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001dcd7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001dcde:	66 c1 ea 09          	shr    dx,0x9
c001dce2:	83 e2 01             	and    edx,0x1
c001dce5:	84 c9                	test   cl,cl
c001dce7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001dced:	75 22                	jne    c001dd11 <IDE::detect()+0x20f>
c001dcef:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001dcf6:	74 46                	je     c001dd3e <IDE::detect()+0x23c>
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	68 7c 01 00 00       	push   0x17c
c001dd00:	e8 9e bc fe ff       	call   c00099a3 <malloc>
c001dd05:	89 c7                	mov    edi,eax
c001dd07:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd0a:	e8 13 05 00 00       	call   c001e222 <ATA::ATA()>
c001dd0f:	eb 17                	jmp    c001dd28 <IDE::detect()+0x226>
c001dd11:	83 ec 0c             	sub    esp,0xc
c001dd14:	68 80 01 00 00       	push   0x180
c001dd19:	e8 85 bc fe ff       	call   c00099a3 <malloc>
c001dd1e:	89 c7                	mov    edi,eax
c001dd20:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd23:	e8 82 0b 00 00       	call   c001e8aa <ATAPI::ATAPI()>
c001dd28:	5a                   	pop    edx
c001dd29:	59                   	pop    ecx
c001dd2a:	57                   	push   edi
c001dd2b:	53                   	push   ebx
c001dd2c:	e8 13 01 ff ff       	call   c000de44 <Device::addChild(Device*)>
c001dd31:	8b 07                	mov    eax,DWORD PTR [edi]
c001dd33:	53                   	push   ebx
c001dd34:	55                   	push   ebp
c001dd35:	6a 00                	push   0x0
c001dd37:	57                   	push   edi
c001dd38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd3b:	83 c4 20             	add    esp,0x20
c001dd3e:	45                   	inc    ebp
c001dd3f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001dd44:	74 0d                	je     c001dd53 <IDE::detect()+0x251>
c001dd46:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001dd4e:	e9 e0 fd ff ff       	jmp    c001db33 <IDE::detect()+0x31>
c001dd53:	4e                   	dec    esi
c001dd54:	74 61                	je     c001ddb7 <IDE::detect()+0x2b5>
c001dd56:	be 01 00 00 00       	mov    esi,0x1
c001dd5b:	e9 cb fd ff ff       	jmp    c001db2b <IDE::detect()+0x29>
c001dd60:	50                   	push   eax
c001dd61:	6a 04                	push   0x4
c001dd63:	56                   	push   esi
c001dd64:	53                   	push   ebx
c001dd65:	e8 30 f7 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dd6a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dd6e:	83 c4 0c             	add    esp,0xc
c001dd71:	6a 05                	push   0x5
c001dd73:	56                   	push   esi
c001dd74:	53                   	push   ebx
c001dd75:	e8 20 f7 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dd7a:	83 c4 10             	add    esp,0x10
c001dd7d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001dd81:	80 fa 14             	cmp    dl,0x14
c001dd84:	75 04                	jne    c001dd8a <IDE::detect()+0x288>
c001dd86:	3c eb                	cmp    al,0xeb
c001dd88:	eb 07                	jmp    c001dd91 <IDE::detect()+0x28f>
c001dd8a:	3c 96                	cmp    al,0x96
c001dd8c:	75 b1                	jne    c001dd3f <IDE::detect()+0x23d>
c001dd8e:	80 fa 69             	cmp    dl,0x69
c001dd91:	75 ac                	jne    c001dd3f <IDE::detect()+0x23d>
c001dd93:	68 a1 00 00 00       	push   0xa1
c001dd98:	6a 07                	push   0x7
c001dd9a:	56                   	push   esi
c001dd9b:	53                   	push   ebx
c001dd9c:	e8 39 f6 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dda1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001dda8:	e8 ff a2 ff ff       	call   c00180ac <milliTenthSleep(unsigned int)>
c001ddad:	83 c4 10             	add    esp,0x10
c001ddb0:	b1 01                	mov    cl,0x1
c001ddb2:	e9 6d fe ff ff       	jmp    c001dc24 <IDE::detect()+0x122>
c001ddb7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ddbd:	5b                   	pop    ebx
c001ddbe:	5e                   	pop    esi
c001ddbf:	5f                   	pop    edi
c001ddc0:	5d                   	pop    ebp
c001ddc1:	c3                   	ret    

c001ddc2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ddc2:	55                   	push   ebp
c001ddc3:	57                   	push   edi
c001ddc4:	56                   	push   esi
c001ddc5:	53                   	push   ebx
c001ddc6:	83 ec 1c             	sub    esp,0x1c
c001ddc9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ddcd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ddd1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ddd5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ddd9:	88 c3                	mov    bl,al
c001dddb:	84 c0                	test   al,al
c001dddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dde1:	0f 84 81 00 00 00    	je     c001de68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001dde7:	83 ec 0c             	sub    esp,0xc
c001ddea:	68 87 4c 02 c0       	push   0xc0024c87
c001ddef:	e8 10 ec fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001ddf4:	83 c4 10             	add    esp,0x10
c001ddf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddfb:	3c 01                	cmp    al,0x1
c001ddfd:	74 63                	je     c001de62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ddff:	3c 02                	cmp    al,0x2
c001de01:	75 53                	jne    c001de56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001de03:	d1 e6                	shl    esi,1
c001de05:	09 ee                	or     esi,ebp
c001de07:	50                   	push   eax
c001de08:	89 f0                	mov    eax,esi
c001de0a:	6a 01                	push   0x1
c001de0c:	0f b6 f0             	movzx  esi,al
c001de0f:	c1 e6 06             	shl    esi,0x6
c001de12:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001de1a:	50                   	push   eax
c001de1b:	57                   	push   edi
c001de1c:	e8 79 f6 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	a8 01                	test   al,0x1
c001de26:	74 02                	je     c001de2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001de28:	b3 07                	mov    bl,0x7
c001de2a:	a8 02                	test   al,0x2
c001de2c:	74 02                	je     c001de30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001de2e:	b3 03                	mov    bl,0x3
c001de30:	a8 04                	test   al,0x4
c001de32:	74 02                	je     c001de36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001de34:	b3 14                	mov    bl,0x14
c001de36:	a8 08                	test   al,0x8
c001de38:	74 02                	je     c001de3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001de3a:	b3 03                	mov    bl,0x3
c001de3c:	a8 10                	test   al,0x10
c001de3e:	74 02                	je     c001de42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001de40:	b3 15                	mov    bl,0x15
c001de42:	a8 20                	test   al,0x20
c001de44:	74 02                	je     c001de48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001de46:	b3 03                	mov    bl,0x3
c001de48:	a8 40                	test   al,0x40
c001de4a:	74 02                	je     c001de4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001de4c:	b3 16                	mov    bl,0x16
c001de4e:	84 c0                	test   al,al
c001de50:	79 16                	jns    c001de68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001de52:	b3 0d                	mov    bl,0xd
c001de54:	eb 12                	jmp    c001de68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001de56:	3c 03                	cmp    al,0x3
c001de58:	74 0c                	je     c001de66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001de5a:	3c 04                	cmp    al,0x4
c001de5c:	75 0a                	jne    c001de68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001de5e:	b3 08                	mov    bl,0x8
c001de60:	eb 06                	jmp    c001de68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001de62:	b3 13                	mov    bl,0x13
c001de64:	eb 02                	jmp    c001de68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001de66:	b3 17                	mov    bl,0x17
c001de68:	83 c4 1c             	add    esp,0x1c
c001de6b:	88 d8                	mov    al,bl
c001de6d:	5b                   	pop    ebx
c001de6e:	5e                   	pop    esi
c001de6f:	5f                   	pop    edi
c001de70:	5d                   	pop    ebp
c001de71:	c3                   	ret    

c001de72 <IDE::polling(unsigned char, unsigned int)>:
c001de72:	57                   	push   edi
c001de73:	56                   	push   esi
c001de74:	53                   	push   ebx
c001de75:	bb 04 00 00 00       	mov    ebx,0x4
c001de7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001de7e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001de83:	52                   	push   edx
c001de84:	6a 0c                	push   0xc
c001de86:	56                   	push   esi
c001de87:	57                   	push   edi
c001de88:	e8 0d f6 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001de8d:	83 c4 10             	add    esp,0x10
c001de90:	4b                   	dec    ebx
c001de91:	75 f0                	jne    c001de83 <IDE::polling(unsigned char, unsigned int)+0x11>
c001de93:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de98:	50                   	push   eax
c001de99:	6a 0c                	push   0xc
c001de9b:	56                   	push   esi
c001de9c:	57                   	push   edi
c001de9d:	e8 f8 f5 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001dea2:	83 c4 10             	add    esp,0x10
c001dea5:	a8 01                	test   al,0x1
c001dea7:	75 17                	jne    c001dec0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001dea9:	a8 20                	test   al,0x20
c001deab:	75 0f                	jne    c001debc <IDE::polling(unsigned char, unsigned int)+0x4a>
c001dead:	4b                   	dec    ebx
c001deae:	74 10                	je     c001dec0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001deb0:	84 c0                	test   al,al
c001deb2:	78 e4                	js     c001de98 <IDE::polling(unsigned char, unsigned int)+0x26>
c001deb4:	a8 08                	test   al,0x8
c001deb6:	74 e0                	je     c001de98 <IDE::polling(unsigned char, unsigned int)+0x26>
c001deb8:	31 c0                	xor    eax,eax
c001deba:	eb 06                	jmp    c001dec2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001debc:	b0 01                	mov    al,0x1
c001debe:	eb 02                	jmp    c001dec2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001dec0:	b0 02                	mov    al,0x2
c001dec2:	5b                   	pop    ebx
c001dec3:	5e                   	pop    esi
c001dec4:	5f                   	pop    edi
c001dec5:	c3                   	ret    

c001dec6 <SATABus::close(int, int, void*)>:
c001dec6:	31 c0                	xor    eax,eax
c001dec8:	c3                   	ret    
c001dec9:	90                   	nop

c001deca <SATABus::detect()>:
c001deca:	c3                   	ret    
c001decb:	90                   	nop

c001decc <SATABus::SATABus()>:
c001decc:	83 ec 0c             	sub    esp,0xc
c001decf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded3:	83 ec 08             	sub    esp,0x8
c001ded6:	68 c0 4c 02 c0       	push   0xc0024cc0
c001dedb:	50                   	push   eax
c001dedc:	e8 11 03 ff ff       	call   c000e1f2 <HardDiskController::HardDiskController(char const*)>
c001dee1:	83 c4 10             	add    esp,0x10
c001dee4:	ba 14 4d 02 c0       	mov    edx,0xc0024d14
c001dee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deed:	89 10                	mov    DWORD PTR [eax],edx
c001deef:	83 ec 0c             	sub    esp,0xc
c001def2:	6a 50                	push   0x50
c001def4:	e8 9e bf fe ff       	call   c0009e97 <Phys::allocateContiguousPages(int)>
c001def9:	83 c4 10             	add    esp,0x10
c001defc:	89 c2                	mov    edx,eax
c001defe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df02:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001df08:	83 ec 0c             	sub    esp,0xc
c001df0b:	6a 50                	push   0x50
c001df0d:	e8 17 d7 fe ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c001df12:	83 c4 10             	add    esp,0x10
c001df15:	89 c2                	mov    edx,eax
c001df17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001df21:	a1 d0 61 02 c0       	mov    eax,ds:0xc00261d0
c001df26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df2a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001df30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df34:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001df3a:	83 ec 0c             	sub    esp,0xc
c001df3d:	6a 03                	push   0x3
c001df3f:	6a 50                	push   0x50
c001df41:	51                   	push   ecx
c001df42:	52                   	push   edx
c001df43:	50                   	push   eax
c001df44:	e8 7d e0 fe ff       	call   c000bfc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df49:	83 c4 20             	add    esp,0x20
c001df4c:	90                   	nop
c001df4d:	83 c4 0c             	add    esp,0xc
c001df50:	c3                   	ret    
c001df51:	90                   	nop

c001df52 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001df52:	83 ec 0c             	sub    esp,0xc
c001df55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df59:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001df5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001df5f:	09 c2                	or     edx,eax
c001df61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df6b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001df6d:	31 c0                	xor    eax,eax
c001df6f:	c1 e9 08             	shr    ecx,0x8
c001df72:	83 e1 0f             	and    ecx,0xf
c001df75:	39 c8                	cmp    eax,ecx
c001df77:	74 0a                	je     c001df83 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001df79:	f6 c2 01             	test   dl,0x1
c001df7c:	74 18                	je     c001df96 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001df7e:	d1 ea                	shr    edx,1
c001df80:	40                   	inc    eax
c001df81:	eb f2                	jmp    c001df75 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001df83:	83 ec 0c             	sub    esp,0xc
c001df86:	68 e4 4c 02 c0       	push   0xc0024ce4
c001df8b:	e8 b3 62 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001df90:	83 c4 10             	add    esp,0x10
c001df93:	83 c8 ff             	or     eax,0xffffffff
c001df96:	83 c4 0c             	add    esp,0xc
c001df99:	c3                   	ret    

c001df9a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001df9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001df9e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001dfa1:	89 c2                	mov    edx,eax
c001dfa3:	c1 ea 08             	shr    edx,0x8
c001dfa6:	83 e2 0f             	and    edx,0xf
c001dfa9:	fe ca                	dec    dl
c001dfab:	75 31                	jne    c001dfde <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001dfad:	83 e0 0f             	and    eax,0xf
c001dfb0:	3c 03                	cmp    al,0x3
c001dfb2:	75 2a                	jne    c001dfde <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001dfb4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001dfb7:	b8 02 00 00 00       	mov    eax,0x2
c001dfbc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001dfc2:	74 1c                	je     c001dfe0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001dfc4:	b8 04 00 00 00       	mov    eax,0x4
c001dfc9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001dfcf:	74 0f                	je     c001dfe0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001dfd1:	31 c0                	xor    eax,eax
c001dfd3:	83 fa 03             	cmp    edx,0x3
c001dfd6:	0f 94 c0             	sete   al
c001dfd9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001dfdd:	c3                   	ret    
c001dfde:	31 c0                	xor    eax,eax
c001dfe0:	c3                   	ret    
c001dfe1:	90                   	nop

c001dfe2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001dfe2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dfe6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dfe9:	0f ba e2 0f          	bt     edx,0xf
c001dfed:	72 f7                	jb     c001dfe6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001dfef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dff2:	83 ca 10             	or     edx,0x10
c001dff5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dff8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dffb:	83 ca 01             	or     edx,0x1
c001dffe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e001:	c3                   	ret    

c001e002 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e006:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e009:	83 e2 fe             	and    edx,0xfffffffe
c001e00c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e00f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e012:	83 e2 ef             	and    edx,0xffffffef
c001e015:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e018:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e01b:	0f ba e2 0e          	bt     edx,0xe
c001e01f:	72 f7                	jb     c001e018 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e021:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e024:	0f ba e2 0f          	bt     edx,0xf
c001e028:	72 ee                	jb     c001e018 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e02a:	c3                   	ret    
c001e02b:	90                   	nop

c001e02c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e02c:	55                   	push   ebp
c001e02d:	57                   	push   edi
c001e02e:	56                   	push   esi
c001e02f:	53                   	push   ebx
c001e030:	83 ec 1c             	sub    esp,0x1c
c001e033:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e037:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e03b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e03f:	53                   	push   ebx
c001e040:	89 fd                	mov    ebp,edi
c001e042:	56                   	push   esi
c001e043:	c1 e5 0a             	shl    ebp,0xa
c001e046:	e8 b7 ff ff ff       	call   c001e002 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e04b:	83 ec 0c             	sub    esp,0xc
c001e04e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e054:	01 e8                	add    eax,ebp
c001e056:	89 03                	mov    DWORD PTR [ebx],eax
c001e058:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e05a:	68 00 04 00 00       	push   0x400
c001e05f:	6a 00                	push   0x0
c001e061:	50                   	push   eax
c001e062:	e8 1d 26 fe ff       	call   c0000684 <memset>
c001e067:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e06d:	89 fa                	mov    edx,edi
c001e06f:	01 e8                	add    eax,ebp
c001e071:	c1 e7 0d             	shl    edi,0xd
c001e074:	89 03                	mov    DWORD PTR [ebx],eax
c001e076:	c1 e2 08             	shl    edx,0x8
c001e079:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e080:	81 c2 00 80 00 00    	add    edx,0x8000
c001e086:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e08a:	89 d0                	mov    eax,edx
c001e08c:	83 c4 1c             	add    esp,0x1c
c001e08f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e095:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e098:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e09b:	68 00 01 00 00       	push   0x100
c001e0a0:	6a 00                	push   0x0
c001e0a2:	50                   	push   eax
c001e0a3:	e8 dc 25 fe ff       	call   c0000684 <memset>
c001e0a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0ac:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e0b2:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e0b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e0bc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e0bf:	83 c4 10             	add    esp,0x10
c001e0c2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e0c9:	31 ff                	xor    edi,edi
c001e0cb:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e0d1:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e0d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0db:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e0e1:	83 c5 20             	add    ebp,0x20
c001e0e4:	01 f8                	add    eax,edi
c001e0e6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e0e9:	52                   	push   edx
c001e0ea:	68 00 01 00 00       	push   0x100
c001e0ef:	6a 00                	push   0x0
c001e0f1:	50                   	push   eax
c001e0f2:	e8 8d 25 fe ff       	call   c0000684 <memset>
c001e0f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0fb:	83 c4 10             	add    esp,0x10
c001e0fe:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e104:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e10b:	01 f8                	add    eax,edi
c001e10d:	81 c7 00 01 00 00    	add    edi,0x100
c001e113:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e116:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e11c:	75 b3                	jne    c001e0d1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e11e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e122:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e126:	83 c4 1c             	add    esp,0x1c
c001e129:	5b                   	pop    ebx
c001e12a:	5e                   	pop    esi
c001e12b:	5f                   	pop    edi
c001e12c:	5d                   	pop    ebp
c001e12d:	e9 b0 fe ff ff       	jmp    c001dfe2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e132 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e132:	55                   	push   ebp
c001e133:	57                   	push   edi
c001e134:	56                   	push   esi
c001e135:	53                   	push   ebx
c001e136:	31 db                	xor    ebx,ebx
c001e138:	83 ec 0c             	sub    esp,0xc
c001e13b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e13f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e143:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e146:	f7 c7 01 00 00 00    	test   edi,0x1
c001e14c:	74 7a                	je     c001e1c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e14e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e152:	89 d8                	mov    eax,ebx
c001e154:	c1 e0 07             	shl    eax,0x7
c001e157:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e15e:	55                   	push   ebp
c001e15f:	56                   	push   esi
c001e160:	e8 35 fe ff ff       	call   c001df9a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e165:	5a                   	pop    edx
c001e166:	83 f8 01             	cmp    eax,0x1
c001e169:	59                   	pop    ecx
c001e16a:	75 21                	jne    c001e18d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e16c:	50                   	push   eax
c001e16d:	53                   	push   ebx
c001e16e:	55                   	push   ebp
c001e16f:	56                   	push   esi
c001e170:	e8 b7 fe ff ff       	call   c001e02c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e175:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e17c:	e8 22 b8 fe ff       	call   c00099a3 <malloc>
c001e181:	89 c5                	mov    ebp,eax
c001e183:	89 04 24             	mov    DWORD PTR [esp],eax
c001e186:	e8 7f 0d 00 00       	call   c001ef0a <SATA::SATA()>
c001e18b:	eb 24                	jmp    c001e1b1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e18d:	83 f8 04             	cmp    eax,0x4
c001e190:	75 36                	jne    c001e1c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e192:	51                   	push   ecx
c001e193:	53                   	push   ebx
c001e194:	55                   	push   ebp
c001e195:	56                   	push   esi
c001e196:	e8 91 fe ff ff       	call   c001e02c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e19b:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e1a2:	e8 fc b7 fe ff       	call   c00099a3 <malloc>
c001e1a7:	89 c5                	mov    ebp,eax
c001e1a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001e1ac:	e8 cf 10 00 00       	call   c001f280 <SATAPI::SATAPI()>
c001e1b1:	58                   	pop    eax
c001e1b2:	5a                   	pop    edx
c001e1b3:	55                   	push   ebp
c001e1b4:	56                   	push   esi
c001e1b5:	e8 8a fc fe ff       	call   c000de44 <Device::addChild(Device*)>
c001e1ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e1bd:	56                   	push   esi
c001e1be:	6a 00                	push   0x0
c001e1c0:	53                   	push   ebx
c001e1c1:	55                   	push   ebp
c001e1c2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e1c5:	83 c4 20             	add    esp,0x20
c001e1c8:	d1 ef                	shr    edi,1
c001e1ca:	43                   	inc    ebx
c001e1cb:	83 fb 20             	cmp    ebx,0x20
c001e1ce:	0f 85 72 ff ff ff    	jne    c001e146 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e1d4:	83 c4 0c             	add    esp,0xc
c001e1d7:	5b                   	pop    ebx
c001e1d8:	5e                   	pop    esi
c001e1d9:	5f                   	pop    edi
c001e1da:	5d                   	pop    ebp
c001e1db:	c3                   	ret    

c001e1dc <SATABus::open(int, int, void*)>:
c001e1dc:	83 ec 14             	sub    esp,0x14
c001e1df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1e3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e1e9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e1ef:	52                   	push   edx
c001e1f0:	50                   	push   eax
c001e1f1:	e8 3c ff ff ff       	call   c001e132 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e1f6:	31 c0                	xor    eax,eax
c001e1f8:	83 c4 1c             	add    esp,0x1c
c001e1fb:	c3                   	ret    

c001e1fc <ATA::close(int, int, void*)>:
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e203:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e209:	85 c0                	test   eax,eax
c001e20b:	74 0c                	je     c001e219 <ATA::close(int, int, void*)+0x1d>
c001e20d:	83 ec 0c             	sub    esp,0xc
c001e210:	8b 10                	mov    edx,DWORD PTR [eax]
c001e212:	50                   	push   eax
c001e213:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e216:	83 c4 10             	add    esp,0x10
c001e219:	31 c0                	xor    eax,eax
c001e21b:	83 c4 0c             	add    esp,0xc
c001e21e:	c3                   	ret    
c001e21f:	90                   	nop

c001e220 <ATA::powerSaving(PowerSavingLevel)>:
c001e220:	c3                   	ret    
c001e221:	90                   	nop

c001e222 <ATA::ATA()>:
c001e222:	83 ec 0c             	sub    esp,0xc
c001e225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e229:	83 ec 04             	sub    esp,0x4
c001e22c:	68 00 02 00 00       	push   0x200
c001e231:	68 09 4e 02 c0       	push   0xc0024e09
c001e236:	50                   	push   eax
c001e237:	e8 3e 00 ff ff       	call   c000e27a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e23c:	83 c4 10             	add    esp,0x10
c001e23f:	ba 8c 4d 02 c0       	mov    edx,0xc0024d8c
c001e244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e248:	89 10                	mov    DWORD PTR [eax],edx
c001e24a:	90                   	nop
c001e24b:	83 c4 0c             	add    esp,0xc
c001e24e:	c3                   	ret    
c001e24f:	90                   	nop

c001e250 <ATA::flush(bool)>:
c001e250:	53                   	push   ebx
c001e251:	83 ec 08             	sub    esp,0x8
c001e254:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e259:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e25d:	19 c0                	sbb    eax,eax
c001e25f:	83 e0 fd             	and    eax,0xfffffffd
c001e262:	05 ea 00 00 00       	add    eax,0xea
c001e267:	50                   	push   eax
c001e268:	6a 07                	push   0x7
c001e26a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e271:	50                   	push   eax
c001e272:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e278:	e8 5d f1 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e27d:	83 c4 0c             	add    esp,0xc
c001e280:	6a 00                	push   0x0
c001e282:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e289:	50                   	push   eax
c001e28a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e290:	e8 dd fb ff ff       	call   c001de72 <IDE::polling(unsigned char, unsigned int)>
c001e295:	83 c4 18             	add    esp,0x18
c001e298:	5b                   	pop    ebx
c001e299:	c3                   	ret    

c001e29a <ATA::readyForCommand()>:
c001e29a:	56                   	push   esi
c001e29b:	53                   	push   ebx
c001e29c:	53                   	push   ebx
c001e29d:	31 db                	xor    ebx,ebx
c001e29f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e2a3:	51                   	push   ecx
c001e2a4:	6a 0c                	push   0xc
c001e2a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e2ad:	50                   	push   eax
c001e2ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e2b4:	e8 e1 f1 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001e2b9:	83 c4 10             	add    esp,0x10
c001e2bc:	a8 88                	test   al,0x88
c001e2be:	74 1f                	je     c001e2df <ATA::readyForCommand()+0x45>
c001e2c0:	43                   	inc    ebx
c001e2c1:	83 fb 63             	cmp    ebx,0x63
c001e2c4:	7e dd                	jle    c001e2a3 <ATA::readyForCommand()+0x9>
c001e2c6:	83 ec 0c             	sub    esp,0xc
c001e2c9:	6a 0a                	push   0xa
c001e2cb:	e8 dc 9d ff ff       	call   c00180ac <milliTenthSleep(unsigned int)>
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e2d9:	75 c8                	jne    c001e2a3 <ATA::readyForCommand()+0x9>
c001e2db:	31 c0                	xor    eax,eax
c001e2dd:	eb 02                	jmp    c001e2e1 <ATA::readyForCommand()+0x47>
c001e2df:	b0 01                	mov    al,0x1
c001e2e1:	5a                   	pop    edx
c001e2e2:	5b                   	pop    ebx
c001e2e3:	5e                   	pop    esi
c001e2e4:	c3                   	ret    
c001e2e5:	90                   	nop

c001e2e6 <ATA::access(unsigned long long, int, void*, bool)>:
c001e2e6:	55                   	push   ebp
c001e2e7:	57                   	push   edi
c001e2e8:	56                   	push   esi
c001e2e9:	53                   	push   ebx
c001e2ea:	83 ec 38             	sub    esp,0x38
c001e2ed:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e2f1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e2f5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e2f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e2fd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e301:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e305:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e309:	68 38 4d 02 c0       	push   0xc0024d38
c001e30e:	e8 f1 e6 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e313:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e319:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e31d:	83 c4 10             	add    esp,0x10
c001e320:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e326:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e32a:	c1 e0 06             	shl    eax,0x6
c001e32d:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e335:	74 5d                	je     c001e394 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e337:	89 fa                	mov    edx,edi
c001e339:	89 f0                	mov    eax,esi
c001e33b:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e33f:	c1 ea 1c             	shr    edx,0x1c
c001e342:	89 d1                	mov    ecx,edx
c001e344:	09 c1                	or     ecx,eax
c001e346:	74 25                	je     c001e36d <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e348:	31 ed                	xor    ebp,ebp
c001e34a:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e351:	89 fa                	mov    edx,edi
c001e353:	89 f0                	mov    eax,esi
c001e355:	0f ad d0             	shrd   eax,edx,cl
c001e358:	d3 ea                	shr    edx,cl
c001e35a:	f6 c1 20             	test   cl,0x20
c001e35d:	74 02                	je     c001e361 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e35f:	89 d0                	mov    eax,edx
c001e361:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e365:	45                   	inc    ebp
c001e366:	83 fd 06             	cmp    ebp,0x6
c001e369:	75 df                	jne    c001e34a <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e36b:	eb 76                	jmp    c001e3e3 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e36d:	89 f0                	mov    eax,esi
c001e36f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e374:	89 fa                	mov    edx,edi
c001e376:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e37d:	0f ac d0 10          	shrd   eax,edx,0x10
c001e381:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e386:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e38a:	c1 ee 18             	shr    esi,0x18
c001e38d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e392:	eb 56                	jmp    c001e3ea <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e394:	6a 00                	push   0x0
c001e396:	6a 3f                	push   0x3f
c001e398:	57                   	push   edi
c001e399:	56                   	push   esi
c001e39a:	e8 65 29 00 00       	call   c0020d04 <__umoddi3>
c001e39f:	83 c4 10             	add    esp,0x10
c001e3a2:	40                   	inc    eax
c001e3a3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e3a7:	6a 00                	push   0x0
c001e3a9:	68 f0 03 00 00       	push   0x3f0
c001e3ae:	57                   	push   edi
c001e3af:	56                   	push   esi
c001e3b0:	e8 4f 28 00 00       	call   c0020c04 <__udivdi3>
c001e3b5:	83 c4 10             	add    esp,0x10
c001e3b8:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e3bd:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e3c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e3c9:	6a 00                	push   0x0
c001e3cb:	6a 3f                	push   0x3f
c001e3cd:	57                   	push   edi
c001e3ce:	56                   	push   esi
c001e3cf:	e8 30 28 00 00       	call   c0020c04 <__udivdi3>
c001e3d4:	83 c4 10             	add    esp,0x10
c001e3d7:	89 c6                	mov    esi,eax
c001e3d9:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e3de:	83 e6 0f             	and    esi,0xf
c001e3e1:	eb 07                	jmp    c001e3ea <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e3e3:	31 f6                	xor    esi,esi
c001e3e5:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e3ea:	bf 01 00 00 00       	mov    edi,0x1
c001e3ef:	50                   	push   eax
c001e3f0:	6a 00                	push   0x0
c001e3f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e3f9:	50                   	push   eax
c001e3fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e3fe:	e8 df f1 ff ff       	call   c001d5e2 <IDE::enableIRQs(unsigned char, bool)>
c001e403:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e406:	e8 8f fe ff ff       	call   c001e29a <ATA::readyForCommand()>
c001e40b:	83 c4 10             	add    esp,0x10
c001e40e:	84 c0                	test   al,al
c001e410:	0f 84 bc 02 00 00    	je     c001e6d2 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e416:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e41c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e422:	c1 e0 04             	shl    eax,0x4
c001e425:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e42c:	09 c6                	or     esi,eax
c001e42e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e433:	75 05                	jne    c001e43a <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e435:	83 ce a0             	or     esi,0xffffffa0
c001e438:	eb 03                	jmp    c001e43d <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e43a:	83 ce e0             	or     esi,0xffffffe0
c001e43d:	89 f0                	mov    eax,esi
c001e43f:	0f b6 f0             	movzx  esi,al
c001e442:	56                   	push   esi
c001e443:	6a 06                	push   0x6
c001e445:	51                   	push   ecx
c001e446:	52                   	push   edx
c001e447:	e8 8e ef ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e44c:	83 c4 10             	add    esp,0x10
c001e44f:	6a 00                	push   0x0
c001e451:	6a 01                	push   0x1
c001e453:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e45a:	50                   	push   eax
c001e45b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e461:	e8 74 ef ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e466:	83 c4 10             	add    esp,0x10
c001e469:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e46e:	75 6e                	jne    c001e4de <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e470:	6a 00                	push   0x0
c001e472:	6a 08                	push   0x8
c001e474:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e47b:	50                   	push   eax
c001e47c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e482:	e8 53 ef ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e487:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e48c:	50                   	push   eax
c001e48d:	6a 09                	push   0x9
c001e48f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e496:	50                   	push   eax
c001e497:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e49d:	e8 38 ef ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4a2:	83 c4 20             	add    esp,0x20
c001e4a5:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e4aa:	50                   	push   eax
c001e4ab:	6a 0a                	push   0xa
c001e4ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e4b4:	50                   	push   eax
c001e4b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e4bb:	e8 1a ef ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4c0:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e4c5:	50                   	push   eax
c001e4c6:	6a 0b                	push   0xb
c001e4c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e4cf:	50                   	push   eax
c001e4d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e4d6:	e8 ff ee ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4db:	83 c4 20             	add    esp,0x20
c001e4de:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e4e3:	50                   	push   eax
c001e4e4:	6a 02                	push   0x2
c001e4e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e4ed:	50                   	push   eax
c001e4ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e4f4:	e8 e1 ee ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4f9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e4fe:	50                   	push   eax
c001e4ff:	6a 03                	push   0x3
c001e501:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e508:	50                   	push   eax
c001e509:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e50f:	e8 c6 ee ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e514:	83 c4 20             	add    esp,0x20
c001e517:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e51c:	50                   	push   eax
c001e51d:	6a 04                	push   0x4
c001e51f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e526:	50                   	push   eax
c001e527:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e52d:	e8 a8 ee ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e532:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e537:	50                   	push   eax
c001e538:	6a 05                	push   0x5
c001e53a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e541:	50                   	push   eax
c001e542:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e548:	e8 8d ee ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e54d:	83 c4 20             	add    esp,0x20
c001e550:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e555:	0f 94 c0             	sete   al
c001e558:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e55d:	74 09                	je     c001e568 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e55f:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e566:	eb 07                	jmp    c001e56f <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e568:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e56f:	0f b6 c0             	movzx  eax,al
c001e572:	50                   	push   eax
c001e573:	6a 07                	push   0x7
c001e575:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e57c:	50                   	push   eax
c001e57d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e583:	e8 52 ee ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e588:	c7 04 24 45 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d45
c001e58f:	e8 70 e4 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e594:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e598:	83 c4 10             	add    esp,0x10
c001e59b:	85 f6                	test   esi,esi
c001e59d:	0f 84 f7 00 00 00    	je     c001e69a <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e5a3:	83 ec 0c             	sub    esp,0xc
c001e5a6:	68 48 4d 02 c0       	push   0xc0024d48
c001e5ab:	e8 54 e4 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e5b0:	83 c4 0c             	add    esp,0xc
c001e5b3:	6a 01                	push   0x1
c001e5b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5bc:	50                   	push   eax
c001e5bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e5c3:	e8 aa f8 ff ff       	call   c001de72 <IDE::polling(unsigned char, unsigned int)>
c001e5c8:	c7 04 24 4b 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d4b
c001e5cf:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e5d3:	e8 2c e4 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e5d8:	83 c4 10             	add    esp,0x10
c001e5db:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e5df:	84 c0                	test   al,al
c001e5e1:	74 2b                	je     c001e60e <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e5e3:	0f b6 f8             	movzx  edi,al
c001e5e6:	57                   	push   edi
c001e5e7:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e5ee:	50                   	push   eax
c001e5ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5f6:	50                   	push   eax
c001e5f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e5fd:	e8 c0 f7 ff ff       	call   c001ddc2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e602:	c7 04 24 4e 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d4e
c001e609:	e9 bc 00 00 00       	jmp    c001e6ca <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e60e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e613:	74 50                	je     c001e665 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e615:	83 ec 0c             	sub    esp,0xc
c001e618:	31 ed                	xor    ebp,ebp
c001e61a:	68 59 4d 02 c0       	push   0xc0024d59
c001e61f:	e8 e0 e3 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e624:	83 c4 10             	add    esp,0x10
c001e627:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e62b:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e62f:	50                   	push   eax
c001e630:	50                   	push   eax
c001e631:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e638:	50                   	push   eax
c001e639:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e63f:	e8 84 ed ff ff       	call   c001d3c8 <IDE::getBase(unsigned char)>
c001e644:	89 c2                	mov    edx,eax
c001e646:	89 f8                	mov    eax,edi
c001e648:	66 ef                	out    dx,ax
c001e64a:	45                   	inc    ebp
c001e64b:	83 c4 10             	add    esp,0x10
c001e64e:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e654:	75 d1                	jne    c001e627 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e656:	83 ec 0c             	sub    esp,0xc
c001e659:	68 5c 4d 02 c0       	push   0xc0024d5c
c001e65e:	e8 a1 e3 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e663:	eb 24                	jmp    c001e689 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e665:	51                   	push   ecx
c001e666:	51                   	push   ecx
c001e667:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e66e:	50                   	push   eax
c001e66f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e675:	e8 4e ed ff ff       	call   c001d3c8 <IDE::getBase(unsigned char)>
c001e67a:	b9 00 01 00 00       	mov    ecx,0x100
c001e67f:	89 c2                	mov    edx,eax
c001e681:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e685:	fc                   	cld    
c001e686:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e689:	83 c4 10             	add    esp,0x10
c001e68c:	4e                   	dec    esi
c001e68d:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e695:	e9 01 ff ff ff       	jmp    c001e59b <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e69a:	31 ff                	xor    edi,edi
c001e69c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e6a1:	74 2f                	je     c001e6d2 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e6a3:	83 ec 0c             	sub    esp,0xc
c001e6a6:	68 5f 4d 02 c0       	push   0xc0024d5f
c001e6ab:	e8 54 e3 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e6b0:	58                   	pop    eax
c001e6b1:	31 c0                	xor    eax,eax
c001e6b3:	5a                   	pop    edx
c001e6b4:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e6b9:	0f 94 c0             	sete   al
c001e6bc:	50                   	push   eax
c001e6bd:	53                   	push   ebx
c001e6be:	e8 8d fb ff ff       	call   c001e250 <ATA::flush(bool)>
c001e6c3:	c7 04 24 62 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d62
c001e6ca:	e8 35 e3 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e6cf:	83 c4 10             	add    esp,0x10
c001e6d2:	83 c4 2c             	add    esp,0x2c
c001e6d5:	89 f8                	mov    eax,edi
c001e6d7:	5b                   	pop    ebx
c001e6d8:	5e                   	pop    esi
c001e6d9:	5f                   	pop    edi
c001e6da:	5d                   	pop    ebp
c001e6db:	c3                   	ret    

c001e6dc <ATA::read(unsigned long long, int, void*)>:
c001e6dc:	57                   	push   edi
c001e6dd:	b8 04 00 00 00       	mov    eax,0x4
c001e6e2:	56                   	push   esi
c001e6e3:	53                   	push   ebx
c001e6e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e6ec:	8d 7a ff             	lea    edi,[edx-0x1]
c001e6ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e6f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e6f7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e6fd:	77 25                	ja     c001e724 <ATA::read(unsigned long long, int, void*)+0x48>
c001e6ff:	b8 06 00 00 00       	mov    eax,0x6
c001e704:	85 f6                	test   esi,esi
c001e706:	74 1c                	je     c001e724 <ATA::read(unsigned long long, int, void*)+0x48>
c001e708:	50                   	push   eax
c001e709:	50                   	push   eax
c001e70a:	6a 00                	push   0x0
c001e70c:	56                   	push   esi
c001e70d:	52                   	push   edx
c001e70e:	53                   	push   ebx
c001e70f:	51                   	push   ecx
c001e710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e714:	e8 cd fb ff ff       	call   c001e2e6 <ATA::access(unsigned long long, int, void*, bool)>
c001e719:	83 c4 20             	add    esp,0x20
c001e71c:	85 c0                	test   eax,eax
c001e71e:	0f 95 c0             	setne  al
c001e721:	0f b6 c0             	movzx  eax,al
c001e724:	5b                   	pop    ebx
c001e725:	5e                   	pop    esi
c001e726:	5f                   	pop    edi
c001e727:	c3                   	ret    

c001e728 <ATA::write(unsigned long long, int, void*)>:
c001e728:	55                   	push   ebp
c001e729:	57                   	push   edi
c001e72a:	56                   	push   esi
c001e72b:	53                   	push   ebx
c001e72c:	83 ec 18             	sub    esp,0x18
c001e72f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e733:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e737:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e73b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e73f:	68 65 4d 02 c0       	push   0xc0024d65
c001e744:	e8 bb e2 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001e749:	8d 53 ff             	lea    edx,[ebx-0x1]
c001e74c:	83 c4 10             	add    esp,0x10
c001e74f:	b8 04 00 00 00       	mov    eax,0x4
c001e754:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001e75a:	77 25                	ja     c001e781 <ATA::write(unsigned long long, int, void*)+0x59>
c001e75c:	b8 06 00 00 00       	mov    eax,0x6
c001e761:	85 f6                	test   esi,esi
c001e763:	74 1c                	je     c001e781 <ATA::write(unsigned long long, int, void*)+0x59>
c001e765:	50                   	push   eax
c001e766:	50                   	push   eax
c001e767:	6a 01                	push   0x1
c001e769:	56                   	push   esi
c001e76a:	53                   	push   ebx
c001e76b:	55                   	push   ebp
c001e76c:	57                   	push   edi
c001e76d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e771:	e8 70 fb ff ff       	call   c001e2e6 <ATA::access(unsigned long long, int, void*, bool)>
c001e776:	83 c4 20             	add    esp,0x20
c001e779:	85 c0                	test   eax,eax
c001e77b:	0f 95 c0             	setne  al
c001e77e:	0f b6 c0             	movzx  eax,al
c001e781:	83 c4 0c             	add    esp,0xc
c001e784:	5b                   	pop    ebx
c001e785:	5e                   	pop    esi
c001e786:	5f                   	pop    edi
c001e787:	5d                   	pop    ebp
c001e788:	c3                   	ret    
c001e789:	90                   	nop

c001e78a <ATA::detectCHS()>:
c001e78a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e78e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001e794:	c1 e0 06             	shl    eax,0x6
c001e797:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001e79d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001e7a7:	c7 44 24 04 71 4d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024d71
c001e7af:	e9 8f 5a ff ff       	jmp    c0014243 <Krnl::panic(char const*)>

c001e7b4 <ATA::open(int, int, void*)>:
c001e7b4:	53                   	push   ebx
c001e7b5:	83 ec 08             	sub    esp,0x8
c001e7b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e7c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e7c4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e7ca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e7d0:	c1 e0 06             	shl    eax,0x6
c001e7d3:	01 d0                	add    eax,edx
c001e7d5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001e7dc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001e7e2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001e7e9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e7f3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001e7f9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e800:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001e807:	75 0c                	jne    c001e815 <ATA::open(int, int, void*)+0x61>
c001e809:	83 ec 0c             	sub    esp,0xc
c001e80c:	53                   	push   ebx
c001e80d:	e8 78 ff ff ff       	call   c001e78a <ATA::detectCHS()>
c001e812:	83 c4 10             	add    esp,0x10
c001e815:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e81b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e821:	c1 e0 06             	shl    eax,0x6
c001e824:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001e82b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e835:	d1 e8                	shr    eax,1
c001e837:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e83d:	6a 04                	push   0x4
c001e83f:	6a 0c                	push   0xc
c001e841:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e848:	50                   	push   eax
c001e849:	52                   	push   edx
c001e84a:	e8 8b eb ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e84f:	90                   	nop
c001e850:	90                   	nop
c001e851:	6a 00                	push   0x0
c001e853:	6a 0c                	push   0xc
c001e855:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e85c:	50                   	push   eax
c001e85d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e863:	e8 72 eb ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e868:	83 c4 14             	add    esp,0x14
c001e86b:	53                   	push   ebx
c001e86c:	e8 71 fa fe ff       	call   c000e2e2 <PhysicalDisk::startCache()>
c001e871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e874:	e8 9b 1a ff ff       	call   c0010314 <createPartitionsForDisk(PhysicalDisk*)>
c001e879:	31 c0                	xor    eax,eax
c001e87b:	83 c4 18             	add    esp,0x18
c001e87e:	5b                   	pop    ebx
c001e87f:	c3                   	ret    

c001e880 <ATAPI::write(unsigned long long, int, void*)>:
c001e880:	b8 03 00 00 00       	mov    eax,0x3
c001e885:	c3                   	ret    

c001e886 <ATAPI::close(int, int, void*)>:
c001e886:	83 ec 0c             	sub    esp,0xc
c001e889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e88d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e893:	85 c0                	test   eax,eax
c001e895:	74 0c                	je     c001e8a3 <ATAPI::close(int, int, void*)+0x1d>
c001e897:	83 ec 0c             	sub    esp,0xc
c001e89a:	8b 10                	mov    edx,DWORD PTR [eax]
c001e89c:	50                   	push   eax
c001e89d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e8a0:	83 c4 10             	add    esp,0x10
c001e8a3:	31 c0                	xor    eax,eax
c001e8a5:	83 c4 0c             	add    esp,0xc
c001e8a8:	c3                   	ret    
c001e8a9:	90                   	nop

c001e8aa <ATAPI::ATAPI()>:
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b1:	83 ec 04             	sub    esp,0x4
c001e8b4:	68 00 08 00 00       	push   0x800
c001e8b9:	68 a9 4e 02 c0       	push   0xc0024ea9
c001e8be:	50                   	push   eax
c001e8bf:	e8 b6 f9 fe ff       	call   c000e27a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e8c4:	83 c4 10             	add    esp,0x10
c001e8c7:	ba c4 4d 02 c0       	mov    edx,0xc0024dc4
c001e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d0:	89 10                	mov    DWORD PTR [eax],edx
c001e8d2:	90                   	nop
c001e8d3:	83 c4 0c             	add    esp,0xc
c001e8d6:	c3                   	ret    
c001e8d7:	90                   	nop

c001e8d8 <ATAPI::readyForCommand()>:
c001e8d8:	56                   	push   esi
c001e8d9:	53                   	push   ebx
c001e8da:	53                   	push   ebx
c001e8db:	31 db                	xor    ebx,ebx
c001e8dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8e1:	51                   	push   ecx
c001e8e2:	6a 0c                	push   0xc
c001e8e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e8eb:	50                   	push   eax
c001e8ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e8f2:	e8 a3 eb ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001e8f7:	83 c4 10             	add    esp,0x10
c001e8fa:	a8 88                	test   al,0x88
c001e8fc:	74 1f                	je     c001e91d <ATAPI::readyForCommand()+0x45>
c001e8fe:	43                   	inc    ebx
c001e8ff:	83 fb 63             	cmp    ebx,0x63
c001e902:	7e dd                	jle    c001e8e1 <ATAPI::readyForCommand()+0x9>
c001e904:	83 ec 0c             	sub    esp,0xc
c001e907:	6a 0a                	push   0xa
c001e909:	e8 9e 97 ff ff       	call   c00180ac <milliTenthSleep(unsigned int)>
c001e90e:	83 c4 10             	add    esp,0x10
c001e911:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e917:	75 c8                	jne    c001e8e1 <ATAPI::readyForCommand()+0x9>
c001e919:	31 c0                	xor    eax,eax
c001e91b:	eb 02                	jmp    c001e91f <ATAPI::readyForCommand()+0x47>
c001e91d:	b0 01                	mov    al,0x1
c001e91f:	5a                   	pop    edx
c001e920:	5b                   	pop    ebx
c001e921:	5e                   	pop    esi
c001e922:	c3                   	ret    
c001e923:	90                   	nop

c001e924 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001e924:	55                   	push   ebp
c001e925:	57                   	push   edi
c001e926:	56                   	push   esi
c001e927:	53                   	push   ebx
c001e928:	83 ec 20             	sub    esp,0x20
c001e92b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e92f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001e933:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e937:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e93b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e93f:	6a 01                	push   0x1
c001e941:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e948:	50                   	push   eax
c001e949:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e94f:	e8 8e ec ff ff       	call   c001d5e2 <IDE::enableIRQs(unsigned char, bool)>
c001e954:	5e                   	pop    esi
c001e955:	58                   	pop    eax
c001e956:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e95d:	50                   	push   eax
c001e95e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e964:	e8 4b ea ff ff       	call   c001d3b4 <IDE::prepareInterrupt(unsigned char)>
c001e969:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e96c:	e8 67 ff ff ff       	call   c001e8d8 <ATAPI::readyForCommand()>
c001e971:	83 c4 10             	add    esp,0x10
c001e974:	84 c0                	test   al,al
c001e976:	75 0a                	jne    c001e982 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001e978:	bb 01 00 00 00       	mov    ebx,0x1
c001e97d:	e9 57 02 00 00       	jmp    c001ebd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e982:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001e988:	c1 e0 04             	shl    eax,0x4
c001e98b:	0f b6 c0             	movzx  eax,al
c001e98e:	50                   	push   eax
c001e98f:	6a 06                	push   0x6
c001e991:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e998:	50                   	push   eax
c001e999:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e99f:	e8 36 ea ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9a4:	6a 00                	push   0x0
c001e9a6:	6a 01                	push   0x1
c001e9a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e9af:	50                   	push   eax
c001e9b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e9b6:	e8 1f ea ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9bb:	83 c4 20             	add    esp,0x20
c001e9be:	0f b6 c3             	movzx  eax,bl
c001e9c1:	0f b6 df             	movzx  ebx,bh
c001e9c4:	50                   	push   eax
c001e9c5:	6a 04                	push   0x4
c001e9c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e9ce:	50                   	push   eax
c001e9cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e9d5:	e8 00 ea ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9da:	53                   	push   ebx
c001e9db:	6a 05                	push   0x5
c001e9dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e9e4:	50                   	push   eax
c001e9e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e9eb:	e8 ea e9 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9f0:	83 c4 20             	add    esp,0x20
c001e9f3:	68 a0 00 00 00       	push   0xa0
c001e9f8:	6a 07                	push   0x7
c001e9fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ea01:	50                   	push   eax
c001ea02:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ea08:	e8 cd e9 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea0d:	83 c4 0c             	add    esp,0xc
c001ea10:	6a 01                	push   0x1
c001ea12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ea19:	50                   	push   eax
c001ea1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ea20:	e8 4d f4 ff ff       	call   c001de72 <IDE::polling(unsigned char, unsigned int)>
c001ea25:	83 c4 10             	add    esp,0x10
c001ea28:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ea2e:	84 c0                	test   al,al
c001ea30:	74 23                	je     c001ea55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ea32:	0f b6 d8             	movzx  ebx,al
c001ea35:	0f b6 d2             	movzx  edx,dl
c001ea38:	53                   	push   ebx
c001ea39:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ea40:	50                   	push   eax
c001ea41:	52                   	push   edx
c001ea42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ea48:	e8 75 f3 ff ff       	call   c001ddc2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ea4d:	83 c4 10             	add    esp,0x10
c001ea50:	e9 84 01 00 00       	jmp    c001ebd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ea55:	0f b6 d2             	movzx  edx,dl
c001ea58:	53                   	push   ebx
c001ea59:	53                   	push   ebx
c001ea5a:	52                   	push   edx
c001ea5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ea61:	e8 62 e9 ff ff       	call   c001d3c8 <IDE::getBase(unsigned char)>
c001ea66:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ea6a:	b9 06 00 00 00       	mov    ecx,0x6
c001ea6f:	89 c2                	mov    edx,eax
c001ea71:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ea74:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ea81:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ea88:	85 db                	test   ebx,ebx
c001ea8a:	0f 84 ec 00 00 00    	je     c001eb7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ea90:	51                   	push   ecx
c001ea91:	51                   	push   ecx
c001ea92:	52                   	push   edx
c001ea93:	50                   	push   eax
c001ea94:	e8 af ea ff ff       	call   c001d548 <IDE::waitInterrupt(unsigned char)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	84 c0                	test   al,al
c001ea9e:	0f 84 d4 fe ff ff    	je     c001e978 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001eaa4:	56                   	push   esi
c001eaa5:	56                   	push   esi
c001eaa6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eaad:	50                   	push   eax
c001eaae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eab4:	e8 fb e8 ff ff       	call   c001d3b4 <IDE::prepareInterrupt(unsigned char)>
c001eab9:	83 c4 0c             	add    esp,0xc
c001eabc:	6a 04                	push   0x4
c001eabe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eac5:	50                   	push   eax
c001eac6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eacc:	e8 c9 e9 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001ead1:	83 c4 0c             	add    esp,0xc
c001ead4:	89 c6                	mov    esi,eax
c001ead6:	6a 05                	push   0x5
c001ead8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eadf:	50                   	push   eax
c001eae0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eae6:	e8 af e9 ff ff       	call   c001d49a <IDE::read(unsigned char, unsigned char)>
c001eaeb:	89 f1                	mov    ecx,esi
c001eaed:	0f b6 c0             	movzx  eax,al
c001eaf0:	0f b6 f1             	movzx  esi,cl
c001eaf3:	c1 e0 08             	shl    eax,0x8
c001eaf6:	09 c6                	or     esi,eax
c001eaf8:	d1 fe                	sar    esi,1
c001eafa:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001eafe:	83 c4 10             	add    esp,0x10
c001eb01:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001eb06:	74 41                	je     c001eb49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001eb08:	31 c9                	xor    ecx,ecx
c001eb0a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001eb10:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eb17:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001eb1b:	75 0a                	jne    c001eb27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001eb1d:	01 c9                	add    ecx,ecx
c001eb1f:	01 cd                	add    ebp,ecx
c001eb21:	4b                   	dec    ebx
c001eb22:	e9 54 ff ff ff       	jmp    c001ea7b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001eb27:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001eb2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb30:	51                   	push   ecx
c001eb31:	51                   	push   ecx
c001eb32:	52                   	push   edx
c001eb33:	50                   	push   eax
c001eb34:	e8 8f e8 ff ff       	call   c001d3c8 <IDE::getBase(unsigned char)>
c001eb39:	89 c2                	mov    edx,eax
c001eb3b:	89 f0                	mov    eax,esi
c001eb3d:	66 ef                	out    dx,ax
c001eb3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eb43:	83 c4 10             	add    esp,0x10
c001eb46:	41                   	inc    ecx
c001eb47:	eb c1                	jmp    c001eb0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001eb49:	31 f6                	xor    esi,esi
c001eb4b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001eb51:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eb58:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001eb5c:	75 06                	jne    c001eb64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001eb5e:	01 f6                	add    esi,esi
c001eb60:	01 f5                	add    ebp,esi
c001eb62:	eb bd                	jmp    c001eb21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001eb64:	51                   	push   ecx
c001eb65:	51                   	push   ecx
c001eb66:	52                   	push   edx
c001eb67:	50                   	push   eax
c001eb68:	e8 5b e8 ff ff       	call   c001d3c8 <IDE::getBase(unsigned char)>
c001eb6d:	89 c2                	mov    edx,eax
c001eb6f:	66 ed                	in     ax,dx
c001eb71:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001eb76:	83 c4 10             	add    esp,0x10
c001eb79:	46                   	inc    esi
c001eb7a:	eb cf                	jmp    c001eb4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001eb7c:	51                   	push   ecx
c001eb7d:	51                   	push   ecx
c001eb7e:	52                   	push   edx
c001eb7f:	50                   	push   eax
c001eb80:	e8 c3 e9 ff ff       	call   c001d548 <IDE::waitInterrupt(unsigned char)>
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	84 c0                	test   al,al
c001eb8a:	0f 84 e8 fd ff ff    	je     c001e978 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001eb90:	bb a0 86 01 00       	mov    ebx,0x186a0
c001eb95:	52                   	push   edx
c001eb96:	52                   	push   edx
c001eb97:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eb9e:	50                   	push   eax
c001eb9f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eba5:	e8 0a e8 ff ff       	call   c001d3b4 <IDE::prepareInterrupt(unsigned char)>
c001ebaa:	83 c4 10             	add    esp,0x10
c001ebad:	50                   	push   eax
c001ebae:	50                   	push   eax
c001ebaf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ebb6:	50                   	push   eax
c001ebb7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ebbd:	e8 06 e8 ff ff       	call   c001d3c8 <IDE::getBase(unsigned char)>
c001ebc2:	8d 50 07             	lea    edx,[eax+0x7]
c001ebc5:	ec                   	in     al,dx
c001ebc6:	83 c4 10             	add    esp,0x10
c001ebc9:	a8 88                	test   al,0x88
c001ebcb:	74 0a                	je     c001ebd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ebcd:	4b                   	dec    ebx
c001ebce:	75 dd                	jne    c001ebad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ebd0:	bb 02 00 00 00       	mov    ebx,0x2
c001ebd5:	eb 02                	jmp    c001ebd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ebd7:	31 db                	xor    ebx,ebx
c001ebd9:	83 c4 1c             	add    esp,0x1c
c001ebdc:	89 d8                	mov    eax,ebx
c001ebde:	5b                   	pop    ebx
c001ebdf:	5e                   	pop    esi
c001ebe0:	5f                   	pop    edi
c001ebe1:	5d                   	pop    ebp
c001ebe2:	c3                   	ret    
c001ebe3:	90                   	nop

c001ebe4 <ATAPI::diskRemoved()>:
c001ebe4:	83 ec 18             	sub    esp,0x18
c001ebe7:	68 b5 4e 02 c0       	push   0xc0024eb5
c001ebec:	e8 13 de fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001ebf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebf5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ebfc:	83 c4 1c             	add    esp,0x1c
c001ebff:	c3                   	ret    

c001ec00 <ATAPI::eject()>:
c001ec00:	57                   	push   edi
c001ec01:	b9 03 00 00 00       	mov    ecx,0x3
c001ec06:	53                   	push   ebx
c001ec07:	83 ec 14             	sub    esp,0x14
c001ec0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ec0e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ec12:	fc                   	cld    
c001ec13:	31 c0                	xor    eax,eax
c001ec15:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec17:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ec1c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ec21:	50                   	push   eax
c001ec22:	50                   	push   eax
c001ec23:	6a 00                	push   0x0
c001ec25:	6a 00                	push   0x0
c001ec27:	6a 00                	push   0x0
c001ec29:	6a 02                	push   0x2
c001ec2b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ec2f:	50                   	push   eax
c001ec30:	53                   	push   ebx
c001ec31:	e8 ee fc ff ff       	call   c001e924 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ec36:	83 c4 14             	add    esp,0x14
c001ec39:	53                   	push   ebx
c001ec3a:	e8 a5 ff ff ff       	call   c001ebe4 <ATAPI::diskRemoved()>
c001ec3f:	83 c4 24             	add    esp,0x24
c001ec42:	31 c0                	xor    eax,eax
c001ec44:	5b                   	pop    ebx
c001ec45:	5f                   	pop    edi
c001ec46:	c3                   	ret    
c001ec47:	90                   	nop

c001ec48 <ATAPI::diskInserted()>:
c001ec48:	53                   	push   ebx
c001ec49:	83 ec 14             	sub    esp,0x14
c001ec4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ec50:	68 cc 4e 02 c0       	push   0xc0024ecc
c001ec55:	e8 aa dd fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001ec5a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ec61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec64:	e8 79 f6 fe ff       	call   c000e2e2 <PhysicalDisk::startCache()>
c001ec69:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ec6d:	83 c4 18             	add    esp,0x18
c001ec70:	5b                   	pop    ebx
c001ec71:	e9 9e 16 ff ff       	jmp    c0010314 <createPartitionsForDisk(PhysicalDisk*)>

c001ec76 <ATAPI::detectMedia()>:
c001ec76:	56                   	push   esi
c001ec77:	53                   	push   ebx
c001ec78:	83 ec 28             	sub    esp,0x28
c001ec7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ec7f:	6a 0c                	push   0xc
c001ec81:	6a 00                	push   0x0
c001ec83:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ec87:	56                   	push   esi
c001ec88:	e8 f7 19 fe ff       	call   c0000684 <memset>
c001ec8d:	58                   	pop    eax
c001ec8e:	5a                   	pop    edx
c001ec8f:	6a 00                	push   0x0
c001ec91:	6a 00                	push   0x0
c001ec93:	6a 00                	push   0x0
c001ec95:	6a 00                	push   0x0
c001ec97:	56                   	push   esi
c001ec98:	53                   	push   ebx
c001ec99:	e8 86 fc ff ff       	call   c001e924 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ec9e:	83 c4 1c             	add    esp,0x1c
c001eca1:	6a 0c                	push   0xc
c001eca3:	6a 00                	push   0x0
c001eca5:	56                   	push   esi
c001eca6:	e8 d9 19 fe ff       	call   c0000684 <memset>
c001ecab:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ecb0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ecb5:	59                   	pop    ecx
c001ecb6:	58                   	pop    eax
c001ecb7:	6a 01                	push   0x1
c001ecb9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ecbd:	50                   	push   eax
c001ecbe:	6a 00                	push   0x0
c001ecc0:	6a 12                	push   0x12
c001ecc2:	56                   	push   esi
c001ecc3:	53                   	push   ebx
c001ecc4:	e8 5b fc ff ff       	call   c001e924 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ecc9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001eccd:	83 c4 20             	add    esp,0x20
c001ecd0:	83 e0 7f             	and    eax,0x7f
c001ecd3:	3c 70                	cmp    al,0x70
c001ecd5:	74 15                	je     c001ecec <ATAPI::detectMedia()+0x76>
c001ecd7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ecde:	75 0c                	jne    c001ecec <ATAPI::detectMedia()+0x76>
c001ece0:	83 ec 0c             	sub    esp,0xc
c001ece3:	53                   	push   ebx
c001ece4:	e8 5f ff ff ff       	call   c001ec48 <ATAPI::diskInserted()>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ecf0:	83 e0 0f             	and    eax,0xf
c001ecf3:	3c 02                	cmp    al,0x2
c001ecf5:	75 1b                	jne    c001ed12 <ATAPI::detectMedia()+0x9c>
c001ecf7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ecfc:	75 2d                	jne    c001ed2b <ATAPI::detectMedia()+0xb5>
c001ecfe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ed05:	74 24                	je     c001ed2b <ATAPI::detectMedia()+0xb5>
c001ed07:	83 ec 0c             	sub    esp,0xc
c001ed0a:	53                   	push   ebx
c001ed0b:	e8 d4 fe ff ff       	call   c001ebe4 <ATAPI::diskRemoved()>
c001ed10:	eb 16                	jmp    c001ed28 <ATAPI::detectMedia()+0xb2>
c001ed12:	84 c0                	test   al,al
c001ed14:	75 15                	jne    c001ed2b <ATAPI::detectMedia()+0xb5>
c001ed16:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ed1d:	75 0c                	jne    c001ed2b <ATAPI::detectMedia()+0xb5>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	53                   	push   ebx
c001ed23:	e8 20 ff ff ff       	call   c001ec48 <ATAPI::diskInserted()>
c001ed28:	83 c4 10             	add    esp,0x10
c001ed2b:	83 c4 24             	add    esp,0x24
c001ed2e:	5b                   	pop    ebx
c001ed2f:	5e                   	pop    esi
c001ed30:	c3                   	ret    
c001ed31:	90                   	nop

c001ed32 <ATAPI::open(int, int, void*)>:
c001ed32:	53                   	push   ebx
c001ed33:	83 ec 08             	sub    esp,0x8
c001ed36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ed3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ed42:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ed48:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ed4e:	c1 e0 06             	shl    eax,0x6
c001ed51:	01 d0                	add    eax,edx
c001ed53:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ed5a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ed60:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ed67:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ed71:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ed77:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ed7e:	6a 04                	push   0x4
c001ed80:	6a 0c                	push   0xc
c001ed82:	51                   	push   ecx
c001ed83:	52                   	push   edx
c001ed84:	e8 51 e6 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed89:	90                   	nop
c001ed8a:	90                   	nop
c001ed8b:	6a 00                	push   0x0
c001ed8d:	6a 0c                	push   0xc
c001ed8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed96:	50                   	push   eax
c001ed97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed9d:	e8 38 e6 ff ff       	call   c001d3da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eda2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001eda9:	83 c4 14             	add    esp,0x14
c001edac:	53                   	push   ebx
c001edad:	e8 c4 fe ff ff       	call   c001ec76 <ATAPI::detectMedia()>
c001edb2:	31 c0                	xor    eax,eax
c001edb4:	83 c4 18             	add    esp,0x18
c001edb7:	5b                   	pop    ebx
c001edb8:	c3                   	ret    
c001edb9:	90                   	nop

c001edba <ATAPI::read(unsigned long long, int, void*)>:
c001edba:	55                   	push   ebp
c001edbb:	57                   	push   edi
c001edbc:	56                   	push   esi
c001edbd:	53                   	push   ebx
c001edbe:	83 ec 1c             	sub    esp,0x1c
c001edc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001edc5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001edc9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001edcd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001edd4:	74 41                	je     c001ee17 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001edd6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001edda:	b9 03 00 00 00       	mov    ecx,0x3
c001eddf:	fc                   	cld    
c001ede0:	31 c0                	xor    eax,eax
c001ede2:	86 fb                	xchg   bl,bh
c001ede4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ede6:	c1 c3 10             	rol    ebx,0x10
c001ede9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001edee:	89 e8                	mov    eax,ebp
c001edf0:	86 fb                	xchg   bl,bh
c001edf2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001edf6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001edfa:	50                   	push   eax
c001edfb:	50                   	push   eax
c001edfc:	55                   	push   ebp
c001edfd:	c1 e5 0b             	shl    ebp,0xb
c001ee00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ee04:	6a 00                	push   0x0
c001ee06:	55                   	push   ebp
c001ee07:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ee0b:	50                   	push   eax
c001ee0c:	56                   	push   esi
c001ee0d:	e8 12 fb ff ff       	call   c001e924 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ee12:	83 c4 20             	add    esp,0x20
c001ee15:	eb 1a                	jmp    c001ee31 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001ee17:	83 ec 0c             	sub    esp,0xc
c001ee1a:	56                   	push   esi
c001ee1b:	e8 56 fe ff ff       	call   c001ec76 <ATAPI::detectMedia()>
c001ee20:	83 c4 10             	add    esp,0x10
c001ee23:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ee2a:	75 aa                	jne    c001edd6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ee2c:	b8 02 00 00 00       	mov    eax,0x2
c001ee31:	83 c4 1c             	add    esp,0x1c
c001ee34:	5b                   	pop    ebx
c001ee35:	5e                   	pop    esi
c001ee36:	5f                   	pop    edi
c001ee37:	5d                   	pop    ebp
c001ee38:	c3                   	ret    
c001ee39:	90                   	nop

c001ee3a <SATA::close(int, int, void*)>:
c001ee3a:	83 ec 0c             	sub    esp,0xc
c001ee3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee41:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ee47:	85 c0                	test   eax,eax
c001ee49:	74 0c                	je     c001ee57 <SATA::close(int, int, void*)+0x1d>
c001ee4b:	83 ec 0c             	sub    esp,0xc
c001ee4e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ee50:	50                   	push   eax
c001ee51:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ee54:	83 c4 10             	add    esp,0x10
c001ee57:	31 c0                	xor    eax,eax
c001ee59:	83 c4 0c             	add    esp,0xc
c001ee5c:	c3                   	ret    
c001ee5d:	90                   	nop

c001ee5e <SATA::powerSaving(PowerSavingLevel)>:
c001ee5e:	c3                   	ret    
c001ee5f:	90                   	nop

c001ee60 <SATA::open(int, int, void*)>:
c001ee60:	56                   	push   esi
c001ee61:	53                   	push   ebx
c001ee62:	50                   	push   eax
c001ee63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ee67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee6b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ee75:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ee7b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ee85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee89:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ee93:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ee99:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eea0:	e8 fa ae fe ff       	call   c0009d9f <Phys::allocatePage()>
c001eea5:	89 c6                	mov    esi,eax
c001eea7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001eead:	81 c6 00 10 00 00    	add    esi,0x1000
c001eeb3:	e8 e7 ae fe ff       	call   c0009d9f <Phys::allocatePage()>
c001eeb8:	39 c6                	cmp    esi,eax
c001eeba:	74 10                	je     c001eecc <SATA::open(int, int, void*)+0x6c>
c001eebc:	83 ec 0c             	sub    esp,0xc
c001eebf:	68 f4 4d 02 c0       	push   0xc0024df4
c001eec4:	e8 7a 53 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001eec9:	83 c4 10             	add    esp,0x10
c001eecc:	83 ec 0c             	sub    esp,0xc
c001eecf:	6a 02                	push   0x2
c001eed1:	e8 53 c7 fe ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c001eed6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001eedc:	6a 03                	push   0x3
c001eede:	50                   	push   eax
c001eedf:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001eee5:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c001eeeb:	e8 e0 cd fe ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001eef0:	83 c4 14             	add    esp,0x14
c001eef3:	53                   	push   ebx
c001eef4:	e8 e9 f3 fe ff       	call   c000e2e2 <PhysicalDisk::startCache()>
c001eef9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eefc:	e8 13 14 ff ff       	call   c0010314 <createPartitionsForDisk(PhysicalDisk*)>
c001ef01:	83 c4 14             	add    esp,0x14
c001ef04:	31 c0                	xor    eax,eax
c001ef06:	5b                   	pop    ebx
c001ef07:	5e                   	pop    esi
c001ef08:	c3                   	ret    
c001ef09:	90                   	nop

c001ef0a <SATA::SATA()>:
c001ef0a:	83 ec 0c             	sub    esp,0xc
c001ef0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef11:	83 ec 04             	sub    esp,0x4
c001ef14:	68 00 02 00 00       	push   0x200
c001ef19:	68 08 4e 02 c0       	push   0xc0024e08
c001ef1e:	50                   	push   eax
c001ef1f:	e8 56 f3 fe ff       	call   c000e27a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	ba 78 4e 02 c0       	mov    edx,0xc0024e78
c001ef2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef30:	89 10                	mov    DWORD PTR [eax],edx
c001ef32:	90                   	nop
c001ef33:	83 c4 0c             	add    esp,0xc
c001ef36:	c3                   	ret    
c001ef37:	90                   	nop

c001ef38 <SATA::access(unsigned long long, int, void*, bool)>:
c001ef38:	55                   	push   ebp
c001ef39:	57                   	push   edi
c001ef3a:	56                   	push   esi
c001ef3b:	53                   	push   ebx
c001ef3c:	83 ec 2c             	sub    esp,0x2c
c001ef3f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ef43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ef47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ef4b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ef4f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ef53:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ef58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef5c:	7e 10                	jle    c001ef6e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ef5e:	83 ec 0c             	sub    esp,0xc
c001ef61:	68 18 4e 02 c0       	push   0xc0024e18
c001ef66:	e8 d8 52 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001ef6b:	83 c4 10             	add    esp,0x10
c001ef6e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ef74:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ef7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ef80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ef84:	89 d0                	mov    eax,edx
c001ef86:	c1 e0 07             	shl    eax,0x7
c001ef89:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ef8d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ef97:	51                   	push   ecx
c001ef98:	8d 42 02             	lea    eax,[edx+0x2]
c001ef9b:	51                   	push   ecx
c001ef9c:	c1 e0 07             	shl    eax,0x7
c001ef9f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001efa3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001efa7:	50                   	push   eax
c001efa8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001efae:	e8 9f ef ff ff       	call   c001df52 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001efb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001efb7:	83 c4 10             	add    esp,0x10
c001efba:	b8 01 00 00 00       	mov    eax,0x1
c001efbf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001efc4:	0f 84 cb 01 00 00    	je     c001f195 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001efca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001efce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001efd2:	c1 e0 09             	shl    eax,0x9
c001efd5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001efda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001efde:	74 0e                	je     c001efee <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001efe0:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001efe6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001efea:	89 c1                	mov    ecx,eax
c001efec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001efee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001eff2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001eff8:	8d 42 02             	lea    eax,[edx+0x2]
c001effb:	c1 e0 07             	shl    eax,0x7
c001effe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f002:	8b 00                	mov    eax,DWORD PTR [eax]
c001f004:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f00a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f010:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f014:	c1 e1 05             	shl    ecx,0x5
c001f017:	01 c8                	add    eax,ecx
c001f019:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f01d:	83 e1 01             	and    ecx,0x1
c001f020:	89 ce                	mov    esi,ecx
c001f022:	8a 08                	mov    cl,BYTE PTR [eax]
c001f024:	c1 e6 06             	shl    esi,0x6
c001f027:	83 e1 bf             	and    ecx,0xffffffbf
c001f02a:	09 f1                	or     ecx,esi
c001f02c:	88 08                	mov    BYTE PTR [eax],cl
c001f02e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f030:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f036:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f03c:	89 08                	mov    DWORD PTR [eax],ecx
c001f03e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f044:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f04a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f050:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f053:	50                   	push   eax
c001f054:	68 90 00 00 00       	push   0x90
c001f059:	6a 00                	push   0x0
c001f05b:	56                   	push   esi
c001f05c:	e8 23 16 fe ff       	call   c0000684 <memset>
c001f061:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f067:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f06b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f071:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f075:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	48                   	dec    eax
c001f07d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f082:	89 c1                	mov    ecx,eax
c001f084:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f08a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f08f:	09 c8                	or     eax,ecx
c001f091:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f097:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f09a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f0a1:	66 25 00 7f          	and    ax,0x7f00
c001f0a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f0a9:	66 0d 27 80          	or     ax,0x8027
c001f0ad:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f0b2:	66 89 06             	mov    WORD PTR [esi],ax
c001f0b5:	19 c0                	sbb    eax,eax
c001f0b7:	83 e0 f0             	and    eax,0xfffffff0
c001f0ba:	83 c0 35             	add    eax,0x35
c001f0bd:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f0c0:	89 e8                	mov    eax,ebp
c001f0c2:	c1 e8 10             	shr    eax,0x10
c001f0c5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f0c8:	89 e8                	mov    eax,ebp
c001f0ca:	c1 e8 18             	shr    eax,0x18
c001f0cd:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f0d0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f0d4:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f0d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f0db:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f0de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f0e2:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f0e6:	89 d6                	mov    esi,edx
c001f0e8:	31 c0                	xor    eax,eax
c001f0ea:	c1 e6 07             	shl    esi,0x7
c001f0ed:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f0f1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f0f7:	80 e1 88             	and    cl,0x88
c001f0fa:	74 0a                	je     c001f106 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f0fc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f101:	74 0a                	je     c001f10d <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f103:	40                   	inc    eax
c001f104:	eb eb                	jmp    c001f0f1 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f106:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f10b:	75 0a                	jne    c001f117 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f10d:	83 ec 0c             	sub    esp,0xc
c001f110:	68 51 4e 02 c0       	push   0xc0024e51
c001f115:	eb 56                	jmp    c001f16d <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f117:	b8 01 00 00 00       	mov    eax,0x1
c001f11c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f120:	c1 e2 07             	shl    edx,0x7
c001f123:	d3 e0                	shl    eax,cl
c001f125:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f129:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f12f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f135:	85 c8                	test   eax,ecx
c001f137:	74 20                	je     c001f159 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f139:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f13f:	0f ba e1 1e          	bt     ecx,0x1e
c001f143:	73 ea                	jae    c001f12f <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f145:	83 ec 0c             	sub    esp,0xc
c001f148:	68 5f 4e 02 c0       	push   0xc0024e5f
c001f14d:	e8 f1 50 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001f152:	83 c4 10             	add    esp,0x10
c001f155:	31 c0                	xor    eax,eax
c001f157:	eb 3c                	jmp    c001f195 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f159:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f15f:	0f ba e0 1e          	bt     eax,0x1e
c001f163:	73 17                	jae    c001f17c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f165:	83 ec 0c             	sub    esp,0xc
c001f168:	68 5f 4e 02 c0       	push   0xc0024e5f
c001f16d:	e8 d1 50 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001f172:	83 c4 10             	add    esp,0x10
c001f175:	b8 01 00 00 00       	mov    eax,0x1
c001f17a:	eb 19                	jmp    c001f195 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f17c:	31 c0                	xor    eax,eax
c001f17e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f183:	75 10                	jne    c001f195 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f185:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f18b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f18f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f193:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f195:	83 c4 2c             	add    esp,0x2c
c001f198:	5b                   	pop    ebx
c001f199:	5e                   	pop    esi
c001f19a:	5f                   	pop    edi
c001f19b:	5d                   	pop    ebp
c001f19c:	c3                   	ret    
c001f19d:	90                   	nop

c001f19e <SATA::read(unsigned long long, int, void*)>:
c001f19e:	57                   	push   edi
c001f19f:	b8 04 00 00 00       	mov    eax,0x4
c001f1a4:	56                   	push   esi
c001f1a5:	53                   	push   ebx
c001f1a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f1aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f1ae:	8d 7a ff             	lea    edi,[edx-0x1]
c001f1b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f1b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f1b9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f1bf:	77 25                	ja     c001f1e6 <SATA::read(unsigned long long, int, void*)+0x48>
c001f1c1:	b8 06 00 00 00       	mov    eax,0x6
c001f1c6:	85 f6                	test   esi,esi
c001f1c8:	74 1c                	je     c001f1e6 <SATA::read(unsigned long long, int, void*)+0x48>
c001f1ca:	50                   	push   eax
c001f1cb:	50                   	push   eax
c001f1cc:	6a 00                	push   0x0
c001f1ce:	56                   	push   esi
c001f1cf:	52                   	push   edx
c001f1d0:	53                   	push   ebx
c001f1d1:	51                   	push   ecx
c001f1d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f1d6:	e8 5d fd ff ff       	call   c001ef38 <SATA::access(unsigned long long, int, void*, bool)>
c001f1db:	83 c4 20             	add    esp,0x20
c001f1de:	85 c0                	test   eax,eax
c001f1e0:	0f 95 c0             	setne  al
c001f1e3:	0f b6 c0             	movzx  eax,al
c001f1e6:	5b                   	pop    ebx
c001f1e7:	5e                   	pop    esi
c001f1e8:	5f                   	pop    edi
c001f1e9:	c3                   	ret    

c001f1ea <SATA::write(unsigned long long, int, void*)>:
c001f1ea:	55                   	push   ebp
c001f1eb:	b8 04 00 00 00       	mov    eax,0x4
c001f1f0:	57                   	push   edi
c001f1f1:	56                   	push   esi
c001f1f2:	53                   	push   ebx
c001f1f3:	83 ec 0c             	sub    esp,0xc
c001f1f6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f1fa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f1fe:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f201:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f205:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f209:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f20f:	77 3d                	ja     c001f24e <SATA::write(unsigned long long, int, void*)+0x64>
c001f211:	b8 06 00 00 00       	mov    eax,0x6
c001f216:	85 ed                	test   ebp,ebp
c001f218:	74 34                	je     c001f24e <SATA::write(unsigned long long, int, void*)+0x64>
c001f21a:	c1 e3 09             	shl    ebx,0x9
c001f21d:	01 eb                	add    ebx,ebp
c001f21f:	89 d6                	mov    esi,edx
c001f221:	89 cf                	mov    edi,ecx
c001f223:	83 c6 01             	add    esi,0x1
c001f226:	83 d7 00             	adc    edi,0x0
c001f229:	50                   	push   eax
c001f22a:	50                   	push   eax
c001f22b:	6a 01                	push   0x1
c001f22d:	55                   	push   ebp
c001f22e:	81 c5 00 02 00 00    	add    ebp,0x200
c001f234:	6a 01                	push   0x1
c001f236:	51                   	push   ecx
c001f237:	52                   	push   edx
c001f238:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f23c:	e8 f7 fc ff ff       	call   c001ef38 <SATA::access(unsigned long long, int, void*, bool)>
c001f241:	83 c4 20             	add    esp,0x20
c001f244:	89 f2                	mov    edx,esi
c001f246:	89 f9                	mov    ecx,edi
c001f248:	39 dd                	cmp    ebp,ebx
c001f24a:	75 d3                	jne    c001f21f <SATA::write(unsigned long long, int, void*)+0x35>
c001f24c:	31 c0                	xor    eax,eax
c001f24e:	83 c4 0c             	add    esp,0xc
c001f251:	5b                   	pop    ebx
c001f252:	5e                   	pop    esi
c001f253:	5f                   	pop    edi
c001f254:	5d                   	pop    ebp
c001f255:	c3                   	ret    

c001f256 <SATAPI::write(unsigned long long, int, void*)>:
c001f256:	b8 03 00 00 00       	mov    eax,0x3
c001f25b:	c3                   	ret    

c001f25c <SATAPI::close(int, int, void*)>:
c001f25c:	83 ec 0c             	sub    esp,0xc
c001f25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f263:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f269:	85 c0                	test   eax,eax
c001f26b:	74 0c                	je     c001f279 <SATAPI::close(int, int, void*)+0x1d>
c001f26d:	83 ec 0c             	sub    esp,0xc
c001f270:	8b 10                	mov    edx,DWORD PTR [eax]
c001f272:	50                   	push   eax
c001f273:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f276:	83 c4 10             	add    esp,0x10
c001f279:	31 c0                	xor    eax,eax
c001f27b:	83 c4 0c             	add    esp,0xc
c001f27e:	c3                   	ret    
c001f27f:	90                   	nop

c001f280 <SATAPI::SATAPI()>:
c001f280:	83 ec 0c             	sub    esp,0xc
c001f283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f287:	83 ec 04             	sub    esp,0x4
c001f28a:	68 00 08 00 00       	push   0x800
c001f28f:	68 a8 4e 02 c0       	push   0xc0024ea8
c001f294:	50                   	push   eax
c001f295:	e8 e0 ef fe ff       	call   c000e27a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f29a:	83 c4 10             	add    esp,0x10
c001f29d:	ba 54 4f 02 c0       	mov    edx,0xc0024f54
c001f2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a6:	89 10                	mov    DWORD PTR [eax],edx
c001f2a8:	90                   	nop
c001f2a9:	83 c4 0c             	add    esp,0xc
c001f2ac:	c3                   	ret    
c001f2ad:	90                   	nop

c001f2ae <SATAPI::diskRemoved()>:
c001f2ae:	83 ec 18             	sub    esp,0x18
c001f2b1:	68 b4 4e 02 c0       	push   0xc0024eb4
c001f2b6:	e8 49 d7 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001f2bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2bf:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f2c6:	83 c4 1c             	add    esp,0x1c
c001f2c9:	c3                   	ret    

c001f2ca <SATAPI::diskInserted()>:
c001f2ca:	53                   	push   ebx
c001f2cb:	83 ec 14             	sub    esp,0x14
c001f2ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f2d2:	68 cb 4e 02 c0       	push   0xc0024ecb
c001f2d7:	e8 28 d7 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001f2dc:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f2e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f2e6:	e8 f7 ef fe ff       	call   c000e2e2 <PhysicalDisk::startCache()>
c001f2eb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f2ef:	83 c4 18             	add    esp,0x18
c001f2f2:	5b                   	pop    ebx
c001f2f3:	e9 1c 10 ff ff       	jmp    c0010314 <createPartitionsForDisk(PhysicalDisk*)>

c001f2f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f2f8:	55                   	push   ebp
c001f2f9:	57                   	push   edi
c001f2fa:	56                   	push   esi
c001f2fb:	53                   	push   ebx
c001f2fc:	83 ec 34             	sub    esp,0x34
c001f2ff:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f303:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f307:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f30b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f30f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f313:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f319:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f31f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f323:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f329:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f32d:	c1 e0 07             	shl    eax,0x7
c001f330:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f334:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f338:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f342:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f346:	8d 58 02             	lea    ebx,[eax+0x2]
c001f349:	c1 e3 07             	shl    ebx,0x7
c001f34c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f350:	53                   	push   ebx
c001f351:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f357:	e8 f6 eb ff ff       	call   c001df52 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f35c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f360:	83 c4 10             	add    esp,0x10
c001f363:	b8 01 00 00 00       	mov    eax,0x1
c001f368:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f36d:	0f 84 85 01 00 00    	je     c001f4f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f373:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f379:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f37b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f381:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f387:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f38b:	c1 e1 05             	shl    ecx,0x5
c001f38e:	01 c8                	add    eax,ecx
c001f390:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f392:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f398:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f39e:	89 08                	mov    DWORD PTR [eax],ecx
c001f3a0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f3a6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f3ac:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f3b2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f3b5:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f3b8:	50                   	push   eax
c001f3b9:	68 90 00 00 00       	push   0x90
c001f3be:	6a 00                	push   0x0
c001f3c0:	53                   	push   ebx
c001f3c1:	e8 be 12 fe ff       	call   c0000684 <memset>
c001f3c6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f3ca:	b9 0c 00 00 00       	mov    ecx,0xc
c001f3cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f3d1:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f3d7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f3db:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f3e1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f3e5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f3e9:	48                   	dec    eax
c001f3ea:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f3ef:	89 c1                	mov    ecx,eax
c001f3f1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f3f7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f3fc:	09 c8                	or     eax,ecx
c001f3fe:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f404:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f407:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f40e:	66 25 00 7f          	and    ax,0x7f00
c001f412:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f416:	66 0d 27 80          	or     ax,0x8027
c001f41a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f41e:	66 89 03             	mov    WORD PTR [ebx],ax
c001f421:	89 d0                	mov    eax,edx
c001f423:	c1 ea 18             	shr    edx,0x18
c001f426:	c1 e8 10             	shr    eax,0x10
c001f429:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f42c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f42f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f433:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f436:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f43a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f43d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f441:	83 c4 10             	add    esp,0x10
c001f444:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f448:	31 c0                	xor    eax,eax
c001f44a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f44e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f454:	80 e2 88             	and    dl,0x88
c001f457:	74 0a                	je     c001f463 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f459:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f45e:	74 0a                	je     c001f46a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f460:	40                   	inc    eax
c001f461:	eb eb                	jmp    c001f44e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f463:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f468:	75 0f                	jne    c001f479 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f46a:	83 ec 0c             	sub    esp,0xc
c001f46d:	68 51 4e 02 c0       	push   0xc0024e51
c001f472:	e8 cc 4d ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001f477:	eb 3f                	jmp    c001f4b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f479:	ba 01 00 00 00       	mov    edx,0x1
c001f47e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f486:	d3 e2                	shl    edx,cl
c001f488:	c1 e0 07             	shl    eax,0x7
c001f48b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f491:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f495:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f49b:	85 ca                	test   edx,ecx
c001f49d:	74 23                	je     c001f4c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f49f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f4a5:	0f ba e1 1e          	bt     ecx,0x1e
c001f4a9:	73 ea                	jae    c001f495 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f4ab:	83 ec 0c             	sub    esp,0xc
c001f4ae:	68 e3 4e 02 c0       	push   0xc0024ee3
c001f4b3:	e8 4c d5 fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001f4b8:	83 c4 10             	add    esp,0x10
c001f4bb:	b8 01 00 00 00       	mov    eax,0x1
c001f4c0:	eb 36                	jmp    c001f4f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f4c2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f4c8:	0f ba e0 1e          	bt     eax,0x1e
c001f4cc:	73 0a                	jae    c001f4d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f4ce:	83 ec 0c             	sub    esp,0xc
c001f4d1:	68 f6 4e 02 c0       	push   0xc0024ef6
c001f4d6:	eb db                	jmp    c001f4b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f4d8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f4dd:	74 17                	je     c001f4f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f4df:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f4e4:	74 10                	je     c001f4f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f4e6:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f4ec:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f4f0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f4f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f4f6:	31 c0                	xor    eax,eax
c001f4f8:	83 c4 2c             	add    esp,0x2c
c001f4fb:	5b                   	pop    ebx
c001f4fc:	5e                   	pop    esi
c001f4fd:	5f                   	pop    edi
c001f4fe:	5d                   	pop    ebp
c001f4ff:	c3                   	ret    

c001f500 <SATAPI::eject()>:
c001f500:	57                   	push   edi
c001f501:	b9 03 00 00 00       	mov    ecx,0x3
c001f506:	53                   	push   ebx
c001f507:	83 ec 14             	sub    esp,0x14
c001f50a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f50e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f512:	fc                   	cld    
c001f513:	31 c0                	xor    eax,eax
c001f515:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f517:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f51c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f521:	50                   	push   eax
c001f522:	6a 00                	push   0x0
c001f524:	6a 00                	push   0x0
c001f526:	6a 00                	push   0x0
c001f528:	6a 00                	push   0x0
c001f52a:	6a 02                	push   0x2
c001f52c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f530:	50                   	push   eax
c001f531:	53                   	push   ebx
c001f532:	e8 c1 fd ff ff       	call   c001f2f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f537:	83 c4 14             	add    esp,0x14
c001f53a:	53                   	push   ebx
c001f53b:	e8 6e fd ff ff       	call   c001f2ae <SATAPI::diskRemoved()>
c001f540:	83 c4 24             	add    esp,0x24
c001f543:	31 c0                	xor    eax,eax
c001f545:	5b                   	pop    ebx
c001f546:	5f                   	pop    edi
c001f547:	c3                   	ret    

c001f548 <SATAPI::detectMedia()>:
c001f548:	56                   	push   esi
c001f549:	53                   	push   ebx
c001f54a:	83 ec 28             	sub    esp,0x28
c001f54d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f551:	6a 0c                	push   0xc
c001f553:	6a 00                	push   0x0
c001f555:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f559:	56                   	push   esi
c001f55a:	e8 25 11 fe ff       	call   c0000684 <memset>
c001f55f:	83 c4 0c             	add    esp,0xc
c001f562:	6a 00                	push   0x0
c001f564:	6a 00                	push   0x0
c001f566:	6a 00                	push   0x0
c001f568:	6a 00                	push   0x0
c001f56a:	6a 00                	push   0x0
c001f56c:	56                   	push   esi
c001f56d:	53                   	push   ebx
c001f56e:	e8 85 fd ff ff       	call   c001f2f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f573:	83 c4 1c             	add    esp,0x1c
c001f576:	6a 0c                	push   0xc
c001f578:	6a 00                	push   0x0
c001f57a:	56                   	push   esi
c001f57b:	e8 04 11 fe ff       	call   c0000684 <memset>
c001f580:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f585:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f58a:	83 c4 0c             	add    esp,0xc
c001f58d:	6a 01                	push   0x1
c001f58f:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f593:	50                   	push   eax
c001f594:	6a 00                	push   0x0
c001f596:	6a 00                	push   0x0
c001f598:	6a 12                	push   0x12
c001f59a:	56                   	push   esi
c001f59b:	53                   	push   ebx
c001f59c:	e8 57 fd ff ff       	call   c001f2f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f5a1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f5a5:	83 c4 20             	add    esp,0x20
c001f5a8:	83 e0 7f             	and    eax,0x7f
c001f5ab:	3c 70                	cmp    al,0x70
c001f5ad:	74 15                	je     c001f5c4 <SATAPI::detectMedia()+0x7c>
c001f5af:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f5b6:	75 0c                	jne    c001f5c4 <SATAPI::detectMedia()+0x7c>
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	53                   	push   ebx
c001f5bc:	e8 09 fd ff ff       	call   c001f2ca <SATAPI::diskInserted()>
c001f5c1:	83 c4 10             	add    esp,0x10
c001f5c4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f5c8:	83 e0 0f             	and    eax,0xf
c001f5cb:	3c 02                	cmp    al,0x2
c001f5cd:	75 1b                	jne    c001f5ea <SATAPI::detectMedia()+0xa2>
c001f5cf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f5d4:	75 2d                	jne    c001f603 <SATAPI::detectMedia()+0xbb>
c001f5d6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f5dd:	74 24                	je     c001f603 <SATAPI::detectMedia()+0xbb>
c001f5df:	83 ec 0c             	sub    esp,0xc
c001f5e2:	53                   	push   ebx
c001f5e3:	e8 c6 fc ff ff       	call   c001f2ae <SATAPI::diskRemoved()>
c001f5e8:	eb 16                	jmp    c001f600 <SATAPI::detectMedia()+0xb8>
c001f5ea:	84 c0                	test   al,al
c001f5ec:	75 15                	jne    c001f603 <SATAPI::detectMedia()+0xbb>
c001f5ee:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f5f5:	75 0c                	jne    c001f603 <SATAPI::detectMedia()+0xbb>
c001f5f7:	83 ec 0c             	sub    esp,0xc
c001f5fa:	53                   	push   ebx
c001f5fb:	e8 ca fc ff ff       	call   c001f2ca <SATAPI::diskInserted()>
c001f600:	83 c4 10             	add    esp,0x10
c001f603:	83 c4 24             	add    esp,0x24
c001f606:	5b                   	pop    ebx
c001f607:	5e                   	pop    esi
c001f608:	c3                   	ret    
c001f609:	90                   	nop

c001f60a <SATAPI::open(int, int, void*)>:
c001f60a:	56                   	push   esi
c001f60b:	53                   	push   ebx
c001f60c:	50                   	push   eax
c001f60d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f611:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f615:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f61f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f625:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f62f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f633:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f63d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f643:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f64a:	e8 50 a7 fe ff       	call   c0009d9f <Phys::allocatePage()>
c001f64f:	89 c6                	mov    esi,eax
c001f651:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f657:	81 c6 00 10 00 00    	add    esi,0x1000
c001f65d:	e8 3d a7 fe ff       	call   c0009d9f <Phys::allocatePage()>
c001f662:	39 c6                	cmp    esi,eax
c001f664:	74 10                	je     c001f676 <SATAPI::open(int, int, void*)+0x6c>
c001f666:	83 ec 0c             	sub    esp,0xc
c001f669:	68 0b 4f 02 c0       	push   0xc0024f0b
c001f66e:	e8 d0 4b ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001f673:	83 c4 10             	add    esp,0x10
c001f676:	83 ec 0c             	sub    esp,0xc
c001f679:	6a 02                	push   0x2
c001f67b:	e8 a9 bf fe ff       	call   c000b629 <Virt::allocateKernelVirtualPages(int)>
c001f680:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f686:	6a 03                	push   0x3
c001f688:	50                   	push   eax
c001f689:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f68f:	ff 35 d0 61 02 c0    	push   DWORD PTR ds:0xc00261d0
c001f695:	e8 36 c6 fe ff       	call   c000bcd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f69a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f6a1:	83 c4 14             	add    esp,0x14
c001f6a4:	53                   	push   ebx
c001f6a5:	e8 9e fe ff ff       	call   c001f548 <SATAPI::detectMedia()>
c001f6aa:	83 c4 14             	add    esp,0x14
c001f6ad:	31 c0                	xor    eax,eax
c001f6af:	5b                   	pop    ebx
c001f6b0:	5e                   	pop    esi
c001f6b1:	c3                   	ret    

c001f6b2 <SATAPI::read(unsigned long long, int, void*)>:
c001f6b2:	55                   	push   ebp
c001f6b3:	57                   	push   edi
c001f6b4:	56                   	push   esi
c001f6b5:	53                   	push   ebx
c001f6b6:	83 ec 1c             	sub    esp,0x1c
c001f6b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f6bd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f6c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f6c5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f6cc:	74 19                	je     c001f6e7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f6ce:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f6d3:	7e 2e                	jle    c001f703 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f6d5:	83 ec 0c             	sub    esp,0xc
c001f6d8:	68 21 4f 02 c0       	push   0xc0024f21
c001f6dd:	e8 61 4b ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001f6e2:	83 c4 10             	add    esp,0x10
c001f6e5:	eb 1c                	jmp    c001f703 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f6e7:	83 ec 0c             	sub    esp,0xc
c001f6ea:	55                   	push   ebp
c001f6eb:	e8 58 fe ff ff       	call   c001f548 <SATAPI::detectMedia()>
c001f6f0:	83 c4 10             	add    esp,0x10
c001f6f3:	b8 02 00 00 00       	mov    eax,0x2
c001f6f8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f6ff:	75 cd                	jne    c001f6ce <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001f701:	eb 49                	jmp    c001f74c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001f703:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f707:	b9 03 00 00 00       	mov    ecx,0x3
c001f70c:	fc                   	cld    
c001f70d:	31 c0                	xor    eax,eax
c001f70f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f711:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f716:	89 d8                	mov    eax,ebx
c001f718:	86 e0                	xchg   al,ah
c001f71a:	c1 c0 10             	rol    eax,0x10
c001f71d:	86 e0                	xchg   al,ah
c001f71f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001f723:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001f727:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f72b:	50                   	push   eax
c001f72c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f730:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f734:	56                   	push   esi
c001f735:	53                   	push   ebx
c001f736:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f73a:	c1 e0 0b             	shl    eax,0xb
c001f73d:	50                   	push   eax
c001f73e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f742:	50                   	push   eax
c001f743:	55                   	push   ebp
c001f744:	e8 af fb ff ff       	call   c001f2f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f749:	83 c4 20             	add    esp,0x20
c001f74c:	83 c4 1c             	add    esp,0x1c
c001f74f:	5b                   	pop    ebx
c001f750:	5e                   	pop    esi
c001f751:	5f                   	pop    edi
c001f752:	5d                   	pop    ebp
c001f753:	c3                   	ret    

c001f754 <AVX::open(int, int, void*)>:
c001f754:	83 ec 0c             	sub    esp,0xc
c001f757:	e8 0c 11 00 00       	call   c0020868 <avxInit>
c001f75c:	b8 00 00 00 00       	mov    eax,0x0
c001f761:	83 c4 0c             	add    esp,0xc
c001f764:	c3                   	ret    
c001f765:	90                   	nop

c001f766 <AVX::close(int, int, void*)>:
c001f766:	83 ec 0c             	sub    esp,0xc
c001f769:	e8 fb 10 00 00       	call   c0020869 <avxClose>
c001f76e:	b8 00 00 00 00       	mov    eax,0x0
c001f773:	83 c4 0c             	add    esp,0xc
c001f776:	c3                   	ret    
c001f777:	90                   	nop

c001f778 <AVX::available()>:
c001f778:	83 ec 0c             	sub    esp,0xc
c001f77b:	e8 e0 10 00 00       	call   c0020860 <avxDetect>
c001f780:	85 c0                	test   eax,eax
c001f782:	0f 95 c0             	setne  al
c001f785:	83 c4 0c             	add    esp,0xc
c001f788:	c3                   	ret    
c001f789:	90                   	nop

c001f78a <AVX::save(void*)>:
c001f78a:	83 ec 0c             	sub    esp,0xc
c001f78d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f791:	83 ec 0c             	sub    esp,0xc
c001f794:	50                   	push   eax
c001f795:	e8 cc 10 00 00       	call   c0020866 <avxSave>
c001f79a:	83 c4 10             	add    esp,0x10
c001f79d:	90                   	nop
c001f79e:	83 c4 0c             	add    esp,0xc
c001f7a1:	c3                   	ret    

c001f7a2 <AVX::load(void*)>:
c001f7a2:	83 ec 0c             	sub    esp,0xc
c001f7a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f7a9:	83 ec 0c             	sub    esp,0xc
c001f7ac:	50                   	push   eax
c001f7ad:	e8 b5 10 00 00       	call   c0020867 <avxLoad>
c001f7b2:	83 c4 10             	add    esp,0x10
c001f7b5:	90                   	nop
c001f7b6:	83 c4 0c             	add    esp,0xc
c001f7b9:	c3                   	ret    

c001f7ba <AVX::AVX()>:
c001f7ba:	83 ec 0c             	sub    esp,0xc
c001f7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c1:	83 ec 08             	sub    esp,0x8
c001f7c4:	68 84 4f 02 c0       	push   0xc0024f84
c001f7c9:	50                   	push   eax
c001f7ca:	e8 89 eb fe ff       	call   c000e358 <FPU::FPU(char const*)>
c001f7cf:	83 c4 10             	add    esp,0x10
c001f7d2:	ba 94 4f 02 c0       	mov    edx,0xc0024f94
c001f7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7db:	89 10                	mov    DWORD PTR [eax],edx
c001f7dd:	90                   	nop
c001f7de:	83 c4 0c             	add    esp,0xc
c001f7e1:	c3                   	ret    

c001f7e2 <MMX::available()>:
c001f7e2:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001f7e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001f7ed:	83 e0 20             	and    eax,0x20
c001f7f0:	84 c0                	test   al,al
c001f7f2:	0f 95 c0             	setne  al
c001f7f5:	c3                   	ret    

c001f7f6 <MMX::open(int, int, void*)>:
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	e8 f4 10 00 00       	call   c00208f2 <x87Init>
c001f7fe:	b8 00 00 00 00       	mov    eax,0x0
c001f803:	83 c4 0c             	add    esp,0xc
c001f806:	c3                   	ret    
c001f807:	90                   	nop

c001f808 <MMX::close(int, int, void*)>:
c001f808:	83 ec 0c             	sub    esp,0xc
c001f80b:	e8 fc 10 00 00       	call   c002090c <x87Close>
c001f810:	b8 00 00 00 00       	mov    eax,0x0
c001f815:	83 c4 0c             	add    esp,0xc
c001f818:	c3                   	ret    
c001f819:	90                   	nop

c001f81a <MMX::save(void*)>:
c001f81a:	83 ec 0c             	sub    esp,0xc
c001f81d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f821:	83 ec 0c             	sub    esp,0xc
c001f824:	50                   	push   eax
c001f825:	e8 b7 10 00 00       	call   c00208e1 <x87Save>
c001f82a:	83 c4 10             	add    esp,0x10
c001f82d:	90                   	nop
c001f82e:	83 c4 0c             	add    esp,0xc
c001f831:	c3                   	ret    

c001f832 <MMX::load(void*)>:
c001f832:	83 ec 0c             	sub    esp,0xc
c001f835:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f839:	83 ec 0c             	sub    esp,0xc
c001f83c:	50                   	push   eax
c001f83d:	e8 a8 10 00 00       	call   c00208ea <x87Load>
c001f842:	83 c4 10             	add    esp,0x10
c001f845:	90                   	nop
c001f846:	83 c4 0c             	add    esp,0xc
c001f849:	c3                   	ret    

c001f84a <MMX::MMX()>:
c001f84a:	83 ec 0c             	sub    esp,0xc
c001f84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f851:	83 ec 08             	sub    esp,0x8
c001f854:	68 c4 4f 02 c0       	push   0xc0024fc4
c001f859:	50                   	push   eax
c001f85a:	e8 f9 ea fe ff       	call   c000e358 <FPU::FPU(char const*)>
c001f85f:	83 c4 10             	add    esp,0x10
c001f862:	ba d4 4f 02 c0       	mov    edx,0xc0024fd4
c001f867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86b:	89 10                	mov    DWORD PTR [eax],edx
c001f86d:	90                   	nop
c001f86e:	83 c4 0c             	add    esp,0xc
c001f871:	c3                   	ret    

c001f872 <SSE::open(int, int, void*)>:
c001f872:	83 ec 0c             	sub    esp,0xc
c001f875:	e8 2a 10 00 00       	call   c00208a4 <sseInit>
c001f87a:	b8 00 00 00 00       	mov    eax,0x0
c001f87f:	83 c4 0c             	add    esp,0xc
c001f882:	c3                   	ret    
c001f883:	90                   	nop

c001f884 <SSE::close(int, int, void*)>:
c001f884:	83 ec 0c             	sub    esp,0xc
c001f887:	e8 28 10 00 00       	call   c00208b4 <sseClose>
c001f88c:	b8 00 00 00 00       	mov    eax,0x0
c001f891:	83 c4 0c             	add    esp,0xc
c001f894:	c3                   	ret    
c001f895:	90                   	nop

c001f896 <SSE::available()>:
c001f896:	83 ec 1c             	sub    esp,0x1c
c001f899:	e8 e2 0f 00 00       	call   c0020880 <absolutelyNoChanceInHell>
c001f89e:	85 c0                	test   eax,eax
c001f8a0:	0f 95 c0             	setne  al
c001f8a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f8a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001f8ab:	83 c4 1c             	add    esp,0x1c
c001f8ae:	c3                   	ret    
c001f8af:	90                   	nop

c001f8b0 <SSE::save(void*)>:
c001f8b0:	83 ec 0c             	sub    esp,0xc
c001f8b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8b7:	83 ec 0c             	sub    esp,0xc
c001f8ba:	50                   	push   eax
c001f8bb:	e8 d8 0f 00 00       	call   c0020898 <sseSave>
c001f8c0:	83 c4 10             	add    esp,0x10
c001f8c3:	90                   	nop
c001f8c4:	83 c4 0c             	add    esp,0xc
c001f8c7:	c3                   	ret    

c001f8c8 <SSE::load(void*)>:
c001f8c8:	83 ec 0c             	sub    esp,0xc
c001f8cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8cf:	83 ec 0c             	sub    esp,0xc
c001f8d2:	50                   	push   eax
c001f8d3:	e8 c6 0f 00 00       	call   c002089e <sseLoad>
c001f8d8:	83 c4 10             	add    esp,0x10
c001f8db:	90                   	nop
c001f8dc:	83 c4 0c             	add    esp,0xc
c001f8df:	c3                   	ret    

c001f8e0 <SSE::SSE()>:
c001f8e0:	83 ec 0c             	sub    esp,0xc
c001f8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e7:	83 ec 08             	sub    esp,0x8
c001f8ea:	68 04 50 02 c0       	push   0xc0025004
c001f8ef:	50                   	push   eax
c001f8f0:	e8 63 ea fe ff       	call   c000e358 <FPU::FPU(char const*)>
c001f8f5:	83 c4 10             	add    esp,0x10
c001f8f8:	ba 14 50 02 c0       	mov    edx,0xc0025014
c001f8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f901:	89 10                	mov    DWORD PTR [eax],edx
c001f903:	90                   	nop
c001f904:	83 c4 0c             	add    esp,0xc
c001f907:	c3                   	ret    

c001f908 <x87::open(int, int, void*)>:
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	e8 e2 0f 00 00       	call   c00208f2 <x87Init>
c001f910:	b8 00 00 00 00       	mov    eax,0x0
c001f915:	83 c4 0c             	add    esp,0xc
c001f918:	c3                   	ret    
c001f919:	90                   	nop

c001f91a <x87::close(int, int, void*)>:
c001f91a:	83 ec 0c             	sub    esp,0xc
c001f91d:	e8 ea 0f 00 00       	call   c002090c <x87Close>
c001f922:	b8 00 00 00 00       	mov    eax,0x0
c001f927:	83 c4 0c             	add    esp,0xc
c001f92a:	c3                   	ret    
c001f92b:	90                   	nop

c001f92c <x87::available()>:
c001f92c:	83 ec 0c             	sub    esp,0xc
c001f92f:	e8 92 0f 00 00       	call   c00208c6 <x87Detect>
c001f934:	85 c0                	test   eax,eax
c001f936:	0f 95 c0             	setne  al
c001f939:	83 c4 0c             	add    esp,0xc
c001f93c:	c3                   	ret    
c001f93d:	90                   	nop

c001f93e <x87::save(void*)>:
c001f93e:	83 ec 0c             	sub    esp,0xc
c001f941:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f945:	83 ec 0c             	sub    esp,0xc
c001f948:	50                   	push   eax
c001f949:	e8 93 0f 00 00       	call   c00208e1 <x87Save>
c001f94e:	83 c4 10             	add    esp,0x10
c001f951:	90                   	nop
c001f952:	83 c4 0c             	add    esp,0xc
c001f955:	c3                   	ret    

c001f956 <x87::load(void*)>:
c001f956:	83 ec 0c             	sub    esp,0xc
c001f959:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f95d:	83 ec 0c             	sub    esp,0xc
c001f960:	50                   	push   eax
c001f961:	e8 84 0f 00 00       	call   c00208ea <x87Load>
c001f966:	83 c4 10             	add    esp,0x10
c001f969:	90                   	nop
c001f96a:	83 c4 0c             	add    esp,0xc
c001f96d:	c3                   	ret    

c001f96e <x87::x87()>:
c001f96e:	83 ec 0c             	sub    esp,0xc
c001f971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f975:	83 ec 08             	sub    esp,0x8
c001f978:	68 44 50 02 c0       	push   0xc0025044
c001f97d:	50                   	push   eax
c001f97e:	e8 d5 e9 fe ff       	call   c000e358 <FPU::FPU(char const*)>
c001f983:	83 c4 10             	add    esp,0x10
c001f986:	ba 54 50 02 c0       	mov    edx,0xc0025054
c001f98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98f:	89 10                	mov    DWORD PTR [eax],edx
c001f991:	90                   	nop
c001f992:	83 c4 0c             	add    esp,0xc
c001f995:	c3                   	ret    

c001f996 <APIC::disable()>:
c001f996:	90                   	nop
c001f997:	c3                   	ret    

c001f998 <APIC::close(int, int, void*)>:
c001f998:	55                   	push   ebp
c001f999:	89 e5                	mov    ebp,esp
c001f99b:	83 ec 08             	sub    esp,0x8
c001f99e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f9a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a3:	83 c0 3c             	add    eax,0x3c
c001f9a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a8:	83 ec 0c             	sub    esp,0xc
c001f9ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f9ae:	ff d0                	call   eax
c001f9b0:	83 c4 10             	add    esp,0x10
c001f9b3:	b8 00 00 00 00       	mov    eax,0x0
c001f9b8:	c9                   	leave  
c001f9b9:	c3                   	ret    

c001f9ba <IOAPIC::close(int, int, void*)>:
c001f9ba:	b8 00 00 00 00       	mov    eax,0x0
c001f9bf:	c3                   	ret    

c001f9c0 <APIC::io_wait()>:
c001f9c0:	eb 00                	jmp    c001f9c2 <APIC::io_wait()+0x2>
c001f9c2:	eb 00                	jmp    c001f9c4 <APIC::io_wait()+0x4>
c001f9c4:	90                   	nop
c001f9c5:	c3                   	ret    

c001f9c6 <APIC::getBase()>:
c001f9c6:	55                   	push   ebp
c001f9c7:	89 e5                	mov    ebp,esp
c001f9c9:	83 ec 18             	sub    esp,0x18
c001f9cc:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001f9d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001f9d7:	83 e0 08             	and    eax,0x8
c001f9da:	84 c0                	test   al,al
c001f9dc:	75 07                	jne    c001f9e5 <APIC::getBase()+0x1f>
c001f9de:	b8 00 00 00 00       	mov    eax,0x0
c001f9e3:	eb 21                	jmp    c001fa06 <APIC::getBase()+0x40>
c001f9e5:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001f9ea:	83 ec 08             	sub    esp,0x8
c001f9ed:	6a 1b                	push   0x1b
c001f9ef:	50                   	push   eax
c001f9f0:	e8 13 95 fe ff       	call   c0008f08 <Computer::rdmsr(unsigned int)>
c001f9f5:	83 c4 10             	add    esp,0x10
c001f9f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f9fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001f9fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fa01:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fa06:	c9                   	leave  
c001fa07:	c3                   	ret    

c001fa08 <APIC::eoi(unsigned char)>:
c001fa08:	55                   	push   ebp
c001fa09:	89 e5                	mov    ebp,esp
c001fa0b:	83 ec 28             	sub    esp,0x28
c001fa0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fa11:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fa1a:	e8 a7 ff ff ff       	call   c001f9c6 <APIC::getBase()>
c001fa1f:	83 c4 10             	add    esp,0x10
c001fa22:	05 b0 00 00 00       	add    eax,0xb0
c001fa27:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fa2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fa2d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fa33:	90                   	nop
c001fa34:	c9                   	leave  
c001fa35:	c3                   	ret    

c001fa36 <APIC::open(int, int, void*)>:
c001fa36:	55                   	push   ebp
c001fa37:	89 e5                	mov    ebp,esp
c001fa39:	57                   	push   edi
c001fa3a:	56                   	push   esi
c001fa3b:	53                   	push   ebx
c001fa3c:	83 ec 2c             	sub    esp,0x2c
c001fa3f:	83 ec 0c             	sub    esp,0xc
c001fa42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fa45:	e8 7c ff ff ff       	call   c001f9c6 <APIC::getBase()>
c001fa4a:	83 c4 10             	add    esp,0x10
c001fa4d:	89 c2                	mov    edx,eax
c001fa4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fa52:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fa58:	0f b6 f8             	movzx  edi,al
c001fa5b:	89 d0                	mov    eax,edx
c001fa5d:	ba 00 00 00 00       	mov    edx,0x0
c001fa62:	89 c1                	mov    ecx,eax
c001fa64:	80 e5 ff             	and    ch,0xff
c001fa67:	89 cb                	mov    ebx,ecx
c001fa69:	0f b6 f2             	movzx  esi,dl
c001fa6c:	89 d8                	mov    eax,ebx
c001fa6e:	89 f2                	mov    edx,esi
c001fa70:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fa73:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fa76:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fa7a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fa7e:	83 e0 00             	and    eax,0x0
c001fa81:	09 d0                	or     eax,edx
c001fa83:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fa87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fa8a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fa90:	8d 50 01             	lea    edx,[eax+0x1]
c001fa93:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fa96:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fa9c:	0f b6 d0             	movzx  edx,al
c001fa9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001faa2:	83 c2 08             	add    edx,0x8
c001faa5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001faa9:	0f b6 c9             	movzx  ecx,cl
c001faac:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fab2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fab6:	83 ec 0c             	sub    esp,0xc
c001fab9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fabc:	e8 05 ff ff ff       	call   c001f9c6 <APIC::getBase()>
c001fac1:	83 c4 10             	add    esp,0x10
c001fac4:	05 f0 00 00 00       	add    eax,0xf0
c001fac9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001facc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001facf:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fad4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fadb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fae2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fae5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fae8:	89 10                	mov    DWORD PTR [eax],edx
c001faea:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001faf1:	a1 10 69 02 c0       	mov    eax,ds:0xc0026910
c001faf6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001faf9:	7d 7c                	jge    c001fb77 <APIC::open(int, int, void*)+0x141>
c001fafb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fafe:	8b 04 85 20 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96e0]
c001fb05:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fb08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fb0b:	8b 04 85 20 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96e0]
c001fb12:	c1 e8 08             	shr    eax,0x8
c001fb15:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fb19:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fb1c:	8b 04 85 20 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96e0]
c001fb23:	c1 e8 18             	shr    eax,0x18
c001fb26:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fb29:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fb2d:	75 40                	jne    c001fb6f <APIC::open(int, int, void*)+0x139>
c001fb2f:	83 ec 0c             	sub    esp,0xc
c001fb32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fb35:	e8 8c fe ff ff       	call   c001f9c6 <APIC::getBase()>
c001fb3a:	83 c4 10             	add    esp,0x10
c001fb3d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fb41:	75 07                	jne    c001fb4a <APIC::open(int, int, void*)+0x114>
c001fb43:	ba 60 03 00 00       	mov    edx,0x360
c001fb48:	eb 05                	jmp    c001fb4f <APIC::open(int, int, void*)+0x119>
c001fb4a:	ba 50 03 00 00       	mov    edx,0x350
c001fb4f:	01 d0                	add    eax,edx
c001fb51:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fb54:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fb57:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb59:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fb5c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fb63:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fb67:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fb6a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fb6d:	89 10                	mov    DWORD PTR [eax],edx
c001fb6f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fb72:	e9 7a ff ff ff       	jmp    c001faf1 <APIC::open(int, int, void*)+0xbb>
c001fb77:	b8 00 00 00 00       	mov    eax,0x0
c001fb7c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fb7f:	5b                   	pop    ebx
c001fb80:	5e                   	pop    esi
c001fb81:	5f                   	pop    edi
c001fb82:	5d                   	pop    ebp
c001fb83:	c3                   	ret    

c001fb84 <IOAPIC::IOAPIC()>:
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8b:	83 ec 08             	sub    esp,0x8
c001fb8e:	68 84 50 02 c0       	push   0xc0025084
c001fb93:	50                   	push   eax
c001fb94:	e8 af e4 fe ff       	call   c000e048 <Device::Device(char const*)>
c001fb99:	83 c4 10             	add    esp,0x10
c001fb9c:	ba ac 51 02 c0       	mov    edx,0xc00251ac
c001fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba5:	89 10                	mov    DWORD PTR [eax],edx
c001fba7:	90                   	nop
c001fba8:	83 c4 0c             	add    esp,0xc
c001fbab:	c3                   	ret    

c001fbac <APIC::APIC()>:
c001fbac:	53                   	push   ebx
c001fbad:	83 ec 18             	sub    esp,0x18
c001fbb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbb4:	83 ec 08             	sub    esp,0x8
c001fbb7:	68 8c 50 02 c0       	push   0xc002508c
c001fbbc:	50                   	push   eax
c001fbbd:	e8 f4 eb fe ff       	call   c000e7b6 <InterruptController::InterruptController(char const*)>
c001fbc2:	83 c4 10             	add    esp,0x10
c001fbc5:	ba 64 51 02 c0       	mov    edx,0xc0025164
c001fbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbce:	89 10                	mov    DWORD PTR [eax],edx
c001fbd0:	a0 e0 7f 02 c0       	mov    al,ds:0xc0027fe0
c001fbd5:	83 f0 01             	xor    eax,0x1
c001fbd8:	84 c0                	test   al,al
c001fbda:	0f 84 a1 00 00 00    	je     c001fc81 <APIC::APIC()+0xd5>
c001fbe0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001fbe5:	a0 c0 69 02 c0       	mov    al,ds:0xc00269c0
c001fbea:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001fbee:	0f 83 86 00 00 00    	jae    c001fc7a <APIC::APIC()+0xce>
c001fbf4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001fbfc:	83 ec 0c             	sub    esp,0xc
c001fbff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fc03:	e8 9b 9d fe ff       	call   c00099a3 <malloc>
c001fc08:	83 c4 10             	add    esp,0x10
c001fc0b:	89 c3                	mov    ebx,eax
c001fc0d:	83 ec 0c             	sub    esp,0xc
c001fc10:	53                   	push   ebx
c001fc11:	e8 6e ff ff ff       	call   c001fb84 <IOAPIC::IOAPIC()>
c001fc16:	83 c4 10             	add    esp,0x10
c001fc19:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001fc1d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001fc22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fc26:	89 14 85 c0 7f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8040],edx
c001fc2d:	a1 a0 7f 02 c0       	mov    eax,ds:0xc0027fa0
c001fc32:	40                   	inc    eax
c001fc33:	a3 a0 7f 02 c0       	mov    ds:0xc0027fa0,eax
c001fc38:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c001fc3d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001fc43:	83 ec 08             	sub    esp,0x8
c001fc46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fc4a:	50                   	push   eax
c001fc4b:	e8 f4 e1 fe ff       	call   c000de44 <Device::addChild(Device*)>
c001fc50:	83 c4 10             	add    esp,0x10
c001fc53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc57:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc59:	83 c0 08             	add    eax,0x8
c001fc5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc5e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001fc63:	6a 00                	push   0x0
c001fc65:	6a 00                	push   0x0
c001fc67:	52                   	push   edx
c001fc68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fc6c:	ff d0                	call   eax
c001fc6e:	83 c4 10             	add    esp,0x10
c001fc71:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001fc75:	e9 6b ff ff ff       	jmp    c001fbe5 <APIC::APIC()+0x39>
c001fc7a:	c6 05 e0 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027fe0,0x1
c001fc81:	90                   	nop
c001fc82:	83 c4 18             	add    esp,0x18
c001fc85:	5b                   	pop    ebx
c001fc86:	c3                   	ret    
c001fc87:	90                   	nop

c001fc88 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001fc88:	55                   	push   ebp
c001fc89:	89 e5                	mov    ebp,esp
c001fc8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fc8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fc94:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001fc97:	72 1d                	jb     c001fcb6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001fc99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fc9c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001fca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fca5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001fcab:	01 d0                	add    eax,edx
c001fcad:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001fcb0:	73 04                	jae    c001fcb6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001fcb2:	b0 01                	mov    al,0x1
c001fcb4:	eb 02                	jmp    c001fcb8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001fcb6:	b0 00                	mov    al,0x0
c001fcb8:	5d                   	pop    ebp
c001fcb9:	c3                   	ret    

c001fcba <IOAPIC::read(int)>:
c001fcba:	55                   	push   ebp
c001fcbb:	89 e5                	mov    ebp,esp
c001fcbd:	83 ec 10             	sub    esp,0x10
c001fcc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fcc3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fcc9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001fccc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fccf:	0f b6 d0             	movzx  edx,al
c001fcd2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fcd5:	89 10                	mov    DWORD PTR [eax],edx
c001fcd7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fcda:	83 c0 10             	add    eax,0x10
c001fcdd:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcdf:	c9                   	leave  
c001fce0:	c3                   	ret    
c001fce1:	90                   	nop

c001fce2 <IOAPIC::open(int, int, void*)>:
c001fce2:	55                   	push   ebp
c001fce3:	89 e5                	mov    ebp,esp
c001fce5:	57                   	push   edi
c001fce6:	56                   	push   esi
c001fce7:	53                   	push   ebx
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	83 ec 0c             	sub    esp,0xc
c001fcee:	68 b7 50 02 c0       	push   0xc00250b7
c001fcf3:	e8 0c cd fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001fcf8:	83 c4 10             	add    esp,0x10
c001fcfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fcfe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001fd01:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fd07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd10:	8b 14 85 00 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9600]
c001fd17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fd20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd29:	8b 14 85 80 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9580]
c001fd30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd33:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001fd39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd3c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001fd42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd45:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd4b:	0f b6 f8             	movzx  edi,al
c001fd4e:	89 d0                	mov    eax,edx
c001fd50:	ba 00 00 00 00       	mov    edx,0x0
c001fd55:	89 c1                	mov    ecx,eax
c001fd57:	80 e5 ff             	and    ch,0xff
c001fd5a:	89 cb                	mov    ebx,ecx
c001fd5c:	0f b6 f2             	movzx  esi,dl
c001fd5f:	89 d8                	mov    eax,ebx
c001fd61:	89 f2                	mov    edx,esi
c001fd63:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd66:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fd69:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fd6d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fd71:	83 e0 00             	and    eax,0x0
c001fd74:	09 d0                	or     eax,edx
c001fd76:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fd7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd7d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd83:	8d 50 01             	lea    edx,[eax+0x1]
c001fd86:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd89:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fd8f:	0f b6 d0             	movzx  edx,al
c001fd92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd95:	83 c2 08             	add    edx,0x8
c001fd98:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fd9c:	0f b6 c9             	movzx  ecx,cl
c001fd9f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001fda5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fda9:	83 ec 08             	sub    esp,0x8
c001fdac:	6a 01                	push   0x1
c001fdae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdb1:	e8 04 ff ff ff       	call   c001fcba <IOAPIC::read(int)>
c001fdb6:	83 c4 10             	add    esp,0x10
c001fdb9:	c1 f8 10             	sar    eax,0x10
c001fdbc:	0f b6 c0             	movzx  eax,al
c001fdbf:	8d 50 01             	lea    edx,[eax+0x1]
c001fdc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdc5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001fdcb:	b8 00 00 00 00       	mov    eax,0x0
c001fdd0:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fdd3:	5b                   	pop    ebx
c001fdd4:	5e                   	pop    esi
c001fdd5:	5f                   	pop    edi
c001fdd6:	5d                   	pop    ebp
c001fdd7:	c3                   	ret    

c001fdd8 <IOAPIC::write(int, int)>:
c001fdd8:	55                   	push   ebp
c001fdd9:	89 e5                	mov    ebp,esp
c001fddb:	83 ec 10             	sub    esp,0x10
c001fdde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fde1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fde7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001fdea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fded:	0f b6 d0             	movzx  edx,al
c001fdf0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fdf3:	89 10                	mov    DWORD PTR [eax],edx
c001fdf5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fdf8:	8d 50 10             	lea    edx,[eax+0x10]
c001fdfb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001fdfe:	89 02                	mov    DWORD PTR [edx],eax
c001fe00:	90                   	nop
c001fe01:	c9                   	leave  
c001fe02:	c3                   	ret    
c001fe03:	90                   	nop

c001fe04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001fe04:	55                   	push   ebp
c001fe05:	89 e5                	mov    ebp,esp
c001fe07:	53                   	push   ebx
c001fe08:	83 ec 2c             	sub    esp,0x2c
c001fe0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fe0e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001fe11:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001fe14:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001fe17:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fe1a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001fe1d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001fe20:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001fe23:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fe26:	88 d8                	mov    al,bl
c001fe28:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001fe2b:	88 c8                	mov    al,cl
c001fe2d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001fe30:	88 d0                	mov    al,dl
c001fe32:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001fe35:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001fe39:	83 c0 08             	add    eax,0x8
c001fe3c:	01 c0                	add    eax,eax
c001fe3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fe41:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001fe45:	83 c0 08             	add    eax,0x8
c001fe48:	01 c0                	add    eax,eax
c001fe4a:	40                   	inc    eax
c001fe4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001fe4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001fe51:	50                   	push   eax
c001fe52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe55:	e8 60 fe ff ff       	call   c001fcba <IOAPIC::read(int)>
c001fe5a:	83 c4 08             	add    esp,0x8
c001fe5d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fe60:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001fe67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001fe6a:	c1 e0 18             	shl    eax,0x18
c001fe6d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001fe70:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001fe73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001fe76:	52                   	push   edx
c001fe77:	50                   	push   eax
c001fe78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe7b:	e8 58 ff ff ff       	call   c001fdd8 <IOAPIC::write(int, int)>
c001fe80:	83 c4 0c             	add    esp,0xc
c001fe83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fe86:	50                   	push   eax
c001fe87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe8a:	e8 2b fe ff ff       	call   c001fcba <IOAPIC::read(int)>
c001fe8f:	83 c4 08             	add    esp,0x8
c001fe92:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fe95:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001fe9c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001fea3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001feaa:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001feae:	74 09                	je     c001feb9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c001feb0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001feb7:	eb 07                	jmp    c001fec0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c001feb9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001fec0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001fec4:	74 09                	je     c001fecf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c001fec6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001fecd:	eb 07                	jmp    c001fed6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c001fecf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001fed6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001fedd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001fee1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001fee4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001fee7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001feea:	52                   	push   edx
c001feeb:	50                   	push   eax
c001feec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001feef:	e8 e4 fe ff ff       	call   c001fdd8 <IOAPIC::write(int, int)>
c001fef4:	83 c4 0c             	add    esp,0xc
c001fef7:	90                   	nop
c001fef8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001fefb:	c9                   	leave  
c001fefc:	c3                   	ret    
c001fefd:	90                   	nop

c001fefe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001fefe:	55                   	push   ebp
c001feff:	89 e5                	mov    ebp,esp
c001ff01:	57                   	push   edi
c001ff02:	56                   	push   esi
c001ff03:	53                   	push   ebx
c001ff04:	83 ec 2c             	sub    esp,0x2c
c001ff07:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ff0a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ff0d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c001ff11:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c001ff15:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001ff19:	74 5a                	je     c001ff75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c001ff1b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001ff1f:	7f 44                	jg     c001ff65 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c001ff21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ff24:	05 60 57 02 c0       	add    eax,0xc0025760
c001ff29:	8a 00                	mov    al,BYTE PTR [eax]
c001ff2b:	0f b6 c0             	movzx  eax,al
c001ff2e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001ff31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ff34:	66 8b 84 00 a0 69 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9660]
c001ff3c:	0f b7 c0             	movzx  eax,ax
c001ff3f:	83 e0 02             	and    eax,0x2
c001ff42:	85 c0                	test   eax,eax
c001ff44:	74 04                	je     c001ff4a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c001ff46:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c001ff4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ff4d:	66 8b 84 00 a0 69 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9660]
c001ff55:	0f b7 c0             	movzx  eax,ax
c001ff58:	83 e0 08             	and    eax,0x8
c001ff5b:	85 c0                	test   eax,eax
c001ff5d:	74 16                	je     c001ff75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c001ff5f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c001ff63:	eb 10                	jmp    c001ff75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c001ff65:	83 ec 0c             	sub    esp,0xc
c001ff68:	68 c8 50 02 c0       	push   0xc00250c8
c001ff6d:	e8 d1 42 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c001ff72:	83 c4 10             	add    esp,0x10
c001ff75:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c001ff79:	a1 a0 7f 02 c0       	mov    eax,ds:0xc0027fa0
c001ff7e:	83 ec 08             	sub    esp,0x8
c001ff81:	50                   	push   eax
c001ff82:	68 00 51 02 c0       	push   0xc0025100
c001ff87:	e8 78 ca fe ff       	call   c000ca04 <Dbg::kprintf(char const*, ...)>
c001ff8c:	83 c4 10             	add    esp,0x10
c001ff8f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c001ff96:	a1 a0 7f 02 c0       	mov    eax,ds:0xc0027fa0
c001ff9b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c001ff9e:	7d 67                	jge    c0020007 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001ffa0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001ffa3:	8b 04 85 c0 7f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8040]
c001ffaa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ffad:	83 ec 08             	sub    esp,0x8
c001ffb0:	52                   	push   edx
c001ffb1:	50                   	push   eax
c001ffb2:	e8 d1 fc ff ff       	call   c001fc88 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001ffb7:	83 c4 10             	add    esp,0x10
c001ffba:	84 c0                	test   al,al
c001ffbc:	74 44                	je     c0020002 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c001ffbe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001ffc1:	8b 1c 85 c0 7f 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8040]
c001ffc8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c001ffcc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001ffcf:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c001ffd3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffd6:	83 c0 20             	add    eax,0x20
c001ffd9:	0f b6 f0             	movzx  esi,al
c001ffdc:	b8 00 00 00 00       	mov    eax,0x0
c001ffe1:	99                   	cdq    
c001ffe2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001ffe5:	0f b6 c9             	movzx  ecx,cl
c001ffe8:	83 ec 04             	sub    esp,0x4
c001ffeb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ffee:	57                   	push   edi
c001ffef:	56                   	push   esi
c001fff0:	52                   	push   edx
c001fff1:	50                   	push   eax
c001fff2:	51                   	push   ecx
c001fff3:	53                   	push   ebx
c001fff4:	e8 0b fe ff ff       	call   c001fe04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001fff9:	83 c4 20             	add    esp,0x20
c001fffc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0020000:	eb 05                	jmp    c0020007 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020002:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0020005:	eb 8f                	jmp    c001ff96 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0020007:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002000a:	83 f0 01             	xor    eax,0x1
c002000d:	84 c0                	test   al,al
c002000f:	74 10                	je     c0020021 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0020011:	83 ec 0c             	sub    esp,0xc
c0020014:	68 17 51 02 c0       	push   0xc0025117
c0020019:	e8 25 42 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c002001e:	83 c4 10             	add    esp,0x10
c0020021:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0020025:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002002c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0020030:	7f 65                	jg     c0020097 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0020032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020035:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020038:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002003f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020042:	01 ca                	add    edx,ecx
c0020044:	83 c2 54             	add    edx,0x54
c0020047:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002004b:	85 c0                	test   eax,eax
c002004d:	75 43                	jne    c0020092 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002004f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020052:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020055:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002005c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002005f:	01 ca                	add    edx,ecx
c0020061:	8d 4a 54             	lea    ecx,[edx+0x54]
c0020064:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020067:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002006e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020071:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020078:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002007b:	01 ca                	add    edx,ecx
c002007d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0020083:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020086:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002008a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002008d:	83 e8 20             	sub    eax,0x20
c0020090:	eb 1a                	jmp    c00200ac <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0020092:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0020095:	eb 95                	jmp    c002002c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0020097:	83 ec 0c             	sub    esp,0xc
c002009a:	68 24 51 02 c0       	push   0xc0025124
c002009f:	e8 9f 41 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c00200a4:	83 c4 10             	add    esp,0x10
c00200a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00200ac:	8d 65 f4             	lea    esp,[ebp-0xc]
c00200af:	5b                   	pop    ebx
c00200b0:	5e                   	pop    esi
c00200b1:	5f                   	pop    edi
c00200b2:	5d                   	pop    ebp
c00200b3:	c3                   	ret    

c00200b4 <PIC::disable()>:
c00200b4:	55                   	push   ebp
c00200b5:	89 e5                	mov    ebp,esp
c00200b7:	83 ec 10             	sub    esp,0x10
c00200ba:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00200c0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00200c4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00200c7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00200cb:	ee                   	out    dx,al
c00200cc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00200d2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00200d6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00200d9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00200dd:	ee                   	out    dx,al
c00200de:	90                   	nop
c00200df:	c9                   	leave  
c00200e0:	c3                   	ret    
c00200e1:	90                   	nop

c00200e2 <PIC::close(int, int, void*)>:
c00200e2:	55                   	push   ebp
c00200e3:	89 e5                	mov    ebp,esp
c00200e5:	83 ec 08             	sub    esp,0x8
c00200e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00200ed:	83 c0 3c             	add    eax,0x3c
c00200f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200f2:	83 ec 0c             	sub    esp,0xc
c00200f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200f8:	ff d0                	call   eax
c00200fa:	83 c4 10             	add    esp,0x10
c00200fd:	b8 00 00 00 00       	mov    eax,0x0
c0020102:	c9                   	leave  
c0020103:	c3                   	ret    

c0020104 <PIC::PIC()>:
c0020104:	83 ec 0c             	sub    esp,0xc
c0020107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010b:	83 ec 08             	sub    esp,0x8
c002010e:	68 d0 51 02 c0       	push   0xc00251d0
c0020113:	50                   	push   eax
c0020114:	e8 9d e6 fe ff       	call   c000e7b6 <InterruptController::InterruptController(char const*)>
c0020119:	83 c4 10             	add    esp,0x10
c002011c:	ba fc 51 02 c0       	mov    edx,0xc00251fc
c0020121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020125:	89 10                	mov    DWORD PTR [eax],edx
c0020127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020131:	0f b6 d0             	movzx  edx,al
c0020134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020138:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002013f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020143:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020149:	0f b6 d0             	movzx  edx,al
c002014c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020150:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020159:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002015f:	8d 50 01             	lea    edx,[eax+0x1]
c0020162:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020166:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002016c:	0f b6 d0             	movzx  edx,al
c002016f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020173:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020177:	83 e1 3f             	and    ecx,0x3f
c002017a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002017e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020182:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020188:	0f b6 d0             	movzx  edx,al
c002018b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0020196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00201a0:	0f b6 d0             	movzx  edx,al
c00201a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00201ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00201b6:	8d 50 01             	lea    edx,[eax+0x1]
c00201b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00201bd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00201c3:	0f b6 d0             	movzx  edx,al
c00201c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ca:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00201ce:	83 e1 3f             	and    ecx,0x3f
c00201d1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00201d5:	90                   	nop
c00201d6:	83 c4 0c             	add    esp,0xc
c00201d9:	c3                   	ret    

c00201da <PIC::ioWait()>:
c00201da:	eb 00                	jmp    c00201dc <PIC::ioWait()+0x2>
c00201dc:	eb 00                	jmp    c00201de <PIC::ioWait()+0x4>
c00201de:	90                   	nop
c00201df:	c3                   	ret    

c00201e0 <PIC::getIRQReg(int)>:
c00201e0:	55                   	push   ebp
c00201e1:	89 e5                	mov    ebp,esp
c00201e3:	83 ec 10             	sub    esp,0x10
c00201e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201e9:	0f b6 c0             	movzx  eax,al
c00201ec:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00201f2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00201f5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00201f8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00201fc:	ee                   	out    dx,al
c00201fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020200:	0f b6 c0             	movzx  eax,al
c0020203:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020209:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002020c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002020f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020213:	ee                   	out    dx,al
c0020214:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002021a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002021e:	89 c2                	mov    edx,eax
c0020220:	ec                   	in     al,dx
c0020221:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0020224:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020227:	0f b6 c0             	movzx  eax,al
c002022a:	c1 e0 08             	shl    eax,0x8
c002022d:	89 c1                	mov    ecx,eax
c002022f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0020235:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0020239:	89 c2                	mov    edx,eax
c002023b:	ec                   	in     al,dx
c002023c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002023f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020242:	0f b6 c0             	movzx  eax,al
c0020245:	09 c8                	or     eax,ecx
c0020247:	c9                   	leave  
c0020248:	c3                   	ret    
c0020249:	90                   	nop

c002024a <PIC::eoi(unsigned char)>:
c002024a:	55                   	push   ebp
c002024b:	89 e5                	mov    ebp,esp
c002024d:	83 ec 14             	sub    esp,0x14
c0020250:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020253:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0020256:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002025a:	75 1e                	jne    c002027a <PIC::eoi(unsigned char)+0x30>
c002025c:	6a 0b                	push   0xb
c002025e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020261:	e8 7a ff ff ff       	call   c00201e0 <PIC::getIRQReg(int)>
c0020266:	83 c4 08             	add    esp,0x8
c0020269:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002026d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0020271:	25 80 00 00 00       	and    eax,0x80
c0020276:	85 c0                	test   eax,eax
c0020278:	74 5f                	je     c00202d9 <PIC::eoi(unsigned char)+0x8f>
c002027a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002027e:	75 2d                	jne    c00202ad <PIC::eoi(unsigned char)+0x63>
c0020280:	6a 0b                	push   0xb
c0020282:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020285:	e8 56 ff ff ff       	call   c00201e0 <PIC::getIRQReg(int)>
c002028a:	83 c4 08             	add    esp,0x8
c002028d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0020291:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020294:	66 85 c0             	test   ax,ax
c0020297:	78 14                	js     c00202ad <PIC::eoi(unsigned char)+0x63>
c0020299:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002029f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00202a3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00202a6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00202aa:	ee                   	out    dx,al
c00202ab:	eb 2d                	jmp    c00202da <PIC::eoi(unsigned char)+0x90>
c00202ad:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00202b1:	76 12                	jbe    c00202c5 <PIC::eoi(unsigned char)+0x7b>
c00202b3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00202b9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00202bd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00202c0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00202c4:	ee                   	out    dx,al
c00202c5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00202cb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00202cf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00202d2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00202d6:	ee                   	out    dx,al
c00202d7:	eb 01                	jmp    c00202da <PIC::eoi(unsigned char)+0x90>
c00202d9:	90                   	nop
c00202da:	c9                   	leave  
c00202db:	c3                   	ret    

c00202dc <PIC::remap()>:
c00202dc:	55                   	push   ebp
c00202dd:	89 e5                	mov    ebp,esp
c00202df:	83 ec 48             	sub    esp,0x48
c00202e2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00202e9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00202f0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00202f6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00202f9:	89 c2                	mov    edx,eax
c00202fb:	ec                   	in     al,dx
c00202fc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00202ff:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0020302:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0020305:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002030b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002030e:	89 c2                	mov    edx,eax
c0020310:	ec                   	in     al,dx
c0020311:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0020314:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0020317:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002031a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0020320:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0020324:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0020327:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002032a:	ee                   	out    dx,al
c002032b:	83 ec 0c             	sub    esp,0xc
c002032e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020331:	e8 a4 fe ff ff       	call   c00201da <PIC::ioWait()>
c0020336:	83 c4 10             	add    esp,0x10
c0020339:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002033f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0020343:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0020346:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0020349:	ee                   	out    dx,al
c002034a:	83 ec 0c             	sub    esp,0xc
c002034d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020350:	e8 85 fe ff ff       	call   c00201da <PIC::ioWait()>
c0020355:	83 c4 10             	add    esp,0x10
c0020358:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002035b:	0f b6 c0             	movzx  eax,al
c002035e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0020364:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0020367:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002036a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002036d:	ee                   	out    dx,al
c002036e:	83 ec 0c             	sub    esp,0xc
c0020371:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020374:	e8 61 fe ff ff       	call   c00201da <PIC::ioWait()>
c0020379:	83 c4 10             	add    esp,0x10
c002037c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002037f:	0f b6 c0             	movzx  eax,al
c0020382:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0020388:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002038b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002038e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020391:	ee                   	out    dx,al
c0020392:	83 ec 0c             	sub    esp,0xc
c0020395:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020398:	e8 3d fe ff ff       	call   c00201da <PIC::ioWait()>
c002039d:	83 c4 10             	add    esp,0x10
c00203a0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00203a6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00203aa:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00203ad:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00203b0:	ee                   	out    dx,al
c00203b1:	83 ec 0c             	sub    esp,0xc
c00203b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00203b7:	e8 1e fe ff ff       	call   c00201da <PIC::ioWait()>
c00203bc:	83 c4 10             	add    esp,0x10
c00203bf:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00203c5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00203c9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00203cc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203cf:	ee                   	out    dx,al
c00203d0:	83 ec 0c             	sub    esp,0xc
c00203d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00203d6:	e8 ff fd ff ff       	call   c00201da <PIC::ioWait()>
c00203db:	83 c4 10             	add    esp,0x10
c00203de:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00203e4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00203e8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00203eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00203ee:	ee                   	out    dx,al
c00203ef:	83 ec 0c             	sub    esp,0xc
c00203f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00203f5:	e8 e0 fd ff ff       	call   c00201da <PIC::ioWait()>
c00203fa:	83 c4 10             	add    esp,0x10
c00203fd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0020403:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0020407:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002040a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002040d:	ee                   	out    dx,al
c002040e:	83 ec 0c             	sub    esp,0xc
c0020411:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020414:	e8 c1 fd ff ff       	call   c00201da <PIC::ioWait()>
c0020419:	83 c4 10             	add    esp,0x10
c002041c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0020420:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0020426:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0020429:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002042c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002042f:	ee                   	out    dx,al
c0020430:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0020434:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002043a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002043d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0020440:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020443:	ee                   	out    dx,al
c0020444:	90                   	nop
c0020445:	c9                   	leave  
c0020446:	c3                   	ret    
c0020447:	90                   	nop

c0020448 <PIC::open(int, int, void*)>:
c0020448:	55                   	push   ebp
c0020449:	89 e5                	mov    ebp,esp
c002044b:	83 ec 18             	sub    esp,0x18
c002044e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0020454:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0020458:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002045b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002045f:	ee                   	out    dx,al
c0020460:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0020466:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002046a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002046d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020471:	ee                   	out    dx,al
c0020472:	83 ec 0c             	sub    esp,0xc
c0020475:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020478:	e8 5f fe ff ff       	call   c00202dc <PIC::remap()>
c002047d:	83 c4 10             	add    esp,0x10
c0020480:	b8 00 00 00 00       	mov    eax,0x0
c0020485:	c9                   	leave  
c0020486:	c3                   	ret    
c0020487:	90                   	nop

c0020488 <APICTimer::close(int, int, void*)>:
c0020488:	b8 00 00 00 00       	mov    eax,0x0
c002048d:	c3                   	ret    

c002048e <apicTimerHandler(regs*, void*)>:
c002048e:	83 ec 0c             	sub    esp,0xc
c0020491:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020495:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020497:	b8 10 27 00 00       	mov    eax,0x2710
c002049c:	ba 00 00 00 00       	mov    edx,0x0
c00204a1:	f7 f1                	div    ecx
c00204a3:	83 ec 0c             	sub    esp,0xc
c00204a6:	50                   	push   eax
c00204a7:	e8 0d 02 ff ff       	call   c00106b9 <timerHandler(unsigned int)>
c00204ac:	83 c4 10             	add    esp,0x10
c00204af:	90                   	nop
c00204b0:	83 c4 0c             	add    esp,0xc
c00204b3:	c3                   	ret    

c00204b4 <APICTimer::write(int)>:
c00204b4:	83 ec 1c             	sub    esp,0x1c
c00204b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00204bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00204c5:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00204ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00204d0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00204d6:	83 ec 0c             	sub    esp,0xc
c00204d9:	50                   	push   eax
c00204da:	e8 e7 f4 ff ff       	call   c001f9c6 <APIC::getBase()>
c00204df:	83 c4 10             	add    esp,0x10
c00204e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204e6:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c00204eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204f3:	05 e0 03 00 00       	add    eax,0x3e0
c00204f8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00204fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020502:	05 80 03 00 00       	add    eax,0x380
c0020507:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002050d:	fb                   	sti    
c002050e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020512:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0020518:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c002051d:	39 c2                	cmp    edx,eax
c002051f:	76 03                	jbe    c0020524 <APICTimer::write(int)+0x70>
c0020521:	eb eb                	jmp    c002050e <APICTimer::write(int)+0x5a>
c0020523:	90                   	nop
c0020524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020528:	05 20 03 00 00       	add    eax,0x320
c002052d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0020533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020537:	05 90 03 00 00       	add    eax,0x390
c002053c:	8b 00                	mov    eax,DWORD PTR [eax]
c002053e:	f7 d0                	not    eax
c0020540:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020544:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002054c:	ba 00 00 00 00       	mov    edx,0x0
c0020551:	f7 f1                	div    ecx
c0020553:	89 04 24             	mov    DWORD PTR [esp],eax
c0020556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002055a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020560:	0d 00 00 02 00       	or     eax,0x20000
c0020565:	89 c2                	mov    edx,eax
c0020567:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002056b:	05 20 03 00 00       	add    eax,0x320
c0020570:	89 10                	mov    DWORD PTR [eax],edx
c0020572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020576:	05 e0 03 00 00       	add    eax,0x3e0
c002057b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020585:	05 80 03 00 00       	add    eax,0x380
c002058a:	89 c2                	mov    edx,eax
c002058c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002058f:	89 02                	mov    DWORD PTR [edx],eax
c0020591:	90                   	nop
c0020592:	83 c4 1c             	add    esp,0x1c
c0020595:	c3                   	ret    

c0020596 <APICTimer::open(int, int, void*)>:
c0020596:	57                   	push   edi
c0020597:	56                   	push   esi
c0020598:	53                   	push   ebx
c0020599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059d:	8b 00                	mov    eax,DWORD PTR [eax]
c002059f:	83 c0 24             	add    eax,0x24
c00205a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00205a4:	83 ec 08             	sub    esp,0x8
c00205a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205af:	ff d0                	call   eax
c00205b1:	83 c4 10             	add    esp,0x10
c00205b4:	a1 68 60 02 c0       	mov    eax,ds:0xc0026068
c00205b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00205bf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00205c5:	83 ec 0c             	sub    esp,0xc
c00205c8:	50                   	push   eax
c00205c9:	e8 f8 f3 ff ff       	call   c001f9c6 <APIC::getBase()>
c00205ce:	83 c4 10             	add    esp,0x10
c00205d1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00205d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205db:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00205e1:	0f b6 f8             	movzx  edi,al
c00205e4:	89 d0                	mov    eax,edx
c00205e6:	ba 00 00 00 00       	mov    edx,0x0
c00205eb:	89 c1                	mov    ecx,eax
c00205ed:	80 e5 ff             	and    ch,0xff
c00205f0:	89 cb                	mov    ebx,ecx
c00205f2:	0f b6 f2             	movzx  esi,dl
c00205f5:	89 d8                	mov    eax,ebx
c00205f7:	89 f2                	mov    edx,esi
c00205f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00205fd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020600:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020604:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020608:	83 e0 00             	and    eax,0x0
c002060b:	09 d0                	or     eax,edx
c002060d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020615:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002061b:	8d 50 01             	lea    edx,[eax+0x1]
c002061e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020622:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020628:	0f b6 d0             	movzx  edx,al
c002062b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002062f:	83 c2 08             	add    edx,0x8
c0020632:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020636:	0f b6 c9             	movzx  ecx,cl
c0020639:	81 c9 00 00 01 00    	or     ecx,0x10000
c002063f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020647:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002064b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020659:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002065f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020663:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020669:	83 ec 0c             	sub    esp,0xc
c002066c:	51                   	push   ecx
c002066d:	6a 01                	push   0x1
c002066f:	68 8e 04 02 c0       	push   0xc002048e
c0020674:	52                   	push   edx
c0020675:	50                   	push   eax
c0020676:	e8 41 d7 fe ff       	call   c000ddbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002067b:	83 c4 20             	add    esp,0x20
c002067e:	89 c2                	mov    edx,eax
c0020680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020684:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002068a:	b8 00 00 00 00       	mov    eax,0x0
c002068f:	5b                   	pop    ebx
c0020690:	5e                   	pop    esi
c0020691:	5f                   	pop    edi
c0020692:	c3                   	ret    
c0020693:	90                   	nop

c0020694 <APICTimer::APICTimer()>:
c0020694:	83 ec 0c             	sub    esp,0xc
c0020697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069b:	83 ec 08             	sub    esp,0x8
c002069e:	68 3c 52 02 c0       	push   0xc002523c
c00206a3:	50                   	push   eax
c00206a4:	e8 81 ff fe ff       	call   c001062a <Timer::Timer(char const*)>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	ba 50 52 02 c0       	mov    edx,0xc0025250
c00206b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206b5:	89 10                	mov    DWORD PTR [eax],edx
c00206b7:	90                   	nop
c00206b8:	83 c4 0c             	add    esp,0xc
c00206bb:	c3                   	ret    

c00206bc <PIT::write(int)>:
c00206bc:	83 ec 10             	sub    esp,0x10
c00206bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00206c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00206cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00206d1:	a3 e4 7f 02 c0       	mov    ds:0xc0027fe4,eax
c00206d6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00206db:	99                   	cdq    
c00206dc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00206e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206e4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00206eb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00206f0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00206f4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00206f9:	ee                   	out    dx,al
c00206fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206fe:	0f b6 c0             	movzx  eax,al
c0020701:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020708:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002070c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020710:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020715:	ee                   	out    dx,al
c0020716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002071a:	c1 f8 08             	sar    eax,0x8
c002071d:	0f b6 c0             	movzx  eax,al
c0020720:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020727:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002072b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002072f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020734:	ee                   	out    dx,al
c0020735:	90                   	nop
c0020736:	83 c4 10             	add    esp,0x10
c0020739:	c3                   	ret    

c002073a <pitHandler(regs*, void*)>:
c002073a:	83 ec 0c             	sub    esp,0xc
c002073d:	8b 0d e4 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027fe4
c0020743:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020748:	99                   	cdq    
c0020749:	f7 f9                	idiv   ecx
c002074b:	83 ec 0c             	sub    esp,0xc
c002074e:	50                   	push   eax
c002074f:	e8 65 ff fe ff       	call   c00106b9 <timerHandler(unsigned int)>
c0020754:	83 c4 10             	add    esp,0x10
c0020757:	90                   	nop
c0020758:	83 c4 0c             	add    esp,0xc
c002075b:	c3                   	ret    

c002075c <PIT::open(int, int, void*)>:
c002075c:	83 ec 0c             	sub    esp,0xc
c002075f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020763:	8b 00                	mov    eax,DWORD PTR [eax]
c0020765:	83 c0 24             	add    eax,0x24
c0020768:	8b 00                	mov    eax,DWORD PTR [eax]
c002076a:	83 ec 08             	sub    esp,0x8
c002076d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020771:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020775:	ff d0                	call   eax
c0020777:	83 c4 10             	add    esp,0x10
c002077a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002077e:	83 ec 0c             	sub    esp,0xc
c0020781:	6a 00                	push   0x0
c0020783:	6a 01                	push   0x1
c0020785:	68 3a 07 02 c0       	push   0xc002073a
c002078a:	6a 00                	push   0x0
c002078c:	50                   	push   eax
c002078d:	e8 2a d6 fe ff       	call   c000ddbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020792:	83 c4 20             	add    esp,0x20
c0020795:	89 c2                	mov    edx,eax
c0020797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002079b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00207a1:	b8 00 00 00 00       	mov    eax,0x0
c00207a6:	83 c4 0c             	add    esp,0xc
c00207a9:	c3                   	ret    

c00207aa <PIT::close(int, int, void*)>:
c00207aa:	83 ec 0c             	sub    esp,0xc
c00207ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207b1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00207bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207bf:	6a 01                	push   0x1
c00207c1:	68 3a 07 02 c0       	push   0xc002073a
c00207c6:	6a 00                	push   0x0
c00207c8:	50                   	push   eax
c00207c9:	e8 38 d6 fe ff       	call   c000de06 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00207ce:	83 c4 10             	add    esp,0x10
c00207d1:	b8 00 00 00 00       	mov    eax,0x0
c00207d6:	83 c4 0c             	add    esp,0xc
c00207d9:	c3                   	ret    

c00207da <PIT::PIT()>:
c00207da:	83 ec 0c             	sub    esp,0xc
c00207dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207e1:	83 ec 08             	sub    esp,0x8
c00207e4:	68 78 52 02 c0       	push   0xc0025278
c00207e9:	50                   	push   eax
c00207ea:	e8 3b fe fe ff       	call   c001062a <Timer::Timer(char const*)>
c00207ef:	83 c4 10             	add    esp,0x10
c00207f2:	ba a0 52 02 c0       	mov    edx,0xc00252a0
c00207f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207fb:	89 10                	mov    DWORD PTR [eax],edx
c00207fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020801:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020807:	0f b6 d0             	movzx  edx,al
c002080a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002080e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020819:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002081f:	0f b6 d0             	movzx  edx,al
c0020822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020826:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002082b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002082f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020835:	8d 50 01             	lea    edx,[eax+0x1]
c0020838:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002083c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020842:	0f b6 d0             	movzx  edx,al
c0020845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020849:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002084d:	83 e1 3f             	and    ecx,0x3f
c0020850:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020854:	90                   	nop
c0020855:	83 c4 0c             	add    esp,0xc
c0020858:	c3                   	ret    
c0020859:	66 90                	xchg   ax,ax
c002085b:	66 90                	xchg   ax,ax
c002085d:	66 90                	xchg   ax,ax
c002085f:	90                   	nop

c0020860 <avxDetect>:
c0020860:	b8 00 00 00 00       	mov    eax,0x0
c0020865:	c3                   	ret    

c0020866 <avxSave>:
c0020866:	c3                   	ret    

c0020867 <avxLoad>:
c0020867:	c3                   	ret    

c0020868 <avxInit>:
c0020868:	c3                   	ret    

c0020869 <avxClose>:
c0020869:	c3                   	ret    

c002086a <wouldSheSayYes>:
c002086a:	c3                   	ret    
c002086b:	49                   	dec    ecx
c002086c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020870:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020874:	75 20                	jne    c0020896 <sseDetect.noSSE+0x1>
c0020876:	4e                   	dec    esi
c0020877:	79 61                	jns    c00208da <x87Detect+0x14>
c0020879:	68 2e 2e 2e 00       	push   0x2e2e2e
c002087e:	66 90                	xchg   ax,ax

c0020880 <absolutelyNoChanceInHell>:
c0020880:	b8 01 00 00 00       	mov    eax,0x1
c0020885:	0f a2                	cpuid  
c0020887:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002088d:	74 06                	je     c0020895 <sseDetect.noSSE>
c002088f:	b8 01 00 00 00       	mov    eax,0x1
c0020894:	c3                   	ret    

c0020895 <sseDetect.noSSE>:
c0020895:	31 c0                	xor    eax,eax
c0020897:	c3                   	ret    

c0020898 <sseSave>:
c0020898:	0f ae 44 24 04       	fxsave [esp+0x4]
c002089d:	c3                   	ret    

c002089e <sseLoad>:
c002089e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00208a3:	c3                   	ret    

c00208a4 <sseInit>:
c00208a4:	e8 49 00 00 00       	call   c00208f2 <x87Init>
c00208a9:	0f 20 e0             	mov    eax,cr4
c00208ac:	66 0d 00 06          	or     ax,0x600
c00208b0:	0f 22 e0             	mov    cr4,eax
c00208b3:	c3                   	ret    

c00208b4 <sseClose>:
c00208b4:	c3                   	ret    
c00208b5:	66 90                	xchg   ax,ax
c00208b7:	66 90                	xchg   ax,ax
c00208b9:	66 90                	xchg   ax,ax
c00208bb:	66 90                	xchg   ax,ax
c00208bd:	66 90                	xchg   ax,ax
c00208bf:	90                   	nop

c00208c0 <value_37F>:
c00208c0:	7f 03                	jg     c00208c5 <value_37A+0x1>

c00208c2 <value_37E>:
c00208c2:	7e 03                	jle    c00208c7 <x87Detect+0x1>

c00208c4 <value_37A>:
c00208c4:	7a 03                	jp     c00208c9 <x87Detect+0x3>

c00208c6 <x87Detect>:
c00208c6:	b8 01 00 00 00       	mov    eax,0x1
c00208cb:	0f a2                	cpuid  
c00208cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00208d3:	74 06                	je     c00208db <x87Detect.nox87>
c00208d5:	b8 01 00 00 00       	mov    eax,0x1
c00208da:	c3                   	ret    

c00208db <x87Detect.nox87>:
c00208db:	b8 00 00 00 00       	mov    eax,0x0
c00208e0:	c3                   	ret    

c00208e1 <x87Save>:
c00208e1:	55                   	push   ebp
c00208e2:	89 e5                	mov    ebp,esp
c00208e4:	9b dd 75 08          	fsave  [ebp+0x8]
c00208e8:	c9                   	leave  
c00208e9:	c3                   	ret    

c00208ea <x87Load>:
c00208ea:	55                   	push   ebp
c00208eb:	89 e5                	mov    ebp,esp
c00208ed:	dd 65 08             	frstor [ebp+0x8]
c00208f0:	c9                   	leave  
c00208f1:	c3                   	ret    

c00208f2 <x87Init>:
c00208f2:	9b db e3             	finit  
c00208f5:	0f 20 c0             	mov    eax,cr0
c00208f8:	66 25 fb ff          	and    ax,0xfffb
c00208fc:	66 0d 22 00          	or     ax,0x22
c0020900:	0f 22 c0             	mov    cr0,eax
c0020903:	0f 06                	clts   
c0020905:	d9 2d c4 08 02 c0    	fldcw  WORD PTR ds:0xc00208c4
c002090b:	c3                   	ret    

c002090c <x87Close>:
c002090c:	c3                   	ret    
c002090d:	66 90                	xchg   ax,ax
c002090f:	90                   	nop

c0020910 <__do_global_ctors_aux>:
c0020910:	a1 80 1a 02 c0       	mov    eax,ds:0xc0021a80
c0020915:	83 f8 ff             	cmp    eax,0xffffffff
c0020918:	74 1a                	je     c0020934 <__do_global_ctors_aux+0x24>
c002091a:	55                   	push   ebp
c002091b:	89 e5                	mov    ebp,esp
c002091d:	53                   	push   ebx
c002091e:	52                   	push   edx
c002091f:	bb 80 1a 02 c0       	mov    ebx,0xc0021a80
c0020924:	ff d0                	call   eax
c0020926:	83 eb 04             	sub    ebx,0x4
c0020929:	8b 03                	mov    eax,DWORD PTR [ebx]
c002092b:	83 f8 ff             	cmp    eax,0xffffffff
c002092e:	75 f4                	jne    c0020924 <__do_global_ctors_aux+0x14>
c0020930:	58                   	pop    eax
c0020931:	5b                   	pop    ebx
c0020932:	5d                   	pop    ebp
c0020933:	c3                   	ret    
c0020934:	c3                   	ret    
c0020935:	66 90                	xchg   ax,ax
c0020937:	90                   	nop

c0020938 <__divdi3>:
c0020938:	55                   	push   ebp
c0020939:	57                   	push   edi
c002093a:	56                   	push   esi
c002093b:	53                   	push   ebx
c002093c:	83 ec 1c             	sub    esp,0x1c
c002093f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020943:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020947:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002094a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002094e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020952:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020956:	85 db                	test   ebx,ebx
c0020958:	0f 88 8e 00 00 00    	js     c00209ec <__divdi3+0xb4>
c002095e:	89 dd                	mov    ebp,ebx
c0020960:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020968:	89 d3                	mov    ebx,edx
c002096a:	85 d2                	test   edx,edx
c002096c:	79 0d                	jns    c002097b <__divdi3+0x43>
c002096e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020972:	f7 d8                	neg    eax
c0020974:	83 d2 00             	adc    edx,0x0
c0020977:	f7 da                	neg    edx
c0020979:	89 d3                	mov    ebx,edx
c002097b:	89 c7                	mov    edi,eax
c002097d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020980:	85 db                	test   ebx,ebx
c0020982:	75 48                	jne    c00209cc <__divdi3+0x94>
c0020984:	39 ef                	cmp    edi,ebp
c0020986:	76 24                	jbe    c00209ac <__divdi3+0x74>
c0020988:	89 ea                	mov    edx,ebp
c002098a:	f7 f7                	div    edi
c002098c:	89 c1                	mov    ecx,eax
c002098e:	31 f6                	xor    esi,esi
c0020990:	89 c8                	mov    eax,ecx
c0020992:	89 f2                	mov    edx,esi
c0020994:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020998:	85 c9                	test   ecx,ecx
c002099a:	74 07                	je     c00209a3 <__divdi3+0x6b>
c002099c:	f7 d8                	neg    eax
c002099e:	83 d2 00             	adc    edx,0x0
c00209a1:	f7 da                	neg    edx
c00209a3:	83 c4 1c             	add    esp,0x1c
c00209a6:	5b                   	pop    ebx
c00209a7:	5e                   	pop    esi
c00209a8:	5f                   	pop    edi
c00209a9:	5d                   	pop    ebp
c00209aa:	c3                   	ret    
c00209ab:	90                   	nop
c00209ac:	85 ff                	test   edi,edi
c00209ae:	75 0b                	jne    c00209bb <__divdi3+0x83>
c00209b0:	b8 01 00 00 00       	mov    eax,0x1
c00209b5:	31 d2                	xor    edx,edx
c00209b7:	f7 f3                	div    ebx
c00209b9:	89 c7                	mov    edi,eax
c00209bb:	31 d2                	xor    edx,edx
c00209bd:	89 e8                	mov    eax,ebp
c00209bf:	f7 f7                	div    edi
c00209c1:	89 c6                	mov    esi,eax
c00209c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00209c6:	f7 f7                	div    edi
c00209c8:	89 c1                	mov    ecx,eax
c00209ca:	eb c4                	jmp    c0020990 <__divdi3+0x58>
c00209cc:	39 eb                	cmp    ebx,ebp
c00209ce:	77 3c                	ja     c0020a0c <__divdi3+0xd4>
c00209d0:	0f bd f3             	bsr    esi,ebx
c00209d3:	83 f6 1f             	xor    esi,0x1f
c00209d6:	75 40                	jne    c0020a18 <__divdi3+0xe0>
c00209d8:	39 eb                	cmp    ebx,ebp
c00209da:	72 09                	jb     c00209e5 <__divdi3+0xad>
c00209dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00209df:	0f 87 97 00 00 00    	ja     c0020a7c <__divdi3+0x144>
c00209e5:	b9 01 00 00 00       	mov    ecx,0x1
c00209ea:	eb a4                	jmp    c0020990 <__divdi3+0x58>
c00209ec:	f7 d9                	neg    ecx
c00209ee:	83 d3 00             	adc    ebx,0x0
c00209f1:	f7 db                	neg    ebx
c00209f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00209f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00209fa:	89 dd                	mov    ebp,ebx
c00209fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020a04:	e9 5f ff ff ff       	jmp    c0020968 <__divdi3+0x30>
c0020a09:	8d 76 00             	lea    esi,[esi+0x0]
c0020a0c:	31 f6                	xor    esi,esi
c0020a0e:	31 c9                	xor    ecx,ecx
c0020a10:	e9 7b ff ff ff       	jmp    c0020990 <__divdi3+0x58>
c0020a15:	8d 76 00             	lea    esi,[esi+0x0]
c0020a18:	b8 20 00 00 00       	mov    eax,0x20
c0020a1d:	29 f0                	sub    eax,esi
c0020a1f:	89 f1                	mov    ecx,esi
c0020a21:	d3 e3                	shl    ebx,cl
c0020a23:	89 fa                	mov    edx,edi
c0020a25:	88 c1                	mov    cl,al
c0020a27:	d3 ea                	shr    edx,cl
c0020a29:	09 da                	or     edx,ebx
c0020a2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a2f:	89 f1                	mov    ecx,esi
c0020a31:	d3 e7                	shl    edi,cl
c0020a33:	89 eb                	mov    ebx,ebp
c0020a35:	88 c1                	mov    cl,al
c0020a37:	d3 eb                	shr    ebx,cl
c0020a39:	89 f1                	mov    ecx,esi
c0020a3b:	d3 e5                	shl    ebp,cl
c0020a3d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020a40:	88 c1                	mov    cl,al
c0020a42:	d3 ea                	shr    edx,cl
c0020a44:	09 d5                	or     ebp,edx
c0020a46:	89 e8                	mov    eax,ebp
c0020a48:	89 da                	mov    edx,ebx
c0020a4a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020a4e:	89 d3                	mov    ebx,edx
c0020a50:	89 c5                	mov    ebp,eax
c0020a52:	f7 e7                	mul    edi
c0020a54:	39 d3                	cmp    ebx,edx
c0020a56:	72 18                	jb     c0020a70 <__divdi3+0x138>
c0020a58:	74 0a                	je     c0020a64 <__divdi3+0x12c>
c0020a5a:	89 e9                	mov    ecx,ebp
c0020a5c:	31 f6                	xor    esi,esi
c0020a5e:	e9 2d ff ff ff       	jmp    c0020990 <__divdi3+0x58>
c0020a63:	90                   	nop
c0020a64:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020a67:	89 f1                	mov    ecx,esi
c0020a69:	d3 e7                	shl    edi,cl
c0020a6b:	39 c7                	cmp    edi,eax
c0020a6d:	73 eb                	jae    c0020a5a <__divdi3+0x122>
c0020a6f:	90                   	nop
c0020a70:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020a73:	31 f6                	xor    esi,esi
c0020a75:	e9 16 ff ff ff       	jmp    c0020990 <__divdi3+0x58>
c0020a7a:	66 90                	xchg   ax,ax
c0020a7c:	31 c9                	xor    ecx,ecx
c0020a7e:	e9 0d ff ff ff       	jmp    c0020990 <__divdi3+0x58>
c0020a83:	90                   	nop

c0020a84 <__moddi3>:
c0020a84:	55                   	push   ebp
c0020a85:	57                   	push   edi
c0020a86:	56                   	push   esi
c0020a87:	53                   	push   ebx
c0020a88:	83 ec 2c             	sub    esp,0x2c
c0020a8b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020a8f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020a93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020a97:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020a9b:	85 db                	test   ebx,ebx
c0020a9d:	0f 88 85 00 00 00    	js     c0020b28 <__moddi3+0xa4>
c0020aa3:	89 de                	mov    esi,ebx
c0020aa5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020aad:	89 d7                	mov    edi,edx
c0020aaf:	85 d2                	test   edx,edx
c0020ab1:	79 09                	jns    c0020abc <__moddi3+0x38>
c0020ab3:	f7 d8                	neg    eax
c0020ab5:	83 d2 00             	adc    edx,0x0
c0020ab8:	f7 da                	neg    edx
c0020aba:	89 d7                	mov    edi,edx
c0020abc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ac0:	89 cd                	mov    ebp,ecx
c0020ac2:	85 ff                	test   edi,edi
c0020ac4:	75 52                	jne    c0020b18 <__moddi3+0x94>
c0020ac6:	89 c3                	mov    ebx,eax
c0020ac8:	39 f0                	cmp    eax,esi
c0020aca:	76 24                	jbe    c0020af0 <__moddi3+0x6c>
c0020acc:	89 c8                	mov    eax,ecx
c0020ace:	89 f2                	mov    edx,esi
c0020ad0:	f7 f3                	div    ebx
c0020ad2:	89 d6                	mov    esi,edx
c0020ad4:	89 f0                	mov    eax,esi
c0020ad6:	31 d2                	xor    edx,edx
c0020ad8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020adc:	85 c9                	test   ecx,ecx
c0020ade:	74 07                	je     c0020ae7 <__moddi3+0x63>
c0020ae0:	f7 d8                	neg    eax
c0020ae2:	83 d2 00             	adc    edx,0x0
c0020ae5:	f7 da                	neg    edx
c0020ae7:	83 c4 2c             	add    esp,0x2c
c0020aea:	5b                   	pop    ebx
c0020aeb:	5e                   	pop    esi
c0020aec:	5f                   	pop    edi
c0020aed:	5d                   	pop    ebp
c0020aee:	c3                   	ret    
c0020aef:	90                   	nop
c0020af0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020af4:	85 db                	test   ebx,ebx
c0020af6:	75 0d                	jne    c0020b05 <__moddi3+0x81>
c0020af8:	b8 01 00 00 00       	mov    eax,0x1
c0020afd:	31 d2                	xor    edx,edx
c0020aff:	f7 f7                	div    edi
c0020b01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b05:	89 f0                	mov    eax,esi
c0020b07:	31 d2                	xor    edx,edx
c0020b09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020b0d:	f7 f7                	div    edi
c0020b0f:	89 e8                	mov    eax,ebp
c0020b11:	f7 f7                	div    edi
c0020b13:	89 d6                	mov    esi,edx
c0020b15:	eb bd                	jmp    c0020ad4 <__moddi3+0x50>
c0020b17:	90                   	nop
c0020b18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020b1c:	39 f7                	cmp    edi,esi
c0020b1e:	76 20                	jbe    c0020b40 <__moddi3+0xbc>
c0020b20:	89 c8                	mov    eax,ecx
c0020b22:	89 f2                	mov    edx,esi
c0020b24:	eb b2                	jmp    c0020ad8 <__moddi3+0x54>
c0020b26:	66 90                	xchg   ax,ax
c0020b28:	f7 d9                	neg    ecx
c0020b2a:	83 d3 00             	adc    ebx,0x0
c0020b2d:	f7 db                	neg    ebx
c0020b2f:	89 de                	mov    esi,ebx
c0020b31:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020b39:	e9 6f ff ff ff       	jmp    c0020aad <__moddi3+0x29>
c0020b3e:	66 90                	xchg   ax,ax
c0020b40:	0f bd c7             	bsr    eax,edi
c0020b43:	83 f0 1f             	xor    eax,0x1f
c0020b46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b4a:	75 24                	jne    c0020b70 <__moddi3+0xec>
c0020b4c:	39 f7                	cmp    edi,esi
c0020b4e:	72 06                	jb     c0020b56 <__moddi3+0xd2>
c0020b50:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020b54:	77 0c                	ja     c0020b62 <__moddi3+0xde>
c0020b56:	89 e9                	mov    ecx,ebp
c0020b58:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020b5c:	19 fe                	sbb    esi,edi
c0020b5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020b62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b66:	89 f2                	mov    edx,esi
c0020b68:	e9 6b ff ff ff       	jmp    c0020ad8 <__moddi3+0x54>
c0020b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0020b70:	b8 20 00 00 00       	mov    eax,0x20
c0020b75:	89 c2                	mov    edx,eax
c0020b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020b7b:	29 da                	sub    edx,ebx
c0020b7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020b81:	88 d9                	mov    cl,bl
c0020b83:	d3 e7                	shl    edi,cl
c0020b85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b89:	88 d1                	mov    cl,dl
c0020b8b:	d3 e8                	shr    eax,cl
c0020b8d:	09 c7                	or     edi,eax
c0020b8f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020b93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020b97:	89 d8                	mov    eax,ebx
c0020b99:	88 d9                	mov    cl,bl
c0020b9b:	d3 e7                	shl    edi,cl
c0020b9d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020ba1:	89 f3                	mov    ebx,esi
c0020ba3:	88 d1                	mov    cl,dl
c0020ba5:	d3 eb                	shr    ebx,cl
c0020ba7:	89 c7                	mov    edi,eax
c0020ba9:	88 c1                	mov    cl,al
c0020bab:	d3 e6                	shl    esi,cl
c0020bad:	89 e8                	mov    eax,ebp
c0020baf:	88 d1                	mov    cl,dl
c0020bb1:	d3 e8                	shr    eax,cl
c0020bb3:	09 f0                	or     eax,esi
c0020bb5:	89 f9                	mov    ecx,edi
c0020bb7:	d3 e5                	shl    ebp,cl
c0020bb9:	89 da                	mov    edx,ebx
c0020bbb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020bbf:	89 d3                	mov    ebx,edx
c0020bc1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020bc5:	89 c6                	mov    esi,eax
c0020bc7:	89 d1                	mov    ecx,edx
c0020bc9:	39 d3                	cmp    ebx,edx
c0020bcb:	72 27                	jb     c0020bf4 <__moddi3+0x170>
c0020bcd:	74 21                	je     c0020bf0 <__moddi3+0x16c>
c0020bcf:	29 f5                	sub    ebp,esi
c0020bd1:	19 cb                	sbb    ebx,ecx
c0020bd3:	89 de                	mov    esi,ebx
c0020bd5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020bd9:	d3 e6                	shl    esi,cl
c0020bdb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020bdf:	89 f9                	mov    ecx,edi
c0020be1:	d3 ed                	shr    ebp,cl
c0020be3:	09 ee                	or     esi,ebp
c0020be5:	89 f0                	mov    eax,esi
c0020be7:	d3 eb                	shr    ebx,cl
c0020be9:	89 da                	mov    edx,ebx
c0020beb:	e9 e8 fe ff ff       	jmp    c0020ad8 <__moddi3+0x54>
c0020bf0:	39 c5                	cmp    ebp,eax
c0020bf2:	73 db                	jae    c0020bcf <__moddi3+0x14b>
c0020bf4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020bf8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020bfc:	89 d1                	mov    ecx,edx
c0020bfe:	89 c6                	mov    esi,eax
c0020c00:	eb cd                	jmp    c0020bcf <__moddi3+0x14b>
c0020c02:	66 90                	xchg   ax,ax

c0020c04 <__udivdi3>:
c0020c04:	55                   	push   ebp
c0020c05:	57                   	push   edi
c0020c06:	56                   	push   esi
c0020c07:	53                   	push   ebx
c0020c08:	83 ec 1c             	sub    esp,0x1c
c0020c0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020c0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020c13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020c17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c1b:	85 d2                	test   edx,edx
c0020c1d:	75 41                	jne    c0020c60 <__udivdi3+0x5c>
c0020c1f:	39 f7                	cmp    edi,esi
c0020c21:	76 15                	jbe    c0020c38 <__udivdi3+0x34>
c0020c23:	89 e8                	mov    eax,ebp
c0020c25:	89 f2                	mov    edx,esi
c0020c27:	f7 f7                	div    edi
c0020c29:	31 db                	xor    ebx,ebx
c0020c2b:	89 da                	mov    edx,ebx
c0020c2d:	83 c4 1c             	add    esp,0x1c
c0020c30:	5b                   	pop    ebx
c0020c31:	5e                   	pop    esi
c0020c32:	5f                   	pop    edi
c0020c33:	5d                   	pop    ebp
c0020c34:	c3                   	ret    
c0020c35:	8d 76 00             	lea    esi,[esi+0x0]
c0020c38:	89 f9                	mov    ecx,edi
c0020c3a:	85 ff                	test   edi,edi
c0020c3c:	75 0b                	jne    c0020c49 <__udivdi3+0x45>
c0020c3e:	b8 01 00 00 00       	mov    eax,0x1
c0020c43:	31 d2                	xor    edx,edx
c0020c45:	f7 f7                	div    edi
c0020c47:	89 c1                	mov    ecx,eax
c0020c49:	31 d2                	xor    edx,edx
c0020c4b:	89 f0                	mov    eax,esi
c0020c4d:	f7 f1                	div    ecx
c0020c4f:	89 c3                	mov    ebx,eax
c0020c51:	89 e8                	mov    eax,ebp
c0020c53:	f7 f1                	div    ecx
c0020c55:	89 da                	mov    edx,ebx
c0020c57:	83 c4 1c             	add    esp,0x1c
c0020c5a:	5b                   	pop    ebx
c0020c5b:	5e                   	pop    esi
c0020c5c:	5f                   	pop    edi
c0020c5d:	5d                   	pop    ebp
c0020c5e:	c3                   	ret    
c0020c5f:	90                   	nop
c0020c60:	39 f2                	cmp    edx,esi
c0020c62:	77 1c                	ja     c0020c80 <__udivdi3+0x7c>
c0020c64:	0f bd da             	bsr    ebx,edx
c0020c67:	83 f3 1f             	xor    ebx,0x1f
c0020c6a:	75 24                	jne    c0020c90 <__udivdi3+0x8c>
c0020c6c:	39 f2                	cmp    edx,esi
c0020c6e:	72 08                	jb     c0020c78 <__udivdi3+0x74>
c0020c70:	39 ef                	cmp    edi,ebp
c0020c72:	0f 87 84 00 00 00    	ja     c0020cfc <__udivdi3+0xf8>
c0020c78:	b8 01 00 00 00       	mov    eax,0x1
c0020c7d:	eb ac                	jmp    c0020c2b <__udivdi3+0x27>
c0020c7f:	90                   	nop
c0020c80:	31 db                	xor    ebx,ebx
c0020c82:	31 c0                	xor    eax,eax
c0020c84:	89 da                	mov    edx,ebx
c0020c86:	83 c4 1c             	add    esp,0x1c
c0020c89:	5b                   	pop    ebx
c0020c8a:	5e                   	pop    esi
c0020c8b:	5f                   	pop    edi
c0020c8c:	5d                   	pop    ebp
c0020c8d:	c3                   	ret    
c0020c8e:	66 90                	xchg   ax,ax
c0020c90:	b8 20 00 00 00       	mov    eax,0x20
c0020c95:	29 d8                	sub    eax,ebx
c0020c97:	88 d9                	mov    cl,bl
c0020c99:	d3 e2                	shl    edx,cl
c0020c9b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c9f:	89 fa                	mov    edx,edi
c0020ca1:	88 c1                	mov    cl,al
c0020ca3:	d3 ea                	shr    edx,cl
c0020ca5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020ca9:	09 d1                	or     ecx,edx
c0020cab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020caf:	88 d9                	mov    cl,bl
c0020cb1:	d3 e7                	shl    edi,cl
c0020cb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020cb7:	89 f7                	mov    edi,esi
c0020cb9:	88 c1                	mov    cl,al
c0020cbb:	d3 ef                	shr    edi,cl
c0020cbd:	88 d9                	mov    cl,bl
c0020cbf:	d3 e6                	shl    esi,cl
c0020cc1:	89 ea                	mov    edx,ebp
c0020cc3:	88 c1                	mov    cl,al
c0020cc5:	d3 ea                	shr    edx,cl
c0020cc7:	09 d6                	or     esi,edx
c0020cc9:	89 f0                	mov    eax,esi
c0020ccb:	89 fa                	mov    edx,edi
c0020ccd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020cd1:	89 d7                	mov    edi,edx
c0020cd3:	89 c6                	mov    esi,eax
c0020cd5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020cd9:	39 d7                	cmp    edi,edx
c0020cdb:	72 13                	jb     c0020cf0 <__udivdi3+0xec>
c0020cdd:	74 09                	je     c0020ce8 <__udivdi3+0xe4>
c0020cdf:	89 f0                	mov    eax,esi
c0020ce1:	31 db                	xor    ebx,ebx
c0020ce3:	e9 43 ff ff ff       	jmp    c0020c2b <__udivdi3+0x27>
c0020ce8:	88 d9                	mov    cl,bl
c0020cea:	d3 e5                	shl    ebp,cl
c0020cec:	39 c5                	cmp    ebp,eax
c0020cee:	73 ef                	jae    c0020cdf <__udivdi3+0xdb>
c0020cf0:	8d 46 ff             	lea    eax,[esi-0x1]
c0020cf3:	31 db                	xor    ebx,ebx
c0020cf5:	e9 31 ff ff ff       	jmp    c0020c2b <__udivdi3+0x27>
c0020cfa:	66 90                	xchg   ax,ax
c0020cfc:	31 c0                	xor    eax,eax
c0020cfe:	e9 28 ff ff ff       	jmp    c0020c2b <__udivdi3+0x27>
c0020d03:	90                   	nop

c0020d04 <__umoddi3>:
c0020d04:	55                   	push   ebp
c0020d05:	57                   	push   edi
c0020d06:	56                   	push   esi
c0020d07:	53                   	push   ebx
c0020d08:	83 ec 1c             	sub    esp,0x1c
c0020d0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020d0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020d13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020d17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d1b:	89 da                	mov    edx,ebx
c0020d1d:	85 c0                	test   eax,eax
c0020d1f:	75 37                	jne    c0020d58 <__umoddi3+0x54>
c0020d21:	39 df                	cmp    edi,ebx
c0020d23:	76 13                	jbe    c0020d38 <__umoddi3+0x34>
c0020d25:	89 f0                	mov    eax,esi
c0020d27:	f7 f7                	div    edi
c0020d29:	89 d0                	mov    eax,edx
c0020d2b:	31 d2                	xor    edx,edx
c0020d2d:	83 c4 1c             	add    esp,0x1c
c0020d30:	5b                   	pop    ebx
c0020d31:	5e                   	pop    esi
c0020d32:	5f                   	pop    edi
c0020d33:	5d                   	pop    ebp
c0020d34:	c3                   	ret    
c0020d35:	8d 76 00             	lea    esi,[esi+0x0]
c0020d38:	89 fd                	mov    ebp,edi
c0020d3a:	85 ff                	test   edi,edi
c0020d3c:	75 0b                	jne    c0020d49 <__umoddi3+0x45>
c0020d3e:	b8 01 00 00 00       	mov    eax,0x1
c0020d43:	31 d2                	xor    edx,edx
c0020d45:	f7 f7                	div    edi
c0020d47:	89 c5                	mov    ebp,eax
c0020d49:	89 d8                	mov    eax,ebx
c0020d4b:	31 d2                	xor    edx,edx
c0020d4d:	f7 f5                	div    ebp
c0020d4f:	89 f0                	mov    eax,esi
c0020d51:	f7 f5                	div    ebp
c0020d53:	89 d0                	mov    eax,edx
c0020d55:	eb d4                	jmp    c0020d2b <__umoddi3+0x27>
c0020d57:	90                   	nop
c0020d58:	89 f1                	mov    ecx,esi
c0020d5a:	39 d8                	cmp    eax,ebx
c0020d5c:	76 0a                	jbe    c0020d68 <__umoddi3+0x64>
c0020d5e:	89 f0                	mov    eax,esi
c0020d60:	83 c4 1c             	add    esp,0x1c
c0020d63:	5b                   	pop    ebx
c0020d64:	5e                   	pop    esi
c0020d65:	5f                   	pop    edi
c0020d66:	5d                   	pop    ebp
c0020d67:	c3                   	ret    
c0020d68:	0f bd e8             	bsr    ebp,eax
c0020d6b:	83 f5 1f             	xor    ebp,0x1f
c0020d6e:	75 1c                	jne    c0020d8c <__umoddi3+0x88>
c0020d70:	39 d8                	cmp    eax,ebx
c0020d72:	72 04                	jb     c0020d78 <__umoddi3+0x74>
c0020d74:	39 f7                	cmp    edi,esi
c0020d76:	77 08                	ja     c0020d80 <__umoddi3+0x7c>
c0020d78:	89 da                	mov    edx,ebx
c0020d7a:	29 fe                	sub    esi,edi
c0020d7c:	19 c2                	sbb    edx,eax
c0020d7e:	89 f1                	mov    ecx,esi
c0020d80:	89 c8                	mov    eax,ecx
c0020d82:	83 c4 1c             	add    esp,0x1c
c0020d85:	5b                   	pop    ebx
c0020d86:	5e                   	pop    esi
c0020d87:	5f                   	pop    edi
c0020d88:	5d                   	pop    ebp
c0020d89:	c3                   	ret    
c0020d8a:	66 90                	xchg   ax,ax
c0020d8c:	ba 20 00 00 00       	mov    edx,0x20
c0020d91:	29 ea                	sub    edx,ebp
c0020d93:	89 e9                	mov    ecx,ebp
c0020d95:	d3 e0                	shl    eax,cl
c0020d97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d9b:	89 f8                	mov    eax,edi
c0020d9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020da1:	88 d1                	mov    cl,dl
c0020da3:	d3 e8                	shr    eax,cl
c0020da5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020da9:	09 c1                	or     ecx,eax
c0020dab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020daf:	89 e9                	mov    ecx,ebp
c0020db1:	d3 e7                	shl    edi,cl
c0020db3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020db7:	89 d8                	mov    eax,ebx
c0020db9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020dbd:	88 d1                	mov    cl,dl
c0020dbf:	d3 e8                	shr    eax,cl
c0020dc1:	89 c7                	mov    edi,eax
c0020dc3:	89 e9                	mov    ecx,ebp
c0020dc5:	d3 e3                	shl    ebx,cl
c0020dc7:	89 f0                	mov    eax,esi
c0020dc9:	88 d1                	mov    cl,dl
c0020dcb:	d3 e8                	shr    eax,cl
c0020dcd:	09 d8                	or     eax,ebx
c0020dcf:	89 e9                	mov    ecx,ebp
c0020dd1:	d3 e6                	shl    esi,cl
c0020dd3:	89 f3                	mov    ebx,esi
c0020dd5:	89 fa                	mov    edx,edi
c0020dd7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020ddb:	89 d1                	mov    ecx,edx
c0020ddd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020de1:	89 c6                	mov    esi,eax
c0020de3:	89 d7                	mov    edi,edx
c0020de5:	39 d1                	cmp    ecx,edx
c0020de7:	72 27                	jb     c0020e10 <__umoddi3+0x10c>
c0020de9:	74 21                	je     c0020e0c <__umoddi3+0x108>
c0020deb:	89 ca                	mov    edx,ecx
c0020ded:	29 f3                	sub    ebx,esi
c0020def:	19 fa                	sbb    edx,edi
c0020df1:	89 d0                	mov    eax,edx
c0020df3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020df7:	d3 e0                	shl    eax,cl
c0020df9:	89 e9                	mov    ecx,ebp
c0020dfb:	d3 eb                	shr    ebx,cl
c0020dfd:	09 d8                	or     eax,ebx
c0020dff:	d3 ea                	shr    edx,cl
c0020e01:	83 c4 1c             	add    esp,0x1c
c0020e04:	5b                   	pop    ebx
c0020e05:	5e                   	pop    esi
c0020e06:	5f                   	pop    edi
c0020e07:	5d                   	pop    ebp
c0020e08:	c3                   	ret    
c0020e09:	8d 76 00             	lea    esi,[esi+0x0]
c0020e0c:	39 c3                	cmp    ebx,eax
c0020e0e:	73 db                	jae    c0020deb <__umoddi3+0xe7>
c0020e10:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020e14:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0020e18:	89 d7                	mov    edi,edx
c0020e1a:	89 c6                	mov    esi,eax
c0020e1c:	eb cd                	jmp    c0020deb <__umoddi3+0xe7>

Disassembly of section .init:

c0020e1e <_init>:
c0020e1e:	55                   	push   ebp
c0020e1f:	89 e5                	mov    ebp,esp
c0020e21:	e8 f2 f2 fd ff       	call   c0000118 <frame_dummy>
c0020e26:	e8 e5 fa ff ff       	call   c0020910 <__do_global_ctors_aux>
c0020e2b:	5d                   	pop    ebp
c0020e2c:	c3                   	ret    

Disassembly of section .fini:

c0020e2d <_fini>:
c0020e2d:	55                   	push   ebp
c0020e2e:	89 e5                	mov    ebp,esp
c0020e30:	e8 73 f2 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0020e35:	5d                   	pop    ebp
c0020e36:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020e38 <Computer::~Computer()>:
c0020e38:	83 ec 0c             	sub    esp,0xc
c0020e3b:	ba 34 24 02 c0       	mov    edx,0xc0022434
c0020e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e44:	89 10                	mov    DWORD PTR [eax],edx
c0020e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e4a:	83 ec 0c             	sub    esp,0xc
c0020e4d:	50                   	push   eax
c0020e4e:	e8 bf ce fe ff       	call   c000dd12 <Device::~Device()>
c0020e53:	83 c4 10             	add    esp,0x10
c0020e56:	90                   	nop
c0020e57:	83 c4 0c             	add    esp,0xc
c0020e5a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0020e5c <Computer::~Computer()>:
c0020e5c:	83 ec 0c             	sub    esp,0xc
c0020e5f:	83 ec 0c             	sub    esp,0xc
c0020e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e66:	e8 cd ff ff ff       	call   c0020e38 <Computer::~Computer()>
c0020e6b:	83 c4 10             	add    esp,0x10
c0020e6e:	83 ec 08             	sub    esp,0x8
c0020e71:	68 ec 01 00 00       	push   0x1ec
c0020e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e7a:	e8 a4 ba fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0020e7f:	83 c4 10             	add    esp,0x10
c0020e82:	83 c4 0c             	add    esp,0xc
c0020e85:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020e86 <idleCommon()>:
c0020e86:	83 ec 0c             	sub    esp,0xc
c0020e89:	fa                   	cli    
c0020e8a:	ff 05 68 75 02 c0    	inc    DWORD PTR ds:0xc0027568
c0020e90:	e8 3b 6f ff ff       	call   c0017dd0 <schedule()>
c0020e95:	a1 68 75 02 c0       	mov    eax,ds:0xc0027568
c0020e9a:	48                   	dec    eax
c0020e9b:	a3 68 75 02 c0       	mov    ds:0xc0027568,eax
c0020ea0:	75 01                	jne    c0020ea3 <idleCommon()+0x1d>
c0020ea2:	fb                   	sti    
c0020ea3:	83 c4 0c             	add    esp,0xc
c0020ea6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0020ea8 <LinkedList<UnixFile>::~LinkedList()>:
c0020ea8:	90                   	nop
c0020ea9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0020eaa <LinkedList<UnixFile>::LinkedList()>:
c0020eaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020eae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020eb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ebf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ec3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020eca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ece:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ed8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020edf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ee3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020eea:	90                   	nop
c0020eeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0020eec <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0020eec:	83 ec 0c             	sub    esp,0xc
c0020eef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020ef4:	75 10                	jne    c0020f06 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020ef6:	83 ec 0c             	sub    esp,0xc
c0020ef9:	68 0c 27 02 c0       	push   0xc002270c
c0020efe:	e8 40 33 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0020f03:	83 c4 10             	add    esp,0x10
c0020f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f0c:	85 c0                	test   eax,eax
c0020f0e:	74 34                	je     c0020f44 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f17:	85 c0                	test   eax,eax
c0020f19:	74 29                	je     c0020f44 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f3b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020f42:	eb 65                	jmp    c0020fa9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f48:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f4a:	85 c0                	test   eax,eax
c0020f4c:	75 4b                	jne    c0020f99 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f55:	85 c0                	test   eax,eax
c0020f57:	75 40                	jne    c0020f99 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f61:	89 10                	mov    DWORD PTR [eax],edx
c0020f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020f83:	85 c0                	test   eax,eax
c0020f85:	74 22                	je     c0020fa9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020f87:	83 ec 0c             	sub    esp,0xc
c0020f8a:	68 2e 27 02 c0       	push   0xc002272e
c0020f8f:	e8 af 32 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0020f94:	83 c4 10             	add    esp,0x10
c0020f97:	eb 10                	jmp    c0020fa9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020f99:	83 ec 0c             	sub    esp,0xc
c0020f9c:	68 38 27 02 c0       	push   0xc0022738
c0020fa1:	e8 9d 32 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0020fa6:	83 c4 10             	add    esp,0x10
c0020fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020fb0:	8d 50 01             	lea    edx,[eax+0x1]
c0020fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fb7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020fba:	90                   	nop
c0020fbb:	83 c4 0c             	add    esp,0xc
c0020fbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020fc0 <LinkedList<UnixFile>::getFirstElement()>:
c0020fc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fc6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0020fc8 <LinkedList<UnixFile>::removeFirst()>:
c0020fc8:	83 ec 0c             	sub    esp,0xc
c0020fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fd1:	85 c0                	test   eax,eax
c0020fd3:	75 12                	jne    c0020fe7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020fd5:	83 ec 0c             	sub    esp,0xc
c0020fd8:	68 44 27 02 c0       	push   0xc0022744
c0020fdd:	e8 61 32 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0020fe2:	83 c4 10             	add    esp,0x10
c0020fe5:	eb 7e                	jmp    c0021065 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020feb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020fee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020ff1:	85 c0                	test   eax,eax
c0020ff3:	74 10                	je     c0021005 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020ff5:	83 ec 0c             	sub    esp,0xc
c0020ff8:	68 8f 27 02 c0       	push   0xc002278f
c0020ffd:	e8 41 32 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021002:	83 c4 10             	add    esp,0x10
c0021005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021009:	8b 00                	mov    eax,DWORD PTR [eax]
c002100b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002100e:	85 c0                	test   eax,eax
c0021010:	75 33                	jne    c0021045 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002101c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021020:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002102b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002102e:	83 f8 01             	cmp    eax,0x1
c0021031:	74 21                	je     c0021054 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021033:	83 ec 0c             	sub    esp,0xc
c0021036:	68 68 27 02 c0       	push   0xc0022768
c002103b:	e8 03 32 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021040:	83 c4 10             	add    esp,0x10
c0021043:	eb 0f                	jmp    c0021054 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021049:	8b 00                	mov    eax,DWORD PTR [eax]
c002104b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002104e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021052:	89 10                	mov    DWORD PTR [eax],edx
c0021054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021058:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002105b:	8d 50 ff             	lea    edx,[eax-0x1]
c002105e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021062:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021065:	83 c4 0c             	add    esp,0xc
c0021068:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002106a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002106a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002106e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021071:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021072 <DriverlessDevice::~DriverlessDevice()>:
c0021072:	ba 1c 30 02 c0       	mov    edx,0xc002301c
c0021077:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002107b:	89 10                	mov    DWORD PTR [eax],edx
c002107d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021081:	50                   	push   eax
c0021082:	e8 8b cc fe ff       	call   c000dd12 <Device::~Device()>
c0021087:	83 c4 04             	add    esp,0x4
c002108a:	90                   	nop
c002108b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002108c <DriverlessDevice::~DriverlessDevice()>:
c002108c:	83 ec 0c             	sub    esp,0xc
c002108f:	83 ec 0c             	sub    esp,0xc
c0021092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021096:	e8 d7 ff ff ff       	call   c0021072 <DriverlessDevice::~DriverlessDevice()>
c002109b:	83 c4 10             	add    esp,0x10
c002109e:	83 ec 08             	sub    esp,0x8
c00210a1:	68 58 01 00 00       	push   0x158
c00210a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210aa:	e8 74 b8 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00210af:	83 c4 10             	add    esp,0x10
c00210b2:	83 c4 0c             	add    esp,0xc
c00210b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00210b6 <LinkedList<Device>::addElement(Device*)>:
c00210b6:	83 ec 0c             	sub    esp,0xc
c00210b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00210be:	75 10                	jne    c00210d0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00210c0:	83 ec 0c             	sub    esp,0xc
c00210c3:	68 0c 27 02 c0       	push   0xc002270c
c00210c8:	e8 76 31 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c00210cd:	83 c4 10             	add    esp,0x10
c00210d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00210d6:	85 c0                	test   eax,eax
c00210d8:	74 3a                	je     c0021114 <LinkedList<Device>::addElement(Device*)+0x5e>
c00210da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00210e1:	85 c0                	test   eax,eax
c00210e3:	74 2f                	je     c0021114 <LinkedList<Device>::addElement(Device*)+0x5e>
c00210e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00210ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210f0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00210f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021105:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021108:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021112:	eb 68                	jmp    c002117c <LinkedList<Device>::addElement(Device*)+0xc6>
c0021114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021118:	8b 00                	mov    eax,DWORD PTR [eax]
c002111a:	85 c0                	test   eax,eax
c002111c:	75 4e                	jne    c002116c <LinkedList<Device>::addElement(Device*)+0xb6>
c002111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021122:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021125:	85 c0                	test   eax,eax
c0021127:	75 43                	jne    c002116c <LinkedList<Device>::addElement(Device*)+0xb6>
c0021129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021131:	89 10                	mov    DWORD PTR [eax],edx
c0021133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021137:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002113b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002113e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021142:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021145:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002114f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021153:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021156:	85 c0                	test   eax,eax
c0021158:	74 22                	je     c002117c <LinkedList<Device>::addElement(Device*)+0xc6>
c002115a:	83 ec 0c             	sub    esp,0xc
c002115d:	68 2e 27 02 c0       	push   0xc002272e
c0021162:	e8 dc 30 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021167:	83 c4 10             	add    esp,0x10
c002116a:	eb 10                	jmp    c002117c <LinkedList<Device>::addElement(Device*)+0xc6>
c002116c:	83 ec 0c             	sub    esp,0xc
c002116f:	68 38 27 02 c0       	push   0xc0022738
c0021174:	e8 ca 30 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021179:	83 c4 10             	add    esp,0x10
c002117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021180:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021183:	8d 50 01             	lea    edx,[eax+0x1]
c0021186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002118a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002118d:	90                   	nop
c002118e:	83 c4 0c             	add    esp,0xc
c0021191:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021192 <LinkedList<Device>::LinkedList()>:
c0021192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021196:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002119c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211d2:	90                   	nop
c00211d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00211d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00211d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211da:	85 c0                	test   eax,eax
c00211dc:	75 0e                	jne    c00211ec <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00211de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211e5:	85 c0                	test   eax,eax
c00211e7:	75 03                	jne    c00211ec <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00211e9:	b0 01                	mov    al,0x1
c00211eb:	c3                   	ret    
c00211ec:	b0 00                	mov    al,0x0
c00211ee:	90                   	nop
c00211ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00211f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00211f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00211f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00211f8:	83 ec 0c             	sub    esp,0xc
c00211fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0021201:	85 c0                	test   eax,eax
c0021203:	75 15                	jne    c002121a <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0021205:	83 ec 0c             	sub    esp,0xc
c0021208:	68 44 27 02 c0       	push   0xc0022744
c002120d:	e8 31 30 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021212:	83 c4 10             	add    esp,0x10
c0021215:	e9 8c 00 00 00       	jmp    c00212a6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xae>
c002121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002121e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021221:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021224:	85 c0                	test   eax,eax
c0021226:	0f 95 c0             	setne  al
c0021229:	84 c0                	test   al,al
c002122b:	74 11                	je     c002123e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x46>
c002122d:	83 ec 0c             	sub    esp,0xc
c0021230:	68 8f 27 02 c0       	push   0xc002278f
c0021235:	e8 09 30 ff ff       	call   c0014243 <Krnl::panic(char const*)>
c002123a:	83 c4 10             	add    esp,0x10
c002123d:	90                   	nop
c002123e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021242:	8b 00                	mov    eax,DWORD PTR [eax]
c0021244:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021247:	85 c0                	test   eax,eax
c0021249:	0f 94 c0             	sete   al
c002124c:	84 c0                	test   al,al
c002124e:	74 34                	je     c0021284 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8c>
c0021250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021254:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002125a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002125e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021269:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002126c:	83 f8 01             	cmp    eax,0x1
c002126f:	74 23                	je     c0021294 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x9c>
c0021271:	83 ec 0c             	sub    esp,0xc
c0021274:	68 68 27 02 c0       	push   0xc0022768
c0021279:	e8 c5 2f ff ff       	call   c0014243 <Krnl::panic(char const*)>
c002127e:	83 c4 10             	add    esp,0x10
c0021281:	eb 11                	jmp    c0021294 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x9c>
c0021283:	90                   	nop
c0021284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021288:	8b 00                	mov    eax,DWORD PTR [eax]
c002128a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002128d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021291:	89 10                	mov    DWORD PTR [eax],edx
c0021293:	90                   	nop
c0021294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021298:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002129b:	8d 50 ff             	lea    edx,[eax-0x1]
c002129e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212a5:	90                   	nop
c00212a6:	83 c4 0c             	add    esp,0xc
c00212a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00212aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00212aa:	83 ec 0c             	sub    esp,0xc
c00212ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00212b2:	75 10                	jne    c00212c4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00212b4:	83 ec 0c             	sub    esp,0xc
c00212b7:	68 0c 27 02 c0       	push   0xc002270c
c00212bc:	e8 82 2f ff ff       	call   c0014243 <Krnl::panic(char const*)>
c00212c1:	83 c4 10             	add    esp,0x10
c00212c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ca:	85 c0                	test   eax,eax
c00212cc:	74 34                	je     c0021302 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00212ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212d5:	85 c0                	test   eax,eax
c00212d7:	74 29                	je     c0021302 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00212d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212e4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00212e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021300:	eb 66                	jmp    c0021368 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbe>
c0021302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021306:	8b 00                	mov    eax,DWORD PTR [eax]
c0021308:	85 c0                	test   eax,eax
c002130a:	75 4c                	jne    c0021358 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xae>
c002130c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021310:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021313:	85 c0                	test   eax,eax
c0021315:	75 41                	jne    c0021358 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xae>
c0021317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002131f:	89 10                	mov    DWORD PTR [eax],edx
c0021321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021325:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021329:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002132c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021330:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021333:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002133a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002133e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021341:	85 c0                	test   eax,eax
c0021343:	74 23                	je     c0021368 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbe>
c0021345:	83 ec 0c             	sub    esp,0xc
c0021348:	68 2e 27 02 c0       	push   0xc002272e
c002134d:	e8 f1 2e ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021352:	83 c4 10             	add    esp,0x10
c0021355:	eb 11                	jmp    c0021368 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbe>
c0021357:	90                   	nop
c0021358:	83 ec 0c             	sub    esp,0xc
c002135b:	68 38 27 02 c0       	push   0xc0022738
c0021360:	e8 de 2e ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021365:	83 c4 10             	add    esp,0x10
c0021368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002136f:	8d 50 01             	lea    edx,[eax+0x1]
c0021372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021376:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021379:	90                   	nop
c002137a:	83 c4 0c             	add    esp,0xc
c002137d:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002137e <ACPI::~ACPI()>:
c002137e:	83 ec 0c             	sub    esp,0xc
c0021381:	ba ec 3a 02 c0       	mov    edx,0xc0023aec
c0021386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002138a:	89 10                	mov    DWORD PTR [eax],edx
c002138c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021390:	83 ec 0c             	sub    esp,0xc
c0021393:	50                   	push   eax
c0021394:	e8 79 c9 fe ff       	call   c000dd12 <Device::~Device()>
c0021399:	83 c4 10             	add    esp,0x10
c002139c:	90                   	nop
c002139d:	83 c4 0c             	add    esp,0xc
c00213a0:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00213a2 <ACPI::~ACPI()>:
c00213a2:	83 ec 0c             	sub    esp,0xc
c00213a5:	83 ec 0c             	sub    esp,0xc
c00213a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213ac:	e8 cd ff ff ff       	call   c002137e <ACPI::~ACPI()>
c00213b1:	83 c4 10             	add    esp,0x10
c00213b4:	83 ec 08             	sub    esp,0x8
c00213b7:	68 64 12 00 00       	push   0x1264
c00213bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213c0:	e8 5e b5 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00213c5:	83 c4 10             	add    esp,0x10
c00213c8:	83 c4 0c             	add    esp,0xc
c00213cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00213cc <LinkedList<Device>::~LinkedList()>:
c00213cc:	90                   	nop
c00213cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00213ce <LinkedList<Device>::isEmpty()>:
c00213ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00213d4:	85 c0                	test   eax,eax
c00213d6:	75 0e                	jne    c00213e6 <LinkedList<Device>::isEmpty()+0x18>
c00213d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213df:	85 c0                	test   eax,eax
c00213e1:	75 03                	jne    c00213e6 <LinkedList<Device>::isEmpty()+0x18>
c00213e3:	b0 01                	mov    al,0x1
c00213e5:	c3                   	ret    
c00213e6:	b0 00                	mov    al,0x0
c00213e8:	90                   	nop
c00213e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00213ea <LinkedList<Device>::getFirstElement()>:
c00213ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00213f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00213f2 <LinkedList<Device>::removeFirst()>:
c00213f2:	83 ec 0c             	sub    esp,0xc
c00213f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00213fb:	85 c0                	test   eax,eax
c00213fd:	75 15                	jne    c0021414 <LinkedList<Device>::removeFirst()+0x22>
c00213ff:	83 ec 0c             	sub    esp,0xc
c0021402:	68 44 27 02 c0       	push   0xc0022744
c0021407:	e8 37 2e ff ff       	call   c0014243 <Krnl::panic(char const*)>
c002140c:	83 c4 10             	add    esp,0x10
c002140f:	e9 8a 00 00 00       	jmp    c002149e <LinkedList<Device>::removeFirst()+0xac>
c0021414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002141b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021421:	85 c0                	test   eax,eax
c0021423:	74 11                	je     c0021436 <LinkedList<Device>::removeFirst()+0x44>
c0021425:	83 ec 0c             	sub    esp,0xc
c0021428:	68 8f 27 02 c0       	push   0xc002278f
c002142d:	e8 11 2e ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021432:	83 c4 10             	add    esp,0x10
c0021435:	90                   	nop
c0021436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002143a:	8b 00                	mov    eax,DWORD PTR [eax]
c002143c:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021442:	85 c0                	test   eax,eax
c0021444:	75 34                	jne    c002147a <LinkedList<Device>::removeFirst()+0x88>
c0021446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002144a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002145b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021462:	83 f8 01             	cmp    eax,0x1
c0021465:	74 25                	je     c002148c <LinkedList<Device>::removeFirst()+0x9a>
c0021467:	83 ec 0c             	sub    esp,0xc
c002146a:	68 68 27 02 c0       	push   0xc0022768
c002146f:	e8 cf 2d ff ff       	call   c0014243 <Krnl::panic(char const*)>
c0021474:	83 c4 10             	add    esp,0x10
c0021477:	eb 13                	jmp    c002148c <LinkedList<Device>::removeFirst()+0x9a>
c0021479:	90                   	nop
c002147a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021480:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002148a:	89 10                	mov    DWORD PTR [eax],edx
c002148c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021490:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021493:	8d 50 ff             	lea    edx,[eax-0x1]
c0021496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002149d:	90                   	nop
c002149e:	83 c4 0c             	add    esp,0xc
c00214a1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00214a2 <CPU::~CPU()>:
c00214a2:	83 ec 0c             	sub    esp,0xc
c00214a5:	ba 88 3e 02 c0       	mov    edx,0xc0023e88
c00214aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ae:	89 10                	mov    DWORD PTR [eax],edx
c00214b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b4:	83 ec 0c             	sub    esp,0xc
c00214b7:	50                   	push   eax
c00214b8:	e8 55 c8 fe ff       	call   c000dd12 <Device::~Device()>
c00214bd:	83 c4 10             	add    esp,0x10
c00214c0:	90                   	nop
c00214c1:	83 c4 0c             	add    esp,0xc
c00214c4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00214c6 <CPU::~CPU()>:
c00214c6:	83 ec 0c             	sub    esp,0xc
c00214c9:	83 ec 0c             	sub    esp,0xc
c00214cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214d0:	e8 cd ff ff ff       	call   c00214a2 <CPU::~CPU()>
c00214d5:	83 c4 10             	add    esp,0x10
c00214d8:	83 ec 08             	sub    esp,0x8
c00214db:	68 98 11 00 00       	push   0x1198
c00214e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214e4:	e8 3a b4 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00214e9:	83 c4 10             	add    esp,0x10
c00214ec:	83 c4 0c             	add    esp,0xc
c00214ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00214f0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00214f0:	90                   	nop
c00214f1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00214f2 <ThreadControlBlock::ThreadControlBlock()>:
c00214f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214f6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00214fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021501:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002150c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021517:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002151e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021522:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002152d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0021531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021535:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021539:	90                   	nop
c002153a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002153c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002153c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021540:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002154a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021555:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002155c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021560:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002156a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021575:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002157c:	90                   	nop
c002157d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002157e <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002157e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021582:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021585:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021586 <Vm::_FPUState::_FPUState()>:
c0021586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002158a:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021591:	90                   	nop
c0021592:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021594 <PCI::~PCI()>:
c0021594:	83 ec 0c             	sub    esp,0xc
c0021597:	ba e8 4b 02 c0       	mov    edx,0xc0024be8
c002159c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a0:	89 10                	mov    DWORD PTR [eax],edx
c00215a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a6:	83 ec 0c             	sub    esp,0xc
c00215a9:	50                   	push   eax
c00215aa:	e8 37 c1 fe ff       	call   c000d6e6 <Bus::~Bus()>
c00215af:	83 c4 10             	add    esp,0x10
c00215b2:	90                   	nop
c00215b3:	83 c4 0c             	add    esp,0xc
c00215b6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00215b8 <PCI::~PCI()>:
c00215b8:	83 ec 0c             	sub    esp,0xc
c00215bb:	83 ec 0c             	sub    esp,0xc
c00215be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215c2:	e8 cd ff ff ff       	call   c0021594 <PCI::~PCI()>
c00215c7:	83 c4 10             	add    esp,0x10
c00215ca:	83 ec 08             	sub    esp,0x8
c00215cd:	68 5c 01 00 00       	push   0x15c
c00215d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215d6:	e8 48 b3 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00215db:	83 c4 10             	add    esp,0x10
c00215de:	83 c4 0c             	add    esp,0xc
c00215e1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00215e2 <IDE::~IDE()>:
c00215e2:	83 ec 0c             	sub    esp,0xc
c00215e5:	ba 9c 4c 02 c0       	mov    edx,0xc0024c9c
c00215ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ee:	89 10                	mov    DWORD PTR [eax],edx
c00215f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f4:	83 ec 0c             	sub    esp,0xc
c00215f7:	50                   	push   eax
c00215f8:	e8 2b cc fe ff       	call   c000e228 <HardDiskController::~HardDiskController()>
c00215fd:	83 c4 10             	add    esp,0x10
c0021600:	90                   	nop
c0021601:	83 c4 0c             	add    esp,0xc
c0021604:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021606 <IDE::~IDE()>:
c0021606:	83 ec 0c             	sub    esp,0xc
c0021609:	83 ec 0c             	sub    esp,0xc
c002160c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021610:	e8 cd ff ff ff       	call   c00215e2 <IDE::~IDE()>
c0021615:	83 c4 10             	add    esp,0x10
c0021618:	83 ec 08             	sub    esp,0x8
c002161b:	68 70 02 00 00       	push   0x270
c0021620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021624:	e8 fa b2 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021629:	83 c4 10             	add    esp,0x10
c002162c:	83 c4 0c             	add    esp,0xc
c002162f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021630 <SATABus::~SATABus()>:
c0021630:	83 ec 0c             	sub    esp,0xc
c0021633:	ba 14 4d 02 c0       	mov    edx,0xc0024d14
c0021638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002163c:	89 10                	mov    DWORD PTR [eax],edx
c002163e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021642:	83 ec 0c             	sub    esp,0xc
c0021645:	50                   	push   eax
c0021646:	e8 dd cb fe ff       	call   c000e228 <HardDiskController::~HardDiskController()>
c002164b:	83 c4 10             	add    esp,0x10
c002164e:	90                   	nop
c002164f:	83 c4 0c             	add    esp,0xc
c0021652:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021654 <SATABus::~SATABus()>:
c0021654:	83 ec 0c             	sub    esp,0xc
c0021657:	83 ec 0c             	sub    esp,0xc
c002165a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002165e:	e8 cd ff ff ff       	call   c0021630 <SATABus::~SATABus()>
c0021663:	83 c4 10             	add    esp,0x10
c0021666:	83 ec 08             	sub    esp,0x8
c0021669:	68 64 01 00 00       	push   0x164
c002166e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021672:	e8 ac b2 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021677:	83 c4 10             	add    esp,0x10
c002167a:	83 c4 0c             	add    esp,0xc
c002167d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002167e <ATA::~ATA()>:
c002167e:	83 ec 0c             	sub    esp,0xc
c0021681:	ba 8c 4d 02 c0       	mov    edx,0xc0024d8c
c0021686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002168a:	89 10                	mov    DWORD PTR [eax],edx
c002168c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021690:	83 ec 0c             	sub    esp,0xc
c0021693:	50                   	push   eax
c0021694:	e8 71 cc fe ff       	call   c000e30a <PhysicalDisk::~PhysicalDisk()>
c0021699:	83 c4 10             	add    esp,0x10
c002169c:	90                   	nop
c002169d:	83 c4 0c             	add    esp,0xc
c00216a0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00216a2 <ATA::~ATA()>:
c00216a2:	83 ec 0c             	sub    esp,0xc
c00216a5:	83 ec 0c             	sub    esp,0xc
c00216a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ac:	e8 cd ff ff ff       	call   c002167e <ATA::~ATA()>
c00216b1:	83 c4 10             	add    esp,0x10
c00216b4:	83 ec 08             	sub    esp,0x8
c00216b7:	68 7c 01 00 00       	push   0x17c
c00216bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216c0:	e8 5e b2 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00216c5:	83 c4 10             	add    esp,0x10
c00216c8:	83 c4 0c             	add    esp,0xc
c00216cb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00216cc <ATAPI::~ATAPI()>:
c00216cc:	83 ec 0c             	sub    esp,0xc
c00216cf:	ba c4 4d 02 c0       	mov    edx,0xc0024dc4
c00216d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216d8:	89 10                	mov    DWORD PTR [eax],edx
c00216da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216de:	83 ec 0c             	sub    esp,0xc
c00216e1:	50                   	push   eax
c00216e2:	e8 23 cc fe ff       	call   c000e30a <PhysicalDisk::~PhysicalDisk()>
c00216e7:	83 c4 10             	add    esp,0x10
c00216ea:	90                   	nop
c00216eb:	83 c4 0c             	add    esp,0xc
c00216ee:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00216f0 <ATAPI::~ATAPI()>:
c00216f0:	83 ec 0c             	sub    esp,0xc
c00216f3:	83 ec 0c             	sub    esp,0xc
c00216f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216fa:	e8 cd ff ff ff       	call   c00216cc <ATAPI::~ATAPI()>
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	83 ec 08             	sub    esp,0x8
c0021705:	68 80 01 00 00       	push   0x180
c002170a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002170e:	e8 10 b2 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021713:	83 c4 10             	add    esp,0x10
c0021716:	83 c4 0c             	add    esp,0xc
c0021719:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002171a <SATA::~SATA()>:
c002171a:	83 ec 0c             	sub    esp,0xc
c002171d:	ba 78 4e 02 c0       	mov    edx,0xc0024e78
c0021722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021726:	89 10                	mov    DWORD PTR [eax],edx
c0021728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002172c:	83 ec 0c             	sub    esp,0xc
c002172f:	50                   	push   eax
c0021730:	e8 d5 cb fe ff       	call   c000e30a <PhysicalDisk::~PhysicalDisk()>
c0021735:	83 c4 10             	add    esp,0x10
c0021738:	90                   	nop
c0021739:	83 c4 0c             	add    esp,0xc
c002173c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002173e <SATA::~SATA()>:
c002173e:	83 ec 0c             	sub    esp,0xc
c0021741:	83 ec 0c             	sub    esp,0xc
c0021744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021748:	e8 cd ff ff ff       	call   c002171a <SATA::~SATA()>
c002174d:	83 c4 10             	add    esp,0x10
c0021750:	83 ec 08             	sub    esp,0x8
c0021753:	68 7c 01 00 00       	push   0x17c
c0021758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002175c:	e8 c2 b1 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021761:	83 c4 10             	add    esp,0x10
c0021764:	83 c4 0c             	add    esp,0xc
c0021767:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021768 <SATAPI::~SATAPI()>:
c0021768:	83 ec 0c             	sub    esp,0xc
c002176b:	ba 54 4f 02 c0       	mov    edx,0xc0024f54
c0021770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021774:	89 10                	mov    DWORD PTR [eax],edx
c0021776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002177a:	83 ec 0c             	sub    esp,0xc
c002177d:	50                   	push   eax
c002177e:	e8 87 cb fe ff       	call   c000e30a <PhysicalDisk::~PhysicalDisk()>
c0021783:	83 c4 10             	add    esp,0x10
c0021786:	90                   	nop
c0021787:	83 c4 0c             	add    esp,0xc
c002178a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002178c <SATAPI::~SATAPI()>:
c002178c:	83 ec 0c             	sub    esp,0xc
c002178f:	83 ec 0c             	sub    esp,0xc
c0021792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021796:	e8 cd ff ff ff       	call   c0021768 <SATAPI::~SATAPI()>
c002179b:	83 c4 10             	add    esp,0x10
c002179e:	83 ec 08             	sub    esp,0x8
c00217a1:	68 80 01 00 00       	push   0x180
c00217a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217aa:	e8 74 b1 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00217af:	83 c4 10             	add    esp,0x10
c00217b2:	83 c4 0c             	add    esp,0xc
c00217b5:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00217b6 <AVX::~AVX()>:
c00217b6:	83 ec 0c             	sub    esp,0xc
c00217b9:	ba 94 4f 02 c0       	mov    edx,0xc0024f94
c00217be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c2:	89 10                	mov    DWORD PTR [eax],edx
c00217c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c8:	83 ec 0c             	sub    esp,0xc
c00217cb:	50                   	push   eax
c00217cc:	e8 bd cb fe ff       	call   c000e38e <FPU::~FPU()>
c00217d1:	83 c4 10             	add    esp,0x10
c00217d4:	90                   	nop
c00217d5:	83 c4 0c             	add    esp,0xc
c00217d8:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00217da <AVX::~AVX()>:
c00217da:	83 ec 0c             	sub    esp,0xc
c00217dd:	83 ec 0c             	sub    esp,0xc
c00217e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217e4:	e8 cd ff ff ff       	call   c00217b6 <AVX::~AVX()>
c00217e9:	83 c4 10             	add    esp,0x10
c00217ec:	83 ec 08             	sub    esp,0x8
c00217ef:	68 58 01 00 00       	push   0x158
c00217f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217f8:	e8 26 b1 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00217fd:	83 c4 10             	add    esp,0x10
c0021800:	83 c4 0c             	add    esp,0xc
c0021803:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021804 <MMX::~MMX()>:
c0021804:	83 ec 0c             	sub    esp,0xc
c0021807:	ba d4 4f 02 c0       	mov    edx,0xc0024fd4
c002180c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021810:	89 10                	mov    DWORD PTR [eax],edx
c0021812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021816:	83 ec 0c             	sub    esp,0xc
c0021819:	50                   	push   eax
c002181a:	e8 6f cb fe ff       	call   c000e38e <FPU::~FPU()>
c002181f:	83 c4 10             	add    esp,0x10
c0021822:	90                   	nop
c0021823:	83 c4 0c             	add    esp,0xc
c0021826:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021828 <MMX::~MMX()>:
c0021828:	83 ec 0c             	sub    esp,0xc
c002182b:	83 ec 0c             	sub    esp,0xc
c002182e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021832:	e8 cd ff ff ff       	call   c0021804 <MMX::~MMX()>
c0021837:	83 c4 10             	add    esp,0x10
c002183a:	83 ec 08             	sub    esp,0x8
c002183d:	68 58 01 00 00       	push   0x158
c0021842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021846:	e8 d8 b0 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c002184b:	83 c4 10             	add    esp,0x10
c002184e:	83 c4 0c             	add    esp,0xc
c0021851:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021852 <SSE::~SSE()>:
c0021852:	83 ec 0c             	sub    esp,0xc
c0021855:	ba 14 50 02 c0       	mov    edx,0xc0025014
c002185a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002185e:	89 10                	mov    DWORD PTR [eax],edx
c0021860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021864:	83 ec 0c             	sub    esp,0xc
c0021867:	50                   	push   eax
c0021868:	e8 21 cb fe ff       	call   c000e38e <FPU::~FPU()>
c002186d:	83 c4 10             	add    esp,0x10
c0021870:	90                   	nop
c0021871:	83 c4 0c             	add    esp,0xc
c0021874:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021876 <SSE::~SSE()>:
c0021876:	83 ec 0c             	sub    esp,0xc
c0021879:	83 ec 0c             	sub    esp,0xc
c002187c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021880:	e8 cd ff ff ff       	call   c0021852 <SSE::~SSE()>
c0021885:	83 c4 10             	add    esp,0x10
c0021888:	83 ec 08             	sub    esp,0x8
c002188b:	68 58 01 00 00       	push   0x158
c0021890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021894:	e8 8a b0 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021899:	83 c4 10             	add    esp,0x10
c002189c:	83 c4 0c             	add    esp,0xc
c002189f:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00218a0 <x87::~x87()>:
c00218a0:	83 ec 0c             	sub    esp,0xc
c00218a3:	ba 54 50 02 c0       	mov    edx,0xc0025054
c00218a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ac:	89 10                	mov    DWORD PTR [eax],edx
c00218ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b2:	83 ec 0c             	sub    esp,0xc
c00218b5:	50                   	push   eax
c00218b6:	e8 d3 ca fe ff       	call   c000e38e <FPU::~FPU()>
c00218bb:	83 c4 10             	add    esp,0x10
c00218be:	90                   	nop
c00218bf:	83 c4 0c             	add    esp,0xc
c00218c2:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00218c4 <x87::~x87()>:
c00218c4:	83 ec 0c             	sub    esp,0xc
c00218c7:	83 ec 0c             	sub    esp,0xc
c00218ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218ce:	e8 cd ff ff ff       	call   c00218a0 <x87::~x87()>
c00218d3:	83 c4 10             	add    esp,0x10
c00218d6:	83 ec 08             	sub    esp,0x8
c00218d9:	68 58 01 00 00       	push   0x158
c00218de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218e2:	e8 3c b0 fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00218e7:	83 c4 10             	add    esp,0x10
c00218ea:	83 c4 0c             	add    esp,0xc
c00218ed:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00218ee <IOAPIC::~IOAPIC()>:
c00218ee:	83 ec 0c             	sub    esp,0xc
c00218f1:	ba ac 51 02 c0       	mov    edx,0xc00251ac
c00218f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fa:	89 10                	mov    DWORD PTR [eax],edx
c00218fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021900:	83 ec 0c             	sub    esp,0xc
c0021903:	50                   	push   eax
c0021904:	e8 09 c4 fe ff       	call   c000dd12 <Device::~Device()>
c0021909:	83 c4 10             	add    esp,0x10
c002190c:	90                   	nop
c002190d:	83 c4 0c             	add    esp,0xc
c0021910:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021912 <IOAPIC::~IOAPIC()>:
c0021912:	83 ec 0c             	sub    esp,0xc
c0021915:	83 ec 0c             	sub    esp,0xc
c0021918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002191c:	e8 cd ff ff ff       	call   c00218ee <IOAPIC::~IOAPIC()>
c0021921:	83 c4 10             	add    esp,0x10
c0021924:	83 ec 08             	sub    esp,0x8
c0021927:	68 68 01 00 00       	push   0x168
c002192c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021930:	e8 ee af fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021935:	83 c4 10             	add    esp,0x10
c0021938:	83 c4 0c             	add    esp,0xc
c002193b:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c002193c <APIC::~APIC()>:
c002193c:	83 ec 0c             	sub    esp,0xc
c002193f:	ba 64 51 02 c0       	mov    edx,0xc0025164
c0021944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021948:	89 10                	mov    DWORD PTR [eax],edx
c002194a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002194e:	83 ec 0c             	sub    esp,0xc
c0021951:	50                   	push   eax
c0021952:	e8 05 cf fe ff       	call   c000e85c <InterruptController::~InterruptController()>
c0021957:	83 c4 10             	add    esp,0x10
c002195a:	90                   	nop
c002195b:	83 c4 0c             	add    esp,0xc
c002195e:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021960 <APIC::~APIC()>:
c0021960:	83 ec 0c             	sub    esp,0xc
c0021963:	83 ec 0c             	sub    esp,0xc
c0021966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002196a:	e8 cd ff ff ff       	call   c002193c <APIC::~APIC()>
c002196f:	83 c4 10             	add    esp,0x10
c0021972:	83 ec 08             	sub    esp,0x8
c0021975:	68 58 21 00 00       	push   0x2158
c002197a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002197e:	e8 a0 af fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021983:	83 c4 10             	add    esp,0x10
c0021986:	83 c4 0c             	add    esp,0xc
c0021989:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002198a <PIC::~PIC()>:
c002198a:	83 ec 0c             	sub    esp,0xc
c002198d:	ba fc 51 02 c0       	mov    edx,0xc00251fc
c0021992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021996:	89 10                	mov    DWORD PTR [eax],edx
c0021998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002199c:	83 ec 0c             	sub    esp,0xc
c002199f:	50                   	push   eax
c00219a0:	e8 b7 ce fe ff       	call   c000e85c <InterruptController::~InterruptController()>
c00219a5:	83 c4 10             	add    esp,0x10
c00219a8:	90                   	nop
c00219a9:	83 c4 0c             	add    esp,0xc
c00219ac:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00219ae <PIC::~PIC()>:
c00219ae:	83 ec 0c             	sub    esp,0xc
c00219b1:	83 ec 0c             	sub    esp,0xc
c00219b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b8:	e8 cd ff ff ff       	call   c002198a <PIC::~PIC()>
c00219bd:	83 c4 10             	add    esp,0x10
c00219c0:	83 ec 08             	sub    esp,0x8
c00219c3:	68 58 21 00 00       	push   0x2158
c00219c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219cc:	e8 52 af fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c00219d1:	83 c4 10             	add    esp,0x10
c00219d4:	83 c4 0c             	add    esp,0xc
c00219d7:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00219d8 <APICTimer::~APICTimer()>:
c00219d8:	83 ec 0c             	sub    esp,0xc
c00219db:	ba 50 52 02 c0       	mov    edx,0xc0025250
c00219e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e4:	89 10                	mov    DWORD PTR [eax],edx
c00219e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ea:	83 ec 0c             	sub    esp,0xc
c00219ed:	50                   	push   eax
c00219ee:	e8 6d ec fe ff       	call   c0010660 <Timer::~Timer()>
c00219f3:	83 c4 10             	add    esp,0x10
c00219f6:	90                   	nop
c00219f7:	83 c4 0c             	add    esp,0xc
c00219fa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00219fc <APICTimer::~APICTimer()>:
c00219fc:	83 ec 0c             	sub    esp,0xc
c00219ff:	83 ec 0c             	sub    esp,0xc
c0021a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a06:	e8 cd ff ff ff       	call   c00219d8 <APICTimer::~APICTimer()>
c0021a0b:	83 c4 10             	add    esp,0x10
c0021a0e:	83 ec 08             	sub    esp,0x8
c0021a11:	68 60 01 00 00       	push   0x160
c0021a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a1a:	e8 04 af fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021a1f:	83 c4 10             	add    esp,0x10
c0021a22:	83 c4 0c             	add    esp,0xc
c0021a25:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021a26 <PIT::~PIT()>:
c0021a26:	83 ec 0c             	sub    esp,0xc
c0021a29:	ba a0 52 02 c0       	mov    edx,0xc00252a0
c0021a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a32:	89 10                	mov    DWORD PTR [eax],edx
c0021a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a38:	83 ec 0c             	sub    esp,0xc
c0021a3b:	50                   	push   eax
c0021a3c:	e8 1f ec fe ff       	call   c0010660 <Timer::~Timer()>
c0021a41:	83 c4 10             	add    esp,0x10
c0021a44:	90                   	nop
c0021a45:	83 c4 0c             	add    esp,0xc
c0021a48:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021a4a <PIT::~PIT()>:
c0021a4a:	83 ec 0c             	sub    esp,0xc
c0021a4d:	83 ec 0c             	sub    esp,0xc
c0021a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a54:	e8 cd ff ff ff       	call   c0021a26 <PIT::~PIT()>
c0021a59:	83 c4 10             	add    esp,0x10
c0021a5c:	83 ec 08             	sub    esp,0x8
c0021a5f:	68 5c 01 00 00       	push   0x15c
c0021a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a68:	e8 b6 ae fe ff       	call   c000c923 <operator delete(void*, unsigned long)>
c0021a6d:	83 c4 10             	add    esp,0x10
c0021a70:	83 c4 0c             	add    esp,0xc
c0021a73:	c3                   	ret    
