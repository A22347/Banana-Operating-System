
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 74 fb 01 c0       	mov    eax,0xc001fb74
c0000025:	3d 74 fb 01 c0       	cmp    eax,0xc001fb74
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 74 fb 01 c0       	push   0xc001fb74
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 74 fb 01 c0       	mov    eax,0xc001fb74
c0000051:	2d 74 fb 01 c0       	sub    eax,0xc001fb74
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 74 fb 01 c0       	push   0xc001fb74
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 18 ce 01 c0       	mov    ebx,0xc001ce18
c0000097:	81 eb 14 ce 01 c0    	sub    ebx,0xc001ce14
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 14 ce 01 c0       	mov    esi,0xc001ce14
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 74 fb 01 c0       	push   0xc001fb74
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 74 fb 01 c0       	push   0xc001fb74
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 ac 2d 01 00       	call   c001305c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 62 a0 00 00       	call   c000a32a <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 8a 2d 01 00       	call   c001305c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 93 32 01 00       	call   c0013584 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 e2 38 01 00       	call   c0013bdc <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 68 fe 00 00       	jmp    c00101ea <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 20 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe31e0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31e0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 20 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe31e0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 20 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe31e0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 20 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31e0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 24 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe30dc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 82 52 01 00       	jmp    c0016f6c <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 b0 52 01 00       	jmp    c0016fb0 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 d5 52 01 00       	jmp    c0016ff4 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 80 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f80]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 80 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f80]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 78 f0 01 c0       	mov    edx,0xc001f078
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 3c cf 01 c0       	mov    edx,0xc001cf3c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 42 cf 01 c0       	mov    eax,0xc001cf42
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 00 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3000]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 4b cf 01 c0       	mov    eax,0xc001cf4b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 80 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f80]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 d0 cf 01 c0       	mov    eax,0xc001cfd0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb c0 cf 01 c0       	mov    ebx,0xc001cfc0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba a0 cf 01 c0       	mov    edx,0xc001cfa0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba b0 cf 01 c0       	mov    edx,0xc001cfb0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 52 cf 01 c0       	mov    edx,0xc001cf52
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 5e cf 01 c0       	mov    edx,0xc001cf5e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 72 cf 01 c0       	mov    edx,0xc001cf72
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c a0 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d3a0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 a0 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d3a0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 a0 d1 01 c0       	mov    eax,0xc001d1a0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 e0 d0 01 c0       	mov    eax,0xc001d0e0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 a0 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f60]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 c9 18 01 00       	call   c0017848 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 a0 d4 01 c0       	push   0xc001d4a0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 a0 d4 01 c0       	push   0xc001d4a0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 a3 d4 01 c0       	push   0xc001d4a3
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 aa d4 01 c0       	push   0xc001d4aa
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 02 51 00 00       	call   c000bada <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 b1 d4 01 c0       	push   0xc001d4b1
c0006a09:	e8 79 91 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 ca d4 01 c0       	push   0xc001d4ca
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 76 c9 00 00       	call   c00133ac <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 89 cb 00 00       	call   c00135d4 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 28 40 01 c0       	push   0xc0014028
c0006a5a:	52                   	push   edx
c0006a5b:	e8 74 cb 00 00       	call   c00135d4 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 c8 d5 01 c0       	push   0xc001d5c8
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 0e 91 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006a79:	e8 89 d9 00 00       	call   c0014407 <Vm::initialise8086()>
c0006a7e:	e8 9b 3e 00 00       	call   c000a91e <Fs::initVFS()>
c0006a83:	c7 04 24 d7 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4d7
c0006a8a:	e8 f8 90 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 c8 d5 01 c0       	push   0xc001d5c8
c0006aae:	e8 d4 90 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006ab3:	e8 aa 95 00 00       	call   c0010062 <Krnl::loadSystemEnv()>
c0006ab8:	e8 07 98 00 00       	call   c00102c4 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 f1 d4 01 c0       	push   0xc001d4f1
c0006ac7:	68 fa d4 01 c0       	push   0xc001d4fa
c0006acc:	e8 71 ae 00 00       	call   c0011942 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 53 49 00 00       	call   c000b42c <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ec d5 01 c0 	mov    DWORD PTR [esp],0xc001d5ec
c0006ae0:	e8 a2 90 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 e1 4f 00 00       	call   c000bad8 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 02 d5 01 c0 	mov    DWORD PTR [esp],0xc001d502
c0006afe:	e8 84 90 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 13 d5 01 c0       	push   0xc001d513
c0006b12:	e8 b2 c2 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 da c4 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 c3 ce 00 00       	call   c00139f0 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 2f d5 01 c0       	push   0xc001d52f
c0006b41:	50                   	push   eax
c0006b42:	e8 0d 50 00 00       	call   c000bb54 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 38 d6 01 c0       	mov    edx,0xc001d638
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 e5 51 01 00       	call   c001be16 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 48 84 00 00       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 21 84 00 00       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 ff 83 00 00       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 dd 83 00 00       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 eb 82 00 00       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 c6 82 00 00       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 4f 50 01 00       	call   c001bdd0 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 4c 4d 01 00       	call   c001baf0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 e2 82 00 00       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 38 d5 01 c0       	push   0xc001d538
c0006e14:	e8 e6 93 00 00       	call   c00101ff <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 3e d5 01 c0       	push   0xc001d53e
c0006e4c:	e8 ae 93 00 00       	call   c00101ff <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 93 7c 00 00       	jmp    c000eb2c <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 44 d5 01 c0       	push   0xc001d544
c0006eed:	0f 94 05 e0 f7 01 c0 	sete   BYTE PTR ds:0xc001f7e0
c0006ef4:	e8 8e 8c 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 b5 77 00 00       	call   c000e6c4 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 9e 4a 00 00       	call   c000b9bc <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 5c d5 01 c0 	mov    DWORD PTR [esp],0xc001d55c
c0006f37:	e8 4b 8c 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 1a 82 00 00       	call   c000f16c <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 5b 4a 00 00       	call   c000b9bc <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 0c d6 01 c0       	push   0xc001d60c
c0006f7e:	e8 04 8c 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006f83:	e8 b6 e5 00 00       	call   c001553e <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 76 d5 01 c0 	mov    DWORD PTR [esp],0xc001d576
c0006f8f:	e8 f3 8b 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 4c c7 00 00       	call   c00136ec <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 91 d5 01 c0       	push   0xc001d591
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 8c 35 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 a2 d5 01 c0       	push   0xc001d5a2
c000700e:	e8 ec 91 00 00       	call   c00101ff <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 af d5 01 c0       	push   0xc001d5af
c0007023:	e8 d7 91 00 00       	call   c00101ff <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 b9 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d5b9
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 c0 91 00 00       	jmp    c00101ff <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 f3 df 00 00       	call   c0015218 <HalSystemIdle()>
c0007225:	e8 a8 51 01 00       	call   c001c3d2 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 80 bb 01 c0       	push   0xc001bb80
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 90 bb 01 c0       	push   0xc001bb90
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 9a bb 01 c0       	push   0xc001bb9a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 a4 bb 01 c0       	push   0xc001bba4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 ae bb 01 c0       	push   0xc001bbae
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 b8 bb 01 c0       	push   0xc001bbb8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 c2 bb 01 c0       	push   0xc001bbc2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 cc bb 01 c0       	push   0xc001bbcc
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 d6 bb 01 c0       	push   0xc001bbd6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 de bb 01 c0       	push   0xc001bbde
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 e8 bb 01 c0       	push   0xc001bbe8
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 f0 bb 01 c0       	push   0xc001bbf0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 f8 bb 01 c0       	push   0xc001bbf8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 00 bc 01 c0       	push   0xc001bc00
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 08 bc 01 c0       	push   0xc001bc08
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 10 bc 01 c0       	push   0xc001bc10
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 1a bc 01 c0       	push   0xc001bc1a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 24 bc 01 c0       	push   0xc001bc24
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 2e bc 01 c0       	push   0xc001bc2e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 c8 bc 01 c0       	push   0xc001bcc8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 cf bc 01 c0       	push   0xc001bccf
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 ba bc 01 c0       	push   0xc001bcba
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 c1 bc 01 c0       	push   0xc001bcc1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 38 bc 01 c0       	push   0xc001bc38
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 42 bc 01 c0       	push   0xc001bc42
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 4c bc 01 c0       	push   0xc001bc4c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 56 bc 01 c0       	push   0xc001bc56
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 60 bc 01 c0       	push   0xc001bc60
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 6a bc 01 c0       	push   0xc001bc6a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 74 bc 01 c0       	push   0xc001bc74
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 7e bc 01 c0       	push   0xc001bc7e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 88 bc 01 c0       	push   0xc001bc88
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 92 bc 01 c0       	push   0xc001bc92
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 9c bc 01 c0       	push   0xc001bc9c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 a6 bc 01 c0       	push   0xc001bca6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 b0 bc 01 c0       	push   0xc001bcb0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 61 bd 01 c0       	push   0xc001bd61
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 6b bd 01 c0       	push   0xc001bd6b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 75 bd 01 c0       	push   0xc001bd75
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 7f bd 01 c0       	push   0xc001bd7f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 89 bd 01 c0       	push   0xc001bd89
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 93 bd 01 c0       	push   0xc001bd93
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 9d bd 01 c0       	push   0xc001bd9d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 a7 bd 01 c0       	push   0xc001bda7
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 57 24 00 00       	call   c0009a70 <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 d6 bb 01 c0       	push   0xc001bbd6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 c8 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7c8
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d c8 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7c8
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 92 22 00 00       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 c8 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f7c8,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 c8 f7 01 c0       	mov    eax,ds:0xc001f7c8
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 5c d6 01 c0       	push   0xc001d65c
c000770e:	e8 6a 2e 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 8c d6 01 c0       	push   0xc001d68c
c000772d:	e8 cd 8a 00 00       	call   c00101ff <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 91 d6 01 c0       	push   0xc001d691
c0007743:	e8 b7 8a 00 00       	call   c00101ff <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 ea 22 00 00       	call   c0009a70 <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 02 1f 00 00       	call   c000969e <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 98 d6 01 c0       	push   0xc001d698
c0007862:	e8 16 2d 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0007867:	e8 ad 82 00 00       	call   c000fb19 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 9f 1e 00 00       	call   c0009732 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 cc 4a 01 00       	call   c001c36a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 39 1f 00 00       	call   c0009808 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 b0 d6 01 c0       	push   0xc001d6b0
c000792c:	e8 ce 88 00 00       	call   c00101ff <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 b0 d6 01 c0       	push   0xc001d6b0
c0007993:	e8 67 88 00 00       	call   c00101ff <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 cc f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7cc
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 cc f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7cc
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 cc f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7cc
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 55 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d755
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 7c 87 00 00       	jmp    c00101ff <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 5a 27 00 00       	call   c000a24a <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 d8 d6 01 c0       	push   0xc001d6d8
c0007aff:	e8 fb 86 00 00       	call   c00101ff <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 6b d7 01 c0       	push   0xc001d76b
c0007c18:	e8 60 29 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 08 d7 01 c0       	push   0xc001d708
c0007ca4:	e8 d4 28 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 2c d7 01 c0       	push   0xc001d72c
c0007d40:	e8 38 28 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 91 d7 01 c0       	push   0xc001d791
c0007d76:	e8 02 28 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 83 d7 01 c0       	push   0xc001d783
c0007de5:	e8 15 84 00 00       	call   c00101ff <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba f0 d7 01 c0       	mov    edx,0xc001d7f0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 8d 25 00 00       	call   c000a487 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 ad d7 01 c0       	push   0xc001d7ad
c0007fa7:	e8 53 82 00 00       	call   c00101ff <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 ff b7 00 00       	call   c00137f4 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 c3 41 01 00       	call   c001c250 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 ca d7 01 c0       	push   0xc001d7ca
c00080a2:	e8 58 81 00 00       	call   c00101ff <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba f0 d7 01 c0       	mov    edx,0xc001d7f0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 84 d8 01 c0       	mov    edx,0xc001d884
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 16 23 00 00       	call   c000a487 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 50 46 00 00       	call   c000c7dc <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 1e e2 00 00       	call   c00163d0 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 00 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0800]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 00 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0800]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 b8 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0948]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 90 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0970]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 41 df 00 00       	call   c001625c <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 9c df 00 00       	jmp    c0016364 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 04 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d804
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 eb 7d 00 00       	jmp    c00101ff <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 64 2e 00 00       	jmp    c000b3d3 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 12 d8 01 c0       	mov    esi,0xc001d812
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 ae da 00 00       	call   c0016364 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 84 d8 01 c0       	mov    edx,0xc001d884
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 bc 0f 00 00       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 23 d8 01 c0       	push   0xc001d823
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 29 d8 01 c0       	push   0xc001d829
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 2f d8 01 c0       	push   0xc001d82f
c0008b78:	e8 82 76 00 00       	call   c00101ff <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 4c d9 01 c0       	mov    edx,0xc001d94c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 40 f8 01 c0       	mov    eax,ds:0xc001f840
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 40 f8 01 c0    	mov    DWORD PTR ds:0xc001f840,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 b3 35 01 00       	call   c001c438 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 68 d9 01 c0       	mov    edx,0xc001d968
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 4c d9 01 c0       	mov    edx,0xc001d94c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 b7 34 01 00       	call   c001c50c <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 ab 34 01 00       	call   c001c514 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 b1 33 01 00       	call   c001c438 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 24 d9 01 c0       	push   0xc001d924
c00090a9:	e8 51 71 00 00       	call   c00101ff <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 ab 13 00 00       	call   c000a487 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 68 d9 01 c0       	mov    edx,0xc001d968
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 5f 13 00 00       	call   c000a487 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 ba 33 01 00       	call   c001c50c <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 47 34 01 00       	call   c001c5b6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 05 32 01 00       	call   c001c3f6 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 c4 f7 01 c0       	push   0xc001f7c4
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 f4 c3 01 c0       	push   0xc001c3f4
c0009206:	e8 2c 12 00 00       	call   c000a437 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 48 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f848
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d 48 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f848
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d 44 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f844
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 44 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f844,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 7c d9 01 c0       	push   0xc001d97c
c00092ff:	e8 fb 6e 00 00       	call   c00101ff <KePanic(char const*)>
c0009304:	8b 3d 44 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f844
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 44 f8 01 c0       	mov    eax,ds:0xc001f844
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 44 f8 01 c0       	mov    ds:0xc001f844,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 4c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f84c
c00093bf:	03 05 54 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f854
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d 4c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f84c
c00093d5:	a1 50 f8 01 c0       	mov    eax,ds:0xc001f850
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d 50 f8 01 c0    	cmp    DWORD PTR ds:0xc001f850,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 0d db 01 c0       	push   0xc001db0d
c0009419:	e8 e1 6d 00 00       	call   c00101ff <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 24 db 01 c0       	push   0xc001db24
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d 50 f8 01 c0    	mov    DWORD PTR ds:0xc001f850,ebx
c00094b7:	c6 05 58 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f858,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 54 f8 01 c0       	mov    ds:0xc001f854,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 4c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f84c,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 50 f8 01 c0       	mov    eax,ds:0xc001f850
c00094e9:	f7 35 4c f8 01 c0    	div    DWORD PTR ds:0xc001f84c
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS(VAS*)>:
c0009500:	83 ec 0c             	sub    esp,0xc
c0009503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	68 9c d9 01 c0       	push   0xc001d99c
c0009521:	e8 d9 6c 00 00       	call   c00101ff <KePanic(char const*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	90                   	nop
c000952a:	83 c4 0c             	add    esp,0xc
c000952d:	c3                   	ret    

c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009532:	89 c2                	mov    edx,eax
c0009534:	c1 e8 0a             	shr    eax,0xa
c0009537:	c1 ea 16             	shr    edx,0x16
c000953a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000953f:	19 c9                	sbb    ecx,ecx
c0009541:	c1 e2 0c             	shl    edx,0xc
c0009544:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954a:	25 fc 0f 00 00       	and    eax,0xffc
c000954f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009556:	01 d0                	add    eax,edx
c0009558:	c3                   	ret    
c0009559:	90                   	nop

c000955a <VAS::getPageTableEntry(unsigned long)>:
c000955a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000955e:	89 ca                	mov    edx,ecx
c0009560:	c1 e9 0a             	shr    ecx,0xa
c0009563:	c1 ea 16             	shr    edx,0x16
c0009566:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000956c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009572:	c1 e0 0c             	shl    eax,0xc
c0009575:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009578:	c3                   	ret    

c0009579 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009579:	57                   	push   edi
c000957a:	56                   	push   esi
c000957b:	be 01 00 00 00       	mov    esi,0x1
c0009580:	53                   	push   ebx
c0009581:	83 ec 10             	sub    esp,0x10
c0009584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009588:	c1 eb 0c             	shr    ebx,0xc
c000958b:	eb 3f                	jmp    c00095cc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000958d:	83 ec 08             	sub    esp,0x8
c0009590:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0009595:	57                   	push   edi
c0009596:	50                   	push   eax
c0009597:	e8 be ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a5:	f6 c4 04             	test   ah,0x4
c00095a8:	75 60                	jne    c000960a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095aa:	80 fa 04             	cmp    dl,0x4
c00095ad:	74 79                	je     c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095af:	80 fa 02             	cmp    dl,0x2
c00095b2:	0f 84 89 00 00 00    	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095b8:	80 fa 03             	cmp    dl,0x3
c00095bb:	0f 84 ae 00 00 00    	je     c000966f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c1:	fe ca                	dec    dl
c00095c3:	0f 84 93 00 00 00    	je     c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095c9:	43                   	inc    ebx
c00095ca:	31 f6                	xor    esi,esi
c00095cc:	53                   	push   ebx
c00095cd:	89 df                	mov    edi,ebx
c00095cf:	e8 8d fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00095d4:	c1 e7 0c             	shl    edi,0xc
c00095d7:	5a                   	pop    edx
c00095d8:	84 c0                	test   al,al
c00095da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095de:	75 ad                	jne    c000958d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 3b db 01 c0       	push   0xc001db3b
c00095e8:	e8 12 6c 00 00       	call   c00101ff <KePanic(char const*)>
c00095ed:	5a                   	pop    edx
c00095ee:	59                   	pop    ecx
c00095ef:	57                   	push   edi
c00095f0:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c00095f6:	57                   	push   edi
c00095f7:	e8 5e ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00095fc:	83 c4 10             	add    esp,0x10
c00095ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009605:	f6 c4 04             	test   ah,0x4
c0009608:	74 bf                	je     c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000960e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	50                   	push   eax
c0009617:	e8 17 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009623:	80 fa 04             	cmp    dl,0x4
c0009626:	75 87                	jne    c00095af <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009628:	89 f0                	mov    eax,esi
c000962a:	84 c0                	test   al,al
c000962c:	75 47                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000962e:	c7 44 24 20 c0 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d9c0
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	5b                   	pop    ebx
c000963a:	5e                   	pop    esi
c000963b:	5f                   	pop    edi
c000963c:	e9 be 6b 00 00       	jmp    c00101ff <KePanic(char const*)>
c0009641:	89 f0                	mov    eax,esi
c0009643:	84 c0                	test   al,al
c0009645:	75 15                	jne    c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	68 57 db 01 c0       	push   0xc001db57
c000964f:	e8 ab 6b 00 00       	call   c00101ff <KePanic(char const*)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	e9 6d ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	6a 00                	push   0x0
c0009661:	53                   	push   ebx
c0009662:	e8 c5 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	e9 5a ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966f:	89 f0                	mov    eax,esi
c0009671:	84 c0                	test   al,al
c0009673:	75 15                	jne    c000968a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009675:	83 ec 08             	sub    esp,0x8
c0009678:	6a 00                	push   0x0
c000967a:	53                   	push   ebx
c000967b:	e8 ac fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	5b                   	pop    ebx
c0009687:	5e                   	pop    esi
c0009688:	5f                   	pop    edi
c0009689:	c3                   	ret    
c000968a:	c7 44 24 20 73 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db73
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 62 6b 00 00       	jmp    c00101ff <KePanic(char const*)>
c000969d:	90                   	nop

c000969e <VAS::freeAllocatedPages(unsigned long)>:
c000969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096aa:	74 09                	je     c00096b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b0:	e9 c4 fe ff ff       	jmp    c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00096b5:	c7 44 24 04 e4 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9e4
c00096bd:	e9 bb 0e 00 00       	jmp    c000a57d <Dbg::kprintf(char const*, ...)>

c00096c2 <VAS::virtualToPhysical(unsigned long)>:
c00096c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c6:	50                   	push   eax
c00096c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cb:	52                   	push   edx
c00096cc:	e8 89 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00096d1:	59                   	pop    ecx
c00096d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d4:	5a                   	pop    edx
c00096d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096da:	c3                   	ret    
c00096db:	90                   	nop

c00096dc <VAS::reflagRange(unsigned long, int, int, int)>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	56                   	push   esi
c00096df:	53                   	push   ebx
c00096e0:	83 ec 0c             	sub    esp,0xc
c00096e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00096e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00096eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00096ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00096f3:	85 ff                	test   edi,edi
c00096f5:	7e 33                	jle    c000972a <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c00096f7:	c1 e7 0c             	shl    edi,0xc
c00096fa:	01 ef                	add    edi,ebp
c00096fc:	55                   	push   ebp
c00096fd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0009703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009707:	50                   	push   eax
c0009708:	e8 4d fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000970d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970f:	21 d9                	and    ecx,ebx
c0009711:	09 f1                	or     ecx,esi
c0009713:	89 08                	mov    DWORD PTR [eax],ecx
c0009715:	89 34 24             	mov    DWORD PTR [esp],esi
c0009718:	53                   	push   ebx
c0009719:	68 8d db 01 c0       	push   0xc001db8d
c000971e:	e8 5a 0e 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	39 ef                	cmp    edi,ebp
c0009728:	75 d2                	jne    c00096fc <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <VAS::VAS()>:
c0009732:	83 ec 0c             	sub    esp,0xc
c0009735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000974b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000974f:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c0009754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009758:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000975c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009760:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009767:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000976e:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c0009773:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009778:	29 c2                	sub    edx,eax
c000977a:	89 d0                	mov    eax,edx
c000977c:	05 ff 0f 00 00       	add    eax,0xfff
c0009781:	c1 e8 0c             	shr    eax,0xc
c0009784:	89 c2                	mov    edx,eax
c0009786:	b8 00 00 02 c0       	mov    eax,0xc0020000
c000978b:	83 ec 0c             	sub    esp,0xc
c000978e:	6a 04                	push   0x4
c0009790:	6a ff                	push   0xffffffff
c0009792:	52                   	push   edx
c0009793:	50                   	push   eax
c0009794:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009798:	e8 3f ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c000979d:	83 c4 20             	add    esp,0x20
c00097a0:	90                   	nop
c00097a1:	83 c4 0c             	add    esp,0xc
c00097a4:	c3                   	ret    
c00097a5:	90                   	nop

c00097a6 <VAS::setToWriteCombining(unsigned long, int)>:
c00097a6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00097ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00097b1:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00097b8:	75 01                	jne    c00097bb <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00097ba:	c3                   	ret    
c00097bb:	83 ec 18             	sub    esp,0x18
c00097be:	68 80 00 00 00       	push   0x80
c00097c3:	6a ff                	push   0xffffffff
c00097c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00097c9:	50                   	push   eax
c00097ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00097ce:	52                   	push   edx
c00097cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00097d3:	51                   	push   ecx
c00097d4:	e8 03 ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c00097d9:	83 c4 2c             	add    esp,0x2c
c00097dc:	c3                   	ret    
c00097dd:	90                   	nop

c00097de <VAS::mapOtherVASIn(bool, VAS*)>:
c00097de:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ee:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097f1:	19 c0                	sbb    eax,eax
c00097f3:	83 ca 03             	or     edx,0x3
c00097f6:	83 e0 fc             	and    eax,0xfffffffc
c00097f9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009800:	0f 20 d8             	mov    eax,cr3
c0009803:	0f 22 d8             	mov    cr3,eax
c0009806:	c3                   	ret    
c0009807:	90                   	nop

c0009808 <VAS::~VAS()>:
c0009808:	83 ec 2c             	sub    esp,0x2c
c000980b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009813:	fa                   	cli    
c0009814:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009819:	40                   	inc    eax
c000981a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000981f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009824:	8b 00                	mov    eax,DWORD PTR [eax]
c0009826:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009829:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000982f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009833:	6a 01                	push   0x1
c0009835:	50                   	push   eax
c0009836:	e8 a3 ff ff ff       	call   c00097de <VAS::mapOtherVASIn(bool, VAS*)>
c000983b:	83 c4 0c             	add    esp,0xc
c000983e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009846:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000984e:	0f 8f d4 00 00 00    	jg     c0009928 <VAS::~VAS()+0x120>
c0009854:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009858:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000985b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000985f:	c1 e2 02             	shl    edx,0x2
c0009862:	01 d0                	add    eax,edx
c0009864:	8b 00                	mov    eax,DWORD PTR [eax]
c0009866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000986a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000986e:	83 e0 01             	and    eax,0x1
c0009871:	0f 84 a8 00 00 00    	je     c000991f <VAS::~VAS()+0x117>
c0009877:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000987f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009887:	7f 72                	jg     c00098fb <VAS::~VAS()+0xf3>
c0009889:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000988d:	c1 e0 0a             	shl    eax,0xa
c0009890:	89 c2                	mov    edx,eax
c0009892:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009896:	01 d0                	add    eax,edx
c0009898:	c1 e0 0c             	shl    eax,0xc
c000989b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000989f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00098a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098a9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00098b3:	6a 01                	push   0x1
c00098b5:	50                   	push   eax
c00098b6:	e8 73 fc ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00098bb:	83 c4 0c             	add    esp,0xc
c00098be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00098c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00098cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098d0:	25 01 04 00 00       	and    eax,0x401
c00098d5:	3d 01 04 00 00       	cmp    eax,0x401
c00098da:	75 19                	jne    c00098f5 <VAS::~VAS()+0xed>
c00098dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098e5:	83 ec 0c             	sub    esp,0xc
c00098e8:	50                   	push   eax
c00098e9:	e8 45 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098f5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098f9:	eb 84                	jmp    c000987f <VAS::~VAS()+0x77>
c00098fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ff:	25 00 04 00 00       	and    eax,0x400
c0009904:	74 19                	je     c000991f <VAS::~VAS()+0x117>
c0009906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000990a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000990f:	83 ec 0c             	sub    esp,0xc
c0009912:	50                   	push   eax
c0009913:	e8 1b e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009918:	83 c4 10             	add    esp,0x10
c000991b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000991f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009923:	e9 1e ff ff ff       	jmp    c0009846 <VAS::~VAS()+0x3e>
c0009928:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000992c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000992f:	83 ec 0c             	sub    esp,0xc
c0009932:	50                   	push   eax
c0009933:	e8 41 fc ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009938:	83 c4 10             	add    esp,0x10
c000993b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000993f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009942:	83 ec 0c             	sub    esp,0xc
c0009945:	50                   	push   eax
c0009946:	e8 e8 e0 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000994b:	83 c4 10             	add    esp,0x10
c000994e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009952:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009957:	48                   	dec    eax
c0009958:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000995d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009962:	85 c0                	test   eax,eax
c0009964:	75 01                	jne    c0009967 <VAS::~VAS()+0x15f>
c0009966:	fb                   	sti    
c0009967:	90                   	nop
c0009968:	83 c4 2c             	add    esp,0x2c
c000996b:	c3                   	ret    

c000996c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000996c:	55                   	push   ebp
c000996d:	57                   	push   edi
c000996e:	56                   	push   esi
c000996f:	53                   	push   ebx
c0009970:	83 ec 1c             	sub    esp,0x1c
c0009973:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009977:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000997b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009981:	77 0b                	ja     c000998e <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009983:	0f 20 d8             	mov    eax,cr3
c0009986:	0f 20 d8             	mov    eax,cr3
c0009989:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000998c:	75 47                	jne    c00099d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000998e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009992:	09 d8                	or     eax,ebx
c0009994:	a9 ff 0f 00 00       	test   eax,0xfff
c0009999:	75 57                	jne    c00099f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000999b:	89 de                	mov    esi,ebx
c000999d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099a0:	c1 ee 16             	shr    esi,0x16
c00099a3:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00099aa:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00099ae:	74 54                	je     c0009a04 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c00099b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00099b4:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00099ba:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00099be:	c1 e6 0c             	shl    esi,0xc
c00099c1:	c1 eb 0a             	shr    ebx,0xa
c00099c4:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00099ca:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00099cd:	83 c4 1c             	add    esp,0x1c
c00099d0:	5b                   	pop    ebx
c00099d1:	5e                   	pop    esi
c00099d2:	5f                   	pop    edi
c00099d3:	5d                   	pop    ebp
c00099d4:	c3                   	ret    
c00099d5:	83 ec 0c             	sub    esp,0xc
c00099d8:	68 08 da 01 c0       	push   0xc001da08
c00099dd:	e8 9b 0b 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099e9:	09 d8                	or     eax,ebx
c00099eb:	a9 ff 0f 00 00       	test   eax,0xfff
c00099f0:	74 a9                	je     c000999b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099f2:	83 ec 0c             	sub    esp,0xc
c00099f5:	68 70 da 01 c0       	push   0xc001da70
c00099fa:	e8 00 68 00 00       	call   c00101ff <KePanic(char const*)>
c00099ff:	83 c4 10             	add    esp,0x10
c0009a02:	eb 97                	jmp    c000999b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a08:	e8 88 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a0d:	83 ec 0c             	sub    esp,0xc
c0009a10:	89 c5                	mov    ebp,eax
c0009a12:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009a18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009a1c:	6a 01                	push   0x1
c0009a1e:	e8 62 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009a23:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009a2a:	6a 01                	push   0x1
c0009a2c:	50                   	push   eax
c0009a2d:	55                   	push   ebp
c0009a2e:	81 cd 07 04 00 00    	or     ebp,0x407
c0009a34:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a38:	51                   	push   ecx
c0009a39:	e8 28 02 00 00       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a3e:	83 c4 1c             	add    esp,0x1c
c0009a41:	68 00 10 00 00       	push   0x1000
c0009a46:	6a 00                	push   0x0
c0009a48:	50                   	push   eax
c0009a49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a4d:	e8 7e 6a ff ff       	call   c00004d0 <memset>
c0009a52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a56:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a59:	e8 1b fb ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a62:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a65:	83 c4 10             	add    esp,0x10
c0009a68:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a6b:	e9 40 ff ff ff       	jmp    c00099b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a70 <VAS::allocatePages(int, int)>:
c0009a70:	55                   	push   ebp
c0009a71:	57                   	push   edi
c0009a72:	56                   	push   esi
c0009a73:	53                   	push   ebx
c0009a74:	83 ec 1c             	sub    esp,0x1c
c0009a77:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a7b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a86:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a8c:	83 e0 01             	and    eax,0x1
c0009a8f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a97:	0f 85 cc 00 00 00    	jne    c0009b69 <VAS::allocatePages(int, int)+0xf9>
c0009a9d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009aa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009aa4:	85 c0                	test   eax,eax
c0009aa6:	0f 84 a1 00 00 00    	je     c0009b4d <VAS::allocatePages(int, int)+0xdd>
c0009aac:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009ab0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ab4:	c1 e6 0c             	shl    esi,0xc
c0009ab7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009abb:	85 c0                	test   eax,eax
c0009abd:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009ac0:	7e 33                	jle    c0009af5 <VAS::allocatePages(int, int)+0x85>
c0009ac2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009ac6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aca:	81 cd 00 04 00 00    	or     ebp,0x400
c0009ad0:	e8 c0 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ad5:	55                   	push   ebp
c0009ad6:	53                   	push   ebx
c0009ad7:	50                   	push   eax
c0009ad8:	57                   	push   edi
c0009ad9:	e8 8e fe ff ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ade:	83 c4 10             	add    esp,0x10
c0009ae1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ae6:	74 03                	je     c0009aeb <VAS::allocatePages(int, int)+0x7b>
c0009ae8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aeb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009af1:	39 de                	cmp    esi,ebx
c0009af3:	75 db                	jne    c0009ad0 <VAS::allocatePages(int, int)+0x60>
c0009af5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009afa:	75 12                	jne    c0009b0e <VAS::allocatePages(int, int)+0x9e>
c0009afc:	0f 20 d8             	mov    eax,cr3
c0009aff:	0f 22 d8             	mov    cr3,eax
c0009b02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b06:	83 c4 1c             	add    esp,0x1c
c0009b09:	5b                   	pop    ebx
c0009b0a:	5e                   	pop    esi
c0009b0b:	5f                   	pop    edi
c0009b0c:	5d                   	pop    ebp
c0009b0d:	c3                   	ret    
c0009b0e:	c1 ee 0a             	shr    esi,0xa
c0009b11:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b15:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009b1b:	c1 eb 0a             	shr    ebx,0xa
c0009b1e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009b24:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b2a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b30:	39 c3                	cmp    ebx,eax
c0009b32:	77 ce                	ja     c0009b02 <VAS::allocatePages(int, int)+0x92>
c0009b34:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b37:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b3d:	39 d8                	cmp    eax,ebx
c0009b3f:	73 f3                	jae    c0009b34 <VAS::allocatePages(int, int)+0xc4>
c0009b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b45:	83 c4 1c             	add    esp,0x1c
c0009b48:	5b                   	pop    ebx
c0009b49:	5e                   	pop    esi
c0009b4a:	5f                   	pop    edi
c0009b4b:	5d                   	pop    ebp
c0009b4c:	c3                   	ret    
c0009b4d:	83 ec 0c             	sub    esp,0xc
c0009b50:	68 94 da 01 c0       	push   0xc001da94
c0009b55:	e8 a5 66 00 00       	call   c00101ff <KePanic(char const*)>
c0009b5a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b61:	83 c4 10             	add    esp,0x10
c0009b64:	e9 43 ff ff ff       	jmp    c0009aac <VAS::allocatePages(int, int)+0x3c>
c0009b69:	83 ec 0c             	sub    esp,0xc
c0009b6c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b70:	51                   	push   ecx
c0009b71:	e8 0f f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b7a:	83 c4 10             	add    esp,0x10
c0009b7d:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b82:	0f 87 9b 00 00 00    	ja     c0009c23 <VAS::allocatePages(int, int)+0x1b3>
c0009b88:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b8c:	85 d2                	test   edx,edx
c0009b8e:	7e 3c                	jle    c0009bcc <VAS::allocatePages(int, int)+0x15c>
c0009b90:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b94:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b98:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b9c:	c1 e5 0c             	shl    ebp,0xc
c0009b9f:	81 ce 00 04 00 00    	or     esi,0x400
c0009ba5:	01 dd                	add    ebp,ebx
c0009ba7:	e8 e9 de ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009bac:	56                   	push   esi
c0009bad:	53                   	push   ebx
c0009bae:	50                   	push   eax
c0009baf:	57                   	push   edi
c0009bb0:	e8 b7 fd ff ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bb5:	83 c4 10             	add    esp,0x10
c0009bb8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bbd:	74 03                	je     c0009bc2 <VAS::allocatePages(int, int)+0x152>
c0009bbf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bc2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc8:	39 dd                	cmp    ebp,ebx
c0009bca:	75 db                	jne    c0009ba7 <VAS::allocatePages(int, int)+0x137>
c0009bcc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bd1:	0f 84 25 ff ff ff    	je     c0009afc <VAS::allocatePages(int, int)+0x8c>
c0009bd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bdb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009bdf:	89 d3                	mov    ebx,edx
c0009be1:	c1 e0 0c             	shl    eax,0xc
c0009be4:	c1 eb 0a             	shr    ebx,0xa
c0009be7:	01 d0                	add    eax,edx
c0009be9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bef:	c1 e8 0a             	shr    eax,0xa
c0009bf2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bf8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bfd:	2d 00 00 40 00       	sub    eax,0x400000
c0009c02:	39 c3                	cmp    ebx,eax
c0009c04:	0f 87 f8 fe ff ff    	ja     c0009b02 <VAS::allocatePages(int, int)+0x92>
c0009c0a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c0d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c13:	39 d8                	cmp    eax,ebx
c0009c15:	73 f3                	jae    c0009c0a <VAS::allocatePages(int, int)+0x19a>
c0009c17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    
c0009c23:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009c28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c2e:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009c35:	0f 84 4d ff ff ff    	je     c0009b88 <VAS::allocatePages(int, int)+0x118>
c0009c3b:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c43:	e9 40 ff ff ff       	jmp    c0009b88 <VAS::allocatePages(int, int)+0x118>

c0009c48 <VAS::setCPUSpecific(unsigned long)>:
c0009c48:	83 ec 0c             	sub    esp,0xc
c0009c4b:	6a 05                	push   0x5
c0009c4d:	68 00 00 40 c2       	push   0xc2400000
c0009c52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c56:	50                   	push   eax
c0009c57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c5b:	52                   	push   edx
c0009c5c:	e8 0b fd ff ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c61:	83 c4 1c             	add    esp,0x1c
c0009c64:	c3                   	ret    
c0009c65:	90                   	nop

c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c66:	55                   	push   ebp
c0009c67:	57                   	push   edi
c0009c68:	56                   	push   esi
c0009c69:	53                   	push   ebx
c0009c6a:	83 ec 1c             	sub    esp,0x1c
c0009c6d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009c72:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c7c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c80:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c86:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c8a:	83 e0 01             	and    eax,0x1
c0009c8d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c95:	85 c0                	test   eax,eax
c0009c97:	7e 39                	jle    c0009cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c9d:	89 f3                	mov    ebx,esi
c0009c9f:	c1 e0 0c             	shl    eax,0xc
c0009ca2:	01 f0                	add    eax,esi
c0009ca4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ca8:	55                   	push   ebp
c0009ca9:	53                   	push   ebx
c0009caa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cae:	29 f0                	sub    eax,esi
c0009cb0:	01 d8                	add    eax,ebx
c0009cb2:	50                   	push   eax
c0009cb3:	57                   	push   edi
c0009cb4:	e8 b3 fc ff ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009cb9:	83 c4 10             	add    esp,0x10
c0009cbc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cc1:	74 03                	je     c0009cc6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009cc3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cc6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ccc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009cd0:	75 d6                	jne    c0009ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009cd2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cd7:	75 10                	jne    c0009ce9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009cd9:	0f 20 d8             	mov    eax,cr3
c0009cdc:	0f 22 d8             	mov    cr3,eax
c0009cdf:	83 c4 1c             	add    esp,0x1c
c0009ce2:	89 f0                	mov    eax,esi
c0009ce4:	5b                   	pop    ebx
c0009ce5:	5e                   	pop    esi
c0009ce6:	5f                   	pop    edi
c0009ce7:	5d                   	pop    ebp
c0009ce8:	c3                   	ret    
c0009ce9:	89 f3                	mov    ebx,esi
c0009ceb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cef:	c1 eb 0a             	shr    ebx,0xa
c0009cf2:	c1 e0 0c             	shl    eax,0xc
c0009cf5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cfb:	01 f0                	add    eax,esi
c0009cfd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009d03:	c1 e8 0a             	shr    eax,0xa
c0009d06:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d0b:	2d 00 00 40 00       	sub    eax,0x400000
c0009d10:	39 c3                	cmp    ebx,eax
c0009d12:	77 cb                	ja     c0009cdf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009d14:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d17:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d1d:	39 d8                	cmp    eax,ebx
c0009d1f:	73 f3                	jae    c0009d14 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009d21:	83 c4 1c             	add    esp,0x1c
c0009d24:	89 f0                	mov    eax,esi
c0009d26:	5b                   	pop    ebx
c0009d27:	5e                   	pop    esi
c0009d28:	5f                   	pop    edi
c0009d29:	5d                   	pop    ebp
c0009d2a:	c3                   	ret    
c0009d2b:	90                   	nop

c0009d2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d2c:	55                   	push   ebp
c0009d2d:	57                   	push   edi
c0009d2e:	56                   	push   esi
c0009d2f:	53                   	push   ebx
c0009d30:	83 ec 1c             	sub    esp,0x1c
c0009d33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d37:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d3b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d3f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d43:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d48:	75 4a                	jne    c0009d94 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d4a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 eb 16             	shr    ebx,0x16
c0009d54:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d5b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d5f:	74 4d                	je     c0009dae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d65:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d69:	c1 e8 0a             	shr    eax,0xa
c0009d6c:	80 fa 01             	cmp    dl,0x1
c0009d6f:	19 d2                	sbb    edx,edx
c0009d71:	c1 e3 0c             	shl    ebx,0xc
c0009d74:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d78:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d7e:	25 fc 0f 00 00       	and    eax,0xffc
c0009d83:	01 d8                	add    eax,ebx
c0009d85:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d8c:	83 c4 1c             	add    esp,0x1c
c0009d8f:	5b                   	pop    ebx
c0009d90:	5e                   	pop    esi
c0009d91:	5f                   	pop    edi
c0009d92:	5d                   	pop    ebp
c0009d93:	c3                   	ret    
c0009d94:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d98:	83 ec 0c             	sub    esp,0xc
c0009d9b:	68 c0 da 01 c0       	push   0xc001dac0
c0009da0:	e8 5a 64 00 00       	call   c00101ff <KePanic(char const*)>
c0009da5:	83 c4 10             	add    esp,0x10
c0009da8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dac:	eb 9c                	jmp    c0009d4a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009dae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009db2:	e8 de dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009db7:	83 ec 0c             	sub    esp,0xc
c0009dba:	89 c5                	mov    ebp,eax
c0009dbc:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009dc2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dc6:	6a 01                	push   0x1
c0009dc8:	e8 b8 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009dcd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd4:	6a 01                	push   0x1
c0009dd6:	50                   	push   eax
c0009dd7:	55                   	push   ebp
c0009dd8:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dde:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009de2:	51                   	push   ecx
c0009de3:	e8 7e fe ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009de8:	83 c4 1c             	add    esp,0x1c
c0009deb:	68 00 10 00 00       	push   0x1000
c0009df0:	6a 00                	push   0x0
c0009df2:	50                   	push   eax
c0009df3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009df7:	e8 d4 66 ff ff       	call   c00004d0 <memset>
c0009dfc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e00:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e03:	e8 71 f7 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e08:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0b:	83 c4 10             	add    esp,0x10
c0009e0e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009e11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e15:	e9 47 ff ff ff       	jmp    c0009d61 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e1a <VAS::VAS(bool)>:
c0009e1a:	53                   	push   ebx
c0009e1b:	83 ec 28             	sub    esp,0x28
c0009e1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e22:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e35:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e40:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e44:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e47:	e8 49 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e4c:	89 c2                	mov    edx,eax
c0009e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e52:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e55:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e5b:	83 ec 0c             	sub    esp,0xc
c0009e5e:	6a 01                	push   0x1
c0009e60:	e8 20 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e65:	83 c4 10             	add    esp,0x10
c0009e68:	89 c2                	mov    edx,eax
c0009e6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e71:	83 ec 0c             	sub    esp,0xc
c0009e74:	6a 03                	push   0x3
c0009e76:	6a 01                	push   0x1
c0009e78:	52                   	push   edx
c0009e79:	50                   	push   eax
c0009e7a:	53                   	push   ebx
c0009e7b:	e8 e6 fd ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e80:	83 c4 20             	add    esp,0x20
c0009e83:	89 c2                	mov    edx,eax
c0009e85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e89:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e8c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e94:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e9c:	7f 1c                	jg     c0009eba <VAS::VAS(bool)+0xa0>
c0009e9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ea9:	c1 e2 02             	shl    edx,0x2
c0009eac:	01 d0                	add    eax,edx
c0009eae:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eb4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009eb8:	eb da                	jmp    c0009e94 <VAS::VAS(bool)+0x7a>
c0009eba:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009ec2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009eca:	7f 7a                	jg     c0009f46 <VAS::VAS(bool)+0x12c>
c0009ecc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed0:	2d 00 02 00 00       	sub    eax,0x200
c0009ed5:	c1 e0 0c             	shl    eax,0xc
c0009ed8:	83 c8 03             	or     eax,0x3
c0009edb:	89 c2                	mov    edx,eax
c0009edd:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ee2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ee8:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009eee:	83 e0 10             	and    eax,0x10
c0009ef1:	84 c0                	test   al,al
c0009ef3:	74 07                	je     c0009efc <VAS::VAS(bool)+0xe2>
c0009ef5:	b8 00 01 00 00       	mov    eax,0x100
c0009efa:	eb 05                	jmp    c0009f01 <VAS::VAS(bool)+0xe7>
c0009efc:	b8 00 00 00 00       	mov    eax,0x0
c0009f01:	09 d0                	or     eax,edx
c0009f03:	89 c1                	mov    ecx,eax
c0009f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f10:	c1 e2 02             	shl    edx,0x2
c0009f13:	01 d0                	add    eax,edx
c0009f15:	89 ca                	mov    edx,ecx
c0009f17:	89 10                	mov    DWORD PTR [eax],edx
c0009f19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f1d:	2d 40 03 00 00       	sub    eax,0x340
c0009f22:	83 f8 7f             	cmp    eax,0x7f
c0009f25:	77 16                	ja     c0009f3d <VAS::VAS(bool)+0x123>
c0009f27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f2e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f32:	c1 e2 02             	shl    edx,0x2
c0009f35:	01 d0                	add    eax,edx
c0009f37:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f3d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f41:	e9 7c ff ff ff       	jmp    c0009ec2 <VAS::VAS(bool)+0xa8>
c0009f46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f51:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f57:	83 e0 10             	and    eax,0x10
c0009f5a:	84 c0                	test   al,al
c0009f5c:	74 07                	je     c0009f65 <VAS::VAS(bool)+0x14b>
c0009f5e:	b8 03 41 00 00       	mov    eax,0x4103
c0009f63:	eb 05                	jmp    c0009f6a <VAS::VAS(bool)+0x150>
c0009f65:	b8 03 40 00 00       	mov    eax,0x4003
c0009f6a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f6e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f71:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f77:	89 02                	mov    DWORD PTR [edx],eax
c0009f79:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f84:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f8a:	83 ec 08             	sub    esp,0x8
c0009f8d:	50                   	push   eax
c0009f8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f92:	e8 b1 fc ff ff       	call   c0009c48 <VAS::setCPUSpecific(unsigned long)>
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f9e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009fa1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fa6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fac:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fb2:	83 e0 10             	and    eax,0x10
c0009fb5:	84 c0                	test   al,al
c0009fb7:	74 07                	je     c0009fc0 <VAS::VAS(bool)+0x1a6>
c0009fb9:	b8 00 01 00 00       	mov    eax,0x100
c0009fbe:	eb 05                	jmp    c0009fc5 <VAS::VAS(bool)+0x1ab>
c0009fc0:	b8 00 00 00 00       	mov    eax,0x0
c0009fc5:	09 c2                	or     edx,eax
c0009fc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fce:	05 fc 0f 00 00       	add    eax,0xffc
c0009fd3:	83 ca 03             	or     edx,0x3
c0009fd6:	89 10                	mov    DWORD PTR [eax],edx
c0009fd8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fdd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe3:	83 ec 0c             	sub    esp,0xc
c0009fe6:	50                   	push   eax
c0009fe7:	e8 64 1c 00 00       	call   c000bc50 <Device::getName()>
c0009fec:	83 c4 10             	add    esp,0x10
c0009fef:	83 ec 08             	sub    esp,0x8
c0009ff2:	68 a7 db 01 c0       	push   0xc001dba7
c0009ff7:	50                   	push   eax
c0009ff8:	e8 e3 66 ff ff       	call   c00006e0 <strcmp>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	85 c0                	test   eax,eax
c000a002:	0f 94 c0             	sete   al
c000a005:	84 c0                	test   al,al
c000a007:	0f 84 87 00 00 00    	je     c000a094 <VAS::VAS(bool)+0x27a>
c000a00d:	fa                   	cli    
c000a00e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a013:	40                   	inc    eax
c000a014:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a019:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a01e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a024:	05 7c 09 00 00       	add    eax,0x97c
c000a029:	83 ec 0c             	sub    esp,0xc
c000a02c:	50                   	push   eax
c000a02d:	e8 84 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a032:	83 c4 10             	add    esp,0x10
c000a035:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a03a:	89 c3                	mov    ebx,eax
c000a03c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a041:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a047:	05 7c 09 00 00       	add    eax,0x97c
c000a04c:	83 ec 0c             	sub    esp,0xc
c000a04f:	50                   	push   eax
c000a050:	e8 61 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	83 ec 08             	sub    esp,0x8
c000a05b:	50                   	push   eax
c000a05c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a060:	e8 f5 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a065:	83 c4 10             	add    esp,0x10
c000a068:	8b 00                	mov    eax,DWORD PTR [eax]
c000a06a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a06f:	6a 11                	push   0x11
c000a071:	53                   	push   ebx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a077:	e8 f0 f8 ff ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c000a07c:	83 c4 10             	add    esp,0x10
c000a07f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a084:	48                   	dec    eax
c000a085:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a08a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a08f:	85 c0                	test   eax,eax
c000a091:	75 01                	jne    c000a094 <VAS::VAS(bool)+0x27a>
c000a093:	fb                   	sti    
c000a094:	90                   	nop
c000a095:	83 c4 28             	add    esp,0x28
c000a098:	5b                   	pop    ebx
c000a099:	c3                   	ret    

c000a09a <VAS::evict(unsigned long)>:
c000a09a:	55                   	push   ebp
c000a09b:	57                   	push   edi
c000a09c:	56                   	push   esi
c000a09d:	53                   	push   ebx
c000a09e:	83 ec 1c             	sub    esp,0x1c
c000a0a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a0a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0ad:	e8 14 f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a0b2:	8b 0d 4c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f84c
c000a0b8:	89 c7                	mov    edi,eax
c000a0ba:	85 c9                	test   ecx,ecx
c000a0bc:	7e 3e                	jle    c000a0fc <VAS::evict(unsigned long)+0x62>
c000a0be:	89 ee                	mov    esi,ebp
c000a0c0:	31 db                	xor    ebx,ebx
c000a0c2:	83 ec 0c             	sub    esp,0xc
c000a0c5:	57                   	push   edi
c000a0c6:	e8 e9 f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a0cb:	89 34 24             	mov    DWORD PTR [esp],esi
c000a0ce:	01 d8                	add    eax,ebx
c000a0d0:	6a 01                	push   0x1
c000a0d2:	31 d2                	xor    edx,edx
c000a0d4:	43                   	inc    ebx
c000a0d5:	52                   	push   edx
c000a0d6:	81 c6 00 02 00 00    	add    esi,0x200
c000a0dc:	50                   	push   eax
c000a0dd:	0f be 05 58 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f858
c000a0e4:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a0eb:	52                   	push   edx
c000a0ec:	e8 1f 2c 00 00       	call   c000cd10 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0f1:	83 c4 20             	add    esp,0x20
c000a0f4:	39 1d 4c f8 01 c0    	cmp    DWORD PTR ds:0xc001f84c,ebx
c000a0fa:	7f c6                	jg     c000a0c2 <VAS::evict(unsigned long)+0x28>
c000a0fc:	83 ec 08             	sub    esp,0x8
c000a0ff:	c1 e7 0b             	shl    edi,0xb
c000a102:	55                   	push   ebp
c000a103:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a107:	50                   	push   eax
c000a108:	e8 4d f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a10d:	8b 10                	mov    edx,DWORD PTR [eax]
c000a10f:	89 d1                	mov    ecx,edx
c000a111:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a117:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a11d:	09 cf                	or     edi,ecx
c000a11f:	89 38                	mov    DWORD PTR [eax],edi
c000a121:	89 14 24             	mov    DWORD PTR [esp],edx
c000a124:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a12a:	e8 04 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a12f:	0f 20 d8             	mov    eax,cr3
c000a132:	0f 22 d8             	mov    cr3,eax
c000a135:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a13a:	c7 44 24 40 b5 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dbb5
c000a142:	8d 50 01             	lea    edx,[eax+0x1]
c000a145:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a149:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a14f:	83 c4 2c             	add    esp,0x2c
c000a152:	5b                   	pop    ebx
c000a153:	5e                   	pop    esi
c000a154:	5f                   	pop    edi
c000a155:	5d                   	pop    ebp
c000a156:	e9 22 04 00 00       	jmp    c000a57d <Dbg::kprintf(char const*, ...)>
c000a15b:	90                   	nop

c000a15c <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a15c:	55                   	push   ebp
c000a15d:	57                   	push   edi
c000a15e:	56                   	push   esi
c000a15f:	53                   	push   ebx
c000a160:	83 ec 14             	sub    esp,0x14
c000a163:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a167:	53                   	push   ebx
c000a168:	68 c6 db 01 c0       	push   0xc001dbc6
c000a16d:	e8 0b 04 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000a172:	83 c4 10             	add    esp,0x10
c000a175:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a17b:	74 21                	je     c000a19e <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a17d:	83 ec 08             	sub    esp,0x8
c000a180:	53                   	push   ebx
c000a181:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a185:	57                   	push   edi
c000a186:	e8 cf f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 c6                	mov    esi,eax
c000a190:	85 c0                	test   eax,eax
c000a192:	74 0a                	je     c000a19e <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a194:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a196:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a19c:	74 0a                	je     c000a1a8 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a19e:	31 c0                	xor    eax,eax
c000a1a0:	83 c4 0c             	add    esp,0xc
c000a1a3:	5b                   	pop    ebx
c000a1a4:	5e                   	pop    esi
c000a1a5:	5f                   	pop    edi
c000a1a6:	5d                   	pop    ebp
c000a1a7:	c3                   	ret    
c000a1a8:	e8 e8 d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a1ad:	c1 ed 0b             	shr    ebp,0xb
c000a1b0:	8b 16                	mov    edx,DWORD PTR [esi]
c000a1b2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a1b8:	09 c2                	or     edx,eax
c000a1ba:	81 ca 01 08 00 00    	or     edx,0x801
c000a1c0:	89 16                	mov    DWORD PTR [esi],edx
c000a1c2:	8b 35 4c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f84c
c000a1c8:	85 f6                	test   esi,esi
c000a1ca:	7e 3e                	jle    c000a20a <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a1cc:	89 df                	mov    edi,ebx
c000a1ce:	31 f6                	xor    esi,esi
c000a1d0:	83 ec 0c             	sub    esp,0xc
c000a1d3:	55                   	push   ebp
c000a1d4:	e8 db f1 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a1d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1dc:	01 f0                	add    eax,esi
c000a1de:	6a 01                	push   0x1
c000a1e0:	31 d2                	xor    edx,edx
c000a1e2:	46                   	inc    esi
c000a1e3:	52                   	push   edx
c000a1e4:	81 c7 00 02 00 00    	add    edi,0x200
c000a1ea:	50                   	push   eax
c000a1eb:	0f be 05 58 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f858
c000a1f2:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1f9:	51                   	push   ecx
c000a1fa:	e8 a5 2a 00 00       	call   c000cca4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1ff:	83 c4 20             	add    esp,0x20
c000a202:	39 35 4c f8 01 c0    	cmp    DWORD PTR ds:0xc001f84c,esi
c000a208:	7f c6                	jg     c000a1d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a20a:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a20f:	48                   	dec    eax
c000a210:	52                   	push   edx
c000a211:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a216:	50                   	push   eax
c000a217:	53                   	push   ebx
c000a218:	68 d9 db 01 c0       	push   0xc001dbd9
c000a21d:	e8 5b 03 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000a222:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a225:	e8 6c f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a22a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	48                   	dec    eax
c000a233:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a238:	85 c0                	test   eax,eax
c000a23a:	75 01                	jne    c000a23d <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a23c:	fb                   	sti    
c000a23d:	0f 20 d8             	mov    eax,cr3
c000a240:	0f 22 d8             	mov    cr3,eax
c000a243:	b0 01                	mov    al,0x1
c000a245:	e9 56 ff ff ff       	jmp    c000a1a0 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a24a <VAS::scanForEviction()>:
c000a24a:	57                   	push   edi
c000a24b:	31 ff                	xor    edi,edi
c000a24d:	56                   	push   esi
c000a24e:	53                   	push   ebx
c000a24f:	83 ec 10             	sub    esp,0x10
c000a252:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a256:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a259:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a25f:	75 0e                	jne    c000a26f <VAS::scanForEviction()+0x25>
c000a261:	89 da                	mov    edx,ebx
c000a263:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a266:	c1 ea 16             	shr    edx,0x16
c000a269:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a26d:	74 4e                	je     c000a2bd <VAS::scanForEviction()+0x73>
c000a26f:	53                   	push   ebx
c000a270:	56                   	push   esi
c000a271:	e8 e4 f2 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a276:	5a                   	pop    edx
c000a277:	8b 10                	mov    edx,DWORD PTR [eax]
c000a279:	59                   	pop    ecx
c000a27a:	89 d1                	mov    ecx,edx
c000a27c:	81 e1 01 08 00 00    	and    ecx,0x801
c000a282:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a288:	74 3e                	je     c000a2c8 <VAS::scanForEviction()+0x7e>
c000a28a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a290:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a296:	76 2b                	jbe    c000a2c3 <VAS::scanForEviction()+0x79>
c000a298:	47                   	inc    edi
c000a299:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a2a0:	83 ff 03             	cmp    edi,0x3
c000a2a3:	74 32                	je     c000a2d7 <VAS::scanForEviction()+0x8d>
c000a2a5:	31 db                	xor    ebx,ebx
c000a2a7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2ad:	75 c0                	jne    c000a26f <VAS::scanForEviction()+0x25>
c000a2af:	89 da                	mov    edx,ebx
c000a2b1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2b4:	c1 ea 16             	shr    edx,0x16
c000a2b7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a2bb:	75 b2                	jne    c000a26f <VAS::scanForEviction()+0x25>
c000a2bd:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a2c3:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a2c6:	eb 91                	jmp    c000a259 <VAS::scanForEviction()+0xf>
c000a2c8:	f6 c2 20             	test   dl,0x20
c000a2cb:	74 13                	je     c000a2e0 <VAS::scanForEviction()+0x96>
c000a2cd:	83 e2 df             	and    edx,0xffffffdf
c000a2d0:	89 10                	mov    DWORD PTR [eax],edx
c000a2d2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2d5:	eb b3                	jmp    c000a28a <VAS::scanForEviction()+0x40>
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	31 c0                	xor    eax,eax
c000a2dc:	5b                   	pop    ebx
c000a2dd:	5e                   	pop    esi
c000a2de:	5f                   	pop    edi
c000a2df:	c3                   	ret    
c000a2e0:	83 ec 08             	sub    esp,0x8
c000a2e3:	89 d0                	mov    eax,edx
c000a2e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2ee:	53                   	push   ebx
c000a2ef:	68 ee db 01 c0       	push   0xc001dbee
c000a2f4:	e8 84 02 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000a2f9:	58                   	pop    eax
c000a2fa:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2fd:	5a                   	pop    edx
c000a2fe:	51                   	push   ecx
c000a2ff:	56                   	push   esi
c000a300:	e8 95 fd ff ff       	call   c000a09a <VAS::evict(unsigned long)>
c000a305:	5b                   	pop    ebx
c000a306:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a309:	5f                   	pop    edi
c000a30a:	50                   	push   eax
c000a30b:	68 02 dc 01 c0       	push   0xc001dc02
c000a310:	e8 68 02 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000a315:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a31c:	83 c4 10             	add    esp,0x10
c000a31f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a323:	83 c4 10             	add    esp,0x10
c000a326:	5b                   	pop    ebx
c000a327:	5e                   	pop    esi
c000a328:	5f                   	pop    edi
c000a329:	c3                   	ret    

c000a32a <mapVASFirstTime>:
c000a32a:	55                   	push   ebp
c000a32b:	57                   	push   edi
c000a32c:	56                   	push   esi
c000a32d:	53                   	push   ebx
c000a32e:	83 ec 0c             	sub    esp,0xc
c000a331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a336:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a339:	4a                   	dec    edx
c000a33a:	0f 84 df 00 00 00    	je     c000a41f <mapVASFirstTime+0xf5>
c000a340:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a343:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a346:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a34b:	c1 e5 15             	shl    ebp,0x15
c000a34e:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a353:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a359:	29 eb                	sub    ebx,ebp
c000a35b:	29 ef                	sub    edi,ebp
c000a35d:	e8 33 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a362:	83 ec 0c             	sub    esp,0xc
c000a365:	68 03 04 00 00       	push   0x403
c000a36a:	6a 01                	push   0x1
c000a36c:	53                   	push   ebx
c000a36d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a373:	50                   	push   eax
c000a374:	56                   	push   esi
c000a375:	e8 ec f8 ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a37a:	83 c4 20             	add    esp,0x20
c000a37d:	39 fb                	cmp    ebx,edi
c000a37f:	75 dc                	jne    c000a35d <mapVASFirstTime+0x33>
c000a381:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a386:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a38b:	29 eb                	sub    ebx,ebp
c000a38d:	29 ef                	sub    edi,ebp
c000a38f:	e8 01 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a394:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a398:	19 d2                	sbb    edx,edx
c000a39a:	83 ec 0c             	sub    esp,0xc
c000a39d:	83 e2 04             	and    edx,0x4
c000a3a0:	81 c2 03 04 00 00    	add    edx,0x403
c000a3a6:	52                   	push   edx
c000a3a7:	6a 01                	push   0x1
c000a3a9:	53                   	push   ebx
c000a3aa:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a3b0:	50                   	push   eax
c000a3b1:	56                   	push   esi
c000a3b2:	e8 af f8 ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3b7:	83 c4 20             	add    esp,0x20
c000a3ba:	39 df                	cmp    edi,ebx
c000a3bc:	75 d1                	jne    c000a38f <mapVASFirstTime+0x65>
c000a3be:	bb 7c 10 02 c0       	mov    ebx,0xc002107c
c000a3c3:	81 eb 00 00 02 c0    	sub    ebx,0xc0020000
c000a3c9:	c1 eb 0c             	shr    ebx,0xc
c000a3cc:	53                   	push   ebx
c000a3cd:	68 7d 00 02 c0       	push   0xc002007d
c000a3d2:	68 00 00 02 c0       	push   0xc0020000
c000a3d7:	68 e4 da 01 c0       	push   0xc001dae4
c000a3dc:	e8 9c 01 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000a3e1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000a3e8:	6a ff                	push   0xffffffff
c000a3ea:	53                   	push   ebx
c000a3eb:	68 00 00 02 c0       	push   0xc0020000
c000a3f0:	56                   	push   esi
c000a3f1:	e8 e6 f2 ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c000a3f6:	83 c4 14             	add    esp,0x14
c000a3f9:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c000a3fe:	6a 04                	push   0x4
c000a400:	6a ff                	push   0xffffffff
c000a402:	53                   	push   ebx
c000a403:	68 00 00 02 c0       	push   0xc0020000
c000a408:	50                   	push   eax
c000a409:	e8 ce f2 ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c000a40e:	0f 20 d8             	mov    eax,cr3
c000a411:	0f 22 d8             	mov    cr3,eax
c000a414:	83 c4 20             	add    esp,0x20
c000a417:	83 c4 0c             	add    esp,0xc
c000a41a:	5b                   	pop    ebx
c000a41b:	5e                   	pop    esi
c000a41c:	5f                   	pop    edi
c000a41d:	5d                   	pop    ebp
c000a41e:	c3                   	ret    
c000a41f:	83 ec 0c             	sub    esp,0xc
c000a422:	68 15 dc 01 c0       	push   0xc001dc15
c000a427:	e8 51 01 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000a42c:	83 c4 10             	add    esp,0x10
c000a42f:	83 c4 0c             	add    esp,0xc
c000a432:	5b                   	pop    ebx
c000a433:	5e                   	pop    esi
c000a434:	5f                   	pop    edi
c000a435:	5d                   	pop    ebp
c000a436:	c3                   	ret    

c000a437 <__cxa_atexit>:
c000a437:	31 c0                	xor    eax,eax
c000a439:	c3                   	ret    

c000a43a <__cxa_finalize>:
c000a43a:	c3                   	ret    

c000a43b <__stack_chk_fail>:
c000a43b:	55                   	push   ebp
c000a43c:	89 e5                	mov    ebp,esp
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a444:	68 2e dc 01 c0       	push   0xc001dc2e
c000a449:	e8 2f 01 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000a44e:	58                   	pop    eax
c000a44f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a452:	5a                   	pop    edx
c000a453:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a456:	68 2e dc 01 c0       	push   0xc001dc2e
c000a45b:	e8 1d 01 00 00       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000a460:	c7 04 24 36 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc36
c000a467:	e8 93 5d 00 00       	call   c00101ff <KePanic(char const*)>
c000a46c:	83 c4 10             	add    esp,0x10
c000a46f:	c9                   	leave  
c000a470:	c3                   	ret    

c000a471 <__cxa_pure_virtual>:
c000a471:	83 ec 18             	sub    esp,0x18
c000a474:	68 4e dc 01 c0       	push   0xc001dc4e
c000a479:	e8 81 5d 00 00       	call   c00101ff <KePanic(char const*)>
c000a47e:	83 c4 1c             	add    esp,0x1c
c000a481:	c3                   	ret    

c000a482 <operator new[](unsigned long)>:
c000a482:	e9 32 d3 ff ff       	jmp    c00077b9 <malloc>

c000a487 <operator delete(void*, unsigned long)>:
c000a487:	e9 4d d3 ff ff       	jmp    c00077d9 <rfree>

c000a48c <operator delete[](void*)>:
c000a48c:	e9 48 d3 ff ff       	jmp    c00077d9 <rfree>

c000a491 <operator delete[](void*, unsigned long)>:
c000a491:	e9 43 d3 ff ff       	jmp    c00077d9 <rfree>

c000a496 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a496:	55                   	push   ebp
c000a497:	b9 04 00 00 00       	mov    ecx,0x4
c000a49c:	57                   	push   edi
c000a49d:	56                   	push   esi
c000a49e:	be 13 d8 01 c0       	mov    esi,0xc001d813
c000a4a3:	53                   	push   ebx
c000a4a4:	83 ec 20             	sub    esp,0x20
c000a4a7:	a1 12 d8 01 c0       	mov    eax,ds:0xc001d812
c000a4ac:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a4b0:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a4b4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a4b8:	a1 1f d8 01 c0       	mov    eax,ds:0xc001d81f
c000a4bd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a4c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a4c5:	fc                   	cld    
c000a4c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a4c8:	89 ee                	mov    esi,ebp
c000a4ca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a4ce:	eb 02                	jmp    c000a4d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a4d0:	89 c6                	mov    esi,eax
c000a4d2:	31 d2                	xor    edx,edx
c000a4d4:	41                   	inc    ecx
c000a4d5:	89 f0                	mov    eax,esi
c000a4d7:	f7 f3                	div    ebx
c000a4d9:	39 de                	cmp    esi,ebx
c000a4db:	73 f3                	jae    c000a4d0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a4dd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a4e0:	eb 02                	jmp    c000a4e4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a4e2:	89 c5                	mov    ebp,eax
c000a4e4:	31 d2                	xor    edx,edx
c000a4e6:	49                   	dec    ecx
c000a4e7:	89 e8                	mov    eax,ebp
c000a4e9:	f7 f3                	div    ebx
c000a4eb:	39 dd                	cmp    ebp,ebx
c000a4ed:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a4f1:	88 11                	mov    BYTE PTR [ecx],dl
c000a4f3:	73 ed                	jae    c000a4e2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a4f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4f9:	83 c4 20             	add    esp,0x20
c000a4fc:	5b                   	pop    ebx
c000a4fd:	5e                   	pop    esi
c000a4fe:	5f                   	pop    edi
c000a4ff:	5d                   	pop    ebp
c000a500:	c3                   	ret    

c000a501 <Dbg::logc(char)>:
c000a501:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a505:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a50c:	75 12                	jne    c000a520 <Dbg::logc(char)+0x1f>
c000a50e:	ba fd 03 00 00       	mov    edx,0x3fd
c000a513:	ec                   	in     al,dx
c000a514:	a8 20                	test   al,0x20
c000a516:	74 fb                	je     c000a513 <Dbg::logc(char)+0x12>
c000a518:	ba f8 03 00 00       	mov    edx,0x3f8
c000a51d:	88 c8                	mov    al,cl
c000a51f:	ee                   	out    dx,al
c000a520:	c3                   	ret    

c000a521 <Dbg::logs(char*)>:
c000a521:	53                   	push   ebx
c000a522:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a526:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a529:	84 c0                	test   al,al
c000a52b:	74 0f                	je     c000a53c <Dbg::logs(char*)+0x1b>
c000a52d:	50                   	push   eax
c000a52e:	43                   	inc    ebx
c000a52f:	e8 cd ff ff ff       	call   c000a501 <Dbg::logc(char)>
c000a534:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a537:	5a                   	pop    edx
c000a538:	84 c0                	test   al,al
c000a53a:	75 f1                	jne    c000a52d <Dbg::logs(char*)+0xc>
c000a53c:	5b                   	pop    ebx
c000a53d:	c3                   	ret    

c000a53e <Dbg::logWriteInt(unsigned int)>:
c000a53e:	83 ec 10             	sub    esp,0x10
c000a541:	6a 0a                	push   0xa
c000a543:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a547:	50                   	push   eax
c000a548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a54c:	50                   	push   eax
c000a54d:	e8 44 ff ff ff       	call   c000a496 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a552:	50                   	push   eax
c000a553:	e8 c9 ff ff ff       	call   c000a521 <Dbg::logs(char*)>
c000a558:	83 c4 20             	add    esp,0x20
c000a55b:	c3                   	ret    

c000a55c <Dbg::logWriteIntBase(unsigned int, int)>:
c000a55c:	83 ec 10             	sub    esp,0x10
c000a55f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a563:	50                   	push   eax
c000a564:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a568:	50                   	push   eax
c000a569:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a56d:	52                   	push   edx
c000a56e:	e8 23 ff ff ff       	call   c000a496 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a573:	50                   	push   eax
c000a574:	e8 a8 ff ff ff       	call   c000a521 <Dbg::logs(char*)>
c000a579:	83 c4 20             	add    esp,0x20
c000a57c:	c3                   	ret    

c000a57d <Dbg::kprintf(char const*, ...)>:
c000a57d:	55                   	push   ebp
c000a57e:	57                   	push   edi
c000a57f:	56                   	push   esi
c000a580:	53                   	push   ebx
c000a581:	83 ec 0c             	sub    esp,0xc
c000a584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a588:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a58f:	74 08                	je     c000a599 <Dbg::kprintf(char const*, ...)+0x1c>
c000a591:	83 c4 0c             	add    esp,0xc
c000a594:	5b                   	pop    ebx
c000a595:	5e                   	pop    esi
c000a596:	5f                   	pop    edi
c000a597:	5d                   	pop    ebp
c000a598:	c3                   	ret    
c000a599:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a59d:	31 ff                	xor    edi,edi
c000a59f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a5a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5a6:	84 c0                	test   al,al
c000a5a8:	74 e7                	je     c000a591 <Dbg::kprintf(char const*, ...)+0x14>
c000a5aa:	8d 77 01             	lea    esi,[edi+0x1]
c000a5ad:	3c 25                	cmp    al,0x25
c000a5af:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5b2:	75 47                	jne    c000a5fb <Dbg::kprintf(char const*, ...)+0x7e>
c000a5b4:	83 c7 02             	add    edi,0x2
c000a5b7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a5ba:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a5bd:	83 e8 25             	sub    eax,0x25
c000a5c0:	3c 53                	cmp    al,0x53
c000a5c2:	0f 87 d2 00 00 00    	ja     c000a69a <Dbg::kprintf(char const*, ...)+0x11d>
c000a5c8:	25 ff 00 00 00       	and    eax,0xff
c000a5cd:	ff 24 85 64 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe239c]
c000a5d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5d8:	89 c8                	mov    eax,ecx
c000a5da:	83 c1 04             	add    ecx,0x4
c000a5dd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5e1:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5e3:	55                   	push   ebp
c000a5e4:	e8 55 ff ff ff       	call   c000a53e <Dbg::logWriteInt(unsigned int)>
c000a5e9:	58                   	pop    eax
c000a5ea:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a5ed:	84 c0                	test   al,al
c000a5ef:	74 a0                	je     c000a591 <Dbg::kprintf(char const*, ...)+0x14>
c000a5f1:	8d 77 01             	lea    esi,[edi+0x1]
c000a5f4:	3c 25                	cmp    al,0x25
c000a5f6:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5f9:	74 b9                	je     c000a5b4 <Dbg::kprintf(char const*, ...)+0x37>
c000a5fb:	50                   	push   eax
c000a5fc:	89 f7                	mov    edi,esi
c000a5fe:	e8 fe fe ff ff       	call   c000a501 <Dbg::logc(char)>
c000a603:	89 ee                	mov    esi,ebp
c000a605:	58                   	pop    eax
c000a606:	eb e2                	jmp    c000a5ea <Dbg::kprintf(char const*, ...)+0x6d>
c000a608:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a60c:	89 c8                	mov    eax,ecx
c000a60e:	83 c1 04             	add    ecx,0x4
c000a611:	8b 00                	mov    eax,DWORD PTR [eax]
c000a613:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a617:	50                   	push   eax
c000a618:	e8 04 ff ff ff       	call   c000a521 <Dbg::logs(char*)>
c000a61d:	58                   	pop    eax
c000a61e:	eb ca                	jmp    c000a5ea <Dbg::kprintf(char const*, ...)+0x6d>
c000a620:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a624:	89 d0                	mov    eax,edx
c000a626:	83 c2 04             	add    edx,0x4
c000a629:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a62d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a62f:	50                   	push   eax
c000a630:	e8 09 ff ff ff       	call   c000a53e <Dbg::logWriteInt(unsigned int)>
c000a635:	58                   	pop    eax
c000a636:	eb b2                	jmp    c000a5ea <Dbg::kprintf(char const*, ...)+0x6d>
c000a638:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a63c:	89 d0                	mov    eax,edx
c000a63e:	83 c2 04             	add    edx,0x4
c000a641:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a644:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a648:	50                   	push   eax
c000a649:	e8 b3 fe ff ff       	call   c000a501 <Dbg::logc(char)>
c000a64e:	58                   	pop    eax
c000a64f:	eb 99                	jmp    c000a5ea <Dbg::kprintf(char const*, ...)+0x6d>
c000a651:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a655:	89 c8                	mov    eax,ecx
c000a657:	83 c1 04             	add    ecx,0x4
c000a65a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a65e:	6a 10                	push   0x10
c000a660:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a662:	51                   	push   ecx
c000a663:	e8 f4 fe ff ff       	call   c000a55c <Dbg::logWriteIntBase(unsigned int, int)>
c000a668:	5d                   	pop    ebp
c000a669:	58                   	pop    eax
c000a66a:	e9 7b ff ff ff       	jmp    c000a5ea <Dbg::kprintf(char const*, ...)+0x6d>
c000a66f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a673:	89 d0                	mov    eax,edx
c000a675:	83 c2 08             	add    edx,0x8
c000a678:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67c:	6a 10                	push   0x10
c000a67e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a680:	50                   	push   eax
c000a681:	e8 d6 fe ff ff       	call   c000a55c <Dbg::logWriteIntBase(unsigned int, int)>
c000a686:	58                   	pop    eax
c000a687:	5a                   	pop    edx
c000a688:	e9 5d ff ff ff       	jmp    c000a5ea <Dbg::kprintf(char const*, ...)+0x6d>
c000a68d:	6a 25                	push   0x25
c000a68f:	e8 6d fe ff ff       	call   c000a501 <Dbg::logc(char)>
c000a694:	5a                   	pop    edx
c000a695:	e9 50 ff ff ff       	jmp    c000a5ea <Dbg::kprintf(char const*, ...)+0x6d>
c000a69a:	6a 25                	push   0x25
c000a69c:	e8 60 fe ff ff       	call   c000a501 <Dbg::logc(char)>
c000a6a1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a6a5:	50                   	push   eax
c000a6a6:	e8 56 fe ff ff       	call   c000a501 <Dbg::logc(char)>
c000a6ab:	5a                   	pop    edx
c000a6ac:	59                   	pop    ecx
c000a6ad:	e9 38 ff ff ff       	jmp    c000a5ea <Dbg::kprintf(char const*, ...)+0x6d>

c000a6b2 <File::read(unsigned long long, void*, int*)>:
c000a6b2:	53                   	push   ebx
c000a6b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6bb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6c2:	3c 19                	cmp    al,0x19
c000a6c4:	77 35                	ja     c000a6fb <File::read(unsigned long long, void*, int*)+0x49>
c000a6c6:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a6cd:	85 c0                	test   eax,eax
c000a6cf:	74 2a                	je     c000a6fb <File::read(unsigned long long, void*, int*)+0x49>
c000a6d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6d7:	85 c0                	test   eax,eax
c000a6d9:	74 20                	je     c000a6fb <File::read(unsigned long long, void*, int*)+0x49>
c000a6db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6df:	74 21                	je     c000a702 <File::read(unsigned long long, void*, int*)+0x50>
c000a6e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6e7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f5:	5b                   	pop    ebx
c000a6f6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a6f9:	ff e0                	jmp    eax
c000a6fb:	b8 0b 00 00 00       	mov    eax,0xb
c000a700:	eb 05                	jmp    c000a707 <File::read(unsigned long long, void*, int*)+0x55>
c000a702:	b8 05 00 00 00       	mov    eax,0x5
c000a707:	5b                   	pop    ebx
c000a708:	c3                   	ret    
c000a709:	90                   	nop

c000a70a <File::write(unsigned long long, void*, int*)>:
c000a70a:	53                   	push   ebx
c000a70b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a70f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a713:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a71a:	3c 19                	cmp    al,0x19
c000a71c:	77 35                	ja     c000a753 <File::write(unsigned long long, void*, int*)+0x49>
c000a71e:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a725:	85 c0                	test   eax,eax
c000a727:	74 2a                	je     c000a753 <File::write(unsigned long long, void*, int*)+0x49>
c000a729:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a72f:	85 c0                	test   eax,eax
c000a731:	74 20                	je     c000a753 <File::write(unsigned long long, void*, int*)+0x49>
c000a733:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a737:	74 21                	je     c000a75a <File::write(unsigned long long, void*, int*)+0x50>
c000a739:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a73b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a73f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a749:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a74d:	5b                   	pop    ebx
c000a74e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a751:	ff e0                	jmp    eax
c000a753:	b8 0b 00 00 00       	mov    eax,0xb
c000a758:	eb 05                	jmp    c000a75f <File::write(unsigned long long, void*, int*)+0x55>
c000a75a:	b8 05 00 00 00       	mov    eax,0x5
c000a75f:	5b                   	pop    ebx
c000a760:	c3                   	ret    
c000a761:	90                   	nop

c000a762 <Directory::read(unsigned long long, void*, int*)>:
c000a762:	53                   	push   ebx
c000a763:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a767:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a76b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a772:	3c 19                	cmp    al,0x19
c000a774:	77 35                	ja     c000a7ab <Directory::read(unsigned long long, void*, int*)+0x49>
c000a776:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a77d:	85 c0                	test   eax,eax
c000a77f:	74 2a                	je     c000a7ab <Directory::read(unsigned long long, void*, int*)+0x49>
c000a781:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a787:	85 c0                	test   eax,eax
c000a789:	74 20                	je     c000a7ab <Directory::read(unsigned long long, void*, int*)+0x49>
c000a78b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a78f:	74 21                	je     c000a7b2 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a791:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a793:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a797:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a79d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7a5:	5b                   	pop    ebx
c000a7a6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a7a9:	ff e0                	jmp    eax
c000a7ab:	b8 0b 00 00 00       	mov    eax,0xb
c000a7b0:	eb 05                	jmp    c000a7b7 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a7b2:	b8 05 00 00 00       	mov    eax,0x5
c000a7b7:	5b                   	pop    ebx
c000a7b8:	c3                   	ret    
c000a7b9:	90                   	nop

c000a7ba <Directory::write(unsigned long long, void*, int*)>:
c000a7ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7be:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a7c5:	b8 0b 00 00 00       	mov    eax,0xb
c000a7ca:	80 fa 19             	cmp    dl,0x19
c000a7cd:	77 18                	ja     c000a7e7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7cf:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a7d6:	85 d2                	test   edx,edx
c000a7d8:	74 0d                	je     c000a7e7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7da:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a7e1:	19 c0                	sbb    eax,eax
c000a7e3:	83 e0 0a             	and    eax,0xa
c000a7e6:	40                   	inc    eax
c000a7e7:	c3                   	ret    

c000a7e8 <File::isAtty()>:
c000a7e8:	31 c0                	xor    eax,eax
c000a7ea:	c3                   	ret    
c000a7eb:	90                   	nop

c000a7ec <Directory::isAtty()>:
c000a7ec:	31 c0                	xor    eax,eax
c000a7ee:	c3                   	ret    
c000a7ef:	90                   	nop

c000a7f0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a7f0:	b8 0a 00 00 00       	mov    eax,0xa
c000a7f5:	c3                   	ret    

c000a7f6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a7f6:	b8 0a 00 00 00       	mov    eax,0xa
c000a7fb:	c3                   	ret    

c000a7fc <Filesystem::allocateSwapfile(char const*, int)>:
c000a7fc:	31 c0                	xor    eax,eax
c000a7fe:	31 d2                	xor    edx,edx
c000a800:	c3                   	ret    
c000a801:	90                   	nop

c000a802 <File::~File()>:
c000a802:	83 ec 0c             	sub    esp,0xc
c000a805:	ba 24 de 01 c0       	mov    edx,0xc001de24
c000a80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a80e:	89 10                	mov    DWORD PTR [eax],edx
c000a810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a814:	83 ec 0c             	sub    esp,0xc
c000a817:	50                   	push   eax
c000a818:	e8 07 e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	90                   	nop
c000a821:	83 c4 0c             	add    esp,0xc
c000a824:	c3                   	ret    
c000a825:	90                   	nop

c000a826 <File::~File()>:
c000a826:	83 ec 0c             	sub    esp,0xc
c000a829:	83 ec 0c             	sub    esp,0xc
c000a82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a830:	e8 cd ff ff ff       	call   c000a802 <File::~File()>
c000a835:	83 c4 10             	add    esp,0x10
c000a838:	83 ec 08             	sub    esp,0x8
c000a83b:	68 14 01 00 00       	push   0x114
c000a840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a844:	e8 3e fc ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	83 c4 0c             	add    esp,0xc
c000a84f:	c3                   	ret    

c000a850 <Directory::~Directory()>:
c000a850:	83 ec 0c             	sub    esp,0xc
c000a853:	ba 40 de 01 c0       	mov    edx,0xc001de40
c000a858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a85c:	89 10                	mov    DWORD PTR [eax],edx
c000a85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a862:	83 ec 0c             	sub    esp,0xc
c000a865:	50                   	push   eax
c000a866:	e8 b9 e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a86b:	83 c4 10             	add    esp,0x10
c000a86e:	90                   	nop
c000a86f:	83 c4 0c             	add    esp,0xc
c000a872:	c3                   	ret    
c000a873:	90                   	nop

c000a874 <Directory::~Directory()>:
c000a874:	83 ec 0c             	sub    esp,0xc
c000a877:	83 ec 0c             	sub    esp,0xc
c000a87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a87e:	e8 cd ff ff ff       	call   c000a850 <Directory::~Directory()>
c000a883:	83 c4 10             	add    esp,0x10
c000a886:	83 ec 08             	sub    esp,0x8
c000a889:	68 14 01 00 00       	push   0x114
c000a88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a892:	e8 f0 fb ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000a897:	83 c4 10             	add    esp,0x10
c000a89a:	83 c4 0c             	add    esp,0xc
c000a89d:	c3                   	ret    

c000a89e <Filesystem::Filesystem()>:
c000a89e:	ba bc dd 01 c0       	mov    edx,0xc001ddbc
c000a8a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8a7:	89 10                	mov    DWORD PTR [eax],edx
c000a8a9:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a8af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8ba:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a8bf:	90                   	nop
c000a8c0:	c3                   	ret    
c000a8c1:	90                   	nop

c000a8c2 <Filesystem::~Filesystem()>:
c000a8c2:	ba bc dd 01 c0       	mov    edx,0xc001ddbc
c000a8c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8cb:	89 10                	mov    DWORD PTR [eax],edx
c000a8cd:	90                   	nop
c000a8ce:	c3                   	ret    
c000a8cf:	90                   	nop

c000a8d0 <Filesystem::~Filesystem()>:
c000a8d0:	83 ec 0c             	sub    esp,0xc
c000a8d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8d7:	e8 e6 ff ff ff       	call   c000a8c2 <Filesystem::~Filesystem()>
c000a8dc:	83 c4 04             	add    esp,0x4
c000a8df:	83 ec 08             	sub    esp,0x8
c000a8e2:	6a 08                	push   0x8
c000a8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8e8:	e8 9a fb ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	83 c4 0c             	add    esp,0xc
c000a8f3:	c3                   	ret    

c000a8f4 <Fs::getcwd(Process*, char*, int)>:
c000a8f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8f8:	31 c0                	xor    eax,eax
c000a8fa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a8fd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a901:	7d 15                	jge    c000a918 <Fs::getcwd(Process*, char*, int)+0x24>
c000a903:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a907:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a90e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a911:	84 c9                	test   cl,cl
c000a913:	74 06                	je     c000a91b <Fs::getcwd(Process*, char*, int)+0x27>
c000a915:	40                   	inc    eax
c000a916:	eb e2                	jmp    c000a8fa <Fs::getcwd(Process*, char*, int)+0x6>
c000a918:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a91b:	31 c0                	xor    eax,eax
c000a91d:	c3                   	ret    

c000a91e <Fs::initVFS()>:
c000a91e:	83 ec 18             	sub    esp,0x18
c000a921:	6a 08                	push   0x8
c000a923:	e8 91 ce ff ff       	call   c00077b9 <malloc>
c000a928:	89 04 24             	mov    DWORD PTR [esp],eax
c000a92b:	e8 e0 c7 00 00       	call   c0017110 <FAT::FAT()>
c000a930:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a937:	e8 7d ce ff ff       	call   c00077b9 <malloc>
c000a93c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a93f:	e8 28 d5 00 00       	call   c0017e6c <ISO9660::ISO9660()>
c000a944:	83 c4 1c             	add    esp,0x1c
c000a947:	c3                   	ret    

c000a948 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a948:	55                   	push   ebp
c000a949:	57                   	push   edi
c000a94a:	56                   	push   esi
c000a94b:	53                   	push   ebx
c000a94c:	81 ec 10 04 00 00    	sub    esp,0x410
c000a952:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a959:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a960:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a967:	68 00 04 00 00       	push   0x400
c000a96c:	6a 00                	push   0x0
c000a96e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a972:	56                   	push   esi
c000a973:	e8 58 5b ff ff       	call   c00004d0 <memset>
c000a978:	83 c4 10             	add    esp,0x10
c000a97b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a97f:	75 0b                	jne    c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a981:	50                   	push   eax
c000a982:	50                   	push   eax
c000a983:	57                   	push   edi
c000a984:	56                   	push   esi
c000a985:	e8 76 5c ff ff       	call   c0000600 <strcpy>
c000a98a:	eb 41                	jmp    c000a9cd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a98c:	8a 07                	mov    al,BYTE PTR [edi]
c000a98e:	3c 5c                	cmp    al,0x5c
c000a990:	74 04                	je     c000a996 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a992:	3c 2f                	cmp    al,0x2f
c000a994:	75 18                	jne    c000a9ae <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a996:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a999:	3c 60                	cmp    al,0x60
c000a99b:	7e 03                	jle    c000a9a0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a99d:	83 e8 20             	sub    eax,0x20
c000a9a0:	88 04 24             	mov    BYTE PTR [esp],al
c000a9a3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9aa:	50                   	push   eax
c000a9ab:	50                   	push   eax
c000a9ac:	eb 18                	jmp    c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a9ae:	50                   	push   eax
c000a9af:	50                   	push   eax
c000a9b0:	55                   	push   ebp
c000a9b1:	56                   	push   esi
c000a9b2:	e8 49 5c ff ff       	call   c0000600 <strcpy>
c000a9b7:	5a                   	pop    edx
c000a9b8:	59                   	pop    ecx
c000a9b9:	68 da eb 01 c0       	push   0xc001ebda
c000a9be:	56                   	push   esi
c000a9bf:	e8 fc 5d ff ff       	call   c00007c0 <strcat>
c000a9c4:	5d                   	pop    ebp
c000a9c5:	58                   	pop    eax
c000a9c6:	57                   	push   edi
c000a9c7:	56                   	push   esi
c000a9c8:	e8 f3 5d ff ff       	call   c00007c0 <strcat>
c000a9cd:	83 c4 10             	add    esp,0x10
c000a9d0:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a9d3:	3c 60                	cmp    al,0x60
c000a9d5:	7e 03                	jle    c000a9da <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a9d7:	83 e8 20             	sub    eax,0x20
c000a9da:	88 04 24             	mov    BYTE PTR [esp],al
c000a9dd:	88 03                	mov    BYTE PTR [ebx],al
c000a9df:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9e6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a9ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a9f0:	bf 03 00 00 00       	mov    edi,0x3
c000a9f5:	b8 03 00 00 00       	mov    eax,0x3
c000a9fa:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a9fd:	84 d2                	test   dl,dl
c000a9ff:	0f 84 91 00 00 00    	je     c000aa96 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa05:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa08:	80 fa 5c             	cmp    dl,0x5c
c000aa0b:	74 05                	je     c000aa12 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa0d:	80 fa 2f             	cmp    dl,0x2f
c000aa10:	75 12                	jne    c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa12:	89 c5                	mov    ebp,eax
c000aa14:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa19:	74 09                	je     c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa1b:	40                   	inc    eax
c000aa1c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aa20:	89 cf                	mov    edi,ecx
c000aa22:	eb d6                	jmp    c000a9fa <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aa24:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aa29:	75 5b                	jne    c000aa86 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa2b:	80 fa 2e             	cmp    dl,0x2e
c000aa2e:	75 56                	jne    c000aa86 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa30:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aa34:	74 19                	je     c000aa4f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aa36:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa3b:	74 53                	je     c000aa90 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa3d:	89 f9                	mov    ecx,edi
c000aa3f:	41                   	inc    ecx
c000aa40:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa43:	80 fa 2f             	cmp    dl,0x2f
c000aa46:	74 f7                	je     c000aa3f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa48:	80 fa 5c             	cmp    dl,0x5c
c000aa4b:	74 f2                	je     c000aa3f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa4d:	eb d1                	jmp    c000aa20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa4f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa54:	74 3a                	je     c000aa90 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa56:	83 f8 03             	cmp    eax,0x3
c000aa59:	74 c5                	je     c000aa20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa5b:	41                   	inc    ecx
c000aa5c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa5f:	80 fa 2f             	cmp    dl,0x2f
c000aa62:	74 f7                	je     c000aa5b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa64:	80 fa 5c             	cmp    dl,0x5c
c000aa67:	74 f2                	je     c000aa5b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa69:	48                   	dec    eax
c000aa6a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa6e:	75 06                	jne    c000aa76 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa70:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa74:	eb f3                	jmp    c000aa69 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa76:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa7a:	74 07                	je     c000aa83 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa7c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa80:	48                   	dec    eax
c000aa81:	eb f3                	jmp    c000aa76 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa83:	40                   	inc    eax
c000aa84:	eb 9a                	jmp    c000aa20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa86:	80 fa 2f             	cmp    dl,0x2f
c000aa89:	74 95                	je     c000aa20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa8b:	80 fa 5c             	cmp    dl,0x5c
c000aa8e:	74 90                	je     c000aa20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa90:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa93:	40                   	inc    eax
c000aa94:	eb 8a                	jmp    c000aa20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa96:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa9a:	83 ec 0c             	sub    esp,0xc
c000aa9d:	53                   	push   ebx
c000aa9e:	e8 9d 5a ff ff       	call   c0000540 <strlen>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aaab:	75 26                	jne    c000aad3 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aaad:	83 ec 0c             	sub    esp,0xc
c000aab0:	53                   	push   ebx
c000aab1:	e8 8a 5a ff ff       	call   c0000540 <strlen>
c000aab6:	83 c4 10             	add    esp,0x10
c000aab9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aabe:	74 26                	je     c000aae6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aac0:	83 ec 0c             	sub    esp,0xc
c000aac3:	53                   	push   ebx
c000aac4:	e8 77 5a ff ff       	call   c0000540 <strlen>
c000aac9:	83 c4 10             	add    esp,0x10
c000aacc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aad1:	eb c7                	jmp    c000aa9a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aad3:	83 ec 0c             	sub    esp,0xc
c000aad6:	53                   	push   ebx
c000aad7:	e8 64 5a ff ff       	call   c0000540 <strlen>
c000aadc:	83 c4 10             	add    esp,0x10
c000aadf:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aae4:	74 c7                	je     c000aaad <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aae6:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aaec:	5b                   	pop    ebx
c000aaed:	5e                   	pop    esi
c000aaee:	5f                   	pop    edi
c000aaef:	5d                   	pop    ebp
c000aaf0:	c3                   	ret    
c000aaf1:	90                   	nop

c000aaf2 <File::File(char const*, Process*)>:
c000aaf2:	83 ec 0c             	sub    esp,0xc
c000aaf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf9:	83 ec 08             	sub    esp,0x8
c000aafc:	6a 00                	push   0x0
c000aafe:	50                   	push   eax
c000aaff:	e8 3e e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	ba 24 de 01 c0       	mov    edx,0xc001de24
c000ab0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab10:	89 10                	mov    DWORD PTR [eax],edx
c000ab12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab16:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	83 c0 0d             	add    eax,0xd
c000ab23:	83 ec 04             	sub    esp,0x4
c000ab26:	52                   	push   edx
c000ab27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2b:	50                   	push   eax
c000ab2c:	e8 17 fe ff ff       	call   c000a948 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ab31:	83 c4 10             	add    esp,0x10
c000ab34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab38:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ab3b:	8d 50 bf             	lea    edx,[eax-0x41]
c000ab3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab42:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ab48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab54:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab5a:	25 ff 00 00 00       	and    eax,0xff
c000ab5f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab66:	85 c0                	test   eax,eax
c000ab68:	74 42                	je     c000abac <File::File(char const*, Process*)+0xba>
c000ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab74:	25 ff 00 00 00       	and    eax,0xff
c000ab79:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab80:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab86:	85 c0                	test   eax,eax
c000ab88:	75 22                	jne    c000abac <File::File(char const*, Process*)+0xba>
c000ab8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab94:	25 ff 00 00 00       	and    eax,0xff
c000ab99:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	50                   	push   eax
c000aba4:	e8 39 20 00 00       	call   c000cbe2 <LogicalDisk::mount()>
c000aba9:	83 c4 10             	add    esp,0x10
c000abac:	90                   	nop
c000abad:	83 c4 0c             	add    esp,0xc
c000abb0:	c3                   	ret    
c000abb1:	90                   	nop

c000abb2 <File::open(FileOpenMode)>:
c000abb2:	53                   	push   ebx
c000abb3:	b8 0b 00 00 00       	mov    eax,0xb
c000abb8:	83 ec 08             	sub    esp,0x8
c000abbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abbf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000abc6:	80 fa 19             	cmp    dl,0x19
c000abc9:	77 40                	ja     c000ac0b <File::open(FileOpenMode)+0x59>
c000abcb:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000abd2:	85 d2                	test   edx,edx
c000abd4:	74 35                	je     c000ac0b <File::open(FileOpenMode)+0x59>
c000abd6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abdc:	85 d2                	test   edx,edx
c000abde:	74 2b                	je     c000ac0b <File::open(FileOpenMode)+0x59>
c000abe0:	b8 06 00 00 00       	mov    eax,0x6
c000abe5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000abe9:	75 20                	jne    c000ac0b <File::open(FileOpenMode)+0x59>
c000abeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000abed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000abf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abf7:	51                   	push   ecx
c000abf8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000abfb:	51                   	push   ecx
c000abfc:	52                   	push   edx
c000abfd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac00:	83 c4 10             	add    esp,0x10
c000ac03:	85 c0                	test   eax,eax
c000ac05:	75 04                	jne    c000ac0b <File::open(FileOpenMode)+0x59>
c000ac07:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac0b:	83 c4 08             	add    esp,0x8
c000ac0e:	5b                   	pop    ebx
c000ac0f:	c3                   	ret    

c000ac10 <File::close()>:
c000ac10:	53                   	push   ebx
c000ac11:	b8 0b 00 00 00       	mov    eax,0xb
c000ac16:	83 ec 08             	sub    esp,0x8
c000ac19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac1d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac24:	80 fa 19             	cmp    dl,0x19
c000ac27:	77 41                	ja     c000ac6a <File::close()+0x5a>
c000ac29:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac30:	85 db                	test   ebx,ebx
c000ac32:	74 36                	je     c000ac6a <File::close()+0x5a>
c000ac34:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ac3b:	74 2d                	je     c000ac6a <File::close()+0x5a>
c000ac3d:	b8 05 00 00 00       	mov    eax,0x5
c000ac42:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac46:	74 22                	je     c000ac6a <File::close()+0x5a>
c000ac48:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ac4c:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac53:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac59:	53                   	push   ebx
c000ac5a:	53                   	push   ebx
c000ac5b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac5d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac63:	50                   	push   eax
c000ac64:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ac67:	83 c4 10             	add    esp,0x10
c000ac6a:	83 c4 08             	add    esp,0x8
c000ac6d:	5b                   	pop    ebx
c000ac6e:	c3                   	ret    
c000ac6f:	90                   	nop

c000ac70 <File::seek(unsigned long long)>:
c000ac70:	56                   	push   esi
c000ac71:	53                   	push   ebx
c000ac72:	b8 0b 00 00 00       	mov    eax,0xb
c000ac77:	51                   	push   ecx
c000ac78:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac7c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac80:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac8b:	80 fa 19             	cmp    dl,0x19
c000ac8e:	77 31                	ja     c000acc1 <File::seek(unsigned long long)+0x51>
c000ac90:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac97:	85 d2                	test   edx,edx
c000ac99:	74 26                	je     c000acc1 <File::seek(unsigned long long)+0x51>
c000ac9b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aca1:	85 d2                	test   edx,edx
c000aca3:	74 1c                	je     c000acc1 <File::seek(unsigned long long)+0x51>
c000aca5:	b8 05 00 00 00       	mov    eax,0x5
c000acaa:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000acae:	74 11                	je     c000acc1 <File::seek(unsigned long long)+0x51>
c000acb0:	8b 02                	mov    eax,DWORD PTR [edx]
c000acb2:	53                   	push   ebx
c000acb3:	51                   	push   ecx
c000acb4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000acba:	52                   	push   edx
c000acbb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000acbe:	83 c4 10             	add    esp,0x10
c000acc1:	5a                   	pop    edx
c000acc2:	5b                   	pop    ebx
c000acc3:	5e                   	pop    esi
c000acc4:	c3                   	ret    
c000acc5:	90                   	nop

c000acc6 <File::tell(unsigned long long*)>:
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	b8 0b 00 00 00       	mov    eax,0xb
c000acce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acd2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acd9:	80 fa 19             	cmp    dl,0x19
c000acdc:	77 34                	ja     c000ad12 <File::tell(unsigned long long*)+0x4c>
c000acde:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ace5:	85 d2                	test   edx,edx
c000ace7:	74 29                	je     c000ad12 <File::tell(unsigned long long*)+0x4c>
c000ace9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000acef:	85 d2                	test   edx,edx
c000acf1:	74 1f                	je     c000ad12 <File::tell(unsigned long long*)+0x4c>
c000acf3:	b8 05 00 00 00       	mov    eax,0x5
c000acf8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acfc:	74 14                	je     c000ad12 <File::tell(unsigned long long*)+0x4c>
c000acfe:	50                   	push   eax
c000acff:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad05:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad0b:	52                   	push   edx
c000ad0c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad0f:	83 c4 10             	add    esp,0x10
c000ad12:	83 c4 0c             	add    esp,0xc
c000ad15:	c3                   	ret    

c000ad16 <File::rewind()>:
c000ad16:	83 ec 10             	sub    esp,0x10
c000ad19:	6a 00                	push   0x0
c000ad1b:	6a 00                	push   0x0
c000ad1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad21:	e8 4a ff ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c000ad26:	83 c4 1c             	add    esp,0x1c
c000ad29:	c3                   	ret    

c000ad2a <File::unlink()>:
c000ad2a:	83 ec 0c             	sub    esp,0xc
c000ad2d:	b8 0b 00 00 00       	mov    eax,0xb
c000ad32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad3d:	80 f9 19             	cmp    cl,0x19
c000ad40:	77 2f                	ja     c000ad71 <File::unlink()+0x47>
c000ad42:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad49:	85 c9                	test   ecx,ecx
c000ad4b:	74 24                	je     c000ad71 <File::unlink()+0x47>
c000ad4d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad53:	85 c9                	test   ecx,ecx
c000ad55:	74 1a                	je     c000ad71 <File::unlink()+0x47>
c000ad57:	b8 06 00 00 00       	mov    eax,0x6
c000ad5c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad60:	75 0f                	jne    c000ad71 <File::unlink()+0x47>
c000ad62:	83 c2 0d             	add    edx,0xd
c000ad65:	50                   	push   eax
c000ad66:	50                   	push   eax
c000ad67:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad69:	52                   	push   edx
c000ad6a:	51                   	push   ecx
c000ad6b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad6e:	83 c4 10             	add    esp,0x10
c000ad71:	83 c4 0c             	add    esp,0xc
c000ad74:	c3                   	ret    
c000ad75:	90                   	nop

c000ad76 <File::rename(char const*)>:
c000ad76:	83 ec 0c             	sub    esp,0xc
c000ad79:	b8 0b 00 00 00       	mov    eax,0xb
c000ad7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad82:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad89:	80 f9 19             	cmp    cl,0x19
c000ad8c:	77 32                	ja     c000adc0 <File::rename(char const*)+0x4a>
c000ad8e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad95:	85 c9                	test   ecx,ecx
c000ad97:	74 27                	je     c000adc0 <File::rename(char const*)+0x4a>
c000ad99:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad9f:	85 c9                	test   ecx,ecx
c000ada1:	74 1d                	je     c000adc0 <File::rename(char const*)+0x4a>
c000ada3:	b8 06 00 00 00       	mov    eax,0x6
c000ada8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adac:	75 12                	jne    c000adc0 <File::rename(char const*)+0x4a>
c000adae:	83 c2 0d             	add    edx,0xd
c000adb1:	50                   	push   eax
c000adb2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000adb8:	52                   	push   edx
c000adb9:	51                   	push   ecx
c000adba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000adbd:	83 c4 10             	add    esp,0x10
c000adc0:	83 c4 0c             	add    esp,0xc
c000adc3:	c3                   	ret    

c000adc4 <File::chfatattr(unsigned char, unsigned char)>:
c000adc4:	57                   	push   edi
c000adc5:	b8 0b 00 00 00       	mov    eax,0xb
c000adca:	56                   	push   esi
c000adcb:	53                   	push   ebx
c000adcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000add0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000add4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000addb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000addf:	80 f9 19             	cmp    cl,0x19
c000ade2:	77 37                	ja     c000ae1b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ade4:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adeb:	85 c9                	test   ecx,ecx
c000aded:	74 2c                	je     c000ae1b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adf5:	85 c9                	test   ecx,ecx
c000adf7:	74 22                	je     c000ae1b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adf9:	b8 06 00 00 00       	mov    eax,0x6
c000adfe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae02:	75 17                	jne    c000ae1b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae04:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae06:	89 f0                	mov    eax,esi
c000ae08:	83 c2 0d             	add    edx,0xd
c000ae0b:	0f b6 f0             	movzx  esi,al
c000ae0e:	0f b6 db             	movzx  ebx,bl
c000ae11:	56                   	push   esi
c000ae12:	53                   	push   ebx
c000ae13:	52                   	push   edx
c000ae14:	51                   	push   ecx
c000ae15:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ae18:	83 c4 10             	add    esp,0x10
c000ae1b:	5b                   	pop    ebx
c000ae1c:	5e                   	pop    esi
c000ae1d:	5f                   	pop    edi
c000ae1e:	c3                   	ret    
c000ae1f:	90                   	nop

c000ae20 <File::exists()>:
c000ae20:	83 ec 0c             	sub    esp,0xc
c000ae23:	31 c0                	xor    eax,eax
c000ae25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae29:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae30:	80 f9 19             	cmp    cl,0x19
c000ae33:	77 24                	ja     c000ae59 <File::exists()+0x39>
c000ae35:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae3c:	85 c9                	test   ecx,ecx
c000ae3e:	74 19                	je     c000ae59 <File::exists()+0x39>
c000ae40:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae46:	85 c9                	test   ecx,ecx
c000ae48:	74 0f                	je     c000ae59 <File::exists()+0x39>
c000ae4a:	83 c2 0d             	add    edx,0xd
c000ae4d:	50                   	push   eax
c000ae4e:	50                   	push   eax
c000ae4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae51:	52                   	push   edx
c000ae52:	51                   	push   ecx
c000ae53:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	83 c4 0c             	add    esp,0xc
c000ae5c:	c3                   	ret    
c000ae5d:	90                   	nop

c000ae5e <File::stat(unsigned long long*, bool*)>:
c000ae5e:	56                   	push   esi
c000ae5f:	53                   	push   ebx
c000ae60:	50                   	push   eax
c000ae61:	b8 0b 00 00 00       	mov    eax,0xb
c000ae66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae6e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae79:	80 f9 19             	cmp    cl,0x19
c000ae7c:	77 3d                	ja     c000aebb <File::stat(unsigned long long*, bool*)+0x5d>
c000ae7e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae85:	85 c9                	test   ecx,ecx
c000ae87:	74 32                	je     c000aebb <File::stat(unsigned long long*, bool*)+0x5d>
c000ae89:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae8f:	85 c9                	test   ecx,ecx
c000ae91:	74 28                	je     c000aebb <File::stat(unsigned long long*, bool*)+0x5d>
c000ae93:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae95:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae99:	74 13                	je     c000aeae <File::stat(unsigned long long*, bool*)+0x50>
c000ae9b:	83 ec 04             	sub    esp,0x4
c000ae9e:	56                   	push   esi
c000ae9f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000aea5:	51                   	push   ecx
c000aea6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000aea9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000aeac:	eb 0a                	jmp    c000aeb8 <File::stat(unsigned long long*, bool*)+0x5a>
c000aeae:	53                   	push   ebx
c000aeaf:	83 c2 0d             	add    edx,0xd
c000aeb2:	56                   	push   esi
c000aeb3:	52                   	push   edx
c000aeb4:	51                   	push   ecx
c000aeb5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	5a                   	pop    edx
c000aebc:	5b                   	pop    ebx
c000aebd:	5e                   	pop    esi
c000aebe:	c3                   	ret    

c000aebf <Fs::setcwd(Process*, char*)>:
c000aebf:	55                   	push   ebp
c000aec0:	57                   	push   edi
c000aec1:	56                   	push   esi
c000aec2:	53                   	push   ebx
c000aec3:	81 ec 20 02 00 00    	sub    esp,0x220
c000aec9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000aed0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000aed6:	57                   	push   edi
c000aed7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000aede:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000aee2:	56                   	push   esi
c000aee3:	e8 60 fa ff ff       	call   c000a948 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aee8:	89 34 24             	mov    DWORD PTR [esp],esi
c000aeeb:	e8 50 56 ff ff       	call   c0000540 <strlen>
c000aef0:	83 c4 10             	add    esp,0x10
c000aef3:	83 f8 02             	cmp    eax,0x2
c000aef6:	77 15                	ja     c000af0d <Fs::setcwd(Process*, char*)+0x4e>
c000aef8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000aefd:	83 eb 41             	sub    ebx,0x41
c000af00:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af07:	85 c0                	test   eax,eax
c000af09:	75 1c                	jne    c000af27 <Fs::setcwd(Process*, char*)+0x68>
c000af0b:	eb 2f                	jmp    c000af3c <Fs::setcwd(Process*, char*)+0x7d>
c000af0d:	83 ec 0c             	sub    esp,0xc
c000af10:	56                   	push   esi
c000af11:	e8 2a 56 ff ff       	call   c0000540 <strlen>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	83 f8 03             	cmp    eax,0x3
c000af1c:	75 57                	jne    c000af75 <Fs::setcwd(Process*, char*)+0xb6>
c000af1e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000af23:	75 50                	jne    c000af75 <Fs::setcwd(Process*, char*)+0xb6>
c000af25:	eb d1                	jmp    c000aef8 <Fs::setcwd(Process*, char*)+0x39>
c000af27:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000af2e:	75 0c                	jne    c000af3c <Fs::setcwd(Process*, char*)+0x7d>
c000af30:	83 ec 0c             	sub    esp,0xc
c000af33:	50                   	push   eax
c000af34:	e8 a9 1c 00 00       	call   c000cbe2 <LogicalDisk::mount()>
c000af39:	83 c4 10             	add    esp,0x10
c000af3c:	b8 03 00 00 00       	mov    eax,0x3
c000af41:	83 fb 19             	cmp    ebx,0x19
c000af44:	0f 87 c6 00 00 00    	ja     c000b010 <Fs::setcwd(Process*, char*)+0x151>
c000af4a:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af51:	b8 05 00 00 00       	mov    eax,0x5
c000af56:	85 d2                	test   edx,edx
c000af58:	0f 84 b2 00 00 00    	je     c000b010 <Fs::setcwd(Process*, char*)+0x151>
c000af5e:	b8 06 00 00 00       	mov    eax,0x6
c000af63:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000af6a:	0f 85 92 00 00 00    	jne    c000b002 <Fs::setcwd(Process*, char*)+0x143>
c000af70:	e9 9b 00 00 00       	jmp    c000b010 <Fs::setcwd(Process*, char*)+0x151>
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	68 14 01 00 00       	push   0x114
c000af7d:	e8 37 c8 ff ff       	call   c00077b9 <malloc>
c000af82:	83 c4 0c             	add    esp,0xc
c000af85:	89 c3                	mov    ebx,eax
c000af87:	55                   	push   ebp
c000af88:	56                   	push   esi
c000af89:	50                   	push   eax
c000af8a:	e8 63 fb ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c000af8f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af94:	83 c4 0c             	add    esp,0xc
c000af97:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af9b:	50                   	push   eax
c000af9c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000afa0:	50                   	push   eax
c000afa1:	53                   	push   ebx
c000afa2:	e8 b7 fe ff ff       	call   c000ae5e <File::stat(unsigned long long*, bool*)>
c000afa7:	83 c4 10             	add    esp,0x10
c000afaa:	83 f8 02             	cmp    eax,0x2
c000afad:	74 04                	je     c000afb3 <Fs::setcwd(Process*, char*)+0xf4>
c000afaf:	85 c0                	test   eax,eax
c000afb1:	74 1c                	je     c000afcf <Fs::setcwd(Process*, char*)+0x110>
c000afb3:	b8 01 00 00 00       	mov    eax,0x1
c000afb8:	85 db                	test   ebx,ebx
c000afba:	74 54                	je     c000b010 <Fs::setcwd(Process*, char*)+0x151>
c000afbc:	83 ec 0c             	sub    esp,0xc
c000afbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afc1:	53                   	push   ebx
c000afc2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afc5:	83 c4 10             	add    esp,0x10
c000afc8:	b8 01 00 00 00       	mov    eax,0x1
c000afcd:	eb 41                	jmp    c000b010 <Fs::setcwd(Process*, char*)+0x151>
c000afcf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000afd4:	75 1c                	jne    c000aff2 <Fs::setcwd(Process*, char*)+0x133>
c000afd6:	b8 02 00 00 00       	mov    eax,0x2
c000afdb:	85 db                	test   ebx,ebx
c000afdd:	74 31                	je     c000b010 <Fs::setcwd(Process*, char*)+0x151>
c000afdf:	83 ec 0c             	sub    esp,0xc
c000afe2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe4:	53                   	push   ebx
c000afe5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	b8 02 00 00 00       	mov    eax,0x2
c000aff0:	eb 1e                	jmp    c000b010 <Fs::setcwd(Process*, char*)+0x151>
c000aff2:	85 db                	test   ebx,ebx
c000aff4:	74 0c                	je     c000b002 <Fs::setcwd(Process*, char*)+0x143>
c000aff6:	83 ec 0c             	sub    esp,0xc
c000aff9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000affb:	53                   	push   ebx
c000affc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afff:	83 c4 10             	add    esp,0x10
c000b002:	50                   	push   eax
c000b003:	50                   	push   eax
c000b004:	56                   	push   esi
c000b005:	57                   	push   edi
c000b006:	e8 f5 55 ff ff       	call   c0000600 <strcpy>
c000b00b:	83 c4 10             	add    esp,0x10
c000b00e:	31 c0                	xor    eax,eax
c000b010:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b016:	5b                   	pop    ebx
c000b017:	5e                   	pop    esi
c000b018:	5f                   	pop    edi
c000b019:	5d                   	pop    ebp
c000b01a:	c3                   	ret    
c000b01b:	90                   	nop

c000b01c <Directory::Directory(char const*, Process*)>:
c000b01c:	83 ec 0c             	sub    esp,0xc
c000b01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b023:	83 ec 08             	sub    esp,0x8
c000b026:	6a 00                	push   0x0
c000b028:	50                   	push   eax
c000b029:	e8 14 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	ba 40 de 01 c0       	mov    edx,0xc001de40
c000b036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03a:	89 10                	mov    DWORD PTR [eax],edx
c000b03c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b040:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04a:	83 c0 0d             	add    eax,0xd
c000b04d:	83 ec 04             	sub    esp,0x4
c000b050:	52                   	push   edx
c000b051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b055:	50                   	push   eax
c000b056:	e8 ed f8 ff ff       	call   c000a948 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b05b:	83 c4 10             	add    esp,0x10
c000b05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b062:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b065:	8d 50 bf             	lea    edx,[eax-0x41]
c000b068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b084:	25 ff 00 00 00       	and    eax,0xff
c000b089:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b090:	85 c0                	test   eax,eax
c000b092:	74 42                	je     c000b0d6 <Directory::Directory(char const*, Process*)+0xba>
c000b094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b098:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b09e:	25 ff 00 00 00       	and    eax,0xff
c000b0a3:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b0aa:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0b0:	85 c0                	test   eax,eax
c000b0b2:	75 22                	jne    c000b0d6 <Directory::Directory(char const*, Process*)+0xba>
c000b0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0be:	25 ff 00 00 00       	and    eax,0xff
c000b0c3:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	50                   	push   eax
c000b0ce:	e8 0f 1b 00 00       	call   c000cbe2 <LogicalDisk::mount()>
c000b0d3:	83 c4 10             	add    esp,0x10
c000b0d6:	90                   	nop
c000b0d7:	83 c4 0c             	add    esp,0xc
c000b0da:	c3                   	ret    
c000b0db:	90                   	nop

c000b0dc <Directory::open()>:
c000b0dc:	53                   	push   ebx
c000b0dd:	b8 0b 00 00 00       	mov    eax,0xb
c000b0e2:	83 ec 08             	sub    esp,0x8
c000b0e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0e9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0f0:	80 fa 19             	cmp    dl,0x19
c000b0f3:	77 3d                	ja     c000b132 <Directory::open()+0x56>
c000b0f5:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b0fc:	85 d2                	test   edx,edx
c000b0fe:	74 32                	je     c000b132 <Directory::open()+0x56>
c000b100:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b106:	85 d2                	test   edx,edx
c000b108:	74 28                	je     c000b132 <Directory::open()+0x56>
c000b10a:	b8 06 00 00 00       	mov    eax,0x6
c000b10f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b113:	75 1d                	jne    c000b132 <Directory::open()+0x56>
c000b115:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b11b:	50                   	push   eax
c000b11c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b11e:	51                   	push   ecx
c000b11f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b122:	51                   	push   ecx
c000b123:	52                   	push   edx
c000b124:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b127:	83 c4 10             	add    esp,0x10
c000b12a:	85 c0                	test   eax,eax
c000b12c:	75 04                	jne    c000b132 <Directory::open()+0x56>
c000b12e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b132:	83 c4 08             	add    esp,0x8
c000b135:	5b                   	pop    ebx
c000b136:	c3                   	ret    
c000b137:	90                   	nop

c000b138 <Directory::close()>:
c000b138:	53                   	push   ebx
c000b139:	b8 0b 00 00 00       	mov    eax,0xb
c000b13e:	83 ec 08             	sub    esp,0x8
c000b141:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b145:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b14c:	80 fa 19             	cmp    dl,0x19
c000b14f:	77 41                	ja     c000b192 <Directory::close()+0x5a>
c000b151:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b158:	85 db                	test   ebx,ebx
c000b15a:	74 36                	je     c000b192 <Directory::close()+0x5a>
c000b15c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b163:	74 2d                	je     c000b192 <Directory::close()+0x5a>
c000b165:	b8 05 00 00 00       	mov    eax,0x5
c000b16a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b16e:	74 22                	je     c000b192 <Directory::close()+0x5a>
c000b170:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b174:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b17b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b181:	53                   	push   ebx
c000b182:	53                   	push   ebx
c000b183:	8b 10                	mov    edx,DWORD PTR [eax]
c000b185:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b18b:	50                   	push   eax
c000b18c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b18f:	83 c4 10             	add    esp,0x10
c000b192:	83 c4 08             	add    esp,0x8
c000b195:	5b                   	pop    ebx
c000b196:	c3                   	ret    
c000b197:	90                   	nop

c000b198 <Directory::unlink()>:
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	b8 0b 00 00 00       	mov    eax,0xb
c000b1a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ab:	80 f9 19             	cmp    cl,0x19
c000b1ae:	77 2f                	ja     c000b1df <Directory::unlink()+0x47>
c000b1b0:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1b7:	85 c9                	test   ecx,ecx
c000b1b9:	74 24                	je     c000b1df <Directory::unlink()+0x47>
c000b1bb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1c1:	85 c9                	test   ecx,ecx
c000b1c3:	74 1a                	je     c000b1df <Directory::unlink()+0x47>
c000b1c5:	b8 06 00 00 00       	mov    eax,0x6
c000b1ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ce:	75 0f                	jne    c000b1df <Directory::unlink()+0x47>
c000b1d0:	83 c2 0d             	add    edx,0xd
c000b1d3:	50                   	push   eax
c000b1d4:	50                   	push   eax
c000b1d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1d7:	52                   	push   edx
c000b1d8:	51                   	push   ecx
c000b1d9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1dc:	83 c4 10             	add    esp,0x10
c000b1df:	83 c4 0c             	add    esp,0xc
c000b1e2:	c3                   	ret    
c000b1e3:	90                   	nop

c000b1e4 <Directory::rename(char const*)>:
c000b1e4:	83 ec 0c             	sub    esp,0xc
c000b1e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1f7:	80 f9 19             	cmp    cl,0x19
c000b1fa:	77 32                	ja     c000b22e <Directory::rename(char const*)+0x4a>
c000b1fc:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b203:	85 c9                	test   ecx,ecx
c000b205:	74 27                	je     c000b22e <Directory::rename(char const*)+0x4a>
c000b207:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b20d:	85 c9                	test   ecx,ecx
c000b20f:	74 1d                	je     c000b22e <Directory::rename(char const*)+0x4a>
c000b211:	b8 06 00 00 00       	mov    eax,0x6
c000b216:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b21a:	75 12                	jne    c000b22e <Directory::rename(char const*)+0x4a>
c000b21c:	83 c2 0d             	add    edx,0xd
c000b21f:	50                   	push   eax
c000b220:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b222:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b226:	52                   	push   edx
c000b227:	51                   	push   ecx
c000b228:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	83 c4 0c             	add    esp,0xc
c000b231:	c3                   	ret    

c000b232 <Directory::exists()>:
c000b232:	83 ec 0c             	sub    esp,0xc
c000b235:	31 c0                	xor    eax,eax
c000b237:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b23b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b242:	80 f9 19             	cmp    cl,0x19
c000b245:	77 24                	ja     c000b26b <Directory::exists()+0x39>
c000b247:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b24e:	85 c9                	test   ecx,ecx
c000b250:	74 19                	je     c000b26b <Directory::exists()+0x39>
c000b252:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b258:	85 c9                	test   ecx,ecx
c000b25a:	74 0f                	je     c000b26b <Directory::exists()+0x39>
c000b25c:	83 c2 0d             	add    edx,0xd
c000b25f:	50                   	push   eax
c000b260:	50                   	push   eax
c000b261:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b263:	52                   	push   edx
c000b264:	51                   	push   ecx
c000b265:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b268:	83 c4 10             	add    esp,0x10
c000b26b:	83 c4 0c             	add    esp,0xc
c000b26e:	c3                   	ret    
c000b26f:	90                   	nop

c000b270 <Directory::read(dirent*)>:
c000b270:	83 ec 1c             	sub    esp,0x1c
c000b273:	b8 0b 00 00 00       	mov    eax,0xb
c000b278:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b27c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b283:	80 fa 19             	cmp    dl,0x19
c000b286:	77 30                	ja     c000b2b8 <Directory::read(dirent*)+0x48>
c000b288:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b28f:	85 d2                	test   edx,edx
c000b291:	74 25                	je     c000b2b8 <Directory::read(dirent*)+0x48>
c000b293:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b29a:	74 1c                	je     c000b2b8 <Directory::read(dirent*)+0x48>
c000b29c:	83 ec 0c             	sub    esp,0xc
c000b29f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b2a5:	52                   	push   edx
c000b2a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2aa:	6a 00                	push   0x0
c000b2ac:	68 10 01 00 00       	push   0x110
c000b2b1:	51                   	push   ecx
c000b2b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2b5:	83 c4 20             	add    esp,0x20
c000b2b8:	83 c4 1c             	add    esp,0x1c
c000b2bb:	c3                   	ret    

c000b2bc <Directory::create()>:
c000b2bc:	83 ec 0c             	sub    esp,0xc
c000b2bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b2c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2cf:	80 f9 19             	cmp    cl,0x19
c000b2d2:	77 2f                	ja     c000b303 <Directory::create()+0x47>
c000b2d4:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2db:	85 c9                	test   ecx,ecx
c000b2dd:	74 24                	je     c000b303 <Directory::create()+0x47>
c000b2df:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2e5:	85 c9                	test   ecx,ecx
c000b2e7:	74 1a                	je     c000b303 <Directory::create()+0x47>
c000b2e9:	b8 06 00 00 00       	mov    eax,0x6
c000b2ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2f2:	75 0f                	jne    c000b303 <Directory::create()+0x47>
c000b2f4:	83 c2 0d             	add    edx,0xd
c000b2f7:	50                   	push   eax
c000b2f8:	50                   	push   eax
c000b2f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2fb:	52                   	push   edx
c000b2fc:	51                   	push   ecx
c000b2fd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	83 c4 0c             	add    esp,0xc
c000b306:	c3                   	ret    
c000b307:	90                   	nop

c000b308 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b308:	b8 0a 00 00 00       	mov    eax,0xa
c000b30d:	c3                   	ret    
c000b30e:	66 90                	xchg   ax,ax

c000b310 <Bus::Bus(char const*)>:
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b317:	83 ec 08             	sub    esp,0x8
c000b31a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b31e:	50                   	push   eax
c000b31f:	e8 30 08 00 00       	call   c000bb54 <Device::Device(char const*)>
c000b324:	83 c4 10             	add    esp,0x10
c000b327:	ba 5c de 01 c0       	mov    edx,0xc001de5c
c000b32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b330:	89 10                	mov    DWORD PTR [eax],edx
c000b332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b336:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b340:	90                   	nop
c000b341:	83 c4 0c             	add    esp,0xc
c000b344:	c3                   	ret    
c000b345:	90                   	nop
c000b346:	66 90                	xchg   ax,ax

c000b348 <Bus::~Bus()>:
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	ba 5c de 01 c0       	mov    edx,0xc001de5c
c000b350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b354:	89 10                	mov    DWORD PTR [eax],edx
c000b356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35a:	83 ec 0c             	sub    esp,0xc
c000b35d:	50                   	push   eax
c000b35e:	e8 5b 05 00 00       	call   c000b8be <Device::~Device()>
c000b363:	83 c4 10             	add    esp,0x10
c000b366:	90                   	nop
c000b367:	83 c4 0c             	add    esp,0xc
c000b36a:	c3                   	ret    
c000b36b:	90                   	nop

c000b36c <Bus::~Bus()>:
c000b36c:	83 ec 0c             	sub    esp,0xc
c000b36f:	83 ec 0c             	sub    esp,0xc
c000b372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b376:	e8 cd ff ff ff       	call   c000b348 <Bus::~Bus()>
c000b37b:	83 c4 10             	add    esp,0x10
c000b37e:	83 ec 08             	sub    esp,0x8
c000b381:	68 58 01 00 00       	push   0x158
c000b386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b38a:	e8 f8 f0 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000b38f:	83 c4 10             	add    esp,0x10
c000b392:	83 c4 0c             	add    esp,0xc
c000b395:	c3                   	ret    

c000b396 <beepThread(void*)>:
c000b396:	83 ec 0c             	sub    esp,0xc
c000b399:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b39e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3a2:	48                   	dec    eax
c000b3a3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b3a8:	75 01                	jne    c000b3ab <beepThread(void*)+0x15>
c000b3aa:	fb                   	sti    
c000b3ab:	83 ec 0c             	sub    esp,0xc
c000b3ae:	6b c2 0a             	imul   eax,edx,0xa
c000b3b1:	50                   	push   eax
c000b3b2:	e8 3d 87 00 00       	call   c0013af4 <milliTenthSleep(unsigned int)>
c000b3b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b3be:	e8 e3 a4 00 00       	call   c00158a6 <HalMakeBeep(int)>
c000b3c3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b3cb:	83 c4 1c             	add    esp,0x1c
c000b3ce:	e9 1d 86 00 00       	jmp    c00139f0 <blockTask(TaskState)>

c000b3d3 <Krnl::beep(int, int, bool)>:
c000b3d3:	56                   	push   esi
c000b3d4:	53                   	push   ebx
c000b3d5:	83 ec 10             	sub    esp,0x10
c000b3d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b3dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b3e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e4:	e8 bd a4 00 00       	call   c00158a6 <HalMakeBeep(int)>
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	89 f0                	mov    eax,esi
c000b3ee:	84 c0                	test   al,al
c000b3f0:	74 1e                	je     c000b410 <Krnl::beep(int, int, bool)+0x3d>
c000b3f2:	83 ec 0c             	sub    esp,0xc
c000b3f5:	6b db 0a             	imul   ebx,ebx,0xa
c000b3f8:	53                   	push   ebx
c000b3f9:	e8 f6 86 00 00       	call   c0013af4 <milliTenthSleep(unsigned int)>
c000b3fe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b406:	83 c4 14             	add    esp,0x14
c000b409:	5b                   	pop    ebx
c000b40a:	5e                   	pop    esi
c000b40b:	e9 96 a4 00 00       	jmp    c00158a6 <HalMakeBeep(int)>
c000b410:	68 e6 00 00 00       	push   0xe6
c000b415:	53                   	push   ebx
c000b416:	68 96 b3 00 c0       	push   0xc000b396
c000b41b:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b421:	e8 ae 81 00 00       	call   c00135d4 <Process::createThread(void (*)(void*), void*, int)>
c000b426:	83 c4 14             	add    esp,0x14
c000b429:	5b                   	pop    ebx
c000b42a:	5e                   	pop    esi
c000b42b:	c3                   	ret    

c000b42c <User::loadClockSettings(int)>:
c000b42c:	53                   	push   ebx
c000b42d:	83 ec 14             	sub    esp,0x14
c000b430:	68 14 01 00 00       	push   0x114
c000b435:	e8 7f c3 ff ff       	call   c00077b9 <malloc>
c000b43a:	83 c4 0c             	add    esp,0xc
c000b43d:	89 c3                	mov    ebx,eax
c000b43f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b445:	68 80 de 01 c0       	push   0xc001de80
c000b44a:	50                   	push   eax
c000b44b:	e8 a2 f6 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c000b450:	58                   	pop    eax
c000b451:	5a                   	pop    edx
c000b452:	6a 01                	push   0x1
c000b454:	53                   	push   ebx
c000b455:	e8 58 f7 ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c000b45a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b45d:	e8 ae f7 ff ff       	call   c000ac10 <File::close()>
c000b462:	83 c4 10             	add    esp,0x10
c000b465:	85 db                	test   ebx,ebx
c000b467:	74 0f                	je     c000b478 <User::loadClockSettings(int)+0x4c>
c000b469:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b46b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b46f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b472:	83 c4 08             	add    esp,0x8
c000b475:	5b                   	pop    ebx
c000b476:	ff e0                	jmp    eax
c000b478:	83 c4 08             	add    esp,0x8
c000b47b:	5b                   	pop    ebx
c000b47c:	c3                   	ret    
c000b47d:	90                   	nop

c000b47e <Clock::Clock(char const*)>:
c000b47e:	83 ec 0c             	sub    esp,0xc
c000b481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b485:	83 ec 08             	sub    esp,0x8
c000b488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48c:	50                   	push   eax
c000b48d:	e8 c2 06 00 00       	call   c000bb54 <Device::Device(char const*)>
c000b492:	83 c4 10             	add    esp,0x10
c000b495:	ba a8 de 01 c0       	mov    edx,0xc001dea8
c000b49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49e:	89 10                	mov    DWORD PTR [eax],edx
c000b4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b4ae:	90                   	nop
c000b4af:	83 c4 0c             	add    esp,0xc
c000b4b2:	c3                   	ret    
c000b4b3:	90                   	nop

c000b4b4 <Clock::~Clock()>:
c000b4b4:	83 ec 0c             	sub    esp,0xc
c000b4b7:	ba a8 de 01 c0       	mov    edx,0xc001dea8
c000b4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c0:	89 10                	mov    DWORD PTR [eax],edx
c000b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c6:	83 ec 0c             	sub    esp,0xc
c000b4c9:	50                   	push   eax
c000b4ca:	e8 ef 03 00 00       	call   c000b8be <Device::~Device()>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	90                   	nop
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <Clock::~Clock()>:
c000b4d8:	83 ec 0c             	sub    esp,0xc
c000b4db:	83 ec 0c             	sub    esp,0xc
c000b4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e2:	e8 cd ff ff ff       	call   c000b4b4 <Clock::~Clock()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	83 ec 08             	sub    esp,0x8
c000b4ed:	68 58 01 00 00       	push   0x158
c000b4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f6:	e8 8c ef ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	83 c4 0c             	add    esp,0xc
c000b501:	c3                   	ret    

c000b502 <Clock::timeInSecondsLocal()>:
c000b502:	53                   	push   ebx
c000b503:	83 ec 14             	sub    esp,0x14
c000b506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b50a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b50c:	50                   	push   eax
c000b50d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b510:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b517:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b51d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b523:	89 cb                	mov    ebx,ecx
c000b525:	c1 fb 1f             	sar    ebx,0x1f
c000b528:	01 c8                	add    eax,ecx
c000b52a:	11 da                	adc    edx,ebx
c000b52c:	83 c4 10             	add    esp,0x10
c000b52f:	31 c9                	xor    ecx,ecx
c000b531:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b538:	74 05                	je     c000b53f <Clock::timeInSecondsLocal()+0x3d>
c000b53a:	b9 08 07 00 00       	mov    ecx,0x708
c000b53f:	31 db                	xor    ebx,ebx
c000b541:	01 c8                	add    eax,ecx
c000b543:	11 da                	adc    edx,ebx
c000b545:	83 c4 08             	add    esp,0x8
c000b548:	5b                   	pop    ebx
c000b549:	c3                   	ret    

c000b54a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b54a:	57                   	push   edi
c000b54b:	56                   	push   esi
c000b54c:	53                   	push   ebx
c000b54d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b551:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b555:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b557:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b55b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b55e:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b565:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b56b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b571:	99                   	cdq    
c000b572:	29 c6                	sub    esi,eax
c000b574:	19 d7                	sbb    edi,edx
c000b576:	89 f0                	mov    eax,esi
c000b578:	89 fa                	mov    edx,edi
c000b57a:	31 f6                	xor    esi,esi
c000b57c:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b583:	74 05                	je     c000b58a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b585:	be 08 07 00 00       	mov    esi,0x708
c000b58a:	31 ff                	xor    edi,edi
c000b58c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b590:	29 f0                	sub    eax,esi
c000b592:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b596:	19 fa                	sbb    edx,edi
c000b598:	89 d8                	mov    eax,ebx
c000b59a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b59e:	5b                   	pop    ebx
c000b59f:	5e                   	pop    esi
c000b5a0:	5f                   	pop    edi
c000b5a1:	ff e0                	jmp    eax

c000b5a3 <datetimeToSeconds(datetime_t)>:
c000b5a3:	55                   	push   ebp
c000b5a4:	57                   	push   edi
c000b5a5:	56                   	push   esi
c000b5a6:	53                   	push   ebx
c000b5a7:	83 ec 14             	sub    esp,0x14
c000b5aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b5ae:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b5b2:	89 d3                	mov    ebx,edx
c000b5b4:	0f b6 c6             	movzx  eax,dh
c000b5b7:	c1 eb 10             	shr    ebx,0x10
c000b5ba:	48                   	dec    eax
c000b5bb:	66 81 eb 6c 07       	sub    bx,0x76c
c000b5c0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b5c4:	0f b6 f5             	movzx  esi,ch
c000b5c7:	89 cf                	mov    edi,ecx
c000b5c9:	6b f6 3c             	imul   esi,esi,0x3c
c000b5cc:	c1 ef 10             	shr    edi,0x10
c000b5cf:	0f b6 c9             	movzx  ecx,cl
c000b5d2:	89 f8                	mov    eax,edi
c000b5d4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5da:	0f b6 f8             	movzx  edi,al
c000b5dd:	0f b6 d2             	movzx  edx,dl
c000b5e0:	01 fe                	add    esi,edi
c000b5e2:	01 f1                	add    ecx,esi
c000b5e4:	0f b7 f3             	movzx  esi,bx
c000b5e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b5eb:	c1 f9 1f             	sar    ecx,0x1f
c000b5ee:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b5f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b5f7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b5fc:	8b 0c 8d e0 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2120]
c000b603:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b607:	76 29                	jbe    c000b632 <datetimeToSeconds(datetime_t)+0x8f>
c000b609:	f6 c3 03             	test   bl,0x3
c000b60c:	75 24                	jne    c000b632 <datetimeToSeconds(datetime_t)+0x8f>
c000b60e:	31 d2                	xor    edx,edx
c000b610:	bf 64 00 00 00       	mov    edi,0x64
c000b615:	89 d8                	mov    eax,ebx
c000b617:	66 f7 f7             	div    di
c000b61a:	66 85 d2             	test   dx,dx
c000b61d:	75 12                	jne    c000b631 <datetimeToSeconds(datetime_t)+0x8e>
c000b61f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b625:	bf 90 01 00 00       	mov    edi,0x190
c000b62a:	99                   	cdq    
c000b62b:	f7 ff                	idiv   edi
c000b62d:	85 d2                	test   edx,edx
c000b62f:	75 01                	jne    c000b632 <datetimeToSeconds(datetime_t)+0x8f>
c000b631:	41                   	inc    ecx
c000b632:	66 83 fb 46          	cmp    bx,0x46
c000b636:	76 45                	jbe    c000b67d <datetimeToSeconds(datetime_t)+0xda>
c000b638:	bb 46 00 00 00       	mov    ebx,0x46
c000b63d:	bf 64 00 00 00       	mov    edi,0x64
c000b642:	bd 90 01 00 00       	mov    ebp,0x190
c000b647:	b8 6d 01 00 00       	mov    eax,0x16d
c000b64c:	f6 c3 03             	test   bl,0x3
c000b64f:	75 23                	jne    c000b674 <datetimeToSeconds(datetime_t)+0xd1>
c000b651:	89 d8                	mov    eax,ebx
c000b653:	99                   	cdq    
c000b654:	f7 ff                	idiv   edi
c000b656:	b8 6e 01 00 00       	mov    eax,0x16e
c000b65b:	85 d2                	test   edx,edx
c000b65d:	75 15                	jne    c000b674 <datetimeToSeconds(datetime_t)+0xd1>
c000b65f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b665:	99                   	cdq    
c000b666:	f7 fd                	idiv   ebp
c000b668:	31 c0                	xor    eax,eax
c000b66a:	85 d2                	test   edx,edx
c000b66c:	0f 94 c0             	sete   al
c000b66f:	05 6d 01 00 00       	add    eax,0x16d
c000b674:	01 c1                	add    ecx,eax
c000b676:	43                   	inc    ebx
c000b677:	39 f3                	cmp    ebx,esi
c000b679:	7c cc                	jl     c000b647 <datetimeToSeconds(datetime_t)+0xa4>
c000b67b:	eb 3b                	jmp    c000b6b8 <datetimeToSeconds(datetime_t)+0x115>
c000b67d:	74 39                	je     c000b6b8 <datetimeToSeconds(datetime_t)+0x115>
c000b67f:	b8 45 00 00 00       	mov    eax,0x45
c000b684:	89 c2                	mov    edx,eax
c000b686:	83 e2 03             	and    edx,0x3
c000b689:	39 f0                	cmp    eax,esi
c000b68b:	7e 13                	jle    c000b6a0 <datetimeToSeconds(datetime_t)+0xfd>
c000b68d:	85 d2                	test   edx,edx
c000b68f:	0f 94 c2             	sete   dl
c000b692:	48                   	dec    eax
c000b693:	0f b6 d2             	movzx  edx,dl
c000b696:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b69c:	29 d1                	sub    ecx,edx
c000b69e:	eb e4                	jmp    c000b684 <datetimeToSeconds(datetime_t)+0xe1>
c000b6a0:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6a5:	85 d2                	test   edx,edx
c000b6a7:	75 0d                	jne    c000b6b6 <datetimeToSeconds(datetime_t)+0x113>
c000b6a9:	31 c0                	xor    eax,eax
c000b6ab:	66 85 db             	test   bx,bx
c000b6ae:	0f 95 c0             	setne  al
c000b6b1:	05 6d 01 00 00       	add    eax,0x16d
c000b6b6:	29 c1                	sub    ecx,eax
c000b6b8:	b8 80 51 01 00       	mov    eax,0x15180
c000b6bd:	f7 e9                	imul   ecx
c000b6bf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b6c3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b6c7:	83 c4 14             	add    esp,0x14
c000b6ca:	5b                   	pop    ebx
c000b6cb:	5e                   	pop    esi
c000b6cc:	5f                   	pop    edi
c000b6cd:	5d                   	pop    ebp
c000b6ce:	c3                   	ret    
c000b6cf:	90                   	nop

c000b6d0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b6d0:	57                   	push   edi
c000b6d1:	56                   	push   esi
c000b6d2:	53                   	push   ebx
c000b6d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b6d7:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6d9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b6dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6e4:	e8 ba fe ff ff       	call   c000b5a3 <datetimeToSeconds(datetime_t)>
c000b6e9:	59                   	pop    ecx
c000b6ea:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b6f1:	5b                   	pop    ebx
c000b6f2:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b6f8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6fe:	89 cb                	mov    ebx,ecx
c000b700:	c1 fb 1f             	sar    ebx,0x1f
c000b703:	29 c8                	sub    eax,ecx
c000b705:	19 da                	sbb    edx,ebx
c000b707:	31 c9                	xor    ecx,ecx
c000b709:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b710:	74 05                	je     c000b717 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b712:	b9 08 07 00 00       	mov    ecx,0x708
c000b717:	31 db                	xor    ebx,ebx
c000b719:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b71d:	29 c8                	sub    eax,ecx
c000b71f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b723:	19 da                	sbb    edx,ebx
c000b725:	89 f8                	mov    eax,edi
c000b727:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b72b:	5b                   	pop    ebx
c000b72c:	5e                   	pop    esi
c000b72d:	5f                   	pop    edi
c000b72e:	ff e0                	jmp    eax

c000b730 <secondsToDatetime(unsigned long long)>:
c000b730:	55                   	push   ebp
c000b731:	57                   	push   edi
c000b732:	56                   	push   esi
c000b733:	53                   	push   ebx
c000b734:	83 ec 1c             	sub    esp,0x1c
c000b737:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b73b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b73f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b743:	6a 00                	push   0x0
c000b745:	68 80 51 01 00       	push   0x15180
c000b74a:	55                   	push   ebp
c000b74b:	57                   	push   edi
c000b74c:	e8 ff 09 01 00       	call   c001c150 <__udivdi3>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b75a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b75e:	6a 00                	push   0x0
c000b760:	68 80 51 01 00       	push   0x15180
c000b765:	55                   	push   ebp
c000b766:	57                   	push   edi
c000b767:	bf 10 0e 00 00       	mov    edi,0xe10
c000b76c:	e8 df 0a 01 00       	call   c001c250 <__umoddi3>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	99                   	cdq    
c000b775:	f7 ff                	idiv   edi
c000b777:	bf 3c 00 00 00       	mov    edi,0x3c
c000b77c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b77f:	89 d0                	mov    eax,edx
c000b781:	99                   	cdq    
c000b782:	f7 ff                	idiv   edi
c000b784:	85 db                	test   ebx,ebx
c000b786:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b789:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b78c:	79 11                	jns    c000b79f <secondsToDatetime(unsigned long long)+0x6f>
c000b78e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b792:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b798:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b79d:	eb 07                	jmp    c000b7a6 <secondsToDatetime(unsigned long long)+0x76>
c000b79f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7a4:	89 d8                	mov    eax,ebx
c000b7a6:	bf b4 05 00 00       	mov    edi,0x5b4
c000b7ab:	99                   	cdq    
c000b7ac:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b7b1:	f7 f9                	idiv   ecx
c000b7b3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b7b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7bc:	31 d2                	xor    edx,edx
c000b7be:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b7c6:	01 c3                	add    ebx,eax
c000b7c8:	89 d8                	mov    eax,ebx
c000b7ca:	f7 f1                	div    ecx
c000b7cc:	31 d2                	xor    edx,edx
c000b7ce:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b7d1:	89 d8                	mov    eax,ebx
c000b7d3:	f7 f7                	div    edi
c000b7d5:	31 d2                	xor    edx,edx
c000b7d7:	29 c1                	sub    ecx,eax
c000b7d9:	89 d8                	mov    eax,ebx
c000b7db:	f7 f5                	div    ebp
c000b7dd:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b7e2:	29 c1                	sub    ecx,eax
c000b7e4:	31 d2                	xor    edx,edx
c000b7e6:	89 c8                	mov    eax,ecx
c000b7e8:	f7 f5                	div    ebp
c000b7ea:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b7ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b7f3:	31 d2                	xor    edx,edx
c000b7f5:	89 c8                	mov    eax,ecx
c000b7f7:	f7 f5                	div    ebp
c000b7f9:	31 d2                	xor    edx,edx
c000b7fb:	01 c3                	add    ebx,eax
c000b7fd:	89 c8                	mov    eax,ecx
c000b7ff:	f7 f7                	div    edi
c000b801:	bf 99 00 00 00       	mov    edi,0x99
c000b806:	29 c3                	sub    ebx,eax
c000b808:	31 d2                	xor    edx,edx
c000b80a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b812:	29 c3                	sub    ebx,eax
c000b814:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b817:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b81a:	bb 05 00 00 00       	mov    ebx,0x5
c000b81f:	83 c1 02             	add    ecx,0x2
c000b822:	89 c8                	mov    eax,ecx
c000b824:	f7 f7                	div    edi
c000b826:	31 d2                	xor    edx,edx
c000b828:	89 c7                	mov    edi,eax
c000b82a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b830:	83 c0 02             	add    eax,0x2
c000b833:	f7 f3                	div    ebx
c000b835:	89 eb                	mov    ebx,ebp
c000b837:	29 c3                	sub    ebx,eax
c000b839:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b83f:	88 1e                	mov    BYTE PTR [esi],bl
c000b841:	19 c0                	sbb    eax,eax
c000b843:	31 d2                	xor    edx,edx
c000b845:	83 e0 0c             	and    eax,0xc
c000b848:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b84c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b854:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b858:	83 f9 01             	cmp    ecx,0x1
c000b85b:	0f 96 c2             	setbe  dl
c000b85e:	41                   	inc    ecx
c000b85f:	01 d0                	add    eax,edx
c000b861:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b864:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b868:	83 c4 1c             	add    esp,0x1c
c000b86b:	89 f0                	mov    eax,esi
c000b86d:	5b                   	pop    ebx
c000b86e:	5e                   	pop    esi
c000b86f:	5f                   	pop    edi
c000b870:	5d                   	pop    ebp
c000b871:	c2 04 00             	ret    0x4

c000b874 <Clock::timeInDatetimeLocal()>:
c000b874:	53                   	push   ebx
c000b875:	83 ec 14             	sub    esp,0x14
c000b878:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b87c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b880:	e8 7d fc ff ff       	call   c000b502 <Clock::timeInSecondsLocal()>
c000b885:	83 c4 0c             	add    esp,0xc
c000b888:	52                   	push   edx
c000b889:	50                   	push   eax
c000b88a:	53                   	push   ebx
c000b88b:	e8 a0 fe ff ff       	call   c000b730 <secondsToDatetime(unsigned long long)>
c000b890:	89 d8                	mov    eax,ebx
c000b892:	83 c4 14             	add    esp,0x14
c000b895:	5b                   	pop    ebx
c000b896:	c2 04 00             	ret    0x4
c000b899:	90                   	nop

c000b89a <Device::hibernate()>:
c000b89a:	c3                   	ret    
c000b89b:	90                   	nop

c000b89c <Device::wake()>:
c000b89c:	c3                   	ret    
c000b89d:	90                   	nop

c000b89e <Device::detect()>:
c000b89e:	c3                   	ret    
c000b89f:	90                   	nop

c000b8a0 <Device::disableLegacy()>:
c000b8a0:	c3                   	ret    
c000b8a1:	90                   	nop

c000b8a2 <Device::powerSaving(PowerSavingLevel)>:
c000b8a2:	c3                   	ret    
c000b8a3:	90                   	nop

c000b8a4 <DriverlessDevice::close(int, int, void*)>:
c000b8a4:	31 c0                	xor    eax,eax
c000b8a6:	c3                   	ret    
c000b8a7:	90                   	nop

c000b8a8 <DriverlessDevice::detect()>:
c000b8a8:	c3                   	ret    
c000b8a9:	90                   	nop

c000b8aa <DriverlessDevice::open(int, int, void*)>:
c000b8aa:	83 ec 18             	sub    esp,0x18
c000b8ad:	68 10 df 01 c0       	push   0xc001df10
c000b8b2:	e8 48 49 00 00       	call   c00101ff <KePanic(char const*)>
c000b8b7:	83 c8 ff             	or     eax,0xffffffff
c000b8ba:	83 c4 1c             	add    esp,0x1c
c000b8bd:	c3                   	ret    

c000b8be <Device::~Device()>:
c000b8be:	ba 70 df 01 c0       	mov    edx,0xc001df70
c000b8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8c7:	89 10                	mov    DWORD PTR [eax],edx
c000b8c9:	90                   	nop
c000b8ca:	c3                   	ret    
c000b8cb:	90                   	nop

c000b8cc <Device::~Device()>:
c000b8cc:	83 ec 0c             	sub    esp,0xc
c000b8cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b8d3:	e8 e6 ff ff ff       	call   c000b8be <Device::~Device()>
c000b8d8:	83 c4 04             	add    esp,0x4
c000b8db:	83 ec 08             	sub    esp,0x8
c000b8de:	68 58 01 00 00       	push   0x158
c000b8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e7:	e8 9b eb ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000b8ec:	83 c4 10             	add    esp,0x10
c000b8ef:	83 c4 0c             	add    esp,0xc
c000b8f2:	c3                   	ret    
c000b8f3:	90                   	nop

c000b8f4 <Device::findAndLoadDriver()>:
c000b8f4:	c7 44 24 04 2e df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df2e
c000b8fc:	e9 7c ec ff ff       	jmp    c000a57d <Dbg::kprintf(char const*, ...)>
c000b901:	90                   	nop

c000b902 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b902:	57                   	push   edi
c000b903:	b9 09 00 00 00       	mov    ecx,0x9
c000b908:	56                   	push   esi
c000b909:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b90d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b911:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b91b:	81 c7 18 01 00 00    	add    edi,0x118
c000b921:	fc                   	cld    
c000b922:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b924:	5e                   	pop    esi
c000b925:	5f                   	pop    edi
c000b926:	c3                   	ret    
c000b927:	90                   	nop

c000b928 <Device::preOpenACPI(void*, char*, char*)>:
c000b928:	57                   	push   edi
c000b929:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b92e:	56                   	push   esi
c000b92f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b933:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b937:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b941:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b947:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b94d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b951:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b953:	b9 0e 00 00 00       	mov    ecx,0xe
c000b958:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b95e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b962:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b964:	5e                   	pop    esi
c000b965:	5f                   	pop    edi
c000b966:	c3                   	ret    
c000b967:	90                   	nop

c000b968 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b968:	53                   	push   ebx
c000b969:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b96d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b971:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b975:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b979:	0f b6 c0             	movzx  eax,al
c000b97c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b980:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b984:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b988:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b98c:	5b                   	pop    ebx
c000b98d:	e9 a6 05 00 00       	jmp    c000bf38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b992 <Device::getParent()>:
c000b992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b996:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b99c:	c3                   	ret    
c000b99d:	90                   	nop

c000b99e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b99e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a6:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b9ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b9af:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b9b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9b7:	e9 e8 06 00 00       	jmp    c000c0a4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b9bc <Device::addChild(Device*)>:
c000b9bc:	53                   	push   ebx
c000b9bd:	83 ec 08             	sub    esp,0x8
c000b9c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9c8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b9ce:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b9d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b9d6:	85 d2                	test   edx,edx
c000b9d8:	74 04                	je     c000b9de <Device::addChild(Device*)+0x22>
c000b9da:	89 d3                	mov    ebx,edx
c000b9dc:	eb f6                	jmp    c000b9d4 <Device::addChild(Device*)+0x18>
c000b9de:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b9e1:	83 ec 0c             	sub    esp,0xc
c000b9e4:	6a 08                	push   0x8
c000b9e6:	e8 ce bd ff ff       	call   c00077b9 <malloc>
c000b9eb:	89 03                	mov    DWORD PTR [ebx],eax
c000b9ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9fa:	83 c4 18             	add    esp,0x18
c000b9fd:	5b                   	pop    ebx
c000b9fe:	c3                   	ret    
c000b9ff:	90                   	nop

c000ba00 <Device::removeAllChildren()>:
c000ba00:	56                   	push   esi
c000ba01:	53                   	push   ebx
c000ba02:	52                   	push   edx
c000ba03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba07:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba10:	74 17                	je     c000ba29 <Device::removeAllChildren()+0x29>
c000ba12:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba15:	85 c0                	test   eax,eax
c000ba17:	74 0c                	je     c000ba25 <Device::removeAllChildren()+0x25>
c000ba19:	83 ec 0c             	sub    esp,0xc
c000ba1c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba1e:	50                   	push   eax
c000ba1f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ba22:	83 c4 10             	add    esp,0x10
c000ba25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba27:	eb e4                	jmp    c000ba0d <Device::removeAllChildren()+0xd>
c000ba29:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba35:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba3b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba42:	58                   	pop    eax
c000ba43:	5b                   	pop    ebx
c000ba44:	5e                   	pop    esi
c000ba45:	c3                   	ret    

c000ba46 <Device::hibernateAll()>:
c000ba46:	53                   	push   ebx
c000ba47:	83 ec 14             	sub    esp,0x14
c000ba4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba50:	53                   	push   ebx
c000ba51:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba54:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba5a:	83 c4 10             	add    esp,0x10
c000ba5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba60:	74 0f                	je     c000ba71 <Device::hibernateAll()+0x2b>
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba68:	e8 d9 ff ff ff       	call   c000ba46 <Device::hibernateAll()>
c000ba6d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba6f:	eb e9                	jmp    c000ba5a <Device::hibernateAll()+0x14>
c000ba71:	83 c4 08             	add    esp,0x8
c000ba74:	5b                   	pop    ebx
c000ba75:	c3                   	ret    

c000ba76 <Device::wakeAll()>:
c000ba76:	53                   	push   ebx
c000ba77:	83 ec 14             	sub    esp,0x14
c000ba7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba80:	53                   	push   ebx
c000ba81:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba8a:	83 c4 10             	add    esp,0x10
c000ba8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba90:	74 0f                	je     c000baa1 <Device::wakeAll()+0x2b>
c000ba92:	83 ec 0c             	sub    esp,0xc
c000ba95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba98:	e8 d9 ff ff ff       	call   c000ba76 <Device::wakeAll()>
c000ba9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba9f:	eb e9                	jmp    c000ba8a <Device::wakeAll()+0x14>
c000baa1:	83 c4 08             	add    esp,0x8
c000baa4:	5b                   	pop    ebx
c000baa5:	c3                   	ret    

c000baa6 <Device::detectAll()>:
c000baa6:	53                   	push   ebx
c000baa7:	83 ec 14             	sub    esp,0x14
c000baaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000baae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bab0:	53                   	push   ebx
c000bab1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bab4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bac0:	74 0f                	je     c000bad1 <Device::detectAll()+0x2b>
c000bac2:	83 ec 0c             	sub    esp,0xc
c000bac5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bac8:	e8 d9 ff ff ff       	call   c000baa6 <Device::detectAll()>
c000bacd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bacf:	eb e9                	jmp    c000baba <Device::detectAll()+0x14>
c000bad1:	83 c4 08             	add    esp,0x8
c000bad4:	5b                   	pop    ebx
c000bad5:	c3                   	ret    

c000bad6 <Device::disableLegacyAll()>:
c000bad6:	c3                   	ret    
c000bad7:	90                   	nop

c000bad8 <Device::loadDriversForAll()>:
c000bad8:	c3                   	ret    
c000bad9:	90                   	nop

c000bada <Device::closeAll()>:
c000bada:	53                   	push   ebx
c000badb:	83 ec 08             	sub    esp,0x8
c000bade:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bae2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bae4:	6a 00                	push   0x0
c000bae6:	6a 00                	push   0x0
c000bae8:	6a 00                	push   0x0
c000baea:	53                   	push   ebx
c000baeb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baf4:	83 c4 10             	add    esp,0x10
c000baf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bafa:	74 0f                	je     c000bb0b <Device::closeAll()+0x31>
c000bafc:	83 ec 0c             	sub    esp,0xc
c000baff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb02:	e8 d3 ff ff ff       	call   c000bada <Device::closeAll()>
c000bb07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb09:	eb e9                	jmp    c000baf4 <Device::closeAll()+0x1a>
c000bb0b:	83 c4 08             	add    esp,0x8
c000bb0e:	5b                   	pop    ebx
c000bb0f:	c3                   	ret    

c000bb10 <Device::powerSavingAll(PowerSavingLevel)>:
c000bb10:	56                   	push   esi
c000bb11:	53                   	push   ebx
c000bb12:	83 ec 0c             	sub    esp,0xc
c000bb15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb19:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bb1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb1f:	56                   	push   esi
c000bb20:	53                   	push   ebx
c000bb21:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bb24:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb2a:	83 c4 10             	add    esp,0x10
c000bb2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb30:	74 0f                	je     c000bb41 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bb32:	52                   	push   edx
c000bb33:	52                   	push   edx
c000bb34:	56                   	push   esi
c000bb35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb38:	e8 d3 ff ff ff       	call   c000bb10 <Device::powerSavingAll(PowerSavingLevel)>
c000bb3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb3f:	eb e9                	jmp    c000bb2a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bb41:	58                   	pop    eax
c000bb42:	5b                   	pop    ebx
c000bb43:	5e                   	pop    esi
c000bb44:	c3                   	ret    
c000bb45:	90                   	nop

c000bb46 <Device::setName(char const*)>:
c000bb46:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bb4e:	e9 ad 4a ff ff       	jmp    c0000600 <strcpy>
c000bb53:	90                   	nop

c000bb54 <Device::Device(char const*)>:
c000bb54:	83 ec 1c             	sub    esp,0x1c
c000bb57:	ba 70 df 01 c0       	mov    edx,0xc001df70
c000bb5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb60:	89 10                	mov    DWORD PTR [eax],edx
c000bb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb66:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb74:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb82:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb90:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb9a:	83 ec 08             	sub    esp,0x8
c000bb9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba5:	e8 9c ff ff ff       	call   c000bb46 <Device::setName(char const*)>
c000bbaa:	83 c4 10             	add    esp,0x10
c000bbad:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bbb5:	83 ec 0c             	sub    esp,0xc
c000bbb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbbc:	e8 f8 bb ff ff       	call   c00077b9 <malloc>
c000bbc1:	83 c4 10             	add    esp,0x10
c000bbc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbd1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bbd5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbdf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbe5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbf5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc00:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc16:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc24:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc32:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc40:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bc4a:	90                   	nop
c000bc4b:	83 c4 1c             	add    esp,0x1c
c000bc4e:	c3                   	ret    
c000bc4f:	90                   	nop

c000bc50 <Device::getName()>:
c000bc50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc54:	05 d0 00 00 00       	add    eax,0xd0
c000bc59:	c3                   	ret    

c000bc5a <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc5a:	83 ec 0c             	sub    esp,0xc
c000bc5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc61:	83 ec 08             	sub    esp,0x8
c000bc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc68:	50                   	push   eax
c000bc69:	e8 e6 fe ff ff       	call   c000bb54 <Device::Device(char const*)>
c000bc6e:	83 c4 10             	add    esp,0x10
c000bc71:	ba 9c df 01 c0       	mov    edx,0xc001df9c
c000bc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7a:	89 10                	mov    DWORD PTR [eax],edx
c000bc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc80:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc8a:	90                   	nop
c000bc8b:	83 c4 0c             	add    esp,0xc
c000bc8e:	c3                   	ret    
c000bc8f:	90                   	nop

c000bc90 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc90:	57                   	push   edi
c000bc91:	56                   	push   esi
c000bc92:	53                   	push   ebx
c000bc93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc9f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bca5:	75 0c                	jne    c000bcb3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bca7:	52                   	push   edx
c000bca8:	52                   	push   edx
c000bca9:	53                   	push   ebx
c000bcaa:	56                   	push   esi
c000bcab:	e8 52 09 01 00       	call   c001c602 <LinkedList<Device>::addElement(Device*)>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bcb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bcbc:	74 12                	je     c000bcd0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bcbe:	50                   	push   eax
c000bcbf:	57                   	push   edi
c000bcc0:	56                   	push   esi
c000bcc1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bcc4:	e8 c7 ff ff ff       	call   c000bc90 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bcc9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bccb:	83 c4 10             	add    esp,0x10
c000bcce:	eb e9                	jmp    c000bcb9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bcd0:	5b                   	pop    ebx
c000bcd1:	5e                   	pop    esi
c000bcd2:	5f                   	pop    edi
c000bcd3:	c3                   	ret    

c000bcd4 <getDevicesOfType(DeviceType)>:
c000bcd4:	53                   	push   ebx
c000bcd5:	83 ec 14             	sub    esp,0x14
c000bcd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcdc:	53                   	push   ebx
c000bcdd:	e8 fc 09 01 00       	call   c001c6de <LinkedList<Device>::LinkedList()>
c000bce2:	83 c4 0c             	add    esp,0xc
c000bce5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bce9:	53                   	push   ebx
c000bcea:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bcf0:	e8 9b ff ff ff       	call   c000bc90 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bcf5:	89 d8                	mov    eax,ebx
c000bcf7:	83 c4 18             	add    esp,0x18
c000bcfa:	5b                   	pop    ebx
c000bcfb:	c2 04 00             	ret    0x4
c000bcfe:	66 90                	xchg   ax,ax

c000bd00 <HardDiskController::HardDiskController(char const*)>:
c000bd00:	83 ec 0c             	sub    esp,0xc
c000bd03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd07:	83 ec 08             	sub    esp,0x8
c000bd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd0e:	50                   	push   eax
c000bd0f:	e8 40 fe ff ff       	call   c000bb54 <Device::Device(char const*)>
c000bd14:	83 c4 10             	add    esp,0x10
c000bd17:	ba c8 df 01 c0       	mov    edx,0xc001dfc8
c000bd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd20:	89 10                	mov    DWORD PTR [eax],edx
c000bd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd26:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bd30:	90                   	nop
c000bd31:	83 c4 0c             	add    esp,0xc
c000bd34:	c3                   	ret    
c000bd35:	90                   	nop
c000bd36:	66 90                	xchg   ax,ax

c000bd38 <HardDiskController::~HardDiskController()>:
c000bd38:	83 ec 0c             	sub    esp,0xc
c000bd3b:	ba c8 df 01 c0       	mov    edx,0xc001dfc8
c000bd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd44:	89 10                	mov    DWORD PTR [eax],edx
c000bd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	50                   	push   eax
c000bd4e:	e8 6b fb ff ff       	call   c000b8be <Device::~Device()>
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	90                   	nop
c000bd57:	83 c4 0c             	add    esp,0xc
c000bd5a:	c3                   	ret    
c000bd5b:	90                   	nop

c000bd5c <HardDiskController::~HardDiskController()>:
c000bd5c:	83 ec 0c             	sub    esp,0xc
c000bd5f:	83 ec 0c             	sub    esp,0xc
c000bd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd66:	e8 cd ff ff ff       	call   c000bd38 <HardDiskController::~HardDiskController()>
c000bd6b:	83 c4 10             	add    esp,0x10
c000bd6e:	83 ec 08             	sub    esp,0x8
c000bd71:	68 58 01 00 00       	push   0x158
c000bd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd7a:	e8 08 e7 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000bd7f:	83 c4 10             	add    esp,0x10
c000bd82:	83 c4 0c             	add    esp,0xc
c000bd85:	c3                   	ret    

c000bd86 <PhysicalDisk::eject()>:
c000bd86:	83 c8 ff             	or     eax,0xffffffff
c000bd89:	c3                   	ret    

c000bd8a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd8a:	83 ec 0c             	sub    esp,0xc
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	83 ec 08             	sub    esp,0x8
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	50                   	push   eax
c000bd99:	e8 b6 fd ff ff       	call   c000bb54 <Device::Device(char const*)>
c000bd9e:	83 c4 10             	add    esp,0x10
c000bda1:	ba f4 df 01 c0       	mov    edx,0xc001dff4
c000bda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdaa:	89 10                	mov    DWORD PTR [eax],edx
c000bdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdd8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bdec:	90                   	nop
c000bded:	83 c4 0c             	add    esp,0xc
c000bdf0:	c3                   	ret    
c000bdf1:	90                   	nop

c000bdf2 <PhysicalDisk::startCache()>:
c000bdf2:	56                   	push   esi
c000bdf3:	53                   	push   ebx
c000bdf4:	83 ec 10             	sub    esp,0x10
c000bdf7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdfb:	6a 44                	push   0x44
c000bdfd:	e8 b7 b9 ff ff       	call   c00077b9 <malloc>
c000be02:	89 c6                	mov    esi,eax
c000be04:	58                   	pop    eax
c000be05:	5a                   	pop    edx
c000be06:	53                   	push   ebx
c000be07:	56                   	push   esi
c000be08:	e8 eb 15 00 00       	call   c000d3f8 <VCache::VCache(PhysicalDisk*)>
c000be0d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be13:	83 c4 14             	add    esp,0x14
c000be16:	5b                   	pop    ebx
c000be17:	5e                   	pop    esi
c000be18:	c3                   	ret    
c000be19:	90                   	nop

c000be1a <PhysicalDisk::~PhysicalDisk()>:
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	ba f4 df 01 c0       	mov    edx,0xc001dff4
c000be22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be26:	89 10                	mov    DWORD PTR [eax],edx
c000be28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	50                   	push   eax
c000be30:	e8 89 fa ff ff       	call   c000b8be <Device::~Device()>
c000be35:	83 c4 10             	add    esp,0x10
c000be38:	90                   	nop
c000be39:	83 c4 0c             	add    esp,0xc
c000be3c:	c3                   	ret    
c000be3d:	90                   	nop

c000be3e <PhysicalDisk::~PhysicalDisk()>:
c000be3e:	83 ec 0c             	sub    esp,0xc
c000be41:	83 ec 0c             	sub    esp,0xc
c000be44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be48:	e8 cd ff ff ff       	call   c000be1a <PhysicalDisk::~PhysicalDisk()>
c000be4d:	83 c4 10             	add    esp,0x10
c000be50:	83 ec 08             	sub    esp,0x8
c000be53:	68 6c 01 00 00       	push   0x16c
c000be58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be5c:	e8 26 e6 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000be61:	83 c4 10             	add    esp,0x10
c000be64:	83 c4 0c             	add    esp,0xc
c000be67:	c3                   	ret    

c000be68 <int_handler>:
c000be68:	55                   	push   ebp
c000be69:	57                   	push   edi
c000be6a:	56                   	push   esi
c000be6b:	53                   	push   ebx
c000be6c:	83 ec 0c             	sub    esp,0xc
c000be6f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be73:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be7a:	74 0b                	je     c000be87 <int_handler+0x1f>
c000be7c:	fa                   	cli    
c000be7d:	f4                   	hlt    
c000be7e:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be85:	75 f5                	jne    c000be7c <int_handler+0x14>
c000be87:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be8a:	8d 46 e0             	lea    eax,[esi-0x20]
c000be8d:	83 f8 17             	cmp    eax,0x17
c000be90:	76 3e                	jbe    c000bed0 <int_handler+0x68>
c000be92:	c1 e6 04             	shl    esi,0x4
c000be95:	31 db                	xor    ebx,ebx
c000be97:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000be9d:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000bea3:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bea7:	85 c0                	test   eax,eax
c000bea9:	74 13                	je     c000bebe <int_handler+0x56>
c000beab:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000beae:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000beb2:	74 2a                	je     c000bede <int_handler+0x76>
c000beb4:	83 ec 08             	sub    esp,0x8
c000beb7:	52                   	push   edx
c000beb8:	57                   	push   edi
c000beb9:	ff d0                	call   eax
c000bebb:	83 c4 10             	add    esp,0x10
c000bebe:	43                   	inc    ebx
c000bebf:	83 fb 04             	cmp    ebx,0x4
c000bec2:	75 df                	jne    c000bea3 <int_handler+0x3b>
c000bec4:	83 c4 0c             	add    esp,0xc
c000bec7:	31 c0                	xor    eax,eax
c000bec9:	5b                   	pop    ebx
c000beca:	31 d2                	xor    edx,edx
c000becc:	5e                   	pop    esi
c000becd:	5f                   	pop    edi
c000bece:	5d                   	pop    ebp
c000becf:	c3                   	ret    
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	50                   	push   eax
c000bed4:	e8 0a 9a 00 00       	call   c00158e3 <HalEndOfInterrupt(int)>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	eb b4                	jmp    c000be92 <int_handler+0x2a>
c000bede:	83 ec 08             	sub    esp,0x8
c000bee1:	52                   	push   edx
c000bee2:	57                   	push   edi
c000bee3:	ff d0                	call   eax
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	83 c4 0c             	add    esp,0xc
c000beeb:	5b                   	pop    ebx
c000beec:	5e                   	pop    esi
c000beed:	5f                   	pop    edi
c000beee:	5d                   	pop    ebp
c000beef:	c3                   	ret    

c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bef0:	56                   	push   esi
c000bef1:	31 c0                	xor    eax,eax
c000bef3:	53                   	push   ebx
c000bef4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bef8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000befc:	89 ca                	mov    edx,ecx
c000befe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf02:	c1 e2 04             	shl    edx,0x4
c000bf05:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bf0d:	74 15                	je     c000bf24 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf0f:	40                   	inc    eax
c000bf10:	83 f8 04             	cmp    eax,0x4
c000bf13:	75 f0                	jne    c000bf05 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf15:	c7 44 24 0c 24 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e024
c000bf1d:	5b                   	pop    ebx
c000bf1e:	5e                   	pop    esi
c000bf1f:	e9 db 42 00 00       	jmp    c00101ff <KePanic(char const*)>
c000bf24:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bf27:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bf2e:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bf35:	5b                   	pop    ebx
c000bf36:	5e                   	pop    esi
c000bf37:	c3                   	ret    

c000bf38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf38:	57                   	push   edi
c000bf39:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000bf3f:	56                   	push   esi
c000bf40:	53                   	push   ebx
c000bf41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf49:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf50:	74 5b                	je     c000bfad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf52:	89 c7                	mov    edi,eax
c000bf54:	84 c0                	test   al,al
c000bf56:	74 24                	je     c000bf7c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf58:	83 fe 0f             	cmp    esi,0xf
c000bf5b:	0f 8f d9 00 00 00    	jg     c000c03a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf61:	8a 86 60 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe07a0]
c000bf67:	25 ff 00 00 00       	and    eax,0xff
c000bf6c:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bf74:	89 c6                	mov    esi,eax
c000bf76:	66 d1 ef             	shr    di,1
c000bf79:	83 e7 01             	and    edi,0x1
c000bf7c:	83 ec 08             	sub    esp,0x8
c000bf7f:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf84:	31 db                	xor    ebx,ebx
c000bf86:	50                   	push   eax
c000bf87:	68 31 e0 01 c0       	push   0xc001e031
c000bf8c:	e8 ec e5 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000bf91:	83 c4 10             	add    esp,0x10
c000bf94:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf99:	85 c0                	test   eax,eax
c000bf9b:	7f 51                	jg     c000bfee <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf9d:	83 ec 0c             	sub    esp,0xc
c000bfa0:	68 48 e0 01 c0       	push   0xc001e048
c000bfa5:	e8 55 42 00 00       	call   c00101ff <KePanic(char const*)>
c000bfaa:	83 c4 10             	add    esp,0x10
c000bfad:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bfb0:	31 d2                	xor    edx,edx
c000bfb2:	89 c8                	mov    eax,ecx
c000bfb4:	c1 e0 04             	shl    eax,0x4
c000bfb7:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000bfbe:	85 db                	test   ebx,ebx
c000bfc0:	0f 84 8b 00 00 00    	je     c000c051 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bfc6:	42                   	inc    edx
c000bfc7:	83 fa 04             	cmp    edx,0x4
c000bfca:	75 eb                	jne    c000bfb7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bfcc:	83 ec 0c             	sub    esp,0xc
c000bfcf:	68 9c e0 01 c0       	push   0xc001e09c
c000bfd4:	e8 26 42 00 00       	call   c00101ff <KePanic(char const*)>
c000bfd9:	83 c4 10             	add    esp,0x10
c000bfdc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bfe1:	5b                   	pop    ebx
c000bfe2:	5e                   	pop    esi
c000bfe3:	5f                   	pop    edi
c000bfe4:	c3                   	ret    
c000bfe5:	43                   	inc    ebx
c000bfe6:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000bfec:	7e af                	jle    c000bf9d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bfee:	83 ec 08             	sub    esp,0x8
c000bff1:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bff8:	56                   	push   esi
c000bff9:	50                   	push   eax
c000bffa:	e8 d1 f5 00 00       	call   c001b5d0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	84 c0                	test   al,al
c000c004:	74 df                	je     c000bfe5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c006:	81 e7 ff 00 00 00    	and    edi,0xff
c000c00c:	50                   	push   eax
c000c00d:	8d 46 20             	lea    eax,[esi+0x20]
c000c010:	57                   	push   edi
c000c011:	25 ff 00 00 00       	and    eax,0xff
c000c016:	6a 00                	push   0x0
c000c018:	50                   	push   eax
c000c019:	89 f0                	mov    eax,esi
c000c01b:	6a 00                	push   0x0
c000c01d:	25 ff 00 00 00       	and    eax,0xff
c000c022:	6a 00                	push   0x0
c000c024:	50                   	push   eax
c000c025:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c02c:	50                   	push   eax
c000c02d:	e8 18 f7 00 00       	call   c001b74a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c032:	83 c4 20             	add    esp,0x20
c000c035:	e9 73 ff ff ff       	jmp    c000bfad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c03a:	83 ec 0c             	sub    esp,0xc
c000c03d:	31 ff                	xor    edi,edi
c000c03f:	68 64 e0 01 c0       	push   0xc001e064
c000c044:	e8 b6 41 00 00       	call   c00101ff <KePanic(char const*)>
c000c049:	83 c4 10             	add    esp,0x10
c000c04c:	e9 2b ff ff ff       	jmp    c000bf7c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c051:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c054:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c058:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c05f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c063:	5b                   	pop    ebx
c000c064:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c06b:	89 f0                	mov    eax,esi
c000c06d:	5e                   	pop    esi
c000c06e:	5f                   	pop    edi
c000c06f:	c3                   	ret    

c000c070 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c074:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c078:	c1 e0 04             	shl    eax,0x4
c000c07b:	8d 50 10             	lea    edx,[eax+0x10]
c000c07e:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c084:	74 08                	je     c000c08e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c086:	83 c0 04             	add    eax,0x4
c000c089:	39 d0                	cmp    eax,edx
c000c08b:	75 f1                	jne    c000c07e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c08d:	c3                   	ret    
c000c08e:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c098:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0a2:	eb e2                	jmp    c000c086 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c0a4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c0a4:	53                   	push   ebx
c000c0a5:	83 ec 08             	sub    esp,0x8
c000c0a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c0ac:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c0b1:	74 0e                	je     c000c0c1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0b3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c0b8:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c0bf:	75 37                	jne    c000c0f8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c5:	83 c0 20             	add    eax,0x20
c000c0c8:	c1 e0 04             	shl    eax,0x4
c000c0cb:	8d 50 10             	lea    edx,[eax+0x10]
c000c0ce:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c0d4:	74 0c                	je     c000c0e2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c0d6:	83 c0 04             	add    eax,0x4
c000c0d9:	39 d0                	cmp    eax,edx
c000c0db:	75 f1                	jne    c000c0ce <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c0dd:	83 c4 08             	add    esp,0x8
c000c0e0:	5b                   	pop    ebx
c000c0e1:	c3                   	ret    
c000c0e2:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0ec:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0f6:	eb de                	jmp    c000c0d6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c0f8:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c0fd:	7f 12                	jg     c000c111 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c0ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c103:	31 c0                	xor    eax,eax
c000c105:	8a 81 60 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe07a0]
c000c10b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c10f:	eb b0                	jmp    c000c0c1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c111:	83 ec 0c             	sub    esp,0xc
c000c114:	68 55 e0 01 c0       	push   0xc001e055
c000c119:	e8 e1 40 00 00       	call   c00101ff <KePanic(char const*)>
c000c11e:	83 c4 10             	add    esp,0x10
c000c121:	eb 9e                	jmp    c000c0c1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c123 <setupINTS()>:
c000c123:	31 c0                	xor    eax,eax
c000c125:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c12f:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c139:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c143:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c14d:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c157:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c161:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c16b:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c175:	83 c0 10             	add    eax,0x10
c000c178:	3d 00 10 00 00       	cmp    eax,0x1000
c000c17d:	75 a6                	jne    c000c125 <setupINTS()+0x2>
c000c17f:	c3                   	ret    

c000c180 <convertLegacyIRQNumber(int)>:
c000c180:	83 ec 0c             	sub    esp,0xc
c000c183:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c18d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c194:	74 0f                	je     c000c1a5 <convertLegacyIRQNumber(int)+0x25>
c000c196:	83 f8 0f             	cmp    eax,0xf
c000c199:	7f 0e                	jg     c000c1a9 <convertLegacyIRQNumber(int)+0x29>
c000c19b:	31 c9                	xor    ecx,ecx
c000c19d:	8a 88 60 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe07a0]
c000c1a3:	89 c8                	mov    eax,ecx
c000c1a5:	83 c4 0c             	add    esp,0xc
c000c1a8:	c3                   	ret    
c000c1a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1ad:	83 ec 0c             	sub    esp,0xc
c000c1b0:	68 64 e0 01 c0       	push   0xc001e064
c000c1b5:	e8 45 40 00 00       	call   c00101ff <KePanic(char const*)>
c000c1ba:	83 c4 10             	add    esp,0x10
c000c1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c1:	83 c4 0c             	add    esp,0xc
c000c1c4:	c3                   	ret    
c000c1c5:	90                   	nop

c000c1c6 <startGUI(void*)>:
c000c1c6:	55                   	push   ebp
c000c1c7:	89 e5                	mov    ebp,esp
c000c1c9:	53                   	push   ebx
c000c1ca:	83 ec 04             	sub    esp,0x4
c000c1cd:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1d2:	48                   	dec    eax
c000c1d3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c1d8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1dd:	85 c0                	test   eax,eax
c000c1df:	75 01                	jne    c000c1e2 <startGUI(void*)+0x1c>
c000c1e1:	fb                   	sti    
c000c1e2:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1e8:	83 ec 08             	sub    esp,0x8
c000c1eb:	6a 01                	push   0x1
c000c1ed:	68 c1 e0 01 c0       	push   0xc001e0c1
c000c1f2:	e8 d2 6b 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c000c1f7:	83 c4 10             	add    esp,0x10
c000c1fa:	83 ec 08             	sub    esp,0x8
c000c1fd:	53                   	push   ebx
c000c1fe:	50                   	push   eax
c000c1ff:	e8 f6 6d 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c000c204:	83 c4 10             	add    esp,0x10
c000c207:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c20d:	83 ec 08             	sub    esp,0x8
c000c210:	6a 01                	push   0x1
c000c212:	68 db e0 01 c0       	push   0xc001e0db
c000c217:	e8 ad 6b 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c000c21c:	83 c4 10             	add    esp,0x10
c000c21f:	83 ec 08             	sub    esp,0x8
c000c222:	53                   	push   ebx
c000c223:	50                   	push   eax
c000c224:	e8 d1 6d 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	90                   	nop
c000c22d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c230:	c9                   	leave  
c000c231:	c3                   	ret    

c000c232 <startGUIVESA(void*)>:
c000c232:	55                   	push   ebp
c000c233:	89 e5                	mov    ebp,esp
c000c235:	53                   	push   ebx
c000c236:	83 ec 04             	sub    esp,0x4
c000c239:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c23e:	48                   	dec    eax
c000c23f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c244:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c249:	85 c0                	test   eax,eax
c000c24b:	75 01                	jne    c000c24e <startGUIVESA(void*)+0x1c>
c000c24d:	fb                   	sti    
c000c24e:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c254:	83 ec 08             	sub    esp,0x8
c000c257:	6a 01                	push   0x1
c000c259:	68 f9 e0 01 c0       	push   0xc001e0f9
c000c25e:	e8 66 6b 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c000c263:	83 c4 10             	add    esp,0x10
c000c266:	83 ec 08             	sub    esp,0x8
c000c269:	53                   	push   ebx
c000c26a:	50                   	push   eax
c000c26b:	e8 8a 6d 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c000c270:	83 c4 10             	add    esp,0x10
c000c273:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c279:	83 ec 08             	sub    esp,0x8
c000c27c:	6a 01                	push   0x1
c000c27e:	68 db e0 01 c0       	push   0xc001e0db
c000c283:	e8 41 6b 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	83 ec 08             	sub    esp,0x8
c000c28e:	53                   	push   ebx
c000c28f:	50                   	push   eax
c000c290:	e8 65 6d 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	90                   	nop
c000c299:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c29c:	c9                   	leave  
c000c29d:	c3                   	ret    

c000c29e <sendKeyToTerminal(unsigned char)>:
c000c29e:	55                   	push   ebp
c000c29f:	89 e5                	mov    ebp,esp
c000c2a1:	83 ec 28             	sub    esp,0x28
c000c2a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c2aa:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c2b0:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c2b3:	25 ff 00 00 00       	and    eax,0xff
c000c2b8:	83 ec 08             	sub    esp,0x8
c000c2bb:	50                   	push   eax
c000c2bc:	52                   	push   edx
c000c2bd:	e8 84 c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c2c2:	83 c4 10             	add    esp,0x10
c000c2c5:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c2c9:	74 0a                	je     c000c2d5 <sendKeyToTerminal(unsigned char)+0x37>
c000c2cb:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c2cf:	0f 85 8f 00 00 00    	jne    c000c364 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2d5:	fa                   	cli    
c000c2d6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2db:	40                   	inc    eax
c000c2dc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2e1:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2e6:	40                   	inc    eax
c000c2e7:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2ec:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c2f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2f4:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c2fe:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c302:	74 1f                	je     c000c323 <sendKeyToTerminal(unsigned char)+0x85>
c000c304:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c307:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c30a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c30d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c310:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c313:	83 ec 0c             	sub    esp,0xc
c000c316:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c319:	e8 9a 79 00 00       	call   c0013cb8 <unblockTask(ThreadControlBlock*)>
c000c31e:	83 c4 10             	add    esp,0x10
c000c321:	eb db                	jmp    c000c2fe <sendKeyToTerminal(unsigned char)+0x60>
c000c323:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c328:	48                   	dec    eax
c000c329:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c32e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c333:	85 c0                	test   eax,eax
c000c335:	75 18                	jne    c000c34f <sendKeyToTerminal(unsigned char)+0xb1>
c000c337:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c33c:	85 c0                	test   eax,eax
c000c33e:	74 0f                	je     c000c34f <sendKeyToTerminal(unsigned char)+0xb1>
c000c340:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c34a:	e8 a5 74 00 00       	call   c00137f4 <schedule()>
c000c34f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c354:	48                   	dec    eax
c000c355:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c35a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c35f:	85 c0                	test   eax,eax
c000c361:	75 01                	jne    c000c364 <sendKeyToTerminal(unsigned char)+0xc6>
c000c363:	fb                   	sti    
c000c364:	90                   	nop
c000c365:	c9                   	leave  
c000c366:	c3                   	ret    

c000c367 <sendKeyboardToken(KeyboardToken)>:
c000c367:	55                   	push   ebp
c000c368:	89 e5                	mov    ebp,esp
c000c36a:	83 ec 18             	sub    esp,0x18
c000c36d:	e8 dd 3e 00 00       	call   c001024f <Krnl::userIOReceived()>
c000c372:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c378:	25 ff ff 00 00       	and    eax,0xffff
c000c37d:	83 f2 01             	xor    edx,0x1
c000c380:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c386:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c38b:	85 c0                	test   eax,eax
c000c38d:	74 24                	je     c000c3b3 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c38f:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c395:	83 ec 04             	sub    esp,0x4
c000c398:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c39d:	83 ec 08             	sub    esp,0x8
c000c3a0:	89 e2                	mov    edx,esp
c000c3a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a5:	89 02                	mov    DWORD PTR [edx],eax
c000c3a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c3aa:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c3ae:	ff d1                	call   ecx
c000c3b0:	83 c4 10             	add    esp,0x10
c000c3b3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c3b7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c3ba:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c3bf:	38 c2                	cmp    dl,al
c000c3c1:	74 1e                	je     c000c3e1 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c3c3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c3c6:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c3cb:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c3d0:	25 ff 00 00 00       	and    eax,0xff
c000c3d5:	83 ec 0c             	sub    esp,0xc
c000c3d8:	50                   	push   eax
c000c3d9:	e8 ba bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c3de:	83 c4 10             	add    esp,0x10
c000c3e1:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c3e4:	84 c0                	test   al,al
c000c3e6:	0f 84 ae 00 00 00    	je     c000c49a <sendKeyboardToken(KeyboardToken)+0x133>
c000c3ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ef:	66 3d 10 03          	cmp    ax,0x310
c000c3f3:	75 06                	jne    c000c3fb <sendKeyboardToken(KeyboardToken)+0x94>
c000c3f5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c3fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3fe:	66 3d 11 03          	cmp    ax,0x311
c000c402:	75 06                	jne    c000c40a <sendKeyboardToken(KeyboardToken)+0xa3>
c000c404:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c40a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40d:	66 3d 12 03          	cmp    ax,0x312
c000c411:	75 06                	jne    c000c419 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c413:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41c:	66 3d 13 03          	cmp    ax,0x313
c000c420:	75 06                	jne    c000c428 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c422:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42b:	66 3d 14 03          	cmp    ax,0x314
c000c42f:	75 06                	jne    c000c437 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c431:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43a:	66 3d 15 03          	cmp    ax,0x315
c000c43e:	75 06                	jne    c000c446 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c440:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c449:	66 3d 16 03          	cmp    ax,0x316
c000c44d:	75 06                	jne    c000c455 <sendKeyboardToken(KeyboardToken)+0xee>
c000c44f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c458:	66 3d 17 03          	cmp    ax,0x317
c000c45c:	75 06                	jne    c000c464 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c45e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c467:	66 3d 18 03          	cmp    ax,0x318
c000c46b:	75 06                	jne    c000c473 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c46d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c476:	66 3d 19 03          	cmp    ax,0x319
c000c47a:	75 06                	jne    c000c482 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c47c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c485:	66 3d 1a 03          	cmp    ax,0x31a
c000c489:	0f 85 c9 00 00 00    	jne    c000c558 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c48f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c495:	e9 be 00 00 00       	jmp    c000c558 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c49a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49d:	66 3d 10 03          	cmp    ax,0x310
c000c4a1:	75 0a                	jne    c000c4ad <sendKeyboardToken(KeyboardToken)+0x146>
c000c4a3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c4a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b0:	66 3d 11 03          	cmp    ax,0x311
c000c4b4:	75 0a                	jne    c000c4c0 <sendKeyboardToken(KeyboardToken)+0x159>
c000c4b6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c4bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c3:	66 3d 12 03          	cmp    ax,0x312
c000c4c7:	75 0a                	jne    c000c4d3 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c4c9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c4cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d6:	66 3d 13 03          	cmp    ax,0x313
c000c4da:	75 0a                	jne    c000c4e6 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c4dc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c4e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e9:	66 3d 14 03          	cmp    ax,0x314
c000c4ed:	75 0a                	jne    c000c4f9 <sendKeyboardToken(KeyboardToken)+0x192>
c000c4ef:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c4f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fc:	66 3d 15 03          	cmp    ax,0x315
c000c500:	75 0a                	jne    c000c50c <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c502:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c508:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c50c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50f:	66 3d 16 03          	cmp    ax,0x316
c000c513:	75 0a                	jne    c000c51f <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c515:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c51b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c522:	66 3d 17 03          	cmp    ax,0x317
c000c526:	75 0a                	jne    c000c532 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c528:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c52e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c535:	66 3d 18 03          	cmp    ax,0x318
c000c539:	75 0a                	jne    c000c545 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c53b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c541:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c548:	66 3d 19 03          	cmp    ax,0x319
c000c54c:	75 0a                	jne    c000c558 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c54e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c554:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55b:	66 3d 00 02          	cmp    ax,0x200
c000c55f:	75 2c                	jne    c000c58d <sendKeyboardToken(KeyboardToken)+0x226>
c000c561:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c566:	83 f0 01             	xor    eax,0x1
c000c569:	84 c0                	test   al,al
c000c56b:	74 20                	je     c000c58d <sendKeyboardToken(KeyboardToken)+0x226>
c000c56d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c572:	6a 01                	push   0x1
c000c574:	6a 00                	push   0x0
c000c576:	68 c6 c1 00 c0       	push   0xc000c1c6
c000c57b:	50                   	push   eax
c000c57c:	e8 53 70 00 00       	call   c00135d4 <Process::createThread(void (*)(void*), void*, int)>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c58b:	eb 33                	jmp    c000c5c0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c590:	66 3d 01 02          	cmp    ax,0x201
c000c594:	75 2a                	jne    c000c5c0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c596:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c59b:	83 f0 01             	xor    eax,0x1
c000c59e:	84 c0                	test   al,al
c000c5a0:	74 1e                	je     c000c5c0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c5a2:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c5a7:	6a 01                	push   0x1
c000c5a9:	6a 00                	push   0x0
c000c5ab:	68 32 c2 00 c0       	push   0xc000c232
c000c5b0:	50                   	push   eax
c000c5b1:	e8 1e 70 00 00       	call   c00135d4 <Process::createThread(void (*)(void*), void*, int)>
c000c5b6:	83 c4 10             	add    esp,0x10
c000c5b9:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c5c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c3:	66 3d 1d 03          	cmp    ax,0x31d
c000c5c7:	75 06                	jne    c000c5cf <sendKeyboardToken(KeyboardToken)+0x268>
c000c5c9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d2:	66 3d 1c 03          	cmp    ax,0x31c
c000c5d6:	75 06                	jne    c000c5de <sendKeyboardToken(KeyboardToken)+0x277>
c000c5d8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c5de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e1:	66 3d 1b 03          	cmp    ax,0x31b
c000c5e5:	75 06                	jne    c000c5ed <sendKeyboardToken(KeyboardToken)+0x286>
c000c5e7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f0:	66 3d 1e 03          	cmp    ax,0x31e
c000c5f4:	75 06                	jne    c000c5fc <sendKeyboardToken(KeyboardToken)+0x295>
c000c5f6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c5fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ff:	66 3d 1f 03          	cmp    ax,0x31f
c000c603:	75 06                	jne    c000c60b <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c605:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c60e:	66 3d 1a 03          	cmp    ax,0x31a
c000c612:	75 06                	jne    c000c61a <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c614:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c61a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c61e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c621:	83 f0 01             	xor    eax,0x1
c000c624:	84 c0                	test   al,al
c000c626:	74 7b                	je     c000c6a3 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c628:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c62d:	84 c0                	test   al,al
c000c62f:	74 43                	je     c000c674 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c631:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c635:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c639:	74 2d                	je     c000c668 <sendKeyboardToken(KeyboardToken)+0x301>
c000c63b:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c641:	89 d0                	mov    eax,edx
c000c643:	c1 e0 02             	shl    eax,0x2
c000c646:	01 d0                	add    eax,edx
c000c648:	01 c0                	add    eax,eax
c000c64a:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c64f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c652:	25 ff ff 00 00       	and    eax,0xffff
c000c657:	8d 50 d0             	lea    edx,[eax-0x30]
c000c65a:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c65f:	01 d0                	add    eax,edx
c000c661:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c666:	eb 71                	jmp    c000c6d9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c668:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c672:	eb 65                	jmp    c000c6d9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c674:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c679:	85 c0                	test   eax,eax
c000c67b:	74 1a                	je     c000c697 <sendKeyboardToken(KeyboardToken)+0x330>
c000c67d:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c682:	25 ff 00 00 00       	and    eax,0xff
c000c687:	83 ec 0c             	sub    esp,0xc
c000c68a:	50                   	push   eax
c000c68b:	e8 0e fc ff ff       	call   c000c29e <sendKeyToTerminal(unsigned char)>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c697:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6a1:	eb 36                	jmp    c000c6d9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a6:	66 3d 01 01          	cmp    ax,0x101
c000c6aa:	75 2d                	jne    c000c6d9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6ac:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6b1:	85 c0                	test   eax,eax
c000c6b3:	74 1a                	je     c000c6cf <sendKeyboardToken(KeyboardToken)+0x368>
c000c6b5:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6ba:	25 ff 00 00 00       	and    eax,0xff
c000c6bf:	83 ec 0c             	sub    esp,0xc
c000c6c2:	50                   	push   eax
c000c6c3:	e8 d6 fb ff ff       	call   c000c29e <sendKeyToTerminal(unsigned char)>
c000c6c8:	83 c4 10             	add    esp,0x10
c000c6cb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6cf:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6d9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6dc:	83 f0 01             	xor    eax,0x1
c000c6df:	84 c0                	test   al,al
c000c6e1:	74 4e                	je     c000c731 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6e3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6e6:	83 f0 01             	xor    eax,0x1
c000c6e9:	84 c0                	test   al,al
c000c6eb:	74 44                	je     c000c731 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6ed:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6f2:	83 f0 01             	xor    eax,0x1
c000c6f5:	84 c0                	test   al,al
c000c6f7:	74 38                	je     c000c731 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6fc:	66 83 f8 1f          	cmp    ax,0x1f
c000c700:	76 09                	jbe    c000c70b <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c705:	66 83 f8 7e          	cmp    ax,0x7e
c000c709:	76 12                	jbe    c000c71d <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c70b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70e:	66 83 f8 0a          	cmp    ax,0xa
c000c712:	74 09                	je     c000c71d <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c717:	66 83 f8 08          	cmp    ax,0x8
c000c71b:	75 14                	jne    c000c731 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c71d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c720:	25 ff 00 00 00       	and    eax,0xff
c000c725:	83 ec 0c             	sub    esp,0xc
c000c728:	50                   	push   eax
c000c729:	e8 70 fb ff ff       	call   c000c29e <sendKeyToTerminal(unsigned char)>
c000c72e:	83 c4 10             	add    esp,0x10
c000c731:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c734:	83 f0 01             	xor    eax,0x1
c000c737:	84 c0                	test   al,al
c000c739:	74 51                	je     c000c78c <sendKeyboardToken(KeyboardToken)+0x425>
c000c73b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c73e:	83 f0 01             	xor    eax,0x1
c000c741:	84 c0                	test   al,al
c000c743:	74 47                	je     c000c78c <sendKeyboardToken(KeyboardToken)+0x425>
c000c745:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c74a:	84 c0                	test   al,al
c000c74c:	74 3e                	je     c000c78c <sendKeyboardToken(KeyboardToken)+0x425>
c000c74e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c751:	66 83 f8 3f          	cmp    ax,0x3f
c000c755:	76 35                	jbe    c000c78c <sendKeyboardToken(KeyboardToken)+0x425>
c000c757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c75a:	66 83 f8 7f          	cmp    ax,0x7f
c000c75e:	77 2c                	ja     c000c78c <sendKeyboardToken(KeyboardToken)+0x425>
c000c760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c763:	88 c2                	mov    dl,al
c000c765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c768:	66 83 f8 5f          	cmp    ax,0x5f
c000c76c:	76 04                	jbe    c000c772 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c76e:	b0 20                	mov    al,0x20
c000c770:	eb 02                	jmp    c000c774 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c772:	b0 00                	mov    al,0x0
c000c774:	29 c2                	sub    edx,eax
c000c776:	88 d0                	mov    al,dl
c000c778:	83 e8 40             	sub    eax,0x40
c000c77b:	25 ff 00 00 00       	and    eax,0xff
c000c780:	83 ec 0c             	sub    esp,0xc
c000c783:	50                   	push   eax
c000c784:	e8 15 fb ff ff       	call   c000c29e <sendKeyToTerminal(unsigned char)>
c000c789:	83 c4 10             	add    esp,0x10
c000c78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78f:	66 3d 00 03          	cmp    ax,0x300
c000c793:	75 0f                	jne    c000c7a4 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c795:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c798:	83 f0 01             	xor    eax,0x1
c000c79b:	84 c0                	test   al,al
c000c79d:	74 05                	je     c000c7a4 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c79f:	e8 f5 b9 ff ff       	call   c0008199 <doTerminalCycle()>
c000c7a4:	90                   	nop
c000c7a5:	c9                   	leave  
c000c7a6:	c3                   	ret    

c000c7a7 <clearInternalKeybuffer(VgaText*)>:
c000c7a7:	55                   	push   ebp
c000c7a8:	89 e5                	mov    ebp,esp
c000c7aa:	83 ec 08             	sub    esp,0x8
c000c7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b0:	05 b2 00 00 00       	add    eax,0xb2
c000c7b5:	83 ec 0c             	sub    esp,0xc
c000c7b8:	50                   	push   eax
c000c7b9:	e8 82 3d ff ff       	call   c0000540 <strlen>
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7c4:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7ca:	83 ec 04             	sub    esp,0x4
c000c7cd:	50                   	push   eax
c000c7ce:	6a 00                	push   0x0
c000c7d0:	52                   	push   edx
c000c7d1:	e8 fa 3c ff ff       	call   c00004d0 <memset>
c000c7d6:	83 c4 10             	add    esp,0x10
c000c7d9:	90                   	nop
c000c7da:	c9                   	leave  
c000c7db:	c3                   	ret    

c000c7dc <readKeyboard(VgaText*, char*, unsigned long)>:
c000c7dc:	55                   	push   ebp
c000c7dd:	89 e5                	mov    ebp,esp
c000c7df:	83 ec 18             	sub    esp,0x18
c000c7e2:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c7e7:	85 c0                	test   eax,eax
c000c7e9:	74 2a                	je     c000c815 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c7eb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c7f1:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c7f7:	83 ec 04             	sub    esp,0x4
c000c7fa:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c7ff:	83 ec 08             	sub    esp,0x8
c000c802:	89 e2                	mov    edx,esp
c000c804:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c807:	89 02                	mov    DWORD PTR [edx],eax
c000c809:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c80c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c810:	ff d1                	call   ecx
c000c812:	83 c4 10             	add    esp,0x10
c000c815:	fb                   	sti    
c000c816:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c81d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c821:	0f 84 db 00 00 00    	je     c000c902 <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82a:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c830:	84 c0                	test   al,al
c000c832:	75 28                	jne    c000c85c <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c834:	fa                   	cli    
c000c835:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c83a:	40                   	inc    eax
c000c83b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c840:	e8 af 6f 00 00       	call   c00137f4 <schedule()>
c000c845:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c84a:	48                   	dec    eax
c000c84b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c850:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c855:	85 c0                	test   eax,eax
c000c857:	75 ce                	jne    c000c827 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c859:	fb                   	sti    
c000c85a:	eb cb                	jmp    c000c827 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c85c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c85f:	8d 50 01             	lea    edx,[eax+0x1]
c000c862:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c865:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c868:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c86e:	88 10                	mov    BYTE PTR [eax],dl
c000c870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c873:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c879:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c87c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c880:	75 2e                	jne    c000c8b0 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c882:	83 ec 0c             	sub    esp,0xc
c000c885:	68 14 e1 01 c0       	push   0xc001e114
c000c88a:	e8 ee dc ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000c88f:	83 c4 10             	add    esp,0x10
c000c892:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c897:	8b 00                	mov    eax,DWORD PTR [eax]
c000c899:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c89c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c8a2:	83 ec 08             	sub    esp,0x8
c000c8a5:	6a 02                	push   0x2
c000c8a7:	50                   	push   eax
c000c8a8:	e8 3e 3d 00 00       	call   c00105eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000c8ad:	83 c4 10             	add    esp,0x10
c000c8b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b3:	05 b2 00 00 00       	add    eax,0xb2
c000c8b8:	83 ec 0c             	sub    esp,0xc
c000c8bb:	50                   	push   eax
c000c8bc:	e8 7f 3c ff ff       	call   c0000540 <strlen>
c000c8c1:	83 c4 10             	add    esp,0x10
c000c8c4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8c7:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c8cd:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c8d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8d3:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c8d9:	83 ec 04             	sub    esp,0x4
c000c8dc:	50                   	push   eax
c000c8dd:	51                   	push   ecx
c000c8de:	52                   	push   edx
c000c8df:	e8 fc 3a ff ff       	call   c00003e0 <memmove>
c000c8e4:	83 c4 10             	add    esp,0x10
c000c8e7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c8ea:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c8ed:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c8f1:	74 0a                	je     c000c8fd <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c8f3:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8f7:	0f 85 20 ff ff ff    	jne    c000c81d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c8fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c900:	eb 03                	jmp    c000c905 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c902:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c905:	c9                   	leave  
c000c906:	c3                   	ret    
c000c907:	90                   	nop

c000c908 <Keyboard::Keyboard(char const*)>:
c000c908:	83 ec 0c             	sub    esp,0xc
c000c90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90f:	83 ec 08             	sub    esp,0x8
c000c912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c916:	50                   	push   eax
c000c917:	e8 38 f2 ff ff       	call   c000bb54 <Device::Device(char const*)>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	ba 2c e1 01 c0       	mov    edx,0xc001e12c
c000c924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c928:	89 10                	mov    DWORD PTR [eax],edx
c000c92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c92e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c938:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c93f:	90                   	nop
c000c940:	83 c4 0c             	add    esp,0xc
c000c943:	c3                   	ret    

c000c944 <Keyboard::~Keyboard()>:
c000c944:	83 ec 0c             	sub    esp,0xc
c000c947:	ba 2c e1 01 c0       	mov    edx,0xc001e12c
c000c94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c950:	89 10                	mov    DWORD PTR [eax],edx
c000c952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c956:	83 ec 0c             	sub    esp,0xc
c000c959:	50                   	push   eax
c000c95a:	e8 5f ef ff ff       	call   c000b8be <Device::~Device()>
c000c95f:	83 c4 10             	add    esp,0x10
c000c962:	90                   	nop
c000c963:	83 c4 0c             	add    esp,0xc
c000c966:	c3                   	ret    
c000c967:	90                   	nop

c000c968 <Keyboard::~Keyboard()>:
c000c968:	83 ec 0c             	sub    esp,0xc
c000c96b:	83 ec 0c             	sub    esp,0xc
c000c96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c972:	e8 cd ff ff ff       	call   c000c944 <Keyboard::~Keyboard()>
c000c977:	83 c4 10             	add    esp,0x10
c000c97a:	83 ec 08             	sub    esp,0x8
c000c97d:	68 5c 01 00 00       	push   0x15c
c000c982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c986:	e8 fc da ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000c98b:	83 c4 10             	add    esp,0x10
c000c98e:	83 c4 0c             	add    esp,0xc
c000c991:	c3                   	ret    

c000c992 <LogicalDisk::close(int, int, void*)>:
c000c992:	83 c8 ff             	or     eax,0xffffffff
c000c995:	c3                   	ret    

c000c996 <LogicalDisk::~LogicalDisk()>:
c000c996:	83 ec 0c             	sub    esp,0xc
c000c999:	ba a4 e1 01 c0       	mov    edx,0xc001e1a4
c000c99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a2:	89 10                	mov    DWORD PTR [eax],edx
c000c9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a8:	83 ec 0c             	sub    esp,0xc
c000c9ab:	50                   	push   eax
c000c9ac:	e8 0d ef ff ff       	call   c000b8be <Device::~Device()>
c000c9b1:	83 c4 10             	add    esp,0x10
c000c9b4:	90                   	nop
c000c9b5:	83 c4 0c             	add    esp,0xc
c000c9b8:	c3                   	ret    
c000c9b9:	90                   	nop

c000c9ba <LogicalDisk::~LogicalDisk()>:
c000c9ba:	83 ec 0c             	sub    esp,0xc
c000c9bd:	83 ec 0c             	sub    esp,0xc
c000c9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c4:	e8 cd ff ff ff       	call   c000c996 <LogicalDisk::~LogicalDisk()>
c000c9c9:	83 c4 10             	add    esp,0x10
c000c9cc:	83 ec 08             	sub    esp,0x8
c000c9cf:	68 74 01 00 00       	push   0x174
c000c9d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d8:	e8 aa da ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000c9dd:	83 c4 10             	add    esp,0x10
c000c9e0:	83 c4 0c             	add    esp,0xc
c000c9e3:	c3                   	ret    

c000c9e4 <LogicalDisk::open(int, int, void*)>:
c000c9e4:	83 ec 18             	sub    esp,0x18
c000c9e7:	68 58 e1 01 c0       	push   0xc001e158
c000c9ec:	e8 0e 38 00 00       	call   c00101ff <KePanic(char const*)>
c000c9f1:	83 c8 ff             	or     eax,0xffffffff
c000c9f4:	83 c4 1c             	add    esp,0x1c
c000c9f7:	c3                   	ret    

c000c9f8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c9f8:	53                   	push   ebx
c000c9f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c9fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca05:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca0b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca11:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca17:	77 10                	ja     c000ca29 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca19:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca1f:	89 d3                	mov    ebx,edx
c000ca21:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ca27:	72 05                	jb     c000ca2e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ca29:	83 c8 ff             	or     eax,0xffffffff
c000ca2c:	89 c2                	mov    edx,eax
c000ca2e:	5b                   	pop    ebx
c000ca2f:	c3                   	ret    

c000ca30 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ca30:	56                   	push   esi
c000ca31:	83 c8 ff             	or     eax,0xffffffff
c000ca34:	53                   	push   ebx
c000ca35:	89 c2                	mov    edx,eax
c000ca37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ca3b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ca3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca43:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ca49:	77 27                	ja     c000ca72 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca4b:	89 d8                	mov    eax,ebx
c000ca4d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca53:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca5e:	89 c2                	mov    edx,eax
c000ca60:	73 10                	jae    c000ca72 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca62:	89 c8                	mov    eax,ecx
c000ca64:	89 da                	mov    edx,ebx
c000ca66:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca6c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca72:	5b                   	pop    ebx
c000ca73:	5e                   	pop    esi
c000ca74:	c3                   	ret    
c000ca75:	90                   	nop

c000ca76 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca76:	83 ec 1c             	sub    esp,0x1c
c000ca79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca8d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca9c:	83 ec 08             	sub    esp,0x8
c000ca9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000caa3:	50                   	push   eax
c000caa4:	e8 ab f0 ff ff       	call   c000bb54 <Device::Device(char const*)>
c000caa9:	83 c4 10             	add    esp,0x10
c000caac:	ba a4 e1 01 c0       	mov    edx,0xc001e1a4
c000cab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cab5:	89 10                	mov    DWORD PTR [eax],edx
c000cab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cabb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cac6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cacd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cad1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cadb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cadf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cae3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cae7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000caed:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000caf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000caf7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cafa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cafe:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb04:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb12:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb1c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb26:	90                   	nop
c000cb27:	83 c4 1c             	add    esp,0x1c
c000cb2a:	c3                   	ret    
c000cb2b:	90                   	nop

c000cb2c <LogicalDisk::assignDriveLetter()>:
c000cb2c:	55                   	push   ebp
c000cb2d:	57                   	push   edi
c000cb2e:	56                   	push   esi
c000cb2f:	53                   	push   ebx
c000cb30:	83 ec 14             	sub    esp,0x14
c000cb33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb37:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cb3d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cb43:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cb47:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cb4d:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cb53:	3c 01                	cmp    al,0x1
c000cb55:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb59:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb5d:	19 c0                	sbb    eax,eax
c000cb5f:	83 e0 02             	and    eax,0x2
c000cb62:	83 c0 41             	add    eax,0x41
c000cb65:	0f be e8             	movsx  ebp,al
c000cb68:	3c 43                	cmp    al,0x43
c000cb6a:	75 10                	jne    c000cb7c <LogicalDisk::assignDriveLetter()+0x50>
c000cb6c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb73:	75 5d                	jne    c000cbd2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb75:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb7a:	75 56                	jne    c000cbd2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb7c:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb7f:	ba 01 00 00 00       	mov    edx,0x1
c000cb84:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb88:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb8c:	d3 e2                	shl    edx,cl
c000cb8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb92:	89 d7                	mov    edi,edx
c000cb94:	89 d6                	mov    esi,edx
c000cb96:	c1 ff 1f             	sar    edi,0x1f
c000cb99:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cb9d:	21 f9                	and    ecx,edi
c000cb9f:	09 d1                	or     ecx,edx
c000cba1:	75 2f                	jne    c000cbd2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cba3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cba7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbab:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cbb1:	09 f2                	or     edx,esi
c000cbb3:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cbb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbbd:	09 fa                	or     edx,edi
c000cbbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cbc3:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cbc9:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cbd0:	eb 08                	jmp    c000cbda <LogicalDisk::assignDriveLetter()+0xae>
c000cbd2:	45                   	inc    ebp
c000cbd3:	40                   	inc    eax
c000cbd4:	3c 5b                	cmp    al,0x5b
c000cbd6:	75 90                	jne    c000cb68 <LogicalDisk::assignDriveLetter()+0x3c>
c000cbd8:	31 c0                	xor    eax,eax
c000cbda:	83 c4 14             	add    esp,0x14
c000cbdd:	5b                   	pop    ebx
c000cbde:	5e                   	pop    esi
c000cbdf:	5f                   	pop    edi
c000cbe0:	5d                   	pop    ebp
c000cbe1:	c3                   	ret    

c000cbe2 <LogicalDisk::mount()>:
c000cbe2:	56                   	push   esi
c000cbe3:	53                   	push   ebx
c000cbe4:	53                   	push   ebx
c000cbe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbe9:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cbef:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cbf9:	85 db                	test   ebx,ebx
c000cbfb:	74 27                	je     c000cc24 <LogicalDisk::mount()+0x42>
c000cbfd:	51                   	push   ecx
c000cbfe:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc07:	83 e8 41             	sub    eax,0x41
c000cc0a:	50                   	push   eax
c000cc0b:	56                   	push   esi
c000cc0c:	53                   	push   ebx
c000cc0d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc10:	83 c4 10             	add    esp,0x10
c000cc13:	84 c0                	test   al,al
c000cc15:	74 08                	je     c000cc1f <LogicalDisk::mount()+0x3d>
c000cc17:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cc1d:	eb 07                	jmp    c000cc26 <LogicalDisk::mount()+0x44>
c000cc1f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cc22:	eb d5                	jmp    c000cbf9 <LogicalDisk::mount()+0x17>
c000cc24:	31 c0                	xor    eax,eax
c000cc26:	5a                   	pop    edx
c000cc27:	5b                   	pop    ebx
c000cc28:	5e                   	pop    esi
c000cc29:	c3                   	ret    

c000cc2a <LogicalDisk::unmount()>:
c000cc2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc2e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cc38:	c3                   	ret    
c000cc39:	90                   	nop

c000cc3a <LogicalDisk::eject()>:
c000cc3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc3e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cc44:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc4a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cc4d:	90                   	nop

c000cc4e <LogicalDisk::unassignDriveLetter()>:
c000cc4e:	57                   	push   edi
c000cc4f:	56                   	push   esi
c000cc50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc54:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc5b:	84 c9                	test   cl,cl
c000cc5d:	75 0f                	jne    c000cc6e <LogicalDisk::unassignDriveLetter()+0x20>
c000cc5f:	c7 44 24 0c 7c e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e17c
c000cc67:	5e                   	pop    esi
c000cc68:	5f                   	pop    edi
c000cc69:	e9 91 35 00 00       	jmp    c00101ff <KePanic(char const*)>
c000cc6e:	83 e9 41             	sub    ecx,0x41
c000cc71:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc78:	b8 01 00 00 00       	mov    eax,0x1
c000cc7d:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cc88:	d3 e0                	shl    eax,cl
c000cc8a:	89 c7                	mov    edi,eax
c000cc8c:	f7 d0                	not    eax
c000cc8e:	c1 ff 1f             	sar    edi,0x1f
c000cc91:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cc97:	89 fe                	mov    esi,edi
c000cc99:	f7 d6                	not    esi
c000cc9b:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cca1:	5e                   	pop    esi
c000cca2:	5f                   	pop    edi
c000cca3:	c3                   	ret    

c000cca4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cca4:	57                   	push   edi
c000cca5:	56                   	push   esi
c000cca6:	53                   	push   ebx
c000cca7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ccab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ccb7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ccbd:	77 41                	ja     c000cd00 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ccbf:	99                   	cdq    
c000ccc0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ccc6:	01 c8                	add    eax,ecx
c000ccc8:	11 da                	adc    edx,ebx
c000ccca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ccd0:	19 d7                	sbb    edi,edx
c000ccd2:	72 33                	jb     c000cd07 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ccd4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ccda:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cce0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cce4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cce8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf8:	5b                   	pop    ebx
c000ccf9:	5e                   	pop    esi
c000ccfa:	5f                   	pop    edi
c000ccfb:	e9 4e 0a 00 00       	jmp    c000d74e <VCache::read(unsigned long long, int, void*)>
c000cd00:	b8 05 00 00 00       	mov    eax,0x5
c000cd05:	eb 05                	jmp    c000cd0c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd07:	b8 07 00 00 00       	mov    eax,0x7
c000cd0c:	5b                   	pop    ebx
c000cd0d:	5e                   	pop    esi
c000cd0e:	5f                   	pop    edi
c000cd0f:	c3                   	ret    

c000cd10 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd10:	57                   	push   edi
c000cd11:	56                   	push   esi
c000cd12:	53                   	push   ebx
c000cd13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd1b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd29:	77 41                	ja     c000cd6c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cd2b:	99                   	cdq    
c000cd2c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd32:	01 c8                	add    eax,ecx
c000cd34:	11 da                	adc    edx,ebx
c000cd36:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd3c:	19 d7                	sbb    edi,edx
c000cd3e:	72 33                	jb     c000cd73 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cd40:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd46:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd4c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd50:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd54:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd64:	5b                   	pop    ebx
c000cd65:	5e                   	pop    esi
c000cd66:	5f                   	pop    edi
c000cd67:	e9 cc 08 00 00       	jmp    c000d638 <VCache::write(unsigned long long, int, void*)>
c000cd6c:	b8 05 00 00 00       	mov    eax,0x5
c000cd71:	eb 05                	jmp    c000cd78 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd73:	b8 07 00 00 00       	mov    eax,0x7
c000cd78:	5b                   	pop    ebx
c000cd79:	5e                   	pop    esi
c000cd7a:	5f                   	pop    edi
c000cd7b:	c3                   	ret    

c000cd7c <Mouse::Mouse(char const*)>:
c000cd7c:	83 ec 0c             	sub    esp,0xc
c000cd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd83:	83 ec 08             	sub    esp,0x8
c000cd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8a:	50                   	push   eax
c000cd8b:	e8 c4 ed ff ff       	call   c000bb54 <Device::Device(char const*)>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	ba d0 e1 01 c0       	mov    edx,0xc001e1d0
c000cd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9c:	89 10                	mov    DWORD PTR [eax],edx
c000cd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cdac:	90                   	nop
c000cdad:	83 c4 0c             	add    esp,0xc
c000cdb0:	c3                   	ret    
c000cdb1:	90                   	nop
c000cdb2:	66 90                	xchg   ax,ax

c000cdb4 <Mouse::~Mouse()>:
c000cdb4:	83 ec 0c             	sub    esp,0xc
c000cdb7:	ba d0 e1 01 c0       	mov    edx,0xc001e1d0
c000cdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc0:	89 10                	mov    DWORD PTR [eax],edx
c000cdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc6:	83 ec 0c             	sub    esp,0xc
c000cdc9:	50                   	push   eax
c000cdca:	e8 ef ea ff ff       	call   c000b8be <Device::~Device()>
c000cdcf:	83 c4 10             	add    esp,0x10
c000cdd2:	90                   	nop
c000cdd3:	83 c4 0c             	add    esp,0xc
c000cdd6:	c3                   	ret    
c000cdd7:	90                   	nop

c000cdd8 <Mouse::~Mouse()>:
c000cdd8:	83 ec 0c             	sub    esp,0xc
c000cddb:	83 ec 0c             	sub    esp,0xc
c000cdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde2:	e8 cd ff ff ff       	call   c000cdb4 <Mouse::~Mouse()>
c000cde7:	83 c4 10             	add    esp,0x10
c000cdea:	83 ec 08             	sub    esp,0x8
c000cded:	68 58 01 00 00       	push   0x158
c000cdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdf6:	e8 8c d6 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	83 c4 0c             	add    esp,0xc
c000ce01:	c3                   	ret    

c000ce02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce02:	55                   	push   ebp
c000ce03:	57                   	push   edi
c000ce04:	56                   	push   esi
c000ce05:	53                   	push   ebx
c000ce06:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce0c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce13:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ce1a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ce21:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ce28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ce30:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce37:	e8 14 ee ff ff       	call   c000bc50 <Device::getName()>
c000ce3c:	5a                   	pop    edx
c000ce3d:	59                   	pop    ecx
c000ce3e:	50                   	push   eax
c000ce3f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce43:	55                   	push   ebp
c000ce44:	e8 b7 37 ff ff       	call   c0000600 <strcpy>
c000ce49:	5b                   	pop    ebx
c000ce4a:	58                   	pop    eax
c000ce4b:	68 f4 e1 01 c0       	push   0xc001e1f4
c000ce50:	55                   	push   ebp
c000ce51:	e8 6a 39 ff ff       	call   c00007c0 <strcat>
c000ce56:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce5d:	e8 57 a9 ff ff       	call   c00077b9 <malloc>
c000ce62:	83 c4 0c             	add    esp,0xc
c000ce65:	89 c3                	mov    ebx,eax
c000ce67:	57                   	push   edi
c000ce68:	56                   	push   esi
c000ce69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce71:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce78:	55                   	push   ebp
c000ce79:	50                   	push   eax
c000ce7a:	e8 f7 fb ff ff       	call   c000ca76 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce7f:	83 c4 14             	add    esp,0x14
c000ce82:	53                   	push   ebx
c000ce83:	e8 a4 fc ff ff       	call   c000cb2c <LogicalDisk::assignDriveLetter()>
c000ce88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce8b:	e8 52 fd ff ff       	call   c000cbe2 <LogicalDisk::mount()>
c000ce90:	58                   	pop    eax
c000ce91:	5a                   	pop    edx
c000ce92:	53                   	push   ebx
c000ce93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce9a:	e8 1d eb ff ff       	call   c000b9bc <Device::addChild(Device*)>
c000ce9f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cea5:	5b                   	pop    ebx
c000cea6:	5e                   	pop    esi
c000cea7:	5f                   	pop    edi
c000cea8:	5d                   	pop    ebp
c000cea9:	c3                   	ret    

c000ceaa <createPartitionsForDisk(PhysicalDisk*)>:
c000ceaa:	55                   	push   ebp
c000ceab:	57                   	push   edi
c000ceac:	56                   	push   esi
c000cead:	53                   	push   ebx
c000ceae:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ceb4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cebb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cec1:	3d 00 02 00 00       	cmp    eax,0x200
c000cec6:	74 27                	je     c000ceef <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cec8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cece:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ced4:	83 ec 10             	sub    esp,0x10
c000ced7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cedb:	99                   	cdq    
c000cedc:	c1 e6 0a             	shl    esi,0xa
c000cedf:	52                   	push   edx
c000cee0:	89 fd                	mov    ebp,edi
c000cee2:	50                   	push   eax
c000cee3:	55                   	push   ebp
c000cee4:	56                   	push   esi
c000cee5:	e8 66 f2 00 00       	call   c001c150 <__udivdi3>
c000ceea:	e9 b1 00 00 00       	jmp    c000cfa0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ceef:	83 ec 0c             	sub    esp,0xc
c000cef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cef4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cef8:	56                   	push   esi
c000cef9:	6a 01                	push   0x1
c000cefb:	6a 00                	push   0x0
c000cefd:	6a 00                	push   0x0
c000ceff:	53                   	push   ebx
c000cf00:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf03:	83 c4 20             	add    esp,0x20
c000cf06:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf0e:	75 0a                	jne    c000cf1a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf10:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cf18:	74 2c                	je     c000cf46 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cf1a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf20:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf26:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf2c:	83 ec 10             	sub    esp,0x10
c000cf2f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf33:	89 f7                	mov    edi,esi
c000cf35:	c1 e0 0a             	shl    eax,0xa
c000cf38:	c1 ff 1f             	sar    edi,0x1f
c000cf3b:	57                   	push   edi
c000cf3c:	56                   	push   esi
c000cf3d:	52                   	push   edx
c000cf3e:	50                   	push   eax
c000cf3f:	e8 0c f2 00 00       	call   c001c150 <__udivdi3>
c000cf44:	eb 5a                	jmp    c000cfa0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf46:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cf4d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf54:	83 e1 7f             	and    ecx,0x7f
c000cf57:	83 e0 7f             	and    eax,0x7f
c000cf5a:	01 c1                	add    ecx,eax
c000cf5c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf63:	83 e0 7f             	and    eax,0x7f
c000cf66:	01 c1                	add    ecx,eax
c000cf68:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf6f:	83 e0 7f             	and    eax,0x7f
c000cf72:	00 c1                	add    cl,al
c000cf74:	74 41                	je     c000cfb7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf76:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf7c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf88:	83 ec 10             	sub    esp,0x10
c000cf8b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf8f:	89 f7                	mov    edi,esi
c000cf91:	c1 e0 0a             	shl    eax,0xa
c000cf94:	c1 ff 1f             	sar    edi,0x1f
c000cf97:	57                   	push   edi
c000cf98:	56                   	push   esi
c000cf99:	52                   	push   edx
c000cf9a:	50                   	push   eax
c000cf9b:	e8 b0 f1 00 00       	call   c001c150 <__udivdi3>
c000cfa0:	83 c4 14             	add    esp,0x14
c000cfa3:	52                   	push   edx
c000cfa4:	50                   	push   eax
c000cfa5:	6a 00                	push   0x0
c000cfa7:	6a 00                	push   0x0
c000cfa9:	53                   	push   ebx
c000cfaa:	e8 53 fe ff ff       	call   c000ce02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfaf:	83 c4 20             	add    esp,0x20
c000cfb2:	e9 79 01 00 00       	jmp    c000d130 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cfb7:	89 f0                	mov    eax,esi
c000cfb9:	31 f6                	xor    esi,esi
c000cfbb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cfc2:	75 02                	jne    c000cfc6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cfc4:	89 f1                	mov    ecx,esi
c000cfc6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cfcd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cfd4:	c1 e2 08             	shl    edx,0x8
c000cfd7:	c1 e7 10             	shl    edi,0x10
c000cfda:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cfe2:	09 fa                	or     edx,edi
c000cfe4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cfec:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cff3:	83 c0 10             	add    eax,0x10
c000cff6:	09 fa                	or     edx,edi
c000cff8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cfff:	c1 e7 18             	shl    edi,0x18
c000d002:	09 fa                	or     edx,edi
c000d004:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d00b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d00f:	c1 e7 10             	shl    edi,0x10
c000d012:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d019:	c1 e2 08             	shl    edx,0x8
c000d01c:	09 fa                	or     edx,edi
c000d01e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d025:	09 fa                	or     edx,edi
c000d027:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d02e:	c1 e7 18             	shl    edi,0x18
c000d031:	09 fa                	or     edx,edi
c000d033:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d037:	46                   	inc    esi
c000d038:	83 fe 04             	cmp    esi,0x4
c000d03b:	0f 85 7a ff ff ff    	jne    c000cfbb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d045:	83 f0 01             	xor    eax,0x1
c000d048:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d04c:	75 57                	jne    c000d0a5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d04e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d052:	83 f0 01             	xor    eax,0x1
c000d055:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d059:	75 4a                	jne    c000d0a5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d05b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d05f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d067:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d06f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d075:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d07b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d081:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d085:	89 f7                	mov    edi,esi
c000d087:	c1 e0 0a             	shl    eax,0xa
c000d08a:	c1 ff 1f             	sar    edi,0x1f
c000d08d:	57                   	push   edi
c000d08e:	56                   	push   esi
c000d08f:	52                   	push   edx
c000d090:	50                   	push   eax
c000d091:	e8 ba f0 00 00       	call   c001c150 <__udivdi3>
c000d096:	83 c4 10             	add    esp,0x10
c000d099:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d09d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d0a5:	84 c9                	test   cl,cl
c000d0a7:	74 53                	je     c000d0fc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d0a9:	0f b6 c9             	movzx  ecx,cl
c000d0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0b4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d0b8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d0bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d0c8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d0cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0dc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d0e0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d0e4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d0e8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d0ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0f4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d0f8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d0fc:	31 ed                	xor    ebp,ebp
c000d0fe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d102:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d106:	89 f8                	mov    eax,edi
c000d108:	09 f0                	or     eax,esi
c000d10a:	74 1e                	je     c000d12a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d10c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d110:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d114:	89 d1                	mov    ecx,edx
c000d116:	09 c1                	or     ecx,eax
c000d118:	74 10                	je     c000d12a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	57                   	push   edi
c000d11e:	56                   	push   esi
c000d11f:	52                   	push   edx
c000d120:	50                   	push   eax
c000d121:	53                   	push   ebx
c000d122:	e8 db fc ff ff       	call   c000ce02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d127:	83 c4 20             	add    esp,0x20
c000d12a:	45                   	inc    ebp
c000d12b:	83 fd 04             	cmp    ebp,0x4
c000d12e:	75 ce                	jne    c000d0fe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d130:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d136:	5b                   	pop    ebx
c000d137:	5e                   	pop    esi
c000d138:	5f                   	pop    edi
c000d139:	5d                   	pop    ebp
c000d13a:	c3                   	ret    
c000d13b:	90                   	nop

c000d13c <Serial::Serial(char const*)>:
c000d13c:	83 ec 0c             	sub    esp,0xc
c000d13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d143:	83 ec 08             	sub    esp,0x8
c000d146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14a:	50                   	push   eax
c000d14b:	e8 04 ea ff ff       	call   c000bb54 <Device::Device(char const*)>
c000d150:	83 c4 10             	add    esp,0x10
c000d153:	ba 08 e2 01 c0       	mov    edx,0xc001e208
c000d158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d15c:	89 10                	mov    DWORD PTR [eax],edx
c000d15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d162:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d16c:	90                   	nop
c000d16d:	83 c4 0c             	add    esp,0xc
c000d170:	c3                   	ret    
c000d171:	90                   	nop
c000d172:	66 90                	xchg   ax,ax

c000d174 <Serial::~Serial()>:
c000d174:	83 ec 0c             	sub    esp,0xc
c000d177:	ba 08 e2 01 c0       	mov    edx,0xc001e208
c000d17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d180:	89 10                	mov    DWORD PTR [eax],edx
c000d182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d186:	83 ec 0c             	sub    esp,0xc
c000d189:	50                   	push   eax
c000d18a:	e8 2f e7 ff ff       	call   c000b8be <Device::~Device()>
c000d18f:	83 c4 10             	add    esp,0x10
c000d192:	90                   	nop
c000d193:	83 c4 0c             	add    esp,0xc
c000d196:	c3                   	ret    
c000d197:	90                   	nop

c000d198 <Serial::~Serial()>:
c000d198:	83 ec 0c             	sub    esp,0xc
c000d19b:	83 ec 0c             	sub    esp,0xc
c000d19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a2:	e8 cd ff ff ff       	call   c000d174 <Serial::~Serial()>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	83 ec 08             	sub    esp,0x8
c000d1ad:	68 58 01 00 00       	push   0x158
c000d1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1b6:	e8 cc d2 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000d1bb:	83 c4 10             	add    esp,0x10
c000d1be:	83 c4 0c             	add    esp,0xc
c000d1c1:	c3                   	ret    
c000d1c2:	66 90                	xchg   ax,ax

c000d1c4 <Timer::Timer(char const*)>:
c000d1c4:	83 ec 0c             	sub    esp,0xc
c000d1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cb:	83 ec 08             	sub    esp,0x8
c000d1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d2:	50                   	push   eax
c000d1d3:	e8 7c e9 ff ff       	call   c000bb54 <Device::Device(char const*)>
c000d1d8:	83 c4 10             	add    esp,0x10
c000d1db:	ba 4c e2 01 c0       	mov    edx,0xc001e24c
c000d1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e4:	89 10                	mov    DWORD PTR [eax],edx
c000d1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ea:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d1f4:	90                   	nop
c000d1f5:	83 c4 0c             	add    esp,0xc
c000d1f8:	c3                   	ret    
c000d1f9:	90                   	nop
c000d1fa:	66 90                	xchg   ax,ax

c000d1fc <Timer::~Timer()>:
c000d1fc:	83 ec 0c             	sub    esp,0xc
c000d1ff:	ba 4c e2 01 c0       	mov    edx,0xc001e24c
c000d204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d208:	89 10                	mov    DWORD PTR [eax],edx
c000d20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	50                   	push   eax
c000d212:	e8 a7 e6 ff ff       	call   c000b8be <Device::~Device()>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	90                   	nop
c000d21b:	83 c4 0c             	add    esp,0xc
c000d21e:	c3                   	ret    
c000d21f:	90                   	nop

c000d220 <Timer::~Timer()>:
c000d220:	83 ec 0c             	sub    esp,0xc
c000d223:	83 ec 0c             	sub    esp,0xc
c000d226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d22a:	e8 cd ff ff ff       	call   c000d1fc <Timer::~Timer()>
c000d22f:	83 c4 10             	add    esp,0x10
c000d232:	83 ec 08             	sub    esp,0x8
c000d235:	68 5c 01 00 00       	push   0x15c
c000d23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23e:	e8 44 d2 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000d243:	83 c4 10             	add    esp,0x10
c000d246:	83 c4 0c             	add    esp,0xc
c000d249:	c3                   	ret    

c000d24a <Timer::read()>:
c000d24a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d24e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d254:	c3                   	ret    

c000d255 <setupTimer(int)>:
c000d255:	53                   	push   ebx
c000d256:	83 ec 14             	sub    esp,0x14
c000d259:	68 5c 01 00 00       	push   0x15c
c000d25e:	e8 56 a5 ff ff       	call   c00077b9 <malloc>
c000d263:	89 04 24             	mov    DWORD PTR [esp],eax
c000d266:	89 c3                	mov    ebx,eax
c000d268:	e8 fb e7 00 00       	call   c001ba68 <PIT::PIT()>
c000d26d:	58                   	pop    eax
c000d26e:	5a                   	pop    edx
c000d26f:	53                   	push   ebx
c000d270:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d276:	e8 41 e7 ff ff       	call   c000b9bc <Device::addChild(Device*)>
c000d27b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d27d:	6a 00                	push   0x0
c000d27f:	6a 00                	push   0x0
c000d281:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d285:	53                   	push   ebx
c000d286:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d289:	89 d8                	mov    eax,ebx
c000d28b:	83 c4 28             	add    esp,0x28
c000d28e:	5b                   	pop    ebx
c000d28f:	c3                   	ret    

c000d290 <timerHandler(unsigned int)>:
c000d290:	56                   	push   esi
c000d291:	53                   	push   ebx
c000d292:	51                   	push   ecx
c000d293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d297:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d29d:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d2a4:	0f 84 4a 01 00 00    	je     c000d3f4 <timerHandler(unsigned int)+0x164>
c000d2aa:	fa                   	cli    
c000d2ab:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d2b1:	83 ec 0c             	sub    esp,0xc
c000d2b4:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d2ba:	68 78 51 02 c0       	push   0xc0025178
c000d2bf:	e8 5c f4 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2c4:	83 c4 10             	add    esp,0x10
c000d2c7:	84 c0                	test   al,al
c000d2c9:	0f 85 a1 00 00 00    	jne    c000d370 <timerHandler(unsigned int)+0xe0>
c000d2cf:	83 ec 0c             	sub    esp,0xc
c000d2d2:	68 78 51 02 c0       	push   0xc0025178
c000d2d7:	e8 60 f4 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2dc:	83 c4 10             	add    esp,0x10
c000d2df:	89 c6                	mov    esi,eax
c000d2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2e4:	83 ec 0c             	sub    esp,0xc
c000d2e7:	68 78 51 02 c0       	push   0xc0025178
c000d2ec:	e8 4b f4 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2f1:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d2f8:	89 c3                	mov    ebx,eax
c000d2fa:	e8 45 f4 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d2ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d302:	83 c4 10             	add    esp,0x10
c000d305:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d30b:	77 23                	ja     c000d330 <timerHandler(unsigned int)+0xa0>
c000d30d:	83 ec 0c             	sub    esp,0xc
c000d310:	53                   	push   ebx
c000d311:	e8 a2 69 00 00       	call   c0013cb8 <unblockTask(ThreadControlBlock*)>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	39 de                	cmp    esi,ebx
c000d31b:	75 27                	jne    c000d344 <timerHandler(unsigned int)+0xb4>
c000d31d:	83 ec 0c             	sub    esp,0xc
c000d320:	68 78 51 02 c0       	push   0xc0025178
c000d325:	e8 12 f4 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d32a:	89 c6                	mov    esi,eax
c000d32c:	eb 12                	jmp    c000d340 <timerHandler(unsigned int)+0xb0>
c000d32e:	66 90                	xchg   ax,ax
c000d330:	52                   	push   edx
c000d331:	52                   	push   edx
c000d332:	53                   	push   ebx
c000d333:	68 78 51 02 c0       	push   0xc0025178
c000d338:	e8 bf f4 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d33d:	8d 76 00             	lea    esi,[esi+0x0]
c000d340:	83 c4 10             	add    esp,0x10
c000d343:	90                   	nop
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	68 78 51 02 c0       	push   0xc0025178
c000d34c:	e8 cf f3 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	84 c0                	test   al,al
c000d356:	75 18                	jne    c000d370 <timerHandler(unsigned int)+0xe0>
c000d358:	83 ec 0c             	sub    esp,0xc
c000d35b:	68 78 51 02 c0       	push   0xc0025178
c000d360:	e8 d7 f3 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d365:	83 c4 10             	add    esp,0x10
c000d368:	39 f0                	cmp    eax,esi
c000d36a:	0f 85 74 ff ff ff    	jne    c000d2e4 <timerHandler(unsigned int)+0x54>
c000d370:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d375:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d379:	74 41                	je     c000d3bc <timerHandler(unsigned int)+0x12c>
c000d37b:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d382:	74 38                	je     c000d3bc <timerHandler(unsigned int)+0x12c>
c000d384:	fa                   	cli    
c000d385:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d38b:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d390:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d396:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d399:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d39f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d3a2:	72 08                	jb     c000d3ac <timerHandler(unsigned int)+0x11c>
c000d3a4:	e8 4b 64 00 00       	call   c00137f4 <schedule()>
c000d3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3ac:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d3b1:	48                   	dec    eax
c000d3b2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d3b7:	75 03                	jne    c000d3bc <timerHandler(unsigned int)+0x12c>
c000d3b9:	fb                   	sti    
c000d3ba:	66 90                	xchg   ax,ax
c000d3bc:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d3c1:	48                   	dec    eax
c000d3c2:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d3c7:	75 1b                	jne    c000d3e4 <timerHandler(unsigned int)+0x154>
c000d3c9:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d3d0:	74 12                	je     c000d3e4 <timerHandler(unsigned int)+0x154>
c000d3d2:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d3dc:	e8 13 64 00 00       	call   c00137f4 <schedule()>
c000d3e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3e4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d3e9:	48                   	dec    eax
c000d3ea:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d3ef:	75 03                	jne    c000d3f4 <timerHandler(unsigned int)+0x164>
c000d3f1:	fb                   	sti    
c000d3f2:	66 90                	xchg   ax,ax
c000d3f4:	58                   	pop    eax
c000d3f5:	5b                   	pop    ebx
c000d3f6:	5e                   	pop    esi
c000d3f7:	c3                   	ret    

c000d3f8 <VCache::VCache(PhysicalDisk*)>:
c000d3f8:	53                   	push   ebx
c000d3f9:	83 ec 18             	sub    esp,0x18
c000d3fc:	ba 7c e2 01 c0       	mov    edx,0xc001e27c
c000d401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d405:	89 10                	mov    DWORD PTR [eax],edx
c000d407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d416:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d41d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d421:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d428:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d42f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d433:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d43a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d445:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d450:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d458:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d45f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d46a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d46e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d472:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d482:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d489:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d491:	83 ec 0c             	sub    esp,0xc
c000d494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d498:	e8 1c a3 ff ff       	call   c00077b9 <malloc>
c000d49d:	83 c4 10             	add    esp,0x10
c000d4a0:	89 c3                	mov    ebx,eax
c000d4a2:	83 ec 0c             	sub    esp,0xc
c000d4a5:	53                   	push   ebx
c000d4a6:	e8 15 61 00 00       	call   c00135c0 <Mutex::Mutex()>
c000d4ab:	83 c4 10             	add    esp,0x10
c000d4ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4bd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d4c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d4cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4cf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4e0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d4e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d4ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d4f0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d4f3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d4f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4fa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d502:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d508:	05 00 01 00 00       	add    eax,0x100
c000d50d:	c1 e0 04             	shl    eax,0x4
c000d510:	83 ec 0c             	sub    esp,0xc
c000d513:	50                   	push   eax
c000d514:	e8 a0 a2 ff ff       	call   c00077b9 <malloc>
c000d519:	83 c4 10             	add    esp,0x10
c000d51c:	89 c2                	mov    edx,eax
c000d51e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d522:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d529:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d534:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d538:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d53c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d542:	c1 e0 06             	shl    eax,0x6
c000d545:	83 ec 0c             	sub    esp,0xc
c000d548:	50                   	push   eax
c000d549:	e8 6b a2 ff ff       	call   c00077b9 <malloc>
c000d54e:	83 c4 10             	add    esp,0x10
c000d551:	89 c2                	mov    edx,eax
c000d553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d557:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d55a:	90                   	nop
c000d55b:	83 c4 18             	add    esp,0x18
c000d55e:	5b                   	pop    ebx
c000d55f:	c3                   	ret    

c000d560 <VCache::invalidateReadBuffer()>:
c000d560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d564:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d56a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d56e:	c3                   	ret    
c000d56f:	90                   	nop

c000d570 <VCache::writeWriteBuffer()>:
c000d570:	53                   	push   ebx
c000d571:	83 ec 08             	sub    esp,0x8
c000d574:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d578:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d57c:	74 1e                	je     c000d59c <VCache::writeWriteBuffer()+0x2c>
c000d57e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d581:	83 ec 0c             	sub    esp,0xc
c000d584:	8b 10                	mov    edx,DWORD PTR [eax]
c000d586:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d589:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d58c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d58f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d592:	50                   	push   eax
c000d593:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d596:	83 c4 20             	add    esp,0x20
c000d599:	8d 76 00             	lea    esi,[esi+0x0]
c000d59c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d5a3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d5aa:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d5ae:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d5b5:	83 c4 08             	add    esp,0x8
c000d5b8:	5b                   	pop    ebx
c000d5b9:	c3                   	ret    
c000d5ba:	66 90                	xchg   ax,ax

c000d5bc <VCache::~VCache()>:
c000d5bc:	83 ec 0c             	sub    esp,0xc
c000d5bf:	ba 7c e2 01 c0       	mov    edx,0xc001e27c
c000d5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5c8:	89 10                	mov    DWORD PTR [eax],edx
c000d5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ce:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d5d1:	84 c0                	test   al,al
c000d5d3:	74 0f                	je     c000d5e4 <VCache::~VCache()+0x28>
c000d5d5:	83 ec 0c             	sub    esp,0xc
c000d5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5dc:	e8 8f ff ff ff       	call   c000d570 <VCache::writeWriteBuffer()>
c000d5e1:	83 c4 10             	add    esp,0x10
c000d5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d5eb:	83 ec 0c             	sub    esp,0xc
c000d5ee:	50                   	push   eax
c000d5ef:	e8 d5 a1 ff ff       	call   c00077c9 <free>
c000d5f4:	83 c4 10             	add    esp,0x10
c000d5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d5fe:	83 ec 0c             	sub    esp,0xc
c000d601:	50                   	push   eax
c000d602:	e8 c2 a1 ff ff       	call   c00077c9 <free>
c000d607:	83 c4 10             	add    esp,0x10
c000d60a:	90                   	nop
c000d60b:	83 c4 0c             	add    esp,0xc
c000d60e:	c3                   	ret    
c000d60f:	90                   	nop

c000d610 <VCache::~VCache()>:
c000d610:	83 ec 0c             	sub    esp,0xc
c000d613:	83 ec 0c             	sub    esp,0xc
c000d616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d61a:	e8 9d ff ff ff       	call   c000d5bc <VCache::~VCache()>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	83 ec 08             	sub    esp,0x8
c000d625:	6a 44                	push   0x44
c000d627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62b:	e8 57 ce ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000d630:	83 c4 10             	add    esp,0x10
c000d633:	83 c4 0c             	add    esp,0xc
c000d636:	c3                   	ret    
c000d637:	90                   	nop

c000d638 <VCache::write(unsigned long long, int, void*)>:
c000d638:	55                   	push   ebp
c000d639:	57                   	push   edi
c000d63a:	56                   	push   esi
c000d63b:	53                   	push   ebx
c000d63c:	83 ec 1c             	sub    esp,0x1c
c000d63f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d643:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d647:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d64f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d653:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d657:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d65b:	31 c0                	xor    eax,eax
c000d65d:	8d 76 00             	lea    esi,[esi+0x0]
c000d660:	39 e8                	cmp    eax,ebp
c000d662:	7d 18                	jge    c000d67c <VCache::write(unsigned long long, int, void*)+0x44>
c000d664:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d667:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d66d:	0f af c8             	imul   ecx,eax
c000d670:	89 ca                	mov    edx,ecx
c000d672:	01 f2                	add    edx,esi
c000d674:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d676:	40                   	inc    eax
c000d677:	eb e7                	jmp    c000d660 <VCache::write(unsigned long long, int, void*)+0x28>
c000d679:	8d 76 00             	lea    esi,[esi+0x0]
c000d67c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d680:	74 0a                	je     c000d68c <VCache::write(unsigned long long, int, void*)+0x54>
c000d682:	53                   	push   ebx
c000d683:	e8 d8 fe ff ff       	call   c000d560 <VCache::invalidateReadBuffer()>
c000d688:	58                   	pop    eax
c000d689:	8d 76 00             	lea    esi,[esi+0x0]
c000d68c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d690:	74 5a                	je     c000d6ec <VCache::write(unsigned long long, int, void*)+0xb4>
c000d692:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d695:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d699:	89 f8                	mov    eax,edi
c000d69b:	99                   	cdq    
c000d69c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d69f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d6a2:	31 c1                	xor    ecx,eax
c000d6a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6a8:	31 d0                	xor    eax,edx
c000d6aa:	09 c1                	or     ecx,eax
c000d6ac:	75 32                	jne    c000d6e0 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6ae:	83 fd 01             	cmp    ebp,0x1
c000d6b1:	75 2d                	jne    c000d6e0 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6b6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6bc:	0f af f9             	imul   edi,ecx
c000d6bf:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d6c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6c4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d6c7:	40                   	inc    eax
c000d6c8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d6cb:	83 f8 40             	cmp    eax,0x40
c000d6ce:	75 74                	jne    c000d744 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6d0:	83 ec 0c             	sub    esp,0xc
c000d6d3:	53                   	push   ebx
c000d6d4:	e8 97 fe ff ff       	call   c000d570 <VCache::writeWriteBuffer()>
c000d6d9:	83 c4 10             	add    esp,0x10
c000d6dc:	eb 66                	jmp    c000d744 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6de:	66 90                	xchg   ax,ax
c000d6e0:	83 ec 0c             	sub    esp,0xc
c000d6e3:	53                   	push   ebx
c000d6e4:	e8 87 fe ff ff       	call   c000d570 <VCache::writeWriteBuffer()>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6ef:	83 fd 3f             	cmp    ebp,0x3f
c000d6f2:	7f 24                	jg     c000d718 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d6f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d6f8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d6fb:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d6fe:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d702:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d706:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d709:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d70c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d712:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d714:	eb 2e                	jmp    c000d744 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d716:	66 90                	xchg   ax,ax
c000d718:	8b 10                	mov    edx,DWORD PTR [eax]
c000d71a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d71e:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d722:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d726:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d72a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d72e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d732:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d736:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d739:	83 c4 1c             	add    esp,0x1c
c000d73c:	5b                   	pop    ebx
c000d73d:	5e                   	pop    esi
c000d73e:	5f                   	pop    edi
c000d73f:	5d                   	pop    ebp
c000d740:	ff e0                	jmp    eax
c000d742:	66 90                	xchg   ax,ax
c000d744:	83 c4 1c             	add    esp,0x1c
c000d747:	31 c0                	xor    eax,eax
c000d749:	5b                   	pop    ebx
c000d74a:	5e                   	pop    esi
c000d74b:	5f                   	pop    edi
c000d74c:	5d                   	pop    ebp
c000d74d:	c3                   	ret    

c000d74e <VCache::read(unsigned long long, int, void*)>:
c000d74e:	55                   	push   ebp
c000d74f:	57                   	push   edi
c000d750:	56                   	push   esi
c000d751:	53                   	push   ebx
c000d752:	83 ec 1c             	sub    esp,0x1c
c000d755:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d75d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d761:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d765:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d769:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d76d:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d771:	74 0d                	je     c000d780 <VCache::read(unsigned long long, int, void*)+0x32>
c000d773:	83 ec 0c             	sub    esp,0xc
c000d776:	55                   	push   ebp
c000d777:	e8 f4 fd ff ff       	call   c000d570 <VCache::writeWriteBuffer()>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	90                   	nop
c000d780:	83 ec 0c             	sub    esp,0xc
c000d783:	55                   	push   ebp
c000d784:	e8 d7 fd ff ff       	call   c000d560 <VCache::invalidateReadBuffer()>
c000d789:	83 c4 0c             	add    esp,0xc
c000d78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d795:	6a 00                	push   0x0
c000d797:	53                   	push   ebx
c000d798:	e8 33 2d ff ff       	call   c00004d0 <memset>
c000d79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d7a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7a6:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d7aa:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d7ae:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d7b2:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d7b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d7ba:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d7bd:	83 c4 2c             	add    esp,0x2c
c000d7c0:	5b                   	pop    ebx
c000d7c1:	5e                   	pop    esi
c000d7c2:	5f                   	pop    edi
c000d7c3:	5d                   	pop    ebp
c000d7c4:	ff e0                	jmp    eax

c000d7c6 <Video::putrect(int, int, int, int, unsigned int)>:
c000d7c6:	55                   	push   ebp
c000d7c7:	57                   	push   edi
c000d7c8:	56                   	push   esi
c000d7c9:	53                   	push   ebx
c000d7ca:	83 ec 1c             	sub    esp,0x1c
c000d7cd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d7d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7d5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d7d9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d7dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7e5:	01 df                	add    edi,ebx
c000d7e7:	39 fb                	cmp    ebx,edi
c000d7e9:	7d 1f                	jge    c000d80a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d7eb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7ef:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d7f3:	7d 12                	jge    c000d807 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d7f5:	8b 16                	mov    edx,DWORD PTR [esi]
c000d7f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d7fb:	53                   	push   ebx
c000d7fc:	55                   	push   ebp
c000d7fd:	45                   	inc    ebp
c000d7fe:	56                   	push   esi
c000d7ff:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d802:	83 c4 10             	add    esp,0x10
c000d805:	eb e8                	jmp    c000d7ef <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d807:	43                   	inc    ebx
c000d808:	eb dd                	jmp    c000d7e7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d80a:	83 c4 1c             	add    esp,0x1c
c000d80d:	5b                   	pop    ebx
c000d80e:	5e                   	pop    esi
c000d80f:	5f                   	pop    edi
c000d810:	5d                   	pop    ebp
c000d811:	c3                   	ret    

c000d812 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d812:	55                   	push   ebp
c000d813:	57                   	push   edi
c000d814:	31 ff                	xor    edi,edi
c000d816:	56                   	push   esi
c000d817:	53                   	push   ebx
c000d818:	83 ec 1c             	sub    esp,0x1c
c000d81b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d81f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d823:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d82a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d82f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d833:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d837:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d83b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d83e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d842:	01 f9                	add    ecx,edi
c000d844:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d848:	7d 2f                	jge    c000d879 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d84a:	31 f6                	xor    esi,esi
c000d84c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d850:	01 f2                	add    edx,esi
c000d852:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d856:	7d 1a                	jge    c000d872 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d858:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d85b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d85e:	46                   	inc    esi
c000d85f:	51                   	push   ecx
c000d860:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d864:	52                   	push   edx
c000d865:	55                   	push   ebp
c000d866:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d869:	83 c4 10             	add    esp,0x10
c000d86c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d870:	eb da                	jmp    c000d84c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d872:	47                   	inc    edi
c000d873:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d877:	eb c5                	jmp    c000d83e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d879:	83 c4 1c             	add    esp,0x1c
c000d87c:	5b                   	pop    ebx
c000d87d:	5e                   	pop    esi
c000d87e:	5f                   	pop    edi
c000d87f:	5d                   	pop    ebp
c000d880:	c3                   	ret    
c000d881:	90                   	nop

c000d882 <Video::blit(unsigned int*, int, int, int, int)>:
c000d882:	55                   	push   ebp
c000d883:	57                   	push   edi
c000d884:	56                   	push   esi
c000d885:	53                   	push   ebx
c000d886:	83 ec 1c             	sub    esp,0x1c
c000d889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d88d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d891:	85 c0                	test   eax,eax
c000d893:	79 02                	jns    c000d897 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d895:	31 c0                	xor    eax,eax
c000d897:	c1 e0 02             	shl    eax,0x2
c000d89a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d89e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d8a6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d8aa:	39 d8                	cmp    eax,ebx
c000d8ac:	7e 49                	jle    c000d8f7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d8ae:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d8b4:	7c 41                	jl     c000d8f7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d8b6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d8ba:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d8be:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d8c2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d8c6:	39 f9                	cmp    ecx,edi
c000d8c8:	7e 22                	jle    c000d8ec <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d8ca:	83 c5 04             	add    ebp,0x4
c000d8cd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d8d3:	7c 14                	jl     c000d8e9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d8d5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8d7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d8da:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d8de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d8e2:	56                   	push   esi
c000d8e3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d8e6:	83 c4 10             	add    esp,0x10
c000d8e9:	47                   	inc    edi
c000d8ea:	eb d2                	jmp    c000d8be <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d8ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8f0:	43                   	inc    ebx
c000d8f1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d8f5:	eb ab                	jmp    c000d8a2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d8f7:	83 c4 1c             	add    esp,0x1c
c000d8fa:	5b                   	pop    ebx
c000d8fb:	5e                   	pop    esi
c000d8fc:	5f                   	pop    edi
c000d8fd:	5d                   	pop    ebp
c000d8fe:	c3                   	ret    
c000d8ff:	90                   	nop

c000d900 <Video::clearScreen(unsigned int)>:
c000d900:	57                   	push   edi
c000d901:	56                   	push   esi
c000d902:	53                   	push   ebx
c000d903:	31 db                	xor    ebx,ebx
c000d905:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d909:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d90f:	7e 1f                	jle    c000d930 <Video::clearScreen(unsigned int)+0x30>
c000d911:	31 ff                	xor    edi,edi
c000d913:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d919:	7e 12                	jle    c000d92d <Video::clearScreen(unsigned int)+0x2d>
c000d91b:	8b 06                	mov    eax,DWORD PTR [esi]
c000d91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d921:	53                   	push   ebx
c000d922:	57                   	push   edi
c000d923:	47                   	inc    edi
c000d924:	56                   	push   esi
c000d925:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d928:	83 c4 10             	add    esp,0x10
c000d92b:	eb e6                	jmp    c000d913 <Video::clearScreen(unsigned int)+0x13>
c000d92d:	43                   	inc    ebx
c000d92e:	eb d9                	jmp    c000d909 <Video::clearScreen(unsigned int)+0x9>
c000d930:	5b                   	pop    ebx
c000d931:	5e                   	pop    esi
c000d932:	5f                   	pop    edi
c000d933:	c3                   	ret    

c000d934 <Video::putpixel(int, int, unsigned int)>:
c000d934:	c7 44 24 04 84 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e284
c000d93c:	e9 be 28 00 00       	jmp    c00101ff <KePanic(char const*)>
c000d941:	90                   	nop

c000d942 <Video::Video(char const*)>:
c000d942:	83 ec 0c             	sub    esp,0xc
c000d945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d949:	83 ec 08             	sub    esp,0x8
c000d94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d950:	50                   	push   eax
c000d951:	e8 fe e1 ff ff       	call   c000bb54 <Device::Device(char const*)>
c000d956:	83 c4 10             	add    esp,0x10
c000d959:	ba f4 e2 01 c0       	mov    edx,0xc001e2f4
c000d95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d962:	89 10                	mov    DWORD PTR [eax],edx
c000d964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d968:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d972:	90                   	nop
c000d973:	83 c4 0c             	add    esp,0xc
c000d976:	c3                   	ret    
c000d977:	90                   	nop

c000d978 <Video::~Video()>:
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	ba f4 e2 01 c0       	mov    edx,0xc001e2f4
c000d980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d984:	89 10                	mov    DWORD PTR [eax],edx
c000d986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d98a:	83 ec 0c             	sub    esp,0xc
c000d98d:	50                   	push   eax
c000d98e:	e8 2b df ff ff       	call   c000b8be <Device::~Device()>
c000d993:	83 c4 10             	add    esp,0x10
c000d996:	90                   	nop
c000d997:	83 c4 0c             	add    esp,0xc
c000d99a:	c3                   	ret    
c000d99b:	90                   	nop

c000d99c <Video::~Video()>:
c000d99c:	83 ec 0c             	sub    esp,0xc
c000d99f:	83 ec 0c             	sub    esp,0xc
c000d9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a6:	e8 cd ff ff ff       	call   c000d978 <Video::~Video()>
c000d9ab:	83 c4 10             	add    esp,0x10
c000d9ae:	83 ec 08             	sub    esp,0x8
c000d9b1:	68 64 01 00 00       	push   0x164
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	e8 c8 ca ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	83 c4 0c             	add    esp,0xc
c000d9c5:	c3                   	ret    

c000d9c6 <Video::isMonochrome()>:
c000d9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9ca:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d9d0:	c3                   	ret    
c000d9d1:	90                   	nop

c000d9d2 <Video::getWidth()>:
c000d9d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d9dc:	c3                   	ret    
c000d9dd:	90                   	nop

c000d9de <Video::getHeight()>:
c000d9de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d9e8:	c3                   	ret    
c000d9e9:	90                   	nop

c000d9ea <Video::drawCursor(int, int, unsigned char*, int)>:
c000d9ea:	55                   	push   ebp
c000d9eb:	57                   	push   edi
c000d9ec:	56                   	push   esi
c000d9ed:	53                   	push   ebx
c000d9ee:	83 ec 2c             	sub    esp,0x2c
c000d9f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9f5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d9f9:	83 f8 01             	cmp    eax,0x1
c000d9fc:	19 c9                	sbb    ecx,ecx
c000d9fe:	31 db                	xor    ebx,ebx
c000da00:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000da04:	89 cd                	mov    ebp,ecx
c000da06:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000da0e:	f7 d5                	not    ebp
c000da10:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000da16:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000da1a:	01 d8                	add    eax,ebx
c000da1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da20:	56                   	push   esi
c000da21:	e8 b8 ff ff ff       	call   c000d9de <Video::getHeight()>
c000da26:	59                   	pop    ecx
c000da27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000da2b:	7e 70                	jle    c000da9d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000da2d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000da31:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000da35:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000da38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000da40:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000da47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4b:	89 f8                	mov    eax,edi
c000da4d:	83 c0 20             	add    eax,0x20
c000da50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da54:	56                   	push   esi
c000da55:	e8 78 ff ff ff       	call   c000d9d2 <Video::getWidth()>
c000da5a:	5a                   	pop    edx
c000da5b:	39 c7                	cmp    edi,eax
c000da5d:	7d 34                	jge    c000da93 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000da5f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000da64:	74 05                	je     c000da6b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000da66:	8b 06                	mov    eax,DWORD PTR [esi]
c000da68:	55                   	push   ebp
c000da69:	eb 0d                	jmp    c000da78 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000da6b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000da70:	74 12                	je     c000da84 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000da72:	8b 06                	mov    eax,DWORD PTR [esi]
c000da74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da7c:	57                   	push   edi
c000da7d:	56                   	push   esi
c000da7e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da81:	83 c4 10             	add    esp,0x10
c000da84:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000da88:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000da8c:	47                   	inc    edi
c000da8d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000da91:	75 c1                	jne    c000da54 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000da93:	43                   	inc    ebx
c000da94:	83 fb 20             	cmp    ebx,0x20
c000da97:	0f 85 79 ff ff ff    	jne    c000da16 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000da9d:	83 c4 2c             	add    esp,0x2c
c000daa0:	5b                   	pop    ebx
c000daa1:	5e                   	pop    esi
c000daa2:	5f                   	pop    edi
c000daa3:	5d                   	pop    ebp
c000daa4:	c3                   	ret    
c000daa5:	90                   	nop

c000daa6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000daa6:	55                   	push   ebp
c000daa7:	57                   	push   edi
c000daa8:	56                   	push   esi
c000daa9:	53                   	push   ebx
c000daaa:	83 ec 28             	sub    esp,0x28
c000daad:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dab1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dab5:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dab9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dabd:	c1 e6 08             	shl    esi,0x8
c000dac0:	01 c6                	add    esi,eax
c000dac2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dac6:	c1 e0 08             	shl    eax,0x8
c000dac9:	01 d0                	add    eax,edx
c000dacb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dacf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dad3:	0f af c6             	imul   eax,esi
c000dad6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dadd:	50                   	push   eax
c000dade:	e8 d6 9c ff ff       	call   c00077b9 <malloc>
c000dae3:	83 c4 10             	add    esp,0x10
c000dae6:	89 c7                	mov    edi,eax
c000dae8:	85 c0                	test   eax,eax
c000daea:	75 10                	jne    c000dafc <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	68 a5 e2 01 c0       	push   0xc001e2a5
c000daf4:	e8 06 27 00 00       	call   c00101ff <KePanic(char const*)>
c000daf9:	83 c4 10             	add    esp,0x10
c000dafc:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000daff:	ba 12 00 00 00       	mov    edx,0x12
c000db04:	84 c0                	test   al,al
c000db06:	74 11                	je     c000db19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000db08:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000db0c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000db10:	c1 fa 03             	sar    edx,0x3
c000db13:	0f af d1             	imul   edx,ecx
c000db16:	83 c2 12             	add    edx,0x12
c000db19:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000db1d:	74 04                	je     c000db23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000db1f:	85 f6                	test   esi,esi
c000db21:	75 12                	jne    c000db35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000db23:	83 ec 0c             	sub    esp,0xc
c000db26:	68 b5 e2 01 c0       	push   0xc001e2b5
c000db2b:	e8 4d ca ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000db30:	e9 b8 00 00 00       	jmp    c000dbed <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000db35:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000db39:	80 f9 02             	cmp    cl,0x2
c000db3c:	0f 85 96 00 00 00    	jne    c000dbd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000db42:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000db47:	75 0e                	jne    c000db57 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db49:	84 c0                	test   al,al
c000db4b:	75 0a                	jne    c000db57 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db4d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000db50:	83 e8 18             	sub    eax,0x18
c000db53:	a8 f7                	test   al,0xf7
c000db55:	74 0a                	je     c000db61 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000db57:	83 ec 0c             	sub    esp,0xc
c000db5a:	68 ca e2 01 c0       	push   0xc001e2ca
c000db5f:	eb 7f                	jmp    c000dbe0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000db61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000db71:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000db75:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db7d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000db81:	75 0c                	jne    c000db8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000db83:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000db88:	c1 e0 18             	shl    eax,0x18
c000db8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db8f:	45                   	inc    ebp
c000db90:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db95:	c1 e1 10             	shl    ecx,0x10
c000db98:	89 c8                	mov    eax,ecx
c000db9a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000db9f:	c1 e1 08             	shl    ecx,0x8
c000dba2:	09 c1                	or     ecx,eax
c000dba4:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dba8:	09 c1                	or     ecx,eax
c000dbaa:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dbae:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dbb2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dbb6:	c1 f8 03             	sar    eax,0x3
c000dbb9:	01 c2                	add    edx,eax
c000dbbb:	89 e8                	mov    eax,ebp
c000dbbd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dbc1:	39 c6                	cmp    esi,eax
c000dbc3:	7f b0                	jg     c000db75 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dbc5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dbc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbcd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dbd0:	7e 22                	jle    c000dbf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dbd2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dbd6:	eb 99                	jmp    c000db71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dbd8:	50                   	push   eax
c000dbd9:	50                   	push   eax
c000dbda:	51                   	push   ecx
c000dbdb:	68 d8 e2 01 c0       	push   0xc001e2d8
c000dbe0:	e8 98 c9 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000dbe5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbe8:	e8 dc 9b ff ff       	call   c00077c9 <free>
c000dbed:	83 c4 10             	add    esp,0x10
c000dbf0:	31 ff                	xor    edi,edi
c000dbf2:	eb 0f                	jmp    c000dc03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dbf4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dbf8:	89 30                	mov    DWORD PTR [eax],esi
c000dbfa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbfe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc01:	89 30                	mov    DWORD PTR [eax],esi
c000dc03:	83 c4 1c             	add    esp,0x1c
c000dc06:	89 f8                	mov    eax,edi
c000dc08:	5b                   	pop    ebx
c000dc09:	5e                   	pop    esi
c000dc0a:	5f                   	pop    edi
c000dc0b:	5d                   	pop    ebp
c000dc0c:	c3                   	ret    
c000dc0d:	90                   	nop

c000dc0e <Video::putTGA(int, int, unsigned char*, int)>:
c000dc0e:	55                   	push   ebp
c000dc0f:	57                   	push   edi
c000dc10:	56                   	push   esi
c000dc11:	53                   	push   ebx
c000dc12:	83 ec 28             	sub    esp,0x28
c000dc15:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dc19:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc1d:	50                   	push   eax
c000dc1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc22:	50                   	push   eax
c000dc23:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc27:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc2b:	56                   	push   esi
c000dc2c:	e8 75 fe ff ff       	call   c000daa6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dc31:	83 c4 20             	add    esp,0x20
c000dc34:	85 c0                	test   eax,eax
c000dc36:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dc3a:	74 35                	je     c000dc71 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dc3c:	89 c7                	mov    edi,eax
c000dc3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc42:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dc46:	39 d8                	cmp    eax,ebx
c000dc48:	7e 27                	jle    c000dc71 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dc4a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dc4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc52:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dc56:	39 e8                	cmp    eax,ebp
c000dc58:	7e 14                	jle    c000dc6e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dc5a:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc5c:	83 c7 04             	add    edi,0x4
c000dc5f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dc62:	53                   	push   ebx
c000dc63:	55                   	push   ebp
c000dc64:	45                   	inc    ebp
c000dc65:	56                   	push   esi
c000dc66:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc69:	83 c4 10             	add    esp,0x10
c000dc6c:	eb e0                	jmp    c000dc4e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dc6e:	43                   	inc    ebx
c000dc6f:	eb cd                	jmp    c000dc3e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dc71:	83 c4 1c             	add    esp,0x1c
c000dc74:	5b                   	pop    ebx
c000dc75:	5e                   	pop    esi
c000dc76:	5f                   	pop    edi
c000dc77:	5d                   	pop    ebp
c000dc78:	c3                   	ret    
c000dc79:	66 90                	xchg   ax,ax
c000dc7b:	90                   	nop

c000dc7c <ACPI::close(int, int, void*)>:
c000dc7c:	83 ec 1c             	sub    esp,0x1c
c000dc7f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dc87:	74 0b                	je     c000dc94 <ACPI::close(int, int, void*)+0x18>
c000dc89:	b8 00 00 00 00       	mov    eax,0x0
c000dc8e:	e9 9d 00 00 00       	jmp    c000dd30 <ACPI::close(int, int, void*)+0xb4>
c000dc93:	90                   	nop
c000dc94:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dc99:	75 29                	jne    c000dcc4 <ACPI::close(int, int, void*)+0x48>
c000dc9b:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dca0:	85 c0                	test   eax,eax
c000dca2:	74 08                	je     c000dcac <ACPI::close(int, int, void*)+0x30>
c000dca4:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dca9:	ff d0                	call   eax
c000dcab:	90                   	nop
c000dcac:	83 ec 0c             	sub    esp,0xc
c000dcaf:	68 34 e3 01 c0       	push   0xc001e334
c000dcb4:	e8 46 25 00 00       	call   c00101ff <KePanic(char const*)>
c000dcb9:	83 c4 10             	add    esp,0x10
c000dcbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dcc1:	eb 6d                	jmp    c000dd30 <ACPI::close(int, int, void*)+0xb4>
c000dcc3:	90                   	nop
c000dcc4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dcc9:	75 5d                	jne    c000dd28 <ACPI::close(int, int, void*)+0xac>
c000dccb:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dcd0:	85 c0                	test   eax,eax
c000dcd2:	74 08                	je     c000dcdc <ACPI::close(int, int, void*)+0x60>
c000dcd4:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dcd9:	ff d0                	call   eax
c000dcdb:	90                   	nop
c000dcdc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dce1:	8d 76 00             	lea    esi,[esi+0x0]
c000dce4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dce8:	25 ff 00 00 00       	and    eax,0xff
c000dced:	83 e0 02             	and    eax,0x2
c000dcf0:	74 1e                	je     c000dd10 <ACPI::close(int, int, void*)+0x94>
c000dcf2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dcf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcfd:	89 c2                	mov    edx,eax
c000dcff:	ec                   	in     al,dx
c000dd00:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dd04:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dd08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dd0c:	eb d6                	jmp    c000dce4 <ACPI::close(int, int, void*)+0x68>
c000dd0e:	66 90                	xchg   ax,ax
c000dd10:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dd17:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dd1c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dd20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd24:	ee                   	out    dx,al
c000dd25:	8d 76 00             	lea    esi,[esi+0x0]
c000dd28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd30:	83 c4 1c             	add    esp,0x1c
c000dd33:	c3                   	ret    

c000dd34 <findRSDP()>:
c000dd34:	83 ec 1c             	sub    esp,0x1c
c000dd37:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd3c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd42:	83 e0 04             	and    eax,0x4
c000dd45:	84 c0                	test   al,al
c000dd47:	75 07                	jne    c000dd50 <findRSDP()+0x1c>
c000dd49:	b8 00 00 00 00       	mov    eax,0x0
c000dd4e:	eb 70                	jmp    c000ddc0 <findRSDP()+0x8c>
c000dd50:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000dd55:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dd5a:	7f 1c                	jg     c000dd78 <findRSDP()+0x44>
c000dd5c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd61:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dd67:	83 e2 fb             	and    edx,0xfffffffb
c000dd6a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dd70:	b8 00 00 00 00       	mov    eax,0x0
c000dd75:	eb 49                	jmp    c000ddc0 <findRSDP()+0x8c>
c000dd77:	90                   	nop
c000dd78:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dd80:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dd88:	77 2e                	ja     c000ddb8 <findRSDP()+0x84>
c000dd8a:	83 ec 04             	sub    esp,0x4
c000dd8d:	6a 08                	push   0x8
c000dd8f:	68 cf e3 01 c0       	push   0xc001e3cf
c000dd94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd98:	e8 f3 25 ff ff       	call   c0000390 <memcmp>
c000dd9d:	83 c4 10             	add    esp,0x10
c000dda0:	85 c0                	test   eax,eax
c000dda2:	0f 94 c0             	sete   al
c000dda5:	84 c0                	test   al,al
c000dda7:	74 07                	je     c000ddb0 <findRSDP()+0x7c>
c000dda9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddad:	eb 11                	jmp    c000ddc0 <findRSDP()+0x8c>
c000ddaf:	90                   	nop
c000ddb0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ddb5:	eb c9                	jmp    c000dd80 <findRSDP()+0x4c>
c000ddb7:	90                   	nop
c000ddb8:	b8 00 00 00 00       	mov    eax,0x0
c000ddbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc0:	83 c4 1c             	add    esp,0x1c
c000ddc3:	c3                   	ret    

c000ddc4 <loadACPITables(unsigned char*)>:
c000ddc4:	57                   	push   edi
c000ddc5:	56                   	push   esi
c000ddc6:	53                   	push   ebx
c000ddc7:	83 ec 60             	sub    esp,0x60
c000ddca:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ddcf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ddd5:	83 e0 04             	and    eax,0x4
c000ddd8:	84 c0                	test   al,al
c000ddda:	0f 84 3c 02 00 00    	je     c000e01c <loadACPITables(unsigned char*)+0x258>
c000dde0:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000dde5:	84 c0                	test   al,al
c000dde7:	74 77                	je     c000de60 <loadACPITables(unsigned char*)+0x9c>
c000dde9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dded:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ddf1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ddf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddf8:	83 e8 24             	sub    eax,0x24
c000ddfb:	c1 e8 03             	shr    eax,0x3
c000ddfe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000de02:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000de0a:	66 90                	xchg   ax,ax
c000de0c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de10:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000de14:	0f 8d b6 00 00 00    	jge    c000ded0 <loadACPITables(unsigned char*)+0x10c>
c000de1a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de1e:	83 c0 24             	add    eax,0x24
c000de21:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000de25:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000de29:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000de2d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de31:	c1 e0 03             	shl    eax,0x3
c000de34:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000de38:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000de3c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000de3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000de41:	89 c1                	mov    ecx,eax
c000de43:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de48:	8d 50 01             	lea    edx,[eax+0x1]
c000de4b:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de51:	89 ca                	mov    edx,ecx
c000de53:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de5a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000de5e:	eb ac                	jmp    c000de0c <loadACPITables(unsigned char*)+0x48>
c000de60:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de64:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de6f:	83 e8 24             	sub    eax,0x24
c000de72:	c1 e8 02             	shr    eax,0x2
c000de75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000de79:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000de81:	8d 76 00             	lea    esi,[esi+0x0]
c000de84:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de88:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000de8c:	7d 42                	jge    c000ded0 <loadACPITables(unsigned char*)+0x10c>
c000de8e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de92:	83 c0 24             	add    eax,0x24
c000de95:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000de99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dea1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dea5:	c1 e0 02             	shl    eax,0x2
c000dea8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000deac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000deb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000deb2:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000deb7:	8d 50 01             	lea    edx,[eax+0x1]
c000deba:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000dec0:	89 ca                	mov    edx,ecx
c000dec2:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000dec9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000decd:	eb b5                	jmp    c000de84 <loadACPITables(unsigned char*)+0xc0>
c000decf:	90                   	nop
c000ded0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ded8:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dedd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dee1:	0f 8d 39 01 00 00    	jge    c000e020 <loadACPITables(unsigned char*)+0x25c>
c000dee7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000deeb:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000def2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000def6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000defa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000defe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df02:	25 ff 0f 00 00       	and    eax,0xfff
c000df07:	89 c6                	mov    esi,eax
c000df09:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df0f:	83 ec 0c             	sub    esp,0xc
c000df12:	6a 01                	push   0x1
c000df14:	e8 6c b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df19:	83 c4 10             	add    esp,0x10
c000df1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df20:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df26:	83 ec 0c             	sub    esp,0xc
c000df29:	6a 01                	push   0x1
c000df2b:	6a 01                	push   0x1
c000df2d:	50                   	push   eax
c000df2e:	52                   	push   edx
c000df2f:	53                   	push   ebx
c000df30:	e8 31 bd ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df35:	83 c4 20             	add    esp,0x20
c000df38:	09 f0                	or     eax,esi
c000df3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df3e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df42:	c1 e0 03             	shl    eax,0x3
c000df45:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000df4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000df5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000df72:	89 c6                	mov    esi,eax
c000df74:	89 d7                	mov    edi,edx
c000df76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df78:	89 c8                	mov    eax,ecx
c000df7a:	89 fa                	mov    edx,edi
c000df7c:	89 f3                	mov    ebx,esi
c000df7e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000df86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000df99:	05 00 10 00 00       	add    eax,0x1000
c000df9e:	c1 e8 0c             	shr    eax,0xc
c000dfa1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfa9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dfad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfb1:	25 ff 0f 00 00       	and    eax,0xfff
c000dfb6:	89 c6                	mov    esi,eax
c000dfb8:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000dfbe:	83 ec 0c             	sub    esp,0xc
c000dfc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dfc5:	e8 bb b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000dfca:	83 c4 10             	add    esp,0x10
c000dfcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dfd1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfd7:	83 ec 0c             	sub    esp,0xc
c000dfda:	6a 01                	push   0x1
c000dfdc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dfe0:	50                   	push   eax
c000dfe1:	52                   	push   edx
c000dfe2:	53                   	push   ebx
c000dfe3:	e8 7e bc ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfe8:	83 c4 20             	add    esp,0x20
c000dfeb:	09 f0                	or     eax,esi
c000dfed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff5:	83 ec 0c             	sub    esp,0xc
c000dff8:	50                   	push   eax
c000dff9:	e8 7b b5 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c000dffe:	83 c4 10             	add    esp,0x10
c000e001:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e005:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e009:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000e010:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e014:	e9 bf fe ff ff       	jmp    c000ded8 <loadACPITables(unsigned char*)+0x114>
c000e019:	8d 76 00             	lea    esi,[esi+0x0]
c000e01c:	90                   	nop
c000e01d:	8d 76 00             	lea    esi,[esi+0x0]
c000e020:	83 c4 60             	add    esp,0x60
c000e023:	5b                   	pop    ebx
c000e024:	5e                   	pop    esi
c000e025:	5f                   	pop    edi
c000e026:	c3                   	ret    
c000e027:	90                   	nop

c000e028 <findRSDT(unsigned char*)>:
c000e028:	57                   	push   edi
c000e029:	56                   	push   esi
c000e02a:	53                   	push   ebx
c000e02b:	83 ec 50             	sub    esp,0x50
c000e02e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e033:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e039:	83 e0 04             	and    eax,0x4
c000e03c:	84 c0                	test   al,al
c000e03e:	75 0c                	jne    c000e04c <findRSDT(unsigned char*)+0x24>
c000e040:	b8 00 00 00 00       	mov    eax,0x0
c000e045:	e9 26 01 00 00       	jmp    c000e170 <findRSDT(unsigned char*)+0x148>
c000e04a:	66 90                	xchg   ax,ax
c000e04c:	89 e0                	mov    eax,esp
c000e04e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e052:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e056:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e05a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e062:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e066:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e06a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e06e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e072:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e076:	89 c6                	mov    esi,eax
c000e078:	89 d7                	mov    edi,edx
c000e07a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e07c:	89 c8                	mov    eax,ecx
c000e07e:	89 fa                	mov    edx,edi
c000e080:	89 f3                	mov    ebx,esi
c000e082:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e086:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e08a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e08e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e092:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e096:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e09e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e0a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e0a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0b6:	25 ff 0f 00 00       	and    eax,0xfff
c000e0bb:	89 c6                	mov    esi,eax
c000e0bd:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e0c3:	83 ec 0c             	sub    esp,0xc
c000e0c6:	6a 02                	push   0x2
c000e0c8:	e8 b8 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e0d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0da:	83 ec 0c             	sub    esp,0xc
c000e0dd:	6a 01                	push   0x1
c000e0df:	6a 02                	push   0x2
c000e0e1:	50                   	push   eax
c000e0e2:	52                   	push   edx
c000e0e3:	53                   	push   ebx
c000e0e4:	e8 7d bb ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0e9:	83 c4 20             	add    esp,0x20
c000e0ec:	09 f0                	or     eax,esi
c000e0ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0f6:	25 ff 0f 00 00       	and    eax,0xfff
c000e0fb:	89 c6                	mov    esi,eax
c000e0fd:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e103:	83 ec 0c             	sub    esp,0xc
c000e106:	6a 02                	push   0x2
c000e108:	e8 78 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e114:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e11a:	83 ec 0c             	sub    esp,0xc
c000e11d:	6a 01                	push   0x1
c000e11f:	6a 02                	push   0x2
c000e121:	50                   	push   eax
c000e122:	52                   	push   edx
c000e123:	53                   	push   ebx
c000e124:	e8 3d bb ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e129:	83 c4 20             	add    esp,0x20
c000e12c:	09 f0                	or     eax,esi
c000e12e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e132:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e137:	75 13                	jne    c000e14c <findRSDT(unsigned char*)+0x124>
c000e139:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e140:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e144:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e148:	eb 22                	jmp    c000e16c <findRSDT(unsigned char*)+0x144>
c000e14a:	66 90                	xchg   ax,ax
c000e14c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e151:	75 11                	jne    c000e164 <findRSDT(unsigned char*)+0x13c>
c000e153:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e15a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e15e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e162:	eb 08                	jmp    c000e16c <findRSDT(unsigned char*)+0x144>
c000e164:	b8 00 00 00 00       	mov    eax,0x0
c000e169:	eb 05                	jmp    c000e170 <findRSDT(unsigned char*)+0x148>
c000e16b:	90                   	nop
c000e16c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e170:	83 c4 50             	add    esp,0x50
c000e173:	5b                   	pop    ebx
c000e174:	5e                   	pop    esi
c000e175:	5f                   	pop    edi
c000e176:	c3                   	ret    
c000e177:	90                   	nop

c000e178 <findDataTable(unsigned char*, char*)>:
c000e178:	83 ec 1c             	sub    esp,0x1c
c000e17b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e180:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e186:	83 e0 04             	and    eax,0x4
c000e189:	84 c0                	test   al,al
c000e18b:	75 07                	jne    c000e194 <findDataTable(unsigned char*, char*)+0x1c>
c000e18d:	b8 00 00 00 00       	mov    eax,0x0
c000e192:	eb 58                	jmp    c000e1ec <findDataTable(unsigned char*, char*)+0x74>
c000e194:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e19c:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e1a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e1a5:	7d 3d                	jge    c000e1e4 <findDataTable(unsigned char*, char*)+0x6c>
c000e1a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1ab:	c1 e0 03             	shl    eax,0x3
c000e1ae:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e1b3:	83 ec 04             	sub    esp,0x4
c000e1b6:	6a 04                	push   0x4
c000e1b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1bc:	50                   	push   eax
c000e1bd:	e8 ce 21 ff ff       	call   c0000390 <memcmp>
c000e1c2:	83 c4 10             	add    esp,0x10
c000e1c5:	85 c0                	test   eax,eax
c000e1c7:	0f 94 c0             	sete   al
c000e1ca:	84 c0                	test   al,al
c000e1cc:	74 0e                	je     c000e1dc <findDataTable(unsigned char*, char*)+0x64>
c000e1ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1d2:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e1d9:	eb 11                	jmp    c000e1ec <findDataTable(unsigned char*, char*)+0x74>
c000e1db:	90                   	nop
c000e1dc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1e0:	eb ba                	jmp    c000e19c <findDataTable(unsigned char*, char*)+0x24>
c000e1e2:	66 90                	xchg   ax,ax
c000e1e4:	b8 00 00 00 00       	mov    eax,0x0
c000e1e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1ec:	83 c4 1c             	add    esp,0x1c
c000e1ef:	c3                   	ret    

c000e1f0 <scanMADT()>:
c000e1f0:	53                   	push   ebx
c000e1f1:	83 ec 38             	sub    esp,0x38
c000e1f4:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e1f9:	25 00 04 00 00       	and    eax,0x400
c000e1fe:	74 14                	je     c000e214 <scanMADT()+0x24>
c000e200:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e205:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e20b:	83 e2 fb             	and    edx,0xfffffffb
c000e20e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e214:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e219:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e21f:	83 e0 04             	and    eax,0x4
c000e222:	84 c0                	test   al,al
c000e224:	0f 84 8a 04 00 00    	je     c000e6b4 <scanMADT()+0x4c4>
c000e22a:	e8 05 fb ff ff       	call   c000dd34 <findRSDP()>
c000e22f:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e234:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e239:	85 c0                	test   eax,eax
c000e23b:	75 1b                	jne    c000e258 <scanMADT()+0x68>
c000e23d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e242:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e248:	83 e2 fb             	and    edx,0xfffffffb
c000e24b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e251:	e9 66 04 00 00       	jmp    c000e6bc <scanMADT()+0x4cc>
c000e256:	66 90                	xchg   ax,ax
c000e258:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e25d:	83 ec 0c             	sub    esp,0xc
c000e260:	50                   	push   eax
c000e261:	e8 c2 fd ff ff       	call   c000e028 <findRSDT(unsigned char*)>
c000e266:	83 c4 10             	add    esp,0x10
c000e269:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e26e:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e273:	85 c0                	test   eax,eax
c000e275:	75 19                	jne    c000e290 <scanMADT()+0xa0>
c000e277:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e27c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e282:	83 e2 fb             	and    edx,0xfffffffb
c000e285:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e28b:	e9 2c 04 00 00       	jmp    c000e6bc <scanMADT()+0x4cc>
c000e290:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e295:	83 ec 0c             	sub    esp,0xc
c000e298:	50                   	push   eax
c000e299:	e8 26 fb ff ff       	call   c000ddc4 <loadACPITables(unsigned char*)>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e2a6:	83 ec 08             	sub    esp,0x8
c000e2a9:	68 d8 e3 01 c0       	push   0xc001e3d8
c000e2ae:	50                   	push   eax
c000e2af:	e8 c4 fe ff ff       	call   c000e178 <findDataTable(unsigned char*, char*)>
c000e2b4:	83 c4 10             	add    esp,0x10
c000e2b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e2bb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e2c0:	75 1a                	jne    c000e2dc <scanMADT()+0xec>
c000e2c2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2c7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2cd:	83 e2 fe             	and    edx,0xfffffffe
c000e2d0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2d6:	e9 e1 03 00 00       	jmp    c000e6bc <scanMADT()+0x4cc>
c000e2db:	90                   	nop
c000e2dc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e2e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e2eb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e2ef:	0f 87 c7 03 00 00    	ja     c000e6bc <scanMADT()+0x4cc>
c000e2f5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e2fd:	0f 87 b9 03 00 00    	ja     c000e6bc <scanMADT()+0x4cc>
c000e303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e307:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e30f:	8d 50 01             	lea    edx,[eax+0x1]
c000e312:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e316:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e31a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e31e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e322:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e326:	8d 50 01             	lea    edx,[eax+0x1]
c000e329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e32d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e331:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e335:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e339:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e33e:	0f 86 74 03 00 00    	jbe    c000e6b8 <scanMADT()+0x4c8>
c000e344:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e349:	75 5d                	jne    c000e3a8 <scanMADT()+0x1b8>
c000e34b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e34f:	8d 50 01             	lea    edx,[eax+0x1]
c000e352:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e356:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e35c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e362:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e366:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e36a:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e370:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e374:	8d 42 01             	lea    eax,[edx+0x1]
c000e377:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e37b:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e380:	8d 48 01             	lea    ecx,[eax+0x1]
c000e383:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e389:	25 ff 00 00 00       	and    eax,0xff
c000e38e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e392:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e396:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e39c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3a1:	e9 f6 02 00 00       	jmp    c000e69c <scanMADT()+0x4ac>
c000e3a6:	66 90                	xchg   ax,ax
c000e3a8:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e3ad:	0f 85 29 01 00 00    	jne    c000e4dc <scanMADT()+0x2ec>
c000e3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3be:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e3c4:	81 e2 ff 00 00 00    	and    edx,0xff
c000e3ca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e3ce:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e3d2:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e3d8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e3dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e4:	01 d0                	add    eax,edx
c000e3e6:	83 c0 2c             	add    eax,0x2c
c000e3e9:	8a 00                	mov    al,BYTE PTR [eax]
c000e3eb:	31 d2                	xor    edx,edx
c000e3ed:	88 c2                	mov    dl,al
c000e3ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3f3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3fe:	25 ff 00 00 00       	and    eax,0xff
c000e403:	c1 e0 08             	shl    eax,0x8
c000e406:	89 d1                	mov    ecx,edx
c000e408:	09 c1                	or     ecx,eax
c000e40a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e40e:	8d 50 02             	lea    edx,[eax+0x2]
c000e411:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e415:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e419:	25 ff 00 00 00       	and    eax,0xff
c000e41e:	c1 e0 10             	shl    eax,0x10
c000e421:	09 c1                	or     ecx,eax
c000e423:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e427:	8d 50 03             	lea    edx,[eax+0x3]
c000e42a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e42e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e432:	25 ff 00 00 00       	and    eax,0xff
c000e437:	c1 e0 18             	shl    eax,0x18
c000e43a:	09 c1                	or     ecx,eax
c000e43c:	89 ca                	mov    edx,ecx
c000e43e:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e443:	25 ff 00 00 00       	and    eax,0xff
c000e448:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e44f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e454:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e458:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e45c:	01 d0                	add    eax,edx
c000e45e:	83 c0 2c             	add    eax,0x2c
c000e461:	8a 00                	mov    al,BYTE PTR [eax]
c000e463:	31 d2                	xor    edx,edx
c000e465:	88 c2                	mov    dl,al
c000e467:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e46b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e46e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e472:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e476:	25 ff 00 00 00       	and    eax,0xff
c000e47b:	c1 e0 08             	shl    eax,0x8
c000e47e:	89 d1                	mov    ecx,edx
c000e480:	09 c1                	or     ecx,eax
c000e482:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e486:	8d 50 02             	lea    edx,[eax+0x2]
c000e489:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e48d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e491:	25 ff 00 00 00       	and    eax,0xff
c000e496:	c1 e0 10             	shl    eax,0x10
c000e499:	09 c1                	or     ecx,eax
c000e49b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e49f:	8d 50 03             	lea    edx,[eax+0x3]
c000e4a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4aa:	25 ff 00 00 00       	and    eax,0xff
c000e4af:	c1 e0 18             	shl    eax,0x18
c000e4b2:	09 c1                	or     ecx,eax
c000e4b4:	89 ca                	mov    edx,ecx
c000e4b6:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4bb:	25 ff 00 00 00       	and    eax,0xff
c000e4c0:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e4c7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4cc:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4d1:	40                   	inc    eax
c000e4d2:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e4d7:	e9 c0 01 00 00       	jmp    c000e69c <scanMADT()+0x4ac>
c000e4dc:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e4e1:	0f 85 fd 00 00 00    	jne    c000e5e4 <scanMADT()+0x3f4>
c000e4e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4eb:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4fa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e4fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e502:	8d 50 01             	lea    edx,[eax+0x1]
c000e505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e509:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e50d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e511:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e515:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e519:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e51d:	01 d0                	add    eax,edx
c000e51f:	83 c0 2c             	add    eax,0x2c
c000e522:	8a 00                	mov    al,BYTE PTR [eax]
c000e524:	31 d2                	xor    edx,edx
c000e526:	88 c2                	mov    dl,al
c000e528:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e52c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e52f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e533:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e537:	25 ff 00 00 00       	and    eax,0xff
c000e53c:	c1 e0 08             	shl    eax,0x8
c000e53f:	89 d1                	mov    ecx,edx
c000e541:	09 c1                	or     ecx,eax
c000e543:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e547:	8d 50 02             	lea    edx,[eax+0x2]
c000e54a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e54e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e552:	25 ff 00 00 00       	and    eax,0xff
c000e557:	c1 e0 10             	shl    eax,0x10
c000e55a:	09 c1                	or     ecx,eax
c000e55c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e560:	8d 50 03             	lea    edx,[eax+0x3]
c000e563:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e567:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e56b:	25 ff 00 00 00       	and    eax,0xff
c000e570:	c1 e0 18             	shl    eax,0x18
c000e573:	09 c8                	or     eax,ecx
c000e575:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e579:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e57e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e586:	01 d0                	add    eax,edx
c000e588:	83 c0 2c             	add    eax,0x2c
c000e58b:	8a 00                	mov    al,BYTE PTR [eax]
c000e58d:	25 ff 00 00 00       	and    eax,0xff
c000e592:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e596:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e599:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e59d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e5a1:	81 e2 ff 00 00 00    	and    edx,0xff
c000e5a7:	c1 e2 08             	shl    edx,0x8
c000e5aa:	09 d0                	or     eax,edx
c000e5ac:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e5b1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5b6:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e5ba:	25 ff 00 00 00       	and    eax,0xff
c000e5bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5c3:	88 90 60 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe07a0],dl
c000e5c9:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e5cd:	31 d2                	xor    edx,edx
c000e5cf:	88 c2                	mov    dl,al
c000e5d1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e5d6:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e5de:	e9 b9 00 00 00       	jmp    c000e69c <scanMADT()+0x4ac>
c000e5e3:	90                   	nop
c000e5e4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e5e9:	0f 85 a1 00 00 00    	jne    c000e690 <scanMADT()+0x4a0>
c000e5ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f3:	8d 50 01             	lea    edx,[eax+0x1]
c000e5f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e602:	25 ff 00 00 00       	and    eax,0xff
c000e607:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e60b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e60f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e613:	01 d0                	add    eax,edx
c000e615:	83 c0 2c             	add    eax,0x2c
c000e618:	8a 00                	mov    al,BYTE PTR [eax]
c000e61a:	31 d2                	xor    edx,edx
c000e61c:	88 c2                	mov    dl,al
c000e61e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e622:	8d 48 01             	lea    ecx,[eax+0x1]
c000e625:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e629:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e62d:	25 ff 00 00 00       	and    eax,0xff
c000e632:	c1 e0 08             	shl    eax,0x8
c000e635:	09 d0                	or     eax,edx
c000e637:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e63b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e640:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e644:	8d 50 01             	lea    edx,[eax+0x1]
c000e647:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e64b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e64f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e653:	25 ff 00 00 00       	and    eax,0xff
c000e658:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e660:	c1 e0 08             	shl    eax,0x8
c000e663:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e667:	89 c1                	mov    ecx,eax
c000e669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e66d:	c1 e0 18             	shl    eax,0x18
c000e670:	89 c3                	mov    ebx,eax
c000e672:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e677:	8d 50 01             	lea    edx,[eax+0x1]
c000e67a:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e680:	09 d9                	or     ecx,ebx
c000e682:	89 ca                	mov    edx,ecx
c000e684:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e68b:	eb 0f                	jmp    c000e69c <scanMADT()+0x4ac>
c000e68d:	8d 76 00             	lea    esi,[esi+0x0]
c000e690:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e695:	75 05                	jne    c000e69c <scanMADT()+0x4ac>
c000e697:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e69c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e6a0:	31 d2                	xor    edx,edx
c000e6a2:	88 c2                	mov    dl,al
c000e6a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6a8:	01 d0                	add    eax,edx
c000e6aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e6ae:	e9 31 fc ff ff       	jmp    c000e2e4 <scanMADT()+0xf4>
c000e6b3:	90                   	nop
c000e6b4:	90                   	nop
c000e6b5:	eb 05                	jmp    c000e6bc <scanMADT()+0x4cc>
c000e6b7:	90                   	nop
c000e6b8:	90                   	nop
c000e6b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6bc:	83 c4 38             	add    esp,0x38
c000e6bf:	5b                   	pop    ebx
c000e6c0:	c3                   	ret    
c000e6c1:	90                   	nop
c000e6c2:	66 90                	xchg   ax,ax

c000e6c4 <ACPI::ACPI()>:
c000e6c4:	83 ec 0c             	sub    esp,0xc
c000e6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6cb:	83 ec 08             	sub    esp,0x8
c000e6ce:	68 dd e3 01 c0       	push   0xc001e3dd
c000e6d3:	50                   	push   eax
c000e6d4:	e8 7b d4 ff ff       	call   c000bb54 <Device::Device(char const*)>
c000e6d9:	83 c4 10             	add    esp,0x10
c000e6dc:	ba 14 e5 01 c0       	mov    edx,0xc001e514
c000e6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e5:	89 10                	mov    DWORD PTR [eax],edx
c000e6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6eb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e704:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e70e:	e8 dd fa ff ff       	call   c000e1f0 <scanMADT()>
c000e713:	90                   	nop
c000e714:	83 c4 0c             	add    esp,0xc
c000e717:	c3                   	ret    

c000e718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e718:	83 ec 2c             	sub    esp,0x2c
c000e71b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e71f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e723:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e727:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e72b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e730:	88 d0                	mov    al,dl
c000e732:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e736:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e73b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e743:	90                   	nop
c000e744:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e748:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e74e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e752:	0f 8d 9c 00 00 00    	jge    c000e7f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e758:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e75c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e760:	83 c2 2a             	add    edx,0x2a
c000e763:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e767:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e76c:	75 7a                	jne    c000e7e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e76e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e772:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e776:	83 c2 2a             	add    edx,0x2a
c000e779:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e77d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e781:	75 65                	jne    c000e7e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e783:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e788:	74 3a                	je     c000e7c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e78a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e78e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e792:	83 c2 2a             	add    edx,0x2a
c000e795:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e799:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e79d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e7a0:	39 c2                	cmp    edx,eax
c000e7a2:	74 10                	je     c000e7b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	68 58 e3 01 c0       	push   0xc001e358
c000e7ac:	e8 4e 1a 00 00       	call   c00101ff <KePanic(char const*)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	83 ec 0c             	sub    esp,0xc
c000e7b7:	68 e2 e3 01 c0       	push   0xc001e3e2
c000e7bc:	e8 3e 1a 00 00       	call   c00101ff <KePanic(char const*)>
c000e7c1:	83 c4 10             	add    esp,0x10
c000e7c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e7c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7d0:	83 c2 2a             	add    edx,0x2a
c000e7d3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e7d7:	8b 02                	mov    eax,DWORD PTR [edx]
c000e7d9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e7dc:	89 01                	mov    DWORD PTR [ecx],eax
c000e7de:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e7e1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e7e6:	66 90                	xchg   ax,ax
c000e7e8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7ec:	e9 53 ff ff ff       	jmp    c000e744 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e7f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f4:	90                   	nop
c000e7f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7f9:	83 c4 2c             	add    esp,0x2c
c000e7fc:	c2 04 00             	ret    0x4
c000e7ff:	90                   	nop

c000e800 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e800:	83 ec 1c             	sub    esp,0x1c
c000e803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e807:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e80b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e80f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e814:	88 c8                	mov    al,cl
c000e816:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e81a:	88 d0                	mov    al,dl
c000e81c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e824:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e82e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e831:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e835:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e83d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e843:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e847:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e84a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e84e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e857:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e85d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e861:	8d 48 01             	lea    ecx,[eax+0x1]
c000e864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e868:	83 c2 2a             	add    edx,0x2a
c000e86b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e86f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e873:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e87d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e880:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e884:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e888:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e88c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e892:	8d 50 01             	lea    edx,[eax+0x1]
c000e895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e899:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e89f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8a9:	3d 00 02 00 00       	cmp    eax,0x200
c000e8ae:	75 10                	jne    c000e8c0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e8b0:	83 ec 0c             	sub    esp,0xc
c000e8b3:	68 f1 e3 01 c0       	push   0xc001e3f1
c000e8b8:	e8 42 19 00 00       	call   c00101ff <KePanic(char const*)>
c000e8bd:	83 c4 10             	add    esp,0x10
c000e8c0:	90                   	nop
c000e8c1:	83 c4 1c             	add    esp,0x1c
c000e8c4:	c3                   	ret    
c000e8c5:	90                   	nop
c000e8c6:	66 90                	xchg   ax,ax

c000e8c8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e8c8:	b8 00 00 00 00       	mov    eax,0x0
c000e8cd:	c3                   	ret    
c000e8ce:	66 90                	xchg   ax,ax

c000e8d0 <ACPI::detectPCI()>:
c000e8d0:	53                   	push   ebx
c000e8d1:	83 ec 28             	sub    esp,0x28
c000e8d4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e8d9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e8de:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e8e3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8e9:	83 e0 04             	and    eax,0x4
c000e8ec:	84 c0                	test   al,al
c000e8ee:	74 2c                	je     c000e91c <ACPI::detectPCI()+0x4c>
c000e8f0:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e8f5:	83 ec 08             	sub    esp,0x8
c000e8f8:	68 0e e4 01 c0       	push   0xc001e40e
c000e8fd:	50                   	push   eax
c000e8fe:	e8 75 f8 ff ff       	call   c000e178 <findDataTable(unsigned char*, char*)>
c000e903:	83 c4 10             	add    esp,0x10
c000e906:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e90a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e90f:	74 0b                	je     c000e91c <ACPI::detectPCI()+0x4c>
c000e911:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e916:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e91b:	90                   	nop
c000e91c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e924:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e928:	8a 00                	mov    al,BYTE PTR [eax]
c000e92a:	3c 01                	cmp    al,0x1
c000e92c:	75 0e                	jne    c000e93c <ACPI::detectPCI()+0x6c>
c000e92e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e933:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e938:	eb 2a                	jmp    c000e964 <ACPI::detectPCI()+0x94>
c000e93a:	66 90                	xchg   ax,ax
c000e93c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e940:	8a 00                	mov    al,BYTE PTR [eax]
c000e942:	3c 02                	cmp    al,0x2
c000e944:	75 1e                	jne    c000e964 <ACPI::detectPCI()+0x94>
c000e946:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e94b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e950:	74 12                	je     c000e964 <ACPI::detectPCI()+0x94>
c000e952:	83 ec 0c             	sub    esp,0xc
c000e955:	68 88 e3 01 c0       	push   0xc001e388
c000e95a:	e8 a0 18 00 00       	call   c00101ff <KePanic(char const*)>
c000e95f:	83 c4 10             	add    esp,0x10
c000e962:	66 90                	xchg   ax,ax
c000e964:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e968:	83 f0 01             	xor    eax,0x1
c000e96b:	84 c0                	test   al,al
c000e96d:	74 41                	je     c000e9b0 <ACPI::detectPCI()+0xe0>
c000e96f:	e8 bc 17 ff ff       	call   c0000130 <manualPCIProbe>
c000e974:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e978:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e97d:	75 0d                	jne    c000e98c <ACPI::detectPCI()+0xbc>
c000e97f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e984:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e989:	eb 25                	jmp    c000e9b0 <ACPI::detectPCI()+0xe0>
c000e98b:	90                   	nop
c000e98c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e991:	75 1d                	jne    c000e9b0 <ACPI::detectPCI()+0xe0>
c000e993:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e998:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e99d:	74 11                	je     c000e9b0 <ACPI::detectPCI()+0xe0>
c000e99f:	83 ec 0c             	sub    esp,0xc
c000e9a2:	68 88 e3 01 c0       	push   0xc001e388
c000e9a7:	e8 53 18 00 00       	call   c00101ff <KePanic(char const*)>
c000e9ac:	83 c4 10             	add    esp,0x10
c000e9af:	90                   	nop
c000e9b0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e9b5:	0f 84 85 00 00 00    	je     c000ea40 <ACPI::detectPCI()+0x170>
c000e9bb:	83 ec 0c             	sub    esp,0xc
c000e9be:	68 13 e4 01 c0       	push   0xc001e413
c000e9c3:	e8 bf 11 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c000e9c8:	83 c4 10             	add    esp,0x10
c000e9cb:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e9d3:	83 ec 0c             	sub    esp,0xc
c000e9d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9da:	e8 da 8d ff ff       	call   c00077b9 <malloc>
c000e9df:	83 c4 10             	add    esp,0x10
c000e9e2:	89 c3                	mov    ebx,eax
c000e9e4:	83 ec 0c             	sub    esp,0xc
c000e9e7:	53                   	push   ebx
c000e9e8:	e8 ad 9a 00 00       	call   c001849a <PCI::PCI()>
c000e9ed:	83 c4 10             	add    esp,0x10
c000e9f0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e9f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9f8:	83 ec 08             	sub    esp,0x8
c000e9fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9ff:	50                   	push   eax
c000ea00:	e8 b7 cf ff ff       	call   c000b9bc <Device::addChild(Device*)>
c000ea05:	83 c4 10             	add    esp,0x10
c000ea08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea0e:	83 c0 08             	add    eax,0x8
c000ea11:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea13:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea18:	74 0a                	je     c000ea24 <ACPI::detectPCI()+0x154>
c000ea1a:	ba 01 00 00 00       	mov    edx,0x1
c000ea1f:	eb 0b                	jmp    c000ea2c <ACPI::detectPCI()+0x15c>
c000ea21:	8d 76 00             	lea    esi,[esi+0x0]
c000ea24:	ba 02 00 00 00       	mov    edx,0x2
c000ea29:	8d 76 00             	lea    esi,[esi+0x0]
c000ea2c:	6a 00                	push   0x0
c000ea2e:	6a 00                	push   0x0
c000ea30:	52                   	push   edx
c000ea31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea35:	ff d0                	call   eax
c000ea37:	83 c4 10             	add    esp,0x10
c000ea3a:	e9 91 00 00 00       	jmp    c000ead0 <ACPI::detectPCI()+0x200>
c000ea3f:	90                   	nop
c000ea40:	83 ec 0c             	sub    esp,0xc
c000ea43:	68 2b e4 01 c0       	push   0xc001e42b
c000ea48:	e8 3a 11 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c000ea4d:	83 c4 10             	add    esp,0x10
c000ea50:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ea57:	83 ec 0c             	sub    esp,0xc
c000ea5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea5e:	e8 56 8d ff ff       	call   c00077b9 <malloc>
c000ea63:	83 c4 10             	add    esp,0x10
c000ea66:	89 c3                	mov    ebx,eax
c000ea68:	83 ec 0c             	sub    esp,0xc
c000ea6b:	53                   	push   ebx
c000ea6c:	e8 55 a5 00 00       	call   c0018fc6 <IDE::IDE()>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea7c:	83 ec 08             	sub    esp,0x8
c000ea7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea83:	50                   	push   eax
c000ea84:	e8 33 cf ff ff       	call   c000b9bc <Device::addChild(Device*)>
c000ea89:	83 c4 10             	add    esp,0x10
c000ea8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea90:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ea9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea9e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eaa7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eaab:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eab4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eab8:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaba:	83 c0 08             	add    eax,0x8
c000eabd:	8b 00                	mov    eax,DWORD PTR [eax]
c000eabf:	6a 00                	push   0x0
c000eac1:	6a 00                	push   0x0
c000eac3:	6a 00                	push   0x0
c000eac5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eac9:	ff d0                	call   eax
c000eacb:	83 c4 10             	add    esp,0x10
c000eace:	66 90                	xchg   ax,ax
c000ead0:	90                   	nop
c000ead1:	83 c4 28             	add    esp,0x28
c000ead4:	5b                   	pop    ebx
c000ead5:	c3                   	ret    
c000ead6:	66 90                	xchg   ax,ax

c000ead8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ead8:	83 ec 1c             	sub    esp,0x1c
c000eadb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eadf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eae2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eae6:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eaec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaf0:	25 ff 00 00 00       	and    eax,0xff
c000eaf5:	83 ec 08             	sub    esp,0x8
c000eaf8:	50                   	push   eax
c000eaf9:	52                   	push   edx
c000eafa:	e8 a7 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eaff:	83 c4 10             	add    esp,0x10
c000eb02:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eb06:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eb0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb10:	25 ff 00 00 00       	and    eax,0xff
c000eb15:	83 ec 04             	sub    esp,0x4
c000eb18:	6a 01                	push   0x1
c000eb1a:	50                   	push   eax
c000eb1b:	52                   	push   edx
c000eb1c:	e8 9b 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	90                   	nop
c000eb25:	83 c4 1c             	add    esp,0x1c
c000eb28:	c3                   	ret    
c000eb29:	90                   	nop
c000eb2a:	66 90                	xchg   ax,ax

c000eb2c <ACPI::sleep()>:
c000eb2c:	83 ec 0c             	sub    esp,0xc
c000eb2f:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eb34:	85 c0                	test   eax,eax
c000eb36:	74 08                	je     c000eb40 <ACPI::sleep()+0x14>
c000eb38:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eb3d:	ff d0                	call   eax
c000eb3f:	90                   	nop
c000eb40:	90                   	nop
c000eb41:	83 c4 0c             	add    esp,0xc
c000eb44:	c3                   	ret    
c000eb45:	90                   	nop
c000eb46:	66 90                	xchg   ax,ax

c000eb48 <ACPI::open(int, int, void*)>:
c000eb48:	57                   	push   edi
c000eb49:	56                   	push   esi
c000eb4a:	53                   	push   ebx
c000eb4b:	81 ec 70 01 00 00    	sub    esp,0x170
c000eb51:	83 ec 0c             	sub    esp,0xc
c000eb54:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eb5b:	e8 70 fd ff ff       	call   c000e8d0 <ACPI::detectPCI()>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	83 ec 0c             	sub    esp,0xc
c000eb66:	68 b0 e3 01 c0       	push   0xc001e3b0
c000eb6b:	e8 17 10 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c000eb70:	83 c4 10             	add    esp,0x10
c000eb73:	83 ec 0c             	sub    esp,0xc
c000eb76:	68 40 e4 01 c0       	push   0xc001e440
c000eb7b:	e8 d2 37 00 00       	call   c0012352 <Thr::loadKernelSymbolTable(char const*)>
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eb8b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb96:	83 ec 0c             	sub    esp,0xc
c000eb99:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eba0:	e8 14 8c ff ff       	call   c00077b9 <malloc>
c000eba5:	83 c4 10             	add    esp,0x10
c000eba8:	89 c3                	mov    ebx,eax
c000ebaa:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ebaf:	83 ec 04             	sub    esp,0x4
c000ebb2:	50                   	push   eax
c000ebb3:	68 5e e4 01 c0       	push   0xc001e45e
c000ebb8:	53                   	push   ebx
c000ebb9:	e8 34 bf ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c000ebbe:	83 c4 10             	add    esp,0x10
c000ebc1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ebc8:	83 ec 08             	sub    esp,0x8
c000ebcb:	6a 01                	push   0x1
c000ebcd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebd4:	e8 d9 bf ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c000ebd9:	83 c4 10             	add    esp,0x10
c000ebdc:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ebe3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ebeb:	75 17                	jne    c000ec04 <ACPI::open(int, int, void*)+0xbc>
c000ebed:	83 ec 0c             	sub    esp,0xc
c000ebf0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebf7:	e8 14 c0 ff ff       	call   c000ac10 <File::close()>
c000ebfc:	83 c4 10             	add    esp,0x10
c000ebff:	eb 0b                	jmp    c000ec0c <ACPI::open(int, int, void*)+0xc4>
c000ec01:	8d 76 00             	lea    esi,[esi+0x0]
c000ec04:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ec0c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ec14:	74 1e                	je     c000ec34 <ACPI::open(int, int, void*)+0xec>
c000ec16:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ec1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec1f:	83 c0 08             	add    eax,0x8
c000ec22:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec24:	83 ec 0c             	sub    esp,0xc
c000ec27:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec2e:	ff d0                	call   eax
c000ec30:	83 c4 10             	add    esp,0x10
c000ec33:	90                   	nop
c000ec34:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ec3b:	83 f0 01             	xor    eax,0x1
c000ec3e:	84 c0                	test   al,al
c000ec40:	74 42                	je     c000ec84 <ACPI::open(int, int, void*)+0x13c>
c000ec42:	83 ec 0c             	sub    esp,0xc
c000ec45:	68 7c e4 01 c0       	push   0xc001e47c
c000ec4a:	e8 38 0f 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	83 ec 04             	sub    esp,0x4
c000ec55:	6a 0c                	push   0xc
c000ec57:	68 97 e4 01 c0       	push   0xc001e497
c000ec5c:	68 a8 e4 01 c0       	push   0xc001e4a8
c000ec61:	e8 dc 2c 00 00       	call   c0011942 <Reg::readIntWithDefault(char*, char*, int)>
c000ec66:	83 c4 10             	add    esp,0x10
c000ec69:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ec70:	83 ec 0c             	sub    esp,0xc
c000ec73:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ec7a:	e8 10 a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	66 90                	xchg   ax,ax
c000ec84:	83 ec 0c             	sub    esp,0xc
c000ec87:	68 d7 d4 01 c0       	push   0xc001d4d7
c000ec8c:	e8 f6 0e 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c000ec91:	83 c4 10             	add    esp,0x10
c000ec94:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ec9b:	83 ec 08             	sub    esp,0x8
c000ec9e:	6a 12                	push   0x12
c000eca0:	50                   	push   eax
c000eca1:	e8 2e d0 ff ff       	call   c000bcd4 <getDevicesOfType(DeviceType)>
c000eca6:	83 c4 0c             	add    esp,0xc
c000eca9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecac:	83 ec 0c             	sub    esp,0xc
c000ecaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecb6:	50                   	push   eax
c000ecb7:	e8 70 dc 00 00       	call   c001c92c <LinkedList<Device>::isEmpty()>
c000ecbc:	83 c4 10             	add    esp,0x10
c000ecbf:	83 f0 01             	xor    eax,0x1
c000ecc2:	84 c0                	test   al,al
c000ecc4:	0f 84 46 01 00 00    	je     c000ee10 <ACPI::open(int, int, void*)+0x2c8>
c000ecca:	83 ec 0c             	sub    esp,0xc
c000eccd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecd4:	50                   	push   eax
c000ecd5:	e8 6e dc 00 00       	call   c001c948 <LinkedList<Device>::getFirstElement()>
c000ecda:	83 c4 10             	add    esp,0x10
c000ecdd:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ece4:	83 ec 0c             	sub    esp,0xc
c000ece7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecee:	50                   	push   eax
c000ecef:	e8 5c dc 00 00       	call   c001c950 <LinkedList<Device>::removeFirst()>
c000ecf4:	83 c4 10             	add    esp,0x10
c000ecf7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ecfe:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ed05:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ed0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ed10:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ed16:	ba 09 00 00 00       	mov    edx,0x9
c000ed1b:	fc                   	cld    
c000ed1c:	89 c7                	mov    edi,eax
c000ed1e:	89 de                	mov    esi,ebx
c000ed20:	89 d1                	mov    ecx,edx
c000ed22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed24:	83 ec 08             	sub    esp,0x8
c000ed27:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ed2b:	50                   	push   eax
c000ed2c:	83 ec 24             	sub    esp,0x24
c000ed2f:	89 e0                	mov    eax,esp
c000ed31:	89 c3                	mov    ebx,eax
c000ed33:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ed37:	ba 09 00 00 00       	mov    edx,0x9
c000ed3c:	89 df                	mov    edi,ebx
c000ed3e:	89 c6                	mov    esi,eax
c000ed40:	89 d1                	mov    ecx,edx
c000ed42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed44:	e8 33 9c 00 00       	call   c001897c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ed49:	83 c4 30             	add    esp,0x30
c000ed4c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ed53:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ed5b:	0f 84 4b ff ff ff    	je     c000ecac <ACPI::open(int, int, void*)+0x164>
c000ed61:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ed6c:	83 ec 0c             	sub    esp,0xc
c000ed6f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ed76:	e8 3e 8a ff ff       	call   c00077b9 <malloc>
c000ed7b:	83 c4 10             	add    esp,0x10
c000ed7e:	89 c3                	mov    ebx,eax
c000ed80:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ed85:	83 ec 04             	sub    esp,0x4
c000ed88:	50                   	push   eax
c000ed89:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed90:	53                   	push   ebx
c000ed91:	e8 5c bd ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c000ed96:	83 c4 10             	add    esp,0x10
c000ed99:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eda0:	83 ec 0c             	sub    esp,0xc
c000eda3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000edaa:	e8 71 c0 ff ff       	call   c000ae20 <File::exists()>
c000edaf:	83 c4 10             	add    esp,0x10
c000edb2:	84 c0                	test   al,al
c000edb4:	74 2a                	je     c000ede0 <ACPI::open(int, int, void*)+0x298>
c000edb6:	83 ec 08             	sub    esp,0x8
c000edb9:	6a 01                	push   0x1
c000edbb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000edc2:	e8 02 40 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c000edc7:	83 c4 10             	add    esp,0x10
c000edca:	83 ec 08             	sub    esp,0x8
c000edcd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000edd4:	50                   	push   eax
c000edd5:	e8 20 42 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c000edda:	83 c4 10             	add    esp,0x10
c000eddd:	8d 76 00             	lea    esi,[esi+0x0]
c000ede0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ede8:	0f 84 be fe ff ff    	je     c000ecac <ACPI::open(int, int, void*)+0x164>
c000edee:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000edf5:	8b 00                	mov    eax,DWORD PTR [eax]
c000edf7:	83 c0 08             	add    eax,0x8
c000edfa:	8b 00                	mov    eax,DWORD PTR [eax]
c000edfc:	83 ec 0c             	sub    esp,0xc
c000edff:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee06:	ff d0                	call   eax
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	e9 9c fe ff ff       	jmp    c000ecac <ACPI::open(int, int, void*)+0x164>
c000ee10:	83 ec 0c             	sub    esp,0xc
c000ee13:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee1a:	50                   	push   eax
c000ee1b:	e8 08 db 00 00       	call   c001c928 <LinkedList<Device>::~LinkedList()>
c000ee20:	83 c4 10             	add    esp,0x10
c000ee23:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000ee29:	83 ec 08             	sub    esp,0x8
c000ee2c:	6a 01                	push   0x1
c000ee2e:	68 af e4 01 c0       	push   0xc001e4af
c000ee33:	e8 91 3f 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c000ee38:	83 c4 10             	add    esp,0x10
c000ee3b:	83 ec 08             	sub    esp,0x8
c000ee3e:	53                   	push   ebx
c000ee3f:	50                   	push   eax
c000ee40:	e8 b5 41 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c000ee45:	83 c4 10             	add    esp,0x10
c000ee48:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ee4d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee53:	83 e0 04             	and    eax,0x4
c000ee56:	84 c0                	test   al,al
c000ee58:	0f 84 16 01 00 00    	je     c000ef74 <ACPI::open(int, int, void*)+0x42c>
c000ee5e:	83 ec 0c             	sub    esp,0xc
c000ee61:	68 cc e4 01 c0       	push   0xc001e4cc
c000ee66:	e8 1c 0d 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c000ee6b:	83 c4 10             	add    esp,0x10
c000ee6e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ee79:	83 ec 0c             	sub    esp,0xc
c000ee7c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ee83:	e8 31 89 ff ff       	call   c00077b9 <malloc>
c000ee88:	83 c4 10             	add    esp,0x10
c000ee8b:	89 c3                	mov    ebx,eax
c000ee8d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee92:	83 ec 04             	sub    esp,0x4
c000ee95:	50                   	push   eax
c000ee96:	68 e9 e4 01 c0       	push   0xc001e4e9
c000ee9b:	53                   	push   ebx
c000ee9c:	e8 51 bc ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c000eea1:	83 c4 10             	add    esp,0x10
c000eea4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000eeab:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eeb3:	74 1b                	je     c000eed0 <ACPI::open(int, int, void*)+0x388>
c000eeb5:	83 ec 0c             	sub    esp,0xc
c000eeb8:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eebf:	e8 5c bf ff ff       	call   c000ae20 <File::exists()>
c000eec4:	83 c4 10             	add    esp,0x10
c000eec7:	84 c0                	test   al,al
c000eec9:	74 05                	je     c000eed0 <ACPI::open(int, int, void*)+0x388>
c000eecb:	b0 01                	mov    al,0x1
c000eecd:	eb 05                	jmp    c000eed4 <ACPI::open(int, int, void*)+0x38c>
c000eecf:	90                   	nop
c000eed0:	b0 00                	mov    al,0x0
c000eed2:	66 90                	xchg   ax,ax
c000eed4:	84 c0                	test   al,al
c000eed6:	74 28                	je     c000ef00 <ACPI::open(int, int, void*)+0x3b8>
c000eed8:	83 ec 08             	sub    esp,0x8
c000eedb:	6a 01                	push   0x1
c000eedd:	68 e9 e4 01 c0       	push   0xc001e4e9
c000eee2:	e8 e2 3e 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c000eee7:	83 c4 10             	add    esp,0x10
c000eeea:	83 ec 08             	sub    esp,0x8
c000eeed:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000eef4:	50                   	push   eax
c000eef5:	e8 00 41 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c000eefa:	83 c4 10             	add    esp,0x10
c000eefd:	8d 76 00             	lea    esi,[esi+0x0]
c000ef00:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef08:	74 2a                	je     c000ef34 <ACPI::open(int, int, void*)+0x3ec>
c000ef0a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef12:	74 20                	je     c000ef34 <ACPI::open(int, int, void*)+0x3ec>
c000ef14:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ef1b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef1d:	83 c0 08             	add    eax,0x8
c000ef20:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef22:	83 ec 0c             	sub    esp,0xc
c000ef25:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef2c:	ff d0                	call   eax
c000ef2e:	83 c4 10             	add    esp,0x10
c000ef31:	8d 76 00             	lea    esi,[esi+0x0]
c000ef34:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000ef39:	83 ec 08             	sub    esp,0x8
c000ef3c:	68 06 e5 01 c0       	push   0xc001e506
c000ef41:	50                   	push   eax
c000ef42:	e8 31 f2 ff ff       	call   c000e178 <findDataTable(unsigned char*, char*)>
c000ef47:	83 c4 10             	add    esp,0x10
c000ef4a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ef51:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ef59:	74 19                	je     c000ef74 <ACPI::open(int, int, void*)+0x42c>
c000ef5b:	83 ec 08             	sub    esp,0x8
c000ef5e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ef65:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ef6c:	e8 67 fb ff ff       	call   c000ead8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ef71:	83 c4 10             	add    esp,0x10
c000ef74:	b8 00 00 00 00       	mov    eax,0x0
c000ef79:	81 c4 70 01 00 00    	add    esp,0x170
c000ef7f:	5b                   	pop    ebx
c000ef80:	5e                   	pop    esi
c000ef81:	5f                   	pop    edi
c000ef82:	c3                   	ret    
c000ef83:	90                   	nop

c000ef84 <CPU::close(int, int, void*)>:
c000ef84:	31 c0                	xor    eax,eax
c000ef86:	c3                   	ret    
c000ef87:	90                   	nop

c000ef88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ef88:	60                   	pusha  
c000ef89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef95:	9c                   	pushf  
c000ef96:	fa                   	cli    
c000ef97:	0f 09                	wbinvd 
c000ef99:	0f 30                	wrmsr  
c000ef9b:	9d                   	popf   
c000ef9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000efa0:	89 02                	mov    DWORD PTR [edx],eax
c000efa2:	61                   	popa   
c000efa3:	c3                   	ret    

c000efa4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000efa4:	60                   	pusha  
c000efa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000efa9:	9c                   	pushf  
c000efaa:	fa                   	cli    
c000efab:	0f 09                	wbinvd 
c000efad:	31 c0                	xor    eax,eax
c000efaf:	31 d2                	xor    edx,edx
c000efb1:	0f 32                	rdmsr  
c000efb3:	9d                   	popf   
c000efb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efb8:	89 02                	mov    DWORD PTR [edx],eax
c000efba:	61                   	popa   
c000efbb:	c3                   	ret    

c000efbc <CPU::AMD_K6_writeback(int, int, int)>:
c000efbc:	56                   	push   esi
c000efbd:	53                   	push   ebx
c000efbe:	83 ec 10             	sub    esp,0x10
c000efc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000efca:	75 5d                	jne    c000f029 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efcc:	83 f8 08             	cmp    eax,0x8
c000efcf:	75 09                	jne    c000efda <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000efd1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000efd6:	7e 13                	jle    c000efeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000efd8:	eb 30                	jmp    c000f00a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000efda:	83 f8 06             	cmp    eax,0x6
c000efdd:	7c 4a                	jl     c000f029 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efdf:	83 f8 07             	cmp    eax,0x7
c000efe2:	7e 07                	jle    c000efeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000efe4:	83 f8 09             	cmp    eax,0x9
c000efe7:	74 21                	je     c000f00a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000efe9:	eb 3e                	jmp    c000f029 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efeb:	89 e6                	mov    esi,esp
c000efed:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000eff3:	56                   	push   esi
c000eff4:	c1 eb 15             	shr    ebx,0x15
c000eff7:	68 82 00 00 c0       	push   0xc0000082
c000effc:	83 e3 7e             	and    ebx,0x7e
c000efff:	e8 a0 ff ff ff       	call   c000efa4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f004:	56                   	push   esi
c000f005:	6a 00                	push   0x0
c000f007:	53                   	push   ebx
c000f008:	eb 12                	jmp    c000f01c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f00a:	89 e3                	mov    ebx,esp
c000f00c:	53                   	push   ebx
c000f00d:	68 82 00 00 c0       	push   0xc0000082
c000f012:	e8 8d ff ff ff       	call   c000efa4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f017:	53                   	push   ebx
c000f018:	6a 00                	push   0x0
c000f01a:	6a 00                	push   0x0
c000f01c:	68 82 00 00 c0       	push   0xc0000082
c000f021:	e8 62 ff ff ff       	call   c000ef88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f026:	83 c4 18             	add    esp,0x18
c000f029:	83 c4 10             	add    esp,0x10
c000f02c:	5b                   	pop    ebx
c000f02d:	5e                   	pop    esi
c000f02e:	c3                   	ret    
c000f02f:	90                   	nop

c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f030:	55                   	push   ebp
c000f031:	57                   	push   edi
c000f032:	56                   	push   esi
c000f033:	53                   	push   ebx
c000f034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f038:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f03c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f040:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f044:	39 05 70 f8 01 c0    	cmp    DWORD PTR ds:0xc001f870,eax
c000f04a:	75 23                	jne    c000f06f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f04c:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f051:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f055:	89 06                	mov    DWORD PTR [esi],eax
c000f057:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f05c:	89 07                	mov    DWORD PTR [edi],eax
c000f05e:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f063:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f066:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f06b:	89 02                	mov    DWORD PTR [edx],eax
c000f06d:	eb 3f                	jmp    c000f0ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f06f:	31 c9                	xor    ecx,ecx
c000f071:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f075:	0f a2                	cpuid  
c000f077:	89 06                	mov    DWORD PTR [esi],eax
c000f079:	89 1f                	mov    DWORD PTR [edi],ebx
c000f07b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f07f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f082:	89 10                	mov    DWORD PTR [eax],edx
c000f084:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f088:	a3 70 f8 01 c0       	mov    ds:0xc001f870,eax
c000f08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f08f:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f094:	8b 07                	mov    eax,DWORD PTR [edi]
c000f096:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f09b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f09e:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f0a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a9:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f0ae:	5b                   	pop    ebx
c000f0af:	5e                   	pop    esi
c000f0b0:	5f                   	pop    edi
c000f0b1:	5d                   	pop    ebp
c000f0b2:	c3                   	ret    
c000f0b3:	90                   	nop

c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>:
c000f0b4:	83 ec 10             	sub    esp,0x10
c000f0b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0bb:	50                   	push   eax
c000f0bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c0:	50                   	push   eax
c000f0c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c5:	50                   	push   eax
c000f0c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ca:	50                   	push   eax
c000f0cb:	6a 01                	push   0x1
c000f0cd:	e8 5e ff ff ff       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0d6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f0da:	0f 95 c0             	setne  al
c000f0dd:	83 c4 24             	add    esp,0x24
c000f0e0:	c3                   	ret    
c000f0e1:	90                   	nop

c000f0e2 <CPU::cpuidCheckECX(unsigned int)>:
c000f0e2:	83 ec 10             	sub    esp,0x10
c000f0e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0e9:	50                   	push   eax
c000f0ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ee:	50                   	push   eax
c000f0ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f3:	50                   	push   eax
c000f0f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f8:	50                   	push   eax
c000f0f9:	6a 01                	push   0x1
c000f0fb:	e8 30 ff ff ff       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f100:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f104:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f108:	0f 95 c0             	setne  al
c000f10b:	83 c4 24             	add    esp,0x24
c000f10e:	c3                   	ret    
c000f10f:	90                   	nop

c000f110 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f110:	83 ec 10             	sub    esp,0x10
c000f113:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f117:	50                   	push   eax
c000f118:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f11c:	50                   	push   eax
c000f11d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f121:	50                   	push   eax
c000f122:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f126:	50                   	push   eax
c000f127:	6a 07                	push   0x7
c000f129:	e8 02 ff ff ff       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f12e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f132:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f136:	0f 95 c0             	setne  al
c000f139:	83 c4 24             	add    esp,0x24
c000f13c:	c3                   	ret    
c000f13d:	90                   	nop

c000f13e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f13e:	83 ec 10             	sub    esp,0x10
c000f141:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f145:	50                   	push   eax
c000f146:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f14a:	50                   	push   eax
c000f14b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f14f:	50                   	push   eax
c000f150:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f154:	50                   	push   eax
c000f155:	6a 07                	push   0x7
c000f157:	e8 d4 fe ff ff       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f15c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f160:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f164:	0f 95 c0             	setne  al
c000f167:	83 c4 24             	add    esp,0x24
c000f16a:	c3                   	ret    
c000f16b:	90                   	nop

c000f16c <CPU::CPU()>:
c000f16c:	83 ec 0c             	sub    esp,0xc
c000f16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f173:	83 ec 08             	sub    esp,0x8
c000f176:	68 29 e6 01 c0       	push   0xc001e629
c000f17b:	50                   	push   eax
c000f17c:	e8 d3 c9 ff ff       	call   c000bb54 <Device::Device(char const*)>
c000f181:	83 c4 10             	add    esp,0x10
c000f184:	ba b0 e6 01 c0       	mov    edx,0xc001e6b0
c000f189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f18d:	89 10                	mov    DWORD PTR [eax],edx
c000f18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f193:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f19d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1a1:	05 78 01 00 00       	add    eax,0x178
c000f1a6:	83 ec 0c             	sub    esp,0xc
c000f1a9:	50                   	push   eax
c000f1aa:	e8 cb 7e ff ff       	call   c000707a <GDT::GDT()>
c000f1af:	83 c4 10             	add    esp,0x10
c000f1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1b6:	05 7c 09 00 00       	add    eax,0x97c
c000f1bb:	83 ec 0c             	sub    esp,0xc
c000f1be:	50                   	push   eax
c000f1bf:	e8 f0 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f1c4:	83 c4 10             	add    esp,0x10
c000f1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1cb:	05 7c 11 00 00       	add    eax,0x117c
c000f1d0:	83 ec 0c             	sub    esp,0xc
c000f1d3:	50                   	push   eax
c000f1d4:	e8 ef 99 ff ff       	call   c0008bc8 <TSS::TSS()>
c000f1d9:	83 c4 10             	add    esp,0x10
c000f1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1e0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1eb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f1f5:	90                   	nop
c000f1f6:	83 c4 0c             	add    esp,0xc
c000f1f9:	c3                   	ret    

c000f1fa <CPU::displayFeatures()>:
c000f1fa:	c3                   	ret    
c000f1fb:	90                   	nop

c000f1fc <CPU::detectFeatures()>:
c000f1fc:	55                   	push   ebp
c000f1fd:	57                   	push   edi
c000f1fe:	56                   	push   esi
c000f1ff:	53                   	push   ebx
c000f200:	83 ec 30             	sub    esp,0x30
c000f203:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f207:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f211:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f218:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f21e:	6a 0d                	push   0xd
c000f220:	6a 00                	push   0x0
c000f222:	55                   	push   ebp
c000f223:	e8 a8 12 ff ff       	call   c00004d0 <memset>
c000f228:	83 c4 10             	add    esp,0x10
c000f22b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f230:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f237:	0f 84 d5 05 00 00    	je     c000f812 <CPU::detectFeatures()+0x616>
c000f23d:	83 ec 0c             	sub    esp,0xc
c000f240:	89 ef                	mov    edi,ebp
c000f242:	6a 10                	push   0x10
c000f244:	e8 6b fe ff ff       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c000f249:	83 e0 01             	and    eax,0x1
c000f24c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f24f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f255:	83 e0 fd             	and    eax,0xfffffffd
c000f258:	09 d0                	or     eax,edx
c000f25a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f260:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f267:	e8 48 fe ff ff       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c000f26c:	83 e0 01             	and    eax,0x1
c000f26f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f276:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f27c:	83 e0 fb             	and    eax,0xfffffffb
c000f27f:	09 d0                	or     eax,edx
c000f281:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f287:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f28e:	e8 21 fe ff ff       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c000f293:	83 e0 01             	and    eax,0x1
c000f296:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f29d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2a3:	83 e0 f7             	and    eax,0xfffffff7
c000f2a6:	09 d0                	or     eax,edx
c000f2a8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2ae:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f2b5:	e8 fa fd ff ff       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c000f2ba:	83 e0 01             	and    eax,0x1
c000f2bd:	c1 e0 04             	shl    eax,0x4
c000f2c0:	88 c2                	mov    dl,al
c000f2c2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2c8:	83 e0 ef             	and    eax,0xffffffef
c000f2cb:	09 d0                	or     eax,edx
c000f2cd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2d3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f2da:	e8 d5 fd ff ff       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c000f2df:	83 e0 01             	and    eax,0x1
c000f2e2:	c1 e0 05             	shl    eax,0x5
c000f2e5:	88 c2                	mov    dl,al
c000f2e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2ed:	83 e0 df             	and    eax,0xffffffdf
c000f2f0:	09 d0                	or     eax,edx
c000f2f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2f8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f2ff:	e8 b0 fd ff ff       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c000f304:	83 e0 01             	and    eax,0x1
c000f307:	8d 14 00             	lea    edx,[eax+eax*1]
c000f30a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f310:	83 e0 fd             	and    eax,0xfffffffd
c000f313:	09 d0                	or     eax,edx
c000f315:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f31b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f322:	e8 8d fd ff ff       	call   c000f0b4 <CPU::cpuidCheckEDX(unsigned int)>
c000f327:	83 e0 01             	and    eax,0x1
c000f32a:	c1 e0 06             	shl    eax,0x6
c000f32d:	88 c2                	mov    dl,al
c000f32f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f335:	83 e0 bf             	and    eax,0xffffffbf
c000f338:	09 d0                	or     eax,edx
c000f33a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f340:	58                   	pop    eax
c000f341:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f345:	50                   	push   eax
c000f346:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f34a:	50                   	push   eax
c000f34b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f34f:	56                   	push   esi
c000f350:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f354:	50                   	push   eax
c000f355:	6a 00                	push   0x0
c000f357:	e8 d4 fc ff ff       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f35c:	b8 04 00 00 00       	mov    eax,0x4
c000f361:	89 c1                	mov    ecx,eax
c000f363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f365:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f36b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f36f:	89 c1                	mov    ecx,eax
c000f371:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f373:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f379:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f37d:	89 c1                	mov    ecx,eax
c000f37f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f381:	83 c4 18             	add    esp,0x18
c000f384:	68 38 e5 01 c0       	push   0xc001e538
c000f389:	55                   	push   ebp
c000f38a:	e8 51 13 ff ff       	call   c00006e0 <strcmp>
c000f38f:	83 c4 10             	add    esp,0x10
c000f392:	85 c0                	test   eax,eax
c000f394:	75 0f                	jne    c000f3a5 <CPU::detectFeatures()+0x1a9>
c000f396:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f3a0:	e9 22 02 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f3a5:	50                   	push   eax
c000f3a6:	50                   	push   eax
c000f3a7:	68 45 e5 01 c0       	push   0xc001e545
c000f3ac:	55                   	push   ebp
c000f3ad:	e8 2e 13 ff ff       	call   c00006e0 <strcmp>
c000f3b2:	83 c4 10             	add    esp,0x10
c000f3b5:	85 c0                	test   eax,eax
c000f3b7:	74 dd                	je     c000f396 <CPU::detectFeatures()+0x19a>
c000f3b9:	50                   	push   eax
c000f3ba:	50                   	push   eax
c000f3bb:	68 52 e5 01 c0       	push   0xc001e552
c000f3c0:	55                   	push   ebp
c000f3c1:	e8 1a 13 ff ff       	call   c00006e0 <strcmp>
c000f3c6:	83 c4 10             	add    esp,0x10
c000f3c9:	85 c0                	test   eax,eax
c000f3cb:	74 2a                	je     c000f3f7 <CPU::detectFeatures()+0x1fb>
c000f3cd:	50                   	push   eax
c000f3ce:	50                   	push   eax
c000f3cf:	68 5f e5 01 c0       	push   0xc001e55f
c000f3d4:	55                   	push   ebp
c000f3d5:	e8 06 13 ff ff       	call   c00006e0 <strcmp>
c000f3da:	83 c4 10             	add    esp,0x10
c000f3dd:	85 c0                	test   eax,eax
c000f3df:	74 16                	je     c000f3f7 <CPU::detectFeatures()+0x1fb>
c000f3e1:	50                   	push   eax
c000f3e2:	50                   	push   eax
c000f3e3:	68 6c e5 01 c0       	push   0xc001e56c
c000f3e8:	55                   	push   ebp
c000f3e9:	e8 f2 12 ff ff       	call   c00006e0 <strcmp>
c000f3ee:	83 c4 10             	add    esp,0x10
c000f3f1:	85 c0                	test   eax,eax
c000f3f3:	74 48                	je     c000f43d <CPU::detectFeatures()+0x241>
c000f3f5:	eb 0f                	jmp    c000f406 <CPU::detectFeatures()+0x20a>
c000f3f7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f401:	e9 c1 01 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f406:	50                   	push   eax
c000f407:	50                   	push   eax
c000f408:	68 79 e5 01 c0       	push   0xc001e579
c000f40d:	55                   	push   ebp
c000f40e:	e8 cd 12 ff ff       	call   c00006e0 <strcmp>
c000f413:	83 c4 10             	add    esp,0x10
c000f416:	85 c0                	test   eax,eax
c000f418:	74 23                	je     c000f43d <CPU::detectFeatures()+0x241>
c000f41a:	57                   	push   edi
c000f41b:	57                   	push   edi
c000f41c:	68 86 e5 01 c0       	push   0xc001e586
c000f421:	55                   	push   ebp
c000f422:	e8 b9 12 ff ff       	call   c00006e0 <strcmp>
c000f427:	83 c4 10             	add    esp,0x10
c000f42a:	85 c0                	test   eax,eax
c000f42c:	75 1e                	jne    c000f44c <CPU::detectFeatures()+0x250>
c000f42e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f438:	e9 8a 01 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f43d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f447:	e9 7b 01 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f44c:	56                   	push   esi
c000f44d:	56                   	push   esi
c000f44e:	68 93 e5 01 c0       	push   0xc001e593
c000f453:	55                   	push   ebp
c000f454:	e8 87 12 ff ff       	call   c00006e0 <strcmp>
c000f459:	83 c4 10             	add    esp,0x10
c000f45c:	85 c0                	test   eax,eax
c000f45e:	75 0f                	jne    c000f46f <CPU::detectFeatures()+0x273>
c000f460:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f46a:	e9 58 01 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f46f:	51                   	push   ecx
c000f470:	51                   	push   ecx
c000f471:	68 52 e5 01 c0       	push   0xc001e552
c000f476:	55                   	push   ebp
c000f477:	e8 64 12 ff ff       	call   c00006e0 <strcmp>
c000f47c:	83 c4 10             	add    esp,0x10
c000f47f:	85 c0                	test   eax,eax
c000f481:	75 0f                	jne    c000f492 <CPU::detectFeatures()+0x296>
c000f483:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f48d:	e9 35 01 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f492:	52                   	push   edx
c000f493:	52                   	push   edx
c000f494:	68 a0 e5 01 c0       	push   0xc001e5a0
c000f499:	55                   	push   ebp
c000f49a:	e8 41 12 ff ff       	call   c00006e0 <strcmp>
c000f49f:	83 c4 10             	add    esp,0x10
c000f4a2:	85 c0                	test   eax,eax
c000f4a4:	75 0f                	jne    c000f4b5 <CPU::detectFeatures()+0x2b9>
c000f4a6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f4b0:	e9 12 01 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f4b5:	50                   	push   eax
c000f4b6:	50                   	push   eax
c000f4b7:	68 ad e5 01 c0       	push   0xc001e5ad
c000f4bc:	55                   	push   ebp
c000f4bd:	e8 1e 12 ff ff       	call   c00006e0 <strcmp>
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	85 c0                	test   eax,eax
c000f4c7:	75 0f                	jne    c000f4d8 <CPU::detectFeatures()+0x2dc>
c000f4c9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f4d3:	e9 ef 00 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f4d8:	50                   	push   eax
c000f4d9:	50                   	push   eax
c000f4da:	68 ba e5 01 c0       	push   0xc001e5ba
c000f4df:	55                   	push   ebp
c000f4e0:	e8 fb 11 ff ff       	call   c00006e0 <strcmp>
c000f4e5:	83 c4 10             	add    esp,0x10
c000f4e8:	85 c0                	test   eax,eax
c000f4ea:	75 0f                	jne    c000f4fb <CPU::detectFeatures()+0x2ff>
c000f4ec:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f4f6:	e9 cc 00 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f4fb:	50                   	push   eax
c000f4fc:	50                   	push   eax
c000f4fd:	68 c7 e5 01 c0       	push   0xc001e5c7
c000f502:	55                   	push   ebp
c000f503:	e8 d8 11 ff ff       	call   c00006e0 <strcmp>
c000f508:	83 c4 10             	add    esp,0x10
c000f50b:	85 c0                	test   eax,eax
c000f50d:	75 0f                	jne    c000f51e <CPU::detectFeatures()+0x322>
c000f50f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f519:	e9 a9 00 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f51e:	50                   	push   eax
c000f51f:	50                   	push   eax
c000f520:	68 d4 e5 01 c0       	push   0xc001e5d4
c000f525:	55                   	push   ebp
c000f526:	e8 b5 11 ff ff       	call   c00006e0 <strcmp>
c000f52b:	83 c4 10             	add    esp,0x10
c000f52e:	85 c0                	test   eax,eax
c000f530:	75 0f                	jne    c000f541 <CPU::detectFeatures()+0x345>
c000f532:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f53c:	e9 86 00 00 00       	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f541:	50                   	push   eax
c000f542:	50                   	push   eax
c000f543:	68 e1 e5 01 c0       	push   0xc001e5e1
c000f548:	55                   	push   ebp
c000f549:	e8 92 11 ff ff       	call   c00006e0 <strcmp>
c000f54e:	83 c4 10             	add    esp,0x10
c000f551:	85 c0                	test   eax,eax
c000f553:	75 0c                	jne    c000f561 <CPU::detectFeatures()+0x365>
c000f555:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f55f:	eb 66                	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f561:	50                   	push   eax
c000f562:	50                   	push   eax
c000f563:	68 ee e5 01 c0       	push   0xc001e5ee
c000f568:	55                   	push   ebp
c000f569:	e8 72 11 ff ff       	call   c00006e0 <strcmp>
c000f56e:	83 c4 10             	add    esp,0x10
c000f571:	85 c0                	test   eax,eax
c000f573:	75 0c                	jne    c000f581 <CPU::detectFeatures()+0x385>
c000f575:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f57f:	eb 46                	jmp    c000f5c7 <CPU::detectFeatures()+0x3cb>
c000f581:	57                   	push   edi
c000f582:	57                   	push   edi
c000f583:	68 fb e5 01 c0       	push   0xc001e5fb
c000f588:	55                   	push   ebp
c000f589:	e8 52 11 ff ff       	call   c00006e0 <strcmp>
c000f58e:	83 c4 10             	add    esp,0x10
c000f591:	85 c0                	test   eax,eax
c000f593:	74 e0                	je     c000f575 <CPU::detectFeatures()+0x379>
c000f595:	56                   	push   esi
c000f596:	56                   	push   esi
c000f597:	68 08 e6 01 c0       	push   0xc001e608
c000f59c:	55                   	push   ebp
c000f59d:	e8 3e 11 ff ff       	call   c00006e0 <strcmp>
c000f5a2:	83 c4 10             	add    esp,0x10
c000f5a5:	85 c0                	test   eax,eax
c000f5a7:	74 cc                	je     c000f575 <CPU::detectFeatures()+0x379>
c000f5a9:	51                   	push   ecx
c000f5aa:	51                   	push   ecx
c000f5ab:	68 15 e6 01 c0       	push   0xc001e615
c000f5b0:	55                   	push   ebp
c000f5b1:	e8 2a 11 ff ff       	call   c00006e0 <strcmp>
c000f5b6:	83 c4 10             	add    esp,0x10
c000f5b9:	85 c0                	test   eax,eax
c000f5bb:	74 b8                	je     c000f575 <CPU::detectFeatures()+0x379>
c000f5bd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f5c7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f5cc:	0f 86 be 00 00 00    	jbe    c000f690 <CPU::detectFeatures()+0x494>
c000f5d2:	83 ec 0c             	sub    esp,0xc
c000f5d5:	68 80 00 00 00       	push   0x80
c000f5da:	e8 31 fb ff ff       	call   c000f110 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5df:	83 e0 01             	and    eax,0x1
c000f5e2:	c1 e0 06             	shl    eax,0x6
c000f5e5:	88 c2                	mov    dl,al
c000f5e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5ed:	83 e0 bf             	and    eax,0xffffffbf
c000f5f0:	09 d0                	or     eax,edx
c000f5f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5f8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f5ff:	e8 0c fb ff ff       	call   c000f110 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f604:	83 e0 01             	and    eax,0x1
c000f607:	c1 e0 04             	shl    eax,0x4
c000f60a:	88 c2                	mov    dl,al
c000f60c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f612:	83 e0 ef             	and    eax,0xffffffef
c000f615:	09 d0                	or     eax,edx
c000f617:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f61d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f624:	e8 e7 fa ff ff       	call   c000f110 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f629:	c1 e0 07             	shl    eax,0x7
c000f62c:	88 c2                	mov    dl,al
c000f62e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f634:	83 e0 7f             	and    eax,0x7f
c000f637:	09 d0                	or     eax,edx
c000f639:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f63f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f646:	e8 f3 fa ff ff       	call   c000f13e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f64b:	83 e0 01             	and    eax,0x1
c000f64e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f655:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f65b:	83 e0 f7             	and    eax,0xfffffff7
c000f65e:	09 d0                	or     eax,edx
c000f660:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f666:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f66d:	e8 cc fa ff ff       	call   c000f13e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f672:	83 c4 10             	add    esp,0x10
c000f675:	83 e0 01             	and    eax,0x1
c000f678:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f67f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f685:	83 e0 fb             	and    eax,0xfffffffb
c000f688:	09 d0                	or     eax,edx
c000f68a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f690:	83 ec 0c             	sub    esp,0xc
c000f693:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f697:	50                   	push   eax
c000f698:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f69c:	50                   	push   eax
c000f69d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f6a1:	56                   	push   esi
c000f6a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6a6:	50                   	push   eax
c000f6a7:	6a 01                	push   0x1
c000f6a9:	e8 82 f9 ff ff       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6ae:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f6b2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f6b8:	88 ca                	mov    dl,cl
c000f6ba:	83 e0 f0             	and    eax,0xfffffff0
c000f6bd:	83 e2 0f             	and    edx,0xf
c000f6c0:	09 d0                	or     eax,edx
c000f6c2:	88 ca                	mov    dl,cl
c000f6c4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f6ca:	c0 ea 04             	shr    dl,0x4
c000f6cd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f6d1:	0f b6 c2             	movzx  eax,dl
c000f6d4:	83 c4 20             	add    esp,0x20
c000f6d7:	c1 e0 06             	shl    eax,0x6
c000f6da:	89 c7                	mov    edi,eax
c000f6dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f6e2:	66 25 3f c0          	and    ax,0xc03f
c000f6e6:	09 f8                	or     eax,edi
c000f6e8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f6ef:	89 c8                	mov    eax,ecx
c000f6f1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f6f8:	c1 e8 08             	shr    eax,0x8
c000f6fb:	83 e5 3f             	and    ebp,0x3f
c000f6fe:	83 e0 0f             	and    eax,0xf
c000f701:	89 c7                	mov    edi,eax
c000f703:	c1 e7 06             	shl    edi,0x6
c000f706:	09 ef                	or     edi,ebp
c000f708:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f70f:	89 fa                	mov    edx,edi
c000f711:	83 e5 c0             	and    ebp,0xffffffc0
c000f714:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f71a:	88 c2                	mov    dl,al
c000f71c:	c0 ea 02             	shr    dl,0x2
c000f71f:	89 d7                	mov    edi,edx
c000f721:	09 ef                	or     edi,ebp
c000f723:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f729:	89 fa                	mov    edx,edi
c000f72b:	83 e5 cf             	and    ebp,0xffffffcf
c000f72e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f734:	89 cf                	mov    edi,ecx
c000f736:	c1 ef 0c             	shr    edi,0xc
c000f739:	83 e7 03             	and    edi,0x3
c000f73c:	c1 e7 04             	shl    edi,0x4
c000f73f:	09 ef                	or     edi,ebp
c000f741:	3c 06                	cmp    al,0x6
c000f743:	89 fa                	mov    edx,edi
c000f745:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f74b:	74 04                	je     c000f751 <CPU::detectFeatures()+0x555>
c000f74d:	3c 0f                	cmp    al,0xf
c000f74f:	75 5c                	jne    c000f7ad <CPU::detectFeatures()+0x5b1>
c000f751:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f755:	89 cf                	mov    edi,ecx
c000f757:	c1 ef 10             	shr    edi,0x10
c000f75a:	c1 e7 04             	shl    edi,0x4
c000f75d:	09 fa                	or     edx,edi
c000f75f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f765:	0f b6 d2             	movzx  edx,dl
c000f768:	66 81 e7 3f c0       	and    di,0xc03f
c000f76d:	c1 e2 06             	shl    edx,0x6
c000f770:	09 fa                	or     edx,edi
c000f772:	3c 0f                	cmp    al,0xf
c000f774:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f77b:	75 30                	jne    c000f7ad <CPU::detectFeatures()+0x5b1>
c000f77d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f783:	c1 e9 14             	shr    ecx,0x14
c000f786:	83 e0 3f             	and    eax,0x3f
c000f789:	83 c1 0f             	add    ecx,0xf
c000f78c:	88 ca                	mov    dl,cl
c000f78e:	c0 e9 02             	shr    cl,0x2
c000f791:	c1 e2 06             	shl    edx,0x6
c000f794:	09 d0                	or     eax,edx
c000f796:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f79c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f7a2:	83 e0 c0             	and    eax,0xffffffc0
c000f7a5:	09 c1                	or     ecx,eax
c000f7a7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f7ad:	83 ec 0c             	sub    esp,0xc
c000f7b0:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f7b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7bb:	50                   	push   eax
c000f7bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f7c0:	55                   	push   ebp
c000f7c1:	56                   	push   esi
c000f7c2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f7c6:	57                   	push   edi
c000f7c7:	68 00 00 00 80       	push   0x80000000
c000f7cc:	e8 5f f8 ff ff       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7d1:	83 c4 20             	add    esp,0x20
c000f7d4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f7dc:	76 22                	jbe    c000f800 <CPU::detectFeatures()+0x604>
c000f7de:	83 ec 0c             	sub    esp,0xc
c000f7e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7e5:	50                   	push   eax
c000f7e6:	55                   	push   ebp
c000f7e7:	56                   	push   esi
c000f7e8:	57                   	push   edi
c000f7e9:	68 01 00 00 80       	push   0x80000001
c000f7ee:	e8 3d f8 ff ff       	call   c000f030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7f3:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f7fd:	83 c4 20             	add    esp,0x20
c000f800:	52                   	push   edx
c000f801:	52                   	push   edx
c000f802:	68 21 e6 01 c0       	push   0xc001e621
c000f807:	53                   	push   ebx
c000f808:	e8 39 c3 ff ff       	call   c000bb46 <Device::setName(char const*)>
c000f80d:	83 c4 10             	add    esp,0x10
c000f810:	eb 67                	jmp    c000f879 <CPU::detectFeatures()+0x67d>
c000f812:	50                   	push   eax
c000f813:	50                   	push   eax
c000f814:	68 86 e5 01 c0       	push   0xc001e586
c000f819:	55                   	push   ebp
c000f81a:	e8 e1 0d ff ff       	call   c0000600 <strcpy>
c000f81f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f829:	e8 95 09 ff ff       	call   c00001c3 <is486>
c000f82e:	83 c4 10             	add    esp,0x10
c000f831:	85 c0                	test   eax,eax
c000f833:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f839:	74 1d                	je     c000f858 <CPU::detectFeatures()+0x65c>
c000f83b:	83 c8 07             	or     eax,0x7
c000f83e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f844:	0f 20 c0             	mov    eax,cr0
c000f847:	83 e0 14             	and    eax,0x14
c000f84a:	83 f8 04             	cmp    eax,0x4
c000f84d:	75 0e                	jne    c000f85d <CPU::detectFeatures()+0x661>
c000f84f:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f856:	eb 21                	jmp    c000f879 <CPU::detectFeatures()+0x67d>
c000f858:	83 e0 f8             	and    eax,0xfffffff8
c000f85b:	eb e1                	jmp    c000f83e <CPU::detectFeatures()+0x642>
c000f85d:	e8 3c 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f862:	83 e0 01             	and    eax,0x1
c000f865:	8d 14 00             	lea    edx,[eax+eax*1]
c000f868:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f86e:	83 e0 fd             	and    eax,0xfffffffd
c000f871:	09 d0                	or     eax,edx
c000f873:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f879:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f880:	74 0e                	je     c000f890 <CPU::detectFeatures()+0x694>
c000f882:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f887:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f88e:	eb 20                	jmp    c000f8b0 <CPU::detectFeatures()+0x6b4>
c000f890:	e8 09 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f895:	83 e0 01             	and    eax,0x1
c000f898:	8d 14 00             	lea    edx,[eax+eax*1]
c000f89b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8a1:	83 e0 fd             	and    eax,0xfffffffd
c000f8a4:	09 d0                	or     eax,edx
c000f8a6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8ac:	a8 02                	test   al,0x2
c000f8ae:	75 d2                	jne    c000f882 <CPU::detectFeatures()+0x686>
c000f8b0:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f8b7:	83 c4 2c             	add    esp,0x2c
c000f8ba:	5b                   	pop    ebx
c000f8bb:	5e                   	pop    esi
c000f8bc:	5f                   	pop    edi
c000f8bd:	5d                   	pop    ebp
c000f8be:	c3                   	ret    
c000f8bf:	90                   	nop

c000f8c0 <CPU::setupSMEP()>:
c000f8c0:	0f 20 e0             	mov    eax,cr4
c000f8c3:	0d 00 00 10 00       	or     eax,0x100000
c000f8c8:	0f 22 e0             	mov    cr4,eax
c000f8cb:	c3                   	ret    

c000f8cc <CPU::setupUMIP()>:
c000f8cc:	0f 20 e0             	mov    eax,cr4
c000f8cf:	80 cc 08             	or     ah,0x8
c000f8d2:	0f 22 e0             	mov    cr4,eax
c000f8d5:	c3                   	ret    

c000f8d6 <CPU::setupTSC()>:
c000f8d6:	0f 20 e0             	mov    eax,cr4
c000f8d9:	83 c8 04             	or     eax,0x4
c000f8dc:	0f 22 e0             	mov    cr4,eax
c000f8df:	c3                   	ret    

c000f8e0 <CPU::setupLargePages()>:
c000f8e0:	0f 20 e0             	mov    eax,cr4
c000f8e3:	83 c8 10             	or     eax,0x10
c000f8e6:	0f 22 e0             	mov    cr4,eax
c000f8e9:	c3                   	ret    

c000f8ea <CPU::setupPAT()>:
c000f8ea:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f8ef:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f8f6:	74 2c                	je     c000f924 <CPU::setupPAT()+0x3a>
c000f8f8:	53                   	push   ebx
c000f8f9:	83 ec 10             	sub    esp,0x10
c000f8fc:	68 77 02 00 00       	push   0x277
c000f901:	50                   	push   eax
c000f902:	e8 eb 74 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f907:	83 e2 f8             	and    edx,0xfffffff8
c000f90a:	83 ca 01             	or     edx,0x1
c000f90d:	52                   	push   edx
c000f90e:	50                   	push   eax
c000f90f:	68 77 02 00 00       	push   0x277
c000f914:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f91a:	e8 ff 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f91f:	83 c4 28             	add    esp,0x28
c000f922:	5b                   	pop    ebx
c000f923:	c3                   	ret    
c000f924:	c3                   	ret    
c000f925:	90                   	nop

c000f926 <CPU::setupMTRR()>:
c000f926:	c3                   	ret    
c000f927:	90                   	nop

c000f928 <CPU::setupGlobalPages()>:
c000f928:	0f 20 e0             	mov    eax,cr4
c000f92b:	0c 80                	or     al,0x80
c000f92d:	0f 22 e0             	mov    cr4,eax
c000f930:	c3                   	ret    
c000f931:	90                   	nop

c000f932 <CPU::allowUsermodeDataAccess()>:
c000f932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f936:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f93d:	74 03                	je     c000f942 <CPU::allowUsermodeDataAccess()+0x10>
c000f93f:	0f 01 cb             	stac   
c000f942:	c3                   	ret    
c000f943:	90                   	nop

c000f944 <CPU::prohibitUsermodeDataAccess()>:
c000f944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f948:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f94f:	74 03                	je     c000f954 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f951:	0f 01 ca             	clac   
c000f954:	c3                   	ret    
c000f955:	90                   	nop

c000f956 <CPU::setupSMAP()>:
c000f956:	0f 20 e0             	mov    eax,cr4
c000f959:	0d 00 00 20 00       	or     eax,0x200000
c000f95e:	0f 22 e0             	mov    cr4,eax
c000f961:	eb e1                	jmp    c000f944 <CPU::prohibitUsermodeDataAccess()>
c000f963:	90                   	nop

c000f964 <CPU::setupFeatures()>:
c000f964:	53                   	push   ebx
c000f965:	83 ec 08             	sub    esp,0x8
c000f968:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f96c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f973:	74 18                	je     c000f98d <CPU::setupFeatures()+0x29>
c000f975:	83 ec 0c             	sub    esp,0xc
c000f978:	68 2d e6 01 c0       	push   0xc001e62d
c000f97d:	e8 fb ab ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000f982:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f985:	e8 42 ff ff ff       	call   c000f8cc <CPU::setupUMIP()>
c000f98a:	83 c4 10             	add    esp,0x10
c000f98d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f994:	74 18                	je     c000f9ae <CPU::setupFeatures()+0x4a>
c000f996:	83 ec 0c             	sub    esp,0xc
c000f999:	68 37 e6 01 c0       	push   0xc001e637
c000f99e:	e8 da ab ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000f9a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9a6:	e8 2b ff ff ff       	call   c000f8d6 <CPU::setupTSC()>
c000f9ab:	83 c4 10             	add    esp,0x10
c000f9ae:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f9b5:	74 18                	je     c000f9cf <CPU::setupFeatures()+0x6b>
c000f9b7:	83 ec 0c             	sub    esp,0xc
c000f9ba:	68 40 e6 01 c0       	push   0xc001e640
c000f9bf:	e8 b9 ab ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000f9c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9c7:	e8 14 ff ff ff       	call   c000f8e0 <CPU::setupLargePages()>
c000f9cc:	83 c4 10             	add    esp,0x10
c000f9cf:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f9d6:	74 18                	je     c000f9f0 <CPU::setupFeatures()+0x8c>
c000f9d8:	83 ec 0c             	sub    esp,0xc
c000f9db:	68 49 e6 01 c0       	push   0xc001e649
c000f9e0:	e8 98 ab ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000f9e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9e8:	e8 3b ff ff ff       	call   c000f928 <CPU::setupGlobalPages()>
c000f9ed:	83 c4 10             	add    esp,0x10
c000f9f0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f9f7:	74 18                	je     c000fa11 <CPU::setupFeatures()+0xad>
c000f9f9:	83 ec 0c             	sub    esp,0xc
c000f9fc:	68 5b e6 01 c0       	push   0xc001e65b
c000fa01:	e8 77 ab ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c000fa06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa09:	e8 dc fe ff ff       	call   c000f8ea <CPU::setupPAT()>
c000fa0e:	83 c4 10             	add    esp,0x10
c000fa11:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fa18:	74 11                	je     c000fa2b <CPU::setupFeatures()+0xc7>
c000fa1a:	c7 44 24 10 64 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e664
c000fa22:	83 c4 08             	add    esp,0x8
c000fa25:	5b                   	pop    ebx
c000fa26:	e9 52 ab ff ff       	jmp    c000a57d <Dbg::kprintf(char const*, ...)>
c000fa2b:	83 c4 08             	add    esp,0x8
c000fa2e:	5b                   	pop    ebx
c000fa2f:	c3                   	ret    

c000fa30 <CPU::open(int, int, void*)>:
c000fa30:	57                   	push   edi
c000fa31:	56                   	push   esi
c000fa32:	53                   	push   ebx
c000fa33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa3b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fa41:	83 ec 0c             	sub    esp,0xc
c000fa44:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fa4a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fa50:	50                   	push   eax
c000fa51:	e8 86 76 ff ff       	call   c00070dc <GDT::setup()>
c000fa56:	83 c4 0c             	add    esp,0xc
c000fa59:	6a 00                	push   0x0
c000fa5b:	68 ef be ad de       	push   0xdeadbeef
c000fa60:	57                   	push   edi
c000fa61:	e8 a6 91 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000fa66:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fa69:	e8 7e 91 ff ff       	call   c0008bec <TSS::flush()>
c000fa6e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fa74:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa77:	e8 ae 78 ff ff       	call   c000732a <IDT::setup()>
c000fa7c:	b8 00 04 00 00       	mov    eax,0x400
c000fa81:	0f 23 f8             	mov    db7,eax
c000fa84:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fa8e:	e8 02 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fa93:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fa99:	89 30                	mov    DWORD PTR [eax],esi
c000fa9b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000faa1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000faa4:	58                   	pop    eax
c000faa5:	5a                   	pop    edx
c000faa6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000faac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fab0:	e8 93 a1 ff ff       	call   c0009c48 <VAS::setCPUSpecific(unsigned long)>
c000fab5:	c7 04 24 6e e6 01 c0 	mov    DWORD PTR [esp],0xc001e66e
c000fabc:	e8 c6 00 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c000fac1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fac4:	e8 33 f7 ff ff       	call   c000f1fc <CPU::detectFeatures()>
c000fac9:	c7 04 24 91 e6 01 c0 	mov    DWORD PTR [esp],0xc001e691
c000fad0:	e8 b2 00 00 00       	call   c000fb87 <KeSetBootMessage(char const*)>
c000fad5:	e8 26 5c 00 00       	call   c0015700 <HalInitialise()>
c000fada:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fadf:	83 e0 10             	and    eax,0x10
c000fae2:	83 f8 01             	cmp    eax,0x1
c000fae5:	19 c0                	sbb    eax,eax
c000fae7:	83 e0 46             	and    eax,0x46
c000faea:	83 c0 1e             	add    eax,0x1e
c000faed:	89 04 24             	mov    DWORD PTR [esp],eax
c000faf0:	e8 60 d7 ff ff       	call   c000d255 <setupTimer(int)>
c000faf5:	83 c4 10             	add    esp,0x10
c000faf8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fafe:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fb05:	74 0c                	je     c000fb13 <CPU::open(int, int, void*)+0xe3>
c000fb07:	83 ec 0c             	sub    esp,0xc
c000fb0a:	53                   	push   ebx
c000fb0b:	e8 54 fe ff ff       	call   c000f964 <CPU::setupFeatures()>
c000fb10:	83 c4 10             	add    esp,0x10
c000fb13:	5b                   	pop    ebx
c000fb14:	31 c0                	xor    eax,eax
c000fb16:	5e                   	pop    esi
c000fb17:	5f                   	pop    edi
c000fb18:	c3                   	ret    

c000fb19 <KeDisplaySplashScreen()>:
c000fb19:	55                   	push   ebp
c000fb1a:	bd 05 00 00 00       	mov    ebp,0x5
c000fb1f:	57                   	push   edi
c000fb20:	bf 80 f8 01 c0       	mov    edi,0xc001f880
c000fb25:	56                   	push   esi
c000fb26:	be 0a 00 00 00       	mov    esi,0xa
c000fb2b:	53                   	push   ebx
c000fb2c:	31 db                	xor    ebx,ebx
c000fb2e:	83 ec 0c             	sub    esp,0xc
c000fb31:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fb34:	84 c0                	test   al,al
c000fb36:	74 47                	je     c000fb7f <KeDisplaySplashScreen()+0x66>
c000fb38:	80 bb b6 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe074a],0xdb
c000fb3f:	75 13                	jne    c000fb54 <KeDisplaySplashScreen()+0x3b>
c000fb41:	0f b6 93 b5 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe074b]
c000fb48:	83 e2 fe             	and    edx,0xfffffffe
c000fb4b:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb51:	75 01                	jne    c000fb54 <KeDisplaySplashScreen()+0x3b>
c000fb53:	46                   	inc    esi
c000fb54:	3c 0d                	cmp    al,0xd
c000fb56:	74 24                	je     c000fb7c <KeDisplaySplashScreen()+0x63>
c000fb58:	3c 0a                	cmp    al,0xa
c000fb5a:	75 0a                	jne    c000fb66 <KeDisplaySplashScreen()+0x4d>
c000fb5c:	45                   	inc    ebp
c000fb5d:	be 0a 00 00 00       	mov    esi,0xa
c000fb62:	31 db                	xor    ebx,ebx
c000fb64:	eb 16                	jmp    c000fb7c <KeDisplaySplashScreen()+0x63>
c000fb66:	83 ec 0c             	sub    esp,0xc
c000fb69:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fb6c:	55                   	push   ebp
c000fb6d:	43                   	inc    ebx
c000fb6e:	52                   	push   edx
c000fb6f:	6a 00                	push   0x0
c000fb71:	6a 0e                	push   0xe
c000fb73:	50                   	push   eax
c000fb74:	e8 eb 67 00 00       	call   c0016364 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fb79:	83 c4 20             	add    esp,0x20
c000fb7c:	47                   	inc    edi
c000fb7d:	eb b2                	jmp    c000fb31 <KeDisplaySplashScreen()+0x18>
c000fb7f:	83 c4 0c             	add    esp,0xc
c000fb82:	5b                   	pop    ebx
c000fb83:	5e                   	pop    esi
c000fb84:	5f                   	pop    edi
c000fb85:	5d                   	pop    ebp
c000fb86:	c3                   	ret    

c000fb87 <KeSetBootMessage(char const*)>:
c000fb87:	57                   	push   edi
c000fb88:	56                   	push   esi
c000fb89:	53                   	push   ebx
c000fb8a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fb90:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb97:	68 9e 00 00 00       	push   0x9e
c000fb9c:	6a 00                	push   0x0
c000fb9e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fba2:	56                   	push   esi
c000fba3:	e8 28 09 ff ff       	call   c00004d0 <memset>
c000fba8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbab:	e8 90 09 ff ff       	call   c0000540 <strlen>
c000fbb0:	ba 50 00 00 00       	mov    edx,0x50
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	29 c2                	sub    edx,eax
c000fbba:	31 c9                	xor    ecx,ecx
c000fbbc:	83 e2 fe             	and    edx,0xfffffffe
c000fbbf:	01 f2                	add    edx,esi
c000fbc1:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fbc6:	84 c0                	test   al,al
c000fbc8:	74 0a                	je     c000fbd4 <KeSetBootMessage(char const*)+0x4d>
c000fbca:	80 cc 0f             	or     ah,0xf
c000fbcd:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fbd1:	41                   	inc    ecx
c000fbd2:	eb ed                	jmp    c000fbc1 <KeSetBootMessage(char const*)+0x3a>
c000fbd4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fbd9:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fbde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe0:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fbe6:	5b                   	pop    ebx
c000fbe7:	5e                   	pop    esi
c000fbe8:	5f                   	pop    edi
c000fbe9:	c3                   	ret    

c000fbea <EnvVarContainer::getEnv(char const*)>:
c000fbea:	57                   	push   edi
c000fbeb:	56                   	push   esi
c000fbec:	53                   	push   ebx
c000fbed:	31 db                	xor    ebx,ebx
c000fbef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbf3:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fbf5:	7e 2b                	jle    c000fc22 <EnvVarContainer::getEnv(char const*)+0x38>
c000fbf7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fbfe:	50                   	push   eax
c000fbff:	50                   	push   eax
c000fc00:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc03:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fc06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fc0a:	e8 d1 0a ff ff       	call   c00006e0 <strcmp>
c000fc0f:	83 c4 10             	add    esp,0x10
c000fc12:	85 c0                	test   eax,eax
c000fc14:	75 09                	jne    c000fc1f <EnvVarContainer::getEnv(char const*)+0x35>
c000fc16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc19:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fc1d:	eb 05                	jmp    c000fc24 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fc1f:	43                   	inc    ebx
c000fc20:	eb d1                	jmp    c000fbf3 <EnvVarContainer::getEnv(char const*)+0x9>
c000fc22:	31 c0                	xor    eax,eax
c000fc24:	5b                   	pop    ebx
c000fc25:	5e                   	pop    esi
c000fc26:	5f                   	pop    edi
c000fc27:	c3                   	ret    

c000fc28 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fc28:	55                   	push   ebp
c000fc29:	57                   	push   edi
c000fc2a:	56                   	push   esi
c000fc2b:	53                   	push   ebx
c000fc2c:	83 ec 28             	sub    esp,0x28
c000fc2f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fc33:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fc37:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fc3b:	56                   	push   esi
c000fc3c:	e8 ff 08 ff ff       	call   c0000540 <strlen>
c000fc41:	40                   	inc    eax
c000fc42:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc45:	e8 6f 7b ff ff       	call   c00077b9 <malloc>
c000fc4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc51:	e8 ea 08 ff ff       	call   c0000540 <strlen>
c000fc56:	40                   	inc    eax
c000fc57:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc5a:	e8 5a 7b ff ff       	call   c00077b9 <malloc>
c000fc5f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fc66:	e8 d5 08 ff ff       	call   c0000540 <strlen>
c000fc6b:	83 c4 0c             	add    esp,0xc
c000fc6e:	40                   	inc    eax
c000fc6f:	50                   	push   eax
c000fc70:	6a 00                	push   0x0
c000fc72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc76:	e8 55 08 ff ff       	call   c00004d0 <memset>
c000fc7b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc7e:	e8 bd 08 ff ff       	call   c0000540 <strlen>
c000fc83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc87:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc8f:	89 de                	mov    esi,ebx
c000fc91:	e8 aa 08 ff ff       	call   c0000540 <strlen>
c000fc96:	83 c4 0c             	add    esp,0xc
c000fc99:	40                   	inc    eax
c000fc9a:	50                   	push   eax
c000fc9b:	6a 00                	push   0x0
c000fc9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fca1:	e8 2a 08 ff ff       	call   c00004d0 <memset>
c000fca6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fca9:	e8 92 08 ff ff       	call   c0000540 <strlen>
c000fcae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fcb2:	8d 48 01             	lea    ecx,[eax+0x1]
c000fcb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fcba:	40                   	inc    eax
c000fcbb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fcbe:	c1 e0 03             	shl    eax,0x3
c000fcc1:	5a                   	pop    edx
c000fcc2:	59                   	pop    ecx
c000fcc3:	50                   	push   eax
c000fcc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fcc7:	e8 d9 7a ff ff       	call   c00077a5 <realloc>
c000fccc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fcd0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fcd3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fcd6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fcda:	b9 08 00 00 00       	mov    ecx,0x8
c000fcdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fce1:	83 c4 2c             	add    esp,0x2c
c000fce4:	5b                   	pop    ebx
c000fce5:	5e                   	pop    esi
c000fce6:	5f                   	pop    edi
c000fce7:	5d                   	pop    ebp
c000fce8:	c3                   	ret    
c000fce9:	90                   	nop

c000fcea <EnvVarContainer::deleteEnv(char const*)>:
c000fcea:	c3                   	ret    
c000fceb:	90                   	nop

c000fcec <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fcec:	55                   	push   ebp
c000fced:	57                   	push   edi
c000fcee:	56                   	push   esi
c000fcef:	53                   	push   ebx
c000fcf0:	81 ec 38 01 00 00    	sub    esp,0x138
c000fcf6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fcfd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fd04:	68 14 01 00 00       	push   0x114
c000fd09:	e8 ab 7a ff ff       	call   c00077b9 <malloc>
c000fd0e:	83 c4 0c             	add    esp,0xc
c000fd11:	89 c3                	mov    ebx,eax
c000fd13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd16:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd1d:	50                   	push   eax
c000fd1e:	e8 cf ad ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c000fd23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd26:	e8 f5 b0 ff ff       	call   c000ae20 <File::exists()>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	84 c0                	test   al,al
c000fd30:	75 31                	jne    c000fd63 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fd32:	50                   	push   eax
c000fd33:	50                   	push   eax
c000fd34:	6a 12                	push   0x12
c000fd36:	53                   	push   ebx
c000fd37:	e8 76 ae ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c000fd3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd3e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fd41:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd44:	e8 f7 07 ff ff       	call   c0000540 <strlen>
c000fd49:	5a                   	pop    edx
c000fd4a:	31 d2                	xor    edx,edx
c000fd4c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd50:	51                   	push   ecx
c000fd51:	56                   	push   esi
c000fd52:	52                   	push   edx
c000fd53:	50                   	push   eax
c000fd54:	53                   	push   ebx
c000fd55:	ff d7                	call   edi
c000fd57:	83 c4 14             	add    esp,0x14
c000fd5a:	53                   	push   ebx
c000fd5b:	e8 b0 ae ff ff       	call   c000ac10 <File::close()>
c000fd60:	83 c4 10             	add    esp,0x10
c000fd63:	56                   	push   esi
c000fd64:	31 f6                	xor    esi,esi
c000fd66:	68 00 01 00 00       	push   0x100
c000fd6b:	6a 00                	push   0x0
c000fd6d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd71:	50                   	push   eax
c000fd72:	e8 59 07 ff ff       	call   c00004d0 <memset>
c000fd77:	5f                   	pop    edi
c000fd78:	58                   	pop    eax
c000fd79:	6a 01                	push   0x1
c000fd7b:	53                   	push   ebx
c000fd7c:	e8 31 ae ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd8c:	83 ec 0c             	sub    esp,0xc
c000fd8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd91:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd95:	51                   	push   ecx
c000fd96:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fd9a:	52                   	push   edx
c000fd9b:	6a 00                	push   0x0
c000fd9d:	6a 01                	push   0x1
c000fd9f:	53                   	push   ebx
c000fda0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fda3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fda7:	83 c4 20             	add    esp,0x20
c000fdaa:	3c 0d                	cmp    al,0xd
c000fdac:	0f 84 09 01 00 00    	je     c000febb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fdb7:	0f 84 ef 00 00 00    	je     c000feac <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fdbd:	3c 0a                	cmp    al,0xa
c000fdbf:	74 13                	je     c000fdd4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fdc1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fdc6:	74 0c                	je     c000fdd4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fdc8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fdce:	0f 8e d8 00 00 00    	jle    c000feac <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fdd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdd8:	83 ec 0c             	sub    esp,0xc
c000fddb:	8d 78 01             	lea    edi,[eax+0x1]
c000fdde:	57                   	push   edi
c000fddf:	e8 d5 79 ff ff       	call   c00077b9 <malloc>
c000fde4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fde8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fdec:	8d 56 04             	lea    edx,[esi+0x4]
c000fdef:	89 14 24             	mov    DWORD PTR [esp],edx
c000fdf2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdf6:	e8 be 79 ff ff       	call   c00077b9 <malloc>
c000fdfb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fdff:	83 c4 0c             	add    esp,0xc
c000fe02:	57                   	push   edi
c000fe03:	6a 00                	push   0x0
c000fe05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe09:	e8 c2 06 ff ff       	call   c00004d0 <memset>
c000fe0e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe12:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fe16:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fe1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe1c:	83 c4 0c             	add    esp,0xc
c000fe1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe23:	52                   	push   edx
c000fe24:	6a 00                	push   0x0
c000fe26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fe2a:	e8 a1 06 ff ff       	call   c00004d0 <memset>
c000fe2f:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe33:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fe37:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe3a:	e8 01 07 ff ff       	call   c0000540 <strlen>
c000fe3f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fe43:	89 c1                	mov    ecx,eax
c000fe45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe4a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fe4d:	40                   	inc    eax
c000fe4e:	83 c4 10             	add    esp,0x10
c000fe51:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe54:	85 d2                	test   edx,edx
c000fe56:	75 0c                	jne    c000fe64 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fe58:	83 ec 0c             	sub    esp,0xc
c000fe5b:	6a 08                	push   0x8
c000fe5d:	e8 57 79 ff ff       	call   c00077b9 <malloc>
c000fe62:	eb 0c                	jmp    c000fe70 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fe64:	c1 e0 03             	shl    eax,0x3
c000fe67:	51                   	push   ecx
c000fe68:	51                   	push   ecx
c000fe69:	50                   	push   eax
c000fe6a:	52                   	push   edx
c000fe6b:	e8 35 79 ff ff       	call   c00077a5 <realloc>
c000fe70:	83 c4 10             	add    esp,0x10
c000fe73:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe76:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe79:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fe7c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe80:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe84:	b9 08 00 00 00       	mov    ecx,0x8
c000fe89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe8b:	31 f6                	xor    esi,esi
c000fe8d:	50                   	push   eax
c000fe8e:	68 00 01 00 00       	push   0x100
c000fe93:	6a 00                	push   0x0
c000fe95:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe99:	50                   	push   eax
c000fe9a:	e8 31 06 ff ff       	call   c00004d0 <memset>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000feaa:	eb 0f                	jmp    c000febb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000feac:	3c 3d                	cmp    al,0x3d
c000feae:	74 07                	je     c000feb7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000feb0:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000feb4:	46                   	inc    esi
c000feb5:	eb 04                	jmp    c000febb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000feb7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000febb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fec0:	0f 85 c6 fe ff ff    	jne    c000fd8c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fec6:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fecc:	5b                   	pop    ebx
c000fecd:	5e                   	pop    esi
c000fece:	5f                   	pop    edi
c000fecf:	5d                   	pop    ebp
c000fed0:	c3                   	ret    
c000fed1:	90                   	nop

c000fed2 <EnvVarContainer::__loadSystem()>:
c000fed2:	83 ec 10             	sub    esp,0x10
c000fed5:	68 e0 f9 01 c0       	push   0xc001f9e0
c000feda:	68 d4 e6 01 c0       	push   0xc001e6d4
c000fedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fee3:	e8 04 fe ff ff       	call   c000fcec <EnvVarContainer::loadFrom(char const*, char const*)>
c000fee8:	83 c4 1c             	add    esp,0x1c
c000feeb:	c3                   	ret    

c000feec <EnvVarContainer::__loadUser()>:
c000feec:	c3                   	ret    
c000feed:	90                   	nop

c000feee <EnvVarContainer::EnvVarContainer(Process*)>:
c000feee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fef2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fefc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff00:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ff0e:	90                   	nop
c000ff0f:	c3                   	ret    

c000ff10 <EnvVarContainer::~EnvVarContainer()>:
c000ff10:	83 ec 0c             	sub    esp,0xc
c000ff13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff1a:	85 c0                	test   eax,eax
c000ff1c:	74 1d                	je     c000ff3b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff22:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff24:	85 c0                	test   eax,eax
c000ff26:	74 13                	je     c000ff3b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff2f:	83 ec 0c             	sub    esp,0xc
c000ff32:	50                   	push   eax
c000ff33:	e8 91 78 ff ff       	call   c00077c9 <free>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	90                   	nop
c000ff3c:	83 c4 0c             	add    esp,0xc
c000ff3f:	c3                   	ret    

c000ff40 <Krnl::getEnv(Process*, char const*)>:
c000ff40:	53                   	push   ebx
c000ff41:	83 ec 08             	sub    esp,0x8
c000ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff4c:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ff52:	74 04                	je     c000ff58 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff54:	85 c0                	test   eax,eax
c000ff56:	75 0b                	jne    c000ff63 <Krnl::getEnv(Process*, char const*)+0x23>
c000ff58:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff5d:	85 c0                	test   eax,eax
c000ff5f:	75 19                	jne    c000ff7a <Krnl::getEnv(Process*, char const*)+0x3a>
c000ff61:	eb 27                	jmp    c000ff8a <Krnl::getEnv(Process*, char const*)+0x4a>
c000ff63:	52                   	push   edx
c000ff64:	52                   	push   edx
c000ff65:	53                   	push   ebx
c000ff66:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000ff6c:	e8 79 fc ff ff       	call   c000fbea <EnvVarContainer::getEnv(char const*)>
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	85 c0                	test   eax,eax
c000ff76:	75 28                	jne    c000ffa0 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff78:	eb de                	jmp    c000ff58 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff7a:	52                   	push   edx
c000ff7b:	52                   	push   edx
c000ff7c:	53                   	push   ebx
c000ff7d:	50                   	push   eax
c000ff7e:	e8 67 fc ff ff       	call   c000fbea <EnvVarContainer::getEnv(char const*)>
c000ff83:	83 c4 10             	add    esp,0x10
c000ff86:	85 c0                	test   eax,eax
c000ff88:	75 16                	jne    c000ffa0 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff8a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff8e:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c000ff93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff97:	83 c4 08             	add    esp,0x8
c000ff9a:	5b                   	pop    ebx
c000ff9b:	e9 4a fc ff ff       	jmp    c000fbea <EnvVarContainer::getEnv(char const*)>
c000ffa0:	83 c4 08             	add    esp,0x8
c000ffa3:	5b                   	pop    ebx
c000ffa4:	c3                   	ret    

c000ffa5 <Krnl::setEnvSystem(char const*, char const*)>:
c000ffa5:	83 ec 10             	sub    esp,0x10
c000ffa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffb0:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c000ffb6:	e8 6d fc ff ff       	call   c000fc28 <EnvVarContainer::setEnv(char const*, char const*)>
c000ffbb:	83 c4 1c             	add    esp,0x1c
c000ffbe:	c3                   	ret    

c000ffbf <Krnl::setEnvUser(char const*, char const*)>:
c000ffbf:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ffc4:	85 c0                	test   eax,eax
c000ffc6:	74 15                	je     c000ffdd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ffc8:	83 ec 10             	sub    esp,0x10
c000ffcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffcf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffd3:	50                   	push   eax
c000ffd4:	e8 4f fc ff ff       	call   c000fc28 <EnvVarContainer::setEnv(char const*, char const*)>
c000ffd9:	83 c4 1c             	add    esp,0x1c
c000ffdc:	c3                   	ret    
c000ffdd:	c3                   	ret    

c000ffde <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ffde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ffe8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ffec:	e9 37 fc ff ff       	jmp    c000fc28 <EnvVarContainer::setEnv(char const*, char const*)>

c000fff1 <Krnl::deleteEnvSystem(char const*)>:
c000fff1:	c3                   	ret    

c000fff2 <Krnl::deleteEnvUser(char const*)>:
c000fff2:	c3                   	ret    

c000fff3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000fff3:	c3                   	ret    

c000fff4 <Krnl::newProcessEnv(Process*)>:
c000fff4:	83 ec 28             	sub    esp,0x28
c000fff7:	6a 0c                	push   0xc
c000fff9:	e8 bb 77 ff ff       	call   c00077b9 <malloc>
c000fffe:	5a                   	pop    edx
c000ffff:	59                   	pop    ecx
c0010000:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010004:	50                   	push   eax
c0010005:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010009:	e8 e0 fe ff ff       	call   c000feee <EnvVarContainer::EnvVarContainer(Process*)>
c001000e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010012:	83 c4 2c             	add    esp,0x2c
c0010015:	c3                   	ret    

c0010016 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010016:	57                   	push   edi
c0010017:	56                   	push   esi
c0010018:	53                   	push   ebx
c0010019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001d:	83 ec 0c             	sub    esp,0xc
c0010020:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010026:	6a 0c                	push   0xc
c0010028:	e8 8c 77 ff ff       	call   c00077b9 <malloc>
c001002d:	89 c3                	mov    ebx,eax
c001002f:	58                   	pop    eax
c0010030:	5a                   	pop    edx
c0010031:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010035:	53                   	push   ebx
c0010036:	e8 b3 fe ff ff       	call   c000feee <EnvVarContainer::EnvVarContainer(Process*)>
c001003b:	8b 07                	mov    eax,DWORD PTR [edi]
c001003d:	89 03                	mov    DWORD PTR [ebx],eax
c001003f:	c1 e0 03             	shl    eax,0x3
c0010042:	89 04 24             	mov    DWORD PTR [esp],eax
c0010045:	e8 6f 77 ff ff       	call   c00077b9 <malloc>
c001004a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001004d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001004f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010052:	c1 e1 03             	shl    ecx,0x3
c0010055:	89 c7                	mov    edi,eax
c0010057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010059:	83 c4 10             	add    esp,0x10
c001005c:	89 d8                	mov    eax,ebx
c001005e:	5b                   	pop    ebx
c001005f:	5e                   	pop    esi
c0010060:	5f                   	pop    edi
c0010061:	c3                   	ret    

c0010062 <Krnl::loadSystemEnv()>:
c0010062:	53                   	push   ebx
c0010063:	83 ec 14             	sub    esp,0x14
c0010066:	6a 0c                	push   0xc
c0010068:	e8 4c 77 ff ff       	call   c00077b9 <malloc>
c001006d:	89 c3                	mov    ebx,eax
c001006f:	58                   	pop    eax
c0010070:	5a                   	pop    edx
c0010071:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010077:	53                   	push   ebx
c0010078:	e8 71 fe ff ff       	call   c000feee <EnvVarContainer::EnvVarContainer(Process*)>
c001007d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010080:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c0010086:	e8 47 fe ff ff       	call   c000fed2 <EnvVarContainer::__loadSystem()>
c001008b:	83 c4 18             	add    esp,0x18
c001008e:	5b                   	pop    ebx
c001008f:	c3                   	ret    

c0010090 <Krnl::loadUserEnv()>:
c0010090:	53                   	push   ebx
c0010091:	83 ec 14             	sub    esp,0x14
c0010094:	6a 0c                	push   0xc
c0010096:	e8 1e 77 ff ff       	call   c00077b9 <malloc>
c001009b:	89 c3                	mov    ebx,eax
c001009d:	58                   	pop    eax
c001009e:	5a                   	pop    edx
c001009f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00100a5:	53                   	push   ebx
c00100a6:	e8 43 fe ff ff       	call   c000feee <EnvVarContainer::EnvVarContainer(Process*)>
c00100ab:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c00100b1:	83 c4 18             	add    esp,0x18
c00100b4:	5b                   	pop    ebx
c00100b5:	c3                   	ret    

c00100b6 <Krnl::flushEnv()>:
c00100b6:	c3                   	ret    

c00100b7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00100b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100bb:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c00100c1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100c7:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00100cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00100ce:	03 01                	add    eax,DWORD PTR [ecx]
c00100d0:	85 d2                	test   edx,edx
c00100d2:	74 02                	je     c00100d6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00100d4:	03 02                	add    eax,DWORD PTR [edx]
c00100d6:	c3                   	ret    

c00100d7 <Krnl::getProcessEnvPair(Process*, int)>:
c00100d7:	57                   	push   edi
c00100d8:	56                   	push   esi
c00100d9:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c00100df:	53                   	push   ebx
c00100e0:	85 f6                	test   esi,esi
c00100e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100ea:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00100f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100f6:	75 16                	jne    c001010e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00100f8:	39 c2                	cmp    edx,eax
c00100fa:	7c 16                	jl     c0010112 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00100fc:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c0010102:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010104:	01 c6                	add    esi,eax
c0010106:	39 d6                	cmp    esi,edx
c0010108:	7e 3c                	jle    c0010146 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001010a:	29 c2                	sub    edx,eax
c001010c:	eb 04                	jmp    c0010112 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001010e:	39 c2                	cmp    edx,eax
c0010110:	7d 05                	jge    c0010117 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010112:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010115:	eb 20                	jmp    c0010137 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010117:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010119:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001011c:	39 d1                	cmp    ecx,edx
c001011e:	7e 04                	jle    c0010124 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010120:	29 c2                	sub    edx,eax
c0010122:	eb 10                	jmp    c0010134 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010124:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c001012a:	03 0e                	add    ecx,DWORD PTR [esi]
c001012c:	39 d1                	cmp    ecx,edx
c001012e:	7e 16                	jle    c0010146 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010130:	29 c2                	sub    edx,eax
c0010132:	29 fa                	sub    edx,edi
c0010134:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010137:	8d 14 d0             	lea    edx,[eax+edx*8]
c001013a:	8b 02                	mov    eax,DWORD PTR [edx]
c001013c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001013f:	89 03                	mov    DWORD PTR [ebx],eax
c0010141:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010144:	eb 1d                	jmp    c0010163 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010146:	83 ec 0c             	sub    esp,0xc
c0010149:	68 f6 e6 01 c0       	push   0xc001e6f6
c001014e:	e8 ac 00 00 00       	call   c00101ff <KePanic(char const*)>
c0010153:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010159:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010160:	83 c4 10             	add    esp,0x10
c0010163:	89 d8                	mov    eax,ebx
c0010165:	5b                   	pop    ebx
c0010166:	5e                   	pop    esi
c0010167:	5f                   	pop    edi
c0010168:	c2 04 00             	ret    0x4

c001016b <CPU::current()>:
c001016b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010170:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010176:	c3                   	ret    

c0010177 <operator new(unsigned long)>:
c0010177:	e9 3d 76 ff ff       	jmp    c00077b9 <malloc>

c001017c <operator delete(void*)>:
c001017c:	e9 58 76 ff ff       	jmp    c00077d9 <rfree>

c0010181 <disableIRQs()>:
c0010181:	fa                   	cli    
c0010182:	c3                   	ret    

c0010183 <enableIRQs()>:
c0010183:	fb                   	sti    
c0010184:	c3                   	ret    

c0010185 <lockScheduler()>:
c0010185:	fa                   	cli    
c0010186:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001018c:	c3                   	ret    

c001018d <unlockScheduler()>:
c001018d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010192:	48                   	dec    eax
c0010193:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010198:	75 01                	jne    c001019b <unlockScheduler()+0xe>
c001019a:	fb                   	sti    
c001019b:	c3                   	ret    

c001019c <lockStuff()>:
c001019c:	fa                   	cli    
c001019d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00101a3:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00101a9:	c3                   	ret    

c00101aa <unlockStuff()>:
c00101aa:	83 ec 0c             	sub    esp,0xc
c00101ad:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00101b2:	48                   	dec    eax
c00101b3:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00101b8:	75 18                	jne    c00101d2 <unlockStuff()+0x28>
c00101ba:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c00101c1:	74 0f                	je     c00101d2 <unlockStuff()+0x28>
c00101c3:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00101cd:	e8 22 36 00 00       	call   c00137f4 <schedule()>
c00101d2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00101d7:	48                   	dec    eax
c00101d8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101dd:	75 01                	jne    c00101e0 <unlockStuff()+0x36>
c00101df:	fb                   	sti    
c00101e0:	83 c4 0c             	add    esp,0xc
c00101e3:	c3                   	ret    

c00101e4 <Virt::getAKernelVAS()>:
c00101e4:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00101e9:	c3                   	ret    

c00101ea <__not_memcpy>:
c00101ea:	57                   	push   edi
c00101eb:	56                   	push   esi
c00101ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101f8:	89 c7                	mov    edi,eax
c00101fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101fc:	5e                   	pop    esi
c00101fd:	5f                   	pop    edi
c00101fe:	c3                   	ret    

c00101ff <KePanic(char const*)>:
c00101ff:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c0010206:	e9 e1 53 00 00       	jmp    c00155ec <HalPanic(char const*)>

c001020b <Krnl::powerThread(void*)>:
c001020b:	83 ec 0c             	sub    esp,0xc
c001020e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010213:	48                   	dec    eax
c0010214:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010219:	75 01                	jne    c001021c <Krnl::powerThread(void*)+0x11>
c001021b:	fb                   	sti    
c001021c:	83 ec 0c             	sub    esp,0xc
c001021f:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c0010226:	6a 0a                	push   0xa
c0010228:	e8 d7 38 00 00       	call   c0013b04 <sleep(unsigned int)>
c001022d:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c0010234:	83 c4 10             	add    esp,0x10
c0010237:	eb e3                	jmp    c001021c <Krnl::powerThread(void*)+0x11>

c0010239 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010239:	57                   	push   edi
c001023a:	b9 09 00 00 00       	mov    ecx,0x9
c001023f:	56                   	push   esi
c0010240:	bf 60 49 02 c0       	mov    edi,0xc0024960
c0010245:	fc                   	cld    
c0010246:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001024a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001024c:	5e                   	pop    esi
c001024d:	5f                   	pop    edi
c001024e:	c3                   	ret    

c001024f <Krnl::userIOReceived()>:
c001024f:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010259:	c3                   	ret    

c001025a <Krnl::handlePowerButton()>:
c001025a:	83 ec 0c             	sub    esp,0xc
c001025d:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c0010262:	83 f8 02             	cmp    eax,0x2
c0010265:	75 10                	jne    c0010277 <Krnl::handlePowerButton()+0x1d>
c0010267:	83 ec 0c             	sub    esp,0xc
c001026a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010270:	e8 e1 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c0010275:	eb 11                	jmp    c0010288 <Krnl::handlePowerButton()+0x2e>
c0010277:	48                   	dec    eax
c0010278:	75 11                	jne    c001028b <Krnl::handlePowerButton()+0x31>
c001027a:	83 ec 0c             	sub    esp,0xc
c001027d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010283:	e8 fe 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010288:	83 c4 10             	add    esp,0x10
c001028b:	83 c4 0c             	add    esp,0xc
c001028e:	c3                   	ret    

c001028f <Krnl::handleSleepButton()>:
c001028f:	83 ec 0c             	sub    esp,0xc
c0010292:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c0010297:	83 f8 02             	cmp    eax,0x2
c001029a:	75 10                	jne    c00102ac <Krnl::handleSleepButton()+0x1d>
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102a5:	e8 ac 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c00102aa:	eb 11                	jmp    c00102bd <Krnl::handleSleepButton()+0x2e>
c00102ac:	48                   	dec    eax
c00102ad:	75 11                	jne    c00102c0 <Krnl::handleSleepButton()+0x31>
c00102af:	83 ec 0c             	sub    esp,0xc
c00102b2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102b8:	e8 c9 6b ff ff       	call   c0006e86 <Computer::sleep()>
c00102bd:	83 c4 10             	add    esp,0x10
c00102c0:	83 c4 0c             	add    esp,0xc
c00102c3:	c3                   	ret    

c00102c4 <Krnl::setupPowerManager()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00102d1:	68 f0 00 00 00       	push   0xf0
c00102d6:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00102dd:	6a 00                	push   0x0
c00102df:	68 0b 02 01 c0       	push   0xc001020b
c00102e4:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00102ea:	e8 e5 32 00 00       	call   c00135d4 <Process::createThread(void (*)(void*), void*, int)>
c00102ef:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c00102f9:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c0010303:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c001030d:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c0010317:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c0010321:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c001032b:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c0010335:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c001033f:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c0010349:	83 c4 1c             	add    esp,0x1c
c001034c:	c3                   	ret    
c001034d:	66 90                	xchg   ax,ax
c001034f:	90                   	nop

c0010350 <KeResolveCompatibilitySymbol(char*)>:
c0010350:	83 ec 0c             	sub    esp,0xc
c0010353:	83 ec 08             	sub    esp,0x8
c0010356:	68 10 e7 01 c0       	push   0xc001e710
c001035b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035f:	e8 7c 03 ff ff       	call   c00006e0 <strcmp>
c0010364:	83 c4 10             	add    esp,0x10
c0010367:	85 c0                	test   eax,eax
c0010369:	0f 94 c0             	sete   al
c001036c:	84 c0                	test   al,al
c001036e:	74 0c                	je     c001037c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010370:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c0010375:	e9 62 01 00 00       	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037a:	66 90                	xchg   ax,ax
c001037c:	83 ec 08             	sub    esp,0x8
c001037f:	68 19 e7 01 c0       	push   0xc001e719
c0010384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010388:	e8 53 03 ff ff       	call   c00006e0 <strcmp>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	85 c0                	test   eax,eax
c0010392:	0f 94 c0             	sete   al
c0010395:	84 c0                	test   al,al
c0010397:	74 0b                	je     c00103a4 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010399:	b8 50 c1 01 c0       	mov    eax,0xc001c150
c001039e:	e9 39 01 00 00       	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a3:	90                   	nop
c00103a4:	83 ec 08             	sub    esp,0x8
c00103a7:	68 23 e7 01 c0       	push   0xc001e723
c00103ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b0:	e8 2b 03 ff ff       	call   c00006e0 <strcmp>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	85 c0                	test   eax,eax
c00103ba:	0f 94 c0             	sete   al
c00103bd:	84 c0                	test   al,al
c00103bf:	74 0b                	je     c00103cc <KeResolveCompatibilitySymbol(char*)+0x7c>
c00103c1:	b8 84 be 01 c0       	mov    eax,0xc001be84
c00103c6:	e9 11 01 00 00       	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103cb:	90                   	nop
c00103cc:	83 ec 08             	sub    esp,0x8
c00103cf:	68 2c e7 01 c0       	push   0xc001e72c
c00103d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d8:	e8 03 03 ff ff       	call   c00006e0 <strcmp>
c00103dd:	83 c4 10             	add    esp,0x10
c00103e0:	85 c0                	test   eax,eax
c00103e2:	0f 94 c0             	sete   al
c00103e5:	84 c0                	test   al,al
c00103e7:	74 0b                	je     c00103f4 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00103e9:	b8 ff 01 01 c0       	mov    eax,0xc00101ff
c00103ee:	e9 e9 00 00 00       	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f3:	90                   	nop
c00103f4:	83 ec 08             	sub    esp,0x8
c00103f7:	68 3f e7 01 c0       	push   0xc001e73f
c00103fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010400:	e8 db 02 ff ff       	call   c00006e0 <strcmp>
c0010405:	83 c4 10             	add    esp,0x10
c0010408:	85 c0                	test   eax,eax
c001040a:	0f 94 c0             	sete   al
c001040d:	84 c0                	test   al,al
c001040f:	74 0b                	je     c001041c <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010411:	b8 87 fb 00 c0       	mov    eax,0xc000fb87
c0010416:	e9 c1 00 00 00       	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001041b:	90                   	nop
c001041c:	83 ec 08             	sub    esp,0x8
c001041f:	68 5c e7 01 c0       	push   0xc001e75c
c0010424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010428:	e8 b3 02 ff ff       	call   c00006e0 <strcmp>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	85 c0                	test   eax,eax
c0010432:	0f 94 c0             	sete   al
c0010435:	84 c0                	test   al,al
c0010437:	74 0b                	je     c0010444 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010439:	b8 50 c2 01 c0       	mov    eax,0xc001c250
c001043e:	e9 99 00 00 00       	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010443:	90                   	nop
c0010444:	83 ec 08             	sub    esp,0x8
c0010447:	68 66 e7 01 c0       	push   0xc001e766
c001044c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010450:	e8 8b 02 ff ff       	call   c00006e0 <strcmp>
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	85 c0                	test   eax,eax
c001045a:	0f 94 c0             	sete   al
c001045d:	84 c0                	test   al,al
c001045f:	74 07                	je     c0010468 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010461:	b8 d0 bf 01 c0       	mov    eax,0xc001bfd0
c0010466:	eb 74                	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010468:	83 ec 08             	sub    esp,0x8
c001046b:	68 6f e7 01 c0       	push   0xc001e76f
c0010470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010474:	e8 67 02 ff ff       	call   c00006e0 <strcmp>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	85 c0                	test   eax,eax
c001047e:	0f 94 c0             	sete   al
c0010481:	84 c0                	test   al,al
c0010483:	74 07                	je     c001048c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010485:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001048a:	eb 50                	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001048c:	83 ec 08             	sub    esp,0x8
c001048f:	68 87 e7 01 c0       	push   0xc001e787
c0010494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010498:	e8 43 02 ff ff       	call   c00006e0 <strcmp>
c001049d:	83 c4 10             	add    esp,0x10
c00104a0:	85 c0                	test   eax,eax
c00104a2:	0f 94 c0             	sete   al
c00104a5:	84 c0                	test   al,al
c00104a7:	74 07                	je     c00104b0 <KeResolveCompatibilitySymbol(char*)+0x160>
c00104a9:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c00104ae:	eb 2c                	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104b0:	83 ec 08             	sub    esp,0x8
c00104b3:	68 94 e7 01 c0       	push   0xc001e794
c00104b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104bc:	e8 1f 02 ff ff       	call   c00006e0 <strcmp>
c00104c1:	83 c4 10             	add    esp,0x10
c00104c4:	85 c0                	test   eax,eax
c00104c6:	0f 94 c0             	sete   al
c00104c9:	84 c0                	test   al,al
c00104cb:	74 07                	je     c00104d4 <KeResolveCompatibilitySymbol(char*)+0x184>
c00104cd:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c00104d2:	eb 08                	jmp    c00104dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104d4:	b8 00 00 00 00       	mov    eax,0x0
c00104d9:	8d 76 00             	lea    esi,[esi+0x0]
c00104dc:	83 c4 0c             	add    esp,0xc
c00104df:	c3                   	ret    

c00104e0 <KiSigKill(int)>:
c00104e0:	57                   	push   edi
c00104e1:	b9 0a 00 00 00       	mov    ecx,0xa
c00104e6:	56                   	push   esi
c00104e7:	be dd e7 01 c0       	mov    esi,0xc001e7dd
c00104ec:	83 ec 14             	sub    esp,0x14
c00104ef:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00104f3:	fc                   	cld    
c00104f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104f6:	8d 44 24 06          	lea    eax,[esp+0x6]
c00104fa:	50                   	push   eax
c00104fb:	6a 00                	push   0x0
c00104fd:	6a 00                	push   0x0
c00104ff:	6a 27                	push   0x27
c0010501:	e8 4c fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010506:	83 c4 24             	add    esp,0x24
c0010509:	5e                   	pop    esi
c001050a:	5f                   	pop    edi
c001050b:	c3                   	ret    

c001050c <KiDefaultSignalHandlerIgnore(int)>:
c001050c:	c3                   	ret    

c001050d <KiDefaultSignalHandlerPause(int)>:
c001050d:	57                   	push   edi
c001050e:	b9 07 00 00 00       	mov    ecx,0x7
c0010513:	56                   	push   esi
c0010514:	be e7 e7 01 c0       	mov    esi,0xc001e7e7
c0010519:	83 ec 24             	sub    esp,0x24
c001051c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010520:	fc                   	cld    
c0010521:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010523:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010527:	50                   	push   eax
c0010528:	6a 00                	push   0x0
c001052a:	6a 00                	push   0x0
c001052c:	6a 27                	push   0x27
c001052e:	e8 1f fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010533:	83 c4 34             	add    esp,0x34
c0010536:	5e                   	pop    esi
c0010537:	5f                   	pop    edi
c0010538:	c3                   	ret    

c0010539 <KiDefaultSignalHandlerResume(int)>:
c0010539:	57                   	push   edi
c001053a:	b9 1d 00 00 00       	mov    ecx,0x1d
c001053f:	56                   	push   esi
c0010540:	be 03 e8 01 c0       	mov    esi,0xc001e803
c0010545:	83 ec 24             	sub    esp,0x24
c0010548:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001054c:	fc                   	cld    
c001054d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001054f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010553:	50                   	push   eax
c0010554:	6a 00                	push   0x0
c0010556:	6a 00                	push   0x0
c0010558:	6a 27                	push   0x27
c001055a:	e8 f3 fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001055f:	83 c4 34             	add    esp,0x34
c0010562:	5e                   	pop    esi
c0010563:	5f                   	pop    edi
c0010564:	c3                   	ret    

c0010565 <KeDeinitSignals(SigHandlerBlock*)>:
c0010565:	e9 5f 72 ff ff       	jmp    c00077c9 <free>

c001056a <KeInitSignals()>:
c001056a:	53                   	push   ebx
c001056b:	83 ec 14             	sub    esp,0x14
c001056e:	68 c8 00 00 00       	push   0xc8
c0010573:	e8 41 72 ff ff       	call   c00077b9 <malloc>
c0010578:	83 c4 0c             	add    esp,0xc
c001057b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010585:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001058f:	89 c3                	mov    ebx,eax
c0010591:	6a 20                	push   0x20
c0010593:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010599:	6a 00                	push   0x0
c001059b:	50                   	push   eax
c001059c:	e8 2f ff fe ff       	call   c00004d0 <memset>
c00105a1:	83 c4 0c             	add    esp,0xc
c00105a4:	6a 44                	push   0x44
c00105a6:	6a 00                	push   0x0
c00105a8:	53                   	push   ebx
c00105a9:	e8 22 ff fe ff       	call   c00004d0 <memset>
c00105ae:	89 d8                	mov    eax,ebx
c00105b0:	83 c4 18             	add    esp,0x18
c00105b3:	5b                   	pop    ebx
c00105b4:	c3                   	ret    

c00105b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00105b5:	53                   	push   ebx
c00105b6:	b8 01 00 00 00       	mov    eax,0x1
c00105bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00105bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105c3:	83 f9 10             	cmp    ecx,0x10
c00105c6:	7f 21                	jg     c00105e9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00105c8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00105cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105cf:	89 03                	mov    DWORD PTR [ebx],eax
c00105d1:	b8 01 00 00 00       	mov    eax,0x1
c00105d6:	d3 e0                	shl    eax,cl
c00105d8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00105dc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00105df:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00105e7:	31 c0                	xor    eax,eax
c00105e9:	5b                   	pop    ebx
c00105ea:	c3                   	ret    

c00105eb <KeRaiseSignal(SigHandlerBlock*, int)>:
c00105eb:	55                   	push   ebp
c00105ec:	57                   	push   edi
c00105ed:	bf 08 00 00 00       	mov    edi,0x8
c00105f2:	56                   	push   esi
c00105f3:	53                   	push   ebx
c00105f4:	83 ec 18             	sub    esp,0x18
c00105f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00105fb:	68 20 e8 01 c0       	push   0xc001e820
c0010600:	e8 78 9f ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010605:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001060c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	31 c9                	xor    ecx,ecx
c0010617:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001061b:	99                   	cdq    
c001061c:	f7 ff                	idiv   edi
c001061e:	8d 42 24             	lea    eax,[edx+0x24]
c0010621:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010625:	85 f6                	test   esi,esi
c0010627:	75 1a                	jne    c0010643 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010629:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001062d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010631:	50                   	push   eax
c0010632:	50                   	push   eax
c0010633:	52                   	push   edx
c0010634:	68 31 e8 01 c0       	push   0xc001e831
c0010639:	e8 3f 9f ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001063e:	83 c4 10             	add    esp,0x10
c0010641:	eb 1b                	jmp    c001065e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010643:	41                   	inc    ecx
c0010644:	83 f9 08             	cmp    ecx,0x8
c0010647:	75 ce                	jne    c0010617 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010649:	83 ec 0c             	sub    esp,0xc
c001064c:	be 01 00 00 00       	mov    esi,0x1
c0010651:	68 52 e8 01 c0       	push   0xc001e852
c0010656:	e8 22 9f ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001065b:	83 c4 10             	add    esp,0x10
c001065e:	83 c4 0c             	add    esp,0xc
c0010661:	89 f0                	mov    eax,esi
c0010663:	5b                   	pop    ebx
c0010664:	5e                   	pop    esi
c0010665:	5f                   	pop    edi
c0010666:	5d                   	pop    ebp
c0010667:	c3                   	ret    

c0010668 <KeCheckSignal(SigHandlerBlock*)>:
c0010668:	55                   	push   ebp
c0010669:	57                   	push   edi
c001066a:	56                   	push   esi
c001066b:	53                   	push   ebx
c001066c:	51                   	push   ecx
c001066d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010671:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010678:	75 07                	jne    c0010681 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001067a:	31 c0                	xor    eax,eax
c001067c:	e9 cc 00 00 00       	jmp    c001074d <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010681:	31 c9                	xor    ecx,ecx
c0010683:	bf 08 00 00 00       	mov    edi,0x8
c0010688:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001068e:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010691:	99                   	cdq    
c0010692:	f7 ff                	idiv   edi
c0010694:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001069b:	85 d2                	test   edx,edx
c001069d:	0f 84 94 00 00 00    	je     c0010737 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c00106a3:	88 d1                	mov    cl,dl
c00106a5:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00106ab:	bf 01 00 00 00       	mov    edi,0x1
c00106b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00106b3:	d3 e7                	shl    edi,cl
c00106b5:	bd 01 00 00 00       	mov    ebp,0x1
c00106ba:	31 c9                	xor    ecx,ecx
c00106bc:	89 e8                	mov    eax,ebp
c00106be:	d3 e0                	shl    eax,cl
c00106c0:	85 04 24             	test   DWORD PTR [esp],eax
c00106c3:	74 06                	je     c00106cb <KeCheckSignal(SigHandlerBlock*)+0x63>
c00106c5:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00106c9:	75 af                	jne    c001067a <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106cb:	41                   	inc    ecx
c00106cc:	83 f9 11             	cmp    ecx,0x11
c00106cf:	75 eb                	jne    c00106bc <KeCheckSignal(SigHandlerBlock*)+0x54>
c00106d1:	8d 4e 01             	lea    ecx,[esi+0x1]
c00106d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00106d7:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c00106dd:	09 f8                	or     eax,edi
c00106df:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c00106ea:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00106f0:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00106f7:	31 c0                	xor    eax,eax
c00106f9:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010701:	74 09                	je     c001070c <KeCheckSignal(SigHandlerBlock*)+0xa4>
c0010703:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001070a:	eb 06                	jmp    c0010712 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c001070c:	40                   	inc    eax
c001070d:	83 f8 08             	cmp    eax,0x8
c0010710:	75 e7                	jne    c00106f9 <KeCheckSignal(SigHandlerBlock*)+0x91>
c0010712:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010715:	83 fa 09             	cmp    edx,0x9
c0010718:	75 07                	jne    c0010721 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c001071a:	b8 e0 04 01 c0       	mov    eax,0xc00104e0
c001071f:	eb 2c                	jmp    c001074d <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010721:	83 f8 01             	cmp    eax,0x1
c0010724:	0f 84 50 ff ff ff    	je     c001067a <KeCheckSignal(SigHandlerBlock*)+0x12>
c001072a:	85 c0                	test   eax,eax
c001072c:	75 1f                	jne    c001074d <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001072e:	8b 04 95 40 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe05c0]
c0010735:	eb 16                	jmp    c001074d <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010737:	46                   	inc    esi
c0010738:	41                   	inc    ecx
c0010739:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001073f:	83 f9 08             	cmp    ecx,0x8
c0010742:	0f 85 40 ff ff ff    	jne    c0010688 <KeCheckSignal(SigHandlerBlock*)+0x20>
c0010748:	e9 2d ff ff ff       	jmp    c001067a <KeCheckSignal(SigHandlerBlock*)+0x12>
c001074d:	5a                   	pop    edx
c001074e:	5b                   	pop    ebx
c001074f:	5e                   	pop    esi
c0010750:	5f                   	pop    edi
c0010751:	5d                   	pop    ebp
c0010752:	c3                   	ret    

c0010753 <KiCheckSignalZ>:
c0010753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010758:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001075b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010761:	e8 02 ff ff ff       	call   c0010668 <KeCheckSignal(SigHandlerBlock*)>
c0010766:	5a                   	pop    edx
c0010767:	c3                   	ret    

c0010768 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010768:	56                   	push   esi
c0010769:	53                   	push   ebx
c001076a:	bb 01 00 00 00       	mov    ebx,0x1
c001076f:	52                   	push   edx
c0010770:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010774:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010778:	d3 e3                	shl    ebx,cl
c001077a:	83 f9 10             	cmp    ecx,0x10
c001077d:	7f 08                	jg     c0010787 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001077f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010785:	75 10                	jne    c0010797 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010787:	83 ec 0c             	sub    esp,0xc
c001078a:	68 63 e8 01 c0       	push   0xc001e863
c001078f:	e8 6b fa ff ff       	call   c00101ff <KePanic(char const*)>
c0010794:	83 c4 10             	add    esp,0x10
c0010797:	f7 d3                	not    ebx
c0010799:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001079f:	58                   	pop    eax
c00107a0:	5b                   	pop    ebx
c00107a1:	5e                   	pop    esi
c00107a2:	c3                   	ret    

c00107a3 <SysSeekDir(regs*)>:
c00107a3:	31 c0                	xor    eax,eax
c00107a5:	31 d2                	xor    edx,edx
c00107a7:	c3                   	ret    

c00107a8 <SysTellDir(regs*)>:
c00107a8:	31 c0                	xor    eax,eax
c00107aa:	31 d2                	xor    edx,edx
c00107ac:	c3                   	ret    

c00107ad <SysVerify(regs*)>:
c00107ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b1:	31 d2                	xor    edx,edx
c00107b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107b6:	c3                   	ret    

c00107b7 <SysGetArgc(regs*)>:
c00107b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107bf:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00107c5:	99                   	cdq    
c00107c6:	c3                   	ret    

c00107c7 <SysTTYName(regs*)>:
c00107c7:	b8 01 00 00 00       	mov    eax,0x1
c00107cc:	31 d2                	xor    edx,edx
c00107ce:	c3                   	ret    

c00107cf <SysFormatDisk(regs*)>:
c00107cf:	56                   	push   esi
c00107d0:	53                   	push   ebx
c00107d1:	50                   	push   eax
c00107d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107d6:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c00107dc:	eb 28                	jmp    c0010806 <SysFormatDisk(regs*)+0x37>
c00107de:	83 ec 0c             	sub    esp,0xc
c00107e1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00107e4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00107e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107e9:	51                   	push   ecx
c00107ea:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107ed:	51                   	push   ecx
c00107ee:	50                   	push   eax
c00107ef:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00107f6:	50                   	push   eax
c00107f7:	53                   	push   ebx
c00107f8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107fb:	83 c4 20             	add    esp,0x20
c00107fe:	83 f8 08             	cmp    eax,0x8
c0010801:	75 12                	jne    c0010815 <SysFormatDisk(regs*)+0x46>
c0010803:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010806:	85 db                	test   ebx,ebx
c0010808:	75 d4                	jne    c00107de <SysFormatDisk(regs*)+0xf>
c001080a:	59                   	pop    ecx
c001080b:	b8 03 00 00 00       	mov    eax,0x3
c0010810:	31 d2                	xor    edx,edx
c0010812:	5b                   	pop    ebx
c0010813:	5e                   	pop    esi
c0010814:	c3                   	ret    
c0010815:	85 c0                	test   eax,eax
c0010817:	74 1b                	je     c0010834 <SysFormatDisk(regs*)+0x65>
c0010819:	83 f8 09             	cmp    eax,0x9
c001081c:	74 0b                	je     c0010829 <SysFormatDisk(regs*)+0x5a>
c001081e:	59                   	pop    ecx
c001081f:	b8 02 00 00 00       	mov    eax,0x2
c0010824:	31 d2                	xor    edx,edx
c0010826:	5b                   	pop    ebx
c0010827:	5e                   	pop    esi
c0010828:	c3                   	ret    
c0010829:	59                   	pop    ecx
c001082a:	b8 01 00 00 00       	mov    eax,0x1
c001082f:	31 d2                	xor    edx,edx
c0010831:	5b                   	pop    ebx
c0010832:	5e                   	pop    esi
c0010833:	c3                   	ret    
c0010834:	59                   	pop    ecx
c0010835:	31 c0                	xor    eax,eax
c0010837:	31 d2                	xor    edx,edx
c0010839:	5b                   	pop    ebx
c001083a:	5e                   	pop    esi
c001083b:	c3                   	ret    

c001083c <SysSetDiskVolumeLabel(regs*)>:
c001083c:	56                   	push   esi
c001083d:	53                   	push   ebx
c001083e:	53                   	push   ebx
c001083f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010843:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010846:	83 f8 19             	cmp    eax,0x19
c0010849:	77 2d                	ja     c0010878 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001084b:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0010852:	85 c9                	test   ecx,ecx
c0010854:	74 22                	je     c0010878 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010856:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010859:	85 db                	test   ebx,ebx
c001085b:	74 1b                	je     c0010878 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001085d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010863:	85 d2                	test   edx,edx
c0010865:	74 11                	je     c0010878 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010867:	8b 32                	mov    esi,DWORD PTR [edx]
c0010869:	53                   	push   ebx
c001086a:	50                   	push   eax
c001086b:	51                   	push   ecx
c001086c:	52                   	push   edx
c001086d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010870:	83 c4 10             	add    esp,0x10
c0010873:	99                   	cdq    
c0010874:	59                   	pop    ecx
c0010875:	5b                   	pop    ebx
c0010876:	5e                   	pop    esi
c0010877:	c3                   	ret    
c0010878:	59                   	pop    ecx
c0010879:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001087e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010883:	5b                   	pop    ebx
c0010884:	5e                   	pop    esi
c0010885:	c3                   	ret    

c0010886 <SysGetDiskVolumeLabel(regs*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010890:	83 fa 19             	cmp    edx,0x19
c0010893:	77 38                	ja     c00108cd <SysGetDiskVolumeLabel(regs*)+0x47>
c0010895:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c001089c:	85 c9                	test   ecx,ecx
c001089e:	74 2d                	je     c00108cd <SysGetDiskVolumeLabel(regs*)+0x47>
c00108a0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00108a3:	85 db                	test   ebx,ebx
c00108a5:	74 26                	je     c00108cd <SysGetDiskVolumeLabel(regs*)+0x47>
c00108a7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00108aa:	85 f6                	test   esi,esi
c00108ac:	74 1f                	je     c00108cd <SysGetDiskVolumeLabel(regs*)+0x47>
c00108ae:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00108b4:	85 c0                	test   eax,eax
c00108b6:	74 15                	je     c00108cd <SysGetDiskVolumeLabel(regs*)+0x47>
c00108b8:	83 ec 0c             	sub    esp,0xc
c00108bb:	8b 38                	mov    edi,DWORD PTR [eax]
c00108bd:	56                   	push   esi
c00108be:	53                   	push   ebx
c00108bf:	52                   	push   edx
c00108c0:	51                   	push   ecx
c00108c1:	50                   	push   eax
c00108c2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00108c5:	83 c4 20             	add    esp,0x20
c00108c8:	99                   	cdq    
c00108c9:	5b                   	pop    ebx
c00108ca:	5e                   	pop    esi
c00108cb:	5f                   	pop    edi
c00108cc:	c3                   	ret    
c00108cd:	5b                   	pop    ebx
c00108ce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108d8:	5e                   	pop    esi
c00108d9:	5f                   	pop    edi
c00108da:	c3                   	ret    

c00108db <SysShutdown(regs*)>:
c00108db:	83 ec 0c             	sub    esp,0xc
c00108de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108e5:	85 c0                	test   eax,eax
c00108e7:	74 18                	je     c0010901 <SysShutdown(regs*)+0x26>
c00108e9:	83 f8 01             	cmp    eax,0x1
c00108ec:	74 38                	je     c0010926 <SysShutdown(regs*)+0x4b>
c00108ee:	83 f8 02             	cmp    eax,0x2
c00108f1:	74 24                	je     c0010917 <SysShutdown(regs*)+0x3c>
c00108f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108fd:	83 c4 0c             	add    esp,0xc
c0010900:	c3                   	ret    
c0010901:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010906:	8b 10                	mov    edx,DWORD PTR [eax]
c0010908:	6a 00                	push   0x0
c001090a:	6a 00                	push   0x0
c001090c:	6a 00                	push   0x0
c001090e:	50                   	push   eax
c001090f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010912:	83 c4 10             	add    esp,0x10
c0010915:	eb dc                	jmp    c00108f3 <SysShutdown(regs*)+0x18>
c0010917:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001091c:	8b 10                	mov    edx,DWORD PTR [eax]
c001091e:	6a 00                	push   0x0
c0010920:	6a 00                	push   0x0
c0010922:	6a 01                	push   0x1
c0010924:	eb e8                	jmp    c001090e <SysShutdown(regs*)+0x33>
c0010926:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c001092b:	85 c0                	test   eax,eax
c001092d:	74 02                	je     c0010931 <SysShutdown(regs*)+0x56>
c001092f:	ff d0                	call   eax
c0010931:	31 c0                	xor    eax,eax
c0010933:	31 d2                	xor    edx,edx
c0010935:	83 c4 0c             	add    esp,0xc
c0010938:	c3                   	ret    

c0010939 <SysRealpath(regs*)>:
c0010939:	83 ec 0c             	sub    esp,0xc
c001093c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010940:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010943:	85 d2                	test   edx,edx
c0010945:	74 07                	je     c001094e <SysRealpath(regs*)+0x15>
c0010947:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001094a:	85 c0                	test   eax,eax
c001094c:	75 0b                	jne    c0010959 <SysRealpath(regs*)+0x20>
c001094e:	b8 01 00 00 00       	mov    eax,0x1
c0010953:	31 d2                	xor    edx,edx
c0010955:	83 c4 0c             	add    esp,0xc
c0010958:	c3                   	ret    
c0010959:	51                   	push   ecx
c001095a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010960:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010963:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010969:	51                   	push   ecx
c001096a:	52                   	push   edx
c001096b:	50                   	push   eax
c001096c:	e8 d7 9f ff ff       	call   c000a948 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	31 c0                	xor    eax,eax
c0010976:	31 d2                	xor    edx,edx
c0010978:	83 c4 0c             	add    esp,0xc
c001097b:	c3                   	ret    

c001097c <SysReadDir(regs*)>:
c001097c:	53                   	push   ebx
c001097d:	83 ec 18             	sub    esp,0x18
c0010980:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010984:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010987:	83 f8 02             	cmp    eax,0x2
c001098a:	76 61                	jbe    c00109ed <SysReadDir(regs*)+0x71>
c001098c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010993:	77 49                	ja     c00109de <SysReadDir(regs*)+0x62>
c0010995:	83 ec 0c             	sub    esp,0xc
c0010998:	50                   	push   eax
c0010999:	e8 91 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c001099e:	83 c4 10             	add    esp,0x10
c00109a1:	85 c0                	test   eax,eax
c00109a3:	74 39                	je     c00109de <SysReadDir(regs*)+0x62>
c00109a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00109ad:	83 ec 0c             	sub    esp,0xc
c00109b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00109b2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00109b6:	51                   	push   ecx
c00109b7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00109ba:	51                   	push   ecx
c00109bb:	6a 00                	push   0x0
c00109bd:	68 10 01 00 00       	push   0x110
c00109c2:	50                   	push   eax
c00109c3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109c6:	83 c4 20             	add    esp,0x20
c00109c9:	85 c0                	test   eax,eax
c00109cb:	74 29                	je     c00109f6 <SysReadDir(regs*)+0x7a>
c00109cd:	83 f8 07             	cmp    eax,0x7
c00109d0:	74 1b                	je     c00109ed <SysReadDir(regs*)+0x71>
c00109d2:	b8 02 00 00 00       	mov    eax,0x2
c00109d7:	31 d2                	xor    edx,edx
c00109d9:	83 c4 18             	add    esp,0x18
c00109dc:	5b                   	pop    ebx
c00109dd:	c3                   	ret    
c00109de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109e8:	83 c4 18             	add    esp,0x18
c00109eb:	5b                   	pop    ebx
c00109ec:	c3                   	ret    
c00109ed:	b8 01 00 00 00       	mov    eax,0x1
c00109f2:	31 d2                	xor    edx,edx
c00109f4:	eb e3                	jmp    c00109d9 <SysReadDir(regs*)+0x5d>
c00109f6:	31 c0                	xor    eax,eax
c00109f8:	31 d2                	xor    edx,edx
c00109fa:	eb dd                	jmp    c00109d9 <SysReadDir(regs*)+0x5d>

c00109fc <SysIsATTY(regs*)>:
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a03:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a06:	83 f8 02             	cmp    eax,0x2
c0010a09:	76 07                	jbe    c0010a12 <SysIsATTY(regs*)+0x16>
c0010a0b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a10:	75 28                	jne    c0010a3a <SysIsATTY(regs*)+0x3e>
c0010a12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a20:	85 c0                	test   eax,eax
c0010a22:	74 26                	je     c0010a4a <SysIsATTY(regs*)+0x4e>
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a29:	50                   	push   eax
c0010a2a:	ff 12                	call   DWORD PTR [edx]
c0010a2c:	31 d2                	xor    edx,edx
c0010a2e:	25 ff 00 00 00       	and    eax,0xff
c0010a33:	83 c4 10             	add    esp,0x10
c0010a36:	83 c4 0c             	add    esp,0xc
c0010a39:	c3                   	ret    
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	50                   	push   eax
c0010a3e:	e8 ec 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a43:	83 c4 10             	add    esp,0x10
c0010a46:	85 c0                	test   eax,eax
c0010a48:	75 da                	jne    c0010a24 <SysIsATTY(regs*)+0x28>
c0010a4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a54:	83 c4 0c             	add    esp,0xc
c0010a57:	c3                   	ret    

c0010a58 <SysSeek(regs*)>:
c0010a58:	53                   	push   ebx
c0010a59:	83 ec 08             	sub    esp,0x8
c0010a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a60:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a63:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a66:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a6c:	77 34                	ja     c0010aa2 <SysSeek(regs*)+0x4a>
c0010a6e:	83 ec 0c             	sub    esp,0xc
c0010a71:	50                   	push   eax
c0010a72:	e8 b8 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a77:	83 c4 0c             	add    esp,0xc
c0010a7a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a7d:	31 db                	xor    ebx,ebx
c0010a7f:	53                   	push   ebx
c0010a80:	51                   	push   ecx
c0010a81:	50                   	push   eax
c0010a82:	e8 e9 a1 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0010a87:	83 c4 10             	add    esp,0x10
c0010a8a:	85 c0                	test   eax,eax
c0010a8c:	0f 95 c0             	setne  al
c0010a8f:	31 d2                	xor    edx,edx
c0010a91:	25 ff 00 00 00       	and    eax,0xff
c0010a96:	f7 d8                	neg    eax
c0010a98:	83 d2 00             	adc    edx,0x0
c0010a9b:	83 c4 08             	add    esp,0x8
c0010a9e:	f7 da                	neg    edx
c0010aa0:	5b                   	pop    ebx
c0010aa1:	c3                   	ret    
c0010aa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aa7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010aac:	83 c4 08             	add    esp,0x8
c0010aaf:	5b                   	pop    ebx
c0010ab0:	c3                   	ret    

c0010ab1 <SysTell(regs*)>:
c0010ab1:	53                   	push   ebx
c0010ab2:	83 ec 08             	sub    esp,0x8
c0010ab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ab9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010abc:	83 f8 02             	cmp    eax,0x2
c0010abf:	76 50                	jbe    c0010b11 <SysTell(regs*)+0x60>
c0010ac1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ac6:	76 19                	jbe    c0010ae1 <SysTell(regs*)+0x30>
c0010ac8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010acb:	31 d2                	xor    edx,edx
c0010acd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ada:	31 c0                	xor    eax,eax
c0010adc:	83 c4 08             	add    esp,0x8
c0010adf:	5b                   	pop    ebx
c0010ae0:	c3                   	ret    
c0010ae1:	83 ec 0c             	sub    esp,0xc
c0010ae4:	50                   	push   eax
c0010ae5:	e8 45 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010aea:	5a                   	pop    edx
c0010aeb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010aee:	59                   	pop    ecx
c0010aef:	53                   	push   ebx
c0010af0:	50                   	push   eax
c0010af1:	e8 d0 a1 ff ff       	call   c000acc6 <File::tell(unsigned long long*)>
c0010af6:	83 c4 10             	add    esp,0x10
c0010af9:	85 c0                	test   eax,eax
c0010afb:	0f 95 c0             	setne  al
c0010afe:	31 d2                	xor    edx,edx
c0010b00:	25 ff 00 00 00       	and    eax,0xff
c0010b05:	f7 d8                	neg    eax
c0010b07:	83 d2 00             	adc    edx,0x0
c0010b0a:	83 c4 08             	add    esp,0x8
c0010b0d:	f7 da                	neg    edx
c0010b0f:	5b                   	pop    ebx
c0010b10:	c3                   	ret    
c0010b11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b1b:	83 c4 08             	add    esp,0x8
c0010b1e:	5b                   	pop    ebx
c0010b1f:	c3                   	ret    

c0010b20 <SysSize(regs*)>:
c0010b20:	53                   	push   ebx
c0010b21:	83 ec 18             	sub    esp,0x18
c0010b24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b28:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b2b:	83 f8 02             	cmp    eax,0x2
c0010b2e:	76 56                	jbe    c0010b86 <SysSize(regs*)+0x66>
c0010b30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b35:	76 19                	jbe    c0010b50 <SysSize(regs*)+0x30>
c0010b37:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b3a:	31 d2                	xor    edx,edx
c0010b3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b49:	31 c0                	xor    eax,eax
c0010b4b:	83 c4 18             	add    esp,0x18
c0010b4e:	5b                   	pop    ebx
c0010b4f:	c3                   	ret    
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	50                   	push   eax
c0010b54:	e8 d6 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b59:	83 c4 0c             	add    esp,0xc
c0010b5c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b60:	52                   	push   edx
c0010b61:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b64:	52                   	push   edx
c0010b65:	50                   	push   eax
c0010b66:	e8 f3 a2 ff ff       	call   c000ae5e <File::stat(unsigned long long*, bool*)>
c0010b6b:	83 c4 10             	add    esp,0x10
c0010b6e:	85 c0                	test   eax,eax
c0010b70:	0f 95 c0             	setne  al
c0010b73:	31 d2                	xor    edx,edx
c0010b75:	25 ff 00 00 00       	and    eax,0xff
c0010b7a:	f7 d8                	neg    eax
c0010b7c:	83 d2 00             	adc    edx,0x0
c0010b7f:	83 c4 18             	add    esp,0x18
c0010b82:	f7 da                	neg    edx
c0010b84:	5b                   	pop    ebx
c0010b85:	c3                   	ret    
c0010b86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b90:	83 c4 18             	add    esp,0x18
c0010b93:	5b                   	pop    ebx
c0010b94:	c3                   	ret    

c0010b95 <SysSizeFromFilename(regs*)>:
c0010b95:	57                   	push   edi
c0010b96:	56                   	push   esi
c0010b97:	53                   	push   ebx
c0010b98:	83 ec 20             	sub    esp,0x20
c0010b9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b9f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010ba2:	83 fb 02             	cmp    ebx,0x2
c0010ba5:	0f 86 8c 00 00 00    	jbe    c0010c37 <SysSizeFromFilename(regs*)+0xa2>
c0010bab:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010bb1:	76 1b                	jbe    c0010bce <SysSizeFromFilename(regs*)+0x39>
c0010bb3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010bb6:	31 d2                	xor    edx,edx
c0010bb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bbe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bc5:	83 c4 20             	add    esp,0x20
c0010bc8:	31 c0                	xor    eax,eax
c0010bca:	5b                   	pop    ebx
c0010bcb:	5e                   	pop    esi
c0010bcc:	5f                   	pop    edi
c0010bcd:	c3                   	ret    
c0010bce:	83 ec 0c             	sub    esp,0xc
c0010bd1:	68 14 01 00 00       	push   0x114
c0010bd6:	e8 de 6b ff ff       	call   c00077b9 <malloc>
c0010bdb:	83 c4 0c             	add    esp,0xc
c0010bde:	89 c7                	mov    edi,eax
c0010be0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010be5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010be8:	50                   	push   eax
c0010be9:	53                   	push   ebx
c0010bea:	57                   	push   edi
c0010beb:	e8 02 9f ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0010bf0:	83 c4 0c             	add    esp,0xc
c0010bf3:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bf7:	50                   	push   eax
c0010bf8:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010bfb:	52                   	push   edx
c0010bfc:	57                   	push   edi
c0010bfd:	e8 5c a2 ff ff       	call   c000ae5e <File::stat(unsigned long long*, bool*)>
c0010c02:	83 c4 10             	add    esp,0x10
c0010c05:	85 ff                	test   edi,edi
c0010c07:	74 14                	je     c0010c1d <SysSizeFromFilename(regs*)+0x88>
c0010c09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c0d:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	57                   	push   edi
c0010c13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c16:	83 c4 10             	add    esp,0x10
c0010c19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c1d:	85 c0                	test   eax,eax
c0010c1f:	0f 95 c0             	setne  al
c0010c22:	31 d2                	xor    edx,edx
c0010c24:	25 ff 00 00 00       	and    eax,0xff
c0010c29:	f7 d8                	neg    eax
c0010c2b:	83 d2 00             	adc    edx,0x0
c0010c2e:	83 c4 20             	add    esp,0x20
c0010c31:	f7 da                	neg    edx
c0010c33:	5b                   	pop    ebx
c0010c34:	5e                   	pop    esi
c0010c35:	5f                   	pop    edi
c0010c36:	c3                   	ret    
c0010c37:	83 c4 20             	add    esp,0x20
c0010c3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c3f:	5b                   	pop    ebx
c0010c40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c45:	5e                   	pop    esi
c0010c46:	5f                   	pop    edi
c0010c47:	c3                   	ret    

c0010c48 <SysClose(regs*)>:
c0010c48:	53                   	push   ebx
c0010c49:	83 ec 08             	sub    esp,0x8
c0010c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c53:	83 f8 02             	cmp    eax,0x2
c0010c56:	76 41                	jbe    c0010c99 <SysClose(regs*)+0x51>
c0010c58:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c5e:	83 fa 01             	cmp    edx,0x1
c0010c61:	76 2d                	jbe    c0010c90 <SysClose(regs*)+0x48>
c0010c63:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c68:	77 2f                	ja     c0010c99 <SysClose(regs*)+0x51>
c0010c6a:	83 ec 0c             	sub    esp,0xc
c0010c6d:	50                   	push   eax
c0010c6e:	e8 bc 84 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c73:	89 c3                	mov    ebx,eax
c0010c75:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c78:	e8 93 9f ff ff       	call   c000ac10 <File::close()>
c0010c7d:	83 c4 10             	add    esp,0x10
c0010c80:	85 db                	test   ebx,ebx
c0010c82:	74 0c                	je     c0010c90 <SysClose(regs*)+0x48>
c0010c84:	83 ec 0c             	sub    esp,0xc
c0010c87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c89:	53                   	push   ebx
c0010c8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c8d:	83 c4 10             	add    esp,0x10
c0010c90:	31 c0                	xor    eax,eax
c0010c92:	31 d2                	xor    edx,edx
c0010c94:	83 c4 08             	add    esp,0x8
c0010c97:	5b                   	pop    ebx
c0010c98:	c3                   	ret    
c0010c99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ca3:	83 c4 08             	add    esp,0x8
c0010ca6:	5b                   	pop    ebx
c0010ca7:	c3                   	ret    

c0010ca8 <SysOpenDir(regs*)>:
c0010ca8:	57                   	push   edi
c0010ca9:	56                   	push   esi
c0010caa:	53                   	push   ebx
c0010cab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010caf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cb2:	85 c0                	test   eax,eax
c0010cb4:	0f 84 e7 00 00 00    	je     c0010da1 <SysOpenDir(regs*)+0xf9>
c0010cba:	83 ec 0c             	sub    esp,0xc
c0010cbd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010cc0:	56                   	push   esi
c0010cc1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010cc4:	57                   	push   edi
c0010cc5:	50                   	push   eax
c0010cc6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010cc9:	50                   	push   eax
c0010cca:	68 74 e8 01 c0       	push   0xc001e874
c0010ccf:	e8 a9 98 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010cd4:	83 c4 18             	add    esp,0x18
c0010cd7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cda:	50                   	push   eax
c0010cdb:	68 9a e8 01 c0       	push   0xc001e89a
c0010ce0:	e8 98 98 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010ce5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010cec:	e8 c8 6a ff ff       	call   c00077b9 <malloc>
c0010cf1:	83 c4 0c             	add    esp,0xc
c0010cf4:	89 c6                	mov    esi,eax
c0010cf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cfb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cfe:	50                   	push   eax
c0010cff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d02:	50                   	push   eax
c0010d03:	56                   	push   esi
c0010d04:	e8 13 a3 ff ff       	call   c000b01c <Directory::Directory(char const*, Process*)>
c0010d09:	c7 04 24 8e f6 01 c0 	mov    DWORD PTR [esp],0xc001f68e
c0010d10:	e8 68 98 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010d15:	83 c4 10             	add    esp,0x10
c0010d18:	85 f6                	test   esi,esi
c0010d1a:	0f 84 8f 00 00 00    	je     c0010daf <SysOpenDir(regs*)+0x107>
c0010d20:	83 ec 0c             	sub    esp,0xc
c0010d23:	68 af e8 01 c0       	push   0xc001e8af
c0010d28:	e8 50 98 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010d2d:	58                   	pop    eax
c0010d2e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d31:	5a                   	pop    edx
c0010d32:	51                   	push   ecx
c0010d33:	68 b3 e8 01 c0       	push   0xc001e8b3
c0010d38:	e8 40 98 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010d3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d40:	e8 97 a3 ff ff       	call   c000b0dc <Directory::open()>
c0010d45:	c7 04 24 ab d6 01 c0 	mov    DWORD PTR [esp],0xc001d6ab
c0010d4c:	89 c7                	mov    edi,eax
c0010d4e:	e8 2a 98 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010d53:	83 c4 10             	add    esp,0x10
c0010d56:	85 ff                	test   edi,edi
c0010d58:	75 37                	jne    c0010d91 <SysOpenDir(regs*)+0xe9>
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	68 c4 e8 01 c0       	push   0xc001e8c4
c0010d62:	e8 16 98 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010d67:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d6a:	e8 cb 80 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010d6f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d72:	89 02                	mov    DWORD PTR [edx],eax
c0010d74:	c1 f8 1f             	sar    eax,0x1f
c0010d77:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d7a:	c7 04 24 c8 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8c8
c0010d81:	e8 f7 97 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	31 c0                	xor    eax,eax
c0010d8b:	5b                   	pop    ebx
c0010d8c:	31 d2                	xor    edx,edx
c0010d8e:	5e                   	pop    esi
c0010d8f:	5f                   	pop    edi
c0010d90:	c3                   	ret    
c0010d91:	83 ec 0c             	sub    esp,0xc
c0010d94:	68 c0 e8 01 c0       	push   0xc001e8c0
c0010d99:	e8 df 97 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0010d9e:	83 c4 10             	add    esp,0x10
c0010da1:	5b                   	pop    ebx
c0010da2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010da7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dac:	5e                   	pop    esi
c0010dad:	5f                   	pop    edi
c0010dae:	c3                   	ret    
c0010daf:	83 ec 0c             	sub    esp,0xc
c0010db2:	68 ab e8 01 c0       	push   0xc001e8ab
c0010db7:	eb e0                	jmp    c0010d99 <SysOpenDir(regs*)+0xf1>

c0010db9 <SysCloseDir(regs*)>:
c0010db9:	53                   	push   ebx
c0010dba:	83 ec 08             	sub    esp,0x8
c0010dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010dc4:	8d 50 fd             	lea    edx,[eax-0x3]
c0010dc7:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010dcd:	77 2f                	ja     c0010dfe <SysCloseDir(regs*)+0x45>
c0010dcf:	83 ec 0c             	sub    esp,0xc
c0010dd2:	50                   	push   eax
c0010dd3:	e8 57 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010dd8:	89 c3                	mov    ebx,eax
c0010dda:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ddd:	e8 56 a3 ff ff       	call   c000b138 <Directory::close()>
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	85 db                	test   ebx,ebx
c0010de7:	74 0c                	je     c0010df5 <SysCloseDir(regs*)+0x3c>
c0010de9:	83 ec 0c             	sub    esp,0xc
c0010dec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dee:	53                   	push   ebx
c0010def:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010df2:	83 c4 10             	add    esp,0x10
c0010df5:	31 c0                	xor    eax,eax
c0010df7:	31 d2                	xor    edx,edx
c0010df9:	83 c4 08             	add    esp,0x8
c0010dfc:	5b                   	pop    ebx
c0010dfd:	c3                   	ret    
c0010dfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e08:	83 c4 08             	add    esp,0x8
c0010e0b:	5b                   	pop    ebx
c0010e0c:	c3                   	ret    

c0010e0d <SysMakeDir(regs*)>:
c0010e0d:	56                   	push   esi
c0010e0e:	53                   	push   ebx
c0010e0f:	83 ec 10             	sub    esp,0x10
c0010e12:	68 14 01 00 00       	push   0x114
c0010e17:	e8 9d 69 ff ff       	call   c00077b9 <malloc>
c0010e1c:	83 c4 0c             	add    esp,0xc
c0010e1f:	89 c3                	mov    ebx,eax
c0010e21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e26:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e29:	56                   	push   esi
c0010e2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e2e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e31:	50                   	push   eax
c0010e32:	53                   	push   ebx
c0010e33:	e8 e4 a1 ff ff       	call   c000b01c <Directory::Directory(char const*, Process*)>
c0010e38:	83 c4 10             	add    esp,0x10
c0010e3b:	85 db                	test   ebx,ebx
c0010e3d:	74 32                	je     c0010e71 <SysMakeDir(regs*)+0x64>
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	53                   	push   ebx
c0010e43:	e8 74 a4 ff ff       	call   c000b2bc <Directory::create()>
c0010e48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e4b:	89 c6                	mov    esi,eax
c0010e4d:	e8 e6 a2 ff ff       	call   c000b138 <Directory::close()>
c0010e52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e5a:	83 c4 10             	add    esp,0x10
c0010e5d:	31 c0                	xor    eax,eax
c0010e5f:	59                   	pop    ecx
c0010e60:	85 f6                	test   esi,esi
c0010e62:	5b                   	pop    ebx
c0010e63:	0f 95 c0             	setne  al
c0010e66:	5e                   	pop    esi
c0010e67:	31 d2                	xor    edx,edx
c0010e69:	f7 d8                	neg    eax
c0010e6b:	83 d2 00             	adc    edx,0x0
c0010e6e:	f7 da                	neg    edx
c0010e70:	c3                   	ret    
c0010e71:	59                   	pop    ecx
c0010e72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e7c:	5b                   	pop    ebx
c0010e7d:	5e                   	pop    esi
c0010e7e:	c3                   	ret    

c0010e7f <SysWait(regs*)>:
c0010e7f:	83 ec 10             	sub    esp,0x10
c0010e82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e86:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e89:	52                   	push   edx
c0010e8a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e8d:	51                   	push   ecx
c0010e8e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e91:	50                   	push   eax
c0010e92:	e8 89 2b 00 00       	call   c0013a20 <waitTask(int, int*, int)>
c0010e97:	83 c4 1c             	add    esp,0x1c
c0010e9a:	99                   	cdq    
c0010e9b:	c3                   	ret    

c0010e9c <SysNotImpl(regs*)>:
c0010e9c:	83 ec 18             	sub    esp,0x18
c0010e9f:	68 cc e8 01 c0       	push   0xc001e8cc
c0010ea4:	e8 56 f3 ff ff       	call   c00101ff <KePanic(char const*)>
c0010ea9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eae:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010eb3:	83 c4 1c             	add    esp,0x1c
c0010eb6:	c3                   	ret    

c0010eb7 <SysPanic(regs*)>:
c0010eb7:	83 ec 18             	sub    esp,0x18
c0010eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ebe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ec1:	50                   	push   eax
c0010ec2:	e8 38 f3 ff ff       	call   c00101ff <KePanic(char const*)>
c0010ec7:	b8 01 00 00 00       	mov    eax,0x1
c0010ecc:	31 d2                	xor    edx,edx
c0010ece:	83 c4 1c             	add    esp,0x1c
c0010ed1:	c3                   	ret    

c0010ed2 <SysRmdir(regs*)>:
c0010ed2:	56                   	push   esi
c0010ed3:	53                   	push   ebx
c0010ed4:	83 ec 20             	sub    esp,0x20
c0010ed7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010edb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ede:	68 14 01 00 00       	push   0x114
c0010ee3:	e8 d1 68 ff ff       	call   c00077b9 <malloc>
c0010ee8:	83 c4 0c             	add    esp,0xc
c0010eeb:	89 c3                	mov    ebx,eax
c0010eed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ef5:	50                   	push   eax
c0010ef6:	56                   	push   esi
c0010ef7:	53                   	push   ebx
c0010ef8:	e8 f5 9b ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0010efd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f00:	e8 25 9e ff ff       	call   c000ad2a <File::unlink()>
c0010f05:	83 c4 10             	add    esp,0x10
c0010f08:	85 db                	test   ebx,ebx
c0010f0a:	74 14                	je     c0010f20 <SysRmdir(regs*)+0x4e>
c0010f0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f10:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f12:	83 ec 0c             	sub    esp,0xc
c0010f15:	53                   	push   ebx
c0010f16:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f19:	83 c4 10             	add    esp,0x10
c0010f1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f20:	85 c0                	test   eax,eax
c0010f22:	0f 95 c0             	setne  al
c0010f25:	31 d2                	xor    edx,edx
c0010f27:	25 ff 00 00 00       	and    eax,0xff
c0010f2c:	f7 d8                	neg    eax
c0010f2e:	83 d2 00             	adc    edx,0x0
c0010f31:	83 c4 14             	add    esp,0x14
c0010f34:	f7 da                	neg    edx
c0010f36:	5b                   	pop    ebx
c0010f37:	5e                   	pop    esi
c0010f38:	c3                   	ret    

c0010f39 <SysUnlink(regs*)>:
c0010f39:	56                   	push   esi
c0010f3a:	53                   	push   ebx
c0010f3b:	83 ec 20             	sub    esp,0x20
c0010f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f42:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f45:	68 14 01 00 00       	push   0x114
c0010f4a:	e8 6a 68 ff ff       	call   c00077b9 <malloc>
c0010f4f:	83 c4 0c             	add    esp,0xc
c0010f52:	89 c3                	mov    ebx,eax
c0010f54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f5c:	50                   	push   eax
c0010f5d:	56                   	push   esi
c0010f5e:	53                   	push   ebx
c0010f5f:	e8 8e 9b ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0010f64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f67:	e8 be 9d ff ff       	call   c000ad2a <File::unlink()>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	85 db                	test   ebx,ebx
c0010f71:	74 14                	je     c0010f87 <SysUnlink(regs*)+0x4e>
c0010f73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f77:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f79:	83 ec 0c             	sub    esp,0xc
c0010f7c:	53                   	push   ebx
c0010f7d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f87:	85 c0                	test   eax,eax
c0010f89:	0f 95 c0             	setne  al
c0010f8c:	31 d2                	xor    edx,edx
c0010f8e:	25 ff 00 00 00       	and    eax,0xff
c0010f93:	f7 d8                	neg    eax
c0010f95:	83 d2 00             	adc    edx,0x0
c0010f98:	83 c4 14             	add    esp,0x14
c0010f9b:	f7 da                	neg    edx
c0010f9d:	5b                   	pop    ebx
c0010f9e:	5e                   	pop    esi
c0010f9f:	c3                   	ret    

c0010fa0 <SysGetArgv(regs*)>:
c0010fa0:	83 ec 0c             	sub    esp,0xc
c0010fa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fa7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010faa:	85 c0                	test   eax,eax
c0010fac:	78 2c                	js     c0010fda <SysGetArgv(regs*)+0x3a>
c0010fae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010fb4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010fb7:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010fbd:	7d 1b                	jge    c0010fda <SysGetArgv(regs*)+0x3a>
c0010fbf:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010fc6:	85 c0                	test   eax,eax
c0010fc8:	74 18                	je     c0010fe2 <SysGetArgv(regs*)+0x42>
c0010fca:	83 ec 08             	sub    esp,0x8
c0010fcd:	50                   	push   eax
c0010fce:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fd1:	50                   	push   eax
c0010fd2:	e8 29 f6 fe ff       	call   c0000600 <strcpy>
c0010fd7:	83 c4 10             	add    esp,0x10
c0010fda:	31 c0                	xor    eax,eax
c0010fdc:	31 d2                	xor    edx,edx
c0010fde:	83 c4 0c             	add    esp,0xc
c0010fe1:	c3                   	ret    
c0010fe2:	b8 01 00 00 00       	mov    eax,0x1
c0010fe7:	31 d2                	xor    edx,edx
c0010fe9:	83 c4 0c             	add    esp,0xc
c0010fec:	c3                   	ret    

c0010fed <SysUSleep(regs*)>:
c0010fed:	83 ec 1c             	sub    esp,0x1c
c0010ff0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ff4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010ff7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010ffa:	6a 00                	push   0x0
c0010ffc:	6a 64                	push   0x64
c0010ffe:	52                   	push   edx
c0010fff:	50                   	push   eax
c0011000:	e8 4b b1 00 00       	call   c001c150 <__udivdi3>
c0011005:	83 c4 14             	add    esp,0x14
c0011008:	50                   	push   eax
c0011009:	e8 e6 2a 00 00       	call   c0013af4 <milliTenthSleep(unsigned int)>
c001100e:	31 c0                	xor    eax,eax
c0011010:	31 d2                	xor    edx,edx
c0011012:	83 c4 1c             	add    esp,0x1c
c0011015:	c3                   	ret    

c0011016 <SysSpawn(regs*)>:
c0011016:	56                   	push   esi
c0011017:	53                   	push   ebx
c0011018:	50                   	push   eax
c0011019:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001101d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011020:	85 c0                	test   eax,eax
c0011022:	75 08                	jne    c001102c <SysSpawn(regs*)+0x16>
c0011024:	59                   	pop    ecx
c0011025:	31 c0                	xor    eax,eax
c0011027:	31 d2                	xor    edx,edx
c0011029:	5b                   	pop    ebx
c001102a:	5e                   	pop    esi
c001102b:	c3                   	ret    
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	68 24 07 00 00       	push   0x724
c0011034:	e8 80 67 ff ff       	call   c00077b9 <malloc>
c0011039:	83 c4 10             	add    esp,0x10
c001103c:	89 c6                	mov    esi,eax
c001103e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011041:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011044:	85 c0                	test   eax,eax
c0011046:	75 33                	jne    c001107b <SysSpawn(regs*)+0x65>
c0011048:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001104d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011050:	52                   	push   edx
c0011051:	50                   	push   eax
c0011052:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011055:	53                   	push   ebx
c0011056:	56                   	push   esi
c0011057:	e8 44 21 00 00       	call   c00131a0 <Process::Process(char const*, Process*, char**)>
c001105c:	83 c4 10             	add    esp,0x10
c001105f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011066:	75 bc                	jne    c0011024 <SysSpawn(regs*)+0xe>
c0011068:	83 ec 0c             	sub    esp,0xc
c001106b:	56                   	push   esi
c001106c:	e8 5b 26 00 00       	call   c00136cc <Process::createUserThread()>
c0011071:	8b 06                	mov    eax,DWORD PTR [esi]
c0011073:	83 c4 10             	add    esp,0x10
c0011076:	99                   	cdq    
c0011077:	59                   	pop    ecx
c0011078:	5b                   	pop    ebx
c0011079:	5e                   	pop    esi
c001107a:	c3                   	ret    
c001107b:	31 c0                	xor    eax,eax
c001107d:	eb d1                	jmp    c0011050 <SysSpawn(regs*)+0x3a>

c001107f <SysGetEnv(regs*)>:
c001107f:	57                   	push   edi
c0011080:	56                   	push   esi
c0011081:	53                   	push   ebx
c0011082:	83 ec 1c             	sub    esp,0x1c
c0011085:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011089:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001108e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011091:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011094:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011097:	50                   	push   eax
c0011098:	e8 1a f0 ff ff       	call   c00100b7 <Krnl::getProcessTotalEnvCount(Process*)>
c001109d:	83 c4 10             	add    esp,0x10
c00110a0:	39 c7                	cmp    edi,eax
c00110a2:	7c 14                	jl     c00110b8 <SysGetEnv(regs*)+0x39>
c00110a4:	85 f6                	test   esi,esi
c00110a6:	75 0b                	jne    c00110b3 <SysGetEnv(regs*)+0x34>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	31 c0                	xor    eax,eax
c00110ad:	5b                   	pop    ebx
c00110ae:	31 d2                	xor    edx,edx
c00110b0:	5e                   	pop    esi
c00110b1:	5f                   	pop    edi
c00110b2:	c3                   	ret    
c00110b3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110b6:	eb f0                	jmp    c00110a8 <SysGetEnv(regs*)+0x29>
c00110b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00110bc:	52                   	push   edx
c00110bd:	57                   	push   edi
c00110be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110c4:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00110c7:	51                   	push   ecx
c00110c8:	50                   	push   eax
c00110c9:	e8 09 f0 ff ff       	call   c00100d7 <Krnl::getProcessEnvPair(Process*, int)>
c00110ce:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110d9:	83 c4 0c             	add    esp,0xc
c00110dc:	85 db                	test   ebx,ebx
c00110de:	75 23                	jne    c0011103 <SysGetEnv(regs*)+0x84>
c00110e0:	83 ec 0c             	sub    esp,0xc
c00110e3:	50                   	push   eax
c00110e4:	e8 57 f4 fe ff       	call   c0000540 <strlen>
c00110e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110ec:	89 c3                	mov    ebx,eax
c00110ee:	e8 4d f4 fe ff       	call   c0000540 <strlen>
c00110f3:	31 d2                	xor    edx,edx
c00110f5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110f9:	83 c4 10             	add    esp,0x10
c00110fc:	83 c4 10             	add    esp,0x10
c00110ff:	5b                   	pop    ebx
c0011100:	5e                   	pop    esi
c0011101:	5f                   	pop    edi
c0011102:	c3                   	ret    
c0011103:	83 ec 08             	sub    esp,0x8
c0011106:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011109:	50                   	push   eax
c001110a:	56                   	push   esi
c001110b:	e8 f0 f4 fe ff       	call   c0000600 <strcpy>
c0011110:	58                   	pop    eax
c0011111:	5a                   	pop    edx
c0011112:	68 e6 e8 01 c0       	push   0xc001e8e6
c0011117:	56                   	push   esi
c0011118:	e8 a3 f6 fe ff       	call   c00007c0 <strcat>
c001111d:	59                   	pop    ecx
c001111e:	5b                   	pop    ebx
c001111f:	57                   	push   edi
c0011120:	56                   	push   esi
c0011121:	e8 9a f6 fe ff       	call   c00007c0 <strcat>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	e9 7a ff ff ff       	jmp    c00110a8 <SysGetEnv(regs*)+0x29>

c001112e <SysSetFatAttrib(regs*)>:
c001112e:	57                   	push   edi
c001112f:	56                   	push   esi
c0011130:	53                   	push   ebx
c0011131:	83 ec 1c             	sub    esp,0x1c
c0011134:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011138:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001113b:	68 14 01 00 00       	push   0x114
c0011140:	e8 74 66 ff ff       	call   c00077b9 <malloc>
c0011145:	83 c4 0c             	add    esp,0xc
c0011148:	89 c3                	mov    ebx,eax
c001114a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001114f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011152:	50                   	push   eax
c0011153:	57                   	push   edi
c0011154:	53                   	push   ebx
c0011155:	e8 98 99 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c001115a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001115d:	83 c4 0c             	add    esp,0xc
c0011160:	0f b6 d4             	movzx  edx,ah
c0011163:	25 ff 00 00 00       	and    eax,0xff
c0011168:	52                   	push   edx
c0011169:	50                   	push   eax
c001116a:	53                   	push   ebx
c001116b:	e8 54 9c ff ff       	call   c000adc4 <File::chfatattr(unsigned char, unsigned char)>
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	85 db                	test   ebx,ebx
c0011175:	74 14                	je     c001118b <SysSetFatAttrib(regs*)+0x5d>
c0011177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001117b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001117d:	83 ec 0c             	sub    esp,0xc
c0011180:	53                   	push   ebx
c0011181:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001118b:	85 c0                	test   eax,eax
c001118d:	0f 95 c0             	setne  al
c0011190:	31 d2                	xor    edx,edx
c0011192:	25 ff 00 00 00       	and    eax,0xff
c0011197:	f7 d8                	neg    eax
c0011199:	83 d2 00             	adc    edx,0x0
c001119c:	83 c4 10             	add    esp,0x10
c001119f:	f7 da                	neg    edx
c00111a1:	5b                   	pop    ebx
c00111a2:	5e                   	pop    esi
c00111a3:	5f                   	pop    edi
c00111a4:	c3                   	ret    

c00111a5 <SysPipe(regs*)>:
c00111a5:	57                   	push   edi
c00111a6:	56                   	push   esi
c00111a7:	53                   	push   ebx
c00111a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ac:	83 ec 0c             	sub    esp,0xc
c00111af:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00111b2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00111b5:	6a 20                	push   0x20
c00111b7:	e8 fd 65 ff ff       	call   c00077b9 <malloc>
c00111bc:	89 c3                	mov    ebx,eax
c00111be:	58                   	pop    eax
c00111bf:	5a                   	pop    edx
c00111c0:	68 00 50 00 00       	push   0x5000
c00111c5:	53                   	push   ebx
c00111c6:	e8 f3 6e ff ff       	call   c00080be <Pipe::Pipe(int)>
c00111cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111ce:	e8 67 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00111d3:	89 07                	mov    DWORD PTR [edi],eax
c00111d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111d8:	e8 5d 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00111dd:	83 c4 10             	add    esp,0x10
c00111e0:	89 06                	mov    DWORD PTR [esi],eax
c00111e2:	31 d2                	xor    edx,edx
c00111e4:	5b                   	pop    ebx
c00111e5:	31 c0                	xor    eax,eax
c00111e7:	5e                   	pop    esi
c00111e8:	5f                   	pop    edi
c00111e9:	c3                   	ret    

c00111ea <SysGetUnixTime(regs*)>:
c00111ea:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00111ef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111f9:	e9 04 a3 ff ff       	jmp    c000b502 <Clock::timeInSecondsLocal()>

c00111fe <string_ends_with(char const*, char const*)>:
c00111fe:	57                   	push   edi
c00111ff:	56                   	push   esi
c0011200:	53                   	push   ebx
c0011201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011205:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011209:	83 ec 0c             	sub    esp,0xc
c001120c:	53                   	push   ebx
c001120d:	e8 2e f3 fe ff       	call   c0000540 <strlen>
c0011212:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011215:	89 c6                	mov    esi,eax
c0011217:	e8 24 f3 fe ff       	call   c0000540 <strlen>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	39 c6                	cmp    esi,eax
c0011221:	7d 06                	jge    c0011229 <string_ends_with(char const*, char const*)+0x2b>
c0011223:	5b                   	pop    ebx
c0011224:	31 c0                	xor    eax,eax
c0011226:	5e                   	pop    esi
c0011227:	5f                   	pop    edi
c0011228:	c3                   	ret    
c0011229:	83 ec 08             	sub    esp,0x8
c001122c:	29 c6                	sub    esi,eax
c001122e:	57                   	push   edi
c001122f:	01 f3                	add    ebx,esi
c0011231:	53                   	push   ebx
c0011232:	e8 a9 f4 fe ff       	call   c00006e0 <strcmp>
c0011237:	83 c4 10             	add    esp,0x10
c001123a:	85 c0                	test   eax,eax
c001123c:	5b                   	pop    ebx
c001123d:	0f 94 c0             	sete   al
c0011240:	5e                   	pop    esi
c0011241:	25 ff 00 00 00       	and    eax,0xff
c0011246:	5f                   	pop    edi
c0011247:	c3                   	ret    

c0011248 <SysOpen(regs*)>:
c0011248:	56                   	push   esi
c0011249:	53                   	push   ebx
c001124a:	81 ec 04 01 00 00    	sub    esp,0x104
c0011250:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011257:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001125a:	85 d2                	test   edx,edx
c001125c:	0f 84 cc 01 00 00    	je     c001142e <SysOpen(regs*)+0x1e6>
c0011262:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011265:	85 c0                	test   eax,eax
c0011267:	0f 84 c1 01 00 00    	je     c001142e <SysOpen(regs*)+0x1e6>
c001126d:	83 ec 08             	sub    esp,0x8
c0011270:	50                   	push   eax
c0011271:	68 e8 e8 01 c0       	push   0xc001e8e8
c0011276:	e8 02 93 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001127b:	83 c4 0c             	add    esp,0xc
c001127e:	68 f5 e8 01 c0       	push   0xc001e8f5
c0011283:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011286:	50                   	push   eax
c0011287:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001128b:	56                   	push   esi
c001128c:	e8 b7 96 ff ff       	call   c000a948 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011291:	89 34 24             	mov    DWORD PTR [esp],esi
c0011294:	e8 a7 f2 fe ff       	call   c0000540 <strlen>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	48                   	dec    eax
c001129d:	74 1d                	je     c00112bc <SysOpen(regs*)+0x74>
c001129f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00112a2:	eb 0f                	jmp    c00112b3 <SysOpen(regs*)+0x6b>
c00112a4:	80 fa 3a             	cmp    dl,0x3a
c00112a7:	74 0f                	je     c00112b8 <SysOpen(regs*)+0x70>
c00112a9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00112ad:	48                   	dec    eax
c00112ae:	74 0c                	je     c00112bc <SysOpen(regs*)+0x74>
c00112b0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00112b3:	80 fa 2e             	cmp    dl,0x2e
c00112b6:	75 ec                	jne    c00112a4 <SysOpen(regs*)+0x5c>
c00112b8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00112bc:	83 ec 08             	sub    esp,0x8
c00112bf:	68 f9 e8 01 c0       	push   0xc001e8f9
c00112c4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112c7:	50                   	push   eax
c00112c8:	e8 31 ff ff ff       	call   c00111fe <string_ends_with(char const*, char const*)>
c00112cd:	83 c4 10             	add    esp,0x10
c00112d0:	85 c0                	test   eax,eax
c00112d2:	74 1d                	je     c00112f1 <SysOpen(regs*)+0xa9>
c00112d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112d7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112e4:	81 c4 04 01 00 00    	add    esp,0x104
c00112ea:	31 c0                	xor    eax,eax
c00112ec:	31 d2                	xor    edx,edx
c00112ee:	5b                   	pop    ebx
c00112ef:	5e                   	pop    esi
c00112f0:	c3                   	ret    
c00112f1:	83 ec 08             	sub    esp,0x8
c00112f4:	68 fe e8 01 c0       	push   0xc001e8fe
c00112f9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112fc:	50                   	push   eax
c00112fd:	e8 fc fe ff ff       	call   c00111fe <string_ends_with(char const*, char const*)>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	85 c0                	test   eax,eax
c0011307:	75 cb                	jne    c00112d4 <SysOpen(regs*)+0x8c>
c0011309:	83 ec 08             	sub    esp,0x8
c001130c:	68 fa e8 01 c0       	push   0xc001e8fa
c0011311:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011314:	50                   	push   eax
c0011315:	e8 c6 f3 fe ff       	call   c00006e0 <strcmp>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	85 c0                	test   eax,eax
c001131f:	74 b3                	je     c00112d4 <SysOpen(regs*)+0x8c>
c0011321:	83 ec 08             	sub    esp,0x8
c0011324:	68 f9 e8 01 c0       	push   0xc001e8f9
c0011329:	56                   	push   esi
c001132a:	e8 cf fe ff ff       	call   c00111fe <string_ends_with(char const*, char const*)>
c001132f:	83 c4 10             	add    esp,0x10
c0011332:	85 c0                	test   eax,eax
c0011334:	75 9e                	jne    c00112d4 <SysOpen(regs*)+0x8c>
c0011336:	83 ec 08             	sub    esp,0x8
c0011339:	68 03 e9 01 c0       	push   0xc001e903
c001133e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011341:	50                   	push   eax
c0011342:	e8 b7 fe ff ff       	call   c00111fe <string_ends_with(char const*, char const*)>
c0011347:	83 c4 10             	add    esp,0x10
c001134a:	85 c0                	test   eax,eax
c001134c:	0f 85 ef 00 00 00    	jne    c0011441 <SysOpen(regs*)+0x1f9>
c0011352:	83 ec 08             	sub    esp,0x8
c0011355:	68 08 e9 01 c0       	push   0xc001e908
c001135a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001135d:	50                   	push   eax
c001135e:	e8 9b fe ff ff       	call   c00111fe <string_ends_with(char const*, char const*)>
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	85 c0                	test   eax,eax
c0011368:	0f 85 d3 00 00 00    	jne    c0011441 <SysOpen(regs*)+0x1f9>
c001136e:	83 ec 08             	sub    esp,0x8
c0011371:	68 04 e9 01 c0       	push   0xc001e904
c0011376:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011379:	51                   	push   ecx
c001137a:	e8 61 f3 fe ff       	call   c00006e0 <strcmp>
c001137f:	83 c4 10             	add    esp,0x10
c0011382:	85 c0                	test   eax,eax
c0011384:	0f 84 b7 00 00 00    	je     c0011441 <SysOpen(regs*)+0x1f9>
c001138a:	83 ec 08             	sub    esp,0x8
c001138d:	68 03 e9 01 c0       	push   0xc001e903
c0011392:	56                   	push   esi
c0011393:	e8 66 fe ff ff       	call   c00111fe <string_ends_with(char const*, char const*)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	85 c0                	test   eax,eax
c001139d:	0f 85 9e 00 00 00    	jne    c0011441 <SysOpen(regs*)+0x1f9>
c00113a3:	83 ec 0c             	sub    esp,0xc
c00113a6:	68 14 01 00 00       	push   0x114
c00113ab:	e8 09 64 ff ff       	call   c00077b9 <malloc>
c00113b0:	83 c4 0c             	add    esp,0xc
c00113b3:	89 c6                	mov    esi,eax
c00113b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113bd:	50                   	push   eax
c00113be:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113c1:	52                   	push   edx
c00113c2:	56                   	push   esi
c00113c3:	e8 2a 97 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c00113c8:	83 c4 10             	add    esp,0x10
c00113cb:	85 f6                	test   esi,esi
c00113cd:	74 5f                	je     c001142e <SysOpen(regs*)+0x1e6>
c00113cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113d2:	89 d0                	mov    eax,edx
c00113d4:	25 ff 00 00 00       	and    eax,0xff
c00113d9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113dc:	89 d0                	mov    eax,edx
c00113de:	83 e0 01             	and    eax,0x1
c00113e1:	f6 c2 02             	test   dl,0x2
c00113e4:	74 03                	je     c00113e9 <SysOpen(regs*)+0x1a1>
c00113e6:	83 c8 02             	or     eax,0x2
c00113e9:	f6 c2 04             	test   dl,0x4
c00113ec:	74 03                	je     c00113f1 <SysOpen(regs*)+0x1a9>
c00113ee:	83 c8 04             	or     eax,0x4
c00113f1:	f6 c2 08             	test   dl,0x8
c00113f4:	74 03                	je     c00113f9 <SysOpen(regs*)+0x1b1>
c00113f6:	83 c8 0a             	or     eax,0xa
c00113f9:	83 e2 10             	and    edx,0x10
c00113fc:	74 03                	je     c0011401 <SysOpen(regs*)+0x1b9>
c00113fe:	83 c8 12             	or     eax,0x12
c0011401:	83 ec 08             	sub    esp,0x8
c0011404:	50                   	push   eax
c0011405:	56                   	push   esi
c0011406:	e8 a7 97 ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c001140b:	83 c4 10             	add    esp,0x10
c001140e:	85 c0                	test   eax,eax
c0011410:	75 1c                	jne    c001142e <SysOpen(regs*)+0x1e6>
c0011412:	83 ec 0c             	sub    esp,0xc
c0011415:	56                   	push   esi
c0011416:	e8 1f 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001141b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001141e:	83 c4 10             	add    esp,0x10
c0011421:	89 02                	mov    DWORD PTR [edx],eax
c0011423:	c1 f8 1f             	sar    eax,0x1f
c0011426:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011429:	e9 b6 fe ff ff       	jmp    c00112e4 <SysOpen(regs*)+0x9c>
c001142e:	81 c4 04 01 00 00    	add    esp,0x104
c0011434:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011439:	ba ff ff ff ff       	mov    edx,0xffffffff
c001143e:	5b                   	pop    ebx
c001143f:	5e                   	pop    esi
c0011440:	c3                   	ret    
c0011441:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011444:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001144a:	e9 8e fe ff ff       	jmp    c00112dd <SysOpen(regs*)+0x95>

c001144f <KeSystemCall(regs*, void*)>:
c001144f:	53                   	push   ebx
c0011450:	83 ec 10             	sub    esp,0x10
c0011453:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011457:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001145a:	68 0d e9 01 c0       	push   0xc001e90d
c001145f:	e8 19 91 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0011464:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	83 f8 32             	cmp    eax,0x32
c001146d:	77 16                	ja     c0011485 <KeSystemCall(regs*, void*)+0x36>
c001146f:	8b 14 85 a0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0560]
c0011476:	85 d2                	test   edx,edx
c0011478:	74 0b                	je     c0011485 <KeSystemCall(regs*, void*)+0x36>
c001147a:	83 ec 0c             	sub    esp,0xc
c001147d:	53                   	push   ebx
c001147e:	ff d2                	call   edx
c0011480:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011483:	eb 0d                	jmp    c0011492 <KeSystemCall(regs*, void*)+0x43>
c0011485:	52                   	push   edx
c0011486:	52                   	push   edx
c0011487:	50                   	push   eax
c0011488:	68 1d e9 01 c0       	push   0xc001e91d
c001148d:	e8 eb 90 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001149a:	31 d2                	xor    edx,edx
c001149c:	83 c4 08             	add    esp,0x8
c001149f:	5b                   	pop    ebx
c00114a0:	c3                   	ret    

c00114a1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00114a1:	55                   	push   ebp
c00114a2:	57                   	push   edi
c00114a3:	56                   	push   esi
c00114a4:	53                   	push   ebx
c00114a5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00114ab:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00114b2:	8a 1e                	mov    bl,BYTE PTR [esi]
c00114b4:	8d 6e 01             	lea    ebp,[esi+0x1]
c00114b7:	80 fb 40             	cmp    bl,0x40
c00114ba:	75 1b                	jne    c00114d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00114bc:	8a 16                	mov    dl,BYTE PTR [esi]
c00114be:	84 d2                	test   dl,dl
c00114c0:	0f 84 f1 00 00 00    	je     c00115b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114c6:	8d 46 01             	lea    eax,[esi+0x1]
c00114c9:	80 fa 3a             	cmp    dl,0x3a
c00114cc:	74 04                	je     c00114d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00114ce:	89 c6                	mov    esi,eax
c00114d0:	eb ea                	jmp    c00114bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00114d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00114d5:	89 c6                	mov    esi,eax
c00114d7:	50                   	push   eax
c00114d8:	6a 40                	push   0x40
c00114da:	6a 00                	push   0x0
c00114dc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114e0:	50                   	push   eax
c00114e1:	e8 ea ef fe ff       	call   c00004d0 <memset>
c00114e6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114ed:	31 c0                	xor    eax,eax
c00114ef:	83 c4 10             	add    esp,0x10
c00114f2:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114f4:	84 c9                	test   cl,cl
c00114f6:	0f 84 bb 00 00 00    	je     c00115b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114fc:	3d c7 00 00 00       	cmp    eax,0xc7
c0011501:	0f 8f b0 00 00 00    	jg     c00115b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011507:	80 f9 0a             	cmp    cl,0xa
c001150a:	0f 85 98 00 00 00    	jne    c00115a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011510:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011515:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011519:	a8 df                	test   al,0xdf
c001151b:	0f 94 c1             	sete   cl
c001151e:	3c 23                	cmp    al,0x23
c0011520:	0f 94 c2             	sete   dl
c0011523:	08 d1                	or     cl,dl
c0011525:	75 4a                	jne    c0011571 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011527:	8d 50 f7             	lea    edx,[eax-0x9]
c001152a:	80 fa 01             	cmp    dl,0x1
c001152d:	76 42                	jbe    c0011571 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001152f:	3c 5b                	cmp    al,0x5b
c0011531:	75 42                	jne    c0011575 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011533:	80 fb 40             	cmp    bl,0x40
c0011536:	75 39                	jne    c0011571 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001153f:	52                   	push   edx
c0011540:	e8 fb ef fe ff       	call   c0000540 <strlen>
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	83 f8 3f             	cmp    eax,0x3f
c001154b:	77 6a                	ja     c00115b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001154d:	50                   	push   eax
c001154e:	50                   	push   eax
c001154f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011553:	52                   	push   edx
c0011554:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011558:	52                   	push   edx
c0011559:	e8 a2 f0 fe ff       	call   c0000600 <strcpy>
c001155e:	58                   	pop    eax
c001155f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011563:	52                   	push   edx
c0011564:	e8 d7 ef fe ff       	call   c0000540 <strlen>
c0011569:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001156e:	83 c4 10             	add    esp,0x10
c0011571:	31 d2                	xor    edx,edx
c0011573:	eb 3a                	jmp    c00115af <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011575:	80 fb 40             	cmp    bl,0x40
c0011578:	74 06                	je     c0011580 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001157a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001157e:	eb 20                	jmp    c00115a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011580:	50                   	push   eax
c0011581:	50                   	push   eax
c0011582:	55                   	push   ebp
c0011583:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011587:	50                   	push   eax
c0011588:	e8 53 f1 fe ff       	call   c00006e0 <strcmp>
c001158d:	83 c4 10             	add    esp,0x10
c0011590:	85 c0                	test   eax,eax
c0011592:	75 dd                	jne    c0011571 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011594:	eb e4                	jmp    c001157a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011596:	8d 50 01             	lea    edx,[eax+0x1]
c0011599:	80 f9 3d             	cmp    cl,0x3d
c001159c:	74 1d                	je     c00115bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001159e:	89 d0                	mov    eax,edx
c00115a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00115a2:	84 c9                	test   cl,cl
c00115a4:	75 f0                	jne    c0011596 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00115a6:	eb 0f                	jmp    c00115b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115a8:	8d 50 01             	lea    edx,[eax+0x1]
c00115ab:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00115af:	47                   	inc    edi
c00115b0:	89 d0                	mov    eax,edx
c00115b2:	e9 3b ff ff ff       	jmp    c00114f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00115b7:	31 c0                	xor    eax,eax
c00115b9:	eb 33                	jmp    c00115ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00115bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00115c2:	50                   	push   eax
c00115c3:	50                   	push   eax
c00115c4:	8d 44 24 60          	lea    eax,[esp+0x60]
c00115c8:	50                   	push   eax
c00115c9:	56                   	push   esi
c00115ca:	e8 11 f1 fe ff       	call   c00006e0 <strcmp>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	85 c0                	test   eax,eax
c00115d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115d8:	75 97                	jne    c0011571 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115da:	51                   	push   ecx
c00115db:	51                   	push   ecx
c00115dc:	52                   	push   edx
c00115dd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115e4:	e8 17 f0 fe ff       	call   c0000600 <strcpy>
c00115e9:	83 c4 10             	add    esp,0x10
c00115ec:	b0 01                	mov    al,0x1
c00115ee:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115f4:	5b                   	pop    ebx
c00115f5:	5e                   	pop    esi
c00115f6:	5f                   	pop    edi
c00115f7:	5d                   	pop    ebp
c00115f8:	c3                   	ret    

c00115f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115f9:	57                   	push   edi
c00115fa:	56                   	push   esi
c00115fb:	53                   	push   ebx
c00115fc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011602:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011609:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011610:	53                   	push   ebx
c0011611:	e8 2a ef fe ff       	call   c0000540 <strlen>
c0011616:	89 34 24             	mov    DWORD PTR [esp],esi
c0011619:	89 c7                	mov    edi,eax
c001161b:	e8 20 ef fe ff       	call   c0000540 <strlen>
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011627:	3d ff 00 00 00       	cmp    eax,0xff
c001162c:	0f 87 d3 00 00 00    	ja     c0011705 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011632:	57                   	push   edi
c0011633:	57                   	push   edi
c0011634:	56                   	push   esi
c0011635:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011639:	56                   	push   esi
c001163a:	e8 c1 ef fe ff       	call   c0000600 <strcpy>
c001163f:	58                   	pop    eax
c0011640:	5a                   	pop    edx
c0011641:	68 da eb 01 c0       	push   0xc001ebda
c0011646:	56                   	push   esi
c0011647:	e8 74 f1 fe ff       	call   c00007c0 <strcat>
c001164c:	59                   	pop    ecx
c001164d:	5f                   	pop    edi
c001164e:	53                   	push   ebx
c001164f:	56                   	push   esi
c0011650:	e8 6b f1 fe ff       	call   c00007c0 <strcat>
c0011655:	58                   	pop    eax
c0011656:	5a                   	pop    edx
c0011657:	68 31 e9 01 c0       	push   0xc001e931
c001165c:	56                   	push   esi
c001165d:	e8 5e f1 fe ff       	call   c00007c0 <strcat>
c0011662:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011669:	e8 4b 61 ff ff       	call   c00077b9 <malloc>
c001166e:	83 c4 0c             	add    esp,0xc
c0011671:	89 c3                	mov    ebx,eax
c0011673:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0011679:	56                   	push   esi
c001167a:	50                   	push   eax
c001167b:	e8 72 94 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0011680:	83 c4 10             	add    esp,0x10
c0011683:	85 db                	test   ebx,ebx
c0011685:	74 7e                	je     c0011705 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011687:	51                   	push   ecx
c0011688:	51                   	push   ecx
c0011689:	6a 01                	push   0x1
c001168b:	53                   	push   ebx
c001168c:	e8 21 95 ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c0011691:	83 c4 10             	add    esp,0x10
c0011694:	85 c0                	test   eax,eax
c0011696:	74 08                	je     c00116a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011698:	83 ec 0c             	sub    esp,0xc
c001169b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001169d:	53                   	push   ebx
c001169e:	eb 5f                	jmp    c00116ff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00116a0:	52                   	push   edx
c00116a1:	8d 44 24 17          	lea    eax,[esp+0x17]
c00116a5:	50                   	push   eax
c00116a6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00116aa:	50                   	push   eax
c00116ab:	53                   	push   ebx
c00116ac:	e8 ad 97 ff ff       	call   c000ae5e <File::stat(unsigned long long*, bool*)>
c00116b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	89 c1                	mov    ecx,eax
c00116ba:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00116be:	74 31                	je     c00116f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	50                   	push   eax
c00116c4:	e8 f0 60 ff ff       	call   c00077b9 <malloc>
c00116c9:	89 c6                	mov    esi,eax
c00116cb:	58                   	pop    eax
c00116cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116ce:	8d 54 24 20          	lea    edx,[esp+0x20]
c00116d2:	52                   	push   edx
c00116d3:	56                   	push   esi
c00116d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116dc:	53                   	push   ebx
c00116dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116e0:	83 c4 20             	add    esp,0x20
c00116e3:	85 c0                	test   eax,eax
c00116e5:	75 0a                	jne    c00116f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116eb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116ef:	74 18                	je     c0011709 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116f1:	83 ec 0c             	sub    esp,0xc
c00116f4:	53                   	push   ebx
c00116f5:	e8 16 95 ff ff       	call   c000ac10 <File::close()>
c00116fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	31 c0                	xor    eax,eax
c0011707:	eb 3b                	jmp    c0011744 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011709:	83 ec 0c             	sub    esp,0xc
c001170c:	53                   	push   ebx
c001170d:	e8 fe 94 ff ff       	call   c000ac10 <File::close()>
c0011712:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011714:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011717:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001171a:	83 c4 0c             	add    esp,0xc
c001171d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011724:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001172b:	56                   	push   esi
c001172c:	e8 70 fd ff ff       	call   c00114a1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011731:	89 34 24             	mov    DWORD PTR [esp],esi
c0011734:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011738:	e8 8c 60 ff ff       	call   c00077c9 <free>
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011744:	81 c4 20 01 00 00    	add    esp,0x120
c001174a:	5b                   	pop    ebx
c001174b:	5e                   	pop    esi
c001174c:	5f                   	pop    edi
c001174d:	c3                   	ret    

c001174e <Reg::getLine(char*, char*, char*)>:
c001174e:	57                   	push   edi
c001174f:	56                   	push   esi
c0011750:	53                   	push   ebx
c0011751:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011755:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011759:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001175d:	57                   	push   edi
c001175e:	56                   	push   esi
c001175f:	53                   	push   ebx
c0011760:	68 36 e9 01 c0       	push   0xc001e936
c0011765:	e8 8f fe ff ff       	call   c00115f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001176a:	83 c4 10             	add    esp,0x10
c001176d:	84 c0                	test   al,al
c001176f:	75 10                	jne    c0011781 <Reg::getLine(char*, char*, char*)+0x33>
c0011771:	57                   	push   edi
c0011772:	56                   	push   esi
c0011773:	53                   	push   ebx
c0011774:	68 5b e9 01 c0       	push   0xc001e95b
c0011779:	e8 7b fe ff ff       	call   c00115f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001177e:	83 c4 10             	add    esp,0x10
c0011781:	5b                   	pop    ebx
c0011782:	5e                   	pop    esi
c0011783:	5f                   	pop    edi
c0011784:	c3                   	ret    

c0011785 <Reg::readInt(char*, char*, int*)>:
c0011785:	55                   	push   ebp
c0011786:	57                   	push   edi
c0011787:	56                   	push   esi
c0011788:	53                   	push   ebx
c0011789:	81 ec f0 00 00 00    	sub    esp,0xf0
c001178f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011793:	57                   	push   edi
c0011794:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001179b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00117a2:	e8 a7 ff ff ff       	call   c001174e <Reg::getLine(char*, char*, char*)>
c00117a7:	83 c4 10             	add    esp,0x10
c00117aa:	84 c0                	test   al,al
c00117ac:	0f 84 b3 00 00 00    	je     c0011865 <Reg::readInt(char*, char*, int*)+0xe0>
c00117b2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00117b6:	80 fa 2b             	cmp    dl,0x2b
c00117b9:	74 0c                	je     c00117c7 <Reg::readInt(char*, char*, int*)+0x42>
c00117bb:	80 fa 2d             	cmp    dl,0x2d
c00117be:	75 0e                	jne    c00117ce <Reg::readInt(char*, char*, int*)+0x49>
c00117c0:	ba 01 00 00 00       	mov    edx,0x1
c00117c5:	eb 0b                	jmp    c00117d2 <Reg::readInt(char*, char*, int*)+0x4d>
c00117c7:	ba 01 00 00 00       	mov    edx,0x1
c00117cc:	eb 02                	jmp    c00117d0 <Reg::readInt(char*, char*, int*)+0x4b>
c00117ce:	31 d2                	xor    edx,edx
c00117d0:	31 c0                	xor    eax,eax
c00117d2:	be 0a 00 00 00       	mov    esi,0xa
c00117d7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00117dc:	75 20                	jne    c00117fe <Reg::readInt(char*, char*, int*)+0x79>
c00117de:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117e2:	80 f9 78             	cmp    cl,0x78
c00117e5:	75 0a                	jne    c00117f1 <Reg::readInt(char*, char*, int*)+0x6c>
c00117e7:	83 c2 02             	add    edx,0x2
c00117ea:	be 10 00 00 00       	mov    esi,0x10
c00117ef:	eb 0d                	jmp    c00117fe <Reg::readInt(char*, char*, int*)+0x79>
c00117f1:	80 f9 62             	cmp    cl,0x62
c00117f4:	75 08                	jne    c00117fe <Reg::readInt(char*, char*, int*)+0x79>
c00117f6:	83 c2 02             	add    edx,0x2
c00117f9:	be 02 00 00 00       	mov    esi,0x2
c00117fe:	01 d7                	add    edi,edx
c0011800:	31 d2                	xor    edx,edx
c0011802:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011804:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011808:	80 fb 0d             	cmp    bl,0xd
c001180b:	0f 94 c3             	sete   bl
c001180e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011813:	0f 94 c1             	sete   cl
c0011816:	08 cb                	or     bl,cl
c0011818:	75 3a                	jne    c0011854 <Reg::readInt(char*, char*, int*)+0xcf>
c001181a:	0f af d6             	imul   edx,esi
c001181d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011822:	83 fe 10             	cmp    esi,0x10
c0011825:	75 26                	jne    c001184d <Reg::readInt(char*, char*, int*)+0xc8>
c0011827:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001182b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001182e:	89 e9                	mov    ecx,ebp
c0011830:	80 f9 05             	cmp    cl,0x5
c0011833:	77 06                	ja     c001183b <Reg::readInt(char*, char*, int*)+0xb6>
c0011835:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011839:	eb 16                	jmp    c0011851 <Reg::readInt(char*, char*, int*)+0xcc>
c001183b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001183f:	83 e9 61             	sub    ecx,0x61
c0011842:	80 f9 05             	cmp    cl,0x5
c0011845:	77 06                	ja     c001184d <Reg::readInt(char*, char*, int*)+0xc8>
c0011847:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001184b:	eb 04                	jmp    c0011851 <Reg::readInt(char*, char*, int*)+0xcc>
c001184d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011851:	47                   	inc    edi
c0011852:	eb ae                	jmp    c0011802 <Reg::readInt(char*, char*, int*)+0x7d>
c0011854:	84 c0                	test   al,al
c0011856:	74 02                	je     c001185a <Reg::readInt(char*, char*, int*)+0xd5>
c0011858:	f7 da                	neg    edx
c001185a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011861:	89 10                	mov    DWORD PTR [eax],edx
c0011863:	88 d8                	mov    al,bl
c0011865:	81 c4 ec 00 00 00    	add    esp,0xec
c001186b:	5b                   	pop    ebx
c001186c:	5e                   	pop    esi
c001186d:	5f                   	pop    edi
c001186e:	5d                   	pop    ebp
c001186f:	c3                   	ret    

c0011870 <Reg::readString(char*, char*, char*, int)>:
c0011870:	57                   	push   edi
c0011871:	56                   	push   esi
c0011872:	53                   	push   ebx
c0011873:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011879:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011880:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011884:	57                   	push   edi
c0011885:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001188c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011893:	e8 b6 fe ff ff       	call   c001174e <Reg::getLine(char*, char*, char*)>
c0011898:	83 c4 10             	add    esp,0x10
c001189b:	89 c6                	mov    esi,eax
c001189d:	84 c0                	test   al,al
c001189f:	74 44                	je     c00118e5 <Reg::readString(char*, char*, char*, int)+0x75>
c00118a1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00118a8:	31 c0                	xor    eax,eax
c00118aa:	4a                   	dec    edx
c00118ab:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00118ae:	84 c9                	test   cl,cl
c00118b0:	74 0f                	je     c00118c1 <Reg::readString(char*, char*, char*, int)+0x51>
c00118b2:	39 c2                	cmp    edx,eax
c00118b4:	7e 0b                	jle    c00118c1 <Reg::readString(char*, char*, char*, int)+0x51>
c00118b6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00118b9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00118be:	40                   	inc    eax
c00118bf:	eb ea                	jmp    c00118ab <Reg::readString(char*, char*, char*, int)+0x3b>
c00118c1:	83 ec 0c             	sub    esp,0xc
c00118c4:	53                   	push   ebx
c00118c5:	e8 76 ec fe ff       	call   c0000540 <strlen>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00118d2:	75 11                	jne    c00118e5 <Reg::readString(char*, char*, char*, int)+0x75>
c00118d4:	83 ec 0c             	sub    esp,0xc
c00118d7:	53                   	push   ebx
c00118d8:	e8 63 ec fe ff       	call   c0000540 <strlen>
c00118dd:	83 c4 10             	add    esp,0x10
c00118e0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118e5:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118eb:	89 f0                	mov    eax,esi
c00118ed:	5b                   	pop    ebx
c00118ee:	5e                   	pop    esi
c00118ef:	5f                   	pop    edi
c00118f0:	c3                   	ret    

c00118f1 <Reg::readBool(char*, char*, bool*)>:
c00118f1:	83 ec 20             	sub    esp,0x20
c00118f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118f8:	50                   	push   eax
c00118f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011901:	e8 7f fe ff ff       	call   c0011785 <Reg::readInt(char*, char*, int*)>
c0011906:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001190b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001190f:	0f 95 02             	setne  BYTE PTR [edx]
c0011912:	83 c4 2c             	add    esp,0x2c
c0011915:	c3                   	ret    

c0011916 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011916:	53                   	push   ebx
c0011917:	83 ec 1c             	sub    esp,0x1c
c001191a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001191e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011922:	50                   	push   eax
c0011923:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011927:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001192b:	e8 c1 ff ff ff       	call   c00118f1 <Reg::readBool(char*, char*, bool*)>
c0011930:	83 c4 10             	add    esp,0x10
c0011933:	84 c0                	test   al,al
c0011935:	74 04                	je     c001193b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011937:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001193b:	88 d8                	mov    al,bl
c001193d:	83 c4 18             	add    esp,0x18
c0011940:	5b                   	pop    ebx
c0011941:	c3                   	ret    

c0011942 <Reg::readIntWithDefault(char*, char*, int)>:
c0011942:	53                   	push   ebx
c0011943:	83 ec 1c             	sub    esp,0x1c
c0011946:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001194a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001194e:	50                   	push   eax
c001194f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011953:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011957:	e8 29 fe ff ff       	call   c0011785 <Reg::readInt(char*, char*, int*)>
c001195c:	83 c4 10             	add    esp,0x10
c001195f:	84 c0                	test   al,al
c0011961:	74 04                	je     c0011967 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011963:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011967:	89 d8                	mov    eax,ebx
c0011969:	83 c4 18             	add    esp,0x18
c001196c:	5b                   	pop    ebx
c001196d:	c3                   	ret    

c001196e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001196e:	57                   	push   edi
c001196f:	56                   	push   esi
c0011970:	56                   	push   esi
c0011971:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011975:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011979:	56                   	push   esi
c001197a:	57                   	push   edi
c001197b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001197f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011983:	e8 e8 fe ff ff       	call   c0011870 <Reg::readString(char*, char*, char*, int)>
c0011988:	83 c4 10             	add    esp,0x10
c001198b:	84 c0                	test   al,al
c001198d:	75 1a                	jne    c00119a9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001198f:	51                   	push   ecx
c0011990:	56                   	push   esi
c0011991:	6a 00                	push   0x0
c0011993:	57                   	push   edi
c0011994:	e8 37 eb fe ff       	call   c00004d0 <memset>
c0011999:	8d 4e ff             	lea    ecx,[esi-0x1]
c001199c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119a2:	83 c4 10             	add    esp,0x10
c00119a5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00119a9:	89 f8                	mov    eax,edi
c00119ab:	5a                   	pop    edx
c00119ac:	5e                   	pop    esi
c00119ad:	5f                   	pop    edi
c00119ae:	c3                   	ret    

c00119af <SysEject(regs*)>:
c00119af:	83 ec 0c             	sub    esp,0xc
c00119b2:	83 ca ff             	or     edx,0xffffffff
c00119b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00119bc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119c1:	83 e9 41             	sub    ecx,0x41
c00119c4:	83 f9 19             	cmp    ecx,0x19
c00119c7:	77 18                	ja     c00119e1 <SysEject(regs*)+0x32>
c00119c9:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c00119d0:	85 c9                	test   ecx,ecx
c00119d2:	74 0d                	je     c00119e1 <SysEject(regs*)+0x32>
c00119d4:	83 ec 0c             	sub    esp,0xc
c00119d7:	51                   	push   ecx
c00119d8:	e8 5d b2 ff ff       	call   c000cc3a <LogicalDisk::eject()>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	99                   	cdq    
c00119e1:	83 c4 0c             	add    esp,0xc
c00119e4:	c3                   	ret    

c00119e5 <SysExit(regs*)>:
c00119e5:	83 ec 18             	sub    esp,0x18
c00119e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119ec:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119ef:	e8 24 27 00 00       	call   c0014118 <terminateTask(int)>
c00119f4:	83 c8 ff             	or     eax,0xffffffff
c00119f7:	83 c4 1c             	add    esp,0x1c
c00119fa:	89 c2                	mov    edx,eax
c00119fc:	c3                   	ret    

c00119fd <SysGetCwd(regs*)>:
c00119fd:	83 ec 10             	sub    esp,0x10
c0011a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a04:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011a07:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a0f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a12:	e8 dd 8e ff ff       	call   c000a8f4 <Fs::getcwd(Process*, char*, int)>
c0011a17:	83 c4 1c             	add    esp,0x1c
c0011a1a:	99                   	cdq    
c0011a1b:	c3                   	ret    

c0011a1c <SysGetPID(regs*)>:
c0011a1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a21:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a26:	99                   	cdq    
c0011a27:	c3                   	ret    

c0011a28 <SysGetRAMData(regs*)>:
c0011a28:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c0011a2e:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c0011a38:	99                   	cdq    
c0011a39:	f7 f9                	idiv   ecx
c0011a3b:	c1 e0 18             	shl    eax,0x18
c0011a3e:	09 c8                	or     eax,ecx
c0011a40:	99                   	cdq    
c0011a41:	c3                   	ret    

c0011a42 <SysGetVGAPtr(regs*)>:
c0011a42:	55                   	push   ebp
c0011a43:	57                   	push   edi
c0011a44:	56                   	push   esi
c0011a45:	53                   	push   ebx
c0011a46:	83 ec 18             	sub    esp,0x18
c0011a49:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a4d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a50:	e8 c3 21 00 00       	call   c0013c18 <Thr::processFromPID(int)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	89 c1                	mov    ecx,eax
c0011a5a:	b8 01 00 00 00       	mov    eax,0x1
c0011a5f:	85 c9                	test   ecx,ecx
c0011a61:	74 57                	je     c0011aba <SysGetVGAPtr(regs*)+0x78>
c0011a63:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a69:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a6d:	74 0c                	je     c0011a7b <SysGetVGAPtr(regs*)+0x39>
c0011a6f:	83 ec 0c             	sub    esp,0xc
c0011a72:	55                   	push   ebp
c0011a73:	e8 7f 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a78:	83 c4 10             	add    esp,0x10
c0011a7b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a7e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a81:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a88:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a8e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a94:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a97:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a9a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011aa0:	50                   	push   eax
c0011aa1:	50                   	push   eax
c0011aa2:	68 76 e9 01 c0       	push   0xc001e976
c0011aa7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aaa:	05 a8 0f 00 00       	add    eax,0xfa8
c0011aaf:	50                   	push   eax
c0011ab0:	e8 4b eb fe ff       	call   c0000600 <strcpy>
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	31 c0                	xor    eax,eax
c0011aba:	83 c4 0c             	add    esp,0xc
c0011abd:	31 d2                	xor    edx,edx
c0011abf:	5b                   	pop    ebx
c0011ac0:	5e                   	pop    esi
c0011ac1:	5f                   	pop    edi
c0011ac2:	5d                   	pop    ebp
c0011ac3:	c3                   	ret    

c0011ac4 <SysLoadDLL(regs*)>:
c0011ac4:	56                   	push   esi
c0011ac5:	53                   	push   ebx
c0011ac6:	31 d2                	xor    edx,edx
c0011ac8:	51                   	push   ecx
c0011ac9:	b8 01 00 00 00       	mov    eax,0x1
c0011ace:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ad2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011ad6:	0f 84 8c 00 00 00    	je     c0011b68 <SysLoadDLL(regs*)+0xa4>
c0011adc:	83 ec 0c             	sub    esp,0xc
c0011adf:	68 14 01 00 00       	push   0x114
c0011ae4:	e8 d0 5c ff ff       	call   c00077b9 <malloc>
c0011ae9:	83 c4 0c             	add    esp,0xc
c0011aec:	89 c3                	mov    ebx,eax
c0011aee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011af6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011af9:	53                   	push   ebx
c0011afa:	e8 f3 8f ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0011aff:	83 c4 10             	add    esp,0x10
c0011b02:	31 d2                	xor    edx,edx
c0011b04:	b8 02 00 00 00       	mov    eax,0x2
c0011b09:	85 db                	test   ebx,ebx
c0011b0b:	74 5b                	je     c0011b68 <SysLoadDLL(regs*)+0xa4>
c0011b0d:	83 ec 0c             	sub    esp,0xc
c0011b10:	53                   	push   ebx
c0011b11:	e8 0a 93 ff ff       	call   c000ae20 <File::exists()>
c0011b16:	83 c4 10             	add    esp,0x10
c0011b19:	84 c0                	test   al,al
c0011b1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b1d:	75 11                	jne    c0011b30 <SysLoadDLL(regs*)+0x6c>
c0011b1f:	83 ec 0c             	sub    esp,0xc
c0011b22:	53                   	push   ebx
c0011b23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	b8 03 00 00 00       	mov    eax,0x3
c0011b2e:	eb 36                	jmp    c0011b66 <SysLoadDLL(regs*)+0xa2>
c0011b30:	83 ec 0c             	sub    esp,0xc
c0011b33:	53                   	push   ebx
c0011b34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b37:	58                   	pop    eax
c0011b38:	5a                   	pop    edx
c0011b39:	6a 00                	push   0x0
c0011b3b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b3e:	e8 86 12 00 00       	call   c0012dc9 <Thr::loadDLL(char const*, bool)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	89 c1                	mov    ecx,eax
c0011b48:	31 d2                	xor    edx,edx
c0011b4a:	b8 04 00 00 00       	mov    eax,0x4
c0011b4f:	85 c9                	test   ecx,ecx
c0011b51:	74 15                	je     c0011b68 <SysLoadDLL(regs*)+0xa4>
c0011b53:	53                   	push   ebx
c0011b54:	53                   	push   ebx
c0011b55:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011b5b:	51                   	push   ecx
c0011b5c:	e8 99 14 00 00       	call   c0012ffa <Thr::executeDLL(unsigned long, void*)>
c0011b61:	83 c4 10             	add    esp,0x10
c0011b64:	31 c0                	xor    eax,eax
c0011b66:	31 d2                	xor    edx,edx
c0011b68:	59                   	pop    ecx
c0011b69:	5b                   	pop    ebx
c0011b6a:	5e                   	pop    esi
c0011b6b:	c3                   	ret    

c0011b6c <SysRead(regs*)>:
c0011b6c:	57                   	push   edi
c0011b6d:	56                   	push   esi
c0011b6e:	53                   	push   ebx
c0011b6f:	83 ec 10             	sub    esp,0x10
c0011b72:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b76:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b79:	83 f8 02             	cmp    eax,0x2
c0011b7c:	77 10                	ja     c0011b8e <SysRead(regs*)+0x22>
c0011b7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b83:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b86:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b8c:	eb 0e                	jmp    c0011b9c <SysRead(regs*)+0x30>
c0011b8e:	83 ec 0c             	sub    esp,0xc
c0011b91:	50                   	push   eax
c0011b92:	e8 98 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b97:	83 c4 10             	add    esp,0x10
c0011b9a:	89 c1                	mov    ecx,eax
c0011b9c:	83 c8 ff             	or     eax,0xffffffff
c0011b9f:	85 c9                	test   ecx,ecx
c0011ba1:	89 c2                	mov    edx,eax
c0011ba3:	74 28                	je     c0011bcd <SysRead(regs*)+0x61>
c0011ba5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bad:	31 ff                	xor    edi,edi
c0011baf:	83 ec 0c             	sub    esp,0xc
c0011bb2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011bb4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011bb8:	52                   	push   edx
c0011bb9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011bbc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011bbf:	57                   	push   edi
c0011bc0:	56                   	push   esi
c0011bc1:	51                   	push   ecx
c0011bc2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011bc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc9:	83 c4 20             	add    esp,0x20
c0011bcc:	99                   	cdq    
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	5b                   	pop    ebx
c0011bd1:	5e                   	pop    esi
c0011bd2:	5f                   	pop    edi
c0011bd3:	c3                   	ret    

c0011bd4 <SysRegisterSignal(regs*)>:
c0011bd4:	83 ec 18             	sub    esp,0x18
c0011bd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bdb:	6a 00                	push   0x0
c0011bdd:	6a 00                	push   0x0
c0011bdf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011be2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011be5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bed:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bf3:	e8 bd e9 ff ff       	call   c00105b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bf8:	83 c4 2c             	add    esp,0x2c
c0011bfb:	99                   	cdq    
c0011bfc:	c3                   	ret    

c0011bfd <SysSbrk(regs*)>:
c0011bfd:	56                   	push   esi
c0011bfe:	53                   	push   ebx
c0011bff:	83 ec 0c             	sub    esp,0xc
c0011c02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c06:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011c09:	68 80 e9 01 c0       	push   0xc001e980
c0011c0e:	e8 6a 89 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0011c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c18:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011c1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c1e:	83 c4 10             	add    esp,0x10
c0011c21:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011c27:	85 db                	test   ebx,ebx
c0011c29:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011c2c:	74 02                	je     c0011c30 <SysSbrk(regs*)+0x33>
c0011c2e:	79 06                	jns    c0011c36 <SysSbrk(regs*)+0x39>
c0011c30:	89 f0                	mov    eax,esi
c0011c32:	31 d2                	xor    edx,edx
c0011c34:	eb 2a                	jmp    c0011c60 <SysSbrk(regs*)+0x63>
c0011c36:	83 c8 ff             	or     eax,0xffffffff
c0011c39:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c3f:	89 c2                	mov    edx,eax
c0011c41:	77 1d                	ja     c0011c60 <SysSbrk(regs*)+0x63>
c0011c43:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c49:	50                   	push   eax
c0011c4a:	c1 ea 0c             	shr    edx,0xc
c0011c4d:	68 07 0c 00 00       	push   0xc07
c0011c52:	52                   	push   edx
c0011c53:	51                   	push   ecx
c0011c54:	e8 17 7e ff ff       	call   c0009a70 <VAS::allocatePages(int, int)>
c0011c59:	89 f0                	mov    eax,esi
c0011c5b:	31 d2                	xor    edx,edx
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	59                   	pop    ecx
c0011c61:	5b                   	pop    ebx
c0011c62:	5e                   	pop    esi
c0011c63:	c3                   	ret    

c0011c64 <SysSetCwd(regs*)>:
c0011c64:	83 ec 14             	sub    esp,0x14
c0011c67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c6b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c73:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c76:	e8 44 92 ff ff       	call   c000aebf <Fs::setcwd(Process*, char*)>
c0011c7b:	83 c4 1c             	add    esp,0x1c
c0011c7e:	99                   	cdq    
c0011c7f:	c3                   	ret    

c0011c80 <SysSetTime(regs*)>:
c0011c80:	55                   	push   ebp
c0011c81:	31 c9                	xor    ecx,ecx
c0011c83:	57                   	push   edi
c0011c84:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c89:	56                   	push   esi
c0011c8a:	53                   	push   ebx
c0011c8b:	31 db                	xor    ebx,ebx
c0011c8d:	83 ec 10             	sub    esp,0x10
c0011c90:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c94:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c97:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c9a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c9d:	89 c2                	mov    edx,eax
c0011c9f:	66 81 ef 6c 07       	sub    di,0x76c
c0011ca4:	83 e2 1f             	and    edx,0x1f
c0011ca7:	c1 e7 10             	shl    edi,0x10
c0011caa:	42                   	inc    edx
c0011cab:	c1 e8 05             	shr    eax,0x5
c0011cae:	88 d1                	mov    cl,dl
c0011cb0:	31 d2                	xor    edx,edx
c0011cb2:	f7 f5                	div    ebp
c0011cb4:	89 dd                	mov    ebp,ebx
c0011cb6:	88 d5                	mov    ch,dl
c0011cb8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011cbe:	0f b7 c1             	movzx  eax,cx
c0011cc1:	31 d2                	xor    edx,edx
c0011cc3:	09 f8                	or     eax,edi
c0011cc5:	bf 3c 00 00 00       	mov    edi,0x3c
c0011cca:	89 c1                	mov    ecx,eax
c0011ccc:	89 f0                	mov    eax,esi
c0011cce:	f7 f7                	div    edi
c0011cd0:	c1 e2 10             	shl    edx,0x10
c0011cd3:	09 d5                	or     ebp,edx
c0011cd5:	31 d2                	xor    edx,edx
c0011cd7:	89 eb                	mov    ebx,ebp
c0011cd9:	f7 f7                	div    edi
c0011cdb:	bf 10 0e 00 00       	mov    edi,0xe10
c0011ce0:	88 d7                	mov    bh,dl
c0011ce2:	89 f0                	mov    eax,esi
c0011ce4:	31 d2                	xor    edx,edx
c0011ce6:	f7 f7                	div    edi
c0011ce8:	bf 18 00 00 00       	mov    edi,0x18
c0011ced:	31 d2                	xor    edx,edx
c0011cef:	f7 f7                	div    edi
c0011cf1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011cf6:	88 d3                	mov    bl,dl
c0011cf8:	53                   	push   ebx
c0011cf9:	51                   	push   ecx
c0011cfa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011d00:	e8 cb 99 ff ff       	call   c000b6d0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011d05:	83 c4 1c             	add    esp,0x1c
c0011d08:	83 f0 01             	xor    eax,0x1
c0011d0b:	5b                   	pop    ebx
c0011d0c:	0f b6 c0             	movzx  eax,al
c0011d0f:	5e                   	pop    esi
c0011d10:	31 d2                	xor    edx,edx
c0011d12:	5f                   	pop    edi
c0011d13:	5d                   	pop    ebp
c0011d14:	c3                   	ret    

c0011d15 <SysTimezone(regs*)>:
c0011d15:	53                   	push   ebx
c0011d16:	83 ec 08             	sub    esp,0x8
c0011d19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d1d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011d21:	75 17                	jne    c0011d3a <SysTimezone(regs*)+0x25>
c0011d23:	83 ec 0c             	sub    esp,0xc
c0011d26:	68 8c e9 01 c0       	push   0xc001e98c
c0011d2b:	e8 4d 88 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0011d30:	83 c8 ff             	or     eax,0xffffffff
c0011d33:	83 c4 10             	add    esp,0x10
c0011d36:	89 c2                	mov    edx,eax
c0011d38:	eb 20                	jmp    c0011d5a <SysTimezone(regs*)+0x45>
c0011d3a:	83 ec 0c             	sub    esp,0xc
c0011d3d:	68 a1 e9 01 c0       	push   0xc001e9a1
c0011d42:	e8 36 88 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0011d47:	58                   	pop    eax
c0011d48:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d4b:	e8 dc 96 ff ff       	call   c000b42c <User::loadClockSettings(int)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	b8 01 00 00 00       	mov    eax,0x1
c0011d58:	31 d2                	xor    edx,edx
c0011d5a:	83 c4 08             	add    esp,0x8
c0011d5d:	5b                   	pop    ebx
c0011d5e:	c3                   	ret    

c0011d5f <SysWrite(regs*)>:
c0011d5f:	57                   	push   edi
c0011d60:	56                   	push   esi
c0011d61:	53                   	push   ebx
c0011d62:	83 ec 10             	sub    esp,0x10
c0011d65:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d69:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d6c:	83 f8 02             	cmp    eax,0x2
c0011d6f:	77 10                	ja     c0011d81 <SysWrite(regs*)+0x22>
c0011d71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d79:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d7f:	eb 0e                	jmp    c0011d8f <SysWrite(regs*)+0x30>
c0011d81:	83 ec 0c             	sub    esp,0xc
c0011d84:	50                   	push   eax
c0011d85:	e8 a5 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d8a:	83 c4 10             	add    esp,0x10
c0011d8d:	89 c1                	mov    ecx,eax
c0011d8f:	83 c8 ff             	or     eax,0xffffffff
c0011d92:	85 c9                	test   ecx,ecx
c0011d94:	89 c2                	mov    edx,eax
c0011d96:	74 28                	je     c0011dc0 <SysWrite(regs*)+0x61>
c0011d98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011da0:	31 ff                	xor    edi,edi
c0011da2:	83 ec 0c             	sub    esp,0xc
c0011da5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011da7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011dab:	52                   	push   edx
c0011dac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011daf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011db2:	57                   	push   edi
c0011db3:	56                   	push   esi
c0011db4:	51                   	push   ecx
c0011db5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011db8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dbc:	83 c4 20             	add    esp,0x20
c0011dbf:	99                   	cdq    
c0011dc0:	83 c4 10             	add    esp,0x10
c0011dc3:	5b                   	pop    ebx
c0011dc4:	5e                   	pop    esi
c0011dc5:	5f                   	pop    edi
c0011dc6:	c3                   	ret    

c0011dc7 <SysWsbe(regs*)>:
c0011dc7:	57                   	push   edi
c0011dc8:	b9 0b 00 00 00       	mov    ecx,0xb
c0011dcd:	56                   	push   esi
c0011dce:	be e0 e9 01 c0       	mov    esi,0xc001e9e0
c0011dd3:	53                   	push   ebx
c0011dd4:	83 ec 30             	sub    esp,0x30
c0011dd7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011ddb:	fc                   	cld    
c0011ddc:	83 ec 0c             	sub    esp,0xc
c0011ddf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011de1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011de5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ded:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011df3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011df5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011df8:	57                   	push   edi
c0011df9:	e8 42 e7 fe ff       	call   c0000540 <strlen>
c0011dfe:	5a                   	pop    edx
c0011dff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011e03:	52                   	push   edx
c0011e04:	31 d2                	xor    edx,edx
c0011e06:	57                   	push   edi
c0011e07:	52                   	push   edx
c0011e08:	50                   	push   eax
c0011e09:	56                   	push   esi
c0011e0a:	ff d3                	call   ebx
c0011e0c:	83 c4 14             	add    esp,0x14
c0011e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011e13:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011e16:	e8 fd 22 00 00       	call   c0014118 <terminateTask(int)>
c0011e1b:	83 c4 40             	add    esp,0x40
c0011e1e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e23:	5b                   	pop    ebx
c0011e24:	31 d2                	xor    edx,edx
c0011e26:	5e                   	pop    esi
c0011e27:	5f                   	pop    edi
c0011e28:	c3                   	ret    

c0011e29 <SysYield(regs*)>:
c0011e29:	83 ec 0c             	sub    esp,0xc
c0011e2c:	fa                   	cli    
c0011e2d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011e33:	e8 bc 19 00 00       	call   c00137f4 <schedule()>
c0011e38:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011e3d:	48                   	dec    eax
c0011e3e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011e43:	75 01                	jne    c0011e46 <SysYield(regs*)+0x1d>
c0011e45:	fb                   	sti    
c0011e46:	31 c0                	xor    eax,eax
c0011e48:	31 d2                	xor    edx,edx
c0011e4a:	83 c4 0c             	add    esp,0xc
c0011e4d:	c3                   	ret    

c0011e4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e4e:	55                   	push   ebp
c0011e4f:	57                   	push   edi
c0011e50:	56                   	push   esi
c0011e51:	53                   	push   ebx
c0011e52:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e58:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e60:	0f 95 c2             	setne  dl
c0011e63:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e6b:	0f 94 c0             	sete   al
c0011e6e:	84 c2                	test   dl,al
c0011e70:	74 34                	je     c0011ea6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e72:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e7d:	74 27                	je     c0011ea6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e7f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e86:	05 00 10 00 00       	add    eax,0x1000
c0011e8b:	89 c1                	mov    ecx,eax
c0011e8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e92:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e98:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e9f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011ea6:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011ead:	83 ec 0c             	sub    esp,0xc
c0011eb0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011eb6:	6a 01                	push   0x1
c0011eb8:	e8 c8 73 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	89 c3                	mov    ebx,eax
c0011ec2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011ec8:	0f 86 25 01 00 00    	jbe    c0011ff3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011ece:	c1 ee 0c             	shr    esi,0xc
c0011ed1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ed8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011edc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ee4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011eeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011eef:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011ef6:	29 ef                	sub    edi,ebp
c0011ef8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011efc:	0f 83 f8 00 00 00    	jae    c0011ffa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011f02:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011f08:	76 05                	jbe    c0011f0f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011f0a:	bf 00 10 00 00       	mov    edi,0x1000
c0011f0f:	83 ec 0c             	sub    esp,0xc
c0011f12:	31 d2                	xor    edx,edx
c0011f14:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f1b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011f1d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f21:	50                   	push   eax
c0011f22:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011f26:	56                   	push   esi
c0011f27:	52                   	push   edx
c0011f28:	57                   	push   edi
c0011f29:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f33:	83 c4 20             	add    esp,0x20
c0011f36:	85 c0                	test   eax,eax
c0011f38:	75 06                	jne    c0011f40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f3a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f3e:	74 13                	je     c0011f53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f40:	83 ec 0c             	sub    esp,0xc
c0011f43:	53                   	push   ebx
c0011f44:	e8 30 76 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	31 c0                	xor    eax,eax
c0011f4e:	e9 7c 01 00 00       	jmp    c00120cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f53:	fa                   	cli    
c0011f54:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011f5a:	e8 36 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f5f:	6a 07                	push   0x7
c0011f61:	89 c7                	mov    edi,eax
c0011f63:	53                   	push   ebx
c0011f64:	50                   	push   eax
c0011f65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f6d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f73:	e8 f4 79 ff ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f78:	83 c4 0c             	add    esp,0xc
c0011f7b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f82:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f88:	6a 00                	push   0x0
c0011f8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f92:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f98:	e8 41 78 ff ff       	call   c00097de <VAS::mapOtherVASIn(bool, VAS*)>
c0011f9d:	58                   	pop    eax
c0011f9e:	5a                   	pop    edx
c0011f9f:	68 07 0c 00 00       	push   0xc07
c0011fa4:	55                   	push   ebp
c0011fa5:	57                   	push   edi
c0011fa6:	89 df                	mov    edi,ebx
c0011fa8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011faf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fb5:	6a 00                	push   0x0
c0011fb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fbf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fc5:	e8 62 7d ff ff       	call   c0009d2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011fca:	b9 00 10 00 00       	mov    ecx,0x1000
c0011fcf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fd1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011fd6:	83 c4 20             	add    esp,0x20
c0011fd9:	48                   	dec    eax
c0011fda:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011fdf:	85 c0                	test   eax,eax
c0011fe1:	75 01                	jne    c0011fe4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011fe3:	fb                   	sti    
c0011fe4:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011fea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011fee:	e9 f1 fe ff ff       	jmp    c0011ee4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011ff3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ffa:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012001:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012007:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001200d:	0f 86 ae 00 00 00    	jbe    c00120c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012013:	fa                   	cli    
c0012014:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001201a:	c1 ee 0c             	shr    esi,0xc
c001201d:	51                   	push   ecx
c001201e:	31 ff                	xor    edi,edi
c0012020:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012027:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001202d:	6a 00                	push   0x0
c001202f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012034:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012037:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001203d:	e8 9c 77 ff ff       	call   c00097de <VAS::mapOtherVASIn(bool, VAS*)>
c0012042:	83 c4 10             	add    esp,0x10
c0012045:	e8 4b 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c001204a:	47                   	inc    edi
c001204b:	6a 07                	push   0x7
c001204d:	53                   	push   ebx
c001204e:	50                   	push   eax
c001204f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012053:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012059:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001205c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012062:	e8 05 79 ff ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012067:	58                   	pop    eax
c0012068:	5a                   	pop    edx
c0012069:	68 07 0c 00 00       	push   0xc07
c001206e:	55                   	push   ebp
c001206f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012075:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012079:	50                   	push   eax
c001207a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012081:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012087:	6a 00                	push   0x0
c0012089:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001208e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012091:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012097:	e8 90 7c ff ff       	call   c0009d2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001209c:	83 c4 1c             	add    esp,0x1c
c001209f:	68 00 10 00 00       	push   0x1000
c00120a4:	6a 00                	push   0x0
c00120a6:	53                   	push   ebx
c00120a7:	e8 24 e4 fe ff       	call   c00004d0 <memset>
c00120ac:	83 c4 10             	add    esp,0x10
c00120af:	39 fe                	cmp    esi,edi
c00120b1:	77 92                	ja     c0012045 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00120b3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00120b8:	48                   	dec    eax
c00120b9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00120be:	75 01                	jne    c00120c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00120c0:	fb                   	sti    
c00120c1:	83 ec 0c             	sub    esp,0xc
c00120c4:	53                   	push   ebx
c00120c5:	e8 af 74 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	b0 01                	mov    al,0x1
c00120cf:	81 c4 2c 10 00 00    	add    esp,0x102c
c00120d5:	5b                   	pop    ebx
c00120d6:	5e                   	pop    esi
c00120d7:	5f                   	pop    edi
c00120d8:	5d                   	pop    ebp
c00120d9:	c3                   	ret    

c00120da <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00120da:	55                   	push   ebp
c00120db:	57                   	push   edi
c00120dc:	56                   	push   esi
c00120dd:	53                   	push   ebx
c00120de:	83 ec 48             	sub    esp,0x48
c00120e1:	68 14 01 00 00       	push   0x114
c00120e6:	e8 ce 56 ff ff       	call   c00077b9 <malloc>
c00120eb:	83 c4 0c             	add    esp,0xc
c00120ee:	89 c6                	mov    esi,eax
c00120f0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120f8:	50                   	push   eax
c00120f9:	e8 f4 89 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c00120fe:	58                   	pop    eax
c00120ff:	5a                   	pop    edx
c0012100:	6a 01                	push   0x1
c0012102:	56                   	push   esi
c0012103:	e8 aa 8a ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c0012108:	83 c4 10             	add    esp,0x10
c001210b:	85 c0                	test   eax,eax
c001210d:	0f 85 47 01 00 00    	jne    c001225a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012113:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001211b:	83 ec 0c             	sub    esp,0xc
c001211e:	6a 34                	push   0x34
c0012120:	e8 94 56 ff ff       	call   c00077b9 <malloc>
c0012125:	89 c3                	mov    ebx,eax
c0012127:	58                   	pop    eax
c0012128:	8b 06                	mov    eax,DWORD PTR [esi]
c001212a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001212e:	57                   	push   edi
c001212f:	53                   	push   ebx
c0012130:	6a 00                	push   0x0
c0012132:	6a 34                	push   0x34
c0012134:	56                   	push   esi
c0012135:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012138:	83 c4 20             	add    esp,0x20
c001213b:	85 c0                	test   eax,eax
c001213d:	0f 85 17 01 00 00    	jne    c001225a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012143:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012149:	0f 85 0b 01 00 00    	jne    c001225a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001214f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012152:	85 c0                	test   eax,eax
c0012154:	0f 84 00 01 00 00    	je     c001225a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001215a:	31 d2                	xor    edx,edx
c001215c:	55                   	push   ebp
c001215d:	52                   	push   edx
c001215e:	50                   	push   eax
c001215f:	56                   	push   esi
c0012160:	e8 0b 8b ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	85 c0                	test   eax,eax
c001216a:	0f 85 ea 00 00 00    	jne    c001225a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012170:	83 ec 0c             	sub    esp,0xc
c0012173:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012176:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001217a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001217e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012182:	0f af c2             	imul   eax,edx
c0012185:	50                   	push   eax
c0012186:	e8 2e 56 ff ff       	call   c00077b9 <malloc>
c001218b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001218d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012191:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012194:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012198:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001219c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00121a0:	0f af c2             	imul   eax,edx
c00121a3:	99                   	cdq    
c00121a4:	52                   	push   edx
c00121a5:	50                   	push   eax
c00121a6:	56                   	push   esi
c00121a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121aa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00121ad:	83 c4 20             	add    esp,0x20
c00121b0:	85 c0                	test   eax,eax
c00121b2:	0f 84 a2 00 00 00    	je     c001225a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121b8:	31 d2                	xor    edx,edx
c00121ba:	51                   	push   ecx
c00121bb:	52                   	push   edx
c00121bc:	50                   	push   eax
c00121bd:	56                   	push   esi
c00121be:	e8 ad 8a ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c00121c3:	83 c4 10             	add    esp,0x10
c00121c6:	85 c0                	test   eax,eax
c00121c8:	0f 85 8c 00 00 00    	jne    c001225a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121ce:	83 ec 0c             	sub    esp,0xc
c00121d1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121d5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121d9:	31 ed                	xor    ebp,ebp
c00121db:	0f af c2             	imul   eax,edx
c00121de:	50                   	push   eax
c00121df:	e8 d5 55 ff ff       	call   c00077b9 <malloc>
c00121e4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121f1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121f5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121f9:	0f af c2             	imul   eax,edx
c00121fc:	99                   	cdq    
c00121fd:	52                   	push   edx
c00121fe:	50                   	push   eax
c00121ff:	56                   	push   esi
c0012200:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012203:	83 c4 20             	add    esp,0x20
c0012206:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001220e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012212:	0f 86 80 00 00 00    	jbe    c0012298 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012218:	0f b7 fd             	movzx  edi,bp
c001221b:	c1 e7 05             	shl    edi,0x5
c001221e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012222:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012225:	75 6b                	jne    c0012292 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012227:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001222a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001222e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012231:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012235:	52                   	push   edx
c0012236:	31 d2                	xor    edx,edx
c0012238:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001223b:	52                   	push   edx
c001223c:	50                   	push   eax
c001223d:	56                   	push   esi
c001223e:	e8 2d 8a ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0012243:	83 c4 10             	add    esp,0x10
c0012246:	85 c0                	test   eax,eax
c0012248:	74 17                	je     c0012261 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001224a:	83 ec 0c             	sub    esp,0xc
c001224d:	68 0c ea 01 c0       	push   0xc001ea0c
c0012252:	e8 26 83 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0012257:	83 c4 10             	add    esp,0x10
c001225a:	31 c0                	xor    eax,eax
c001225c:	e9 87 00 00 00       	jmp    c00122e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012261:	83 ec 0c             	sub    esp,0xc
c0012264:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012267:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001226a:	50                   	push   eax
c001226b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001226f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012273:	56                   	push   esi
c0012274:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012278:	e8 d1 fb ff ff       	call   c0011e4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001227d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012281:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012285:	83 c4 20             	add    esp,0x20
c0012288:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001228c:	73 04                	jae    c0012292 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001228e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012292:	45                   	inc    ebp
c0012293:	e9 76 ff ff ff       	jmp    c001220e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012298:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001229c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122a4:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00122aa:	83 ec 0c             	sub    esp,0xc
c00122ad:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00122b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122b8:	05 00 10 00 00       	add    eax,0x1000
c00122bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00122c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122c4:	e8 00 55 ff ff       	call   c00077c9 <free>
c00122c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122cc:	e8 f8 54 ff ff       	call   c00077c9 <free>
c00122d1:	58                   	pop    eax
c00122d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122d6:	e8 ee 54 ff ff       	call   c00077c9 <free>
c00122db:	89 34 24             	mov    DWORD PTR [esp],esi
c00122de:	e8 2d 89 ff ff       	call   c000ac10 <File::close()>
c00122e3:	83 c4 10             	add    esp,0x10
c00122e6:	b0 01                	mov    al,0x1
c00122e8:	83 c4 3c             	add    esp,0x3c
c00122eb:	5b                   	pop    ebx
c00122ec:	5e                   	pop    esi
c00122ed:	5f                   	pop    edi
c00122ee:	5d                   	pop    ebp
c00122ef:	c3                   	ret    

c00122f0 <Thr::runtimeReferenceHelper()>:
c00122f0:	83 ec 18             	sub    esp,0x18
c00122f3:	68 14 ea 01 c0       	push   0xc001ea14
c00122f8:	e8 80 82 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c00122fd:	fa                   	cli    
c00122fe:	83 c4 10             	add    esp,0x10
c0012301:	eb fe                	jmp    c0012301 <Thr::runtimeReferenceHelper()+0x11>

c0012303 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012303:	57                   	push   edi
c0012304:	56                   	push   esi
c0012305:	53                   	push   ebx
c0012306:	31 db                	xor    ebx,ebx
c0012308:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c001230e:	7e 3c                	jle    c001234c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012310:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c0012317:	31 ff                	xor    edi,edi
c0012319:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c0012320:	7e 27                	jle    c0012349 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012322:	50                   	push   eax
c0012323:	50                   	push   eax
c0012324:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012328:	8b 06                	mov    eax,DWORD PTR [esi]
c001232a:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c0012331:	50                   	push   eax
c0012332:	e8 a9 e3 fe ff       	call   c00006e0 <strcmp>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	85 c0                	test   eax,eax
c001233c:	75 05                	jne    c0012343 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001233e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012341:	eb 0b                	jmp    c001234e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012343:	83 c6 10             	add    esi,0x10
c0012346:	47                   	inc    edi
c0012347:	eb d0                	jmp    c0012319 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012349:	43                   	inc    ebx
c001234a:	eb bc                	jmp    c0012308 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001234c:	31 c0                	xor    eax,eax
c001234e:	5b                   	pop    ebx
c001234f:	5e                   	pop    esi
c0012350:	5f                   	pop    edi
c0012351:	c3                   	ret    

c0012352 <Thr::loadKernelSymbolTable(char const*)>:
c0012352:	55                   	push   ebp
c0012353:	57                   	push   edi
c0012354:	56                   	push   esi
c0012355:	53                   	push   ebx
c0012356:	83 ec 68             	sub    esp,0x68
c0012359:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c001235f:	68 14 01 00 00       	push   0x114
c0012364:	e8 50 54 ff ff       	call   c00077b9 <malloc>
c0012369:	83 c4 0c             	add    esp,0xc
c001236c:	89 c3                	mov    ebx,eax
c001236e:	56                   	push   esi
c001236f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012373:	50                   	push   eax
c0012374:	e8 79 87 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0012379:	5e                   	pop    esi
c001237a:	5f                   	pop    edi
c001237b:	6a 01                	push   0x1
c001237d:	53                   	push   ebx
c001237e:	e8 2f 88 ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c0012383:	83 c4 10             	add    esp,0x10
c0012386:	85 c0                	test   eax,eax
c0012388:	74 0a                	je     c0012394 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001238a:	83 ec 0c             	sub    esp,0xc
c001238d:	68 36 ea 01 c0       	push   0xc001ea36
c0012392:	eb 34                	jmp    c00123c8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012394:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001239c:	83 ec 0c             	sub    esp,0xc
c001239f:	6a 34                	push   0x34
c00123a1:	e8 13 54 ff ff       	call   c00077b9 <malloc>
c00123a6:	59                   	pop    ecx
c00123a7:	89 c7                	mov    edi,eax
c00123a9:	8d 74 24 34          	lea    esi,[esp+0x34]
c00123ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123af:	56                   	push   esi
c00123b0:	57                   	push   edi
c00123b1:	6a 00                	push   0x0
c00123b3:	6a 34                	push   0x34
c00123b5:	53                   	push   ebx
c00123b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123b9:	83 c4 20             	add    esp,0x20
c00123bc:	85 c0                	test   eax,eax
c00123be:	74 17                	je     c00123d7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00123c0:	83 ec 0c             	sub    esp,0xc
c00123c3:	68 4d ea 01 c0       	push   0xc001ea4d
c00123c8:	e8 32 de ff ff       	call   c00101ff <KePanic(char const*)>
c00123cd:	83 c4 10             	add    esp,0x10
c00123d0:	31 c0                	xor    eax,eax
c00123d2:	e9 31 02 00 00       	jmp    c0012608 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00123d7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123dd:	75 e1                	jne    c00123c0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123df:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123e2:	85 c0                	test   eax,eax
c00123e4:	74 da                	je     c00123c0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123e6:	52                   	push   edx
c00123e7:	31 d2                	xor    edx,edx
c00123e9:	52                   	push   edx
c00123ea:	50                   	push   eax
c00123eb:	53                   	push   ebx
c00123ec:	e8 7f 88 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c00123f1:	83 c4 10             	add    esp,0x10
c00123f4:	85 c0                	test   eax,eax
c00123f6:	75 c8                	jne    c00123c0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123f8:	83 ec 0c             	sub    esp,0xc
c00123fb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012403:	31 ed                	xor    ebp,ebp
c0012405:	0f af c2             	imul   eax,edx
c0012408:	50                   	push   eax
c0012409:	e8 ab 53 ff ff       	call   c00077b9 <malloc>
c001240e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012410:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012414:	89 34 24             	mov    DWORD PTR [esp],esi
c0012417:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001241b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001241f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012423:	0f af c2             	imul   eax,edx
c0012426:	99                   	cdq    
c0012427:	52                   	push   edx
c0012428:	50                   	push   eax
c0012429:	53                   	push   ebx
c001242a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001242d:	83 c4 20             	add    esp,0x20
c0012430:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012438:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012440:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012448:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012450:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012454:	0f 86 aa 00 00 00    	jbe    c0012504 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001245a:	0f b7 f5             	movzx  esi,bp
c001245d:	6b f6 28             	imul   esi,esi,0x28
c0012460:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012464:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012467:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001246b:	50                   	push   eax
c001246c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012470:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012474:	8b 16                	mov    edx,DWORD PTR [esi]
c0012476:	6b c0 28             	imul   eax,eax,0x28
c0012479:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001247d:	89 d0                	mov    eax,edx
c001247f:	31 d2                	xor    edx,edx
c0012481:	52                   	push   edx
c0012482:	50                   	push   eax
c0012483:	53                   	push   ebx
c0012484:	e8 e7 87 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0012489:	83 c4 0c             	add    esp,0xc
c001248c:	6a 20                	push   0x20
c001248e:	6a 00                	push   0x0
c0012490:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012494:	52                   	push   edx
c0012495:	e8 36 e0 fe ff       	call   c00004d0 <memset>
c001249a:	58                   	pop    eax
c001249b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001249d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00124a1:	51                   	push   ecx
c00124a2:	8d 54 24 40          	lea    edx,[esp+0x40]
c00124a6:	52                   	push   edx
c00124a7:	6a 00                	push   0x0
c00124a9:	6a 1f                	push   0x1f
c00124ab:	53                   	push   ebx
c00124ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124af:	83 c4 18             	add    esp,0x18
c00124b2:	68 64 ea 01 c0       	push   0xc001ea64
c00124b7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00124bb:	52                   	push   edx
c00124bc:	e8 1f e2 fe ff       	call   c00006e0 <strcmp>
c00124c1:	83 c4 10             	add    esp,0x10
c00124c4:	85 c0                	test   eax,eax
c00124c6:	75 0f                	jne    c00124d7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00124c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124d7:	50                   	push   eax
c00124d8:	50                   	push   eax
c00124d9:	68 6c ea 01 c0       	push   0xc001ea6c
c00124de:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124e2:	50                   	push   eax
c00124e3:	e8 f8 e1 fe ff       	call   c00006e0 <strcmp>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	85 c0                	test   eax,eax
c00124ed:	75 0f                	jne    c00124fe <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124ef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124fe:	45                   	inc    ebp
c00124ff:	e9 4c ff ff ff       	jmp    c0012450 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012504:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012509:	75 10                	jne    c001251b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001250b:	83 ec 0c             	sub    esp,0xc
c001250e:	68 74 ea 01 c0       	push   0xc001ea74
c0012513:	e8 e7 dc ff ff       	call   c00101ff <KePanic(char const*)>
c0012518:	83 c4 10             	add    esp,0x10
c001251b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012520:	75 10                	jne    c0012532 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012522:	83 ec 0c             	sub    esp,0xc
c0012525:	68 74 ea 01 c0       	push   0xc001ea74
c001252a:	e8 d0 dc ff ff       	call   c00101ff <KePanic(char const*)>
c001252f:	83 c4 10             	add    esp,0x10
c0012532:	31 d2                	xor    edx,edx
c0012534:	50                   	push   eax
c0012535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012539:	52                   	push   edx
c001253a:	50                   	push   eax
c001253b:	53                   	push   ebx
c001253c:	e8 2f 87 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0012541:	5a                   	pop    edx
c0012542:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012546:	e8 6e 52 ff ff       	call   c00077b9 <malloc>
c001254b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001254f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012553:	31 c9                	xor    ecx,ecx
c0012555:	5e                   	pop    esi
c0012556:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012558:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001255c:	55                   	push   ebp
c001255d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012561:	51                   	push   ecx
c0012562:	52                   	push   edx
c0012563:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012567:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001256b:	53                   	push   ebx
c001256c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001256f:	83 c4 14             	add    esp,0x14
c0012572:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012576:	e8 3e 52 ff ff       	call   c00077b9 <malloc>
c001257b:	89 c6                	mov    esi,eax
c001257d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001257f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012582:	56                   	push   esi
c0012583:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012587:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001258b:	51                   	push   ecx
c001258c:	52                   	push   edx
c001258d:	53                   	push   ebx
c001258e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012591:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012595:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c001259b:	83 c4 1c             	add    esp,0x1c
c001259e:	c1 e8 04             	shr    eax,0x4
c00125a1:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c00125a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125ac:	31 d2                	xor    edx,edx
c00125ae:	52                   	push   edx
c00125af:	50                   	push   eax
c00125b0:	53                   	push   ebx
c00125b1:	e8 ba 86 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c00125b6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00125b8:	31 d2                	xor    edx,edx
c00125ba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125bd:	56                   	push   esi
c00125be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125c2:	52                   	push   edx
c00125c3:	50                   	push   eax
c00125c4:	53                   	push   ebx
c00125c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125c8:	83 c4 14             	add    esp,0x14
c00125cb:	53                   	push   ebx
c00125cc:	e8 3f 86 ff ff       	call   c000ac10 <File::close()>
c00125d1:	5d                   	pop    ebp
c00125d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125d6:	e8 ee 51 ff ff       	call   c00077c9 <free>
c00125db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125de:	e8 e6 51 ff ff       	call   c00077c9 <free>
c00125e3:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c00125e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125ec:	8d 50 01             	lea    edx,[eax+0x1]
c00125ef:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c00125f6:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c00125fd:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c0012603:	83 c4 10             	add    esp,0x10
c0012606:	b0 01                	mov    al,0x1
c0012608:	83 c4 5c             	add    esp,0x5c
c001260b:	5b                   	pop    ebx
c001260c:	5e                   	pop    esi
c001260d:	5f                   	pop    edi
c001260e:	5d                   	pop    ebp
c001260f:	c3                   	ret    

c0012610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012610:	55                   	push   ebp
c0012611:	57                   	push   edi
c0012612:	56                   	push   esi
c0012613:	53                   	push   ebx
c0012614:	81 ec 68 03 00 00    	sub    esp,0x368
c001261a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012621:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c0012627:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001262b:	68 14 01 00 00       	push   0x114
c0012630:	e8 84 51 ff ff       	call   c00077b9 <malloc>
c0012635:	83 c4 0c             	add    esp,0xc
c0012638:	89 c5                	mov    ebp,eax
c001263a:	53                   	push   ebx
c001263b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012642:	50                   	push   eax
c0012643:	e8 aa 84 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0012648:	5e                   	pop    esi
c0012649:	5f                   	pop    edi
c001264a:	6a 01                	push   0x1
c001264c:	55                   	push   ebp
c001264d:	e8 60 85 ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	85 c0                	test   eax,eax
c0012657:	0f 85 a7 06 00 00    	jne    c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001265d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012665:	83 ec 0c             	sub    esp,0xc
c0012668:	6a 34                	push   0x34
c001266a:	e8 4a 51 ff ff       	call   c00077b9 <malloc>
c001266f:	5b                   	pop    ebx
c0012670:	89 c7                	mov    edi,eax
c0012672:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012676:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012679:	53                   	push   ebx
c001267a:	57                   	push   edi
c001267b:	6a 00                	push   0x0
c001267d:	6a 34                	push   0x34
c001267f:	55                   	push   ebp
c0012680:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012683:	83 c4 20             	add    esp,0x20
c0012686:	85 c0                	test   eax,eax
c0012688:	0f 85 76 06 00 00    	jne    c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001268e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012694:	0f 85 6a 06 00 00    	jne    c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001269a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001269d:	85 c0                	test   eax,eax
c001269f:	0f 84 5f 06 00 00    	je     c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126a5:	31 d2                	xor    edx,edx
c00126a7:	51                   	push   ecx
c00126a8:	52                   	push   edx
c00126a9:	50                   	push   eax
c00126aa:	55                   	push   ebp
c00126ab:	e8 c0 85 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c00126b0:	83 c4 10             	add    esp,0x10
c00126b3:	85 c0                	test   eax,eax
c00126b5:	0f 85 49 06 00 00    	jne    c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126bb:	83 ec 0c             	sub    esp,0xc
c00126be:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00126c1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00126c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126cd:	0f af c2             	imul   eax,edx
c00126d0:	50                   	push   eax
c00126d1:	e8 e3 50 ff ff       	call   c00077b9 <malloc>
c00126d6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126e4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126e8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126ec:	0f af c2             	imul   eax,edx
c00126ef:	99                   	cdq    
c00126f0:	52                   	push   edx
c00126f1:	50                   	push   eax
c00126f2:	55                   	push   ebp
c00126f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126f6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126f9:	83 c4 20             	add    esp,0x20
c00126fc:	85 c0                	test   eax,eax
c00126fe:	0f 84 00 06 00 00    	je     c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012704:	52                   	push   edx
c0012705:	31 d2                	xor    edx,edx
c0012707:	52                   	push   edx
c0012708:	50                   	push   eax
c0012709:	55                   	push   ebp
c001270a:	e8 61 85 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	85 c0                	test   eax,eax
c0012714:	0f 85 ea 05 00 00    	jne    c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001271a:	83 ec 0c             	sub    esp,0xc
c001271d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012721:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012725:	31 f6                	xor    esi,esi
c0012727:	0f af c2             	imul   eax,edx
c001272a:	50                   	push   eax
c001272b:	e8 89 50 ff ff       	call   c00077b9 <malloc>
c0012730:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012733:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012737:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001273a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001273e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012742:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012746:	0f af c2             	imul   eax,edx
c0012749:	99                   	cdq    
c001274a:	52                   	push   edx
c001274b:	50                   	push   eax
c001274c:	55                   	push   ebp
c001274d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012750:	83 c4 20             	add    esp,0x20
c0012753:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012757:	0f 86 8a 00 00 00    	jbe    c00127e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001275d:	0f b7 de             	movzx  ebx,si
c0012760:	c1 e3 05             	shl    ebx,0x5
c0012763:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012767:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001276a:	75 75                	jne    c00127e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001276c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001276f:	31 d2                	xor    edx,edx
c0012771:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012775:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012778:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001277c:	50                   	push   eax
c001277d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012780:	52                   	push   edx
c0012781:	50                   	push   eax
c0012782:	55                   	push   ebp
c0012783:	e8 e8 84 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0012788:	83 c4 10             	add    esp,0x10
c001278b:	85 c0                	test   eax,eax
c001278d:	0f 85 71 05 00 00    	jne    c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012793:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001279a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001279d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00127a1:	31 d2                	xor    edx,edx
c00127a3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00127a7:	83 ec 0c             	sub    esp,0xc
c00127aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127ae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00127b5:	50                   	push   eax
c00127b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127be:	52                   	push   edx
c00127bf:	50                   	push   eax
c00127c0:	55                   	push   ebp
c00127c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127c4:	83 c4 1c             	add    esp,0x1c
c00127c7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00127ca:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00127cd:	50                   	push   eax
c00127ce:	6a 00                	push   0x0
c00127d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00127d8:	50                   	push   eax
c00127d9:	e8 f2 dc fe ff       	call   c00004d0 <memset>
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	46                   	inc    esi
c00127e2:	e9 6c ff ff ff       	jmp    c0012753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127e7:	53                   	push   ebx
c00127e8:	31 db                	xor    ebx,ebx
c00127ea:	68 00 01 00 00       	push   0x100
c00127ef:	6a 00                	push   0x0
c00127f1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127f5:	50                   	push   eax
c00127f6:	e8 d5 dc fe ff       	call   c00004d0 <memset>
c00127fb:	83 c4 0c             	add    esp,0xc
c00127fe:	68 00 01 00 00       	push   0x100
c0012803:	6a 00                	push   0x0
c0012805:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001280c:	50                   	push   eax
c001280d:	e8 be dc fe ff       	call   c00004d0 <memset>
c0012812:	83 c4 10             	add    esp,0x10
c0012815:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001281d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012825:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001282d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012835:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001283d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012841:	0f 86 30 01 00 00    	jbe    c0012977 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012847:	0f b7 f3             	movzx  esi,bx
c001284a:	6b f6 28             	imul   esi,esi,0x28
c001284d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012851:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012854:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012858:	52                   	push   edx
c0012859:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001285d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012861:	8b 06                	mov    eax,DWORD PTR [esi]
c0012863:	6b d2 28             	imul   edx,edx,0x28
c0012866:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001286a:	31 d2                	xor    edx,edx
c001286c:	52                   	push   edx
c001286d:	50                   	push   eax
c001286e:	55                   	push   ebp
c001286f:	e8 fc 83 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0012874:	83 c4 0c             	add    esp,0xc
c0012877:	6a 20                	push   0x20
c0012879:	6a 00                	push   0x0
c001287b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012882:	51                   	push   ecx
c0012883:	e8 48 dc fe ff       	call   c00004d0 <memset>
c0012888:	59                   	pop    ecx
c0012889:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001288c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012890:	52                   	push   edx
c0012891:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012898:	51                   	push   ecx
c0012899:	6a 00                	push   0x0
c001289b:	6a 1f                	push   0x1f
c001289d:	55                   	push   ebp
c001289e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00128a1:	83 c4 1c             	add    esp,0x1c
c00128a4:	6a 09                	push   0x9
c00128a6:	68 8e ea 01 c0       	push   0xc001ea8e
c00128ab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00128b2:	51                   	push   ecx
c00128b3:	e8 d8 da fe ff       	call   c0000390 <memcmp>
c00128b8:	83 c4 10             	add    esp,0x10
c00128bb:	85 c0                	test   eax,eax
c00128bd:	75 21                	jne    c00128e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00128bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128c7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128d2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128d9:	89 d0                	mov    eax,edx
c00128db:	40                   	inc    eax
c00128dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e0:	50                   	push   eax
c00128e1:	6a 09                	push   0x9
c00128e3:	68 98 ea 01 c0       	push   0xc001ea98
c00128e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128ef:	50                   	push   eax
c00128f0:	e8 9b da fe ff       	call   c0000390 <memcmp>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	85 c0                	test   eax,eax
c00128fa:	75 21                	jne    c001291d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012900:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012904:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012908:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001290c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001290f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012916:	89 d0                	mov    eax,edx
c0012918:	40                   	inc    eax
c0012919:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001291d:	50                   	push   eax
c001291e:	50                   	push   eax
c001291f:	68 64 ea 01 c0       	push   0xc001ea64
c0012924:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001292b:	50                   	push   eax
c001292c:	e8 af dd fe ff       	call   c00006e0 <strcmp>
c0012931:	83 c4 10             	add    esp,0x10
c0012934:	85 c0                	test   eax,eax
c0012936:	75 0f                	jne    c0012947 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012938:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001293b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001293f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012943:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012947:	50                   	push   eax
c0012948:	50                   	push   eax
c0012949:	68 6c ea 01 c0       	push   0xc001ea6c
c001294e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012955:	50                   	push   eax
c0012956:	e8 85 dd fe ff       	call   c00006e0 <strcmp>
c001295b:	83 c4 10             	add    esp,0x10
c001295e:	85 c0                	test   eax,eax
c0012960:	75 0f                	jne    c0012971 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012962:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012965:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001296d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012971:	43                   	inc    ebx
c0012972:	e9 c6 fe ff ff       	jmp    c001283d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012977:	31 d2                	xor    edx,edx
c0012979:	50                   	push   eax
c001297a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001297e:	52                   	push   edx
c001297f:	50                   	push   eax
c0012980:	55                   	push   ebp
c0012981:	e8 ea 82 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0012986:	58                   	pop    eax
c0012987:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001298b:	e8 29 4e ff ff       	call   c00077b9 <malloc>
c0012990:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012993:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012997:	31 d2                	xor    edx,edx
c0012999:	58                   	pop    eax
c001299a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001299e:	53                   	push   ebx
c001299f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00129a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129a7:	52                   	push   edx
c00129a8:	50                   	push   eax
c00129a9:	55                   	push   ebp
c00129aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129ad:	83 c4 14             	add    esp,0x14
c00129b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129b4:	e8 00 4e ff ff       	call   c00077b9 <malloc>
c00129b9:	31 d2                	xor    edx,edx
c00129bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00129bf:	83 c4 0c             	add    esp,0xc
c00129c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129c6:	52                   	push   edx
c00129c7:	50                   	push   eax
c00129c8:	55                   	push   ebp
c00129c9:	e8 a2 82 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c00129ce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129d1:	31 d2                	xor    edx,edx
c00129d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129de:	52                   	push   edx
c00129df:	50                   	push   eax
c00129e0:	55                   	push   ebp
c00129e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129e4:	83 c4 20             	add    esp,0x20
c00129e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129f3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129f7:	0f 84 0b 03 00 00    	je     c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129fd:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012a04:	31 d2                	xor    edx,edx
c0012a06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a0a:	c1 e8 03             	shr    eax,0x3
c0012a0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012a11:	51                   	push   ecx
c0012a12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a16:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012a1a:	52                   	push   edx
c0012a1b:	50                   	push   eax
c0012a1c:	55                   	push   ebp
c0012a1d:	e8 4e 82 ff ff       	call   c000ac70 <File::seek(unsigned long long)>
c0012a22:	5b                   	pop    ebx
c0012a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a27:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012a2e:	e8 86 4d ff ff       	call   c00077b9 <malloc>
c0012a33:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a3a:	31 d2                	xor    edx,edx
c0012a3c:	5e                   	pop    esi
c0012a3d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a41:	50                   	push   eax
c0012a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a4a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a51:	52                   	push   edx
c0012a52:	50                   	push   eax
c0012a53:	55                   	push   ebp
c0012a54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a57:	83 c4 20             	add    esp,0x20
c0012a5a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a62:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a66:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a6a:	0f 8d 7c 02 00 00    	jge    c0012cec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a78:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a7d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a80:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a88:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a8c:	89 d8                	mov    eax,ebx
c0012a8e:	c1 e8 08             	shr    eax,0x8
c0012a91:	89 c6                	mov    esi,eax
c0012a93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a97:	c1 e6 04             	shl    esi,0x4
c0012a9a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a9e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012aa1:	85 d2                	test   edx,edx
c0012aa3:	0f 85 bf 00 00 00    	jne    c0012b68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aa9:	83 ec 0c             	sub    esp,0xc
c0012aac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ab0:	03 06                	add    eax,DWORD PTR [esi]
c0012ab2:	50                   	push   eax
c0012ab3:	e8 4b f8 ff ff       	call   c0012303 <Thr::getAddressOfKernelSymbol(char const*)>
c0012ab8:	83 c4 10             	add    esp,0x10
c0012abb:	89 c2                	mov    edx,eax
c0012abd:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012ac2:	85 c0                	test   eax,eax
c0012ac4:	0f 85 9e 00 00 00    	jne    c0012b68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aca:	83 ec 0c             	sub    esp,0xc
c0012acd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ad1:	03 06                	add    eax,DWORD PTR [esi]
c0012ad3:	50                   	push   eax
c0012ad4:	e8 77 d8 ff ff       	call   c0010350 <KeResolveCompatibilitySymbol(char*)>
c0012ad9:	83 c4 10             	add    esp,0x10
c0012adc:	89 c2                	mov    edx,eax
c0012ade:	85 c0                	test   eax,eax
c0012ae0:	0f 85 82 00 00 00    	jne    c0012b68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ae6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012aea:	50                   	push   eax
c0012aeb:	50                   	push   eax
c0012aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012af0:	03 06                	add    eax,DWORD PTR [esi]
c0012af2:	50                   	push   eax
c0012af3:	68 a2 ea 01 c0       	push   0xc001eaa2
c0012af8:	e8 80 7a ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0012afd:	58                   	pop    eax
c0012afe:	5a                   	pop    edx
c0012aff:	68 bc ea 01 c0       	push   0xc001eabc
c0012b04:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b0b:	50                   	push   eax
c0012b0c:	e8 ef da fe ff       	call   c0000600 <strcpy>
c0012b11:	59                   	pop    ecx
c0012b12:	58                   	pop    eax
c0012b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b17:	03 06                	add    eax,DWORD PTR [esi]
c0012b19:	50                   	push   eax
c0012b1a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b21:	50                   	push   eax
c0012b22:	e8 99 dc fe ff       	call   c00007c0 <strcat>
c0012b27:	58                   	pop    eax
c0012b28:	5a                   	pop    edx
c0012b29:	68 52 eb 01 c0       	push   0xc001eb52
c0012b2e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b35:	50                   	push   eax
c0012b36:	e8 85 dc fe ff       	call   c00007c0 <strcat>
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b43:	0f 84 5d 01 00 00    	je     c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b49:	83 ec 0c             	sub    esp,0xc
c0012b4c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b53:	50                   	push   eax
c0012b54:	e8 a6 d6 ff ff       	call   c00101ff <KePanic(char const*)>
c0012b59:	83 c4 10             	add    esp,0x10
c0012b5c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b60:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b64:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b68:	80 fb 01             	cmp    bl,0x1
c0012b6b:	0f 85 88 00 00 00    	jne    c0012bf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b71:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b78:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b7c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b80:	01 ce                	add    esi,ecx
c0012b82:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b88:	0f 94 c0             	sete   al
c0012b8b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b91:	0f 94 c3             	sete   bl
c0012b94:	09 c3                	or     ebx,eax
c0012b96:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b98:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b9d:	74 41                	je     c0012be0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b9f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ba2:	84 db                	test   bl,bl
c0012ba4:	75 15                	jne    c0012bbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012ba6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012baa:	66 83 f8 0c          	cmp    ax,0xc
c0012bae:	76 05                	jbe    c0012bb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012bb0:	b8 0c 00 00 00       	mov    eax,0xc
c0012bb5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bb9:	76 37                	jbe    c0012bf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012bbf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bc4:	0f 84 dc 00 00 00    	je     c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bca:	83 ec 0c             	sub    esp,0xc
c0012bcd:	68 d3 ea 01 c0       	push   0xc001ead3
c0012bd2:	e8 28 d6 ff ff       	call   c00101ff <KePanic(char const*)>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012bde:	eb 12                	jmp    c0012bf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012be0:	01 c1                	add    ecx,eax
c0012be2:	84 db                	test   bl,bl
c0012be4:	75 0c                	jne    c0012bf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012be6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bea:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bee:	77 02                	ja     c0012bf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bf0:	01 d1                	add    ecx,edx
c0012bf2:	89 0e                	mov    DWORD PTR [esi],ecx
c0012bf4:	e9 ea 00 00 00       	jmp    c0012ce3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012bf9:	80 fb 02             	cmp    bl,0x2
c0012bfc:	75 7c                	jne    c0012c7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012bfe:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012c05:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012c09:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012c0d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c13:	74 20                	je     c0012c35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c15:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c1b:	74 18                	je     c0012c35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c1d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c21:	b9 0a 00 00 00       	mov    ecx,0xa
c0012c26:	66 83 f8 0e          	cmp    ax,0xe
c0012c2a:	77 03                	ja     c0012c2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012c2c:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012c2f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c33:	76 1f                	jbe    c0012c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c35:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c39:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c3e:	74 66                	je     c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c40:	83 ec 0c             	sub    esp,0xc
c0012c43:	68 ef ea 01 c0       	push   0xc001eaef
c0012c48:	e8 b2 d5 ff ff       	call   c00101ff <KePanic(char const*)>
c0012c4d:	83 c4 10             	add    esp,0x10
c0012c50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c54:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c56:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c5b:	74 13                	je     c0012c70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c5d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c61:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c68:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c6c:	01 c8                	add    eax,ecx
c0012c6e:	eb 04                	jmp    c0012c74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c70:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c74:	01 c2                	add    edx,eax
c0012c76:	89 16                	mov    DWORD PTR [esi],edx
c0012c78:	eb 69                	jmp    c0012ce3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c7a:	0f b6 db             	movzx  ebx,bl
c0012c7d:	50                   	push   eax
c0012c7e:	50                   	push   eax
c0012c7f:	53                   	push   ebx
c0012c80:	68 0b eb 01 c0       	push   0xc001eb0b
c0012c85:	e8 f3 78 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0012c8a:	83 c4 10             	add    esp,0x10
c0012c8d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c92:	74 12                	je     c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c94:	83 ec 0c             	sub    esp,0xc
c0012c97:	68 16 eb 01 c0       	push   0xc001eb16
c0012c9c:	e8 5e d5 ff ff       	call   c00101ff <KePanic(char const*)>
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	eb 3d                	jmp    c0012ce3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ca6:	83 ec 0c             	sub    esp,0xc
c0012ca9:	55                   	push   ebp
c0012caa:	e8 61 7f ff ff       	call   c000ac10 <File::close()>
c0012caf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cb2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cb5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cb8:	59                   	pop    ecx
c0012cb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cbd:	e8 07 4b ff ff       	call   c00077c9 <free>
c0012cc2:	5b                   	pop    ebx
c0012cc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cc7:	e8 fd 4a ff ff       	call   c00077c9 <free>
c0012ccc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ccf:	e8 f5 4a ff ff       	call   c00077c9 <free>
c0012cd4:	5e                   	pop    esi
c0012cd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd9:	e8 eb 4a ff ff       	call   c00077c9 <free>
c0012cde:	83 c4 10             	add    esp,0x10
c0012ce1:	eb 21                	jmp    c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012ce3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012ce7:	e9 76 fd ff ff       	jmp    c0012a62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012cec:	83 ec 0c             	sub    esp,0xc
c0012cef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cf3:	e8 d1 4a ff ff       	call   c00077c9 <free>
c0012cf8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012cfc:	83 c4 10             	add    esp,0x10
c0012cff:	e9 eb fc ff ff       	jmp    c00129ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012d04:	31 c0                	xor    eax,eax
c0012d06:	eb 33                	jmp    c0012d3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012d08:	83 ec 0c             	sub    esp,0xc
c0012d0b:	55                   	push   ebp
c0012d0c:	e8 ff 7e ff ff       	call   c000ac10 <File::close()>
c0012d11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d14:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d1a:	58                   	pop    eax
c0012d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d1f:	e8 a5 4a ff ff       	call   c00077c9 <free>
c0012d24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d27:	e8 9d 4a ff ff       	call   c00077c9 <free>
c0012d2c:	5a                   	pop    edx
c0012d2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d31:	e8 93 4a ff ff       	call   c00077c9 <free>
c0012d36:	83 c4 10             	add    esp,0x10
c0012d39:	b0 01                	mov    al,0x1
c0012d3b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d41:	5b                   	pop    ebx
c0012d42:	5e                   	pop    esi
c0012d43:	5f                   	pop    edi
c0012d44:	5d                   	pop    ebp
c0012d45:	c3                   	ret    

c0012d46 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d46:	56                   	push   esi
c0012d47:	31 d2                	xor    edx,edx
c0012d49:	53                   	push   ebx
c0012d4a:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d54:	39 d3                	cmp    ebx,edx
c0012d56:	7e 1b                	jle    c0012d73 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d58:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012d5f:	39 c8                	cmp    eax,ecx
c0012d61:	77 0d                	ja     c0012d70 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d63:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012d6a:	01 c6                	add    esi,eax
c0012d6c:	39 ce                	cmp    esi,ecx
c0012d6e:	77 05                	ja     c0012d75 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d70:	42                   	inc    edx
c0012d71:	eb e1                	jmp    c0012d54 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d73:	31 c0                	xor    eax,eax
c0012d75:	5b                   	pop    ebx
c0012d76:	5e                   	pop    esi
c0012d77:	c3                   	ret    

c0012d78 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d78:	53                   	push   ebx
c0012d79:	31 c0                	xor    eax,eax
c0012d7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d7f:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d85:	39 c3                	cmp    ebx,eax
c0012d87:	7e 22                	jle    c0012dab <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d89:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012d90:	39 ca                	cmp    edx,ecx
c0012d92:	77 14                	ja     c0012da8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d94:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012d9b:	39 ca                	cmp    edx,ecx
c0012d9d:	76 09                	jbe    c0012da8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d9f:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012da6:	eb 05                	jmp    c0012dad <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012da8:	40                   	inc    eax
c0012da9:	eb da                	jmp    c0012d85 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012dab:	31 c0                	xor    eax,eax
c0012dad:	5b                   	pop    ebx
c0012dae:	c3                   	ret    

c0012daf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012daf:	53                   	push   ebx
c0012db0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012db4:	53                   	push   ebx
c0012db5:	e8 8c ff ff ff       	call   c0012d46 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012dba:	5a                   	pop    edx
c0012dbb:	31 d2                	xor    edx,edx
c0012dbd:	85 c0                	test   eax,eax
c0012dbf:	74 04                	je     c0012dc5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012dc1:	89 da                	mov    edx,ebx
c0012dc3:	29 c2                	sub    edx,eax
c0012dc5:	89 d0                	mov    eax,edx
c0012dc7:	5b                   	pop    ebx
c0012dc8:	c3                   	ret    

c0012dc9 <Thr::loadDLL(char const*, bool)>:
c0012dc9:	55                   	push   ebp
c0012dca:	57                   	push   edi
c0012dcb:	56                   	push   esi
c0012dcc:	53                   	push   ebx
c0012dcd:	81 ec 34 01 00 00    	sub    esp,0x134
c0012dd3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012dda:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012de1:	56                   	push   esi
c0012de2:	68 2e eb 01 c0       	push   0xc001eb2e
c0012de7:	e8 91 77 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0012dec:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012df3:	e8 c1 49 ff ff       	call   c00077b9 <malloc>
c0012df8:	83 c4 0c             	add    esp,0xc
c0012dfb:	89 c3                	mov    ebx,eax
c0012dfd:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012e03:	56                   	push   esi
c0012e04:	50                   	push   eax
c0012e05:	e8 e8 7c ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	85 db                	test   ebx,ebx
c0012e0f:	75 3c                	jne    c0012e4d <Thr::loadDLL(char const*, bool)+0x84>
c0012e11:	89 f8                	mov    eax,edi
c0012e13:	84 c0                	test   al,al
c0012e15:	0f 84 d2 01 00 00    	je     c0012fed <Thr::loadDLL(char const*, bool)+0x224>
c0012e1b:	55                   	push   ebp
c0012e1c:	55                   	push   ebp
c0012e1d:	68 3f eb 01 c0       	push   0xc001eb3f
c0012e22:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012e26:	55                   	push   ebp
c0012e27:	e8 d4 d7 fe ff       	call   c0000600 <strcpy>
c0012e2c:	58                   	pop    eax
c0012e2d:	5a                   	pop    edx
c0012e2e:	56                   	push   esi
c0012e2f:	55                   	push   ebp
c0012e30:	e8 8b d9 fe ff       	call   c00007c0 <strcat>
c0012e35:	59                   	pop    ecx
c0012e36:	58                   	pop    eax
c0012e37:	68 52 eb 01 c0       	push   0xc001eb52
c0012e3c:	55                   	push   ebp
c0012e3d:	e8 7e d9 fe ff       	call   c00007c0 <strcat>
c0012e42:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e45:	e8 b5 d3 ff ff       	call   c00101ff <KePanic(char const*)>
c0012e4a:	83 c4 10             	add    esp,0x10
c0012e4d:	51                   	push   ecx
c0012e4e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e52:	50                   	push   eax
c0012e53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e57:	50                   	push   eax
c0012e58:	53                   	push   ebx
c0012e59:	e8 00 80 ff ff       	call   c000ae5e <File::stat(unsigned long long*, bool*)>
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	85 db                	test   ebx,ebx
c0012e63:	74 0c                	je     c0012e71 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e65:	83 ec 0c             	sub    esp,0xc
c0012e68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e6a:	53                   	push   ebx
c0012e6b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e6e:	83 c4 10             	add    esp,0x10
c0012e71:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e76:	75 0a                	jne    c0012e82 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e7c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e80:	75 3c                	jne    c0012ebe <Thr::loadDLL(char const*, bool)+0xf5>
c0012e82:	89 f8                	mov    eax,edi
c0012e84:	84 c0                	test   al,al
c0012e86:	0f 84 49 01 00 00    	je     c0012fd5 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e8c:	51                   	push   ecx
c0012e8d:	51                   	push   ecx
c0012e8e:	68 3f eb 01 c0       	push   0xc001eb3f
c0012e93:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e97:	53                   	push   ebx
c0012e98:	e8 63 d7 fe ff       	call   c0000600 <strcpy>
c0012e9d:	5d                   	pop    ebp
c0012e9e:	58                   	pop    eax
c0012e9f:	56                   	push   esi
c0012ea0:	53                   	push   ebx
c0012ea1:	e8 1a d9 fe ff       	call   c00007c0 <strcat>
c0012ea6:	58                   	pop    eax
c0012ea7:	5a                   	pop    edx
c0012ea8:	68 52 eb 01 c0       	push   0xc001eb52
c0012ead:	53                   	push   ebx
c0012eae:	e8 0d d9 fe ff       	call   c00007c0 <strcat>
c0012eb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012eb6:	e8 44 d3 ff ff       	call   c00101ff <KePanic(char const*)>
c0012ebb:	83 c4 10             	add    esp,0x10
c0012ebe:	52                   	push   edx
c0012ebf:	6a 03                	push   0x3
c0012ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ec5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012ec9:	05 ff 0f 00 00       	add    eax,0xfff
c0012ece:	83 d2 00             	adc    edx,0x0
c0012ed1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012ed5:	50                   	push   eax
c0012ed6:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012edc:	e8 8f 6b ff ff       	call   c0009a70 <VAS::allocatePages(int, int)>
c0012ee1:	59                   	pop    ecx
c0012ee2:	89 c3                	mov    ebx,eax
c0012ee4:	5d                   	pop    ebp
c0012ee5:	50                   	push   eax
c0012ee6:	68 76 d7 01 c0       	push   0xc001d776
c0012eeb:	e8 8d 76 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0012ef0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ef3:	e8 48 d6 fe ff       	call   c0000540 <strlen>
c0012ef8:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012efe:	40                   	inc    eax
c0012eff:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f02:	e8 b2 48 ff ff       	call   c00077b9 <malloc>
c0012f07:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012f0e:	58                   	pop    eax
c0012f0f:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f14:	5a                   	pop    edx
c0012f15:	56                   	push   esi
c0012f16:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012f1d:	e8 de d6 fe ff       	call   c0000600 <strcpy>
c0012f22:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f27:	8d 50 01             	lea    edx,[eax+0x1]
c0012f2a:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012f31:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012f37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f3b:	83 c4 0c             	add    esp,0xc
c0012f3e:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012f45:	6a 01                	push   0x1
c0012f47:	53                   	push   ebx
c0012f48:	56                   	push   esi
c0012f49:	e8 c2 f6 ff ff       	call   c0012610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f4e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f52:	83 c4 10             	add    esp,0x10
c0012f55:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f5a:	0f 85 89 00 00 00    	jne    c0012fe9 <Thr::loadDLL(char const*, bool)+0x220>
c0012f60:	89 f8                	mov    eax,edi
c0012f62:	84 c0                	test   al,al
c0012f64:	74 73                	je     c0012fd9 <Thr::loadDLL(char const*, bool)+0x210>
c0012f66:	83 ec 0c             	sub    esp,0xc
c0012f69:	68 54 eb 01 c0       	push   0xc001eb54
c0012f6e:	e8 8c d2 ff ff       	call   c00101ff <KePanic(char const*)>
c0012f73:	83 c4 10             	add    esp,0x10
c0012f76:	eb 61                	jmp    c0012fd9 <Thr::loadDLL(char const*, bool)+0x210>
c0012f78:	50                   	push   eax
c0012f79:	50                   	push   eax
c0012f7a:	89 e8                	mov    eax,ebp
c0012f7c:	c1 e0 0c             	shl    eax,0xc
c0012f7f:	01 d8                	add    eax,ebx
c0012f81:	50                   	push   eax
c0012f82:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f88:	e8 cd 65 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0012f8d:	83 c4 10             	add    esp,0x10
c0012f90:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f92:	a8 60                	test   al,0x60
c0012f94:	75 11                	jne    c0012fa7 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f96:	83 ec 0c             	sub    esp,0xc
c0012f99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f9e:	50                   	push   eax
c0012f9f:	e8 8f 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012fa4:	83 c4 10             	add    esp,0x10
c0012fa7:	45                   	inc    ebp
c0012fa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fb0:	05 ff 0f 00 00       	add    eax,0xfff
c0012fb5:	bf 00 00 00 00       	mov    edi,0x0
c0012fba:	83 d2 00             	adc    edx,0x0
c0012fbd:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012fc1:	c1 ea 0c             	shr    edx,0xc
c0012fc4:	39 c5                	cmp    ebp,eax
c0012fc6:	89 d1                	mov    ecx,edx
c0012fc8:	89 f8                	mov    eax,edi
c0012fca:	19 c8                	sbb    eax,ecx
c0012fcc:	72 aa                	jb     c0012f78 <Thr::loadDLL(char const*, bool)+0x1af>
c0012fce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fd3:	75 18                	jne    c0012fed <Thr::loadDLL(char const*, bool)+0x224>
c0012fd5:	31 db                	xor    ebx,ebx
c0012fd7:	eb 14                	jmp    c0012fed <Thr::loadDLL(char const*, bool)+0x224>
c0012fd9:	83 ec 0c             	sub    esp,0xc
c0012fdc:	68 73 eb 01 c0       	push   0xc001eb73
c0012fe1:	e8 19 d2 ff ff       	call   c00101ff <KePanic(char const*)>
c0012fe6:	83 c4 10             	add    esp,0x10
c0012fe9:	31 ed                	xor    ebp,ebp
c0012feb:	eb bb                	jmp    c0012fa8 <Thr::loadDLL(char const*, bool)+0x1df>
c0012fed:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012ff3:	89 d8                	mov    eax,ebx
c0012ff5:	5b                   	pop    ebx
c0012ff6:	5e                   	pop    esi
c0012ff7:	5f                   	pop    edi
c0012ff8:	5d                   	pop    ebp
c0012ff9:	c3                   	ret    

c0012ffa <Thr::executeDLL(unsigned long, void*)>:
c0012ffa:	56                   	push   esi
c0012ffb:	53                   	push   ebx
c0012ffc:	52                   	push   edx
c0012ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013001:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013005:	85 db                	test   ebx,ebx
c0013007:	75 10                	jne    c0013019 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013009:	83 ec 0c             	sub    esp,0xc
c001300c:	68 8f eb 01 c0       	push   0xc001eb8f
c0013011:	e8 e9 d1 ff ff       	call   c00101ff <KePanic(char const*)>
c0013016:	83 c4 10             	add    esp,0x10
c0013019:	50                   	push   eax
c001301a:	50                   	push   eax
c001301b:	53                   	push   ebx
c001301c:	68 b9 eb 01 c0       	push   0xc001ebb9
c0013021:	e8 57 75 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0013026:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001302a:	89 d8                	mov    eax,ebx
c001302c:	83 c4 14             	add    esp,0x14
c001302f:	5b                   	pop    ebx
c0013030:	5e                   	pop    esi
c0013031:	ff e0                	jmp    eax
c0013033:	90                   	nop

c0013034 <userModeEntryPoint(void*)>:
c0013034:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013039:	48                   	dec    eax
c001303a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001303f:	75 03                	jne    c0013044 <userModeEntryPoint(void*)+0x10>
c0013041:	fb                   	sti    
c0013042:	66 90                	xchg   ax,ax
c0013044:	fb                   	sti    
c0013045:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001304a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001304d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013053:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013057:	e9 e3 d1 fe ff       	jmp    c000023f <goToUsermode>

c001305c <changeTSS>:
c001305c:	83 ec 14             	sub    esp,0x14
c001305f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013064:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013067:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001306c:	c1 e2 15             	shl    edx,0x15
c001306f:	29 d0                	sub    eax,edx
c0013071:	50                   	push   eax
c0013072:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0013077:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001307d:	05 7c 11 00 00       	add    eax,0x117c
c0013082:	50                   	push   eax
c0013083:	e8 50 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013088:	83 c4 1c             	add    esp,0x1c
c001308b:	c3                   	ret    

c001308c <switchToThread(ThreadControlBlock*)>:
c001308c:	57                   	push   edi
c001308d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013092:	56                   	push   esi
c0013093:	85 c0                	test   eax,eax
c0013095:	53                   	push   ebx
c0013096:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001309a:	0f 85 90 00 00 00    	jne    c0013130 <switchToThread(ThreadControlBlock*)+0xa4>
c00130a0:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00130a3:	80 fa ff             	cmp    dl,0xff
c00130a6:	0f 84 80 00 00 00    	je     c001312c <switchToThread(ThreadControlBlock*)+0xa0>
c00130ac:	81 e2 ff 00 00 00    	and    edx,0xff
c00130b2:	b8 00 04 00 00       	mov    eax,0x400
c00130b7:	29 d0                	sub    eax,edx
c00130b9:	d1 f8                	sar    eax,1
c00130bb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00130be:	66 90                	xchg   ax,ax
c00130c0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00130c3:	e8 1d 26 00 00       	call   c00156e5 <HalQueryPerformanceCounter()>
c00130c8:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00130cd:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c00130d3:	89 c6                	mov    esi,eax
c00130d5:	89 d7                	mov    edi,edx
c00130d7:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c00130dd:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c00130e2:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c00130e8:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c00130ee:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c00130f4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130fa:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c0013100:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013103:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013106:	01 c6                	add    esi,eax
c0013108:	11 d7                	adc    edi,edx
c001310a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001310d:	83 ec 0c             	sub    esp,0xc
c0013110:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013113:	53                   	push   ebx
c0013114:	e8 5e d1 fe ff       	call   c0000277 <switchToThreadASM>
c0013119:	0f 20 c0             	mov    eax,cr0
c001311c:	83 c8 08             	or     eax,0x8
c001311f:	0f 22 c0             	mov    cr0,eax
c0013122:	83 c4 10             	add    esp,0x10
c0013125:	5b                   	pop    ebx
c0013126:	5e                   	pop    esi
c0013127:	5f                   	pop    edi
c0013128:	c3                   	ret    
c0013129:	8d 76 00             	lea    esi,[esi+0x0]
c001312c:	31 c0                	xor    eax,eax
c001312e:	eb 90                	jmp    c00130c0 <switchToThread(ThreadControlBlock*)+0x34>
c0013130:	5b                   	pop    ebx
c0013131:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c001313b:	5e                   	pop    esi
c001313c:	5f                   	pop    edi
c001313d:	c3                   	ret    
c001313e:	66 90                	xchg   ax,ax

c0013140 <Process::addArgs(char**)>:
c0013140:	57                   	push   edi
c0013141:	56                   	push   esi
c0013142:	53                   	push   ebx
c0013143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013147:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001314b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013155:	85 ff                	test   edi,edi
c0013157:	74 43                	je     c001319c <Process::addArgs(char**)+0x5c>
c0013159:	8b 07                	mov    eax,DWORD PTR [edi]
c001315b:	85 c0                	test   eax,eax
c001315d:	74 3d                	je     c001319c <Process::addArgs(char**)+0x5c>
c001315f:	31 db                	xor    ebx,ebx
c0013161:	8d 76 00             	lea    esi,[esi+0x0]
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	50                   	push   eax
c0013168:	e8 d3 d3 fe ff       	call   c0000540 <strlen>
c001316d:	40                   	inc    eax
c001316e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013171:	e8 43 46 ff ff       	call   c00077b9 <malloc>
c0013176:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001317d:	5a                   	pop    edx
c001317e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013181:	59                   	pop    ecx
c0013182:	43                   	inc    ebx
c0013183:	52                   	push   edx
c0013184:	50                   	push   eax
c0013185:	e8 76 d4 fe ff       	call   c0000600 <strcpy>
c001318a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013196:	85 c0                	test   eax,eax
c0013198:	75 ca                	jne    c0013164 <Process::addArgs(char**)+0x24>
c001319a:	66 90                	xchg   ax,ax
c001319c:	5b                   	pop    ebx
c001319d:	5e                   	pop    esi
c001319e:	5f                   	pop    edi
c001319f:	c3                   	ret    

c00131a0 <Process::Process(char const*, Process*, char**)>:
c00131a0:	56                   	push   esi
c00131a1:	53                   	push   ebx
c00131a2:	83 ec 14             	sub    esp,0x14
c00131a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131a9:	05 0c 02 00 00       	add    eax,0x20c
c00131ae:	bb 07 00 00 00       	mov    ebx,0x7
c00131b3:	89 c6                	mov    esi,eax
c00131b5:	8d 76 00             	lea    esi,[esi+0x0]
c00131b8:	85 db                	test   ebx,ebx
c00131ba:	78 14                	js     c00131d0 <Process::Process(char const*, Process*, char**)+0x30>
c00131bc:	83 ec 0c             	sub    esp,0xc
c00131bf:	56                   	push   esi
c00131c0:	e8 97 98 00 00       	call   c001ca5c <ThreadControlBlock::ThreadControlBlock()>
c00131c5:	83 c4 10             	add    esp,0x10
c00131c8:	83 c6 5f             	add    esi,0x5f
c00131cb:	4b                   	dec    ebx
c00131cc:	eb ea                	jmp    c00131b8 <Process::Process(char const*, Process*, char**)+0x18>
c00131ce:	66 90                	xchg   ax,ax
c00131d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131d4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131df:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131e6:	83 ec 0c             	sub    esp,0xc
c00131e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131ed:	e8 02 ce ff ff       	call   c000fff4 <Krnl::newProcessEnv(Process*)>
c00131f2:	83 c4 10             	add    esp,0x10
c00131f5:	89 c2                	mov    edx,eax
c00131f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131fb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013205:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001320e:	a1 6c fb 01 c0       	mov    eax,ds:0xc001fb6c
c0013213:	8d 50 01             	lea    edx,[eax+0x1]
c0013216:	89 15 6c fb 01 c0    	mov    DWORD PTR ds:0xc001fb6c,edx
c001321c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013220:	89 02                	mov    DWORD PTR [edx],eax
c0013222:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001322a:	83 ec 0c             	sub    esp,0xc
c001322d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013231:	e8 83 45 ff ff       	call   c00077b9 <malloc>
c0013236:	83 c4 10             	add    esp,0x10
c0013239:	89 c3                	mov    ebx,eax
c001323b:	83 ec 08             	sub    esp,0x8
c001323e:	6a 00                	push   0x0
c0013240:	53                   	push   ebx
c0013241:	e8 d4 6b ff ff       	call   c0009e1a <VAS::VAS(bool)>
c0013246:	83 c4 10             	add    esp,0x10
c0013249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013257:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013265:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013269:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001326f:	e8 f6 d2 ff ff       	call   c001056a <KeInitSignals()>
c0013274:	89 c2                	mov    edx,eax
c0013276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001327a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013284:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001328a:	85 c0                	test   eax,eax
c001328c:	74 42                	je     c00132d0 <Process::Process(char const*, Process*, char**)+0x130>
c001328e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013292:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013298:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001329e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132b2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132bc:	05 0c 01 00 00       	add    eax,0x10c
c00132c1:	83 ec 08             	sub    esp,0x8
c00132c4:	52                   	push   edx
c00132c5:	50                   	push   eax
c00132c6:	e8 35 d3 fe ff       	call   c0000600 <strcpy>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	eb 64                	jmp    c0013334 <Process::Process(char const*, Process*, char**)+0x194>
c00132d0:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00132d8:	83 ec 0c             	sub    esp,0xc
c00132db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132df:	e8 d5 44 ff ff       	call   c00077b9 <malloc>
c00132e4:	83 c4 10             	add    esp,0x10
c00132e7:	89 c3                	mov    ebx,eax
c00132e9:	83 ec 08             	sub    esp,0x8
c00132ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f0:	53                   	push   ebx
c00132f1:	e8 04 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00132f6:	83 c4 10             	add    esp,0x10
c00132f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132fd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013303:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013307:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001330d:	83 ec 0c             	sub    esp,0xc
c0013310:	50                   	push   eax
c0013311:	e8 84 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013316:	83 c4 10             	add    esp,0x10
c0013319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001331d:	05 0c 01 00 00       	add    eax,0x10c
c0013322:	83 ec 08             	sub    esp,0x8
c0013325:	68 d8 eb 01 c0       	push   0xc001ebd8
c001332a:	50                   	push   eax
c001332b:	e8 d0 d2 fe ff       	call   c0000600 <strcpy>
c0013330:	83 c4 10             	add    esp,0x10
c0013333:	90                   	nop
c0013334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013338:	83 c0 0c             	add    eax,0xc
c001333b:	83 ec 08             	sub    esp,0x8
c001333e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013342:	50                   	push   eax
c0013343:	e8 b8 d2 fe ff       	call   c0000600 <strcpy>
c0013348:	83 c4 10             	add    esp,0x10
c001334b:	83 ec 08             	sub    esp,0x8
c001334e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013356:	e8 e5 fd ff ff       	call   c0013140 <Process::addArgs(char**)>
c001335b:	83 c4 10             	add    esp,0x10
c001335e:	83 ec 08             	sub    esp,0x8
c0013361:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013365:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013369:	e8 6c ed ff ff       	call   c00120da <Thr::loadProgramIntoMemory(Process*, char const*)>
c001336e:	83 c4 10             	add    esp,0x10
c0013371:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013375:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013379:	83 f0 01             	xor    eax,0x1
c001337c:	88 c2                	mov    dl,al
c001337e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013382:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013388:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001338c:	25 ff 00 00 00       	and    eax,0xff
c0013391:	83 ec 08             	sub    esp,0x8
c0013394:	50                   	push   eax
c0013395:	68 30 ec 01 c0       	push   0xc001ec30
c001339a:	e8 de 71 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001339f:	83 c4 10             	add    esp,0x10
c00133a2:	90                   	nop
c00133a3:	83 c4 14             	add    esp,0x14
c00133a6:	5b                   	pop    ebx
c00133a7:	5e                   	pop    esi
c00133a8:	c3                   	ret    
c00133a9:	90                   	nop
c00133aa:	66 90                	xchg   ax,ax

c00133ac <Process::Process(bool, char const*, Process*, char**)>:
c00133ac:	56                   	push   esi
c00133ad:	53                   	push   ebx
c00133ae:	83 ec 24             	sub    esp,0x24
c00133b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133b5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00133b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133bd:	05 0c 02 00 00       	add    eax,0x20c
c00133c2:	bb 07 00 00 00       	mov    ebx,0x7
c00133c7:	89 c6                	mov    esi,eax
c00133c9:	8d 76 00             	lea    esi,[esi+0x0]
c00133cc:	85 db                	test   ebx,ebx
c00133ce:	78 14                	js     c00133e4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00133d0:	83 ec 0c             	sub    esp,0xc
c00133d3:	56                   	push   esi
c00133d4:	e8 83 96 00 00       	call   c001ca5c <ThreadControlBlock::ThreadControlBlock()>
c00133d9:	83 c4 10             	add    esp,0x10
c00133dc:	83 c6 5f             	add    esi,0x5f
c00133df:	4b                   	dec    ebx
c00133e0:	eb ea                	jmp    c00133cc <Process::Process(bool, char const*, Process*, char**)+0x20>
c00133e2:	66 90                	xchg   ax,ax
c00133e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133e8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00133ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133f3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013401:	e8 ee cb ff ff       	call   c000fff4 <Krnl::newProcessEnv(Process*)>
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	89 c2                	mov    edx,eax
c001340b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001340f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013415:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013419:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013422:	a1 6c fb 01 c0       	mov    eax,ds:0xc001fb6c
c0013427:	8d 50 01             	lea    edx,[eax+0x1]
c001342a:	89 15 6c fb 01 c0    	mov    DWORD PTR ds:0xc001fb6c,edx
c0013430:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013434:	89 02                	mov    DWORD PTR [edx],eax
c0013436:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001343e:	83 ec 0c             	sub    esp,0xc
c0013441:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013445:	e8 6f 43 ff ff       	call   c00077b9 <malloc>
c001344a:	83 c4 10             	add    esp,0x10
c001344d:	89 c3                	mov    ebx,eax
c001344f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013453:	25 ff 00 00 00       	and    eax,0xff
c0013458:	83 ec 08             	sub    esp,0x8
c001345b:	50                   	push   eax
c001345c:	53                   	push   ebx
c001345d:	e8 b8 69 ff ff       	call   c0009e1a <VAS::VAS(bool)>
c0013462:	83 c4 10             	add    esp,0x10
c0013465:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013469:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001346f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013473:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001347d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013481:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013485:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001348b:	e8 da d0 ff ff       	call   c001056a <KeInitSignals()>
c0013490:	89 c2                	mov    edx,eax
c0013492:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013496:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001349c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134a6:	85 c0                	test   eax,eax
c00134a8:	74 42                	je     c00134ec <Process::Process(bool, char const*, Process*, char**)+0x140>
c00134aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134b4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00134ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134be:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00134c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134d8:	05 0c 01 00 00       	add    eax,0x10c
c00134dd:	83 ec 08             	sub    esp,0x8
c00134e0:	52                   	push   edx
c00134e1:	50                   	push   eax
c00134e2:	e8 19 d1 fe ff       	call   c0000600 <strcpy>
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	eb 64                	jmp    c0013550 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00134ec:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00134f4:	83 ec 0c             	sub    esp,0xc
c00134f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134fb:	e8 b9 42 ff ff       	call   c00077b9 <malloc>
c0013500:	83 c4 10             	add    esp,0x10
c0013503:	89 c3                	mov    ebx,eax
c0013505:	83 ec 08             	sub    esp,0x8
c0013508:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001350c:	53                   	push   ebx
c001350d:	e8 e8 53 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013519:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001351f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013523:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013529:	83 ec 0c             	sub    esp,0xc
c001352c:	50                   	push   eax
c001352d:	e8 68 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013532:	83 c4 10             	add    esp,0x10
c0013535:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013539:	05 0c 01 00 00       	add    eax,0x10c
c001353e:	83 ec 08             	sub    esp,0x8
c0013541:	68 d8 eb 01 c0       	push   0xc001ebd8
c0013546:	50                   	push   eax
c0013547:	e8 b4 d0 fe ff       	call   c0000600 <strcpy>
c001354c:	83 c4 10             	add    esp,0x10
c001354f:	90                   	nop
c0013550:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013554:	83 c0 0c             	add    eax,0xc
c0013557:	83 ec 08             	sub    esp,0x8
c001355a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001355e:	50                   	push   eax
c001355f:	e8 9c d0 fe ff       	call   c0000600 <strcpy>
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	83 ec 08             	sub    esp,0x8
c001356a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001356e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013572:	e8 c9 fb ff ff       	call   c0013140 <Process::addArgs(char**)>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	90                   	nop
c001357b:	83 c4 24             	add    esp,0x24
c001357e:	5b                   	pop    ebx
c001357f:	5e                   	pop    esi
c0013580:	c3                   	ret    
c0013581:	8d 76 00             	lea    esi,[esi+0x0]

c0013584 <taskStartupFunction>:
c0013584:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013589:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001358c:	c3                   	ret    
c001358d:	90                   	nop
c001358e:	66 90                	xchg   ax,ax

c0013590 <Semaphore::Semaphore(int)>:
c0013590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013598:	89 10                	mov    DWORD PTR [eax],edx
c001359a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001359e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00135a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135bb:	90                   	nop
c00135bc:	c3                   	ret    
c00135bd:	90                   	nop
c00135be:	66 90                	xchg   ax,ax

c00135c0 <Mutex::Mutex()>:
c00135c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135c4:	6a 01                	push   0x1
c00135c6:	50                   	push   eax
c00135c7:	e8 c4 ff ff ff       	call   c0013590 <Semaphore::Semaphore(int)>
c00135cc:	83 c4 08             	add    esp,0x8
c00135cf:	90                   	nop
c00135d0:	c3                   	ret    
c00135d1:	90                   	nop
c00135d2:	66 90                	xchg   ax,ax

c00135d4 <Process::createThread(void (*)(void*), void*, int)>:
c00135d4:	57                   	push   edi
c00135d5:	31 c9                	xor    ecx,ecx
c00135d7:	56                   	push   esi
c00135d8:	53                   	push   ebx
c00135d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135dd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00135e4:	89 f2                	mov    edx,esi
c00135e6:	66 90                	xchg   ax,ax
c00135e8:	31 c0                	xor    eax,eax
c00135ea:	66 89 d0             	mov    ax,dx
c00135ed:	83 e2 01             	and    edx,0x1
c00135f0:	74 12                	je     c0013604 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00135f2:	d1 f8                	sar    eax,1
c00135f4:	41                   	inc    ecx
c00135f5:	89 c2                	mov    edx,eax
c00135f7:	83 f9 10             	cmp    ecx,0x10
c00135fa:	75 ec                	jne    c00135e8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00135fc:	31 db                	xor    ebx,ebx
c00135fe:	89 d8                	mov    eax,ebx
c0013600:	5b                   	pop    ebx
c0013601:	5e                   	pop    esi
c0013602:	5f                   	pop    edi
c0013603:	c3                   	ret    
c0013604:	b8 01 00 00 00       	mov    eax,0x1
c0013609:	d3 e0                	shl    eax,cl
c001360b:	09 c6                	or     esi,eax
c001360d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013610:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013617:	01 c0                	add    eax,eax
c0013619:	01 c8                	add    eax,ecx
c001361b:	8d 04 80             	lea    eax,[eax+eax*4]
c001361e:	01 d8                	add    eax,ebx
c0013620:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013627:	75 0b                	jne    c0013634 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013629:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013633:	90                   	nop
c0013634:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001363a:	83 ec 08             	sub    esp,0x8
c001363d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013640:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013643:	01 c0                	add    eax,eax
c0013645:	01 c8                	add    eax,ecx
c0013647:	8d 3c 80             	lea    edi,[eax+eax*4]
c001364a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001364d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013653:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013659:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001365d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013663:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013669:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013670:	89 ca                	mov    edx,ecx
c0013672:	f7 da                	neg    edx
c0013674:	c1 e2 15             	shl    edx,0x15
c0013677:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001367d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013683:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013687:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013691:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013697:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001369b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00136a1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00136ab:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00136b5:	53                   	push   ebx
c00136b6:	68 84 51 02 c0       	push   0xc0025184
c00136bb:	e8 3c 91 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00136c0:	83 c4 10             	add    esp,0x10
c00136c3:	89 d8                	mov    eax,ebx
c00136c5:	5b                   	pop    ebx
c00136c6:	5e                   	pop    esi
c00136c7:	5f                   	pop    edi
c00136c8:	c3                   	ret    
c00136c9:	90                   	nop
c00136ca:	66 90                	xchg   ax,ax

c00136cc <Process::createUserThread()>:
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	68 80 00 00 00       	push   0x80
c00136d4:	6a 00                	push   0x0
c00136d6:	68 34 30 01 c0       	push   0xc0013034
c00136db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136df:	50                   	push   eax
c00136e0:	e8 ef fe ff ff       	call   c00135d4 <Process::createThread(void (*)(void*), void*, int)>
c00136e5:	83 c4 1c             	add    esp,0x1c
c00136e8:	c3                   	ret    
c00136e9:	8d 76 00             	lea    esi,[esi+0x0]

c00136ec <setupMultitasking(void (*)())>:
c00136ec:	56                   	push   esi
c00136ed:	53                   	push   ebx
c00136ee:	53                   	push   ebx
c00136ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f3:	eb 13                	jmp    c0013708 <setupMultitasking(void (*)())+0x1c>
c00136f5:	8d 76 00             	lea    esi,[esi+0x0]
c00136f8:	83 ec 0c             	sub    esp,0xc
c00136fb:	68 84 51 02 c0       	push   0xc0025184
c0013700:	e8 3f 90 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013705:	83 c4 10             	add    esp,0x10
c0013708:	83 ec 0c             	sub    esp,0xc
c001370b:	68 84 51 02 c0       	push   0xc0025184
c0013710:	e8 0b 90 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013715:	83 c4 10             	add    esp,0x10
c0013718:	84 c0                	test   al,al
c001371a:	74 dc                	je     c00136f8 <setupMultitasking(void (*)())+0xc>
c001371c:	83 ec 0c             	sub    esp,0xc
c001371f:	68 24 07 00 00       	push   0x724
c0013724:	e8 90 40 ff ff       	call   c00077b9 <malloc>
c0013729:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013730:	89 c3                	mov    ebx,eax
c0013732:	6a 00                	push   0x0
c0013734:	68 dc eb 01 c0       	push   0xc001ebdc
c0013739:	6a 01                	push   0x1
c001373b:	50                   	push   eax
c001373c:	e8 6b fc ff ff       	call   c00133ac <Process::Process(bool, char const*, Process*, char**)>
c0013741:	83 c4 14             	add    esp,0x14
c0013744:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001374a:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c0013750:	50                   	push   eax
c0013751:	e8 a1 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0013756:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001375e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013768:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001376e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013771:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001377b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013781:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013787:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013791:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001379b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00137a5:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00137ab:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00137b1:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00137bb:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00137c1:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00137cb:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00137d1:	5a                   	pop    edx
c00137d2:	59                   	pop    ecx
c00137d3:	68 d8 eb 01 c0       	push   0xc001ebd8
c00137d8:	50                   	push   eax
c00137d9:	e8 22 ce fe ff       	call   c0000600 <strcpy>
c00137de:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00137e5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00137e9:	83 c4 14             	add    esp,0x14
c00137ec:	5b                   	pop    ebx
c00137ed:	5e                   	pop    esi
c00137ee:	e9 76 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00137f3:	90                   	nop

c00137f4 <schedule()>:
c00137f4:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00137fa:	85 d2                	test   edx,edx
c00137fc:	74 0e                	je     c001380c <schedule()+0x18>
c00137fe:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c0013808:	c3                   	ret    
c0013809:	8d 76 00             	lea    esi,[esi+0x0]
c001380c:	53                   	push   ebx
c001380d:	83 ec 14             	sub    esp,0x14
c0013810:	68 84 51 02 c0       	push   0xc0025184
c0013815:	e8 06 8f 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001381a:	83 c4 10             	add    esp,0x10
c001381d:	84 c0                	test   al,al
c001381f:	75 3b                	jne    c001385c <schedule()+0x68>
c0013821:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013826:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013829:	4a                   	dec    edx
c001382a:	74 38                	je     c0013864 <schedule()+0x70>
c001382c:	83 ec 0c             	sub    esp,0xc
c001382f:	68 84 51 02 c0       	push   0xc0025184
c0013834:	e8 03 8f 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013839:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013840:	89 c3                	mov    ebx,eax
c0013842:	e8 fd 8e 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013847:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001384e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013851:	e8 36 f8 ff ff       	call   c001308c <switchToThread(ThreadControlBlock*)>
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	8d 76 00             	lea    esi,[esi+0x0]
c001385c:	83 c4 08             	add    esp,0x8
c001385f:	5b                   	pop    ebx
c0013860:	c3                   	ret    
c0013861:	8d 76 00             	lea    esi,[esi+0x0]
c0013864:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001386b:	83 ec 08             	sub    esp,0x8
c001386e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013873:	50                   	push   eax
c0013874:	68 84 51 02 c0       	push   0xc0025184
c0013879:	e8 7e 8f 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001387e:	83 c4 10             	add    esp,0x10
c0013881:	eb a9                	jmp    c001382c <schedule()+0x38>
c0013883:	90                   	nop

c0013884 <Semaphore::tryAcquire()>:
c0013884:	53                   	push   ebx
c0013885:	83 ec 08             	sub    esp,0x8
c0013888:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001388c:	fa                   	cli    
c001388d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013892:	8d 50 01             	lea    edx,[eax+0x1]
c0013895:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001389b:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00138a1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00138a4:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c00138aa:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00138ad:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00138af:	7c 33                	jl     c00138e4 <Semaphore::tryAcquire()+0x60>
c00138b1:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c00138b7:	85 d2                	test   edx,edx
c00138b9:	75 0d                	jne    c00138c8 <Semaphore::tryAcquire()+0x44>
c00138bb:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c00138c1:	85 d2                	test   edx,edx
c00138c3:	75 6b                	jne    c0013930 <Semaphore::tryAcquire()+0xac>
c00138c5:	8d 76 00             	lea    esi,[esi+0x0]
c00138c8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138cd:	85 c0                	test   eax,eax
c00138cf:	74 0b                	je     c00138dc <Semaphore::tryAcquire()+0x58>
c00138d1:	8d 76 00             	lea    esi,[esi+0x0]
c00138d4:	31 c0                	xor    eax,eax
c00138d6:	83 c4 08             	add    esp,0x8
c00138d9:	5b                   	pop    ebx
c00138da:	c3                   	ret    
c00138db:	90                   	nop
c00138dc:	fb                   	sti    
c00138dd:	83 c4 08             	add    esp,0x8
c00138e0:	5b                   	pop    ebx
c00138e1:	c3                   	ret    
c00138e2:	66 90                	xchg   ax,ax
c00138e4:	43                   	inc    ebx
c00138e5:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c00138eb:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00138ee:	85 d2                	test   edx,edx
c00138f0:	75 22                	jne    c0013914 <Semaphore::tryAcquire()+0x90>
c00138f2:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c00138f8:	85 c9                	test   ecx,ecx
c00138fa:	74 18                	je     c0013914 <Semaphore::tryAcquire()+0x90>
c00138fc:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013906:	e8 e9 fe ff ff       	call   c00137f4 <schedule()>
c001390b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013910:	48                   	dec    eax
c0013911:	8d 76 00             	lea    esi,[esi+0x0]
c0013914:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013919:	85 c0                	test   eax,eax
c001391b:	75 0b                	jne    c0013928 <Semaphore::tryAcquire()+0xa4>
c001391d:	fb                   	sti    
c001391e:	b0 01                	mov    al,0x1
c0013920:	83 c4 08             	add    esp,0x8
c0013923:	5b                   	pop    ebx
c0013924:	c3                   	ret    
c0013925:	8d 76 00             	lea    esi,[esi+0x0]
c0013928:	b0 01                	mov    al,0x1
c001392a:	83 c4 08             	add    esp,0x8
c001392d:	5b                   	pop    ebx
c001392e:	c3                   	ret    
c001392f:	90                   	nop
c0013930:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001393a:	e8 b5 fe ff ff       	call   c00137f4 <schedule()>
c001393f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013944:	48                   	dec    eax
c0013945:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001394a:	85 c0                	test   eax,eax
c001394c:	75 86                	jne    c00138d4 <Semaphore::tryAcquire()+0x50>
c001394e:	eb 8c                	jmp    c00138dc <Semaphore::tryAcquire()+0x58>

c0013950 <Semaphore::assertLocked(char const*)>:
c0013950:	83 ec 0c             	sub    esp,0xc
c0013953:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013957:	fa                   	cli    
c0013958:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001395e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013963:	8d 48 01             	lea    ecx,[eax+0x1]
c0013966:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c001396c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001396e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013971:	7c 29                	jl     c001399c <Semaphore::assertLocked(char const*)+0x4c>
c0013973:	90                   	nop
c0013974:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013979:	85 c0                	test   eax,eax
c001397b:	75 0b                	jne    c0013988 <Semaphore::assertLocked(char const*)+0x38>
c001397d:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013982:	85 c0                	test   eax,eax
c0013984:	75 2e                	jne    c00139b4 <Semaphore::assertLocked(char const*)+0x64>
c0013986:	66 90                	xchg   ax,ax
c0013988:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001398d:	48                   	dec    eax
c001398e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013993:	75 03                	jne    c0013998 <Semaphore::assertLocked(char const*)+0x48>
c0013995:	fb                   	sti    
c0013996:	66 90                	xchg   ax,ax
c0013998:	83 c4 0c             	add    esp,0xc
c001399b:	c3                   	ret    
c001399c:	83 ec 0c             	sub    esp,0xc
c001399f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139a3:	52                   	push   edx
c00139a4:	e8 56 c8 ff ff       	call   c00101ff <KePanic(char const*)>
c00139a9:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00139ae:	83 c4 10             	add    esp,0x10
c00139b1:	48                   	dec    eax
c00139b2:	eb c0                	jmp    c0013974 <Semaphore::assertLocked(char const*)+0x24>
c00139b4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00139be:	e8 31 fe ff ff       	call   c00137f4 <schedule()>
c00139c3:	eb c3                	jmp    c0013988 <Semaphore::assertLocked(char const*)+0x38>
c00139c5:	8d 76 00             	lea    esi,[esi+0x0]

c00139c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00139c8:	83 ec 0c             	sub    esp,0xc
c00139cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139d7:	e8 18 fe ff ff       	call   c00137f4 <schedule()>
c00139dc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139e1:	48                   	dec    eax
c00139e2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139e7:	75 03                	jne    c00139ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00139e9:	fb                   	sti    
c00139ea:	66 90                	xchg   ax,ax
c00139ec:	83 c4 0c             	add    esp,0xc
c00139ef:	c3                   	ret    

c00139f0 <blockTask(TaskState)>:
c00139f0:	83 ec 0c             	sub    esp,0xc
c00139f3:	fa                   	cli    
c00139f4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00139fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a03:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a06:	e8 e9 fd ff ff       	call   c00137f4 <schedule()>
c0013a0b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a10:	48                   	dec    eax
c0013a11:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a16:	75 04                	jne    c0013a1c <blockTask(TaskState)+0x2c>
c0013a18:	fb                   	sti    
c0013a19:	8d 76 00             	lea    esi,[esi+0x0]
c0013a1c:	83 c4 0c             	add    esp,0xc
c0013a1f:	c3                   	ret    

c0013a20 <waitTask(int, int*, int)>:
c0013a20:	83 ec 18             	sub    esp,0x18
c0013a23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a2c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013a2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a38:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a3b:	6a 07                	push   0x7
c0013a3d:	e8 ae ff ff ff       	call   c00139f0 <blockTask(TaskState)>
c0013a42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a47:	83 c4 10             	add    esp,0x10
c0013a4a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a4d:	85 d2                	test   edx,edx
c0013a4f:	74 0b                	je     c0013a5c <waitTask(int, int*, int)+0x3c>
c0013a51:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a54:	89 02                	mov    DWORD PTR [edx],eax
c0013a56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a5b:	90                   	nop
c0013a5c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a5f:	83 c4 0c             	add    esp,0xc
c0013a62:	c3                   	ret    
c0013a63:	90                   	nop

c0013a64 <milliTenthSleepUntil(unsigned int)>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6b:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013a71:	76 05                	jbe    c0013a78 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a73:	90                   	nop
c0013a74:	83 c4 0c             	add    esp,0xc
c0013a77:	c3                   	ret    
c0013a78:	fa                   	cli    
c0013a79:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a7f:	83 ec 08             	sub    esp,0x8
c0013a82:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013a88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a8e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a91:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a97:	52                   	push   edx
c0013a98:	68 78 51 02 c0       	push   0xc0025178
c0013a9d:	e8 5a 8d 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013aa2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013aa9:	e8 42 ff ff ff       	call   c00139f0 <blockTask(TaskState)>
c0013aae:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013ab3:	83 c4 10             	add    esp,0x10
c0013ab6:	48                   	dec    eax
c0013ab7:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013abc:	85 c0                	test   eax,eax
c0013abe:	75 0c                	jne    c0013acc <milliTenthSleepUntil(unsigned int)+0x68>
c0013ac0:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013ac5:	85 c0                	test   eax,eax
c0013ac7:	75 17                	jne    c0013ae0 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0013acc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ad1:	48                   	dec    eax
c0013ad2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013ad7:	75 9b                	jne    c0013a74 <milliTenthSleepUntil(unsigned int)+0x10>
c0013ad9:	fb                   	sti    
c0013ada:	83 c4 0c             	add    esp,0xc
c0013add:	c3                   	ret    
c0013ade:	66 90                	xchg   ax,ax
c0013ae0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013aea:	e8 05 fd ff ff       	call   c00137f4 <schedule()>
c0013aef:	eb db                	jmp    c0013acc <milliTenthSleepUntil(unsigned int)+0x68>
c0013af1:	8d 76 00             	lea    esi,[esi+0x0]

c0013af4 <milliTenthSleep(unsigned int)>:
c0013af4:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013af9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013afd:	e9 62 ff ff ff       	jmp    c0013a64 <milliTenthSleepUntil(unsigned int)>
c0013b02:	66 90                	xchg   ax,ax

c0013b04 <sleep(unsigned int)>:
c0013b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b08:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b0b:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b0e:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b11:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b14:	c1 e0 04             	shl    eax,0x4
c0013b17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b1b:	eb d7                	jmp    c0013af4 <milliTenthSleep(unsigned int)>
c0013b1d:	90                   	nop
c0013b1e:	66 90                	xchg   ax,ax

c0013b20 <Semaphore::acquire()>:
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b27:	fa                   	cli    
c0013b28:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b2d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013b33:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b36:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013b3c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b3f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b41:	7d 2d                	jge    c0013b70 <Semaphore::acquire()+0x50>
c0013b43:	41                   	inc    ecx
c0013b44:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b47:	90                   	nop
c0013b48:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013b4d:	85 c0                	test   eax,eax
c0013b4f:	75 0b                	jne    c0013b5c <Semaphore::acquire()+0x3c>
c0013b51:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b56:	85 c0                	test   eax,eax
c0013b58:	75 62                	jne    c0013bbc <Semaphore::acquire()+0x9c>
c0013b5a:	66 90                	xchg   ax,ax
c0013b5c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b61:	48                   	dec    eax
c0013b62:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b67:	75 03                	jne    c0013b6c <Semaphore::acquire()+0x4c>
c0013b69:	fb                   	sti    
c0013b6a:	66 90                	xchg   ax,ax
c0013b6c:	83 c4 0c             	add    esp,0xc
c0013b6f:	c3                   	ret    
c0013b70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b75:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b7c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b7f:	85 c9                	test   ecx,ecx
c0013b81:	74 4d                	je     c0013bd0 <Semaphore::acquire()+0xb0>
c0013b83:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b86:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b8c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b8f:	90                   	nop
c0013b90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b95:	83 ec 0c             	sub    esp,0xc
c0013b98:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b9b:	68 58 ec 01 c0       	push   0xc001ec58
c0013ba0:	e8 d8 69 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0013ba5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013bac:	e8 3f fe ff ff       	call   c00139f0 <blockTask(TaskState)>
c0013bb1:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013bb6:	83 c4 10             	add    esp,0x10
c0013bb9:	48                   	dec    eax
c0013bba:	eb 8c                	jmp    c0013b48 <Semaphore::acquire()+0x28>
c0013bbc:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013bc6:	e8 29 fc ff ff       	call   c00137f4 <schedule()>
c0013bcb:	eb 8f                	jmp    c0013b5c <Semaphore::acquire()+0x3c>
c0013bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0013bd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bd5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013bd8:	eb b6                	jmp    c0013b90 <Semaphore::acquire()+0x70>
c0013bda:	66 90                	xchg   ax,ax

c0013bdc <taskReturned>:
c0013bdc:	83 ec 18             	sub    esp,0x18
c0013bdf:	68 78 ec 01 c0       	push   0xc001ec78
c0013be4:	e8 16 c6 ff ff       	call   c00101ff <KePanic(char const*)>
c0013be9:	83 c4 10             	add    esp,0x10
c0013bec:	83 ec 0c             	sub    esp,0xc
c0013bef:	6a 02                	push   0x2
c0013bf1:	e8 fa fd ff ff       	call   c00139f0 <blockTask(TaskState)>
c0013bf6:	fa                   	cli    
c0013bf7:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bfd:	e8 f2 fb ff ff       	call   c00137f4 <schedule()>
c0013c02:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c07:	83 c4 10             	add    esp,0x10
c0013c0a:	48                   	dec    eax
c0013c0b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c10:	85 c0                	test   eax,eax
c0013c12:	75 d8                	jne    c0013bec <taskReturned+0x10>
c0013c14:	fb                   	sti    
c0013c15:	eb d5                	jmp    c0013bec <taskReturned+0x10>
c0013c17:	90                   	nop

c0013c18 <Thr::processFromPID(int)>:
c0013c18:	57                   	push   edi
c0013c19:	56                   	push   esi
c0013c1a:	53                   	push   ebx
c0013c1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c1f:	fa                   	cli    
c0013c20:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c26:	83 ec 0c             	sub    esp,0xc
c0013c29:	68 84 51 02 c0       	push   0xc0025184
c0013c2e:	e8 09 8b 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	89 c7                	mov    edi,eax
c0013c38:	eb 16                	jmp    c0013c50 <Thr::processFromPID(int)+0x38>
c0013c3a:	66 90                	xchg   ax,ax
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	68 84 51 02 c0       	push   0xc0025184
c0013c44:	e8 f3 8a 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c49:	83 c4 10             	add    esp,0x10
c0013c4c:	39 f8                	cmp    eax,edi
c0013c4e:	74 4c                	je     c0013c9c <Thr::processFromPID(int)+0x84>
c0013c50:	83 ec 0c             	sub    esp,0xc
c0013c53:	68 84 51 02 c0       	push   0xc0025184
c0013c58:	e8 df 8a 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c5d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013c64:	89 c3                	mov    ebx,eax
c0013c66:	e8 d9 8a 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c6b:	58                   	pop    eax
c0013c6c:	5a                   	pop    edx
c0013c6d:	53                   	push   ebx
c0013c6e:	68 84 51 02 c0       	push   0xc0025184
c0013c73:	e8 84 8b 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c78:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c7b:	83 c4 10             	add    esp,0x10
c0013c7e:	39 30                	cmp    DWORD PTR [eax],esi
c0013c80:	75 ba                	jne    c0013c3c <Thr::processFromPID(int)+0x24>
c0013c82:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c87:	48                   	dec    eax
c0013c88:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c8d:	74 09                	je     c0013c98 <Thr::processFromPID(int)+0x80>
c0013c8f:	90                   	nop
c0013c90:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c93:	5b                   	pop    ebx
c0013c94:	5e                   	pop    esi
c0013c95:	5f                   	pop    edi
c0013c96:	c3                   	ret    
c0013c97:	90                   	nop
c0013c98:	fb                   	sti    
c0013c99:	eb f5                	jmp    c0013c90 <Thr::processFromPID(int)+0x78>
c0013c9b:	90                   	nop
c0013c9c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ca1:	48                   	dec    eax
c0013ca2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013ca7:	75 07                	jne    c0013cb0 <Thr::processFromPID(int)+0x98>
c0013ca9:	fb                   	sti    
c0013caa:	5b                   	pop    ebx
c0013cab:	5e                   	pop    esi
c0013cac:	5f                   	pop    edi
c0013cad:	c3                   	ret    
c0013cae:	66 90                	xchg   ax,ax
c0013cb0:	5b                   	pop    ebx
c0013cb1:	31 c0                	xor    eax,eax
c0013cb3:	5e                   	pop    esi
c0013cb4:	5f                   	pop    edi
c0013cb5:	c3                   	ret    
c0013cb6:	66 90                	xchg   ax,ax

c0013cb8 <unblockTask(ThreadControlBlock*)>:
c0013cb8:	53                   	push   ebx
c0013cb9:	83 ec 08             	sub    esp,0x8
c0013cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cc0:	fa                   	cli    
c0013cc1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013cc7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cca:	85 c0                	test   eax,eax
c0013ccc:	74 66                	je     c0013d34 <unblockTask(ThreadControlBlock*)+0x7c>
c0013cce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cd1:	48                   	dec    eax
c0013cd2:	74 38                	je     c0013d0c <unblockTask(ThreadControlBlock*)+0x54>
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	68 84 51 02 c0       	push   0xc0025184
c0013cdc:	e8 5b 8a 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ce1:	83 c4 10             	add    esp,0x10
c0013ce4:	85 c0                	test   eax,eax
c0013ce6:	75 1c                	jne    c0013d04 <unblockTask(ThreadControlBlock*)+0x4c>
c0013ce8:	eb 5e                	jmp    c0013d48 <unblockTask(ThreadControlBlock*)+0x90>
c0013cea:	66 90                	xchg   ax,ax
c0013cec:	83 ec 08             	sub    esp,0x8
c0013cef:	50                   	push   eax
c0013cf0:	68 84 51 02 c0       	push   0xc0025184
c0013cf5:	e8 f2 8d 00 00       	call   c001caec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013cfa:	83 c4 10             	add    esp,0x10
c0013cfd:	85 c0                	test   eax,eax
c0013cff:	74 47                	je     c0013d48 <unblockTask(ThreadControlBlock*)+0x90>
c0013d01:	8d 76 00             	lea    esi,[esi+0x0]
c0013d04:	39 c3                	cmp    ebx,eax
c0013d06:	75 e4                	jne    c0013cec <unblockTask(ThreadControlBlock*)+0x34>
c0013d08:	eb 12                	jmp    c0013d1c <unblockTask(ThreadControlBlock*)+0x64>
c0013d0a:	66 90                	xchg   ax,ax
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	68 fa eb 01 c0       	push   0xc001ebfa
c0013d14:	e8 64 68 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0013d19:	83 c4 10             	add    esp,0x10
c0013d1c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d21:	48                   	dec    eax
c0013d22:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d27:	75 03                	jne    c0013d2c <unblockTask(ThreadControlBlock*)+0x74>
c0013d29:	fb                   	sti    
c0013d2a:	66 90                	xchg   ax,ax
c0013d2c:	83 c4 08             	add    esp,0x8
c0013d2f:	5b                   	pop    ebx
c0013d30:	c3                   	ret    
c0013d31:	8d 76 00             	lea    esi,[esi+0x0]
c0013d34:	83 ec 0c             	sub    esp,0xc
c0013d37:	68 e3 eb 01 c0       	push   0xc001ebe3
c0013d3c:	e8 3c 68 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0013d41:	83 c4 10             	add    esp,0x10
c0013d44:	eb d6                	jmp    c0013d1c <unblockTask(ThreadControlBlock*)+0x64>
c0013d46:	66 90                	xchg   ax,ax
c0013d48:	83 ec 08             	sub    esp,0x8
c0013d4b:	53                   	push   ebx
c0013d4c:	68 84 51 02 c0       	push   0xc0025184
c0013d51:	e8 a6 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d56:	83 c4 10             	add    esp,0x10
c0013d59:	eb c1                	jmp    c0013d1c <unblockTask(ThreadControlBlock*)+0x64>
c0013d5b:	90                   	nop

c0013d5c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d5c:	55                   	push   ebp
c0013d5d:	57                   	push   edi
c0013d5e:	56                   	push   esi
c0013d5f:	53                   	push   ebx
c0013d60:	83 ec 1c             	sub    esp,0x1c
c0013d63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d67:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d6a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d70:	85 ed                	test   ebp,ebp
c0013d72:	7e 24                	jle    c0013d98 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d74:	31 f6                	xor    esi,esi
c0013d76:	66 90                	xchg   ax,ax
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d82:	46                   	inc    esi
c0013d83:	57                   	push   edi
c0013d84:	e8 40 3a ff ff       	call   c00077c9 <free>
c0013d89:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d8c:	83 c4 10             	add    esp,0x10
c0013d8f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d95:	7f e1                	jg     c0013d78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d97:	90                   	nop
c0013d98:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013da2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013da7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013daa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013dad:	d3 c0                	rol    eax,cl
c0013daf:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013db6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013db9:	89 f7                	mov    edi,esi
c0013dbb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013dc3:	0f 85 77 01 00 00    	jne    c0013f40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013dc9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013dcf:	85 ed                	test   ebp,ebp
c0013dd1:	74 1d                	je     c0013df0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013dd3:	83 ec 0c             	sub    esp,0xc
c0013dd6:	55                   	push   ebp
c0013dd7:	e8 34 c1 ff ff       	call   c000ff10 <EnvVarContainer::~EnvVarContainer()>
c0013ddc:	59                   	pop    ecx
c0013ddd:	5e                   	pop    esi
c0013dde:	6a 0c                	push   0xc
c0013de0:	55                   	push   ebp
c0013de1:	e8 a1 66 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c0013de6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	89 f7                	mov    edi,esi
c0013dee:	66 90                	xchg   ax,ax
c0013df0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013df6:	85 c0                	test   eax,eax
c0013df8:	0f 84 b6 00 00 00    	je     c0013eb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dfe:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e01:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e05:	31 c9                	xor    ecx,ecx
c0013e07:	eb 17                	jmp    c0013e20 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013e09:	8d 76 00             	lea    esi,[esi+0x0]
c0013e0c:	41                   	inc    ecx
c0013e0d:	83 f9 10             	cmp    ecx,0x10
c0013e10:	0f 84 9e 00 00 00    	je     c0013eb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e16:	66 90                	xchg   ax,ax
c0013e18:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e1e:	66 90                	xchg   ax,ax
c0013e20:	31 d2                	xor    edx,edx
c0013e22:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013e29:	d3 fa                	sar    edx,cl
c0013e2b:	83 e2 01             	and    edx,0x1
c0013e2e:	74 dc                	je     c0013e0c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e30:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013e33:	01 d2                	add    edx,edx
c0013e35:	01 ca                	add    edx,ecx
c0013e37:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e3a:	01 d0                	add    eax,edx
c0013e3c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e42:	83 fd 07             	cmp    ebp,0x7
c0013e45:	75 c5                	jne    c0013e0c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e47:	05 40 02 00 00       	add    eax,0x240
c0013e4c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e4f:	83 fd ff             	cmp    ebp,0xffffffff
c0013e52:	0f 8c f0 00 00 00    	jl     c0013f48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e58:	0f 84 ae 01 00 00    	je     c001400c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e5e:	85 ed                	test   ebp,ebp
c0013e60:	0f 84 92 01 00 00    	je     c0013ff8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e66:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e68:	75 a2                	jne    c0013e0c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e6a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e74:	01 d0                	add    eax,edx
c0013e76:	66 90                	xchg   ax,ax
c0013e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e7c:	83 ec 0c             	sub    esp,0xc
c0013e7f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e85:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e88:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e8e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e95:	50                   	push   eax
c0013e96:	e8 1d fe ff ff       	call   c0013cb8 <unblockTask(ThreadControlBlock*)>
c0013e9b:	83 c4 10             	add    esp,0x10
c0013e9e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ea1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ea5:	89 f7                	mov    edi,esi
c0013ea7:	41                   	inc    ecx
c0013ea8:	83 f9 10             	cmp    ecx,0x10
c0013eab:	0f 85 67 ff ff ff    	jne    c0013e18 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0013eb4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013eba:	85 c0                	test   eax,eax
c0013ebc:	74 62                	je     c0013f20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ebe:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013ec4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013eca:	74 54                	je     c0013f20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ecc:	83 ec 0c             	sub    esp,0xc
c0013ecf:	68 84 51 02 c0       	push   0xc0025184
c0013ed4:	e8 63 88 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ed9:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013ee0:	89 c7                	mov    edi,eax
c0013ee2:	e8 39 88 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013ee7:	83 c4 10             	add    esp,0x10
c0013eea:	84 c0                	test   al,al
c0013eec:	0f 84 ce 00 00 00    	je     c0013fc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013ef2:	66 90                	xchg   ax,ax
c0013ef4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ef7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013efd:	85 d2                	test   edx,edx
c0013eff:	74 0f                	je     c0013f10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f01:	83 ec 0c             	sub    esp,0xc
c0013f04:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f06:	52                   	push   edx
c0013f07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f0a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f0d:	83 c4 10             	add    esp,0x10
c0013f10:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f1a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f20:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013f26:	85 db                	test   ebx,ebx
c0013f28:	74 16                	je     c0013f40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f2a:	83 ec 0c             	sub    esp,0xc
c0013f2d:	53                   	push   ebx
c0013f2e:	e8 d5 58 ff ff       	call   c0009808 <VAS::~VAS()>
c0013f33:	58                   	pop    eax
c0013f34:	5a                   	pop    edx
c0013f35:	6a 14                	push   0x14
c0013f37:	53                   	push   ebx
c0013f38:	e8 4a 65 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c0013f3d:	83 c4 10             	add    esp,0x10
c0013f40:	83 c4 1c             	add    esp,0x1c
c0013f43:	5b                   	pop    ebx
c0013f44:	5e                   	pop    esi
c0013f45:	5f                   	pop    edi
c0013f46:	5d                   	pop    ebp
c0013f47:	c3                   	ret    
c0013f48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	68 ac ec 01 c0       	push   0xc001ecac
c0013f54:	e8 a6 c2 ff ff       	call   c00101ff <KePanic(char const*)>
c0013f59:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f5c:	83 c4 10             	add    esp,0x10
c0013f5f:	89 f7                	mov    edi,esi
c0013f61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f65:	e9 a2 fe ff ff       	jmp    c0013e0c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f6a:	66 90                	xchg   ax,ax
c0013f6c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f72:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f78:	75 1e                	jne    c0013f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	68 14 ed 01 c0       	push   0xc001ed14
c0013f82:	e8 f6 65 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0013f87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f8e:	e8 5d fa ff ff       	call   c00139f0 <blockTask(TaskState)>
c0013f93:	83 c4 10             	add    esp,0x10
c0013f96:	66 90                	xchg   ax,ax
c0013f98:	83 ec 08             	sub    esp,0x8
c0013f9b:	56                   	push   esi
c0013f9c:	68 84 51 02 c0       	push   0xc0025184
c0013fa1:	e8 56 88 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013fa6:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013fad:	e8 8a 87 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fb2:	83 c4 10             	add    esp,0x10
c0013fb5:	39 f8                	cmp    eax,edi
c0013fb7:	0f 84 37 ff ff ff    	je     c0013ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc0:	83 ec 0c             	sub    esp,0xc
c0013fc3:	68 84 51 02 c0       	push   0xc0025184
c0013fc8:	e8 6f 87 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fcd:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013fd4:	89 c6                	mov    esi,eax
c0013fd6:	e8 69 87 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	39 f3                	cmp    ebx,esi
c0013fe0:	74 b6                	je     c0013f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fe2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013fe5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fe8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013fee:	75 a8                	jne    c0013f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ff0:	e9 77 ff ff ff       	jmp    c0013f6c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ffc:	83 ec 0c             	sub    esp,0xc
c0013fff:	68 e0 ec 01 c0       	push   0xc001ece0
c0014004:	e9 4b ff ff ff       	jmp    c0013f54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014009:	8d 76 00             	lea    esi,[esi+0x0]
c001400c:	8b 36                	mov    esi,DWORD PTR [esi]
c001400e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014012:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014015:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014018:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001401e:	01 d7                	add    edi,edx
c0014020:	89 f8                	mov    eax,edi
c0014022:	e9 51 fe ff ff       	jmp    c0013e78 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014027:	90                   	nop

c0014028 <cleanerTaskFunction(void*)>:
c0014028:	53                   	push   ebx
c0014029:	83 ec 08             	sub    esp,0x8
c001402c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014031:	48                   	dec    eax
c0014032:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014037:	75 03                	jne    c001403c <cleanerTaskFunction(void*)+0x14>
c0014039:	fb                   	sti    
c001403a:	66 90                	xchg   ax,ax
c001403c:	fa                   	cli    
c001403d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014042:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c0014049:	8d 50 01             	lea    edx,[eax+0x1]
c001404c:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014052:	0f 84 ac 00 00 00    	je     c0014104 <cleanerTaskFunction(void*)+0xdc>
c0014058:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001405d:	85 c0                	test   eax,eax
c001405f:	75 03                	jne    c0014064 <cleanerTaskFunction(void*)+0x3c>
c0014061:	fb                   	sti    
c0014062:	66 90                	xchg   ax,ax
c0014064:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c001406b:	fa                   	cli    
c001406c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014072:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014078:	fa                   	cli    
c0014079:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001407f:	eb 2b                	jmp    c00140ac <cleanerTaskFunction(void*)+0x84>
c0014081:	8d 76 00             	lea    esi,[esi+0x0]
c0014084:	83 ec 0c             	sub    esp,0xc
c0014087:	68 6c 51 02 c0       	push   0xc002516c
c001408c:	e8 ab 86 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014091:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c0014098:	89 c3                	mov    ebx,eax
c001409a:	e8 a5 86 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001409f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140a2:	e8 b5 fc ff ff       	call   c0013d5c <cleanupTerminatedTask(ThreadControlBlock*)>
c00140a7:	83 c4 10             	add    esp,0x10
c00140aa:	66 90                	xchg   ax,ax
c00140ac:	83 ec 0c             	sub    esp,0xc
c00140af:	68 6c 51 02 c0       	push   0xc002516c
c00140b4:	e8 67 86 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	84 c0                	test   al,al
c00140be:	74 c4                	je     c0014084 <cleanerTaskFunction(void*)+0x5c>
c00140c0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140c5:	48                   	dec    eax
c00140c6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140cb:	75 03                	jne    c00140d0 <cleanerTaskFunction(void*)+0xa8>
c00140cd:	fb                   	sti    
c00140ce:	66 90                	xchg   ax,ax
c00140d0:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00140d5:	48                   	dec    eax
c00140d6:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00140db:	0f 85 4b ff ff ff    	jne    c001402c <cleanerTaskFunction(void*)+0x4>
c00140e1:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00140e6:	85 c0                	test   eax,eax
c00140e8:	0f 84 3e ff ff ff    	je     c001402c <cleanerTaskFunction(void*)+0x4>
c00140ee:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00140f8:	e8 f7 f6 ff ff       	call   c00137f4 <schedule()>
c00140fd:	e9 2a ff ff ff       	jmp    c001402c <cleanerTaskFunction(void*)+0x4>
c0014102:	66 90                	xchg   ax,ax
c0014104:	83 ec 0c             	sub    esp,0xc
c0014107:	6a 02                	push   0x2
c0014109:	e8 ba f8 ff ff       	call   c00139c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001410e:	83 c4 10             	add    esp,0x10
c0014111:	e9 4e ff ff ff       	jmp    c0014064 <cleanerTaskFunction(void*)+0x3c>
c0014116:	66 90                	xchg   ax,ax

c0014118 <terminateTask(int)>:
c0014118:	83 ec 14             	sub    esp,0x14
c001411b:	fa                   	cli    
c001411c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014122:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014128:	fa                   	cli    
c0014129:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001412f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014133:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014138:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001413b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014140:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014143:	50                   	push   eax
c0014144:	68 6c 51 02 c0       	push   0xc002516c
c0014149:	e8 ae 86 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001414e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001415d:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c0014162:	85 c0                	test   eax,eax
c0014164:	74 5e                	je     c00141c4 <terminateTask(int)+0xac>
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c0014170:	50                   	push   eax
c0014171:	e8 42 fb ff ff       	call   c0013cb8 <unblockTask(ThreadControlBlock*)>
c0014176:	83 c4 10             	add    esp,0x10
c0014179:	8d 76 00             	lea    esi,[esi+0x0]
c001417c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014181:	48                   	dec    eax
c0014182:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014187:	75 03                	jne    c001418c <terminateTask(int)+0x74>
c0014189:	fb                   	sti    
c001418a:	66 90                	xchg   ax,ax
c001418c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014191:	48                   	dec    eax
c0014192:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014197:	75 0b                	jne    c00141a4 <terminateTask(int)+0x8c>
c0014199:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c00141a0:	75 36                	jne    c00141d8 <terminateTask(int)+0xc0>
c00141a2:	66 90                	xchg   ax,ax
c00141a4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141a9:	48                   	dec    eax
c00141aa:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141af:	75 03                	jne    c00141b4 <terminateTask(int)+0x9c>
c00141b1:	fb                   	sti    
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	fa                   	cli    
c00141b5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141bb:	90                   	nop
c00141bc:	e8 33 f6 ff ff       	call   c00137f4 <schedule()>
c00141c1:	eb e1                	jmp    c00141a4 <terminateTask(int)+0x8c>
c00141c3:	90                   	nop
c00141c4:	83 ec 0c             	sub    esp,0xc
c00141c7:	68 11 ec 01 c0       	push   0xc001ec11
c00141cc:	e8 ac 63 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c00141d1:	83 c4 10             	add    esp,0x10
c00141d4:	eb a6                	jmp    c001417c <terminateTask(int)+0x64>
c00141d6:	66 90                	xchg   ax,ax
c00141d8:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00141e2:	eb d8                	jmp    c00141bc <terminateTask(int)+0xa4>

c00141e4 <Thr::terminateFromIRQ(int)>:
c00141e4:	83 ec 18             	sub    esp,0x18
c00141e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141eb:	50                   	push   eax
c00141ec:	e8 27 ff ff ff       	call   c0014118 <terminateTask(int)>
c00141f1:	90                   	nop
c00141f2:	66 90                	xchg   ax,ax

c00141f4 <Semaphore::release()>:
c00141f4:	83 ec 0c             	sub    esp,0xc
c00141f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141fb:	fa                   	cli    
c00141fc:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014201:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014207:	8d 48 01             	lea    ecx,[eax+0x1]
c001420a:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0014210:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014213:	85 c9                	test   ecx,ecx
c0014215:	74 41                	je     c0014258 <Semaphore::release()+0x64>
c0014217:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001421a:	83 ec 0c             	sub    esp,0xc
c001421d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014220:	51                   	push   ecx
c0014221:	e8 92 fa ff ff       	call   c0013cb8 <unblockTask(ThreadControlBlock*)>
c0014226:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001422b:	83 c4 10             	add    esp,0x10
c001422e:	48                   	dec    eax
c001422f:	90                   	nop
c0014230:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014235:	85 c0                	test   eax,eax
c0014237:	75 0b                	jne    c0014244 <Semaphore::release()+0x50>
c0014239:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c001423e:	85 c0                	test   eax,eax
c0014240:	75 1e                	jne    c0014260 <Semaphore::release()+0x6c>
c0014242:	66 90                	xchg   ax,ax
c0014244:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014249:	48                   	dec    eax
c001424a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001424f:	75 03                	jne    c0014254 <Semaphore::release()+0x60>
c0014251:	fb                   	sti    
c0014252:	66 90                	xchg   ax,ax
c0014254:	83 c4 0c             	add    esp,0xc
c0014257:	c3                   	ret    
c0014258:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001425b:	eb d3                	jmp    c0014230 <Semaphore::release()+0x3c>
c001425d:	8d 76 00             	lea    esi,[esi+0x0]
c0014260:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001426a:	e8 85 f5 ff ff       	call   c00137f4 <schedule()>
c001426f:	eb d3                	jmp    c0014244 <Semaphore::release()+0x50>
c0014271:	8d 76 00             	lea    esi,[esi+0x0]

c0014274 <__static_initialization_and_destruction_0(int, int)>:
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001427c:	0f 85 8e 00 00 00    	jne    c0014310 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014282:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001428a:	0f 85 80 00 00 00    	jne    c0014310 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014290:	83 ec 0c             	sub    esp,0xc
c0014293:	68 84 51 02 c0       	push   0xc0025184
c0014298:	e8 0b 88 00 00       	call   c001caa8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001429d:	83 c4 10             	add    esp,0x10
c00142a0:	83 ec 04             	sub    esp,0x4
c00142a3:	68 c4 f7 01 c0       	push   0xc001f7c4
c00142a8:	68 84 51 02 c0       	push   0xc0025184
c00142ad:	68 58 ca 01 c0       	push   0xc001ca58
c00142b2:	e8 80 61 ff ff       	call   c000a437 <__cxa_atexit>
c00142b7:	83 c4 10             	add    esp,0x10
c00142ba:	83 ec 0c             	sub    esp,0xc
c00142bd:	68 78 51 02 c0       	push   0xc0025178
c00142c2:	e8 e1 87 00 00       	call   c001caa8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142c7:	83 c4 10             	add    esp,0x10
c00142ca:	83 ec 04             	sub    esp,0x4
c00142cd:	68 c4 f7 01 c0       	push   0xc001f7c4
c00142d2:	68 78 51 02 c0       	push   0xc0025178
c00142d7:	68 58 ca 01 c0       	push   0xc001ca58
c00142dc:	e8 56 61 ff ff       	call   c000a437 <__cxa_atexit>
c00142e1:	83 c4 10             	add    esp,0x10
c00142e4:	83 ec 0c             	sub    esp,0xc
c00142e7:	68 6c 51 02 c0       	push   0xc002516c
c00142ec:	e8 b7 87 00 00       	call   c001caa8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142f1:	83 c4 10             	add    esp,0x10
c00142f4:	83 ec 04             	sub    esp,0x4
c00142f7:	68 c4 f7 01 c0       	push   0xc001f7c4
c00142fc:	68 6c 51 02 c0       	push   0xc002516c
c0014301:	68 58 ca 01 c0       	push   0xc001ca58
c0014306:	e8 2c 61 ff ff       	call   c000a437 <__cxa_atexit>
c001430b:	83 c4 10             	add    esp,0x10
c001430e:	66 90                	xchg   ax,ax
c0014310:	90                   	nop
c0014311:	83 c4 0c             	add    esp,0xc
c0014314:	c3                   	ret    
c0014315:	8d 76 00             	lea    esi,[esi+0x0]

c0014318 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014318:	83 ec 0c             	sub    esp,0xc
c001431b:	83 ec 08             	sub    esp,0x8
c001431e:	68 ff ff 00 00       	push   0xffff
c0014323:	6a 01                	push   0x1
c0014325:	e8 4a ff ff ff       	call   c0014274 <__static_initialization_and_destruction_0(int, int)>
c001432a:	83 c4 10             	add    esp,0x10
c001432d:	83 c4 0c             	add    esp,0xc
c0014330:	c3                   	ret    

c0014331 <Vm::inbv(unsigned short)>:
c0014331:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014335:	66 81 fa fe fe       	cmp    dx,0xfefe
c001433a:	75 06                	jne    c0014342 <Vm::inbv(unsigned short)+0x11>
c001433c:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c0014341:	c3                   	ret    
c0014342:	ec                   	in     al,dx
c0014343:	c3                   	ret    

c0014344 <Vm::outbv(unsigned short, unsigned char)>:
c0014344:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014348:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001434c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014351:	75 25                	jne    c0014378 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014353:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014359:	8d 51 01             	lea    edx,[ecx+0x1]
c001435c:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c0014362:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c0014368:	83 fa 20             	cmp    edx,0x20
c001436b:	75 0c                	jne    c0014379 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001436d:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c0014377:	c3                   	ret    
c0014378:	ee                   	out    dx,al
c0014379:	c3                   	ret    

c001437a <Vm::realToLinear(unsigned short, unsigned short)>:
c001437a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001437f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014384:	c1 e0 04             	shl    eax,0x4
c0014387:	01 d0                	add    eax,edx
c0014389:	c3                   	ret    

c001438a <Vm::getSegment(unsigned int)>:
c001438a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001438e:	c1 e8 10             	shr    eax,0x10
c0014391:	c3                   	ret    

c0014392 <Vm::getOffset(unsigned int)>:
c0014392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014396:	c3                   	ret    

c0014397 <Vm::mainloop2()>:
c0014397:	83 ec 18             	sub    esp,0x18
c001439a:	fa                   	cli    
c001439b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143a1:	6a 02                	push   0x2
c00143a3:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c00143aa:	e8 19 f6 ff ff       	call   c00139c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143b4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00143b8:	52                   	push   edx
c00143b9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00143bd:	52                   	push   edx
c00143be:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00143c2:	52                   	push   edx
c00143c3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00143c7:	50                   	push   eax
c00143c8:	e8 42 be fe ff       	call   c000020f <goToVM86>
c00143cd:	83 c4 2c             	add    esp,0x2c
c00143d0:	c3                   	ret    

c00143d1 <Vm::mainVm8086Loop(void*)>:
c00143d1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00143d6:	48                   	dec    eax
c00143d7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00143dc:	75 01                	jne    c00143df <Vm::mainVm8086Loop(void*)+0xe>
c00143de:	fb                   	sti    
c00143df:	eb b6                	jmp    c0014397 <Vm::mainloop2()>

c00143e1 <Vm::mainloop3(unsigned long)>:
c00143e1:	83 ec 18             	sub    esp,0x18
c00143e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143e8:	fa                   	cli    
c00143e9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143ef:	6a 02                	push   0x2
c00143f1:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c00143f8:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c00143fd:	e8 c6 f5 ff ff       	call   c00139c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014402:	83 c4 1c             	add    esp,0x1c
c0014405:	eb 90                	jmp    c0014397 <Vm::mainloop2()>

c0014407 <Vm::initialise8086()>:
c0014407:	83 ec 0c             	sub    esp,0xc
c001440a:	68 80 00 00 00       	push   0x80
c001440f:	6a 00                	push   0x0
c0014411:	68 d1 43 01 c0       	push   0xc00143d1
c0014416:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001441c:	e8 b3 f1 ff ff       	call   c00135d4 <Process::createThread(void (*)(void*), void*, int)>
c0014421:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014428:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c001442d:	68 00 01 00 00       	push   0x100
c0014432:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014437:	6a 00                	push   0x0
c0014439:	6a 00                	push   0x0
c001443b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014441:	e8 20 58 ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014446:	83 c4 2c             	add    esp,0x2c
c0014449:	c3                   	ret    

c001444a <Vm::finish8086()>:
c001444a:	53                   	push   ebx
c001444b:	83 ec 08             	sub    esp,0x8
c001444e:	fa                   	cli    
c001444f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014455:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c001445c:	75 15                	jne    c0014473 <Vm::finish8086()+0x29>
c001445e:	e8 91 f3 ff ff       	call   c00137f4 <schedule()>
c0014463:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014468:	48                   	dec    eax
c0014469:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001446e:	75 de                	jne    c001444e <Vm::finish8086()+0x4>
c0014470:	fb                   	sti    
c0014471:	eb db                	jmp    c001444e <Vm::finish8086()+0x4>
c0014473:	83 ec 0c             	sub    esp,0xc
c0014476:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c001447c:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014482:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c0014489:	e8 2a f8 ff ff       	call   c0013cb8 <unblockTask(ThreadControlBlock*)>
c001448e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014493:	83 c4 10             	add    esp,0x10
c0014496:	8d 50 ff             	lea    edx,[eax-0x1]
c0014499:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001449f:	85 d2                	test   edx,edx
c00144a1:	75 01                	jne    c00144a4 <Vm::finish8086()+0x5a>
c00144a3:	fb                   	sti    
c00144a4:	89 d8                	mov    eax,ebx
c00144a6:	83 c4 08             	add    esp,0x8
c00144a9:	5b                   	pop    ebx
c00144aa:	c3                   	ret    

c00144ab <Vm::getOutput8086(unsigned char*)>:
c00144ab:	57                   	push   edi
c00144ac:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00144b2:	56                   	push   esi
c00144b3:	be e0 51 02 c0       	mov    esi,0xc00251e0
c00144b8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144be:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c00144c3:	5e                   	pop    esi
c00144c4:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00144ce:	5f                   	pop    edi
c00144cf:	c3                   	ret    

c00144d0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00144d0:	55                   	push   ebp
c00144d1:	57                   	push   edi
c00144d2:	56                   	push   esi
c00144d3:	53                   	push   ebx
c00144d4:	83 ec 0c             	sub    esp,0xc
c00144d7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00144df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00144e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00144e7:	fa                   	cli    
c00144e8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00144ee:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c00144f5:	75 15                	jne    c001450c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144f7:	e8 f8 f2 ff ff       	call   c00137f4 <schedule()>
c00144fc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014501:	48                   	dec    eax
c0014502:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014507:	75 de                	jne    c00144e7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014509:	fb                   	sti    
c001450a:	eb db                	jmp    c00144e7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001450c:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014511:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001451b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001451f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014523:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014527:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001452b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001452f:	0f b7 ff             	movzx  edi,di
c0014532:	0f b7 f6             	movzx  esi,si
c0014535:	50                   	push   eax
c0014536:	6a 20                	push   0x20
c0014538:	6a 00                	push   0x0
c001453a:	68 e0 51 02 c0       	push   0xc00251e0
c001453f:	e8 8c bf fe ff       	call   c00004d0 <memset>
c0014544:	5a                   	pop    edx
c0014545:	59                   	pop    ecx
c0014546:	57                   	push   edi
c0014547:	56                   	push   esi
c0014548:	e8 2d fe ff ff       	call   c001437a <Vm::realToLinear(unsigned short, unsigned short)>
c001454d:	83 c4 10             	add    esp,0x10
c0014550:	89 c7                	mov    edi,eax
c0014552:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014556:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001455a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001455c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014561:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014568:	48                   	dec    eax
c0014569:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001456e:	75 01                	jne    c0014571 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014570:	fb                   	sti    
c0014571:	83 ec 0c             	sub    esp,0xc
c0014574:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001457a:	e8 39 f7 ff ff       	call   c0013cb8 <unblockTask(ThreadControlBlock*)>
c001457f:	83 c4 1c             	add    esp,0x1c
c0014582:	b0 01                	mov    al,0x1
c0014584:	5b                   	pop    ebx
c0014585:	5e                   	pop    esi
c0014586:	5f                   	pop    edi
c0014587:	5d                   	pop    ebp
c0014588:	c3                   	ret    

c0014589 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014589:	55                   	push   ebp
c001458a:	57                   	push   edi
c001458b:	56                   	push   esi
c001458c:	53                   	push   ebx
c001458d:	83 ec 2c             	sub    esp,0x2c
c0014590:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014594:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014598:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001459c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00145a0:	fa                   	cli    
c00145a1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00145a7:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c00145ae:	89 f0                	mov    eax,esi
c00145b0:	84 c0                	test   al,al
c00145b2:	75 1d                	jne    c00145d1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00145b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00145b8:	e8 37 f2 ff ff       	call   c00137f4 <schedule()>
c00145bd:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00145c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145c6:	48                   	dec    eax
c00145c7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00145cc:	75 d2                	jne    c00145a0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145ce:	fb                   	sti    
c00145cf:	eb cf                	jmp    c00145a0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145d1:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00145d6:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00145e0:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00145e4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145e8:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00145ec:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00145f0:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145f4:	50                   	push   eax
c00145f5:	6a 20                	push   0x20
c00145f7:	6a 00                	push   0x0
c00145f9:	68 e0 51 02 c0       	push   0xc00251e0
c00145fe:	e8 cd be fe ff       	call   c00004d0 <memset>
c0014603:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001460a:	e8 aa 31 ff ff       	call   c00077b9 <malloc>
c001460f:	83 c4 0c             	add    esp,0xc
c0014612:	89 c3                	mov    ebx,eax
c0014614:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001461a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001461e:	50                   	push   eax
c001461f:	e8 ce 64 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0014624:	83 c4 10             	add    esp,0x10
c0014627:	85 db                	test   ebx,ebx
c0014629:	75 0a                	jne    c0014635 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001462b:	83 ec 0c             	sub    esp,0xc
c001462e:	68 3c ed 01 c0       	push   0xc001ed3c
c0014633:	eb 3e                	jmp    c0014673 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014635:	50                   	push   eax
c0014636:	8d 44 24 17          	lea    eax,[esp+0x17]
c001463a:	50                   	push   eax
c001463b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001463f:	50                   	push   eax
c0014640:	53                   	push   ebx
c0014641:	e8 18 68 ff ff       	call   c000ae5e <File::stat(unsigned long long*, bool*)>
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001464e:	74 0a                	je     c001465a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014650:	83 ec 0c             	sub    esp,0xc
c0014653:	68 50 ed 01 c0       	push   0xc001ed50
c0014658:	eb 19                	jmp    c0014673 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001465a:	51                   	push   ecx
c001465b:	51                   	push   ecx
c001465c:	6a 01                	push   0x1
c001465e:	53                   	push   ebx
c001465f:	e8 4e 65 ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c0014664:	83 c4 10             	add    esp,0x10
c0014667:	85 c0                	test   eax,eax
c0014669:	74 24                	je     c001468f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001466b:	83 ec 0c             	sub    esp,0xc
c001466e:	68 69 ed 01 c0       	push   0xc001ed69
c0014673:	e8 87 bb ff ff       	call   c00101ff <KePanic(char const*)>
c0014678:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001467d:	83 c4 10             	add    esp,0x10
c0014680:	48                   	dec    eax
c0014681:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014686:	85 c0                	test   eax,eax
c0014688:	75 01                	jne    c001468b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001468a:	fb                   	sti    
c001468b:	31 f6                	xor    esi,esi
c001468d:	eb 58                	jmp    c00146e7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001468f:	0f b7 ed             	movzx  ebp,bp
c0014692:	50                   	push   eax
c0014693:	0f b7 ff             	movzx  edi,di
c0014696:	50                   	push   eax
c0014697:	55                   	push   ebp
c0014698:	57                   	push   edi
c0014699:	e8 dc fc ff ff       	call   c001437a <Vm::realToLinear(unsigned short, unsigned short)>
c001469e:	5a                   	pop    edx
c001469f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00146a1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00146a5:	51                   	push   ecx
c00146a6:	50                   	push   eax
c00146a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146af:	53                   	push   ebx
c00146b0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00146b3:	83 c4 14             	add    esp,0x14
c00146b6:	53                   	push   ebx
c00146b7:	e8 54 65 ff ff       	call   c000ac10 <File::close()>
c00146bc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00146c1:	83 c4 10             	add    esp,0x10
c00146c4:	48                   	dec    eax
c00146c5:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c00146cc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00146d1:	85 c0                	test   eax,eax
c00146d3:	75 01                	jne    c00146d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00146d5:	fb                   	sti    
c00146d6:	83 ec 0c             	sub    esp,0xc
c00146d9:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c00146df:	e8 d4 f5 ff ff       	call   c0013cb8 <unblockTask(ThreadControlBlock*)>
c00146e4:	83 c4 10             	add    esp,0x10
c00146e7:	83 c4 2c             	add    esp,0x2c
c00146ea:	89 f0                	mov    eax,esi
c00146ec:	5b                   	pop    ebx
c00146ed:	5e                   	pop    esi
c00146ee:	5f                   	pop    edi
c00146ef:	5d                   	pop    ebp
c00146f0:	c3                   	ret    

c00146f1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00146f1:	57                   	push   edi
c00146f2:	56                   	push   esi
c00146f3:	53                   	push   ebx
c00146f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014700:	83 e8 06             	sub    eax,0x6
c0014703:	0f b7 c0             	movzx  eax,ax
c0014706:	50                   	push   eax
c0014707:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001470c:	50                   	push   eax
c001470d:	e8 68 fc ff ff       	call   c001437a <Vm::realToLinear(unsigned short, unsigned short)>
c0014712:	5a                   	pop    edx
c0014713:	5e                   	pop    esi
c0014714:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014717:	8d 56 fa             	lea    edx,[esi-0x6]
c001471a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014720:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014723:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014726:	83 c2 02             	add    edx,0x2
c0014729:	66 89 10             	mov    WORD PTR [eax],dx
c001472c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001472f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014733:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014736:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001473a:	89 d6                	mov    esi,edx
c001473c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014742:	66 81 e6 ff fd       	and    si,0xfdff
c0014747:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001474b:	74 07                	je     c0014754 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001474d:	89 d6                	mov    esi,edx
c001474f:	66 81 ce 00 02       	or     si,0x200
c0014754:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014758:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001475d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014761:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014769:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001476c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014774:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014777:	5b                   	pop    ebx
c0014778:	5e                   	pop    esi
c0014779:	5f                   	pop    edi
c001477a:	c3                   	ret    

c001477b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001477b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014780:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014785:	c1 e0 04             	shl    eax,0x4
c0014788:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001478b:	c3                   	ret    

c001478c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001478c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014791:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014796:	c1 e0 04             	shl    eax,0x4
c0014799:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001479d:	c3                   	ret    

c001479e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001479e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147a8:	c1 e0 04             	shl    eax,0x4
c00147ab:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00147ae:	c3                   	ret    

c00147af <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00147af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147b9:	c1 e0 04             	shl    eax,0x4
c00147bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147c0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00147c3:	c3                   	ret    

c00147c4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00147c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147ce:	c1 e0 04             	shl    eax,0x4
c00147d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147d5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00147d9:	c3                   	ret    

c00147da <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00147da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147e4:	c1 e0 04             	shl    eax,0x4
c00147e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147eb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00147ee:	c3                   	ret    

c00147ef <Vm::faultHandler(regs*)>:
c00147ef:	55                   	push   ebp
c00147f0:	57                   	push   edi
c00147f1:	56                   	push   esi
c00147f2:	53                   	push   ebx
c00147f3:	83 ec 1c             	sub    esp,0x1c
c00147f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147fa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00147fd:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014801:	0f b7 f8             	movzx  edi,ax
c0014804:	52                   	push   edx
c0014805:	0f b7 c0             	movzx  eax,ax
c0014808:	50                   	push   eax
c0014809:	e8 6c fb ff ff       	call   c001437a <Vm::realToLinear(unsigned short, unsigned short)>
c001480e:	5a                   	pop    edx
c001480f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014812:	59                   	pop    ecx
c0014813:	89 c1                	mov    ecx,eax
c0014815:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014818:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001481c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014821:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014825:	0f b7 c5             	movzx  eax,bp
c0014828:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001482c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014830:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014834:	e8 41 fb ff ff       	call   c001437a <Vm::realToLinear(unsigned short, unsigned short)>
c0014839:	5e                   	pop    esi
c001483a:	be 06 00 00 00       	mov    esi,0x6
c001483f:	5a                   	pop    edx
c0014840:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014845:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001484a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001484d:	80 fa 9d             	cmp    dl,0x9d
c0014850:	0f 84 2c 02 00 00    	je     c0014a82 <Vm::faultHandler(regs*)+0x293>
c0014856:	0f 87 91 00 00 00    	ja     c00148ed <Vm::faultHandler(regs*)+0xfe>
c001485c:	80 fa 66             	cmp    dl,0x66
c001485f:	0f 84 98 01 00 00    	je     c00149fd <Vm::faultHandler(regs*)+0x20e>
c0014865:	77 47                	ja     c00148ae <Vm::faultHandler(regs*)+0xbf>
c0014867:	80 fa 36             	cmp    dl,0x36
c001486a:	0f 84 80 01 00 00    	je     c00149f0 <Vm::faultHandler(regs*)+0x201>
c0014870:	77 1a                	ja     c001488c <Vm::faultHandler(regs*)+0x9d>
c0014872:	80 fa 26             	cmp    dl,0x26
c0014875:	0f 84 4e 01 00 00    	je     c00149c9 <Vm::faultHandler(regs*)+0x1da>
c001487b:	80 fa 2e             	cmp    dl,0x2e
c001487e:	0f 85 e2 05 00 00    	jne    c0014e66 <Vm::faultHandler(regs*)+0x677>
c0014884:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014887:	31 f6                	xor    esi,esi
c0014889:	41                   	inc    ecx
c001488a:	eb be                	jmp    c001484a <Vm::faultHandler(regs*)+0x5b>
c001488c:	80 fa 64             	cmp    dl,0x64
c001488f:	0f 84 41 01 00 00    	je     c00149d6 <Vm::faultHandler(regs*)+0x1e7>
c0014895:	0f 87 48 01 00 00    	ja     c00149e3 <Vm::faultHandler(regs*)+0x1f4>
c001489b:	80 fa 3e             	cmp    dl,0x3e
c001489e:	0f 85 c2 05 00 00    	jne    c0014e66 <Vm::faultHandler(regs*)+0x677>
c00148a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148a7:	be 01 00 00 00       	mov    esi,0x1
c00148ac:	eb db                	jmp    c0014889 <Vm::faultHandler(regs*)+0x9a>
c00148ae:	80 fa 6d             	cmp    dl,0x6d
c00148b1:	0f 84 ec 02 00 00    	je     c0014ba3 <Vm::faultHandler(regs*)+0x3b4>
c00148b7:	77 17                	ja     c00148d0 <Vm::faultHandler(regs*)+0xe1>
c00148b9:	80 fa 67             	cmp    dl,0x67
c00148bc:	0f 84 48 01 00 00    	je     c0014a0a <Vm::faultHandler(regs*)+0x21b>
c00148c2:	80 fa 6c             	cmp    dl,0x6c
c00148c5:	0f 84 69 02 00 00    	je     c0014b34 <Vm::faultHandler(regs*)+0x345>
c00148cb:	e9 96 05 00 00       	jmp    c0014e66 <Vm::faultHandler(regs*)+0x677>
c00148d0:	80 fa 6f             	cmp    dl,0x6f
c00148d3:	0f 84 f4 03 00 00    	je     c0014ccd <Vm::faultHandler(regs*)+0x4de>
c00148d9:	0f 82 59 03 00 00    	jb     c0014c38 <Vm::faultHandler(regs*)+0x449>
c00148df:	80 fa 9c             	cmp    dl,0x9c
c00148e2:	0f 84 2f 01 00 00    	je     c0014a17 <Vm::faultHandler(regs*)+0x228>
c00148e8:	e9 79 05 00 00       	jmp    c0014e66 <Vm::faultHandler(regs*)+0x677>
c00148ed:	80 fa ec             	cmp    dl,0xec
c00148f0:	0f 84 14 05 00 00    	je     c0014e0a <Vm::faultHandler(regs*)+0x61b>
c00148f6:	77 7b                	ja     c0014973 <Vm::faultHandler(regs*)+0x184>
c00148f8:	80 fa e4             	cmp    dl,0xe4
c00148fb:	0f 84 93 04 00 00    	je     c0014d94 <Vm::faultHandler(regs*)+0x5a5>
c0014901:	77 53                	ja     c0014956 <Vm::faultHandler(regs*)+0x167>
c0014903:	80 fa cd             	cmp    dl,0xcd
c0014906:	0f 84 d9 01 00 00    	je     c0014ae5 <Vm::faultHandler(regs*)+0x2f6>
c001490c:	80 fa cf             	cmp    dl,0xcf
c001490f:	0f 85 51 05 00 00    	jne    c0014e66 <Vm::faultHandler(regs*)+0x677>
c0014915:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014918:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001491b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001491f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014922:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014926:	81 ca 00 02 02 00    	or     edx,0x20200
c001492c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001492f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014933:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014939:	66 c1 e8 09          	shr    ax,0x9
c001493d:	83 e0 01             	and    eax,0x1
c0014940:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014943:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014946:	83 c0 06             	add    eax,0x6
c0014949:	25 ff ff 00 00       	and    eax,0xffff
c001494e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014951:	e9 0c 05 00 00       	jmp    c0014e62 <Vm::faultHandler(regs*)+0x673>
c0014956:	80 fa e6             	cmp    dl,0xe6
c0014959:	0f 84 7f 04 00 00    	je     c0014dde <Vm::faultHandler(regs*)+0x5ef>
c001495f:	0f 82 4b 04 00 00    	jb     c0014db0 <Vm::faultHandler(regs*)+0x5c1>
c0014965:	80 fa e7             	cmp    dl,0xe7
c0014968:	0f 84 87 04 00 00    	je     c0014df5 <Vm::faultHandler(regs*)+0x606>
c001496e:	e9 f3 04 00 00       	jmp    c0014e66 <Vm::faultHandler(regs*)+0x677>
c0014973:	80 fa ef             	cmp    dl,0xef
c0014976:	0f 84 d1 04 00 00    	je     c0014e4d <Vm::faultHandler(regs*)+0x65e>
c001497c:	77 28                	ja     c00149a6 <Vm::faultHandler(regs*)+0x1b7>
c001497e:	80 fa ed             	cmp    dl,0xed
c0014981:	0f 84 9f 04 00 00    	je     c0014e26 <Vm::faultHandler(regs*)+0x637>
c0014987:	80 fa ee             	cmp    dl,0xee
c001498a:	0f 85 d6 04 00 00    	jne    c0014e66 <Vm::faultHandler(regs*)+0x677>
c0014990:	50                   	push   eax
c0014991:	50                   	push   eax
c0014992:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014996:	50                   	push   eax
c0014997:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001499b:	50                   	push   eax
c001499c:	e8 a3 f9 ff ff       	call   c0014344 <Vm::outbv(unsigned short, unsigned char)>
c00149a1:	e9 9f 04 00 00       	jmp    c0014e45 <Vm::faultHandler(regs*)+0x656>
c00149a6:	80 fa fa             	cmp    dl,0xfa
c00149a9:	0f 84 69 01 00 00    	je     c0014b18 <Vm::faultHandler(regs*)+0x329>
c00149af:	80 fa fb             	cmp    dl,0xfb
c00149b2:	0f 84 6e 01 00 00    	je     c0014b26 <Vm::faultHandler(regs*)+0x337>
c00149b8:	80 fa f3             	cmp    dl,0xf3
c00149bb:	0f 85 a5 04 00 00    	jne    c0014e66 <Vm::faultHandler(regs*)+0x677>
c00149c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149c4:	e9 c0 fe ff ff       	jmp    c0014889 <Vm::faultHandler(regs*)+0x9a>
c00149c9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149cc:	be 02 00 00 00       	mov    esi,0x2
c00149d1:	e9 b3 fe ff ff       	jmp    c0014889 <Vm::faultHandler(regs*)+0x9a>
c00149d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149d9:	be 03 00 00 00       	mov    esi,0x3
c00149de:	e9 a6 fe ff ff       	jmp    c0014889 <Vm::faultHandler(regs*)+0x9a>
c00149e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149e6:	be 04 00 00 00       	mov    esi,0x4
c00149eb:	e9 99 fe ff ff       	jmp    c0014889 <Vm::faultHandler(regs*)+0x9a>
c00149f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149f3:	be 05 00 00 00       	mov    esi,0x5
c00149f8:	e9 8c fe ff ff       	jmp    c0014889 <Vm::faultHandler(regs*)+0x9a>
c00149fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a00:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014a05:	e9 7f fe ff ff       	jmp    c0014889 <Vm::faultHandler(regs*)+0x9a>
c0014a0a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a0d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014a12:	e9 72 fe ff ff       	jmp    c0014889 <Vm::faultHandler(regs*)+0x9a>
c0014a17:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014a1e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a23:	74 30                	je     c0014a55 <Vm::faultHandler(regs*)+0x266>
c0014a25:	83 e9 04             	sub    ecx,0x4
c0014a28:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a2e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a34:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a37:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a3a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a40:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a44:	0f 84 15 04 00 00    	je     c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014a4a:	80 ce 02             	or     dh,0x2
c0014a4d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a50:	e9 0a 04 00 00       	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014a55:	83 e9 02             	sub    ecx,0x2
c0014a58:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a5e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a61:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a65:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a6b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a6f:	74 05                	je     c0014a76 <Vm::faultHandler(regs*)+0x287>
c0014a71:	80 ce 02             	or     dh,0x2
c0014a74:	eb 03                	jmp    c0014a79 <Vm::faultHandler(regs*)+0x28a>
c0014a76:	80 e6 fd             	and    dh,0xfd
c0014a79:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a7d:	e9 dd 03 00 00       	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014a82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a87:	74 2a                	je     c0014ab3 <Vm::faultHandler(regs*)+0x2c4>
c0014a89:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a8b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a91:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a97:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a9c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014aa2:	c1 e8 09             	shr    eax,0x9
c0014aa5:	83 e0 01             	and    eax,0x1
c0014aa8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014aab:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014aae:	83 c0 04             	add    eax,0x4
c0014ab1:	eb 25                	jmp    c0014ad8 <Vm::faultHandler(regs*)+0x2e9>
c0014ab3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014ab6:	81 ca 00 02 02 00    	or     edx,0x20200
c0014abc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014abf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014ac2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014ac8:	66 c1 e8 09          	shr    ax,0x9
c0014acc:	83 e0 01             	and    eax,0x1
c0014acf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014ad2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ad5:	83 c0 02             	add    eax,0x2
c0014ad8:	25 ff ff 00 00       	and    eax,0xffff
c0014add:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014ae0:	e9 7a 03 00 00       	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014ae5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ae9:	3c ee                	cmp    al,0xee
c0014aeb:	75 10                	jne    c0014afd <Vm::faultHandler(regs*)+0x30e>
c0014aed:	83 ec 0c             	sub    esp,0xc
c0014af0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014af3:	e8 e9 f8 ff ff       	call   c00143e1 <Vm::mainloop3(unsigned long)>
c0014af8:	e9 4b 03 00 00       	jmp    c0014e48 <Vm::faultHandler(regs*)+0x659>
c0014afd:	83 ec 0c             	sub    esp,0xc
c0014b00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b08:	51                   	push   ecx
c0014b09:	50                   	push   eax
c0014b0a:	53                   	push   ebx
c0014b0b:	e8 e1 fb ff ff       	call   c00146f1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014b10:	83 c4 20             	add    esp,0x20
c0014b13:	e9 4a 03 00 00       	jmp    c0014e62 <Vm::faultHandler(regs*)+0x673>
c0014b18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b1d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014b21:	e9 39 03 00 00       	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014b26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b2b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014b2f:	e9 2b 03 00 00       	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014b34:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b37:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b3c:	74 2b                	je     c0014b69 <Vm::faultHandler(regs*)+0x37a>
c0014b3e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b45:	76 22                	jbe    c0014b69 <Vm::faultHandler(regs*)+0x37a>
c0014b47:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b4b:	50                   	push   eax
c0014b4c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b50:	50                   	push   eax
c0014b51:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b55:	50                   	push   eax
c0014b56:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b5a:	50                   	push   eax
c0014b5b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b5f:	50                   	push   eax
c0014b60:	6a 6c                	push   0x6c
c0014b62:	6a 6c                	push   0x6c
c0014b64:	e9 b9 01 00 00       	jmp    c0014d22 <Vm::faultHandler(regs*)+0x533>
c0014b69:	83 ec 0c             	sub    esp,0xc
c0014b6c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b70:	0f b7 f6             	movzx  esi,si
c0014b73:	50                   	push   eax
c0014b74:	e8 b8 f7 ff ff       	call   c0014331 <Vm::inbv(unsigned short)>
c0014b79:	83 c4 0c             	add    esp,0xc
c0014b7c:	0f b6 c0             	movzx  eax,al
c0014b7f:	50                   	push   eax
c0014b80:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b84:	50                   	push   eax
c0014b85:	56                   	push   esi
c0014b86:	e8 24 fc ff ff       	call   c00147af <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b8b:	83 c4 10             	add    esp,0x10
c0014b8e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b91:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b95:	74 03                	je     c0014b9a <Vm::faultHandler(regs*)+0x3ab>
c0014b97:	48                   	dec    eax
c0014b98:	eb 01                	jmp    c0014b9b <Vm::faultHandler(regs*)+0x3ac>
c0014b9a:	40                   	inc    eax
c0014b9b:	0f b7 c0             	movzx  eax,ax
c0014b9e:	e9 8d 00 00 00       	jmp    c0014c30 <Vm::faultHandler(regs*)+0x441>
c0014ba3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014ba6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ba9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bae:	74 29                	je     c0014bd9 <Vm::faultHandler(regs*)+0x3ea>
c0014bb0:	3d ff ff 00 00       	cmp    eax,0xffff
c0014bb5:	76 22                	jbe    c0014bd9 <Vm::faultHandler(regs*)+0x3ea>
c0014bb7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014bbb:	50                   	push   eax
c0014bbc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014bc0:	50                   	push   eax
c0014bc1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014bc5:	50                   	push   eax
c0014bc6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014bca:	50                   	push   eax
c0014bcb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bcf:	50                   	push   eax
c0014bd0:	6a 6d                	push   0x6d
c0014bd2:	6a 6d                	push   0x6d
c0014bd4:	e9 49 01 00 00       	jmp    c0014d22 <Vm::faultHandler(regs*)+0x533>
c0014bd9:	0f b7 c8             	movzx  ecx,ax
c0014bdc:	0f b7 f6             	movzx  esi,si
c0014bdf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014be2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014be7:	74 20                	je     c0014c09 <Vm::faultHandler(regs*)+0x41a>
c0014be9:	ed                   	in     eax,dx
c0014bea:	55                   	push   ebp
c0014beb:	50                   	push   eax
c0014bec:	51                   	push   ecx
c0014bed:	56                   	push   esi
c0014bee:	e8 e7 fb ff ff       	call   c00147da <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014bf3:	83 c4 10             	add    esp,0x10
c0014bf6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bf9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bfd:	74 05                	je     c0014c04 <Vm::faultHandler(regs*)+0x415>
c0014bff:	83 e8 04             	sub    eax,0x4
c0014c02:	eb 27                	jmp    c0014c2b <Vm::faultHandler(regs*)+0x43c>
c0014c04:	83 c0 04             	add    eax,0x4
c0014c07:	eb 22                	jmp    c0014c2b <Vm::faultHandler(regs*)+0x43c>
c0014c09:	66 ed                	in     ax,dx
c0014c0b:	0f b7 c0             	movzx  eax,ax
c0014c0e:	57                   	push   edi
c0014c0f:	50                   	push   eax
c0014c10:	51                   	push   ecx
c0014c11:	56                   	push   esi
c0014c12:	e8 ad fb ff ff       	call   c00147c4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c17:	83 c4 10             	add    esp,0x10
c0014c1a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c1d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c21:	74 05                	je     c0014c28 <Vm::faultHandler(regs*)+0x439>
c0014c23:	83 e8 02             	sub    eax,0x2
c0014c26:	eb 03                	jmp    c0014c2b <Vm::faultHandler(regs*)+0x43c>
c0014c28:	83 c0 02             	add    eax,0x2
c0014c2b:	25 ff ff 00 00       	and    eax,0xffff
c0014c30:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014c33:	e9 27 02 00 00       	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014c38:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c3b:	3c 05                	cmp    al,0x5
c0014c3d:	77 24                	ja     c0014c63 <Vm::faultHandler(regs*)+0x474>
c0014c3f:	0f b6 c0             	movzx  eax,al
c0014c42:	ff 24 85 dc ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1224]
c0014c49:	0f b7 fd             	movzx  edi,bp
c0014c4c:	eb 15                	jmp    c0014c63 <Vm::faultHandler(regs*)+0x474>
c0014c4e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c52:	eb 0f                	jmp    c0014c63 <Vm::faultHandler(regs*)+0x474>
c0014c54:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c58:	eb 09                	jmp    c0014c63 <Vm::faultHandler(regs*)+0x474>
c0014c5a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c5e:	eb 03                	jmp    c0014c63 <Vm::faultHandler(regs*)+0x474>
c0014c60:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c63:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c66:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c6b:	74 29                	je     c0014c96 <Vm::faultHandler(regs*)+0x4a7>
c0014c6d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c72:	76 22                	jbe    c0014c96 <Vm::faultHandler(regs*)+0x4a7>
c0014c74:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c78:	50                   	push   eax
c0014c79:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c7d:	50                   	push   eax
c0014c7e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c82:	50                   	push   eax
c0014c83:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c87:	50                   	push   eax
c0014c88:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c8c:	50                   	push   eax
c0014c8d:	6a 6e                	push   0x6e
c0014c8f:	6a 6e                	push   0x6e
c0014c91:	e9 8c 00 00 00       	jmp    c0014d22 <Vm::faultHandler(regs*)+0x533>
c0014c96:	0f b7 c0             	movzx  eax,ax
c0014c99:	52                   	push   edx
c0014c9a:	52                   	push   edx
c0014c9b:	50                   	push   eax
c0014c9c:	57                   	push   edi
c0014c9d:	e8 d9 fa ff ff       	call   c001477b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014ca2:	59                   	pop    ecx
c0014ca3:	0f b6 c0             	movzx  eax,al
c0014ca6:	5e                   	pop    esi
c0014ca7:	50                   	push   eax
c0014ca8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014cac:	50                   	push   eax
c0014cad:	e8 92 f6 ff ff       	call   c0014344 <Vm::outbv(unsigned short, unsigned char)>
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014cb8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cbc:	74 03                	je     c0014cc1 <Vm::faultHandler(regs*)+0x4d2>
c0014cbe:	48                   	dec    eax
c0014cbf:	eb 01                	jmp    c0014cc2 <Vm::faultHandler(regs*)+0x4d3>
c0014cc1:	40                   	inc    eax
c0014cc2:	0f b7 c0             	movzx  eax,ax
c0014cc5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014cc8:	e9 92 01 00 00       	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014ccd:	8d 46 ff             	lea    eax,[esi-0x1]
c0014cd0:	3c 05                	cmp    al,0x5
c0014cd2:	77 1f                	ja     c0014cf3 <Vm::faultHandler(regs*)+0x504>
c0014cd4:	0f b6 c0             	movzx  eax,al
c0014cd7:	ff 24 85 f4 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe120c]
c0014cde:	89 ef                	mov    edi,ebp
c0014ce0:	eb 11                	jmp    c0014cf3 <Vm::faultHandler(regs*)+0x504>
c0014ce2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014ce5:	eb 0c                	jmp    c0014cf3 <Vm::faultHandler(regs*)+0x504>
c0014ce7:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014cea:	eb 07                	jmp    c0014cf3 <Vm::faultHandler(regs*)+0x504>
c0014cec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014cef:	eb 02                	jmp    c0014cf3 <Vm::faultHandler(regs*)+0x504>
c0014cf1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014cf3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014cf6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cfb:	74 37                	je     c0014d34 <Vm::faultHandler(regs*)+0x545>
c0014cfd:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d03:	76 2f                	jbe    c0014d34 <Vm::faultHandler(regs*)+0x545>
c0014d05:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d09:	50                   	push   eax
c0014d0a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d0e:	50                   	push   eax
c0014d0f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d13:	50                   	push   eax
c0014d14:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d18:	50                   	push   eax
c0014d19:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d1d:	50                   	push   eax
c0014d1e:	6a 6f                	push   0x6f
c0014d20:	6a 6f                	push   0x6f
c0014d22:	68 82 ed 01 c0       	push   0xc001ed82
c0014d27:	e8 51 58 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014d2c:	83 c4 20             	add    esp,0x20
c0014d2f:	e9 86 01 00 00       	jmp    c0014eba <Vm::faultHandler(regs*)+0x6cb>
c0014d34:	0f b7 d7             	movzx  edx,di
c0014d37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d3a:	0f b7 c6             	movzx  eax,si
c0014d3d:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d43:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d46:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d4b:	74 1d                	je     c0014d6a <Vm::faultHandler(regs*)+0x57b>
c0014d4d:	55                   	push   ebp
c0014d4e:	55                   	push   ebp
c0014d4f:	50                   	push   eax
c0014d50:	52                   	push   edx
c0014d51:	e8 48 fa ff ff       	call   c001479e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d56:	83 c4 10             	add    esp,0x10
c0014d59:	89 fa                	mov    edx,edi
c0014d5b:	ef                   	out    dx,eax
c0014d5c:	85 c9                	test   ecx,ecx
c0014d5e:	74 05                	je     c0014d65 <Vm::faultHandler(regs*)+0x576>
c0014d60:	83 ee 04             	sub    esi,0x4
c0014d63:	eb 21                	jmp    c0014d86 <Vm::faultHandler(regs*)+0x597>
c0014d65:	83 c6 04             	add    esi,0x4
c0014d68:	eb 1c                	jmp    c0014d86 <Vm::faultHandler(regs*)+0x597>
c0014d6a:	55                   	push   ebp
c0014d6b:	55                   	push   ebp
c0014d6c:	50                   	push   eax
c0014d6d:	52                   	push   edx
c0014d6e:	e8 19 fa ff ff       	call   c001478c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d73:	83 c4 10             	add    esp,0x10
c0014d76:	89 fa                	mov    edx,edi
c0014d78:	66 ef                	out    dx,ax
c0014d7a:	85 c9                	test   ecx,ecx
c0014d7c:	74 05                	je     c0014d83 <Vm::faultHandler(regs*)+0x594>
c0014d7e:	83 ee 02             	sub    esi,0x2
c0014d81:	eb 03                	jmp    c0014d86 <Vm::faultHandler(regs*)+0x597>
c0014d83:	83 c6 02             	add    esi,0x2
c0014d86:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d8c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d8f:	e9 cb 00 00 00       	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014d94:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d9b:	83 ec 0c             	sub    esp,0xc
c0014d9e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014da2:	50                   	push   eax
c0014da3:	e8 89 f5 ff ff       	call   c0014331 <Vm::inbv(unsigned short)>
c0014da8:	0f b6 c0             	movzx  eax,al
c0014dab:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dae:	eb 3f                	jmp    c0014def <Vm::faultHandler(regs*)+0x600>
c0014db0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014db5:	74 07                	je     c0014dbe <Vm::faultHandler(regs*)+0x5cf>
c0014db7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dbb:	ed                   	in     eax,dx
c0014dbc:	eb 14                	jmp    c0014dd2 <Vm::faultHandler(regs*)+0x5e3>
c0014dbe:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014dc1:	66 31 f6             	xor    si,si
c0014dc4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014dc7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dcb:	66 ed                	in     ax,dx
c0014dcd:	0f b7 c0             	movzx  eax,ax
c0014dd0:	09 f0                	or     eax,esi
c0014dd2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014dd5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014dd9:	e9 84 00 00 00       	jmp    c0014e62 <Vm::faultHandler(regs*)+0x673>
c0014dde:	52                   	push   edx
c0014ddf:	52                   	push   edx
c0014de0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014de4:	50                   	push   eax
c0014de5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014de9:	50                   	push   eax
c0014dea:	e8 55 f5 ff ff       	call   c0014344 <Vm::outbv(unsigned short, unsigned char)>
c0014def:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014df3:	eb 53                	jmp    c0014e48 <Vm::faultHandler(regs*)+0x659>
c0014df5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014df8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dfc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e01:	74 03                	je     c0014e06 <Vm::faultHandler(regs*)+0x617>
c0014e03:	ef                   	out    dx,eax
c0014e04:	eb cf                	jmp    c0014dd5 <Vm::faultHandler(regs*)+0x5e6>
c0014e06:	66 ef                	out    dx,ax
c0014e08:	eb cb                	jmp    c0014dd5 <Vm::faultHandler(regs*)+0x5e6>
c0014e0a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e11:	83 ec 0c             	sub    esp,0xc
c0014e14:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e18:	50                   	push   eax
c0014e19:	e8 13 f5 ff ff       	call   c0014331 <Vm::inbv(unsigned short)>
c0014e1e:	0f b6 c0             	movzx  eax,al
c0014e21:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e24:	eb 1f                	jmp    c0014e45 <Vm::faultHandler(regs*)+0x656>
c0014e26:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e29:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e2e:	74 03                	je     c0014e33 <Vm::faultHandler(regs*)+0x644>
c0014e30:	ed                   	in     eax,dx
c0014e31:	eb 0d                	jmp    c0014e40 <Vm::faultHandler(regs*)+0x651>
c0014e33:	66 ed                	in     ax,dx
c0014e35:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e38:	0f b7 c0             	movzx  eax,ax
c0014e3b:	66 31 d2             	xor    dx,dx
c0014e3e:	09 d0                	or     eax,edx
c0014e40:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e43:	eb 1a                	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014e45:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e48:	83 c4 10             	add    esp,0x10
c0014e4b:	eb 15                	jmp    c0014e62 <Vm::faultHandler(regs*)+0x673>
c0014e4d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e50:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e53:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e58:	74 03                	je     c0014e5d <Vm::faultHandler(regs*)+0x66e>
c0014e5a:	ef                   	out    dx,eax
c0014e5b:	eb 02                	jmp    c0014e5f <Vm::faultHandler(regs*)+0x670>
c0014e5d:	66 ef                	out    dx,ax
c0014e5f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e62:	b0 01                	mov    al,0x1
c0014e64:	eb 56                	jmp    c0014ebc <Vm::faultHandler(regs*)+0x6cd>
c0014e66:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e6a:	50                   	push   eax
c0014e6b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e6f:	50                   	push   eax
c0014e70:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e74:	50                   	push   eax
c0014e75:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e79:	50                   	push   eax
c0014e7a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e7e:	50                   	push   eax
c0014e7f:	52                   	push   edx
c0014e80:	52                   	push   edx
c0014e81:	68 af ed 01 c0       	push   0xc001edaf
c0014e86:	e8 f2 56 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014e8b:	83 c4 20             	add    esp,0x20
c0014e8e:	83 ec 0c             	sub    esp,0xc
c0014e91:	6a 60                	push   0x60
c0014e93:	e8 99 f4 ff ff       	call   c0014331 <Vm::inbv(unsigned short)>
c0014e98:	83 c4 10             	add    esp,0x10
c0014e9b:	3c 1c                	cmp    al,0x1c
c0014e9d:	74 04                	je     c0014ea3 <Vm::faultHandler(regs*)+0x6b4>
c0014e9f:	3c 5a                	cmp    al,0x5a
c0014ea1:	75 eb                	jne    c0014e8e <Vm::faultHandler(regs*)+0x69f>
c0014ea3:	3c 5a                	cmp    al,0x5a
c0014ea5:	74 04                	je     c0014eab <Vm::faultHandler(regs*)+0x6bc>
c0014ea7:	3c 1c                	cmp    al,0x1c
c0014ea9:	75 0f                	jne    c0014eba <Vm::faultHandler(regs*)+0x6cb>
c0014eab:	83 ec 0c             	sub    esp,0xc
c0014eae:	6a 60                	push   0x60
c0014eb0:	e8 7c f4 ff ff       	call   c0014331 <Vm::inbv(unsigned short)>
c0014eb5:	83 c4 10             	add    esp,0x10
c0014eb8:	eb e9                	jmp    c0014ea3 <Vm::faultHandler(regs*)+0x6b4>
c0014eba:	31 c0                	xor    eax,eax
c0014ebc:	83 c4 1c             	add    esp,0x1c
c0014ebf:	5b                   	pop    ebx
c0014ec0:	5e                   	pop    esi
c0014ec1:	5f                   	pop    edi
c0014ec2:	5d                   	pop    ebp
c0014ec3:	c3                   	ret    

c0014ec4 <noCopro(unsigned long)>:
c0014ec4:	c3                   	ret    

c0014ec5 <nmiHandler(regs*, void*)>:
c0014ec5:	83 ec 0c             	sub    esp,0xc
c0014ec8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014ecd:	83 ec 0c             	sub    esp,0xc
c0014ed0:	50                   	push   eax
c0014ed1:	e8 04 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014ed6:	83 c4 10             	add    esp,0x10
c0014ed9:	90                   	nop
c0014eda:	83 c4 0c             	add    esp,0xc
c0014edd:	c3                   	ret    

c0014ede <doubleFault(regs*, void*)>:
c0014ede:	55                   	push   ebp
c0014edf:	89 e5                	mov    ebp,esp
c0014ee1:	83 ec 08             	sub    esp,0x8
c0014ee4:	83 ec 0c             	sub    esp,0xc
c0014ee7:	68 0c ee 01 c0       	push   0xc001ee0c
c0014eec:	e8 0e b3 ff ff       	call   c00101ff <KePanic(char const*)>
c0014ef1:	83 c4 10             	add    esp,0x10
c0014ef4:	90                   	nop
c0014ef5:	c9                   	leave  
c0014ef6:	c3                   	ret    

c0014ef7 <displayDebugInfo(regs*)>:
c0014ef7:	83 ec 1c             	sub    esp,0x1c
c0014efa:	0f 20 c0             	mov    eax,cr0
c0014efd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f01:	0f 20 d0             	mov    eax,cr2
c0014f04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f08:	0f 20 d8             	mov    eax,cr3
c0014f0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f0f:	0f 20 e0             	mov    eax,cr4
c0014f12:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f19:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f1c:	83 ec 08             	sub    esp,0x8
c0014f1f:	50                   	push   eax
c0014f20:	68 28 ee 01 c0       	push   0xc001ee28
c0014f25:	e8 53 56 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014f2a:	83 c4 10             	add    esp,0x10
c0014f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f31:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f34:	83 ec 08             	sub    esp,0x8
c0014f37:	50                   	push   eax
c0014f38:	68 19 ee 01 c0       	push   0xc001ee19
c0014f3d:	e8 3b 56 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014f42:	83 c4 10             	add    esp,0x10
c0014f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f49:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f4c:	83 ec 08             	sub    esp,0x8
c0014f4f:	50                   	push   eax
c0014f50:	68 24 ee 01 c0       	push   0xc001ee24
c0014f55:	e8 23 56 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014f5a:	83 c4 10             	add    esp,0x10
c0014f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f61:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f64:	83 ec 08             	sub    esp,0x8
c0014f67:	50                   	push   eax
c0014f68:	68 33 ee 01 c0       	push   0xc001ee33
c0014f6d:	e8 0b 56 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014f72:	83 c4 10             	add    esp,0x10
c0014f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f79:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f7c:	83 ec 08             	sub    esp,0x8
c0014f7f:	50                   	push   eax
c0014f80:	68 3e ee 01 c0       	push   0xc001ee3e
c0014f85:	e8 f3 55 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	83 ec 08             	sub    esp,0x8
c0014f90:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f94:	68 49 ee 01 c0       	push   0xc001ee49
c0014f99:	e8 df 55 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014f9e:	83 c4 10             	add    esp,0x10
c0014fa1:	83 ec 08             	sub    esp,0x8
c0014fa4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014fa8:	68 54 ee 01 c0       	push   0xc001ee54
c0014fad:	e8 cb 55 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc0:	83 ec 0c             	sub    esp,0xc
c0014fc3:	50                   	push   eax
c0014fc4:	e8 2e 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fd1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fd7:	83 ec 08             	sub    esp,0x8
c0014fda:	68 5f ee 01 c0       	push   0xc001ee5f
c0014fdf:	50                   	push   eax
c0014fe0:	e8 51 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fe5:	83 c4 10             	add    esp,0x10
c0014fe8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ff3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014ff8:	8b 12                	mov    edx,DWORD PTR [edx]
c0014ffa:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014ffd:	83 c2 0c             	add    edx,0xc
c0015000:	83 ec 08             	sub    esp,0x8
c0015003:	52                   	push   edx
c0015004:	50                   	push   eax
c0015005:	e8 2c 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001500a:	83 c4 10             	add    esp,0x10
c001500d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015012:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015018:	83 ec 08             	sub    esp,0x8
c001501b:	68 68 ee 01 c0       	push   0xc001ee68
c0015020:	50                   	push   eax
c0015021:	e8 10 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015026:	83 c4 10             	add    esp,0x10
c0015029:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001502e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015034:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015038:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001503b:	83 ec 08             	sub    esp,0x8
c001503e:	52                   	push   edx
c001503f:	50                   	push   eax
c0015040:	e8 ab 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015045:	83 c4 10             	add    esp,0x10
c0015048:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001504d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015053:	83 ec 08             	sub    esp,0x8
c0015056:	68 70 ee 01 c0       	push   0xc001ee70
c001505b:	50                   	push   eax
c001505c:	e8 d5 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015069:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001506f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015073:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015076:	83 ec 08             	sub    esp,0x8
c0015079:	52                   	push   edx
c001507a:	50                   	push   eax
c001507b:	e8 70 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015080:	83 c4 10             	add    esp,0x10
c0015083:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015088:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001508e:	83 ec 08             	sub    esp,0x8
c0015091:	68 78 ee 01 c0       	push   0xc001ee78
c0015096:	50                   	push   eax
c0015097:	e8 9a 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001509c:	83 c4 10             	add    esp,0x10
c001509f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150ae:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00150b1:	83 ec 08             	sub    esp,0x8
c00150b4:	52                   	push   edx
c00150b5:	50                   	push   eax
c00150b6:	e8 35 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150bb:	83 c4 10             	add    esp,0x10
c00150be:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150c9:	83 ec 08             	sub    esp,0x8
c00150cc:	68 80 ee 01 c0       	push   0xc001ee80
c00150d1:	50                   	push   eax
c00150d2:	e8 5f 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150e9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150ec:	83 ec 08             	sub    esp,0x8
c00150ef:	52                   	push   edx
c00150f0:	50                   	push   eax
c00150f1:	e8 fa 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150f6:	83 c4 10             	add    esp,0x10
c00150f9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015104:	83 ec 08             	sub    esp,0x8
c0015107:	68 88 ee 01 c0       	push   0xc001ee88
c001510c:	50                   	push   eax
c001510d:	e8 24 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001511a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015120:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015124:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015127:	83 ec 08             	sub    esp,0x8
c001512a:	52                   	push   edx
c001512b:	50                   	push   eax
c001512c:	e8 bf 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015131:	83 c4 10             	add    esp,0x10
c0015134:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015139:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001513f:	83 ec 08             	sub    esp,0x8
c0015142:	68 90 ee 01 c0       	push   0xc001ee90
c0015147:	50                   	push   eax
c0015148:	e8 e9 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001514d:	83 c4 10             	add    esp,0x10
c0015150:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015155:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001515f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015162:	83 ec 08             	sub    esp,0x8
c0015165:	52                   	push   edx
c0015166:	50                   	push   eax
c0015167:	e8 84 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001516c:	83 c4 10             	add    esp,0x10
c001516f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015174:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517a:	83 ec 08             	sub    esp,0x8
c001517d:	68 98 ee 01 c0       	push   0xc001ee98
c0015182:	50                   	push   eax
c0015183:	e8 ae 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015190:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015196:	83 ec 08             	sub    esp,0x8
c0015199:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001519d:	50                   	push   eax
c001519e:	e8 4d 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151a3:	83 c4 10             	add    esp,0x10
c00151a6:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b1:	83 ec 08             	sub    esp,0x8
c00151b4:	68 a1 ee 01 c0       	push   0xc001eea1
c00151b9:	50                   	push   eax
c00151ba:	e8 77 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151bf:	83 c4 10             	add    esp,0x10
c00151c2:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151cd:	83 ec 08             	sub    esp,0x8
c00151d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151d4:	50                   	push   eax
c00151d5:	e8 16 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151da:	83 c4 10             	add    esp,0x10
c00151dd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151e8:	83 ec 08             	sub    esp,0x8
c00151eb:	68 a9 ee 01 c0       	push   0xc001eea9
c00151f0:	50                   	push   eax
c00151f1:	e8 40 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151f6:	83 c4 10             	add    esp,0x10
c00151f9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015204:	83 ec 08             	sub    esp,0x8
c0015207:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001520b:	50                   	push   eax
c001520c:	e8 df 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015211:	83 c4 10             	add    esp,0x10
c0015214:	fa                   	cli    
c0015215:	f4                   	hlt    
c0015216:	eb fe                	jmp    c0015216 <displayDebugInfo(regs*)+0x31f>

c0015218 <HalSystemIdle()>:
c0015218:	56                   	push   esi
c0015219:	53                   	push   ebx
c001521a:	83 ec 14             	sub    esp,0x14
c001521d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015222:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015228:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001522e:	83 e0 04             	and    eax,0x4
c0015231:	84 c0                	test   al,al
c0015233:	0f 95 c0             	setne  al
c0015236:	84 c0                	test   al,al
c0015238:	74 4c                	je     c0015286 <HalSystemIdle()+0x6e>
c001523a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001523f:	83 ec 08             	sub    esp,0x8
c0015242:	68 e1 00 00 00       	push   0xe1
c0015247:	50                   	push   eax
c0015248:	e8 a5 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001524d:	83 c4 10             	add    esp,0x10
c0015250:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015254:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015258:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001525d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015261:	83 e2 02             	and    edx,0x2
c0015264:	89 d3                	mov    ebx,edx
c0015266:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001526a:	83 e2 00             	and    edx,0x0
c001526d:	89 d6                	mov    esi,edx
c001526f:	56                   	push   esi
c0015270:	53                   	push   ebx
c0015271:	68 e1 00 00 00       	push   0xe1
c0015276:	50                   	push   eax
c0015277:	e8 a2 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c001527c:	83 c4 10             	add    esp,0x10
c001527f:	e8 10 af fe ff       	call   c0000194 <doTPAUSE>
c0015284:	eb 01                	jmp    c0015287 <HalSystemIdle()+0x6f>
c0015286:	f4                   	hlt    
c0015287:	90                   	nop
c0015288:	83 c4 14             	add    esp,0x14
c001528b:	5b                   	pop    ebx
c001528c:	5e                   	pop    esi
c001528d:	c3                   	ret    

c001528e <displayProgramFault(char const*)>:
c001528e:	83 ec 0c             	sub    esp,0xc
c0015291:	83 ec 0c             	sub    esp,0xc
c0015294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015298:	e8 e0 52 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001529d:	83 c4 10             	add    esp,0x10
c00152a0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b0:	85 c0                	test   eax,eax
c00152b2:	74 21                	je     c00152d5 <displayProgramFault(char const*)+0x47>
c00152b4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152c4:	6a 04                	push   0x4
c00152c6:	6a 0f                	push   0xf
c00152c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152cc:	50                   	push   eax
c00152cd:	e8 d6 34 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152d2:	83 c4 10             	add    esp,0x10
c00152d5:	90                   	nop
c00152d6:	83 c4 0c             	add    esp,0xc
c00152d9:	c3                   	ret    

c00152da <gpFault(regs*, void*)>:
c00152da:	83 ec 1c             	sub    esp,0x1c
c00152dd:	c7 05 10 52 02 c0 ef 47 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc00147ef
c00152e7:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152ec:	85 c0                	test   eax,eax
c00152ee:	74 1c                	je     c001530c <gpFault(regs*, void*)+0x32>
c00152f0:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152f5:	83 ec 0c             	sub    esp,0xc
c00152f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152fc:	ff d0                	call   eax
c00152fe:	83 c4 10             	add    esp,0x10
c0015301:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015305:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001530a:	75 2e                	jne    c001533a <gpFault(regs*, void*)+0x60>
c001530c:	83 ec 0c             	sub    esp,0xc
c001530f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015313:	e8 df fb ff ff       	call   c0014ef7 <displayDebugInfo(regs*)>
c0015318:	83 c4 10             	add    esp,0x10
c001531b:	83 ec 0c             	sub    esp,0xc
c001531e:	68 b1 ee 01 c0       	push   0xc001eeb1
c0015323:	e8 66 ff ff ff       	call   c001528e <displayProgramFault(char const*)>
c0015328:	83 c4 10             	add    esp,0x10
c001532b:	83 ec 0c             	sub    esp,0xc
c001532e:	6a 00                	push   0x0
c0015330:	e8 af ee ff ff       	call   c00141e4 <Thr::terminateFromIRQ(int)>
c0015335:	83 c4 10             	add    esp,0x10
c0015338:	eb 01                	jmp    c001533b <gpFault(regs*, void*)+0x61>
c001533a:	90                   	nop
c001533b:	83 c4 1c             	add    esp,0x1c
c001533e:	c3                   	ret    

c001533f <pgFault(regs*, void*)>:
c001533f:	83 ec 1c             	sub    esp,0x1c
c0015342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015346:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015349:	0f 20 d0             	mov    eax,cr2
c001534c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015354:	83 ec 04             	sub    esp,0x4
c0015357:	52                   	push   edx
c0015358:	50                   	push   eax
c0015359:	68 90 ef 01 c0       	push   0xc001ef90
c001535e:	e8 1a 52 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0015363:	83 c4 10             	add    esp,0x10
c0015366:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001536b:	8b 00                	mov    eax,DWORD PTR [eax]
c001536d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015370:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015376:	0f 20 d2             	mov    edx,cr2
c0015379:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001537d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015381:	83 ec 08             	sub    esp,0x8
c0015384:	52                   	push   edx
c0015385:	50                   	push   eax
c0015386:	e8 d1 4d ff ff       	call   c000a15c <VAS::tryLoadBackOffDisk(unsigned long)>
c001538b:	83 c4 10             	add    esp,0x10
c001538e:	84 c0                	test   al,al
c0015390:	75 2e                	jne    c00153c0 <pgFault(regs*, void*)+0x81>
c0015392:	83 ec 0c             	sub    esp,0xc
c0015395:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015399:	e8 59 fb ff ff       	call   c0014ef7 <displayDebugInfo(regs*)>
c001539e:	83 c4 10             	add    esp,0x10
c00153a1:	83 ec 0c             	sub    esp,0xc
c00153a4:	68 ca ee 01 c0       	push   0xc001eeca
c00153a9:	e8 e0 fe ff ff       	call   c001528e <displayProgramFault(char const*)>
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	83 ec 0c             	sub    esp,0xc
c00153b4:	6a 00                	push   0x0
c00153b6:	e8 29 ee ff ff       	call   c00141e4 <Thr::terminateFromIRQ(int)>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	eb 01                	jmp    c00153c1 <pgFault(regs*, void*)+0x82>
c00153c0:	90                   	nop
c00153c1:	83 c4 1c             	add    esp,0x1c
c00153c4:	c3                   	ret    

c00153c5 <otherISRHandler(regs*, void*)>:
c00153c5:	83 ec 0c             	sub    esp,0xc
c00153c8:	83 ec 0c             	sub    esp,0xc
c00153cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153cf:	e8 23 fb ff ff       	call   c0014ef7 <displayDebugInfo(regs*)>
c00153d4:	83 c4 10             	add    esp,0x10
c00153d7:	83 ec 0c             	sub    esp,0xc
c00153da:	68 b8 ef 01 c0       	push   0xc001efb8
c00153df:	e8 aa fe ff ff       	call   c001528e <displayProgramFault(char const*)>
c00153e4:	83 c4 10             	add    esp,0x10
c00153e7:	83 ec 0c             	sub    esp,0xc
c00153ea:	6a 00                	push   0x0
c00153ec:	e8 f3 ed ff ff       	call   c00141e4 <Thr::terminateFromIRQ(int)>
c00153f1:	83 c4 10             	add    esp,0x10
c00153f4:	90                   	nop
c00153f5:	83 c4 0c             	add    esp,0xc
c00153f8:	c3                   	ret    

c00153f9 <opcodeFault(regs*, void*)>:
c00153f9:	55                   	push   ebp
c00153fa:	89 e5                	mov    ebp,esp
c00153fc:	83 ec 08             	sub    esp,0x8
c00153ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015402:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015405:	83 ec 08             	sub    esp,0x8
c0015408:	50                   	push   eax
c0015409:	68 d5 ee 01 c0       	push   0xc001eed5
c001540e:	e8 6a 51 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001541b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015421:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015427:	84 c0                	test   al,al
c0015429:	74 21                	je     c001544c <opcodeFault(regs*, void*)+0x53>
c001542b:	83 ec 0c             	sub    esp,0xc
c001542e:	68 e0 ef 01 c0       	push   0xc001efe0
c0015433:	e8 45 51 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015441:	8d 50 19             	lea    edx,[eax+0x19]
c0015444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015447:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001544a:	eb 2b                	jmp    c0015477 <opcodeFault(regs*, void*)+0x7e>
c001544c:	83 ec 0c             	sub    esp,0xc
c001544f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015452:	e8 a0 fa ff ff       	call   c0014ef7 <displayDebugInfo(regs*)>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	83 ec 0c             	sub    esp,0xc
c001545d:	68 e3 ee 01 c0       	push   0xc001eee3
c0015462:	e8 27 fe ff ff       	call   c001528e <displayProgramFault(char const*)>
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	83 ec 0c             	sub    esp,0xc
c001546d:	6a 00                	push   0x0
c001546f:	e8 70 ed ff ff       	call   c00141e4 <Thr::terminateFromIRQ(int)>
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	c9                   	leave  
c0015478:	c3                   	ret    

c0015479 <i386SaveCoprocessor(void*)>:
c0015479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001547d:	83 c0 3f             	add    eax,0x3f
c0015480:	83 e0 c0             	and    eax,0xffffffc0
c0015483:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015487:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c001548d <i386LoadCoprocessor(void*)>:
c001548d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015491:	83 c0 3f             	add    eax,0x3f
c0015494:	83 e0 c0             	and    eax,0xffffffc0
c0015497:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001549b:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c00154a1 <x87EmulHandler(regs*, void*)>:
c00154a1:	53                   	push   ebx
c00154a2:	83 ec 08             	sub    esp,0x8
c00154a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154aa:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00154ae:	74 10                	je     c00154c0 <x87EmulHandler(regs*, void*)+0x1f>
c00154b0:	83 ec 0c             	sub    esp,0xc
c00154b3:	68 f0 ee 01 c0       	push   0xc001eef0
c00154b8:	e8 42 ad ff ff       	call   c00101ff <KePanic(char const*)>
c00154bd:	83 c4 10             	add    esp,0x10
c00154c0:	0f 20 c0             	mov    eax,cr0
c00154c3:	a8 08                	test   al,0x8
c00154c5:	74 59                	je     c0015520 <x87EmulHandler(regs*, void*)+0x7f>
c00154c7:	0f 06                	clts   
c00154c9:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00154ce:	85 c0                	test   eax,eax
c00154d0:	74 0e                	je     c00154e0 <x87EmulHandler(regs*, void*)+0x3f>
c00154d2:	83 ec 0c             	sub    esp,0xc
c00154d5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154d8:	e8 9c ff ff ff       	call   c0015479 <i386SaveCoprocessor(void*)>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00154e6:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00154ea:	75 12                	jne    c00154fe <x87EmulHandler(regs*, void*)+0x5d>
c00154ec:	83 ec 0c             	sub    esp,0xc
c00154ef:	68 40 02 00 00       	push   0x240
c00154f4:	e8 c0 22 ff ff       	call   c00077b9 <malloc>
c00154f9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00154fc:	eb 10                	jmp    c001550e <x87EmulHandler(regs*, void*)+0x6d>
c00154fe:	83 ec 0c             	sub    esp,0xc
c0015501:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c0015506:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015509:	e8 7f ff ff ff       	call   c001548d <i386LoadCoprocessor(void*)>
c001550e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015513:	83 c4 10             	add    esp,0x10
c0015516:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c001551b:	83 c4 08             	add    esp,0x8
c001551e:	5b                   	pop    ebx
c001551f:	c3                   	ret    
c0015520:	83 ec 0c             	sub    esp,0xc
c0015523:	68 04 ef 01 c0       	push   0xc001ef04
c0015528:	e8 50 50 ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001552d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015535:	83 c4 18             	add    esp,0x18
c0015538:	5b                   	pop    ebx
c0015539:	e9 a6 ec ff ff       	jmp    c00141e4 <Thr::terminateFromIRQ(int)>

c001553e <HalInitialiseCoprocessor()>:
c001553e:	83 ec 10             	sub    esp,0x10
c0015541:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c001554b:	6a 00                	push   0x0
c001554d:	68 a1 54 01 c0       	push   0xc00154a1
c0015552:	6a 07                	push   0x7
c0015554:	e8 97 69 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015559:	e8 92 65 00 00       	call   c001baf0 <avxDetect>
c001555e:	83 c4 10             	add    esp,0x10
c0015561:	85 c0                	test   eax,eax
c0015563:	74 1c                	je     c0015581 <HalInitialiseCoprocessor()+0x43>
c0015565:	c7 05 0c 52 02 c0 1a bb 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bb1a
c001556f:	c7 05 08 52 02 c0 2b bb 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bb2b
c0015579:	83 c4 0c             	add    esp,0xc
c001557c:	e9 bb 65 00 00       	jmp    c001bb3c <avxInit>
c0015581:	e8 4a 68 00 00       	call   c001bdd0 <absolutelyNoChanceInHell>
c0015586:	85 c0                	test   eax,eax
c0015588:	74 1c                	je     c00155a6 <HalInitialiseCoprocessor()+0x68>
c001558a:	c7 05 0c 52 02 c0 e8 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bde8
c0015594:	c7 05 08 52 02 c0 f0 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bdf0
c001559e:	83 c4 0c             	add    esp,0xc
c00155a1:	e9 52 68 00 00       	jmp    c001bdf8 <sseInit>
c00155a6:	e8 6b 68 00 00       	call   c001be16 <x87Detect>
c00155ab:	85 c0                	test   eax,eax
c00155ad:	74 1c                	je     c00155cb <HalInitialiseCoprocessor()+0x8d>
c00155af:	c7 05 0c 52 02 c0 31 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001be31
c00155b9:	c7 05 08 52 02 c0 38 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001be38
c00155c3:	83 c4 0c             	add    esp,0xc
c00155c6:	e9 74 68 00 00       	jmp    c001be3f <x87Init>
c00155cb:	c7 05 0c 52 02 c0 c4 4e 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014ec4
c00155d5:	c7 05 08 52 02 c0 c4 4e 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014ec4
c00155df:	0f 20 c0             	mov    eax,cr0
c00155e2:	83 c8 04             	or     eax,0x4
c00155e5:	0f 22 c0             	mov    cr0,eax
c00155e8:	83 c4 0c             	add    esp,0xc
c00155eb:	c3                   	ret    

c00155ec <HalPanic(char const*)>:
c00155ec:	53                   	push   ebx
c00155ed:	83 ec 10             	sub    esp,0x10
c00155f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155f4:	fa                   	cli    
c00155f5:	53                   	push   ebx
c00155f6:	68 1a ef 01 c0       	push   0xc001ef1a
c00155fb:	e8 7d 4f ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0015600:	83 c4 0c             	add    esp,0xc
c0015603:	6a 01                	push   0x1
c0015605:	6a 0f                	push   0xf
c0015607:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001560d:	e8 38 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015612:	58                   	pop    eax
c0015613:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015619:	e8 24 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c001561e:	5a                   	pop    edx
c001561f:	59                   	pop    ecx
c0015620:	68 28 d8 01 c0       	push   0xc001d828
c0015625:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001562b:	e8 52 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015630:	83 c4 0c             	add    esp,0xc
c0015633:	6a 01                	push   0x1
c0015635:	6a 0f                	push   0xf
c0015637:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001563d:	e8 08 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015642:	58                   	pop    eax
c0015643:	5a                   	pop    edx
c0015644:	68 33 ef 01 c0       	push   0xc001ef33
c0015649:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001564f:	e8 e2 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015654:	83 c4 0c             	add    esp,0xc
c0015657:	6a 0f                	push   0xf
c0015659:	6a 01                	push   0x1
c001565b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015661:	e8 e4 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015666:	59                   	pop    ecx
c0015667:	58                   	pop    eax
c0015668:	68 3c ef 01 c0       	push   0xc001ef3c
c001566d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015673:	e8 be 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015678:	83 c4 0c             	add    esp,0xc
c001567b:	6a 01                	push   0x1
c001567d:	6a 0f                	push   0xf
c001567f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015685:	e8 c0 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001568a:	58                   	pop    eax
c001568b:	5a                   	pop    edx
c001568c:	68 80 ef 01 c0       	push   0xc001ef80
c0015691:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015697:	e8 9a 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001569c:	59                   	pop    ecx
c001569d:	58                   	pop    eax
c001569e:	68 49 ef 01 c0       	push   0xc001ef49
c00156a3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156a9:	e8 88 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156ae:	58                   	pop    eax
c00156af:	5a                   	pop    edx
c00156b0:	68 83 ef 01 c0       	push   0xc001ef83
c00156b5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156bb:	e8 76 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156c0:	59                   	pop    ecx
c00156c1:	58                   	pop    eax
c00156c2:	53                   	push   ebx
c00156c3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156c9:	e8 68 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156ce:	58                   	pop    eax
c00156cf:	5a                   	pop    edx
c00156d0:	68 80 ef 01 c0       	push   0xc001ef80
c00156d5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156db:	e8 56 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156e0:	83 c4 10             	add    esp,0x10
c00156e3:	eb fe                	jmp    c00156e3 <HalPanic(char const*)+0xf7>

c00156e5 <HalQueryPerformanceCounter()>:
c00156e5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00156ea:	31 d2                	xor    edx,edx
c00156ec:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00156f2:	31 c0                	xor    eax,eax
c00156f4:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00156fb:	74 02                	je     c00156ff <HalQueryPerformanceCounter()+0x1a>
c00156fd:	0f 31                	rdtsc  
c00156ff:	c3                   	ret    

c0015700 <HalInitialise()>:
c0015700:	53                   	push   ebx
c0015701:	83 ec 08             	sub    esp,0x8
c0015704:	e8 1a 6a ff ff       	call   c000c123 <setupINTS()>
c0015709:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c0015710:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015715:	75 07                	jne    c001571e <HalInitialise()+0x1e>
c0015717:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001571e:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015724:	83 e0 01             	and    eax,0x1
c0015727:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c001572c:	e8 a7 02 00 00       	call   c00159d8 <picOpen()>
c0015731:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c0015738:	74 0a                	je     c0015744 <HalInitialise()+0x44>
c001573a:	e8 e1 01 00 00       	call   c0015920 <picDisable()>
c001573f:	e8 26 5d 00 00       	call   c001b46a <apicOpen()>
c0015744:	bb 0f 00 00 00       	mov    ebx,0xf
c0015749:	50                   	push   eax
c001574a:	6a 00                	push   0x0
c001574c:	68 c5 53 01 c0       	push   0xc00153c5
c0015751:	6a 00                	push   0x0
c0015753:	e8 98 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015758:	83 c4 0c             	add    esp,0xc
c001575b:	6a 00                	push   0x0
c001575d:	68 c5 53 01 c0       	push   0xc00153c5
c0015762:	6a 01                	push   0x1
c0015764:	e8 87 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015769:	83 c4 0c             	add    esp,0xc
c001576c:	6a 00                	push   0x0
c001576e:	68 c5 4e 01 c0       	push   0xc0014ec5
c0015773:	6a 02                	push   0x2
c0015775:	e8 76 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001577a:	83 c4 0c             	add    esp,0xc
c001577d:	6a 00                	push   0x0
c001577f:	68 c5 53 01 c0       	push   0xc00153c5
c0015784:	6a 03                	push   0x3
c0015786:	e8 65 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001578b:	83 c4 0c             	add    esp,0xc
c001578e:	6a 00                	push   0x0
c0015790:	68 c5 53 01 c0       	push   0xc00153c5
c0015795:	6a 04                	push   0x4
c0015797:	e8 54 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001579c:	83 c4 0c             	add    esp,0xc
c001579f:	6a 00                	push   0x0
c00157a1:	68 c5 53 01 c0       	push   0xc00153c5
c00157a6:	6a 05                	push   0x5
c00157a8:	e8 43 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ad:	83 c4 0c             	add    esp,0xc
c00157b0:	6a 00                	push   0x0
c00157b2:	68 f9 53 01 c0       	push   0xc00153f9
c00157b7:	6a 06                	push   0x6
c00157b9:	e8 32 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157be:	83 c4 0c             	add    esp,0xc
c00157c1:	6a 00                	push   0x0
c00157c3:	68 de 4e 01 c0       	push   0xc0014ede
c00157c8:	6a 08                	push   0x8
c00157ca:	e8 21 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157cf:	83 c4 0c             	add    esp,0xc
c00157d2:	6a 00                	push   0x0
c00157d4:	68 c5 53 01 c0       	push   0xc00153c5
c00157d9:	6a 09                	push   0x9
c00157db:	e8 10 67 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e0:	83 c4 0c             	add    esp,0xc
c00157e3:	6a 00                	push   0x0
c00157e5:	68 c5 53 01 c0       	push   0xc00153c5
c00157ea:	6a 0a                	push   0xa
c00157ec:	e8 ff 66 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f1:	83 c4 0c             	add    esp,0xc
c00157f4:	6a 00                	push   0x0
c00157f6:	68 c5 53 01 c0       	push   0xc00153c5
c00157fb:	6a 0b                	push   0xb
c00157fd:	e8 ee 66 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015802:	83 c4 0c             	add    esp,0xc
c0015805:	6a 00                	push   0x0
c0015807:	68 da 52 01 c0       	push   0xc00152da
c001580c:	6a 0d                	push   0xd
c001580e:	e8 dd 66 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015813:	83 c4 0c             	add    esp,0xc
c0015816:	6a 00                	push   0x0
c0015818:	68 3f 53 01 c0       	push   0xc001533f
c001581d:	6a 0e                	push   0xe
c001581f:	e8 cc 66 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015824:	83 c4 10             	add    esp,0x10
c0015827:	50                   	push   eax
c0015828:	6a 00                	push   0x0
c001582a:	68 c5 53 01 c0       	push   0xc00153c5
c001582f:	53                   	push   ebx
c0015830:	43                   	inc    ebx
c0015831:	e8 ba 66 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015836:	83 c4 10             	add    esp,0x10
c0015839:	83 fb 1e             	cmp    ebx,0x1e
c001583c:	75 e9                	jne    c0015827 <HalInitialise()+0x127>
c001583e:	50                   	push   eax
c001583f:	6a 00                	push   0x0
c0015841:	68 4f 14 01 c0       	push   0xc001144f
c0015846:	6a 60                	push   0x60
c0015848:	e8 a3 66 ff ff       	call   c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001584d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015852:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001585c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015863:	e8 51 1f ff ff       	call   c00077b9 <malloc>
c0015868:	89 04 24             	mov    DWORD PTR [esp],eax
c001586b:	89 c3                	mov    ebx,eax
c001586d:	e8 2e 09 00 00       	call   c00161a0 <RTC::RTC()>
c0015872:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001587c:	5a                   	pop    edx
c001587d:	59                   	pop    ecx
c001587e:	53                   	push   ebx
c001587f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015885:	e8 32 61 ff ff       	call   c000b9bc <Device::addChild(Device*)>
c001588a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001588c:	6a 00                	push   0x0
c001588e:	6a 00                	push   0x0
c0015890:	6a 00                	push   0x0
c0015892:	53                   	push   ebx
c0015893:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015896:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001589b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00158a1:	83 c4 28             	add    esp,0x28
c00158a4:	5b                   	pop    ebx
c00158a5:	c3                   	ret    

c00158a6 <HalMakeBeep(int)>:
c00158a6:	53                   	push   ebx
c00158a7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00158ab:	85 db                	test   ebx,ebx
c00158ad:	75 07                	jne    c00158b6 <HalMakeBeep(int)+0x10>
c00158af:	e4 61                	in     al,0x61
c00158b1:	83 e0 fc             	and    eax,0xfffffffc
c00158b4:	eb 26                	jmp    c00158dc <HalMakeBeep(int)+0x36>
c00158b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00158bb:	99                   	cdq    
c00158bc:	f7 fb                	idiv   ebx
c00158be:	89 c1                	mov    ecx,eax
c00158c0:	b0 b6                	mov    al,0xb6
c00158c2:	e6 43                	out    0x43,al
c00158c4:	88 c8                	mov    al,cl
c00158c6:	e6 42                	out    0x42,al
c00158c8:	89 c8                	mov    eax,ecx
c00158ca:	c1 e8 08             	shr    eax,0x8
c00158cd:	e6 42                	out    0x42,al
c00158cf:	e4 61                	in     al,0x61
c00158d1:	88 c2                	mov    dl,al
c00158d3:	83 ca 03             	or     edx,0x3
c00158d6:	38 c2                	cmp    dl,al
c00158d8:	74 04                	je     c00158de <HalMakeBeep(int)+0x38>
c00158da:	88 d0                	mov    al,dl
c00158dc:	e6 61                	out    0x61,al
c00158de:	5b                   	pop    ebx
c00158df:	c3                   	ret    

c00158e0 <HalGetRand()>:
c00158e0:	31 c0                	xor    eax,eax
c00158e2:	c3                   	ret    

c00158e3 <HalEndOfInterrupt(int)>:
c00158e3:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00158ea:	74 23                	je     c001590f <HalEndOfInterrupt(int)+0x2c>
c00158ec:	83 ec 14             	sub    esp,0x14
c00158ef:	6a 1b                	push   0x1b
c00158f1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00158f7:	e8 f6 14 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00158fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015901:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001590b:	83 c4 1c             	add    esp,0x1c
c001590e:	c3                   	ret    
c001590f:	e9 54 02 00 00       	jmp    c0015b68 <picEOI(int)>

c0015914 <HalRestart()>:
c0015914:	c3                   	ret    

c0015915 <HalShutdown()>:
c0015915:	c3                   	ret    

c0015916 <HalSleep()>:
c0015916:	c3                   	ret    
c0015917:	90                   	nop

c0015918 <picIoWait()>:
c0015918:	eb 00                	jmp    c001591a <picIoWait()+0x2>
c001591a:	eb 00                	jmp    c001591c <picIoWait()+0x4>
c001591c:	90                   	nop
c001591d:	c3                   	ret    
c001591e:	66 90                	xchg   ax,ax

c0015920 <picDisable()>:
c0015920:	83 ec 10             	sub    esp,0x10
c0015923:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001592a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001592f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015933:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015938:	ee                   	out    dx,al
c0015939:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015940:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015945:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015949:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001594e:	ee                   	out    dx,al
c001594f:	90                   	nop
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	c3                   	ret    

c0015954 <picGetIRQReg(int)>:
c0015954:	83 ec 10             	sub    esp,0x10
c0015957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001595b:	25 ff 00 00 00       	and    eax,0xff
c0015960:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015967:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001596b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001596f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015974:	ee                   	out    dx,al
c0015975:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015979:	25 ff 00 00 00       	and    eax,0xff
c001597e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015985:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015989:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001598d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015992:	ee                   	out    dx,al
c0015993:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001599a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001599f:	89 c2                	mov    edx,eax
c00159a1:	ec                   	in     al,dx
c00159a2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00159a6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159aa:	25 ff 00 00 00       	and    eax,0xff
c00159af:	c1 e0 08             	shl    eax,0x8
c00159b2:	89 c1                	mov    ecx,eax
c00159b4:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00159bb:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00159c0:	89 c2                	mov    edx,eax
c00159c2:	ec                   	in     al,dx
c00159c3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00159c7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00159cb:	25 ff 00 00 00       	and    eax,0xff
c00159d0:	09 c8                	or     eax,ecx
c00159d2:	83 c4 10             	add    esp,0x10
c00159d5:	c3                   	ret    
c00159d6:	66 90                	xchg   ax,ax

c00159d8 <picOpen()>:
c00159d8:	83 ec 50             	sub    esp,0x50
c00159db:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00159e2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00159e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00159eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159ef:	ee                   	out    dx,al
c00159f0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159f7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00159fc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a04:	ee                   	out    dx,al
c0015a05:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015a0d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a15:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a20:	89 c2                	mov    edx,eax
c0015a22:	ec                   	in     al,dx
c0015a23:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015a27:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015a2b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015a2f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015a36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a3a:	89 c2                	mov    edx,eax
c0015a3c:	ec                   	in     al,dx
c0015a3d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a41:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a45:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a49:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a50:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a55:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a5d:	ee                   	out    dx,al
c0015a5e:	e8 b5 fe ff ff       	call   c0015918 <picIoWait()>
c0015a63:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a6a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a6f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a77:	ee                   	out    dx,al
c0015a78:	e8 9b fe ff ff       	call   c0015918 <picIoWait()>
c0015a7d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a81:	25 ff 00 00 00       	and    eax,0xff
c0015a86:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a8d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a91:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a99:	ee                   	out    dx,al
c0015a9a:	e8 79 fe ff ff       	call   c0015918 <picIoWait()>
c0015a9f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015aa3:	25 ff 00 00 00       	and    eax,0xff
c0015aa8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015aaf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ab3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015ab7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015abb:	ee                   	out    dx,al
c0015abc:	e8 57 fe ff ff       	call   c0015918 <picIoWait()>
c0015ac1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015ac8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015acd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015ad1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ad5:	ee                   	out    dx,al
c0015ad6:	e8 3d fe ff ff       	call   c0015918 <picIoWait()>
c0015adb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015ae2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015ae7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015aeb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015aef:	ee                   	out    dx,al
c0015af0:	e8 23 fe ff ff       	call   c0015918 <picIoWait()>
c0015af5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015afc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b01:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015b05:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015b09:	ee                   	out    dx,al
c0015b0a:	e8 09 fe ff ff       	call   c0015918 <picIoWait()>
c0015b0f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b16:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b1b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015b1f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b23:	ee                   	out    dx,al
c0015b24:	e8 ef fd ff ff       	call   c0015918 <picIoWait()>
c0015b29:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015b2d:	25 ff 00 00 00       	and    eax,0xff
c0015b32:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b39:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b3d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b41:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b45:	ee                   	out    dx,al
c0015b46:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b4a:	25 ff 00 00 00       	and    eax,0xff
c0015b4f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b56:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b5a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b5e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b62:	ee                   	out    dx,al
c0015b63:	90                   	nop
c0015b64:	83 c4 50             	add    esp,0x50
c0015b67:	c3                   	ret    

c0015b68 <picEOI(int)>:
c0015b68:	83 ec 10             	sub    esp,0x10
c0015b6b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b70:	75 22                	jne    c0015b94 <picEOI(int)+0x2c>
c0015b72:	6a 0b                	push   0xb
c0015b74:	e8 db fd ff ff       	call   c0015954 <picGetIRQReg(int)>
c0015b79:	83 c4 04             	add    esp,0x4
c0015b7c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b81:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b86:	25 ff ff 00 00       	and    eax,0xffff
c0015b8b:	25 80 00 00 00       	and    eax,0x80
c0015b90:	74 72                	je     c0015c04 <picEOI(int)+0x9c>
c0015b92:	66 90                	xchg   ax,ax
c0015b94:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b99:	75 31                	jne    c0015bcc <picEOI(int)+0x64>
c0015b9b:	6a 0b                	push   0xb
c0015b9d:	e8 b2 fd ff ff       	call   c0015954 <picGetIRQReg(int)>
c0015ba2:	83 c4 04             	add    esp,0x4
c0015ba5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bae:	66 85 c0             	test   ax,ax
c0015bb1:	78 19                	js     c0015bcc <picEOI(int)+0x64>
c0015bb3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015bba:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015bbf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015bc3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015bc8:	ee                   	out    dx,al
c0015bc9:	eb 3d                	jmp    c0015c08 <picEOI(int)+0xa0>
c0015bcb:	90                   	nop
c0015bcc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015bd1:	7e 19                	jle    c0015bec <picEOI(int)+0x84>
c0015bd3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015bda:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015bdf:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015be3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015be8:	ee                   	out    dx,al
c0015be9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bec:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015bf3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015bf8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015bfc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c01:	ee                   	out    dx,al
c0015c02:	eb 04                	jmp    c0015c08 <picEOI(int)+0xa0>
c0015c04:	90                   	nop
c0015c05:	8d 76 00             	lea    esi,[esi+0x0]
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	c3                   	ret    

c0015c0c <RTC::open(int, int, void*)>:
c0015c0c:	31 c0                	xor    eax,eax
c0015c0e:	c3                   	ret    
c0015c0f:	90                   	nop

c0015c10 <RTC::close(int, int, void*)>:
c0015c10:	31 c0                	xor    eax,eax
c0015c12:	c3                   	ret    
c0015c13:	90                   	nop

c0015c14 <RTC::timeInSecondsUTC()>:
c0015c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c18:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015c1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c24:	c3                   	ret    
c0015c25:	90                   	nop

c0015c26 <RTC::timeInDatetimeUTC()>:
c0015c26:	53                   	push   ebx
c0015c27:	83 ec 14             	sub    esp,0x14
c0015c2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c32:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c34:	50                   	push   eax
c0015c35:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c38:	83 c4 0c             	add    esp,0xc
c0015c3b:	52                   	push   edx
c0015c3c:	50                   	push   eax
c0015c3d:	53                   	push   ebx
c0015c3e:	e8 ed 5a ff ff       	call   c000b730 <secondsToDatetime(unsigned long long)>
c0015c43:	89 d8                	mov    eax,ebx
c0015c45:	83 c4 14             	add    esp,0x14
c0015c48:	5b                   	pop    ebx
c0015c49:	c2 04 00             	ret    0x4

c0015c4c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c4c:	56                   	push   esi
c0015c4d:	53                   	push   ebx
c0015c4e:	83 ec 14             	sub    esp,0x14
c0015c51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c57:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c5e:	52                   	push   edx
c0015c5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c67:	50                   	push   eax
c0015c68:	e8 c3 5a ff ff       	call   c000b730 <secondsToDatetime(unsigned long long)>
c0015c6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c79:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c81:	89 f0                	mov    eax,esi
c0015c83:	83 c4 20             	add    esp,0x20
c0015c86:	5b                   	pop    ebx
c0015c87:	5e                   	pop    esi
c0015c88:	ff e0                	jmp    eax

c0015c8a <RTC::~RTC()>:
c0015c8a:	83 ec 0c             	sub    esp,0xc
c0015c8d:	ba 20 f0 01 c0       	mov    edx,0xc001f020
c0015c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c96:	89 10                	mov    DWORD PTR [eax],edx
c0015c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c9c:	83 ec 0c             	sub    esp,0xc
c0015c9f:	50                   	push   eax
c0015ca0:	e8 0f 58 ff ff       	call   c000b4b4 <Clock::~Clock()>
c0015ca5:	83 c4 10             	add    esp,0x10
c0015ca8:	90                   	nop
c0015ca9:	83 c4 0c             	add    esp,0xc
c0015cac:	c3                   	ret    
c0015cad:	90                   	nop

c0015cae <RTC::~RTC()>:
c0015cae:	83 ec 0c             	sub    esp,0xc
c0015cb1:	83 ec 0c             	sub    esp,0xc
c0015cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cb8:	e8 cd ff ff ff       	call   c0015c8a <RTC::~RTC()>
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	83 ec 08             	sub    esp,0x8
c0015cc3:	68 60 01 00 00       	push   0x160
c0015cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ccc:	e8 b6 47 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c0015cd1:	83 c4 10             	add    esp,0x10
c0015cd4:	83 c4 0c             	add    esp,0xc
c0015cd7:	c3                   	ret    

c0015cd8 <RTC::get_update_in_progress_flag()>:
c0015cd8:	83 ec 14             	sub    esp,0x14
c0015cdb:	6a 0a                	push   0xa
c0015cdd:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ce3:	e8 be 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ce8:	83 c4 1c             	add    esp,0x1c
c0015ceb:	c0 e8 07             	shr    al,0x7
c0015cee:	c3                   	ret    
c0015cef:	90                   	nop

c0015cf0 <RTC::completeRTCRefresh()>:
c0015cf0:	55                   	push   ebp
c0015cf1:	57                   	push   edi
c0015cf2:	56                   	push   esi
c0015cf3:	53                   	push   ebx
c0015cf4:	83 ec 2c             	sub    esp,0x2c
c0015cf7:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015cfd:	83 ec 0c             	sub    esp,0xc
c0015d00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d04:	e8 cf ff ff ff       	call   c0015cd8 <RTC::get_update_in_progress_flag()>
c0015d09:	83 c4 10             	add    esp,0x10
c0015d0c:	84 c0                	test   al,al
c0015d0e:	74 0e                	je     c0015d1e <RTC::completeRTCRefresh()+0x2e>
c0015d10:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d16:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d1c:	73 df                	jae    c0015cfd <RTC::completeRTCRefresh()+0xd>
c0015d1e:	55                   	push   ebp
c0015d1f:	55                   	push   ebp
c0015d20:	6a 00                	push   0x0
c0015d22:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d28:	e8 79 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d2d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d31:	58                   	pop    eax
c0015d32:	5a                   	pop    edx
c0015d33:	6a 02                	push   0x2
c0015d35:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d3b:	e8 66 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d40:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d44:	59                   	pop    ecx
c0015d45:	5b                   	pop    ebx
c0015d46:	6a 04                	push   0x4
c0015d48:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d4e:	e8 53 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d53:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d57:	5e                   	pop    esi
c0015d58:	5f                   	pop    edi
c0015d59:	6a 07                	push   0x7
c0015d5b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d61:	e8 40 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d66:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d6a:	5d                   	pop    ebp
c0015d6b:	58                   	pop    eax
c0015d6c:	6a 08                	push   0x8
c0015d6e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d74:	e8 2d 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d79:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d7d:	58                   	pop    eax
c0015d7e:	5a                   	pop    edx
c0015d7f:	6a 09                	push   0x9
c0015d81:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d87:	e8 1a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	0f b6 e8             	movzx  ebp,al
c0015d92:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d98:	83 ec 0c             	sub    esp,0xc
c0015d9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d9f:	e8 34 ff ff ff       	call   c0015cd8 <RTC::get_update_in_progress_flag()>
c0015da4:	83 c4 10             	add    esp,0x10
c0015da7:	84 c0                	test   al,al
c0015da9:	74 0e                	je     c0015db9 <RTC::completeRTCRefresh()+0xc9>
c0015dab:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015db1:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015db7:	73 df                	jae    c0015d98 <RTC::completeRTCRefresh()+0xa8>
c0015db9:	50                   	push   eax
c0015dba:	50                   	push   eax
c0015dbb:	6a 00                	push   0x0
c0015dbd:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dc3:	e8 de 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dc8:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015dcc:	58                   	pop    eax
c0015dcd:	5a                   	pop    edx
c0015dce:	6a 02                	push   0x2
c0015dd0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dd6:	e8 cb 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ddb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ddf:	59                   	pop    ecx
c0015de0:	5b                   	pop    ebx
c0015de1:	6a 04                	push   0x4
c0015de3:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015de9:	e8 b8 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dee:	5e                   	pop    esi
c0015def:	88 c3                	mov    bl,al
c0015df1:	5f                   	pop    edi
c0015df2:	6a 07                	push   0x7
c0015df4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dfa:	e8 a7 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dff:	89 c6                	mov    esi,eax
c0015e01:	58                   	pop    eax
c0015e02:	5a                   	pop    edx
c0015e03:	6a 08                	push   0x8
c0015e05:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e0b:	e8 96 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e10:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e14:	59                   	pop    ecx
c0015e15:	5f                   	pop    edi
c0015e16:	6a 09                	push   0x9
c0015e18:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e1e:	e8 83 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e23:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015e27:	0f b6 f8             	movzx  edi,al
c0015e2a:	83 c4 10             	add    esp,0x10
c0015e2d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015e31:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e35:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e39:	89 f1                	mov    ecx,esi
c0015e3b:	0f 94 c0             	sete   al
c0015e3e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e42:	0f 94 c2             	sete   dl
c0015e45:	21 d0                	and    eax,edx
c0015e47:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e4b:	0f 94 c2             	sete   dl
c0015e4e:	21 c2                	and    edx,eax
c0015e50:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e54:	0f 94 c0             	sete   al
c0015e57:	21 d0                	and    eax,edx
c0015e59:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e5d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e61:	0f 94 c1             	sete   cl
c0015e64:	84 c8                	test   al,cl
c0015e66:	75 29                	jne    c0015e91 <RTC::completeRTCRefresh()+0x1a1>
c0015e68:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e6c:	89 fd                	mov    ebp,edi
c0015e6e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e72:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e76:	89 f0                	mov    eax,esi
c0015e78:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e7c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e80:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e84:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e88:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e8c:	e9 01 ff ff ff       	jmp    c0015d92 <RTC::completeRTCRefresh()+0xa2>
c0015e91:	39 fd                	cmp    ebp,edi
c0015e93:	75 d3                	jne    c0015e68 <RTC::completeRTCRefresh()+0x178>
c0015e95:	55                   	push   ebp
c0015e96:	55                   	push   ebp
c0015e97:	6a 0b                	push   0xb
c0015e99:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e9f:	e8 02 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ea4:	83 c4 10             	add    esp,0x10
c0015ea7:	89 c5                	mov    ebp,eax
c0015ea9:	a8 04                	test   al,0x4
c0015eab:	75 78                	jne    c0015f25 <RTC::completeRTCRefresh()+0x235>
c0015ead:	b1 0a                	mov    cl,0xa
c0015eaf:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015eb3:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015eb7:	83 e2 0f             	and    edx,0xf
c0015eba:	c0 e8 04             	shr    al,0x4
c0015ebd:	c1 ef 04             	shr    edi,0x4
c0015ec0:	f6 e1                	mul    cl
c0015ec2:	6b ff 0a             	imul   edi,edi,0xa
c0015ec5:	01 d0                	add    eax,edx
c0015ec7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ecb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015ecf:	83 e2 0f             	and    edx,0xf
c0015ed2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ed6:	c0 e8 04             	shr    al,0x4
c0015ed9:	f6 e1                	mul    cl
c0015edb:	01 d0                	add    eax,edx
c0015edd:	88 da                	mov    dl,bl
c0015edf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015ee3:	83 e2 0f             	and    edx,0xf
c0015ee6:	88 d8                	mov    al,bl
c0015ee8:	83 e3 80             	and    ebx,0xffffff80
c0015eeb:	c0 e8 04             	shr    al,0x4
c0015eee:	83 e0 07             	and    eax,0x7
c0015ef1:	f6 e1                	mul    cl
c0015ef3:	01 d0                	add    eax,edx
c0015ef5:	89 f2                	mov    edx,esi
c0015ef7:	09 c3                	or     ebx,eax
c0015ef9:	83 e2 0f             	and    edx,0xf
c0015efc:	89 f0                	mov    eax,esi
c0015efe:	c0 e8 04             	shr    al,0x4
c0015f01:	f6 e1                	mul    cl
c0015f03:	8d 34 02             	lea    esi,[edx+eax*1]
c0015f06:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f0a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f0e:	83 e2 0f             	and    edx,0xf
c0015f11:	c0 e8 04             	shr    al,0x4
c0015f14:	f6 e1                	mul    cl
c0015f16:	01 d0                	add    eax,edx
c0015f18:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015f1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f20:	83 e0 0f             	and    eax,0xf
c0015f23:	01 c7                	add    edi,eax
c0015f25:	83 e5 02             	and    ebp,0x2
c0015f28:	75 14                	jne    c0015f3e <RTC::completeRTCRefresh()+0x24e>
c0015f2a:	84 db                	test   bl,bl
c0015f2c:	79 10                	jns    c0015f3e <RTC::completeRTCRefresh()+0x24e>
c0015f2e:	83 e3 7f             	and    ebx,0x7f
c0015f31:	b9 18 00 00 00       	mov    ecx,0x18
c0015f36:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f39:	99                   	cdq    
c0015f3a:	f7 f9                	idiv   ecx
c0015f3c:	88 d3                	mov    bl,dl
c0015f3e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f44:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f4a:	77 06                	ja     c0015f52 <RTC::completeRTCRefresh()+0x262>
c0015f4c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f52:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f57:	31 d2                	xor    edx,edx
c0015f59:	c1 e1 10             	shl    ecx,0x10
c0015f5c:	89 d7                	mov    edi,edx
c0015f5e:	c1 e5 10             	shl    ebp,0x10
c0015f61:	31 c0                	xor    eax,eax
c0015f63:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f69:	09 cf                	or     edi,ecx
c0015f6b:	89 fa                	mov    edx,edi
c0015f6d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f71:	88 da                	mov    dl,bl
c0015f73:	89 f3                	mov    ebx,esi
c0015f75:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f79:	88 d8                	mov    al,bl
c0015f7b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f7f:	0f b7 c8             	movzx  ecx,ax
c0015f82:	09 e9                	or     ecx,ebp
c0015f84:	89 c8                	mov    eax,ecx
c0015f86:	51                   	push   ecx
c0015f87:	51                   	push   ecx
c0015f88:	52                   	push   edx
c0015f89:	50                   	push   eax
c0015f8a:	e8 14 56 ff ff       	call   c000b5a3 <datetimeToSeconds(datetime_t)>
c0015f8f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f93:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f99:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f9f:	83 c4 3c             	add    esp,0x3c
c0015fa2:	5b                   	pop    ebx
c0015fa3:	5e                   	pop    esi
c0015fa4:	5f                   	pop    edi
c0015fa5:	5d                   	pop    ebp
c0015fa6:	c3                   	ret    
c0015fa7:	90                   	nop

c0015fa8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015fa8:	55                   	push   ebp
c0015fa9:	57                   	push   edi
c0015faa:	56                   	push   esi
c0015fab:	53                   	push   ebx
c0015fac:	83 ec 30             	sub    esp,0x30
c0015faf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015fb3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015fb7:	6a 00                	push   0x0
c0015fb9:	6a 00                	push   0x0
c0015fbb:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fc1:	e8 f6 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fc6:	83 c4 0c             	add    esp,0xc
c0015fc9:	6a 00                	push   0x0
c0015fcb:	6a 02                	push   0x2
c0015fcd:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fd3:	e8 e4 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fd8:	31 d2                	xor    edx,edx
c0015fda:	89 f9                	mov    ecx,edi
c0015fdc:	89 f8                	mov    eax,edi
c0015fde:	c1 e9 10             	shr    ecx,0x10
c0015fe1:	0f b6 c4             	movzx  eax,ah
c0015fe4:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015fe8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015fec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ff0:	b9 64 00 00 00       	mov    ecx,0x64
c0015ff5:	89 f0                	mov    eax,esi
c0015ff7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015ffb:	89 f0                	mov    eax,esi
c0015ffd:	0f b6 c4             	movzx  eax,ah
c0016000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016004:	89 f0                	mov    eax,esi
c0016006:	c1 e8 10             	shr    eax,0x10
c0016009:	66 f7 f1             	div    cx
c001600c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016011:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016016:	59                   	pop    ecx
c0016017:	5b                   	pop    ebx
c0016018:	89 fb                	mov    ebx,edi
c001601a:	6a 0b                	push   0xb
c001601c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016022:	e8 7f 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016027:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001602b:	83 c4 10             	add    esp,0x10
c001602e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016033:	75 74                	jne    c00160a9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016035:	b2 0a                	mov    dl,0xa
c0016037:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001603b:	0f b6 c1             	movzx  eax,cl
c001603e:	f6 f2                	div    dl
c0016040:	88 c3                	mov    bl,al
c0016042:	88 e0                	mov    al,ah
c0016044:	c1 e3 04             	shl    ebx,0x4
c0016047:	09 c3                	or     ebx,eax
c0016049:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001604e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016052:	f6 f2                	div    dl
c0016054:	88 c1                	mov    cl,al
c0016056:	88 e0                	mov    al,ah
c0016058:	c1 e1 04             	shl    ecx,0x4
c001605b:	09 c1                	or     ecx,eax
c001605d:	89 f8                	mov    eax,edi
c001605f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016063:	0f b6 c0             	movzx  eax,al
c0016066:	f6 f2                	div    dl
c0016068:	88 c3                	mov    bl,al
c001606a:	88 e0                	mov    al,ah
c001606c:	c1 e3 04             	shl    ebx,0x4
c001606f:	09 c3                	or     ebx,eax
c0016071:	89 f0                	mov    eax,esi
c0016073:	0f b6 c0             	movzx  eax,al
c0016076:	f6 f2                	div    dl
c0016078:	88 c1                	mov    cl,al
c001607a:	88 e0                	mov    al,ah
c001607c:	c1 e1 04             	shl    ecx,0x4
c001607f:	09 c1                	or     ecx,eax
c0016081:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016086:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001608a:	f6 f2                	div    dl
c001608c:	88 c1                	mov    cl,al
c001608e:	88 e0                	mov    al,ah
c0016090:	c1 e1 04             	shl    ecx,0x4
c0016093:	09 c1                	or     ecx,eax
c0016095:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001609a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001609e:	f6 f2                	div    dl
c00160a0:	89 c5                	mov    ebp,eax
c00160a2:	88 e0                	mov    al,ah
c00160a4:	c1 e5 04             	shl    ebp,0x4
c00160a7:	09 c5                	or     ebp,eax
c00160a9:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00160ae:	75 17                	jne    c00160c7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160b0:	80 fb 0b             	cmp    bl,0xb
c00160b3:	76 0c                	jbe    c00160c1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00160b5:	80 eb 0c             	sub    bl,0xc
c00160b8:	75 02                	jne    c00160bc <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00160ba:	b3 0c                	mov    bl,0xc
c00160bc:	83 cb 80             	or     ebx,0xffffff80
c00160bf:	eb 06                	jmp    c00160c7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160c1:	84 db                	test   bl,bl
c00160c3:	75 02                	jne    c00160c7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160c5:	b3 0c                	mov    bl,0xc
c00160c7:	0f b6 db             	movzx  ebx,bl
c00160ca:	50                   	push   eax
c00160cb:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00160d0:	50                   	push   eax
c00160d1:	6a 00                	push   0x0
c00160d3:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160d9:	e8 de 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160de:	83 c4 0c             	add    esp,0xc
c00160e1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160e6:	50                   	push   eax
c00160e7:	6a 02                	push   0x2
c00160e9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160ef:	e8 c8 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160f4:	83 c4 0c             	add    esp,0xc
c00160f7:	53                   	push   ebx
c00160f8:	6a 04                	push   0x4
c00160fa:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016100:	e8 b7 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016105:	83 c4 0c             	add    esp,0xc
c0016108:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001610d:	50                   	push   eax
c001610e:	6a 07                	push   0x7
c0016110:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016116:	e8 a1 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001611b:	83 c4 0c             	add    esp,0xc
c001611e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016123:	50                   	push   eax
c0016124:	6a 08                	push   0x8
c0016126:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001612c:	e8 8b 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016131:	83 c4 0c             	add    esp,0xc
c0016134:	89 e8                	mov    eax,ebp
c0016136:	0f b6 e8             	movzx  ebp,al
c0016139:	55                   	push   ebp
c001613a:	6a 09                	push   0x9
c001613c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016142:	e8 75 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016147:	5a                   	pop    edx
c0016148:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001614c:	e8 9f fb ff ff       	call   c0015cf0 <RTC::completeRTCRefresh()>
c0016151:	83 c4 3c             	add    esp,0x3c
c0016154:	b0 01                	mov    al,0x1
c0016156:	5b                   	pop    ebx
c0016157:	5e                   	pop    esi
c0016158:	5f                   	pop    edi
c0016159:	5d                   	pop    ebp
c001615a:	c3                   	ret    

c001615b <rtcIRQHandler(regs*, void*)>:
c001615b:	53                   	push   ebx
c001615c:	83 ec 10             	sub    esp,0x10
c001615f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016163:	6a 0c                	push   0xc
c0016165:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001616b:	e8 36 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016170:	83 c4 10             	add    esp,0x10
c0016173:	84 c0                	test   al,al
c0016175:	79 24                	jns    c001619b <rtcIRQHandler(regs*, void*)+0x40>
c0016177:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001617e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016185:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c001618c:	75 0d                	jne    c001619b <rtcIRQHandler(regs*, void*)+0x40>
c001618e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016192:	83 c4 08             	add    esp,0x8
c0016195:	5b                   	pop    ebx
c0016196:	e9 55 fb ff ff       	jmp    c0015cf0 <RTC::completeRTCRefresh()>
c001619b:	83 c4 08             	add    esp,0x8
c001619e:	5b                   	pop    ebx
c001619f:	c3                   	ret    

c00161a0 <RTC::RTC()>:
c00161a0:	83 ec 1c             	sub    esp,0x1c
c00161a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161a7:	83 ec 08             	sub    esp,0x8
c00161aa:	68 03 f0 01 c0       	push   0xc001f003
c00161af:	50                   	push   eax
c00161b0:	e8 c9 52 ff ff       	call   c000b47e <Clock::Clock(char const*)>
c00161b5:	83 c4 10             	add    esp,0x10
c00161b8:	ba 20 f0 01 c0       	mov    edx,0xc001f020
c00161bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c1:	89 10                	mov    DWORD PTR [eax],edx
c00161c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c7:	83 ec 0c             	sub    esp,0xc
c00161ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161ce:	6a 01                	push   0x1
c00161d0:	68 5b 61 01 c0       	push   0xc001615b
c00161d5:	6a 08                	push   0x8
c00161d7:	50                   	push   eax
c00161d8:	e8 8b 57 ff ff       	call   c000b968 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00161dd:	83 c4 20             	add    esp,0x20
c00161e0:	89 c2                	mov    edx,eax
c00161e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161e6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00161ec:	fa                   	cli    
c00161ed:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161f2:	40                   	inc    eax
c00161f3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161f8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161fd:	83 ec 08             	sub    esp,0x8
c0016200:	6a 0b                	push   0xb
c0016202:	50                   	push   eax
c0016203:	e8 9e 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016208:	83 c4 10             	add    esp,0x10
c001620b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001620f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016214:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016218:	83 ca 10             	or     edx,0x10
c001621b:	81 e2 ff 00 00 00    	and    edx,0xff
c0016221:	83 ec 04             	sub    esp,0x4
c0016224:	52                   	push   edx
c0016225:	6a 0b                	push   0xb
c0016227:	50                   	push   eax
c0016228:	e8 8f 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001622d:	83 c4 10             	add    esp,0x10
c0016230:	83 ec 0c             	sub    esp,0xc
c0016233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016237:	e8 b4 fa ff ff       	call   c0015cf0 <RTC::completeRTCRefresh()>
c001623c:	83 c4 10             	add    esp,0x10
c001623f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016244:	48                   	dec    eax
c0016245:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001624a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001624f:	85 c0                	test   eax,eax
c0016251:	75 01                	jne    c0016254 <RTC::RTC()+0xb4>
c0016253:	fb                   	sti    
c0016254:	90                   	nop
c0016255:	83 c4 1c             	add    esp,0x1c
c0016258:	c3                   	ret    
c0016259:	66 90                	xchg   ax,ax
c001625b:	90                   	nop

c001625c <HalConsoleScroll(int, int)>:
c001625c:	83 ec 10             	sub    esp,0x10
c001625f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016267:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001626f:	90                   	nop
c0016270:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016275:	0f 8f e1 00 00 00    	jg     c001635c <HalConsoleScroll(int, int)+0x100>
c001627b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016283:	90                   	nop
c0016284:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001628c:	0f 8f be 00 00 00    	jg     c0016350 <HalConsoleScroll(int, int)+0xf4>
c0016292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016296:	89 d0                	mov    eax,edx
c0016298:	c1 e0 02             	shl    eax,0x2
c001629b:	01 d0                	add    eax,edx
c001629d:	c1 e0 05             	shl    eax,0x5
c00162a0:	89 c2                	mov    edx,eax
c00162a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162a6:	01 d0                	add    eax,edx
c00162a8:	89 c2                	mov    edx,eax
c00162aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162ae:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00162b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162b5:	89 d0                	mov    eax,edx
c00162b7:	c1 e0 02             	shl    eax,0x2
c00162ba:	01 d0                	add    eax,edx
c00162bc:	c1 e0 05             	shl    eax,0x5
c00162bf:	89 c2                	mov    edx,eax
c00162c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162c5:	01 d0                	add    eax,edx
c00162c7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00162cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162d1:	01 c2                	add    edx,eax
c00162d3:	8a 01                	mov    al,BYTE PTR [ecx]
c00162d5:	88 02                	mov    BYTE PTR [edx],al
c00162d7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162dc:	75 66                	jne    c0016344 <HalConsoleScroll(int, int)+0xe8>
c00162de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162e2:	83 e0 01             	and    eax,0x1
c00162e5:	74 39                	je     c0016320 <HalConsoleScroll(int, int)+0xc4>
c00162e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00162eb:	83 e0 0f             	and    eax,0xf
c00162ee:	88 c2                	mov    dl,al
c00162f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162f4:	c1 e0 04             	shl    eax,0x4
c00162f7:	88 d1                	mov    cl,dl
c00162f9:	09 c1                	or     ecx,eax
c00162fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162ff:	89 d0                	mov    eax,edx
c0016301:	c1 e0 02             	shl    eax,0x2
c0016304:	01 d0                	add    eax,edx
c0016306:	c1 e0 05             	shl    eax,0x5
c0016309:	89 c2                	mov    edx,eax
c001630b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001630f:	01 d0                	add    eax,edx
c0016311:	89 c2                	mov    edx,eax
c0016313:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016317:	01 d0                	add    eax,edx
c0016319:	88 ca                	mov    dl,cl
c001631b:	88 10                	mov    BYTE PTR [eax],dl
c001631d:	eb 25                	jmp    c0016344 <HalConsoleScroll(int, int)+0xe8>
c001631f:	90                   	nop
c0016320:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016324:	89 d0                	mov    eax,edx
c0016326:	c1 e0 02             	shl    eax,0x2
c0016329:	01 d0                	add    eax,edx
c001632b:	c1 e0 05             	shl    eax,0x5
c001632e:	89 c2                	mov    edx,eax
c0016330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016334:	01 d0                	add    eax,edx
c0016336:	89 c2                	mov    edx,eax
c0016338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001633c:	01 d0                	add    eax,edx
c001633e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016341:	8d 76 00             	lea    esi,[esi+0x0]
c0016344:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016348:	e9 37 ff ff ff       	jmp    c0016284 <HalConsoleScroll(int, int)+0x28>
c001634d:	8d 76 00             	lea    esi,[esi+0x0]
c0016350:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016354:	e9 17 ff ff ff       	jmp    c0016270 <HalConsoleScroll(int, int)+0x14>
c0016359:	8d 76 00             	lea    esi,[esi+0x0]
c001635c:	90                   	nop
c001635d:	83 c4 10             	add    esp,0x10
c0016360:	c3                   	ret    
c0016361:	8d 76 00             	lea    esi,[esi+0x0]

c0016364 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016364:	83 ec 14             	sub    esp,0x14
c0016367:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001636b:	88 04 24             	mov    BYTE PTR [esp],al
c001636e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016371:	25 ff 00 00 00       	and    eax,0xff
c0016376:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001637a:	89 d1                	mov    ecx,edx
c001637c:	83 e1 0f             	and    ecx,0xf
c001637f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016383:	c1 e2 04             	shl    edx,0x4
c0016386:	81 e2 ff 00 00 00    	and    edx,0xff
c001638c:	09 ca                	or     edx,ecx
c001638e:	c1 e2 08             	shl    edx,0x8
c0016391:	09 d0                	or     eax,edx
c0016393:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016398:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00163a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163a4:	89 d0                	mov    eax,edx
c00163a6:	c1 e0 02             	shl    eax,0x2
c00163a9:	01 d0                	add    eax,edx
c00163ab:	c1 e0 04             	shl    eax,0x4
c00163ae:	89 c2                	mov    edx,eax
c00163b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163b4:	01 d0                	add    eax,edx
c00163b6:	01 c0                	add    eax,eax
c00163b8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00163bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163c0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00163c5:	66 89 02             	mov    WORD PTR [edx],ax
c00163c8:	90                   	nop
c00163c9:	83 c4 14             	add    esp,0x14
c00163cc:	c3                   	ret    
c00163cd:	8d 76 00             	lea    esi,[esi+0x0]

c00163d0 <HalConsoleCursorUpdate(int, int)>:
c00163d0:	83 ec 20             	sub    esp,0x20
c00163d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00163d7:	89 c2                	mov    edx,eax
c00163d9:	89 d0                	mov    eax,edx
c00163db:	c1 e0 02             	shl    eax,0x2
c00163de:	01 d0                	add    eax,edx
c00163e0:	c1 e0 04             	shl    eax,0x4
c00163e3:	89 c2                	mov    edx,eax
c00163e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163e9:	01 d0                	add    eax,edx
c00163eb:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00163f0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163f7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00163fc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016400:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016404:	ee                   	out    dx,al
c0016405:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001640a:	25 ff 00 00 00       	and    eax,0xff
c001640f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016416:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001641a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001641e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016422:	ee                   	out    dx,al
c0016423:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001642a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001642f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016437:	ee                   	out    dx,al
c0016438:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001643d:	66 c1 e8 08          	shr    ax,0x8
c0016441:	25 ff 00 00 00       	and    eax,0xff
c0016446:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001644d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016451:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016455:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016459:	ee                   	out    dx,al
c001645a:	90                   	nop
c001645b:	83 c4 20             	add    esp,0x20
c001645e:	c3                   	ret    
c001645f:	90                   	nop

c0016460 <FAT::getName()>:
c0016460:	b8 54 f0 01 c0       	mov    eax,0xc001f054
c0016465:	c3                   	ret    
c0016466:	66 90                	xchg   ax,ax

c0016468 <FAT::tell(void*, unsigned long long*)>:
c0016468:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001646d:	75 09                	jne    c0016478 <FAT::tell(void*, unsigned long long*)+0x10>
c001646f:	b8 04 00 00 00       	mov    eax,0x4
c0016474:	c3                   	ret    
c0016475:	8d 76 00             	lea    esi,[esi+0x0]
c0016478:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001647d:	75 09                	jne    c0016488 <FAT::tell(void*, unsigned long long*)+0x20>
c001647f:	b8 04 00 00 00       	mov    eax,0x4
c0016484:	c3                   	ret    
c0016485:	8d 76 00             	lea    esi,[esi+0x0]
c0016488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001648c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001648f:	ba 00 00 00 00       	mov    edx,0x0
c0016494:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016498:	89 01                	mov    DWORD PTR [ecx],eax
c001649a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001649d:	b8 00 00 00 00       	mov    eax,0x0
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <FAT::stat(void*, unsigned long long*)>:
c00164a4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164a9:	75 09                	jne    c00164b4 <FAT::stat(void*, unsigned long long*)+0x10>
c00164ab:	b8 04 00 00 00       	mov    eax,0x4
c00164b0:	c3                   	ret    
c00164b1:	8d 76 00             	lea    esi,[esi+0x0]
c00164b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164b9:	75 09                	jne    c00164c4 <FAT::stat(void*, unsigned long long*)+0x20>
c00164bb:	b8 04 00 00 00       	mov    eax,0x4
c00164c0:	c3                   	ret    
c00164c1:	8d 76 00             	lea    esi,[esi+0x0]
c00164c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00164cb:	ba 00 00 00 00       	mov    edx,0x0
c00164d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164d4:	89 01                	mov    DWORD PTR [ecx],eax
c00164d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164d9:	b8 00 00 00 00       	mov    eax,0x0
c00164de:	c3                   	ret    
c00164df:	90                   	nop

c00164e0 <FAT::~FAT()>:
c00164e0:	83 ec 0c             	sub    esp,0xc
c00164e3:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c00164e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ec:	89 10                	mov    DWORD PTR [eax],edx
c00164ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f2:	83 ec 0c             	sub    esp,0xc
c00164f5:	50                   	push   eax
c00164f6:	e8 c7 43 ff ff       	call   c000a8c2 <Filesystem::~Filesystem()>
c00164fb:	83 c4 10             	add    esp,0x10
c00164fe:	90                   	nop
c00164ff:	83 c4 0c             	add    esp,0xc
c0016502:	c3                   	ret    
c0016503:	90                   	nop

c0016504 <FAT::~FAT()>:
c0016504:	83 ec 0c             	sub    esp,0xc
c0016507:	83 ec 0c             	sub    esp,0xc
c001650a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650e:	e8 cd ff ff ff       	call   c00164e0 <FAT::~FAT()>
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	83 ec 08             	sub    esp,0x8
c0016519:	6a 08                	push   0x8
c001651b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001651f:	e8 63 3f ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c0016524:	83 c4 10             	add    esp,0x10
c0016527:	83 c4 0c             	add    esp,0xc
c001652a:	c3                   	ret    
c001652b:	90                   	nop

c001652c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001652c:	83 ec 1c             	sub    esp,0x1c
c001652f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016536:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001653b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001653f:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016546:	83 f8 ff             	cmp    eax,0xffffffff
c0016549:	75 35                	jne    c0016580 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001654b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001654f:	88 c2                	mov    dl,al
c0016551:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016556:	01 d0                	add    eax,edx
c0016558:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001655c:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016562:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016566:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001656d:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016572:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016576:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001657d:	eb 19                	jmp    c0016598 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001657f:	90                   	nop
c0016580:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016584:	88 c2                	mov    dl,al
c0016586:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001658a:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016591:	01 d0                	add    eax,edx
c0016593:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016597:	90                   	nop
c0016598:	83 ec 04             	sub    esp,0x4
c001659b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001659f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165a3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00165a7:	50                   	push   eax
c00165a8:	e8 a7 e8 fe ff       	call   c0004e54 <f_getlabel>
c00165ad:	83 c4 10             	add    esp,0x10
c00165b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165b9:	75 09                	jne    c00165c4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00165bb:	b8 00 00 00 00       	mov    eax,0x0
c00165c0:	eb 0a                	jmp    c00165cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00165c2:	66 90                	xchg   ax,ax
c00165c4:	b8 01 00 00 00       	mov    eax,0x1
c00165c9:	8d 76 00             	lea    esi,[esi+0x0]
c00165cc:	83 c4 1c             	add    esp,0x1c
c00165cf:	c3                   	ret    

c00165d0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00165d0:	57                   	push   edi
c00165d1:	83 ec 58             	sub    esp,0x58
c00165d4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00165dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00165e0:	b8 00 00 00 00       	mov    eax,0x0
c00165e5:	b9 0f 00 00 00       	mov    ecx,0xf
c00165ea:	fc                   	cld    
c00165eb:	89 d7                	mov    edi,edx
c00165ed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00165ef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165f3:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165fa:	83 f8 ff             	cmp    eax,0xffffffff
c00165fd:	75 35                	jne    c0016634 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00165ff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016603:	88 c2                	mov    dl,al
c0016605:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001660a:	01 d0                	add    eax,edx
c001660c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016610:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016616:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001661a:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016621:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016626:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001662a:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016631:	eb 19                	jmp    c001664c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016633:	90                   	nop
c0016634:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016638:	88 c2                	mov    dl,al
c001663a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001663e:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016645:	01 d0                	add    eax,edx
c0016647:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001664b:	90                   	nop
c001664c:	83 ec 08             	sub    esp,0x8
c001664f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016653:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016657:	50                   	push   eax
c0016658:	e8 63 a1 fe ff       	call   c00007c0 <strcat>
c001665d:	83 c4 10             	add    esp,0x10
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016667:	50                   	push   eax
c0016668:	e8 38 e9 fe ff       	call   c0004fa5 <f_setlabel>
c001666d:	83 c4 10             	add    esp,0x10
c0016670:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016674:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016679:	75 09                	jne    c0016684 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001667b:	b8 00 00 00 00       	mov    eax,0x0
c0016680:	eb 0a                	jmp    c001668c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016682:	66 90                	xchg   ax,ax
c0016684:	b8 01 00 00 00       	mov    eax,0x1
c0016689:	8d 76 00             	lea    esi,[esi+0x0]
c001668c:	83 c4 58             	add    esp,0x58
c001668f:	5f                   	pop    edi
c0016690:	c3                   	ret    
c0016691:	90                   	nop
c0016692:	66 90                	xchg   ax,ax

c0016694 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016694:	83 ec 2c             	sub    esp,0x2c
c0016697:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001669f:	83 ec 08             	sub    esp,0x8
c00166a2:	68 78 f0 01 c0       	push   0xc001f078
c00166a7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166ab:	e8 30 a0 fe ff       	call   c00006e0 <strcmp>
c00166b0:	83 c4 10             	add    esp,0x10
c00166b3:	85 c0                	test   eax,eax
c00166b5:	0f 94 c0             	sete   al
c00166b8:	84 c0                	test   al,al
c00166ba:	74 10                	je     c00166cc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00166bc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166c4:	e9 b3 00 00 00       	jmp    c001677c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166c9:	8d 76 00             	lea    esi,[esi+0x0]
c00166cc:	83 ec 08             	sub    esp,0x8
c00166cf:	68 6a f0 01 c0       	push   0xc001f06a
c00166d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166d8:	e8 03 a0 fe ff       	call   c00006e0 <strcmp>
c00166dd:	83 c4 10             	add    esp,0x10
c00166e0:	85 c0                	test   eax,eax
c00166e2:	0f 94 c0             	sete   al
c00166e5:	84 c0                	test   al,al
c00166e7:	74 0f                	je     c00166f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00166e9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166f1:	e9 86 00 00 00       	jmp    c001677c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166f6:	66 90                	xchg   ax,ax
c00166f8:	83 ec 08             	sub    esp,0x8
c00166fb:	68 70 f0 01 c0       	push   0xc001f070
c0016700:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016704:	e8 d7 9f fe ff       	call   c00006e0 <strcmp>
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	85 c0                	test   eax,eax
c001670e:	0f 94 c0             	sete   al
c0016711:	84 c0                	test   al,al
c0016713:	74 0b                	je     c0016720 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016715:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001671d:	eb 5d                	jmp    c001677c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001671f:	90                   	nop
c0016720:	83 ec 08             	sub    esp,0x8
c0016723:	68 3c cf 01 c0       	push   0xc001cf3c
c0016728:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001672c:	e8 af 9f fe ff       	call   c00006e0 <strcmp>
c0016731:	83 c4 10             	add    esp,0x10
c0016734:	85 c0                	test   eax,eax
c0016736:	0f 94 c0             	sete   al
c0016739:	84 c0                	test   al,al
c001673b:	74 0b                	je     c0016748 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001673d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016745:	eb 35                	jmp    c001677c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016747:	90                   	nop
c0016748:	83 ec 08             	sub    esp,0x8
c001674b:	68 76 f0 01 c0       	push   0xc001f076
c0016750:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016754:	e8 87 9f fe ff       	call   c00006e0 <strcmp>
c0016759:	83 c4 10             	add    esp,0x10
c001675c:	85 c0                	test   eax,eax
c001675e:	0f 94 c0             	sete   al
c0016761:	84 c0                	test   al,al
c0016763:	74 0b                	je     c0016770 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016765:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001676d:	eb 0d                	jmp    c001677c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001676f:	90                   	nop
c0016770:	b8 08 00 00 00       	mov    eax,0x8
c0016775:	e9 ea 00 00 00       	jmp    c0016864 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001677a:	66 90                	xchg   ax,ax
c001677c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016783:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016788:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001678c:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016793:	83 f8 ff             	cmp    eax,0xffffffff
c0016796:	75 34                	jne    c00167cc <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016798:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001679c:	88 c2                	mov    dl,al
c001679e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00167a3:	01 d0                	add    eax,edx
c00167a5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167a9:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00167af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167b3:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00167ba:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00167bf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00167c3:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00167ca:	eb 18                	jmp    c00167e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00167cc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167d0:	88 c2                	mov    dl,al
c00167d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167d6:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00167dd:	01 d0                	add    eax,edx
c00167df:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167e3:	90                   	nop
c00167e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e8:	88 04 24             	mov    BYTE PTR [esp],al
c00167eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00167ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00167fb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016800:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	68 00 20 00 00       	push   0x2000
c0016810:	e8 a4 0f ff ff       	call   c00077b9 <malloc>
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001681c:	68 00 20 00 00       	push   0x2000
c0016821:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016825:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016829:	50                   	push   eax
c001682a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001682e:	50                   	push   eax
c001682f:	e8 61 ea fe ff       	call   c0005295 <f_mkfs>
c0016834:	83 c4 10             	add    esp,0x10
c0016837:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001683b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016840:	75 0a                	jne    c001684c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016842:	b8 00 00 00 00       	mov    eax,0x0
c0016847:	eb 1b                	jmp    c0016864 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016849:	8d 76 00             	lea    esi,[esi+0x0]
c001684c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016851:	75 09                	jne    c001685c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016853:	b8 09 00 00 00       	mov    eax,0x9
c0016858:	eb 0a                	jmp    c0016864 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001685a:	66 90                	xchg   ax,ax
c001685c:	b8 01 00 00 00       	mov    eax,0x1
c0016861:	8d 76 00             	lea    esi,[esi+0x0]
c0016864:	83 c4 2c             	add    esp,0x2c
c0016867:	c3                   	ret    

c0016868 <FAT::tryMount(LogicalDisk*, int)>:
c0016868:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001686e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016873:	83 f8 14             	cmp    eax,0x14
c0016876:	75 18                	jne    c0016890 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	68 7c f0 01 c0       	push   0xc001f07c
c0016880:	e8 7a 99 ff ff       	call   c00101ff <KePanic(char const*)>
c0016885:	83 c4 10             	add    esp,0x10
c0016888:	b0 00                	mov    al,0x0
c001688a:	e9 e9 01 00 00       	jmp    c0016a78 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001688f:	90                   	nop
c0016890:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016897:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001689d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168a3:	3d 00 02 00 00       	cmp    eax,0x200
c00168a8:	74 0a                	je     c00168b4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00168aa:	b0 00                	mov    al,0x0
c00168ac:	e9 c7 01 00 00       	jmp    c0016a78 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168b1:	8d 76 00             	lea    esi,[esi+0x0]
c00168b4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00168bc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168c3:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00168ca:	83 f8 ff             	cmp    eax,0xffffffff
c00168cd:	74 09                	je     c00168d8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00168cf:	b0 01                	mov    al,0x1
c00168d1:	e9 a2 01 00 00       	jmp    c0016a78 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168d6:	66 90                	xchg   ax,ax
c00168d8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00168e2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00168ea:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00168f1:	88 c2                	mov    dl,al
c00168f3:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168f8:	01 d0                	add    eax,edx
c00168fa:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016901:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016907:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001690e:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016915:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001691a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016921:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016928:	83 ec 0c             	sub    esp,0xc
c001692b:	68 34 02 00 00       	push   0x234
c0016930:	e8 84 0e ff ff       	call   c00077b9 <malloc>
c0016935:	83 c4 10             	add    esp,0x10
c0016938:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001693f:	83 ec 04             	sub    esp,0x4
c0016942:	6a 00                	push   0x0
c0016944:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001694b:	50                   	push   eax
c001694c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016953:	e8 63 d1 fe ff       	call   c0003abb <f_mount>
c0016958:	83 c4 10             	add    esp,0x10
c001695b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016962:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001696a:	74 1c                	je     c0016988 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001696c:	83 ec 0c             	sub    esp,0xc
c001696f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016976:	e8 5e 0e ff ff       	call   c00077d9 <rfree>
c001697b:	83 c4 10             	add    esp,0x10
c001697e:	b0 00                	mov    al,0x0
c0016980:	e9 f3 00 00 00       	jmp    c0016a78 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016985:	8d 76 00             	lea    esi,[esi+0x0]
c0016988:	83 ec 04             	sub    esp,0x4
c001698b:	68 00 01 00 00       	push   0x100
c0016990:	6a 00                	push   0x0
c0016992:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016999:	50                   	push   eax
c001699a:	e8 31 9b fe ff       	call   c00004d0 <memset>
c001699f:	83 c4 10             	add    esp,0x10
c00169a2:	83 ec 08             	sub    esp,0x8
c00169a5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169ac:	50                   	push   eax
c00169ad:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169b4:	50                   	push   eax
c00169b5:	e8 06 9e fe ff       	call   c00007c0 <strcat>
c00169ba:	83 c4 10             	add    esp,0x10
c00169bd:	83 ec 08             	sub    esp,0x8
c00169c0:	68 8a f0 01 c0       	push   0xc001f08a
c00169c5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169cc:	50                   	push   eax
c00169cd:	e8 ee 9d fe ff       	call   c00007c0 <strcat>
c00169d2:	83 c4 10             	add    esp,0x10
c00169d5:	83 ec 04             	sub    esp,0x4
c00169d8:	6a 01                	push   0x1
c00169da:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00169e1:	50                   	push   eax
c00169e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169e6:	50                   	push   eax
c00169e7:	e8 31 d1 fe ff       	call   c0003b1d <f_open>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169f6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00169fd:	85 c0                	test   eax,eax
c00169ff:	74 0b                	je     c0016a0c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a01:	78 31                	js     c0016a34 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a03:	83 e8 04             	sub    eax,0x4
c0016a06:	83 f8 01             	cmp    eax,0x1
c0016a09:	77 29                	ja     c0016a34 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a0b:	90                   	nop
c0016a0c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a14:	83 ec 0c             	sub    esp,0xc
c0016a17:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a1b:	50                   	push   eax
c0016a1c:	e8 af d8 fe ff       	call   c00042d0 <f_close>
c0016a21:	83 c4 10             	add    esp,0x10
c0016a24:	90                   	nop
c0016a25:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016a2d:	74 41                	je     c0016a70 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016a2f:	eb 33                	jmp    c0016a64 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016a31:	8d 76 00             	lea    esi,[esi+0x0]
c0016a34:	83 ec 0c             	sub    esp,0xc
c0016a37:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a3e:	e8 96 0d ff ff       	call   c00077d9 <rfree>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	83 ec 04             	sub    esp,0x4
c0016a49:	6a 00                	push   0x0
c0016a4b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a52:	50                   	push   eax
c0016a53:	6a 00                	push   0x0
c0016a55:	e8 61 d0 fe ff       	call   c0003abb <f_mount>
c0016a5a:	83 c4 10             	add    esp,0x10
c0016a5d:	b0 00                	mov    al,0x0
c0016a5f:	eb 17                	jmp    c0016a78 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a61:	8d 76 00             	lea    esi,[esi+0x0]
c0016a64:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016a69:	40                   	inc    eax
c0016a6a:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016a6f:	90                   	nop
c0016a70:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a77:	90                   	nop
c0016a78:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a7e:	c3                   	ret    
c0016a7f:	90                   	nop

c0016a80 <FAT::allocateSwapfile(char const*, int)>:
c0016a80:	55                   	push   ebp
c0016a81:	57                   	push   edi
c0016a82:	56                   	push   esi
c0016a83:	53                   	push   ebx
c0016a84:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a8a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a95:	83 ec 0c             	sub    esp,0xc
c0016a98:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a9f:	e8 15 0d ff ff       	call   c00077b9 <malloc>
c0016aa4:	83 c4 10             	add    esp,0x10
c0016aa7:	89 c7                	mov    edi,eax
c0016aa9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016aae:	83 ec 04             	sub    esp,0x4
c0016ab1:	50                   	push   eax
c0016ab2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016ab9:	57                   	push   edi
c0016aba:	e8 33 40 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c0016abf:	83 c4 10             	add    esp,0x10
c0016ac2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016ac9:	83 ec 04             	sub    esp,0x4
c0016acc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016ad0:	50                   	push   eax
c0016ad1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ad5:	50                   	push   eax
c0016ad6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016add:	e8 7c 43 ff ff       	call   c000ae5e <File::stat(unsigned long long*, bool*)>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016aec:	c1 e0 14             	shl    eax,0x14
c0016aef:	89 c7                	mov    edi,eax
c0016af1:	89 c5                	mov    ebp,eax
c0016af3:	c1 fd 1f             	sar    ebp,0x1f
c0016af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016afa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016afe:	89 f9                	mov    ecx,edi
c0016b00:	31 c1                	xor    ecx,eax
c0016b02:	89 cb                	mov    ebx,ecx
c0016b04:	89 e9                	mov    ecx,ebp
c0016b06:	31 d1                	xor    ecx,edx
c0016b08:	89 ce                	mov    esi,ecx
c0016b0a:	89 f0                	mov    eax,esi
c0016b0c:	09 d8                	or     eax,ebx
c0016b0e:	0f 84 9c 00 00 00    	je     c0016bb0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b14:	83 ec 0c             	sub    esp,0xc
c0016b17:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b1e:	e8 07 42 ff ff       	call   c000ad2a <File::unlink()>
c0016b23:	83 c4 10             	add    esp,0x10
c0016b26:	83 ec 08             	sub    esp,0x8
c0016b29:	6a 12                	push   0x12
c0016b2b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b32:	e8 7b 40 ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c0016b37:	83 c4 10             	add    esp,0x10
c0016b3a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b41:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b47:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b4e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b55:	c1 e0 14             	shl    eax,0x14
c0016b58:	83 ec 04             	sub    esp,0x4
c0016b5b:	6a 01                	push   0x1
c0016b5d:	50                   	push   eax
c0016b5e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b65:	e8 cb e5 fe ff       	call   c0005135 <f_expand>
c0016b6a:	83 c4 10             	add    esp,0x10
c0016b6d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b76:	83 c0 10             	add    eax,0x10
c0016b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b7b:	83 ec 0c             	sub    esp,0xc
c0016b7e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b82:	52                   	push   edx
c0016b83:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b87:	52                   	push   edx
c0016b88:	6a 00                	push   0x0
c0016b8a:	68 00 04 00 00       	push   0x400
c0016b8f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b96:	ff d0                	call   eax
c0016b98:	83 c4 20             	add    esp,0x20
c0016b9b:	83 ec 0c             	sub    esp,0xc
c0016b9e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ba5:	e8 66 40 ff ff       	call   c000ac10 <File::close()>
c0016baa:	83 c4 10             	add    esp,0x10
c0016bad:	8d 76 00             	lea    esi,[esi+0x0]
c0016bb0:	83 ec 08             	sub    esp,0x8
c0016bb3:	6a 01                	push   0x1
c0016bb5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bbc:	e8 f1 3f ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c0016bc1:	83 c4 10             	add    esp,0x10
c0016bc4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bcd:	83 c0 0c             	add    eax,0xc
c0016bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bd2:	83 ec 0c             	sub    esp,0xc
c0016bd5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016bd9:	52                   	push   edx
c0016bda:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016bde:	52                   	push   edx
c0016bdf:	6a 00                	push   0x0
c0016be1:	6a 04                	push   0x4
c0016be3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016bea:	ff d0                	call   eax
c0016bec:	83 c4 20             	add    esp,0x20
c0016bef:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bf6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016bfc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c03:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016c0a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c0d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c1e:	e8 ed 3f ff ff       	call   c000ac10 <File::close()>
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016c2d:	ba 00 00 00 00       	mov    edx,0x0
c0016c32:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c38:	5b                   	pop    ebx
c0016c39:	5e                   	pop    esi
c0016c3a:	5f                   	pop    edi
c0016c3b:	5d                   	pop    ebp
c0016c3c:	c3                   	ret    
c0016c3d:	90                   	nop
c0016c3e:	66 90                	xchg   ax,ax

c0016c40 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c40:	57                   	push   edi
c0016c41:	56                   	push   esi
c0016c42:	53                   	push   ebx
c0016c43:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c49:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c51:	74 0d                	je     c0016c60 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c53:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c5b:	75 0f                	jne    c0016c6c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c60:	b8 04 00 00 00       	mov    eax,0x4
c0016c65:	e9 36 01 00 00       	jmp    c0016da0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c6a:	66 90                	xchg   ax,ax
c0016c6c:	83 ec 08             	sub    esp,0x8
c0016c6f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c76:	50                   	push   eax
c0016c77:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c7e:	e8 10 d9 fe ff       	call   c0004593 <f_readdir>
c0016c83:	83 c4 10             	add    esp,0x10
c0016c86:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c8d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c9e:	83 c0 16             	add    eax,0x16
c0016ca1:	50                   	push   eax
c0016ca2:	e8 99 98 fe ff       	call   c0000540 <strlen>
c0016ca7:	83 c4 10             	add    esp,0x10
c0016caa:	ba 00 00 00 00       	mov    edx,0x0
c0016caf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cb3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016cb7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016cbe:	25 ff 00 00 00       	and    eax,0xff
c0016cc3:	83 e0 10             	and    eax,0x10
c0016cc6:	74 08                	je     c0016cd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016cc8:	b8 02 00 00 00       	mov    eax,0x2
c0016ccd:	eb 09                	jmp    c0016cd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016ccf:	90                   	nop
c0016cd0:	b8 01 00 00 00       	mov    eax,0x1
c0016cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cdc:	83 ec 08             	sub    esp,0x8
c0016cdf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016ce6:	83 c0 16             	add    eax,0x16
c0016ce9:	50                   	push   eax
c0016cea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cee:	83 c0 10             	add    eax,0x10
c0016cf1:	50                   	push   eax
c0016cf2:	e8 09 99 fe ff       	call   c0000600 <strcpy>
c0016cf7:	83 c4 10             	add    esp,0x10
c0016cfa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d01:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016d08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d0c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016d13:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d1a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016d21:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016d28:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016d2f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016d36:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d3d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d44:	89 c6                	mov    esi,eax
c0016d46:	89 d7                	mov    edi,edx
c0016d48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d4a:	89 c8                	mov    eax,ecx
c0016d4c:	89 fa                	mov    edx,edi
c0016d4e:	89 f3                	mov    ebx,esi
c0016d50:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d57:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d5e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d65:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d6c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d72:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d79:	84 c0                	test   al,al
c0016d7b:	75 07                	jne    c0016d84 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d7d:	b8 07 00 00 00       	mov    eax,0x7
c0016d82:	eb 1c                	jmp    c0016da0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d84:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d8b:	85 c0                	test   eax,eax
c0016d8d:	75 09                	jne    c0016d98 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d8f:	b8 00 00 00 00       	mov    eax,0x0
c0016d94:	eb 0a                	jmp    c0016da0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d96:	66 90                	xchg   ax,ax
c0016d98:	b8 01 00 00 00       	mov    eax,0x1
c0016d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016da0:	81 c4 50 02 00 00    	add    esp,0x250
c0016da6:	5b                   	pop    ebx
c0016da7:	5e                   	pop    esi
c0016da8:	5f                   	pop    edi
c0016da9:	c3                   	ret    
c0016daa:	66 90                	xchg   ax,ax

c0016dac <FAT::read(void*, unsigned long, void*, int*)>:
c0016dac:	83 ec 1c             	sub    esp,0x1c
c0016daf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016db4:	74 0a                	je     c0016dc0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016db6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dbb:	75 0b                	jne    c0016dc8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0016dc0:	b8 04 00 00 00       	mov    eax,0x4
c0016dc5:	eb 41                	jmp    c0016e08 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016dc7:	90                   	nop
c0016dc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dcc:	50                   	push   eax
c0016dcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016dd5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016dd9:	e8 0a d0 fe ff       	call   c0003de8 <f_read>
c0016dde:	83 c4 10             	add    esp,0x10
c0016de1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016de5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016de9:	89 c2                	mov    edx,eax
c0016deb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016def:	89 10                	mov    DWORD PTR [eax],edx
c0016df1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016df5:	85 c0                	test   eax,eax
c0016df7:	75 07                	jne    c0016e00 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016df9:	b8 00 00 00 00       	mov    eax,0x0
c0016dfe:	eb 08                	jmp    c0016e08 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e00:	b8 01 00 00 00       	mov    eax,0x1
c0016e05:	8d 76 00             	lea    esi,[esi+0x0]
c0016e08:	83 c4 1c             	add    esp,0x1c
c0016e0b:	c3                   	ret    

c0016e0c <FAT::write(void*, unsigned long, void*, int*)>:
c0016e0c:	83 ec 1c             	sub    esp,0x1c
c0016e0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e14:	74 0a                	je     c0016e20 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e16:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e1b:	75 0b                	jne    c0016e28 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e20:	b8 04 00 00 00       	mov    eax,0x4
c0016e25:	eb 41                	jmp    c0016e68 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e27:	90                   	nop
c0016e28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e2c:	50                   	push   eax
c0016e2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e39:	e8 a9 d1 fe ff       	call   c0003fe7 <f_write>
c0016e3e:	83 c4 10             	add    esp,0x10
c0016e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e49:	89 c2                	mov    edx,eax
c0016e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e4f:	89 10                	mov    DWORD PTR [eax],edx
c0016e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e55:	85 c0                	test   eax,eax
c0016e57:	75 07                	jne    c0016e60 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e59:	b8 00 00 00 00       	mov    eax,0x0
c0016e5e:	eb 08                	jmp    c0016e68 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e60:	b8 01 00 00 00       	mov    eax,0x1
c0016e65:	8d 76 00             	lea    esi,[esi+0x0]
c0016e68:	83 c4 1c             	add    esp,0x1c
c0016e6b:	c3                   	ret    

c0016e6c <FAT::close(void*)>:
c0016e6c:	83 ec 1c             	sub    esp,0x1c
c0016e6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e74:	75 0a                	jne    c0016e80 <FAT::close(void*)+0x14>
c0016e76:	b8 04 00 00 00       	mov    eax,0x4
c0016e7b:	eb 3f                	jmp    c0016ebc <FAT::close(void*)+0x50>
c0016e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e87:	e8 44 d4 fe ff       	call   c00042d0 <f_close>
c0016e8c:	83 c4 10             	add    esp,0x10
c0016e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e93:	83 ec 0c             	sub    esp,0xc
c0016e96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e9a:	e8 2a 09 ff ff       	call   c00077c9 <free>
c0016e9f:	83 c4 10             	add    esp,0x10
c0016ea2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ea6:	85 c0                	test   eax,eax
c0016ea8:	75 0a                	jne    c0016eb4 <FAT::close(void*)+0x48>
c0016eaa:	b8 00 00 00 00       	mov    eax,0x0
c0016eaf:	eb 0b                	jmp    c0016ebc <FAT::close(void*)+0x50>
c0016eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb4:	b8 01 00 00 00       	mov    eax,0x1
c0016eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ebc:	83 c4 1c             	add    esp,0x1c
c0016ebf:	c3                   	ret    

c0016ec0 <FAT::closeDir(void*)>:
c0016ec0:	83 ec 1c             	sub    esp,0x1c
c0016ec3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ec8:	75 0a                	jne    c0016ed4 <FAT::closeDir(void*)+0x14>
c0016eca:	b8 04 00 00 00       	mov    eax,0x4
c0016ecf:	eb 3f                	jmp    c0016f10 <FAT::closeDir(void*)+0x50>
c0016ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed4:	83 ec 0c             	sub    esp,0xc
c0016ed7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016edb:	e8 91 d6 fe ff       	call   c0004571 <f_closedir>
c0016ee0:	83 c4 10             	add    esp,0x10
c0016ee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ee7:	83 ec 0c             	sub    esp,0xc
c0016eea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eee:	e8 d6 08 ff ff       	call   c00077c9 <free>
c0016ef3:	83 c4 10             	add    esp,0x10
c0016ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016efa:	85 c0                	test   eax,eax
c0016efc:	75 0a                	jne    c0016f08 <FAT::closeDir(void*)+0x48>
c0016efe:	b8 00 00 00 00       	mov    eax,0x0
c0016f03:	eb 0b                	jmp    c0016f10 <FAT::closeDir(void*)+0x50>
c0016f05:	8d 76 00             	lea    esi,[esi+0x0]
c0016f08:	b8 01 00 00 00       	mov    eax,0x1
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	83 c4 1c             	add    esp,0x1c
c0016f13:	c3                   	ret    

c0016f14 <FAT::seek(void*, unsigned long long)>:
c0016f14:	83 ec 2c             	sub    esp,0x2c
c0016f17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f27:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016f2c:	75 0a                	jne    c0016f38 <FAT::seek(void*, unsigned long long)+0x24>
c0016f2e:	b8 04 00 00 00       	mov    eax,0x4
c0016f33:	eb 33                	jmp    c0016f68 <FAT::seek(void*, unsigned long long)+0x54>
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]
c0016f38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f3c:	83 ec 08             	sub    esp,0x8
c0016f3f:	50                   	push   eax
c0016f40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f44:	e8 b6 d3 fe ff       	call   c00042ff <f_lseek>
c0016f49:	83 c4 10             	add    esp,0x10
c0016f4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f54:	85 c0                	test   eax,eax
c0016f56:	75 08                	jne    c0016f60 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f58:	b8 00 00 00 00       	mov    eax,0x0
c0016f5d:	eb 09                	jmp    c0016f68 <FAT::seek(void*, unsigned long long)+0x54>
c0016f5f:	90                   	nop
c0016f60:	b8 01 00 00 00       	mov    eax,0x1
c0016f65:	8d 76 00             	lea    esi,[esi+0x0]
c0016f68:	83 c4 2c             	add    esp,0x2c
c0016f6b:	c3                   	ret    

c0016f6c <fatWrapperReadDisk>:
c0016f6c:	53                   	push   ebx
c0016f6d:	83 ec 18             	sub    esp,0x18
c0016f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f74:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f78:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f7c:	25 ff 00 00 00       	and    eax,0xff
c0016f81:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f88:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f90:	ba 00 00 00 00       	mov    edx,0x0
c0016f95:	83 ec 0c             	sub    esp,0xc
c0016f98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f9c:	53                   	push   ebx
c0016f9d:	52                   	push   edx
c0016f9e:	50                   	push   eax
c0016f9f:	51                   	push   ecx
c0016fa0:	e8 ff 5c ff ff       	call   c000cca4 <LogicalDisk::read(unsigned long long, int, void*)>
c0016fa5:	83 c4 20             	add    esp,0x20
c0016fa8:	83 c4 18             	add    esp,0x18
c0016fab:	5b                   	pop    ebx
c0016fac:	c3                   	ret    
c0016fad:	8d 76 00             	lea    esi,[esi+0x0]

c0016fb0 <fatWrapperWriteDisk>:
c0016fb0:	53                   	push   ebx
c0016fb1:	83 ec 18             	sub    esp,0x18
c0016fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016fbc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fc0:	25 ff 00 00 00       	and    eax,0xff
c0016fc5:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016fcc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016fd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fd4:	ba 00 00 00 00       	mov    edx,0x0
c0016fd9:	83 ec 0c             	sub    esp,0xc
c0016fdc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fe0:	53                   	push   ebx
c0016fe1:	52                   	push   edx
c0016fe2:	50                   	push   eax
c0016fe3:	51                   	push   ecx
c0016fe4:	e8 27 5d ff ff       	call   c000cd10 <LogicalDisk::write(unsigned long long, int, void*)>
c0016fe9:	83 c4 20             	add    esp,0x20
c0016fec:	83 c4 18             	add    esp,0x18
c0016fef:	5b                   	pop    ebx
c0016ff0:	c3                   	ret    
c0016ff1:	8d 76 00             	lea    esi,[esi+0x0]

c0016ff4 <fatWrapperIoctl>:
c0016ff4:	53                   	push   ebx
c0016ff5:	83 ec 28             	sub    esp,0x28
c0016ff8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ffc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017000:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017004:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017008:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001700d:	75 35                	jne    c0017044 <fatWrapperIoctl+0x50>
c001700f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017013:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017017:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001701b:	25 ff 00 00 00       	and    eax,0xff
c0017020:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0017027:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001702d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017033:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017037:	66 89 02             	mov    WORD PTR [edx],ax
c001703a:	b8 00 00 00 00       	mov    eax,0x0
c001703f:	e9 c4 00 00 00       	jmp    c0017108 <fatWrapperIoctl+0x114>
c0017044:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017049:	75 75                	jne    c00170c0 <fatWrapperIoctl+0xcc>
c001704b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001704f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017053:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017057:	25 ff 00 00 00       	and    eax,0xff
c001705c:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0017063:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017069:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001706f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017075:	89 c8                	mov    eax,ecx
c0017077:	89 da                	mov    edx,ebx
c0017079:	0f a4 c2 0a          	shld   edx,eax,0xa
c001707d:	c1 e0 0a             	shl    eax,0xa
c0017080:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017084:	81 e1 ff 00 00 00    	and    ecx,0xff
c001708a:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017091:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017097:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001709d:	89 cb                	mov    ebx,ecx
c001709f:	c1 fb 1f             	sar    ebx,0x1f
c00170a2:	53                   	push   ebx
c00170a3:	51                   	push   ecx
c00170a4:	52                   	push   edx
c00170a5:	50                   	push   eax
c00170a6:	e8 a5 50 00 00       	call   c001c150 <__udivdi3>
c00170ab:	83 c4 10             	add    esp,0x10
c00170ae:	89 c2                	mov    edx,eax
c00170b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170b4:	89 10                	mov    DWORD PTR [eax],edx
c00170b6:	b8 00 00 00 00       	mov    eax,0x0
c00170bb:	eb 4b                	jmp    c0017108 <fatWrapperIoctl+0x114>
c00170bd:	8d 76 00             	lea    esi,[esi+0x0]
c00170c0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00170c5:	75 09                	jne    c00170d0 <fatWrapperIoctl+0xdc>
c00170c7:	b8 00 00 00 00       	mov    eax,0x0
c00170cc:	eb 3a                	jmp    c0017108 <fatWrapperIoctl+0x114>
c00170ce:	66 90                	xchg   ax,ax
c00170d0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00170d5:	75 19                	jne    c00170f0 <fatWrapperIoctl+0xfc>
c00170d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170e3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00170e9:	b8 00 00 00 00       	mov    eax,0x0
c00170ee:	eb 18                	jmp    c0017108 <fatWrapperIoctl+0x114>
c00170f0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170f5:	75 09                	jne    c0017100 <fatWrapperIoctl+0x10c>
c00170f7:	b8 00 00 00 00       	mov    eax,0x0
c00170fc:	eb 0a                	jmp    c0017108 <fatWrapperIoctl+0x114>
c00170fe:	66 90                	xchg   ax,ax
c0017100:	b8 04 00 00 00       	mov    eax,0x4
c0017105:	8d 76 00             	lea    esi,[esi+0x0]
c0017108:	83 c4 28             	add    esp,0x28
c001710b:	5b                   	pop    ebx
c001710c:	c3                   	ret    
c001710d:	90                   	nop
c001710e:	66 90                	xchg   ax,ax

c0017110 <FAT::FAT()>:
c0017110:	83 ec 1c             	sub    esp,0x1c
c0017113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017117:	83 ec 0c             	sub    esp,0xc
c001711a:	50                   	push   eax
c001711b:	e8 7e 37 ff ff       	call   c000a89e <Filesystem::Filesystem()>
c0017120:	83 c4 10             	add    esp,0x10
c0017123:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c0017128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712c:	89 10                	mov    DWORD PTR [eax],edx
c001712e:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c0017138:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017140:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017145:	7f 15                	jg     c001715c <FAT::FAT()+0x4c>
c0017147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001714b:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c0017156:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001715a:	eb e4                	jmp    c0017140 <FAT::FAT()+0x30>
c001715c:	90                   	nop
c001715d:	83 c4 1c             	add    esp,0x1c
c0017160:	c3                   	ret    
c0017161:	90                   	nop
c0017162:	66 90                	xchg   ax,ax

c0017164 <FAT::fixFilepath(char*)>:
c0017164:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017168:	8a 00                	mov    al,BYTE PTR [eax]
c001716a:	3c 40                	cmp    al,0x40
c001716c:	7e 2e                	jle    c001719c <FAT::fixFilepath(char*)+0x38>
c001716e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017172:	8a 00                	mov    al,BYTE PTR [eax]
c0017174:	83 e8 41             	sub    eax,0x41
c0017177:	88 c2                	mov    dl,al
c0017179:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001717d:	88 10                	mov    BYTE PTR [eax],dl
c001717f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017183:	8a 00                	mov    al,BYTE PTR [eax]
c0017185:	0f be c0             	movsx  eax,al
c0017188:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001718f:	83 c0 30             	add    eax,0x30
c0017192:	88 c2                	mov    dl,al
c0017194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017198:	88 10                	mov    BYTE PTR [eax],dl
c001719a:	66 90                	xchg   ax,ax
c001719c:	90                   	nop
c001719d:	c3                   	ret    
c001719e:	66 90                	xchg   ax,ax

c00171a0 <FAT::open(char const*, void**, FileOpenMode)>:
c00171a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00171a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00171ae:	74 0c                	je     c00171bc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00171b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00171b8:	75 0e                	jne    c00171c8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00171ba:	66 90                	xchg   ax,ax
c00171bc:	b8 04 00 00 00       	mov    eax,0x4
c00171c1:	e9 0a 01 00 00       	jmp    c00172d0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00171c6:	66 90                	xchg   ax,ax
c00171c8:	83 ec 08             	sub    esp,0x8
c00171cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171d6:	50                   	push   eax
c00171d7:	e8 24 94 fe ff       	call   c0000600 <strcpy>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	83 ec 08             	sub    esp,0x8
c00171e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00171e6:	50                   	push   eax
c00171e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171ee:	e8 71 ff ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c00171f3:	83 c4 10             	add    esp,0x10
c00171f6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00171fe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017205:	83 e0 01             	and    eax,0x1
c0017208:	74 0a                	je     c0017214 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001720a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017212:	66 90                	xchg   ax,ax
c0017214:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001721b:	83 e0 04             	and    eax,0x4
c001721e:	74 10                	je     c0017230 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017220:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017228:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017230:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017237:	83 e0 02             	and    eax,0x2
c001723a:	74 08                	je     c0017244 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001723c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017244:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001724b:	83 e0 08             	and    eax,0x8
c001724e:	74 08                	je     c0017258 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017250:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017258:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001725f:	83 e0 10             	and    eax,0x10
c0017262:	74 08                	je     c001726c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017264:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001726c:	83 ec 0c             	sub    esp,0xc
c001726f:	68 28 02 00 00       	push   0x228
c0017274:	e8 40 05 ff ff       	call   c00077b9 <malloc>
c0017279:	83 c4 10             	add    esp,0x10
c001727c:	89 c2                	mov    edx,eax
c001727e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017285:	89 10                	mov    DWORD PTR [eax],edx
c0017287:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001728e:	31 d2                	xor    edx,edx
c0017290:	88 c2                	mov    dl,al
c0017292:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017299:	8b 00                	mov    eax,DWORD PTR [eax]
c001729b:	83 ec 04             	sub    esp,0x4
c001729e:	52                   	push   edx
c001729f:	8d 54 24 10          	lea    edx,[esp+0x10]
c00172a3:	52                   	push   edx
c00172a4:	50                   	push   eax
c00172a5:	e8 73 c8 fe ff       	call   c0003b1d <f_open>
c00172aa:	83 c4 10             	add    esp,0x10
c00172ad:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00172b4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00172bc:	74 0a                	je     c00172c8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00172be:	b8 01 00 00 00       	mov    eax,0x1
c00172c3:	eb 0b                	jmp    c00172d0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172c5:	8d 76 00             	lea    esi,[esi+0x0]
c00172c8:	b8 00 00 00 00       	mov    eax,0x0
c00172cd:	8d 76 00             	lea    esi,[esi+0x0]
c00172d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172d6:	c3                   	ret    
c00172d7:	90                   	nop

c00172d8 <FAT::openDir(char const*, void**)>:
c00172d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172e6:	74 0c                	je     c00172f4 <FAT::openDir(char const*, void**)+0x1c>
c00172e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172f0:	75 0e                	jne    c0017300 <FAT::openDir(char const*, void**)+0x28>
c00172f2:	66 90                	xchg   ax,ax
c00172f4:	b8 04 00 00 00       	mov    eax,0x4
c00172f9:	e9 82 00 00 00       	jmp    c0017380 <FAT::openDir(char const*, void**)+0xa8>
c00172fe:	66 90                	xchg   ax,ax
c0017300:	83 ec 08             	sub    esp,0x8
c0017303:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001730a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001730e:	50                   	push   eax
c001730f:	e8 ec 92 fe ff       	call   c0000600 <strcpy>
c0017314:	83 c4 10             	add    esp,0x10
c0017317:	83 ec 08             	sub    esp,0x8
c001731a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001731e:	50                   	push   eax
c001731f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017326:	e8 39 fe ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	83 ec 0c             	sub    esp,0xc
c0017331:	6a 30                	push   0x30
c0017333:	e8 81 04 ff ff       	call   c00077b9 <malloc>
c0017338:	83 c4 10             	add    esp,0x10
c001733b:	89 c2                	mov    edx,eax
c001733d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017344:	89 10                	mov    DWORD PTR [eax],edx
c0017346:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001734d:	8b 00                	mov    eax,DWORD PTR [eax]
c001734f:	83 ec 08             	sub    esp,0x8
c0017352:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017356:	52                   	push   edx
c0017357:	50                   	push   eax
c0017358:	e8 49 d1 fe ff       	call   c00044a6 <f_opendir>
c001735d:	83 c4 10             	add    esp,0x10
c0017360:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017367:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001736f:	74 07                	je     c0017378 <FAT::openDir(char const*, void**)+0xa0>
c0017371:	b8 01 00 00 00       	mov    eax,0x1
c0017376:	eb 08                	jmp    c0017380 <FAT::openDir(char const*, void**)+0xa8>
c0017378:	b8 00 00 00 00       	mov    eax,0x0
c001737d:	8d 76 00             	lea    esi,[esi+0x0]
c0017380:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017386:	c3                   	ret    
c0017387:	90                   	nop

c0017388 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017388:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001738e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017396:	75 0c                	jne    c00173a4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017398:	b8 04 00 00 00       	mov    eax,0x4
c001739d:	e9 d6 00 00 00       	jmp    c0017478 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173a2:	66 90                	xchg   ax,ax
c00173a4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00173ac:	75 0a                	jne    c00173b8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00173ae:	b8 04 00 00 00       	mov    eax,0x4
c00173b3:	e9 c0 00 00 00       	jmp    c0017478 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173b8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00173c0:	75 0a                	jne    c00173cc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00173c2:	b8 04 00 00 00       	mov    eax,0x4
c00173c7:	e9 ac 00 00 00       	jmp    c0017478 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173cc:	83 ec 08             	sub    esp,0x8
c00173cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173d6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173dd:	50                   	push   eax
c00173de:	e8 1d 92 fe ff       	call   c0000600 <strcpy>
c00173e3:	83 c4 10             	add    esp,0x10
c00173e6:	83 ec 08             	sub    esp,0x8
c00173e9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00173f0:	50                   	push   eax
c00173f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173f8:	e8 67 fd ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c00173fd:	83 c4 10             	add    esp,0x10
c0017400:	83 ec 08             	sub    esp,0x8
c0017403:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017407:	50                   	push   eax
c0017408:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001740f:	50                   	push   eax
c0017410:	e8 10 d2 fe ff       	call   c0004625 <f_stat>
c0017415:	83 c4 10             	add    esp,0x10
c0017418:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001741f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017426:	85 c0                	test   eax,eax
c0017428:	74 0a                	je     c0017434 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001742a:	83 f8 04             	cmp    eax,0x4
c001742d:	74 39                	je     c0017468 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001742f:	eb 3f                	jmp    c0017470 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017431:	8d 76 00             	lea    esi,[esi+0x0]
c0017434:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017438:	25 ff 00 00 00       	and    eax,0xff
c001743d:	83 e0 10             	and    eax,0x10
c0017440:	0f 95 c2             	setne  dl
c0017443:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001744a:	88 10                	mov    BYTE PTR [eax],dl
c001744c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017450:	ba 00 00 00 00       	mov    edx,0x0
c0017455:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001745c:	89 01                	mov    DWORD PTR [ecx],eax
c001745e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017461:	b8 00 00 00 00       	mov    eax,0x0
c0017466:	eb 10                	jmp    c0017478 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017468:	b8 02 00 00 00       	mov    eax,0x2
c001746d:	eb 09                	jmp    c0017478 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001746f:	90                   	nop
c0017470:	b8 01 00 00 00       	mov    eax,0x1
c0017475:	8d 76 00             	lea    esi,[esi+0x0]
c0017478:	81 c4 2c 02 00 00    	add    esp,0x22c
c001747e:	c3                   	ret    
c001747f:	90                   	nop

c0017480 <FAT::unlink(char const*)>:
c0017480:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017486:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001748e:	75 08                	jne    c0017498 <FAT::unlink(char const*)+0x18>
c0017490:	b8 04 00 00 00       	mov    eax,0x4
c0017495:	eb 61                	jmp    c00174f8 <FAT::unlink(char const*)+0x78>
c0017497:	90                   	nop
c0017498:	83 ec 08             	sub    esp,0x8
c001749b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174a6:	50                   	push   eax
c00174a7:	e8 54 91 fe ff       	call   c0000600 <strcpy>
c00174ac:	83 c4 10             	add    esp,0x10
c00174af:	83 ec 08             	sub    esp,0x8
c00174b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00174b6:	50                   	push   eax
c00174b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174be:	e8 a1 fc ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c00174c3:	83 c4 10             	add    esp,0x10
c00174c6:	83 ec 0c             	sub    esp,0xc
c00174c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174cd:	50                   	push   eax
c00174ce:	e8 b7 d3 fe ff       	call   c000488a <f_unlink>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174dd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00174e4:	85 c0                	test   eax,eax
c00174e6:	75 08                	jne    c00174f0 <FAT::unlink(char const*)+0x70>
c00174e8:	b8 00 00 00 00       	mov    eax,0x0
c00174ed:	eb 09                	jmp    c00174f8 <FAT::unlink(char const*)+0x78>
c00174ef:	90                   	nop
c00174f0:	b8 01 00 00 00       	mov    eax,0x1
c00174f5:	8d 76 00             	lea    esi,[esi+0x0]
c00174f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174fe:	c3                   	ret    
c00174ff:	90                   	nop

c0017500 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017500:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017506:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001750d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017514:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017518:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001751c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017524:	75 0a                	jne    c0017530 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017526:	b8 04 00 00 00       	mov    eax,0x4
c001752b:	e9 54 01 00 00       	jmp    c0017684 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017530:	83 ec 08             	sub    esp,0x8
c0017533:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001753a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001753e:	50                   	push   eax
c001753f:	e8 bc 90 fe ff       	call   c0000600 <strcpy>
c0017544:	83 c4 10             	add    esp,0x10
c0017547:	83 ec 08             	sub    esp,0x8
c001754a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001754e:	50                   	push   eax
c001754f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017556:	e8 09 fc ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c001755b:	83 c4 10             	add    esp,0x10
c001755e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017566:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001756e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017572:	25 ff 00 00 00       	and    eax,0xff
c0017577:	83 e0 01             	and    eax,0x1
c001757a:	74 08                	je     c0017584 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001757c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017584:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017588:	25 ff 00 00 00       	and    eax,0xff
c001758d:	83 e0 02             	and    eax,0x2
c0017590:	74 0a                	je     c001759c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017592:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001759a:	66 90                	xchg   ax,ax
c001759c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175a0:	25 ff 00 00 00       	and    eax,0xff
c00175a5:	83 e0 04             	and    eax,0x4
c00175a8:	74 0a                	je     c00175b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00175aa:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00175b2:	66 90                	xchg   ax,ax
c00175b4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175b8:	25 ff 00 00 00       	and    eax,0xff
c00175bd:	83 e0 08             	and    eax,0x8
c00175c0:	74 0a                	je     c00175cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00175c2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00175ca:	66 90                	xchg   ax,ax
c00175cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175d0:	25 ff 00 00 00       	and    eax,0xff
c00175d5:	83 e0 01             	and    eax,0x1
c00175d8:	74 0a                	je     c00175e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00175da:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00175e2:	66 90                	xchg   ax,ax
c00175e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175e8:	25 ff 00 00 00       	and    eax,0xff
c00175ed:	83 e0 02             	and    eax,0x2
c00175f0:	74 0a                	je     c00175fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00175f2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00175fa:	66 90                	xchg   ax,ax
c00175fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017600:	25 ff 00 00 00       	and    eax,0xff
c0017605:	83 e0 04             	and    eax,0x4
c0017608:	74 0a                	je     c0017614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001760a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017612:	66 90                	xchg   ax,ax
c0017614:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017618:	25 ff 00 00 00       	and    eax,0xff
c001761d:	83 e0 08             	and    eax,0x8
c0017620:	74 0a                	je     c001762c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017622:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001762a:	66 90                	xchg   ax,ax
c001762c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017633:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001763a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017641:	31 d2                	xor    edx,edx
c0017643:	88 c2                	mov    dl,al
c0017645:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001764c:	25 ff 00 00 00       	and    eax,0xff
c0017651:	83 ec 04             	sub    esp,0x4
c0017654:	52                   	push   edx
c0017655:	50                   	push   eax
c0017656:	8d 44 24 24          	lea    eax,[esp+0x24]
c001765a:	50                   	push   eax
c001765b:	e8 9d d6 fe ff       	call   c0004cfd <f_chmod>
c0017660:	83 c4 10             	add    esp,0x10
c0017663:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001766a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017671:	85 c0                	test   eax,eax
c0017673:	75 07                	jne    c001767c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017675:	b8 00 00 00 00       	mov    eax,0x0
c001767a:	eb 08                	jmp    c0017684 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001767c:	b8 01 00 00 00       	mov    eax,0x1
c0017681:	8d 76 00             	lea    esi,[esi+0x0]
c0017684:	81 c4 2c 01 00 00    	add    esp,0x12c
c001768a:	c3                   	ret    
c001768b:	90                   	nop

c001768c <FAT::rename(char const*, char const*)>:
c001768c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017692:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001769a:	74 0c                	je     c00176a8 <FAT::rename(char const*, char const*)+0x1c>
c001769c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00176a4:	75 0e                	jne    c00176b4 <FAT::rename(char const*, char const*)+0x28>
c00176a6:	66 90                	xchg   ax,ax
c00176a8:	b8 04 00 00 00       	mov    eax,0x4
c00176ad:	e9 9e 00 00 00       	jmp    c0017750 <FAT::rename(char const*, char const*)+0xc4>
c00176b2:	66 90                	xchg   ax,ax
c00176b4:	83 ec 08             	sub    esp,0x8
c00176b7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176c5:	50                   	push   eax
c00176c6:	e8 35 8f fe ff       	call   c0000600 <strcpy>
c00176cb:	83 c4 10             	add    esp,0x10
c00176ce:	83 ec 08             	sub    esp,0x8
c00176d1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00176d8:	50                   	push   eax
c00176d9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176e0:	e8 7f fa ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c00176e5:	83 c4 10             	add    esp,0x10
c00176e8:	83 ec 08             	sub    esp,0x8
c00176eb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00176f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176f6:	50                   	push   eax
c00176f7:	e8 04 8f fe ff       	call   c0000600 <strcpy>
c00176fc:	83 c4 10             	add    esp,0x10
c00176ff:	83 ec 08             	sub    esp,0x8
c0017702:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017706:	50                   	push   eax
c0017707:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001770e:	e8 51 fa ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c0017713:	83 c4 10             	add    esp,0x10
c0017716:	83 ec 08             	sub    esp,0x8
c0017719:	8d 44 24 14          	lea    eax,[esp+0x14]
c001771d:	50                   	push   eax
c001771e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017725:	50                   	push   eax
c0017726:	e8 1c d4 fe ff       	call   c0004b47 <f_rename>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017735:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001773c:	85 c0                	test   eax,eax
c001773e:	75 08                	jne    c0017748 <FAT::rename(char const*, char const*)+0xbc>
c0017740:	b8 00 00 00 00       	mov    eax,0x0
c0017745:	eb 09                	jmp    c0017750 <FAT::rename(char const*, char const*)+0xc4>
c0017747:	90                   	nop
c0017748:	b8 01 00 00 00       	mov    eax,0x1
c001774d:	8d 76 00             	lea    esi,[esi+0x0]
c0017750:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017756:	c3                   	ret    
c0017757:	90                   	nop

c0017758 <FAT::mkdir(char const*)>:
c0017758:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001775e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017766:	75 08                	jne    c0017770 <FAT::mkdir(char const*)+0x18>
c0017768:	b8 04 00 00 00       	mov    eax,0x4
c001776d:	eb 61                	jmp    c00177d0 <FAT::mkdir(char const*)+0x78>
c001776f:	90                   	nop
c0017770:	83 ec 08             	sub    esp,0x8
c0017773:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001777a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001777e:	50                   	push   eax
c001777f:	e8 7c 8e fe ff       	call   c0000600 <strcpy>
c0017784:	83 c4 10             	add    esp,0x10
c0017787:	83 ec 08             	sub    esp,0x8
c001778a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001778e:	50                   	push   eax
c001778f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017796:	e8 c9 f9 ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c001779b:	83 c4 10             	add    esp,0x10
c001779e:	83 ec 0c             	sub    esp,0xc
c00177a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177a5:	50                   	push   eax
c00177a6:	e8 01 d2 fe ff       	call   c00049ac <f_mkdir>
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00177b5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00177bc:	85 c0                	test   eax,eax
c00177be:	75 08                	jne    c00177c8 <FAT::mkdir(char const*)+0x70>
c00177c0:	b8 00 00 00 00       	mov    eax,0x0
c00177c5:	eb 09                	jmp    c00177d0 <FAT::mkdir(char const*)+0x78>
c00177c7:	90                   	nop
c00177c8:	b8 01 00 00 00       	mov    eax,0x1
c00177cd:	8d 76 00             	lea    esi,[esi+0x0]
c00177d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177d6:	c3                   	ret    
c00177d7:	90                   	nop

c00177d8 <FAT::exists(char const*)>:
c00177d8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00177de:	83 ec 08             	sub    esp,0x8
c00177e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177ec:	50                   	push   eax
c00177ed:	e8 0e 8e fe ff       	call   c0000600 <strcpy>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	83 ec 08             	sub    esp,0x8
c00177f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177fc:	50                   	push   eax
c00177fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017804:	e8 5b f9 ff ff       	call   c0017164 <FAT::fixFilepath(char*)>
c0017809:	83 c4 10             	add    esp,0x10
c001780c:	83 ec 08             	sub    esp,0x8
c001780f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017816:	50                   	push   eax
c0017817:	8d 44 24 10          	lea    eax,[esp+0x10]
c001781b:	50                   	push   eax
c001781c:	e8 04 ce fe ff       	call   c0004625 <f_stat>
c0017821:	83 c4 10             	add    esp,0x10
c0017824:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001782b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017832:	85 c0                	test   eax,eax
c0017834:	75 06                	jne    c001783c <FAT::exists(char const*)+0x64>
c0017836:	b0 01                	mov    al,0x1
c0017838:	eb 06                	jmp    c0017840 <FAT::exists(char const*)+0x68>
c001783a:	66 90                	xchg   ax,ax
c001783c:	b0 00                	mov    al,0x0
c001783e:	66 90                	xchg   ax,ax
c0017840:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017846:	c3                   	ret    
c0017847:	90                   	nop

c0017848 <isoReadDiscSectorHelper>:
c0017848:	83 ec 2c             	sub    esp,0x2c
c001784b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001784f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017853:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017858:	83 e8 41             	sub    eax,0x41
c001785b:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017862:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017866:	ba 00 00 00 00       	mov    edx,0x0
c001786b:	83 ec 0c             	sub    esp,0xc
c001786e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017872:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017876:	52                   	push   edx
c0017877:	50                   	push   eax
c0017878:	51                   	push   ecx
c0017879:	e8 26 54 ff ff       	call   c000cca4 <LogicalDisk::read(unsigned long long, int, void*)>
c001787e:	83 c4 20             	add    esp,0x20
c0017881:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017885:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001788a:	74 0c                	je     c0017898 <isoReadDiscSectorHelper+0x50>
c001788c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017890:	c1 e0 0b             	shl    eax,0xb
c0017893:	eb 0b                	jmp    c00178a0 <isoReadDiscSectorHelper+0x58>
c0017895:	8d 76 00             	lea    esi,[esi+0x0]
c0017898:	b8 00 00 00 00       	mov    eax,0x0
c001789d:	8d 76 00             	lea    esi,[esi+0x0]
c00178a0:	83 c4 2c             	add    esp,0x2c
c00178a3:	c3                   	ret    

c00178a4 <iso_kprintf>:
c00178a4:	83 ec 0c             	sub    esp,0xc
c00178a7:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178ac:	83 ec 08             	sub    esp,0x8
c00178af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178b3:	50                   	push   eax
c00178b4:	e8 7d 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178b9:	83 c4 10             	add    esp,0x10
c00178bc:	90                   	nop
c00178bd:	83 c4 0c             	add    esp,0xc
c00178c0:	c3                   	ret    
c00178c1:	8d 76 00             	lea    esi,[esi+0x0]

c00178c4 <iso_kprintfd>:
c00178c4:	83 ec 0c             	sub    esp,0xc
c00178c7:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178cc:	83 ec 08             	sub    esp,0x8
c00178cf:	68 00 f1 01 c0       	push   0xc001f100
c00178d4:	50                   	push   eax
c00178d5:	e8 5c 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178da:	83 c4 10             	add    esp,0x10
c00178dd:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00178e6:	83 ec 08             	sub    esp,0x8
c00178e9:	52                   	push   edx
c00178ea:	50                   	push   eax
c00178eb:	e8 00 0e ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00178f0:	83 c4 10             	add    esp,0x10
c00178f3:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178f8:	83 ec 08             	sub    esp,0x8
c00178fb:	68 81 ef 01 c0       	push   0xc001ef81
c0017900:	50                   	push   eax
c0017901:	e8 30 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017906:	83 c4 10             	add    esp,0x10
c0017909:	90                   	nop
c001790a:	83 c4 0c             	add    esp,0xc
c001790d:	c3                   	ret    

c001790e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001790e:	b8 08 00 00 00       	mov    eax,0x8
c0017913:	c3                   	ret    

c0017914 <ISO9660::getName()>:
c0017914:	b8 03 f1 01 c0       	mov    eax,0xc001f103
c0017919:	c3                   	ret    

c001791a <ISO9660::closeDir(void*)>:
c001791a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001791e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017920:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017923:	90                   	nop

c0017924 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017924:	b8 01 00 00 00       	mov    eax,0x1
c0017929:	c3                   	ret    

c001792a <ISO9660::unlink(char const*)>:
c001792a:	b8 01 00 00 00       	mov    eax,0x1
c001792f:	c3                   	ret    

c0017930 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017930:	b8 03 00 00 00       	mov    eax,0x3
c0017935:	c3                   	ret    

c0017936 <ISO9660::rename(char const*, char const*)>:
c0017936:	b8 01 00 00 00       	mov    eax,0x1
c001793b:	c3                   	ret    

c001793c <ISO9660::mkdir(char const*)>:
c001793c:	b8 01 00 00 00       	mov    eax,0x1
c0017941:	c3                   	ret    

c0017942 <ISO9660::~ISO9660()>:
c0017942:	83 ec 0c             	sub    esp,0xc
c0017945:	ba 54 f1 01 c0       	mov    edx,0xc001f154
c001794a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001794e:	89 10                	mov    DWORD PTR [eax],edx
c0017950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017954:	83 ec 0c             	sub    esp,0xc
c0017957:	50                   	push   eax
c0017958:	e8 65 2f ff ff       	call   c000a8c2 <Filesystem::~Filesystem()>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	90                   	nop
c0017961:	83 c4 0c             	add    esp,0xc
c0017964:	c3                   	ret    
c0017965:	90                   	nop

c0017966 <ISO9660::~ISO9660()>:
c0017966:	83 ec 0c             	sub    esp,0xc
c0017969:	83 ec 0c             	sub    esp,0xc
c001796c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017970:	e8 cd ff ff ff       	call   c0017942 <ISO9660::~ISO9660()>
c0017975:	83 c4 10             	add    esp,0x10
c0017978:	83 ec 08             	sub    esp,0x8
c001797b:	6a 08                	push   0x8
c001797d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017981:	e8 01 2b ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c0017986:	83 c4 10             	add    esp,0x10
c0017989:	83 c4 0c             	add    esp,0xc
c001798c:	c3                   	ret    
c001798d:	90                   	nop

c001798e <ISO9660::exists(char const*)>:
c001798e:	83 ec 18             	sub    esp,0x18
c0017991:	68 1e f1 01 c0       	push   0xc001f11e
c0017996:	e8 64 88 ff ff       	call   c00101ff <KePanic(char const*)>
c001799b:	31 c0                	xor    eax,eax
c001799d:	83 c4 1c             	add    esp,0x1c
c00179a0:	c3                   	ret    
c00179a1:	90                   	nop

c00179a2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00179a2:	56                   	push   esi
c00179a3:	53                   	push   ebx
c00179a4:	50                   	push   eax
c00179a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179ad:	85 db                	test   ebx,ebx
c00179af:	0f 84 82 00 00 00    	je     c0017a37 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00179b5:	85 f6                	test   esi,esi
c00179b7:	74 7e                	je     c0017a37 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00179b9:	ba 03 00 00 00       	mov    edx,0x3
c00179be:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00179c3:	75 77                	jne    c0017a3c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179c5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00179c8:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c00179ce:	74 34                	je     c0017a04 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c00179d0:	83 ec 0c             	sub    esp,0xc
c00179d3:	50                   	push   eax
c00179d4:	e8 e6 ed fe ff       	call   c00067bf <init_percd>
c00179d9:	83 c4 10             	add    esp,0x10
c00179dc:	ba 0b 00 00 00       	mov    edx,0xb
c00179e1:	40                   	inc    eax
c00179e2:	74 58                	je     c0017a3c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179e4:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c00179eb:	74 10                	je     c00179fd <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c00179ed:	83 ec 0c             	sub    esp,0xc
c00179f0:	68 3c f1 01 c0       	push   0xc001f13c
c00179f5:	e8 05 88 ff ff       	call   c00101ff <KePanic(char const*)>
c00179fa:	83 c4 10             	add    esp,0x10
c00179fd:	8a 03                	mov    al,BYTE PTR [ebx]
c00179ff:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a04:	83 ec 0c             	sub    esp,0xc
c0017a07:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a0e:	83 c3 03             	add    ebx,0x3
c0017a11:	50                   	push   eax
c0017a12:	e8 a8 ed fe ff       	call   c00067bf <init_percd>
c0017a17:	59                   	pop    ecx
c0017a18:	58                   	pop    eax
c0017a19:	6a 00                	push   0x0
c0017a1b:	53                   	push   ebx
c0017a1c:	e8 dc e8 fe ff       	call   c00062fd <iso_open>
c0017a21:	83 c4 10             	add    esp,0x10
c0017a24:	ba 01 00 00 00       	mov    edx,0x1
c0017a29:	83 f8 ff             	cmp    eax,0xffffffff
c0017a2c:	74 0e                	je     c0017a3c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a2e:	83 c0 64             	add    eax,0x64
c0017a31:	31 d2                	xor    edx,edx
c0017a33:	89 06                	mov    DWORD PTR [esi],eax
c0017a35:	eb 05                	jmp    c0017a3c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a37:	ba 04 00 00 00       	mov    edx,0x4
c0017a3c:	89 d0                	mov    eax,edx
c0017a3e:	5a                   	pop    edx
c0017a3f:	5b                   	pop    ebx
c0017a40:	5e                   	pop    esi
c0017a41:	c3                   	ret    

c0017a42 <ISO9660::openDir(char const*, void**)>:
c0017a42:	56                   	push   esi
c0017a43:	53                   	push   ebx
c0017a44:	50                   	push   eax
c0017a45:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a49:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a4d:	85 db                	test   ebx,ebx
c0017a4f:	74 76                	je     c0017ac7 <ISO9660::openDir(char const*, void**)+0x85>
c0017a51:	85 f6                	test   esi,esi
c0017a53:	74 72                	je     c0017ac7 <ISO9660::openDir(char const*, void**)+0x85>
c0017a55:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a58:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a5e:	74 34                	je     c0017a94 <ISO9660::openDir(char const*, void**)+0x52>
c0017a60:	83 ec 0c             	sub    esp,0xc
c0017a63:	50                   	push   eax
c0017a64:	e8 56 ed fe ff       	call   c00067bf <init_percd>
c0017a69:	83 c4 10             	add    esp,0x10
c0017a6c:	ba 0b 00 00 00       	mov    edx,0xb
c0017a71:	40                   	inc    eax
c0017a72:	74 58                	je     c0017acc <ISO9660::openDir(char const*, void**)+0x8a>
c0017a74:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a7b:	74 10                	je     c0017a8d <ISO9660::openDir(char const*, void**)+0x4b>
c0017a7d:	83 ec 0c             	sub    esp,0xc
c0017a80:	68 3c f1 01 c0       	push   0xc001f13c
c0017a85:	e8 75 87 ff ff       	call   c00101ff <KePanic(char const*)>
c0017a8a:	83 c4 10             	add    esp,0x10
c0017a8d:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a8f:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a94:	83 ec 0c             	sub    esp,0xc
c0017a97:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a9e:	83 c3 03             	add    ebx,0x3
c0017aa1:	50                   	push   eax
c0017aa2:	e8 18 ed fe ff       	call   c00067bf <init_percd>
c0017aa7:	59                   	pop    ecx
c0017aa8:	58                   	pop    eax
c0017aa9:	6a 01                	push   0x1
c0017aab:	53                   	push   ebx
c0017aac:	e8 4c e8 fe ff       	call   c00062fd <iso_open>
c0017ab1:	83 c4 10             	add    esp,0x10
c0017ab4:	ba 01 00 00 00       	mov    edx,0x1
c0017ab9:	83 f8 ff             	cmp    eax,0xffffffff
c0017abc:	74 0e                	je     c0017acc <ISO9660::openDir(char const*, void**)+0x8a>
c0017abe:	83 c0 64             	add    eax,0x64
c0017ac1:	31 d2                	xor    edx,edx
c0017ac3:	89 06                	mov    DWORD PTR [esi],eax
c0017ac5:	eb 05                	jmp    c0017acc <ISO9660::openDir(char const*, void**)+0x8a>
c0017ac7:	ba 04 00 00 00       	mov    edx,0x4
c0017acc:	89 d0                	mov    eax,edx
c0017ace:	5a                   	pop    edx
c0017acf:	5b                   	pop    ebx
c0017ad0:	5e                   	pop    esi
c0017ad1:	c3                   	ret    

c0017ad2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017ad2:	53                   	push   ebx
c0017ad3:	83 ec 08             	sub    esp,0x8
c0017ad6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ada:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ade:	85 c0                	test   eax,eax
c0017ae0:	74 25                	je     c0017b07 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017ae2:	85 db                	test   ebx,ebx
c0017ae4:	74 21                	je     c0017b07 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017ae6:	83 e8 64             	sub    eax,0x64
c0017ae9:	52                   	push   edx
c0017aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017af2:	50                   	push   eax
c0017af3:	e8 ad e8 fe ff       	call   c00063a5 <iso_read>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	89 03                	mov    DWORD PTR [ebx],eax
c0017afd:	09 d0                	or     eax,edx
c0017aff:	0f 94 c0             	sete   al
c0017b02:	0f b6 c0             	movzx  eax,al
c0017b05:	eb 05                	jmp    c0017b0c <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b07:	b8 04 00 00 00       	mov    eax,0x4
c0017b0c:	83 c4 08             	add    esp,0x8
c0017b0f:	5b                   	pop    ebx
c0017b10:	c3                   	ret    
c0017b11:	90                   	nop

c0017b12 <ISO9660::seek(void*, unsigned long long)>:
c0017b12:	57                   	push   edi
c0017b13:	56                   	push   esi
c0017b14:	b8 04 00 00 00       	mov    eax,0x4
c0017b19:	51                   	push   ecx
c0017b1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b1e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b22:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017b26:	85 d2                	test   edx,edx
c0017b28:	74 1c                	je     c0017b46 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017b2a:	6a 00                	push   0x0
c0017b2c:	83 ea 64             	sub    edx,0x64
c0017b2f:	57                   	push   edi
c0017b30:	56                   	push   esi
c0017b31:	52                   	push   edx
c0017b32:	e8 84 e9 fe ff       	call   c00064bb <iso_seek>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	31 f0                	xor    eax,esi
c0017b3c:	31 fa                	xor    edx,edi
c0017b3e:	09 d0                	or     eax,edx
c0017b40:	0f 95 c0             	setne  al
c0017b43:	0f b6 c0             	movzx  eax,al
c0017b46:	5a                   	pop    edx
c0017b47:	5e                   	pop    esi
c0017b48:	5f                   	pop    edi
c0017b49:	c3                   	ret    

c0017b4a <ISO9660::tell(void*, unsigned long long*)>:
c0017b4a:	53                   	push   ebx
c0017b4b:	83 ec 08             	sub    esp,0x8
c0017b4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b56:	85 c0                	test   eax,eax
c0017b58:	74 1c                	je     c0017b76 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b5a:	85 db                	test   ebx,ebx
c0017b5c:	74 18                	je     c0017b76 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b5e:	83 ec 0c             	sub    esp,0xc
c0017b61:	83 e8 64             	sub    eax,0x64
c0017b64:	50                   	push   eax
c0017b65:	e8 d5 e9 fe ff       	call   c000653f <iso_tell>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	89 03                	mov    DWORD PTR [ebx],eax
c0017b6f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b72:	31 c0                	xor    eax,eax
c0017b74:	eb 05                	jmp    c0017b7b <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b76:	b8 04 00 00 00       	mov    eax,0x4
c0017b7b:	83 c4 08             	add    esp,0x8
c0017b7e:	5b                   	pop    ebx
c0017b7f:	c3                   	ret    

c0017b80 <ISO9660::stat(void*, unsigned long long*)>:
c0017b80:	53                   	push   ebx
c0017b81:	83 ec 08             	sub    esp,0x8
c0017b84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b88:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b8c:	85 c0                	test   eax,eax
c0017b8e:	74 20                	je     c0017bb0 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b90:	85 db                	test   ebx,ebx
c0017b92:	74 1c                	je     c0017bb0 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b94:	83 ec 0c             	sub    esp,0xc
c0017b97:	83 e8 64             	sub    eax,0x64
c0017b9a:	50                   	push   eax
c0017b9b:	e8 d0 e9 fe ff       	call   c0006570 <iso_total>
c0017ba0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017ba7:	89 03                	mov    DWORD PTR [ebx],eax
c0017ba9:	83 c4 10             	add    esp,0x10
c0017bac:	31 c0                	xor    eax,eax
c0017bae:	eb 05                	jmp    c0017bb5 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017bb0:	b8 04 00 00 00       	mov    eax,0x4
c0017bb5:	83 c4 08             	add    esp,0x8
c0017bb8:	5b                   	pop    ebx
c0017bb9:	c3                   	ret    

c0017bba <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017bba:	55                   	push   ebp
c0017bbb:	57                   	push   edi
c0017bbc:	56                   	push   esi
c0017bbd:	53                   	push   ebx
c0017bbe:	83 ec 0c             	sub    esp,0xc
c0017bc1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017bc5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017bc9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bcd:	85 ff                	test   edi,edi
c0017bcf:	0f 94 c2             	sete   dl
c0017bd2:	85 f6                	test   esi,esi
c0017bd4:	0f 94 c0             	sete   al
c0017bd7:	08 c2                	or     dl,al
c0017bd9:	0f 85 9e 00 00 00    	jne    c0017c7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017bdf:	85 db                	test   ebx,ebx
c0017be1:	0f 84 96 00 00 00    	je     c0017c7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017be7:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017bea:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017bf0:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017bf7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017bfa:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017c00:	74 34                	je     c0017c36 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017c02:	83 ec 0c             	sub    esp,0xc
c0017c05:	50                   	push   eax
c0017c06:	e8 b4 eb fe ff       	call   c00067bf <init_percd>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	ba 0b 00 00 00       	mov    edx,0xb
c0017c13:	40                   	inc    eax
c0017c14:	74 6c                	je     c0017c82 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c16:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017c1d:	74 10                	je     c0017c2f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	68 3c f1 01 c0       	push   0xc001f13c
c0017c27:	e8 d3 85 ff ff       	call   c00101ff <KePanic(char const*)>
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c31:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017c36:	83 c3 03             	add    ebx,0x3
c0017c39:	52                   	push   edx
c0017c3a:	52                   	push   edx
c0017c3b:	6a 00                	push   0x0
c0017c3d:	53                   	push   ebx
c0017c3e:	e8 ba e6 fe ff       	call   c00062fd <iso_open>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	89 c5                	mov    ebp,eax
c0017c48:	83 f8 ff             	cmp    eax,0xffffffff
c0017c4b:	75 0f                	jne    c0017c5c <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017c4d:	50                   	push   eax
c0017c4e:	50                   	push   eax
c0017c4f:	6a 01                	push   0x1
c0017c51:	53                   	push   ebx
c0017c52:	e8 a6 e6 fe ff       	call   c00062fd <iso_open>
c0017c57:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c5a:	eb 1a                	jmp    c0017c76 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c5c:	83 ec 0c             	sub    esp,0xc
c0017c5f:	50                   	push   eax
c0017c60:	e8 0b e9 fe ff       	call   c0006570 <iso_total>
c0017c65:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c6c:	89 06                	mov    DWORD PTR [esi],eax
c0017c6e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c71:	e8 11 e7 fe ff       	call   c0006387 <iso_close>
c0017c76:	83 c4 10             	add    esp,0x10
c0017c79:	31 d2                	xor    edx,edx
c0017c7b:	eb 05                	jmp    c0017c82 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c7d:	ba 04 00 00 00       	mov    edx,0x4
c0017c82:	83 c4 0c             	add    esp,0xc
c0017c85:	89 d0                	mov    eax,edx
c0017c87:	5b                   	pop    ebx
c0017c88:	5e                   	pop    esi
c0017c89:	5f                   	pop    edi
c0017c8a:	5d                   	pop    ebp
c0017c8b:	c3                   	ret    

c0017c8c <ISO9660::close(void*)>:
c0017c8c:	83 ec 0c             	sub    esp,0xc
c0017c8f:	b8 04 00 00 00       	mov    eax,0x4
c0017c94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c98:	85 d2                	test   edx,edx
c0017c9a:	74 11                	je     c0017cad <ISO9660::close(void*)+0x21>
c0017c9c:	83 ec 0c             	sub    esp,0xc
c0017c9f:	83 ea 64             	sub    edx,0x64
c0017ca2:	52                   	push   edx
c0017ca3:	e8 df e6 fe ff       	call   c0006387 <iso_close>
c0017ca8:	83 c4 10             	add    esp,0x10
c0017cab:	31 c0                	xor    eax,eax
c0017cad:	83 c4 0c             	add    esp,0xc
c0017cb0:	c3                   	ret    
c0017cb1:	90                   	nop

c0017cb2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017cb2:	55                   	push   ebp
c0017cb3:	57                   	push   edi
c0017cb4:	56                   	push   esi
c0017cb5:	53                   	push   ebx
c0017cb6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017cbc:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017cc3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017cca:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017cd1:	85 c0                	test   eax,eax
c0017cd3:	0f 84 96 00 00 00    	je     c0017d6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017cd9:	85 db                	test   ebx,ebx
c0017cdb:	0f 84 8e 00 00 00    	je     c0017d6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017ce1:	83 ec 0c             	sub    esp,0xc
c0017ce4:	83 e8 64             	sub    eax,0x64
c0017ce7:	50                   	push   eax
c0017ce8:	e8 d4 e8 fe ff       	call   c00065c1 <iso_readdir>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	89 c6                	mov    esi,eax
c0017cf2:	85 c0                	test   eax,eax
c0017cf4:	75 18                	jne    c0017d0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017cf6:	52                   	push   edx
c0017cf7:	68 10 01 00 00       	push   0x110
c0017cfc:	6a 00                	push   0x0
c0017cfe:	57                   	push   edi
c0017cff:	e8 cc 87 fe ff       	call   c00004d0 <memset>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	b8 01 00 00 00       	mov    eax,0x1
c0017d0c:	eb 66                	jmp    c0017d74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d0e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d14:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d17:	83 ec 0c             	sub    esp,0xc
c0017d1a:	55                   	push   ebp
c0017d1b:	e8 20 88 fe ff       	call   c0000540 <strlen>
c0017d20:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d2c:	83 c4 10             	add    esp,0x10
c0017d2f:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017d33:	75 0a                	jne    c0017d3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017d35:	b8 02 00 00 00       	mov    eax,0x2
c0017d3a:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017d3d:	74 05                	je     c0017d44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017d3f:	b8 01 00 00 00       	mov    eax,0x1
c0017d44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d48:	50                   	push   eax
c0017d49:	50                   	push   eax
c0017d4a:	55                   	push   ebp
c0017d4b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d4f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017d53:	50                   	push   eax
c0017d54:	e8 a7 88 fe ff       	call   c0000600 <strcpy>
c0017d59:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d62:	31 c0                	xor    eax,eax
c0017d64:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d6a:	83 c4 10             	add    esp,0x10
c0017d6d:	eb 05                	jmp    c0017d74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d6f:	b8 04 00 00 00       	mov    eax,0x4
c0017d74:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d7a:	5b                   	pop    ebx
c0017d7b:	5e                   	pop    esi
c0017d7c:	5f                   	pop    edi
c0017d7d:	5d                   	pop    ebp
c0017d7e:	c3                   	ret    

c0017d7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d7f:	57                   	push   edi
c0017d80:	56                   	push   esi
c0017d81:	53                   	push   ebx
c0017d82:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d86:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d8e:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017d94:	75 08                	jne    c0017d9e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d96:	38 1d 70 fb 01 c0    	cmp    BYTE PTR ds:0xc001fb70,bl
c0017d9c:	74 4a                	je     c0017de8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d9e:	83 ec 0c             	sub    esp,0xc
c0017da1:	31 d2                	xor    edx,edx
c0017da3:	68 40 53 02 c0       	push   0xc0025340
c0017da8:	0f be c3             	movsx  eax,bl
c0017dab:	6a 01                	push   0x1
c0017dad:	52                   	push   edx
c0017dae:	56                   	push   esi
c0017daf:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017db6:	e8 e9 4e ff ff       	call   c000cca4 <LogicalDisk::read(unsigned long long, int, void*)>
c0017dbb:	83 c4 20             	add    esp,0x20
c0017dbe:	85 c0                	test   eax,eax
c0017dc0:	75 0e                	jne    c0017dd0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017dc2:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017dc8:	88 1d 70 fb 01 c0    	mov    BYTE PTR ds:0xc001fb70,bl
c0017dce:	eb 18                	jmp    c0017de8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017dd0:	50                   	push   eax
c0017dd1:	68 00 08 00 00       	push   0x800
c0017dd6:	6a 00                	push   0x0
c0017dd8:	57                   	push   edi
c0017dd9:	e8 f2 86 fe ff       	call   c00004d0 <memset>
c0017dde:	83 c4 10             	add    esp,0x10
c0017de1:	b8 01 00 00 00       	mov    eax,0x1
c0017de6:	eb 0e                	jmp    c0017df6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017de8:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017ded:	b9 00 08 00 00       	mov    ecx,0x800
c0017df2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017df4:	31 c0                	xor    eax,eax
c0017df6:	5b                   	pop    ebx
c0017df7:	5e                   	pop    esi
c0017df8:	5f                   	pop    edi
c0017df9:	c3                   	ret    

c0017dfa <ISO9660::tryMount(LogicalDisk*, int)>:
c0017dfa:	53                   	push   ebx
c0017dfb:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e01:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017e0b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e12:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e15:	0f be db             	movsx  ebx,bl
c0017e18:	53                   	push   ebx
c0017e19:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e1d:	50                   	push   eax
c0017e1e:	6a 10                	push   0x10
c0017e20:	e8 5a ff ff ff       	call   c0017d7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e25:	83 c4 10             	add    esp,0x10
c0017e28:	31 d2                	xor    edx,edx
c0017e2a:	85 c0                	test   eax,eax
c0017e2c:	75 33                	jne    c0017e61 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e2e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017e33:	75 2c                	jne    c0017e61 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e35:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017e3a:	75 25                	jne    c0017e61 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e3c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017e41:	75 1e                	jne    c0017e61 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e43:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017e48:	75 17                	jne    c0017e61 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e4a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017e4f:	75 10                	jne    c0017e61 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e51:	83 ec 0c             	sub    esp,0xc
c0017e54:	53                   	push   ebx
c0017e55:	e8 65 e9 fe ff       	call   c00067bf <init_percd>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	40                   	inc    eax
c0017e5e:	0f 95 c2             	setne  dl
c0017e61:	88 d0                	mov    al,dl
c0017e63:	81 c4 08 08 00 00    	add    esp,0x808
c0017e69:	5b                   	pop    ebx
c0017e6a:	c3                   	ret    
c0017e6b:	90                   	nop

c0017e6c <ISO9660::ISO9660()>:
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e73:	83 ec 0c             	sub    esp,0xc
c0017e76:	50                   	push   eax
c0017e77:	e8 22 2a ff ff       	call   c000a89e <Filesystem::Filesystem()>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	ba 54 f1 01 c0       	mov    edx,0xc001f154
c0017e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e88:	89 10                	mov    DWORD PTR [eax],edx
c0017e8a:	e8 32 ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e8f:	90                   	nop
c0017e90:	83 c4 0c             	add    esp,0xc
c0017e93:	c3                   	ret    

c0017e94 <SoundCard::beginPlayback()>:
c0017e94:	c7 44 24 04 b4 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f1b4
c0017e9c:	e9 5e 83 ff ff       	jmp    c00101ff <KePanic(char const*)>
c0017ea1:	90                   	nop

c0017ea2 <SoundCard::stopPlayback()>:
c0017ea2:	c7 44 24 04 b4 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f1b4
c0017eaa:	e9 50 83 ff ff       	jmp    c00101ff <KePanic(char const*)>
c0017eaf:	90                   	nop

c0017eb0 <SoundCard::SoundCard(char const*)>:
c0017eb0:	83 ec 1c             	sub    esp,0x1c
c0017eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb7:	83 ec 08             	sub    esp,0x8
c0017eba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ebe:	50                   	push   eax
c0017ebf:	e8 90 3c ff ff       	call   c000bb54 <Device::Device(char const*)>
c0017ec4:	83 c4 10             	add    esp,0x10
c0017ec7:	ba 00 f2 01 c0       	mov    edx,0xc001f200
c0017ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed0:	89 10                	mov    DWORD PTR [eax],edx
c0017ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee1:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eef:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017efd:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f1d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f22:	7f 19                	jg     c0017f3d <SoundCard::SoundCard(char const*)+0x8d>
c0017f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f2c:	83 c2 54             	add    edx,0x54
c0017f2f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017f37:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017f3b:	eb e0                	jmp    c0017f1d <SoundCard::SoundCard(char const*)+0x6d>
c0017f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f41:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f48:	90                   	nop
c0017f49:	83 c4 1c             	add    esp,0x1c
c0017f4c:	c3                   	ret    
c0017f4d:	90                   	nop

c0017f4e <SoundCard::~SoundCard()>:
c0017f4e:	83 ec 0c             	sub    esp,0xc
c0017f51:	ba 00 f2 01 c0       	mov    edx,0xc001f200
c0017f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f5a:	89 10                	mov    DWORD PTR [eax],edx
c0017f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f60:	83 ec 0c             	sub    esp,0xc
c0017f63:	50                   	push   eax
c0017f64:	e8 55 39 ff ff       	call   c000b8be <Device::~Device()>
c0017f69:	83 c4 10             	add    esp,0x10
c0017f6c:	90                   	nop
c0017f6d:	83 c4 0c             	add    esp,0xc
c0017f70:	c3                   	ret    
c0017f71:	90                   	nop

c0017f72 <SoundCard::~SoundCard()>:
c0017f72:	83 ec 0c             	sub    esp,0xc
c0017f75:	83 ec 0c             	sub    esp,0xc
c0017f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f7c:	e8 cd ff ff ff       	call   c0017f4e <SoundCard::~SoundCard()>
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	83 ec 08             	sub    esp,0x8
c0017f87:	68 e8 01 00 00       	push   0x1e8
c0017f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f90:	e8 f2 24 ff ff       	call   c000a487 <operator delete(void*, unsigned long)>
c0017f95:	83 c4 10             	add    esp,0x10
c0017f98:	83 c4 0c             	add    esp,0xc
c0017f9b:	c3                   	ret    

c0017f9c <SoundCard::configureRates(int, int, int)>:
c0017f9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017fa0:	31 c0                	xor    eax,eax
c0017fa2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017fa9:	75 20                	jne    c0017fcb <SoundCard::configureRates(int, int, int)+0x2f>
c0017fab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017faf:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fb9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017fc9:	b0 01                	mov    al,0x1
c0017fcb:	c3                   	ret    

c0017fcc <SoundCard::getSamples16(int, short*)>:
c0017fcc:	55                   	push   ebp
c0017fcd:	57                   	push   edi
c0017fce:	31 ff                	xor    edi,edi
c0017fd0:	56                   	push   esi
c0017fd1:	53                   	push   ebx
c0017fd2:	31 db                	xor    ebx,ebx
c0017fd4:	83 ec 10             	sub    esp,0x10
c0017fd7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017fdb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fdf:	8d 04 36             	lea    eax,[esi+esi*1]
c0017fe2:	50                   	push   eax
c0017fe3:	6a 00                	push   0x0
c0017fe5:	55                   	push   ebp
c0017fe6:	e8 e5 84 fe ff       	call   c00004d0 <memset>
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff2:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017ff9:	85 c0                	test   eax,eax
c0017ffb:	74 1b                	je     c0018018 <SoundCard::getSamples16(int, short*)+0x4c>
c0017ffd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018001:	75 15                	jne    c0018018 <SoundCard::getSamples16(int, short*)+0x4c>
c0018003:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018007:	55                   	push   ebp
c0018008:	56                   	push   esi
c0018009:	50                   	push   eax
c001800a:	e8 ed 02 00 00       	call   c00182fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001800f:	83 c4 10             	add    esp,0x10
c0018012:	39 c7                	cmp    edi,eax
c0018014:	7d 02                	jge    c0018018 <SoundCard::getSamples16(int, short*)+0x4c>
c0018016:	89 c7                	mov    edi,eax
c0018018:	43                   	inc    ebx
c0018019:	83 fb 20             	cmp    ebx,0x20
c001801c:	75 d0                	jne    c0017fee <SoundCard::getSamples16(int, short*)+0x22>
c001801e:	83 c4 0c             	add    esp,0xc
c0018021:	89 f8                	mov    eax,edi
c0018023:	5b                   	pop    ebx
c0018024:	5e                   	pop    esi
c0018025:	5f                   	pop    edi
c0018026:	5d                   	pop    ebp
c0018027:	c3                   	ret    

c0018028 <SoundCard::getSamples32(int, int*)>:
c0018028:	55                   	push   ebp
c0018029:	57                   	push   edi
c001802a:	31 ff                	xor    edi,edi
c001802c:	56                   	push   esi
c001802d:	31 f6                	xor    esi,esi
c001802f:	53                   	push   ebx
c0018030:	83 ec 10             	sub    esp,0x10
c0018033:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018037:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001803b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001803f:	c1 e0 02             	shl    eax,0x2
c0018042:	50                   	push   eax
c0018043:	6a 00                	push   0x0
c0018045:	55                   	push   ebp
c0018046:	e8 85 84 fe ff       	call   c00004d0 <memset>
c001804b:	83 c4 10             	add    esp,0x10
c001804e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018055:	85 c0                	test   eax,eax
c0018057:	74 1b                	je     c0018074 <SoundCard::getSamples32(int, int*)+0x4c>
c0018059:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001805d:	75 15                	jne    c0018074 <SoundCard::getSamples32(int, int*)+0x4c>
c001805f:	53                   	push   ebx
c0018060:	55                   	push   ebp
c0018061:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018065:	50                   	push   eax
c0018066:	e8 55 03 00 00       	call   c00183c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001806b:	83 c4 10             	add    esp,0x10
c001806e:	39 c6                	cmp    esi,eax
c0018070:	7d 02                	jge    c0018074 <SoundCard::getSamples32(int, int*)+0x4c>
c0018072:	89 c6                	mov    esi,eax
c0018074:	47                   	inc    edi
c0018075:	83 ff 20             	cmp    edi,0x20
c0018078:	75 d4                	jne    c001804e <SoundCard::getSamples32(int, int*)+0x26>
c001807a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018080:	85 f6                	test   esi,esi
c0018082:	75 0f                	jne    c0018093 <SoundCard::getSamples32(int, int*)+0x6b>
c0018084:	84 c0                	test   al,al
c0018086:	74 1b                	je     c00180a3 <SoundCard::getSamples32(int, int*)+0x7b>
c0018088:	83 ec 0c             	sub    esp,0xc
c001808b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001808d:	53                   	push   ebx
c001808e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018091:	eb 0d                	jmp    c00180a0 <SoundCard::getSamples32(int, int*)+0x78>
c0018093:	84 c0                	test   al,al
c0018095:	75 0c                	jne    c00180a3 <SoundCard::getSamples32(int, int*)+0x7b>
c0018097:	83 ec 0c             	sub    esp,0xc
c001809a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001809c:	53                   	push   ebx
c001809d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00180a0:	83 c4 10             	add    esp,0x10
c00180a3:	83 c4 0c             	add    esp,0xc
c00180a6:	89 f0                	mov    eax,esi
c00180a8:	5b                   	pop    ebx
c00180a9:	5e                   	pop    esi
c00180aa:	5f                   	pop    edi
c00180ab:	5d                   	pop    ebp
c00180ac:	c3                   	ret    
c00180ad:	90                   	nop

c00180ae <SoundCard::addChannel(SoundPort*)>:
c00180ae:	83 ec 0c             	sub    esp,0xc
c00180b1:	31 c0                	xor    eax,eax
c00180b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180b7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00180bf:	74 1b                	je     c00180dc <SoundCard::addChannel(SoundPort*)+0x2e>
c00180c1:	40                   	inc    eax
c00180c2:	83 f8 20             	cmp    eax,0x20
c00180c5:	75 f0                	jne    c00180b7 <SoundCard::addChannel(SoundPort*)+0x9>
c00180c7:	83 ec 0c             	sub    esp,0xc
c00180ca:	68 d9 f1 01 c0       	push   0xc001f1d9
c00180cf:	e8 2b 81 ff ff       	call   c00101ff <KePanic(char const*)>
c00180d4:	83 c4 10             	add    esp,0x10
c00180d7:	83 c8 ff             	or     eax,0xffffffff
c00180da:	eb 0b                	jmp    c00180e7 <SoundCard::addChannel(SoundPort*)+0x39>
c00180dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00180e0:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00180e7:	83 c4 0c             	add    esp,0xc
c00180ea:	c3                   	ret    
c00180eb:	90                   	nop

c00180ec <SoundCard::removeChannel(int)>:
c00180ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180f4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00180ff:	c3                   	ret    

c0018100 <SoundPort::SoundPort(int, int, int, int)>:
c0018100:	83 ec 0c             	sub    esp,0xc
c0018103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018107:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001810e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018112:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001811e:	89 10                	mov    DWORD PTR [eax],edx
c0018120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018124:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018128:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001812b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018133:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018136:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001813b:	75 13                	jne    c0018150 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001813d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018141:	8b 00                	mov    eax,DWORD PTR [eax]
c0018143:	05 a0 0f 00 00       	add    eax,0xfa0
c0018148:	01 c0                	add    eax,eax
c001814a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001814e:	66 90                	xchg   ax,ax
c0018150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018154:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018158:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001815b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001816d:	c1 e0 02             	shl    eax,0x2
c0018170:	83 ec 0c             	sub    esp,0xc
c0018173:	50                   	push   eax
c0018174:	e8 40 f6 fe ff       	call   c00077b9 <malloc>
c0018179:	83 c4 10             	add    esp,0x10
c001817c:	89 c2                	mov    edx,eax
c001817e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018182:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018185:	90                   	nop
c0018186:	83 c4 0c             	add    esp,0xc
c0018189:	c3                   	ret    
c001818a:	66 90                	xchg   ax,ax

c001818c <SoundPort::~SoundPort()>:
c001818c:	83 ec 0c             	sub    esp,0xc
c001818f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018193:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018196:	85 c0                	test   eax,eax
c0018198:	74 1e                	je     c00181b8 <SoundPort::~SoundPort()+0x2c>
c001819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181a1:	83 ec 0c             	sub    esp,0xc
c00181a4:	50                   	push   eax
c00181a5:	e8 1f f6 fe ff       	call   c00077c9 <free>
c00181aa:	83 c4 10             	add    esp,0x10
c00181ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181b8:	90                   	nop
c00181b9:	83 c4 0c             	add    esp,0xc
c00181bc:	c3                   	ret    
c00181bd:	90                   	nop
c00181be:	66 90                	xchg   ax,ax

c00181c0 <SoundPort::unpause()>:
c00181c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181c4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00181c8:	c3                   	ret    
c00181c9:	90                   	nop
c00181ca:	66 90                	xchg   ax,ax

c00181cc <SoundPort::pause()>:
c00181cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181d0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181d4:	c3                   	ret    
c00181d5:	90                   	nop
c00181d6:	66 90                	xchg   ax,ax

c00181d8 <SoundPort::getBufferUsed()>:
c00181d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181dc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00181df:	c3                   	ret    

c00181e0 <SoundPort::getBufferSize()>:
c00181e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181e7:	c3                   	ret    

c00181e8 <SoundPort::buffer16(short*, int)>:
c00181e8:	55                   	push   ebp
c00181e9:	57                   	push   edi
c00181ea:	56                   	push   esi
c00181eb:	53                   	push   ebx
c00181ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181f0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00181f4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00181f7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00181fa:	74 68                	je     c0018264 <SoundPort::buffer16(short*, int)+0x7c>
c00181fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018200:	85 c9                	test   ecx,ecx
c0018202:	7e 60                	jle    c0018264 <SoundPort::buffer16(short*, int)+0x7c>
c0018204:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018208:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001820b:	c1 e1 0f             	shl    ecx,0xf
c001820e:	8d 70 01             	lea    esi,[eax+0x1]
c0018211:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018214:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018217:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001821a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001821d:	74 4d                	je     c001826c <SoundPort::buffer16(short*, int)+0x84>
c001821f:	31 f6                	xor    esi,esi
c0018221:	eb 21                	jmp    c0018244 <SoundPort::buffer16(short*, int)+0x5c>
c0018223:	90                   	nop
c0018224:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018229:	8d 79 01             	lea    edi,[ecx+0x1]
c001822c:	c1 e3 0f             	shl    ebx,0xf
c001822f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018232:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018235:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018238:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001823b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001823e:	74 1c                	je     c001825c <SoundPort::buffer16(short*, int)+0x74>
c0018240:	89 c6                	mov    esi,eax
c0018242:	66 90                	xchg   ax,ax
c0018244:	8d 46 01             	lea    eax,[esi+0x1]
c0018247:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001824b:	75 d7                	jne    c0018224 <SoundPort::buffer16(short*, int)+0x3c>
c001824d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018251:	8d 76 00             	lea    esi,[esi+0x0]
c0018254:	5b                   	pop    ebx
c0018255:	5e                   	pop    esi
c0018256:	5f                   	pop    edi
c0018257:	5d                   	pop    ebp
c0018258:	c3                   	ret    
c0018259:	8d 76 00             	lea    esi,[esi+0x0]
c001825c:	5b                   	pop    ebx
c001825d:	8d 46 02             	lea    eax,[esi+0x2]
c0018260:	5e                   	pop    esi
c0018261:	5f                   	pop    edi
c0018262:	5d                   	pop    ebp
c0018263:	c3                   	ret    
c0018264:	5b                   	pop    ebx
c0018265:	31 c0                	xor    eax,eax
c0018267:	5e                   	pop    esi
c0018268:	5f                   	pop    edi
c0018269:	5d                   	pop    ebp
c001826a:	c3                   	ret    
c001826b:	90                   	nop
c001826c:	b8 01 00 00 00       	mov    eax,0x1
c0018271:	eb e1                	jmp    c0018254 <SoundPort::buffer16(short*, int)+0x6c>
c0018273:	90                   	nop

c0018274 <SoundPort::buffer32(int*, int)>:
c0018274:	55                   	push   ebp
c0018275:	57                   	push   edi
c0018276:	56                   	push   esi
c0018277:	53                   	push   ebx
c0018278:	51                   	push   ecx
c0018279:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001827d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018281:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018284:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018288:	89 04 24             	mov    DWORD PTR [esp],eax
c001828b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001828e:	74 5c                	je     c00182ec <SoundPort::buffer32(int*, int)+0x78>
c0018290:	85 c0                	test   eax,eax
c0018292:	7e 58                	jle    c00182ec <SoundPort::buffer32(int*, int)+0x78>
c0018294:	8d 71 01             	lea    esi,[ecx+0x1]
c0018297:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001829a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001829d:	8b 37                	mov    esi,DWORD PTR [edi]
c001829f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00182a2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182a5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182a8:	74 4a                	je     c00182f4 <SoundPort::buffer32(int*, int)+0x80>
c00182aa:	31 f6                	xor    esi,esi
c00182ac:	eb 1e                	jmp    c00182cc <SoundPort::buffer32(int*, int)+0x58>
c00182ae:	66 90                	xchg   ax,ax
c00182b0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00182b3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00182b6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00182b9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00182bc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00182c0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182c3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182c6:	74 18                	je     c00182e0 <SoundPort::buffer32(int*, int)+0x6c>
c00182c8:	89 de                	mov    esi,ebx
c00182ca:	66 90                	xchg   ax,ax
c00182cc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00182cf:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00182d2:	75 dc                	jne    c00182b0 <SoundPort::buffer32(int*, int)+0x3c>
c00182d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00182d7:	90                   	nop
c00182d8:	5a                   	pop    edx
c00182d9:	5b                   	pop    ebx
c00182da:	5e                   	pop    esi
c00182db:	5f                   	pop    edi
c00182dc:	5d                   	pop    ebp
c00182dd:	c3                   	ret    
c00182de:	66 90                	xchg   ax,ax
c00182e0:	5a                   	pop    edx
c00182e1:	8d 46 02             	lea    eax,[esi+0x2]
c00182e4:	5b                   	pop    ebx
c00182e5:	5e                   	pop    esi
c00182e6:	5f                   	pop    edi
c00182e7:	5d                   	pop    ebp
c00182e8:	c3                   	ret    
c00182e9:	8d 76 00             	lea    esi,[esi+0x0]
c00182ec:	5a                   	pop    edx
c00182ed:	31 c0                	xor    eax,eax
c00182ef:	5b                   	pop    ebx
c00182f0:	5e                   	pop    esi
c00182f1:	5f                   	pop    edi
c00182f2:	5d                   	pop    ebp
c00182f3:	c3                   	ret    
c00182f4:	b8 01 00 00 00       	mov    eax,0x1
c00182f9:	eb dd                	jmp    c00182d8 <SoundPort::buffer32(int*, int)+0x64>
c00182fb:	90                   	nop

c00182fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00182fc:	57                   	push   edi
c00182fd:	56                   	push   esi
c00182fe:	53                   	push   ebx
c00182ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018303:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018307:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001830d:	39 03                	cmp    DWORD PTR [ebx],eax
c001830f:	74 13                	je     c0018324 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018311:	83 ec 0c             	sub    esp,0xc
c0018314:	68 2c f2 01 c0       	push   0xc001f22c
c0018319:	e8 e1 7e ff ff       	call   c00101ff <KePanic(char const*)>
c001831e:	83 c4 10             	add    esp,0x10
c0018321:	8d 76 00             	lea    esi,[esi+0x0]
c0018324:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001832a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001832d:	74 11                	je     c0018340 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001832f:	83 ec 0c             	sub    esp,0xc
c0018332:	68 6b f2 01 c0       	push   0xc001f26b
c0018337:	e8 c3 7e ff ff       	call   c00101ff <KePanic(char const*)>
c001833c:	83 c4 10             	add    esp,0x10
c001833f:	90                   	nop
c0018340:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018346:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018349:	74 11                	je     c001835c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001834b:	83 ec 0c             	sub    esp,0xc
c001834e:	68 6b f2 01 c0       	push   0xc001f26b
c0018353:	e8 a7 7e ff ff       	call   c00101ff <KePanic(char const*)>
c0018358:	83 c4 10             	add    esp,0x10
c001835b:	90                   	nop
c001835c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001835f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018363:	7e 07                	jle    c001836c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018365:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018369:	8d 76 00             	lea    esi,[esi+0x0]
c001836c:	85 f6                	test   esi,esi
c001836e:	7e 2c                	jle    c001839c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018370:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018374:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018377:	31 c9                	xor    ecx,ecx
c0018379:	01 d7                	add    edi,edx
c001837b:	90                   	nop
c001837c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001837f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018382:	85 c0                	test   eax,eax
c0018384:	79 06                	jns    c001838c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018386:	05 ff 7f 00 00       	add    eax,0x7fff
c001838b:	90                   	nop
c001838c:	c1 f8 0f             	sar    eax,0xf
c001838f:	83 c1 04             	add    ecx,0x4
c0018392:	66 01 02             	add    WORD PTR [edx],ax
c0018395:	83 c2 02             	add    edx,0x2
c0018398:	39 d7                	cmp    edi,edx
c001839a:	75 e0                	jne    c001837c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001839c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001839f:	50                   	push   eax
c00183a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183a3:	29 f0                	sub    eax,esi
c00183a5:	c1 e0 02             	shl    eax,0x2
c00183a8:	50                   	push   eax
c00183a9:	8d 04 b2             	lea    eax,[edx+esi*4]
c00183ac:	50                   	push   eax
c00183ad:	52                   	push   edx
c00183ae:	e8 2d 80 fe ff       	call   c00003e0 <memmove>
c00183b3:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00183b6:	83 c4 10             	add    esp,0x10
c00183b9:	89 f0                	mov    eax,esi
c00183bb:	5b                   	pop    ebx
c00183bc:	5e                   	pop    esi
c00183bd:	5f                   	pop    edi
c00183be:	c3                   	ret    
c00183bf:	90                   	nop

c00183c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00183c0:	57                   	push   edi
c00183c1:	56                   	push   esi
c00183c2:	53                   	push   ebx
c00183c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00183c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00183cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00183cf:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00183d5:	39 06                	cmp    DWORD PTR [esi],eax
c00183d7:	74 13                	je     c00183ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00183d9:	83 ec 0c             	sub    esp,0xc
c00183dc:	68 4c f2 01 c0       	push   0xc001f24c
c00183e1:	e8 19 7e ff ff       	call   c00101ff <KePanic(char const*)>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	8d 76 00             	lea    esi,[esi+0x0]
c00183ec:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00183f2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00183f5:	74 11                	je     c0018408 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00183f7:	83 ec 0c             	sub    esp,0xc
c00183fa:	68 87 f2 01 c0       	push   0xc001f287
c00183ff:	e8 fb 7d ff ff       	call   c00101ff <KePanic(char const*)>
c0018404:	83 c4 10             	add    esp,0x10
c0018407:	90                   	nop
c0018408:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001840e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018411:	74 11                	je     c0018424 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018413:	83 ec 0c             	sub    esp,0xc
c0018416:	68 87 f2 01 c0       	push   0xc001f287
c001841b:	e8 df 7d ff ff       	call   c00101ff <KePanic(char const*)>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	90                   	nop
c0018424:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018427:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001842b:	7e 07                	jle    c0018434 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001842d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018431:	8d 76 00             	lea    esi,[esi+0x0]
c0018434:	85 ff                	test   edi,edi
c0018436:	7e 1c                	jle    c0018454 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018438:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001843f:	31 c0                	xor    eax,eax
c0018441:	8d 76 00             	lea    esi,[esi+0x0]
c0018444:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018447:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001844a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001844d:	83 c0 04             	add    eax,0x4
c0018450:	39 c1                	cmp    ecx,eax
c0018452:	75 f0                	jne    c0018444 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018454:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018457:	50                   	push   eax
c0018458:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001845b:	29 f8                	sub    eax,edi
c001845d:	c1 e0 02             	shl    eax,0x2
c0018460:	50                   	push   eax
c0018461:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018464:	50                   	push   eax
c0018465:	52                   	push   edx
c0018466:	e8 75 7f fe ff       	call   c00003e0 <memmove>
c001846b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001846e:	83 c4 10             	add    esp,0x10
c0018471:	89 f8                	mov    eax,edi
c0018473:	5b                   	pop    ebx
c0018474:	5e                   	pop    esi
c0018475:	5f                   	pop    edi
c0018476:	c3                   	ret    
c0018477:	90                   	nop

c0018478 <PCI::open(int, int, void*)>:
c0018478:	83 ec 18             	sub    esp,0x18
c001847b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001847f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018483:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018489:	8b 10                	mov    edx,DWORD PTR [eax]
c001848b:	50                   	push   eax
c001848c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001848f:	31 c0                	xor    eax,eax
c0018491:	83 c4 1c             	add    esp,0x1c
c0018494:	c3                   	ret    
c0018495:	90                   	nop

c0018496 <PCI::close(int, int, void*)>:
c0018496:	31 c0                	xor    eax,eax
c0018498:	c3                   	ret    
c0018499:	90                   	nop

c001849a <PCI::PCI()>:
c001849a:	83 ec 0c             	sub    esp,0xc
c001849d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a1:	83 ec 08             	sub    esp,0x8
c00184a4:	68 a3 f2 01 c0       	push   0xc001f2a3
c00184a9:	50                   	push   eax
c00184aa:	e8 61 2e ff ff       	call   c000b310 <Bus::Bus(char const*)>
c00184af:	83 c4 10             	add    esp,0x10
c00184b2:	ba 4c f3 01 c0       	mov    edx,0xc001f34c
c00184b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184bb:	89 10                	mov    DWORD PTR [eax],edx
c00184bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00184cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184cf:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c00184d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184de:	31 d2                	xor    edx,edx
c00184e0:	88 c2                	mov    dl,al
c00184e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184e6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00184ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184f7:	31 d2                	xor    edx,edx
c00184f9:	88 c2                	mov    dl,al
c00184fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ff:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018508:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001850e:	8d 50 01             	lea    edx,[eax+0x1]
c0018511:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018515:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001851b:	31 d2                	xor    edx,edx
c001851d:	88 c2                	mov    dl,al
c001851f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018523:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018527:	83 c9 c0             	or     ecx,0xffffffc0
c001852a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001852e:	90                   	nop
c001852f:	83 c4 0c             	add    esp,0xc
c0018532:	c3                   	ret    
c0018533:	90                   	nop

c0018534 <PCI::readBAR8(unsigned int, int)>:
c0018534:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001853c:	f6 c2 01             	test   dl,0x1
c001853f:	74 07                	je     c0018548 <PCI::readBAR8(unsigned int, int)+0x14>
c0018541:	83 e2 fc             	and    edx,0xfffffffc
c0018544:	01 c2                	add    edx,eax
c0018546:	ec                   	in     al,dx
c0018547:	c3                   	ret    
c0018548:	83 e2 f0             	and    edx,0xfffffff0
c001854b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001854e:	c3                   	ret    
c001854f:	90                   	nop

c0018550 <PCI::readBAR16(unsigned int, int)>:
c0018550:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018558:	f6 c2 01             	test   dl,0x1
c001855b:	74 08                	je     c0018565 <PCI::readBAR16(unsigned int, int)+0x15>
c001855d:	83 e2 fc             	and    edx,0xfffffffc
c0018560:	01 c2                	add    edx,eax
c0018562:	66 ed                	in     ax,dx
c0018564:	c3                   	ret    
c0018565:	83 e2 f0             	and    edx,0xfffffff0
c0018568:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001856c:	c3                   	ret    
c001856d:	90                   	nop

c001856e <PCI::readBAR32(unsigned int, int)>:
c001856e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018576:	f6 c2 01             	test   dl,0x1
c0018579:	74 07                	je     c0018582 <PCI::readBAR32(unsigned int, int)+0x14>
c001857b:	83 e2 fc             	and    edx,0xfffffffc
c001857e:	01 c2                	add    edx,eax
c0018580:	ed                   	in     eax,dx
c0018581:	c3                   	ret    
c0018582:	83 e2 f0             	and    edx,0xfffffff0
c0018585:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018588:	c3                   	ret    
c0018589:	90                   	nop

c001858a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001858a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001858e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018592:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018596:	f6 c2 01             	test   dl,0x1
c0018599:	74 07                	je     c00185a2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001859b:	83 e2 fc             	and    edx,0xfffffffc
c001859e:	01 ca                	add    edx,ecx
c00185a0:	ee                   	out    dx,al
c00185a1:	c3                   	ret    
c00185a2:	83 e2 f0             	and    edx,0xfffffff0
c00185a5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00185a8:	c3                   	ret    
c00185a9:	90                   	nop

c00185aa <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00185aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185b6:	f6 c2 01             	test   dl,0x1
c00185b9:	74 08                	je     c00185c3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00185bb:	83 e2 fc             	and    edx,0xfffffffc
c00185be:	01 ca                	add    edx,ecx
c00185c0:	66 ef                	out    dx,ax
c00185c2:	c3                   	ret    
c00185c3:	83 e2 f0             	and    edx,0xfffffff0
c00185c6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00185ca:	c3                   	ret    
c00185cb:	90                   	nop

c00185cc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00185cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185d8:	f6 c2 01             	test   dl,0x1
c00185db:	74 07                	je     c00185e4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00185dd:	83 e2 fc             	and    edx,0xfffffffc
c00185e0:	01 ca                	add    edx,ecx
c00185e2:	ef                   	out    dx,eax
c00185e3:	c3                   	ret    
c00185e4:	83 e2 f0             	and    edx,0xfffffff0
c00185e7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00185ea:	c3                   	ret    
c00185eb:	90                   	nop

c00185ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185ec:	55                   	push   ebp
c00185ed:	57                   	push   edi
c00185ee:	56                   	push   esi
c00185ef:	53                   	push   ebx
c00185f0:	83 ec 0c             	sub    esp,0xc
c00185f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00185f7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00185fb:	89 f0                	mov    eax,esi
c00185fd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018601:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018605:	3c 07                	cmp    al,0x7
c0018607:	76 10                	jbe    c0018619 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018609:	83 ec 0c             	sub    esp,0xc
c001860c:	68 ab f2 01 c0       	push   0xc001f2ab
c0018611:	e8 e9 7b ff ff       	call   c00101ff <KePanic(char const*)>
c0018616:	83 c4 10             	add    esp,0x10
c0018619:	80 fb 0f             	cmp    bl,0xf
c001861c:	76 10                	jbe    c001862e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001861e:	83 ec 0c             	sub    esp,0xc
c0018621:	68 db f2 01 c0       	push   0xc001f2db
c0018626:	e8 d4 7b ff ff       	call   c00101ff <KePanic(char const*)>
c001862b:	83 c4 10             	add    esp,0x10
c001862e:	8d 04 36             	lea    eax,[esi+esi*1]
c0018631:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018636:	83 c8 f0             	or     eax,0xfffffff0
c0018639:	ee                   	out    dx,al
c001863a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001863f:	89 e8                	mov    eax,ebp
c0018641:	ee                   	out    dx,al
c0018642:	83 c4 0c             	add    esp,0xc
c0018645:	89 d8                	mov    eax,ebx
c0018647:	66 81 e7 fc 00       	and    di,0xfc
c001864c:	5b                   	pop    ebx
c001864d:	c1 e0 08             	shl    eax,0x8
c0018650:	5e                   	pop    esi
c0018651:	09 f8                	or     eax,edi
c0018653:	5f                   	pop    edi
c0018654:	66 0d 00 c0          	or     ax,0xc000
c0018658:	5d                   	pop    ebp
c0018659:	c3                   	ret    

c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001865a:	57                   	push   edi
c001865b:	56                   	push   esi
c001865c:	53                   	push   ebx
c001865d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018661:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018665:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001866b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001866f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018673:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018677:	83 ff 01             	cmp    edi,0x1
c001867a:	75 3e                	jne    c00186ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001867c:	89 de                	mov    esi,ebx
c001867e:	0f b6 c0             	movzx  eax,al
c0018681:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018687:	c1 e0 10             	shl    eax,0x10
c001868a:	0f b6 c9             	movzx  ecx,cl
c001868d:	09 f0                	or     eax,esi
c001868f:	c1 e1 08             	shl    ecx,0x8
c0018692:	0f b6 d2             	movzx  edx,dl
c0018695:	09 c8                	or     eax,ecx
c0018697:	c1 e2 0b             	shl    edx,0xb
c001869a:	09 d0                	or     eax,edx
c001869c:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186a1:	0d 00 00 00 80       	or     eax,0x80000000
c00186a6:	ef                   	out    dx,eax
c00186a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00186ac:	ed                   	in     eax,dx
c00186ad:	83 e3 02             	and    ebx,0x2
c00186b0:	0f b6 cb             	movzx  ecx,bl
c00186b3:	c1 e1 03             	shl    ecx,0x3
c00186b6:	d3 e8                	shr    eax,cl
c00186b8:	eb 43                	jmp    c00186fd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186ba:	83 ff 02             	cmp    edi,0x2
c00186bd:	75 2c                	jne    c00186eb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00186bf:	83 ec 0c             	sub    esp,0xc
c00186c2:	0f b6 c9             	movzx  ecx,cl
c00186c5:	0f b6 d2             	movzx  edx,dl
c00186c8:	0f b6 fb             	movzx  edi,bl
c00186cb:	0f b6 c0             	movzx  eax,al
c00186ce:	57                   	push   edi
c00186cf:	51                   	push   ecx
c00186d0:	52                   	push   edx
c00186d1:	50                   	push   eax
c00186d2:	56                   	push   esi
c00186d3:	e8 14 ff ff ff       	call   c00185ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186d8:	89 c2                	mov    edx,eax
c00186da:	ed                   	in     eax,dx
c00186db:	83 e3 02             	and    ebx,0x2
c00186de:	83 c4 20             	add    esp,0x20
c00186e1:	0f b6 cb             	movzx  ecx,bl
c00186e4:	c1 e1 03             	shl    ecx,0x3
c00186e7:	d3 e8                	shr    eax,cl
c00186e9:	eb 12                	jmp    c00186fd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186eb:	83 ec 0c             	sub    esp,0xc
c00186ee:	68 0b f3 01 c0       	push   0xc001f30b
c00186f3:	e8 07 7b ff ff       	call   c00101ff <KePanic(char const*)>
c00186f8:	83 c4 10             	add    esp,0x10
c00186fb:	31 c0                	xor    eax,eax
c00186fd:	5b                   	pop    ebx
c00186fe:	5e                   	pop    esi
c00186ff:	5f                   	pop    edi
c0018700:	c3                   	ret    
c0018701:	90                   	nop

c0018702 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018702:	83 ec 18             	sub    esp,0x18
c0018705:	6a 00                	push   0x0
c0018707:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001870c:	50                   	push   eax
c001870d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018712:	50                   	push   eax
c0018713:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018718:	50                   	push   eax
c0018719:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001871d:	e8 38 ff ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018722:	83 c4 2c             	add    esp,0x2c
c0018725:	c3                   	ret    

c0018726 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018726:	83 ec 18             	sub    esp,0x18
c0018729:	6a 0e                	push   0xe
c001872b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018730:	50                   	push   eax
c0018731:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018736:	50                   	push   eax
c0018737:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001873c:	50                   	push   eax
c001873d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018741:	e8 14 ff ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018746:	83 c4 2c             	add    esp,0x2c
c0018749:	0f b6 c0             	movzx  eax,al
c001874c:	c3                   	ret    
c001874d:	90                   	nop

c001874e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001874e:	55                   	push   ebp
c001874f:	57                   	push   edi
c0018750:	56                   	push   esi
c0018751:	53                   	push   ebx
c0018752:	83 ec 18             	sub    esp,0x18
c0018755:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001875a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001875f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018764:	6a 0a                	push   0xa
c0018766:	56                   	push   esi
c0018767:	55                   	push   ebp
c0018768:	57                   	push   edi
c0018769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001876d:	e8 e8 fe ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018772:	83 c4 14             	add    esp,0x14
c0018775:	89 c3                	mov    ebx,eax
c0018777:	6a 0a                	push   0xa
c0018779:	0f b6 db             	movzx  ebx,bl
c001877c:	56                   	push   esi
c001877d:	55                   	push   ebp
c001877e:	57                   	push   edi
c001877f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018783:	e8 d2 fe ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018788:	83 c4 2c             	add    esp,0x2c
c001878b:	25 00 ff 00 00       	and    eax,0xff00
c0018790:	09 d8                	or     eax,ebx
c0018792:	5b                   	pop    ebx
c0018793:	5e                   	pop    esi
c0018794:	5f                   	pop    edi
c0018795:	5d                   	pop    ebp
c0018796:	c3                   	ret    
c0018797:	90                   	nop

c0018798 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018798:	83 ec 18             	sub    esp,0x18
c001879b:	6a 08                	push   0x8
c001879d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a2:	50                   	push   eax
c00187a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a8:	50                   	push   eax
c00187a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ae:	50                   	push   eax
c00187af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b3:	e8 a2 fe ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b8:	83 c4 2c             	add    esp,0x2c
c00187bb:	0f b6 c4             	movzx  eax,ah
c00187be:	c3                   	ret    
c00187bf:	90                   	nop

c00187c0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00187c0:	83 ec 18             	sub    esp,0x18
c00187c3:	6a 08                	push   0x8
c00187c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ca:	50                   	push   eax
c00187cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d0:	50                   	push   eax
c00187d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d6:	50                   	push   eax
c00187d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187db:	e8 7a fe ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e0:	83 c4 2c             	add    esp,0x2c
c00187e3:	c3                   	ret    

c00187e4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00187e4:	83 ec 18             	sub    esp,0x18
c00187e7:	6a 3c                	push   0x3c
c00187e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ee:	50                   	push   eax
c00187ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f4:	50                   	push   eax
c00187f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187fa:	50                   	push   eax
c00187fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187ff:	e8 56 fe ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018804:	83 c4 2c             	add    esp,0x2c
c0018807:	c3                   	ret    

c0018808 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018808:	83 ec 18             	sub    esp,0x18
c001880b:	6a 18                	push   0x18
c001880d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018812:	50                   	push   eax
c0018813:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018818:	50                   	push   eax
c0018819:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881e:	50                   	push   eax
c001881f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018823:	e8 32 fe ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018828:	83 c4 2c             	add    esp,0x2c
c001882b:	0f b6 c4             	movzx  eax,ah
c001882e:	c3                   	ret    
c001882f:	90                   	nop

c0018830 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018830:	55                   	push   ebp
c0018831:	57                   	push   edi
c0018832:	56                   	push   esi
c0018833:	53                   	push   ebx
c0018834:	83 ec 28             	sub    esp,0x28
c0018837:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001883b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018840:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018845:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001884a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018851:	8d 43 12             	lea    eax,[ebx+0x12]
c0018854:	83 c3 10             	add    ebx,0x10
c0018857:	0f b6 c0             	movzx  eax,al
c001885a:	0f b6 db             	movzx  ebx,bl
c001885d:	50                   	push   eax
c001885e:	51                   	push   ecx
c001885f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018863:	57                   	push   edi
c0018864:	55                   	push   ebp
c0018865:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018869:	e8 ec fd ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001886e:	83 c4 14             	add    esp,0x14
c0018871:	89 c6                	mov    esi,eax
c0018873:	53                   	push   ebx
c0018874:	c1 e6 10             	shl    esi,0x10
c0018877:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001887b:	51                   	push   ecx
c001887c:	57                   	push   edi
c001887d:	55                   	push   ebp
c001887e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018882:	e8 d3 fd ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018887:	83 c4 3c             	add    esp,0x3c
c001888a:	0f b7 c0             	movzx  eax,ax
c001888d:	5b                   	pop    ebx
c001888e:	09 f0                	or     eax,esi
c0018890:	5e                   	pop    esi
c0018891:	5f                   	pop    edi
c0018892:	5d                   	pop    ebp
c0018893:	c3                   	ret    

c0018894 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018894:	55                   	push   ebp
c0018895:	57                   	push   edi
c0018896:	56                   	push   esi
c0018897:	53                   	push   ebx
c0018898:	83 ec 0c             	sub    esp,0xc
c001889b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001889f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00188a3:	89 f5                	mov    ebp,esi
c00188a5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00188ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00188b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00188bb:	83 f9 01             	cmp    ecx,0x1
c00188be:	75 5d                	jne    c001891d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00188c0:	0f b6 c8             	movzx  ecx,al
c00188c3:	0f b6 d2             	movzx  edx,dl
c00188c6:	c1 e1 10             	shl    ecx,0x10
c00188c9:	c1 e2 0b             	shl    edx,0xb
c00188cc:	89 f0                	mov    eax,esi
c00188ce:	25 fc 00 00 00       	and    eax,0xfc
c00188d3:	09 c1                	or     ecx,eax
c00188d5:	89 e8                	mov    eax,ebp
c00188d7:	0f b6 c0             	movzx  eax,al
c00188da:	c1 e0 08             	shl    eax,0x8
c00188dd:	09 c1                	or     ecx,eax
c00188df:	09 d1                	or     ecx,edx
c00188e1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188e6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00188ec:	89 c8                	mov    eax,ecx
c00188ee:	ef                   	out    dx,eax
c00188ef:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188f4:	ed                   	in     eax,dx
c00188f5:	0f b7 db             	movzx  ebx,bx
c00188f8:	83 e6 02             	and    esi,0x2
c00188fb:	74 0a                	je     c0018907 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00188fd:	0f b7 d0             	movzx  edx,ax
c0018900:	c1 e3 10             	shl    ebx,0x10
c0018903:	09 d3                	or     ebx,edx
c0018905:	eb 05                	jmp    c001890c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018907:	66 31 c0             	xor    ax,ax
c001890a:	09 c3                	or     ebx,eax
c001890c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018911:	89 c8                	mov    eax,ecx
c0018913:	ef                   	out    dx,eax
c0018914:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018919:	89 d8                	mov    eax,ebx
c001891b:	eb 41                	jmp    c001895e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001891d:	83 f9 02             	cmp    ecx,0x2
c0018920:	75 45                	jne    c0018967 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018922:	83 ec 0c             	sub    esp,0xc
c0018925:	0f b6 d2             	movzx  edx,dl
c0018928:	89 f1                	mov    ecx,esi
c001892a:	0f b6 c0             	movzx  eax,al
c001892d:	0f b6 f1             	movzx  esi,cl
c0018930:	89 e9                	mov    ecx,ebp
c0018932:	56                   	push   esi
c0018933:	0f b6 c9             	movzx  ecx,cl
c0018936:	51                   	push   ecx
c0018937:	52                   	push   edx
c0018938:	50                   	push   eax
c0018939:	57                   	push   edi
c001893a:	e8 ad fc ff ff       	call   c00185ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001893f:	89 c2                	mov    edx,eax
c0018941:	ed                   	in     eax,dx
c0018942:	83 c4 20             	add    esp,0x20
c0018945:	0f b7 db             	movzx  ebx,bx
c0018948:	f6 c2 02             	test   dl,0x2
c001894b:	74 0c                	je     c0018959 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001894d:	0f b7 c8             	movzx  ecx,ax
c0018950:	89 d8                	mov    eax,ebx
c0018952:	c1 e0 10             	shl    eax,0x10
c0018955:	09 c8                	or     eax,ecx
c0018957:	eb 05                	jmp    c001895e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018959:	66 31 c0             	xor    ax,ax
c001895c:	09 d8                	or     eax,ebx
c001895e:	ef                   	out    dx,eax
c001895f:	83 c4 0c             	add    esp,0xc
c0018962:	5b                   	pop    ebx
c0018963:	5e                   	pop    esi
c0018964:	5f                   	pop    edi
c0018965:	5d                   	pop    ebp
c0018966:	c3                   	ret    
c0018967:	c7 44 24 20 0b f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f30b
c001896f:	83 c4 0c             	add    esp,0xc
c0018972:	5b                   	pop    ebx
c0018973:	5e                   	pop    esi
c0018974:	5f                   	pop    edi
c0018975:	5d                   	pop    ebp
c0018976:	e9 84 78 ff ff       	jmp    c00101ff <KePanic(char const*)>
c001897b:	90                   	nop

c001897c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001897c:	55                   	push   ebp
c001897d:	57                   	push   edi
c001897e:	56                   	push   esi
c001897f:	53                   	push   ebx
c0018980:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018986:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c001898d:	0f 85 84 00 00 00    	jne    c0018a17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018993:	83 ec 0c             	sub    esp,0xc
c0018996:	68 14 01 00 00       	push   0x114
c001899b:	e8 19 ee fe ff       	call   c00077b9 <malloc>
c00189a0:	83 c4 0c             	add    esp,0xc
c00189a3:	89 c3                	mov    ebx,eax
c00189a5:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00189ab:	68 11 f3 01 c0       	push   0xc001f311
c00189b0:	50                   	push   eax
c00189b1:	e8 3c 21 ff ff       	call   c000aaf2 <File::File(char const*, Process*)>
c00189b6:	5a                   	pop    edx
c00189b7:	59                   	pop    ecx
c00189b8:	6a 01                	push   0x1
c00189ba:	53                   	push   ebx
c00189bb:	e8 f2 21 ff ff       	call   c000abb2 <File::open(FileOpenMode)>
c00189c0:	83 c4 0c             	add    esp,0xc
c00189c3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00189c7:	50                   	push   eax
c00189c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189cc:	50                   	push   eax
c00189cd:	53                   	push   ebx
c00189ce:	e8 8b 24 ff ff       	call   c000ae5e <File::stat(unsigned long long*, bool*)>
c00189d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189d7:	40                   	inc    eax
c00189d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00189db:	e8 d9 ed fe ff       	call   c00077b9 <malloc>
c00189e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00189e4:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c00189e9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00189ed:	5e                   	pop    esi
c00189ee:	8b 13                	mov    edx,DWORD PTR [ebx]
c00189f0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00189f4:	51                   	push   ecx
c00189f5:	50                   	push   eax
c00189f6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189fa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189fe:	53                   	push   ebx
c00189ff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a02:	83 c4 14             	add    esp,0x14
c0018a05:	53                   	push   ebx
c0018a06:	e8 05 22 ff ff       	call   c000ac10 <File::close()>
c0018a0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a0f:	83 c4 10             	add    esp,0x10
c0018a12:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c0018a17:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c0018a1c:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c0018a22:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a25:	31 ff                	xor    edi,edi
c0018a27:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018a2f:	31 f6                	xor    esi,esi
c0018a31:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018a36:	31 db                	xor    ebx,ebx
c0018a38:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018a40:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018a45:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018a4c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018a50:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a5b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a5e:	0f 8e 6b 01 00 00    	jle    c0018bcf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a64:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a67:	d4 40                	aam    0x40
c0018a69:	d5 39                	aad    0x39
c0018a6b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a6f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a73:	d4 40                	aam    0x40
c0018a75:	d5 39                	aad    0x39
c0018a77:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a7b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a7f:	d4 40                	aam    0x40
c0018a81:	d5 39                	aad    0x39
c0018a83:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a87:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a8b:	d4 40                	aam    0x40
c0018a8d:	d5 39                	aad    0x39
c0018a8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a93:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a97:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a9b:	3c 56                	cmp    al,0x56
c0018a9d:	74 45                	je     c0018ae4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a9f:	d4 40                	aam    0x40
c0018aa1:	d5 39                	aad    0x39
c0018aa3:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018aa6:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018aaa:	0f b6 c9             	movzx  ecx,cl
c0018aad:	c1 e1 04             	shl    ecx,0x4
c0018ab0:	d4 40                	aam    0x40
c0018ab2:	d5 39                	aad    0x39
c0018ab4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018ab7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018abb:	0f b6 db             	movzx  ebx,bl
c0018abe:	09 cb                	or     ebx,ecx
c0018ac0:	c1 e3 04             	shl    ebx,0x4
c0018ac3:	d4 40                	aam    0x40
c0018ac5:	d5 39                	aad    0x39
c0018ac7:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018aca:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018ace:	0f b6 c9             	movzx  ecx,cl
c0018ad1:	09 cb                	or     ebx,ecx
c0018ad3:	c1 e3 04             	shl    ebx,0x4
c0018ad6:	89 d9                	mov    ecx,ebx
c0018ad8:	d4 40                	aam    0x40
c0018ada:	d5 39                	aad    0x39
c0018adc:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018adf:	0f b6 db             	movzx  ebx,bl
c0018ae2:	09 cb                	or     ebx,ecx
c0018ae4:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018ae8:	80 f9 44             	cmp    cl,0x44
c0018aeb:	74 47                	je     c0018b34 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018aed:	88 c8                	mov    al,cl
c0018aef:	d4 40                	aam    0x40
c0018af1:	d5 39                	aad    0x39
c0018af3:	83 e8 30             	sub    eax,0x30
c0018af6:	0f b6 e8             	movzx  ebp,al
c0018af9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018afd:	c1 e5 04             	shl    ebp,0x4
c0018b00:	d4 40                	aam    0x40
c0018b02:	d5 39                	aad    0x39
c0018b04:	83 e8 30             	sub    eax,0x30
c0018b07:	0f b6 f0             	movzx  esi,al
c0018b0a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b0e:	09 ee                	or     esi,ebp
c0018b10:	c1 e6 04             	shl    esi,0x4
c0018b13:	d4 40                	aam    0x40
c0018b15:	d5 39                	aad    0x39
c0018b17:	83 e8 30             	sub    eax,0x30
c0018b1a:	0f b6 e8             	movzx  ebp,al
c0018b1d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b21:	09 ee                	or     esi,ebp
c0018b23:	c1 e6 04             	shl    esi,0x4
c0018b26:	89 f5                	mov    ebp,esi
c0018b28:	d4 40                	aam    0x40
c0018b2a:	d5 39                	aad    0x39
c0018b2c:	83 e8 30             	sub    eax,0x30
c0018b2f:	0f b6 f0             	movzx  esi,al
c0018b32:	09 ee                	or     esi,ebp
c0018b34:	83 c7 10             	add    edi,0x10
c0018b37:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018b3b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b3e:	3c 0a                	cmp    al,0xa
c0018b40:	74 09                	je     c0018b4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018b42:	45                   	inc    ebp
c0018b43:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b46:	75 16                	jne    c0018b5e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018b48:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018b4b:	3c 0a                	cmp    al,0xa
c0018b4d:	0f 94 c0             	sete   al
c0018b50:	0f b6 c0             	movzx  eax,al
c0018b53:	01 c7                	add    edi,eax
c0018b55:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b5a:	75 0c                	jne    c0018b68 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b5c:	eb 15                	jmp    c0018b73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b5e:	47                   	inc    edi
c0018b5f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b62:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b66:	eb d3                	jmp    c0018b3b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b68:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b6d:	0f 85 e8 fe ff ff    	jne    c0018a5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b73:	80 f9 44             	cmp    cl,0x44
c0018b76:	74 0b                	je     c0018b83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b78:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b7d:	0f 85 d8 fe ff ff    	jne    c0018a5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b83:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b87:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b8b:	c1 e1 04             	shl    ecx,0x4
c0018b8e:	83 e8 30             	sub    eax,0x30
c0018b91:	09 c8                	or     eax,ecx
c0018b93:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b97:	0f 85 be fe ff ff    	jne    c0018a5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b9d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018ba1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ba5:	c1 e1 04             	shl    ecx,0x4
c0018ba8:	83 e8 30             	sub    eax,0x30
c0018bab:	09 c8                	or     eax,ecx
c0018bad:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018bb1:	0f 85 a4 fe ff ff    	jne    c0018a5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bb7:	50                   	push   eax
c0018bb8:	50                   	push   eax
c0018bb9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bbd:	50                   	push   eax
c0018bbe:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018bc5:	e8 36 7a fe ff       	call   c0000600 <strcpy>
c0018bca:	83 c4 10             	add    esp,0x10
c0018bcd:	eb 15                	jmp    c0018be4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018bcf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018bd6:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018be1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018be4:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018beb:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018bf1:	5b                   	pop    ebx
c0018bf2:	5e                   	pop    esi
c0018bf3:	5f                   	pop    edi
c0018bf4:	5d                   	pop    ebp
c0018bf5:	c3                   	ret    

c0018bf6 <PCI::checkBus(unsigned char)>:
c0018bf6:	56                   	push   esi
c0018bf7:	53                   	push   ebx
c0018bf8:	31 f6                	xor    esi,esi
c0018bfa:	51                   	push   ecx
c0018bfb:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018bff:	0f b6 c3             	movzx  eax,bl
c0018c02:	52                   	push   edx
c0018c03:	56                   	push   esi
c0018c04:	46                   	inc    esi
c0018c05:	50                   	push   eax
c0018c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c0a:	e8 f3 02 00 00       	call   c0018f02 <PCI::checkDevice(unsigned char, unsigned char)>
c0018c0f:	83 c4 10             	add    esp,0x10
c0018c12:	83 fe 20             	cmp    esi,0x20
c0018c15:	75 e8                	jne    c0018bff <PCI::checkBus(unsigned char)+0x9>
c0018c17:	58                   	pop    eax
c0018c18:	5b                   	pop    ebx
c0018c19:	5e                   	pop    esi
c0018c1a:	c3                   	ret    
c0018c1b:	90                   	nop

c0018c1c <PCI::foundDevice(PCIDeviceInfo)>:
c0018c1c:	55                   	push   ebp
c0018c1d:	57                   	push   edi
c0018c1e:	56                   	push   esi
c0018c1f:	53                   	push   ebx
c0018c20:	83 ec 1c             	sub    esp,0x1c
c0018c23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c27:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018c2d:	0f 84 52 01 00 00    	je     c0018d85 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c33:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018c37:	66 81 f9 06 04       	cmp    cx,0x406
c0018c3c:	75 2c                	jne    c0018c6a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018c3e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018c43:	50                   	push   eax
c0018c44:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018c49:	50                   	push   eax
c0018c4a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018c4f:	50                   	push   eax
c0018c50:	56                   	push   esi
c0018c51:	e8 b2 fb ff ff       	call   c0018808 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c56:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c5a:	0f b6 c0             	movzx  eax,al
c0018c5d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c61:	83 c4 2c             	add    esp,0x2c
c0018c64:	5b                   	pop    ebx
c0018c65:	5e                   	pop    esi
c0018c66:	5f                   	pop    edi
c0018c67:	5d                   	pop    ebp
c0018c68:	eb 8c                	jmp    c0018bf6 <PCI::checkBus(unsigned char)>
c0018c6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c6e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c78:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c7c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c80:	88 d3                	mov    bl,dl
c0018c82:	85 c0                	test   eax,eax
c0018c84:	74 33                	je     c0018cb9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c86:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c89:	85 d2                	test   edx,edx
c0018c8b:	74 28                	je     c0018cb5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c8d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c93:	31 ef                	xor    edi,ebp
c0018c95:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c9b:	75 18                	jne    c0018cb5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c9d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018ca1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018ca7:	75 0c                	jne    c0018cb5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018ca9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018caf:	0f 84 d0 00 00 00    	je     c0018d85 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cb7:	eb c9                	jmp    c0018c82 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018cb9:	66 81 f9 01 06       	cmp    cx,0x601
c0018cbe:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018cc2:	75 19                	jne    c0018cdd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018cc4:	83 ec 0c             	sub    esp,0xc
c0018cc7:	68 64 01 00 00       	push   0x164
c0018ccc:	e8 e8 ea fe ff       	call   c00077b9 <malloc>
c0018cd1:	89 c5                	mov    ebp,eax
c0018cd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cd6:	e8 47 0e 00 00       	call   c0019b22 <SATABus::SATABus()>
c0018cdb:	eb 1e                	jmp    c0018cfb <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018cdd:	66 81 f9 01 01       	cmp    cx,0x101
c0018ce2:	75 60                	jne    c0018d44 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018ce4:	83 ec 0c             	sub    esp,0xc
c0018ce7:	68 70 02 00 00       	push   0x270
c0018cec:	e8 c8 ea fe ff       	call   c00077b9 <malloc>
c0018cf1:	89 c5                	mov    ebp,eax
c0018cf3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cf6:	e8 cb 02 00 00       	call   c0018fc6 <IDE::IDE()>
c0018cfb:	58                   	pop    eax
c0018cfc:	5a                   	pop    edx
c0018cfd:	55                   	push   ebp
c0018cfe:	56                   	push   esi
c0018cff:	e8 b8 2c ff ff       	call   c000b9bc <Device::addChild(Device*)>
c0018d04:	83 ec 1c             	sub    esp,0x1c
c0018d07:	b9 09 00 00 00       	mov    ecx,0x9
c0018d0c:	fc                   	cld    
c0018d0d:	89 e7                	mov    edi,esp
c0018d0f:	89 de                	mov    esi,ebx
c0018d11:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d13:	55                   	push   ebp
c0018d14:	e8 e9 2b ff ff       	call   c000b902 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d1c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d20:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018d28:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018d30:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018d38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018d3b:	83 c4 4c             	add    esp,0x4c
c0018d3e:	5b                   	pop    ebx
c0018d3f:	5e                   	pop    esi
c0018d40:	5f                   	pop    edi
c0018d41:	5d                   	pop    ebp
c0018d42:	ff e0                	jmp    eax
c0018d44:	83 ec 0c             	sub    esp,0xc
c0018d47:	68 58 01 00 00       	push   0x158
c0018d4c:	e8 68 ea fe ff       	call   c00077b9 <malloc>
c0018d51:	89 c5                	mov    ebp,eax
c0018d53:	58                   	pop    eax
c0018d54:	5a                   	pop    edx
c0018d55:	68 2a f3 01 c0       	push   0xc001f32a
c0018d5a:	55                   	push   ebp
c0018d5b:	e8 fa 2e ff ff       	call   c000bc5a <DriverlessDevice::DriverlessDevice(char const*)>
c0018d60:	59                   	pop    ecx
c0018d61:	5f                   	pop    edi
c0018d62:	55                   	push   ebp
c0018d63:	56                   	push   esi
c0018d64:	e8 53 2c ff ff       	call   c000b9bc <Device::addChild(Device*)>
c0018d69:	b9 09 00 00 00       	mov    ecx,0x9
c0018d6e:	fc                   	cld    
c0018d6f:	89 df                	mov    edi,ebx
c0018d71:	89 de                	mov    esi,ebx
c0018d73:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d75:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d79:	83 c4 2c             	add    esp,0x2c
c0018d7c:	5b                   	pop    ebx
c0018d7d:	5e                   	pop    esi
c0018d7e:	5f                   	pop    edi
c0018d7f:	5d                   	pop    ebp
c0018d80:	e9 7d 2b ff ff       	jmp    c000b902 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d85:	83 c4 1c             	add    esp,0x1c
c0018d88:	5b                   	pop    ebx
c0018d89:	5e                   	pop    esi
c0018d8a:	5f                   	pop    edi
c0018d8b:	5d                   	pop    ebp
c0018d8c:	c3                   	ret    
c0018d8d:	90                   	nop

c0018d8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d8e:	55                   	push   ebp
c0018d8f:	57                   	push   edi
c0018d90:	56                   	push   esi
c0018d91:	53                   	push   ebx
c0018d92:	83 ec 68             	sub    esp,0x68
c0018d95:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d99:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018da0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018da4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018dab:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018db0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018db4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018dbb:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018dc0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018dc4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018dc9:	6a 0c                	push   0xc
c0018dcb:	57                   	push   edi
c0018dcc:	53                   	push   ebx
c0018dcd:	56                   	push   esi
c0018dce:	55                   	push   ebp
c0018dcf:	e8 86 f8 ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018dd4:	83 c4 20             	add    esp,0x20
c0018dd7:	57                   	push   edi
c0018dd8:	53                   	push   ebx
c0018dd9:	56                   	push   esi
c0018dda:	55                   	push   ebp
c0018ddb:	e8 6e f9 ff ff       	call   c001874e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018de0:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018de5:	57                   	push   edi
c0018de6:	53                   	push   ebx
c0018de7:	56                   	push   esi
c0018de8:	55                   	push   ebp
c0018de9:	e8 f6 f9 ff ff       	call   c00187e4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018dee:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018df2:	83 c4 14             	add    esp,0x14
c0018df5:	6a 3c                	push   0x3c
c0018df7:	57                   	push   edi
c0018df8:	53                   	push   ebx
c0018df9:	56                   	push   esi
c0018dfa:	55                   	push   ebp
c0018dfb:	e8 5a f8 ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e00:	0f b6 c4             	movzx  eax,ah
c0018e03:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e07:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e0b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e0f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018e14:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e1a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e24:	83 c4 20             	add    esp,0x20
c0018e27:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e2c:	74 30                	je     c0018e5e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e2e:	31 c0                	xor    eax,eax
c0018e30:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018e34:	7e 28                	jle    c0018e5e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e36:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018e3e:	39 cb                	cmp    ebx,ecx
c0018e40:	75 19                	jne    c0018e5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e42:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018e4a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018e4e:	75 0b                	jne    c0018e5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e50:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e57:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e5b:	40                   	inc    eax
c0018e5c:	eb d2                	jmp    c0018e30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e5e:	31 d2                	xor    edx,edx
c0018e60:	83 ec 0c             	sub    esp,0xc
c0018e63:	57                   	push   edi
c0018e64:	53                   	push   ebx
c0018e65:	56                   	push   esi
c0018e66:	52                   	push   edx
c0018e67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e6b:	55                   	push   ebp
c0018e6c:	e8 bf f9 ff ff       	call   c0018830 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e75:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e79:	42                   	inc    edx
c0018e7a:	83 c4 20             	add    esp,0x20
c0018e7d:	83 fa 06             	cmp    edx,0x6
c0018e80:	75 de                	jne    c0018e60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e82:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e87:	83 ec 0c             	sub    esp,0xc
c0018e8a:	86 e0                	xchg   al,ah
c0018e8c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e91:	6a 02                	push   0x2
c0018e93:	57                   	push   edi
c0018e94:	53                   	push   ebx
c0018e95:	56                   	push   esi
c0018e96:	55                   	push   ebp
c0018e97:	e8 be f7 ff ff       	call   c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e9c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018ea1:	83 c4 20             	add    esp,0x20
c0018ea4:	57                   	push   edi
c0018ea5:	53                   	push   ebx
c0018ea6:	56                   	push   esi
c0018ea7:	55                   	push   ebp
c0018ea8:	e8 eb f8 ff ff       	call   c0018798 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018ead:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018eb1:	57                   	push   edi
c0018eb2:	53                   	push   ebx
c0018eb3:	56                   	push   esi
c0018eb4:	55                   	push   ebp
c0018eb5:	e8 48 f8 ff ff       	call   c0018702 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018eba:	b9 09 00 00 00       	mov    ecx,0x9
c0018ebf:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018ec4:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018ec8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018ecc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018ed0:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018ed4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018ed8:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018edc:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018ee0:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018ee4:	83 ec 0c             	sub    esp,0xc
c0018ee7:	fc                   	cld    
c0018ee8:	89 e7                	mov    edi,esp
c0018eea:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018eee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ef0:	55                   	push   ebp
c0018ef1:	e8 26 fd ff ff       	call   c0018c1c <PCI::foundDevice(PCIDeviceInfo)>
c0018ef6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018efc:	5b                   	pop    ebx
c0018efd:	5e                   	pop    esi
c0018efe:	5f                   	pop    edi
c0018eff:	5d                   	pop    ebp
c0018f00:	c3                   	ret    
c0018f01:	90                   	nop

c0018f02 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f02:	55                   	push   ebp
c0018f03:	57                   	push   edi
c0018f04:	56                   	push   esi
c0018f05:	53                   	push   ebx
c0018f06:	83 ec 0c             	sub    esp,0xc
c0018f09:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f0d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f12:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f17:	6a 00                	push   0x0
c0018f19:	56                   	push   esi
c0018f1a:	57                   	push   edi
c0018f1b:	55                   	push   ebp
c0018f1c:	e8 e1 f7 ff ff       	call   c0018702 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f21:	6a 00                	push   0x0
c0018f23:	56                   	push   esi
c0018f24:	57                   	push   edi
c0018f25:	55                   	push   ebp
c0018f26:	e8 63 fe ff ff       	call   c0018d8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f2b:	83 c4 20             	add    esp,0x20
c0018f2e:	6a 00                	push   0x0
c0018f30:	56                   	push   esi
c0018f31:	57                   	push   edi
c0018f32:	55                   	push   ebp
c0018f33:	e8 ee f7 ff ff       	call   c0018726 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	84 c0                	test   al,al
c0018f3d:	79 27                	jns    c0018f66 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018f3f:	bb 01 00 00 00       	mov    ebx,0x1
c0018f44:	53                   	push   ebx
c0018f45:	56                   	push   esi
c0018f46:	57                   	push   edi
c0018f47:	55                   	push   ebp
c0018f48:	e8 b5 f7 ff ff       	call   c0018702 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f4d:	83 c4 10             	add    esp,0x10
c0018f50:	66 40                	inc    ax
c0018f52:	74 0c                	je     c0018f60 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f54:	53                   	push   ebx
c0018f55:	56                   	push   esi
c0018f56:	57                   	push   edi
c0018f57:	55                   	push   ebp
c0018f58:	e8 31 fe ff ff       	call   c0018d8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f5d:	83 c4 10             	add    esp,0x10
c0018f60:	43                   	inc    ebx
c0018f61:	83 fb 08             	cmp    ebx,0x8
c0018f64:	75 de                	jne    c0018f44 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f66:	83 c4 0c             	add    esp,0xc
c0018f69:	5b                   	pop    ebx
c0018f6a:	5e                   	pop    esi
c0018f6b:	5f                   	pop    edi
c0018f6c:	5d                   	pop    ebp
c0018f6d:	c3                   	ret    

c0018f6e <PCI::detect()>:
c0018f6e:	56                   	push   esi
c0018f6f:	53                   	push   ebx
c0018f70:	53                   	push   ebx
c0018f71:	31 db                	xor    ebx,ebx
c0018f73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f77:	6a 00                	push   0x0
c0018f79:	6a 00                	push   0x0
c0018f7b:	6a 00                	push   0x0
c0018f7d:	56                   	push   esi
c0018f7e:	e8 a3 f7 ff ff       	call   c0018726 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f83:	83 c4 10             	add    esp,0x10
c0018f86:	a8 80                	test   al,0x80
c0018f88:	75 21                	jne    c0018fab <PCI::detect()+0x3d>
c0018f8a:	51                   	push   ecx
c0018f8b:	51                   	push   ecx
c0018f8c:	6a 00                	push   0x0
c0018f8e:	56                   	push   esi
c0018f8f:	e8 62 fc ff ff       	call   c0018bf6 <PCI::checkBus(unsigned char)>
c0018f94:	83 c4 10             	add    esp,0x10
c0018f97:	eb 24                	jmp    c0018fbd <PCI::detect()+0x4f>
c0018f99:	52                   	push   edx
c0018f9a:	52                   	push   edx
c0018f9b:	53                   	push   ebx
c0018f9c:	43                   	inc    ebx
c0018f9d:	56                   	push   esi
c0018f9e:	e8 53 fc ff ff       	call   c0018bf6 <PCI::checkBus(unsigned char)>
c0018fa3:	83 c4 10             	add    esp,0x10
c0018fa6:	83 fb 08             	cmp    ebx,0x8
c0018fa9:	74 12                	je     c0018fbd <PCI::detect()+0x4f>
c0018fab:	53                   	push   ebx
c0018fac:	6a 00                	push   0x0
c0018fae:	6a 00                	push   0x0
c0018fb0:	56                   	push   esi
c0018fb1:	e8 4c f7 ff ff       	call   c0018702 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fb6:	83 c4 10             	add    esp,0x10
c0018fb9:	66 40                	inc    ax
c0018fbb:	74 dc                	je     c0018f99 <PCI::detect()+0x2b>
c0018fbd:	58                   	pop    eax
c0018fbe:	5b                   	pop    ebx
c0018fbf:	5e                   	pop    esi
c0018fc0:	c3                   	ret    
c0018fc1:	90                   	nop

c0018fc2 <IDE::close(int, int, void*)>:
c0018fc2:	83 c8 ff             	or     eax,0xffffffff
c0018fc5:	c3                   	ret    

c0018fc6 <IDE::IDE()>:
c0018fc6:	83 ec 0c             	sub    esp,0xc
c0018fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fcd:	83 ec 08             	sub    esp,0x8
c0018fd0:	68 70 f3 01 c0       	push   0xc001f370
c0018fd5:	50                   	push   eax
c0018fd6:	e8 25 2d ff ff       	call   c000bd00 <HardDiskController::HardDiskController(char const*)>
c0018fdb:	83 c4 10             	add    esp,0x10
c0018fde:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c0018fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fe7:	89 10                	mov    DWORD PTR [eax],edx
c0018fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018ff4:	90                   	nop
c0018ff5:	83 c4 0c             	add    esp,0xc
c0018ff8:	c3                   	ret    
c0018ff9:	90                   	nop

c0018ffa <IDE::prepareInterrupt(unsigned char)>:
c0018ffa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019003:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001900b:	c3                   	ret    

c001900c <selectDrive(unsigned char, unsigned char)>:
c001900c:	c3                   	ret    
c001900d:	90                   	nop

c001900e <IDE::getBase(unsigned char)>:
c001900e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019017:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001901f:	c3                   	ret    

c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019020:	55                   	push   ebp
c0019021:	57                   	push   edi
c0019022:	56                   	push   esi
c0019023:	53                   	push   ebx
c0019024:	83 ec 1c             	sub    esp,0x1c
c0019027:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001902b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001902f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019032:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019036:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001903a:	80 f9 03             	cmp    cl,0x3
c001903d:	77 51                	ja     c0019090 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001903f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019043:	0f b6 f2             	movzx  esi,dl
c0019046:	0f b6 db             	movzx  ebx,bl
c0019049:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001904c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019050:	83 ca 80             	or     edx,0xffffff80
c0019053:	0f b6 d2             	movzx  edx,dl
c0019056:	52                   	push   edx
c0019057:	6a 0c                	push   0xc
c0019059:	56                   	push   esi
c001905a:	57                   	push   edi
c001905b:	e8 c0 ff ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019060:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019069:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001906d:	ee                   	out    dx,al
c001906e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019073:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019077:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001907b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001907f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019087:	83 c4 2c             	add    esp,0x2c
c001908a:	5b                   	pop    ebx
c001908b:	5e                   	pop    esi
c001908c:	5f                   	pop    edi
c001908d:	5d                   	pop    ebp
c001908e:	eb 90                	jmp    c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019090:	80 fb 07             	cmp    bl,0x7
c0019093:	77 12                	ja     c00190a7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019095:	0f b6 d2             	movzx  edx,dl
c0019098:	0f b6 db             	movzx  ebx,bl
c001909b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00190a3:	89 da                	mov    edx,ebx
c00190a5:	eb 2f                	jmp    c00190d6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190a7:	80 fb 0d             	cmp    bl,0xd
c00190aa:	77 13                	ja     c00190bf <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00190ac:	0f b6 d2             	movzx  edx,dl
c00190af:	0f b6 db             	movzx  ebx,bl
c00190b2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00190b9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00190bd:	eb 17                	jmp    c00190d6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190bf:	80 fb 15             	cmp    bl,0x15
c00190c2:	77 13                	ja     c00190d7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00190c4:	0f b6 d2             	movzx  edx,dl
c00190c7:	0f b6 db             	movzx  ebx,bl
c00190ca:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00190d2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00190d6:	ee                   	out    dx,al
c00190d7:	83 c4 1c             	add    esp,0x1c
c00190da:	5b                   	pop    ebx
c00190db:	5e                   	pop    esi
c00190dc:	5f                   	pop    edi
c00190dd:	5d                   	pop    ebp
c00190de:	c3                   	ret    
c00190df:	90                   	nop

c00190e0 <IDE::read(unsigned char, unsigned char)>:
c00190e0:	55                   	push   ebp
c00190e1:	57                   	push   edi
c00190e2:	56                   	push   esi
c00190e3:	53                   	push   ebx
c00190e4:	83 ec 1c             	sub    esp,0x1c
c00190e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190ef:	8d 43 f8             	lea    eax,[ebx-0x8]
c00190f2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190f6:	3c 03                	cmp    al,0x3
c00190f8:	77 43                	ja     c001913d <IDE::read(unsigned char, unsigned char)+0x5d>
c00190fa:	0f b6 f2             	movzx  esi,dl
c00190fd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019100:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019104:	83 c8 80             	or     eax,0xffffff80
c0019107:	0f b6 c0             	movzx  eax,al
c001910a:	50                   	push   eax
c001910b:	6a 0c                	push   0xc
c001910d:	56                   	push   esi
c001910e:	57                   	push   edi
c001910f:	e8 0c ff ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019114:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019119:	0f b6 c3             	movzx  eax,bl
c001911c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019120:	ec                   	in     al,dx
c0019121:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019125:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001912a:	52                   	push   edx
c001912b:	6a 0c                	push   0xc
c001912d:	56                   	push   esi
c001912e:	57                   	push   edi
c001912f:	e8 ec fe ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019134:	83 c4 20             	add    esp,0x20
c0019137:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001913b:	eb 49                	jmp    c0019186 <IDE::read(unsigned char, unsigned char)+0xa6>
c001913d:	80 fb 07             	cmp    bl,0x7
c0019140:	77 12                	ja     c0019154 <IDE::read(unsigned char, unsigned char)+0x74>
c0019142:	0f b6 d2             	movzx  edx,dl
c0019145:	0f b6 c3             	movzx  eax,bl
c0019148:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019150:	89 c2                	mov    edx,eax
c0019152:	eb 31                	jmp    c0019185 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019154:	80 fb 0d             	cmp    bl,0xd
c0019157:	77 13                	ja     c001916c <IDE::read(unsigned char, unsigned char)+0x8c>
c0019159:	0f b6 d2             	movzx  edx,dl
c001915c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019163:	0f b6 d3             	movzx  edx,bl
c0019166:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001916a:	eb 19                	jmp    c0019185 <IDE::read(unsigned char, unsigned char)+0xa5>
c001916c:	31 c0                	xor    eax,eax
c001916e:	80 fb 15             	cmp    bl,0x15
c0019171:	77 13                	ja     c0019186 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019173:	0f b6 d2             	movzx  edx,dl
c0019176:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001917e:	0f b6 d3             	movzx  edx,bl
c0019181:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019185:	ec                   	in     al,dx
c0019186:	83 c4 1c             	add    esp,0x1c
c0019189:	5b                   	pop    ebx
c001918a:	5e                   	pop    esi
c001918b:	5f                   	pop    edi
c001918c:	5d                   	pop    ebp
c001918d:	c3                   	ret    

c001918e <IDE::waitInterrupt(unsigned char)>:
c001918e:	57                   	push   edi
c001918f:	56                   	push   esi
c0019190:	31 f6                	xor    esi,esi
c0019192:	53                   	push   ebx
c0019193:	83 ec 10             	sub    esp,0x10
c0019196:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001919a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001919e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00191a2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00191a7:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00191ae:	84 db                	test   bl,bl
c00191b0:	75 33                	jne    c00191e5 <IDE::waitInterrupt(unsigned char)+0x57>
c00191b2:	52                   	push   edx
c00191b3:	6a 0c                	push   0xc
c00191b5:	50                   	push   eax
c00191b6:	57                   	push   edi
c00191b7:	e8 24 ff ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00191bc:	83 c4 10             	add    esp,0x10
c00191bf:	a8 01                	test   al,0x1
c00191c1:	75 2a                	jne    c00191ed <IDE::waitInterrupt(unsigned char)+0x5f>
c00191c3:	f7 c6 04 00 00 00    	test   esi,0x4
c00191c9:	75 12                	jne    c00191dd <IDE::waitInterrupt(unsigned char)+0x4f>
c00191cb:	83 fe 32             	cmp    esi,0x32
c00191ce:	7e 0d                	jle    c00191dd <IDE::waitInterrupt(unsigned char)+0x4f>
c00191d0:	83 ec 0c             	sub    esp,0xc
c00191d3:	6a 64                	push   0x64
c00191d5:	e8 1a a9 ff ff       	call   c0013af4 <milliTenthSleep(unsigned int)>
c00191da:	83 c4 10             	add    esp,0x10
c00191dd:	83 fe 3c             	cmp    esi,0x3c
c00191e0:	74 0b                	je     c00191ed <IDE::waitInterrupt(unsigned char)+0x5f>
c00191e2:	46                   	inc    esi
c00191e3:	eb bd                	jmp    c00191a2 <IDE::waitInterrupt(unsigned char)+0x14>
c00191e5:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	88 d8                	mov    al,bl
c00191f2:	5b                   	pop    ebx
c00191f3:	5e                   	pop    esi
c00191f4:	5f                   	pop    edi
c00191f5:	c3                   	ret    

c00191f6 <ideChannel0IRQHandler(regs*, void*)>:
c00191f6:	83 ec 10             	sub    esp,0x10
c00191f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191fd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019204:	6a 07                	push   0x7
c0019206:	6a 00                	push   0x0
c0019208:	50                   	push   eax
c0019209:	e8 d2 fe ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c001920e:	83 c4 1c             	add    esp,0x1c
c0019211:	c3                   	ret    

c0019212 <ideChannel1IRQHandler(regs*, void*)>:
c0019212:	83 ec 10             	sub    esp,0x10
c0019215:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019219:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019220:	6a 07                	push   0x7
c0019222:	6a 01                	push   0x1
c0019224:	50                   	push   eax
c0019225:	e8 b6 fe ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c001922a:	83 c4 1c             	add    esp,0x1c
c001922d:	c3                   	ret    

c001922e <IDE::enableIRQs(unsigned char, bool)>:
c001922e:	57                   	push   edi
c001922f:	56                   	push   esi
c0019230:	be 04 00 00 00       	mov    esi,0x4
c0019235:	53                   	push   ebx
c0019236:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001923b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001923f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019244:	0f 94 c0             	sete   al
c0019247:	01 c0                	add    eax,eax
c0019249:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019250:	0f b6 c0             	movzx  eax,al
c0019253:	50                   	push   eax
c0019254:	6a 0c                	push   0xc
c0019256:	57                   	push   edi
c0019257:	53                   	push   ebx
c0019258:	e8 c3 fd ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001925d:	83 c4 10             	add    esp,0x10
c0019260:	50                   	push   eax
c0019261:	6a 0c                	push   0xc
c0019263:	57                   	push   edi
c0019264:	53                   	push   ebx
c0019265:	e8 76 fe ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c001926a:	83 c4 10             	add    esp,0x10
c001926d:	4e                   	dec    esi
c001926e:	75 f0                	jne    c0019260 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019270:	5b                   	pop    ebx
c0019271:	5e                   	pop    esi
c0019272:	5f                   	pop    edi
c0019273:	c3                   	ret    

c0019274 <IDE::open(int, int, void*)>:
c0019274:	55                   	push   ebp
c0019275:	57                   	push   edi
c0019276:	56                   	push   esi
c0019277:	53                   	push   ebx
c0019278:	83 ec 1c             	sub    esp,0x1c
c001927b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001927f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019288:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019291:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019298:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001929f:	0f 85 b0 02 00 00    	jne    c0019555 <IDE::open(int, int, void*)+0x2e1>
c00192a5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00192ab:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00192af:	83 e0 7f             	and    eax,0x7f
c00192b2:	3c 05                	cmp    al,0x5
c00192b4:	74 04                	je     c00192ba <IDE::open(int, int, void*)+0x46>
c00192b6:	3c 0f                	cmp    al,0xf
c00192b8:	75 32                	jne    c00192ec <IDE::open(int, int, void*)+0x78>
c00192ba:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00192c0:	83 e0 fc             	and    eax,0xfffffffc
c00192c3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00192ca:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00192d0:	83 e0 fc             	and    eax,0xfffffffc
c00192d3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00192da:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00192e0:	83 e0 fc             	and    eax,0xfffffffc
c00192e3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192ea:	eb 14                	jmp    c0019300 <IDE::open(int, int, void*)+0x8c>
c00192ec:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00192f6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019300:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019307:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001930e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019312:	89 c6                	mov    esi,eax
c0019314:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019319:	c1 e6 10             	shl    esi,0x10
c001931c:	89 e8                	mov    eax,ebp
c001931e:	89 fa                	mov    edx,edi
c0019320:	c1 e0 0b             	shl    eax,0xb
c0019323:	09 f0                	or     eax,esi
c0019325:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001932c:	c1 e6 08             	shl    esi,0x8
c001932f:	09 c6                	or     esi,eax
c0019331:	89 f0                	mov    eax,esi
c0019333:	0d 08 00 00 80       	or     eax,0x80000008
c0019338:	ef                   	out    dx,eax
c0019339:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001933e:	89 ca                	mov    edx,ecx
c0019340:	ed                   	in     eax,dx
c0019341:	c1 e8 10             	shr    eax,0x10
c0019344:	3d ff ff 00 00       	cmp    eax,0xffff
c0019349:	0f 84 f5 00 00 00    	je     c0019444 <IDE::open(int, int, void*)+0x1d0>
c001934f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019355:	89 fa                	mov    edx,edi
c0019357:	89 f0                	mov    eax,esi
c0019359:	ef                   	out    dx,eax
c001935a:	b0 fe                	mov    al,0xfe
c001935c:	89 ca                	mov    edx,ecx
c001935e:	ee                   	out    dx,al
c001935f:	89 f0                	mov    eax,esi
c0019361:	89 fa                	mov    edx,edi
c0019363:	ef                   	out    dx,eax
c0019364:	89 ca                	mov    edx,ecx
c0019366:	ed                   	in     eax,dx
c0019367:	3c fe                	cmp    al,0xfe
c0019369:	0f 85 a9 00 00 00    	jne    c0019418 <IDE::open(int, int, void*)+0x1a4>
c001936f:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019375:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001937c:	74 33                	je     c00193b1 <IDE::open(int, int, void*)+0x13d>
c001937e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019384:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019388:	40                   	inc    eax
c0019389:	83 ec 0c             	sub    esp,0xc
c001938c:	0f b6 c0             	movzx  eax,al
c001938f:	50                   	push   eax
c0019390:	55                   	push   ebp
c0019391:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019395:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001939b:	51                   	push   ecx
c001939c:	e8 77 53 ff ff       	call   c000e718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00193a1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00193a6:	83 c4 1c             	add    esp,0x1c
c00193a9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00193af:	eb 0a                	jmp    c00193bb <IDE::open(int, int, void*)+0x147>
c00193b1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00193bb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00193c2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00193c9:	c1 e1 10             	shl    ecx,0x10
c00193cc:	c1 e0 08             	shl    eax,0x8
c00193cf:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193d4:	09 c1                	or     ecx,eax
c00193d6:	89 fa                	mov    edx,edi
c00193d8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00193df:	c1 e0 0b             	shl    eax,0xb
c00193e2:	09 c1                	or     ecx,eax
c00193e4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00193ea:	89 c8                	mov    eax,ecx
c00193ec:	ef                   	out    dx,eax
c00193ed:	be fc 0c 00 00       	mov    esi,0xcfc
c00193f2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00193f8:	89 f2                	mov    edx,esi
c00193fa:	ee                   	out    dx,al
c00193fb:	89 c8                	mov    eax,ecx
c00193fd:	89 fa                	mov    edx,edi
c00193ff:	ef                   	out    dx,eax
c0019400:	89 f2                	mov    edx,esi
c0019402:	ed                   	in     eax,dx
c0019403:	0f b6 c0             	movzx  eax,al
c0019406:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001940c:	74 46                	je     c0019454 <IDE::open(int, int, void*)+0x1e0>
c001940e:	83 ec 0c             	sub    esp,0xc
c0019411:	68 88 f3 01 c0       	push   0xc001f388
c0019416:	eb 34                	jmp    c001944c <IDE::open(int, int, void*)+0x1d8>
c0019418:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019421:	75 17                	jne    c001943a <IDE::open(int, int, void*)+0x1c6>
c0019423:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019428:	74 07                	je     c0019431 <IDE::open(int, int, void*)+0x1bd>
c001942a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001942f:	75 09                	jne    c001943a <IDE::open(int, int, void*)+0x1c6>
c0019431:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019438:	eb 1a                	jmp    c0019454 <IDE::open(int, int, void*)+0x1e0>
c001943a:	83 ec 0c             	sub    esp,0xc
c001943d:	68 90 f3 01 c0       	push   0xc001f390
c0019442:	eb 08                	jmp    c001944c <IDE::open(int, int, void*)+0x1d8>
c0019444:	83 ec 0c             	sub    esp,0xc
c0019447:	68 c1 f3 01 c0       	push   0xc001f3c1
c001944c:	e8 ae 6d ff ff       	call   c00101ff <KePanic(char const*)>
c0019451:	83 c4 10             	add    esp,0x10
c0019454:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001945b:	79 1a                	jns    c0019477 <IDE::open(int, int, void*)+0x203>
c001945d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019463:	83 e0 fc             	and    eax,0xfffffffc
c0019466:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001946d:	83 c0 08             	add    eax,0x8
c0019470:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019477:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001947d:	89 c2                	mov    edx,eax
c001947f:	83 e2 0f             	and    edx,0xf
c0019482:	66 83 fa 08          	cmp    dx,0x8
c0019486:	75 0a                	jne    c0019492 <IDE::open(int, int, void*)+0x21e>
c0019488:	83 e8 02             	sub    eax,0x2
c001948b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019492:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019498:	89 c2                	mov    edx,eax
c001949a:	83 e2 0f             	and    edx,0xf
c001949d:	66 83 fa 08          	cmp    dx,0x8
c00194a1:	75 0a                	jne    c00194ad <IDE::open(int, int, void*)+0x239>
c00194a3:	83 e8 02             	sub    eax,0x2
c00194a6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00194ad:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194b4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00194bb:	89 d0                	mov    eax,edx
c00194bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194c0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194c4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00194c8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00194cb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194d0:	0f b6 c9             	movzx  ecx,cl
c00194d3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00194da:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194dd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194e1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00194e5:	8d 50 02             	lea    edx,[eax+0x2]
c00194e8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194ed:	0f b6 d2             	movzx  edx,dl
c00194f0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00194f6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194f9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194fd:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019501:	8d 48 03             	lea    ecx,[eax+0x3]
c0019504:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019509:	0f b6 c9             	movzx  ecx,cl
c001950c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019512:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019515:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019519:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001951d:	8d 50 04             	lea    edx,[eax+0x4]
c0019520:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019526:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001952b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019532:	66 85 f6             	test   si,si
c0019535:	74 5b                	je     c0019592 <IDE::open(int, int, void*)+0x31e>
c0019537:	0f b6 d2             	movzx  edx,dl
c001953a:	83 c0 05             	add    eax,0x5
c001953d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019540:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019544:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019548:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001954e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019553:	eb 3d                	jmp    c0019592 <IDE::open(int, int, void*)+0x31e>
c0019555:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001955b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019562:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019569:	66 05 06 02          	add    ax,0x206
c001956d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019574:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001957b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019582:	66 05 06 02          	add    ax,0x206
c0019586:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001958d:	e9 e5 fe ff ff       	jmp    c0019477 <IDE::open(int, int, void*)+0x203>
c0019592:	50                   	push   eax
c0019593:	50                   	push   eax
c0019594:	6a 00                	push   0x0
c0019596:	53                   	push   ebx
c0019597:	e8 5e fa ff ff       	call   c0018ffa <IDE::prepareInterrupt(unsigned char)>
c001959c:	5a                   	pop    edx
c001959d:	59                   	pop    ecx
c001959e:	6a 01                	push   0x1
c00195a0:	53                   	push   ebx
c00195a1:	e8 54 fa ff ff       	call   c0018ffa <IDE::prepareInterrupt(unsigned char)>
c00195a6:	83 c4 0c             	add    esp,0xc
c00195a9:	6a 00                	push   0x0
c00195ab:	6a 00                	push   0x0
c00195ad:	53                   	push   ebx
c00195ae:	e8 7b fc ff ff       	call   c001922e <IDE::enableIRQs(unsigned char, bool)>
c00195b3:	83 c4 0c             	add    esp,0xc
c00195b6:	6a 00                	push   0x0
c00195b8:	6a 01                	push   0x1
c00195ba:	53                   	push   ebx
c00195bb:	e8 6e fc ff ff       	call   c001922e <IDE::enableIRQs(unsigned char, bool)>
c00195c0:	83 c4 10             	add    esp,0x10
c00195c3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00195ca:	74 34                	je     c0019600 <IDE::open(int, int, void*)+0x38c>
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	53                   	push   ebx
c00195d0:	6a 01                	push   0x1
c00195d2:	68 f6 91 01 c0       	push   0xc00191f6
c00195d7:	6a 0e                	push   0xe
c00195d9:	53                   	push   ebx
c00195da:	e8 89 23 ff ff       	call   c000b968 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195df:	83 c4 14             	add    esp,0x14
c00195e2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00195e8:	53                   	push   ebx
c00195e9:	6a 01                	push   0x1
c00195eb:	68 12 92 01 c0       	push   0xc0019212
c00195f0:	6a 0f                	push   0xf
c00195f2:	53                   	push   ebx
c00195f3:	e8 70 23 ff ff       	call   c000b968 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195f8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00195fe:	eb 38                	jmp    c0019638 <IDE::open(int, int, void*)+0x3c4>
c0019600:	83 ec 0c             	sub    esp,0xc
c0019603:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001960d:	53                   	push   ebx
c001960e:	6a 00                	push   0x0
c0019610:	68 f6 91 01 c0       	push   0xc00191f6
c0019615:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001961b:	53                   	push   ebx
c001961c:	e8 47 23 ff ff       	call   c000b968 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019621:	83 c4 14             	add    esp,0x14
c0019624:	53                   	push   ebx
c0019625:	6a 00                	push   0x0
c0019627:	68 12 92 01 c0       	push   0xc0019212
c001962c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019632:	53                   	push   ebx
c0019633:	e8 30 23 ff ff       	call   c000b968 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019638:	8b 03                	mov    eax,DWORD PTR [ebx]
c001963a:	83 c4 20             	add    esp,0x20
c001963d:	83 ec 0c             	sub    esp,0xc
c0019640:	53                   	push   ebx
c0019641:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019644:	83 c4 0c             	add    esp,0xc
c0019647:	6a 07                	push   0x7
c0019649:	6a 00                	push   0x0
c001964b:	53                   	push   ebx
c001964c:	e8 8f fa ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019651:	83 c4 0c             	add    esp,0xc
c0019654:	6a 07                	push   0x7
c0019656:	6a 01                	push   0x1
c0019658:	53                   	push   ebx
c0019659:	e8 82 fa ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c001965e:	83 c4 0c             	add    esp,0xc
c0019661:	6a 01                	push   0x1
c0019663:	6a 00                	push   0x0
c0019665:	53                   	push   ebx
c0019666:	e8 c3 fb ff ff       	call   c001922e <IDE::enableIRQs(unsigned char, bool)>
c001966b:	83 c4 0c             	add    esp,0xc
c001966e:	6a 01                	push   0x1
c0019670:	6a 01                	push   0x1
c0019672:	53                   	push   ebx
c0019673:	e8 b6 fb ff ff       	call   c001922e <IDE::enableIRQs(unsigned char, bool)>
c0019678:	83 c4 2c             	add    esp,0x2c
c001967b:	31 c0                	xor    eax,eax
c001967d:	5b                   	pop    ebx
c001967e:	5e                   	pop    esi
c001967f:	5f                   	pop    edi
c0019680:	5d                   	pop    ebp
c0019681:	c3                   	ret    

c0019682 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019682:	55                   	push   ebp
c0019683:	57                   	push   edi
c0019684:	56                   	push   esi
c0019685:	53                   	push   ebx
c0019686:	83 ec 1c             	sub    esp,0x1c
c0019689:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001968d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019691:	8d 50 f8             	lea    edx,[eax-0x8]
c0019694:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019698:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001969c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00196a0:	80 fa 03             	cmp    dl,0x3
c00196a3:	77 5d                	ja     c0019702 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00196a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196ad:	0f b6 db             	movzx  ebx,bl
c00196b0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00196b3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00196b7:	83 ca 80             	or     edx,0xffffff80
c00196ba:	0f b6 d2             	movzx  edx,dl
c00196bd:	52                   	push   edx
c00196be:	6a 0c                	push   0xc
c00196c0:	53                   	push   ebx
c00196c1:	56                   	push   esi
c00196c2:	e8 59 f9 ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196c7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00196cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00196d4:	0f b6 c0             	movzx  eax,al
c00196d7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00196db:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196dd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00196e2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00196e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00196ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00196ee:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00196f6:	83 c4 2c             	add    esp,0x2c
c00196f9:	5b                   	pop    ebx
c00196fa:	5e                   	pop    esi
c00196fb:	5f                   	pop    edi
c00196fc:	5d                   	pop    ebp
c00196fd:	e9 1e f9 ff ff       	jmp    c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019702:	3c 07                	cmp    al,0x7
c0019704:	77 10                	ja     c0019716 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019706:	0f b6 db             	movzx  ebx,bl
c0019709:	0f b6 d0             	movzx  edx,al
c001970c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019714:	eb 2d                	jmp    c0019743 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019716:	3c 0d                	cmp    al,0xd
c0019718:	77 13                	ja     c001972d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001971a:	0f b6 db             	movzx  ebx,bl
c001971d:	0f b6 c0             	movzx  eax,al
c0019720:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019727:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001972b:	eb 16                	jmp    c0019743 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001972d:	3c 15                	cmp    al,0x15
c001972f:	77 14                	ja     c0019745 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019731:	0f b6 db             	movzx  ebx,bl
c0019734:	0f b6 c0             	movzx  eax,al
c0019737:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001973f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019743:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019745:	83 c4 1c             	add    esp,0x1c
c0019748:	5b                   	pop    ebx
c0019749:	5e                   	pop    esi
c001974a:	5f                   	pop    edi
c001974b:	5d                   	pop    ebp
c001974c:	c3                   	ret    
c001974d:	90                   	nop

c001974e <IDE::detect()>:
c001974e:	55                   	push   ebp
c001974f:	57                   	push   edi
c0019750:	56                   	push   esi
c0019751:	53                   	push   ebx
c0019752:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019758:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001975f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019766:	0f 85 97 02 00 00    	jne    c0019a03 <IDE::detect()+0x2b5>
c001976c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019773:	31 f6                	xor    esi,esi
c0019775:	31 ed                	xor    ebp,ebp
c0019777:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001977f:	89 e8                	mov    eax,ebp
c0019781:	c1 e0 06             	shl    eax,0x6
c0019784:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001978c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019790:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019794:	c1 e0 04             	shl    eax,0x4
c0019797:	83 c8 a0             	or     eax,0xffffffa0
c001979a:	0f b6 c0             	movzx  eax,al
c001979d:	50                   	push   eax
c001979e:	6a 06                	push   0x6
c00197a0:	56                   	push   esi
c00197a1:	53                   	push   ebx
c00197a2:	e8 79 f8 ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197a7:	83 c4 0c             	add    esp,0xc
c00197aa:	6a 0c                	push   0xc
c00197ac:	56                   	push   esi
c00197ad:	53                   	push   ebx
c00197ae:	e8 2d f9 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00197b3:	83 c4 0c             	add    esp,0xc
c00197b6:	6a 0c                	push   0xc
c00197b8:	56                   	push   esi
c00197b9:	53                   	push   ebx
c00197ba:	e8 21 f9 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00197bf:	83 c4 0c             	add    esp,0xc
c00197c2:	6a 0c                	push   0xc
c00197c4:	56                   	push   esi
c00197c5:	53                   	push   ebx
c00197c6:	e8 15 f9 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00197cb:	83 c4 0c             	add    esp,0xc
c00197ce:	6a 0c                	push   0xc
c00197d0:	56                   	push   esi
c00197d1:	53                   	push   ebx
c00197d2:	e8 09 f9 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00197d7:	68 ec 00 00 00       	push   0xec
c00197dc:	6a 07                	push   0x7
c00197de:	56                   	push   esi
c00197df:	53                   	push   ebx
c00197e0:	e8 3b f8 ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197e5:	83 c4 1c             	add    esp,0x1c
c00197e8:	6a 0c                	push   0xc
c00197ea:	56                   	push   esi
c00197eb:	53                   	push   ebx
c00197ec:	e8 ef f8 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00197f1:	83 c4 0c             	add    esp,0xc
c00197f4:	6a 0c                	push   0xc
c00197f6:	56                   	push   esi
c00197f7:	53                   	push   ebx
c00197f8:	e8 e3 f8 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00197fd:	83 c4 0c             	add    esp,0xc
c0019800:	6a 0c                	push   0xc
c0019802:	56                   	push   esi
c0019803:	53                   	push   ebx
c0019804:	e8 d7 f8 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019809:	83 c4 0c             	add    esp,0xc
c001980c:	6a 0c                	push   0xc
c001980e:	56                   	push   esi
c001980f:	53                   	push   ebx
c0019810:	e8 cb f8 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019815:	83 c4 0c             	add    esp,0xc
c0019818:	6a 0c                	push   0xc
c001981a:	56                   	push   esi
c001981b:	53                   	push   ebx
c001981c:	e8 bf f8 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019821:	83 c4 10             	add    esp,0x10
c0019824:	84 c0                	test   al,al
c0019826:	0f 84 5f 01 00 00    	je     c001998b <IDE::detect()+0x23d>
c001982c:	31 ff                	xor    edi,edi
c001982e:	50                   	push   eax
c001982f:	6a 0c                	push   0xc
c0019831:	56                   	push   esi
c0019832:	53                   	push   ebx
c0019833:	e8 a8 f8 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019838:	83 c4 10             	add    esp,0x10
c001983b:	a8 01                	test   al,0x1
c001983d:	0f 85 69 01 00 00    	jne    c00199ac <IDE::detect()+0x25e>
c0019843:	84 c0                	test   al,al
c0019845:	78 04                	js     c001984b <IDE::detect()+0xfd>
c0019847:	a8 08                	test   al,0x8
c0019849:	75 23                	jne    c001986e <IDE::detect()+0x120>
c001984b:	47                   	inc    edi
c001984c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019852:	7e da                	jle    c001982e <IDE::detect()+0xe0>
c0019854:	83 ec 0c             	sub    esp,0xc
c0019857:	6a 32                	push   0x32
c0019859:	e8 96 a2 ff ff       	call   c0013af4 <milliTenthSleep(unsigned int)>
c001985e:	83 c4 10             	add    esp,0x10
c0019861:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019867:	75 c5                	jne    c001982e <IDE::detect()+0xe0>
c0019869:	e9 3e 01 00 00       	jmp    c00199ac <IDE::detect()+0x25e>
c001986e:	31 c9                	xor    ecx,ecx
c0019870:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019874:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019878:	83 ec 0c             	sub    esp,0xc
c001987b:	68 80 00 00 00       	push   0x80
c0019880:	57                   	push   edi
c0019881:	6a 00                	push   0x0
c0019883:	56                   	push   esi
c0019884:	53                   	push   ebx
c0019885:	e8 f8 fd ff ff       	call   c0019682 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001988a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001988f:	89 e8                	mov    eax,ebp
c0019891:	89 d1                	mov    ecx,edx
c0019893:	c1 e0 06             	shl    eax,0x6
c0019896:	01 d8                	add    eax,ebx
c0019898:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001989f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00198a6:	89 f2                	mov    edx,esi
c00198a8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00198ae:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00198b2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00198b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00198bc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00198c3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00198cb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00198d2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00198da:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00198e0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00198e7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00198ed:	8d 54 24 58          	lea    edx,[esp+0x58]
c00198f1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00198f5:	83 c4 20             	add    esp,0x20
c00198f8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00198fb:	83 c0 02             	add    eax,0x2
c00198fe:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019904:	83 c7 02             	add    edi,0x2
c0019907:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001990a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019910:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019914:	75 e2                	jne    c00198f8 <IDE::detect()+0x1aa>
c0019916:	89 e8                	mov    eax,ebp
c0019918:	c1 e0 06             	shl    eax,0x6
c001991b:	01 d8                	add    eax,ebx
c001991d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019923:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001992a:	66 c1 ea 09          	shr    dx,0x9
c001992e:	83 e2 01             	and    edx,0x1
c0019931:	84 c9                	test   cl,cl
c0019933:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019939:	75 22                	jne    c001995d <IDE::detect()+0x20f>
c001993b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019942:	74 46                	je     c001998a <IDE::detect()+0x23c>
c0019944:	83 ec 0c             	sub    esp,0xc
c0019947:	68 7c 01 00 00       	push   0x17c
c001994c:	e8 68 de fe ff       	call   c00077b9 <malloc>
c0019951:	89 c7                	mov    edi,eax
c0019953:	89 04 24             	mov    DWORD PTR [esp],eax
c0019956:	e8 11 05 00 00       	call   c0019e6c <ATA::ATA()>
c001995b:	eb 17                	jmp    c0019974 <IDE::detect()+0x226>
c001995d:	83 ec 0c             	sub    esp,0xc
c0019960:	68 84 01 00 00       	push   0x184
c0019965:	e8 4f de fe ff       	call   c00077b9 <malloc>
c001996a:	89 c7                	mov    edi,eax
c001996c:	89 04 24             	mov    DWORD PTR [esp],eax
c001996f:	e8 f0 0a 00 00       	call   c001a464 <ATAPI::ATAPI()>
c0019974:	5a                   	pop    edx
c0019975:	59                   	pop    ecx
c0019976:	57                   	push   edi
c0019977:	53                   	push   ebx
c0019978:	e8 3f 20 ff ff       	call   c000b9bc <Device::addChild(Device*)>
c001997d:	8b 07                	mov    eax,DWORD PTR [edi]
c001997f:	53                   	push   ebx
c0019980:	55                   	push   ebp
c0019981:	6a 00                	push   0x0
c0019983:	57                   	push   edi
c0019984:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019987:	83 c4 20             	add    esp,0x20
c001998a:	45                   	inc    ebp
c001998b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019990:	74 0d                	je     c001999f <IDE::detect()+0x251>
c0019992:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001999a:	e9 e0 fd ff ff       	jmp    c001977f <IDE::detect()+0x31>
c001999f:	4e                   	dec    esi
c00199a0:	74 61                	je     c0019a03 <IDE::detect()+0x2b5>
c00199a2:	be 01 00 00 00       	mov    esi,0x1
c00199a7:	e9 cb fd ff ff       	jmp    c0019777 <IDE::detect()+0x29>
c00199ac:	50                   	push   eax
c00199ad:	6a 04                	push   0x4
c00199af:	56                   	push   esi
c00199b0:	53                   	push   ebx
c00199b1:	e8 2a f7 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00199b6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00199ba:	83 c4 0c             	add    esp,0xc
c00199bd:	6a 05                	push   0x5
c00199bf:	56                   	push   esi
c00199c0:	53                   	push   ebx
c00199c1:	e8 1a f7 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c00199c6:	83 c4 10             	add    esp,0x10
c00199c9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00199cd:	80 fa 14             	cmp    dl,0x14
c00199d0:	75 04                	jne    c00199d6 <IDE::detect()+0x288>
c00199d2:	3c eb                	cmp    al,0xeb
c00199d4:	eb 07                	jmp    c00199dd <IDE::detect()+0x28f>
c00199d6:	3c 96                	cmp    al,0x96
c00199d8:	75 b1                	jne    c001998b <IDE::detect()+0x23d>
c00199da:	80 fa 69             	cmp    dl,0x69
c00199dd:	75 ac                	jne    c001998b <IDE::detect()+0x23d>
c00199df:	68 a1 00 00 00       	push   0xa1
c00199e4:	6a 07                	push   0x7
c00199e6:	56                   	push   esi
c00199e7:	53                   	push   ebx
c00199e8:	e8 33 f6 ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199ed:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00199f4:	e8 fb a0 ff ff       	call   c0013af4 <milliTenthSleep(unsigned int)>
c00199f9:	83 c4 10             	add    esp,0x10
c00199fc:	b1 01                	mov    cl,0x1
c00199fe:	e9 6d fe ff ff       	jmp    c0019870 <IDE::detect()+0x122>
c0019a03:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a09:	5b                   	pop    ebx
c0019a0a:	5e                   	pop    esi
c0019a0b:	5f                   	pop    edi
c0019a0c:	5d                   	pop    ebp
c0019a0d:	c3                   	ret    

c0019a0e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a0e:	55                   	push   ebp
c0019a0f:	57                   	push   edi
c0019a10:	56                   	push   esi
c0019a11:	53                   	push   ebx
c0019a12:	83 ec 1c             	sub    esp,0x1c
c0019a15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a1d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a21:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a25:	88 c3                	mov    bl,al
c0019a27:	84 c0                	test   al,al
c0019a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a2d:	0f 84 81 00 00 00    	je     c0019ab4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a33:	83 ec 0c             	sub    esp,0xc
c0019a36:	68 eb f3 01 c0       	push   0xc001f3eb
c0019a3b:	e8 3d 0b ff ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c0019a40:	83 c4 10             	add    esp,0x10
c0019a43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a47:	3c 01                	cmp    al,0x1
c0019a49:	74 63                	je     c0019aae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019a4b:	3c 02                	cmp    al,0x2
c0019a4d:	75 53                	jne    c0019aa2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019a4f:	01 f6                	add    esi,esi
c0019a51:	09 ee                	or     esi,ebp
c0019a53:	50                   	push   eax
c0019a54:	89 f0                	mov    eax,esi
c0019a56:	6a 01                	push   0x1
c0019a58:	0f b6 f0             	movzx  esi,al
c0019a5b:	c1 e6 06             	shl    esi,0x6
c0019a5e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a66:	50                   	push   eax
c0019a67:	57                   	push   edi
c0019a68:	e8 73 f6 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019a6d:	83 c4 10             	add    esp,0x10
c0019a70:	a8 01                	test   al,0x1
c0019a72:	74 02                	je     c0019a76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a74:	b3 07                	mov    bl,0x7
c0019a76:	a8 02                	test   al,0x2
c0019a78:	74 02                	je     c0019a7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a7a:	b3 03                	mov    bl,0x3
c0019a7c:	a8 04                	test   al,0x4
c0019a7e:	74 02                	je     c0019a82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a80:	b3 14                	mov    bl,0x14
c0019a82:	a8 08                	test   al,0x8
c0019a84:	74 02                	je     c0019a88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a86:	b3 03                	mov    bl,0x3
c0019a88:	a8 10                	test   al,0x10
c0019a8a:	74 02                	je     c0019a8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a8c:	b3 15                	mov    bl,0x15
c0019a8e:	a8 20                	test   al,0x20
c0019a90:	74 02                	je     c0019a94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a92:	b3 03                	mov    bl,0x3
c0019a94:	a8 40                	test   al,0x40
c0019a96:	74 02                	je     c0019a9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a98:	b3 16                	mov    bl,0x16
c0019a9a:	84 c0                	test   al,al
c0019a9c:	79 16                	jns    c0019ab4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a9e:	b3 0d                	mov    bl,0xd
c0019aa0:	eb 12                	jmp    c0019ab4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aa2:	3c 03                	cmp    al,0x3
c0019aa4:	74 0c                	je     c0019ab2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019aa6:	3c 04                	cmp    al,0x4
c0019aa8:	75 0a                	jne    c0019ab4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aaa:	b3 08                	mov    bl,0x8
c0019aac:	eb 06                	jmp    c0019ab4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aae:	b3 13                	mov    bl,0x13
c0019ab0:	eb 02                	jmp    c0019ab4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ab2:	b3 17                	mov    bl,0x17
c0019ab4:	83 c4 1c             	add    esp,0x1c
c0019ab7:	88 d8                	mov    al,bl
c0019ab9:	5b                   	pop    ebx
c0019aba:	5e                   	pop    esi
c0019abb:	5f                   	pop    edi
c0019abc:	5d                   	pop    ebp
c0019abd:	c3                   	ret    

c0019abe <IDE::polling(unsigned char, unsigned int)>:
c0019abe:	55                   	push   ebp
c0019abf:	bd 04 00 00 00       	mov    ebp,0x4
c0019ac4:	57                   	push   edi
c0019ac5:	56                   	push   esi
c0019ac6:	53                   	push   ebx
c0019ac7:	83 ec 0c             	sub    esp,0xc
c0019aca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ace:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019ad2:	0f b6 f3             	movzx  esi,bl
c0019ad5:	52                   	push   edx
c0019ad6:	6a 0c                	push   0xc
c0019ad8:	56                   	push   esi
c0019ad9:	57                   	push   edi
c0019ada:	e8 01 f6 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019adf:	83 c4 10             	add    esp,0x10
c0019ae2:	4d                   	dec    ebp
c0019ae3:	75 ed                	jne    c0019ad2 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019ae5:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019aea:	50                   	push   eax
c0019aeb:	6a 0c                	push   0xc
c0019aed:	56                   	push   esi
c0019aee:	57                   	push   edi
c0019aef:	e8 ec f5 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019af4:	83 c4 10             	add    esp,0x10
c0019af7:	a8 01                	test   al,0x1
c0019af9:	75 17                	jne    c0019b12 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019afb:	a8 20                	test   al,0x20
c0019afd:	75 0f                	jne    c0019b0e <IDE::polling(unsigned char, unsigned int)+0x50>
c0019aff:	4b                   	dec    ebx
c0019b00:	74 10                	je     c0019b12 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b02:	84 c0                	test   al,al
c0019b04:	78 e4                	js     c0019aea <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b06:	a8 08                	test   al,0x8
c0019b08:	74 e0                	je     c0019aea <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b0a:	31 c0                	xor    eax,eax
c0019b0c:	eb 06                	jmp    c0019b14 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b0e:	b0 01                	mov    al,0x1
c0019b10:	eb 02                	jmp    c0019b14 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b12:	b0 02                	mov    al,0x2
c0019b14:	83 c4 0c             	add    esp,0xc
c0019b17:	5b                   	pop    ebx
c0019b18:	5e                   	pop    esi
c0019b19:	5f                   	pop    edi
c0019b1a:	5d                   	pop    ebp
c0019b1b:	c3                   	ret    

c0019b1c <SATABus::close(int, int, void*)>:
c0019b1c:	31 c0                	xor    eax,eax
c0019b1e:	c3                   	ret    
c0019b1f:	90                   	nop

c0019b20 <SATABus::detect()>:
c0019b20:	c3                   	ret    
c0019b21:	90                   	nop

c0019b22 <SATABus::SATABus()>:
c0019b22:	83 ec 0c             	sub    esp,0xc
c0019b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b29:	83 ec 08             	sub    esp,0x8
c0019b2c:	68 24 f4 01 c0       	push   0xc001f424
c0019b31:	50                   	push   eax
c0019b32:	e8 c9 21 ff ff       	call   c000bd00 <HardDiskController::HardDiskController(char const*)>
c0019b37:	83 c4 10             	add    esp,0x10
c0019b3a:	ba 50 f4 01 c0       	mov    edx,0xc001f450
c0019b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b43:	89 10                	mov    DWORD PTR [eax],edx
c0019b45:	83 ec 0c             	sub    esp,0xc
c0019b48:	6a 50                	push   0x50
c0019b4a:	e8 04 e0 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019b4f:	83 c4 10             	add    esp,0x10
c0019b52:	89 c2                	mov    edx,eax
c0019b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b58:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b5e:	83 ec 0c             	sub    esp,0xc
c0019b61:	6a 50                	push   0x50
c0019b63:	e8 1d f7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019b68:	83 c4 10             	add    esp,0x10
c0019b6b:	89 c2                	mov    edx,eax
c0019b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b71:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b77:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019b7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b80:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b8a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b90:	83 ec 0c             	sub    esp,0xc
c0019b93:	6a 03                	push   0x3
c0019b95:	6a 50                	push   0x50
c0019b97:	51                   	push   ecx
c0019b98:	52                   	push   edx
c0019b99:	50                   	push   eax
c0019b9a:	e8 c7 00 ff ff       	call   c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b9f:	83 c4 20             	add    esp,0x20
c0019ba2:	90                   	nop
c0019ba3:	83 c4 0c             	add    esp,0xc
c0019ba6:	c3                   	ret    
c0019ba7:	90                   	nop

c0019ba8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bac:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019baf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019bb2:	09 c2                	or     edx,eax
c0019bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019bbe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019bc0:	31 c0                	xor    eax,eax
c0019bc2:	c1 e9 08             	shr    ecx,0x8
c0019bc5:	83 e1 0f             	and    ecx,0xf
c0019bc8:	39 c8                	cmp    eax,ecx
c0019bca:	74 0a                	je     c0019bd6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019bcc:	f6 c2 01             	test   dl,0x1
c0019bcf:	74 08                	je     c0019bd9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019bd1:	d1 ea                	shr    edx,1
c0019bd3:	40                   	inc    eax
c0019bd4:	eb f2                	jmp    c0019bc8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019bd6:	83 c8 ff             	or     eax,0xffffffff
c0019bd9:	c3                   	ret    

c0019bda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019bda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019bde:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019be1:	89 c2                	mov    edx,eax
c0019be3:	c1 ea 08             	shr    edx,0x8
c0019be6:	83 e2 0f             	and    edx,0xf
c0019be9:	fe ca                	dec    dl
c0019beb:	75 31                	jne    c0019c1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019bed:	83 e0 0f             	and    eax,0xf
c0019bf0:	3c 03                	cmp    al,0x3
c0019bf2:	75 2a                	jne    c0019c1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019bf4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019bf7:	b8 02 00 00 00       	mov    eax,0x2
c0019bfc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c02:	74 1c                	je     c0019c20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c04:	b8 04 00 00 00       	mov    eax,0x4
c0019c09:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c0f:	74 0f                	je     c0019c20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c11:	31 c0                	xor    eax,eax
c0019c13:	83 fa 03             	cmp    edx,0x3
c0019c16:	0f 94 c0             	sete   al
c0019c19:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c1d:	c3                   	ret    
c0019c1e:	31 c0                	xor    eax,eax
c0019c20:	c3                   	ret    
c0019c21:	90                   	nop

c0019c22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c26:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c29:	0f ba e2 0f          	bt     edx,0xf
c0019c2d:	72 f7                	jb     c0019c26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019c2f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c32:	83 ca 10             	or     edx,0x10
c0019c35:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c38:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c3b:	83 ca 01             	or     edx,0x1
c0019c3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c41:	c3                   	ret    

c0019c42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c46:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c49:	83 e2 fe             	and    edx,0xfffffffe
c0019c4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c4f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c52:	83 e2 ef             	and    edx,0xffffffef
c0019c55:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c5b:	0f ba e2 0e          	bt     edx,0xe
c0019c5f:	72 f7                	jb     c0019c58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c61:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c64:	0f ba e2 0f          	bt     edx,0xf
c0019c68:	72 ee                	jb     c0019c58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c6a:	c3                   	ret    
c0019c6b:	90                   	nop

c0019c6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c6c:	55                   	push   ebp
c0019c6d:	57                   	push   edi
c0019c6e:	56                   	push   esi
c0019c6f:	53                   	push   ebx
c0019c70:	83 ec 1c             	sub    esp,0x1c
c0019c73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c7b:	53                   	push   ebx
c0019c7c:	56                   	push   esi
c0019c7d:	e8 c0 ff ff ff       	call   c0019c42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c82:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c86:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c8c:	83 ec 0c             	sub    esp,0xc
c0019c8f:	c1 e5 0a             	shl    ebp,0xa
c0019c92:	01 e8                	add    eax,ebp
c0019c94:	89 03                	mov    DWORD PTR [ebx],eax
c0019c96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c98:	68 00 04 00 00       	push   0x400
c0019c9d:	6a 00                	push   0x0
c0019c9f:	50                   	push   eax
c0019ca0:	e8 2b 68 fe ff       	call   c00004d0 <memset>
c0019ca5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019cab:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019caf:	01 e8                	add    eax,ebp
c0019cb1:	83 c4 1c             	add    esp,0x1c
c0019cb4:	89 03                	mov    DWORD PTR [ebx],eax
c0019cb6:	c1 e2 08             	shl    edx,0x8
c0019cb9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019cc0:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019cc6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019ccc:	01 f8                	add    eax,edi
c0019cce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019cd1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019cd4:	68 00 01 00 00       	push   0x100
c0019cd9:	6a 00                	push   0x0
c0019cdb:	50                   	push   eax
c0019cdc:	e8 ef 67 fe ff       	call   c00004d0 <memset>
c0019ce1:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019ce7:	01 fa                	add    edx,edi
c0019ce9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ced:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019cf0:	c1 e7 0d             	shl    edi,0xd
c0019cf3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019cfa:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d00:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d0a:	31 ff                	xor    edi,edi
c0019d0c:	83 c4 10             	add    esp,0x10
c0019d0f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d19:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d1f:	83 c5 20             	add    ebp,0x20
c0019d22:	01 f8                	add    eax,edi
c0019d24:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d27:	52                   	push   edx
c0019d28:	68 00 01 00 00       	push   0x100
c0019d2d:	6a 00                	push   0x0
c0019d2f:	50                   	push   eax
c0019d30:	e8 9b 67 fe ff       	call   c00004d0 <memset>
c0019d35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d39:	83 c4 10             	add    esp,0x10
c0019d3c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019d42:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019d49:	01 f8                	add    eax,edi
c0019d4b:	81 c7 00 01 00 00    	add    edi,0x100
c0019d51:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d54:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d5a:	75 b3                	jne    c0019d0f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d5c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d63:	50                   	push   eax
c0019d64:	50                   	push   eax
c0019d65:	53                   	push   ebx
c0019d66:	56                   	push   esi
c0019d67:	e8 b6 fe ff ff       	call   c0019c22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d6c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d73:	83 c4 2c             	add    esp,0x2c
c0019d76:	5b                   	pop    ebx
c0019d77:	5e                   	pop    esi
c0019d78:	5f                   	pop    edi
c0019d79:	5d                   	pop    ebp
c0019d7a:	c3                   	ret    
c0019d7b:	90                   	nop

c0019d7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d7c:	55                   	push   ebp
c0019d7d:	57                   	push   edi
c0019d7e:	56                   	push   esi
c0019d7f:	53                   	push   ebx
c0019d80:	31 db                	xor    ebx,ebx
c0019d82:	83 ec 0c             	sub    esp,0xc
c0019d85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d89:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d8d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d90:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d96:	74 7a                	je     c0019e12 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d98:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d9c:	89 d8                	mov    eax,ebx
c0019d9e:	c1 e0 07             	shl    eax,0x7
c0019da1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019da8:	55                   	push   ebp
c0019da9:	56                   	push   esi
c0019daa:	e8 2b fe ff ff       	call   c0019bda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019daf:	5a                   	pop    edx
c0019db0:	83 f8 01             	cmp    eax,0x1
c0019db3:	59                   	pop    ecx
c0019db4:	75 21                	jne    c0019dd7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019db6:	50                   	push   eax
c0019db7:	53                   	push   ebx
c0019db8:	55                   	push   ebp
c0019db9:	56                   	push   esi
c0019dba:	e8 ad fe ff ff       	call   c0019c6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019dbf:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019dc6:	e8 ee d9 fe ff       	call   c00077b9 <malloc>
c0019dcb:	89 c5                	mov    ebp,eax
c0019dcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd0:	e8 43 0d 00 00       	call   c001ab18 <SATA::SATA()>
c0019dd5:	eb 24                	jmp    c0019dfb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019dd7:	83 f8 04             	cmp    eax,0x4
c0019dda:	75 36                	jne    c0019e12 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ddc:	51                   	push   ecx
c0019ddd:	53                   	push   ebx
c0019dde:	55                   	push   ebp
c0019ddf:	56                   	push   esi
c0019de0:	e8 87 fe ff ff       	call   c0019c6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019de5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019dec:	e8 c8 d9 fe ff       	call   c00077b9 <malloc>
c0019df1:	89 c5                	mov    ebp,eax
c0019df3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019df6:	e8 79 10 00 00       	call   c001ae74 <SATAPI::SATAPI()>
c0019dfb:	58                   	pop    eax
c0019dfc:	5a                   	pop    edx
c0019dfd:	55                   	push   ebp
c0019dfe:	56                   	push   esi
c0019dff:	e8 b8 1b ff ff       	call   c000b9bc <Device::addChild(Device*)>
c0019e04:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e07:	56                   	push   esi
c0019e08:	6a 00                	push   0x0
c0019e0a:	53                   	push   ebx
c0019e0b:	55                   	push   ebp
c0019e0c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e0f:	83 c4 20             	add    esp,0x20
c0019e12:	d1 ef                	shr    edi,1
c0019e14:	43                   	inc    ebx
c0019e15:	83 fb 20             	cmp    ebx,0x20
c0019e18:	0f 85 72 ff ff ff    	jne    c0019d90 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e1e:	83 c4 0c             	add    esp,0xc
c0019e21:	5b                   	pop    ebx
c0019e22:	5e                   	pop    esi
c0019e23:	5f                   	pop    edi
c0019e24:	5d                   	pop    ebp
c0019e25:	c3                   	ret    

c0019e26 <SATABus::open(int, int, void*)>:
c0019e26:	83 ec 14             	sub    esp,0x14
c0019e29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e2d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019e33:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019e39:	52                   	push   edx
c0019e3a:	50                   	push   eax
c0019e3b:	e8 3c ff ff ff       	call   c0019d7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019e40:	31 c0                	xor    eax,eax
c0019e42:	83 c4 1c             	add    esp,0x1c
c0019e45:	c3                   	ret    

c0019e46 <ATA::close(int, int, void*)>:
c0019e46:	83 ec 0c             	sub    esp,0xc
c0019e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e4d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e53:	85 c0                	test   eax,eax
c0019e55:	74 0c                	je     c0019e63 <ATA::close(int, int, void*)+0x1d>
c0019e57:	83 ec 0c             	sub    esp,0xc
c0019e5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e5c:	50                   	push   eax
c0019e5d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	31 c0                	xor    eax,eax
c0019e65:	83 c4 0c             	add    esp,0xc
c0019e68:	c3                   	ret    
c0019e69:	90                   	nop

c0019e6a <ATA::powerSaving(PowerSavingLevel)>:
c0019e6a:	c3                   	ret    
c0019e6b:	90                   	nop

c0019e6c <ATA::ATA()>:
c0019e6c:	83 ec 0c             	sub    esp,0xc
c0019e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e73:	83 ec 04             	sub    esp,0x4
c0019e76:	68 00 02 00 00       	push   0x200
c0019e7b:	68 1d f5 01 c0       	push   0xc001f51d
c0019e80:	50                   	push   eax
c0019e81:	e8 04 1f ff ff       	call   c000bd8a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e86:	83 c4 10             	add    esp,0x10
c0019e89:	ba 90 f4 01 c0       	mov    edx,0xc001f490
c0019e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e92:	89 10                	mov    DWORD PTR [eax],edx
c0019e94:	90                   	nop
c0019e95:	83 c4 0c             	add    esp,0xc
c0019e98:	c3                   	ret    
c0019e99:	90                   	nop

c0019e9a <ATA::flush(bool)>:
c0019e9a:	53                   	push   ebx
c0019e9b:	83 ec 08             	sub    esp,0x8
c0019e9e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019ea3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ea7:	19 c0                	sbb    eax,eax
c0019ea9:	83 e0 fd             	and    eax,0xfffffffd
c0019eac:	05 ea 00 00 00       	add    eax,0xea
c0019eb1:	50                   	push   eax
c0019eb2:	6a 07                	push   0x7
c0019eb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ebb:	50                   	push   eax
c0019ebc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ec2:	e8 59 f1 ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ec7:	83 c4 0c             	add    esp,0xc
c0019eca:	6a 00                	push   0x0
c0019ecc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ed3:	50                   	push   eax
c0019ed4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019eda:	e8 df fb ff ff       	call   c0019abe <IDE::polling(unsigned char, unsigned int)>
c0019edf:	83 c4 18             	add    esp,0x18
c0019ee2:	5b                   	pop    ebx
c0019ee3:	c3                   	ret    

c0019ee4 <ATA::readyForCommand()>:
c0019ee4:	56                   	push   esi
c0019ee5:	53                   	push   ebx
c0019ee6:	53                   	push   ebx
c0019ee7:	31 db                	xor    ebx,ebx
c0019ee9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019eed:	51                   	push   ecx
c0019eee:	6a 0c                	push   0xc
c0019ef0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019ef7:	50                   	push   eax
c0019ef8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019efe:	e8 dd f1 ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c0019f03:	83 c4 10             	add    esp,0x10
c0019f06:	a8 88                	test   al,0x88
c0019f08:	74 1f                	je     c0019f29 <ATA::readyForCommand()+0x45>
c0019f0a:	43                   	inc    ebx
c0019f0b:	83 fb 63             	cmp    ebx,0x63
c0019f0e:	7e dd                	jle    c0019eed <ATA::readyForCommand()+0x9>
c0019f10:	83 ec 0c             	sub    esp,0xc
c0019f13:	6a 0a                	push   0xa
c0019f15:	e8 da 9b ff ff       	call   c0013af4 <milliTenthSleep(unsigned int)>
c0019f1a:	83 c4 10             	add    esp,0x10
c0019f1d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f23:	75 c8                	jne    c0019eed <ATA::readyForCommand()+0x9>
c0019f25:	31 c0                	xor    eax,eax
c0019f27:	eb 02                	jmp    c0019f2b <ATA::readyForCommand()+0x47>
c0019f29:	b0 01                	mov    al,0x1
c0019f2b:	5a                   	pop    edx
c0019f2c:	5b                   	pop    ebx
c0019f2d:	5e                   	pop    esi
c0019f2e:	c3                   	ret    
c0019f2f:	90                   	nop

c0019f30 <ATA::access(unsigned long long, int, void*, bool)>:
c0019f30:	55                   	push   ebp
c0019f31:	57                   	push   edi
c0019f32:	56                   	push   esi
c0019f33:	53                   	push   ebx
c0019f34:	83 ec 2c             	sub    esp,0x2c
c0019f37:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019f3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019f3f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019f43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f47:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019f4b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019f4f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f53:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f5d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f67:	c1 e0 06             	shl    eax,0x6
c0019f6a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f72:	74 5d                	je     c0019fd1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f74:	89 fa                	mov    edx,edi
c0019f76:	89 f0                	mov    eax,esi
c0019f78:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f7c:	c1 ea 1c             	shr    edx,0x1c
c0019f7f:	89 d1                	mov    ecx,edx
c0019f81:	09 c1                	or     ecx,eax
c0019f83:	74 25                	je     c0019faa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f85:	31 ed                	xor    ebp,ebp
c0019f87:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f8e:	89 fa                	mov    edx,edi
c0019f90:	89 f0                	mov    eax,esi
c0019f92:	0f ad d0             	shrd   eax,edx,cl
c0019f95:	d3 ea                	shr    edx,cl
c0019f97:	f6 c1 20             	test   cl,0x20
c0019f9a:	74 02                	je     c0019f9e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f9c:	89 d0                	mov    eax,edx
c0019f9e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019fa2:	45                   	inc    ebp
c0019fa3:	83 fd 06             	cmp    ebp,0x6
c0019fa6:	75 df                	jne    c0019f87 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019fa8:	eb 76                	jmp    c001a020 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019faa:	89 f0                	mov    eax,esi
c0019fac:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019fb1:	89 fa                	mov    edx,edi
c0019fb3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fba:	0f ac d0 10          	shrd   eax,edx,0x10
c0019fbe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019fc3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019fc7:	c1 ee 18             	shr    esi,0x18
c0019fca:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019fcf:	eb 56                	jmp    c001a027 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fd1:	6a 00                	push   0x0
c0019fd3:	6a 3f                	push   0x3f
c0019fd5:	57                   	push   edi
c0019fd6:	56                   	push   esi
c0019fd7:	e8 74 22 00 00       	call   c001c250 <__umoddi3>
c0019fdc:	83 c4 10             	add    esp,0x10
c0019fdf:	40                   	inc    eax
c0019fe0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019fe4:	6a 00                	push   0x0
c0019fe6:	68 f0 03 00 00       	push   0x3f0
c0019feb:	57                   	push   edi
c0019fec:	56                   	push   esi
c0019fed:	e8 5e 21 00 00       	call   c001c150 <__udivdi3>
c0019ff2:	83 c4 10             	add    esp,0x10
c0019ff5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019ffa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a001:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a006:	6a 00                	push   0x0
c001a008:	6a 3f                	push   0x3f
c001a00a:	57                   	push   edi
c001a00b:	56                   	push   esi
c001a00c:	e8 3f 21 00 00       	call   c001c150 <__udivdi3>
c001a011:	83 c4 10             	add    esp,0x10
c001a014:	89 c6                	mov    esi,eax
c001a016:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a01b:	83 e6 0f             	and    esi,0xf
c001a01e:	eb 07                	jmp    c001a027 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a020:	31 f6                	xor    esi,esi
c001a022:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a027:	bf 01 00 00 00       	mov    edi,0x1
c001a02c:	50                   	push   eax
c001a02d:	6a 00                	push   0x0
c001a02f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a036:	50                   	push   eax
c001a037:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a03b:	e8 ee f1 ff ff       	call   c001922e <IDE::enableIRQs(unsigned char, bool)>
c001a040:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a043:	e8 9c fe ff ff       	call   c0019ee4 <ATA::readyForCommand()>
c001a048:	83 c4 10             	add    esp,0x10
c001a04b:	84 c0                	test   al,al
c001a04d:	0f 84 4e 02 00 00    	je     c001a2a1 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a053:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a059:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a05f:	c1 e0 04             	shl    eax,0x4
c001a062:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a069:	09 c6                	or     esi,eax
c001a06b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a070:	75 05                	jne    c001a077 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a072:	83 ce a0             	or     esi,0xffffffa0
c001a075:	eb 03                	jmp    c001a07a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a077:	83 ce e0             	or     esi,0xffffffe0
c001a07a:	89 f0                	mov    eax,esi
c001a07c:	0f b6 f0             	movzx  esi,al
c001a07f:	56                   	push   esi
c001a080:	6a 06                	push   0x6
c001a082:	51                   	push   ecx
c001a083:	52                   	push   edx
c001a084:	e8 97 ef ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a089:	83 c4 10             	add    esp,0x10
c001a08c:	6a 00                	push   0x0
c001a08e:	6a 01                	push   0x1
c001a090:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a097:	50                   	push   eax
c001a098:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a09e:	e8 7d ef ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0a3:	83 c4 10             	add    esp,0x10
c001a0a6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a0ab:	75 6e                	jne    c001a11b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a0ad:	6a 00                	push   0x0
c001a0af:	6a 08                	push   0x8
c001a0b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0b8:	50                   	push   eax
c001a0b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0bf:	e8 5c ef ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0c4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a0c9:	50                   	push   eax
c001a0ca:	6a 09                	push   0x9
c001a0cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0d3:	50                   	push   eax
c001a0d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0da:	e8 41 ef ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0df:	83 c4 20             	add    esp,0x20
c001a0e2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a0e7:	50                   	push   eax
c001a0e8:	6a 0a                	push   0xa
c001a0ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f1:	50                   	push   eax
c001a0f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0f8:	e8 23 ef ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0fd:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a102:	50                   	push   eax
c001a103:	6a 0b                	push   0xb
c001a105:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a10c:	50                   	push   eax
c001a10d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a113:	e8 08 ef ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a118:	83 c4 20             	add    esp,0x20
c001a11b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a120:	50                   	push   eax
c001a121:	6a 02                	push   0x2
c001a123:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a12a:	50                   	push   eax
c001a12b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a131:	e8 ea ee ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a136:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a13b:	50                   	push   eax
c001a13c:	6a 03                	push   0x3
c001a13e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a145:	50                   	push   eax
c001a146:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a14c:	e8 cf ee ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a151:	83 c4 20             	add    esp,0x20
c001a154:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a159:	50                   	push   eax
c001a15a:	6a 04                	push   0x4
c001a15c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a163:	50                   	push   eax
c001a164:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a16a:	e8 b1 ee ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a16f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a174:	50                   	push   eax
c001a175:	6a 05                	push   0x5
c001a177:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a17e:	50                   	push   eax
c001a17f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a185:	e8 96 ee ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a18a:	83 c4 20             	add    esp,0x20
c001a18d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a192:	0f 94 c0             	sete   al
c001a195:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a19a:	74 09                	je     c001a1a5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a19c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a1a3:	eb 07                	jmp    c001a1ac <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a1a5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a1ac:	0f b6 c0             	movzx  eax,al
c001a1af:	50                   	push   eax
c001a1b0:	6a 07                	push   0x7
c001a1b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1b9:	50                   	push   eax
c001a1ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c0:	e8 5b ee ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1c5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a1c9:	83 c4 10             	add    esp,0x10
c001a1cc:	85 f6                	test   esi,esi
c001a1ce:	0f 84 ae 00 00 00    	je     c001a282 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a1d4:	50                   	push   eax
c001a1d5:	6a 01                	push   0x1
c001a1d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1de:	50                   	push   eax
c001a1df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e5:	e8 d4 f8 ff ff       	call   c0019abe <IDE::polling(unsigned char, unsigned int)>
c001a1ea:	83 c4 10             	add    esp,0x10
c001a1ed:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a1f3:	84 c0                	test   al,al
c001a1f5:	74 20                	je     c001a217 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a1f7:	0f b6 f8             	movzx  edi,al
c001a1fa:	0f b6 d2             	movzx  edx,dl
c001a1fd:	57                   	push   edi
c001a1fe:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a205:	50                   	push   eax
c001a206:	52                   	push   edx
c001a207:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a20d:	e8 fc f7 ff ff       	call   c0019a0e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a212:	e9 87 00 00 00       	jmp    c001a29e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a217:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a21c:	74 33                	je     c001a251 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a21e:	31 ed                	xor    ebp,ebp
c001a220:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a224:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a228:	50                   	push   eax
c001a229:	50                   	push   eax
c001a22a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a231:	50                   	push   eax
c001a232:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a238:	e8 d1 ed ff ff       	call   c001900e <IDE::getBase(unsigned char)>
c001a23d:	89 c2                	mov    edx,eax
c001a23f:	89 f8                	mov    eax,edi
c001a241:	66 ef                	out    dx,ax
c001a243:	45                   	inc    ebp
c001a244:	83 c4 10             	add    esp,0x10
c001a247:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a24d:	75 d1                	jne    c001a220 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a24f:	eb 23                	jmp    c001a274 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a251:	0f b6 d2             	movzx  edx,dl
c001a254:	51                   	push   ecx
c001a255:	51                   	push   ecx
c001a256:	52                   	push   edx
c001a257:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a25d:	e8 ac ed ff ff       	call   c001900e <IDE::getBase(unsigned char)>
c001a262:	b9 00 01 00 00       	mov    ecx,0x100
c001a267:	89 c2                	mov    edx,eax
c001a269:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a26d:	fc                   	cld    
c001a26e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a271:	83 c4 10             	add    esp,0x10
c001a274:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a27c:	4e                   	dec    esi
c001a27d:	e9 4a ff ff ff       	jmp    c001a1cc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a282:	31 ff                	xor    edi,edi
c001a284:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a289:	74 16                	je     c001a2a1 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a28b:	50                   	push   eax
c001a28c:	50                   	push   eax
c001a28d:	31 c0                	xor    eax,eax
c001a28f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a294:	0f 94 c0             	sete   al
c001a297:	50                   	push   eax
c001a298:	53                   	push   ebx
c001a299:	e8 fc fb ff ff       	call   c0019e9a <ATA::flush(bool)>
c001a29e:	83 c4 10             	add    esp,0x10
c001a2a1:	83 c4 2c             	add    esp,0x2c
c001a2a4:	89 f8                	mov    eax,edi
c001a2a6:	5b                   	pop    ebx
c001a2a7:	5e                   	pop    esi
c001a2a8:	5f                   	pop    edi
c001a2a9:	5d                   	pop    ebp
c001a2aa:	c3                   	ret    
c001a2ab:	90                   	nop

c001a2ac <ATA::read(unsigned long long, int, void*)>:
c001a2ac:	57                   	push   edi
c001a2ad:	b8 04 00 00 00       	mov    eax,0x4
c001a2b2:	56                   	push   esi
c001a2b3:	53                   	push   ebx
c001a2b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2bc:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2c3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2c7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2cd:	77 25                	ja     c001a2f4 <ATA::read(unsigned long long, int, void*)+0x48>
c001a2cf:	b8 06 00 00 00       	mov    eax,0x6
c001a2d4:	85 f6                	test   esi,esi
c001a2d6:	74 1c                	je     c001a2f4 <ATA::read(unsigned long long, int, void*)+0x48>
c001a2d8:	50                   	push   eax
c001a2d9:	50                   	push   eax
c001a2da:	6a 00                	push   0x0
c001a2dc:	56                   	push   esi
c001a2dd:	52                   	push   edx
c001a2de:	53                   	push   ebx
c001a2df:	51                   	push   ecx
c001a2e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2e4:	e8 47 fc ff ff       	call   c0019f30 <ATA::access(unsigned long long, int, void*, bool)>
c001a2e9:	83 c4 20             	add    esp,0x20
c001a2ec:	85 c0                	test   eax,eax
c001a2ee:	0f 95 c0             	setne  al
c001a2f1:	0f b6 c0             	movzx  eax,al
c001a2f4:	5b                   	pop    ebx
c001a2f5:	5e                   	pop    esi
c001a2f6:	5f                   	pop    edi
c001a2f7:	c3                   	ret    

c001a2f8 <ATA::write(unsigned long long, int, void*)>:
c001a2f8:	57                   	push   edi
c001a2f9:	b8 04 00 00 00       	mov    eax,0x4
c001a2fe:	56                   	push   esi
c001a2ff:	53                   	push   ebx
c001a300:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a304:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a308:	8d 7a ff             	lea    edi,[edx-0x1]
c001a30b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a30f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a313:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a319:	77 25                	ja     c001a340 <ATA::write(unsigned long long, int, void*)+0x48>
c001a31b:	b8 06 00 00 00       	mov    eax,0x6
c001a320:	85 f6                	test   esi,esi
c001a322:	74 1c                	je     c001a340 <ATA::write(unsigned long long, int, void*)+0x48>
c001a324:	50                   	push   eax
c001a325:	50                   	push   eax
c001a326:	6a 01                	push   0x1
c001a328:	56                   	push   esi
c001a329:	52                   	push   edx
c001a32a:	53                   	push   ebx
c001a32b:	51                   	push   ecx
c001a32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a330:	e8 fb fb ff ff       	call   c0019f30 <ATA::access(unsigned long long, int, void*, bool)>
c001a335:	83 c4 20             	add    esp,0x20
c001a338:	85 c0                	test   eax,eax
c001a33a:	0f 95 c0             	setne  al
c001a33d:	0f b6 c0             	movzx  eax,al
c001a340:	5b                   	pop    ebx
c001a341:	5e                   	pop    esi
c001a342:	5f                   	pop    edi
c001a343:	c3                   	ret    

c001a344 <ATA::detectCHS()>:
c001a344:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a348:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a34e:	c1 e0 06             	shl    eax,0x6
c001a351:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a357:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a361:	c7 44 24 04 74 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f474
c001a369:	e9 91 5e ff ff       	jmp    c00101ff <KePanic(char const*)>

c001a36e <ATA::open(int, int, void*)>:
c001a36e:	53                   	push   ebx
c001a36f:	83 ec 08             	sub    esp,0x8
c001a372:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a376:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a37a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a37e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a384:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a38a:	c1 e0 06             	shl    eax,0x6
c001a38d:	01 d0                	add    eax,edx
c001a38f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a396:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a39c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a3a3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a3ad:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a3b3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a3ba:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a3c1:	75 0c                	jne    c001a3cf <ATA::open(int, int, void*)+0x61>
c001a3c3:	83 ec 0c             	sub    esp,0xc
c001a3c6:	53                   	push   ebx
c001a3c7:	e8 78 ff ff ff       	call   c001a344 <ATA::detectCHS()>
c001a3cc:	83 c4 10             	add    esp,0x10
c001a3cf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a3d5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a3db:	c1 e0 06             	shl    eax,0x6
c001a3de:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a3e5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a3ef:	d1 e8                	shr    eax,1
c001a3f1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3f7:	6a 04                	push   0x4
c001a3f9:	6a 0c                	push   0xc
c001a3fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a402:	50                   	push   eax
c001a403:	52                   	push   edx
c001a404:	e8 17 ec ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a409:	90                   	nop
c001a40a:	90                   	nop
c001a40b:	6a 00                	push   0x0
c001a40d:	6a 0c                	push   0xc
c001a40f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a416:	50                   	push   eax
c001a417:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a41d:	e8 fe eb ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a422:	83 c4 14             	add    esp,0x14
c001a425:	53                   	push   ebx
c001a426:	e8 c7 19 ff ff       	call   c000bdf2 <PhysicalDisk::startCache()>
c001a42b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a42e:	e8 77 2a ff ff       	call   c000ceaa <createPartitionsForDisk(PhysicalDisk*)>
c001a433:	31 c0                	xor    eax,eax
c001a435:	83 c4 18             	add    esp,0x18
c001a438:	5b                   	pop    ebx
c001a439:	c3                   	ret    

c001a43a <ATAPI::write(unsigned long long, int, void*)>:
c001a43a:	b8 03 00 00 00       	mov    eax,0x3
c001a43f:	c3                   	ret    

c001a440 <ATAPI::close(int, int, void*)>:
c001a440:	83 ec 0c             	sub    esp,0xc
c001a443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a447:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a44d:	85 c0                	test   eax,eax
c001a44f:	74 0c                	je     c001a45d <ATAPI::close(int, int, void*)+0x1d>
c001a451:	83 ec 0c             	sub    esp,0xc
c001a454:	8b 10                	mov    edx,DWORD PTR [eax]
c001a456:	50                   	push   eax
c001a457:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a45a:	83 c4 10             	add    esp,0x10
c001a45d:	31 c0                	xor    eax,eax
c001a45f:	83 c4 0c             	add    esp,0xc
c001a462:	c3                   	ret    
c001a463:	90                   	nop

c001a464 <ATAPI::ATAPI()>:
c001a464:	83 ec 0c             	sub    esp,0xc
c001a467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a46b:	83 ec 04             	sub    esp,0x4
c001a46e:	68 00 08 00 00       	push   0x800
c001a473:	68 bd f5 01 c0       	push   0xc001f5bd
c001a478:	50                   	push   eax
c001a479:	e8 0c 19 ff ff       	call   c000bd8a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a47e:	83 c4 10             	add    esp,0x10
c001a481:	ba d8 f4 01 c0       	mov    edx,0xc001f4d8
c001a486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a48a:	89 10                	mov    DWORD PTR [eax],edx
c001a48c:	90                   	nop
c001a48d:	83 c4 0c             	add    esp,0xc
c001a490:	c3                   	ret    
c001a491:	90                   	nop

c001a492 <ATAPI::readyForCommand()>:
c001a492:	56                   	push   esi
c001a493:	53                   	push   ebx
c001a494:	53                   	push   ebx
c001a495:	31 db                	xor    ebx,ebx
c001a497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a49b:	51                   	push   ecx
c001a49c:	6a 0c                	push   0xc
c001a49e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a4a5:	50                   	push   eax
c001a4a6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a4ac:	e8 2f ec ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c001a4b1:	83 c4 10             	add    esp,0x10
c001a4b4:	a8 88                	test   al,0x88
c001a4b6:	74 25                	je     c001a4dd <ATAPI::readyForCommand()+0x4b>
c001a4b8:	43                   	inc    ebx
c001a4b9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a4bf:	7e da                	jle    c001a49b <ATAPI::readyForCommand()+0x9>
c001a4c1:	83 ec 0c             	sub    esp,0xc
c001a4c4:	68 5e 01 00 00       	push   0x15e
c001a4c9:	e8 26 96 ff ff       	call   c0013af4 <milliTenthSleep(unsigned int)>
c001a4ce:	83 c4 10             	add    esp,0x10
c001a4d1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a4d7:	75 c2                	jne    c001a49b <ATAPI::readyForCommand()+0x9>
c001a4d9:	31 c0                	xor    eax,eax
c001a4db:	eb 02                	jmp    c001a4df <ATAPI::readyForCommand()+0x4d>
c001a4dd:	b0 01                	mov    al,0x1
c001a4df:	5a                   	pop    edx
c001a4e0:	5b                   	pop    ebx
c001a4e1:	5e                   	pop    esi
c001a4e2:	c3                   	ret    
c001a4e3:	90                   	nop

c001a4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a4e4:	55                   	push   ebp
c001a4e5:	57                   	push   edi
c001a4e6:	56                   	push   esi
c001a4e7:	53                   	push   ebx
c001a4e8:	83 ec 20             	sub    esp,0x20
c001a4eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a4ef:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a4f3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a4f7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a4fb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a4ff:	6a 01                	push   0x1
c001a501:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a508:	50                   	push   eax
c001a509:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a50f:	e8 1a ed ff ff       	call   c001922e <IDE::enableIRQs(unsigned char, bool)>
c001a514:	5e                   	pop    esi
c001a515:	58                   	pop    eax
c001a516:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a51d:	50                   	push   eax
c001a51e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a524:	e8 d1 ea ff ff       	call   c0018ffa <IDE::prepareInterrupt(unsigned char)>
c001a529:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a52c:	e8 61 ff ff ff       	call   c001a492 <ATAPI::readyForCommand()>
c001a531:	83 c4 10             	add    esp,0x10
c001a534:	84 c0                	test   al,al
c001a536:	75 0a                	jne    c001a542 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a538:	bb 01 00 00 00       	mov    ebx,0x1
c001a53d:	e9 57 02 00 00       	jmp    c001a799 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a542:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a548:	c1 e0 04             	shl    eax,0x4
c001a54b:	0f b6 c0             	movzx  eax,al
c001a54e:	50                   	push   eax
c001a54f:	6a 06                	push   0x6
c001a551:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a558:	50                   	push   eax
c001a559:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a55f:	e8 bc ea ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a564:	6a 00                	push   0x0
c001a566:	6a 01                	push   0x1
c001a568:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a56f:	50                   	push   eax
c001a570:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a576:	e8 a5 ea ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a57b:	83 c4 20             	add    esp,0x20
c001a57e:	0f b6 c3             	movzx  eax,bl
c001a581:	0f b6 df             	movzx  ebx,bh
c001a584:	50                   	push   eax
c001a585:	6a 04                	push   0x4
c001a587:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a58e:	50                   	push   eax
c001a58f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a595:	e8 86 ea ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a59a:	53                   	push   ebx
c001a59b:	6a 05                	push   0x5
c001a59d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5a4:	50                   	push   eax
c001a5a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5ab:	e8 70 ea ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5b0:	83 c4 20             	add    esp,0x20
c001a5b3:	68 a0 00 00 00       	push   0xa0
c001a5b8:	6a 07                	push   0x7
c001a5ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5c1:	50                   	push   eax
c001a5c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5c8:	e8 53 ea ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5cd:	83 c4 0c             	add    esp,0xc
c001a5d0:	6a 01                	push   0x1
c001a5d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5d9:	50                   	push   eax
c001a5da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5e0:	e8 d9 f4 ff ff       	call   c0019abe <IDE::polling(unsigned char, unsigned int)>
c001a5e5:	83 c4 10             	add    esp,0x10
c001a5e8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a5ee:	84 c0                	test   al,al
c001a5f0:	74 23                	je     c001a615 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a5f2:	0f b6 d8             	movzx  ebx,al
c001a5f5:	0f b6 d2             	movzx  edx,dl
c001a5f8:	53                   	push   ebx
c001a5f9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a600:	50                   	push   eax
c001a601:	52                   	push   edx
c001a602:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a608:	e8 01 f4 ff ff       	call   c0019a0e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a60d:	83 c4 10             	add    esp,0x10
c001a610:	e9 84 01 00 00       	jmp    c001a799 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a615:	0f b6 d2             	movzx  edx,dl
c001a618:	53                   	push   ebx
c001a619:	53                   	push   ebx
c001a61a:	52                   	push   edx
c001a61b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a621:	e8 e8 e9 ff ff       	call   c001900e <IDE::getBase(unsigned char)>
c001a626:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a62a:	b9 06 00 00 00       	mov    ecx,0x6
c001a62f:	89 c2                	mov    edx,eax
c001a631:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a634:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a638:	83 c4 10             	add    esp,0x10
c001a63b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a641:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a648:	85 db                	test   ebx,ebx
c001a64a:	0f 84 ec 00 00 00    	je     c001a73c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a650:	51                   	push   ecx
c001a651:	51                   	push   ecx
c001a652:	52                   	push   edx
c001a653:	50                   	push   eax
c001a654:	e8 35 eb ff ff       	call   c001918e <IDE::waitInterrupt(unsigned char)>
c001a659:	83 c4 10             	add    esp,0x10
c001a65c:	84 c0                	test   al,al
c001a65e:	0f 84 d4 fe ff ff    	je     c001a538 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a664:	56                   	push   esi
c001a665:	56                   	push   esi
c001a666:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a66d:	50                   	push   eax
c001a66e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a674:	e8 81 e9 ff ff       	call   c0018ffa <IDE::prepareInterrupt(unsigned char)>
c001a679:	83 c4 0c             	add    esp,0xc
c001a67c:	6a 04                	push   0x4
c001a67e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a685:	50                   	push   eax
c001a686:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a68c:	e8 4f ea ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c001a691:	83 c4 0c             	add    esp,0xc
c001a694:	89 c6                	mov    esi,eax
c001a696:	6a 05                	push   0x5
c001a698:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a69f:	50                   	push   eax
c001a6a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6a6:	e8 35 ea ff ff       	call   c00190e0 <IDE::read(unsigned char, unsigned char)>
c001a6ab:	89 f1                	mov    ecx,esi
c001a6ad:	0f b6 c0             	movzx  eax,al
c001a6b0:	0f b6 f1             	movzx  esi,cl
c001a6b3:	c1 e0 08             	shl    eax,0x8
c001a6b6:	09 c6                	or     esi,eax
c001a6b8:	d1 fe                	sar    esi,1
c001a6ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a6be:	83 c4 10             	add    esp,0x10
c001a6c1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a6c6:	74 41                	je     c001a709 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a6c8:	31 c9                	xor    ecx,ecx
c001a6ca:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6d0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6d7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a6db:	75 0a                	jne    c001a6e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a6dd:	01 c9                	add    ecx,ecx
c001a6df:	01 cd                	add    ebp,ecx
c001a6e1:	4b                   	dec    ebx
c001a6e2:	e9 54 ff ff ff       	jmp    c001a63b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a6e7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a6ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a6f0:	51                   	push   ecx
c001a6f1:	51                   	push   ecx
c001a6f2:	52                   	push   edx
c001a6f3:	50                   	push   eax
c001a6f4:	e8 15 e9 ff ff       	call   c001900e <IDE::getBase(unsigned char)>
c001a6f9:	89 c2                	mov    edx,eax
c001a6fb:	89 f0                	mov    eax,esi
c001a6fd:	66 ef                	out    dx,ax
c001a6ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a703:	83 c4 10             	add    esp,0x10
c001a706:	41                   	inc    ecx
c001a707:	eb c1                	jmp    c001a6ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a709:	31 f6                	xor    esi,esi
c001a70b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a711:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a718:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a71c:	75 06                	jne    c001a724 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a71e:	01 f6                	add    esi,esi
c001a720:	01 f5                	add    ebp,esi
c001a722:	eb bd                	jmp    c001a6e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a724:	51                   	push   ecx
c001a725:	51                   	push   ecx
c001a726:	52                   	push   edx
c001a727:	50                   	push   eax
c001a728:	e8 e1 e8 ff ff       	call   c001900e <IDE::getBase(unsigned char)>
c001a72d:	89 c2                	mov    edx,eax
c001a72f:	66 ed                	in     ax,dx
c001a731:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	46                   	inc    esi
c001a73a:	eb cf                	jmp    c001a70b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a73c:	51                   	push   ecx
c001a73d:	51                   	push   ecx
c001a73e:	52                   	push   edx
c001a73f:	50                   	push   eax
c001a740:	e8 49 ea ff ff       	call   c001918e <IDE::waitInterrupt(unsigned char)>
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	84 c0                	test   al,al
c001a74a:	0f 84 e8 fd ff ff    	je     c001a538 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a750:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a755:	52                   	push   edx
c001a756:	52                   	push   edx
c001a757:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a75e:	50                   	push   eax
c001a75f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a765:	e8 90 e8 ff ff       	call   c0018ffa <IDE::prepareInterrupt(unsigned char)>
c001a76a:	83 c4 10             	add    esp,0x10
c001a76d:	50                   	push   eax
c001a76e:	50                   	push   eax
c001a76f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a776:	50                   	push   eax
c001a777:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a77d:	e8 8c e8 ff ff       	call   c001900e <IDE::getBase(unsigned char)>
c001a782:	8d 50 07             	lea    edx,[eax+0x7]
c001a785:	ec                   	in     al,dx
c001a786:	83 c4 10             	add    esp,0x10
c001a789:	a8 88                	test   al,0x88
c001a78b:	74 0a                	je     c001a797 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a78d:	4b                   	dec    ebx
c001a78e:	75 dd                	jne    c001a76d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a790:	bb 02 00 00 00       	mov    ebx,0x2
c001a795:	eb 02                	jmp    c001a799 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a797:	31 db                	xor    ebx,ebx
c001a799:	83 c4 1c             	add    esp,0x1c
c001a79c:	89 d8                	mov    eax,ebx
c001a79e:	5b                   	pop    ebx
c001a79f:	5e                   	pop    esi
c001a7a0:	5f                   	pop    edi
c001a7a1:	5d                   	pop    ebp
c001a7a2:	c3                   	ret    
c001a7a3:	90                   	nop

c001a7a4 <ATAPI::diskRemoved()>:
c001a7a4:	53                   	push   ebx
c001a7a5:	83 ec 14             	sub    esp,0x14
c001a7a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a7ac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a7b3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a7b9:	e8 6c 24 ff ff       	call   c000cc2a <LogicalDisk::unmount()>
c001a7be:	58                   	pop    eax
c001a7bf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a7c5:	e8 a6 2d ff ff       	call   c000d570 <VCache::writeWriteBuffer()>
c001a7ca:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a7d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7d4:	83 c4 18             	add    esp,0x18
c001a7d7:	5b                   	pop    ebx
c001a7d8:	e9 83 2d ff ff       	jmp    c000d560 <VCache::invalidateReadBuffer()>
c001a7dd:	90                   	nop

c001a7de <ATAPI::eject()>:
c001a7de:	57                   	push   edi
c001a7df:	b9 03 00 00 00       	mov    ecx,0x3
c001a7e4:	53                   	push   ebx
c001a7e5:	83 ec 14             	sub    esp,0x14
c001a7e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a7f0:	fc                   	cld    
c001a7f1:	31 c0                	xor    eax,eax
c001a7f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7f5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a7fa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a7ff:	50                   	push   eax
c001a800:	50                   	push   eax
c001a801:	6a 00                	push   0x0
c001a803:	6a 00                	push   0x0
c001a805:	6a 00                	push   0x0
c001a807:	6a 02                	push   0x2
c001a809:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a80d:	50                   	push   eax
c001a80e:	53                   	push   ebx
c001a80f:	e8 d0 fc ff ff       	call   c001a4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a814:	83 c4 14             	add    esp,0x14
c001a817:	53                   	push   ebx
c001a818:	e8 87 ff ff ff       	call   c001a7a4 <ATAPI::diskRemoved()>
c001a81d:	83 c4 24             	add    esp,0x24
c001a820:	31 c0                	xor    eax,eax
c001a822:	5b                   	pop    ebx
c001a823:	5f                   	pop    edi
c001a824:	c3                   	ret    
c001a825:	90                   	nop

c001a826 <ATAPI::diskInserted()>:
c001a826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a82a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a831:	c3                   	ret    

c001a832 <ATAPI::detectMedia()>:
c001a832:	56                   	push   esi
c001a833:	53                   	push   ebx
c001a834:	83 ec 28             	sub    esp,0x28
c001a837:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a83b:	6a 0c                	push   0xc
c001a83d:	6a 00                	push   0x0
c001a83f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a843:	56                   	push   esi
c001a844:	e8 87 5c fe ff       	call   c00004d0 <memset>
c001a849:	58                   	pop    eax
c001a84a:	5a                   	pop    edx
c001a84b:	6a 00                	push   0x0
c001a84d:	6a 00                	push   0x0
c001a84f:	6a 00                	push   0x0
c001a851:	6a 00                	push   0x0
c001a853:	56                   	push   esi
c001a854:	53                   	push   ebx
c001a855:	e8 8a fc ff ff       	call   c001a4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a85a:	83 c4 1c             	add    esp,0x1c
c001a85d:	6a 0c                	push   0xc
c001a85f:	6a 00                	push   0x0
c001a861:	56                   	push   esi
c001a862:	e8 69 5c fe ff       	call   c00004d0 <memset>
c001a867:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a86c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a871:	59                   	pop    ecx
c001a872:	58                   	pop    eax
c001a873:	6a 01                	push   0x1
c001a875:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a879:	50                   	push   eax
c001a87a:	6a 00                	push   0x0
c001a87c:	6a 12                	push   0x12
c001a87e:	56                   	push   esi
c001a87f:	53                   	push   ebx
c001a880:	e8 5f fc ff ff       	call   c001a4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a885:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a889:	83 c4 20             	add    esp,0x20
c001a88c:	83 e0 7f             	and    eax,0x7f
c001a88f:	3c 70                	cmp    al,0x70
c001a891:	74 15                	je     c001a8a8 <ATAPI::detectMedia()+0x76>
c001a893:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a89a:	75 0c                	jne    c001a8a8 <ATAPI::detectMedia()+0x76>
c001a89c:	83 ec 0c             	sub    esp,0xc
c001a89f:	53                   	push   ebx
c001a8a0:	e8 81 ff ff ff       	call   c001a826 <ATAPI::diskInserted()>
c001a8a5:	83 c4 10             	add    esp,0x10
c001a8a8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a8ac:	83 e0 0f             	and    eax,0xf
c001a8af:	3c 02                	cmp    al,0x2
c001a8b1:	75 1b                	jne    c001a8ce <ATAPI::detectMedia()+0x9c>
c001a8b3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a8b8:	75 2d                	jne    c001a8e7 <ATAPI::detectMedia()+0xb5>
c001a8ba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8c1:	74 24                	je     c001a8e7 <ATAPI::detectMedia()+0xb5>
c001a8c3:	83 ec 0c             	sub    esp,0xc
c001a8c6:	53                   	push   ebx
c001a8c7:	e8 d8 fe ff ff       	call   c001a7a4 <ATAPI::diskRemoved()>
c001a8cc:	eb 16                	jmp    c001a8e4 <ATAPI::detectMedia()+0xb2>
c001a8ce:	84 c0                	test   al,al
c001a8d0:	75 15                	jne    c001a8e7 <ATAPI::detectMedia()+0xb5>
c001a8d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8d9:	75 0c                	jne    c001a8e7 <ATAPI::detectMedia()+0xb5>
c001a8db:	83 ec 0c             	sub    esp,0xc
c001a8de:	53                   	push   ebx
c001a8df:	e8 42 ff ff ff       	call   c001a826 <ATAPI::diskInserted()>
c001a8e4:	83 c4 10             	add    esp,0x10
c001a8e7:	83 c4 24             	add    esp,0x24
c001a8ea:	5b                   	pop    ebx
c001a8eb:	5e                   	pop    esi
c001a8ec:	c3                   	ret    
c001a8ed:	90                   	nop

c001a8ee <ATAPI::open(int, int, void*)>:
c001a8ee:	56                   	push   esi
c001a8ef:	53                   	push   ebx
c001a8f0:	50                   	push   eax
c001a8f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8fd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a903:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a909:	c1 e0 06             	shl    eax,0x6
c001a90c:	01 d0                	add    eax,edx
c001a90e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a915:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a91b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a922:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a92c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a932:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a939:	6a 04                	push   0x4
c001a93b:	6a 0c                	push   0xc
c001a93d:	51                   	push   ecx
c001a93e:	52                   	push   edx
c001a93f:	e8 dc e6 ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a944:	90                   	nop
c001a945:	90                   	nop
c001a946:	6a 00                	push   0x0
c001a948:	6a 0c                	push   0xc
c001a94a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a951:	50                   	push   eax
c001a952:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a958:	e8 c3 e6 ff ff       	call   c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a95d:	83 c4 14             	add    esp,0x14
c001a960:	68 74 01 00 00       	push   0x174
c001a965:	e8 4f ce fe ff       	call   c00077b9 <malloc>
c001a96a:	83 c4 0c             	add    esp,0xc
c001a96d:	89 c6                	mov    esi,eax
c001a96f:	6a 00                	push   0x0
c001a971:	68 ff ff ff 7f       	push   0x7fffffff
c001a976:	6a 00                	push   0x0
c001a978:	6a 00                	push   0x0
c001a97a:	53                   	push   ebx
c001a97b:	68 74 f6 01 c0       	push   0xc001f674
c001a980:	50                   	push   eax
c001a981:	e8 f0 20 ff ff       	call   c000ca76 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a986:	83 c4 14             	add    esp,0x14
c001a989:	56                   	push   esi
c001a98a:	e8 9d 21 ff ff       	call   c000cb2c <LogicalDisk::assignDriveLetter()>
c001a98f:	5a                   	pop    edx
c001a990:	0f be c0             	movsx  eax,al
c001a993:	59                   	pop    ecx
c001a994:	50                   	push   eax
c001a995:	68 c0 f4 01 c0       	push   0xc001f4c0
c001a99a:	e8 de fb fe ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001a99f:	58                   	pop    eax
c001a9a0:	5a                   	pop    edx
c001a9a1:	56                   	push   esi
c001a9a2:	53                   	push   ebx
c001a9a3:	e8 14 10 ff ff       	call   c000b9bc <Device::addChild(Device*)>
c001a9a8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a9ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9b1:	e8 3c 14 ff ff       	call   c000bdf2 <PhysicalDisk::startCache()>
c001a9b6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a9bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9c0:	e8 6d fe ff ff       	call   c001a832 <ATAPI::detectMedia()>
c001a9c5:	83 c4 14             	add    esp,0x14
c001a9c8:	31 c0                	xor    eax,eax
c001a9ca:	5b                   	pop    ebx
c001a9cb:	5e                   	pop    esi
c001a9cc:	c3                   	ret    
c001a9cd:	90                   	nop

c001a9ce <ATAPI::read(unsigned long long, int, void*)>:
c001a9ce:	55                   	push   ebp
c001a9cf:	57                   	push   edi
c001a9d0:	56                   	push   esi
c001a9d1:	53                   	push   ebx
c001a9d2:	83 ec 1c             	sub    esp,0x1c
c001a9d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a9d9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a9dd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a9e1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9e8:	74 3c                	je     c001aa26 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a9ea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a9ee:	b9 03 00 00 00       	mov    ecx,0x3
c001a9f3:	fc                   	cld    
c001a9f4:	31 c0                	xor    eax,eax
c001a9f6:	0f ce                	bswap  esi
c001a9f8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a9fa:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a9ff:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa03:	89 e8                	mov    eax,ebp
c001aa05:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa09:	50                   	push   eax
c001aa0a:	50                   	push   eax
c001aa0b:	55                   	push   ebp
c001aa0c:	c1 e5 0b             	shl    ebp,0xb
c001aa0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa13:	6a 00                	push   0x0
c001aa15:	55                   	push   ebp
c001aa16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa1a:	50                   	push   eax
c001aa1b:	53                   	push   ebx
c001aa1c:	e8 c3 fa ff ff       	call   c001a4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa21:	83 c4 20             	add    esp,0x20
c001aa24:	eb 1a                	jmp    c001aa40 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aa26:	83 ec 0c             	sub    esp,0xc
c001aa29:	53                   	push   ebx
c001aa2a:	e8 03 fe ff ff       	call   c001a832 <ATAPI::detectMedia()>
c001aa2f:	83 c4 10             	add    esp,0x10
c001aa32:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa39:	75 af                	jne    c001a9ea <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aa3b:	b8 02 00 00 00       	mov    eax,0x2
c001aa40:	83 c4 1c             	add    esp,0x1c
c001aa43:	5b                   	pop    ebx
c001aa44:	5e                   	pop    esi
c001aa45:	5f                   	pop    edi
c001aa46:	5d                   	pop    ebp
c001aa47:	c3                   	ret    

c001aa48 <SATA::close(int, int, void*)>:
c001aa48:	83 ec 0c             	sub    esp,0xc
c001aa4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa4f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa55:	85 c0                	test   eax,eax
c001aa57:	74 0c                	je     c001aa65 <SATA::close(int, int, void*)+0x1d>
c001aa59:	83 ec 0c             	sub    esp,0xc
c001aa5c:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa5e:	50                   	push   eax
c001aa5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa62:	83 c4 10             	add    esp,0x10
c001aa65:	31 c0                	xor    eax,eax
c001aa67:	83 c4 0c             	add    esp,0xc
c001aa6a:	c3                   	ret    
c001aa6b:	90                   	nop

c001aa6c <SATA::powerSaving(PowerSavingLevel)>:
c001aa6c:	c3                   	ret    
c001aa6d:	90                   	nop

c001aa6e <SATA::open(int, int, void*)>:
c001aa6e:	56                   	push   esi
c001aa6f:	53                   	push   ebx
c001aa70:	50                   	push   eax
c001aa71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa79:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa83:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa89:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa97:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aaa1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aaa7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aaae:	e8 e2 cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aab3:	89 c6                	mov    esi,eax
c001aab5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aabb:	81 c6 00 10 00 00    	add    esi,0x1000
c001aac1:	e8 cf cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aac6:	39 c6                	cmp    esi,eax
c001aac8:	74 10                	je     c001aada <SATA::open(int, int, void*)+0x6c>
c001aaca:	83 ec 0c             	sub    esp,0xc
c001aacd:	68 08 f5 01 c0       	push   0xc001f508
c001aad2:	e8 28 57 ff ff       	call   c00101ff <KePanic(char const*)>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	83 ec 0c             	sub    esp,0xc
c001aadd:	6a 02                	push   0x2
c001aadf:	e8 a1 e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001aae4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aaea:	6a 03                	push   0x3
c001aaec:	50                   	push   eax
c001aaed:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aaf3:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001aaf9:	e8 6e ee fe ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c001aafe:	83 c4 14             	add    esp,0x14
c001ab01:	53                   	push   ebx
c001ab02:	e8 eb 12 ff ff       	call   c000bdf2 <PhysicalDisk::startCache()>
c001ab07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab0a:	e8 9b 23 ff ff       	call   c000ceaa <createPartitionsForDisk(PhysicalDisk*)>
c001ab0f:	83 c4 14             	add    esp,0x14
c001ab12:	31 c0                	xor    eax,eax
c001ab14:	5b                   	pop    ebx
c001ab15:	5e                   	pop    esi
c001ab16:	c3                   	ret    
c001ab17:	90                   	nop

c001ab18 <SATA::SATA()>:
c001ab18:	83 ec 0c             	sub    esp,0xc
c001ab1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab1f:	83 ec 04             	sub    esp,0x4
c001ab22:	68 00 02 00 00       	push   0x200
c001ab27:	68 1c f5 01 c0       	push   0xc001f51c
c001ab2c:	50                   	push   eax
c001ab2d:	e8 58 12 ff ff       	call   c000bd8a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ab32:	83 c4 10             	add    esp,0x10
c001ab35:	ba 8c f5 01 c0       	mov    edx,0xc001f58c
c001ab3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab3e:	89 10                	mov    DWORD PTR [eax],edx
c001ab40:	90                   	nop
c001ab41:	83 c4 0c             	add    esp,0xc
c001ab44:	c3                   	ret    
c001ab45:	90                   	nop

c001ab46 <SATA::access(unsigned long long, int, void*, bool)>:
c001ab46:	55                   	push   ebp
c001ab47:	57                   	push   edi
c001ab48:	56                   	push   esi
c001ab49:	53                   	push   ebx
c001ab4a:	83 ec 2c             	sub    esp,0x2c
c001ab4d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab59:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab5d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab61:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab6a:	7e 10                	jle    c001ab7c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab6c:	83 ec 0c             	sub    esp,0xc
c001ab6f:	68 2c f5 01 c0       	push   0xc001f52c
c001ab74:	e8 86 56 ff ff       	call   c00101ff <KePanic(char const*)>
c001ab79:	83 c4 10             	add    esp,0x10
c001ab7c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab82:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab92:	89 d0                	mov    eax,edx
c001ab94:	c1 e0 07             	shl    eax,0x7
c001ab97:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab9b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aba5:	51                   	push   ecx
c001aba6:	8d 42 02             	lea    eax,[edx+0x2]
c001aba9:	51                   	push   ecx
c001abaa:	c1 e0 07             	shl    eax,0x7
c001abad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abb1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001abb5:	50                   	push   eax
c001abb6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001abbc:	e8 e7 ef ff ff       	call   c0019ba8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001abc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001abc5:	83 c4 10             	add    esp,0x10
c001abc8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001abcd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abd1:	0f 84 4f 01 00 00    	je     c001ad26 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001abd7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001abdb:	c1 e0 09             	shl    eax,0x9
c001abde:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001abe3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abe7:	74 0e                	je     c001abf7 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001abe9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001abef:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001abf3:	89 c1                	mov    ecx,eax
c001abf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abf7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abfb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac01:	8d 42 02             	lea    eax,[edx+0x2]
c001ac04:	c1 e0 07             	shl    eax,0x7
c001ac07:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac0d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac13:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac1d:	c1 e1 05             	shl    ecx,0x5
c001ac20:	01 c8                	add    eax,ecx
c001ac22:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac26:	83 e1 01             	and    ecx,0x1
c001ac29:	89 ce                	mov    esi,ecx
c001ac2b:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac2d:	c1 e6 06             	shl    esi,0x6
c001ac30:	83 e1 bf             	and    ecx,0xffffffbf
c001ac33:	09 f1                	or     ecx,esi
c001ac35:	88 08                	mov    BYTE PTR [eax],cl
c001ac37:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac39:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ac3f:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ac45:	89 08                	mov    DWORD PTR [eax],ecx
c001ac47:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac4d:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ac53:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac59:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac5c:	50                   	push   eax
c001ac5d:	68 90 00 00 00       	push   0x90
c001ac62:	6a 00                	push   0x0
c001ac64:	56                   	push   esi
c001ac65:	e8 66 58 fe ff       	call   c00004d0 <memset>
c001ac6a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac70:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac74:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac7a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac7e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac82:	83 c4 10             	add    esp,0x10
c001ac85:	48                   	dec    eax
c001ac86:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac8b:	89 c1                	mov    ecx,eax
c001ac8d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac93:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ac98:	09 c8                	or     eax,ecx
c001ac9a:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001aca0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001aca3:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001acaa:	66 25 00 7f          	and    ax,0x7f00
c001acae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001acb2:	66 0d 27 80          	or     ax,0x8027
c001acb6:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001acbb:	66 89 06             	mov    WORD PTR [esi],ax
c001acbe:	19 c0                	sbb    eax,eax
c001acc0:	83 e0 f0             	and    eax,0xfffffff0
c001acc3:	83 c0 35             	add    eax,0x35
c001acc6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001acc9:	89 e8                	mov    eax,ebp
c001accb:	c1 e8 10             	shr    eax,0x10
c001acce:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001acd1:	89 e8                	mov    eax,ebp
c001acd3:	c1 e8 18             	shr    eax,0x18
c001acd6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001acd9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001acdd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ace0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ace4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ace7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aceb:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001acef:	89 d6                	mov    esi,edx
c001acf1:	31 c0                	xor    eax,eax
c001acf3:	c1 e6 07             	shl    esi,0x7
c001acf6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001acfa:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad00:	80 e1 88             	and    cl,0x88
c001ad03:	74 0a                	je     c001ad0f <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad05:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad0a:	74 0a                	je     c001ad16 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad0c:	40                   	inc    eax
c001ad0d:	eb eb                	jmp    c001acfa <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad0f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad14:	75 17                	jne    c001ad2d <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad16:	83 ec 0c             	sub    esp,0xc
c001ad19:	68 65 f5 01 c0       	push   0xc001f565
c001ad1e:	e8 5a f8 fe ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001ad23:	83 c4 10             	add    esp,0x10
c001ad26:	b8 01 00 00 00       	mov    eax,0x1
c001ad2b:	eb 5d                	jmp    c001ad8a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad2d:	b8 01 00 00 00       	mov    eax,0x1
c001ad32:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ad36:	c1 e2 07             	shl    edx,0x7
c001ad39:	d3 e0                	shl    eax,cl
c001ad3b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ad3f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ad45:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ad4b:	85 c8                	test   eax,ecx
c001ad4d:	74 16                	je     c001ad65 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ad4f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad55:	0f ba e1 1e          	bt     ecx,0x1e
c001ad59:	73 ea                	jae    c001ad45 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad5b:	83 ec 0c             	sub    esp,0xc
c001ad5e:	68 73 f5 01 c0       	push   0xc001f573
c001ad63:	eb b9                	jmp    c001ad1e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad65:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad6b:	0f ba e0 1e          	bt     eax,0x1e
c001ad6f:	72 b5                	jb     c001ad26 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad71:	31 c0                	xor    eax,eax
c001ad73:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad78:	75 10                	jne    c001ad8a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad7a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad80:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad8a:	83 c4 2c             	add    esp,0x2c
c001ad8d:	5b                   	pop    ebx
c001ad8e:	5e                   	pop    esi
c001ad8f:	5f                   	pop    edi
c001ad90:	5d                   	pop    ebp
c001ad91:	c3                   	ret    

c001ad92 <SATA::read(unsigned long long, int, void*)>:
c001ad92:	57                   	push   edi
c001ad93:	b8 04 00 00 00       	mov    eax,0x4
c001ad98:	56                   	push   esi
c001ad99:	53                   	push   ebx
c001ad9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad9e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ada2:	8d 7a ff             	lea    edi,[edx-0x1]
c001ada5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ada9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001adad:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001adb3:	77 25                	ja     c001adda <SATA::read(unsigned long long, int, void*)+0x48>
c001adb5:	b8 06 00 00 00       	mov    eax,0x6
c001adba:	85 f6                	test   esi,esi
c001adbc:	74 1c                	je     c001adda <SATA::read(unsigned long long, int, void*)+0x48>
c001adbe:	50                   	push   eax
c001adbf:	50                   	push   eax
c001adc0:	6a 00                	push   0x0
c001adc2:	56                   	push   esi
c001adc3:	52                   	push   edx
c001adc4:	53                   	push   ebx
c001adc5:	51                   	push   ecx
c001adc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adca:	e8 77 fd ff ff       	call   c001ab46 <SATA::access(unsigned long long, int, void*, bool)>
c001adcf:	83 c4 20             	add    esp,0x20
c001add2:	85 c0                	test   eax,eax
c001add4:	0f 95 c0             	setne  al
c001add7:	0f b6 c0             	movzx  eax,al
c001adda:	5b                   	pop    ebx
c001addb:	5e                   	pop    esi
c001addc:	5f                   	pop    edi
c001addd:	c3                   	ret    

c001adde <SATA::write(unsigned long long, int, void*)>:
c001adde:	55                   	push   ebp
c001addf:	b8 04 00 00 00       	mov    eax,0x4
c001ade4:	57                   	push   edi
c001ade5:	56                   	push   esi
c001ade6:	53                   	push   ebx
c001ade7:	83 ec 0c             	sub    esp,0xc
c001adea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001adee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001adf2:	8d 73 ff             	lea    esi,[ebx-0x1]
c001adf5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001adf9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001adfd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae03:	77 3d                	ja     c001ae42 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae05:	b8 06 00 00 00       	mov    eax,0x6
c001ae0a:	85 ed                	test   ebp,ebp
c001ae0c:	74 34                	je     c001ae42 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae0e:	c1 e3 09             	shl    ebx,0x9
c001ae11:	01 eb                	add    ebx,ebp
c001ae13:	89 d6                	mov    esi,edx
c001ae15:	89 cf                	mov    edi,ecx
c001ae17:	83 c6 01             	add    esi,0x1
c001ae1a:	83 d7 00             	adc    edi,0x0
c001ae1d:	50                   	push   eax
c001ae1e:	50                   	push   eax
c001ae1f:	6a 01                	push   0x1
c001ae21:	55                   	push   ebp
c001ae22:	81 c5 00 02 00 00    	add    ebp,0x200
c001ae28:	6a 01                	push   0x1
c001ae2a:	51                   	push   ecx
c001ae2b:	52                   	push   edx
c001ae2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae30:	e8 11 fd ff ff       	call   c001ab46 <SATA::access(unsigned long long, int, void*, bool)>
c001ae35:	83 c4 20             	add    esp,0x20
c001ae38:	89 f2                	mov    edx,esi
c001ae3a:	89 f9                	mov    ecx,edi
c001ae3c:	39 dd                	cmp    ebp,ebx
c001ae3e:	75 d3                	jne    c001ae13 <SATA::write(unsigned long long, int, void*)+0x35>
c001ae40:	31 c0                	xor    eax,eax
c001ae42:	83 c4 0c             	add    esp,0xc
c001ae45:	5b                   	pop    ebx
c001ae46:	5e                   	pop    esi
c001ae47:	5f                   	pop    edi
c001ae48:	5d                   	pop    ebp
c001ae49:	c3                   	ret    

c001ae4a <SATAPI::write(unsigned long long, int, void*)>:
c001ae4a:	b8 03 00 00 00       	mov    eax,0x3
c001ae4f:	c3                   	ret    

c001ae50 <SATAPI::close(int, int, void*)>:
c001ae50:	83 ec 0c             	sub    esp,0xc
c001ae53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae57:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae5d:	85 c0                	test   eax,eax
c001ae5f:	74 0c                	je     c001ae6d <SATAPI::close(int, int, void*)+0x1d>
c001ae61:	83 ec 0c             	sub    esp,0xc
c001ae64:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae66:	50                   	push   eax
c001ae67:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae6a:	83 c4 10             	add    esp,0x10
c001ae6d:	31 c0                	xor    eax,eax
c001ae6f:	83 c4 0c             	add    esp,0xc
c001ae72:	c3                   	ret    
c001ae73:	90                   	nop

c001ae74 <SATAPI::SATAPI()>:
c001ae74:	83 ec 0c             	sub    esp,0xc
c001ae77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7b:	83 ec 04             	sub    esp,0x4
c001ae7e:	68 00 08 00 00       	push   0x800
c001ae83:	68 bc f5 01 c0       	push   0xc001f5bc
c001ae88:	50                   	push   eax
c001ae89:	e8 fc 0e ff ff       	call   c000bd8a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	ba c4 f6 01 c0       	mov    edx,0xc001f6c4
c001ae96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9a:	89 10                	mov    DWORD PTR [eax],edx
c001ae9c:	90                   	nop
c001ae9d:	83 c4 0c             	add    esp,0xc
c001aea0:	c3                   	ret    
c001aea1:	90                   	nop

c001aea2 <SATAPI::diskRemoved()>:
c001aea2:	c3                   	ret    
c001aea3:	90                   	nop

c001aea4 <SATAPI::diskInserted()>:
c001aea4:	83 ec 18             	sub    esp,0x18
c001aea7:	68 c8 f5 01 c0       	push   0xc001f5c8
c001aeac:	e8 cc f6 fe ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001aeb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aeb5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aebc:	83 c4 1c             	add    esp,0x1c
c001aebf:	c3                   	ret    

c001aec0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aec0:	55                   	push   ebp
c001aec1:	57                   	push   edi
c001aec2:	56                   	push   esi
c001aec3:	53                   	push   ebx
c001aec4:	83 ec 38             	sub    esp,0x38
c001aec7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aecb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aecf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aed3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aed7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aedb:	68 e0 f5 01 c0       	push   0xc001f5e0
c001aee0:	e8 98 f6 fe ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001aee5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aeeb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aef1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aef5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aefb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aeff:	83 c0 02             	add    eax,0x2
c001af02:	c1 e0 07             	shl    eax,0x7
c001af05:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af11:	c1 e0 07             	shl    eax,0x7
c001af14:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af18:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af1c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af26:	58                   	pop    eax
c001af27:	5a                   	pop    edx
c001af28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001af2c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001af32:	e8 71 ec ff ff       	call   c0019ba8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af37:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af3b:	83 c4 10             	add    esp,0x10
c001af3e:	b8 01 00 00 00       	mov    eax,0x1
c001af43:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af48:	0f 84 49 02 00 00    	je     c001b197 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001af4e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af58:	8b 00                	mov    eax,DWORD PTR [eax]
c001af5a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af60:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af6a:	c1 e1 05             	shl    ecx,0x5
c001af6d:	01 c8                	add    eax,ecx
c001af6f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af71:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af77:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af7d:	89 08                	mov    DWORD PTR [eax],ecx
c001af7f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af85:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af8b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af91:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af94:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af97:	50                   	push   eax
c001af98:	68 90 00 00 00       	push   0x90
c001af9d:	6a 00                	push   0x0
c001af9f:	53                   	push   ebx
c001afa0:	e8 2b 55 fe ff       	call   c00004d0 <memset>
c001afa5:	b9 0c 00 00 00       	mov    ecx,0xc
c001afaa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001afae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afb0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001afb6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001afba:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001afc0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001afc4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001afc8:	48                   	dec    eax
c001afc9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001afce:	89 c1                	mov    ecx,eax
c001afd0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001afd6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001afdb:	09 c8                	or     eax,ecx
c001afdd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001afe3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001afe6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001afed:	66 25 00 7f          	and    ax,0x7f00
c001aff1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aff5:	66 0d 27 80          	or     ax,0x8027
c001aff9:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001affd:	66 89 03             	mov    WORD PTR [ebx],ax
c001b000:	89 d0                	mov    eax,edx
c001b002:	c1 ea 18             	shr    edx,0x18
c001b005:	c1 e8 10             	shr    eax,0x10
c001b008:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b00b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b00e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b012:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b019:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b01c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b027:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b02b:	31 c0                	xor    eax,eax
c001b02d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b033:	80 e1 88             	and    cl,0x88
c001b036:	74 0a                	je     c001b042 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b038:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b03d:	74 0a                	je     c001b049 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b03f:	40                   	inc    eax
c001b040:	eb eb                	jmp    c001b02d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b042:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b047:	75 43                	jne    c001b08c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b049:	83 ec 0c             	sub    esp,0xc
c001b04c:	68 fa f5 01 c0       	push   0xc001f5fa
c001b051:	e8 27 f5 fe ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001b056:	58                   	pop    eax
c001b057:	5a                   	pop    edx
c001b058:	68 0f f6 01 c0       	push   0xc001f60f
c001b05d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b063:	e8 ce d6 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b068:	59                   	pop    ecx
c001b069:	5b                   	pop    ebx
c001b06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b06e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b074:	e8 c9 eb ff ff       	call   c0019c42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b079:	5e                   	pop    esi
c001b07a:	5f                   	pop    edi
c001b07b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b07f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b085:	e8 98 eb ff ff       	call   c0019c22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b08a:	eb 48                	jmp    c001b0d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b08c:	be 01 00 00 00       	mov    esi,0x1
c001b091:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b095:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b099:	d3 e6                	shl    esi,cl
c001b09b:	c1 e7 07             	shl    edi,0x7
c001b09e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b0a4:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b0a9:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b0ad:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b0b3:	85 c6                	test   esi,eax
c001b0b5:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b0bb:	0f 84 a3 00 00 00    	je     c001b164 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b0c1:	0f ba e0 1e          	bt     eax,0x1e
c001b0c5:	73 1a                	jae    c001b0e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b0c7:	83 ec 0c             	sub    esp,0xc
c001b0ca:	68 21 f6 01 c0       	push   0xc001f621
c001b0cf:	e8 a9 f4 fe ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001b0d4:	83 c4 10             	add    esp,0x10
c001b0d7:	b8 01 00 00 00       	mov    eax,0x1
c001b0dc:	e9 b6 00 00 00       	jmp    c001b197 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b0e1:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b0e7:	83 f8 0d             	cmp    eax,0xd
c001b0ea:	77 0a                	ja     c001b0f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b0ec:	83 ec 0c             	sub    esp,0xc
c001b0ef:	68 c8 00 00 00       	push   0xc8
c001b0f4:	eb 28                	jmp    c001b11e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0f6:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b0fc:	83 f8 0d             	cmp    eax,0xd
c001b0ff:	77 0a                	ja     c001b10b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b101:	83 ec 0c             	sub    esp,0xc
c001b104:	68 58 02 00 00       	push   0x258
c001b109:	eb 13                	jmp    c001b11e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b10b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b111:	83 f8 06             	cmp    eax,0x6
c001b114:	77 10                	ja     c001b126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b116:	83 ec 0c             	sub    esp,0xc
c001b119:	68 dc 05 00 00       	push   0x5dc
c001b11e:	e8 d1 89 ff ff       	call   c0013af4 <milliTenthSleep(unsigned int)>
c001b123:	83 c4 10             	add    esp,0x10
c001b126:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b12a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b12d:	75 06                	jne    c001b135 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b12f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b133:	74 15                	je     c001b14a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b135:	83 fb 06             	cmp    ebx,0x6
c001b138:	77 10                	ja     c001b14a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b13a:	83 ec 0c             	sub    esp,0xc
c001b13d:	68 c4 09 00 00       	push   0x9c4
c001b142:	e8 ad 89 ff ff       	call   c0013af4 <milliTenthSleep(unsigned int)>
c001b147:	83 c4 10             	add    esp,0x10
c001b14a:	43                   	inc    ebx
c001b14b:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b151:	0f 85 56 ff ff ff    	jne    c001b0ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b157:	83 ec 0c             	sub    esp,0xc
c001b15a:	68 34 f6 01 c0       	push   0xc001f634
c001b15f:	e9 6b ff ff ff       	jmp    c001b0cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b164:	0f ba e0 1e          	bt     eax,0x1e
c001b168:	73 0d                	jae    c001b177 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b16a:	83 ec 0c             	sub    esp,0xc
c001b16d:	68 48 f6 01 c0       	push   0xc001f648
c001b172:	e9 58 ff ff ff       	jmp    c001b0cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b177:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b17c:	74 17                	je     c001b195 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b17e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b183:	74 10                	je     c001b195 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b185:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b18b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b18f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b193:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b195:	31 c0                	xor    eax,eax
c001b197:	83 c4 2c             	add    esp,0x2c
c001b19a:	5b                   	pop    ebx
c001b19b:	5e                   	pop    esi
c001b19c:	5f                   	pop    edi
c001b19d:	5d                   	pop    ebp
c001b19e:	c3                   	ret    
c001b19f:	90                   	nop

c001b1a0 <SATAPI::eject()>:
c001b1a0:	57                   	push   edi
c001b1a1:	b9 03 00 00 00       	mov    ecx,0x3
c001b1a6:	83 ec 18             	sub    esp,0x18
c001b1a9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b1ad:	fc                   	cld    
c001b1ae:	31 c0                	xor    eax,eax
c001b1b0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b1b2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b1b7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b1bc:	50                   	push   eax
c001b1bd:	6a 00                	push   0x0
c001b1bf:	6a 00                	push   0x0
c001b1c1:	6a 00                	push   0x0
c001b1c3:	6a 00                	push   0x0
c001b1c5:	6a 02                	push   0x2
c001b1c7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1cb:	50                   	push   eax
c001b1cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1d0:	e8 eb fc ff ff       	call   c001aec0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b1d5:	31 c0                	xor    eax,eax
c001b1d7:	83 c4 38             	add    esp,0x38
c001b1da:	5f                   	pop    edi
c001b1db:	c3                   	ret    

c001b1dc <SATAPI::detectMedia()>:
c001b1dc:	53                   	push   ebx
c001b1dd:	83 ec 14             	sub    esp,0x14
c001b1e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b1e4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b1ea:	e8 81 23 ff ff       	call   c000d570 <VCache::writeWriteBuffer()>
c001b1ef:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b1f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b1f9:	83 c4 18             	add    esp,0x18
c001b1fc:	5b                   	pop    ebx
c001b1fd:	e9 5e 23 ff ff       	jmp    c000d560 <VCache::invalidateReadBuffer()>

c001b202 <SATAPI::open(int, int, void*)>:
c001b202:	56                   	push   esi
c001b203:	53                   	push   ebx
c001b204:	51                   	push   ecx
c001b205:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b20d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b217:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b21d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b227:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b22b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b235:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b23b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b242:	e8 4e c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b247:	89 c6                	mov    esi,eax
c001b249:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b24f:	81 c6 00 10 00 00    	add    esi,0x1000
c001b255:	e8 3b c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b25a:	39 c6                	cmp    esi,eax
c001b25c:	74 10                	je     c001b26e <SATAPI::open(int, int, void*)+0x6c>
c001b25e:	83 ec 0c             	sub    esp,0xc
c001b261:	68 5d f6 01 c0       	push   0xc001f65d
c001b266:	e8 94 4f ff ff       	call   c00101ff <KePanic(char const*)>
c001b26b:	83 c4 10             	add    esp,0x10
c001b26e:	83 ec 0c             	sub    esp,0xc
c001b271:	6a 02                	push   0x2
c001b273:	e8 0d e0 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b278:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b27e:	6a 03                	push   0x3
c001b280:	50                   	push   eax
c001b281:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b287:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b28d:	e8 da e6 fe ff       	call   c000996c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b292:	83 c4 14             	add    esp,0x14
c001b295:	68 74 01 00 00       	push   0x174
c001b29a:	e8 1a c5 fe ff       	call   c00077b9 <malloc>
c001b29f:	83 c4 0c             	add    esp,0xc
c001b2a2:	89 c6                	mov    esi,eax
c001b2a4:	6a 00                	push   0x0
c001b2a6:	68 ff ff ff 7f       	push   0x7fffffff
c001b2ab:	6a 00                	push   0x0
c001b2ad:	6a 00                	push   0x0
c001b2af:	53                   	push   ebx
c001b2b0:	68 73 f6 01 c0       	push   0xc001f673
c001b2b5:	50                   	push   eax
c001b2b6:	e8 bb 17 ff ff       	call   c000ca76 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b2bb:	83 c4 14             	add    esp,0x14
c001b2be:	56                   	push   esi
c001b2bf:	e8 68 18 ff ff       	call   c000cb2c <LogicalDisk::assignDriveLetter()>
c001b2c4:	5a                   	pop    edx
c001b2c5:	0f be c0             	movsx  eax,al
c001b2c8:	59                   	pop    ecx
c001b2c9:	50                   	push   eax
c001b2ca:	68 c0 f4 01 c0       	push   0xc001f4c0
c001b2cf:	e8 a9 f2 fe ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001b2d4:	58                   	pop    eax
c001b2d5:	5a                   	pop    edx
c001b2d6:	56                   	push   esi
c001b2d7:	53                   	push   ebx
c001b2d8:	e8 df 06 ff ff       	call   c000b9bc <Device::addChild(Device*)>
c001b2dd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b2e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2e6:	e8 07 0b ff ff       	call   c000bdf2 <PhysicalDisk::startCache()>
c001b2eb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b2f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2f5:	e8 e2 fe ff ff       	call   c001b1dc <SATAPI::detectMedia()>
c001b2fa:	83 c4 14             	add    esp,0x14
c001b2fd:	31 c0                	xor    eax,eax
c001b2ff:	5b                   	pop    ebx
c001b300:	5e                   	pop    esi
c001b301:	c3                   	ret    

c001b302 <SATAPI::read(unsigned long long, int, void*)>:
c001b302:	57                   	push   edi
c001b303:	56                   	push   esi
c001b304:	53                   	push   ebx
c001b305:	83 ec 3c             	sub    esp,0x3c
c001b308:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b30c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b310:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b314:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b318:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b31c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b320:	68 81 f6 01 c0       	push   0xc001f681
c001b325:	e8 53 f2 fe ff       	call   c000a57d <Dbg::kprintf(char const*, ...)>
c001b32a:	83 c4 10             	add    esp,0x10
c001b32d:	83 fe 04             	cmp    esi,0x4
c001b330:	7e 10                	jle    c001b342 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b332:	83 ec 0c             	sub    esp,0xc
c001b335:	68 92 f6 01 c0       	push   0xc001f692
c001b33a:	e8 c0 4e ff ff       	call   c00101ff <KePanic(char const*)>
c001b33f:	83 c4 10             	add    esp,0x10
c001b342:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b348:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b34e:	51                   	push   ecx
c001b34f:	50                   	push   eax
c001b350:	83 c0 02             	add    eax,0x2
c001b353:	c1 e0 07             	shl    eax,0x7
c001b356:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b35c:	50                   	push   eax
c001b35d:	52                   	push   edx
c001b35e:	e8 09 e9 ff ff       	call   c0019c6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b363:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b367:	b9 03 00 00 00       	mov    ecx,0x3
c001b36c:	fc                   	cld    
c001b36d:	31 c0                	xor    eax,eax
c001b36f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b371:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b376:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b37b:	83 c4 0c             	add    esp,0xc
c001b37e:	6a 00                	push   0x0
c001b380:	6a 00                	push   0x0
c001b382:	6a 00                	push   0x0
c001b384:	6a 00                	push   0x0
c001b386:	6a 02                	push   0x2
c001b388:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b38c:	50                   	push   eax
c001b38d:	53                   	push   ebx
c001b38e:	e8 2d fb ff ff       	call   c001aec0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b393:	83 c4 20             	add    esp,0x20
c001b396:	85 c0                	test   eax,eax
c001b398:	75 44                	jne    c001b3de <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b39a:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b39e:	b9 03 00 00 00       	mov    ecx,0x3
c001b3a3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3a9:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b3ae:	0f c8                	bswap  eax
c001b3b0:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b3b4:	89 f0                	mov    eax,esi
c001b3b6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b3ba:	50                   	push   eax
c001b3bb:	56                   	push   esi
c001b3bc:	c1 e6 0b             	shl    esi,0xb
c001b3bf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b3c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3cb:	56                   	push   esi
c001b3cc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b3d0:	50                   	push   eax
c001b3d1:	53                   	push   ebx
c001b3d2:	e8 e9 fa ff ff       	call   c001aec0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b3d7:	83 c4 20             	add    esp,0x20
c001b3da:	85 c0                	test   eax,eax
c001b3dc:	74 14                	je     c001b3f2 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b3de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3e2:	83 ec 0c             	sub    esp,0xc
c001b3e5:	53                   	push   ebx
c001b3e6:	e8 f1 fd ff ff       	call   c001b1dc <SATAPI::detectMedia()>
c001b3eb:	83 c4 10             	add    esp,0x10
c001b3ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3f2:	83 c4 30             	add    esp,0x30
c001b3f5:	5b                   	pop    ebx
c001b3f6:	5e                   	pop    esi
c001b3f7:	5f                   	pop    edi
c001b3f8:	c3                   	ret    
c001b3f9:	90                   	nop

c001b3fa <IOAPIC::close(int, int, void*)>:
c001b3fa:	b8 00 00 00 00       	mov    eax,0x0
c001b3ff:	c3                   	ret    

c001b400 <apicGetBase()>:
c001b400:	55                   	push   ebp
c001b401:	89 e5                	mov    ebp,esp
c001b403:	83 ec 18             	sub    esp,0x18
c001b406:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b40b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b411:	83 e0 08             	and    eax,0x8
c001b414:	84 c0                	test   al,al
c001b416:	75 07                	jne    c001b41f <apicGetBase()+0x1f>
c001b418:	b8 00 00 00 00       	mov    eax,0x0
c001b41d:	eb 21                	jmp    c001b440 <apicGetBase()+0x40>
c001b41f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b424:	83 ec 08             	sub    esp,0x8
c001b427:	6a 1b                	push   0x1b
c001b429:	50                   	push   eax
c001b42a:	e8 c3 b9 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b42f:	83 c4 10             	add    esp,0x10
c001b432:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b435:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b438:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b43b:	25 00 00 ff ff       	and    eax,0xffff0000
c001b440:	c9                   	leave  
c001b441:	c3                   	ret    

c001b442 <IOAPIC::IOAPIC()>:
c001b442:	83 ec 0c             	sub    esp,0xc
c001b445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b449:	83 ec 08             	sub    esp,0x8
c001b44c:	68 f4 f6 01 c0       	push   0xc001f6f4
c001b451:	50                   	push   eax
c001b452:	e8 fd 06 ff ff       	call   c000bb54 <Device::Device(char const*)>
c001b457:	83 c4 10             	add    esp,0x10
c001b45a:	ba 04 f7 01 c0       	mov    edx,0xc001f704
c001b45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b463:	89 10                	mov    DWORD PTR [eax],edx
c001b465:	90                   	nop
c001b466:	83 c4 0c             	add    esp,0xc
c001b469:	c3                   	ret    

c001b46a <apicOpen()>:
c001b46a:	55                   	push   ebp
c001b46b:	89 e5                	mov    ebp,esp
c001b46d:	53                   	push   ebx
c001b46e:	83 ec 34             	sub    esp,0x34
c001b471:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b476:	83 f0 01             	xor    eax,0x1
c001b479:	84 c0                	test   al,al
c001b47b:	0f 84 9d 00 00 00    	je     c001b51e <apicOpen()+0xb4>
c001b481:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b485:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b48a:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b48d:	0f 83 84 00 00 00    	jae    c001b517 <apicOpen()+0xad>
c001b493:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b49a:	83 ec 0c             	sub    esp,0xc
c001b49d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b4a0:	e8 14 c3 fe ff       	call   c00077b9 <malloc>
c001b4a5:	83 c4 10             	add    esp,0x10
c001b4a8:	89 c3                	mov    ebx,eax
c001b4aa:	83 ec 0c             	sub    esp,0xc
c001b4ad:	53                   	push   ebx
c001b4ae:	e8 8f ff ff ff       	call   c001b442 <IOAPIC::IOAPIC()>
c001b4b3:	83 c4 10             	add    esp,0x10
c001b4b6:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b4b9:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4bc:	25 ff 00 00 00       	and    eax,0xff
c001b4c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b4c4:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b4cb:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b4d0:	40                   	inc    eax
c001b4d1:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b4d6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b4db:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b4e1:	83 ec 08             	sub    esp,0x8
c001b4e4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4e7:	50                   	push   eax
c001b4e8:	e8 cf 04 ff ff       	call   c000b9bc <Device::addChild(Device*)>
c001b4ed:	83 c4 10             	add    esp,0x10
c001b4f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b4f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4f5:	83 c0 08             	add    eax,0x8
c001b4f8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4fa:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4fd:	25 ff 00 00 00       	and    eax,0xff
c001b502:	6a 00                	push   0x0
c001b504:	6a 00                	push   0x0
c001b506:	50                   	push   eax
c001b507:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b50a:	ff d2                	call   edx
c001b50c:	83 c4 10             	add    esp,0x10
c001b50f:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b512:	e9 6e ff ff ff       	jmp    c001b485 <apicOpen()+0x1b>
c001b517:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b51e:	e8 dd fe ff ff       	call   c001b400 <apicGetBase()>
c001b523:	05 f0 00 00 00       	add    eax,0xf0
c001b528:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b52b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b52e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b530:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b533:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b53a:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b541:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b544:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b547:	89 10                	mov    DWORD PTR [eax],edx
c001b549:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b550:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b555:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b558:	7d 70                	jge    c001b5ca <apicOpen()+0x160>
c001b55a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b55d:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b564:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b567:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b56a:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b571:	c1 e8 08             	shr    eax,0x8
c001b574:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b578:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b57b:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b582:	c1 e8 18             	shr    eax,0x18
c001b585:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b588:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b58c:	75 37                	jne    c001b5c5 <apicOpen()+0x15b>
c001b58e:	e8 6d fe ff ff       	call   c001b400 <apicGetBase()>
c001b593:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b597:	75 07                	jne    c001b5a0 <apicOpen()+0x136>
c001b599:	ba 60 03 00 00       	mov    edx,0x360
c001b59e:	eb 05                	jmp    c001b5a5 <apicOpen()+0x13b>
c001b5a0:	ba 50 03 00 00       	mov    edx,0x350
c001b5a5:	01 d0                	add    eax,edx
c001b5a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b5aa:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5af:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b5b2:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b5b9:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b5bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5c0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b5c3:	89 10                	mov    DWORD PTR [eax],edx
c001b5c5:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b5c8:	eb 86                	jmp    c001b550 <apicOpen()+0xe6>
c001b5ca:	90                   	nop
c001b5cb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b5ce:	c9                   	leave  
c001b5cf:	c3                   	ret    

c001b5d0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b5d0:	55                   	push   ebp
c001b5d1:	89 e5                	mov    ebp,esp
c001b5d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b5dc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5df:	72 1d                	jb     c001b5fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5e4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b5ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5ed:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b5f3:	01 d0                	add    eax,edx
c001b5f5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5f8:	73 04                	jae    c001b5fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5fa:	b0 01                	mov    al,0x1
c001b5fc:	eb 02                	jmp    c001b600 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b5fe:	b0 00                	mov    al,0x0
c001b600:	5d                   	pop    ebp
c001b601:	c3                   	ret    

c001b602 <IOAPIC::read(int)>:
c001b602:	55                   	push   ebp
c001b603:	89 e5                	mov    ebp,esp
c001b605:	83 ec 10             	sub    esp,0x10
c001b608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b60b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b611:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b614:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b617:	31 d2                	xor    edx,edx
c001b619:	88 c2                	mov    dl,al
c001b61b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b61e:	89 10                	mov    DWORD PTR [eax],edx
c001b620:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b623:	83 c0 10             	add    eax,0x10
c001b626:	8b 00                	mov    eax,DWORD PTR [eax]
c001b628:	c9                   	leave  
c001b629:	c3                   	ret    

c001b62a <IOAPIC::open(int, int, void*)>:
c001b62a:	55                   	push   ebp
c001b62b:	89 e5                	mov    ebp,esp
c001b62d:	57                   	push   edi
c001b62e:	56                   	push   esi
c001b62f:	53                   	push   ebx
c001b630:	83 ec 04             	sub    esp,0x4
c001b633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b636:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b639:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b63f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b642:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b648:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b64f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b652:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b65b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b661:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b66b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b674:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b67a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b67d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b683:	89 c6                	mov    esi,eax
c001b685:	81 e6 ff 00 00 00    	and    esi,0xff
c001b68b:	89 d0                	mov    eax,edx
c001b68d:	ba 00 00 00 00       	mov    edx,0x0
c001b692:	89 c7                	mov    edi,eax
c001b694:	83 e7 ff             	and    edi,0xffffffff
c001b697:	89 f9                	mov    ecx,edi
c001b699:	89 d0                	mov    eax,edx
c001b69b:	25 ff 00 00 00       	and    eax,0xff
c001b6a0:	89 c3                	mov    ebx,eax
c001b6a2:	89 c8                	mov    eax,ecx
c001b6a4:	89 da                	mov    edx,ebx
c001b6a6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6a9:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b6ac:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b6b0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b6b4:	83 e0 00             	and    eax,0x0
c001b6b7:	09 d0                	or     eax,edx
c001b6b9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6c0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b6c6:	8d 50 01             	lea    edx,[eax+0x1]
c001b6c9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6cc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b6d2:	31 d2                	xor    edx,edx
c001b6d4:	88 c2                	mov    dl,al
c001b6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d9:	83 c2 08             	add    edx,0x8
c001b6dc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b6e0:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b6e6:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b6ec:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b6f0:	6a 01                	push   0x1
c001b6f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b6f5:	e8 08 ff ff ff       	call   c001b602 <IOAPIC::read(int)>
c001b6fa:	83 c4 08             	add    esp,0x8
c001b6fd:	c1 f8 10             	sar    eax,0x10
c001b700:	25 ff 00 00 00       	and    eax,0xff
c001b705:	8d 50 01             	lea    edx,[eax+0x1]
c001b708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b70b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b711:	b8 00 00 00 00       	mov    eax,0x0
c001b716:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b719:	5b                   	pop    ebx
c001b71a:	5e                   	pop    esi
c001b71b:	5f                   	pop    edi
c001b71c:	5d                   	pop    ebp
c001b71d:	c3                   	ret    

c001b71e <IOAPIC::write(int, int)>:
c001b71e:	55                   	push   ebp
c001b71f:	89 e5                	mov    ebp,esp
c001b721:	83 ec 10             	sub    esp,0x10
c001b724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b727:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b72d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b730:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b733:	31 d2                	xor    edx,edx
c001b735:	88 c2                	mov    dl,al
c001b737:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b73a:	89 10                	mov    DWORD PTR [eax],edx
c001b73c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b73f:	8d 50 10             	lea    edx,[eax+0x10]
c001b742:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b745:	89 02                	mov    DWORD PTR [edx],eax
c001b747:	90                   	nop
c001b748:	c9                   	leave  
c001b749:	c3                   	ret    

c001b74a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b74a:	55                   	push   ebp
c001b74b:	89 e5                	mov    ebp,esp
c001b74d:	53                   	push   ebx
c001b74e:	83 ec 2c             	sub    esp,0x2c
c001b751:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b754:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b757:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b75a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b75d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b760:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b763:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b766:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b769:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b76c:	88 d8                	mov    al,bl
c001b76e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b771:	88 c8                	mov    al,cl
c001b773:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b776:	88 d0                	mov    al,dl
c001b778:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b77b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b77e:	25 ff 00 00 00       	and    eax,0xff
c001b783:	83 c0 08             	add    eax,0x8
c001b786:	01 c0                	add    eax,eax
c001b788:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b78b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b78e:	25 ff 00 00 00       	and    eax,0xff
c001b793:	83 c0 08             	add    eax,0x8
c001b796:	01 c0                	add    eax,eax
c001b798:	40                   	inc    eax
c001b799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b79c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b79f:	50                   	push   eax
c001b7a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7a3:	e8 5a fe ff ff       	call   c001b602 <IOAPIC::read(int)>
c001b7a8:	83 c4 08             	add    esp,0x8
c001b7ab:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b7ae:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b7b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b7b8:	c1 e0 18             	shl    eax,0x18
c001b7bb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b7be:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b7c1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7c4:	52                   	push   edx
c001b7c5:	50                   	push   eax
c001b7c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7c9:	e8 50 ff ff ff       	call   c001b71e <IOAPIC::write(int, int)>
c001b7ce:	83 c4 0c             	add    esp,0xc
c001b7d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7d4:	50                   	push   eax
c001b7d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7d8:	e8 25 fe ff ff       	call   c001b602 <IOAPIC::read(int)>
c001b7dd:	83 c4 08             	add    esp,0x8
c001b7e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b7e3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b7ea:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b7f1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b7f8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b7fc:	74 09                	je     c001b807 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b7fe:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b805:	eb 07                	jmp    c001b80e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b807:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b80e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b812:	74 09                	je     c001b81d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b814:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b81b:	eb 07                	jmp    c001b824 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b81d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b824:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b82b:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b82e:	25 ff 00 00 00       	and    eax,0xff
c001b833:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b836:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b839:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b83c:	52                   	push   edx
c001b83d:	50                   	push   eax
c001b83e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b841:	e8 d8 fe ff ff       	call   c001b71e <IOAPIC::write(int, int)>
c001b846:	83 c4 0c             	add    esp,0xc
c001b849:	90                   	nop
c001b84a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b84d:	c9                   	leave  
c001b84e:	c3                   	ret    
c001b84f:	90                   	nop

c001b850 <APICTimer::close(int, int, void*)>:
c001b850:	b8 00 00 00 00       	mov    eax,0x0
c001b855:	c3                   	ret    
c001b856:	66 90                	xchg   ax,ax

c001b858 <apicTimerHandler(regs*, void*)>:
c001b858:	83 ec 0c             	sub    esp,0xc
c001b85b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b85f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b861:	b8 10 27 00 00       	mov    eax,0x2710
c001b866:	ba 00 00 00 00       	mov    edx,0x0
c001b86b:	f7 f1                	div    ecx
c001b86d:	83 ec 0c             	sub    esp,0xc
c001b870:	50                   	push   eax
c001b871:	e8 1a 1a ff ff       	call   c000d290 <timerHandler(unsigned int)>
c001b876:	83 c4 10             	add    esp,0x10
c001b879:	90                   	nop
c001b87a:	83 c4 0c             	add    esp,0xc
c001b87d:	c3                   	ret    
c001b87e:	66 90                	xchg   ax,ax

c001b880 <APICTimer::open(int, int, void*)>:
c001b880:	83 ec 0c             	sub    esp,0xc
c001b883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b887:	8b 00                	mov    eax,DWORD PTR [eax]
c001b889:	83 c0 24             	add    eax,0x24
c001b88c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b88e:	83 ec 08             	sub    esp,0x8
c001b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b899:	ff d0                	call   eax
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8a6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8b4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b8ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8be:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b8c4:	83 ec 0c             	sub    esp,0xc
c001b8c7:	51                   	push   ecx
c001b8c8:	6a 01                	push   0x1
c001b8ca:	68 58 b8 01 c0       	push   0xc001b858
c001b8cf:	52                   	push   edx
c001b8d0:	50                   	push   eax
c001b8d1:	e8 92 00 ff ff       	call   c000b968 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b8d6:	83 c4 20             	add    esp,0x20
c001b8d9:	89 c2                	mov    edx,eax
c001b8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8df:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b8e5:	b8 00 00 00 00       	mov    eax,0x0
c001b8ea:	83 c4 0c             	add    esp,0xc
c001b8ed:	c3                   	ret    
c001b8ee:	66 90                	xchg   ax,ax

c001b8f0 <APICTimer::write(int)>:
c001b8f0:	83 ec 0c             	sub    esp,0xc
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	68 28 f7 01 c0       	push   0xc001f728
c001b8fb:	e8 ff 48 ff ff       	call   c00101ff <KePanic(char const*)>
c001b900:	83 c4 10             	add    esp,0x10
c001b903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b907:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b90b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b911:	90                   	nop
c001b912:	83 c4 0c             	add    esp,0xc
c001b915:	c3                   	ret    
c001b916:	66 90                	xchg   ax,ax

c001b918 <APICTimer::APICTimer()>:
c001b918:	83 ec 0c             	sub    esp,0xc
c001b91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91f:	83 ec 08             	sub    esp,0x8
c001b922:	68 38 f7 01 c0       	push   0xc001f738
c001b927:	50                   	push   eax
c001b928:	e8 97 18 ff ff       	call   c000d1c4 <Timer::Timer(char const*)>
c001b92d:	83 c4 10             	add    esp,0x10
c001b930:	ba 4c f7 01 c0       	mov    edx,0xc001f74c
c001b935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b939:	89 10                	mov    DWORD PTR [eax],edx
c001b93b:	90                   	nop
c001b93c:	83 c4 0c             	add    esp,0xc
c001b93f:	c3                   	ret    

c001b940 <PIT::write(int)>:
c001b940:	83 ec 10             	sub    esp,0x10
c001b943:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b94b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b951:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b955:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b95a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b95f:	99                   	cdq    
c001b960:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b968:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b96f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b974:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b978:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b97d:	ee                   	out    dx,al
c001b97e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b982:	25 ff 00 00 00       	and    eax,0xff
c001b987:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b98e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b992:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b996:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b99b:	ee                   	out    dx,al
c001b99c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9a0:	c1 f8 08             	sar    eax,0x8
c001b9a3:	25 ff 00 00 00       	and    eax,0xff
c001b9a8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b9af:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b9b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b9b7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b9bc:	ee                   	out    dx,al
c001b9bd:	90                   	nop
c001b9be:	83 c4 10             	add    esp,0x10
c001b9c1:	c3                   	ret    
c001b9c2:	66 90                	xchg   ax,ax

c001b9c4 <pitHandler(regs*, void*)>:
c001b9c4:	83 ec 0c             	sub    esp,0xc
c001b9c7:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001b9cd:	b8 10 27 00 00       	mov    eax,0x2710
c001b9d2:	99                   	cdq    
c001b9d3:	f7 f9                	idiv   ecx
c001b9d5:	83 ec 0c             	sub    esp,0xc
c001b9d8:	50                   	push   eax
c001b9d9:	e8 b2 18 ff ff       	call   c000d290 <timerHandler(unsigned int)>
c001b9de:	83 c4 10             	add    esp,0x10
c001b9e1:	90                   	nop
c001b9e2:	83 c4 0c             	add    esp,0xc
c001b9e5:	c3                   	ret    
c001b9e6:	66 90                	xchg   ax,ax

c001b9e8 <PIT::open(int, int, void*)>:
c001b9e8:	83 ec 0c             	sub    esp,0xc
c001b9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ef:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f1:	83 c0 24             	add    eax,0x24
c001b9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f6:	83 ec 08             	sub    esp,0x8
c001b9f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba01:	ff d0                	call   eax
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0a:	83 ec 0c             	sub    esp,0xc
c001ba0d:	6a 00                	push   0x0
c001ba0f:	6a 01                	push   0x1
c001ba11:	68 c4 b9 01 c0       	push   0xc001b9c4
c001ba16:	6a 00                	push   0x0
c001ba18:	50                   	push   eax
c001ba19:	e8 4a ff fe ff       	call   c000b968 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba1e:	83 c4 20             	add    esp,0x20
c001ba21:	89 c2                	mov    edx,eax
c001ba23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba27:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba2d:	b8 00 00 00 00       	mov    eax,0x0
c001ba32:	83 c4 0c             	add    esp,0xc
c001ba35:	c3                   	ret    
c001ba36:	66 90                	xchg   ax,ax

c001ba38 <PIT::close(int, int, void*)>:
c001ba38:	83 ec 0c             	sub    esp,0xc
c001ba3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ba49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4d:	6a 01                	push   0x1
c001ba4f:	68 c4 b9 01 c0       	push   0xc001b9c4
c001ba54:	6a 00                	push   0x0
c001ba56:	50                   	push   eax
c001ba57:	e8 42 ff fe ff       	call   c000b99e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba5c:	83 c4 10             	add    esp,0x10
c001ba5f:	b8 00 00 00 00       	mov    eax,0x0
c001ba64:	83 c4 0c             	add    esp,0xc
c001ba67:	c3                   	ret    

c001ba68 <PIT::PIT()>:
c001ba68:	83 ec 0c             	sub    esp,0xc
c001ba6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6f:	83 ec 08             	sub    esp,0x8
c001ba72:	68 74 f7 01 c0       	push   0xc001f774
c001ba77:	50                   	push   eax
c001ba78:	e8 47 17 ff ff       	call   c000d1c4 <Timer::Timer(char const*)>
c001ba7d:	83 c4 10             	add    esp,0x10
c001ba80:	ba 9c f7 01 c0       	mov    edx,0xc001f79c
c001ba85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba89:	89 10                	mov    DWORD PTR [eax],edx
c001ba8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba95:	31 d2                	xor    edx,edx
c001ba97:	88 c2                	mov    dl,al
c001ba99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001baa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001baae:	31 d2                	xor    edx,edx
c001bab0:	88 c2                	mov    dl,al
c001bab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001babb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bac5:	8d 50 01             	lea    edx,[eax+0x1]
c001bac8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bacc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bad2:	31 d2                	xor    edx,edx
c001bad4:	88 c2                	mov    dl,al
c001bad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bada:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bade:	83 e1 3f             	and    ecx,0x3f
c001bae1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bae5:	90                   	nop
c001bae6:	83 c4 0c             	add    esp,0xc
c001bae9:	c3                   	ret    
c001baea:	66 90                	xchg   ax,ax
c001baec:	66 90                	xchg   ax,ax
c001baee:	66 90                	xchg   ax,ax

c001baf0 <avxDetect>:
c001baf0:	b8 01 00 00 00       	mov    eax,0x1
c001baf5:	0f a2                	cpuid  
c001baf7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bafd:	74 15                	je     c001bb14 <avxDetect.noAVX>
c001baff:	b8 01 00 00 00       	mov    eax,0x1
c001bb04:	0f a2                	cpuid  
c001bb06:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bb0c:	74 06                	je     c001bb14 <avxDetect.noAVX>
c001bb0e:	b8 01 00 00 00       	mov    eax,0x1
c001bb13:	c3                   	ret    

c001bb14 <avxDetect.noAVX>:
c001bb14:	b8 00 00 00 00       	mov    eax,0x0
c001bb19:	c3                   	ret    

c001bb1a <avxSave>:
c001bb1a:	53                   	push   ebx
c001bb1b:	52                   	push   edx
c001bb1c:	31 c0                	xor    eax,eax
c001bb1e:	48                   	dec    eax
c001bb1f:	89 c2                	mov    edx,eax
c001bb21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb25:	0f ae 23             	xsave  [ebx]
c001bb28:	5a                   	pop    edx
c001bb29:	5b                   	pop    ebx
c001bb2a:	c3                   	ret    

c001bb2b <avxLoad>:
c001bb2b:	53                   	push   ebx
c001bb2c:	52                   	push   edx
c001bb2d:	31 c0                	xor    eax,eax
c001bb2f:	48                   	dec    eax
c001bb30:	89 c2                	mov    edx,eax
c001bb32:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb36:	0f ae 2b             	xrstor [ebx]
c001bb39:	5a                   	pop    edx
c001bb3a:	5b                   	pop    ebx
c001bb3b:	c3                   	ret    

c001bb3c <avxInit>:
c001bb3c:	e8 b7 02 00 00       	call   c001bdf8 <sseInit>
c001bb41:	50                   	push   eax
c001bb42:	51                   	push   ecx
c001bb43:	0f 20 e0             	mov    eax,cr4
c001bb46:	0d 00 00 04 00       	or     eax,0x40000
c001bb4b:	0f 22 e0             	mov    cr4,eax
c001bb4e:	31 c9                	xor    ecx,ecx
c001bb50:	0f 01 d0             	xgetbv 
c001bb53:	0d 07 00 00 00       	or     eax,0x7
c001bb58:	0f 01 d1             	xsetbv 
c001bb5b:	59                   	pop    ecx
c001bb5c:	58                   	pop    eax
c001bb5d:	c3                   	ret    

c001bb5e <avxClose>:
c001bb5e:	c3                   	ret    

c001bb5f <wouldSheSayYes>:
c001bb5f:	c3                   	ret    
c001bb60:	49                   	dec    ecx
c001bb61:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb65:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb69:	75 20                	jne    c001bb8b <isr0+0xb>
c001bb6b:	4e                   	dec    esi
c001bb6c:	79 61                	jns    c001bbcf <isr7+0x3>
c001bb6e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb73:	66 90                	xchg   ax,ax
c001bb75:	66 90                	xchg   ax,ax
c001bb77:	66 90                	xchg   ax,ax
c001bb79:	66 90                	xchg   ax,ax
c001bb7b:	66 90                	xchg   ax,ax
c001bb7d:	66 90                	xchg   ax,ax
c001bb7f:	90                   	nop

c001bb80 <isr0>:
c001bb80:	fa                   	cli    
c001bb81:	68 00 00 00 00       	push   0x0
c001bb86:	68 00 00 00 00       	push   0x0
c001bb8b:	e9 44 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bb90 <isr1>:
c001bb90:	fa                   	cli    
c001bb91:	6a 00                	push   0x0
c001bb93:	6a 01                	push   0x1
c001bb95:	e9 3a 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bb9a <isr2>:
c001bb9a:	fa                   	cli    
c001bb9b:	6a 00                	push   0x0
c001bb9d:	6a 02                	push   0x2
c001bb9f:	e9 30 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bba4 <isr3>:
c001bba4:	fa                   	cli    
c001bba5:	6a 00                	push   0x0
c001bba7:	6a 03                	push   0x3
c001bba9:	e9 26 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbae <isr4>:
c001bbae:	fa                   	cli    
c001bbaf:	6a 00                	push   0x0
c001bbb1:	6a 04                	push   0x4
c001bbb3:	e9 1c 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbb8 <isr5>:
c001bbb8:	fa                   	cli    
c001bbb9:	6a 00                	push   0x0
c001bbbb:	6a 05                	push   0x5
c001bbbd:	e9 12 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbc2 <isr6>:
c001bbc2:	fa                   	cli    
c001bbc3:	6a 00                	push   0x0
c001bbc5:	6a 06                	push   0x6
c001bbc7:	e9 08 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbcc <isr7>:
c001bbcc:	fa                   	cli    
c001bbcd:	6a 00                	push   0x0
c001bbcf:	6a 07                	push   0x7
c001bbd1:	e9 fe 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbd6 <isr8>:
c001bbd6:	fa                   	cli    
c001bbd7:	6a 08                	push   0x8
c001bbd9:	e9 f6 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbde <isr9>:
c001bbde:	fa                   	cli    
c001bbdf:	6a 00                	push   0x0
c001bbe1:	6a 09                	push   0x9
c001bbe3:	e9 ec 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbe8 <isr10>:
c001bbe8:	fa                   	cli    
c001bbe9:	6a 0a                	push   0xa
c001bbeb:	e9 e4 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbf0 <isr11>:
c001bbf0:	fa                   	cli    
c001bbf1:	6a 0b                	push   0xb
c001bbf3:	e9 dc 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbf8 <isr12>:
c001bbf8:	fa                   	cli    
c001bbf9:	6a 0c                	push   0xc
c001bbfb:	e9 d4 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc00 <isr13>:
c001bc00:	fa                   	cli    
c001bc01:	6a 0d                	push   0xd
c001bc03:	e9 cc 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc08 <isr14>:
c001bc08:	fa                   	cli    
c001bc09:	6a 0e                	push   0xe
c001bc0b:	e9 c4 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc10 <isr15>:
c001bc10:	fa                   	cli    
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 0f                	push   0xf
c001bc15:	e9 ba 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc1a <isr16>:
c001bc1a:	fa                   	cli    
c001bc1b:	6a 00                	push   0x0
c001bc1d:	6a 10                	push   0x10
c001bc1f:	e9 b0 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc24 <isr17>:
c001bc24:	fa                   	cli    
c001bc25:	6a 00                	push   0x0
c001bc27:	6a 11                	push   0x11
c001bc29:	e9 a6 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc2e <isr18>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 12                	push   0x12
c001bc33:	e9 9c 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc38 <irq3>:
c001bc38:	fa                   	cli    
c001bc39:	6a 00                	push   0x0
c001bc3b:	6a 23                	push   0x23
c001bc3d:	e9 92 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc42 <irq4>:
c001bc42:	fa                   	cli    
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 24                	push   0x24
c001bc47:	e9 88 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc4c <irq5>:
c001bc4c:	fa                   	cli    
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 25                	push   0x25
c001bc51:	e9 7e 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc56 <irq6>:
c001bc56:	fa                   	cli    
c001bc57:	6a 00                	push   0x0
c001bc59:	6a 26                	push   0x26
c001bc5b:	e9 74 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc60 <irq7>:
c001bc60:	fa                   	cli    
c001bc61:	6a 00                	push   0x0
c001bc63:	6a 27                	push   0x27
c001bc65:	e9 6a 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc6a <irq8>:
c001bc6a:	fa                   	cli    
c001bc6b:	6a 00                	push   0x0
c001bc6d:	6a 28                	push   0x28
c001bc6f:	e9 60 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc74 <irq9>:
c001bc74:	fa                   	cli    
c001bc75:	6a 00                	push   0x0
c001bc77:	6a 29                	push   0x29
c001bc79:	e9 56 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc7e <irq10>:
c001bc7e:	fa                   	cli    
c001bc7f:	6a 00                	push   0x0
c001bc81:	6a 2a                	push   0x2a
c001bc83:	e9 4c 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc88 <irq11>:
c001bc88:	fa                   	cli    
c001bc89:	6a 00                	push   0x0
c001bc8b:	6a 2b                	push   0x2b
c001bc8d:	e9 42 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc92 <irq12>:
c001bc92:	fa                   	cli    
c001bc93:	6a 00                	push   0x0
c001bc95:	6a 2c                	push   0x2c
c001bc97:	e9 38 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc9c <irq13>:
c001bc9c:	fa                   	cli    
c001bc9d:	6a 00                	push   0x0
c001bc9f:	6a 2d                	push   0x2d
c001bca1:	e9 2e 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bca6 <irq14>:
c001bca6:	fa                   	cli    
c001bca7:	6a 00                	push   0x0
c001bca9:	6a 2e                	push   0x2e
c001bcab:	e9 24 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bcb0 <irq15>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 00                	push   0x0
c001bcb3:	6a 2f                	push   0x2f
c001bcb5:	e9 1a 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bcba <irq1>:
c001bcba:	fa                   	cli    
c001bcbb:	6a 00                	push   0x0
c001bcbd:	6a 21                	push   0x21
c001bcbf:	eb 13                	jmp    c001bcd4 <int_common_stub>

c001bcc1 <irq2>:
c001bcc1:	fa                   	cli    
c001bcc2:	6a 00                	push   0x0
c001bcc4:	6a 22                	push   0x22
c001bcc6:	eb 0c                	jmp    c001bcd4 <int_common_stub>

c001bcc8 <isr96>:
c001bcc8:	6a 00                	push   0x0
c001bcca:	6a 60                	push   0x60
c001bccc:	fb                   	sti    
c001bccd:	eb 37                	jmp    c001bd06 <syscall_common_stub>

c001bccf <irq0>:
c001bccf:	fa                   	cli    
c001bcd0:	6a 00                	push   0x0
c001bcd2:	6a 20                	push   0x20

c001bcd4 <int_common_stub>:
c001bcd4:	60                   	pusha  
c001bcd5:	1e                   	push   ds
c001bcd6:	06                   	push   es
c001bcd7:	0f a0                	push   fs
c001bcd9:	0f a8                	push   gs
c001bcdb:	66 b8 10 00          	mov    ax,0x10
c001bcdf:	66 8e d8             	mov    ds,ax
c001bce2:	66 8e c0             	mov    es,ax
c001bce5:	66 8e e0             	mov    fs,ax
c001bce8:	66 8e e8             	mov    gs,ax
c001bceb:	54                   	push   esp
c001bcec:	fc                   	cld    
c001bced:	e8 76 01 ff ff       	call   c000be68 <int_handler>
c001bcf2:	81 c4 04 00 00 00    	add    esp,0x4
c001bcf8:	0f a9                	pop    gs
c001bcfa:	0f a1                	pop    fs
c001bcfc:	07                   	pop    es
c001bcfd:	1f                   	pop    ds
c001bcfe:	61                   	popa   
c001bcff:	81 c4 08 00 00 00    	add    esp,0x8
c001bd05:	cf                   	iret   

c001bd06 <syscall_common_stub>:
c001bd06:	60                   	pusha  
c001bd07:	1e                   	push   ds
c001bd08:	06                   	push   es
c001bd09:	0f a0                	push   fs
c001bd0b:	0f a8                	push   gs
c001bd0d:	66 b8 10 00          	mov    ax,0x10
c001bd11:	66 8e d8             	mov    ds,ax
c001bd14:	66 8e c0             	mov    es,ax
c001bd17:	66 8e e0             	mov    fs,ax
c001bd1a:	66 8e e8             	mov    gs,ax
c001bd1d:	54                   	push   esp
c001bd1e:	fc                   	cld    
c001bd1f:	e8 44 01 ff ff       	call   c000be68 <int_handler>
c001bd24:	81 c4 04 00 00 00    	add    esp,0x4
c001bd2a:	0f a9                	pop    gs
c001bd2c:	0f a1                	pop    fs
c001bd2e:	07                   	pop    es
c001bd2f:	1f                   	pop    ds
c001bd30:	e8 1e 4a ff ff       	call   c0010753 <KiCheckSignalZ>
c001bd35:	3d 00 00 00 00       	cmp    eax,0x0
c001bd3a:	74 1d                	je     c001bd59 <syscall_common_stub.skipSignals>
c001bd3c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bd40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bd44:	89 e3                	mov    ebx,esp
c001bd46:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bd49:	51                   	push   ecx
c001bd4a:	68 61 bd 01 c0       	push   0xc001bd61
c001bd4f:	89 dc                	mov    esp,ebx
c001bd51:	61                   	popa   
c001bd52:	81 c4 08 00 00 00    	add    esp,0x8
c001bd58:	cf                   	iret   

c001bd59 <syscall_common_stub.skipSignals>:
c001bd59:	61                   	popa   
c001bd5a:	81 c4 08 00 00 00    	add    esp,0x8
c001bd60:	cf                   	iret   

c001bd61 <irq16>:
c001bd61:	fa                   	cli    
c001bd62:	6a 00                	push   0x0
c001bd64:	6a 30                	push   0x30
c001bd66:	e9 69 ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd6b <irq17>:
c001bd6b:	fa                   	cli    
c001bd6c:	6a 00                	push   0x0
c001bd6e:	6a 31                	push   0x31
c001bd70:	e9 5f ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd75 <irq18>:
c001bd75:	fa                   	cli    
c001bd76:	6a 00                	push   0x0
c001bd78:	6a 32                	push   0x32
c001bd7a:	e9 55 ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd7f <irq19>:
c001bd7f:	fa                   	cli    
c001bd80:	6a 00                	push   0x0
c001bd82:	6a 33                	push   0x33
c001bd84:	e9 4b ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd89 <irq20>:
c001bd89:	fa                   	cli    
c001bd8a:	6a 00                	push   0x0
c001bd8c:	6a 34                	push   0x34
c001bd8e:	e9 41 ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd93 <irq21>:
c001bd93:	fa                   	cli    
c001bd94:	6a 00                	push   0x0
c001bd96:	6a 35                	push   0x35
c001bd98:	e9 37 ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd9d <irq22>:
c001bd9d:	fa                   	cli    
c001bd9e:	6a 00                	push   0x0
c001bda0:	6a 36                	push   0x36
c001bda2:	e9 2d ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bda7 <irq23>:
c001bda7:	fa                   	cli    
c001bda8:	6a 00                	push   0x0
c001bdaa:	6a 37                	push   0x37
c001bdac:	e9 23 ff ff ff       	jmp    c001bcd4 <int_common_stub>
c001bdb1:	66 90                	xchg   ax,ax
c001bdb3:	66 90                	xchg   ax,ax
c001bdb5:	66 90                	xchg   ax,ax
c001bdb7:	66 90                	xchg   ax,ax
c001bdb9:	66 90                	xchg   ax,ax
c001bdbb:	66 90                	xchg   ax,ax
c001bdbd:	66 90                	xchg   ax,ax
c001bdbf:	90                   	nop

c001bdc0 <i386GetRDRAND>:
c001bdc0:	b9 64 00 00 00       	mov    ecx,0x64

c001bdc5 <retry>:
c001bdc5:	0f c7 f0             	rdrand eax
c001bdc8:	72 05                	jb     c001bdcf <retry.done>
c001bdca:	e2 f9                	loop   c001bdc5 <retry>

c001bdcc <retry.fail>:
c001bdcc:	31 c0                	xor    eax,eax
c001bdce:	c3                   	ret    

c001bdcf <retry.done>:
c001bdcf:	c3                   	ret    

c001bdd0 <absolutelyNoChanceInHell>:
c001bdd0:	b8 01 00 00 00       	mov    eax,0x1
c001bdd5:	0f a2                	cpuid  
c001bdd7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bddd:	74 06                	je     c001bde5 <sseDetect.noSSE>
c001bddf:	b8 01 00 00 00       	mov    eax,0x1
c001bde4:	c3                   	ret    

c001bde5 <sseDetect.noSSE>:
c001bde5:	31 c0                	xor    eax,eax
c001bde7:	c3                   	ret    

c001bde8 <sseSave>:
c001bde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdec:	0f ae 00             	fxsave [eax]
c001bdef:	c3                   	ret    

c001bdf0 <sseLoad>:
c001bdf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdf4:	0f ae 08             	fxrstor [eax]
c001bdf7:	c3                   	ret    

c001bdf8 <sseInit>:
c001bdf8:	e8 42 00 00 00       	call   c001be3f <x87Init>
c001bdfd:	0f 20 e0             	mov    eax,cr4
c001be00:	66 0d 00 06          	or     ax,0x600
c001be04:	0f 22 e0             	mov    cr4,eax
c001be07:	c3                   	ret    

c001be08 <sseClose>:
c001be08:	c3                   	ret    
c001be09:	66 90                	xchg   ax,ax
c001be0b:	66 90                	xchg   ax,ax
c001be0d:	66 90                	xchg   ax,ax
c001be0f:	90                   	nop

c001be10 <value_37F>:
c001be10:	7f 03                	jg     c001be15 <value_37A+0x1>

c001be12 <value_37E>:
c001be12:	7e 03                	jle    c001be17 <x87Detect+0x1>

c001be14 <value_37A>:
c001be14:	7a 03                	jp     c001be19 <x87Detect+0x3>

c001be16 <x87Detect>:
c001be16:	b8 01 00 00 00       	mov    eax,0x1
c001be1b:	0f a2                	cpuid  
c001be1d:	f7 c2 01 00 00 00    	test   edx,0x1
c001be23:	74 06                	je     c001be2b <x87Detect.nox87>
c001be25:	b8 01 00 00 00       	mov    eax,0x1
c001be2a:	c3                   	ret    

c001be2b <x87Detect.nox87>:
c001be2b:	b8 00 00 00 00       	mov    eax,0x0
c001be30:	c3                   	ret    

c001be31 <x87Save>:
c001be31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be35:	dd 30                	fnsave [eax]
c001be37:	c3                   	ret    

c001be38 <x87Load>:
c001be38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be3c:	dd 20                	frstor [eax]
c001be3e:	c3                   	ret    

c001be3f <x87Init>:
c001be3f:	0f 20 c0             	mov    eax,cr0
c001be42:	66 25 fb ff          	and    ax,0xfffb
c001be46:	66 0d 22 00          	or     ax,0x22
c001be4a:	0f 22 c0             	mov    cr0,eax
c001be4d:	db e3                	fninit 
c001be4f:	0f 06                	clts   
c001be51:	d9 2d 14 be 01 c0    	fldcw  WORD PTR ds:0xc001be14
c001be57:	c3                   	ret    

c001be58 <x87Close>:
c001be58:	c3                   	ret    
c001be59:	66 90                	xchg   ax,ax
c001be5b:	90                   	nop

c001be5c <__do_global_ctors_aux>:
c001be5c:	a1 0c ce 01 c0       	mov    eax,ds:0xc001ce0c
c001be61:	83 f8 ff             	cmp    eax,0xffffffff
c001be64:	74 1a                	je     c001be80 <__do_global_ctors_aux+0x24>
c001be66:	55                   	push   ebp
c001be67:	89 e5                	mov    ebp,esp
c001be69:	53                   	push   ebx
c001be6a:	52                   	push   edx
c001be6b:	bb 0c ce 01 c0       	mov    ebx,0xc001ce0c
c001be70:	ff d0                	call   eax
c001be72:	83 eb 04             	sub    ebx,0x4
c001be75:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be77:	83 f8 ff             	cmp    eax,0xffffffff
c001be7a:	75 f4                	jne    c001be70 <__do_global_ctors_aux+0x14>
c001be7c:	58                   	pop    eax
c001be7d:	5b                   	pop    ebx
c001be7e:	5d                   	pop    ebp
c001be7f:	c3                   	ret    
c001be80:	c3                   	ret    
c001be81:	66 90                	xchg   ax,ax
c001be83:	90                   	nop

c001be84 <__divdi3>:
c001be84:	55                   	push   ebp
c001be85:	57                   	push   edi
c001be86:	56                   	push   esi
c001be87:	53                   	push   ebx
c001be88:	83 ec 1c             	sub    esp,0x1c
c001be8b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bea2:	85 db                	test   ebx,ebx
c001bea4:	0f 88 8e 00 00 00    	js     c001bf38 <__divdi3+0xb4>
c001beaa:	89 dd                	mov    ebp,ebx
c001beac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001beb4:	89 d3                	mov    ebx,edx
c001beb6:	85 d2                	test   edx,edx
c001beb8:	79 0d                	jns    c001bec7 <__divdi3+0x43>
c001beba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bebe:	f7 d8                	neg    eax
c001bec0:	83 d2 00             	adc    edx,0x0
c001bec3:	f7 da                	neg    edx
c001bec5:	89 d3                	mov    ebx,edx
c001bec7:	89 c7                	mov    edi,eax
c001bec9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001becc:	85 db                	test   ebx,ebx
c001bece:	75 48                	jne    c001bf18 <__divdi3+0x94>
c001bed0:	39 ef                	cmp    edi,ebp
c001bed2:	76 24                	jbe    c001bef8 <__divdi3+0x74>
c001bed4:	89 ea                	mov    edx,ebp
c001bed6:	f7 f7                	div    edi
c001bed8:	89 c1                	mov    ecx,eax
c001beda:	31 f6                	xor    esi,esi
c001bedc:	89 c8                	mov    eax,ecx
c001bede:	89 f2                	mov    edx,esi
c001bee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bee4:	85 c9                	test   ecx,ecx
c001bee6:	74 07                	je     c001beef <__divdi3+0x6b>
c001bee8:	f7 d8                	neg    eax
c001beea:	83 d2 00             	adc    edx,0x0
c001beed:	f7 da                	neg    edx
c001beef:	83 c4 1c             	add    esp,0x1c
c001bef2:	5b                   	pop    ebx
c001bef3:	5e                   	pop    esi
c001bef4:	5f                   	pop    edi
c001bef5:	5d                   	pop    ebp
c001bef6:	c3                   	ret    
c001bef7:	90                   	nop
c001bef8:	85 ff                	test   edi,edi
c001befa:	75 0b                	jne    c001bf07 <__divdi3+0x83>
c001befc:	b8 01 00 00 00       	mov    eax,0x1
c001bf01:	31 d2                	xor    edx,edx
c001bf03:	f7 f3                	div    ebx
c001bf05:	89 c7                	mov    edi,eax
c001bf07:	31 d2                	xor    edx,edx
c001bf09:	89 e8                	mov    eax,ebp
c001bf0b:	f7 f7                	div    edi
c001bf0d:	89 c6                	mov    esi,eax
c001bf0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf12:	f7 f7                	div    edi
c001bf14:	89 c1                	mov    ecx,eax
c001bf16:	eb c4                	jmp    c001bedc <__divdi3+0x58>
c001bf18:	39 eb                	cmp    ebx,ebp
c001bf1a:	77 3c                	ja     c001bf58 <__divdi3+0xd4>
c001bf1c:	0f bd f3             	bsr    esi,ebx
c001bf1f:	83 f6 1f             	xor    esi,0x1f
c001bf22:	75 40                	jne    c001bf64 <__divdi3+0xe0>
c001bf24:	39 eb                	cmp    ebx,ebp
c001bf26:	72 09                	jb     c001bf31 <__divdi3+0xad>
c001bf28:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bf2b:	0f 87 97 00 00 00    	ja     c001bfc8 <__divdi3+0x144>
c001bf31:	b9 01 00 00 00       	mov    ecx,0x1
c001bf36:	eb a4                	jmp    c001bedc <__divdi3+0x58>
c001bf38:	f7 d9                	neg    ecx
c001bf3a:	83 d3 00             	adc    ebx,0x0
c001bf3d:	f7 db                	neg    ebx
c001bf3f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf42:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf46:	89 dd                	mov    ebp,ebx
c001bf48:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf50:	e9 5f ff ff ff       	jmp    c001beb4 <__divdi3+0x30>
c001bf55:	8d 76 00             	lea    esi,[esi+0x0]
c001bf58:	31 f6                	xor    esi,esi
c001bf5a:	31 c9                	xor    ecx,ecx
c001bf5c:	e9 7b ff ff ff       	jmp    c001bedc <__divdi3+0x58>
c001bf61:	8d 76 00             	lea    esi,[esi+0x0]
c001bf64:	b8 20 00 00 00       	mov    eax,0x20
c001bf69:	29 f0                	sub    eax,esi
c001bf6b:	89 f1                	mov    ecx,esi
c001bf6d:	d3 e3                	shl    ebx,cl
c001bf6f:	89 fa                	mov    edx,edi
c001bf71:	88 c1                	mov    cl,al
c001bf73:	d3 ea                	shr    edx,cl
c001bf75:	09 da                	or     edx,ebx
c001bf77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf7b:	89 f1                	mov    ecx,esi
c001bf7d:	d3 e7                	shl    edi,cl
c001bf7f:	89 eb                	mov    ebx,ebp
c001bf81:	88 c1                	mov    cl,al
c001bf83:	d3 eb                	shr    ebx,cl
c001bf85:	89 f1                	mov    ecx,esi
c001bf87:	d3 e5                	shl    ebp,cl
c001bf89:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf8c:	88 c1                	mov    cl,al
c001bf8e:	d3 ea                	shr    edx,cl
c001bf90:	09 d5                	or     ebp,edx
c001bf92:	89 e8                	mov    eax,ebp
c001bf94:	89 da                	mov    edx,ebx
c001bf96:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf9a:	89 d3                	mov    ebx,edx
c001bf9c:	89 c5                	mov    ebp,eax
c001bf9e:	f7 e7                	mul    edi
c001bfa0:	39 d3                	cmp    ebx,edx
c001bfa2:	72 18                	jb     c001bfbc <__divdi3+0x138>
c001bfa4:	74 0a                	je     c001bfb0 <__divdi3+0x12c>
c001bfa6:	89 e9                	mov    ecx,ebp
c001bfa8:	31 f6                	xor    esi,esi
c001bfaa:	e9 2d ff ff ff       	jmp    c001bedc <__divdi3+0x58>
c001bfaf:	90                   	nop
c001bfb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bfb3:	89 f1                	mov    ecx,esi
c001bfb5:	d3 e7                	shl    edi,cl
c001bfb7:	39 c7                	cmp    edi,eax
c001bfb9:	73 eb                	jae    c001bfa6 <__divdi3+0x122>
c001bfbb:	90                   	nop
c001bfbc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bfbf:	31 f6                	xor    esi,esi
c001bfc1:	e9 16 ff ff ff       	jmp    c001bedc <__divdi3+0x58>
c001bfc6:	66 90                	xchg   ax,ax
c001bfc8:	31 c9                	xor    ecx,ecx
c001bfca:	e9 0d ff ff ff       	jmp    c001bedc <__divdi3+0x58>
c001bfcf:	90                   	nop

c001bfd0 <__moddi3>:
c001bfd0:	55                   	push   ebp
c001bfd1:	57                   	push   edi
c001bfd2:	56                   	push   esi
c001bfd3:	53                   	push   ebx
c001bfd4:	83 ec 2c             	sub    esp,0x2c
c001bfd7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bfdb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bfdf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bfe3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bfe7:	85 db                	test   ebx,ebx
c001bfe9:	0f 88 85 00 00 00    	js     c001c074 <__moddi3+0xa4>
c001bfef:	89 de                	mov    esi,ebx
c001bff1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bff9:	89 d7                	mov    edi,edx
c001bffb:	85 d2                	test   edx,edx
c001bffd:	79 09                	jns    c001c008 <__moddi3+0x38>
c001bfff:	f7 d8                	neg    eax
c001c001:	83 d2 00             	adc    edx,0x0
c001c004:	f7 da                	neg    edx
c001c006:	89 d7                	mov    edi,edx
c001c008:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c00c:	89 cd                	mov    ebp,ecx
c001c00e:	85 ff                	test   edi,edi
c001c010:	75 52                	jne    c001c064 <__moddi3+0x94>
c001c012:	89 c3                	mov    ebx,eax
c001c014:	39 f0                	cmp    eax,esi
c001c016:	76 24                	jbe    c001c03c <__moddi3+0x6c>
c001c018:	89 c8                	mov    eax,ecx
c001c01a:	89 f2                	mov    edx,esi
c001c01c:	f7 f3                	div    ebx
c001c01e:	89 d6                	mov    esi,edx
c001c020:	89 f0                	mov    eax,esi
c001c022:	31 d2                	xor    edx,edx
c001c024:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c028:	85 c9                	test   ecx,ecx
c001c02a:	74 07                	je     c001c033 <__moddi3+0x63>
c001c02c:	f7 d8                	neg    eax
c001c02e:	83 d2 00             	adc    edx,0x0
c001c031:	f7 da                	neg    edx
c001c033:	83 c4 2c             	add    esp,0x2c
c001c036:	5b                   	pop    ebx
c001c037:	5e                   	pop    esi
c001c038:	5f                   	pop    edi
c001c039:	5d                   	pop    ebp
c001c03a:	c3                   	ret    
c001c03b:	90                   	nop
c001c03c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c040:	85 db                	test   ebx,ebx
c001c042:	75 0d                	jne    c001c051 <__moddi3+0x81>
c001c044:	b8 01 00 00 00       	mov    eax,0x1
c001c049:	31 d2                	xor    edx,edx
c001c04b:	f7 f7                	div    edi
c001c04d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c051:	89 f0                	mov    eax,esi
c001c053:	31 d2                	xor    edx,edx
c001c055:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c059:	f7 f7                	div    edi
c001c05b:	89 e8                	mov    eax,ebp
c001c05d:	f7 f7                	div    edi
c001c05f:	89 d6                	mov    esi,edx
c001c061:	eb bd                	jmp    c001c020 <__moddi3+0x50>
c001c063:	90                   	nop
c001c064:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c068:	39 f7                	cmp    edi,esi
c001c06a:	76 20                	jbe    c001c08c <__moddi3+0xbc>
c001c06c:	89 c8                	mov    eax,ecx
c001c06e:	89 f2                	mov    edx,esi
c001c070:	eb b2                	jmp    c001c024 <__moddi3+0x54>
c001c072:	66 90                	xchg   ax,ax
c001c074:	f7 d9                	neg    ecx
c001c076:	83 d3 00             	adc    ebx,0x0
c001c079:	f7 db                	neg    ebx
c001c07b:	89 de                	mov    esi,ebx
c001c07d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c085:	e9 6f ff ff ff       	jmp    c001bff9 <__moddi3+0x29>
c001c08a:	66 90                	xchg   ax,ax
c001c08c:	0f bd c7             	bsr    eax,edi
c001c08f:	83 f0 1f             	xor    eax,0x1f
c001c092:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c096:	75 24                	jne    c001c0bc <__moddi3+0xec>
c001c098:	39 f7                	cmp    edi,esi
c001c09a:	72 06                	jb     c001c0a2 <__moddi3+0xd2>
c001c09c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c0a0:	77 0c                	ja     c001c0ae <__moddi3+0xde>
c001c0a2:	89 e9                	mov    ecx,ebp
c001c0a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c0a8:	19 fe                	sbb    esi,edi
c001c0aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0b2:	89 f2                	mov    edx,esi
c001c0b4:	e9 6b ff ff ff       	jmp    c001c024 <__moddi3+0x54>
c001c0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0bc:	b8 20 00 00 00       	mov    eax,0x20
c001c0c1:	89 c2                	mov    edx,eax
c001c0c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c0c7:	29 da                	sub    edx,ebx
c001c0c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c0cd:	88 d9                	mov    cl,bl
c001c0cf:	d3 e7                	shl    edi,cl
c001c0d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0d5:	88 d1                	mov    cl,dl
c001c0d7:	d3 e8                	shr    eax,cl
c001c0d9:	09 c7                	or     edi,eax
c001c0db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c0df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0e3:	89 d8                	mov    eax,ebx
c001c0e5:	88 d9                	mov    cl,bl
c001c0e7:	d3 e7                	shl    edi,cl
c001c0e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c0ed:	89 f3                	mov    ebx,esi
c001c0ef:	88 d1                	mov    cl,dl
c001c0f1:	d3 eb                	shr    ebx,cl
c001c0f3:	89 c7                	mov    edi,eax
c001c0f5:	88 c1                	mov    cl,al
c001c0f7:	d3 e6                	shl    esi,cl
c001c0f9:	89 e8                	mov    eax,ebp
c001c0fb:	88 d1                	mov    cl,dl
c001c0fd:	d3 e8                	shr    eax,cl
c001c0ff:	09 f0                	or     eax,esi
c001c101:	89 f9                	mov    ecx,edi
c001c103:	d3 e5                	shl    ebp,cl
c001c105:	89 da                	mov    edx,ebx
c001c107:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c10b:	89 d3                	mov    ebx,edx
c001c10d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c111:	89 c6                	mov    esi,eax
c001c113:	89 d1                	mov    ecx,edx
c001c115:	39 d3                	cmp    ebx,edx
c001c117:	72 27                	jb     c001c140 <__moddi3+0x170>
c001c119:	74 21                	je     c001c13c <__moddi3+0x16c>
c001c11b:	29 f5                	sub    ebp,esi
c001c11d:	19 cb                	sbb    ebx,ecx
c001c11f:	89 de                	mov    esi,ebx
c001c121:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c125:	d3 e6                	shl    esi,cl
c001c127:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c12b:	89 f9                	mov    ecx,edi
c001c12d:	d3 ed                	shr    ebp,cl
c001c12f:	09 ee                	or     esi,ebp
c001c131:	89 f0                	mov    eax,esi
c001c133:	d3 eb                	shr    ebx,cl
c001c135:	89 da                	mov    edx,ebx
c001c137:	e9 e8 fe ff ff       	jmp    c001c024 <__moddi3+0x54>
c001c13c:	39 c5                	cmp    ebp,eax
c001c13e:	73 db                	jae    c001c11b <__moddi3+0x14b>
c001c140:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c144:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c148:	89 d1                	mov    ecx,edx
c001c14a:	89 c6                	mov    esi,eax
c001c14c:	eb cd                	jmp    c001c11b <__moddi3+0x14b>
c001c14e:	66 90                	xchg   ax,ax

c001c150 <__udivdi3>:
c001c150:	55                   	push   ebp
c001c151:	57                   	push   edi
c001c152:	56                   	push   esi
c001c153:	53                   	push   ebx
c001c154:	83 ec 1c             	sub    esp,0x1c
c001c157:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c15b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c15f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c163:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c167:	85 d2                	test   edx,edx
c001c169:	75 41                	jne    c001c1ac <__udivdi3+0x5c>
c001c16b:	39 f7                	cmp    edi,esi
c001c16d:	76 15                	jbe    c001c184 <__udivdi3+0x34>
c001c16f:	89 e8                	mov    eax,ebp
c001c171:	89 f2                	mov    edx,esi
c001c173:	f7 f7                	div    edi
c001c175:	31 db                	xor    ebx,ebx
c001c177:	89 da                	mov    edx,ebx
c001c179:	83 c4 1c             	add    esp,0x1c
c001c17c:	5b                   	pop    ebx
c001c17d:	5e                   	pop    esi
c001c17e:	5f                   	pop    edi
c001c17f:	5d                   	pop    ebp
c001c180:	c3                   	ret    
c001c181:	8d 76 00             	lea    esi,[esi+0x0]
c001c184:	89 f9                	mov    ecx,edi
c001c186:	85 ff                	test   edi,edi
c001c188:	75 0b                	jne    c001c195 <__udivdi3+0x45>
c001c18a:	b8 01 00 00 00       	mov    eax,0x1
c001c18f:	31 d2                	xor    edx,edx
c001c191:	f7 f7                	div    edi
c001c193:	89 c1                	mov    ecx,eax
c001c195:	31 d2                	xor    edx,edx
c001c197:	89 f0                	mov    eax,esi
c001c199:	f7 f1                	div    ecx
c001c19b:	89 c3                	mov    ebx,eax
c001c19d:	89 e8                	mov    eax,ebp
c001c19f:	f7 f1                	div    ecx
c001c1a1:	89 da                	mov    edx,ebx
c001c1a3:	83 c4 1c             	add    esp,0x1c
c001c1a6:	5b                   	pop    ebx
c001c1a7:	5e                   	pop    esi
c001c1a8:	5f                   	pop    edi
c001c1a9:	5d                   	pop    ebp
c001c1aa:	c3                   	ret    
c001c1ab:	90                   	nop
c001c1ac:	39 f2                	cmp    edx,esi
c001c1ae:	77 1c                	ja     c001c1cc <__udivdi3+0x7c>
c001c1b0:	0f bd da             	bsr    ebx,edx
c001c1b3:	83 f3 1f             	xor    ebx,0x1f
c001c1b6:	75 24                	jne    c001c1dc <__udivdi3+0x8c>
c001c1b8:	39 f2                	cmp    edx,esi
c001c1ba:	72 08                	jb     c001c1c4 <__udivdi3+0x74>
c001c1bc:	39 ef                	cmp    edi,ebp
c001c1be:	0f 87 84 00 00 00    	ja     c001c248 <__udivdi3+0xf8>
c001c1c4:	b8 01 00 00 00       	mov    eax,0x1
c001c1c9:	eb ac                	jmp    c001c177 <__udivdi3+0x27>
c001c1cb:	90                   	nop
c001c1cc:	31 db                	xor    ebx,ebx
c001c1ce:	31 c0                	xor    eax,eax
c001c1d0:	89 da                	mov    edx,ebx
c001c1d2:	83 c4 1c             	add    esp,0x1c
c001c1d5:	5b                   	pop    ebx
c001c1d6:	5e                   	pop    esi
c001c1d7:	5f                   	pop    edi
c001c1d8:	5d                   	pop    ebp
c001c1d9:	c3                   	ret    
c001c1da:	66 90                	xchg   ax,ax
c001c1dc:	b8 20 00 00 00       	mov    eax,0x20
c001c1e1:	29 d8                	sub    eax,ebx
c001c1e3:	88 d9                	mov    cl,bl
c001c1e5:	d3 e2                	shl    edx,cl
c001c1e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c1eb:	89 fa                	mov    edx,edi
c001c1ed:	88 c1                	mov    cl,al
c001c1ef:	d3 ea                	shr    edx,cl
c001c1f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1f5:	09 d1                	or     ecx,edx
c001c1f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c1fb:	88 d9                	mov    cl,bl
c001c1fd:	d3 e7                	shl    edi,cl
c001c1ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c203:	89 f7                	mov    edi,esi
c001c205:	88 c1                	mov    cl,al
c001c207:	d3 ef                	shr    edi,cl
c001c209:	88 d9                	mov    cl,bl
c001c20b:	d3 e6                	shl    esi,cl
c001c20d:	89 ea                	mov    edx,ebp
c001c20f:	88 c1                	mov    cl,al
c001c211:	d3 ea                	shr    edx,cl
c001c213:	09 d6                	or     esi,edx
c001c215:	89 f0                	mov    eax,esi
c001c217:	89 fa                	mov    edx,edi
c001c219:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c21d:	89 d7                	mov    edi,edx
c001c21f:	89 c6                	mov    esi,eax
c001c221:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c225:	39 d7                	cmp    edi,edx
c001c227:	72 13                	jb     c001c23c <__udivdi3+0xec>
c001c229:	74 09                	je     c001c234 <__udivdi3+0xe4>
c001c22b:	89 f0                	mov    eax,esi
c001c22d:	31 db                	xor    ebx,ebx
c001c22f:	e9 43 ff ff ff       	jmp    c001c177 <__udivdi3+0x27>
c001c234:	88 d9                	mov    cl,bl
c001c236:	d3 e5                	shl    ebp,cl
c001c238:	39 c5                	cmp    ebp,eax
c001c23a:	73 ef                	jae    c001c22b <__udivdi3+0xdb>
c001c23c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c23f:	31 db                	xor    ebx,ebx
c001c241:	e9 31 ff ff ff       	jmp    c001c177 <__udivdi3+0x27>
c001c246:	66 90                	xchg   ax,ax
c001c248:	31 c0                	xor    eax,eax
c001c24a:	e9 28 ff ff ff       	jmp    c001c177 <__udivdi3+0x27>
c001c24f:	90                   	nop

c001c250 <__umoddi3>:
c001c250:	55                   	push   ebp
c001c251:	57                   	push   edi
c001c252:	56                   	push   esi
c001c253:	53                   	push   ebx
c001c254:	83 ec 1c             	sub    esp,0x1c
c001c257:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c25b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c25f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c267:	89 da                	mov    edx,ebx
c001c269:	85 c0                	test   eax,eax
c001c26b:	75 37                	jne    c001c2a4 <__umoddi3+0x54>
c001c26d:	39 df                	cmp    edi,ebx
c001c26f:	76 13                	jbe    c001c284 <__umoddi3+0x34>
c001c271:	89 f0                	mov    eax,esi
c001c273:	f7 f7                	div    edi
c001c275:	89 d0                	mov    eax,edx
c001c277:	31 d2                	xor    edx,edx
c001c279:	83 c4 1c             	add    esp,0x1c
c001c27c:	5b                   	pop    ebx
c001c27d:	5e                   	pop    esi
c001c27e:	5f                   	pop    edi
c001c27f:	5d                   	pop    ebp
c001c280:	c3                   	ret    
c001c281:	8d 76 00             	lea    esi,[esi+0x0]
c001c284:	89 fd                	mov    ebp,edi
c001c286:	85 ff                	test   edi,edi
c001c288:	75 0b                	jne    c001c295 <__umoddi3+0x45>
c001c28a:	b8 01 00 00 00       	mov    eax,0x1
c001c28f:	31 d2                	xor    edx,edx
c001c291:	f7 f7                	div    edi
c001c293:	89 c5                	mov    ebp,eax
c001c295:	89 d8                	mov    eax,ebx
c001c297:	31 d2                	xor    edx,edx
c001c299:	f7 f5                	div    ebp
c001c29b:	89 f0                	mov    eax,esi
c001c29d:	f7 f5                	div    ebp
c001c29f:	89 d0                	mov    eax,edx
c001c2a1:	eb d4                	jmp    c001c277 <__umoddi3+0x27>
c001c2a3:	90                   	nop
c001c2a4:	89 f1                	mov    ecx,esi
c001c2a6:	39 d8                	cmp    eax,ebx
c001c2a8:	76 0a                	jbe    c001c2b4 <__umoddi3+0x64>
c001c2aa:	89 f0                	mov    eax,esi
c001c2ac:	83 c4 1c             	add    esp,0x1c
c001c2af:	5b                   	pop    ebx
c001c2b0:	5e                   	pop    esi
c001c2b1:	5f                   	pop    edi
c001c2b2:	5d                   	pop    ebp
c001c2b3:	c3                   	ret    
c001c2b4:	0f bd e8             	bsr    ebp,eax
c001c2b7:	83 f5 1f             	xor    ebp,0x1f
c001c2ba:	75 1c                	jne    c001c2d8 <__umoddi3+0x88>
c001c2bc:	39 d8                	cmp    eax,ebx
c001c2be:	72 04                	jb     c001c2c4 <__umoddi3+0x74>
c001c2c0:	39 f7                	cmp    edi,esi
c001c2c2:	77 08                	ja     c001c2cc <__umoddi3+0x7c>
c001c2c4:	89 da                	mov    edx,ebx
c001c2c6:	29 fe                	sub    esi,edi
c001c2c8:	19 c2                	sbb    edx,eax
c001c2ca:	89 f1                	mov    ecx,esi
c001c2cc:	89 c8                	mov    eax,ecx
c001c2ce:	83 c4 1c             	add    esp,0x1c
c001c2d1:	5b                   	pop    ebx
c001c2d2:	5e                   	pop    esi
c001c2d3:	5f                   	pop    edi
c001c2d4:	5d                   	pop    ebp
c001c2d5:	c3                   	ret    
c001c2d6:	66 90                	xchg   ax,ax
c001c2d8:	ba 20 00 00 00       	mov    edx,0x20
c001c2dd:	29 ea                	sub    edx,ebp
c001c2df:	89 e9                	mov    ecx,ebp
c001c2e1:	d3 e0                	shl    eax,cl
c001c2e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2e7:	89 f8                	mov    eax,edi
c001c2e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c2ed:	88 d1                	mov    cl,dl
c001c2ef:	d3 e8                	shr    eax,cl
c001c2f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2f5:	09 c1                	or     ecx,eax
c001c2f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2fb:	89 e9                	mov    ecx,ebp
c001c2fd:	d3 e7                	shl    edi,cl
c001c2ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c303:	89 d8                	mov    eax,ebx
c001c305:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c309:	88 d1                	mov    cl,dl
c001c30b:	d3 e8                	shr    eax,cl
c001c30d:	89 c7                	mov    edi,eax
c001c30f:	89 e9                	mov    ecx,ebp
c001c311:	d3 e3                	shl    ebx,cl
c001c313:	89 f0                	mov    eax,esi
c001c315:	88 d1                	mov    cl,dl
c001c317:	d3 e8                	shr    eax,cl
c001c319:	09 d8                	or     eax,ebx
c001c31b:	89 e9                	mov    ecx,ebp
c001c31d:	d3 e6                	shl    esi,cl
c001c31f:	89 f3                	mov    ebx,esi
c001c321:	89 fa                	mov    edx,edi
c001c323:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c327:	89 d1                	mov    ecx,edx
c001c329:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c32d:	89 c6                	mov    esi,eax
c001c32f:	89 d7                	mov    edi,edx
c001c331:	39 d1                	cmp    ecx,edx
c001c333:	72 27                	jb     c001c35c <__umoddi3+0x10c>
c001c335:	74 21                	je     c001c358 <__umoddi3+0x108>
c001c337:	89 ca                	mov    edx,ecx
c001c339:	29 f3                	sub    ebx,esi
c001c33b:	19 fa                	sbb    edx,edi
c001c33d:	89 d0                	mov    eax,edx
c001c33f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c343:	d3 e0                	shl    eax,cl
c001c345:	89 e9                	mov    ecx,ebp
c001c347:	d3 eb                	shr    ebx,cl
c001c349:	09 d8                	or     eax,ebx
c001c34b:	d3 ea                	shr    edx,cl
c001c34d:	83 c4 1c             	add    esp,0x1c
c001c350:	5b                   	pop    ebx
c001c351:	5e                   	pop    esi
c001c352:	5f                   	pop    edi
c001c353:	5d                   	pop    ebp
c001c354:	c3                   	ret    
c001c355:	8d 76 00             	lea    esi,[esi+0x0]
c001c358:	39 c3                	cmp    ebx,eax
c001c35a:	73 db                	jae    c001c337 <__umoddi3+0xe7>
c001c35c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c360:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c364:	89 d7                	mov    edi,edx
c001c366:	89 c6                	mov    esi,eax
c001c368:	eb cd                	jmp    c001c337 <__umoddi3+0xe7>

Disassembly of section .init:

c001c36a <_init>:
c001c36a:	55                   	push   ebp
c001c36b:	89 e5                	mov    ebp,esp
c001c36d:	e8 82 3d fe ff       	call   c00000f4 <frame_dummy>
c001c372:	e8 e5 fa ff ff       	call   c001be5c <__do_global_ctors_aux>
c001c377:	5d                   	pop    ebp
c001c378:	c3                   	ret    

Disassembly of section .fini:

c001c379 <_fini>:
c001c379:	55                   	push   ebp
c001c37a:	89 e5                	mov    ebp,esp
c001c37c:	e8 03 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c381:	5d                   	pop    ebp
c001c382:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c384 <Computer::~Computer()>:
c001c384:	83 ec 0c             	sub    esp,0xc
c001c387:	ba 38 d6 01 c0       	mov    edx,0xc001d638
c001c38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c390:	89 10                	mov    DWORD PTR [eax],edx
c001c392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	50                   	push   eax
c001c39a:	e8 1f f5 fe ff       	call   c000b8be <Device::~Device()>
c001c39f:	83 c4 10             	add    esp,0x10
c001c3a2:	90                   	nop
c001c3a3:	83 c4 0c             	add    esp,0xc
c001c3a6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c3a8 <Computer::~Computer()>:
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	83 ec 0c             	sub    esp,0xc
c001c3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3b2:	e8 cd ff ff ff       	call   c001c384 <Computer::~Computer()>
c001c3b7:	83 c4 10             	add    esp,0x10
c001c3ba:	83 ec 08             	sub    esp,0x8
c001c3bd:	68 70 01 00 00       	push   0x170
c001c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c6:	e8 bc e0 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001c3cb:	83 c4 10             	add    esp,0x10
c001c3ce:	83 c4 0c             	add    esp,0xc
c001c3d1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c3d2 <idleCommon()>:
c001c3d2:	83 ec 0c             	sub    esp,0xc
c001c3d5:	fa                   	cli    
c001c3d6:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c3dc:	e8 13 74 ff ff       	call   c00137f4 <schedule()>
c001c3e1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c3e6:	48                   	dec    eax
c001c3e7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c3ec:	75 01                	jne    c001c3ef <idleCommon()+0x1d>
c001c3ee:	fb                   	sti    
c001c3ef:	83 c4 0c             	add    esp,0xc
c001c3f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c3f4 <LinkedList<UnixFile>::~LinkedList()>:
c001c3f4:	90                   	nop
c001c3f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c3f6 <LinkedList<UnixFile>::LinkedList()>:
c001c3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c404:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c40b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c40f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c41a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c424:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c42b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c42f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c436:	90                   	nop
c001c437:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c438 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c438:	83 ec 0c             	sub    esp,0xc
c001c43b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c440:	75 10                	jne    c001c452 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c442:	83 ec 0c             	sub    esp,0xc
c001c445:	68 98 d8 01 c0       	push   0xc001d898
c001c44a:	e8 b0 3d ff ff       	call   c00101ff <KePanic(char const*)>
c001c44f:	83 c4 10             	add    esp,0x10
c001c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c456:	8b 00                	mov    eax,DWORD PTR [eax]
c001c458:	85 c0                	test   eax,eax
c001c45a:	74 34                	je     c001c490 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c463:	85 c0                	test   eax,eax
c001c465:	74 29                	je     c001c490 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c46e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c472:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c479:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c47d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c487:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c48e:	eb 65                	jmp    c001c4f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c494:	8b 00                	mov    eax,DWORD PTR [eax]
c001c496:	85 c0                	test   eax,eax
c001c498:	75 4b                	jne    c001c4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4a1:	85 c0                	test   eax,eax
c001c4a3:	75 40                	jne    c001c4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4ad:	89 10                	mov    DWORD PTR [eax],edx
c001c4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4cf:	85 c0                	test   eax,eax
c001c4d1:	74 22                	je     c001c4f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4d3:	83 ec 0c             	sub    esp,0xc
c001c4d6:	68 ba d8 01 c0       	push   0xc001d8ba
c001c4db:	e8 1f 3d ff ff       	call   c00101ff <KePanic(char const*)>
c001c4e0:	83 c4 10             	add    esp,0x10
c001c4e3:	eb 10                	jmp    c001c4f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4e5:	83 ec 0c             	sub    esp,0xc
c001c4e8:	68 c4 d8 01 c0       	push   0xc001d8c4
c001c4ed:	e8 0d 3d ff ff       	call   c00101ff <KePanic(char const*)>
c001c4f2:	83 c4 10             	add    esp,0x10
c001c4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4fc:	8d 50 01             	lea    edx,[eax+0x1]
c001c4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c503:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c506:	90                   	nop
c001c507:	83 c4 0c             	add    esp,0xc
c001c50a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c50c <LinkedList<UnixFile>::getFirstElement()>:
c001c50c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c510:	8b 00                	mov    eax,DWORD PTR [eax]
c001c512:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c514 <LinkedList<UnixFile>::removeFirst()>:
c001c514:	83 ec 0c             	sub    esp,0xc
c001c517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c51d:	85 c0                	test   eax,eax
c001c51f:	75 12                	jne    c001c533 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c521:	83 ec 0c             	sub    esp,0xc
c001c524:	68 d0 d8 01 c0       	push   0xc001d8d0
c001c529:	e8 d1 3c ff ff       	call   c00101ff <KePanic(char const*)>
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	eb 7e                	jmp    c001c5b1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c537:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c53a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c53d:	85 c0                	test   eax,eax
c001c53f:	74 10                	je     c001c551 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c541:	83 ec 0c             	sub    esp,0xc
c001c544:	68 1b d9 01 c0       	push   0xc001d91b
c001c549:	e8 b1 3c ff ff       	call   c00101ff <KePanic(char const*)>
c001c54e:	83 c4 10             	add    esp,0x10
c001c551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c555:	8b 00                	mov    eax,DWORD PTR [eax]
c001c557:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c55a:	85 c0                	test   eax,eax
c001c55c:	75 33                	jne    c001c591 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c562:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c577:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c57a:	83 f8 01             	cmp    eax,0x1
c001c57d:	74 21                	je     c001c5a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c57f:	83 ec 0c             	sub    esp,0xc
c001c582:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c587:	e8 73 3c ff ff       	call   c00101ff <KePanic(char const*)>
c001c58c:	83 c4 10             	add    esp,0x10
c001c58f:	eb 0f                	jmp    c001c5a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c595:	8b 00                	mov    eax,DWORD PTR [eax]
c001c597:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59e:	89 10                	mov    DWORD PTR [eax],edx
c001c5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5b1:	83 c4 0c             	add    esp,0xc
c001c5b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c5b6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c5b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c5be <DriverlessDevice::~DriverlessDevice()>:
c001c5be:	ba 9c df 01 c0       	mov    edx,0xc001df9c
c001c5c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c7:	89 10                	mov    DWORD PTR [eax],edx
c001c5c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cd:	50                   	push   eax
c001c5ce:	e8 eb f2 fe ff       	call   c000b8be <Device::~Device()>
c001c5d3:	83 c4 04             	add    esp,0x4
c001c5d6:	90                   	nop
c001c5d7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c5d8 <DriverlessDevice::~DriverlessDevice()>:
c001c5d8:	83 ec 0c             	sub    esp,0xc
c001c5db:	83 ec 0c             	sub    esp,0xc
c001c5de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5e2:	e8 d7 ff ff ff       	call   c001c5be <DriverlessDevice::~DriverlessDevice()>
c001c5e7:	83 c4 10             	add    esp,0x10
c001c5ea:	83 ec 08             	sub    esp,0x8
c001c5ed:	68 58 01 00 00       	push   0x158
c001c5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f6:	e8 8c de fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	83 c4 0c             	add    esp,0xc
c001c601:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c602 <LinkedList<Device>::addElement(Device*)>:
c001c602:	83 ec 0c             	sub    esp,0xc
c001c605:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c60a:	75 10                	jne    c001c61c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c60c:	83 ec 0c             	sub    esp,0xc
c001c60f:	68 98 d8 01 c0       	push   0xc001d898
c001c614:	e8 e6 3b ff ff       	call   c00101ff <KePanic(char const*)>
c001c619:	83 c4 10             	add    esp,0x10
c001c61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c620:	8b 00                	mov    eax,DWORD PTR [eax]
c001c622:	85 c0                	test   eax,eax
c001c624:	74 3a                	je     c001c660 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c62d:	85 c0                	test   eax,eax
c001c62f:	74 2f                	je     c001c660 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c635:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c638:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c63c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c646:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c64a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c651:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c654:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c65e:	eb 68                	jmp    c001c6c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c664:	8b 00                	mov    eax,DWORD PTR [eax]
c001c666:	85 c0                	test   eax,eax
c001c668:	75 4e                	jne    c001c6b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c671:	85 c0                	test   eax,eax
c001c673:	75 43                	jne    c001c6b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c679:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c67d:	89 10                	mov    DWORD PTR [eax],edx
c001c67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c683:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c687:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c691:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c69b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6a2:	85 c0                	test   eax,eax
c001c6a4:	74 22                	je     c001c6c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6a6:	83 ec 0c             	sub    esp,0xc
c001c6a9:	68 ba d8 01 c0       	push   0xc001d8ba
c001c6ae:	e8 4c 3b ff ff       	call   c00101ff <KePanic(char const*)>
c001c6b3:	83 c4 10             	add    esp,0x10
c001c6b6:	eb 10                	jmp    c001c6c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6b8:	83 ec 0c             	sub    esp,0xc
c001c6bb:	68 c4 d8 01 c0       	push   0xc001d8c4
c001c6c0:	e8 3a 3b ff ff       	call   c00101ff <KePanic(char const*)>
c001c6c5:	83 c4 10             	add    esp,0x10
c001c6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6cf:	8d 50 01             	lea    edx,[eax+0x1]
c001c6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6d9:	90                   	nop
c001c6da:	83 c4 0c             	add    esp,0xc
c001c6dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c6de <LinkedList<Device>::LinkedList()>:
c001c6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c702:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c70c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c717:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c71e:	90                   	nop
c001c71f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c724:	8b 00                	mov    eax,DWORD PTR [eax]
c001c726:	85 c0                	test   eax,eax
c001c728:	75 0e                	jne    c001c738 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c72e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c731:	85 c0                	test   eax,eax
c001c733:	75 03                	jne    c001c738 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c735:	b0 01                	mov    al,0x1
c001c737:	c3                   	ret    
c001c738:	b0 00                	mov    al,0x0
c001c73a:	90                   	nop
c001c73b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c740:	8b 00                	mov    eax,DWORD PTR [eax]
c001c742:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c744:	83 ec 0c             	sub    esp,0xc
c001c747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c74d:	85 c0                	test   eax,eax
c001c74f:	75 17                	jne    c001c768 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c751:	83 ec 0c             	sub    esp,0xc
c001c754:	68 d0 d8 01 c0       	push   0xc001d8d0
c001c759:	e8 a1 3a ff ff       	call   c00101ff <KePanic(char const*)>
c001c75e:	83 c4 10             	add    esp,0x10
c001c761:	e9 92 00 00 00       	jmp    c001c7f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c766:	66 90                	xchg   ax,ax
c001c768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c76f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c772:	85 c0                	test   eax,eax
c001c774:	0f 95 c0             	setne  al
c001c777:	84 c0                	test   al,al
c001c779:	74 11                	je     c001c78c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c77b:	83 ec 0c             	sub    esp,0xc
c001c77e:	68 1b d9 01 c0       	push   0xc001d91b
c001c783:	e8 77 3a ff ff       	call   c00101ff <KePanic(char const*)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	90                   	nop
c001c78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c790:	8b 00                	mov    eax,DWORD PTR [eax]
c001c792:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c795:	85 c0                	test   eax,eax
c001c797:	0f 94 c0             	sete   al
c001c79a:	84 c0                	test   al,al
c001c79c:	74 36                	je     c001c7d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7ba:	83 f8 01             	cmp    eax,0x1
c001c7bd:	74 25                	je     c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7bf:	83 ec 0c             	sub    esp,0xc
c001c7c2:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c7c7:	e8 33 3a ff ff       	call   c00101ff <KePanic(char const*)>
c001c7cc:	83 c4 10             	add    esp,0x10
c001c7cf:	eb 13                	jmp    c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7da:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e1:	89 10                	mov    DWORD PTR [eax],edx
c001c7e3:	90                   	nop
c001c7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7eb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7f8:	83 c4 0c             	add    esp,0xc
c001c7fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c7fc:	83 ec 0c             	sub    esp,0xc
c001c7ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c804:	75 12                	jne    c001c818 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c806:	83 ec 0c             	sub    esp,0xc
c001c809:	68 98 d8 01 c0       	push   0xc001d898
c001c80e:	e8 ec 39 ff ff       	call   c00101ff <KePanic(char const*)>
c001c813:	83 c4 10             	add    esp,0x10
c001c816:	66 90                	xchg   ax,ax
c001c818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c81e:	85 c0                	test   eax,eax
c001c820:	74 36                	je     c001c858 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c829:	85 c0                	test   eax,eax
c001c82b:	74 2b                	je     c001c858 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c831:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c834:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c838:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c843:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c84d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c854:	eb 6a                	jmp    c001c8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c856:	66 90                	xchg   ax,ax
c001c858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c85e:	85 c0                	test   eax,eax
c001c860:	75 4e                	jne    c001c8b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c869:	85 c0                	test   eax,eax
c001c86b:	75 43                	jne    c001c8b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c871:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c875:	89 10                	mov    DWORD PTR [eax],edx
c001c877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c87f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c889:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c894:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c897:	85 c0                	test   eax,eax
c001c899:	74 25                	je     c001c8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c89b:	83 ec 0c             	sub    esp,0xc
c001c89e:	68 ba d8 01 c0       	push   0xc001d8ba
c001c8a3:	e8 57 39 ff ff       	call   c00101ff <KePanic(char const*)>
c001c8a8:	83 c4 10             	add    esp,0x10
c001c8ab:	eb 13                	jmp    c001c8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b0:	83 ec 0c             	sub    esp,0xc
c001c8b3:	68 c4 d8 01 c0       	push   0xc001d8c4
c001c8b8:	e8 42 39 ff ff       	call   c00101ff <KePanic(char const*)>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8c7:	8d 50 01             	lea    edx,[eax+0x1]
c001c8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8d1:	90                   	nop
c001c8d2:	83 c4 0c             	add    esp,0xc
c001c8d5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c8d8 <ACPI::~ACPI()>:
c001c8d8:	83 ec 0c             	sub    esp,0xc
c001c8db:	ba 14 e5 01 c0       	mov    edx,0xc001e514
c001c8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e4:	89 10                	mov    DWORD PTR [eax],edx
c001c8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ea:	83 ec 0c             	sub    esp,0xc
c001c8ed:	50                   	push   eax
c001c8ee:	e8 cb ef fe ff       	call   c000b8be <Device::~Device()>
c001c8f3:	83 c4 10             	add    esp,0x10
c001c8f6:	90                   	nop
c001c8f7:	83 c4 0c             	add    esp,0xc
c001c8fa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c8fc <ACPI::~ACPI()>:
c001c8fc:	83 ec 0c             	sub    esp,0xc
c001c8ff:	83 ec 0c             	sub    esp,0xc
c001c902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c906:	e8 cd ff ff ff       	call   c001c8d8 <ACPI::~ACPI()>
c001c90b:	83 c4 10             	add    esp,0x10
c001c90e:	83 ec 08             	sub    esp,0x8
c001c911:	68 64 12 00 00       	push   0x1264
c001c916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c91a:	e8 68 db fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	83 c4 0c             	add    esp,0xc
c001c925:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c928 <LinkedList<Device>::~LinkedList()>:
c001c928:	90                   	nop
c001c929:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c92c <LinkedList<Device>::isEmpty()>:
c001c92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c930:	8b 00                	mov    eax,DWORD PTR [eax]
c001c932:	85 c0                	test   eax,eax
c001c934:	75 0e                	jne    c001c944 <LinkedList<Device>::isEmpty()+0x18>
c001c936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c93a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c93d:	85 c0                	test   eax,eax
c001c93f:	75 03                	jne    c001c944 <LinkedList<Device>::isEmpty()+0x18>
c001c941:	b0 01                	mov    al,0x1
c001c943:	c3                   	ret    
c001c944:	b0 00                	mov    al,0x0
c001c946:	90                   	nop
c001c947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c948 <LinkedList<Device>::getFirstElement()>:
c001c948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c94e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c950 <LinkedList<Device>::removeFirst()>:
c001c950:	83 ec 0c             	sub    esp,0xc
c001c953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c957:	8b 00                	mov    eax,DWORD PTR [eax]
c001c959:	85 c0                	test   eax,eax
c001c95b:	75 17                	jne    c001c974 <LinkedList<Device>::removeFirst()+0x24>
c001c95d:	83 ec 0c             	sub    esp,0xc
c001c960:	68 d0 d8 01 c0       	push   0xc001d8d0
c001c965:	e8 95 38 ff ff       	call   c00101ff <KePanic(char const*)>
c001c96a:	83 c4 10             	add    esp,0x10
c001c96d:	e9 92 00 00 00       	jmp    c001ca04 <LinkedList<Device>::removeFirst()+0xb4>
c001c972:	66 90                	xchg   ax,ax
c001c974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c978:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c97b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c981:	85 c0                	test   eax,eax
c001c983:	74 13                	je     c001c998 <LinkedList<Device>::removeFirst()+0x48>
c001c985:	83 ec 0c             	sub    esp,0xc
c001c988:	68 1b d9 01 c0       	push   0xc001d91b
c001c98d:	e8 6d 38 ff ff       	call   c00101ff <KePanic(char const*)>
c001c992:	83 c4 10             	add    esp,0x10
c001c995:	8d 76 00             	lea    esi,[esi+0x0]
c001c998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c99e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9a4:	85 c0                	test   eax,eax
c001c9a6:	75 34                	jne    c001c9dc <LinkedList<Device>::removeFirst()+0x8c>
c001c9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9c4:	83 f8 01             	cmp    eax,0x1
c001c9c7:	74 27                	je     c001c9f0 <LinkedList<Device>::removeFirst()+0xa0>
c001c9c9:	83 ec 0c             	sub    esp,0xc
c001c9cc:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c9d1:	e8 29 38 ff ff       	call   c00101ff <KePanic(char const*)>
c001c9d6:	83 c4 10             	add    esp,0x10
c001c9d9:	eb 15                	jmp    c001c9f0 <LinkedList<Device>::removeFirst()+0xa0>
c001c9db:	90                   	nop
c001c9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9e2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ec:	89 10                	mov    DWORD PTR [eax],edx
c001c9ee:	66 90                	xchg   ax,ax
c001c9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca01:	8d 76 00             	lea    esi,[esi+0x0]
c001ca04:	83 c4 0c             	add    esp,0xc
c001ca07:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca08 <CPU::~CPU()>:
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	ba b0 e6 01 c0       	mov    edx,0xc001e6b0
c001ca10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca14:	89 10                	mov    DWORD PTR [eax],edx
c001ca16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1a:	83 ec 0c             	sub    esp,0xc
c001ca1d:	50                   	push   eax
c001ca1e:	e8 9b ee fe ff       	call   c000b8be <Device::~Device()>
c001ca23:	83 c4 10             	add    esp,0x10
c001ca26:	90                   	nop
c001ca27:	83 c4 0c             	add    esp,0xc
c001ca2a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ca2c <CPU::~CPU()>:
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	83 ec 0c             	sub    esp,0xc
c001ca32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca36:	e8 cd ff ff ff       	call   c001ca08 <CPU::~CPU()>
c001ca3b:	83 c4 10             	add    esp,0x10
c001ca3e:	83 ec 08             	sub    esp,0x8
c001ca41:	68 94 11 00 00       	push   0x1194
c001ca46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca4a:	e8 38 da fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001ca4f:	83 c4 10             	add    esp,0x10
c001ca52:	83 c4 0c             	add    esp,0xc
c001ca55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca58 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca58:	90                   	nop
c001ca59:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca5c <ThreadControlBlock::ThreadControlBlock()>:
c001ca5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca60:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca6b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca76:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca81:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca8c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca97:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca9f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001caa3:	90                   	nop
c001caa4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001caa8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001caa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cab6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cabd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cac1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cacc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cadd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cae8:	90                   	nop
c001cae9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001caec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001caec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caf0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001caf3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001caf4 <PCI::~PCI()>:
c001caf4:	83 ec 0c             	sub    esp,0xc
c001caf7:	ba 4c f3 01 c0       	mov    edx,0xc001f34c
c001cafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb00:	89 10                	mov    DWORD PTR [eax],edx
c001cb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb06:	83 ec 0c             	sub    esp,0xc
c001cb09:	50                   	push   eax
c001cb0a:	e8 39 e8 fe ff       	call   c000b348 <Bus::~Bus()>
c001cb0f:	83 c4 10             	add    esp,0x10
c001cb12:	90                   	nop
c001cb13:	83 c4 0c             	add    esp,0xc
c001cb16:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb18 <PCI::~PCI()>:
c001cb18:	83 ec 0c             	sub    esp,0xc
c001cb1b:	83 ec 0c             	sub    esp,0xc
c001cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb22:	e8 cd ff ff ff       	call   c001caf4 <PCI::~PCI()>
c001cb27:	83 c4 10             	add    esp,0x10
c001cb2a:	83 ec 08             	sub    esp,0x8
c001cb2d:	68 5c 01 00 00       	push   0x15c
c001cb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb36:	e8 4c d9 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cb3b:	83 c4 10             	add    esp,0x10
c001cb3e:	83 c4 0c             	add    esp,0xc
c001cb41:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cb42 <IDE::~IDE()>:
c001cb42:	83 ec 0c             	sub    esp,0xc
c001cb45:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c001cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4e:	89 10                	mov    DWORD PTR [eax],edx
c001cb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	50                   	push   eax
c001cb58:	e8 db f1 fe ff       	call   c000bd38 <HardDiskController::~HardDiskController()>
c001cb5d:	83 c4 10             	add    esp,0x10
c001cb60:	90                   	nop
c001cb61:	83 c4 0c             	add    esp,0xc
c001cb64:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb66 <IDE::~IDE()>:
c001cb66:	83 ec 0c             	sub    esp,0xc
c001cb69:	83 ec 0c             	sub    esp,0xc
c001cb6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb70:	e8 cd ff ff ff       	call   c001cb42 <IDE::~IDE()>
c001cb75:	83 c4 10             	add    esp,0x10
c001cb78:	83 ec 08             	sub    esp,0x8
c001cb7b:	68 70 02 00 00       	push   0x270
c001cb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb84:	e8 fe d8 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cb89:	83 c4 10             	add    esp,0x10
c001cb8c:	83 c4 0c             	add    esp,0xc
c001cb8f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb90 <SATABus::~SATABus()>:
c001cb90:	83 ec 0c             	sub    esp,0xc
c001cb93:	ba 50 f4 01 c0       	mov    edx,0xc001f450
c001cb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9c:	89 10                	mov    DWORD PTR [eax],edx
c001cb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	50                   	push   eax
c001cba6:	e8 8d f1 fe ff       	call   c000bd38 <HardDiskController::~HardDiskController()>
c001cbab:	83 c4 10             	add    esp,0x10
c001cbae:	90                   	nop
c001cbaf:	83 c4 0c             	add    esp,0xc
c001cbb2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cbb4 <SATABus::~SATABus()>:
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	83 ec 0c             	sub    esp,0xc
c001cbba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbbe:	e8 cd ff ff ff       	call   c001cb90 <SATABus::~SATABus()>
c001cbc3:	83 c4 10             	add    esp,0x10
c001cbc6:	83 ec 08             	sub    esp,0x8
c001cbc9:	68 64 01 00 00       	push   0x164
c001cbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd2:	e8 b0 d8 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	83 c4 0c             	add    esp,0xc
c001cbdd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cbde <ATA::~ATA()>:
c001cbde:	83 ec 0c             	sub    esp,0xc
c001cbe1:	ba 90 f4 01 c0       	mov    edx,0xc001f490
c001cbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbea:	89 10                	mov    DWORD PTR [eax],edx
c001cbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf0:	83 ec 0c             	sub    esp,0xc
c001cbf3:	50                   	push   eax
c001cbf4:	e8 21 f2 fe ff       	call   c000be1a <PhysicalDisk::~PhysicalDisk()>
c001cbf9:	83 c4 10             	add    esp,0x10
c001cbfc:	90                   	nop
c001cbfd:	83 c4 0c             	add    esp,0xc
c001cc00:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc02 <ATA::~ATA()>:
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	83 ec 0c             	sub    esp,0xc
c001cc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc0c:	e8 cd ff ff ff       	call   c001cbde <ATA::~ATA()>
c001cc11:	83 c4 10             	add    esp,0x10
c001cc14:	83 ec 08             	sub    esp,0x8
c001cc17:	68 7c 01 00 00       	push   0x17c
c001cc1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc20:	e8 62 d8 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cc25:	83 c4 10             	add    esp,0x10
c001cc28:	83 c4 0c             	add    esp,0xc
c001cc2b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cc2c <ATAPI::~ATAPI()>:
c001cc2c:	83 ec 0c             	sub    esp,0xc
c001cc2f:	ba d8 f4 01 c0       	mov    edx,0xc001f4d8
c001cc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc38:	89 10                	mov    DWORD PTR [eax],edx
c001cc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3e:	83 ec 0c             	sub    esp,0xc
c001cc41:	50                   	push   eax
c001cc42:	e8 d3 f1 fe ff       	call   c000be1a <PhysicalDisk::~PhysicalDisk()>
c001cc47:	83 c4 10             	add    esp,0x10
c001cc4a:	90                   	nop
c001cc4b:	83 c4 0c             	add    esp,0xc
c001cc4e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc50 <ATAPI::~ATAPI()>:
c001cc50:	83 ec 0c             	sub    esp,0xc
c001cc53:	83 ec 0c             	sub    esp,0xc
c001cc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5a:	e8 cd ff ff ff       	call   c001cc2c <ATAPI::~ATAPI()>
c001cc5f:	83 c4 10             	add    esp,0x10
c001cc62:	83 ec 08             	sub    esp,0x8
c001cc65:	68 84 01 00 00       	push   0x184
c001cc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6e:	e8 14 d8 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	83 c4 0c             	add    esp,0xc
c001cc79:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc7a <SATA::~SATA()>:
c001cc7a:	83 ec 0c             	sub    esp,0xc
c001cc7d:	ba 8c f5 01 c0       	mov    edx,0xc001f58c
c001cc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc86:	89 10                	mov    DWORD PTR [eax],edx
c001cc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8c:	83 ec 0c             	sub    esp,0xc
c001cc8f:	50                   	push   eax
c001cc90:	e8 85 f1 fe ff       	call   c000be1a <PhysicalDisk::~PhysicalDisk()>
c001cc95:	83 c4 10             	add    esp,0x10
c001cc98:	90                   	nop
c001cc99:	83 c4 0c             	add    esp,0xc
c001cc9c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc9e <SATA::~SATA()>:
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	83 ec 0c             	sub    esp,0xc
c001cca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca8:	e8 cd ff ff ff       	call   c001cc7a <SATA::~SATA()>
c001ccad:	83 c4 10             	add    esp,0x10
c001ccb0:	83 ec 08             	sub    esp,0x8
c001ccb3:	68 7c 01 00 00       	push   0x17c
c001ccb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccbc:	e8 c6 d7 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001ccc1:	83 c4 10             	add    esp,0x10
c001ccc4:	83 c4 0c             	add    esp,0xc
c001ccc7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ccc8 <SATAPI::~SATAPI()>:
c001ccc8:	83 ec 0c             	sub    esp,0xc
c001cccb:	ba c4 f6 01 c0       	mov    edx,0xc001f6c4
c001ccd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd4:	89 10                	mov    DWORD PTR [eax],edx
c001ccd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccda:	83 ec 0c             	sub    esp,0xc
c001ccdd:	50                   	push   eax
c001ccde:	e8 37 f1 fe ff       	call   c000be1a <PhysicalDisk::~PhysicalDisk()>
c001cce3:	83 c4 10             	add    esp,0x10
c001cce6:	90                   	nop
c001cce7:	83 c4 0c             	add    esp,0xc
c001ccea:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ccec <SATAPI::~SATAPI()>:
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	83 ec 0c             	sub    esp,0xc
c001ccf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf6:	e8 cd ff ff ff       	call   c001ccc8 <SATAPI::~SATAPI()>
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	83 ec 08             	sub    esp,0x8
c001cd01:	68 84 01 00 00       	push   0x184
c001cd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0a:	e8 78 d7 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cd0f:	83 c4 10             	add    esp,0x10
c001cd12:	83 c4 0c             	add    esp,0xc
c001cd15:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd16 <IOAPIC::~IOAPIC()>:
c001cd16:	83 ec 0c             	sub    esp,0xc
c001cd19:	ba 04 f7 01 c0       	mov    edx,0xc001f704
c001cd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd22:	89 10                	mov    DWORD PTR [eax],edx
c001cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd28:	83 ec 0c             	sub    esp,0xc
c001cd2b:	50                   	push   eax
c001cd2c:	e8 8d eb fe ff       	call   c000b8be <Device::~Device()>
c001cd31:	83 c4 10             	add    esp,0x10
c001cd34:	90                   	nop
c001cd35:	83 c4 0c             	add    esp,0xc
c001cd38:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd3a <IOAPIC::~IOAPIC()>:
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	83 ec 0c             	sub    esp,0xc
c001cd40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd44:	e8 cd ff ff ff       	call   c001cd16 <IOAPIC::~IOAPIC()>
c001cd49:	83 c4 10             	add    esp,0x10
c001cd4c:	83 ec 08             	sub    esp,0x8
c001cd4f:	68 68 01 00 00       	push   0x168
c001cd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd58:	e8 2a d7 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cd5d:	83 c4 10             	add    esp,0x10
c001cd60:	83 c4 0c             	add    esp,0xc
c001cd63:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd64 <APICTimer::~APICTimer()>:
c001cd64:	83 ec 0c             	sub    esp,0xc
c001cd67:	ba 4c f7 01 c0       	mov    edx,0xc001f74c
c001cd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd70:	89 10                	mov    DWORD PTR [eax],edx
c001cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd76:	83 ec 0c             	sub    esp,0xc
c001cd79:	50                   	push   eax
c001cd7a:	e8 7d 04 ff ff       	call   c000d1fc <Timer::~Timer()>
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	90                   	nop
c001cd83:	83 c4 0c             	add    esp,0xc
c001cd86:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd88 <APICTimer::~APICTimer()>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd92:	e8 cd ff ff ff       	call   c001cd64 <APICTimer::~APICTimer()>
c001cd97:	83 c4 10             	add    esp,0x10
c001cd9a:	83 ec 08             	sub    esp,0x8
c001cd9d:	68 60 01 00 00       	push   0x160
c001cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda6:	e8 dc d6 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	83 c4 0c             	add    esp,0xc
c001cdb1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cdb4 <PIT::~PIT()>:
c001cdb4:	83 ec 0c             	sub    esp,0xc
c001cdb7:	ba 9c f7 01 c0       	mov    edx,0xc001f79c
c001cdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc0:	89 10                	mov    DWORD PTR [eax],edx
c001cdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc6:	83 ec 0c             	sub    esp,0xc
c001cdc9:	50                   	push   eax
c001cdca:	e8 2d 04 ff ff       	call   c000d1fc <Timer::~Timer()>
c001cdcf:	83 c4 10             	add    esp,0x10
c001cdd2:	90                   	nop
c001cdd3:	83 c4 0c             	add    esp,0xc
c001cdd6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cdd8 <PIT::~PIT()>:
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	83 ec 0c             	sub    esp,0xc
c001cdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cde2:	e8 cd ff ff ff       	call   c001cdb4 <PIT::~PIT()>
c001cde7:	83 c4 10             	add    esp,0x10
c001cdea:	83 ec 08             	sub    esp,0x8
c001cded:	68 5c 01 00 00       	push   0x15c
c001cdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf6:	e8 8c d6 fe ff       	call   c000a487 <operator delete(void*, unsigned long)>
c001cdfb:	83 c4 10             	add    esp,0x10
c001cdfe:	83 c4 0c             	add    esp,0xc
c001ce01:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be a1 e7 01 c0       	mov    esi,0xc001e7a1
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be bd e7 01 c0       	mov    esi,0xc001e7bd
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
