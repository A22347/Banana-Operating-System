
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8f f7 00 00       	call   c000f7af <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 5b 02 00       	call   c0025bc8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb d6 66 02 c0       	mov    ebx,0xc00266d6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e4 66 02 c0    	cmp    ebx,0xc00266e4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 6c a6 02 c0       	mov    eax,0xc002a66c
c0000049:	3d 6c a6 02 c0       	cmp    eax,0xc002a66c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 6c a6 02 c0       	push   0xc002a66c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 6c a6 02 c0       	mov    eax,0xc002a66c
c0000075:	2d 6c a6 02 c0       	sub    eax,0xc002a66c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 6c a6 02 c0       	push   0xc002a66c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 9c ac 02 c0 00 	cmp    BYTE PTR ds:0xc002ac9c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb ec 66 02 c0       	mov    ebx,0xc00266ec
c00000bb:	81 eb e8 66 02 c0    	sub    ebx,0xc00266e8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e8 66 02 c0       	mov    esi,0xc00266e8
c00000ca:	a1 a0 ac 02 c0       	mov    eax,ds:0xc002aca0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 a0 ac 02 c0       	mov    ds:0xc002aca0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 a0 ac 02 c0       	mov    eax,ds:0xc002aca0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 6c a6 02 c0       	push   0xc002a66c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 9c ac 02 c0 01 	mov    BYTE PTR ds:0xc002ac9c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 a4 ac 02 c0       	push   0xc002aca4
c000012c:	68 6c a6 02 c0       	push   0xc002a66c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 8a b9 01 00       	call   c001bcda <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 a9 20 01 00       	call   c0012411 <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 68 b9 01 00       	call   c001bcda <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 7f bd 01 00       	call   c001c110 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 2c c3 01 00       	call   c001c6c6 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 d0 b0 02 c0 	lgdtd  ds:0xc002b0d0
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	54                   	push   esp
c0000579:	e8 4b 3d 01 00       	call   c00142c9 <int_handler>
c000057e:	81 c4 04 00 00 00    	add    esp,0x4
c0000584:	0f a9                	pop    gs
c0000586:	0f a1                	pop    fs
c0000588:	07                   	pop    es
c0000589:	1f                   	pop    ds
c000058a:	61                   	popa   
c000058b:	81 c4 08 00 00 00    	add    esp,0x8
c0000591:	cf                   	iret   

c0000592 <irq16>:
c0000592:	fa                   	cli    
c0000593:	6a 00                	push   0x0
c0000595:	6a 30                	push   0x30
c0000597:	e9 d5 ff ff ff       	jmp    c0000571 <int_common_stub>

c000059c <irq17>:
c000059c:	fa                   	cli    
c000059d:	6a 00                	push   0x0
c000059f:	6a 31                	push   0x31
c00005a1:	e9 cb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005a6 <irq18>:
c00005a6:	fa                   	cli    
c00005a7:	6a 00                	push   0x0
c00005a9:	6a 32                	push   0x32
c00005ab:	e9 c1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b0 <irq19>:
c00005b0:	fa                   	cli    
c00005b1:	6a 00                	push   0x0
c00005b3:	6a 33                	push   0x33
c00005b5:	e9 b7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ba <irq20>:
c00005ba:	fa                   	cli    
c00005bb:	6a 00                	push   0x0
c00005bd:	6a 34                	push   0x34
c00005bf:	e9 ad ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c4 <irq21>:
c00005c4:	fa                   	cli    
c00005c5:	6a 00                	push   0x0
c00005c7:	6a 35                	push   0x35
c00005c9:	e9 a3 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ce <irq22>:
c00005ce:	fa                   	cli    
c00005cf:	6a 00                	push   0x0
c00005d1:	6a 36                	push   0x36
c00005d3:	e9 99 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d8 <irq23>:
c00005d8:	fa                   	cli    
c00005d9:	6a 00                	push   0x0
c00005db:	6a 37                	push   0x37
c00005dd:	e9 8f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e2 <memcmp>:
c00005e2:	56                   	push   esi
c00005e3:	53                   	push   ebx
c00005e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f0:	01 d6                	add    esi,edx
c00005f2:	39 f2                	cmp    edx,esi
c00005f4:	74 0e                	je     c0000604 <memcmp+0x22>
c00005f6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005f9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fc:	38 c8                	cmp    al,cl
c00005fe:	75 08                	jne    c0000608 <memcmp+0x26>
c0000600:	42                   	inc    edx
c0000601:	43                   	inc    ebx
c0000602:	eb ee                	jmp    c00005f2 <memcmp+0x10>
c0000604:	31 c0                	xor    eax,eax
c0000606:	eb 02                	jmp    c000060a <memcmp+0x28>
c0000608:	29 c8                	sub    eax,ecx
c000060a:	5b                   	pop    ebx
c000060b:	5e                   	pop    esi
c000060c:	c3                   	ret    

c000060d <memmove>:
c000060d:	56                   	push   esi
c000060e:	53                   	push   ebx
c000060f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000613:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000617:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061b:	39 c8                	cmp    eax,ecx
c000061d:	73 12                	jae    c0000631 <memmove+0x24>
c000061f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000622:	89 c3                	mov    ebx,eax
c0000624:	39 f1                	cmp    ecx,esi
c0000626:	74 1a                	je     c0000642 <memmove+0x35>
c0000628:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062a:	43                   	inc    ebx
c000062b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000062e:	41                   	inc    ecx
c000062f:	eb f3                	jmp    c0000624 <memmove+0x17>
c0000631:	76 0f                	jbe    c0000642 <memmove+0x35>
c0000633:	85 d2                	test   edx,edx
c0000635:	74 0b                	je     c0000642 <memmove+0x35>
c0000637:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000063f:	4a                   	dec    edx
c0000640:	eb f1                	jmp    c0000633 <memmove+0x26>
c0000642:	5b                   	pop    ebx
c0000643:	5e                   	pop    esi
c0000644:	c3                   	ret    

c0000645 <memcpy>:
c0000645:	57                   	push   edi
c0000646:	56                   	push   esi
c0000647:	53                   	push   ebx
c0000648:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000650:	89 da                	mov    edx,ebx
c0000652:	89 d9                	mov    ecx,ebx
c0000654:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000658:	83 e2 fc             	and    edx,0xfffffffc
c000065b:	c1 e9 02             	shr    ecx,0x2
c000065e:	89 c7                	mov    edi,eax
c0000660:	fc                   	cld    
c0000661:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000663:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000666:	01 c2                	add    edx,eax
c0000668:	01 de                	add    esi,ebx
c000066a:	39 f1                	cmp    ecx,esi
c000066c:	74 09                	je     c0000677 <memcpy+0x32>
c000066e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000670:	42                   	inc    edx
c0000671:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000674:	41                   	inc    ecx
c0000675:	eb f3                	jmp    c000066a <memcpy+0x25>
c0000677:	5b                   	pop    ebx
c0000678:	5e                   	pop    esi
c0000679:	5f                   	pop    edi
c000067a:	c3                   	ret    

c000067b <memset>:
c000067b:	53                   	push   ebx
c000067c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000680:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000684:	89 c2                	mov    edx,eax
c0000686:	01 c1                	add    ecx,eax
c0000688:	39 ca                	cmp    edx,ecx
c000068a:	74 0a                	je     c0000696 <memset+0x1b>
c000068c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000690:	42                   	inc    edx
c0000691:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000694:	eb f2                	jmp    c0000688 <memset+0xd>
c0000696:	5b                   	pop    ebx
c0000697:	c3                   	ret    

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a2:	74 03                	je     c00006a7 <strlen+0xf>
c00006a4:	40                   	inc    eax
c00006a5:	eb f7                	jmp    c000069e <strlen+0x6>
c00006a7:	c3                   	ret    

c00006a8 <strpbrk>:
c00006a8:	53                   	push   ebx
c00006a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ad:	8a 08                	mov    cl,BYTE PTR [eax]
c00006af:	84 c9                	test   cl,cl
c00006b1:	74 14                	je     c00006c7 <strpbrk+0x1f>
c00006b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006b9:	84 db                	test   bl,bl
c00006bb:	74 07                	je     c00006c4 <strpbrk+0x1c>
c00006bd:	38 cb                	cmp    bl,cl
c00006bf:	74 08                	je     c00006c9 <strpbrk+0x21>
c00006c1:	42                   	inc    edx
c00006c2:	eb f3                	jmp    c00006b7 <strpbrk+0xf>
c00006c4:	40                   	inc    eax
c00006c5:	eb e6                	jmp    c00006ad <strpbrk+0x5>
c00006c7:	31 c0                	xor    eax,eax
c00006c9:	5b                   	pop    ebx
c00006ca:	c3                   	ret    

c00006cb <strtok>:
c00006cb:	56                   	push   esi
c00006cc:	53                   	push   ebx
c00006cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d5:	85 db                	test   ebx,ebx
c00006d7:	75 0e                	jne    c00006e7 <strtok+0x1c>
c00006d9:	8b 1d bc ac 02 c0    	mov    ebx,DWORD PTR ds:0xc002acbc
c00006df:	85 db                	test   ebx,ebx
c00006e1:	75 04                	jne    c00006e7 <strtok+0x1c>
c00006e3:	31 db                	xor    ebx,ebx
c00006e5:	eb 2e                	jmp    c0000715 <strtok+0x4a>
c00006e7:	56                   	push   esi
c00006e8:	53                   	push   ebx
c00006e9:	e8 ba ff ff ff       	call   c00006a8 <strpbrk>
c00006ee:	5a                   	pop    edx
c00006ef:	a3 bc ac 02 c0       	mov    ds:0xc002acbc,eax
c00006f4:	59                   	pop    ecx
c00006f5:	a1 bc ac 02 c0       	mov    eax,ds:0xc002acbc
c00006fa:	39 d8                	cmp    eax,ebx
c00006fc:	75 07                	jne    c0000705 <strtok+0x3a>
c00006fe:	43                   	inc    ebx
c00006ff:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000703:	eb e2                	jmp    c00006e7 <strtok+0x1c>
c0000705:	85 c0                	test   eax,eax
c0000707:	74 da                	je     c00006e3 <strtok+0x18>
c0000709:	8d 50 01             	lea    edx,[eax+0x1]
c000070c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000070f:	89 15 bc ac 02 c0    	mov    DWORD PTR ds:0xc002acbc,edx
c0000715:	89 d8                	mov    eax,ebx
c0000717:	5b                   	pop    ebx
c0000718:	5e                   	pop    esi
c0000719:	c3                   	ret    

c000071a <strcpy>:
c000071a:	53                   	push   ebx
c000071b:	31 d2                	xor    edx,edx
c000071d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000725:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000728:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072b:	84 c9                	test   cl,cl
c000072d:	74 06                	je     c0000735 <strcpy+0x1b>
c000072f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000732:	42                   	inc    edx
c0000733:	eb ec                	jmp    c0000721 <strcpy+0x7>
c0000735:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000738:	5b                   	pop    ebx
c0000739:	c3                   	ret    

c000073a <strncpy>:
c000073a:	56                   	push   esi
c000073b:	53                   	push   ebx
c000073c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000740:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000744:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000748:	89 c3                	mov    ebx,eax
c000074a:	85 c9                	test   ecx,ecx
c000074c:	74 1a                	je     c0000768 <strncpy+0x2e>
c000074e:	46                   	inc    esi
c000074f:	43                   	inc    ebx
c0000750:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000753:	49                   	dec    ecx
c0000754:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000757:	84 d2                	test   dl,dl
c0000759:	75 ef                	jne    c000074a <strncpy+0x10>
c000075b:	31 d2                	xor    edx,edx
c000075d:	39 d1                	cmp    ecx,edx
c000075f:	74 07                	je     c0000768 <strncpy+0x2e>
c0000761:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000765:	42                   	inc    edx
c0000766:	eb f5                	jmp    c000075d <strncpy+0x23>
c0000768:	5b                   	pop    ebx
c0000769:	5e                   	pop    esi
c000076a:	c3                   	ret    

c000076b <strcmp>:
c000076b:	31 c9                	xor    ecx,ecx
c000076d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000771:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000775:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000779:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077d:	38 d0                	cmp    al,dl
c000077f:	75 08                	jne    c0000789 <strcmp+0x1e>
c0000781:	41                   	inc    ecx
c0000782:	84 c0                	test   al,al
c0000784:	75 e7                	jne    c000076d <strcmp+0x2>
c0000786:	31 c0                	xor    eax,eax
c0000788:	c3                   	ret    
c0000789:	29 d0                	sub    eax,edx
c000078b:	c3                   	ret    

c000078c <strchr>:
c000078c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	84 d2                	test   dl,dl
c0000794:	74 09                	je     c000079f <strchr+0x13>
c0000796:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079a:	74 05                	je     c00007a1 <strchr+0x15>
c000079c:	40                   	inc    eax
c000079d:	eb f1                	jmp    c0000790 <strchr+0x4>
c000079f:	31 c0                	xor    eax,eax
c00007a1:	c3                   	ret    

c00007a2 <strncmp>:
c00007a2:	56                   	push   esi
c00007a3:	53                   	push   ebx
c00007a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b0:	01 d6                	add    esi,edx
c00007b2:	39 f2                	cmp    edx,esi
c00007b4:	74 12                	je     c00007c8 <strncmp+0x26>
c00007b6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007b9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007bc:	38 c8                	cmp    al,cl
c00007be:	75 0c                	jne    c00007cc <strncmp+0x2a>
c00007c0:	42                   	inc    edx
c00007c1:	84 c0                	test   al,al
c00007c3:	74 03                	je     c00007c8 <strncmp+0x26>
c00007c5:	43                   	inc    ebx
c00007c6:	eb ea                	jmp    c00007b2 <strncmp+0x10>
c00007c8:	31 c0                	xor    eax,eax
c00007ca:	eb 02                	jmp    c00007ce <strncmp+0x2c>
c00007cc:	29 c8                	sub    eax,ecx
c00007ce:	5b                   	pop    ebx
c00007cf:	5e                   	pop    esi
c00007d0:	c3                   	ret    

c00007d1 <strcat>:
c00007d1:	53                   	push   ebx
c00007d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d6:	89 c1                	mov    ecx,eax
c00007d8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007db:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007df:	74 04                	je     c00007e5 <strcat+0x14>
c00007e1:	89 d1                	mov    ecx,edx
c00007e3:	eb f3                	jmp    c00007d8 <strcat+0x7>
c00007e5:	31 d2                	xor    edx,edx
c00007e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007eb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007ee:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f1:	42                   	inc    edx
c00007f2:	84 db                	test   bl,bl
c00007f4:	75 f1                	jne    c00007e7 <strcat+0x16>
c00007f6:	5b                   	pop    ebx
c00007f7:	c3                   	ret    

c00007f8 <strncat>:
c00007f8:	56                   	push   esi
c00007f9:	53                   	push   ebx
c00007fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000802:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000806:	89 c2                	mov    edx,eax
c0000808:	85 db                	test   ebx,ebx
c000080a:	74 23                	je     c000082f <strncat+0x37>
c000080c:	8d 72 01             	lea    esi,[edx+0x1]
c000080f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000813:	74 04                	je     c0000819 <strncat+0x21>
c0000815:	89 f2                	mov    edx,esi
c0000817:	eb f3                	jmp    c000080c <strncat+0x14>
c0000819:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081c:	41                   	inc    ecx
c000081d:	42                   	inc    edx
c000081e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000821:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000824:	84 db                	test   bl,bl
c0000826:	74 07                	je     c000082f <strncat+0x37>
c0000828:	39 f1                	cmp    ecx,esi
c000082a:	75 f0                	jne    c000081c <strncat+0x24>
c000082c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000082f:	5b                   	pop    ebx
c0000830:	5e                   	pop    esi
c0000831:	c3                   	ret    

c0000832 <strstr>:
c0000832:	57                   	push   edi
c0000833:	56                   	push   esi
c0000834:	53                   	push   ebx
c0000835:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000839:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083d:	57                   	push   edi
c000083e:	e8 55 fe ff ff       	call   c0000698 <strlen>
c0000843:	59                   	pop    ecx
c0000844:	89 c6                	mov    esi,eax
c0000846:	85 c0                	test   eax,eax
c0000848:	74 1f                	je     c0000869 <strstr+0x37>
c000084a:	53                   	push   ebx
c000084b:	e8 48 fe ff ff       	call   c0000698 <strlen>
c0000850:	5a                   	pop    edx
c0000851:	39 f0                	cmp    eax,esi
c0000853:	72 12                	jb     c0000867 <strstr+0x35>
c0000855:	56                   	push   esi
c0000856:	57                   	push   edi
c0000857:	53                   	push   ebx
c0000858:	e8 85 fd ff ff       	call   c00005e2 <memcmp>
c000085d:	83 c4 0c             	add    esp,0xc
c0000860:	85 c0                	test   eax,eax
c0000862:	74 05                	je     c0000869 <strstr+0x37>
c0000864:	43                   	inc    ebx
c0000865:	eb e3                	jmp    c000084a <strstr+0x18>
c0000867:	31 db                	xor    ebx,ebx
c0000869:	89 d8                	mov    eax,ebx
c000086b:	5b                   	pop    ebx
c000086c:	5e                   	pop    esi
c000086d:	5f                   	pop    edi
c000086e:	c3                   	ret    

c000086f <toupper>:
c000086f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000873:	0f b6 d0             	movzx  edx,al
c0000876:	f6 82 00 67 02 c0 02 	test   BYTE PTR [edx-0x3ffd9900],0x2
c000087d:	74 03                	je     c0000882 <toupper+0x13>
c000087f:	83 e8 20             	sub    eax,0x20
c0000882:	c3                   	ret    

c0000883 <tolower>:
c0000883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000887:	0f b6 d0             	movzx  edx,al
c000088a:	f6 82 00 67 02 c0 01 	test   BYTE PTR [edx-0x3ffd9900],0x1
c0000891:	74 03                	je     c0000896 <tolower+0x13>
c0000893:	83 c0 20             	add    eax,0x20
c0000896:	c3                   	ret    

c0000897 <simple_strtoul>:
c0000897:	55                   	push   ebp
c0000898:	57                   	push   edi
c0000899:	56                   	push   esi
c000089a:	53                   	push   ebx
c000089b:	83 ec 08             	sub    esp,0x8
c000089e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008a9:	f6 82 00 67 02 c0 08 	test   BYTE PTR [edx-0x3ffd9900],0x8
c00008b0:	74 03                	je     c00008b5 <simple_strtoul+0x1e>
c00008b2:	41                   	inc    ecx
c00008b3:	eb f1                	jmp    c00008a6 <simple_strtoul+0xf>
c00008b5:	80 fa 09             	cmp    dl,0x9
c00008b8:	74 f8                	je     c00008b2 <simple_strtoul+0x1b>
c00008ba:	80 fa 2d             	cmp    dl,0x2d
c00008bd:	75 0b                	jne    c00008ca <simple_strtoul+0x33>
c00008bf:	41                   	inc    ecx
c00008c0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008c8:	eb 0e                	jmp    c00008d8 <simple_strtoul+0x41>
c00008ca:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d2:	80 fa 2b             	cmp    dl,0x2b
c00008d5:	75 01                	jne    c00008d8 <simple_strtoul+0x41>
c00008d7:	41                   	inc    ecx
c00008d8:	85 f6                	test   esi,esi
c00008da:	75 22                	jne    c00008fe <simple_strtoul+0x67>
c00008dc:	be 0a 00 00 00       	mov    esi,0xa
c00008e1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e4:	75 5a                	jne    c0000940 <simple_strtoul+0xa9>
c00008e6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008ea:	50                   	push   eax
c00008eb:	e8 93 ff ff ff       	call   c0000883 <tolower>
c00008f0:	5a                   	pop    edx
c00008f1:	83 f8 78             	cmp    eax,0x78
c00008f4:	74 03                	je     c00008f9 <simple_strtoul+0x62>
c00008f6:	41                   	inc    ecx
c00008f7:	eb 16                	jmp    c000090f <simple_strtoul+0x78>
c00008f9:	83 c1 02             	add    ecx,0x2
c00008fc:	eb 22                	jmp    c0000920 <simple_strtoul+0x89>
c00008fe:	8d 46 fe             	lea    eax,[esi-0x2]
c0000901:	83 f8 22             	cmp    eax,0x22
c0000904:	0f 87 b7 00 00 00    	ja     c00009c1 <simple_strtoul+0x12a>
c000090a:	83 fe 08             	cmp    esi,0x8
c000090d:	75 0c                	jne    c000091b <simple_strtoul+0x84>
c000090f:	be 08 00 00 00       	mov    esi,0x8
c0000914:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000917:	75 27                	jne    c0000940 <simple_strtoul+0xa9>
c0000919:	eb 1f                	jmp    c000093a <simple_strtoul+0xa3>
c000091b:	83 fe 10             	cmp    esi,0x10
c000091e:	75 20                	jne    c0000940 <simple_strtoul+0xa9>
c0000920:	be 10 00 00 00       	mov    esi,0x10
c0000925:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000928:	75 16                	jne    c0000940 <simple_strtoul+0xa9>
c000092a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000092e:	50                   	push   eax
c000092f:	e8 4f ff ff ff       	call   c0000883 <tolower>
c0000934:	5d                   	pop    ebp
c0000935:	83 f8 78             	cmp    eax,0x78
c0000938:	74 03                	je     c000093d <simple_strtoul+0xa6>
c000093a:	41                   	inc    ecx
c000093b:	eb 03                	jmp    c0000940 <simple_strtoul+0xa9>
c000093d:	83 c1 02             	add    ecx,0x2
c0000940:	31 ed                	xor    ebp,ebp
c0000942:	31 db                	xor    ebx,ebx
c0000944:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094d:	84 d2                	test   dl,dl
c000094f:	74 27                	je     c0000978 <simple_strtoul+0xe1>
c0000951:	0f b6 fa             	movzx  edi,dl
c0000954:	f6 87 00 67 02 c0 04 	test   BYTE PTR [edi-0x3ffd9900],0x4
c000095b:	74 05                	je     c0000962 <simple_strtoul+0xcb>
c000095d:	83 ef 30             	sub    edi,0x30
c0000960:	eb 22                	jmp    c0000984 <simple_strtoul+0xed>
c0000962:	0f be d2             	movsx  edx,dl
c0000965:	52                   	push   edx
c0000966:	e8 04 ff ff ff       	call   c000086f <toupper>
c000096b:	5f                   	pop    edi
c000096c:	0f b6 d0             	movzx  edx,al
c000096f:	f6 82 00 67 02 c0 01 	test   BYTE PTR [edx-0x3ffd9900],0x1
c0000976:	75 09                	jne    c0000981 <simple_strtoul+0xea>
c0000978:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097d:	75 2d                	jne    c00009ac <simple_strtoul+0x115>
c000097f:	eb 57                	jmp    c00009d8 <simple_strtoul+0x141>
c0000981:	8d 78 c9             	lea    edi,[eax-0x37]
c0000984:	39 f7                	cmp    edi,esi
c0000986:	73 f0                	jae    c0000978 <simple_strtoul+0xe1>
c0000988:	31 d2                	xor    edx,edx
c000098a:	89 f8                	mov    eax,edi
c000098c:	f7 d0                	not    eax
c000098e:	f7 f6                	div    esi
c0000990:	39 d8                	cmp    eax,ebx
c0000992:	72 0e                	jb     c00009a2 <simple_strtoul+0x10b>
c0000994:	0f af de             	imul   ebx,esi
c0000997:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000099e:	01 fb                	add    ebx,edi
c00009a0:	eb 07                	jmp    c00009a9 <simple_strtoul+0x112>
c00009a2:	bd 01 00 00 00       	mov    ebp,0x1
c00009a7:	31 db                	xor    ebx,ebx
c00009a9:	41                   	inc    ecx
c00009aa:	eb 9f                	jmp    c000094b <simple_strtoul+0xb4>
c00009ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009af:	09 d8                	or     eax,ebx
c00009b1:	75 1f                	jne    c00009d2 <simple_strtoul+0x13b>
c00009b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	89 38                	mov    DWORD PTR [eax],edi
c00009bf:	eb 17                	jmp    c00009d8 <simple_strtoul+0x141>
c00009c1:	31 db                	xor    ebx,ebx
c00009c3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c8:	74 14                	je     c00009de <simple_strtoul+0x147>
c00009ca:	31 ed                	xor    ebp,ebp
c00009cc:	85 c9                	test   ecx,ecx
c00009ce:	75 e3                	jne    c00009b3 <simple_strtoul+0x11c>
c00009d0:	31 db                	xor    ebx,ebx
c00009d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d6:	89 08                	mov    DWORD PTR [eax],ecx
c00009d8:	4d                   	dec    ebp
c00009d9:	75 03                	jne    c00009de <simple_strtoul+0x147>
c00009db:	83 cb ff             	or     ebx,0xffffffff
c00009de:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e3:	75 02                	jne    c00009e7 <simple_strtoul+0x150>
c00009e5:	f7 db                	neg    ebx
c00009e7:	83 c4 08             	add    esp,0x8
c00009ea:	89 d8                	mov    eax,ebx
c00009ec:	5b                   	pop    ebx
c00009ed:	5e                   	pop    esi
c00009ee:	5f                   	pop    edi
c00009ef:	5d                   	pop    ebp
c00009f0:	c3                   	ret    

c00009f1 <largebin_index>:
c00009f1:	89 c2                	mov    edx,eax
c00009f3:	c1 ea 08             	shr    edx,0x8
c00009f6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fc:	77 10                	ja     c0000a0e <largebin_index+0x1d>
c00009fe:	0f bd d2             	bsr    edx,edx
c0000a01:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a04:	d3 e8                	shr    eax,cl
c0000a06:	83 e0 03             	and    eax,0x3
c0000a09:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0d:	c3                   	ret    
c0000a0e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a13:	c3                   	ret    

c0000a14 <malloc_init_state>:
c0000a14:	53                   	push   ebx
c0000a15:	8d 50 34             	lea    edx,[eax+0x34]
c0000a18:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a1e:	89 d1                	mov    ecx,edx
c0000a20:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a23:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a26:	83 c2 08             	add    edx,0x8
c0000a29:	39 da                	cmp    edx,ebx
c0000a2b:	75 f3                	jne    c0000a20 <malloc_init_state+0xc>
c0000a2d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a2f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a39:	83 e2 03             	and    edx,0x3
c0000a3c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a46:	83 ca 48             	or     edx,0x48
c0000a49:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a53:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a64:	89 10                	mov    DWORD PTR [eax],edx
c0000a66:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a69:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a73:	5b                   	pop    ebx
c0000a74:	c3                   	ret    

c0000a75 <malloc_consolidate>:
c0000a75:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a77:	85 d2                	test   edx,edx
c0000a79:	0f 84 d8 00 00 00    	je     c0000b57 <malloc_consolidate+0xe2>
c0000a7f:	55                   	push   ebp
c0000a80:	83 e2 fd             	and    edx,0xfffffffd
c0000a83:	57                   	push   edi
c0000a84:	89 c5                	mov    ebp,eax
c0000a86:	56                   	push   esi
c0000a87:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8a:	53                   	push   ebx
c0000a8b:	83 ec 10             	sub    esp,0x10
c0000a8e:	89 10                	mov    DWORD PTR [eax],edx
c0000a90:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a94:	c1 ea 03             	shr    edx,0x3
c0000a97:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a9f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa2:	85 d2                	test   edx,edx
c0000aa4:	0f 84 98 00 00 00    	je     c0000b42 <malloc_consolidate+0xcd>
c0000aaa:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abb:	89 f9                	mov    ecx,edi
c0000abd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ac9:	83 e7 01             	and    edi,0x1
c0000acc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000acf:	75 14                	jne    c0000ae5 <malloc_consolidate+0x70>
c0000ad1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad3:	29 fa                	sub    edx,edi
c0000ad5:	01 f9                	add    ecx,edi
c0000ad7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ada:	89 fb                	mov    ebx,edi
c0000adc:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000adf:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000ae8:	74 40                	je     c0000b2a <malloc_consolidate+0xb5>
c0000aea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af0:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af4:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af7:	83 e7 01             	and    edi,0x1
c0000afa:	75 0e                	jne    c0000b0a <malloc_consolidate+0x95>
c0000afc:	01 d9                	add    ecx,ebx
c0000afe:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b01:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b04:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b07:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0d:	89 ce                	mov    esi,ecx
c0000b0f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b12:	83 ce 01             	or     esi,0x1
c0000b15:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b18:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b22:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b25:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b28:	eb 0c                	jmp    c0000b36 <malloc_consolidate+0xc1>
c0000b2a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2d:	83 c9 01             	or     ecx,0x1
c0000b30:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b33:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3a:	85 d2                	test   edx,edx
c0000b3c:	0f 85 6f ff ff ff    	jne    c0000ab1 <malloc_consolidate+0x3c>
c0000b42:	83 c5 04             	add    ebp,0x4
c0000b45:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b49:	0f 85 50 ff ff ff    	jne    c0000a9f <malloc_consolidate+0x2a>
c0000b4f:	83 c4 10             	add    esp,0x10
c0000b52:	5b                   	pop    ebx
c0000b53:	5e                   	pop    esi
c0000b54:	5f                   	pop    edi
c0000b55:	5d                   	pop    ebp
c0000b56:	c3                   	ret    
c0000b57:	e9 b8 fe ff ff       	jmp    c0000a14 <malloc_init_state>

c0000b5c <dlfree>:
c0000b5c:	57                   	push   edi
c0000b5d:	56                   	push   esi
c0000b5e:	53                   	push   ebx
c0000b5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b63:	85 db                	test   ebx,ebx
c0000b65:	0f 84 e2 00 00 00    	je     c0000c4d <dlfree+0xf1>
c0000b6b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b6e:	8b 0d c0 ac 02 c0    	mov    ecx,DWORD PTR ds:0xc002acc0
c0000b74:	89 f0                	mov    eax,esi
c0000b76:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b79:	83 e0 fc             	and    eax,0xfffffffc
c0000b7c:	39 c1                	cmp    ecx,eax
c0000b7e:	72 24                	jb     c0000ba4 <dlfree+0x48>
c0000b80:	83 c9 03             	or     ecx,0x3
c0000b83:	c1 e8 03             	shr    eax,0x3
c0000b86:	89 0d c0 ac 02 c0    	mov    DWORD PTR ds:0xc002acc0,ecx
c0000b8c:	83 e8 02             	sub    eax,0x2
c0000b8f:	8b 0c 85 c4 ac 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd533c]
c0000b96:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b98:	89 14 85 c4 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd533c],edx
c0000b9f:	e9 a9 00 00 00       	jmp    c0000c4d <dlfree+0xf1>
c0000ba4:	83 e6 02             	and    esi,0x2
c0000ba7:	0f 85 a0 00 00 00    	jne    c0000c4d <dlfree+0xf1>
c0000bad:	83 c9 01             	or     ecx,0x1
c0000bb0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb3:	89 0d c0 ac 02 c0    	mov    DWORD PTR ds:0xc002acc0,ecx
c0000bb9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bbf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc3:	75 13                	jne    c0000bd8 <dlfree+0x7c>
c0000bc5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bc8:	29 da                	sub    edx,ebx
c0000bca:	01 d8                	add    eax,ebx
c0000bcc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bcf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bd8:	39 35 ec ac 02 c0    	cmp    DWORD PTR ds:0xc002acec,esi
c0000bde:	74 40                	je     c0000c20 <dlfree+0xc4>
c0000be0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be7:	80 e3 01             	and    bl,0x1
c0000bea:	75 0e                	jne    c0000bfa <dlfree+0x9e>
c0000bec:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bef:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf2:	01 c8                	add    eax,ecx
c0000bf4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfa:	8b 0d fc ac 02 c0    	mov    ecx,DWORD PTR ds:0xc002acfc
c0000c00:	c7 42 0c f4 ac 02 c0 	mov    DWORD PTR [edx+0xc],0xc002acf4
c0000c07:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0a:	89 15 fc ac 02 c0    	mov    DWORD PTR ds:0xc002acfc,edx
c0000c10:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c13:	89 c1                	mov    ecx,eax
c0000c15:	83 c9 01             	or     ecx,0x1
c0000c18:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c1e:	eb 10                	jmp    c0000c30 <dlfree+0xd4>
c0000c20:	01 c8                	add    eax,ecx
c0000c22:	89 c1                	mov    ecx,eax
c0000c24:	83 c9 01             	or     ecx,0x1
c0000c27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2a:	89 15 ec ac 02 c0    	mov    DWORD PTR ds:0xc002acec,edx
c0000c30:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c35:	76 16                	jbe    c0000c4d <dlfree+0xf1>
c0000c37:	f6 05 c0 ac 02 c0 02 	test   BYTE PTR ds:0xc002acc0,0x2
c0000c3e:	74 0d                	je     c0000c4d <dlfree+0xf1>
c0000c40:	5b                   	pop    ebx
c0000c41:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c0000c46:	5e                   	pop    esi
c0000c47:	5f                   	pop    edi
c0000c48:	e9 28 fe ff ff       	jmp    c0000a75 <malloc_consolidate>
c0000c4d:	5b                   	pop    ebx
c0000c4e:	5e                   	pop    esi
c0000c4f:	5f                   	pop    edi
c0000c50:	c3                   	ret    

c0000c51 <sYSMALLOc>:
c0000c51:	55                   	push   ebp
c0000c52:	57                   	push   edi
c0000c53:	56                   	push   esi
c0000c54:	53                   	push   ebx
c0000c55:	89 d3                	mov    ebx,edx
c0000c57:	83 ec 2c             	sub    esp,0x2c
c0000c5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c5e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c64:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c67:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c6e:	74 1f                	je     c0000c8f <sYSMALLOc+0x3e>
c0000c70:	89 d8                	mov    eax,ebx
c0000c72:	e8 fe fd ff ff       	call   c0000a75 <malloc_consolidate>
c0000c77:	83 ec 0c             	sub    esp,0xc
c0000c7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c7e:	83 e8 07             	sub    eax,0x7
c0000c81:	50                   	push   eax
c0000c82:	e8 30 02 00 00       	call   c0000eb7 <dlmalloc>
c0000c87:	83 c4 10             	add    esp,0x10
c0000c8a:	e9 20 02 00 00       	jmp    c0000eaf <sYSMALLOc+0x25e>
c0000c8f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c92:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c98:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9b:	83 e0 fc             	and    eax,0xfffffffc
c0000c9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca6:	83 c0 10             	add    eax,0x10
c0000ca9:	01 c1                	add    ecx,eax
c0000cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb6:	74 04                	je     c0000cbc <sYSMALLOc+0x6b>
c0000cb8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbc:	f7 da                	neg    edx
c0000cbe:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc6:	21 d1                	and    ecx,edx
c0000cc8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ccc:	7f 07                	jg     c0000cd5 <sYSMALLOc+0x84>
c0000cce:	31 c0                	xor    eax,eax
c0000cd0:	e9 da 01 00 00       	jmp    c0000eaf <sYSMALLOc+0x25e>
c0000cd5:	83 ec 0c             	sub    esp,0xc
c0000cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cdc:	e8 36 e6 00 00       	call   c000f317 <sbrk>
c0000ce1:	83 c4 10             	add    esp,0x10
c0000ce4:	89 c6                	mov    esi,eax
c0000ce6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ce9:	74 e3                	je     c0000cce <sYSMALLOc+0x7d>
c0000ceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cef:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf6:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfc:	39 f1                	cmp    ecx,esi
c0000cfe:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d04:	75 13                	jne    c0000d19 <sYSMALLOc+0xc8>
c0000d06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0e:	83 c8 01             	or     eax,0x1
c0000d11:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d14:	e9 3e 01 00 00       	jmp    c0000e57 <sYSMALLOc+0x206>
c0000d19:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d1f:	88 d0                	mov    al,dl
c0000d21:	83 e0 01             	and    eax,0x1
c0000d24:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d29:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2d:	0f 95 c0             	setne  al
c0000d30:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d34:	39 f1                	cmp    ecx,esi
c0000d36:	76 12                	jbe    c0000d4a <sYSMALLOc+0xf9>
c0000d38:	84 c0                	test   al,al
c0000d3a:	74 0e                	je     c0000d4a <sYSMALLOc+0xf9>
c0000d3c:	83 e2 fe             	and    edx,0xfffffffe
c0000d3f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d45:	e9 83 00 00 00       	jmp    c0000dcd <sYSMALLOc+0x17c>
c0000d4a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d4f:	74 7c                	je     c0000dcd <sYSMALLOc+0x17c>
c0000d51:	84 c0                	test   al,al
c0000d53:	74 0c                	je     c0000d61 <sYSMALLOc+0x110>
c0000d55:	89 f0                	mov    eax,esi
c0000d57:	29 c8                	sub    eax,ecx
c0000d59:	01 e8                	add    eax,ebp
c0000d5b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d61:	89 f2                	mov    edx,esi
c0000d63:	83 e2 07             	and    edx,0x7
c0000d66:	74 0c                	je     c0000d74 <sYSMALLOc+0x123>
c0000d68:	b8 08 00 00 00       	mov    eax,0x8
c0000d6d:	29 d0                	sub    eax,edx
c0000d6f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d72:	eb 04                	jmp    c0000d78 <sYSMALLOc+0x127>
c0000d74:	89 f5                	mov    ebp,esi
c0000d76:	31 c0                	xor    eax,eax
c0000d78:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d84:	01 c1                	add    ecx,eax
c0000d86:	83 ec 0c             	sub    esp,0xc
c0000d89:	01 f1                	add    ecx,esi
c0000d8b:	01 ca                	add    edx,ecx
c0000d8d:	29 c8                	sub    eax,ecx
c0000d8f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d93:	01 c2                	add    edx,eax
c0000d95:	52                   	push   edx
c0000d96:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9a:	e8 78 e5 00 00       	call   c000f317 <sbrk>
c0000d9f:	83 c4 10             	add    esp,0x10
c0000da2:	83 f8 ff             	cmp    eax,0xffffffff
c0000da5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000da9:	75 0f                	jne    c0000dba <sYSMALLOc+0x169>
c0000dab:	83 ec 0c             	sub    esp,0xc
c0000dae:	6a 00                	push   0x0
c0000db0:	e8 62 e5 00 00       	call   c000f317 <sbrk>
c0000db5:	83 c4 10             	add    esp,0x10
c0000db8:	eb 30                	jmp    c0000dea <sYSMALLOc+0x199>
c0000dba:	39 c6                	cmp    esi,eax
c0000dbc:	76 33                	jbe    c0000df1 <sYSMALLOc+0x1a0>
c0000dbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dc9:	01 f0                	add    eax,esi
c0000dcb:	eb 1d                	jmp    c0000dea <sYSMALLOc+0x199>
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	89 f5                	mov    ebp,esi
c0000dd2:	6a 00                	push   0x0
c0000dd4:	e8 3e e5 00 00       	call   c000f317 <sbrk>
c0000dd9:	89 c2                	mov    edx,eax
c0000ddb:	29 f2                	sub    edx,esi
c0000ddd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dea:	31 d2                	xor    edx,edx
c0000dec:	83 f8 ff             	cmp    eax,0xffffffff
c0000def:	74 66                	je     c0000e57 <sYSMALLOc+0x206>
c0000df1:	29 e8                	sub    eax,ebp
c0000df3:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df6:	01 d0                	add    eax,edx
c0000df8:	83 c8 01             	or     eax,0x1
c0000dfb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000dfe:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e04:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e09:	74 4c                	je     c0000e57 <sYSMALLOc+0x206>
c0000e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e0f:	83 e8 0c             	sub    eax,0xc
c0000e12:	83 e0 f8             	and    eax,0xfffffff8
c0000e15:	89 c2                	mov    edx,eax
c0000e17:	83 ca 01             	or     edx,0x1
c0000e1a:	83 f8 0f             	cmp    eax,0xf
c0000e1d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e20:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e28:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e30:	76 25                	jbe    c0000e57 <sYSMALLOc+0x206>
c0000e32:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e38:	83 ec 0c             	sub    esp,0xc
c0000e3b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e45:	83 c7 08             	add    edi,0x8
c0000e48:	57                   	push   edi
c0000e49:	e8 0e fd ff ff       	call   c0000b5c <dlfree>
c0000e4e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e54:	83 c4 10             	add    esp,0x10
c0000e57:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e63:	73 06                	jae    c0000e6b <sYSMALLOc+0x21a>
c0000e65:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e71:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e77:	73 06                	jae    c0000e7f <sYSMALLOc+0x22e>
c0000e79:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e7f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e82:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e85:	83 e2 fc             	and    edx,0xfffffffc
c0000e88:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8c:	0f 82 3c fe ff ff    	jb     c0000cce <sYSMALLOc+0x7d>
c0000e92:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e96:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e99:	29 fa                	sub    edx,edi
c0000e9b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e9e:	83 ca 01             	or     edx,0x1
c0000ea1:	89 fb                	mov    ebx,edi
c0000ea3:	83 c0 08             	add    eax,0x8
c0000ea6:	83 cb 01             	or     ebx,0x1
c0000ea9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eaf:	83 c4 2c             	add    esp,0x2c
c0000eb2:	5b                   	pop    ebx
c0000eb3:	5e                   	pop    esi
c0000eb4:	5f                   	pop    edi
c0000eb5:	5d                   	pop    ebp
c0000eb6:	c3                   	ret    

c0000eb7 <dlmalloc>:
c0000eb7:	55                   	push   ebp
c0000eb8:	57                   	push   edi
c0000eb9:	56                   	push   esi
c0000eba:	53                   	push   ebx
c0000ebb:	83 ec 1c             	sub    esp,0x1c
c0000ebe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec5:	0f 87 70 03 00 00    	ja     c000123b <dlmalloc+0x384>
c0000ecb:	83 c0 0b             	add    eax,0xb
c0000ece:	be 10 00 00 00       	mov    esi,0x10
c0000ed3:	83 f8 0f             	cmp    eax,0xf
c0000ed6:	76 05                	jbe    c0000edd <dlmalloc+0x26>
c0000ed8:	83 e0 f8             	and    eax,0xfffffff8
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	8b 3d c0 ac 02 c0    	mov    edi,DWORD PTR ds:0xc002acc0
c0000ee3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ee9:	75 17                	jne    c0000f02 <dlmalloc+0x4b>
c0000eeb:	85 ff                	test   edi,edi
c0000eed:	0f 85 05 03 00 00    	jne    c00011f8 <dlmalloc+0x341>
c0000ef3:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c0000ef8:	e8 78 fb ff ff       	call   c0000a75 <malloc_consolidate>
c0000efd:	e9 f6 02 00 00       	jmp    c00011f8 <dlmalloc+0x341>
c0000f02:	39 f7                	cmp    edi,esi
c0000f04:	72 1f                	jb     c0000f25 <dlmalloc+0x6e>
c0000f06:	89 f2                	mov    edx,esi
c0000f08:	c1 ea 03             	shr    edx,0x3
c0000f0b:	83 ea 02             	sub    edx,0x2
c0000f0e:	8b 04 95 c4 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd533c]
c0000f15:	85 c0                	test   eax,eax
c0000f17:	74 0c                	je     c0000f25 <dlmalloc+0x6e>
c0000f19:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1c:	89 0c 95 c4 ac 02 c0 	mov    DWORD PTR [edx*4-0x3ffd533c],ecx
c0000f23:	eb 30                	jmp    c0000f55 <dlmalloc+0x9e>
c0000f25:	89 f0                	mov    eax,esi
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 2e                	ja     c0000f5d <dlmalloc+0xa6>
c0000f2f:	c1 e8 03             	shr    eax,0x3
c0000f32:	8d 14 c5 f4 ac 02 c0 	lea    edx,[eax*8-0x3ffd530c]
c0000f39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f40:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f43:	39 c3                	cmp    ebx,eax
c0000f45:	74 2e                	je     c0000f75 <dlmalloc+0xbe>
c0000f47:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f4f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f52:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f55:	83 c0 08             	add    eax,0x8
c0000f58:	e9 e0 02 00 00       	jmp    c000123d <dlmalloc+0x386>
c0000f5d:	e8 8f fa ff ff       	call   c00009f1 <largebin_index>
c0000f62:	83 e7 02             	and    edi,0x2
c0000f65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f69:	74 0a                	je     c0000f75 <dlmalloc+0xbe>
c0000f6b:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c0000f70:	e8 00 fb ff ff       	call   c0000a75 <malloc_consolidate>
c0000f75:	8d 46 10             	lea    eax,[esi+0x10]
c0000f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7c:	8b 1d 00 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad00
c0000f82:	81 fb f4 ac 02 c0    	cmp    ebx,0xc002acf4
c0000f88:	0f 84 13 01 00 00    	je     c00010a1 <dlmalloc+0x1ea>
c0000f8e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f91:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f94:	83 e7 fc             	and    edi,0xfffffffc
c0000f97:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9d:	77 4c                	ja     c0000feb <dlmalloc+0x134>
c0000f9f:	3d f4 ac 02 c0       	cmp    eax,0xc002acf4
c0000fa4:	75 45                	jne    c0000feb <dlmalloc+0x134>
c0000fa6:	39 1d f0 ac 02 c0    	cmp    DWORD PTR ds:0xc002acf0,ebx
c0000fac:	75 3d                	jne    c0000feb <dlmalloc+0x134>
c0000fae:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb2:	73 37                	jae    c0000feb <dlmalloc+0x134>
c0000fb4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb7:	89 fa                	mov    edx,edi
c0000fb9:	a3 fc ac 02 c0       	mov    ds:0xc002acfc,eax
c0000fbe:	a3 00 ad 02 c0       	mov    ds:0xc002ad00,eax
c0000fc3:	a3 f0 ac 02 c0       	mov    ds:0xc002acf0,eax
c0000fc8:	29 f2                	sub    edx,esi
c0000fca:	c7 40 08 f4 ac 02 c0 	mov    DWORD PTR [eax+0x8],0xc002acf4
c0000fd1:	c7 40 0c f4 ac 02 c0 	mov    DWORD PTR [eax+0xc],0xc002acf4
c0000fd8:	83 ce 01             	or     esi,0x1
c0000fdb:	89 d1                	mov    ecx,edx
c0000fdd:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe0:	83 c9 01             	or     ecx,0x1
c0000fe3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000fe9:	eb 15                	jmp    c0001000 <dlmalloc+0x149>
c0000feb:	a3 00 ad 02 c0       	mov    ds:0xc002ad00,eax
c0000ff0:	39 fe                	cmp    esi,edi
c0000ff2:	c7 40 08 f4 ac 02 c0 	mov    DWORD PTR [eax+0x8],0xc002acf4
c0000ff9:	75 0d                	jne    c0001008 <dlmalloc+0x151>
c0000ffb:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001000:	8d 43 08             	lea    eax,[ebx+0x8]
c0001003:	e9 35 02 00 00       	jmp    c000123d <dlmalloc+0x386>
c0001008:	89 f8                	mov    eax,edi
c000100a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001010:	77 19                	ja     c000102b <dlmalloc+0x174>
c0001012:	c1 e8 03             	shr    eax,0x3
c0001015:	8d 14 00             	lea    edx,[eax+eax*1]
c0001018:	83 c2 0d             	add    edx,0xd
c000101b:	8d 2c 95 b8 ac 02 c0 	lea    ebp,[edx*4-0x3ffd5348]
c0001022:	8b 14 95 c0 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5340]
c0001029:	eb 46                	jmp    c0001071 <dlmalloc+0x1ba>
c000102b:	e8 c1 f9 ff ff       	call   c00009f1 <largebin_index>
c0001030:	8d 14 00             	lea    edx,[eax+eax*1]
c0001033:	83 c2 0d             	add    edx,0xd
c0001036:	8d 0c 95 c0 ac 02 c0 	lea    ecx,[edx*4-0x3ffd5340]
c000103d:	8b 14 95 c0 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5340]
c0001044:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001047:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104b:	89 d5                	mov    ebp,edx
c000104d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001051:	74 1e                	je     c0001071 <dlmalloc+0x1ba>
c0001053:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001056:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001059:	77 12                	ja     c000106d <dlmalloc+0x1b6>
c000105b:	83 cf 01             	or     edi,0x1
c000105e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001061:	76 05                	jbe    c0001068 <dlmalloc+0x1b1>
c0001063:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001066:	eb f6                	jmp    c000105e <dlmalloc+0x1a7>
c0001068:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106b:	eb 04                	jmp    c0001071 <dlmalloc+0x1ba>
c000106d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001071:	89 c7                	mov    edi,eax
c0001073:	88 c1                	mov    cl,al
c0001075:	c1 ff 05             	sar    edi,0x5
c0001078:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107c:	bf 01 00 00 00       	mov    edi,0x1
c0001081:	d3 e7                	shl    edi,cl
c0001083:	89 f8                	mov    eax,edi
c0001085:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001089:	09 04 bd f4 af 02 c0 	or     DWORD PTR [edi*4-0x3ffd500c],eax
c0001090:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001093:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001096:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001099:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109c:	e9 db fe ff ff       	jmp    c0000f7c <dlmalloc+0xc5>
c00010a1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a7:	76 78                	jbe    c0001121 <dlmalloc+0x26a>
c00010a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010ad:	8d 04 c5 f4 ac 02 c0 	lea    eax,[eax*8-0x3ffd530c]
c00010b4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ba:	39 ca                	cmp    edx,ecx
c00010bc:	74 63                	je     c0001121 <dlmalloc+0x26a>
c00010be:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c4:	83 e3 fc             	and    ebx,0xfffffffc
c00010c7:	39 de                	cmp    esi,ebx
c00010c9:	77 52                	ja     c000111d <dlmalloc+0x266>
c00010cb:	89 df                	mov    edi,ebx
c00010cd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d0:	29 f7                	sub    edi,esi
c00010d2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d5:	01 d3                	add    ebx,edx
c00010d7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010da:	83 ff 0f             	cmp    edi,0xf
c00010dd:	8d 42 08             	lea    eax,[edx+0x8]
c00010e0:	77 09                	ja     c00010eb <dlmalloc+0x234>
c00010e2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e6:	e9 52 01 00 00       	jmp    c000123d <dlmalloc+0x386>
c00010eb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010ee:	83 ce 01             	or     esi,0x1
c00010f1:	89 0d fc ac 02 c0    	mov    DWORD PTR ds:0xc002acfc,ecx
c00010f7:	89 0d 00 ad 02 c0    	mov    DWORD PTR ds:0xc002ad00,ecx
c00010fd:	c7 41 08 f4 ac 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002acf4
c0001104:	c7 41 0c f4 ac 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002acf4
c000110b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000110e:	89 fa                	mov    edx,edi
c0001110:	83 ca 01             	or     edx,0x1
c0001113:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001116:	89 3b                	mov    DWORD PTR [ebx],edi
c0001118:	e9 20 01 00 00       	jmp    c000123d <dlmalloc+0x386>
c000111d:	89 c2                	mov    edx,eax
c000111f:	eb 99                	jmp    c00010ba <dlmalloc+0x203>
c0001121:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001125:	b8 01 00 00 00       	mov    eax,0x1
c000112a:	41                   	inc    ecx
c000112b:	89 cb                	mov    ebx,ecx
c000112d:	8d 14 cd ec ac 02 c0 	lea    edx,[ecx*8-0x3ffd5314]
c0001134:	c1 eb 05             	shr    ebx,0x5
c0001137:	d3 e0                	shl    eax,cl
c0001139:	8b 3c 9d f4 af 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd500c]
c0001140:	39 f8                	cmp    eax,edi
c0001142:	77 04                	ja     c0001148 <dlmalloc+0x291>
c0001144:	85 c0                	test   eax,eax
c0001146:	75 26                	jne    c000116e <dlmalloc+0x2b7>
c0001148:	43                   	inc    ebx
c0001149:	83 fb 02             	cmp    ebx,0x2
c000114c:	0f 87 a6 00 00 00    	ja     c00011f8 <dlmalloc+0x341>
c0001152:	8b 3c 9d f4 af 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd500c]
c0001159:	85 ff                	test   edi,edi
c000115b:	74 eb                	je     c0001148 <dlmalloc+0x291>
c000115d:	89 d8                	mov    eax,ebx
c000115f:	c1 e0 06             	shl    eax,0x6
c0001162:	8d 14 85 ec ac 02 c0 	lea    edx,[eax*4-0x3ffd5314]
c0001169:	b8 01 00 00 00       	mov    eax,0x1
c000116e:	85 f8                	test   eax,edi
c0001170:	75 07                	jne    c0001179 <dlmalloc+0x2c2>
c0001172:	83 c2 08             	add    edx,0x8
c0001175:	01 c0                	add    eax,eax
c0001177:	eb f5                	jmp    c000116e <dlmalloc+0x2b7>
c0001179:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117c:	39 ca                	cmp    edx,ecx
c000117e:	75 14                	jne    c0001194 <dlmalloc+0x2dd>
c0001180:	89 c1                	mov    ecx,eax
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	f7 d1                	not    ecx
c0001187:	01 c0                	add    eax,eax
c0001189:	21 cf                	and    edi,ecx
c000118b:	89 3c 9d f4 af 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd500c],edi
c0001192:	eb ac                	jmp    c0001140 <dlmalloc+0x289>
c0001194:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001197:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119a:	83 e0 fc             	and    eax,0xfffffffc
c000119d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a0:	89 c3                	mov    ebx,eax
c00011a2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a5:	29 f3                	sub    ebx,esi
c00011a7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011aa:	83 fb 0f             	cmp    ebx,0xf
c00011ad:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b0:	77 09                	ja     c00011bb <dlmalloc+0x304>
c00011b2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b6:	e9 82 00 00 00       	jmp    c000123d <dlmalloc+0x386>
c00011bb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011be:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c4:	89 3d fc ac 02 c0    	mov    DWORD PTR ds:0xc002acfc,edi
c00011ca:	89 3d 00 ad 02 c0    	mov    DWORD PTR ds:0xc002ad00,edi
c00011d0:	c7 47 08 f4 ac 02 c0 	mov    DWORD PTR [edi+0x8],0xc002acf4
c00011d7:	c7 47 0c f4 ac 02 c0 	mov    DWORD PTR [edi+0xc],0xc002acf4
c00011de:	77 06                	ja     c00011e6 <dlmalloc+0x32f>
c00011e0:	89 3d f0 ac 02 c0    	mov    DWORD PTR ds:0xc002acf0,edi
c00011e6:	83 ce 01             	or     esi,0x1
c00011e9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ec:	89 d9                	mov    ecx,ebx
c00011ee:	83 c9 01             	or     ecx,0x1
c00011f1:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f4:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f6:	eb 45                	jmp    c000123d <dlmalloc+0x386>
c00011f8:	a1 ec ac 02 c0       	mov    eax,ds:0xc002acec
c00011fd:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001200:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001203:	83 e2 fc             	and    edx,0xfffffffc
c0001206:	39 d1                	cmp    ecx,edx
c0001208:	77 1e                	ja     c0001228 <dlmalloc+0x371>
c000120a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120d:	89 f3                	mov    ebx,esi
c000120f:	89 0d ec ac 02 c0    	mov    DWORD PTR ds:0xc002acec,ecx
c0001215:	83 cb 01             	or     ebx,0x1
c0001218:	29 f2                	sub    edx,esi
c000121a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121d:	83 ca 01             	or     edx,0x1
c0001220:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001223:	e9 2d fd ff ff       	jmp    c0000f55 <dlmalloc+0x9e>
c0001228:	83 c4 1c             	add    esp,0x1c
c000122b:	89 f0                	mov    eax,esi
c000122d:	5b                   	pop    ebx
c000122e:	ba c0 ac 02 c0       	mov    edx,0xc002acc0
c0001233:	5e                   	pop    esi
c0001234:	5f                   	pop    edi
c0001235:	5d                   	pop    ebp
c0001236:	e9 16 fa ff ff       	jmp    c0000c51 <sYSMALLOc>
c000123b:	31 c0                	xor    eax,eax
c000123d:	83 c4 1c             	add    esp,0x1c
c0001240:	5b                   	pop    ebx
c0001241:	5e                   	pop    esi
c0001242:	5f                   	pop    edi
c0001243:	5d                   	pop    ebp
c0001244:	c3                   	ret    

c0001245 <iALLOc>:
c0001245:	55                   	push   ebp
c0001246:	89 c5                	mov    ebp,eax
c0001248:	57                   	push   edi
c0001249:	56                   	push   esi
c000124a:	53                   	push   ebx
c000124b:	83 ec 2c             	sub    esp,0x2c
c000124e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001252:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001256:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125a:	83 3d c0 ac 02 c0 00 	cmp    DWORD PTR ds:0xc002acc0,0x0
c0001261:	75 12                	jne    c0001275 <iALLOc+0x30>
c0001263:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001267:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c000126c:	e8 04 f8 ff ff       	call   c0000a75 <malloc_consolidate>
c0001271:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001275:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127a:	74 12                	je     c000128e <iALLOc+0x49>
c000127c:	85 ed                	test   ebp,ebp
c000127e:	0f 84 64 01 00 00    	je     c00013e8 <iALLOc+0x1a3>
c0001284:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128c:	eb 33                	jmp    c00012c1 <iALLOc+0x7c>
c000128e:	85 ed                	test   ebp,ebp
c0001290:	75 14                	jne    c00012a6 <iALLOc+0x61>
c0001292:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129a:	83 c4 2c             	add    esp,0x2c
c000129d:	5b                   	pop    ebx
c000129e:	5e                   	pop    esi
c000129f:	5f                   	pop    edi
c00012a0:	5d                   	pop    ebp
c00012a1:	e9 11 fc ff ff       	jmp    c0000eb7 <dlmalloc>
c00012a6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012ad:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b5:	83 f8 0f             	cmp    eax,0xf
c00012b8:	76 07                	jbe    c00012c1 <iALLOc+0x7c>
c00012ba:	83 e0 f8             	and    eax,0xfffffff8
c00012bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c6:	75 09                	jne    c00012d1 <iALLOc+0x8c>
c00012c8:	89 d0                	mov    eax,edx
c00012ca:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012cd:	31 f6                	xor    esi,esi
c00012cf:	eb 3b                	jmp    c000130c <iALLOc+0xc7>
c00012d1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012db:	83 c0 0b             	add    eax,0xb
c00012de:	83 f8 0f             	cmp    eax,0xf
c00012e1:	76 07                	jbe    c00012ea <iALLOc+0xa5>
c00012e3:	83 e0 f8             	and    eax,0xfffffff8
c00012e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012ee:	0f af f5             	imul   esi,ebp
c00012f1:	eb 25                	jmp    c0001318 <iALLOc+0xd3>
c00012f3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f5:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012f8:	bb 10 00 00 00       	mov    ebx,0x10
c00012fd:	83 f9 0f             	cmp    ecx,0xf
c0001300:	76 05                	jbe    c0001307 <iALLOc+0xc2>
c0001302:	83 e1 f8             	and    ecx,0xfffffff8
c0001305:	89 cb                	mov    ebx,ecx
c0001307:	01 de                	add    esi,ebx
c0001309:	83 c0 04             	add    eax,0x4
c000130c:	39 c7                	cmp    edi,eax
c000130e:	75 e3                	jne    c00012f3 <iALLOc+0xae>
c0001310:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001318:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131c:	8b 1d 14 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b014
c0001322:	83 ec 0c             	sub    esp,0xc
c0001325:	c7 05 14 b0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b014,0x0
c000132f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001333:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001337:	50                   	push   eax
c0001338:	e8 7a fb ff ff       	call   c0000eb7 <dlmalloc>
c000133d:	83 c4 10             	add    esp,0x10
c0001340:	89 1d 14 b0 02 c0    	mov    DWORD PTR ds:0xc002b014,ebx
c0001346:	85 c0                	test   eax,eax
c0001348:	0f 84 92 00 00 00    	je     c00013e0 <iALLOc+0x19b>
c000134e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001351:	8d 78 f8             	lea    edi,[eax-0x8]
c0001354:	83 e3 fc             	and    ebx,0xfffffffc
c0001357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001360:	74 1e                	je     c0001380 <iALLOc+0x13b>
c0001362:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001366:	89 d9                	mov    ecx,ebx
c0001368:	52                   	push   edx
c0001369:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136d:	83 e9 04             	sub    ecx,0x4
c0001370:	51                   	push   ecx
c0001371:	6a 00                	push   0x0
c0001373:	50                   	push   eax
c0001374:	e8 02 f3 ff ff       	call   c000067b <memset>
c0001379:	83 c4 10             	add    esp,0x10
c000137c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001380:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001385:	75 14                	jne    c000139b <iALLOc+0x156>
c0001387:	8d 04 37             	lea    eax,[edi+esi*1]
c000138a:	29 f3                	sub    ebx,esi
c000138c:	8d 48 08             	lea    ecx,[eax+0x8]
c000138f:	83 cb 01             	or     ebx,0x1
c0001392:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001399:	89 f3                	mov    ebx,esi
c000139b:	31 c0                	xor    eax,eax
c000139d:	4d                   	dec    ebp
c000139e:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a5:	39 c5                	cmp    ebp,eax
c00013a7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013aa:	74 2c                	je     c00013d8 <iALLOc+0x193>
c00013ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b0:	85 c9                	test   ecx,ecx
c00013b2:	75 15                	jne    c00013c9 <iALLOc+0x184>
c00013b4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ba:	b9 10 00 00 00       	mov    ecx,0x10
c00013bf:	83 fe 0f             	cmp    esi,0xf
c00013c2:	76 05                	jbe    c00013c9 <iALLOc+0x184>
c00013c4:	83 e6 f8             	and    esi,0xfffffff8
c00013c7:	89 f1                	mov    ecx,esi
c00013c9:	89 ce                	mov    esi,ecx
c00013cb:	29 cb                	sub    ebx,ecx
c00013cd:	83 ce 01             	or     esi,0x1
c00013d0:	40                   	inc    eax
c00013d1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d4:	01 cf                	add    edi,ecx
c00013d6:	eb c6                	jmp    c000139e <iALLOc+0x159>
c00013d8:	83 cb 01             	or     ebx,0x1
c00013db:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013de:	eb 08                	jmp    c00013e8 <iALLOc+0x1a3>
c00013e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ec:	83 c4 2c             	add    esp,0x2c
c00013ef:	5b                   	pop    ebx
c00013f0:	5e                   	pop    esi
c00013f1:	5f                   	pop    edi
c00013f2:	5d                   	pop    ebp
c00013f3:	c3                   	ret    

c00013f4 <dlrealloc>:
c00013f4:	55                   	push   ebp
c00013f5:	57                   	push   edi
c00013f6:	56                   	push   esi
c00013f7:	53                   	push   ebx
c00013f8:	83 ec 1c             	sub    esp,0x1c
c00013fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00013ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001403:	85 db                	test   ebx,ebx
c0001405:	75 10                	jne    c0001417 <dlrealloc+0x23>
c0001407:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140b:	83 c4 1c             	add    esp,0x1c
c000140e:	5b                   	pop    ebx
c000140f:	5e                   	pop    esi
c0001410:	5f                   	pop    edi
c0001411:	5d                   	pop    ebp
c0001412:	e9 a0 fa ff ff       	jmp    c0000eb7 <dlmalloc>
c0001417:	83 f8 df             	cmp    eax,0xffffffdf
c000141a:	76 07                	jbe    c0001423 <dlrealloc+0x2f>
c000141c:	31 db                	xor    ebx,ebx
c000141e:	e9 7c 01 00 00       	jmp    c000159f <dlrealloc+0x1ab>
c0001423:	83 c0 0b             	add    eax,0xb
c0001426:	bf 10 00 00 00       	mov    edi,0x10
c000142b:	83 f8 0f             	cmp    eax,0xf
c000142e:	76 05                	jbe    c0001435 <dlrealloc+0x41>
c0001430:	83 e0 f8             	and    eax,0xfffffff8
c0001433:	89 c7                	mov    edi,eax
c0001435:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001438:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143b:	89 c6                	mov    esi,eax
c000143d:	83 e6 fc             	and    esi,0xfffffffc
c0001440:	a8 02                	test   al,0x2
c0001442:	75 d8                	jne    c000141c <dlrealloc+0x28>
c0001444:	39 f7                	cmp    edi,esi
c0001446:	0f 86 15 01 00 00    	jbe    c0001561 <dlrealloc+0x16d>
c000144c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001450:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001453:	39 15 ec ac 02 c0    	cmp    DWORD PTR ds:0xc002acec,edx
c0001459:	75 33                	jne    c000148e <dlrealloc+0x9a>
c000145b:	83 e1 fc             	and    ecx,0xfffffffc
c000145e:	01 f1                	add    ecx,esi
c0001460:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001464:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001467:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146b:	77 49                	ja     c00014b6 <dlrealloc+0xc2>
c000146d:	01 fd                	add    ebp,edi
c000146f:	83 e0 01             	and    eax,0x1
c0001472:	09 f8                	or     eax,edi
c0001474:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001477:	89 2d ec ac 02 c0    	mov    DWORD PTR ds:0xc002acec,ebp
c000147d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001481:	29 f8                	sub    eax,edi
c0001483:	83 c8 01             	or     eax,0x1
c0001486:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001489:	e9 11 01 00 00       	jmp    c000159f <dlrealloc+0x1ab>
c000148e:	89 c8                	mov    eax,ecx
c0001490:	83 e0 fe             	and    eax,0xfffffffe
c0001493:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001498:	75 1c                	jne    c00014b6 <dlrealloc+0xc2>
c000149a:	83 e1 fc             	and    ecx,0xfffffffc
c000149d:	01 f1                	add    ecx,esi
c000149f:	39 cf                	cmp    edi,ecx
c00014a1:	77 13                	ja     c00014b6 <dlrealloc+0xc2>
c00014a3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014a9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ac:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014af:	89 ce                	mov    esi,ecx
c00014b1:	e9 ab 00 00 00       	jmp    c0001561 <dlrealloc+0x16d>
c00014b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ba:	8d 47 f9             	lea    eax,[edi-0x7]
c00014bd:	83 ec 0c             	sub    esp,0xc
c00014c0:	50                   	push   eax
c00014c1:	e8 f1 f9 ff ff       	call   c0000eb7 <dlmalloc>
c00014c6:	83 c4 10             	add    esp,0x10
c00014c9:	89 c1                	mov    ecx,eax
c00014cb:	85 c0                	test   eax,eax
c00014cd:	0f 84 49 ff ff ff    	je     c000141c <dlrealloc+0x28>
c00014d3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014da:	39 c2                	cmp    edx,eax
c00014dc:	75 0a                	jne    c00014e8 <dlrealloc+0xf4>
c00014de:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e1:	83 e0 fc             	and    eax,0xfffffffc
c00014e4:	01 c6                	add    esi,eax
c00014e6:	eb 79                	jmp    c0001561 <dlrealloc+0x16d>
c00014e8:	83 ee 04             	sub    esi,0x4
c00014eb:	83 fe 27             	cmp    esi,0x27
c00014ee:	76 16                	jbe    c0001506 <dlrealloc+0x112>
c00014f0:	50                   	push   eax
c00014f1:	56                   	push   esi
c00014f2:	53                   	push   ebx
c00014f3:	51                   	push   ecx
c00014f4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014f8:	e8 48 f1 ff ff       	call   c0000645 <memcpy>
c00014fd:	83 c4 10             	add    esp,0x10
c0001500:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001504:	eb 43                	jmp    c0001549 <dlrealloc+0x155>
c0001506:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001508:	83 fe 13             	cmp    esi,0x13
c000150b:	89 01                	mov    DWORD PTR [ecx],eax
c000150d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001510:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001513:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001516:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001519:	76 2e                	jbe    c0001549 <dlrealloc+0x155>
c000151b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000151e:	83 fe 1b             	cmp    esi,0x1b
c0001521:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001524:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001527:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152a:	76 1d                	jbe    c0001549 <dlrealloc+0x155>
c000152c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000152f:	83 fe 23             	cmp    esi,0x23
c0001532:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001535:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001538:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153b:	76 0c                	jbe    c0001549 <dlrealloc+0x155>
c000153d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001540:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001543:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001546:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001549:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154d:	83 ec 0c             	sub    esp,0xc
c0001550:	53                   	push   ebx
c0001551:	e8 06 f6 ff ff       	call   c0000b5c <dlfree>
c0001556:	83 c4 10             	add    esp,0x10
c0001559:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155d:	89 cb                	mov    ebx,ecx
c000155f:	eb 3e                	jmp    c000159f <dlrealloc+0x1ab>
c0001561:	89 f2                	mov    edx,esi
c0001563:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001566:	29 fa                	sub    edx,edi
c0001568:	83 e1 01             	and    ecx,0x1
c000156b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000156f:	83 fa 0f             	cmp    edx,0xf
c0001572:	77 0b                	ja     c000157f <dlrealloc+0x18b>
c0001574:	09 ce                	or     esi,ecx
c0001576:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001579:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157d:	eb 20                	jmp    c000159f <dlrealloc+0x1ab>
c000157f:	01 fd                	add    ebp,edi
c0001581:	83 ec 0c             	sub    esp,0xc
c0001584:	09 cf                	or     edi,ecx
c0001586:	83 ca 01             	or     edx,0x1
c0001589:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158c:	83 c5 08             	add    ebp,0x8
c000158f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001592:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001596:	55                   	push   ebp
c0001597:	e8 c0 f5 ff ff       	call   c0000b5c <dlfree>
c000159c:	83 c4 10             	add    esp,0x10
c000159f:	83 c4 1c             	add    esp,0x1c
c00015a2:	89 d8                	mov    eax,ebx
c00015a4:	5b                   	pop    ebx
c00015a5:	5e                   	pop    esi
c00015a6:	5f                   	pop    edi
c00015a7:	5d                   	pop    ebp
c00015a8:	c3                   	ret    

c00015a9 <dlmemalign>:
c00015a9:	55                   	push   ebp
c00015aa:	57                   	push   edi
c00015ab:	56                   	push   esi
c00015ac:	53                   	push   ebx
c00015ad:	83 ec 0c             	sub    esp,0xc
c00015b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015b8:	83 fa 08             	cmp    edx,0x8
c00015bb:	77 10                	ja     c00015cd <dlmemalign+0x24>
c00015bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c1:	83 c4 0c             	add    esp,0xc
c00015c4:	5b                   	pop    ebx
c00015c5:	5e                   	pop    esi
c00015c6:	5f                   	pop    edi
c00015c7:	5d                   	pop    ebp
c00015c8:	e9 ea f8 ff ff       	jmp    c0000eb7 <dlmalloc>
c00015cd:	bf 10 00 00 00       	mov    edi,0x10
c00015d2:	83 fa 0f             	cmp    edx,0xf
c00015d5:	76 13                	jbe    c00015ea <dlmemalign+0x41>
c00015d7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015da:	85 d1                	test   ecx,edx
c00015dc:	75 04                	jne    c00015e2 <dlmemalign+0x39>
c00015de:	89 d7                	mov    edi,edx
c00015e0:	eb 08                	jmp    c00015ea <dlmemalign+0x41>
c00015e2:	39 d7                	cmp    edi,edx
c00015e4:	73 04                	jae    c00015ea <dlmemalign+0x41>
c00015e6:	01 ff                	add    edi,edi
c00015e8:	eb f8                	jmp    c00015e2 <dlmemalign+0x39>
c00015ea:	83 f8 df             	cmp    eax,0xffffffdf
c00015ed:	76 07                	jbe    c00015f6 <dlmemalign+0x4d>
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	e9 ce 00 00 00       	jmp    c00016c4 <dlmemalign+0x11b>
c00015f6:	83 c0 0b             	add    eax,0xb
c00015f9:	bd 10 00 00 00       	mov    ebp,0x10
c00015fe:	83 f8 0f             	cmp    eax,0xf
c0001601:	76 05                	jbe    c0001608 <dlmemalign+0x5f>
c0001603:	83 e0 f8             	and    eax,0xfffffff8
c0001606:	89 c5                	mov    ebp,eax
c0001608:	83 ec 0c             	sub    esp,0xc
c000160b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000160f:	50                   	push   eax
c0001610:	e8 a2 f8 ff ff       	call   c0000eb7 <dlmalloc>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	89 c1                	mov    ecx,eax
c000161a:	85 c0                	test   eax,eax
c000161c:	74 d1                	je     c00015ef <dlmemalign+0x46>
c000161e:	31 d2                	xor    edx,edx
c0001620:	8d 70 f8             	lea    esi,[eax-0x8]
c0001623:	f7 f7                	div    edi
c0001625:	85 d2                	test   edx,edx
c0001627:	74 62                	je     c000168b <dlmemalign+0xe2>
c0001629:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162d:	89 f8                	mov    eax,edi
c000162f:	f7 d8                	neg    eax
c0001631:	21 c3                	and    ebx,eax
c0001633:	83 eb 08             	sub    ebx,0x8
c0001636:	89 d8                	mov    eax,ebx
c0001638:	29 f0                	sub    eax,esi
c000163a:	83 f8 0f             	cmp    eax,0xf
c000163d:	77 02                	ja     c0001641 <dlmemalign+0x98>
c000163f:	01 fb                	add    ebx,edi
c0001641:	89 d8                	mov    eax,ebx
c0001643:	29 f0                	sub    eax,esi
c0001645:	89 c6                	mov    esi,eax
c0001647:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164a:	89 c2                	mov    edx,eax
c000164c:	83 e2 fc             	and    edx,0xfffffffc
c000164f:	29 f2                	sub    edx,esi
c0001651:	a8 02                	test   al,0x2
c0001653:	74 10                	je     c0001665 <dlmemalign+0xbc>
c0001655:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001658:	83 ca 02             	or     edx,0x2
c000165b:	8d 43 08             	lea    eax,[ebx+0x8]
c000165e:	89 33                	mov    DWORD PTR [ebx],esi
c0001660:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001663:	eb 5f                	jmp    c00016c4 <dlmemalign+0x11b>
c0001665:	83 ec 0c             	sub    esp,0xc
c0001668:	89 d0                	mov    eax,edx
c000166a:	83 c8 01             	or     eax,0x1
c000166d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001670:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001675:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001678:	83 e0 01             	and    eax,0x1
c000167b:	09 f0                	or     eax,esi
c000167d:	89 de                	mov    esi,ebx
c000167f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001682:	51                   	push   ecx
c0001683:	e8 d4 f4 ff ff       	call   c0000b5c <dlfree>
c0001688:	83 c4 10             	add    esp,0x10
c000168b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000168e:	a8 02                	test   al,0x2
c0001690:	75 2f                	jne    c00016c1 <dlmemalign+0x118>
c0001692:	83 e0 fc             	and    eax,0xfffffffc
c0001695:	8d 55 10             	lea    edx,[ebp+0x10]
c0001698:	39 c2                	cmp    edx,eax
c000169a:	73 25                	jae    c00016c1 <dlmemalign+0x118>
c000169c:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000169f:	83 ec 0c             	sub    esp,0xc
c00016a2:	29 e8                	sub    eax,ebp
c00016a4:	83 c2 08             	add    edx,0x8
c00016a7:	83 c8 01             	or     eax,0x1
c00016aa:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b0:	83 e0 01             	and    eax,0x1
c00016b3:	09 c5                	or     ebp,eax
c00016b5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016b8:	52                   	push   edx
c00016b9:	e8 9e f4 ff ff       	call   c0000b5c <dlfree>
c00016be:	83 c4 10             	add    esp,0x10
c00016c1:	8d 46 08             	lea    eax,[esi+0x8]
c00016c4:	83 c4 0c             	add    esp,0xc
c00016c7:	5b                   	pop    ebx
c00016c8:	5e                   	pop    esi
c00016c9:	5f                   	pop    edi
c00016ca:	5d                   	pop    ebp
c00016cb:	c3                   	ret    

c00016cc <dlcalloc>:
c00016cc:	53                   	push   ebx
c00016cd:	83 ec 14             	sub    esp,0x14
c00016d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016d9:	50                   	push   eax
c00016da:	e8 d8 f7 ff ff       	call   c0000eb7 <dlmalloc>
c00016df:	83 c4 10             	add    esp,0x10
c00016e2:	89 c3                	mov    ebx,eax
c00016e4:	85 c0                	test   eax,eax
c00016e6:	74 77                	je     c000175f <dlcalloc+0x93>
c00016e8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016eb:	89 d0                	mov    eax,edx
c00016ed:	83 e0 fc             	and    eax,0xfffffffc
c00016f0:	80 e2 02             	and    dl,0x2
c00016f3:	75 5a                	jne    c000174f <dlcalloc+0x83>
c00016f5:	83 e8 04             	sub    eax,0x4
c00016f8:	83 f8 27             	cmp    eax,0x27
c00016fb:	76 03                	jbe    c0001700 <dlcalloc+0x34>
c00016fd:	51                   	push   ecx
c00016fe:	eb 53                	jmp    c0001753 <dlcalloc+0x87>
c0001700:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001706:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001714:	83 f8 13             	cmp    eax,0x13
c0001717:	76 46                	jbe    c000175f <dlcalloc+0x93>
c0001719:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001720:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001727:	83 f8 1b             	cmp    eax,0x1b
c000172a:	76 33                	jbe    c000175f <dlcalloc+0x93>
c000172c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001733:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173a:	83 f8 23             	cmp    eax,0x23
c000173d:	76 20                	jbe    c000175f <dlcalloc+0x93>
c000173f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001746:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174d:	eb 10                	jmp    c000175f <dlcalloc+0x93>
c000174f:	83 e8 08             	sub    eax,0x8
c0001752:	52                   	push   edx
c0001753:	50                   	push   eax
c0001754:	6a 00                	push   0x0
c0001756:	53                   	push   ebx
c0001757:	e8 1f ef ff ff       	call   c000067b <memset>
c000175c:	83 c4 10             	add    esp,0x10
c000175f:	89 d8                	mov    eax,ebx
c0001761:	83 c4 08             	add    esp,0x8
c0001764:	5b                   	pop    ebx
c0001765:	c3                   	ret    

c0001766 <dlcfree>:
c0001766:	e9 f1 f3 ff ff       	jmp    c0000b5c <dlfree>

c000176b <dlindependent_calloc>:
c000176b:	83 ec 28             	sub    esp,0x28
c000176e:	b9 03 00 00 00       	mov    ecx,0x3
c0001773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001777:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000177f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	e8 b9 fa ff ff       	call   c0001245 <iALLOc>
c000178c:	83 c4 2c             	add    esp,0x2c
c000178f:	c3                   	ret    

c0001790 <dlindependent_comalloc>:
c0001790:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001798:	31 c9                	xor    ecx,ecx
c000179a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000179e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a2:	e9 9e fa ff ff       	jmp    c0001245 <iALLOc>

c00017a7 <dlvalloc>:
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	83 3d c0 ac 02 c0 00 	cmp    DWORD PTR ds:0xc002acc0,0x0
c00017b1:	75 0a                	jne    c00017bd <dlvalloc+0x16>
c00017b3:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c00017b8:	e8 b8 f2 ff ff       	call   c0000a75 <malloc_consolidate>
c00017bd:	50                   	push   eax
c00017be:	50                   	push   eax
c00017bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c3:	ff 35 1c b0 02 c0    	push   DWORD PTR ds:0xc002b01c
c00017c9:	e8 db fd ff ff       	call   c00015a9 <dlmemalign>
c00017ce:	83 c4 1c             	add    esp,0x1c
c00017d1:	c3                   	ret    

c00017d2 <dlpvalloc>:
c00017d2:	83 ec 0c             	sub    esp,0xc
c00017d5:	83 3d c0 ac 02 c0 00 	cmp    DWORD PTR ds:0xc002acc0,0x0
c00017dc:	75 0a                	jne    c00017e8 <dlpvalloc+0x16>
c00017de:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c00017e3:	e8 8d f2 ff ff       	call   c0000a75 <malloc_consolidate>
c00017e8:	a1 1c b0 02 c0       	mov    eax,ds:0xc002b01c
c00017ed:	89 c1                	mov    ecx,eax
c00017ef:	52                   	push   edx
c00017f0:	f7 d9                	neg    ecx
c00017f2:	52                   	push   edx
c00017f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f7:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fb:	21 ca                	and    edx,ecx
c00017fd:	52                   	push   edx
c00017fe:	50                   	push   eax
c00017ff:	e8 a5 fd ff ff       	call   c00015a9 <dlmemalign>
c0001804:	83 c4 1c             	add    esp,0x1c
c0001807:	c3                   	ret    

c0001808 <dlmalloc_trim>:
c0001808:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c000180d:	e8 63 f2 ff ff       	call   c0000a75 <malloc_consolidate>
c0001812:	31 c0                	xor    eax,eax
c0001814:	c3                   	ret    

c0001815 <dlmalloc_usable_size>:
c0001815:	53                   	push   ebx
c0001816:	31 c0                	xor    eax,eax
c0001818:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181c:	85 c9                	test   ecx,ecx
c000181e:	74 24                	je     c0001844 <dlmalloc_usable_size+0x2f>
c0001820:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001823:	f6 c2 02             	test   dl,0x2
c0001826:	74 08                	je     c0001830 <dlmalloc_usable_size+0x1b>
c0001828:	83 e2 fc             	and    edx,0xfffffffc
c000182b:	8d 42 f8             	lea    eax,[edx-0x8]
c000182e:	eb 14                	jmp    c0001844 <dlmalloc_usable_size+0x2f>
c0001830:	89 d3                	mov    ebx,edx
c0001832:	31 c0                	xor    eax,eax
c0001834:	83 e3 fe             	and    ebx,0xfffffffe
c0001837:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183c:	74 06                	je     c0001844 <dlmalloc_usable_size+0x2f>
c000183e:	83 e2 fc             	and    edx,0xfffffffc
c0001841:	8d 42 fc             	lea    eax,[edx-0x4]
c0001844:	5b                   	pop    ebx
c0001845:	c3                   	ret    

c0001846 <dlmallinfo>:
c0001846:	55                   	push   ebp
c0001847:	57                   	push   edi
c0001848:	56                   	push   esi
c0001849:	53                   	push   ebx
c000184a:	83 ec 08             	sub    esp,0x8
c000184d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001851:	83 3d ec ac 02 c0 00 	cmp    DWORD PTR ds:0xc002acec,0x0
c0001858:	75 0a                	jne    c0001864 <dlmallinfo+0x1e>
c000185a:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c000185f:	e8 11 f2 ff ff       	call   c0000a75 <malloc_consolidate>
c0001864:	a1 ec ac 02 c0       	mov    eax,ds:0xc002acec
c0001869:	31 ed                	xor    ebp,ebp
c000186b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000186e:	31 c9                	xor    ecx,ecx
c0001870:	83 e0 fc             	and    eax,0xfffffffc
c0001873:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001877:	31 c0                	xor    eax,eax
c0001879:	8b 14 85 c4 ac 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd533c]
c0001880:	85 d2                	test   edx,edx
c0001882:	74 0e                	je     c0001892 <dlmallinfo+0x4c>
c0001884:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001887:	45                   	inc    ebp
c0001888:	83 e6 fc             	and    esi,0xfffffffc
c000188b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000188e:	01 f1                	add    ecx,esi
c0001890:	eb ee                	jmp    c0001880 <dlmallinfo+0x3a>
c0001892:	40                   	inc    eax
c0001893:	83 f8 0a             	cmp    eax,0xa
c0001896:	75 e1                	jne    c0001879 <dlmallinfo+0x33>
c0001898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a6:	b8 f4 ac 02 c0       	mov    eax,0xc002acf4
c00018ab:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018ae:	39 f0                	cmp    eax,esi
c00018b0:	74 10                	je     c00018c2 <dlmallinfo+0x7c>
c00018b2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b5:	ff 04 24             	inc    DWORD PTR [esp]
c00018b8:	83 e7 fc             	and    edi,0xfffffffc
c00018bb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018be:	01 fa                	add    edx,edi
c00018c0:	eb ec                	jmp    c00018ae <dlmallinfo+0x68>
c00018c2:	83 c0 08             	add    eax,0x8
c00018c5:	3d ec af 02 c0       	cmp    eax,0xc002afec
c00018ca:	75 df                	jne    c00018ab <dlmallinfo+0x65>
c00018cc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018cf:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d5:	a1 28 b0 02 c0       	mov    eax,ds:0xc002b028
c00018da:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018dd:	89 03                	mov    DWORD PTR [ebx],eax
c00018df:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e2:	8b 35 10 b0 02 c0    	mov    esi,DWORD PTR ds:0xc002b010
c00018e8:	29 d0                	sub    eax,edx
c00018ea:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ed:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f0:	8b 35 24 b0 02 c0    	mov    esi,DWORD PTR ds:0xc002b024
c00018f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fa:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018fd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001900:	8b 35 34 b0 02 c0    	mov    esi,DWORD PTR ds:0xc002b034
c0001906:	89 d8                	mov    eax,ebx
c0001908:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190b:	83 c4 08             	add    esp,0x8
c000190e:	5b                   	pop    ebx
c000190f:	5e                   	pop    esi
c0001910:	5f                   	pop    edi
c0001911:	5d                   	pop    ebp
c0001912:	c2 04 00             	ret    0x4

c0001915 <dlmalloc_stats>:
c0001915:	83 ec 30             	sub    esp,0x30
c0001918:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191c:	50                   	push   eax
c000191d:	e8 24 ff ff ff       	call   c0001846 <dlmallinfo>
c0001922:	83 c4 30             	add    esp,0x30
c0001925:	c3                   	ret    

c0001926 <dlmallopt>:
c0001926:	56                   	push   esi
c0001927:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c000192c:	53                   	push   ebx
c000192d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001935:	e8 3b f1 ff ff       	call   c0000a75 <malloc_consolidate>
c000193a:	8d 46 04             	lea    eax,[esi+0x4]
c000193d:	83 f8 05             	cmp    eax,0x5
c0001940:	77 67                	ja     c00019a9 <dlmallopt+0x83>
c0001942:	ff 24 85 04 68 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd97fc]
c0001949:	83 fb 50             	cmp    ebx,0x50
c000194c:	77 5b                	ja     c00019a9 <dlmallopt+0x83>
c000194e:	ba 08 00 00 00       	mov    edx,0x8
c0001953:	85 db                	test   ebx,ebx
c0001955:	74 12                	je     c0001969 <dlmallopt+0x43>
c0001957:	83 c3 0b             	add    ebx,0xb
c000195a:	ba 10 00 00 00       	mov    edx,0x10
c000195f:	83 fb 0f             	cmp    ebx,0xf
c0001962:	76 05                	jbe    c0001969 <dlmallopt+0x43>
c0001964:	89 da                	mov    edx,ebx
c0001966:	83 e2 f8             	and    edx,0xfffffff8
c0001969:	a1 c0 ac 02 c0       	mov    eax,ds:0xc002acc0
c000196e:	83 e0 03             	and    eax,0x3
c0001971:	09 d0                	or     eax,edx
c0001973:	a3 c0 ac 02 c0       	mov    ds:0xc002acc0,eax
c0001978:	eb 31                	jmp    c00019ab <dlmallopt+0x85>
c000197a:	89 1d 04 b0 02 c0    	mov    DWORD PTR ds:0xc002b004,ebx
c0001980:	eb 06                	jmp    c0001988 <dlmallopt+0x62>
c0001982:	89 1d 08 b0 02 c0    	mov    DWORD PTR ds:0xc002b008,ebx
c0001988:	be 01 00 00 00       	mov    esi,0x1
c000198d:	eb 1c                	jmp    c00019ab <dlmallopt+0x85>
c000198f:	89 1d 0c b0 02 c0    	mov    DWORD PTR ds:0xc002b00c,ebx
c0001995:	eb f1                	jmp    c0001988 <dlmallopt+0x62>
c0001997:	31 f6                	xor    esi,esi
c0001999:	85 db                	test   ebx,ebx
c000199b:	75 0e                	jne    c00019ab <dlmallopt+0x85>
c000199d:	c7 05 14 b0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b014,0x0
c00019a7:	eb df                	jmp    c0001988 <dlmallopt+0x62>
c00019a9:	31 f6                	xor    esi,esi
c00019ab:	89 f0                	mov    eax,esi
c00019ad:	5b                   	pop    ebx
c00019ae:	5e                   	pop    esi
c00019af:	c3                   	ret    

c00019b0 <disk_status>:
c00019b0:	31 c0                	xor    eax,eax
c00019b2:	c3                   	ret    

c00019b3 <disk_initialize>:
c00019b3:	31 c0                	xor    eax,eax
c00019b5:	c3                   	ret    

c00019b6 <disk_read>:
c00019b6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bb:	0f b6 04 85 00 c7 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3900]
c00019c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c7:	e9 3c d4 01 00       	jmp    c001ee08 <fatWrapperReadDisk>

c00019cc <disk_write>:
c00019cc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d1:	0f b6 04 85 00 c7 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3900]
c00019d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019dd:	e9 6d d4 01 00       	jmp    c001ee4f <fatWrapperWriteDisk>

c00019e2 <disk_ioctl>:
c00019e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019eb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f0:	0f b6 04 85 00 c7 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3900]
c00019f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fc:	e9 95 d4 01 00       	jmp    c001ee96 <fatWrapperIoctl>

c0001a01 <ld_word>:
c0001a01:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a05:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a08:	c1 e2 08             	shl    edx,0x8
c0001a0b:	09 d0                	or     eax,edx
c0001a0d:	c3                   	ret    

c0001a0e <ld_dword>:
c0001a0e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a12:	89 d1                	mov    ecx,edx
c0001a14:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a18:	c1 e1 08             	shl    ecx,0x8
c0001a1b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a1e:	09 ca                	or     edx,ecx
c0001a20:	c1 e2 08             	shl    edx,0x8
c0001a23:	09 d0                	or     eax,edx
c0001a25:	c3                   	ret    

c0001a26 <ld_qword>:
c0001a26:	57                   	push   edi
c0001a27:	56                   	push   esi
c0001a28:	53                   	push   ebx
c0001a29:	31 db                	xor    ebx,ebx
c0001a2b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a2e:	89 df                	mov    edi,ebx
c0001a30:	89 ce                	mov    esi,ecx
c0001a32:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a36:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3a:	c1 e6 08             	shl    esi,0x8
c0001a3d:	09 f2                	or     edx,esi
c0001a3f:	89 d6                	mov    esi,edx
c0001a41:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a45:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a49:	c1 e6 08             	shl    esi,0x8
c0001a4c:	09 f2                	or     edx,esi
c0001a4e:	89 d6                	mov    esi,edx
c0001a50:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a54:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5b:	c1 e6 08             	shl    esi,0x8
c0001a5e:	89 fb                	mov    ebx,edi
c0001a60:	09 f2                	or     edx,esi
c0001a62:	89 d1                	mov    ecx,edx
c0001a64:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a68:	c1 e1 08             	shl    ecx,0x8
c0001a6b:	89 da                	mov    edx,ebx
c0001a6d:	09 c8                	or     eax,ecx
c0001a6f:	5b                   	pop    ebx
c0001a70:	5e                   	pop    esi
c0001a71:	5f                   	pop    edi
c0001a72:	c3                   	ret    

c0001a73 <st_word>:
c0001a73:	66 89 10             	mov    WORD PTR [eax],dx
c0001a76:	c3                   	ret    

c0001a77 <st_dword>:
c0001a77:	89 10                	mov    DWORD PTR [eax],edx
c0001a79:	c3                   	ret    

c0001a7a <st_qword>:
c0001a7a:	89 10                	mov    DWORD PTR [eax],edx
c0001a7c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a7f:	c3                   	ret    

c0001a80 <mem_cpy>:
c0001a80:	85 c9                	test   ecx,ecx
c0001a82:	74 10                	je     c0001a94 <mem_cpy+0x14>
c0001a84:	57                   	push   edi
c0001a85:	01 c1                	add    ecx,eax
c0001a87:	56                   	push   esi
c0001a88:	89 c7                	mov    edi,eax
c0001a8a:	89 d6                	mov    esi,edx
c0001a8c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8d:	39 f9                	cmp    ecx,edi
c0001a8f:	75 fb                	jne    c0001a8c <mem_cpy+0xc>
c0001a91:	5e                   	pop    esi
c0001a92:	5f                   	pop    edi
c0001a93:	c3                   	ret    
c0001a94:	c3                   	ret    

c0001a95 <mem_set>:
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	40                   	inc    eax
c0001a98:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9b:	39 c8                	cmp    eax,ecx
c0001a9d:	75 f8                	jne    c0001a97 <mem_set+0x2>
c0001a9f:	c3                   	ret    

c0001aa0 <mem_cmp>:
c0001aa0:	57                   	push   edi
c0001aa1:	56                   	push   esi
c0001aa2:	89 c6                	mov    esi,eax
c0001aa4:	53                   	push   ebx
c0001aa5:	46                   	inc    esi
c0001aa6:	42                   	inc    edx
c0001aa7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aab:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001aaf:	29 fb                	sub    ebx,edi
c0001ab1:	89 cf                	mov    edi,ecx
c0001ab3:	29 f7                	sub    edi,esi
c0001ab5:	01 c7                	add    edi,eax
c0001ab7:	74 04                	je     c0001abd <mem_cmp+0x1d>
c0001ab9:	85 db                	test   ebx,ebx
c0001abb:	74 e8                	je     c0001aa5 <mem_cmp+0x5>
c0001abd:	89 d8                	mov    eax,ebx
c0001abf:	5b                   	pop    ebx
c0001ac0:	5e                   	pop    esi
c0001ac1:	5f                   	pop    edi
c0001ac2:	c3                   	ret    

c0001ac3 <chk_chr>:
c0001ac3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ac9:	74 07                	je     c0001ad2 <chk_chr+0xf>
c0001acb:	39 d1                	cmp    ecx,edx
c0001acd:	74 03                	je     c0001ad2 <chk_chr+0xf>
c0001acf:	40                   	inc    eax
c0001ad0:	eb f1                	jmp    c0001ac3 <chk_chr>
c0001ad2:	89 c8                	mov    eax,ecx
c0001ad4:	c3                   	ret    

c0001ad5 <dbc_1st>:
c0001ad5:	31 c0                	xor    eax,eax
c0001ad7:	c3                   	ret    

c0001ad8 <dbc_2nd>:
c0001ad8:	31 c0                	xor    eax,eax
c0001ada:	c3                   	ret    

c0001adb <tchar2uni>:
c0001adb:	57                   	push   edi
c0001adc:	89 c7                	mov    edi,eax
c0001ade:	56                   	push   esi
c0001adf:	53                   	push   ebx
c0001ae0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae7:	84 c9                	test   cl,cl
c0001ae9:	78 0a                	js     c0001af5 <tchar2uni+0x1a>
c0001aeb:	0f b6 d1             	movzx  edx,cl
c0001aee:	89 f3                	mov    ebx,esi
c0001af0:	e9 9f 00 00 00       	jmp    c0001b94 <tchar2uni+0xb9>
c0001af5:	88 ca                	mov    dl,cl
c0001af7:	83 e2 e0             	and    edx,0xffffffe0
c0001afa:	80 fa c0             	cmp    dl,0xc0
c0001afd:	75 0c                	jne    c0001b0b <tchar2uni+0x30>
c0001aff:	89 ca                	mov    edx,ecx
c0001b01:	b9 01 00 00 00       	mov    ecx,0x1
c0001b06:	83 e2 1f             	and    edx,0x1f
c0001b09:	eb 2e                	jmp    c0001b39 <tchar2uni+0x5e>
c0001b0b:	88 ca                	mov    dl,cl
c0001b0d:	83 e2 f0             	and    edx,0xfffffff0
c0001b10:	80 fa e0             	cmp    dl,0xe0
c0001b13:	75 0c                	jne    c0001b21 <tchar2uni+0x46>
c0001b15:	89 ca                	mov    edx,ecx
c0001b17:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1c:	83 e2 0f             	and    edx,0xf
c0001b1f:	eb 18                	jmp    c0001b39 <tchar2uni+0x5e>
c0001b21:	88 ca                	mov    dl,cl
c0001b23:	83 e2 f8             	and    edx,0xfffffff8
c0001b26:	88 d0                	mov    al,dl
c0001b28:	83 ca ff             	or     edx,0xffffffff
c0001b2b:	3c f0                	cmp    al,0xf0
c0001b2d:	75 6c                	jne    c0001b9b <tchar2uni+0xc0>
c0001b2f:	89 ca                	mov    edx,ecx
c0001b31:	b9 03 00 00 00       	mov    ecx,0x3
c0001b36:	83 e2 07             	and    edx,0x7
c0001b39:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3d:	46                   	inc    esi
c0001b3e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b41:	88 c8                	mov    al,cl
c0001b43:	83 e0 c0             	and    eax,0xffffffc0
c0001b46:	3c 80                	cmp    al,0x80
c0001b48:	75 4e                	jne    c0001b98 <tchar2uni+0xbd>
c0001b4a:	c1 e2 06             	shl    edx,0x6
c0001b4d:	83 e1 3f             	and    ecx,0x3f
c0001b50:	09 ca                	or     edx,ecx
c0001b52:	39 de                	cmp    esi,ebx
c0001b54:	75 e7                	jne    c0001b3d <tchar2uni+0x62>
c0001b56:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b59:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b5f:	77 37                	ja     c0001b98 <tchar2uni+0xbd>
c0001b61:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b67:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6d:	76 29                	jbe    c0001b98 <tchar2uni+0xbd>
c0001b6f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b75:	76 1d                	jbe    c0001b94 <tchar2uni+0xb9>
c0001b77:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b83:	c1 e1 06             	shl    ecx,0x6
c0001b86:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8c:	09 ca                	or     edx,ecx
c0001b8e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b94:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b96:	eb 03                	jmp    c0001b9b <tchar2uni+0xc0>
c0001b98:	83 ca ff             	or     edx,0xffffffff
c0001b9b:	5b                   	pop    ebx
c0001b9c:	89 d0                	mov    eax,edx
c0001b9e:	5e                   	pop    esi
c0001b9f:	5f                   	pop    edi
c0001ba0:	c3                   	ret    

c0001ba1 <put_utf>:
c0001ba1:	53                   	push   ebx
c0001ba2:	83 f8 7f             	cmp    eax,0x7f
c0001ba5:	89 c3                	mov    ebx,eax
c0001ba7:	b0 00                	mov    al,0x0
c0001ba9:	77 11                	ja     c0001bbc <put_utf+0x1b>
c0001bab:	85 c9                	test   ecx,ecx
c0001bad:	0f 84 e5 00 00 00    	je     c0001c98 <put_utf+0xf7>
c0001bb3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb5:	b0 01                	mov    al,0x1
c0001bb7:	e9 dc 00 00 00       	jmp    c0001c98 <put_utf+0xf7>
c0001bbc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc2:	77 23                	ja     c0001be7 <put_utf+0x46>
c0001bc4:	83 f9 01             	cmp    ecx,0x1
c0001bc7:	0f 86 cb 00 00 00    	jbe    c0001c98 <put_utf+0xf7>
c0001bcd:	89 d8                	mov    eax,ebx
c0001bcf:	83 e3 3f             	and    ebx,0x3f
c0001bd2:	c1 e8 06             	shr    eax,0x6
c0001bd5:	83 cb 80             	or     ebx,0xffffff80
c0001bd8:	83 c8 c0             	or     eax,0xffffffc0
c0001bdb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bde:	88 02                	mov    BYTE PTR [edx],al
c0001be0:	b0 02                	mov    al,0x2
c0001be2:	e9 b1 00 00 00       	jmp    c0001c98 <put_utf+0xf7>
c0001be7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bed:	77 40                	ja     c0001c2f <put_utf+0x8e>
c0001bef:	83 f9 02             	cmp    ecx,0x2
c0001bf2:	0f 86 a0 00 00 00    	jbe    c0001c98 <put_utf+0xf7>
c0001bf8:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001bfe:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c04:	0f 86 8e 00 00 00    	jbe    c0001c98 <put_utf+0xf7>
c0001c0a:	89 d8                	mov    eax,ebx
c0001c0c:	c1 e8 0c             	shr    eax,0xc
c0001c0f:	83 c8 e0             	or     eax,0xffffffe0
c0001c12:	88 02                	mov    BYTE PTR [edx],al
c0001c14:	89 d8                	mov    eax,ebx
c0001c16:	83 e3 3f             	and    ebx,0x3f
c0001c19:	c1 e8 06             	shr    eax,0x6
c0001c1c:	83 cb 80             	or     ebx,0xffffff80
c0001c1f:	83 e0 3f             	and    eax,0x3f
c0001c22:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c25:	83 c8 80             	or     eax,0xffffff80
c0001c28:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2b:	b0 03                	mov    al,0x3
c0001c2d:	eb 69                	jmp    c0001c98 <put_utf+0xf7>
c0001c2f:	83 f9 03             	cmp    ecx,0x3
c0001c32:	76 64                	jbe    c0001c98 <put_utf+0xf7>
c0001c34:	89 d9                	mov    ecx,ebx
c0001c36:	0f b7 c3             	movzx  eax,bx
c0001c39:	66 31 c9             	xor    cx,cx
c0001c3c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c42:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c48:	c1 e9 06             	shr    ecx,0x6
c0001c4b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c51:	77 43                	ja     c0001c96 <put_utf+0xf5>
c0001c53:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c59:	77 3b                	ja     c0001c96 <put_utf+0xf5>
c0001c5b:	09 cb                	or     ebx,ecx
c0001c5d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c63:	89 d8                	mov    eax,ebx
c0001c65:	c1 e8 12             	shr    eax,0x12
c0001c68:	83 c8 f0             	or     eax,0xfffffff0
c0001c6b:	88 02                	mov    BYTE PTR [edx],al
c0001c6d:	89 d8                	mov    eax,ebx
c0001c6f:	c1 e8 0c             	shr    eax,0xc
c0001c72:	83 e0 3f             	and    eax,0x3f
c0001c75:	83 c8 80             	or     eax,0xffffff80
c0001c78:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7b:	89 d8                	mov    eax,ebx
c0001c7d:	83 e3 3f             	and    ebx,0x3f
c0001c80:	c1 e8 06             	shr    eax,0x6
c0001c83:	83 cb 80             	or     ebx,0xffffff80
c0001c86:	83 e0 3f             	and    eax,0x3f
c0001c89:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8c:	83 c8 80             	or     eax,0xffffff80
c0001c8f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c92:	b0 04                	mov    al,0x4
c0001c94:	eb 02                	jmp    c0001c98 <put_utf+0xf7>
c0001c96:	31 c0                	xor    eax,eax
c0001c98:	5b                   	pop    ebx
c0001c99:	c3                   	ret    

c0001c9a <clst2sect>:
c0001c9a:	89 c1                	mov    ecx,eax
c0001c9c:	83 ea 02             	sub    edx,0x2
c0001c9f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca2:	83 e8 02             	sub    eax,0x2
c0001ca5:	39 d0                	cmp    eax,edx
c0001ca7:	76 0d                	jbe    c0001cb6 <clst2sect+0x1c>
c0001ca9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cad:	f7 e2                	mul    edx
c0001caf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb5:	c3                   	ret    
c0001cb6:	31 c0                	xor    eax,eax
c0001cb8:	31 d2                	xor    edx,edx
c0001cba:	c3                   	ret    

c0001cbb <clmt_clust>:
c0001cbb:	57                   	push   edi
c0001cbc:	89 cf                	mov    edi,ecx
c0001cbe:	56                   	push   esi
c0001cbf:	89 d6                	mov    esi,edx
c0001cc1:	53                   	push   ebx
c0001cc2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cc9:	89 f2                	mov    edx,esi
c0001ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ccd:	c1 ef 09             	shr    edi,0x9
c0001cd0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd7:	89 f9                	mov    ecx,edi
c0001cd9:	31 ff                	xor    edi,edi
c0001cdb:	57                   	push   edi
c0001cdc:	56                   	push   esi
c0001cdd:	51                   	push   ecx
c0001cde:	52                   	push   edx
c0001cdf:	e8 48 22 02 00       	call   c0023f2c <__udivdi3>
c0001ce4:	83 c4 10             	add    esp,0x10
c0001ce7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001ce9:	85 d2                	test   edx,edx
c0001ceb:	74 10                	je     c0001cfd <clmt_clust+0x42>
c0001ced:	39 d0                	cmp    eax,edx
c0001cef:	72 07                	jb     c0001cf8 <clmt_clust+0x3d>
c0001cf1:	29 d0                	sub    eax,edx
c0001cf3:	83 c3 08             	add    ebx,0x8
c0001cf6:	eb ef                	jmp    c0001ce7 <clmt_clust+0x2c>
c0001cf8:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfb:	89 c2                	mov    edx,eax
c0001cfd:	5b                   	pop    ebx
c0001cfe:	89 d0                	mov    eax,edx
c0001d00:	5e                   	pop    esi
c0001d01:	5f                   	pop    edi
c0001d02:	c3                   	ret    

c0001d03 <pick_lfn>:
c0001d03:	55                   	push   ebp
c0001d04:	57                   	push   edi
c0001d05:	56                   	push   esi
c0001d06:	89 d6                	mov    esi,edx
c0001d08:	53                   	push   ebx
c0001d09:	89 c3                	mov    ebx,eax
c0001d0b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d0e:	e8 ee fc ff ff       	call   c0001a01 <ld_word>
c0001d13:	66 85 c0             	test   ax,ax
c0001d16:	74 04                	je     c0001d1c <pick_lfn+0x19>
c0001d18:	31 c0                	xor    eax,eax
c0001d1a:	eb 5c                	jmp    c0001d78 <pick_lfn+0x75>
c0001d1c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d1f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d24:	83 e1 bf             	and    ecx,0xffffffbf
c0001d27:	31 ff                	xor    edi,edi
c0001d29:	49                   	dec    ecx
c0001d2a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2d:	0f b6 87 20 69 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd96e0]
c0001d34:	01 f0                	add    eax,esi
c0001d36:	e8 c6 fc ff ff       	call   c0001a01 <ld_word>
c0001d3b:	66 85 ed             	test   bp,bp
c0001d3e:	74 11                	je     c0001d51 <pick_lfn+0x4e>
c0001d40:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d46:	77 d0                	ja     c0001d18 <pick_lfn+0x15>
c0001d48:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4c:	89 c5                	mov    ebp,eax
c0001d4e:	41                   	inc    ecx
c0001d4f:	eb 04                	jmp    c0001d55 <pick_lfn+0x52>
c0001d51:	66 40                	inc    ax
c0001d53:	75 c3                	jne    c0001d18 <pick_lfn+0x15>
c0001d55:	47                   	inc    edi
c0001d56:	83 ff 0d             	cmp    edi,0xd
c0001d59:	75 d2                	jne    c0001d2d <pick_lfn+0x2a>
c0001d5b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d5e:	74 13                	je     c0001d73 <pick_lfn+0x70>
c0001d60:	66 85 ed             	test   bp,bp
c0001d63:	74 0e                	je     c0001d73 <pick_lfn+0x70>
c0001d65:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6b:	77 ab                	ja     c0001d18 <pick_lfn+0x15>
c0001d6d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d73:	b8 01 00 00 00       	mov    eax,0x1
c0001d78:	5b                   	pop    ebx
c0001d79:	5e                   	pop    esi
c0001d7a:	5f                   	pop    edi
c0001d7b:	5d                   	pop    ebp
c0001d7c:	c3                   	ret    

c0001d7d <put_lfn>:
c0001d7d:	55                   	push   ebp
c0001d7e:	31 ed                	xor    ebp,ebp
c0001d80:	57                   	push   edi
c0001d81:	89 d7                	mov    edi,edx
c0001d83:	56                   	push   esi
c0001d84:	31 f6                	xor    esi,esi
c0001d86:	53                   	push   ebx
c0001d87:	83 ec 08             	sub    esp,0x8
c0001d8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d95:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9b:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d9e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da1:	31 d2                	xor    edx,edx
c0001da3:	e8 cb fc ff ff       	call   c0001a73 <st_word>
c0001da8:	0f b6 d9             	movzx  ebx,cl
c0001dab:	4b                   	dec    ebx
c0001dac:	6b db 0d             	imul   ebx,ebx,0xd
c0001daf:	66 83 fe ff          	cmp    si,0xffff
c0001db3:	74 08                	je     c0001dbd <put_lfn+0x40>
c0001db5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001db8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbc:	43                   	inc    ebx
c0001dbd:	0f b6 85 20 69 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd96e0]
c0001dc4:	0f b7 d6             	movzx  edx,si
c0001dc7:	01 f8                	add    eax,edi
c0001dc9:	e8 a5 fc ff ff       	call   c0001a73 <st_word>
c0001dce:	66 85 f6             	test   si,si
c0001dd1:	75 03                	jne    c0001dd6 <put_lfn+0x59>
c0001dd3:	83 ce ff             	or     esi,0xffffffff
c0001dd6:	45                   	inc    ebp
c0001dd7:	83 fd 0d             	cmp    ebp,0xd
c0001dda:	75 d3                	jne    c0001daf <put_lfn+0x32>
c0001ddc:	66 46                	inc    si
c0001dde:	74 0a                	je     c0001dea <put_lfn+0x6d>
c0001de0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001de8:	75 09                	jne    c0001df3 <put_lfn+0x76>
c0001dea:	88 c8                	mov    al,cl
c0001dec:	83 c8 40             	or     eax,0x40
c0001def:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df7:	88 07                	mov    BYTE PTR [edi],al
c0001df9:	83 c4 08             	add    esp,0x8
c0001dfc:	5b                   	pop    ebx
c0001dfd:	5e                   	pop    esi
c0001dfe:	5f                   	pop    edi
c0001dff:	5d                   	pop    ebp
c0001e00:	c3                   	ret    

c0001e01 <gen_numname>:
c0001e01:	57                   	push   edi
c0001e02:	89 cf                	mov    edi,ecx
c0001e04:	56                   	push   esi
c0001e05:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0a:	53                   	push   ebx
c0001e0b:	89 c6                	mov    esi,eax
c0001e0d:	83 ec 10             	sub    esp,0x10
c0001e10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e14:	e8 67 fc ff ff       	call   c0001a80 <mem_cpy>
c0001e19:	83 fb 05             	cmp    ebx,0x5
c0001e1c:	76 2d                	jbe    c0001e4b <gen_numname+0x4a>
c0001e1e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e21:	66 85 c0             	test   ax,ax
c0001e24:	74 25                	je     c0001e4b <gen_numname+0x4a>
c0001e26:	83 c7 02             	add    edi,0x2
c0001e29:	ba 10 00 00 00       	mov    edx,0x10
c0001e2e:	01 db                	add    ebx,ebx
c0001e30:	89 c1                	mov    ecx,eax
c0001e32:	66 d1 e8             	shr    ax,1
c0001e35:	83 e1 01             	and    ecx,0x1
c0001e38:	01 cb                	add    ebx,ecx
c0001e3a:	0f ba e3 10          	bt     ebx,0x10
c0001e3e:	73 06                	jae    c0001e46 <gen_numname+0x45>
c0001e40:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e46:	4a                   	dec    edx
c0001e47:	75 e5                	jne    c0001e2e <gen_numname+0x2d>
c0001e49:	eb d3                	jmp    c0001e1e <gen_numname+0x1d>
c0001e4b:	b8 07 00 00 00       	mov    eax,0x7
c0001e50:	88 d9                	mov    cl,bl
c0001e52:	83 e1 0f             	and    ecx,0xf
c0001e55:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e58:	80 fa 39             	cmp    dl,0x39
c0001e5b:	76 03                	jbe    c0001e60 <gen_numname+0x5f>
c0001e5d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e60:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e63:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e67:	89 da                	mov    edx,ebx
c0001e69:	c1 ea 04             	shr    edx,0x4
c0001e6c:	83 fb 0f             	cmp    ebx,0xf
c0001e6f:	76 06                	jbe    c0001e77 <gen_numname+0x76>
c0001e71:	89 c8                	mov    eax,ecx
c0001e73:	89 d3                	mov    ebx,edx
c0001e75:	eb d9                	jmp    c0001e50 <gen_numname+0x4f>
c0001e77:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7c:	31 d2                	xor    edx,edx
c0001e7e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e81:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e84:	39 ca                	cmp    edx,ecx
c0001e86:	73 18                	jae    c0001ea0 <gen_numname+0x9f>
c0001e88:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8b:	3c 20                	cmp    al,0x20
c0001e8d:	74 11                	je     c0001ea0 <gen_numname+0x9f>
c0001e8f:	e8 41 fc ff ff       	call   c0001ad5 <dbc_1st>
c0001e94:	85 c0                	test   eax,eax
c0001e96:	74 05                	je     c0001e9d <gen_numname+0x9c>
c0001e98:	39 d3                	cmp    ebx,edx
c0001e9a:	74 04                	je     c0001ea0 <gen_numname+0x9f>
c0001e9c:	42                   	inc    edx
c0001e9d:	42                   	inc    edx
c0001e9e:	eb e1                	jmp    c0001e81 <gen_numname+0x80>
c0001ea0:	b0 20                	mov    al,0x20
c0001ea2:	83 f9 07             	cmp    ecx,0x7
c0001ea5:	77 05                	ja     c0001eac <gen_numname+0xab>
c0001ea7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eab:	41                   	inc    ecx
c0001eac:	42                   	inc    edx
c0001ead:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb1:	83 fa 07             	cmp    edx,0x7
c0001eb4:	76 ea                	jbe    c0001ea0 <gen_numname+0x9f>
c0001eb6:	83 c4 10             	add    esp,0x10
c0001eb9:	5b                   	pop    ebx
c0001eba:	5e                   	pop    esi
c0001ebb:	5f                   	pop    edi
c0001ebc:	c3                   	ret    

c0001ebd <sum_sfn>:
c0001ebd:	31 c9                	xor    ecx,ecx
c0001ebf:	31 d2                	xor    edx,edx
c0001ec1:	d0 ca                	ror    dl,1
c0001ec3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec6:	41                   	inc    ecx
c0001ec7:	83 f9 0b             	cmp    ecx,0xb
c0001eca:	75 f5                	jne    c0001ec1 <sum_sfn+0x4>
c0001ecc:	88 d0                	mov    al,dl
c0001ece:	c3                   	ret    

c0001ecf <xdir_sum>:
c0001ecf:	56                   	push   esi
c0001ed0:	31 c9                	xor    ecx,ecx
c0001ed2:	53                   	push   ebx
c0001ed3:	31 d2                	xor    edx,edx
c0001ed5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ed9:	43                   	inc    ebx
c0001eda:	c1 e3 05             	shl    ebx,0x5
c0001edd:	83 fa 02             	cmp    edx,0x2
c0001ee0:	74 0b                	je     c0001eed <xdir_sum+0x1e>
c0001ee2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee6:	66 d1 c9             	ror    cx,1
c0001ee9:	01 f1                	add    ecx,esi
c0001eeb:	eb 05                	jmp    c0001ef2 <xdir_sum+0x23>
c0001eed:	ba 03 00 00 00       	mov    edx,0x3
c0001ef2:	42                   	inc    edx
c0001ef3:	39 d3                	cmp    ebx,edx
c0001ef5:	77 e6                	ja     c0001edd <xdir_sum+0xe>
c0001ef7:	89 c8                	mov    eax,ecx
c0001ef9:	5b                   	pop    ebx
c0001efa:	5e                   	pop    esi
c0001efb:	c3                   	ret    

c0001efc <xsum32>:
c0001efc:	d1 ca                	ror    edx,1
c0001efe:	0f b6 c0             	movzx  eax,al
c0001f01:	01 d0                	add    eax,edx
c0001f03:	c3                   	ret    

c0001f04 <get_xfileinfo>:
c0001f04:	55                   	push   ebp
c0001f05:	31 c9                	xor    ecx,ecx
c0001f07:	57                   	push   edi
c0001f08:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0d:	56                   	push   esi
c0001f0e:	31 ff                	xor    edi,edi
c0001f10:	53                   	push   ebx
c0001f11:	89 c6                	mov    esi,eax
c0001f13:	83 ec 0c             	sub    esp,0xc
c0001f16:	89 d3                	mov    ebx,edx
c0001f18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f1f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f23:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f26:	76 6d                	jbe    c0001f95 <get_xfileinfo+0x91>
c0001f28:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f2e:	76 0b                	jbe    c0001f3b <get_xfileinfo+0x37>
c0001f30:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f34:	bf 01 00 00 00       	mov    edi,0x1
c0001f39:	eb 63                	jmp    c0001f9e <get_xfileinfo+0x9a>
c0001f3b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f41:	75 03                	jne    c0001f46 <get_xfileinfo+0x42>
c0001f43:	83 c5 02             	add    ebp,0x2
c0001f46:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f49:	83 c5 02             	add    ebp,0x2
c0001f4c:	e8 b0 fa ff ff       	call   c0001a01 <ld_word>
c0001f51:	ff 04 24             	inc    DWORD PTR [esp]
c0001f54:	66 85 c9             	test   cx,cx
c0001f57:	75 0d                	jne    c0001f66 <get_xfileinfo+0x62>
c0001f59:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f5f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f64:	76 2b                	jbe    c0001f91 <get_xfileinfo+0x8d>
c0001f66:	c1 e1 10             	shl    ecx,0x10
c0001f69:	ba ff 00 00 00       	mov    edx,0xff
c0001f6e:	0f b7 c0             	movzx  eax,ax
c0001f71:	29 fa                	sub    edx,edi
c0001f73:	09 c8                	or     eax,ecx
c0001f75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f79:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f81:	e8 1b fc ff ff       	call   c0001ba1 <put_utf>
c0001f86:	84 c0                	test   al,al
c0001f88:	74 a6                	je     c0001f30 <get_xfileinfo+0x2c>
c0001f8a:	0f b6 c0             	movzx  eax,al
c0001f8d:	01 c7                	add    edi,eax
c0001f8f:	31 c0                	xor    eax,eax
c0001f91:	89 c1                	mov    ecx,eax
c0001f93:	eb 8a                	jmp    c0001f1f <get_xfileinfo+0x1b>
c0001f95:	85 ff                	test   edi,edi
c0001f97:	74 97                	je     c0001f30 <get_xfileinfo+0x2c>
c0001f99:	66 85 c9             	test   cx,cx
c0001f9c:	75 92                	jne    c0001f30 <get_xfileinfo+0x2c>
c0001f9e:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa3:	31 c0                	xor    eax,eax
c0001fa5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fa9:	31 d2                	xor    edx,edx
c0001fab:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fae:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb1:	80 e1 10             	and    cl,0x10
c0001fb4:	75 08                	jne    c0001fbe <get_xfileinfo+0xba>
c0001fb6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fb9:	e8 68 fa ff ff       	call   c0001a26 <ld_qword>
c0001fbe:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc6:	e8 36 fa ff ff       	call   c0001a01 <ld_word>
c0001fcb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fcf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd2:	e8 2a fa ff ff       	call   c0001a01 <ld_word>
c0001fd7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdb:	83 c4 0c             	add    esp,0xc
c0001fde:	5b                   	pop    ebx
c0001fdf:	5e                   	pop    esi
c0001fe0:	5f                   	pop    edi
c0001fe1:	5d                   	pop    ebp
c0001fe2:	c3                   	ret    

c0001fe3 <get_ldnumber>:
c0001fe3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe5:	85 d2                	test   edx,edx
c0001fe7:	74 14                	je     c0001ffd <get_ldnumber+0x1a>
c0001fe9:	56                   	push   esi
c0001fea:	53                   	push   ebx
c0001feb:	89 d3                	mov    ebx,edx
c0001fed:	43                   	inc    ebx
c0001fee:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff1:	80 f9 1f             	cmp    cl,0x1f
c0001ff4:	76 0d                	jbe    c0002003 <get_ldnumber+0x20>
c0001ff6:	80 f9 3a             	cmp    cl,0x3a
c0001ff9:	75 f2                	jne    c0001fed <get_ldnumber+0xa>
c0001ffb:	eb 0a                	jmp    c0002007 <get_ldnumber+0x24>
c0001ffd:	83 c9 ff             	or     ecx,0xffffffff
c0002000:	89 c8                	mov    eax,ecx
c0002002:	c3                   	ret    
c0002003:	31 c9                	xor    ecx,ecx
c0002005:	eb 24                	jmp    c000202b <get_ldnumber+0x48>
c0002007:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200d:	80 f9 09             	cmp    cl,0x9
c0002010:	77 16                	ja     c0002028 <get_ldnumber+0x45>
c0002012:	83 c2 02             	add    edx,0x2
c0002015:	83 c9 ff             	or     ecx,0xffffffff
c0002018:	39 d3                	cmp    ebx,edx
c000201a:	75 0f                	jne    c000202b <get_ldnumber+0x48>
c000201c:	89 f2                	mov    edx,esi
c000201e:	89 18                	mov    DWORD PTR [eax],ebx
c0002020:	0f be ca             	movsx  ecx,dl
c0002023:	83 e9 30             	sub    ecx,0x30
c0002026:	eb 03                	jmp    c000202b <get_ldnumber+0x48>
c0002028:	83 c9 ff             	or     ecx,0xffffffff
c000202b:	89 c8                	mov    eax,ecx
c000202d:	5b                   	pop    ebx
c000202e:	5e                   	pop    esi
c000202f:	c3                   	ret    

c0002030 <crc32>:
c0002030:	56                   	push   esi
c0002031:	89 d6                	mov    esi,edx
c0002033:	53                   	push   ebx
c0002034:	b2 01                	mov    dl,0x1
c0002036:	bb 08 00 00 00       	mov    ebx,0x8
c000203b:	89 f1                	mov    ecx,esi
c000203d:	84 d1                	test   cl,dl
c000203f:	0f 95 c1             	setne  cl
c0002042:	0f b6 c9             	movzx  ecx,cl
c0002045:	31 c1                	xor    ecx,eax
c0002047:	89 c8                	mov    eax,ecx
c0002049:	d1 e8                	shr    eax,1
c000204b:	80 e1 01             	and    cl,0x1
c000204e:	74 05                	je     c0002055 <crc32+0x25>
c0002050:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002055:	d1 e2                	shl    edx,1
c0002057:	4b                   	dec    ebx
c0002058:	75 e1                	jne    c000203b <crc32+0xb>
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	c3                   	ret    

c000205d <test_gpt_header>:
c000205d:	55                   	push   ebp
c000205e:	b9 10 00 00 00       	mov    ecx,0x10
c0002063:	57                   	push   edi
c0002064:	ba 20 68 02 c0       	mov    edx,0xc0026820
c0002069:	56                   	push   esi
c000206a:	31 ff                	xor    edi,edi
c000206c:	53                   	push   ebx
c000206d:	89 c3                	mov    ebx,eax
c000206f:	e8 2c fa ff ff       	call   c0001aa0 <mem_cmp>
c0002074:	85 c0                	test   eax,eax
c0002076:	75 55                	jne    c00020cd <test_gpt_header+0x70>
c0002078:	89 c7                	mov    edi,eax
c000207a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000207f:	83 ce ff             	or     esi,0xffffffff
c0002082:	31 d2                	xor    edx,edx
c0002084:	83 fd 03             	cmp    ebp,0x3
c0002087:	76 05                	jbe    c000208e <test_gpt_header+0x31>
c0002089:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000208e:	89 f0                	mov    eax,esi
c0002090:	45                   	inc    ebp
c0002091:	e8 9a ff ff ff       	call   c0002030 <crc32>
c0002096:	83 fd 4c             	cmp    ebp,0x4c
c0002099:	89 c6                	mov    esi,eax
c000209b:	75 e5                	jne    c0002082 <test_gpt_header+0x25>
c000209d:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a0:	f7 d6                	not    esi
c00020a2:	e8 67 f9 ff ff       	call   c0001a0e <ld_dword>
c00020a7:	39 c6                	cmp    esi,eax
c00020a9:	75 22                	jne    c00020cd <test_gpt_header+0x70>
c00020ab:	8d 43 54             	lea    eax,[ebx+0x54]
c00020ae:	e8 5b f9 ff ff       	call   c0001a0e <ld_dword>
c00020b3:	83 c0 80             	add    eax,0xffffff80
c00020b6:	75 15                	jne    c00020cd <test_gpt_header+0x70>
c00020b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bb:	e8 4e f9 ff ff       	call   c0001a0e <ld_dword>
c00020c0:	3d 80 00 00 00       	cmp    eax,0x80
c00020c5:	0f 96 c0             	setbe  al
c00020c8:	0f b6 c0             	movzx  eax,al
c00020cb:	89 c7                	mov    edi,eax
c00020cd:	5b                   	pop    ebx
c00020ce:	89 f8                	mov    eax,edi
c00020d0:	5e                   	pop    esi
c00020d1:	5f                   	pop    edi
c00020d2:	5d                   	pop    ebp
c00020d3:	c3                   	ret    

c00020d4 <make_rand>:
c00020d4:	56                   	push   esi
c00020d5:	85 c0                	test   eax,eax
c00020d7:	53                   	push   ebx
c00020d8:	75 05                	jne    c00020df <make_rand+0xb>
c00020da:	b8 01 00 00 00       	mov    eax,0x1
c00020df:	01 d1                	add    ecx,edx
c00020e1:	bb 08 00 00 00       	mov    ebx,0x8
c00020e6:	89 c6                	mov    esi,eax
c00020e8:	d1 e8                	shr    eax,1
c00020ea:	83 e6 01             	and    esi,0x1
c00020ed:	85 f6                	test   esi,esi
c00020ef:	74 05                	je     c00020f6 <make_rand+0x22>
c00020f1:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f6:	4b                   	dec    ebx
c00020f7:	75 ed                	jne    c00020e6 <make_rand+0x12>
c00020f9:	42                   	inc    edx
c00020fa:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020fd:	39 ca                	cmp    edx,ecx
c00020ff:	75 e0                	jne    c00020e1 <make_rand+0xd>
c0002101:	5b                   	pop    ebx
c0002102:	5e                   	pop    esi
c0002103:	c3                   	ret    

c0002104 <validate>:
c0002104:	56                   	push   esi
c0002105:	53                   	push   ebx
c0002106:	89 d6                	mov    esi,edx
c0002108:	51                   	push   ecx
c0002109:	85 c0                	test   eax,eax
c000210b:	75 09                	jne    c0002116 <validate+0x12>
c000210d:	b8 09 00 00 00       	mov    eax,0x9
c0002112:	31 c9                	xor    ecx,ecx
c0002114:	eb 2f                	jmp    c0002145 <validate+0x41>
c0002116:	89 c3                	mov    ebx,eax
c0002118:	8b 00                	mov    eax,DWORD PTR [eax]
c000211a:	85 c0                	test   eax,eax
c000211c:	74 ef                	je     c000210d <validate+0x9>
c000211e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002121:	74 ea                	je     c000210d <validate+0x9>
c0002123:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002127:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212b:	75 e0                	jne    c000210d <validate+0x9>
c000212d:	83 ec 0c             	sub    esp,0xc
c0002130:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002134:	50                   	push   eax
c0002135:	e8 76 f8 ff ff       	call   c00019b0 <disk_status>
c000213a:	83 c4 10             	add    esp,0x10
c000213d:	a8 01                	test   al,0x1
c000213f:	75 cc                	jne    c000210d <validate+0x9>
c0002141:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002143:	31 c0                	xor    eax,eax
c0002145:	89 0e                	mov    DWORD PTR [esi],ecx
c0002147:	5a                   	pop    edx
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	c3                   	ret    

c000214b <sync_window>:
c000214b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000214f:	0f 84 85 00 00 00    	je     c00021da <sync_window+0x8f>
c0002155:	55                   	push   ebp
c0002156:	8d 68 54             	lea    ebp,[eax+0x54]
c0002159:	57                   	push   edi
c000215a:	56                   	push   esi
c000215b:	53                   	push   ebx
c000215c:	89 c3                	mov    ebx,eax
c000215e:	83 ec 28             	sub    esp,0x28
c0002161:	6a 01                	push   0x1
c0002163:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002166:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002169:	55                   	push   ebp
c000216a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000216e:	50                   	push   eax
c000216f:	e8 58 f8 ff ff       	call   c00019cc <disk_write>
c0002174:	83 c4 20             	add    esp,0x20
c0002177:	ba 01 00 00 00       	mov    edx,0x1
c000217c:	85 c0                	test   eax,eax
c000217e:	75 50                	jne    c00021d0 <sync_window+0x85>
c0002180:	31 ff                	xor    edi,edi
c0002182:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002185:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002189:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002190:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002193:	89 c6                	mov    esi,eax
c0002195:	89 d7                	mov    edi,edx
c0002197:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000219e:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021a9:	73 23                	jae    c00021ce <sync_window+0x83>
c00021ab:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021af:	75 1d                	jne    c00021ce <sync_window+0x83>
c00021b1:	83 ec 0c             	sub    esp,0xc
c00021b4:	6a 01                	push   0x1
c00021b6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ba:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021be:	52                   	push   edx
c00021bf:	50                   	push   eax
c00021c0:	55                   	push   ebp
c00021c1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c5:	50                   	push   eax
c00021c6:	e8 01 f8 ff ff       	call   c00019cc <disk_write>
c00021cb:	83 c4 20             	add    esp,0x20
c00021ce:	31 d2                	xor    edx,edx
c00021d0:	83 c4 1c             	add    esp,0x1c
c00021d3:	89 d0                	mov    eax,edx
c00021d5:	5b                   	pop    ebx
c00021d6:	5e                   	pop    esi
c00021d7:	5f                   	pop    edi
c00021d8:	5d                   	pop    ebp
c00021d9:	c3                   	ret    
c00021da:	31 d2                	xor    edx,edx
c00021dc:	89 d0                	mov    eax,edx
c00021de:	c3                   	ret    

c00021df <move_window>:
c00021df:	56                   	push   esi
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 14             	sub    esp,0x14
c00021e6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021e9:	75 07                	jne    c00021f2 <move_window+0x13>
c00021eb:	31 f6                	xor    esi,esi
c00021ed:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f0:	74 59                	je     c000224b <move_window+0x6c>
c00021f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fa:	89 d8                	mov    eax,ebx
c00021fc:	e8 4a ff ff ff       	call   c000214b <sync_window>
c0002201:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002205:	89 c6                	mov    esi,eax
c0002207:	85 c0                	test   eax,eax
c0002209:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220d:	75 3c                	jne    c000224b <move_window+0x6c>
c000220f:	83 ec 0c             	sub    esp,0xc
c0002212:	8d 43 54             	lea    eax,[ebx+0x54]
c0002215:	6a 01                	push   0x1
c0002217:	51                   	push   ecx
c0002218:	52                   	push   edx
c0002219:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002221:	50                   	push   eax
c0002222:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002226:	50                   	push   eax
c0002227:	e8 8a f7 ff ff       	call   c00019b6 <disk_read>
c000222c:	83 c4 20             	add    esp,0x20
c000222f:	85 c0                	test   eax,eax
c0002231:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002235:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002239:	74 0a                	je     c0002245 <move_window+0x66>
c000223b:	83 ca ff             	or     edx,0xffffffff
c000223e:	be 01 00 00 00       	mov    esi,0x1
c0002243:	89 d1                	mov    ecx,edx
c0002245:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002248:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224b:	89 f0                	mov    eax,esi
c000224d:	83 c4 14             	add    esp,0x14
c0002250:	5b                   	pop    ebx
c0002251:	5e                   	pop    esi
c0002252:	c3                   	ret    

c0002253 <check_fs>:
c0002253:	53                   	push   ebx
c0002254:	89 c3                	mov    ebx,eax
c0002256:	83 ec 08             	sub    esp,0x8
c0002259:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002264:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226b:	e8 6f ff ff ff       	call   c00021df <move_window>
c0002270:	ba 04 00 00 00       	mov    edx,0x4
c0002275:	85 c0                	test   eax,eax
c0002277:	0f 85 89 00 00 00    	jne    c0002306 <check_fs+0xb3>
c000227d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002283:	e8 79 f7 ff ff       	call   c0001a01 <ld_word>
c0002288:	ba 03 00 00 00       	mov    edx,0x3
c000228d:	66 3d 55 aa          	cmp    ax,0xaa55
c0002291:	75 73                	jne    c0002306 <check_fs+0xb3>
c0002293:	ba 40 69 02 c0       	mov    edx,0xc0026940
c0002298:	8d 43 54             	lea    eax,[ebx+0x54]
c000229b:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a0:	e8 fb f7 ff ff       	call   c0001aa0 <mem_cmp>
c00022a5:	ba 01 00 00 00       	mov    edx,0x1
c00022aa:	85 c0                	test   eax,eax
c00022ac:	74 58                	je     c0002306 <check_fs+0xb3>
c00022ae:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b1:	8d 50 18             	lea    edx,[eax+0x18]
c00022b4:	80 fa 01             	cmp    dl,0x1
c00022b7:	76 09                	jbe    c00022c2 <check_fs+0x6f>
c00022b9:	ba 02 00 00 00       	mov    edx,0x2
c00022be:	3c eb                	cmp    al,0xeb
c00022c0:	75 44                	jne    c0002306 <check_fs+0xb3>
c00022c2:	ba 08 97 02 c0       	mov    edx,0xc0029708
c00022c7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022cd:	b9 03 00 00 00       	mov    ecx,0x3
c00022d2:	e8 c9 f7 ff ff       	call   c0001aa0 <mem_cmp>
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	85 c0                	test   eax,eax
c00022db:	74 29                	je     c0002306 <check_fs+0xb3>
c00022dd:	ba 4c 69 02 c0       	mov    edx,0xc002694c
c00022e2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022e8:	b9 05 00 00 00       	mov    ecx,0x5
c00022ed:	e8 ae f7 ff ff       	call   c0001aa0 <mem_cmp>
c00022f2:	31 d2                	xor    edx,edx
c00022f4:	85 c0                	test   eax,eax
c00022f6:	74 0e                	je     c0002306 <check_fs+0xb3>
c00022f8:	31 d2                	xor    edx,edx
c00022fa:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002301:	0f 95 c2             	setne  dl
c0002304:	01 d2                	add    edx,edx
c0002306:	89 d0                	mov    eax,edx
c0002308:	83 c4 08             	add    esp,0x8
c000230b:	5b                   	pop    ebx
c000230c:	c3                   	ret    

c000230d <find_volume>:
c000230d:	55                   	push   ebp
c000230e:	31 c9                	xor    ecx,ecx
c0002310:	57                   	push   edi
c0002311:	56                   	push   esi
c0002312:	89 d6                	mov    esi,edx
c0002314:	53                   	push   ebx
c0002315:	31 d2                	xor    edx,edx
c0002317:	83 ec 3c             	sub    esp,0x3c
c000231a:	89 c3                	mov    ebx,eax
c000231c:	e8 32 ff ff ff       	call   c0002253 <check_fs>
c0002321:	83 f8 02             	cmp    eax,0x2
c0002324:	74 0e                	je     c0002334 <find_volume+0x27>
c0002326:	0f 87 5d 01 00 00    	ja     c0002489 <find_volume+0x17c>
c000232c:	85 f6                	test   esi,esi
c000232e:	0f 84 55 01 00 00    	je     c0002489 <find_volume+0x17c>
c0002334:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233b:	0f 85 dd 00 00 00    	jne    c000241e <find_volume+0x111>
c0002341:	31 c9                	xor    ecx,ecx
c0002343:	ba 01 00 00 00       	mov    edx,0x1
c0002348:	89 d8                	mov    eax,ebx
c000234a:	e8 90 fe ff ff       	call   c00021df <move_window>
c000234f:	85 c0                	test   eax,eax
c0002351:	74 0a                	je     c000235d <find_volume+0x50>
c0002353:	b8 04 00 00 00       	mov    eax,0x4
c0002358:	e9 2c 01 00 00       	jmp    c0002489 <find_volume+0x17c>
c000235d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002360:	89 e8                	mov    eax,ebp
c0002362:	e8 f6 fc ff ff       	call   c000205d <test_gpt_header>
c0002367:	85 c0                	test   eax,eax
c0002369:	75 0a                	jne    c0002375 <find_volume+0x68>
c000236b:	b8 03 00 00 00       	mov    eax,0x3
c0002370:	e9 14 01 00 00       	jmp    c0002489 <find_volume+0x17c>
c0002375:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237b:	e8 8e f6 ff ff       	call   c0001a0e <ld_dword>
c0002380:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002384:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238a:	e8 97 f6 ff ff       	call   c0001a26 <ld_qword>
c000238f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002397:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000239f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ab:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023af:	74 ba                	je     c000236b <find_volume+0x5e>
c00023b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b5:	31 c9                	xor    ecx,ecx
c00023b7:	c1 e7 07             	shl    edi,0x7
c00023ba:	89 d8                	mov    eax,ebx
c00023bc:	89 fa                	mov    edx,edi
c00023be:	c1 ea 09             	shr    edx,0x9
c00023c1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023c9:	e8 11 fe ff ff       	call   c00021df <move_window>
c00023ce:	85 c0                	test   eax,eax
c00023d0:	75 81                	jne    c0002353 <find_volume+0x46>
c00023d2:	81 e7 80 01 00 00    	and    edi,0x180
c00023d8:	b9 10 00 00 00       	mov    ecx,0x10
c00023dd:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e1:	ba 30 69 02 c0       	mov    edx,0xc0026930
c00023e6:	e8 b5 f6 ff ff       	call   c0001aa0 <mem_cmp>
c00023eb:	85 c0                	test   eax,eax
c00023ed:	75 29                	jne    c0002418 <find_volume+0x10b>
c00023ef:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f3:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f7:	e8 2a f6 ff ff       	call   c0001a26 <ld_qword>
c00023fc:	89 d1                	mov    ecx,edx
c00023fe:	89 c2                	mov    edx,eax
c0002400:	89 d8                	mov    eax,ebx
c0002402:	e8 4c fe ff ff       	call   c0002253 <check_fs>
c0002407:	85 f6                	test   esi,esi
c0002409:	75 07                	jne    c0002412 <find_volume+0x105>
c000240b:	83 f8 01             	cmp    eax,0x1
c000240e:	77 08                	ja     c0002418 <find_volume+0x10b>
c0002410:	eb 77                	jmp    c0002489 <find_volume+0x17c>
c0002412:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002416:	74 71                	je     c0002489 <find_volume+0x17c>
c0002418:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241c:	eb 89                	jmp    c00023a7 <find_volume+0x9a>
c000241e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002422:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002428:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000242e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002432:	89 cd                	mov    ebp,ecx
c0002434:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002438:	89 f8                	mov    eax,edi
c000243a:	83 c7 10             	add    edi,0x10
c000243d:	e8 cc f5 ff ff       	call   c0001a0e <ld_dword>
c0002442:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002446:	89 01                	mov    DWORD PTR [ecx],eax
c0002448:	83 c1 04             	add    ecx,0x4
c000244b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000244f:	75 e3                	jne    c0002434 <find_volume+0x127>
c0002451:	31 ff                	xor    edi,edi
c0002453:	85 f6                	test   esi,esi
c0002455:	74 03                	je     c000245a <find_volume+0x14d>
c0002457:	8d 7e ff             	lea    edi,[esi-0x1]
c000245a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000245e:	85 d2                	test   edx,edx
c0002460:	74 14                	je     c0002476 <find_volume+0x169>
c0002462:	31 c9                	xor    ecx,ecx
c0002464:	89 d8                	mov    eax,ebx
c0002466:	e8 e8 fd ff ff       	call   c0002253 <check_fs>
c000246b:	83 f8 01             	cmp    eax,0x1
c000246e:	76 19                	jbe    c0002489 <find_volume+0x17c>
c0002470:	85 f6                	test   esi,esi
c0002472:	74 0f                	je     c0002483 <find_volume+0x176>
c0002474:	eb 13                	jmp    c0002489 <find_volume+0x17c>
c0002476:	85 f6                	test   esi,esi
c0002478:	0f 85 ed fe ff ff    	jne    c000236b <find_volume+0x5e>
c000247e:	b8 03 00 00 00       	mov    eax,0x3
c0002483:	47                   	inc    edi
c0002484:	83 ff 03             	cmp    edi,0x3
c0002487:	76 d1                	jbe    c000245a <find_volume+0x14d>
c0002489:	83 c4 3c             	add    esp,0x3c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	57                   	push   edi
c0002493:	89 cf                	mov    edi,ecx
c0002495:	56                   	push   esi
c0002496:	53                   	push   ebx
c0002497:	bb 0b 00 00 00       	mov    ebx,0xb
c000249c:	83 ec 3c             	sub    esp,0x3c
c000249f:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024a9:	e8 35 fb ff ff       	call   c0001fe3 <get_ldnumber>
c00024ae:	85 c0                	test   eax,eax
c00024b0:	0f 88 3a 05 00 00    	js     c00029f0 <mount_volume+0x55f>
c00024b6:	8b 2c 85 60 b0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4fa0]
c00024bd:	89 c6                	mov    esi,eax
c00024bf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c4:	85 ed                	test   ebp,ebp
c00024c6:	0f 84 24 05 00 00    	je     c00029f0 <mount_volume+0x55f>
c00024cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d0:	83 e7 fe             	and    edi,0xfffffffe
c00024d3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024d9:	74 32                	je     c000250d <mount_volume+0x7c>
c00024db:	83 ec 0c             	sub    esp,0xc
c00024de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e2:	50                   	push   eax
c00024e3:	e8 c8 f4 ff ff       	call   c00019b0 <disk_status>
c00024e8:	83 c4 10             	add    esp,0x10
c00024eb:	a8 01                	test   al,0x1
c00024ed:	75 1e                	jne    c000250d <mount_volume+0x7c>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	89 f9                	mov    ecx,edi
c00024f3:	84 c9                	test   cl,cl
c00024f5:	0f 84 f5 04 00 00    	je     c00029f0 <mount_volume+0x55f>
c00024fb:	a8 04                	test   al,0x4
c00024fd:	0f 84 ed 04 00 00    	je     c00029f0 <mount_volume+0x55f>
c0002503:	bb 0a 00 00 00       	mov    ebx,0xa
c0002508:	e9 e3 04 00 00       	jmp    c00029f0 <mount_volume+0x55f>
c000250d:	83 ec 0c             	sub    esp,0xc
c0002510:	89 f0                	mov    eax,esi
c0002512:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002516:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002519:	0f b6 f0             	movzx  esi,al
c000251c:	bb 03 00 00 00       	mov    ebx,0x3
c0002521:	56                   	push   esi
c0002522:	e8 8c f4 ff ff       	call   c00019b3 <disk_initialize>
c0002527:	83 c4 10             	add    esp,0x10
c000252a:	a8 01                	test   al,0x1
c000252c:	0f 85 be 04 00 00    	jne    c00029f0 <mount_volume+0x55f>
c0002532:	89 f9                	mov    ecx,edi
c0002534:	84 c9                	test   cl,cl
c0002536:	74 04                	je     c000253c <mount_volume+0xab>
c0002538:	a8 04                	test   al,0x4
c000253a:	75 c7                	jne    c0002503 <mount_volume+0x72>
c000253c:	31 d2                	xor    edx,edx
c000253e:	89 e8                	mov    eax,ebp
c0002540:	e8 c8 fd ff ff       	call   c000230d <find_volume>
c0002545:	83 f8 04             	cmp    eax,0x4
c0002548:	75 0a                	jne    c0002554 <mount_volume+0xc3>
c000254a:	bb 01 00 00 00       	mov    ebx,0x1
c000254f:	e9 9c 04 00 00       	jmp    c00029f0 <mount_volume+0x55f>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 8d 04 00 00       	jmp    c00029f0 <mount_volume+0x55f>
c0002563:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002566:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002571:	75 17                	jne    c000258a <mount_volume+0xf9>
c0002573:	b8 0b 00 00 00       	mov    eax,0xb
c0002578:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257d:	75 da                	jne    c0002559 <mount_volume+0xc8>
c000257f:	40                   	inc    eax
c0002580:	83 f8 40             	cmp    eax,0x40
c0002583:	75 f3                	jne    c0002578 <mount_volume+0xe7>
c0002585:	e9 5a 02 00 00       	jmp    c00027e4 <mount_volume+0x353>
c000258a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258d:	e8 6f f4 ff ff       	call   c0001a01 <ld_word>
c0002592:	66 3d 00 02          	cmp    ax,0x200
c0002596:	75 c1                	jne    c0002559 <mount_volume+0xc8>
c0002598:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259b:	e8 61 f4 ff ff       	call   c0001a01 <ld_word>
c00025a0:	0f b7 c0             	movzx  eax,ax
c00025a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a7:	85 c0                	test   eax,eax
c00025a9:	75 0c                	jne    c00025b7 <mount_volume+0x126>
c00025ab:	8d 45 78             	lea    eax,[ebp+0x78]
c00025ae:	e8 5b f4 ff ff       	call   c0001a0e <ld_dword>
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025be:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025c8:	48                   	dec    eax
c00025c9:	3c 01                	cmp    al,0x1
c00025cb:	77 8c                	ja     c0002559 <mount_volume+0xc8>
c00025cd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d1:	89 c3                	mov    ebx,eax
c00025d3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d7:	66 85 c0             	test   ax,ax
c00025da:	0f 84 79 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c00025e0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e3:	85 d8                	test   eax,ebx
c00025e5:	0f 85 6e ff ff ff    	jne    c0002559 <mount_volume+0xc8>
c00025eb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025ee:	e8 0e f4 ff ff       	call   c0001a01 <ld_word>
c00025f3:	89 c7                	mov    edi,eax
c00025f5:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025f9:	a8 0f                	test   al,0xf
c00025fb:	0f 85 58 ff ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002601:	8d 45 67             	lea    eax,[ebp+0x67]
c0002604:	e8 f8 f3 ff ff       	call   c0001a01 <ld_word>
c0002609:	0f b7 f0             	movzx  esi,ax
c000260c:	85 f6                	test   esi,esi
c000260e:	75 0a                	jne    c000261a <mount_volume+0x189>
c0002610:	8d 45 74             	lea    eax,[ebp+0x74]
c0002613:	e8 f6 f3 ff ff       	call   c0001a0e <ld_dword>
c0002618:	89 c6                	mov    esi,eax
c000261a:	8d 45 62             	lea    eax,[ebp+0x62]
c000261d:	e8 df f3 ff ff       	call   c0001a01 <ld_word>
c0002622:	66 85 c0             	test   ax,ax
c0002625:	0f 84 2e ff ff ff    	je     c0002559 <mount_volume+0xc8>
c000262b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002630:	0f b7 c8             	movzx  ecx,ax
c0002633:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002638:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263c:	89 fa                	mov    edx,edi
c000263e:	66 c1 ea 04          	shr    dx,0x4
c0002642:	0f b7 d2             	movzx  edx,dx
c0002645:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002649:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002650:	39 c6                	cmp    esi,eax
c0002652:	0f 82 01 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002658:	29 c6                	sub    esi,eax
c000265a:	31 d2                	xor    edx,edx
c000265c:	89 f0                	mov    eax,esi
c000265e:	f7 f3                	div    ebx
c0002660:	39 de                	cmp    esi,ebx
c0002662:	0f 82 f1 fe ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002668:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266d:	0f 87 e6 fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002673:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002678:	0f 86 63 03 00 00    	jbe    c00029e1 <mount_volume+0x550>
c000267e:	bb 03 00 00 00       	mov    ebx,0x3
c0002683:	8d 70 02             	lea    esi,[eax+0x2]
c0002686:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000268e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002691:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002694:	31 d2                	xor    edx,edx
c0002696:	89 c8                	mov    eax,ecx
c0002698:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000269f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ab:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026ae:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b5:	31 d2                	xor    edx,edx
c00026b7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026bf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c5:	83 fb 03             	cmp    ebx,0x3
c00026c8:	75 2b                	jne    c00026f5 <mount_volume+0x264>
c00026ca:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026cd:	e8 2f f3 ff ff       	call   c0001a01 <ld_word>
c00026d2:	66 09 c7             	or     di,ax
c00026d5:	0f 85 7e fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c00026db:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e1:	c1 e6 02             	shl    esi,0x2
c00026e4:	e8 25 f3 ff ff       	call   c0001a0e <ld_dword>
c00026e9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f0:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f3:	eb 30                	jmp    c0002725 <mount_volume+0x294>
c00026f5:	66 85 ff             	test   di,di
c00026f8:	0f 84 5b fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026fe:	31 d2                	xor    edx,edx
c0002700:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002704:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002708:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000270f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002712:	83 fb 02             	cmp    ebx,0x2
c0002715:	75 04                	jne    c000271b <mount_volume+0x28a>
c0002717:	01 f6                	add    esi,esi
c0002719:	eb 0a                	jmp    c0002725 <mount_volume+0x294>
c000271b:	8d 04 76             	lea    eax,[esi+esi*2]
c000271e:	83 e6 01             	and    esi,0x1
c0002721:	d1 e8                	shr    eax,1
c0002723:	01 c6                	add    esi,eax
c0002725:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272b:	c1 ee 09             	shr    esi,0x9
c000272e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002732:	0f 87 21 fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002738:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000273f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002746:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274a:	83 fb 03             	cmp    ebx,0x3
c000274d:	75 7a                	jne    c00027c9 <mount_volume+0x338>
c000274f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002755:	e8 a7 f2 ff ff       	call   c0001a01 <ld_word>
c000275a:	66 48                	dec    ax
c000275c:	75 6b                	jne    c00027c9 <mount_volume+0x338>
c000275e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002762:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002766:	83 c2 01             	add    edx,0x1
c0002769:	89 e8                	mov    eax,ebp
c000276b:	83 d1 00             	adc    ecx,0x0
c000276e:	e8 6c fa ff ff       	call   c00021df <move_window>
c0002773:	85 c0                	test   eax,eax
c0002775:	75 52                	jne    c00027c9 <mount_volume+0x338>
c0002777:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002781:	e8 7b f2 ff ff       	call   c0001a01 <ld_word>
c0002786:	66 3d 55 aa          	cmp    ax,0xaa55
c000278a:	75 3d                	jne    c00027c9 <mount_volume+0x338>
c000278c:	8d 45 54             	lea    eax,[ebp+0x54]
c000278f:	e8 7a f2 ff ff       	call   c0001a0e <ld_dword>
c0002794:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002799:	75 2e                	jne    c00027c9 <mount_volume+0x338>
c000279b:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a1:	e8 68 f2 ff ff       	call   c0001a0e <ld_dword>
c00027a6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ab:	75 1c                	jne    c00027c9 <mount_volume+0x338>
c00027ad:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b3:	e8 56 f2 ff ff       	call   c0001a0e <ld_dword>
c00027b8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c1:	e8 48 f2 ff ff       	call   c0001a0e <ld_dword>
c00027c6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027c9:	66 a1 40 b0 02 c0    	mov    ax,ds:0xc002b040
c00027cf:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d2:	40                   	inc    eax
c00027d3:	31 db                	xor    ebx,ebx
c00027d5:	66 a3 40 b0 02 c0    	mov    ds:0xc002b040,ax
c00027db:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027df:	e9 0c 02 00 00       	jmp    c00029f0 <mount_volume+0x55f>
c00027e4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027ea:	e8 12 f2 ff ff       	call   c0001a01 <ld_word>
c00027ef:	66 3d 00 01          	cmp    ax,0x100
c00027f3:	0f 85 60 fd ff ff    	jne    c0002559 <mount_volume+0xc8>
c00027f9:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002800:	0f 85 53 fd ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002806:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280c:	e8 15 f2 ff ff       	call   c0001a26 <ld_qword>
c0002811:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002815:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002819:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000281f:	e8 ea f1 ff ff       	call   c0001a0e <ld_dword>
c0002824:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002827:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	fe c8                	dec    al
c0002832:	0f 85 21 fd ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002838:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000283f:	bb 01 00 00 00       	mov    ebx,0x1
c0002844:	d3 e3                	shl    ebx,cl
c0002846:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284a:	66 85 db             	test   bx,bx
c000284d:	0f 84 06 fd ff ff    	je     c0002559 <mount_volume+0xc8>
c0002853:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002859:	e8 b0 f1 ff ff       	call   c0001a0e <ld_dword>
c000285e:	89 c6                	mov    esi,eax
c0002860:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002865:	0f 87 ee fc ff ff    	ja     c0002559 <mount_volume+0xc8>
c000286b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286f:	8d 40 02             	lea    eax,[eax+0x2]
c0002872:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002875:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000287f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002885:	e8 84 f1 ff ff       	call   c0001a0e <ld_dword>
c000288a:	31 d2                	xor    edx,edx
c000288c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002890:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002894:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002898:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000289f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028a8:	e8 61 f1 ff ff       	call   c0001a0e <ld_dword>
c00028ad:	31 d2                	xor    edx,edx
c00028af:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c1:	0f b7 c3             	movzx  eax,bx
c00028c4:	31 d2                	xor    edx,edx
c00028c6:	0f af f0             	imul   esi,eax
c00028c9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028cd:	89 f0                	mov    eax,esi
c00028cf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028db:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028df:	39 c1                	cmp    ecx,eax
c00028e1:	89 df                	mov    edi,ebx
c00028e3:	19 d7                	sbb    edi,edx
c00028e5:	0f 82 6e fc ff ff    	jb     c0002559 <mount_volume+0xc8>
c00028eb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f1:	31 db                	xor    ebx,ebx
c00028f3:	e8 16 f1 ff ff       	call   c0001a0e <ld_dword>
c00028f8:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00028ff:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002902:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290a:	85 db                	test   ebx,ebx
c000290c:	75 39                	jne    c0002947 <mount_volume+0x4b6>
c000290e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002912:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002916:	0f 86 3d fc ff ff    	jbe    c0002559 <mount_volume+0xc8>
c000291c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000291f:	31 ff                	xor    edi,edi
c0002921:	89 e8                	mov    eax,ebp
c0002923:	e8 72 f3 ff ff       	call   c0001c9a <clst2sect>
c0002928:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292c:	01 c6                	add    esi,eax
c000292e:	89 e8                	mov    eax,ebp
c0002930:	11 d7                	adc    edi,edx
c0002932:	89 f2                	mov    edx,esi
c0002934:	89 f9                	mov    ecx,edi
c0002936:	e8 a4 f8 ff ff       	call   c00021df <move_window>
c000293b:	85 c0                	test   eax,eax
c000293d:	0f 85 07 fc ff ff    	jne    c000254a <mount_volume+0xb9>
c0002943:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002947:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294c:	74 0b                	je     c0002959 <mount_volume+0x4c8>
c000294e:	83 c3 20             	add    ebx,0x20
c0002951:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002957:	eb b1                	jmp    c000290a <mount_volume+0x479>
c0002959:	8d 75 54             	lea    esi,[ebp+0x54]
c000295c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002960:	e8 a9 f0 ff ff       	call   c0001a0e <ld_dword>
c0002965:	89 c3                	mov    ebx,eax
c0002967:	83 f8 01             	cmp    eax,0x1
c000296a:	0f 86 e9 fb ff ff    	jbe    c0002559 <mount_volume+0xc8>
c0002970:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002973:	0f 86 e0 fb ff ff    	jbe    c0002559 <mount_volume+0xc8>
c0002979:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002980:	0f af c2             	imul   eax,edx
c0002983:	31 d2                	xor    edx,edx
c0002985:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002988:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000298e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002991:	31 c9                	xor    ecx,ecx
c0002993:	89 da                	mov    edx,ebx
c0002995:	89 e8                	mov    eax,ebp
c0002997:	c1 ea 07             	shr    edx,0x7
c000299a:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299d:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a0:	e8 3a f8 ff ff       	call   c00021df <move_window>
c00029a5:	85 c0                	test   eax,eax
c00029a7:	0f 85 9d fb ff ff    	jne    c000254a <mount_volume+0xb9>
c00029ad:	89 d8                	mov    eax,ebx
c00029af:	83 e0 7f             	and    eax,0x7f
c00029b2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b5:	e8 54 f0 ff ff       	call   c0001a0e <ld_dword>
c00029ba:	83 f8 ff             	cmp    eax,0xffffffff
c00029bd:	74 0a                	je     c00029c9 <mount_volume+0x538>
c00029bf:	43                   	inc    ebx
c00029c0:	39 d8                	cmp    eax,ebx
c00029c2:	74 cd                	je     c0002991 <mount_volume+0x500>
c00029c4:	e9 90 fb ff ff       	jmp    c0002559 <mount_volume+0xc8>
c00029c9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d7:	bb 04 00 00 00       	mov    ebx,0x4
c00029dc:	e9 e8 fd ff ff       	jmp    c00027c9 <mount_volume+0x338>
c00029e1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e6:	19 db                	sbb    ebx,ebx
c00029e8:	83 c3 02             	add    ebx,0x2
c00029eb:	e9 93 fc ff ff       	jmp    c0002683 <mount_volume+0x1f2>
c00029f0:	83 c4 3c             	add    esp,0x3c
c00029f3:	89 d8                	mov    eax,ebx
c00029f5:	5b                   	pop    ebx
c00029f6:	5e                   	pop    esi
c00029f7:	5f                   	pop    edi
c00029f8:	5d                   	pop    ebp
c00029f9:	c3                   	ret    

c00029fa <find_bitmap>:
c00029fa:	55                   	push   ebp
c00029fb:	57                   	push   edi
c00029fc:	89 c7                	mov    edi,eax
c00029fe:	56                   	push   esi
c00029ff:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a02:	53                   	push   ebx
c0002a03:	83 ec 1c             	sub    esp,0x1c
c0002a06:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a09:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0d:	83 e8 02             	sub    eax,0x2
c0002a10:	39 f0                	cmp    eax,esi
c0002a12:	77 02                	ja     c0002a16 <find_bitmap+0x1c>
c0002a14:	31 f6                	xor    esi,esi
c0002a16:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1a:	89 f3                	mov    ebx,esi
c0002a1c:	31 ed                	xor    ebp,ebp
c0002a1e:	31 c9                	xor    ecx,ecx
c0002a20:	89 da                	mov    edx,ebx
c0002a22:	89 f8                	mov    eax,edi
c0002a24:	c1 ea 0c             	shr    edx,0xc
c0002a27:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2d:	e8 ad f7 ff ff       	call   c00021df <move_window>
c0002a32:	85 c0                	test   eax,eax
c0002a34:	75 68                	jne    c0002a9e <find_bitmap+0xa4>
c0002a36:	89 da                	mov    edx,ebx
c0002a38:	89 d9                	mov    ecx,ebx
c0002a3a:	c1 ea 03             	shr    edx,0x3
c0002a3d:	83 e1 07             	and    ecx,0x7
c0002a40:	b8 01 00 00 00       	mov    eax,0x1
c0002a45:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4b:	d3 e0                	shl    eax,cl
c0002a4d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a50:	83 e9 02             	sub    ecx,0x2
c0002a53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a57:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5b:	43                   	inc    ebx
c0002a5c:	21 c1                	and    ecx,eax
c0002a5e:	d1 e0                	shl    eax,1
c0002a60:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a64:	77 09                	ja     c0002a6f <find_bitmap+0x75>
c0002a66:	31 db                	xor    ebx,ebx
c0002a68:	ba 00 02 00 00       	mov    edx,0x200
c0002a6d:	31 c0                	xor    eax,eax
c0002a6f:	84 c9                	test   cl,cl
c0002a71:	75 10                	jne    c0002a83 <find_bitmap+0x89>
c0002a73:	45                   	inc    ebp
c0002a74:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a78:	75 0f                	jne    c0002a89 <find_bitmap+0x8f>
c0002a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a7e:	83 c0 02             	add    eax,0x2
c0002a81:	eb 22                	jmp    c0002aa5 <find_bitmap+0xab>
c0002a83:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a87:	31 ed                	xor    ebp,ebp
c0002a89:	39 de                	cmp    esi,ebx
c0002a8b:	74 16                	je     c0002aa3 <find_bitmap+0xa9>
c0002a8d:	84 c0                	test   al,al
c0002a8f:	75 c6                	jne    c0002a57 <find_bitmap+0x5d>
c0002a91:	42                   	inc    edx
c0002a92:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a98:	77 84                	ja     c0002a1e <find_bitmap+0x24>
c0002a9a:	b0 01                	mov    al,0x1
c0002a9c:	eb b9                	jmp    c0002a57 <find_bitmap+0x5d>
c0002a9e:	83 c8 ff             	or     eax,0xffffffff
c0002aa1:	eb 02                	jmp    c0002aa5 <find_bitmap+0xab>
c0002aa3:	31 c0                	xor    eax,eax
c0002aa5:	83 c4 1c             	add    esp,0x1c
c0002aa8:	5b                   	pop    ebx
c0002aa9:	5e                   	pop    esi
c0002aaa:	5f                   	pop    edi
c0002aab:	5d                   	pop    ebp
c0002aac:	c3                   	ret    

c0002aad <change_bitmap>:
c0002aad:	55                   	push   ebp
c0002aae:	89 cd                	mov    ebp,ecx
c0002ab0:	57                   	push   edi
c0002ab1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab4:	56                   	push   esi
c0002ab5:	89 c7                	mov    edi,eax
c0002ab7:	53                   	push   ebx
c0002ab8:	89 c8                	mov    eax,ecx
c0002aba:	83 ec 1c             	sub    esp,0x1c
c0002abd:	31 d2                	xor    edx,edx
c0002abf:	89 ce                	mov    esi,ecx
c0002ac1:	c1 e8 0c             	shr    eax,0xc
c0002ac4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ac9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002acc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002acf:	c1 ee 03             	shr    esi,0x3
c0002ad2:	83 e1 07             	and    ecx,0x7
c0002ad5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002adb:	d3 e3                	shl    ebx,cl
c0002add:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae1:	89 c1                	mov    ecx,eax
c0002ae3:	89 d3                	mov    ebx,edx
c0002ae5:	83 c1 01             	add    ecx,0x1
c0002ae8:	83 d3 00             	adc    ebx,0x0
c0002aeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aef:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af3:	89 d1                	mov    ecx,edx
c0002af5:	89 c2                	mov    edx,eax
c0002af7:	89 f8                	mov    eax,edi
c0002af9:	e8 e1 f6 ff ff       	call   c00021df <move_window>
c0002afe:	89 c1                	mov    ecx,eax
c0002b00:	85 c0                	test   eax,eax
c0002b02:	75 48                	jne    c0002b4c <change_bitmap+0x9f>
c0002b04:	31 d2                	xor    edx,edx
c0002b06:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b0e:	0f 95 c2             	setne  dl
c0002b11:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b15:	74 3c                	je     c0002b53 <change_bitmap+0xa6>
c0002b17:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1b:	4d                   	dec    ebp
c0002b1c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b20:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b24:	74 32                	je     c0002b58 <change_bitmap+0xab>
c0002b26:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2a:	75 d8                	jne    c0002b04 <change_bitmap+0x57>
c0002b2c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b2f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b34:	89 c3                	mov    ebx,eax
c0002b36:	31 f6                	xor    esi,esi
c0002b38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b40:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b46:	74 99                	je     c0002ae1 <change_bitmap+0x34>
c0002b48:	89 de                	mov    esi,ebx
c0002b4a:	eb b8                	jmp    c0002b04 <change_bitmap+0x57>
c0002b4c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b51:	eb 05                	jmp    c0002b58 <change_bitmap+0xab>
c0002b53:	b9 02 00 00 00       	mov    ecx,0x2
c0002b58:	83 c4 1c             	add    esp,0x1c
c0002b5b:	89 c8                	mov    eax,ecx
c0002b5d:	5b                   	pop    ebx
c0002b5e:	5e                   	pop    esi
c0002b5f:	5f                   	pop    edi
c0002b60:	5d                   	pop    ebp
c0002b61:	c3                   	ret    

c0002b62 <put_fat>:
c0002b62:	83 fa 01             	cmp    edx,0x1
c0002b65:	0f 86 7b 01 00 00    	jbe    c0002ce6 <put_fat+0x184>
c0002b6b:	55                   	push   ebp
c0002b6c:	57                   	push   edi
c0002b6d:	89 cf                	mov    edi,ecx
c0002b6f:	56                   	push   esi
c0002b70:	b9 02 00 00 00       	mov    ecx,0x2
c0002b75:	53                   	push   ebx
c0002b76:	89 c6                	mov    esi,eax
c0002b78:	83 ec 1c             	sub    esp,0x1c
c0002b7b:	89 d3                	mov    ebx,edx
c0002b7d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b80:	0f 86 68 01 00 00    	jbe    c0002cee <put_fat+0x18c>
c0002b86:	8a 00                	mov    al,BYTE PTR [eax]
c0002b88:	3c 02                	cmp    al,0x2
c0002b8a:	0f 84 c7 00 00 00    	je     c0002c57 <put_fat+0xf5>
c0002b90:	77 09                	ja     c0002b9b <put_fat+0x39>
c0002b92:	fe c8                	dec    al
c0002b94:	74 17                	je     c0002bad <put_fat+0x4b>
c0002b96:	e9 53 01 00 00       	jmp    c0002cee <put_fat+0x18c>
c0002b9b:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba0:	3c 04                	cmp    al,0x4
c0002ba2:	0f 86 e1 00 00 00    	jbe    c0002c89 <put_fat+0x127>
c0002ba8:	e9 41 01 00 00       	jmp    c0002cee <put_fat+0x18c>
c0002bad:	89 d5                	mov    ebp,edx
c0002baf:	31 c9                	xor    ecx,ecx
c0002bb1:	d1 ed                	shr    ebp,1
c0002bb3:	89 f0                	mov    eax,esi
c0002bb5:	01 d5                	add    ebp,edx
c0002bb7:	89 ea                	mov    edx,ebp
c0002bb9:	c1 ea 09             	shr    edx,0x9
c0002bbc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bbf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc2:	e8 18 f6 ff ff       	call   c00021df <move_window>
c0002bc7:	89 c1                	mov    ecx,eax
c0002bc9:	85 c0                	test   eax,eax
c0002bcb:	0f 85 1d 01 00 00    	jne    c0002cee <put_fat+0x18c>
c0002bd1:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bd8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002be9:	89 f8                	mov    eax,edi
c0002beb:	83 e3 01             	and    ebx,0x1
c0002bee:	74 0d                	je     c0002bfd <put_fat+0x9b>
c0002bf0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf3:	89 fa                	mov    edx,edi
c0002bf5:	83 e0 0f             	and    eax,0xf
c0002bf8:	c1 e2 04             	shl    edx,0x4
c0002bfb:	09 d0                	or     eax,edx
c0002bfd:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c04:	31 c9                	xor    ecx,ecx
c0002c06:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0a:	c1 ea 09             	shr    edx,0x9
c0002c0d:	89 f0                	mov    eax,esi
c0002c0f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c12:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c15:	e8 c5 f5 ff ff       	call   c00021df <move_window>
c0002c1a:	89 c1                	mov    ecx,eax
c0002c1c:	85 c0                	test   eax,eax
c0002c1e:	0f 85 ca 00 00 00    	jne    c0002cee <put_fat+0x18c>
c0002c24:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c28:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c32:	85 db                	test   ebx,ebx
c0002c34:	74 07                	je     c0002c3d <put_fat+0xdb>
c0002c36:	c1 ef 04             	shr    edi,0x4
c0002c39:	89 fa                	mov    edx,edi
c0002c3b:	eb 0e                	jmp    c0002c4b <put_fat+0xe9>
c0002c3d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c40:	c1 ef 08             	shr    edi,0x8
c0002c43:	83 e2 f0             	and    edx,0xfffffff0
c0002c46:	83 e7 0f             	and    edi,0xf
c0002c49:	09 fa                	or     edx,edi
c0002c4b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c52:	e9 97 00 00 00       	jmp    c0002cee <put_fat+0x18c>
c0002c57:	31 c9                	xor    ecx,ecx
c0002c59:	c1 ea 08             	shr    edx,0x8
c0002c5c:	89 f0                	mov    eax,esi
c0002c5e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c61:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c64:	e8 76 f5 ff ff       	call   c00021df <move_window>
c0002c69:	89 c1                	mov    ecx,eax
c0002c6b:	85 c0                	test   eax,eax
c0002c6d:	75 7f                	jne    c0002cee <put_fat+0x18c>
c0002c6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c73:	01 db                	add    ebx,ebx
c0002c75:	0f b7 d7             	movzx  edx,di
c0002c78:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c7e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c82:	e8 ec ed ff ff       	call   c0001a73 <st_word>
c0002c87:	eb 53                	jmp    c0002cdc <put_fat+0x17a>
c0002c89:	31 c9                	xor    ecx,ecx
c0002c8b:	c1 ea 07             	shr    edx,0x7
c0002c8e:	89 f0                	mov    eax,esi
c0002c90:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c93:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c96:	e8 44 f5 ff ff       	call   c00021df <move_window>
c0002c9b:	89 c1                	mov    ecx,eax
c0002c9d:	85 c0                	test   eax,eax
c0002c9f:	75 4d                	jne    c0002cee <put_fat+0x18c>
c0002ca1:	c1 e3 02             	shl    ebx,0x2
c0002ca4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002caa:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cad:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb1:	74 1c                	je     c0002ccf <put_fat+0x16d>
c0002cb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbd:	89 d8                	mov    eax,ebx
c0002cbf:	e8 4a ed ff ff       	call   c0001a0e <ld_dword>
c0002cc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cc8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ccd:	09 c7                	or     edi,eax
c0002ccf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd3:	89 fa                	mov    edx,edi
c0002cd5:	89 d8                	mov    eax,ebx
c0002cd7:	e8 9b ed ff ff       	call   c0001a77 <st_dword>
c0002cdc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce4:	eb 08                	jmp    c0002cee <put_fat+0x18c>
c0002ce6:	b9 02 00 00 00       	mov    ecx,0x2
c0002ceb:	89 c8                	mov    eax,ecx
c0002ced:	c3                   	ret    
c0002cee:	83 c4 1c             	add    esp,0x1c
c0002cf1:	89 c8                	mov    eax,ecx
c0002cf3:	5b                   	pop    ebx
c0002cf4:	5e                   	pop    esi
c0002cf5:	5f                   	pop    edi
c0002cf6:	5d                   	pop    ebp
c0002cf7:	c3                   	ret    

c0002cf8 <fill_last_frag>:
c0002cf8:	57                   	push   edi
c0002cf9:	89 cf                	mov    edi,ecx
c0002cfb:	56                   	push   esi
c0002cfc:	89 d6                	mov    esi,edx
c0002cfe:	53                   	push   ebx
c0002cff:	89 c3                	mov    ebx,eax
c0002d01:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d04:	85 c0                	test   eax,eax
c0002d06:	74 21                	je     c0002d29 <fill_last_frag+0x31>
c0002d08:	89 f9                	mov    ecx,edi
c0002d0a:	83 f8 01             	cmp    eax,0x1
c0002d0d:	76 05                	jbe    c0002d14 <fill_last_frag+0x1c>
c0002d0f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d12:	29 c1                	sub    ecx,eax
c0002d14:	8d 56 01             	lea    edx,[esi+0x1]
c0002d17:	29 c2                	sub    edx,eax
c0002d19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1b:	e8 42 fe ff ff       	call   c0002b62 <put_fat>
c0002d20:	85 c0                	test   eax,eax
c0002d22:	75 05                	jne    c0002d29 <fill_last_frag+0x31>
c0002d24:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d27:	eb d8                	jmp    c0002d01 <fill_last_frag+0x9>
c0002d29:	5b                   	pop    ebx
c0002d2a:	5e                   	pop    esi
c0002d2b:	5f                   	pop    edi
c0002d2c:	c3                   	ret    

c0002d2d <fill_first_frag>:
c0002d2d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d31:	75 2d                	jne    c0002d60 <fill_first_frag+0x33>
c0002d33:	57                   	push   edi
c0002d34:	56                   	push   esi
c0002d35:	53                   	push   ebx
c0002d36:	89 c3                	mov    ebx,eax
c0002d38:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d3e:	01 d7                	add    edi,edx
c0002d40:	39 fa                	cmp    edx,edi
c0002d42:	74 14                	je     c0002d58 <fill_first_frag+0x2b>
c0002d44:	8d 72 01             	lea    esi,[edx+0x1]
c0002d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d49:	89 f1                	mov    ecx,esi
c0002d4b:	e8 12 fe ff ff       	call   c0002b62 <put_fat>
c0002d50:	89 f2                	mov    edx,esi
c0002d52:	85 c0                	test   eax,eax
c0002d54:	74 ea                	je     c0002d40 <fill_first_frag+0x13>
c0002d56:	eb 0b                	jmp    c0002d63 <fill_first_frag+0x36>
c0002d58:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5c:	31 c0                	xor    eax,eax
c0002d5e:	eb 03                	jmp    c0002d63 <fill_first_frag+0x36>
c0002d60:	31 c0                	xor    eax,eax
c0002d62:	c3                   	ret    
c0002d63:	5b                   	pop    ebx
c0002d64:	5e                   	pop    esi
c0002d65:	5f                   	pop    edi
c0002d66:	c3                   	ret    

c0002d67 <get_fat>:
c0002d67:	83 fa 01             	cmp    edx,0x1
c0002d6a:	0f 86 db 01 00 00    	jbe    c0002f4b <get_fat+0x1e4>
c0002d70:	55                   	push   ebp
c0002d71:	b9 01 00 00 00       	mov    ecx,0x1
c0002d76:	57                   	push   edi
c0002d77:	56                   	push   esi
c0002d78:	53                   	push   ebx
c0002d79:	83 ec 1c             	sub    esp,0x1c
c0002d7c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d7e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d81:	0f 86 cc 01 00 00    	jbe    c0002f53 <get_fat+0x1ec>
c0002d87:	89 c3                	mov    ebx,eax
c0002d89:	89 d6                	mov    esi,edx
c0002d8b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8d:	3c 02                	cmp    al,0x2
c0002d8f:	0f 84 99 00 00 00    	je     c0002e2e <get_fat+0xc7>
c0002d95:	77 09                	ja     c0002da0 <get_fat+0x39>
c0002d97:	fe c8                	dec    al
c0002d99:	74 1a                	je     c0002db5 <get_fat+0x4e>
c0002d9b:	e9 b3 01 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002da0:	3c 03                	cmp    al,0x3
c0002da2:	0f 84 b5 00 00 00    	je     c0002e5d <get_fat+0xf6>
c0002da8:	3c 04                	cmp    al,0x4
c0002daa:	0f 84 e3 00 00 00    	je     c0002e93 <get_fat+0x12c>
c0002db0:	e9 9e 01 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002db5:	89 d3                	mov    ebx,edx
c0002db7:	31 c9                	xor    ecx,ecx
c0002db9:	d1 eb                	shr    ebx,1
c0002dbb:	89 f8                	mov    eax,edi
c0002dbd:	01 d3                	add    ebx,edx
c0002dbf:	89 da                	mov    edx,ebx
c0002dc1:	c1 ea 09             	shr    edx,0x9
c0002dc4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dca:	e8 10 f4 ff ff       	call   c00021df <move_window>
c0002dcf:	85 c0                	test   eax,eax
c0002dd1:	74 08                	je     c0002ddb <get_fat+0x74>
c0002dd3:	83 c9 ff             	or     ecx,0xffffffff
c0002dd6:	e9 78 01 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002ddb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dde:	31 c9                	xor    ecx,ecx
c0002de0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de6:	89 ea                	mov    edx,ebp
c0002de8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dec:	c1 ea 09             	shr    edx,0x9
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 e3 f3 ff ff       	call   c00021df <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	75 d3                	jne    c0002dd3 <get_fat+0x6c>
c0002e00:	0f b6 c3             	movzx  eax,bl
c0002e03:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e09:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e0e:	c1 e3 08             	shl    ebx,0x8
c0002e11:	09 c3                	or     ebx,eax
c0002e13:	89 d9                	mov    ecx,ebx
c0002e15:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1b:	83 e6 01             	and    esi,0x1
c0002e1e:	0f 84 2f 01 00 00    	je     c0002f53 <get_fat+0x1ec>
c0002e24:	89 d9                	mov    ecx,ebx
c0002e26:	c1 e9 04             	shr    ecx,0x4
c0002e29:	e9 25 01 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002e2e:	31 c9                	xor    ecx,ecx
c0002e30:	c1 ea 08             	shr    edx,0x8
c0002e33:	89 f8                	mov    eax,edi
c0002e35:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e38:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3b:	e8 9f f3 ff ff       	call   c00021df <move_window>
c0002e40:	85 c0                	test   eax,eax
c0002e42:	75 8f                	jne    c0002dd3 <get_fat+0x6c>
c0002e44:	01 f6                	add    esi,esi
c0002e46:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e50:	e8 ac eb ff ff       	call   c0001a01 <ld_word>
c0002e55:	0f b7 c8             	movzx  ecx,ax
c0002e58:	e9 f6 00 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002e5d:	31 c9                	xor    ecx,ecx
c0002e5f:	c1 ea 07             	shr    edx,0x7
c0002e62:	89 f8                	mov    eax,edi
c0002e64:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e67:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6a:	e8 70 f3 ff ff       	call   c00021df <move_window>
c0002e6f:	85 c0                	test   eax,eax
c0002e71:	0f 85 5c ff ff ff    	jne    c0002dd3 <get_fat+0x6c>
c0002e77:	c1 e6 02             	shl    esi,0x2
c0002e7a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e80:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e84:	e8 85 eb ff ff       	call   c0001a0e <ld_dword>
c0002e89:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e8e:	e9 b4 00 00 00       	jmp    c0002f47 <get_fat+0x1e0>
c0002e93:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e96:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e99:	89 d1                	mov    ecx,edx
c0002e9b:	09 c1                	or     ecx,eax
c0002e9d:	74 06                	je     c0002ea5 <get_fat+0x13e>
c0002e9f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea3:	75 0f                	jne    c0002eb4 <get_fat+0x14d>
c0002ea5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eaa:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eae:	0f 85 9f 00 00 00    	jne    c0002f53 <get_fat+0x1ec>
c0002eb4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eb8:	89 f5                	mov    ebp,esi
c0002eba:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ebf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec5:	80 f9 02             	cmp    cl,0x2
c0002ec8:	75 35                	jne    c0002eff <get_fat+0x198>
c0002eca:	83 c0 ff             	add    eax,0xffffffff
c0002ecd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed2:	83 d2 ff             	adc    edx,0xffffffff
c0002ed5:	31 db                	xor    ebx,ebx
c0002ed7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edb:	53                   	push   ebx
c0002edc:	c1 ea 09             	shr    edx,0x9
c0002edf:	51                   	push   ecx
c0002ee0:	52                   	push   edx
c0002ee1:	50                   	push   eax
c0002ee2:	e8 45 10 02 00       	call   c0023f2c <__udivdi3>
c0002ee7:	83 c4 10             	add    esp,0x10
c0002eea:	b9 01 00 00 00       	mov    ecx,0x1
c0002eef:	39 c5                	cmp    ebp,eax
c0002ef1:	77 60                	ja     c0002f53 <get_fat+0x1ec>
c0002ef3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002ef8:	74 59                	je     c0002f53 <get_fat+0x1ec>
c0002efa:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002efd:	eb 54                	jmp    c0002f53 <get_fat+0x1ec>
c0002eff:	80 f9 03             	cmp    cl,0x3
c0002f02:	75 05                	jne    c0002f09 <get_fat+0x1a2>
c0002f04:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f07:	77 f1                	ja     c0002efa <get_fat+0x193>
c0002f09:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f0e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f12:	75 3f                	jne    c0002f53 <get_fat+0x1ec>
c0002f14:	31 c9                	xor    ecx,ecx
c0002f16:	89 f2                	mov    edx,esi
c0002f18:	89 f8                	mov    eax,edi
c0002f1a:	c1 ea 07             	shr    edx,0x7
c0002f1d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f20:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f23:	e8 b7 f2 ff ff       	call   c00021df <move_window>
c0002f28:	85 c0                	test   eax,eax
c0002f2a:	0f 85 a3 fe ff ff    	jne    c0002dd3 <get_fat+0x6c>
c0002f30:	c1 e6 02             	shl    esi,0x2
c0002f33:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f39:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3d:	e8 cc ea ff ff       	call   c0001a0e <ld_dword>
c0002f42:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f47:	89 c1                	mov    ecx,eax
c0002f49:	eb 08                	jmp    c0002f53 <get_fat+0x1ec>
c0002f4b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f50:	89 c8                	mov    eax,ecx
c0002f52:	c3                   	ret    
c0002f53:	83 c4 1c             	add    esp,0x1c
c0002f56:	89 c8                	mov    eax,ecx
c0002f58:	5b                   	pop    ebx
c0002f59:	5e                   	pop    esi
c0002f5a:	5f                   	pop    edi
c0002f5b:	5d                   	pop    ebp
c0002f5c:	c3                   	ret    

c0002f5d <dir_sdi>:
c0002f5d:	55                   	push   ebp
c0002f5e:	57                   	push   edi
c0002f5f:	56                   	push   esi
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	83 ec 1c             	sub    esp,0x1c
c0002f66:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f68:	31 c0                	xor    eax,eax
c0002f6a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6d:	0f 94 c0             	sete   al
c0002f70:	48                   	dec    eax
c0002f71:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f76:	05 00 00 00 10       	add    eax,0x10000000
c0002f7b:	39 d0                	cmp    eax,edx
c0002f7d:	77 0a                	ja     c0002f89 <dir_sdi+0x2c>
c0002f7f:	b8 02 00 00 00       	mov    eax,0x2
c0002f84:	e9 c4 00 00 00       	jmp    c000304d <dir_sdi+0xf0>
c0002f89:	89 d6                	mov    esi,edx
c0002f8b:	f6 c2 1f             	test   dl,0x1f
c0002f8e:	75 ef                	jne    c0002f7f <dir_sdi+0x22>
c0002f90:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f93:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f96:	85 c9                	test   ecx,ecx
c0002f98:	75 2d                	jne    c0002fc7 <dir_sdi+0x6a>
c0002f9a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9d:	77 1b                	ja     c0002fba <dir_sdi+0x5d>
c0002f9f:	89 f2                	mov    edx,esi
c0002fa1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa5:	c1 ea 05             	shr    edx,0x5
c0002fa8:	39 c2                	cmp    edx,eax
c0002faa:	73 d3                	jae    c0002f7f <dir_sdi+0x22>
c0002fac:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002faf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fb8:	eb 4b                	jmp    c0003005 <dir_sdi+0xa8>
c0002fba:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	74 da                	je     c0002f9f <dir_sdi+0x42>
c0002fc5:	89 c1                	mov    ecx,eax
c0002fc7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcb:	c1 e5 09             	shl    ebp,0x9
c0002fce:	89 ca                	mov    edx,ecx
c0002fd0:	39 ee                	cmp    esi,ebp
c0002fd2:	72 1c                	jb     c0002ff0 <dir_sdi+0x93>
c0002fd4:	89 d8                	mov    eax,ebx
c0002fd6:	e8 8c fd ff ff       	call   c0002d67 <get_fat>
c0002fdb:	89 c1                	mov    ecx,eax
c0002fdd:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe0:	74 66                	je     c0003048 <dir_sdi+0xeb>
c0002fe2:	83 f8 01             	cmp    eax,0x1
c0002fe5:	76 98                	jbe    c0002f7f <dir_sdi+0x22>
c0002fe7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002fea:	76 93                	jbe    c0002f7f <dir_sdi+0x22>
c0002fec:	29 ee                	sub    esi,ebp
c0002fee:	eb de                	jmp    c0002fce <dir_sdi+0x71>
c0002ff0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff4:	89 f8                	mov    eax,edi
c0002ff6:	e8 9f ec ff ff       	call   c0001c9a <clst2sect>
c0002ffb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002fff:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003002:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003005:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003008:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000300e:	89 d1                	mov    ecx,edx
c0003010:	09 c1                	or     ecx,eax
c0003012:	0f 84 67 ff ff ff    	je     c0002f7f <dir_sdi+0x22>
c0003018:	89 f1                	mov    ecx,esi
c000301a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003022:	c1 e9 09             	shr    ecx,0x9
c0003025:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003029:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003031:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003034:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003041:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003044:	31 c0                	xor    eax,eax
c0003046:	eb 05                	jmp    c000304d <dir_sdi+0xf0>
c0003048:	b8 01 00 00 00       	mov    eax,0x1
c000304d:	83 c4 1c             	add    esp,0x1c
c0003050:	5b                   	pop    ebx
c0003051:	5e                   	pop    esi
c0003052:	5f                   	pop    edi
c0003053:	5d                   	pop    ebp
c0003054:	c3                   	ret    

c0003055 <create_chain>:
c0003055:	55                   	push   ebp
c0003056:	89 c5                	mov    ebp,eax
c0003058:	57                   	push   edi
c0003059:	56                   	push   esi
c000305a:	53                   	push   ebx
c000305b:	83 ec 1c             	sub    esp,0x1c
c000305e:	85 d2                	test   edx,edx
c0003060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003064:	8b 30                	mov    esi,DWORD PTR [eax]
c0003066:	75 0e                	jne    c0003076 <create_chain+0x21>
c0003068:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306b:	85 ff                	test   edi,edi
c000306d:	74 39                	je     c00030a8 <create_chain+0x53>
c000306f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003072:	77 39                	ja     c00030ad <create_chain+0x58>
c0003074:	eb 32                	jmp    c00030a8 <create_chain+0x53>
c0003076:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307a:	e8 e8 fc ff ff       	call   c0002d67 <get_fat>
c000307f:	89 c3                	mov    ebx,eax
c0003081:	83 f8 01             	cmp    eax,0x1
c0003084:	77 0a                	ja     c0003090 <create_chain+0x3b>
c0003086:	bb 01 00 00 00       	mov    ebx,0x1
c000308b:	e9 ba 01 00 00       	jmp    c000324a <create_chain+0x1f5>
c0003090:	83 f8 ff             	cmp    eax,0xffffffff
c0003093:	0f 84 62 01 00 00    	je     c00031fb <create_chain+0x1a6>
c0003099:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309c:	0f 87 a8 01 00 00    	ja     c000324a <create_chain+0x1f5>
c00030a2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a6:	eb 05                	jmp    c00030ad <create_chain+0x58>
c00030a8:	bf 01 00 00 00       	mov    edi,0x1
c00030ad:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b1:	75 07                	jne    c00030ba <create_chain+0x65>
c00030b3:	31 db                	xor    ebx,ebx
c00030b5:	e9 90 01 00 00       	jmp    c000324a <create_chain+0x1f5>
c00030ba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030bd:	75 74                	jne    c0003133 <create_chain+0xde>
c00030bf:	b9 01 00 00 00       	mov    ecx,0x1
c00030c4:	89 fa                	mov    edx,edi
c00030c6:	89 f0                	mov    eax,esi
c00030c8:	e8 2d f9 ff ff       	call   c00029fa <find_bitmap>
c00030cd:	89 c3                	mov    ebx,eax
c00030cf:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d5:	0f 87 6f 01 00 00    	ja     c000324a <create_chain+0x1f5>
c00030db:	83 ec 0c             	sub    esp,0xc
c00030de:	b9 01 00 00 00       	mov    ecx,0x1
c00030e3:	6a 01                	push   0x1
c00030e5:	89 da                	mov    edx,ebx
c00030e7:	89 f0                	mov    eax,esi
c00030e9:	e8 bf f9 ff ff       	call   c0002aad <change_bitmap>
c00030ee:	83 c4 10             	add    esp,0x10
c00030f1:	83 f8 02             	cmp    eax,0x2
c00030f4:	74 90                	je     c0003086 <create_chain+0x31>
c00030f6:	83 f8 01             	cmp    eax,0x1
c00030f9:	0f 84 fc 00 00 00    	je     c00031fb <create_chain+0x1a6>
c00030ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003104:	75 09                	jne    c000310f <create_chain+0xba>
c0003106:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310a:	e9 0c 01 00 00       	jmp    c000321b <create_chain+0x1c6>
c000310f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003113:	0f 85 e7 00 00 00    	jne    c0003200 <create_chain+0x1ab>
c0003119:	8d 57 01             	lea    edx,[edi+0x1]
c000311c:	39 da                	cmp    edx,ebx
c000311e:	0f 84 f7 00 00 00    	je     c000321b <create_chain+0x1c6>
c0003124:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003127:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000312e:	e9 cd 00 00 00       	jmp    c0003200 <create_chain+0x1ab>
c0003133:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003137:	75 41                	jne    c000317a <create_chain+0x125>
c0003139:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000313f:	77 05                	ja     c0003146 <create_chain+0xf1>
c0003141:	bb 02 00 00 00       	mov    ebx,0x2
c0003146:	89 da                	mov    edx,ebx
c0003148:	89 e8                	mov    eax,ebp
c000314a:	e8 18 fc ff ff       	call   c0002d67 <get_fat>
c000314f:	83 f8 01             	cmp    eax,0x1
c0003152:	0f 84 2e ff ff ff    	je     c0003086 <create_chain+0x31>
c0003158:	83 f8 ff             	cmp    eax,0xffffffff
c000315b:	0f 84 9a 00 00 00    	je     c00031fb <create_chain+0x1a6>
c0003161:	85 c0                	test   eax,eax
c0003163:	74 11                	je     c0003176 <create_chain+0x121>
c0003165:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003168:	83 f8 01             	cmp    eax,0x1
c000316b:	76 0d                	jbe    c000317a <create_chain+0x125>
c000316d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003170:	76 08                	jbe    c000317a <create_chain+0x125>
c0003172:	89 c7                	mov    edi,eax
c0003174:	eb 04                	jmp    c000317a <create_chain+0x125>
c0003176:	85 db                	test   ebx,ebx
c0003178:	75 38                	jne    c00031b2 <create_chain+0x15d>
c000317a:	89 fb                	mov    ebx,edi
c000317c:	43                   	inc    ebx
c000317d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003180:	77 0e                	ja     c0003190 <create_chain+0x13b>
c0003182:	83 ff 01             	cmp    edi,0x1
c0003185:	0f 86 28 ff ff ff    	jbe    c00030b3 <create_chain+0x5e>
c000318b:	bb 02 00 00 00       	mov    ebx,0x2
c0003190:	89 da                	mov    edx,ebx
c0003192:	89 e8                	mov    eax,ebp
c0003194:	e8 ce fb ff ff       	call   c0002d67 <get_fat>
c0003199:	85 c0                	test   eax,eax
c000319b:	74 15                	je     c00031b2 <create_chain+0x15d>
c000319d:	83 f8 01             	cmp    eax,0x1
c00031a0:	0f 84 e0 fe ff ff    	je     c0003086 <create_chain+0x31>
c00031a6:	40                   	inc    eax
c00031a7:	74 52                	je     c00031fb <create_chain+0x1a6>
c00031a9:	39 fb                	cmp    ebx,edi
c00031ab:	75 cf                	jne    c000317c <create_chain+0x127>
c00031ad:	e9 01 ff ff ff       	jmp    c00030b3 <create_chain+0x5e>
c00031b2:	83 c9 ff             	or     ecx,0xffffffff
c00031b5:	89 da                	mov    edx,ebx
c00031b7:	89 f0                	mov    eax,esi
c00031b9:	e8 a4 f9 ff ff       	call   c0002b62 <put_fat>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 32                	jne    c00031f4 <create_chain+0x19f>
c00031c2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c7:	74 11                	je     c00031da <create_chain+0x185>
c00031c9:	89 d9                	mov    ecx,ebx
c00031cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cf:	89 f0                	mov    eax,esi
c00031d1:	e8 8c f9 ff ff       	call   c0002b62 <put_fat>
c00031d6:	85 c0                	test   eax,eax
c00031d8:	75 1a                	jne    c00031f4 <create_chain+0x19f>
c00031da:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031dd:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e6:	39 d0                	cmp    eax,edx
c00031e8:	77 04                	ja     c00031ee <create_chain+0x199>
c00031ea:	48                   	dec    eax
c00031eb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031ee:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f2:	eb 56                	jmp    c000324a <create_chain+0x1f5>
c00031f4:	48                   	dec    eax
c00031f5:	0f 85 8b fe ff ff    	jne    c0003086 <create_chain+0x31>
c00031fb:	83 cb ff             	or     ebx,0xffffffff
c00031fe:	eb 4a                	jmp    c000324a <create_chain+0x1f5>
c0003200:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003204:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003207:	41                   	inc    ecx
c0003208:	39 d9                	cmp    ecx,ebx
c000320a:	75 19                	jne    c0003225 <create_chain+0x1d0>
c000320c:	b9 02 00 00 00       	mov    ecx,0x2
c0003211:	85 d2                	test   edx,edx
c0003213:	74 03                	je     c0003218 <create_chain+0x1c3>
c0003215:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003218:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321b:	85 c0                	test   eax,eax
c000321d:	0f 85 63 fe ff ff    	jne    c0003086 <create_chain+0x31>
c0003223:	eb b5                	jmp    c00031da <create_chain+0x185>
c0003225:	85 d2                	test   edx,edx
c0003227:	75 07                	jne    c0003230 <create_chain+0x1db>
c0003229:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003230:	89 d9                	mov    ecx,ebx
c0003232:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003236:	89 e8                	mov    eax,ebp
c0003238:	e8 bb fa ff ff       	call   c0002cf8 <fill_last_frag>
c000323d:	85 c0                	test   eax,eax
c000323f:	75 b3                	jne    c00031f4 <create_chain+0x19f>
c0003241:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003248:	eb 90                	jmp    c00031da <create_chain+0x185>
c000324a:	83 c4 1c             	add    esp,0x1c
c000324d:	89 d8                	mov    eax,ebx
c000324f:	5b                   	pop    ebx
c0003250:	5e                   	pop    esi
c0003251:	5f                   	pop    edi
c0003252:	5d                   	pop    ebp
c0003253:	c3                   	ret    

c0003254 <remove_chain>:
c0003254:	55                   	push   ebp
c0003255:	57                   	push   edi
c0003256:	56                   	push   esi
c0003257:	53                   	push   ebx
c0003258:	83 ec 1c             	sub    esp,0x1c
c000325b:	83 fa 01             	cmp    edx,0x1
c000325e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003262:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003264:	77 0a                	ja     c0003270 <remove_chain+0x1c>
c0003266:	b8 02 00 00 00       	mov    eax,0x2
c000326b:	e9 24 01 00 00       	jmp    c0003394 <remove_chain+0x140>
c0003270:	89 d6                	mov    esi,edx
c0003272:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003275:	76 ef                	jbe    c0003266 <remove_chain+0x12>
c0003277:	89 c7                	mov    edi,eax
c0003279:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000327e:	75 06                	jne    c0003286 <remove_chain+0x32>
c0003280:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003284:	eb 54                	jmp    c00032da <remove_chain+0x86>
c0003286:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003289:	75 06                	jne    c0003291 <remove_chain+0x3d>
c000328b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000328f:	74 ef                	je     c0003280 <remove_chain+0x2c>
c0003291:	83 c9 ff             	or     ecx,0xffffffff
c0003294:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003298:	89 d8                	mov    eax,ebx
c000329a:	e8 c3 f8 ff ff       	call   c0002b62 <put_fat>
c000329f:	85 c0                	test   eax,eax
c00032a1:	74 dd                	je     c0003280 <remove_chain+0x2c>
c00032a3:	e9 ec 00 00 00       	jmp    c0003394 <remove_chain+0x140>
c00032a8:	83 f8 01             	cmp    eax,0x1
c00032ab:	74 b9                	je     c0003266 <remove_chain+0x12>
c00032ad:	83 f8 ff             	cmp    eax,0xffffffff
c00032b0:	74 6d                	je     c000331f <remove_chain+0xcb>
c00032b2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b5:	75 6f                	jne    c0003326 <remove_chain+0xd2>
c00032b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ba:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032bd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c0:	39 d0                	cmp    eax,edx
c00032c2:	73 08                	jae    c00032cc <remove_chain+0x78>
c00032c4:	40                   	inc    eax
c00032c5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032c9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032cc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032cf:	39 e9                	cmp    ecx,ebp
c00032d1:	75 64                	jne    c0003337 <remove_chain+0xe3>
c00032d3:	89 ee                	mov    esi,ebp
c00032d5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032d8:	76 0f                	jbe    c00032e9 <remove_chain+0x95>
c00032da:	89 f2                	mov    edx,esi
c00032dc:	89 f8                	mov    eax,edi
c00032de:	e8 84 fa ff ff       	call   c0002d67 <get_fat>
c00032e3:	89 c5                	mov    ebp,eax
c00032e5:	85 c0                	test   eax,eax
c00032e7:	75 bf                	jne    c00032a8 <remove_chain+0x54>
c00032e9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ec:	0f 85 a0 00 00 00    	jne    c0003392 <remove_chain+0x13e>
c00032f2:	eb 6c                	jmp    c0003360 <remove_chain+0x10c>
c00032f4:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f7:	84 c0                	test   al,al
c00032f9:	75 7d                	jne    c0003378 <remove_chain+0x124>
c00032fb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00032fe:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003302:	0f 84 86 00 00 00    	je     c000338e <remove_chain+0x13a>
c0003308:	89 da                	mov    edx,ebx
c000330a:	89 f8                	mov    eax,edi
c000330c:	e8 56 fa ff ff       	call   c0002d67 <get_fat>
c0003311:	83 f8 01             	cmp    eax,0x1
c0003314:	0f 86 4c ff ff ff    	jbe    c0003266 <remove_chain+0x12>
c000331a:	83 f8 ff             	cmp    eax,0xffffffff
c000331d:	75 4e                	jne    c000336d <remove_chain+0x119>
c000331f:	b8 01 00 00 00       	mov    eax,0x1
c0003324:	eb 6e                	jmp    c0003394 <remove_chain+0x140>
c0003326:	31 c9                	xor    ecx,ecx
c0003328:	89 f2                	mov    edx,esi
c000332a:	89 d8                	mov    eax,ebx
c000332c:	e8 31 f8 ff ff       	call   c0002b62 <put_fat>
c0003331:	85 c0                	test   eax,eax
c0003333:	74 82                	je     c00032b7 <remove_chain+0x63>
c0003335:	eb 5d                	jmp    c0003394 <remove_chain+0x140>
c0003337:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333a:	75 1b                	jne    c0003357 <remove_chain+0x103>
c000333c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003340:	89 d8                	mov    eax,ebx
c0003342:	83 ec 0c             	sub    esp,0xc
c0003345:	6a 00                	push   0x0
c0003347:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334b:	e8 5d f7 ff ff       	call   c0002aad <change_bitmap>
c0003350:	83 c4 10             	add    esp,0x10
c0003353:	85 c0                	test   eax,eax
c0003355:	75 3d                	jne    c0003394 <remove_chain+0x140>
c0003357:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335b:	e9 73 ff ff ff       	jmp    c00032d3 <remove_chain+0x7f>
c0003360:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003365:	75 8d                	jne    c00032f4 <remove_chain+0xa0>
c0003367:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336b:	eb 25                	jmp    c0003392 <remove_chain+0x13e>
c000336d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003370:	89 c3                	mov    ebx,eax
c0003372:	39 c2                	cmp    edx,eax
c0003374:	74 88                	je     c00032fe <remove_chain+0xaa>
c0003376:	eb 1a                	jmp    c0003392 <remove_chain+0x13e>
c0003378:	3c 03                	cmp    al,0x3
c000337a:	75 16                	jne    c0003392 <remove_chain+0x13e>
c000337c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000337f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003383:	77 0d                	ja     c0003392 <remove_chain+0x13e>
c0003385:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003388:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338c:	72 04                	jb     c0003392 <remove_chain+0x13e>
c000338e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003392:	31 c0                	xor    eax,eax
c0003394:	83 c4 1c             	add    esp,0x1c
c0003397:	5b                   	pop    ebx
c0003398:	5e                   	pop    esi
c0003399:	5f                   	pop    edi
c000339a:	5d                   	pop    ebp
c000339b:	c3                   	ret    

c000339c <dir_clear>:
c000339c:	55                   	push   ebp
c000339d:	57                   	push   edi
c000339e:	56                   	push   esi
c000339f:	89 c6                	mov    esi,eax
c00033a1:	53                   	push   ebx
c00033a2:	83 ec 1c             	sub    esp,0x1c
c00033a5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033a9:	e8 9d ed ff ff       	call   c000214b <sync_window>
c00033ae:	85 c0                	test   eax,eax
c00033b0:	0f 85 de 00 00 00    	jne    c0003494 <dir_clear+0xf8>
c00033b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ba:	89 f0                	mov    eax,esi
c00033bc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033bf:	e8 d6 e8 ff ff       	call   c0001c9a <clst2sect>
c00033c4:	b9 00 02 00 00       	mov    ecx,0x200
c00033c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d7:	89 e8                	mov    eax,ebp
c00033d9:	31 d2                	xor    edx,edx
c00033db:	e8 b5 e6 ff ff       	call   c0001a95 <mem_set>
c00033e0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e4:	c1 e3 09             	shl    ebx,0x9
c00033e7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ed:	76 1f                	jbe    c000340e <dir_clear+0x72>
c00033ef:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f4:	eb 18                	jmp    c000340e <dir_clear+0x72>
c00033f6:	83 ec 0c             	sub    esp,0xc
c00033f9:	53                   	push   ebx
c00033fa:	e8 35 4e 00 00       	call   c0008234 <ff_memalloc>
c00033ff:	83 c4 10             	add    esp,0x10
c0003402:	89 c7                	mov    edi,eax
c0003404:	85 c0                	test   eax,eax
c0003406:	0f 85 8f 00 00 00    	jne    c000349b <dir_clear+0xff>
c000340c:	d1 eb                	shr    ebx,1
c000340e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003414:	77 e0                	ja     c00033f6 <dir_clear+0x5a>
c0003416:	31 db                	xor    ebx,ebx
c0003418:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341c:	39 d8                	cmp    eax,ebx
c000341e:	76 66                	jbe    c0003486 <dir_clear+0xea>
c0003420:	83 ec 0c             	sub    esp,0xc
c0003423:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003427:	6a 01                	push   0x1
c0003429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003431:	55                   	push   ebp
c0003432:	50                   	push   eax
c0003433:	e8 94 e5 ff ff       	call   c00019cc <disk_write>
c0003438:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003442:	83 c4 20             	add    esp,0x20
c0003445:	85 c0                	test   eax,eax
c0003447:	75 3d                	jne    c0003486 <dir_clear+0xea>
c0003449:	43                   	inc    ebx
c000344a:	eb cc                	jmp    c0003418 <dir_clear+0x7c>
c000344c:	83 ec 0c             	sub    esp,0xc
c000344f:	31 d2                	xor    edx,edx
c0003451:	55                   	push   ebp
c0003452:	89 d8                	mov    eax,ebx
c0003454:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003458:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345c:	52                   	push   edx
c000345d:	50                   	push   eax
c000345e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003462:	57                   	push   edi
c0003463:	50                   	push   eax
c0003464:	e8 63 e5 ff ff       	call   c00019cc <disk_write>
c0003469:	83 c4 20             	add    esp,0x20
c000346c:	85 c0                	test   eax,eax
c000346e:	75 0a                	jne    c000347a <dir_clear+0xde>
c0003470:	01 eb                	add    ebx,ebp
c0003472:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003476:	39 d8                	cmp    eax,ebx
c0003478:	77 d2                	ja     c000344c <dir_clear+0xb0>
c000347a:	83 ec 0c             	sub    esp,0xc
c000347d:	57                   	push   edi
c000347e:	e8 c7 4d 00 00       	call   c000824a <ff_memfree>
c0003483:	83 c4 10             	add    esp,0x10
c0003486:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348a:	39 d8                	cmp    eax,ebx
c000348c:	0f 95 c0             	setne  al
c000348f:	0f b6 c0             	movzx  eax,al
c0003492:	eb 19                	jmp    c00034ad <dir_clear+0x111>
c0003494:	b8 01 00 00 00       	mov    eax,0x1
c0003499:	eb 12                	jmp    c00034ad <dir_clear+0x111>
c000349b:	89 d9                	mov    ecx,ebx
c000349d:	31 d2                	xor    edx,edx
c000349f:	c1 eb 09             	shr    ebx,0x9
c00034a2:	e8 ee e5 ff ff       	call   c0001a95 <mem_set>
c00034a7:	89 dd                	mov    ebp,ebx
c00034a9:	31 db                	xor    ebx,ebx
c00034ab:	eb c5                	jmp    c0003472 <dir_clear+0xd6>
c00034ad:	83 c4 1c             	add    esp,0x1c
c00034b0:	5b                   	pop    ebx
c00034b1:	5e                   	pop    esi
c00034b2:	5f                   	pop    edi
c00034b3:	5d                   	pop    ebp
c00034b4:	c3                   	ret    

c00034b5 <dir_next>:
c00034b5:	55                   	push   ebp
c00034b6:	57                   	push   edi
c00034b7:	56                   	push   esi
c00034b8:	53                   	push   ebx
c00034b9:	89 c3                	mov    ebx,eax
c00034bb:	83 ec 1c             	sub    esp,0x1c
c00034be:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c7:	8d 78 20             	lea    edi,[eax+0x20]
c00034ca:	31 c0                	xor    eax,eax
c00034cc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d0:	0f 94 c0             	sete   al
c00034d3:	48                   	dec    eax
c00034d4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034d9:	05 00 00 00 10       	add    eax,0x10000000
c00034de:	39 f8                	cmp    eax,edi
c00034e0:	77 0e                	ja     c00034f0 <dir_next+0x3b>
c00034e2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034e9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f6:	b8 04 00 00 00       	mov    eax,0x4
c00034fb:	89 ce                	mov    esi,ecx
c00034fd:	09 d6                	or     esi,edx
c00034ff:	0f 84 da 00 00 00    	je     c00035df <dir_next+0x12a>
c0003505:	89 f8                	mov    eax,edi
c0003507:	25 ff 01 00 00       	and    eax,0x1ff
c000350c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003510:	0f 85 b9 00 00 00    	jne    c00035cf <dir_next+0x11a>
c0003516:	83 c2 01             	add    edx,0x1
c0003519:	83 d1 00             	adc    ecx,0x0
c000351c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000351f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003522:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003525:	85 d2                	test   edx,edx
c0003527:	75 29                	jne    c0003552 <dir_next+0x9d>
c0003529:	89 fa                	mov    edx,edi
c000352b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000352f:	c1 ea 05             	shr    edx,0x5
c0003532:	39 c2                	cmp    edx,eax
c0003534:	0f 82 95 00 00 00    	jb     c00035cf <dir_next+0x11a>
c000353a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003541:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003548:	b8 04 00 00 00       	mov    eax,0x4
c000354d:	e9 8d 00 00 00       	jmp    c00035df <dir_next+0x12a>
c0003552:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003556:	89 f9                	mov    ecx,edi
c0003558:	48                   	dec    eax
c0003559:	c1 e9 09             	shr    ecx,0x9
c000355c:	85 c8                	test   eax,ecx
c000355e:	75 6f                	jne    c00035cf <dir_next+0x11a>
c0003560:	89 d8                	mov    eax,ebx
c0003562:	e8 00 f8 ff ff       	call   c0002d67 <get_fat>
c0003567:	89 c6                	mov    esi,eax
c0003569:	83 f8 01             	cmp    eax,0x1
c000356c:	77 07                	ja     c0003575 <dir_next+0xc0>
c000356e:	b8 02 00 00 00       	mov    eax,0x2
c0003573:	eb 6a                	jmp    c00035df <dir_next+0x12a>
c0003575:	83 f8 ff             	cmp    eax,0xffffffff
c0003578:	75 07                	jne    c0003581 <dir_next+0xcc>
c000357a:	b8 01 00 00 00       	mov    eax,0x1
c000357f:	eb 5e                	jmp    c00035df <dir_next+0x12a>
c0003581:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003584:	77 37                	ja     c00035bd <dir_next+0x108>
c0003586:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358b:	74 ad                	je     c000353a <dir_next+0x85>
c000358d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003590:	89 d8                	mov    eax,ebx
c0003592:	e8 be fa ff ff       	call   c0003055 <create_chain>
c0003597:	89 c6                	mov    esi,eax
c0003599:	b8 07 00 00 00       	mov    eax,0x7
c000359e:	85 f6                	test   esi,esi
c00035a0:	74 3d                	je     c00035df <dir_next+0x12a>
c00035a2:	83 fe 01             	cmp    esi,0x1
c00035a5:	74 c7                	je     c000356e <dir_next+0xb9>
c00035a7:	83 fe ff             	cmp    esi,0xffffffff
c00035aa:	74 ce                	je     c000357a <dir_next+0xc5>
c00035ac:	89 f2                	mov    edx,esi
c00035ae:	89 e8                	mov    eax,ebp
c00035b0:	e8 e7 fd ff ff       	call   c000339c <dir_clear>
c00035b5:	85 c0                	test   eax,eax
c00035b7:	75 c1                	jne    c000357a <dir_next+0xc5>
c00035b9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035bd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c0:	89 f2                	mov    edx,esi
c00035c2:	89 e8                	mov    eax,ebp
c00035c4:	e8 d1 e6 ff ff       	call   c0001c9a <clst2sect>
c00035c9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035cc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035da:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035dd:	31 c0                	xor    eax,eax
c00035df:	83 c4 1c             	add    esp,0x1c
c00035e2:	5b                   	pop    ebx
c00035e3:	5e                   	pop    esi
c00035e4:	5f                   	pop    edi
c00035e5:	5d                   	pop    ebp
c00035e6:	c3                   	ret    

c00035e7 <load_xdir>:
c00035e7:	55                   	push   ebp
c00035e8:	57                   	push   edi
c00035e9:	56                   	push   esi
c00035ea:	89 c6                	mov    esi,eax
c00035ec:	53                   	push   ebx
c00035ed:	83 ec 1c             	sub    esp,0x1c
c00035f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fb:	e8 df eb ff ff       	call   c00021df <move_window>
c0003600:	89 c3                	mov    ebx,eax
c0003602:	85 c0                	test   eax,eax
c0003604:	0f 85 0c 01 00 00    	jne    c0003716 <load_xdir+0x12f>
c000360a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003610:	0f 85 fb 00 00 00    	jne    c0003711 <load_xdir+0x12a>
c0003616:	89 f8                	mov    eax,edi
c0003618:	b9 20 00 00 00       	mov    ecx,0x20
c000361d:	e8 5e e4 ff ff       	call   c0001a80 <mem_cpy>
c0003622:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003626:	40                   	inc    eax
c0003627:	c1 e0 05             	shl    eax,0x5
c000362a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000362e:	83 e8 60             	sub    eax,0x60
c0003631:	3d 00 02 00 00       	cmp    eax,0x200
c0003636:	0f 87 d5 00 00 00    	ja     c0003711 <load_xdir+0x12a>
c000363c:	31 d2                	xor    edx,edx
c000363e:	89 f0                	mov    eax,esi
c0003640:	e8 70 fe ff ff       	call   c00034b5 <dir_next>
c0003645:	89 c3                	mov    ebx,eax
c0003647:	83 f8 04             	cmp    eax,0x4
c000364a:	0f 84 c1 00 00 00    	je     c0003711 <load_xdir+0x12a>
c0003650:	85 c0                	test   eax,eax
c0003652:	0f 85 be 00 00 00    	jne    c0003716 <load_xdir+0x12f>
c0003658:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000365e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003660:	e8 7a eb ff ff       	call   c00021df <move_window>
c0003665:	89 c3                	mov    ebx,eax
c0003667:	85 c0                	test   eax,eax
c0003669:	0f 85 a7 00 00 00    	jne    c0003716 <load_xdir+0x12f>
c000366f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003672:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003675:	0f 85 96 00 00 00    	jne    c0003711 <load_xdir+0x12a>
c000367b:	8d 47 20             	lea    eax,[edi+0x20]
c000367e:	b9 20 00 00 00       	mov    ecx,0x20
c0003683:	e8 f8 e3 ff ff       	call   c0001a80 <mem_cpy>
c0003688:	31 d2                	xor    edx,edx
c000368a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000368e:	b9 0f 00 00 00       	mov    ecx,0xf
c0003693:	83 c0 2c             	add    eax,0x2c
c0003696:	f7 f1                	div    ecx
c0003698:	c1 e0 05             	shl    eax,0x5
c000369b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369f:	77 70                	ja     c0003711 <load_xdir+0x12a>
c00036a1:	bd 40 00 00 00       	mov    ebp,0x40
c00036a6:	31 d2                	xor    edx,edx
c00036a8:	89 f0                	mov    eax,esi
c00036aa:	e8 06 fe ff ff       	call   c00034b5 <dir_next>
c00036af:	89 c3                	mov    ebx,eax
c00036b1:	83 f8 04             	cmp    eax,0x4
c00036b4:	74 5b                	je     c0003711 <load_xdir+0x12a>
c00036b6:	85 c0                	test   eax,eax
c00036b8:	75 5c                	jne    c0003716 <load_xdir+0x12f>
c00036ba:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036bd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c2:	e8 18 eb ff ff       	call   c00021df <move_window>
c00036c7:	89 c3                	mov    ebx,eax
c00036c9:	85 c0                	test   eax,eax
c00036cb:	75 49                	jne    c0003716 <load_xdir+0x12f>
c00036cd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d3:	75 3c                	jne    c0003711 <load_xdir+0x12a>
c00036d5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036db:	77 0d                	ja     c00036ea <load_xdir+0x103>
c00036dd:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e0:	b9 20 00 00 00       	mov    ecx,0x20
c00036e5:	e8 96 e3 ff ff       	call   c0001a80 <mem_cpy>
c00036ea:	83 c5 20             	add    ebp,0x20
c00036ed:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f1:	77 b3                	ja     c00036a6 <load_xdir+0xbf>
c00036f3:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036f9:	77 1b                	ja     c0003716 <load_xdir+0x12f>
c00036fb:	89 f8                	mov    eax,edi
c00036fd:	e8 cd e7 ff ff       	call   c0001ecf <xdir_sum>
c0003702:	89 c1                	mov    ecx,eax
c0003704:	8d 47 02             	lea    eax,[edi+0x2]
c0003707:	e8 f5 e2 ff ff       	call   c0001a01 <ld_word>
c000370c:	66 39 c1             	cmp    cx,ax
c000370f:	74 05                	je     c0003716 <load_xdir+0x12f>
c0003711:	bb 02 00 00 00       	mov    ebx,0x2
c0003716:	83 c4 1c             	add    esp,0x1c
c0003719:	89 d8                	mov    eax,ebx
c000371b:	5b                   	pop    ebx
c000371c:	5e                   	pop    esi
c000371d:	5f                   	pop    edi
c000371e:	5d                   	pop    ebp
c000371f:	c3                   	ret    

c0003720 <load_obj_xdir>:
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 08             	sub    esp,0x8
c0003726:	8b 02                	mov    eax,DWORD PTR [edx]
c0003728:	89 03                	mov    DWORD PTR [ebx],eax
c000372a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003730:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003733:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003736:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003739:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003740:	30 c0                	xor    al,al
c0003742:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003749:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374c:	89 d8                	mov    eax,ebx
c000374e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003751:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003754:	e8 04 f8 ff ff       	call   c0002f5d <dir_sdi>
c0003759:	85 c0                	test   eax,eax
c000375b:	75 0b                	jne    c0003768 <load_obj_xdir+0x48>
c000375d:	89 d8                	mov    eax,ebx
c000375f:	83 c4 08             	add    esp,0x8
c0003762:	5b                   	pop    ebx
c0003763:	e9 7f fe ff ff       	jmp    c00035e7 <load_xdir>
c0003768:	83 c4 08             	add    esp,0x8
c000376b:	5b                   	pop    ebx
c000376c:	c3                   	ret    

c000376d <dir_read>:
c000376d:	55                   	push   ebp
c000376e:	bd 04 00 00 00       	mov    ebp,0x4
c0003773:	57                   	push   edi
c0003774:	56                   	push   esi
c0003775:	be ff ff ff ff       	mov    esi,0xffffffff
c000377a:	53                   	push   ebx
c000377b:	89 c3                	mov    ebx,eax
c000377d:	83 ec 1c             	sub    esp,0x1c
c0003780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003784:	8b 38                	mov    edi,DWORD PTR [eax]
c0003786:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000378e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003791:	89 c8                	mov    eax,ecx
c0003793:	09 d0                	or     eax,edx
c0003795:	0f 84 25 01 00 00    	je     c00038c0 <dir_read+0x153>
c000379b:	89 f8                	mov    eax,edi
c000379d:	e8 3d ea ff ff       	call   c00021df <move_window>
c00037a2:	89 c5                	mov    ebp,eax
c00037a4:	85 c0                	test   eax,eax
c00037a6:	0f 85 23 01 00 00    	jne    c00038cf <dir_read+0x162>
c00037ac:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037af:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b1:	84 c9                	test   cl,cl
c00037b3:	0f 84 11 01 00 00    	je     c00038ca <dir_read+0x15d>
c00037b9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037bc:	75 48                	jne    c0003806 <dir_read+0x99>
c00037be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c3:	74 10                	je     c00037d5 <dir_read+0x68>
c00037c5:	80 f9 83             	cmp    cl,0x83
c00037c8:	0f 85 dd 00 00 00    	jne    c00038ab <dir_read+0x13e>
c00037ce:	31 ed                	xor    ebp,ebp
c00037d0:	e9 08 01 00 00       	jmp    c00038dd <dir_read+0x170>
c00037d5:	80 f9 85             	cmp    cl,0x85
c00037d8:	0f 85 cd 00 00 00    	jne    c00038ab <dir_read+0x13e>
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	89 d8                	mov    eax,ebx
c00037e6:	e8 fc fd ff ff       	call   c00035e7 <load_xdir>
c00037eb:	89 c5                	mov    ebp,eax
c00037ed:	85 c0                	test   eax,eax
c00037ef:	0f 85 da 00 00 00    	jne    c00038cf <dir_read+0x162>
c00037f5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037f8:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fb:	83 e0 3f             	and    eax,0x3f
c00037fe:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003801:	e9 d7 00 00 00       	jmp    c00038dd <dir_read+0x170>
c0003806:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003809:	83 e0 3f             	and    eax,0x3f
c000380c:	80 f9 2e             	cmp    cl,0x2e
c000380f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003813:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003816:	0f 84 8a 00 00 00    	je     c00038a6 <dir_read+0x139>
c000381c:	80 f9 e5             	cmp    cl,0xe5
c000381f:	0f 84 81 00 00 00    	je     c00038a6 <dir_read+0x139>
c0003825:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003829:	83 e0 1f             	and    eax,0x1f
c000382c:	83 f8 08             	cmp    eax,0x8
c000382f:	0f 94 c0             	sete   al
c0003832:	0f b6 c0             	movzx  eax,al
c0003835:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003839:	75 6b                	jne    c00038a6 <dir_read+0x139>
c000383b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003840:	75 44                	jne    c0003886 <dir_read+0x119>
c0003842:	f6 c1 40             	test   cl,0x40
c0003845:	74 12                	je     c0003859 <dir_read+0xec>
c0003847:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384a:	83 e1 bf             	and    ecx,0xffffffbf
c000384d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003851:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003854:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003857:	eb 06                	jmp    c000385f <dir_read+0xf2>
c0003859:	89 f0                	mov    eax,esi
c000385b:	38 c8                	cmp    al,cl
c000385d:	75 47                	jne    c00038a6 <dir_read+0x139>
c000385f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003863:	be ff ff ff ff       	mov    esi,0xffffffff
c0003868:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386b:	75 3e                	jne    c00038ab <dir_read+0x13e>
c000386d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003871:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003874:	e8 8a e4 ff ff       	call   c0001d03 <pick_lfn>
c0003879:	85 c0                	test   eax,eax
c000387b:	74 2e                	je     c00038ab <dir_read+0x13e>
c000387d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003881:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003884:	eb 25                	jmp    c00038ab <dir_read+0x13e>
c0003886:	89 f0                	mov    eax,esi
c0003888:	84 c0                	test   al,al
c000388a:	75 11                	jne    c000389d <dir_read+0x130>
c000388c:	89 d0                	mov    eax,edx
c000388e:	e8 2a e6 ff ff       	call   c0001ebd <sum_sfn>
c0003893:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003897:	0f 84 31 ff ff ff    	je     c00037ce <dir_read+0x61>
c000389d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a4:	eb 37                	jmp    c00038dd <dir_read+0x170>
c00038a6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ab:	31 d2                	xor    edx,edx
c00038ad:	89 d8                	mov    eax,ebx
c00038af:	e8 01 fc ff ff       	call   c00034b5 <dir_next>
c00038b4:	89 c5                	mov    ebp,eax
c00038b6:	85 c0                	test   eax,eax
c00038b8:	0f 84 cd fe ff ff    	je     c000378b <dir_read+0x1e>
c00038be:	eb 0f                	jmp    c00038cf <dir_read+0x162>
c00038c0:	85 ed                	test   ebp,ebp
c00038c2:	0f 84 06 ff ff ff    	je     c00037ce <dir_read+0x61>
c00038c8:	eb 05                	jmp    c00038cf <dir_read+0x162>
c00038ca:	bd 04 00 00 00       	mov    ebp,0x4
c00038cf:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038dd:	83 c4 1c             	add    esp,0x1c
c00038e0:	89 e8                	mov    eax,ebp
c00038e2:	5b                   	pop    ebx
c00038e3:	5e                   	pop    esi
c00038e4:	5f                   	pop    edi
c00038e5:	5d                   	pop    ebp
c00038e6:	c3                   	ret    

c00038e7 <dir_alloc>:
c00038e7:	55                   	push   ebp
c00038e8:	89 d5                	mov    ebp,edx
c00038ea:	57                   	push   edi
c00038eb:	31 d2                	xor    edx,edx
c00038ed:	56                   	push   esi
c00038ee:	53                   	push   ebx
c00038ef:	89 c3                	mov    ebx,eax
c00038f1:	83 ec 0c             	sub    esp,0xc
c00038f4:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f6:	e8 62 f6 ff ff       	call   c0002f5d <dir_sdi>
c00038fb:	85 c0                	test   eax,eax
c00038fd:	75 4e                	jne    c000394d <dir_alloc+0x66>
c00038ff:	31 f6                	xor    esi,esi
c0003901:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003904:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003907:	89 f8                	mov    eax,edi
c0003909:	e8 d1 e8 ff ff       	call   c00021df <move_window>
c000390e:	85 c0                	test   eax,eax
c0003910:	75 3b                	jne    c000394d <dir_alloc+0x66>
c0003912:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003915:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003918:	8a 12                	mov    dl,BYTE PTR [edx]
c000391a:	75 07                	jne    c0003923 <dir_alloc+0x3c>
c000391c:	f7 d2                	not    edx
c000391e:	c0 ea 07             	shr    dl,0x7
c0003921:	eb 0d                	jmp    c0003930 <dir_alloc+0x49>
c0003923:	84 d2                	test   dl,dl
c0003925:	0f 94 c1             	sete   cl
c0003928:	80 fa e5             	cmp    dl,0xe5
c000392b:	0f 94 c2             	sete   dl
c000392e:	09 ca                	or     edx,ecx
c0003930:	84 d2                	test   dl,dl
c0003932:	74 07                	je     c000393b <dir_alloc+0x54>
c0003934:	46                   	inc    esi
c0003935:	39 ee                	cmp    esi,ebp
c0003937:	75 04                	jne    c000393d <dir_alloc+0x56>
c0003939:	eb 1c                	jmp    c0003957 <dir_alloc+0x70>
c000393b:	31 f6                	xor    esi,esi
c000393d:	ba 01 00 00 00       	mov    edx,0x1
c0003942:	89 d8                	mov    eax,ebx
c0003944:	e8 6c fb ff ff       	call   c00034b5 <dir_next>
c0003949:	85 c0                	test   eax,eax
c000394b:	74 b4                	je     c0003901 <dir_alloc+0x1a>
c000394d:	83 f8 04             	cmp    eax,0x4
c0003950:	75 05                	jne    c0003957 <dir_alloc+0x70>
c0003952:	b8 07 00 00 00       	mov    eax,0x7
c0003957:	83 c4 0c             	add    esp,0xc
c000395a:	5b                   	pop    ebx
c000395b:	5e                   	pop    esi
c000395c:	5f                   	pop    edi
c000395d:	5d                   	pop    ebp
c000395e:	c3                   	ret    

c000395f <store_xdir>:
c000395f:	55                   	push   ebp
c0003960:	57                   	push   edi
c0003961:	89 c7                	mov    edi,eax
c0003963:	56                   	push   esi
c0003964:	53                   	push   ebx
c0003965:	83 ec 0c             	sub    esp,0xc
c0003968:	8b 00                	mov    eax,DWORD PTR [eax]
c000396a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396d:	89 e8                	mov    eax,ebp
c000396f:	e8 5b e5 ff ff       	call   c0001ecf <xdir_sum>
c0003974:	0f b7 d0             	movzx  edx,ax
c0003977:	8d 45 02             	lea    eax,[ebp+0x2]
c000397a:	e8 f4 e0 ff ff       	call   c0001a73 <st_word>
c000397f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003983:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003986:	89 f8                	mov    eax,edi
c0003988:	e8 d0 f5 ff ff       	call   c0002f5d <dir_sdi>
c000398d:	89 c6                	mov    esi,eax
c000398f:	85 f6                	test   esi,esi
c0003991:	75 3d                	jne    c00039d0 <store_xdir+0x71>
c0003993:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003996:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003999:	8b 07                	mov    eax,DWORD PTR [edi]
c000399b:	e8 3f e8 ff ff       	call   c00021df <move_window>
c00039a0:	89 c6                	mov    esi,eax
c00039a2:	85 c0                	test   eax,eax
c00039a4:	75 2a                	jne    c00039d0 <store_xdir+0x71>
c00039a6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039a9:	b9 20 00 00 00       	mov    ecx,0x20
c00039ae:	89 ea                	mov    edx,ebp
c00039b0:	e8 cb e0 ff ff       	call   c0001a80 <mem_cpy>
c00039b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b7:	85 db                	test   ebx,ebx
c00039b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039bd:	74 11                	je     c00039d0 <store_xdir+0x71>
c00039bf:	31 d2                	xor    edx,edx
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	83 c5 20             	add    ebp,0x20
c00039c6:	e8 ea fa ff ff       	call   c00034b5 <dir_next>
c00039cb:	4b                   	dec    ebx
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	eb bf                	jmp    c000398f <store_xdir+0x30>
c00039d0:	89 f0                	mov    eax,esi
c00039d2:	83 fe 02             	cmp    esi,0x2
c00039d5:	76 05                	jbe    c00039dc <store_xdir+0x7d>
c00039d7:	b8 02 00 00 00       	mov    eax,0x2
c00039dc:	83 c4 0c             	add    esp,0xc
c00039df:	5b                   	pop    ebx
c00039e0:	5e                   	pop    esi
c00039e1:	5f                   	pop    edi
c00039e2:	5d                   	pop    ebp
c00039e3:	c3                   	ret    

c00039e4 <dir_remove>:
c00039e4:	57                   	push   edi
c00039e5:	56                   	push   esi
c00039e6:	53                   	push   ebx
c00039e7:	89 c3                	mov    ebx,eax
c00039e9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ec:	8b 30                	mov    esi,DWORD PTR [eax]
c00039ee:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f1:	83 fa ff             	cmp    edx,0xffffffff
c00039f4:	74 09                	je     c00039ff <dir_remove+0x1b>
c00039f6:	e8 62 f5 ff ff       	call   c0002f5d <dir_sdi>
c00039fb:	85 c0                	test   eax,eax
c00039fd:	75 41                	jne    c0003a40 <dir_remove+0x5c>
c00039ff:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a02:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a05:	89 f0                	mov    eax,esi
c0003a07:	e8 d3 e7 ff ff       	call   c00021df <move_window>
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	75 26                	jne    c0003a36 <dir_remove+0x52>
c0003a10:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a13:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a16:	75 05                	jne    c0003a1d <dir_remove+0x39>
c0003a18:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1b:	eb 03                	jmp    c0003a20 <dir_remove+0x3c>
c0003a1d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a20:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a24:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a27:	73 17                	jae    c0003a40 <dir_remove+0x5c>
c0003a29:	31 d2                	xor    edx,edx
c0003a2b:	89 d8                	mov    eax,ebx
c0003a2d:	e8 83 fa ff ff       	call   c00034b5 <dir_next>
c0003a32:	85 c0                	test   eax,eax
c0003a34:	74 c9                	je     c00039ff <dir_remove+0x1b>
c0003a36:	83 f8 04             	cmp    eax,0x4
c0003a39:	75 05                	jne    c0003a40 <dir_remove+0x5c>
c0003a3b:	b8 02 00 00 00       	mov    eax,0x2
c0003a40:	5b                   	pop    ebx
c0003a41:	5e                   	pop    esi
c0003a42:	5f                   	pop    edi
c0003a43:	c3                   	ret    

c0003a44 <create_name>:
c0003a44:	55                   	push   ebp
c0003a45:	89 d5                	mov    ebp,edx
c0003a47:	57                   	push   edi
c0003a48:	89 c7                	mov    edi,eax
c0003a4a:	56                   	push   esi
c0003a4b:	31 f6                	xor    esi,esi
c0003a4d:	53                   	push   ebx
c0003a4e:	83 ec 3c             	sub    esp,0x3c
c0003a51:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a53:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a57:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a60:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a64:	e8 72 e0 ff ff       	call   c0001adb <tchar2uni>
c0003a69:	89 c3                	mov    ebx,eax
c0003a6b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a6e:	75 0a                	jne    c0003a7a <create_name+0x36>
c0003a70:	b8 06 00 00 00       	mov    eax,0x6
c0003a75:	e9 9e 02 00 00       	jmp    c0003d18 <create_name+0x2d4>
c0003a7a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a7f:	76 0c                	jbe    c0003a8d <create_name+0x49>
c0003a81:	c1 e8 10             	shr    eax,0x10
c0003a84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a88:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8c:	46                   	inc    esi
c0003a8d:	66 83 fb 1f          	cmp    bx,0x1f
c0003a91:	76 4f                	jbe    c0003ae2 <create_name+0x9e>
c0003a93:	66 83 fb 5c          	cmp    bx,0x5c
c0003a97:	74 35                	je     c0003ace <create_name+0x8a>
c0003a99:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9d:	74 2f                	je     c0003ace <create_name+0x8a>
c0003a9f:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa3:	77 11                	ja     c0003ab6 <create_name+0x72>
c0003aa5:	0f b7 d3             	movzx  edx,bx
c0003aa8:	b8 52 69 02 c0       	mov    eax,0xc0026952
c0003aad:	e8 11 e0 ff ff       	call   c0001ac3 <chk_chr>
c0003ab2:	85 c0                	test   eax,eax
c0003ab4:	75 ba                	jne    c0003a70 <create_name+0x2c>
c0003ab6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abc:	77 b2                	ja     c0003a70 <create_name+0x2c>
c0003abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac6:	46                   	inc    esi
c0003ac7:	eb 97                	jmp    c0003a60 <create_name+0x1c>
c0003ac9:	40                   	inc    eax
c0003aca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ace:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad4:	80 fa 2f             	cmp    dl,0x2f
c0003ad7:	74 f0                	je     c0003ac9 <create_name+0x85>
c0003ad9:	80 fa 5c             	cmp    dl,0x5c
c0003adc:	74 eb                	je     c0003ac9 <create_name+0x85>
c0003ade:	31 db                	xor    ebx,ebx
c0003ae0:	eb 02                	jmp    c0003ae4 <create_name+0xa0>
c0003ae2:	b3 04                	mov    bl,0x4
c0003ae4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aeb:	85 f6                	test   esi,esi
c0003aed:	74 18                	je     c0003b07 <create_name+0xc3>
c0003aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af3:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003af8:	66 83 f8 20          	cmp    ax,0x20
c0003afc:	74 06                	je     c0003b04 <create_name+0xc0>
c0003afe:	66 83 f8 2e          	cmp    ax,0x2e
c0003b02:	75 03                	jne    c0003b07 <create_name+0xc3>
c0003b04:	4e                   	dec    esi
c0003b05:	eb e4                	jmp    c0003aeb <create_name+0xa7>
c0003b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0b:	31 ed                	xor    ebp,ebp
c0003b0d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b13:	85 f6                	test   esi,esi
c0003b15:	0f 84 55 ff ff ff    	je     c0003a70 <create_name+0x2c>
c0003b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b22:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b26:	66 83 f8 20          	cmp    ax,0x20
c0003b2a:	75 04                	jne    c0003b30 <create_name+0xec>
c0003b2c:	89 d5                	mov    ebp,edx
c0003b2e:	eb eb                	jmp    c0003b1b <create_name+0xd7>
c0003b30:	85 ed                	test   ebp,ebp
c0003b32:	75 06                	jne    c0003b3a <create_name+0xf6>
c0003b34:	66 83 f8 2e          	cmp    ax,0x2e
c0003b38:	75 08                	jne    c0003b42 <create_name+0xfe>
c0003b3a:	83 cb 03             	or     ebx,0x3
c0003b3d:	eb 03                	jmp    c0003b42 <create_name+0xfe>
c0003b3f:	4e                   	dec    esi
c0003b40:	74 0c                	je     c0003b4e <create_name+0x10a>
c0003b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b46:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4c:	75 f1                	jne    c0003b3f <create_name+0xfb>
c0003b4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b53:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b56:	ba 20 00 00 00       	mov    edx,0x20
c0003b5b:	e8 35 df ff ff       	call   c0001a95 <mem_set>
c0003b60:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b68:	31 c9                	xor    ecx,ecx
c0003b6a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b6f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b7e:	66 85 ed             	test   bp,bp
c0003b81:	0f 84 30 01 00 00    	je     c0003cb7 <create_name+0x273>
c0003b87:	66 83 fd 20          	cmp    bp,0x20
c0003b8b:	74 10                	je     c0003b9d <create_name+0x159>
c0003b8d:	66 83 fd 2e          	cmp    bp,0x2e
c0003b91:	75 13                	jne    c0003ba6 <create_name+0x162>
c0003b93:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b97:	0f 84 6b 01 00 00    	je     c0003d08 <create_name+0x2c4>
c0003b9d:	83 cb 03             	or     ebx,0x3
c0003ba0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba4:	eb c9                	jmp    c0003b6f <create_name+0x12b>
c0003ba6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003baa:	73 0b                	jae    c0003bb7 <create_name+0x173>
c0003bac:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb0:	75 47                	jne    c0003bf9 <create_name+0x1b5>
c0003bb2:	e9 51 01 00 00       	jmp    c0003d08 <create_name+0x2c4>
c0003bb7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbc:	75 10                	jne    c0003bce <create_name+0x18a>
c0003bbe:	83 cb 03             	or     ebx,0x3
c0003bc1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bc9:	e9 e9 00 00 00       	jmp    c0003cb7 <create_name+0x273>
c0003bce:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd2:	74 0d                	je     c0003be1 <create_name+0x19d>
c0003bd4:	83 cb 03             	or     ebx,0x3
c0003bd7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdb:	0f 87 d6 00 00 00    	ja     c0003cb7 <create_name+0x273>
c0003be1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bea:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf2:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf7:	eb a7                	jmp    c0003ba0 <create_name+0x15c>
c0003bf9:	66 83 fd 7f          	cmp    bp,0x7f
c0003bfd:	76 68                	jbe    c0003c67 <create_name+0x223>
c0003bff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c03:	88 da                	mov    dl,bl
c0003c05:	83 ca 02             	or     edx,0x2
c0003c08:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0c:	50                   	push   eax
c0003c0d:	50                   	push   eax
c0003c0e:	68 b5 01 00 00       	push   0x1b5
c0003c13:	55                   	push   ebp
c0003c14:	e8 48 46 00 00       	call   c0008261 <ff_uni2oem>
c0003c19:	83 c4 10             	add    esp,0x10
c0003c1c:	89 c5                	mov    ebp,eax
c0003c1e:	a8 80                	test   al,0x80
c0003c20:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c28:	74 0c                	je     c0003c36 <create_name+0x1f2>
c0003c2a:	83 e5 7f             	and    ebp,0x7f
c0003c2d:	0f b6 ad a0 68 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd9760]
c0003c34:	eb 2a                	jmp    c0003c60 <create_name+0x21c>
c0003c36:	66 3d ff 00          	cmp    ax,0xff
c0003c3a:	76 24                	jbe    c0003c60 <create_name+0x21c>
c0003c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c40:	48                   	dec    eax
c0003c41:	39 c8                	cmp    eax,ecx
c0003c43:	77 0c                	ja     c0003c51 <create_name+0x20d>
c0003c45:	83 cb 03             	or     ebx,0x3
c0003c48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4c:	e9 4f ff ff ff       	jmp    c0003ba0 <create_name+0x15c>
c0003c51:	89 e8                	mov    eax,ebp
c0003c53:	88 d3                	mov    bl,dl
c0003c55:	66 c1 e8 08          	shr    ax,0x8
c0003c59:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5d:	41                   	inc    ecx
c0003c5e:	eb 4b                	jmp    c0003cab <create_name+0x267>
c0003c60:	88 d3                	mov    bl,dl
c0003c62:	66 85 ed             	test   bp,bp
c0003c65:	74 19                	je     c0003c80 <create_name+0x23c>
c0003c67:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6b:	0f b7 d5             	movzx  edx,bp
c0003c6e:	b8 5b 69 02 c0       	mov    eax,0xc002695b
c0003c73:	e8 4b de ff ff       	call   c0001ac3 <chk_chr>
c0003c78:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7c:	85 c0                	test   eax,eax
c0003c7e:	74 0a                	je     c0003c8a <create_name+0x246>
c0003c80:	83 cb 03             	or     ebx,0x3
c0003c83:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c88:	eb 21                	jmp    c0003cab <create_name+0x267>
c0003c8a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8d:	66 83 f8 19          	cmp    ax,0x19
c0003c91:	77 07                	ja     c0003c9a <create_name+0x256>
c0003c93:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c98:	eb 11                	jmp    c0003cab <create_name+0x267>
c0003c9a:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 08                	ja     c0003cab <create_name+0x267>
c0003ca3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ca8:	83 ed 20             	sub    ebp,0x20
c0003cab:	89 e8                	mov    eax,ebp
c0003cad:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb1:	41                   	inc    ecx
c0003cb2:	e9 e9 fe ff ff       	jmp    c0003ba0 <create_name+0x15c>
c0003cb7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbb:	75 04                	jne    c0003cc1 <create_name+0x27d>
c0003cbd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc6:	75 05                	jne    c0003ccd <create_name+0x289>
c0003cc8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ccd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd1:	83 e0 0c             	and    eax,0xc
c0003cd4:	3c 0c                	cmp    al,0xc
c0003cd6:	74 0b                	je     c0003ce3 <create_name+0x29f>
c0003cd8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cdc:	83 e0 03             	and    eax,0x3
c0003cdf:	3c 03                	cmp    al,0x3
c0003ce1:	75 05                	jne    c0003ce8 <create_name+0x2a4>
c0003ce3:	83 cb 02             	or     ebx,0x2
c0003ce6:	eb 19                	jmp    c0003d01 <create_name+0x2bd>
c0003ce8:	f6 c3 02             	test   bl,0x2
c0003ceb:	75 14                	jne    c0003d01 <create_name+0x2bd>
c0003ced:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf2:	74 03                	je     c0003cf7 <create_name+0x2b3>
c0003cf4:	83 cb 10             	or     ebx,0x10
c0003cf7:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfc:	74 03                	je     c0003d01 <create_name+0x2bd>
c0003cfe:	83 cb 08             	or     ebx,0x8
c0003d01:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d04:	31 c0                	xor    eax,eax
c0003d06:	eb 10                	jmp    c0003d18 <create_name+0x2d4>
c0003d08:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0d:	0f 85 ce fe ff ff    	jne    c0003be1 <create_name+0x19d>
c0003d13:	e9 a6 fe ff ff       	jmp    c0003bbe <create_name+0x17a>
c0003d18:	83 c4 3c             	add    esp,0x3c
c0003d1b:	5b                   	pop    ebx
c0003d1c:	5e                   	pop    esi
c0003d1d:	5f                   	pop    edi
c0003d1e:	5d                   	pop    ebp
c0003d1f:	c3                   	ret    

c0003d20 <xname_sum>:
c0003d20:	56                   	push   esi
c0003d21:	53                   	push   ebx
c0003d22:	89 c6                	mov    esi,eax
c0003d24:	51                   	push   ecx
c0003d25:	31 db                	xor    ebx,ebx
c0003d27:	83 c6 02             	add    esi,0x2
c0003d2a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d2e:	66 85 c0             	test   ax,ax
c0003d31:	74 1f                	je     c0003d52 <xname_sum+0x32>
c0003d33:	83 ec 0c             	sub    esp,0xc
c0003d36:	66 d1 cb             	ror    bx,1
c0003d39:	50                   	push   eax
c0003d3a:	e8 1e 46 00 00       	call   c000835d <ff_wtoupper>
c0003d3f:	83 c4 10             	add    esp,0x10
c0003d42:	0f b6 d0             	movzx  edx,al
c0003d45:	66 c1 e8 08          	shr    ax,0x8
c0003d49:	01 d3                	add    ebx,edx
c0003d4b:	66 d1 cb             	ror    bx,1
c0003d4e:	01 c3                	add    ebx,eax
c0003d50:	eb d5                	jmp    c0003d27 <xname_sum+0x7>
c0003d52:	89 d8                	mov    eax,ebx
c0003d54:	5a                   	pop    edx
c0003d55:	5b                   	pop    ebx
c0003d56:	5e                   	pop    esi
c0003d57:	c3                   	ret    

c0003d58 <create_xdir>:
c0003d58:	55                   	push   ebp
c0003d59:	b9 40 00 00 00       	mov    ecx,0x40
c0003d5e:	57                   	push   edi
c0003d5f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d64:	56                   	push   esi
c0003d65:	31 ff                	xor    edi,edi
c0003d67:	53                   	push   ebx
c0003d68:	be 40 00 00 00       	mov    esi,0x40
c0003d6d:	89 c3                	mov    ebx,eax
c0003d6f:	83 ec 1c             	sub    esp,0x1c
c0003d72:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d76:	31 d2                	xor    edx,edx
c0003d78:	e8 18 dd ff ff       	call   c0001a95 <mem_set>
c0003d7d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d80:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d84:	31 c9                	xor    ecx,ecx
c0003d86:	8d 46 01             	lea    eax,[esi+0x1]
c0003d89:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8d:	83 c6 02             	add    esi,0x2
c0003d90:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d94:	66 85 ed             	test   bp,bp
c0003d97:	74 12                	je     c0003dab <create_xdir+0x53>
c0003d99:	0f b6 c1             	movzx  eax,cl
c0003d9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da4:	66 83 fd 01          	cmp    bp,0x1
c0003da8:	80 d9 ff             	sbb    cl,0xff
c0003dab:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dae:	0f b7 d5             	movzx  edx,bp
c0003db1:	83 c6 02             	add    esi,0x2
c0003db4:	e8 ba dc ff ff       	call   c0001a73 <st_word>
c0003db9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dbf:	75 d3                	jne    c0003d94 <create_xdir+0x3c>
c0003dc1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dc8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dcc:	0f b6 c1             	movzx  eax,cl
c0003dcf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd4:	74 07                	je     c0003ddd <create_xdir+0x85>
c0003dd6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddb:	eb a9                	jmp    c0003d86 <create_xdir+0x2e>
c0003ddd:	8d 47 02             	lea    eax,[edi+0x2]
c0003de0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de6:	89 d0                	mov    eax,edx
c0003de8:	e8 33 ff ff ff       	call   c0003d20 <xname_sum>
c0003ded:	83 c4 1c             	add    esp,0x1c
c0003df0:	0f b7 d0             	movzx  edx,ax
c0003df3:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df6:	5b                   	pop    ebx
c0003df7:	5e                   	pop    esi
c0003df8:	5f                   	pop    edi
c0003df9:	5d                   	pop    ebp
c0003dfa:	e9 74 dc ff ff       	jmp    c0001a73 <st_word>

c0003dff <cmp_lfn>:
c0003dff:	55                   	push   ebp
c0003e00:	57                   	push   edi
c0003e01:	89 d7                	mov    edi,edx
c0003e03:	56                   	push   esi
c0003e04:	53                   	push   ebx
c0003e05:	83 ec 1c             	sub    esp,0x1c
c0003e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e0f:	e8 ed db ff ff       	call   c0001a01 <ld_word>
c0003e14:	66 85 c0             	test   ax,ax
c0003e17:	74 07                	je     c0003e20 <cmp_lfn+0x21>
c0003e19:	31 c0                	xor    eax,eax
c0003e1b:	e9 9a 00 00 00       	jmp    c0003eba <cmp_lfn+0xbb>
c0003e20:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e22:	bd 01 00 00 00       	mov    ebp,0x1
c0003e27:	83 e3 3f             	and    ebx,0x3f
c0003e2a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e32:	4b                   	dec    ebx
c0003e33:	6b db 0d             	imul   ebx,ebx,0xd
c0003e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3a:	0f b6 80 20 69 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd96e0]
c0003e41:	01 f8                	add    eax,edi
c0003e43:	e8 b9 db ff ff       	call   c0001a01 <ld_word>
c0003e48:	66 85 ed             	test   bp,bp
c0003e4b:	89 c6                	mov    esi,eax
c0003e4d:	74 3c                	je     c0003e8b <cmp_lfn+0x8c>
c0003e4f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e55:	77 c2                	ja     c0003e19 <cmp_lfn+0x1a>
c0003e57:	83 ec 0c             	sub    esp,0xc
c0003e5a:	0f b7 c0             	movzx  eax,ax
c0003e5d:	50                   	push   eax
c0003e5e:	e8 fa 44 00 00       	call   c000835d <ff_wtoupper>
c0003e63:	89 c5                	mov    ebp,eax
c0003e65:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e70:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e74:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e77:	e8 e1 44 00 00       	call   c000835d <ff_wtoupper>
c0003e7c:	83 c4 10             	add    esp,0x10
c0003e7f:	39 c5                	cmp    ebp,eax
c0003e81:	75 96                	jne    c0003e19 <cmp_lfn+0x1a>
c0003e83:	89 f5                	mov    ebp,esi
c0003e85:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e89:	eb 04                	jmp    c0003e8f <cmp_lfn+0x90>
c0003e8b:	66 46                	inc    si
c0003e8d:	75 8a                	jne    c0003e19 <cmp_lfn+0x1a>
c0003e8f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e93:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e98:	75 9c                	jne    c0003e36 <cmp_lfn+0x37>
c0003e9a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9d:	74 16                	je     c0003eb5 <cmp_lfn+0xb6>
c0003e9f:	66 85 ed             	test   bp,bp
c0003ea2:	74 11                	je     c0003eb5 <cmp_lfn+0xb6>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ead:	0f 94 c0             	sete   al
c0003eb0:	0f b6 c0             	movzx  eax,al
c0003eb3:	eb 05                	jmp    c0003eba <cmp_lfn+0xbb>
c0003eb5:	b8 01 00 00 00       	mov    eax,0x1
c0003eba:	83 c4 1c             	add    esp,0x1c
c0003ebd:	5b                   	pop    ebx
c0003ebe:	5e                   	pop    esi
c0003ebf:	5f                   	pop    edi
c0003ec0:	5d                   	pop    ebp
c0003ec1:	c3                   	ret    

c0003ec2 <dir_find>:
c0003ec2:	55                   	push   ebp
c0003ec3:	31 d2                	xor    edx,edx
c0003ec5:	57                   	push   edi
c0003ec6:	56                   	push   esi
c0003ec7:	53                   	push   ebx
c0003ec8:	89 c3                	mov    ebx,eax
c0003eca:	83 ec 1c             	sub    esp,0x1c
c0003ecd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ecf:	e8 89 f0 ff ff       	call   c0002f5d <dir_sdi>
c0003ed4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed7:	85 c0                	test   eax,eax
c0003ed9:	0f 85 9e 01 00 00    	jne    c000407d <dir_find+0x1bb>
c0003edf:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee2:	0f 85 8d 00 00 00    	jne    c0003f75 <dir_find+0xb3>
c0003ee8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eeb:	e8 30 fe ff ff       	call   c0003d20 <xname_sum>
c0003ef0:	89 c7                	mov    edi,eax
c0003ef2:	31 d2                	xor    edx,edx
c0003ef4:	89 d8                	mov    eax,ebx
c0003ef6:	e8 72 f8 ff ff       	call   c000376d <dir_read>
c0003efb:	85 c0                	test   eax,eax
c0003efd:	0f 85 5e 01 00 00    	jne    c0004061 <dir_find+0x19f>
c0003f03:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f06:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f09:	e8 f3 da ff ff       	call   c0001a01 <ld_word>
c0003f0e:	66 39 f8             	cmp    ax,di
c0003f11:	75 df                	jne    c0003ef2 <dir_find+0x30>
c0003f13:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f16:	31 ed                	xor    ebp,ebp
c0003f18:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1c:	ba 40 00 00 00       	mov    edx,0x40
c0003f21:	89 e9                	mov    ecx,ebp
c0003f23:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f27:	0f 84 42 01 00 00    	je     c000406f <dir_find+0x1ad>
c0003f2d:	f6 c2 1f             	test   dl,0x1f
c0003f30:	75 03                	jne    c0003f35 <dir_find+0x73>
c0003f32:	83 c2 02             	add    edx,0x2
c0003f35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f39:	89 d0                	mov    eax,edx
c0003f3b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f3e:	e8 be da ff ff       	call   c0001a01 <ld_word>
c0003f43:	83 ec 0c             	sub    esp,0xc
c0003f46:	0f b7 c0             	movzx  eax,ax
c0003f49:	50                   	push   eax
c0003f4a:	e8 0e 44 00 00       	call   c000835d <ff_wtoupper>
c0003f4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f53:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f56:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5d:	e8 fb 43 00 00       	call   c000835d <ff_wtoupper>
c0003f62:	83 c4 10             	add    esp,0x10
c0003f65:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f69:	75 87                	jne    c0003ef2 <dir_find+0x30>
c0003f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f6f:	45                   	inc    ebp
c0003f70:	83 c2 02             	add    edx,0x2
c0003f73:	eb ac                	jmp    c0003f21 <dir_find+0x5f>
c0003f75:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f81:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f86:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f89:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8c:	89 f0                	mov    eax,esi
c0003f8e:	e8 4c e2 ff ff       	call   c00021df <move_window>
c0003f93:	85 c0                	test   eax,eax
c0003f95:	0f 85 c6 00 00 00    	jne    c0004061 <dir_find+0x19f>
c0003f9b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f9e:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa1:	84 c9                	test   cl,cl
c0003fa3:	0f 84 bd 00 00 00    	je     c0004066 <dir_find+0x1a4>
c0003fa9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fac:	88 d0                	mov    al,dl
c0003fae:	83 e0 3f             	and    eax,0x3f
c0003fb1:	80 f9 e5             	cmp    cl,0xe5
c0003fb4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb7:	0f 84 87 00 00 00    	je     c0004044 <dir_find+0x182>
c0003fbd:	80 e2 08             	and    dl,0x8
c0003fc0:	74 06                	je     c0003fc8 <dir_find+0x106>
c0003fc2:	3c 0f                	cmp    al,0xf
c0003fc4:	75 7e                	jne    c0004044 <dir_find+0x182>
c0003fc6:	eb 04                	jmp    c0003fcc <dir_find+0x10a>
c0003fc8:	3c 0f                	cmp    al,0xf
c0003fca:	75 4c                	jne    c0004018 <dir_find+0x156>
c0003fcc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd0:	75 7e                	jne    c0004050 <dir_find+0x18e>
c0003fd2:	f6 c1 40             	test   cl,0x40
c0003fd5:	74 12                	je     c0003fe9 <dir_find+0x127>
c0003fd7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fda:	83 e1 bf             	and    ecx,0xffffffbf
c0003fdd:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe7:	eb 06                	jmp    c0003fef <dir_find+0x12d>
c0003fe9:	89 f8                	mov    eax,edi
c0003feb:	38 c8                	cmp    al,cl
c0003fed:	75 5c                	jne    c000404b <dir_find+0x189>
c0003fef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff3:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ff8:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffb:	75 53                	jne    c0004050 <dir_find+0x18e>
c0003ffd:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004001:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004004:	89 ea                	mov    edx,ebp
c0004006:	e8 f4 fd ff ff       	call   c0003dff <cmp_lfn>
c000400b:	85 c0                	test   eax,eax
c000400d:	74 41                	je     c0004050 <dir_find+0x18e>
c000400f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004013:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004016:	eb 38                	jmp    c0004050 <dir_find+0x18e>
c0004018:	89 f8                	mov    eax,edi
c000401a:	84 c0                	test   al,al
c000401c:	75 0d                	jne    c000402b <dir_find+0x169>
c000401e:	89 e8                	mov    eax,ebp
c0004020:	e8 98 de ff ff       	call   c0001ebd <sum_sfn>
c0004025:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004029:	74 52                	je     c000407d <dir_find+0x1bb>
c000402b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000402f:	75 13                	jne    c0004044 <dir_find+0x182>
c0004031:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004034:	b9 0b 00 00 00       	mov    ecx,0xb
c0004039:	89 e8                	mov    eax,ebp
c000403b:	e8 60 da ff ff       	call   c0001aa0 <mem_cmp>
c0004040:	85 c0                	test   eax,eax
c0004042:	74 39                	je     c000407d <dir_find+0x1bb>
c0004044:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004050:	31 d2                	xor    edx,edx
c0004052:	89 d8                	mov    eax,ebx
c0004054:	e8 5c f4 ff ff       	call   c00034b5 <dir_next>
c0004059:	85 c0                	test   eax,eax
c000405b:	0f 84 25 ff ff ff    	je     c0003f86 <dir_find+0xc4>
c0004061:	89 04 24             	mov    DWORD PTR [esp],eax
c0004064:	eb 17                	jmp    c000407d <dir_find+0x1bb>
c0004066:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406d:	eb 0e                	jmp    c000407d <dir_find+0x1bb>
c000406f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004072:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004077:	0f 85 75 fe ff ff    	jne    c0003ef2 <dir_find+0x30>
c000407d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004080:	83 c4 1c             	add    esp,0x1c
c0004083:	5b                   	pop    ebx
c0004084:	5e                   	pop    esi
c0004085:	5f                   	pop    edi
c0004086:	5d                   	pop    ebp
c0004087:	c3                   	ret    

c0004088 <dir_register>:
c0004088:	55                   	push   ebp
c0004089:	57                   	push   edi
c000408a:	56                   	push   esi
c000408b:	be 06 00 00 00       	mov    esi,0x6
c0004090:	53                   	push   ebx
c0004091:	83 ec 6c             	sub    esp,0x6c
c0004094:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004098:	0f 85 62 02 00 00    	jne    c0004300 <dir_register+0x278>
c000409e:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a0:	31 ff                	xor    edi,edi
c00040a2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040aa:	74 03                	je     c00040af <dir_register+0x27>
c00040ac:	47                   	inc    edi
c00040ad:	eb f6                	jmp    c00040a5 <dir_register+0x1d>
c00040af:	89 c3                	mov    ebx,eax
c00040b1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b5:	0f 85 e1 00 00 00    	jne    c000419c <dir_register+0x114>
c00040bb:	83 c7 0e             	add    edi,0xe
c00040be:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c3:	89 f8                	mov    eax,edi
c00040c5:	31 d2                	xor    edx,edx
c00040c7:	f7 f1                	div    ecx
c00040c9:	8d 50 02             	lea    edx,[eax+0x2]
c00040cc:	89 c7                	mov    edi,eax
c00040ce:	89 d8                	mov    eax,ebx
c00040d0:	e8 12 f8 ff ff       	call   c00038e7 <dir_alloc>
c00040d5:	89 c6                	mov    esi,eax
c00040d7:	85 c0                	test   eax,eax
c00040d9:	0f 85 21 02 00 00    	jne    c0004300 <dir_register+0x278>
c00040df:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040e8:	c1 e7 05             	shl    edi,0x5
c00040eb:	29 f8                	sub    eax,edi
c00040ed:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f0:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f3:	a8 04                	test   al,0x4
c00040f5:	0f 84 91 00 00 00    	je     c000418c <dir_register+0x104>
c00040fb:	83 e0 fb             	and    eax,0xfffffffb
c00040fe:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004101:	89 d8                	mov    eax,ebx
c0004103:	e8 25 ec ff ff       	call   c0002d2d <fill_first_frag>
c0004108:	85 c0                	test   eax,eax
c000410a:	0f 85 ee 01 00 00    	jne    c00042fe <dir_register+0x276>
c0004110:	83 c9 ff             	or     ecx,0xffffffff
c0004113:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 db eb ff ff       	call   c0002cf8 <fill_last_frag>
c000411d:	85 c0                	test   eax,eax
c000411f:	0f 85 d9 01 00 00    	jne    c00042fe <dir_register+0x276>
c0004125:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004129:	74 61                	je     c000418c <dir_register+0x104>
c000412b:	89 da                	mov    edx,ebx
c000412d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004131:	e8 ea f5 ff ff       	call   c0003720 <load_obj_xdir>
c0004136:	85 c0                	test   eax,eax
c0004138:	0f 85 c0 01 00 00    	jne    c00042fe <dir_register+0x276>
c000413e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004142:	31 c9                	xor    ecx,ecx
c0004144:	c1 e2 09             	shl    edx,0x9
c0004147:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004150:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004153:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004156:	83 c0 38             	add    eax,0x38
c0004159:	e8 1c d9 ff ff       	call   c0001a7a <st_qword>
c000415e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004161:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004164:	83 c0 28             	add    eax,0x28
c0004167:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416a:	e8 0b d9 ff ff       	call   c0001a7a <st_qword>
c000416f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004172:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004175:	83 c8 01             	or     eax,0x1
c0004178:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417f:	e8 db f7 ff ff       	call   c000395f <store_xdir>
c0004184:	85 c0                	test   eax,eax
c0004186:	0f 85 72 01 00 00    	jne    c00042fe <dir_register+0x276>
c000418c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000418f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004192:	e8 c1 fb ff ff       	call   c0003d58 <create_xdir>
c0004197:	e9 64 01 00 00       	jmp    c0004300 <dir_register+0x278>
c000419c:	8d 40 3c             	lea    eax,[eax+0x3c]
c000419f:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041a8:	89 c2                	mov    edx,eax
c00041aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ae:	e8 cd d8 ff ff       	call   c0001a80 <mem_cpy>
c00041b3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041b8:	74 58                	je     c0004212 <dir_register+0x18a>
c00041ba:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041be:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c6:	83 ec 0c             	sub    esp,0xc
c00041c9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041d8:	e8 24 dc ff ff       	call   c0001e01 <gen_numname>
c00041dd:	89 d8                	mov    eax,ebx
c00041df:	e8 de fc ff ff       	call   c0003ec2 <dir_find>
c00041e4:	83 c4 10             	add    esp,0x10
c00041e7:	89 c6                	mov    esi,eax
c00041e9:	85 c0                	test   eax,eax
c00041eb:	75 15                	jne    c0004202 <dir_register+0x17a>
c00041ed:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f1:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f6:	75 ce                	jne    c00041c6 <dir_register+0x13e>
c00041f8:	be 07 00 00 00       	mov    esi,0x7
c00041fd:	e9 fe 00 00 00       	jmp    c0004300 <dir_register+0x278>
c0004202:	83 f8 04             	cmp    eax,0x4
c0004205:	0f 85 f5 00 00 00    	jne    c0004300 <dir_register+0x278>
c000420b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000420f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004212:	b9 01 00 00 00       	mov    ecx,0x1
c0004217:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421c:	74 0f                	je     c000422d <dir_register+0x1a5>
c000421e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004223:	8d 47 0c             	lea    eax,[edi+0xc]
c0004226:	31 d2                	xor    edx,edx
c0004228:	f7 f1                	div    ecx
c000422a:	8d 48 01             	lea    ecx,[eax+0x1]
c000422d:	89 ca                	mov    edx,ecx
c000422f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004233:	89 d8                	mov    eax,ebx
c0004235:	e8 ad f6 ff ff       	call   c00038e7 <dir_alloc>
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	0f 85 bc 00 00 00    	jne    c0004300 <dir_register+0x278>
c0004244:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004248:	49                   	dec    ecx
c0004249:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424d:	74 6a                	je     c00042b9 <dir_register+0x231>
c000424f:	89 c8                	mov    eax,ecx
c0004251:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004254:	c1 e0 05             	shl    eax,0x5
c0004257:	29 c2                	sub    edx,eax
c0004259:	89 d8                	mov    eax,ebx
c000425b:	e8 fd ec ff ff       	call   c0002f5d <dir_sdi>
c0004260:	89 c6                	mov    esi,eax
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 96 00 00 00    	jne    c0004300 <dir_register+0x278>
c000426a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000426e:	e8 4a dc ff ff       	call   c0001ebd <sum_sfn>
c0004273:	0f b6 f8             	movzx  edi,al
c0004276:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004279:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427c:	89 e8                	mov    eax,ebp
c000427e:	e8 5c df ff ff       	call   c00021df <move_window>
c0004283:	89 c6                	mov    esi,eax
c0004285:	85 c0                	test   eax,eax
c0004287:	75 77                	jne    c0004300 <dir_register+0x278>
c0004289:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000428e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004291:	83 ec 0c             	sub    esp,0xc
c0004294:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004297:	57                   	push   edi
c0004298:	e8 e0 da ff ff       	call   c0001d7d <put_lfn>
c000429d:	31 d2                	xor    edx,edx
c000429f:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a3:	89 d8                	mov    eax,ebx
c00042a5:	e8 0b f2 ff ff       	call   c00034b5 <dir_next>
c00042aa:	83 c4 10             	add    esp,0x10
c00042ad:	89 c6                	mov    esi,eax
c00042af:	85 c0                	test   eax,eax
c00042b1:	75 4d                	jne    c0004300 <dir_register+0x278>
c00042b3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b7:	75 bd                	jne    c0004276 <dir_register+0x1ee>
c00042b9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042bc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042bf:	89 e8                	mov    eax,ebp
c00042c1:	e8 19 df ff ff       	call   c00021df <move_window>
c00042c6:	89 c6                	mov    esi,eax
c00042c8:	85 c0                	test   eax,eax
c00042ca:	75 34                	jne    c0004300 <dir_register+0x278>
c00042cc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042cf:	b9 20 00 00 00       	mov    ecx,0x20
c00042d4:	31 d2                	xor    edx,edx
c00042d6:	e8 ba d7 ff ff       	call   c0001a95 <mem_set>
c00042db:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e7:	e8 94 d7 ff ff       	call   c0001a80 <mem_cpy>
c00042ec:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ef:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f2:	83 e0 18             	and    eax,0x18
c00042f5:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042f8:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fc:	eb 02                	jmp    c0004300 <dir_register+0x278>
c00042fe:	89 c6                	mov    esi,eax
c0004300:	83 c4 6c             	add    esp,0x6c
c0004303:	89 f0                	mov    eax,esi
c0004305:	5b                   	pop    ebx
c0004306:	5e                   	pop    esi
c0004307:	5f                   	pop    edi
c0004308:	5d                   	pop    ebp
c0004309:	c3                   	ret    

c000430a <sync_fs>:
c000430a:	56                   	push   esi
c000430b:	53                   	push   ebx
c000430c:	53                   	push   ebx
c000430d:	89 c3                	mov    ebx,eax
c000430f:	e8 37 de ff ff       	call   c000214b <sync_window>
c0004314:	85 c0                	test   eax,eax
c0004316:	0f 85 b1 00 00 00    	jne    c00043cd <sync_fs+0xc3>
c000431c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000431f:	0f 85 8e 00 00 00    	jne    c00043b3 <sync_fs+0xa9>
c0004325:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004329:	0f 85 84 00 00 00    	jne    c00043b3 <sync_fs+0xa9>
c000432f:	b9 00 02 00 00       	mov    ecx,0x200
c0004334:	8d 73 54             	lea    esi,[ebx+0x54]
c0004337:	31 d2                	xor    edx,edx
c0004339:	89 f0                	mov    eax,esi
c000433b:	e8 55 d7 ff ff       	call   c0001a95 <mem_set>
c0004340:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004346:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434b:	e8 23 d7 ff ff       	call   c0001a73 <st_word>
c0004350:	ba 52 52 61 41       	mov    edx,0x41615252
c0004355:	89 f0                	mov    eax,esi
c0004357:	e8 1b d7 ff ff       	call   c0001a77 <st_dword>
c000435c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004362:	ba 72 72 41 61       	mov    edx,0x61417272
c0004367:	e8 0b d7 ff ff       	call   c0001a77 <st_dword>
c000436c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000436f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004375:	e8 fd d6 ff ff       	call   c0001a77 <st_dword>
c000437a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004383:	e8 ef d6 ff ff       	call   c0001a77 <st_dword>
c0004388:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000438e:	83 c0 01             	add    eax,0x1
c0004391:	83 d2 00             	adc    edx,0x0
c0004394:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004397:	83 ec 0c             	sub    esp,0xc
c000439a:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439d:	6a 01                	push   0x1
c000439f:	52                   	push   edx
c00043a0:	50                   	push   eax
c00043a1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a5:	56                   	push   esi
c00043a6:	50                   	push   eax
c00043a7:	e8 20 d6 ff ff       	call   c00019cc <disk_write>
c00043ac:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b0:	83 c4 20             	add    esp,0x20
c00043b3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b7:	51                   	push   ecx
c00043b8:	6a 00                	push   0x0
c00043ba:	6a 00                	push   0x0
c00043bc:	50                   	push   eax
c00043bd:	e8 20 d6 ff ff       	call   c00019e2 <disk_ioctl>
c00043c2:	83 c4 10             	add    esp,0x10
c00043c5:	85 c0                	test   eax,eax
c00043c7:	0f 95 c0             	setne  al
c00043ca:	0f b6 c0             	movzx  eax,al
c00043cd:	5a                   	pop    edx
c00043ce:	5b                   	pop    ebx
c00043cf:	5e                   	pop    esi
c00043d0:	c3                   	ret    

c00043d1 <create_partition>:
c00043d1:	55                   	push   ebp
c00043d2:	0f b6 c0             	movzx  eax,al
c00043d5:	57                   	push   edi
c00043d6:	56                   	push   esi
c00043d7:	53                   	push   ebx
c00043d8:	83 ec 60             	sub    esp,0x60
c00043db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043df:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043eb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ef:	50                   	push   eax
c00043f0:	6a 01                	push   0x1
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	e8 e7 d5 ff ff       	call   c00019e2 <disk_ioctl>
c00043fb:	83 c4 10             	add    esp,0x10
c00043fe:	85 c0                	test   eax,eax
c0004400:	74 0a                	je     c000440c <create_partition+0x3b>
c0004402:	b8 01 00 00 00       	mov    eax,0x1
c0004407:	e9 67 05 00 00       	jmp    c0004973 <create_partition+0x5a2>
c000440c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004410:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004414:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004418:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004421:	0f 86 ed 03 00 00    	jbe    c0004814 <create_partition+0x443>
c0004427:	83 c0 df             	add    eax,0xffffffdf
c000442a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004432:	83 d2 ff             	adc    edx,0xffffffff
c0004435:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004439:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004445:	83 c0 bd             	add    eax,0xffffffbd
c0004448:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000444f:	83 d2 ff             	adc    edx,0xffffffff
c0004452:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004456:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004462:	be 22 00 00 00       	mov    esi,0x22
c0004467:	31 ff                	xor    edi,edi
c0004469:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004471:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004479:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004481:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004485:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448b:	75 0e                	jne    c000449b <create_partition+0xca>
c000448d:	b9 00 02 00 00       	mov    ecx,0x200
c0004492:	31 d2                	xor    edx,edx
c0004494:	89 d8                	mov    eax,ebx
c0004496:	e8 fa d5 ff ff       	call   c0001a95 <mem_set>
c000449b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000449f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044aa:	0f 84 23 01 00 00    	je     c00045d3 <create_partition+0x202>
c00044b0:	89 f0                	mov    eax,esi
c00044b2:	89 fa                	mov    edx,edi
c00044b4:	05 ff 07 00 00       	add    eax,0x7ff
c00044b9:	83 d2 00             	adc    edx,0x0
c00044bc:	89 c1                	mov    ecx,eax
c00044be:	89 d7                	mov    edi,edx
c00044c0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044ca:	89 ce                	mov    esi,ecx
c00044cc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044d8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044df:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e2:	b8 64 00 00 00       	mov    eax,0x64
c00044e7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044ea:	b8 00 00 00 00       	mov    eax,0x0
c00044ef:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f3:	72 41                	jb     c0004536 <create_partition+0x165>
c00044f5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fd:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004501:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004506:	01 c1                	add    ecx,eax
c0004508:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450c:	f7 24 24             	mul    DWORD PTR [esp]
c000450f:	6a 00                	push   0x0
c0004511:	01 ca                	add    edx,ecx
c0004513:	6a 64                	push   0x64
c0004515:	52                   	push   edx
c0004516:	50                   	push   eax
c0004517:	e8 10 fa 01 00       	call   c0023f2c <__udivdi3>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	05 ff 07 00 00       	add    eax,0x7ff
c0004524:	83 d2 00             	adc    edx,0x0
c0004527:	89 c1                	mov    ecx,eax
c0004529:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004533:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004536:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004539:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453d:	01 f0                	add    eax,esi
c000453f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004543:	11 fa                	adc    edx,edi
c0004545:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004549:	19 d1                	sbb    ecx,edx
c000454b:	73 2e                	jae    c000457b <create_partition+0x1aa>
c000454d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004551:	89 f8                	mov    eax,edi
c0004553:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000455e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004566:	73 6b                	jae    c00045d3 <create_partition+0x202>
c0004568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004570:	29 f0                	sub    eax,esi
c0004572:	19 fa                	sbb    edx,edi
c0004574:	89 04 24             	mov    DWORD PTR [esp],eax
c0004577:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000457f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004582:	74 4f                	je     c00045d3 <create_partition+0x202>
c0004584:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004587:	b9 10 00 00 00       	mov    ecx,0x10
c000458c:	ba 30 69 02 c0       	mov    edx,0xc0026930
c0004591:	e8 ea d4 ff ff       	call   c0001a80 <mem_cpy>
c0004596:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459a:	b9 10 00 00 00       	mov    ecx,0x10
c000459f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a3:	e8 2c db ff ff       	call   c00020d4 <make_rand>
c00045a8:	89 f2                	mov    edx,esi
c00045aa:	89 f9                	mov    ecx,edi
c00045ac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b4:	e8 c1 d4 ff ff       	call   c0001a7a <st_qword>
c00045b9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045bc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c4:	89 f2                	mov    edx,esi
c00045c6:	89 f9                	mov    ecx,edi
c00045c8:	83 c2 ff             	add    edx,0xffffffff
c00045cb:	83 d1 ff             	adc    ecx,0xffffffff
c00045ce:	e8 a7 d4 ff ff       	call   c0001a7a <st_qword>
c00045d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d7:	83 e8 80             	sub    eax,0xffffff80
c00045da:	89 c5                	mov    ebp,eax
c00045dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e6:	75 6b                	jne    c0004653 <create_partition+0x282>
c00045e8:	45                   	inc    ebp
c00045e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ed:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f2:	e8 39 da ff ff       	call   c0002030 <crc32>
c00045f7:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004601:	75 e5                	jne    c00045e8 <create_partition+0x217>
c0004603:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004607:	31 d2                	xor    edx,edx
c0004609:	83 ec 0c             	sub    esp,0xc
c000460c:	c1 ed 09             	shr    ebp,0x9
c000460f:	6a 01                	push   0x1
c0004611:	8d 45 02             	lea    eax,[ebp+0x2]
c0004614:	52                   	push   edx
c0004615:	50                   	push   eax
c0004616:	53                   	push   ebx
c0004617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461b:	e8 ac d3 ff ff       	call   c00019cc <disk_write>
c0004620:	83 c4 20             	add    esp,0x20
c0004623:	85 c0                	test   eax,eax
c0004625:	0f 85 d7 fd ff ff    	jne    c0004402 <create_partition+0x31>
c000462b:	83 ec 0c             	sub    esp,0xc
c000462e:	31 d2                	xor    edx,edx
c0004630:	6a 01                	push   0x1
c0004632:	89 e8                	mov    eax,ebp
c0004634:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004638:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463c:	52                   	push   edx
c000463d:	50                   	push   eax
c000463e:	53                   	push   ebx
c000463f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004643:	e8 84 d3 ff ff       	call   c00019cc <disk_write>
c0004648:	83 c4 20             	add    esp,0x20
c000464b:	85 c0                	test   eax,eax
c000464d:	0f 85 af fd ff ff    	jne    c0004402 <create_partition+0x31>
c0004653:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004657:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004660:	74 0d                	je     c000466f <create_partition+0x29e>
c0004662:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004666:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466a:	e9 12 fe ff ff       	jmp    c0004481 <create_partition+0xb0>
c000466f:	31 d2                	xor    edx,edx
c0004671:	b9 00 02 00 00       	mov    ecx,0x200
c0004676:	89 d8                	mov    eax,ebx
c0004678:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467b:	e8 15 d4 ff ff       	call   c0001a95 <mem_set>
c0004680:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004683:	b9 10 00 00 00       	mov    ecx,0x10
c0004688:	ba 20 68 02 c0       	mov    edx,0xc0026820
c000468d:	89 d8                	mov    eax,ebx
c000468f:	e8 ec d3 ff ff       	call   c0001a80 <mem_cpy>
c0004694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004698:	8d 43 58             	lea    eax,[ebx+0x58]
c000469b:	f7 d2                	not    edx
c000469d:	e8 d5 d3 ff ff       	call   c0001a77 <st_dword>
c00046a2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046aa:	ba 01 00 00 00       	mov    edx,0x1
c00046af:	e8 c6 d3 ff ff       	call   c0001a7a <st_qword>
c00046b4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046b8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046bc:	83 c2 ff             	add    edx,0xffffffff
c00046bf:	89 e8                	mov    eax,ebp
c00046c1:	83 d1 ff             	adc    ecx,0xffffffff
c00046c4:	e8 b1 d3 ff ff       	call   c0001a7a <st_qword>
c00046c9:	31 c9                	xor    ecx,ecx
c00046cb:	8d 43 28             	lea    eax,[ebx+0x28]
c00046ce:	ba 22 00 00 00       	mov    edx,0x22
c00046d3:	e8 a2 d3 ff ff       	call   c0001a7a <st_qword>
c00046d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e0:	83 c2 de             	add    edx,0xffffffde
c00046e3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e6:	83 d1 ff             	adc    ecx,0xffffffff
c00046e9:	31 f6                	xor    esi,esi
c00046eb:	e8 8a d3 ff ff       	call   c0001a7a <st_qword>
c00046f0:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f3:	ba 80 00 00 00       	mov    edx,0x80
c00046f8:	e8 7a d3 ff ff       	call   c0001a77 <st_dword>
c00046fd:	8d 43 50             	lea    eax,[ebx+0x50]
c0004700:	ba 80 00 00 00       	mov    edx,0x80
c0004705:	e8 6d d3 ff ff       	call   c0001a77 <st_dword>
c000470a:	ba 02 00 00 00       	mov    edx,0x2
c000470f:	89 f8                	mov    eax,edi
c0004711:	e8 61 d3 ff ff       	call   c0001a77 <st_dword>
c0004716:	8d 53 38             	lea    edx,[ebx+0x38]
c0004719:	b9 10 00 00 00       	mov    ecx,0x10
c000471e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004722:	e8 ad d9 ff ff       	call   c00020d4 <make_rand>
c0004727:	83 c8 ff             	or     eax,0xffffffff
c000472a:	46                   	inc    esi
c000472b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004730:	e8 fb d8 ff ff       	call   c0002030 <crc32>
c0004735:	83 fe 5c             	cmp    esi,0x5c
c0004738:	75 f0                	jne    c000472a <create_partition+0x359>
c000473a:	f7 d0                	not    eax
c000473c:	8d 73 10             	lea    esi,[ebx+0x10]
c000473f:	89 c2                	mov    edx,eax
c0004741:	89 f0                	mov    eax,esi
c0004743:	e8 2f d3 ff ff       	call   c0001a77 <st_dword>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	6a 01                	push   0x1
c000474d:	6a 00                	push   0x0
c000474f:	6a 01                	push   0x1
c0004751:	53                   	push   ebx
c0004752:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004756:	e8 71 d2 ff ff       	call   c00019cc <disk_write>
c000475b:	83 c4 20             	add    esp,0x20
c000475e:	85 c0                	test   eax,eax
c0004760:	0f 85 9c fc ff ff    	jne    c0004402 <create_partition+0x31>
c0004766:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000476e:	83 c2 ff             	add    edx,0xffffffff
c0004771:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004774:	83 d1 ff             	adc    ecx,0xffffffff
c0004777:	e8 fe d2 ff ff       	call   c0001a7a <st_qword>
c000477c:	ba 01 00 00 00       	mov    edx,0x1
c0004781:	31 c9                	xor    ecx,ecx
c0004783:	89 e8                	mov    eax,ebp
c0004785:	e8 f0 d2 ff ff       	call   c0001a7a <st_qword>
c000478a:	89 f8                	mov    eax,edi
c000478c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004790:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004794:	31 ff                	xor    edi,edi
c0004796:	e8 df d2 ff ff       	call   c0001a7a <st_qword>
c000479b:	89 f0                	mov    eax,esi
c000479d:	31 d2                	xor    edx,edx
c000479f:	e8 d3 d2 ff ff       	call   c0001a77 <st_dword>
c00047a4:	83 c8 ff             	or     eax,0xffffffff
c00047a7:	47                   	inc    edi
c00047a8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047ad:	e8 7e d8 ff ff       	call   c0002030 <crc32>
c00047b2:	83 ff 5c             	cmp    edi,0x5c
c00047b5:	75 f0                	jne    c00047a7 <create_partition+0x3d6>
c00047b7:	f7 d0                	not    eax
c00047b9:	89 c2                	mov    edx,eax
c00047bb:	89 f0                	mov    eax,esi
c00047bd:	e8 b5 d2 ff ff       	call   c0001a77 <st_dword>
c00047c2:	83 ec 0c             	sub    esp,0xc
c00047c5:	6a 01                	push   0x1
c00047c7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047cf:	83 c0 ff             	add    eax,0xffffffff
c00047d2:	83 d2 ff             	adc    edx,0xffffffff
c00047d5:	52                   	push   edx
c00047d6:	50                   	push   eax
c00047d7:	53                   	push   ebx
c00047d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047dc:	e8 eb d1 ff ff       	call   c00019cc <disk_write>
c00047e1:	83 c4 20             	add    esp,0x20
c00047e4:	85 c0                	test   eax,eax
c00047e6:	0f 85 16 fc ff ff    	jne    c0004402 <create_partition+0x31>
c00047ec:	31 d2                	xor    edx,edx
c00047ee:	89 d8                	mov    eax,ebx
c00047f0:	b9 00 02 00 00       	mov    ecx,0x200
c00047f5:	e8 9b d2 ff ff       	call   c0001a95 <mem_set>
c00047fa:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004800:	b9 10 00 00 00       	mov    ecx,0x10
c0004805:	ba 30 68 02 c0       	mov    edx,0xc0026830
c000480a:	e8 71 d2 ff ff       	call   c0001a80 <mem_cpy>
c000480f:	e9 21 01 00 00       	jmp    c0004935 <create_partition+0x564>
c0004814:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004818:	b9 05 00 00 00       	mov    ecx,0x5
c000481d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004820:	bf 08 00 00 00       	mov    edi,0x8
c0004825:	89 f8                	mov    eax,edi
c0004827:	31 d2                	xor    edx,edx
c0004829:	0f b6 f0             	movzx  esi,al
c000482c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000482f:	f7 f6                	div    esi
c0004831:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004836:	76 0a                	jbe    c0004842 <create_partition+0x471>
c0004838:	d1 e7                	shl    edi,1
c000483a:	49                   	dec    ecx
c000483b:	75 e8                	jne    c0004825 <create_partition+0x454>
c000483d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004842:	b9 00 02 00 00       	mov    ecx,0x200
c0004847:	31 d2                	xor    edx,edx
c0004849:	89 d8                	mov    eax,ebx
c000484b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004851:	e8 3f d2 ff ff       	call   c0001a95 <mem_set>
c0004856:	b9 64 00 00 00       	mov    ecx,0x64
c000485b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000485e:	31 d2                	xor    edx,edx
c0004860:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004868:	f7 f1                	div    ecx
c000486a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000486f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004873:	89 f8                	mov    eax,edi
c0004875:	0f b6 c0             	movzx  eax,al
c0004878:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487c:	e9 80 00 00 00       	jmp    c0004901 <create_partition+0x530>
c0004881:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004884:	29 cf                	sub    edi,ecx
c0004886:	89 ca                	mov    edx,ecx
c0004888:	89 f0                	mov    eax,esi
c000488a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000488f:	e8 e3 d1 ff ff       	call   c0001a77 <st_dword>
c0004894:	8d 46 04             	lea    eax,[esi+0x4]
c0004897:	89 fa                	mov    edx,edi
c0004899:	83 c6 10             	add    esi,0x10
c000489c:	e8 d6 d1 ff ff       	call   c0001a77 <st_dword>
c00048a1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a5:	31 d2                	xor    edx,edx
c00048a7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048aa:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048ae:	89 c8                	mov    eax,ecx
c00048b0:	01 f9                	add    ecx,edi
c00048b2:	f7 f5                	div    ebp
c00048b4:	89 d5                	mov    ebp,edx
c00048b6:	31 d2                	xor    edx,edx
c00048b8:	45                   	inc    ebp
c00048b9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048bd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c3:	89 c2                	mov    edx,eax
c00048c5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048c8:	c1 ea 02             	shr    edx,0x2
c00048cb:	83 e2 c0             	and    edx,0xffffffc0
c00048ce:	09 ea                	or     edx,ebp
c00048d0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048d8:	31 d2                	xor    edx,edx
c00048da:	f7 f5                	div    ebp
c00048dc:	89 d7                	mov    edi,edx
c00048de:	31 d2                	xor    edx,edx
c00048e0:	47                   	inc    edi
c00048e1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048e8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048eb:	89 c5                	mov    ebp,eax
c00048ed:	c1 ed 02             	shr    ebp,0x2
c00048f0:	83 e5 c0             	and    ebp,0xffffffc0
c00048f3:	09 ef                	or     edi,ebp
c00048f5:	89 fa                	mov    edx,edi
c00048f7:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fa:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c00048ff:	74 34                	je     c0004935 <create_partition+0x564>
c0004901:	85 c9                	test   ecx,ecx
c0004903:	74 30                	je     c0004935 <create_partition+0x564>
c0004905:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004908:	76 2b                	jbe    c0004935 <create_partition+0x564>
c000490a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000490e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004912:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004915:	83 ff 64             	cmp    edi,0x64
c0004918:	76 4b                	jbe    c0004965 <create_partition+0x594>
c000491a:	89 f8                	mov    eax,edi
c000491c:	01 c8                	add    eax,ecx
c000491e:	0f 82 5d ff ff ff    	jb     c0004881 <create_partition+0x4b0>
c0004924:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004927:	0f 87 54 ff ff ff    	ja     c0004881 <create_partition+0x4b0>
c000492d:	85 ff                	test   edi,edi
c000492f:	0f 85 51 ff ff ff    	jne    c0004886 <create_partition+0x4b5>
c0004935:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004940:	e8 2e d1 ff ff       	call   c0001a73 <st_word>
c0004945:	83 ec 0c             	sub    esp,0xc
c0004948:	6a 01                	push   0x1
c000494a:	6a 00                	push   0x0
c000494c:	6a 00                	push   0x0
c000494e:	53                   	push   ebx
c000494f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004953:	e8 74 d0 ff ff       	call   c00019cc <disk_write>
c0004958:	83 c4 20             	add    esp,0x20
c000495b:	85 c0                	test   eax,eax
c000495d:	0f 95 c0             	setne  al
c0004960:	0f b6 c0             	movzx  eax,al
c0004963:	eb 0e                	jmp    c0004973 <create_partition+0x5a2>
c0004965:	74 07                	je     c000496e <create_partition+0x59d>
c0004967:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496c:	eb ac                	jmp    c000491a <create_partition+0x549>
c000496e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004971:	eb a7                	jmp    c000491a <create_partition+0x549>
c0004973:	83 c4 5c             	add    esp,0x5c
c0004976:	5b                   	pop    ebx
c0004977:	5e                   	pop    esi
c0004978:	5f                   	pop    edi
c0004979:	5d                   	pop    ebp
c000497a:	c3                   	ret    

c000497b <get_fileinfo>:
c000497b:	55                   	push   ebp
c000497c:	57                   	push   edi
c000497d:	56                   	push   esi
c000497e:	53                   	push   ebx
c000497f:	83 ec 1c             	sub    esp,0x1c
c0004982:	8b 30                	mov    esi,DWORD PTR [eax]
c0004984:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004988:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000498f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004992:	0f 84 dc 01 00 00    	je     c0004b74 <get_fileinfo+0x1f9>
c0004998:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499b:	75 0f                	jne    c00049ac <get_fileinfo+0x31>
c000499d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a0:	83 c4 1c             	add    esp,0x1c
c00049a3:	5b                   	pop    ebx
c00049a4:	5e                   	pop    esi
c00049a5:	5f                   	pop    edi
c00049a6:	5d                   	pop    ebp
c00049a7:	e9 58 d5 ff ff       	jmp    c0001f04 <get_xfileinfo>
c00049ac:	89 d3                	mov    ebx,edx
c00049ae:	89 c6                	mov    esi,eax
c00049b0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b4:	74 6a                	je     c0004a20 <get_fileinfo+0xa5>
c00049b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049be:	31 ed                	xor    ebp,ebp
c00049c0:	31 ff                	xor    edi,edi
c00049c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049cd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d1:	66 85 d2             	test   dx,dx
c00049d4:	74 3e                	je     c0004a14 <get_fileinfo+0x99>
c00049d6:	66 85 ed             	test   bp,bp
c00049d9:	75 0c                	jne    c00049e7 <get_fileinfo+0x6c>
c00049db:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e1:	66 3d ff 07          	cmp    ax,0x7ff
c00049e5:	76 22                	jbe    c0004a09 <get_fileinfo+0x8e>
c00049e7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ec:	89 e8                	mov    eax,ebp
c00049ee:	29 f9                	sub    ecx,edi
c00049f0:	c1 e0 10             	shl    eax,0x10
c00049f3:	09 d0                	or     eax,edx
c00049f5:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049f9:	e8 a3 d1 ff ff       	call   c0001ba1 <put_utf>
c00049fe:	84 c0                	test   al,al
c0004a00:	74 10                	je     c0004a12 <get_fileinfo+0x97>
c0004a02:	0f b6 c0             	movzx  eax,al
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	01 c7                	add    edi,eax
c0004a09:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	eb b0                	jmp    c00049c2 <get_fileinfo+0x47>
c0004a12:	31 ff                	xor    edi,edi
c0004a14:	66 85 ed             	test   bp,bp
c0004a17:	74 02                	je     c0004a1b <get_fileinfo+0xa0>
c0004a19:	31 ff                	xor    edi,edi
c0004a1b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a20:	31 ff                	xor    edi,edi
c0004a22:	31 c9                	xor    ecx,ecx
c0004a24:	83 f9 0a             	cmp    ecx,0xa
c0004a27:	0f 87 ad 00 00 00    	ja     c0004ada <get_fileinfo+0x15f>
c0004a2d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a30:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a33:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a37:	66 83 fa 20          	cmp    dx,0x20
c0004a3b:	0f 84 92 00 00 00    	je     c0004ad3 <get_fileinfo+0x158>
c0004a41:	66 83 fa 05          	cmp    dx,0x5
c0004a45:	75 05                	jne    c0004a4c <get_fileinfo+0xd1>
c0004a47:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4c:	83 ff 0b             	cmp    edi,0xb
c0004a4f:	77 0b                	ja     c0004a5c <get_fileinfo+0xe1>
c0004a51:	83 fd 09             	cmp    ebp,0x9
c0004a54:	75 06                	jne    c0004a5c <get_fileinfo+0xe1>
c0004a56:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5b:	47                   	inc    edi
c0004a5c:	0f b7 c2             	movzx  eax,dx
c0004a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a63:	e8 6d d0 ff ff       	call   c0001ad5 <dbc_1st>
c0004a68:	85 c0                	test   eax,eax
c0004a6a:	74 2f                	je     c0004a9b <get_fileinfo+0x120>
c0004a6c:	83 fd 08             	cmp    ebp,0x8
c0004a6f:	74 2a                	je     c0004a9b <get_fileinfo+0x120>
c0004a71:	83 fd 0b             	cmp    ebp,0xb
c0004a74:	74 25                	je     c0004a9b <get_fileinfo+0x120>
c0004a76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a79:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a81:	e8 52 d0 ff ff       	call   c0001ad8 <dbc_2nd>
c0004a86:	85 c0                	test   eax,eax
c0004a88:	74 11                	je     c0004a9b <get_fileinfo+0x120>
c0004a8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a93:	c1 e2 08             	shl    edx,0x8
c0004a96:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a99:	09 c2                	or     edx,eax
c0004a9b:	0f b7 d2             	movzx  edx,dx
c0004a9e:	50                   	push   eax
c0004a9f:	50                   	push   eax
c0004aa0:	68 b5 01 00 00       	push   0x1b5
c0004aa5:	52                   	push   edx
c0004aa6:	e8 46 38 00 00       	call   c00082f1 <ff_oem2uni>
c0004aab:	83 c4 10             	add    esp,0x10
c0004aae:	66 85 c0             	test   ax,ax
c0004ab1:	75 04                	jne    c0004ab7 <get_fileinfo+0x13c>
c0004ab3:	31 ff                	xor    edi,edi
c0004ab5:	eb 23                	jmp    c0004ada <get_fileinfo+0x15f>
c0004ab7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac0:	29 f9                	sub    ecx,edi
c0004ac2:	0f b7 c0             	movzx  eax,ax
c0004ac5:	e8 d7 d0 ff ff       	call   c0001ba1 <put_utf>
c0004aca:	84 c0                	test   al,al
c0004acc:	74 e5                	je     c0004ab3 <get_fileinfo+0x138>
c0004ace:	0f b6 c0             	movzx  eax,al
c0004ad1:	01 c7                	add    edi,eax
c0004ad3:	89 e9                	mov    ecx,ebp
c0004ad5:	e9 4a ff ff ff       	jmp    c0004a24 <get_fileinfo+0xa9>
c0004ada:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004adf:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae3:	75 54                	jne    c0004b39 <get_fileinfo+0x1be>
c0004ae5:	85 ff                	test   edi,edi
c0004ae7:	75 0b                	jne    c0004af4 <get_fileinfo+0x179>
c0004ae9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aed:	ba 01 00 00 00       	mov    edx,0x1
c0004af2:	eb 33                	jmp    c0004b27 <get_fileinfo+0x1ac>
c0004af4:	b1 08                	mov    cl,0x8
c0004af6:	31 d2                	xor    edx,edx
c0004af8:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004afe:	84 c0                	test   al,al
c0004b00:	74 25                	je     c0004b27 <get_fileinfo+0x1ac>
c0004b02:	66 83 f8 2e          	cmp    ax,0x2e
c0004b06:	74 16                	je     c0004b1e <get_fileinfo+0x1a3>
c0004b08:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0b:	66 83 ff 19          	cmp    di,0x19
c0004b0f:	77 0f                	ja     c0004b20 <get_fileinfo+0x1a5>
c0004b11:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b14:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b17:	74 07                	je     c0004b20 <get_fileinfo+0x1a5>
c0004b19:	83 c0 20             	add    eax,0x20
c0004b1c:	eb 02                	jmp    c0004b20 <get_fileinfo+0x1a5>
c0004b1e:	b1 10                	mov    cl,0x10
c0004b20:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b24:	42                   	inc    edx
c0004b25:	eb d1                	jmp    c0004af8 <get_fileinfo+0x17d>
c0004b27:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b2f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b33:	75 04                	jne    c0004b39 <get_fileinfo+0x1be>
c0004b35:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b39:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b3f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b42:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b45:	83 c0 1c             	add    eax,0x1c
c0004b48:	e8 c1 ce ff ff       	call   c0001a0e <ld_dword>
c0004b4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b54:	89 03                	mov    DWORD PTR [ebx],eax
c0004b56:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b59:	83 c0 16             	add    eax,0x16
c0004b5c:	e8 a0 ce ff ff       	call   c0001a01 <ld_word>
c0004b61:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b65:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b68:	83 c0 18             	add    eax,0x18
c0004b6b:	e8 91 ce ff ff       	call   c0001a01 <ld_word>
c0004b70:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b74:	83 c4 1c             	add    esp,0x1c
c0004b77:	5b                   	pop    ebx
c0004b78:	5e                   	pop    esi
c0004b79:	5f                   	pop    edi
c0004b7a:	5d                   	pop    ebp
c0004b7b:	c3                   	ret    

c0004b7c <ld_clust.isra.0>:
c0004b7c:	56                   	push   esi
c0004b7d:	89 c6                	mov    esi,eax
c0004b7f:	53                   	push   ebx
c0004b80:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b83:	89 d3                	mov    ebx,edx
c0004b85:	e8 77 ce ff ff       	call   c0001a01 <ld_word>
c0004b8a:	0f b7 c8             	movzx  ecx,ax
c0004b8d:	89 f0                	mov    eax,esi
c0004b8f:	3c 03                	cmp    al,0x3
c0004b91:	75 0d                	jne    c0004ba0 <ld_clust.isra.0+0x24>
c0004b93:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b96:	e8 66 ce ff ff       	call   c0001a01 <ld_word>
c0004b9b:	c1 e0 10             	shl    eax,0x10
c0004b9e:	09 c1                	or     ecx,eax
c0004ba0:	89 c8                	mov    eax,ecx
c0004ba2:	5b                   	pop    ebx
c0004ba3:	5e                   	pop    esi
c0004ba4:	c3                   	ret    

c0004ba5 <st_clust.isra.1>:
c0004ba5:	56                   	push   esi
c0004ba6:	89 c6                	mov    esi,eax
c0004ba8:	53                   	push   ebx
c0004ba9:	89 d3                	mov    ebx,edx
c0004bab:	0f b7 d1             	movzx  edx,cx
c0004bae:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb1:	e8 bd ce ff ff       	call   c0001a73 <st_word>
c0004bb6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bb9:	75 0f                	jne    c0004bca <st_clust.isra.1+0x25>
c0004bbb:	c1 e9 10             	shr    ecx,0x10
c0004bbe:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc1:	89 ca                	mov    edx,ecx
c0004bc3:	5b                   	pop    ebx
c0004bc4:	5e                   	pop    esi
c0004bc5:	e9 a9 ce ff ff       	jmp    c0001a73 <st_word>
c0004bca:	5b                   	pop    ebx
c0004bcb:	5e                   	pop    esi
c0004bcc:	c3                   	ret    

c0004bcd <init_alloc_info.isra.2>:
c0004bcd:	56                   	push   esi
c0004bce:	53                   	push   ebx
c0004bcf:	89 c6                	mov    esi,eax
c0004bd1:	89 d3                	mov    ebx,edx
c0004bd3:	51                   	push   ecx
c0004bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd6:	83 c0 34             	add    eax,0x34
c0004bd9:	e8 30 ce ff ff       	call   c0001a0e <ld_dword>
c0004bde:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be3:	83 c0 38             	add    eax,0x38
c0004be6:	e8 3b ce ff ff       	call   c0001a26 <ld_qword>
c0004beb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bee:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf6:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bfd:	83 e0 02             	and    eax,0x2
c0004c00:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c03:	5b                   	pop    ebx
c0004c04:	5b                   	pop    ebx
c0004c05:	5e                   	pop    esi
c0004c06:	c3                   	ret    

c0004c07 <follow_path>:
c0004c07:	56                   	push   esi
c0004c08:	53                   	push   ebx
c0004c09:	89 c3                	mov    ebx,eax
c0004c0b:	83 ec 14             	sub    esp,0x14
c0004c0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c18:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1a:	80 fa 5c             	cmp    dl,0x5c
c0004c1d:	75 07                	jne    c0004c26 <follow_path+0x1f>
c0004c1f:	40                   	inc    eax
c0004c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c24:	eb ee                	jmp    c0004c14 <follow_path+0xd>
c0004c26:	80 fa 2f             	cmp    dl,0x2f
c0004c29:	74 f4                	je     c0004c1f <follow_path+0x18>
c0004c2b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c32:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c39:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3c:	77 52                	ja     c0004c90 <follow_path+0x89>
c0004c3e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c42:	31 d2                	xor    edx,edx
c0004c44:	89 d8                	mov    eax,ebx
c0004c46:	e8 12 e3 ff ff       	call   c0002f5d <dir_sdi>
c0004c4b:	eb 7c                	jmp    c0004cc9 <follow_path+0xc2>
c0004c4d:	89 d8                	mov    eax,ebx
c0004c4f:	e8 6e f2 ff ff       	call   c0003ec2 <dir_find>
c0004c54:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c57:	85 c0                	test   eax,eax
c0004c59:	75 46                	jne    c0004ca1 <follow_path+0x9a>
c0004c5b:	80 e2 04             	and    dl,0x4
c0004c5e:	75 69                	jne    c0004cc9 <follow_path+0xc2>
c0004c60:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c64:	74 5e                	je     c0004cc4 <follow_path+0xbd>
c0004c66:	8a 06                	mov    al,BYTE PTR [esi]
c0004c68:	3c 04                	cmp    al,0x4
c0004c6a:	75 41                	jne    c0004cad <follow_path+0xa6>
c0004c6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c6f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c73:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c76:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c79:	30 c0                	xor    al,al
c0004c7b:	09 d0                	or     eax,edx
c0004c7d:	89 da                	mov    edx,ebx
c0004c7f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c82:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c85:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c88:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8b:	e8 3d ff ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c0004c90:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c94:	89 d8                	mov    eax,ebx
c0004c96:	e8 a9 ed ff ff       	call   c0003a44 <create_name>
c0004c9b:	85 c0                	test   eax,eax
c0004c9d:	74 ae                	je     c0004c4d <follow_path+0x46>
c0004c9f:	eb 28                	jmp    c0004cc9 <follow_path+0xc2>
c0004ca1:	83 f8 04             	cmp    eax,0x4
c0004ca4:	75 23                	jne    c0004cc9 <follow_path+0xc2>
c0004ca6:	80 e2 04             	and    dl,0x4
c0004ca9:	74 19                	je     c0004cc4 <follow_path+0xbd>
c0004cab:	eb 1c                	jmp    c0004cc9 <follow_path+0xc2>
c0004cad:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cba:	e8 bd fe ff ff       	call   c0004b7c <ld_clust.isra.0>
c0004cbf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc2:	eb cc                	jmp    c0004c90 <follow_path+0x89>
c0004cc4:	b8 05 00 00 00       	mov    eax,0x5
c0004cc9:	83 c4 14             	add    esp,0x14
c0004ccc:	5b                   	pop    ebx
c0004ccd:	5e                   	pop    esi
c0004cce:	c3                   	ret    

c0004ccf <f_mount>:
c0004ccf:	53                   	push   ebx
c0004cd0:	83 ec 18             	sub    esp,0x18
c0004cd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce3:	e8 fb d2 ff ff       	call   c0001fe3 <get_ldnumber>
c0004ce8:	89 c2                	mov    edx,eax
c0004cea:	b8 0b 00 00 00       	mov    eax,0xb
c0004cef:	85 d2                	test   edx,edx
c0004cf1:	78 39                	js     c0004d2c <f_mount+0x5d>
c0004cf3:	8b 04 95 60 b0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4fa0]
c0004cfa:	85 c0                	test   eax,eax
c0004cfc:	74 03                	je     c0004d01 <f_mount+0x32>
c0004cfe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d05:	85 c0                	test   eax,eax
c0004d07:	74 03                	je     c0004d0c <f_mount+0x3d>
c0004d09:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d10:	89 04 95 60 b0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4fa0],eax
c0004d17:	31 c0                	xor    eax,eax
c0004d19:	84 db                	test   bl,bl
c0004d1b:	74 0f                	je     c0004d2c <f_mount+0x5d>
c0004d1d:	31 c9                	xor    ecx,ecx
c0004d1f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d27:	e8 65 d7 ff ff       	call   c0002491 <mount_volume>
c0004d2c:	83 c4 18             	add    esp,0x18
c0004d2f:	5b                   	pop    ebx
c0004d30:	c3                   	ret    

c0004d31 <f_open>:
c0004d31:	55                   	push   ebp
c0004d32:	bd 09 00 00 00       	mov    ebp,0x9
c0004d37:	57                   	push   edi
c0004d38:	56                   	push   esi
c0004d39:	53                   	push   ebx
c0004d3a:	83 ec 7c             	sub    esp,0x7c
c0004d3d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d44:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4b:	85 db                	test   ebx,ebx
c0004d4d:	0f 84 10 04 00 00    	je     c0005163 <f_open+0x432>
c0004d53:	89 fe                	mov    esi,edi
c0004d55:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d59:	83 e6 3f             	and    esi,0x3f
c0004d5c:	89 f0                	mov    eax,esi
c0004d5e:	0f b6 c8             	movzx  ecx,al
c0004d61:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d68:	e8 24 d7 ff ff       	call   c0002491 <mount_volume>
c0004d6d:	89 c5                	mov    ebp,eax
c0004d6f:	85 c0                	test   eax,eax
c0004d71:	0f 85 e6 03 00 00    	jne    c000515d <f_open+0x42c>
c0004d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d80:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d84:	83 ec 0c             	sub    esp,0xc
c0004d87:	68 60 04 00 00       	push   0x460
c0004d8c:	e8 a3 34 00 00       	call   c0008234 <ff_memalloc>
c0004d91:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d95:	83 c4 10             	add    esp,0x10
c0004d98:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9d:	0f 84 c0 03 00 00    	je     c0005163 <f_open+0x432>
c0004da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dab:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dbe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc2:	e8 40 fe ff ff       	call   c0004c07 <follow_path>
c0004dc7:	89 c5                	mov    ebp,eax
c0004dc9:	85 c0                	test   eax,eax
c0004dcb:	75 0c                	jne    c0004dd9 <f_open+0xa8>
c0004dcd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd2:	79 05                	jns    c0004dd9 <f_open+0xa8>
c0004dd4:	bd 06 00 00 00       	mov    ebp,0x6
c0004dd9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004ddf:	0f 84 84 01 00 00    	je     c0004f69 <f_open+0x238>
c0004de5:	85 ed                	test   ebp,ebp
c0004de7:	74 20                	je     c0004e09 <f_open+0xd8>
c0004de9:	83 fd 04             	cmp    ebp,0x4
c0004dec:	0f 85 58 03 00 00    	jne    c000514a <f_open+0x419>
c0004df2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df6:	83 ce 08             	or     esi,0x8
c0004df9:	e8 8a f2 ff ff       	call   c0004088 <dir_register>
c0004dfe:	89 c5                	mov    ebp,eax
c0004e00:	85 c0                	test   eax,eax
c0004e02:	74 2f                	je     c0004e33 <f_open+0x102>
c0004e04:	e9 41 03 00 00       	jmp    c000514a <f_open+0x419>
c0004e09:	bd 07 00 00 00       	mov    ebp,0x7
c0004e0e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e13:	0f 85 31 03 00 00    	jne    c000514a <f_open+0x419>
c0004e19:	bd 08 00 00 00       	mov    ebp,0x8
c0004e1e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e24:	0f 85 20 03 00 00    	jne    c000514a <f_open+0x419>
c0004e2a:	83 e7 08             	and    edi,0x8
c0004e2d:	0f 84 65 01 00 00    	je     c0004f98 <f_open+0x267>
c0004e33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e37:	8a 02                	mov    al,BYTE PTR [edx]
c0004e39:	3c 04                	cmp    al,0x4
c0004e3b:	0f 85 97 00 00 00    	jne    c0004ed8 <f_open+0x1a7>
c0004e41:	8d 42 10             	lea    eax,[edx+0x10]
c0004e44:	89 13                	mov    DWORD PTR [ebx],edx
c0004e46:	89 da                	mov    edx,ebx
c0004e48:	e8 80 fd ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c0004e4d:	31 d2                	xor    edx,edx
c0004e4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e53:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e58:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5b:	83 c0 02             	add    eax,0x2
c0004e5e:	e8 32 cc ff ff       	call   c0001a95 <mem_set>
c0004e63:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e71:	83 c0 26             	add    eax,0x26
c0004e74:	e8 1c cc ff ff       	call   c0001a95 <mem_set>
c0004e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e80:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e84:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8c:	83 c0 08             	add    eax,0x8
c0004e8f:	e8 e3 cb ff ff       	call   c0001a77 <st_dword>
c0004e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e98:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9b:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea3:	e8 b7 ea ff ff       	call   c000395f <store_xdir>
c0004ea8:	89 c5                	mov    ebp,eax
c0004eaa:	85 c0                	test   eax,eax
c0004eac:	0f 85 98 02 00 00    	jne    c000514a <f_open+0x419>
c0004eb2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb5:	85 d2                	test   edx,edx
c0004eb7:	0f 84 db 00 00 00    	je     c0004f98 <f_open+0x267>
c0004ebd:	31 c9                	xor    ecx,ecx
c0004ebf:	89 d8                	mov    eax,ebx
c0004ec1:	e8 8e e3 ff ff       	call   c0003254 <remove_chain>
c0004ec6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eca:	89 c5                	mov    ebp,eax
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	48                   	dec    eax
c0004ed0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed3:	e9 b8 00 00 00       	jmp    c0004f90 <f_open+0x25f>
c0004ed8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004edc:	89 ea                	mov    edx,ebp
c0004ede:	e8 99 fc ff ff       	call   c0004b7c <ld_clust.isra.0>
c0004ee3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ee8:	89 c7                	mov    edi,eax
c0004eea:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eed:	e8 85 cb ff ff       	call   c0001a77 <st_dword>
c0004ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef6:	31 c9                	xor    ecx,ecx
c0004ef8:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f00:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f04:	e8 9c fc ff ff       	call   c0004ba5 <st_clust.isra.1>
c0004f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0d:	31 d2                	xor    edx,edx
c0004f0f:	83 c0 1c             	add    eax,0x1c
c0004f12:	e8 60 cb ff ff       	call   c0001a77 <st_dword>
c0004f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1b:	85 ff                	test   edi,edi
c0004f1d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f21:	74 75                	je     c0004f98 <f_open+0x267>
c0004f23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f27:	31 c9                	xor    ecx,ecx
c0004f29:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f37:	89 fa                	mov    edx,edi
c0004f39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3d:	e8 12 e3 ff ff       	call   c0003254 <remove_chain>
c0004f42:	89 c5                	mov    ebp,eax
c0004f44:	85 c0                	test   eax,eax
c0004f46:	0f 85 fe 01 00 00    	jne    c000514a <f_open+0x419>
c0004f4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f58:	4f                   	dec    edi
c0004f59:	e8 81 d2 ff ff       	call   c00021df <move_window>
c0004f5e:	89 c5                	mov    ebp,eax
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f67:	eb 27                	jmp    c0004f90 <f_open+0x25f>
c0004f69:	85 ed                	test   ebp,ebp
c0004f6b:	0f 85 d9 01 00 00    	jne    c000514a <f_open+0x419>
c0004f71:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f75:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7a:	a8 10                	test   al,0x10
c0004f7c:	0f 85 c8 01 00 00    	jne    c000514a <f_open+0x419>
c0004f82:	83 e7 02             	and    edi,0x2
c0004f85:	74 11                	je     c0004f98 <f_open+0x267>
c0004f87:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8c:	a8 01                	test   al,0x1
c0004f8e:	eb 02                	jmp    c0004f92 <f_open+0x261>
c0004f90:	85 ed                	test   ebp,ebp
c0004f92:	0f 85 b2 01 00 00    	jne    c000514a <f_open+0x419>
c0004f98:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f9e:	74 03                	je     c0004fa3 <f_open+0x272>
c0004fa0:	83 ce 40             	or     esi,0x40
c0004fa3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004faa:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fad:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fba:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbc:	3c 04                	cmp    al,0x4
c0004fbe:	75 2a                	jne    c0004fea <f_open+0x2b9>
c0004fc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fc9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd0:	30 c0                	xor    al,al
c0004fd2:	09 c8                	or     eax,ecx
c0004fd4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fde:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe1:	89 da                	mov    edx,ebx
c0004fe3:	e8 e5 fb ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c0004fe8:	eb 1c                	jmp    c0005006 <f_open+0x2d5>
c0004fea:	89 fa                	mov    edx,edi
c0004fec:	e8 8b fb ff ff       	call   c0004b7c <ld_clust.isra.0>
c0004ff1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff4:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff7:	e8 12 ca ff ff       	call   c0001a0e <ld_dword>
c0004ffc:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005003:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005011:	89 03                	mov    DWORD PTR [ebx],eax
c0005013:	31 d2                	xor    edx,edx
c0005015:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005019:	b9 00 02 00 00       	mov    ecx,0x200
c000501e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005022:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005026:	89 f0                	mov    eax,esi
c0005028:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000502f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005032:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005039:	8d 43 50             	lea    eax,[ebx+0x50]
c000503c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005043:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000504e:	e8 42 ca ff ff       	call   c0001a95 <mem_set>
c0005053:	83 e6 20             	and    esi,0x20
c0005056:	75 07                	jne    c000505f <f_open+0x32e>
c0005058:	31 ed                	xor    ebp,ebp
c000505a:	e9 eb 00 00 00       	jmp    c000514a <f_open+0x419>
c000505f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005062:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005065:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005069:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005071:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005075:	74 e1                	je     c0005058 <f_open+0x327>
c0005077:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000507f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005082:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005089:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005090:	31 ff                	xor    edi,edi
c0005092:	c1 e5 09             	shl    ebp,0x9
c0005095:	89 ee                	mov    esi,ebp
c0005097:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509b:	89 f8                	mov    eax,edi
c000509d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a1:	73 22                	jae    c00050c5 <f_open+0x394>
c00050a3:	89 d8                	mov    eax,ebx
c00050a5:	e8 bd dc ff ff       	call   c0002d67 <get_fat>
c00050aa:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050ae:	89 c2                	mov    edx,eax
c00050b0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b4:	83 f8 01             	cmp    eax,0x1
c00050b7:	76 10                	jbe    c00050c9 <f_open+0x398>
c00050b9:	83 f8 ff             	cmp    eax,0xffffffff
c00050bc:	75 d9                	jne    c0005097 <f_open+0x366>
c00050be:	bd 01 00 00 00       	mov    ebp,0x1
c00050c3:	eb 09                	jmp    c00050ce <f_open+0x39d>
c00050c5:	31 ed                	xor    ebp,ebp
c00050c7:	eb 05                	jmp    c00050ce <f_open+0x39d>
c00050c9:	bd 02 00 00 00       	mov    ebp,0x2
c00050ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d1:	85 ed                	test   ebp,ebp
c00050d3:	75 75                	jne    c000514a <f_open+0x419>
c00050d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050d9:	25 ff 01 00 00       	and    eax,0x1ff
c00050de:	0f 84 74 ff ff ff    	je     c0005058 <f_open+0x327>
c00050e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050e8:	bd 02 00 00 00       	mov    ebp,0x2
c00050ed:	89 c8                	mov    eax,ecx
c00050ef:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f3:	e8 a2 cb ff ff       	call   c0001c9a <clst2sect>
c00050f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fc:	89 d7                	mov    edi,edx
c00050fe:	09 c7                	or     edi,eax
c0005100:	74 48                	je     c000514a <f_open+0x419>
c0005102:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005106:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005112:	0f ac fe 09          	shrd   esi,edi,0x9
c0005116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000511e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005121:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005125:	83 ec 0c             	sub    esp,0xc
c0005128:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512b:	6a 01                	push   0x1
c000512d:	52                   	push   edx
c000512e:	50                   	push   eax
c000512f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005133:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005137:	50                   	push   eax
c0005138:	e8 79 c8 ff ff       	call   c00019b6 <disk_read>
c000513d:	83 c4 20             	add    esp,0x20
c0005140:	85 c0                	test   eax,eax
c0005142:	0f 95 c0             	setne  al
c0005145:	0f b6 c0             	movzx  eax,al
c0005148:	89 c5                	mov    ebp,eax
c000514a:	83 ec 0c             	sub    esp,0xc
c000514d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005151:	e8 f4 30 00 00       	call   c000824a <ff_memfree>
c0005156:	83 c4 10             	add    esp,0x10
c0005159:	85 ed                	test   ebp,ebp
c000515b:	74 06                	je     c0005163 <f_open+0x432>
c000515d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005163:	83 c4 7c             	add    esp,0x7c
c0005166:	89 e8                	mov    eax,ebp
c0005168:	5b                   	pop    ebx
c0005169:	5e                   	pop    esi
c000516a:	5f                   	pop    edi
c000516b:	5d                   	pop    ebp
c000516c:	c3                   	ret    

c000516d <f_read>:
c000516d:	55                   	push   ebp
c000516e:	57                   	push   edi
c000516f:	56                   	push   esi
c0005170:	53                   	push   ebx
c0005171:	83 ec 2c             	sub    esp,0x2c
c0005174:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005178:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005182:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005186:	89 d8                	mov    eax,ebx
c0005188:	e8 77 cf ff ff       	call   c0002104 <validate>
c000518d:	89 c5                	mov    ebp,eax
c000518f:	85 c0                	test   eax,eax
c0005191:	0f 85 4c 02 00 00    	jne    c00053e3 <f_read+0x276>
c0005197:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519b:	85 ed                	test   ebp,ebp
c000519d:	0f 85 40 02 00 00    	jne    c00053e3 <f_read+0x276>
c00051a3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a7:	0f 84 31 02 00 00    	je     c00053de <f_read+0x271>
c00051ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b6:	bf 00 00 00 00       	mov    edi,0x0
c00051bb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051be:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c2:	89 d1                	mov    ecx,edx
c00051c4:	19 f9                	sbb    ecx,edi
c00051c6:	0f 83 cf 00 00 00    	jae    c000529b <f_read+0x12e>
c00051cc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d0:	e9 c6 00 00 00       	jmp    c000529b <f_read+0x12e>
c00051d5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051d8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051db:	89 d0                	mov    eax,edx
c00051dd:	25 ff 01 00 00       	and    eax,0x1ff
c00051e2:	0f 85 c9 01 00 00    	jne    c00053b1 <f_read+0x244>
c00051e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ec:	89 d6                	mov    esi,edx
c00051ee:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f2:	89 cf                	mov    edi,ecx
c00051f4:	48                   	dec    eax
c00051f5:	0f ac fe 09          	shrd   esi,edi,0x9
c00051f9:	21 f0                	and    eax,esi
c00051fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051ff:	0f 84 a6 00 00 00    	je     c00052ab <f_read+0x13e>
c0005205:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005209:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520c:	89 c8                	mov    eax,ecx
c000520e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005211:	e8 84 ca ff ff       	call   c0001c9a <clst2sect>
c0005216:	89 d7                	mov    edi,edx
c0005218:	09 c7                	or     edi,eax
c000521a:	0f 84 b4 00 00 00    	je     c00052d4 <f_read+0x167>
c0005220:	31 ff                	xor    edi,edi
c0005222:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005226:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005229:	01 c6                	add    esi,eax
c000522b:	11 d7                	adc    edi,edx
c000522d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005235:	0f 86 fd 00 00 00    	jbe    c0005338 <f_read+0x1cb>
c000523b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000523f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005243:	c1 e8 09             	shr    eax,0x9
c0005246:	89 04 24             	mov    DWORD PTR [esp],eax
c0005249:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005250:	39 c2                	cmp    edx,eax
c0005252:	76 07                	jbe    c000525b <f_read+0xee>
c0005254:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005258:	89 04 24             	mov    DWORD PTR [esp],eax
c000525b:	83 ec 0c             	sub    esp,0xc
c000525e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005262:	57                   	push   edi
c0005263:	56                   	push   esi
c0005264:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005268:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526c:	50                   	push   eax
c000526d:	e8 44 c7 ff ff       	call   c00019b6 <disk_read>
c0005272:	83 c4 20             	add    esp,0x20
c0005275:	85 c0                	test   eax,eax
c0005277:	75 6e                	jne    c00052e7 <f_read+0x17a>
c0005279:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527d:	78 7e                	js     c00052fd <f_read+0x190>
c000527f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005282:	c1 e6 09             	shl    esi,0x9
c0005285:	31 ff                	xor    edi,edi
c0005287:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000528f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005293:	01 30                	add    DWORD PTR [eax],esi
c0005295:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005298:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a0:	0f 85 2f ff ff ff    	jne    c00051d5 <f_read+0x68>
c00052a6:	e9 38 01 00 00       	jmp    c00053e3 <f_read+0x276>
c00052ab:	89 c8                	mov    eax,ecx
c00052ad:	09 d0                	or     eax,edx
c00052af:	75 05                	jne    c00052b6 <f_read+0x149>
c00052b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b4:	eb 19                	jmp    c00052cf <f_read+0x162>
c00052b6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ba:	74 09                	je     c00052c5 <f_read+0x158>
c00052bc:	89 d8                	mov    eax,ebx
c00052be:	e8 f8 c9 ff ff       	call   c0001cbb <clmt_clust>
c00052c3:	eb 0a                	jmp    c00052cf <f_read+0x162>
c00052c5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052c8:	89 d8                	mov    eax,ebx
c00052ca:	e8 98 da ff ff       	call   c0002d67 <get_fat>
c00052cf:	83 f8 01             	cmp    eax,0x1
c00052d2:	77 0e                	ja     c00052e2 <f_read+0x175>
c00052d4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052d8:	bd 02 00 00 00       	mov    ebp,0x2
c00052dd:	e9 01 01 00 00       	jmp    c00053e3 <f_read+0x276>
c00052e2:	83 f8 ff             	cmp    eax,0xffffffff
c00052e5:	75 0e                	jne    c00052f5 <f_read+0x188>
c00052e7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052eb:	bd 01 00 00 00       	mov    ebp,0x1
c00052f0:	e9 ee 00 00 00       	jmp    c00053e3 <f_read+0x276>
c00052f5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052f8:	e9 08 ff ff ff       	jmp    c0005205 <f_read+0x98>
c00052fd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005300:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005303:	29 f0                	sub    eax,esi
c0005305:	19 fa                	sbb    edx,edi
c0005307:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530a:	89 d7                	mov    edi,edx
c000530c:	ba 00 00 00 00       	mov    edx,0x0
c0005311:	89 f9                	mov    ecx,edi
c0005313:	19 d1                	sbb    ecx,edx
c0005315:	0f 83 64 ff ff ff    	jae    c000527f <f_read+0x112>
c000531b:	89 c7                	mov    edi,eax
c000531d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005320:	c1 e7 09             	shl    edi,0x9
c0005323:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005327:	b9 00 02 00 00       	mov    ecx,0x200
c000532c:	01 f8                	add    eax,edi
c000532e:	e8 4d c7 ff ff       	call   c0001a80 <mem_cpy>
c0005333:	e9 47 ff ff ff       	jmp    c000527f <f_read+0x112>
c0005338:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000533e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005341:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005345:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005349:	75 05                	jne    c0005350 <f_read+0x1e3>
c000534b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000534e:	74 5b                	je     c00053ab <f_read+0x23e>
c0005350:	8d 43 50             	lea    eax,[ebx+0x50]
c0005353:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005357:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535b:	79 2a                	jns    c0005387 <f_read+0x21a>
c000535d:	83 ec 0c             	sub    esp,0xc
c0005360:	6a 01                	push   0x1
c0005362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000536e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005372:	50                   	push   eax
c0005373:	e8 54 c6 ff ff       	call   c00019cc <disk_write>
c0005378:	83 c4 20             	add    esp,0x20
c000537b:	85 c0                	test   eax,eax
c000537d:	0f 85 64 ff ff ff    	jne    c00052e7 <f_read+0x17a>
c0005383:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005387:	83 ec 0c             	sub    esp,0xc
c000538a:	6a 01                	push   0x1
c000538c:	57                   	push   edi
c000538d:	56                   	push   esi
c000538e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005392:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005396:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539a:	50                   	push   eax
c000539b:	e8 16 c6 ff ff       	call   c00019b6 <disk_read>
c00053a0:	83 c4 20             	add    esp,0x20
c00053a3:	85 c0                	test   eax,eax
c00053a5:	0f 85 3c ff ff ff    	jne    c00052e7 <f_read+0x17a>
c00053ab:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053ae:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b4:	ba 00 02 00 00       	mov    edx,0x200
c00053b9:	25 ff 01 00 00       	and    eax,0x1ff
c00053be:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c2:	29 c2                	sub    edx,eax
c00053c4:	39 d6                	cmp    esi,edx
c00053c6:	76 02                	jbe    c00053ca <f_read+0x25d>
c00053c8:	89 d6                	mov    esi,edx
c00053ca:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053ce:	89 f1                	mov    ecx,esi
c00053d0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d4:	e8 a7 c6 ff ff       	call   c0001a80 <mem_cpy>
c00053d9:	e9 a7 fe ff ff       	jmp    c0005285 <f_read+0x118>
c00053de:	bd 07 00 00 00       	mov    ebp,0x7
c00053e3:	83 c4 2c             	add    esp,0x2c
c00053e6:	89 e8                	mov    eax,ebp
c00053e8:	5b                   	pop    ebx
c00053e9:	5e                   	pop    esi
c00053ea:	5f                   	pop    edi
c00053eb:	5d                   	pop    ebp
c00053ec:	c3                   	ret    

c00053ed <f_write>:
c00053ed:	55                   	push   ebp
c00053ee:	57                   	push   edi
c00053ef:	56                   	push   esi
c00053f0:	53                   	push   ebx
c00053f1:	83 ec 2c             	sub    esp,0x2c
c00053f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005402:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005406:	89 d8                	mov    eax,ebx
c0005408:	e8 f7 cc ff ff       	call   c0002104 <validate>
c000540d:	89 c5                	mov    ebp,eax
c000540f:	85 c0                	test   eax,eax
c0005411:	0f 85 86 02 00 00    	jne    c000569d <f_write+0x2b0>
c0005417:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541b:	85 ed                	test   ebp,ebp
c000541d:	0f 85 7a 02 00 00    	jne    c000569d <f_write+0x2b0>
c0005423:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005427:	0f 84 6b 02 00 00    	je     c0005698 <f_write+0x2ab>
c000542d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005431:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005434:	0f 84 43 01 00 00    	je     c000557d <f_write+0x190>
c000543a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543d:	89 c1                	mov    ecx,eax
c000543f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005443:	0f 83 34 01 00 00    	jae    c000557d <f_write+0x190>
c0005449:	f7 d0                	not    eax
c000544b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000544f:	e9 29 01 00 00       	jmp    c000557d <f_write+0x190>
c0005454:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005457:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545a:	89 d0                	mov    eax,edx
c000545c:	25 ff 01 00 00       	and    eax,0x1ff
c0005461:	0f 85 00 02 00 00    	jne    c0005667 <f_write+0x27a>
c0005467:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546b:	89 d6                	mov    esi,edx
c000546d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005471:	89 cf                	mov    edi,ecx
c0005473:	48                   	dec    eax
c0005474:	0f ac fe 09          	shrd   esi,edi,0x9
c0005478:	21 f0                	and    eax,esi
c000547a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000547e:	0f 84 06 01 00 00    	je     c000558a <f_write+0x19d>
c0005484:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005488:	0f 88 6e 01 00 00    	js     c00055fc <f_write+0x20f>
c000548e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005492:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005495:	89 c8                	mov    eax,ecx
c0005497:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549b:	e8 fa c7 ff ff       	call   c0001c9a <clst2sect>
c00054a0:	89 d1                	mov    ecx,edx
c00054a2:	09 c1                	or     ecx,eax
c00054a4:	0f 84 1c 01 00 00    	je     c00055c6 <f_write+0x1d9>
c00054aa:	31 ff                	xor    edi,edi
c00054ac:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b4:	01 c6                	add    esi,eax
c00054b6:	11 d7                	adc    edi,edx
c00054b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c0:	0f 86 63 01 00 00    	jbe    c0005629 <f_write+0x23c>
c00054c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054d9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054dd:	39 c2                	cmp    edx,eax
c00054df:	76 08                	jbe    c00054e9 <f_write+0xfc>
c00054e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e9:	83 ec 0c             	sub    esp,0xc
c00054ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f0:	57                   	push   edi
c00054f1:	56                   	push   esi
c00054f2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fa:	50                   	push   eax
c00054fb:	e8 cc c4 ff ff       	call   c00019cc <disk_write>
c0005500:	83 c4 20             	add    esp,0x20
c0005503:	85 c0                	test   eax,eax
c0005505:	0f 85 ce 00 00 00    	jne    c00055d9 <f_write+0x1ec>
c000550b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000550e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005511:	29 f0                	sub    eax,esi
c0005513:	19 fa                	sbb    edx,edi
c0005515:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005519:	89 d7                	mov    edi,edx
c000551b:	ba 00 00 00 00       	mov    edx,0x0
c0005520:	89 f9                	mov    ecx,edi
c0005522:	19 d1                	sbb    ecx,edx
c0005524:	73 1c                	jae    c0005542 <f_write+0x155>
c0005526:	89 c7                	mov    edi,eax
c0005528:	b9 00 02 00 00       	mov    ecx,0x200
c000552d:	c1 e7 09             	shl    edi,0x9
c0005530:	8d 43 50             	lea    eax,[ebx+0x50]
c0005533:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005537:	89 fa                	mov    edx,edi
c0005539:	e8 42 c5 ff ff       	call   c0001a80 <mem_cpy>
c000553e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005542:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005546:	c1 e6 09             	shl    esi,0x9
c0005549:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554d:	31 ff                	xor    edi,edi
c000554f:	01 30                	add    DWORD PTR [eax],esi
c0005551:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005555:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005559:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000555f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005562:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005565:	89 c1                	mov    ecx,eax
c0005567:	39 f2                	cmp    edx,esi
c0005569:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000556f:	19 f9                	sbb    ecx,edi
c0005571:	73 04                	jae    c0005577 <f_write+0x18a>
c0005573:	89 f2                	mov    edx,esi
c0005575:	89 f8                	mov    eax,edi
c0005577:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005582:	0f 85 cc fe ff ff    	jne    c0005454 <f_write+0x67>
c0005588:	eb 2e                	jmp    c00055b8 <f_write+0x1cb>
c000558a:	89 c8                	mov    eax,ecx
c000558c:	09 d0                	or     eax,edx
c000558e:	75 0b                	jne    c000559b <f_write+0x1ae>
c0005590:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005593:	31 d2                	xor    edx,edx
c0005595:	85 c0                	test   eax,eax
c0005597:	75 28                	jne    c00055c1 <f_write+0x1d4>
c0005599:	eb 12                	jmp    c00055ad <f_write+0x1c0>
c000559b:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000559f:	74 09                	je     c00055aa <f_write+0x1bd>
c00055a1:	89 d8                	mov    eax,ebx
c00055a3:	e8 13 c7 ff ff       	call   c0001cbb <clmt_clust>
c00055a8:	eb 0a                	jmp    c00055b4 <f_write+0x1c7>
c00055aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ad:	89 d8                	mov    eax,ebx
c00055af:	e8 a1 da ff ff       	call   c0003055 <create_chain>
c00055b4:	85 c0                	test   eax,eax
c00055b6:	75 09                	jne    c00055c1 <f_write+0x1d4>
c00055b8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055bc:	e9 dc 00 00 00       	jmp    c000569d <f_write+0x2b0>
c00055c1:	83 f8 01             	cmp    eax,0x1
c00055c4:	75 0e                	jne    c00055d4 <f_write+0x1e7>
c00055c6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055ca:	bd 02 00 00 00       	mov    ebp,0x2
c00055cf:	e9 c9 00 00 00       	jmp    c000569d <f_write+0x2b0>
c00055d4:	83 f8 ff             	cmp    eax,0xffffffff
c00055d7:	75 0e                	jne    c00055e7 <f_write+0x1fa>
c00055d9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055dd:	bd 01 00 00 00       	mov    ebp,0x1
c00055e2:	e9 b6 00 00 00       	jmp    c000569d <f_write+0x2b0>
c00055e7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055ea:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055ee:	0f 85 90 fe ff ff    	jne    c0005484 <f_write+0x97>
c00055f4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f7:	e9 88 fe ff ff       	jmp    c0005484 <f_write+0x97>
c00055fc:	83 ec 0c             	sub    esp,0xc
c00055ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0005602:	6a 01                	push   0x1
c0005604:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005607:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560a:	50                   	push   eax
c000560b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000560f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005613:	50                   	push   eax
c0005614:	e8 b3 c3 ff ff       	call   c00019cc <disk_write>
c0005619:	83 c4 20             	add    esp,0x20
c000561c:	85 c0                	test   eax,eax
c000561e:	75 b9                	jne    c00055d9 <f_write+0x1ec>
c0005620:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005624:	e9 65 fe ff ff       	jmp    c000548e <f_write+0xa1>
c0005629:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562c:	75 05                	jne    c0005633 <f_write+0x246>
c000562e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005631:	74 2e                	je     c0005661 <f_write+0x274>
c0005633:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005636:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005639:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000563f:	73 20                	jae    c0005661 <f_write+0x274>
c0005641:	83 ec 0c             	sub    esp,0xc
c0005644:	8d 43 50             	lea    eax,[ebx+0x50]
c0005647:	6a 01                	push   0x1
c0005649:	57                   	push   edi
c000564a:	56                   	push   esi
c000564b:	50                   	push   eax
c000564c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005650:	50                   	push   eax
c0005651:	e8 60 c3 ff ff       	call   c00019b6 <disk_read>
c0005656:	83 c4 20             	add    esp,0x20
c0005659:	85 c0                	test   eax,eax
c000565b:	0f 85 78 ff ff ff    	jne    c00055d9 <f_write+0x1ec>
c0005661:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005664:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005667:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566a:	ba 00 02 00 00       	mov    edx,0x200
c000566f:	25 ff 01 00 00       	and    eax,0x1ff
c0005674:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005678:	29 c2                	sub    edx,eax
c000567a:	39 d6                	cmp    esi,edx
c000567c:	76 02                	jbe    c0005680 <f_write+0x293>
c000567e:	89 d6                	mov    esi,edx
c0005680:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005684:	89 f1                	mov    ecx,esi
c0005686:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568a:	e8 f1 c3 ff ff       	call   c0001a80 <mem_cpy>
c000568f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005693:	e9 b1 fe ff ff       	jmp    c0005549 <f_write+0x15c>
c0005698:	bd 07 00 00 00       	mov    ebp,0x7
c000569d:	83 c4 2c             	add    esp,0x2c
c00056a0:	89 e8                	mov    eax,ebp
c00056a2:	5b                   	pop    ebx
c00056a3:	5e                   	pop    esi
c00056a4:	5f                   	pop    edi
c00056a5:	5d                   	pop    ebp
c00056a6:	c3                   	ret    

c00056a7 <f_sync>:
c00056a7:	56                   	push   esi
c00056a8:	53                   	push   ebx
c00056a9:	83 ec 64             	sub    esp,0x64
c00056ac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b4:	89 d8                	mov    eax,ebx
c00056b6:	e8 49 ca ff ff       	call   c0002104 <validate>
c00056bb:	85 c0                	test   eax,eax
c00056bd:	0f 85 ba 01 00 00    	jne    c000587d <f_sync+0x1d6>
c00056c3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c6:	f6 c2 40             	test   dl,0x40
c00056c9:	0f 84 ae 01 00 00    	je     c000587d <f_sync+0x1d6>
c00056cf:	84 d2                	test   dl,dl
c00056d1:	79 33                	jns    c0005706 <f_sync+0x5f>
c00056d3:	83 ec 0c             	sub    esp,0xc
c00056d6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056d9:	6a 01                	push   0x1
c00056db:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056de:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e1:	50                   	push   eax
c00056e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056ea:	50                   	push   eax
c00056eb:	e8 dc c2 ff ff       	call   c00019cc <disk_write>
c00056f0:	83 c4 20             	add    esp,0x20
c00056f3:	89 c2                	mov    edx,eax
c00056f5:	b8 01 00 00 00       	mov    eax,0x1
c00056fa:	85 d2                	test   edx,edx
c00056fc:	0f 85 7b 01 00 00    	jne    c000587d <f_sync+0x1d6>
c0005702:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570d:	0f 85 11 01 00 00    	jne    c0005824 <f_sync+0x17d>
c0005713:	89 d8                	mov    eax,ebx
c0005715:	e8 13 d6 ff ff       	call   c0002d2d <fill_first_frag>
c000571a:	85 c0                	test   eax,eax
c000571c:	0f 85 5b 01 00 00    	jne    c000587d <f_sync+0x1d6>
c0005722:	83 c9 ff             	or     ecx,0xffffffff
c0005725:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005728:	89 d8                	mov    eax,ebx
c000572a:	e8 c9 d5 ff ff       	call   c0002cf8 <fill_last_frag>
c000572f:	85 c0                	test   eax,eax
c0005731:	0f 85 46 01 00 00    	jne    c000587d <f_sync+0x1d6>
c0005737:	83 ec 0c             	sub    esp,0xc
c000573a:	68 60 04 00 00       	push   0x460
c000573f:	e8 f0 2a 00 00       	call   c0008234 <ff_memalloc>
c0005744:	83 c4 10             	add    esp,0x10
c0005747:	89 c6                	mov    esi,eax
c0005749:	b8 11 00 00 00       	mov    eax,0x11
c000574e:	85 f6                	test   esi,esi
c0005750:	0f 84 27 01 00 00    	je     c000587d <f_sync+0x1d6>
c0005756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005760:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005763:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005766:	89 da                	mov    edx,ebx
c0005768:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576c:	e8 af df ff ff       	call   c0003720 <load_obj_xdir>
c0005771:	85 c0                	test   eax,eax
c0005773:	0f 85 95 00 00 00    	jne    c000580e <f_sync+0x167>
c0005779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005780:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005784:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005787:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578a:	83 ca 01             	or     edx,0x1
c000578d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005790:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005793:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005796:	83 c0 34             	add    eax,0x34
c0005799:	e8 d9 c2 ff ff       	call   c0001a77 <st_dword>
c000579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ab:	83 c0 38             	add    eax,0x38
c00057ae:	e8 c7 c2 ff ff       	call   c0001a7a <st_qword>
c00057b3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ba:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c0:	83 c0 28             	add    eax,0x28
c00057c3:	e8 b2 c2 ff ff       	call   c0001a7a <st_qword>
c00057c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057cc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d4:	83 c0 0c             	add    eax,0xc
c00057d7:	e8 9b c2 ff ff       	call   c0001a77 <st_dword>
c00057dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e7:	31 d2                	xor    edx,edx
c00057e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ec:	83 c0 10             	add    eax,0x10
c00057ef:	e8 83 c2 ff ff       	call   c0001a77 <st_dword>
c00057f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057f8:	e8 62 e1 ff ff       	call   c000395f <store_xdir>
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 0d                	jne    c000580e <f_sync+0x167>
c0005801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005805:	e8 00 eb ff ff       	call   c000430a <sync_fs>
c000580a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005812:	83 ec 0c             	sub    esp,0xc
c0005815:	56                   	push   esi
c0005816:	e8 2f 2a 00 00       	call   c000824a <ff_memfree>
c000581b:	83 c4 10             	add    esp,0x10
c000581e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005822:	eb 59                	jmp    c000587d <f_sync+0x1d6>
c0005824:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005827:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582a:	e8 b0 c9 ff ff       	call   c00021df <move_window>
c000582f:	85 c0                	test   eax,eax
c0005831:	75 4a                	jne    c000587d <f_sync+0x1d6>
c0005833:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005836:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583a:	89 f2                	mov    edx,esi
c000583c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000583f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005841:	e8 5f f3 ff ff       	call   c0004ba5 <st_clust.isra.1>
c0005846:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005849:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584c:	e8 26 c2 ff ff       	call   c0001a77 <st_dword>
c0005851:	8d 46 16             	lea    eax,[esi+0x16]
c0005854:	ba 00 00 21 50       	mov    edx,0x50210000
c0005859:	e8 19 c2 ff ff       	call   c0001a77 <st_dword>
c000585e:	8d 46 12             	lea    eax,[esi+0x12]
c0005861:	31 d2                	xor    edx,edx
c0005863:	e8 0b c2 ff ff       	call   c0001a73 <st_word>
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005874:	e8 91 ea ff ff       	call   c000430a <sync_fs>
c0005879:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587d:	83 c4 64             	add    esp,0x64
c0005880:	5b                   	pop    ebx
c0005881:	5e                   	pop    esi
c0005882:	c3                   	ret    

c0005883 <f_close>:
c0005883:	53                   	push   ebx
c0005884:	83 ec 24             	sub    esp,0x24
c0005887:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588b:	53                   	push   ebx
c000588c:	e8 16 fe ff ff       	call   c00056a7 <f_sync>
c0005891:	83 c4 10             	add    esp,0x10
c0005894:	85 c0                	test   eax,eax
c0005896:	75 15                	jne    c00058ad <f_close+0x2a>
c0005898:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589c:	89 d8                	mov    eax,ebx
c000589e:	e8 61 c8 ff ff       	call   c0002104 <validate>
c00058a3:	85 c0                	test   eax,eax
c00058a5:	75 06                	jne    c00058ad <f_close+0x2a>
c00058a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058ad:	83 c4 18             	add    esp,0x18
c00058b0:	5b                   	pop    ebx
c00058b1:	c3                   	ret    

c00058b2 <f_lseek>:
c00058b2:	55                   	push   ebp
c00058b3:	57                   	push   edi
c00058b4:	56                   	push   esi
c00058b5:	53                   	push   ebx
c00058b6:	83 ec 3c             	sub    esp,0x3c
c00058b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058bd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058cc:	89 d8                	mov    eax,ebx
c00058ce:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d2:	e8 2d c8 ff ff       	call   c0002104 <validate>
c00058d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058db:	85 c0                	test   eax,eax
c00058dd:	0f 85 7a 04 00 00    	jne    c0005d5d <f_lseek+0x4ab>
c00058e3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 6a 04 00 00    	jne    c0005d5d <f_lseek+0x4ab>
c00058f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fa:	74 0c                	je     c0005908 <f_lseek+0x56>
c00058fc:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00058ff:	85 c0                	test   eax,eax
c0005901:	75 1f                	jne    c0005922 <f_lseek+0x70>
c0005903:	e9 b5 01 00 00       	jmp    c0005abd <f_lseek+0x20b>
c0005908:	83 c9 ff             	or     ecx,0xffffffff
c000590b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000590e:	89 d8                	mov    eax,ebx
c0005910:	e8 e3 d3 ff ff       	call   c0002cf8 <fill_last_frag>
c0005915:	85 c0                	test   eax,eax
c0005917:	74 e3                	je     c00058fc <f_lseek+0x4a>
c0005919:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591d:	e9 3b 04 00 00       	jmp    c0005d5d <f_lseek+0x4ab>
c0005922:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005927:	0f 85 ac 00 00 00    	jne    c00059d9 <f_lseek+0x127>
c000592d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005931:	0f 85 a2 00 00 00    	jne    c00059d9 <f_lseek+0x127>
c0005937:	8d 78 04             	lea    edi,[eax+0x4]
c000593a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593d:	8b 00                	mov    eax,DWORD PTR [eax]
c000593f:	be 02 00 00 00       	mov    esi,0x2
c0005944:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005948:	85 ed                	test   ebp,ebp
c000594a:	74 73                	je     c00059bf <f_lseek+0x10d>
c000594c:	89 e9                	mov    ecx,ebp
c000594e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005955:	ff 04 24             	inc    DWORD PTR [esp]
c0005958:	89 ca                	mov    edx,ecx
c000595a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000595e:	89 d8                	mov    eax,ebx
c0005960:	e8 02 d4 ff ff       	call   c0002d67 <get_fat>
c0005965:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005969:	83 f8 01             	cmp    eax,0x1
c000596c:	77 11                	ja     c000597f <f_lseek+0xcd>
c000596e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005972:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597a:	e9 de 03 00 00       	jmp    c0005d5d <f_lseek+0x4ab>
c000597f:	83 f8 ff             	cmp    eax,0xffffffff
c0005982:	75 11                	jne    c0005995 <f_lseek+0xe3>
c0005984:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005988:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005990:	e9 c8 03 00 00       	jmp    c0005d5d <f_lseek+0x4ab>
c0005995:	8d 51 01             	lea    edx,[ecx+0x1]
c0005998:	89 c1                	mov    ecx,eax
c000599a:	39 c2                	cmp    edx,eax
c000599c:	74 b7                	je     c0005955 <f_lseek+0xa3>
c000599e:	83 c6 02             	add    esi,0x2
c00059a1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a5:	72 0b                	jb     c00059b2 <f_lseek+0x100>
c00059a7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059aa:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059ad:	89 0f                	mov    DWORD PTR [edi],ecx
c00059af:	83 c7 08             	add    edi,0x8
c00059b2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059b9:	76 04                	jbe    c00059bf <f_lseek+0x10d>
c00059bb:	89 c5                	mov    ebp,eax
c00059bd:	eb 8d                	jmp    c000594c <f_lseek+0x9a>
c00059bf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c6:	89 30                	mov    DWORD PTR [eax],esi
c00059c8:	0f 87 87 03 00 00    	ja     c0005d55 <f_lseek+0x4a3>
c00059ce:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d4:	e9 84 03 00 00       	jmp    c0005d5d <f_lseek+0x4ab>
c00059d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059dc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059eb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f6:	73 0f                	jae    c0005a07 <f_lseek+0x155>
c00059f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00059ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a0f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a12:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a19:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1d:	0f 84 3a 03 00 00    	je     c0005d5d <f_lseek+0x4ab>
c0005a23:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a27:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2b:	83 c6 ff             	add    esi,0xffffffff
c0005a2e:	89 d8                	mov    eax,ebx
c0005a30:	83 d7 ff             	adc    edi,0xffffffff
c0005a33:	89 f2                	mov    edx,esi
c0005a35:	89 f9                	mov    ecx,edi
c0005a37:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a3e:	e8 78 c2 ff ff       	call   c0001cbb <clmt_clust>
c0005a43:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a47:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4a:	89 c2                	mov    edx,eax
c0005a4c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a50:	89 c8                	mov    eax,ecx
c0005a52:	e8 43 c2 ff ff       	call   c0001c9a <clst2sect>
c0005a57:	89 d7                	mov    edi,edx
c0005a59:	09 c7                	or     edi,eax
c0005a5b:	0f 84 0d ff ff ff    	je     c000596e <f_lseek+0xbc>
c0005a61:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a65:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6b:	0f 84 ec 02 00 00    	je     c0005d5d <f_lseek+0x4ab>
c0005a71:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a79:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a80:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a84:	4d                   	dec    ebp
c0005a85:	31 ff                	xor    edi,edi
c0005a87:	21 ee                	and    esi,ebp
c0005a89:	01 c6                	add    esi,eax
c0005a8b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a8e:	11 d7                	adc    edi,edx
c0005a90:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a93:	39 fa                	cmp    edx,edi
c0005a95:	75 08                	jne    c0005a9f <f_lseek+0x1ed>
c0005a97:	39 f0                	cmp    eax,esi
c0005a99:	0f 84 be 02 00 00    	je     c0005d5d <f_lseek+0x4ab>
c0005a9f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa6:	0f 89 80 02 00 00    	jns    c0005d2c <f_lseek+0x47a>
c0005aac:	83 ec 0c             	sub    esp,0xc
c0005aaf:	6a 01                	push   0x1
c0005ab1:	52                   	push   edx
c0005ab2:	50                   	push   eax
c0005ab3:	55                   	push   ebp
c0005ab4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ab8:	e9 5a 02 00 00       	jmp    c0005d17 <f_lseek+0x465>
c0005abd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac4:	74 16                	je     c0005adc <f_lseek+0x22a>
c0005ac6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acb:	76 0f                	jbe    c0005adc <f_lseek+0x22a>
c0005acd:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005adc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005adf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae5:	89 c7                	mov    edi,eax
c0005ae7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aeb:	73 0d                	jae    c0005afa <f_lseek+0x248>
c0005aed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af1:	75 07                	jne    c0005afa <f_lseek+0x248>
c0005af3:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005afd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b00:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b04:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b12:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b15:	75 09                	jne    c0005b20 <f_lseek+0x26e>
c0005b17:	31 f6                	xor    esi,esi
c0005b19:	31 ff                	xor    edi,edi
c0005b1b:	e9 af 01 00 00       	jmp    c0005ccf <f_lseek+0x41d>
c0005b20:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b24:	89 d7                	mov    edi,edx
c0005b26:	c1 e1 09             	shl    ecx,0x9
c0005b29:	09 c7                	or     edi,eax
c0005b2b:	89 cd                	mov    ebp,ecx
c0005b2d:	74 6d                	je     c0005b9c <f_lseek+0x2ea>
c0005b2f:	83 c0 ff             	add    eax,0xffffffff
c0005b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b36:	83 d2 ff             	adc    edx,0xffffffff
c0005b39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b40:	83 c0 ff             	add    eax,0xffffffff
c0005b43:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b47:	83 d2 ff             	adc    edx,0xffffffff
c0005b4a:	31 ff                	xor    edi,edi
c0005b4c:	57                   	push   edi
c0005b4d:	51                   	push   ecx
c0005b4e:	52                   	push   edx
c0005b4f:	50                   	push   eax
c0005b50:	e8 d7 e3 01 00       	call   c0023f2c <__udivdi3>
c0005b55:	83 c4 10             	add    esp,0x10
c0005b58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b60:	57                   	push   edi
c0005b61:	55                   	push   ebp
c0005b62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6a:	e8 bd e3 01 00       	call   c0023f2c <__udivdi3>
c0005b6f:	83 c4 10             	add    esp,0x10
c0005b72:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7a:	19 d1                	sbb    ecx,edx
c0005b7c:	72 1e                	jb     c0005b9c <f_lseek+0x2ea>
c0005b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b82:	89 e9                	mov    ecx,ebp
c0005b84:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b87:	f7 d9                	neg    ecx
c0005b89:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b90:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b93:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b96:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9a:	eb 28                	jmp    c0005bc4 <f_lseek+0x312>
c0005b9c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b9f:	85 c0                	test   eax,eax
c0005ba1:	75 1e                	jne    c0005bc1 <f_lseek+0x30f>
c0005ba3:	31 d2                	xor    edx,edx
c0005ba5:	89 d8                	mov    eax,ebx
c0005ba7:	e8 a9 d4 ff ff       	call   c0003055 <create_chain>
c0005bac:	83 f8 01             	cmp    eax,0x1
c0005baf:	0f 84 b9 fd ff ff    	je     c000596e <f_lseek+0xbc>
c0005bb5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bb8:	0f 84 c6 fd ff ff    	je     c0005984 <f_lseek+0xd2>
c0005bbe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc4:	85 c0                	test   eax,eax
c0005bc6:	0f 84 4b ff ff ff    	je     c0005b17 <f_lseek+0x265>
c0005bcc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bd8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bdf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005be9:	0f 83 9d 00 00 00    	jae    c0005c8c <f_lseek+0x3da>
c0005bef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf7:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfa:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bfe:	01 f2                	add    edx,esi
c0005c00:	11 f9                	adc    ecx,edi
c0005c02:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c06:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c10:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c13:	f6 c1 02             	test   cl,0x2
c0005c16:	74 35                	je     c0005c4d <f_lseek+0x39b>
c0005c18:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c1f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c22:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c26:	73 16                	jae    c0005c3e <f_lseek+0x38c>
c0005c28:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c30:	88 ca                	mov    dl,cl
c0005c32:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c35:	83 ca 40             	or     edx,0x40
c0005c38:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c3e:	89 c2                	mov    edx,eax
c0005c40:	89 d8                	mov    eax,ebx
c0005c42:	e8 0e d4 ff ff       	call   c0003055 <create_chain>
c0005c47:	85 c0                	test   eax,eax
c0005c49:	75 0b                	jne    c0005c56 <f_lseek+0x3a4>
c0005c4b:	eb 30                	jmp    c0005c7d <f_lseek+0x3cb>
c0005c4d:	89 c2                	mov    edx,eax
c0005c4f:	89 d8                	mov    eax,ebx
c0005c51:	e8 11 d1 ff ff       	call   c0002d67 <get_fat>
c0005c56:	83 f8 ff             	cmp    eax,0xffffffff
c0005c59:	0f 84 25 fd ff ff    	je     c0005984 <f_lseek+0xd2>
c0005c5f:	83 f8 01             	cmp    eax,0x1
c0005c62:	0f 86 06 fd ff ff    	jbe    c000596e <f_lseek+0xbc>
c0005c68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c6f:	0f 86 f9 fc ff ff    	jbe    c000596e <f_lseek+0xbc>
c0005c75:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c78:	e9 5b ff ff ff       	jmp    c0005bd8 <f_lseek+0x326>
c0005c7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c8f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c93:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c96:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c99:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9c:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca2:	0f 84 6f fe ff ff    	je     c0005b17 <f_lseek+0x265>
c0005ca8:	89 c2                	mov    edx,eax
c0005caa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cae:	e8 e7 bf ff ff       	call   c0001c9a <clst2sect>
c0005cb3:	89 d7                	mov    edi,edx
c0005cb5:	09 c7                	or     edi,eax
c0005cb7:	0f 84 b1 fc ff ff    	je     c000596e <f_lseek+0xbc>
c0005cbd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc8:	c1 ef 09             	shr    edi,0x9
c0005ccb:	01 c6                	add    esi,eax
c0005ccd:	11 d7                	adc    edi,edx
c0005ccf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cd8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdb:	19 d1                	sbb    ecx,edx
c0005cdd:	73 0a                	jae    c0005ce9 <f_lseek+0x437>
c0005cdf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005ce9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cee:	74 6d                	je     c0005d5d <f_lseek+0x4ab>
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	39 fa                	cmp    edx,edi
c0005cf8:	75 04                	jne    c0005cfe <f_lseek+0x44c>
c0005cfa:	39 f0                	cmp    eax,esi
c0005cfc:	74 5f                	je     c0005d5d <f_lseek+0x4ab>
c0005cfe:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d01:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d05:	79 25                	jns    c0005d2c <f_lseek+0x47a>
c0005d07:	83 ec 0c             	sub    esp,0xc
c0005d0a:	6a 01                	push   0x1
c0005d0c:	52                   	push   edx
c0005d0d:	50                   	push   eax
c0005d0e:	55                   	push   ebp
c0005d0f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d13:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d17:	50                   	push   eax
c0005d18:	e8 af bc ff ff       	call   c00019cc <disk_write>
c0005d1d:	83 c4 20             	add    esp,0x20
c0005d20:	85 c0                	test   eax,eax
c0005d22:	0f 85 5c fc ff ff    	jne    c0005984 <f_lseek+0xd2>
c0005d28:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2c:	83 ec 0c             	sub    esp,0xc
c0005d2f:	6a 01                	push   0x1
c0005d31:	57                   	push   edi
c0005d32:	56                   	push   esi
c0005d33:	55                   	push   ebp
c0005d34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d38:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3c:	50                   	push   eax
c0005d3d:	e8 74 bc ff ff       	call   c00019b6 <disk_read>
c0005d42:	83 c4 20             	add    esp,0x20
c0005d45:	85 c0                	test   eax,eax
c0005d47:	0f 85 37 fc ff ff    	jne    c0005984 <f_lseek+0xd2>
c0005d4d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d50:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d53:	eb 08                	jmp    c0005d5d <f_lseek+0x4ab>
c0005d55:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d61:	83 c4 3c             	add    esp,0x3c
c0005d64:	5b                   	pop    ebx
c0005d65:	5e                   	pop    esi
c0005d66:	5f                   	pop    edi
c0005d67:	5d                   	pop    ebp
c0005d68:	c3                   	ret    

c0005d69 <f_opendir>:
c0005d69:	56                   	push   esi
c0005d6a:	b8 09 00 00 00       	mov    eax,0x9
c0005d6f:	53                   	push   ebx
c0005d70:	83 ec 24             	sub    esp,0x24
c0005d73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d77:	85 db                	test   ebx,ebx
c0005d79:	0f 84 e6 00 00 00    	je     c0005e65 <f_opendir+0xfc>
c0005d7f:	31 c9                	xor    ecx,ecx
c0005d81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d85:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d89:	e8 03 c7 ff ff       	call   c0002491 <mount_volume>
c0005d8e:	85 c0                	test   eax,eax
c0005d90:	0f 85 c9 00 00 00    	jne    c0005e5f <f_opendir+0xf6>
c0005d96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9a:	83 ec 0c             	sub    esp,0xc
c0005d9d:	89 03                	mov    DWORD PTR [ebx],eax
c0005d9f:	68 60 04 00 00       	push   0x460
c0005da4:	e8 8b 24 00 00       	call   c0008234 <ff_memalloc>
c0005da9:	83 c4 10             	add    esp,0x10
c0005dac:	89 c6                	mov    esi,eax
c0005dae:	b8 11 00 00 00       	mov    eax,0x11
c0005db3:	85 f6                	test   esi,esi
c0005db5:	0f 84 aa 00 00 00    	je     c0005e65 <f_opendir+0xfc>
c0005dbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dbf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dc8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dcf:	89 d8                	mov    eax,ebx
c0005dd1:	e8 31 ee ff ff       	call   c0004c07 <follow_path>
c0005dd6:	85 c0                	test   eax,eax
c0005dd8:	75 61                	jne    c0005e3b <f_opendir+0xd2>
c0005dda:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dde:	78 46                	js     c0005e26 <f_opendir+0xbd>
c0005de0:	b8 05 00 00 00       	mov    eax,0x5
c0005de5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005de9:	74 50                	je     c0005e3b <f_opendir+0xd2>
c0005deb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005def:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df1:	3c 04                	cmp    al,0x4
c0005df3:	75 26                	jne    c0005e1b <f_opendir+0xb2>
c0005df5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005df8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dfe:	30 d2                	xor    dl,dl
c0005e00:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e04:	09 c2                	or     edx,eax
c0005e06:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e09:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e0f:	89 da                	mov    edx,ebx
c0005e11:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e14:	e8 b4 ed ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c0005e19:	eb 0b                	jmp    c0005e26 <f_opendir+0xbd>
c0005e1b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e1e:	e8 59 ed ff ff       	call   c0004b7c <ld_clust.isra.0>
c0005e23:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2a:	31 d2                	xor    edx,edx
c0005e2c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e30:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e34:	89 d8                	mov    eax,ebx
c0005e36:	e8 22 d1 ff ff       	call   c0002f5d <dir_sdi>
c0005e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e3f:	83 ec 0c             	sub    esp,0xc
c0005e42:	56                   	push   esi
c0005e43:	e8 02 24 00 00       	call   c000824a <ff_memfree>
c0005e48:	83 c4 10             	add    esp,0x10
c0005e4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4f:	83 f8 04             	cmp    eax,0x4
c0005e52:	74 06                	je     c0005e5a <f_opendir+0xf1>
c0005e54:	85 c0                	test   eax,eax
c0005e56:	74 0d                	je     c0005e65 <f_opendir+0xfc>
c0005e58:	eb 05                	jmp    c0005e5f <f_opendir+0xf6>
c0005e5a:	b8 05 00 00 00       	mov    eax,0x5
c0005e5f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e65:	83 c4 24             	add    esp,0x24
c0005e68:	5b                   	pop    ebx
c0005e69:	5e                   	pop    esi
c0005e6a:	c3                   	ret    

c0005e6b <f_closedir>:
c0005e6b:	53                   	push   ebx
c0005e6c:	83 ec 18             	sub    esp,0x18
c0005e6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e73:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e77:	89 d8                	mov    eax,ebx
c0005e79:	e8 86 c2 ff ff       	call   c0002104 <validate>
c0005e7e:	85 c0                	test   eax,eax
c0005e80:	75 06                	jne    c0005e88 <f_closedir+0x1d>
c0005e82:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e88:	83 c4 18             	add    esp,0x18
c0005e8b:	5b                   	pop    ebx
c0005e8c:	c3                   	ret    

c0005e8d <f_readdir>:
c0005e8d:	57                   	push   edi
c0005e8e:	56                   	push   esi
c0005e8f:	53                   	push   ebx
c0005e90:	83 ec 20             	sub    esp,0x20
c0005e93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e9f:	89 d8                	mov    eax,ebx
c0005ea1:	e8 5e c2 ff ff       	call   c0002104 <validate>
c0005ea6:	85 c0                	test   eax,eax
c0005ea8:	75 77                	jne    c0005f21 <f_readdir+0x94>
c0005eaa:	85 ff                	test   edi,edi
c0005eac:	75 0b                	jne    c0005eb9 <f_readdir+0x2c>
c0005eae:	31 d2                	xor    edx,edx
c0005eb0:	89 d8                	mov    eax,ebx
c0005eb2:	e8 a6 d0 ff ff       	call   c0002f5d <dir_sdi>
c0005eb7:	eb 68                	jmp    c0005f21 <f_readdir+0x94>
c0005eb9:	83 ec 0c             	sub    esp,0xc
c0005ebc:	68 60 04 00 00       	push   0x460
c0005ec1:	e8 6e 23 00 00       	call   c0008234 <ff_memalloc>
c0005ec6:	83 c4 10             	add    esp,0x10
c0005ec9:	89 c6                	mov    esi,eax
c0005ecb:	b8 11 00 00 00       	mov    eax,0x11
c0005ed0:	85 f6                	test   esi,esi
c0005ed2:	74 4d                	je     c0005f21 <f_readdir+0x94>
c0005ed4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ed8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ede:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee4:	31 d2                	xor    edx,edx
c0005ee6:	89 d8                	mov    eax,ebx
c0005ee8:	e8 80 d8 ff ff       	call   c000376d <dir_read>
c0005eed:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef2:	75 19                	jne    c0005f0d <f_readdir+0x80>
c0005ef4:	89 fa                	mov    edx,edi
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 7e ea ff ff       	call   c000497b <get_fileinfo>
c0005efd:	31 d2                	xor    edx,edx
c0005eff:	89 d8                	mov    eax,ebx
c0005f01:	e8 af d5 ff ff       	call   c00034b5 <dir_next>
c0005f06:	83 f8 04             	cmp    eax,0x4
c0005f09:	75 02                	jne    c0005f0d <f_readdir+0x80>
c0005f0b:	31 c0                	xor    eax,eax
c0005f0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f11:	83 ec 0c             	sub    esp,0xc
c0005f14:	56                   	push   esi
c0005f15:	e8 30 23 00 00       	call   c000824a <ff_memfree>
c0005f1a:	83 c4 10             	add    esp,0x10
c0005f1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f21:	83 c4 20             	add    esp,0x20
c0005f24:	5b                   	pop    ebx
c0005f25:	5e                   	pop    esi
c0005f26:	5f                   	pop    edi
c0005f27:	c3                   	ret    

c0005f28 <f_stat>:
c0005f28:	57                   	push   edi
c0005f29:	31 c9                	xor    ecx,ecx
c0005f2b:	56                   	push   esi
c0005f2c:	53                   	push   ebx
c0005f2d:	83 ec 50             	sub    esp,0x50
c0005f30:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f34:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f38:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3c:	e8 50 c5 ff ff       	call   c0002491 <mount_volume>
c0005f41:	89 c3                	mov    ebx,eax
c0005f43:	85 c0                	test   eax,eax
c0005f45:	75 67                	jne    c0005fae <f_stat+0x86>
c0005f47:	83 ec 0c             	sub    esp,0xc
c0005f4a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f4f:	68 60 04 00 00       	push   0x460
c0005f54:	e8 db 22 00 00       	call   c0008234 <ff_memalloc>
c0005f59:	83 c4 10             	add    esp,0x10
c0005f5c:	89 c6                	mov    esi,eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	74 4c                	je     c0005fae <f_stat+0x86>
c0005f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f66:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f6f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f72:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f76:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7a:	e8 88 ec ff ff       	call   c0004c07 <follow_path>
c0005f7f:	89 c3                	mov    ebx,eax
c0005f81:	85 c0                	test   eax,eax
c0005f83:	75 1d                	jne    c0005fa2 <f_stat+0x7a>
c0005f85:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8a:	78 11                	js     c0005f9d <f_stat+0x75>
c0005f8c:	85 ff                	test   edi,edi
c0005f8e:	74 12                	je     c0005fa2 <f_stat+0x7a>
c0005f90:	89 fa                	mov    edx,edi
c0005f92:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f96:	e8 e0 e9 ff ff       	call   c000497b <get_fileinfo>
c0005f9b:	eb 05                	jmp    c0005fa2 <f_stat+0x7a>
c0005f9d:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa2:	83 ec 0c             	sub    esp,0xc
c0005fa5:	56                   	push   esi
c0005fa6:	e8 9f 22 00 00       	call   c000824a <ff_memfree>
c0005fab:	83 c4 10             	add    esp,0x10
c0005fae:	83 c4 50             	add    esp,0x50
c0005fb1:	89 d8                	mov    eax,ebx
c0005fb3:	5b                   	pop    ebx
c0005fb4:	5e                   	pop    esi
c0005fb5:	5f                   	pop    edi
c0005fb6:	c3                   	ret    

c0005fb7 <f_getfree>:
c0005fb7:	55                   	push   ebp
c0005fb8:	31 c9                	xor    ecx,ecx
c0005fba:	57                   	push   edi
c0005fbb:	56                   	push   esi
c0005fbc:	53                   	push   ebx
c0005fbd:	83 ec 5c             	sub    esp,0x5c
c0005fc0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fc8:	e8 c4 c4 ff ff       	call   c0002491 <mount_volume>
c0005fcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd1:	85 c0                	test   eax,eax
c0005fd3:	0f 85 9d 01 00 00    	jne    c0006176 <f_getfree+0x1bf>
c0005fd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fdd:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe1:	89 02                	mov    DWORD PTR [edx],eax
c0005fe3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fe9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fec:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff0:	39 f2                	cmp    edx,esi
c0005ff2:	77 0b                	ja     c0005fff <f_getfree+0x48>
c0005ff4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ff8:	89 10                	mov    DWORD PTR [eax],edx
c0005ffa:	e9 77 01 00 00       	jmp    c0006176 <f_getfree+0x1bf>
c0005fff:	8a 10                	mov    dl,BYTE PTR [eax]
c0006001:	80 fa 01             	cmp    dl,0x1
c0006004:	75 3a                	jne    c0006040 <f_getfree+0x89>
c0006006:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600a:	be 02 00 00 00       	mov    esi,0x2
c000600f:	31 db                	xor    ebx,ebx
c0006011:	89 f2                	mov    edx,esi
c0006013:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006017:	e8 4b cd ff ff       	call   c0002d67 <get_fat>
c000601c:	83 f8 ff             	cmp    eax,0xffffffff
c000601f:	0f 84 28 01 00 00    	je     c000614d <f_getfree+0x196>
c0006025:	83 f8 01             	cmp    eax,0x1
c0006028:	0f 84 29 01 00 00    	je     c0006157 <f_getfree+0x1a0>
c000602e:	83 d3 00             	adc    ebx,0x0
c0006031:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006035:	46                   	inc    esi
c0006036:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006039:	77 d6                	ja     c0006011 <f_getfree+0x5a>
c000603b:	e9 25 01 00 00       	jmp    c0006165 <f_getfree+0x1ae>
c0006040:	80 fa 04             	cmp    dl,0x4
c0006043:	0f 85 88 00 00 00    	jne    c00060d1 <f_getfree+0x11a>
c0006049:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604c:	31 ed                	xor    ebp,ebp
c000604e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006051:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006055:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006059:	31 db                	xor    ebx,ebx
c000605b:	85 ed                	test   ebp,ebp
c000605d:	75 3f                	jne    c000609e <f_getfree+0xe7>
c000605f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006063:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006067:	83 c0 01             	add    eax,0x1
c000606a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000606e:	83 d2 00             	adc    edx,0x0
c0006071:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006075:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006079:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006081:	e8 59 c1 ff ff       	call   c00021df <move_window>
c0006086:	85 c0                	test   eax,eax
c0006088:	0f 85 d3 00 00 00    	jne    c0006161 <f_getfree+0x1aa>
c000608e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006092:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006096:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060a9:	89 cf                	mov    edi,ecx
c00060ab:	85 f6                	test   esi,esi
c00060ad:	74 12                	je     c00060c1 <f_getfree+0x10a>
c00060af:	88 c1                	mov    cl,al
c00060b1:	83 e1 01             	and    ecx,0x1
c00060b4:	80 f9 01             	cmp    cl,0x1
c00060b7:	83 d3 00             	adc    ebx,0x0
c00060ba:	d0 e8                	shr    al,1
c00060bc:	4e                   	dec    esi
c00060bd:	39 fe                	cmp    esi,edi
c00060bf:	75 ea                	jne    c00060ab <f_getfree+0xf4>
c00060c1:	45                   	inc    ebp
c00060c2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060c8:	85 f6                	test   esi,esi
c00060ca:	75 8f                	jne    c000605b <f_getfree+0xa4>
c00060cc:	e9 94 00 00 00       	jmp    c0006165 <f_getfree+0x1ae>
c00060d1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d7:	31 f6                	xor    esi,esi
c00060d9:	31 db                	xor    ebx,ebx
c00060db:	85 f6                	test   esi,esi
c00060dd:	75 1b                	jne    c00060fa <f_getfree+0x143>
c00060df:	89 d7                	mov    edi,edx
c00060e1:	89 cd                	mov    ebp,ecx
c00060e3:	83 c7 01             	add    edi,0x1
c00060e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ea:	83 d5 00             	adc    ebp,0x0
c00060ed:	e8 ed c0 ff ff       	call   c00021df <move_window>
c00060f2:	85 c0                	test   eax,eax
c00060f4:	75 6b                	jne    c0006161 <f_getfree+0x1aa>
c00060f6:	89 fa                	mov    edx,edi
c00060f8:	89 e9                	mov    ecx,ebp
c00060fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fe:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006102:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006106:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006109:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006111:	75 11                	jne    c0006124 <f_getfree+0x16d>
c0006113:	e8 e9 b8 ff ff       	call   c0001a01 <ld_word>
c0006118:	66 83 f8 01          	cmp    ax,0x1
c000611c:	83 d3 00             	adc    ebx,0x0
c000611f:	83 c6 02             	add    esi,0x2
c0006122:	eb 13                	jmp    c0006137 <f_getfree+0x180>
c0006124:	e8 e5 b8 ff ff       	call   c0001a0e <ld_dword>
c0006129:	25 ff ff ff 0f       	and    eax,0xfffffff
c000612e:	83 f8 01             	cmp    eax,0x1
c0006131:	83 d3 00             	adc    ebx,0x0
c0006134:	83 c6 04             	add    esi,0x4
c0006137:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006145:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006149:	75 90                	jne    c00060db <f_getfree+0x124>
c000614b:	eb 18                	jmp    c0006165 <f_getfree+0x1ae>
c000614d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006155:	eb 0e                	jmp    c0006165 <f_getfree+0x1ae>
c0006157:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000615f:	eb 04                	jmp    c0006165 <f_getfree+0x1ae>
c0006161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006165:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006169:	89 18                	mov    DWORD PTR [eax],ebx
c000616b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000616f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006172:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617a:	83 c4 5c             	add    esp,0x5c
c000617d:	5b                   	pop    ebx
c000617e:	5e                   	pop    esi
c000617f:	5f                   	pop    edi
c0006180:	5d                   	pop    ebp
c0006181:	c3                   	ret    

c0006182 <f_truncate>:
c0006182:	56                   	push   esi
c0006183:	53                   	push   ebx
c0006184:	83 ec 14             	sub    esp,0x14
c0006187:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000618f:	89 d8                	mov    eax,ebx
c0006191:	e8 6e bf ff ff       	call   c0002104 <validate>
c0006196:	89 c6                	mov    esi,eax
c0006198:	85 c0                	test   eax,eax
c000619a:	0f 85 d2 00 00 00    	jne    c0006272 <f_truncate+0xf0>
c00061a0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a4:	85 f6                	test   esi,esi
c00061a6:	0f 85 c6 00 00 00    	jne    c0006272 <f_truncate+0xf0>
c00061ac:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b0:	0f 84 b7 00 00 00    	je     c000626d <f_truncate+0xeb>
c00061b6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061bc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061bf:	89 d1                	mov    ecx,edx
c00061c1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c4:	0f 83 a8 00 00 00    	jae    c0006272 <f_truncate+0xf0>
c00061ca:	09 c2                	or     edx,eax
c00061cc:	75 15                	jne    c00061e3 <f_truncate+0x61>
c00061ce:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d1:	31 c9                	xor    ecx,ecx
c00061d3:	89 d8                	mov    eax,ebx
c00061d5:	e8 7a d0 ff ff       	call   c0003254 <remove_chain>
c00061da:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e1:	eb 35                	jmp    c0006218 <f_truncate+0x96>
c00061e3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e6:	89 d8                	mov    eax,ebx
c00061e8:	e8 7a cb ff ff       	call   c0002d67 <get_fat>
c00061ed:	89 c2                	mov    edx,eax
c00061ef:	b8 01 00 00 00       	mov    eax,0x1
c00061f4:	83 fa ff             	cmp    edx,0xffffffff
c00061f7:	74 1f                	je     c0006218 <f_truncate+0x96>
c00061f9:	b8 02 00 00 00       	mov    eax,0x2
c00061fe:	83 fa 01             	cmp    edx,0x1
c0006201:	74 15                	je     c0006218 <f_truncate+0x96>
c0006203:	31 c0                	xor    eax,eax
c0006205:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006209:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620c:	76 0a                	jbe    c0006218 <f_truncate+0x96>
c000620e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006211:	89 d8                	mov    eax,ebx
c0006213:	e8 3c d0 ff ff       	call   c0003254 <remove_chain>
c0006218:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000621e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006221:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006224:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006227:	83 ca 40             	or     edx,0x40
c000622a:	85 c0                	test   eax,eax
c000622c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000622f:	75 35                	jne    c0006266 <f_truncate+0xe4>
c0006231:	84 d2                	test   dl,dl
c0006233:	79 3d                	jns    c0006272 <f_truncate+0xf0>
c0006235:	83 ec 0c             	sub    esp,0xc
c0006238:	8d 43 50             	lea    eax,[ebx+0x50]
c000623b:	6a 01                	push   0x1
c000623d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006240:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006243:	50                   	push   eax
c0006244:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006248:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624c:	50                   	push   eax
c000624d:	e8 7a b7 ff ff       	call   c00019cc <disk_write>
c0006252:	83 c4 20             	add    esp,0x20
c0006255:	85 c0                	test   eax,eax
c0006257:	75 08                	jne    c0006261 <f_truncate+0xdf>
c0006259:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625d:	31 f6                	xor    esi,esi
c000625f:	eb 11                	jmp    c0006272 <f_truncate+0xf0>
c0006261:	b8 01 00 00 00       	mov    eax,0x1
c0006266:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006269:	89 c6                	mov    esi,eax
c000626b:	eb 05                	jmp    c0006272 <f_truncate+0xf0>
c000626d:	be 07 00 00 00       	mov    esi,0x7
c0006272:	89 f0                	mov    eax,esi
c0006274:	83 c4 14             	add    esp,0x14
c0006277:	5b                   	pop    ebx
c0006278:	5e                   	pop    esi
c0006279:	c3                   	ret    

c000627a <f_unlink>:
c000627a:	56                   	push   esi
c000627b:	b9 02 00 00 00       	mov    ecx,0x2
c0006280:	53                   	push   ebx
c0006281:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006287:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006292:	e8 fa c1 ff ff       	call   c0002491 <mount_volume>
c0006297:	85 c0                	test   eax,eax
c0006299:	0f 85 55 01 00 00    	jne    c00063f4 <f_unlink+0x17a>
c000629f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a3:	83 ec 0c             	sub    esp,0xc
c00062a6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062aa:	68 60 04 00 00       	push   0x460
c00062af:	e8 80 1f 00 00       	call   c0008234 <ff_memalloc>
c00062b4:	83 c4 10             	add    esp,0x10
c00062b7:	89 c3                	mov    ebx,eax
c00062b9:	b8 11 00 00 00       	mov    eax,0x11
c00062be:	85 db                	test   ebx,ebx
c00062c0:	0f 84 2e 01 00 00    	je     c00063f4 <f_unlink+0x17a>
c00062c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ca:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062dd:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e1:	e8 21 e9 ff ff       	call   c0004c07 <follow_path>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 f2 00 00 00    	jne    c00063e0 <f_unlink+0x166>
c00062ee:	b8 06 00 00 00       	mov    eax,0x6
c00062f3:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fb:	0f 88 df 00 00 00    	js     c00063e0 <f_unlink+0x166>
c0006301:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006306:	74 0a                	je     c0006312 <f_unlink+0x98>
c0006308:	b8 07 00 00 00       	mov    eax,0x7
c000630d:	e9 ce 00 00 00       	jmp    c00063e0 <f_unlink+0x166>
c0006312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006316:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631a:	8a 02                	mov    al,BYTE PTR [edx]
c000631c:	3c 04                	cmp    al,0x4
c000631e:	75 12                	jne    c0006332 <f_unlink+0xb8>
c0006320:	8d 42 10             	lea    eax,[edx+0x10]
c0006323:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006327:	e8 a1 e8 ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c000632c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006330:	eb 0e                	jmp    c0006340 <f_unlink+0xc6>
c0006332:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006339:	e8 3e e8 ff ff       	call   c0004b7c <ld_clust.isra.0>
c000633e:	89 c6                	mov    esi,eax
c0006340:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006345:	75 12                	jne    c0006359 <f_unlink+0xdf>
c0006347:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634b:	e8 94 d6 ff ff       	call   c00039e4 <dir_remove>
c0006350:	85 c0                	test   eax,eax
c0006352:	74 6c                	je     c00063c0 <f_unlink+0x146>
c0006354:	e9 87 00 00 00       	jmp    c00063e0 <f_unlink+0x166>
c0006359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006364:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000636e:	75 21                	jne    c0006391 <f_unlink+0x117>
c0006370:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006374:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006378:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000637f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006386:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006391:	31 d2                	xor    edx,edx
c0006393:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639a:	e8 be cb ff ff       	call   c0002f5d <dir_sdi>
c000639f:	85 c0                	test   eax,eax
c00063a1:	75 3d                	jne    c00063e0 <f_unlink+0x166>
c00063a3:	31 d2                	xor    edx,edx
c00063a5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ac:	e8 bc d3 ff ff       	call   c000376d <dir_read>
c00063b1:	85 c0                	test   eax,eax
c00063b3:	0f 84 4f ff ff ff    	je     c0006308 <f_unlink+0x8e>
c00063b9:	83 f8 04             	cmp    eax,0x4
c00063bc:	75 22                	jne    c00063e0 <f_unlink+0x166>
c00063be:	eb 87                	jmp    c0006347 <f_unlink+0xcd>
c00063c0:	85 f6                	test   esi,esi
c00063c2:	75 0b                	jne    c00063cf <f_unlink+0x155>
c00063c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063c8:	e8 3d df ff ff       	call   c000430a <sync_fs>
c00063cd:	eb 11                	jmp    c00063e0 <f_unlink+0x166>
c00063cf:	31 c9                	xor    ecx,ecx
c00063d1:	89 f2                	mov    edx,esi
c00063d3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d7:	e8 78 ce ff ff       	call   c0003254 <remove_chain>
c00063dc:	85 c0                	test   eax,eax
c00063de:	74 e4                	je     c00063c4 <f_unlink+0x14a>
c00063e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e4:	83 ec 0c             	sub    esp,0xc
c00063e7:	53                   	push   ebx
c00063e8:	e8 5d 1e 00 00       	call   c000824a <ff_memfree>
c00063ed:	83 c4 10             	add    esp,0x10
c00063f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f4:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fa:	5b                   	pop    ebx
c00063fb:	5e                   	pop    esi
c00063fc:	c3                   	ret    

c00063fd <f_mkdir>:
c00063fd:	57                   	push   edi
c00063fe:	b9 02 00 00 00       	mov    ecx,0x2
c0006403:	56                   	push   esi
c0006404:	53                   	push   ebx
c0006405:	83 c4 80             	add    esp,0xffffff80
c0006408:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006413:	e8 79 c0 ff ff       	call   c0002491 <mount_volume>
c0006418:	89 c3                	mov    ebx,eax
c000641a:	85 c0                	test   eax,eax
c000641c:	0f 85 fe 01 00 00    	jne    c0006620 <f_mkdir+0x223>
c0006422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006426:	bb 11 00 00 00       	mov    ebx,0x11
c000642b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000642f:	83 ec 0c             	sub    esp,0xc
c0006432:	68 60 04 00 00       	push   0x460
c0006437:	e8 f8 1d 00 00       	call   c0008234 <ff_memalloc>
c000643c:	83 c4 10             	add    esp,0x10
c000643f:	89 c7                	mov    edi,eax
c0006441:	85 c0                	test   eax,eax
c0006443:	0f 84 d7 01 00 00    	je     c0006620 <f_mkdir+0x223>
c0006449:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006453:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006456:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006459:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006464:	e8 9e e7 ff ff       	call   c0004c07 <follow_path>
c0006469:	89 c3                	mov    ebx,eax
c000646b:	85 c0                	test   eax,eax
c000646d:	74 3e                	je     c00064ad <f_mkdir+0xb0>
c000646f:	83 f8 04             	cmp    eax,0x4
c0006472:	75 3e                	jne    c00064b2 <f_mkdir+0xb5>
c0006474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006478:	31 d2                	xor    edx,edx
c000647a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000647e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006482:	e8 ce cb ff ff       	call   c0003055 <create_chain>
c0006487:	89 c6                	mov    esi,eax
c0006489:	85 c0                	test   eax,eax
c000648b:	74 0c                	je     c0006499 <f_mkdir+0x9c>
c000648d:	bb 02 00 00 00       	mov    ebx,0x2
c0006492:	83 f8 01             	cmp    eax,0x1
c0006495:	74 07                	je     c000649e <f_mkdir+0xa1>
c0006497:	eb 2a                	jmp    c00064c3 <f_mkdir+0xc6>
c0006499:	bb 07 00 00 00       	mov    ebx,0x7
c000649e:	31 c9                	xor    ecx,ecx
c00064a0:	89 f2                	mov    edx,esi
c00064a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a6:	e8 a9 cd ff ff       	call   c0003254 <remove_chain>
c00064ab:	eb 05                	jmp    c00064b2 <f_mkdir+0xb5>
c00064ad:	bb 08 00 00 00       	mov    ebx,0x8
c00064b2:	83 ec 0c             	sub    esp,0xc
c00064b5:	57                   	push   edi
c00064b6:	e8 8f 1d 00 00       	call   c000824a <ff_memfree>
c00064bb:	83 c4 10             	add    esp,0x10
c00064be:	e9 5d 01 00 00       	jmp    c0006620 <f_mkdir+0x223>
c00064c3:	bb 01 00 00 00       	mov    ebx,0x1
c00064c8:	83 f8 ff             	cmp    eax,0xffffffff
c00064cb:	74 d1                	je     c000649e <f_mkdir+0xa1>
c00064cd:	89 f2                	mov    edx,esi
c00064cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d3:	e8 c4 ce ff ff       	call   c000339c <dir_clear>
c00064d8:	89 c3                	mov    ebx,eax
c00064da:	85 c0                	test   eax,eax
c00064dc:	75 c0                	jne    c000649e <f_mkdir+0xa1>
c00064de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e5:	74 69                	je     c0006550 <f_mkdir+0x153>
c00064e7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ec:	83 c0 54             	add    eax,0x54
c00064ef:	ba 20 00 00 00       	mov    edx,0x20
c00064f4:	e8 9c b5 ff ff       	call   c0001a95 <mem_set>
c00064f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0006502:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006506:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650a:	83 c0 6a             	add    eax,0x6a
c000650d:	e8 65 b5 ff ff       	call   c0001a77 <st_dword>
c0006512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006516:	89 f1                	mov    ecx,esi
c0006518:	8d 50 54             	lea    edx,[eax+0x54]
c000651b:	e8 85 e6 ff ff       	call   c0004ba5 <st_clust.isra.1>
c0006520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006524:	b9 20 00 00 00       	mov    ecx,0x20
c0006529:	8d 50 54             	lea    edx,[eax+0x54]
c000652c:	83 c0 74             	add    eax,0x74
c000652f:	e8 4c b5 ff ff       	call   c0001a80 <mem_cpy>
c0006534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006538:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006540:	8d 50 74             	lea    edx,[eax+0x74]
c0006543:	e8 5d e6 ff ff       	call   c0004ba5 <st_clust.isra.1>
c0006548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006550:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006554:	e8 2f db ff ff       	call   c0004088 <dir_register>
c0006559:	89 c3                	mov    ebx,eax
c000655b:	85 c0                	test   eax,eax
c000655d:	0f 85 3b ff ff ff    	jne    c000649e <f_mkdir+0xa1>
c0006563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006567:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656a:	75 74                	jne    c00065e0 <f_mkdir+0x1e3>
c000656c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000656f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006574:	83 c0 0c             	add    eax,0xc
c0006577:	e8 fb b4 ff ff       	call   c0001a77 <st_dword>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	89 f2                	mov    edx,esi
c0006582:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006585:	83 c0 34             	add    eax,0x34
c0006588:	e8 ea b4 ff ff       	call   c0001a77 <st_dword>
c000658d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006591:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006595:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006598:	c1 e2 09             	shl    edx,0x9
c000659b:	83 c0 38             	add    eax,0x38
c000659e:	e8 d4 b4 ff ff       	call   c0001a77 <st_dword>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ae:	c1 e2 09             	shl    edx,0x9
c00065b1:	83 c0 28             	add    eax,0x28
c00065b4:	e8 be b4 ff ff       	call   c0001a77 <st_dword>
c00065b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065cf:	e8 8b d3 ff ff       	call   c000395f <store_xdir>
c00065d4:	89 c3                	mov    ebx,eax
c00065d6:	85 c0                	test   eax,eax
c00065d8:	0f 85 d4 fe ff ff    	jne    c00064b2 <f_mkdir+0xb5>
c00065de:	eb 30                	jmp    c0006610 <f_mkdir+0x213>
c00065e0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065e9:	83 c0 16             	add    eax,0x16
c00065ec:	e8 86 b4 ff ff       	call   c0001a77 <st_dword>
c00065f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f5:	89 f1                	mov    ecx,esi
c00065f7:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fb:	e8 a5 e5 ff ff       	call   c0004ba5 <st_clust.isra.1>
c0006600:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006604:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006614:	e8 f1 dc ff ff       	call   c000430a <sync_fs>
c0006619:	89 c3                	mov    ebx,eax
c000661b:	e9 92 fe ff ff       	jmp    c00064b2 <f_mkdir+0xb5>
c0006620:	83 ec 80             	sub    esp,0xffffff80
c0006623:	89 d8                	mov    eax,ebx
c0006625:	5b                   	pop    ebx
c0006626:	5e                   	pop    esi
c0006627:	5f                   	pop    edi
c0006628:	c3                   	ret    

c0006629 <f_rename>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	56                   	push   esi
c000662c:	53                   	push   ebx
c000662d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006633:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663a:	e8 a4 b9 ff ff       	call   c0001fe3 <get_ldnumber>
c000663f:	b9 02 00 00 00       	mov    ecx,0x2
c0006644:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006648:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000664f:	e8 3d be ff ff       	call   c0002491 <mount_volume>
c0006654:	85 c0                	test   eax,eax
c0006656:	0f 85 b5 02 00 00    	jne    c0006911 <f_rename+0x2e8>
c000665c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006660:	83 ec 0c             	sub    esp,0xc
c0006663:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006667:	68 60 04 00 00       	push   0x460
c000666c:	e8 c3 1b 00 00       	call   c0008234 <ff_memalloc>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	89 c3                	mov    ebx,eax
c0006676:	b8 11 00 00 00       	mov    eax,0x11
c000667b:	85 db                	test   ebx,ebx
c000667d:	0f 84 8e 02 00 00    	je     c0006911 <f_rename+0x2e8>
c0006683:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006687:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006690:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006693:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669a:	8d 44 24 58          	lea    eax,[esp+0x58]
c000669e:	e8 64 e5 ff ff       	call   c0004c07 <follow_path>
c00066a3:	85 c0                	test   eax,eax
c00066a5:	0f 85 52 02 00 00    	jne    c00068fd <f_rename+0x2d4>
c00066ab:	b8 06 00 00 00       	mov    eax,0x6
c00066b0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066b8:	0f 85 3f 02 00 00    	jne    c00068fd <f_rename+0x2d4>
c00066be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c5:	0f 85 05 01 00 00    	jne    c00067d0 <f_rename+0x1a7>
c00066cb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066ce:	b9 40 00 00 00       	mov    ecx,0x40
c00066d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d7:	e8 a4 b3 ff ff       	call   c0001a80 <mem_cpy>
c00066dc:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ec:	e8 8f b3 ff ff       	call   c0001a80 <mem_cpy>
c00066f1:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066f8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ff:	e8 03 e5 ff ff       	call   c0004c07 <follow_path>
c0006704:	85 c0                	test   eax,eax
c0006706:	75 29                	jne    c0006731 <f_rename+0x108>
c0006708:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006713:	74 0a                	je     c000671f <f_rename+0xf6>
c0006715:	b8 08 00 00 00       	mov    eax,0x8
c000671a:	e9 de 01 00 00       	jmp    c00068fd <f_rename+0x2d4>
c000671f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006726:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672d:	75 e6                	jne    c0006715 <f_rename+0xec>
c000672f:	eb 09                	jmp    c000673a <f_rename+0x111>
c0006731:	83 f8 04             	cmp    eax,0x4
c0006734:	0f 85 c3 01 00 00    	jne    c00068fd <f_rename+0x2d4>
c000673a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006741:	e8 42 d9 ff ff       	call   c0004088 <dir_register>
c0006746:	85 c0                	test   eax,eax
c0006748:	0f 85 af 01 00 00    	jne    c00068fd <f_rename+0x2d4>
c000674e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006752:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006755:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006758:	89 c5                	mov    ebp,eax
c000675a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006761:	8d 46 24             	lea    eax,[esi+0x24]
c0006764:	e8 98 b2 ff ff       	call   c0001a01 <ld_word>
c0006769:	b9 40 00 00 00       	mov    ecx,0x40
c000676e:	89 c7                	mov    edi,eax
c0006770:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006774:	89 f0                	mov    eax,esi
c0006776:	e8 05 b3 ff ff       	call   c0001a80 <mem_cpy>
c000677b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000677f:	89 e9                	mov    ecx,ebp
c0006781:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006784:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006787:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006792:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006795:	0f b7 d7             	movzx  edx,di
c0006798:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679b:	83 c0 24             	add    eax,0x24
c000679e:	e8 d0 b2 ff ff       	call   c0001a73 <st_word>
c00067a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067aa:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ad:	a8 10                	test   al,0x10
c00067af:	75 06                	jne    c00067b7 <f_rename+0x18e>
c00067b1:	83 c8 20             	or     eax,0x20
c00067b4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067be:	e8 9c d1 ff ff       	call   c000395f <store_xdir>
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 84 1c 01 00 00    	je     c00068e7 <f_rename+0x2be>
c00067cb:	e9 2d 01 00 00       	jmp    c00068fd <f_rename+0x2d4>
c00067d0:	b9 20 00 00 00       	mov    ecx,0x20
c00067d5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e0:	e8 9b b2 ff ff       	call   c0001a80 <mem_cpy>
c00067e5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067ea:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067ee:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f5:	e8 86 b2 ff ff       	call   c0001a80 <mem_cpy>
c00067fa:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006801:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006808:	e8 fa e3 ff ff       	call   c0004c07 <follow_path>
c000680d:	85 c0                	test   eax,eax
c000680f:	75 27                	jne    c0006838 <f_rename+0x20f>
c0006811:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006815:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681c:	0f 85 f3 fe ff ff    	jne    c0006715 <f_rename+0xec>
c0006822:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006829:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006830:	0f 85 df fe ff ff    	jne    c0006715 <f_rename+0xec>
c0006836:	eb 09                	jmp    c0006841 <f_rename+0x218>
c0006838:	83 f8 04             	cmp    eax,0x4
c000683b:	0f 85 bc 00 00 00    	jne    c00068fd <f_rename+0x2d4>
c0006841:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006848:	e8 3b d8 ff ff       	call   c0004088 <dir_register>
c000684d:	85 c0                	test   eax,eax
c000684f:	0f 85 a8 00 00 00    	jne    c00068fd <f_rename+0x2d4>
c0006855:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685c:	b9 13 00 00 00       	mov    ecx,0x13
c0006861:	8d 46 0d             	lea    eax,[esi+0xd]
c0006864:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006868:	e8 13 b2 ff ff       	call   c0001a80 <mem_cpy>
c000686d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006871:	a8 10                	test   al,0x10
c0006873:	75 03                	jne    c0006878 <f_rename+0x24f>
c0006875:	83 c8 20             	or     eax,0x20
c0006878:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000687f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006883:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006887:	74 5e                	je     c00068e7 <f_rename+0x2be>
c0006889:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006890:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006894:	74 51                	je     c00068e7 <f_rename+0x2be>
c0006896:	89 f2                	mov    edx,esi
c0006898:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689c:	8a 07                	mov    al,BYTE PTR [edi]
c000689e:	e8 d9 e2 ff ff       	call   c0004b7c <ld_clust.isra.0>
c00068a3:	89 c2                	mov    edx,eax
c00068a5:	89 f8                	mov    eax,edi
c00068a7:	e8 ee b3 ff ff       	call   c0001c9a <clst2sect>
c00068ac:	89 c6                	mov    esi,eax
c00068ae:	89 d1                	mov    ecx,edx
c00068b0:	b8 02 00 00 00       	mov    eax,0x2
c00068b5:	09 f2                	or     edx,esi
c00068b7:	74 44                	je     c00068fd <f_rename+0x2d4>
c00068b9:	89 f2                	mov    edx,esi
c00068bb:	89 f8                	mov    eax,edi
c00068bd:	e8 1d b9 ff ff       	call   c00021df <move_window>
c00068c2:	85 c0                	test   eax,eax
c00068c4:	75 37                	jne    c00068fd <f_rename+0x2d4>
c00068c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ca:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068ce:	75 17                	jne    c00068e7 <f_rename+0x2be>
c00068d0:	8d 50 74             	lea    edx,[eax+0x74]
c00068d3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068da:	e8 c6 e2 ff ff       	call   c0004ba5 <st_clust.isra.1>
c00068df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068eb:	e8 f4 d0 ff ff       	call   c00039e4 <dir_remove>
c00068f0:	85 c0                	test   eax,eax
c00068f2:	75 09                	jne    c00068fd <f_rename+0x2d4>
c00068f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f8:	e8 0d da ff ff       	call   c000430a <sync_fs>
c00068fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006901:	83 ec 0c             	sub    esp,0xc
c0006904:	53                   	push   ebx
c0006905:	e8 40 19 00 00       	call   c000824a <ff_memfree>
c000690a:	83 c4 10             	add    esp,0x10
c000690d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006911:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006917:	5b                   	pop    ebx
c0006918:	5e                   	pop    esi
c0006919:	5f                   	pop    edi
c000691a:	5d                   	pop    ebp
c000691b:	c3                   	ret    

c000691c <f_chmod>:
c000691c:	57                   	push   edi
c000691d:	b9 02 00 00 00       	mov    ecx,0x2
c0006922:	56                   	push   esi
c0006923:	53                   	push   ebx
c0006924:	83 ec 60             	sub    esp,0x60
c0006927:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000692f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006933:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006937:	e8 55 bb ff ff       	call   c0002491 <mount_volume>
c000693c:	85 c0                	test   eax,eax
c000693e:	0f 85 af 00 00 00    	jne    c00069f3 <f_chmod+0xd7>
c0006944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006948:	83 ec 0c             	sub    esp,0xc
c000694b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000694f:	68 60 04 00 00       	push   0x460
c0006954:	e8 db 18 00 00       	call   c0008234 <ff_memalloc>
c0006959:	83 c4 10             	add    esp,0x10
c000695c:	89 c6                	mov    esi,eax
c000695e:	b8 11 00 00 00       	mov    eax,0x11
c0006963:	85 f6                	test   esi,esi
c0006965:	0f 84 88 00 00 00    	je     c00069f3 <f_chmod+0xd7>
c000696b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000696f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006975:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006978:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000697f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006983:	e8 7f e2 ff ff       	call   c0004c07 <follow_path>
c0006988:	85 c0                	test   eax,eax
c000698a:	75 53                	jne    c00069df <f_chmod+0xc3>
c000698c:	b8 06 00 00 00       	mov    eax,0x6
c0006991:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006996:	75 47                	jne    c00069df <f_chmod+0xc3>
c0006998:	89 f9                	mov    ecx,edi
c000699a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699e:	83 e1 27             	and    ecx,0x27
c00069a1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a4:	75 1d                	jne    c00069c3 <f_chmod+0xa7>
c00069a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069a9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ac:	21 cb                	and    ebx,ecx
c00069ae:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069b8:	e8 a2 cf ff ff       	call   c000395f <store_xdir>
c00069bd:	85 c0                	test   eax,eax
c00069bf:	75 1e                	jne    c00069df <f_chmod+0xc3>
c00069c1:	eb 13                	jmp    c00069d6 <f_chmod+0xba>
c00069c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069ca:	21 cb                	and    ebx,ecx
c00069cc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cf:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069da:	e8 2b d9 ff ff       	call   c000430a <sync_fs>
c00069df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e3:	83 ec 0c             	sub    esp,0xc
c00069e6:	56                   	push   esi
c00069e7:	e8 5e 18 00 00       	call   c000824a <ff_memfree>
c00069ec:	83 c4 10             	add    esp,0x10
c00069ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f3:	83 c4 60             	add    esp,0x60
c00069f6:	5b                   	pop    ebx
c00069f7:	5e                   	pop    esi
c00069f8:	5f                   	pop    edi
c00069f9:	c3                   	ret    

c00069fa <f_utime>:
c00069fa:	56                   	push   esi
c00069fb:	b9 02 00 00 00       	mov    ecx,0x2
c0006a00:	53                   	push   ebx
c0006a01:	83 ec 64             	sub    esp,0x64
c0006a04:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a08:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a10:	e8 7c ba ff ff       	call   c0002491 <mount_volume>
c0006a15:	85 c0                	test   eax,eax
c0006a17:	0f 85 b5 00 00 00    	jne    c0006ad2 <f_utime+0xd8>
c0006a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a21:	83 ec 0c             	sub    esp,0xc
c0006a24:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a28:	68 60 04 00 00       	push   0x460
c0006a2d:	e8 02 18 00 00       	call   c0008234 <ff_memalloc>
c0006a32:	83 c4 10             	add    esp,0x10
c0006a35:	89 c3                	mov    ebx,eax
c0006a37:	b8 11 00 00 00       	mov    eax,0x11
c0006a3c:	85 db                	test   ebx,ebx
c0006a3e:	0f 84 8e 00 00 00    	je     c0006ad2 <f_utime+0xd8>
c0006a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a48:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a4e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a51:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a54:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a58:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5c:	e8 a6 e1 ff ff       	call   c0004c07 <follow_path>
c0006a61:	85 c0                	test   eax,eax
c0006a63:	75 59                	jne    c0006abe <f_utime+0xc4>
c0006a65:	b8 06 00 00 00       	mov    eax,0x6
c0006a6a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a6f:	75 4d                	jne    c0006abe <f_utime+0xc4>
c0006a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a75:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a79:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7d:	c1 e2 10             	shl    edx,0x10
c0006a80:	09 ca                	or     edx,ecx
c0006a82:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a85:	75 1a                	jne    c0006aa1 <f_utime+0xa7>
c0006a87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8a:	83 c0 0c             	add    eax,0xc
c0006a8d:	e8 e5 af ff ff       	call   c0001a77 <st_dword>
c0006a92:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a96:	e8 c4 ce ff ff       	call   c000395f <store_xdir>
c0006a9b:	85 c0                	test   eax,eax
c0006a9d:	75 1f                	jne    c0006abe <f_utime+0xc4>
c0006a9f:	eb 14                	jmp    c0006ab5 <f_utime+0xbb>
c0006aa1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa5:	83 c0 16             	add    eax,0x16
c0006aa8:	e8 ca af ff ff       	call   c0001a77 <st_dword>
c0006aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab9:	e8 4c d8 ff ff       	call   c000430a <sync_fs>
c0006abe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac2:	83 ec 0c             	sub    esp,0xc
c0006ac5:	53                   	push   ebx
c0006ac6:	e8 7f 17 00 00       	call   c000824a <ff_memfree>
c0006acb:	83 c4 10             	add    esp,0x10
c0006ace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad2:	83 c4 64             	add    esp,0x64
c0006ad5:	5b                   	pop    ebx
c0006ad6:	5e                   	pop    esi
c0006ad7:	c3                   	ret    

c0006ad8 <f_getlabel>:
c0006ad8:	55                   	push   ebp
c0006ad9:	31 c9                	xor    ecx,ecx
c0006adb:	57                   	push   edi
c0006adc:	56                   	push   esi
c0006add:	53                   	push   ebx
c0006ade:	83 ec 6c             	sub    esp,0x6c
c0006ae1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aec:	e8 a0 b9 ff ff       	call   c0002491 <mount_volume>
c0006af1:	89 c6                	mov    esi,eax
c0006af3:	85 c0                	test   eax,eax
c0006af5:	0f 85 c1 01 00 00    	jne    c0006cbc <f_getlabel+0x1e4>
c0006afb:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b03:	0f 84 5f 01 00 00    	je     c0006c68 <f_getlabel+0x190>
c0006b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0d:	31 d2                	xor    edx,edx
c0006b0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b13:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b1f:	e8 39 c4 ff ff       	call   c0002f5d <dir_sdi>
c0006b24:	85 c0                	test   eax,eax
c0006b26:	0f 85 2d 01 00 00    	jne    c0006c59 <f_getlabel+0x181>
c0006b2c:	ba 01 00 00 00       	mov    edx,0x1
c0006b31:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b35:	e8 33 cc ff ff       	call   c000376d <dir_read>
c0006b3a:	85 c0                	test   eax,eax
c0006b3c:	0f 85 17 01 00 00    	jne    c0006c59 <f_getlabel+0x181>
c0006b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b46:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b49:	74 09                	je     c0006b54 <f_getlabel+0x7c>
c0006b4b:	31 db                	xor    ebx,ebx
c0006b4d:	31 c9                	xor    ecx,ecx
c0006b4f:	e9 c8 00 00 00       	jmp    c0006c1c <f_getlabel+0x144>
c0006b54:	31 ed                	xor    ebp,ebp
c0006b56:	31 db                	xor    ebx,ebx
c0006b58:	31 ff                	xor    edi,edi
c0006b5a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b5e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b62:	39 fa                	cmp    edx,edi
c0006b64:	76 4b                	jbe    c0006bb1 <f_getlabel+0xd9>
c0006b66:	47                   	inc    edi
c0006b67:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6a:	01 d0                	add    eax,edx
c0006b6c:	e8 90 ae ff ff       	call   c0001a01 <ld_word>
c0006b71:	66 85 ed             	test   bp,bp
c0006b74:	75 0d                	jne    c0006b83 <f_getlabel+0xab>
c0006b76:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b81:	76 28                	jbe    c0006bab <f_getlabel+0xd3>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	89 e9                	mov    ecx,ebp
c0006b8c:	01 da                	add    edx,ebx
c0006b8e:	c1 e1 10             	shl    ecx,0x10
c0006b91:	0f b7 c0             	movzx  eax,ax
c0006b94:	09 c8                	or     eax,ecx
c0006b96:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9b:	e8 01 b0 ff ff       	call   c0001ba1 <put_utf>
c0006ba0:	84 c0                	test   al,al
c0006ba2:	74 0b                	je     c0006baf <f_getlabel+0xd7>
c0006ba4:	0f b6 c0             	movzx  eax,al
c0006ba7:	01 c3                	add    ebx,eax
c0006ba9:	31 c0                	xor    eax,eax
c0006bab:	89 c5                	mov    ebp,eax
c0006bad:	eb ab                	jmp    c0006b5a <f_getlabel+0x82>
c0006baf:	31 db                	xor    ebx,ebx
c0006bb1:	66 85 ed             	test   bp,bp
c0006bb4:	74 02                	je     c0006bb8 <f_getlabel+0xe0>
c0006bb6:	31 db                	xor    ebx,ebx
c0006bb8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bbf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc3:	e9 a0 00 00 00       	jmp    c0006c68 <f_getlabel+0x190>
c0006bc8:	83 ff 0b             	cmp    edi,0xb
c0006bcb:	74 11                	je     c0006bde <f_getlabel+0x106>
c0006bcd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd9:	c1 e0 08             	shl    eax,0x8
c0006bdc:	09 c2                	or     edx,eax
c0006bde:	0f b7 d2             	movzx  edx,dx
c0006be1:	50                   	push   eax
c0006be2:	50                   	push   eax
c0006be3:	68 b5 01 00 00       	push   0x1b5
c0006be8:	52                   	push   edx
c0006be9:	e8 03 17 00 00       	call   c00082f1 <ff_oem2uni>
c0006bee:	83 c4 10             	add    esp,0x10
c0006bf1:	66 85 c0             	test   ax,ax
c0006bf4:	74 46                	je     c0006c3c <f_getlabel+0x164>
c0006bf6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bfd:	0f b7 c0             	movzx  eax,ax
c0006c00:	01 da                	add    edx,ebx
c0006c02:	b9 04 00 00 00       	mov    ecx,0x4
c0006c07:	e8 95 af ff ff       	call   c0001ba1 <put_utf>
c0006c0c:	84 c0                	test   al,al
c0006c0e:	74 2c                	je     c0006c3c <f_getlabel+0x164>
c0006c10:	0f b6 c0             	movzx  eax,al
c0006c13:	01 c3                	add    ebx,eax
c0006c15:	83 ff 0b             	cmp    edi,0xb
c0006c18:	74 24                	je     c0006c3e <f_getlabel+0x166>
c0006c1a:	89 f9                	mov    ecx,edi
c0006c1c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c20:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c23:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c28:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c31:	e8 9f ae ff ff       	call   c0001ad5 <dbc_1st>
c0006c36:	85 c0                	test   eax,eax
c0006c38:	74 a4                	je     c0006bde <f_getlabel+0x106>
c0006c3a:	eb 8c                	jmp    c0006bc8 <f_getlabel+0xf0>
c0006c3c:	31 db                	xor    ebx,ebx
c0006c3e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c45:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c48:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c4f:	74 17                	je     c0006c68 <f_getlabel+0x190>
c0006c51:	4b                   	dec    ebx
c0006c52:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c55:	74 ee                	je     c0006c45 <f_getlabel+0x16d>
c0006c57:	eb 0f                	jmp    c0006c68 <f_getlabel+0x190>
c0006c59:	83 f8 04             	cmp    eax,0x4
c0006c5c:	75 5c                	jne    c0006cba <f_getlabel+0x1e2>
c0006c5e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c65:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c68:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c70:	74 4a                	je     c0006cbc <f_getlabel+0x1e4>
c0006c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c76:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c79:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7c:	e8 5e b5 ff ff       	call   c00021df <move_window>
c0006c81:	89 c6                	mov    esi,eax
c0006c83:	85 c0                	test   eax,eax
c0006c85:	75 35                	jne    c0006cbc <f_getlabel+0x1e4>
c0006c87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8b:	b8 43 00 00 00       	mov    eax,0x43
c0006c90:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c92:	80 f9 03             	cmp    cl,0x3
c0006c95:	74 0f                	je     c0006ca6 <f_getlabel+0x1ce>
c0006c97:	31 c0                	xor    eax,eax
c0006c99:	80 f9 04             	cmp    cl,0x4
c0006c9c:	0f 94 c0             	sete   al
c0006c9f:	48                   	dec    eax
c0006ca0:	83 e0 c3             	and    eax,0xffffffc3
c0006ca3:	83 c0 64             	add    eax,0x64
c0006ca6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006caa:	e8 5f ad ff ff       	call   c0001a0e <ld_dword>
c0006caf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb6:	89 07                	mov    DWORD PTR [edi],eax
c0006cb8:	eb 02                	jmp    c0006cbc <f_getlabel+0x1e4>
c0006cba:	89 c6                	mov    esi,eax
c0006cbc:	83 c4 6c             	add    esp,0x6c
c0006cbf:	89 f0                	mov    eax,esi
c0006cc1:	5b                   	pop    ebx
c0006cc2:	5e                   	pop    esi
c0006cc3:	5f                   	pop    edi
c0006cc4:	5d                   	pop    ebp
c0006cc5:	c3                   	ret    

c0006cc6 <f_setlabel>:
c0006cc6:	56                   	push   esi
c0006cc7:	b9 02 00 00 00       	mov    ecx,0x2
c0006ccc:	53                   	push   ebx
c0006ccd:	83 ec 74             	sub    esp,0x74
c0006cd0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdb:	e8 b1 b7 ff ff       	call   c0002491 <mount_volume>
c0006ce0:	89 c6                	mov    esi,eax
c0006ce2:	85 c0                	test   eax,eax
c0006ce4:	0f 85 41 02 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006cea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cee:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf1:	0f 85 8e 00 00 00    	jne    c0006d85 <f_setlabel+0xbf>
c0006cf7:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfc:	31 d2                	xor    edx,edx
c0006cfe:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d02:	31 db                	xor    ebx,ebx
c0006d04:	e8 8c ad ff ff       	call   c0001a95 <mem_set>
c0006d09:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d10:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d13:	0f 86 0a 01 00 00    	jbe    c0006e23 <f_setlabel+0x15d>
c0006d19:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d20:	e8 b6 ad ff ff       	call   c0001adb <tchar2uni>
c0006d25:	89 c6                	mov    esi,eax
c0006d27:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2c:	76 2a                	jbe    c0006d58 <f_setlabel+0x92>
c0006d2e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d31:	74 05                	je     c0006d38 <f_setlabel+0x72>
c0006d33:	83 fb 09             	cmp    ebx,0x9
c0006d36:	76 0a                	jbe    c0006d42 <f_setlabel+0x7c>
c0006d38:	be 06 00 00 00       	mov    esi,0x6
c0006d3d:	e9 e9 01 00 00       	jmp    c0006f2b <f_setlabel+0x265>
c0006d42:	89 c2                	mov    edx,eax
c0006d44:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d48:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4b:	c1 ea 10             	shr    edx,0x10
c0006d4e:	01 c8                	add    eax,ecx
c0006d50:	43                   	inc    ebx
c0006d51:	e8 1d ad ff ff       	call   c0001a73 <st_word>
c0006d56:	eb 04                	jmp    c0006d5c <f_setlabel+0x96>
c0006d58:	85 c0                	test   eax,eax
c0006d5a:	74 dc                	je     c0006d38 <f_setlabel+0x72>
c0006d5c:	89 f2                	mov    edx,esi
c0006d5e:	b8 77 68 02 c0       	mov    eax,0xc0026877
c0006d63:	e8 5b ad ff ff       	call   c0001ac3 <chk_chr>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	75 cc                	jne    c0006d38 <f_setlabel+0x72>
c0006d6c:	83 fb 0a             	cmp    ebx,0xa
c0006d6f:	77 c7                	ja     c0006d38 <f_setlabel+0x72>
c0006d71:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d74:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d78:	0f b7 d6             	movzx  edx,si
c0006d7b:	01 c8                	add    eax,ecx
c0006d7d:	43                   	inc    ebx
c0006d7e:	e8 f0 ac ff ff       	call   c0001a73 <st_word>
c0006d83:	eb 84                	jmp    c0006d09 <f_setlabel+0x43>
c0006d85:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8a:	ba 20 00 00 00       	mov    edx,0x20
c0006d8f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d93:	31 db                	xor    ebx,ebx
c0006d95:	e8 fb ac ff ff       	call   c0001a95 <mem_set>
c0006d9a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da4:	76 60                	jbe    c0006e06 <f_setlabel+0x140>
c0006da6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dad:	e8 29 ad ff ff       	call   c0001adb <tchar2uni>
c0006db2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db7:	0f 87 7b ff ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006dbd:	83 ec 0c             	sub    esp,0xc
c0006dc0:	50                   	push   eax
c0006dc1:	e8 97 15 00 00       	call   c000835d <ff_wtoupper>
c0006dc6:	5a                   	pop    edx
c0006dc7:	59                   	pop    ecx
c0006dc8:	68 b5 01 00 00       	push   0x1b5
c0006dcd:	50                   	push   eax
c0006dce:	e8 8e 14 00 00       	call   c0008261 <ff_uni2oem>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	89 c6                	mov    esi,eax
c0006dd8:	66 85 c0             	test   ax,ax
c0006ddb:	0f 84 57 ff ff ff    	je     c0006d38 <f_setlabel+0x72>
c0006de1:	0f b7 d0             	movzx  edx,ax
c0006de4:	b8 70 68 02 c0       	mov    eax,0xc0026870
c0006de9:	e8 d5 ac ff ff       	call   c0001ac3 <chk_chr>
c0006dee:	85 c0                	test   eax,eax
c0006df0:	0f 85 42 ff ff ff    	jne    c0006d38 <f_setlabel+0x72>
c0006df6:	66 81 fe ff 00       	cmp    si,0xff
c0006dfb:	0f 87 14 01 00 00    	ja     c0006f15 <f_setlabel+0x24f>
c0006e01:	e9 fa 00 00 00       	jmp    c0006f00 <f_setlabel+0x23a>
c0006e06:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0b:	0f 84 27 ff ff ff    	je     c0006d38 <f_setlabel+0x72>
c0006e11:	85 db                	test   ebx,ebx
c0006e13:	74 0e                	je     c0006e23 <f_setlabel+0x15d>
c0006e15:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e18:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1d:	75 04                	jne    c0006e23 <f_setlabel+0x15d>
c0006e1f:	89 c3                	mov    ebx,eax
c0006e21:	eb ee                	jmp    c0006e11 <f_setlabel+0x14b>
c0006e23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e27:	31 d2                	xor    edx,edx
c0006e29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e39:	e8 1f c1 ff ff       	call   c0002f5d <dir_sdi>
c0006e3e:	89 c6                	mov    esi,eax
c0006e40:	85 c0                	test   eax,eax
c0006e42:	0f 85 e3 00 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006e48:	ba 01 00 00 00       	mov    edx,0x1
c0006e4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e51:	e8 17 c9 ff ff       	call   c000376d <dir_read>
c0006e56:	85 c0                	test   eax,eax
c0006e58:	75 21                	jne    c0006e7b <f_setlabel+0x1b5>
c0006e5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e5e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e62:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e65:	74 5d                	je     c0006ec4 <f_setlabel+0x1fe>
c0006e67:	85 db                	test   ebx,ebx
c0006e69:	74 0b                	je     c0006e76 <f_setlabel+0x1b0>
c0006e6b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e70:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x220>
c0006e76:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e79:	eb 70                	jmp    c0006eeb <f_setlabel+0x225>
c0006e7b:	83 f8 04             	cmp    eax,0x4
c0006e7e:	75 7c                	jne    c0006efc <f_setlabel+0x236>
c0006e80:	85 db                	test   ebx,ebx
c0006e82:	0f 84 a3 00 00 00    	je     c0006f2b <f_setlabel+0x265>
c0006e88:	ba 01 00 00 00       	mov    edx,0x1
c0006e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e91:	e8 51 ca ff ff       	call   c00038e7 <dir_alloc>
c0006e96:	89 c6                	mov    esi,eax
c0006e98:	85 c0                	test   eax,eax
c0006e9a:	0f 85 8b 00 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006ea0:	31 d2                	xor    edx,edx
c0006ea2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea6:	b9 20 00 00 00       	mov    ecx,0x20
c0006eab:	e8 e5 ab ff ff       	call   c0001a95 <mem_set>
c0006eb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebb:	75 18                	jne    c0006ed5 <f_setlabel+0x20f>
c0006ebd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec7:	b9 16 00 00 00       	mov    ecx,0x16
c0006ecc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed0:	83 c0 02             	add    eax,0x2
c0006ed3:	eb 9b                	jmp    c0006e70 <f_setlabel+0x1aa>
c0006ed5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ede:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee6:	e8 95 ab ff ff       	call   c0001a80 <mem_cpy>
c0006eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eef:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef7:	e8 0e d4 ff ff       	call   c000430a <sync_fs>
c0006efc:	89 c6                	mov    esi,eax
c0006efe:	eb 2b                	jmp    c0006f2b <f_setlabel+0x265>
c0006f00:	83 fb 0a             	cmp    ebx,0xa
c0006f03:	0f 87 2f fe ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006f09:	89 f0                	mov    eax,esi
c0006f0b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0f:	43                   	inc    ebx
c0006f10:	e9 85 fe ff ff       	jmp    c0006d9a <f_setlabel+0xd4>
c0006f15:	83 fb 09             	cmp    ebx,0x9
c0006f18:	0f 87 1a fe ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006f1e:	89 f0                	mov    eax,esi
c0006f20:	66 c1 e8 08          	shr    ax,0x8
c0006f24:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f28:	43                   	inc    ebx
c0006f29:	eb de                	jmp    c0006f09 <f_setlabel+0x243>
c0006f2b:	89 f0                	mov    eax,esi
c0006f2d:	83 c4 74             	add    esp,0x74
c0006f30:	5b                   	pop    ebx
c0006f31:	5e                   	pop    esi
c0006f32:	c3                   	ret    

c0006f33 <f_forward>:
c0006f33:	55                   	push   ebp
c0006f34:	57                   	push   edi
c0006f35:	56                   	push   esi
c0006f36:	53                   	push   ebx
c0006f37:	83 ec 2c             	sub    esp,0x2c
c0006f3a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f3e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f48:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4c:	89 d8                	mov    eax,ebx
c0006f4e:	e8 b1 b1 ff ff       	call   c0002104 <validate>
c0006f53:	89 c5                	mov    ebp,eax
c0006f55:	85 c0                	test   eax,eax
c0006f57:	0f 85 aa 01 00 00    	jne    c0007107 <f_forward+0x1d4>
c0006f5d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f61:	85 ed                	test   ebp,ebp
c0006f63:	0f 85 9e 01 00 00    	jne    c0007107 <f_forward+0x1d4>
c0006f69:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6d:	0f 84 8f 01 00 00    	je     c0007102 <f_forward+0x1cf>
c0006f73:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f76:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f79:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7c:	bf 00 00 00 00       	mov    edi,0x0
c0006f81:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f84:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f88:	89 d1                	mov    ecx,edx
c0006f8a:	19 f9                	sbb    ecx,edi
c0006f8c:	0f 83 cf 00 00 00    	jae    c0007061 <f_forward+0x12e>
c0006f92:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f96:	e9 c6 00 00 00       	jmp    c0007061 <f_forward+0x12e>
c0006f9b:	50                   	push   eax
c0006f9c:	50                   	push   eax
c0006f9d:	6a 00                	push   0x0
c0006f9f:	6a 00                	push   0x0
c0006fa1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 84 57 01 00 00    	je     c0007107 <f_forward+0x1d4>
c0006fb0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fba:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fbe:	89 d7                	mov    edi,edx
c0006fc0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc3:	89 c6                	mov    esi,eax
c0006fc5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc9:	21 ce                	and    esi,ecx
c0006fcb:	89 c1                	mov    ecx,eax
c0006fcd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd3:	0f 84 98 00 00 00    	je     c0007071 <f_forward+0x13e>
c0006fd9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe0:	89 c8                	mov    eax,ecx
c0006fe2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe6:	e8 af ac ff ff       	call   c0001c9a <clst2sect>
c0006feb:	89 d7                	mov    edi,edx
c0006fed:	09 c7                	or     edi,eax
c0006fef:	0f 84 9e 00 00 00    	je     c0007093 <f_forward+0x160>
c0006ff5:	31 ff                	xor    edi,edi
c0006ff7:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffa:	01 c6                	add    esi,eax
c0006ffc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007000:	11 d7                	adc    edi,edx
c0007002:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007005:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007008:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700c:	39 fa                	cmp    edx,edi
c000700e:	0f 85 a2 00 00 00    	jne    c00070b6 <f_forward+0x183>
c0007014:	39 f0                	cmp    eax,esi
c0007016:	0f 85 9a 00 00 00    	jne    c00070b6 <f_forward+0x183>
c000701c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701f:	ba 00 02 00 00       	mov    edx,0x200
c0007024:	25 ff 01 00 00       	and    eax,0x1ff
c0007029:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702d:	29 c2                	sub    edx,eax
c000702f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007032:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007035:	39 d1                	cmp    ecx,edx
c0007037:	76 02                	jbe    c000703b <f_forward+0x108>
c0007039:	89 d1                	mov    ecx,edx
c000703b:	8d 73 50             	lea    esi,[ebx+0x50]
c000703e:	52                   	push   edx
c000703f:	01 c6                	add    esi,eax
c0007041:	52                   	push   edx
c0007042:	51                   	push   ecx
c0007043:	56                   	push   esi
c0007044:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007048:	83 c4 10             	add    esp,0x10
c000704b:	85 c0                	test   eax,eax
c000704d:	74 44                	je     c0007093 <f_forward+0x160>
c000704f:	31 ff                	xor    edi,edi
c0007051:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007054:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007057:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705f:	01 07                	add    DWORD PTR [edi],eax
c0007061:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007066:	0f 85 2f ff ff ff    	jne    c0006f9b <f_forward+0x68>
c000706c:	e9 96 00 00 00       	jmp    c0007107 <f_forward+0x1d4>
c0007071:	85 f6                	test   esi,esi
c0007073:	0f 85 60 ff ff ff    	jne    c0006fd9 <f_forward+0xa6>
c0007079:	89 d7                	mov    edi,edx
c000707b:	09 c7                	or     edi,eax
c000707d:	75 05                	jne    c0007084 <f_forward+0x151>
c000707f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007082:	eb 0a                	jmp    c000708e <f_forward+0x15b>
c0007084:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007087:	89 d8                	mov    eax,ebx
c0007089:	e8 d9 bc ff ff       	call   c0002d67 <get_fat>
c000708e:	83 f8 01             	cmp    eax,0x1
c0007091:	77 0b                	ja     c000709e <f_forward+0x16b>
c0007093:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007097:	bd 02 00 00 00       	mov    ebp,0x2
c000709c:	eb 69                	jmp    c0007107 <f_forward+0x1d4>
c000709e:	83 f8 ff             	cmp    eax,0xffffffff
c00070a1:	75 0b                	jne    c00070ae <f_forward+0x17b>
c00070a3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a7:	bd 01 00 00 00       	mov    ebp,0x1
c00070ac:	eb 59                	jmp    c0007107 <f_forward+0x1d4>
c00070ae:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b1:	e9 23 ff ff ff       	jmp    c0006fd9 <f_forward+0xa6>
c00070b6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ba:	79 20                	jns    c00070dc <f_forward+0x1a9>
c00070bc:	83 ec 0c             	sub    esp,0xc
c00070bf:	6a 01                	push   0x1
c00070c1:	52                   	push   edx
c00070c2:	50                   	push   eax
c00070c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cb:	50                   	push   eax
c00070cc:	e8 fb a8 ff ff       	call   c00019cc <disk_write>
c00070d1:	83 c4 20             	add    esp,0x20
c00070d4:	85 c0                	test   eax,eax
c00070d6:	75 cb                	jne    c00070a3 <f_forward+0x170>
c00070d8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070dc:	83 ec 0c             	sub    esp,0xc
c00070df:	6a 01                	push   0x1
c00070e1:	57                   	push   edi
c00070e2:	56                   	push   esi
c00070e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070eb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ef:	50                   	push   eax
c00070f0:	e8 c1 a8 ff ff       	call   c00019b6 <disk_read>
c00070f5:	83 c4 20             	add    esp,0x20
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 84 1c ff ff ff    	je     c000701c <f_forward+0xe9>
c0007100:	eb a1                	jmp    c00070a3 <f_forward+0x170>
c0007102:	bd 07 00 00 00       	mov    ebp,0x7
c0007107:	83 c4 2c             	add    esp,0x2c
c000710a:	89 e8                	mov    eax,ebp
c000710c:	5b                   	pop    ebx
c000710d:	5e                   	pop    esi
c000710e:	5f                   	pop    edi
c000710f:	5d                   	pop    ebp
c0007110:	c3                   	ret    

c0007111 <f_mkfs>:
c0007111:	55                   	push   ebp
c0007112:	57                   	push   edi
c0007113:	56                   	push   esi
c0007114:	53                   	push   ebx
c0007115:	bb 0b 00 00 00       	mov    ebx,0xb
c000711a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007120:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007127:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000712e:	e8 b0 ae ff ff       	call   c0001fe3 <get_ldnumber>
c0007133:	85 c0                	test   eax,eax
c0007135:	0f 88 ec 10 00 00    	js     c0008227 <f_mkfs+0x1116>
c000713b:	8b 14 85 60 b0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4fa0]
c0007142:	85 d2                	test   edx,edx
c0007144:	74 03                	je     c0007149 <f_mkfs+0x38>
c0007146:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007149:	85 f6                	test   esi,esi
c000714b:	75 05                	jne    c0007152 <f_mkfs+0x41>
c000714d:	be 60 68 02 c0       	mov    esi,0xc0026860
c0007152:	83 ec 0c             	sub    esp,0xc
c0007155:	0f b6 c0             	movzx  eax,al
c0007158:	bb 03 00 00 00       	mov    ebx,0x3
c000715d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007161:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007165:	e8 49 a8 ff ff       	call   c00019b3 <disk_initialize>
c000716a:	83 c4 10             	add    esp,0x10
c000716d:	a8 01                	test   al,0x1
c000716f:	0f 85 b2 10 00 00    	jne    c0008227 <f_mkfs+0x1116>
c0007175:	bb 0a 00 00 00       	mov    ebx,0xa
c000717a:	a8 04                	test   al,0x4
c000717c:	0f 85 a5 10 00 00    	jne    c0008227 <f_mkfs+0x1116>
c0007182:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007185:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007189:	85 c0                	test   eax,eax
c000718b:	75 20                	jne    c00071ad <f_mkfs+0x9c>
c000718d:	51                   	push   ecx
c000718e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007192:	50                   	push   eax
c0007193:	6a 03                	push   0x3
c0007195:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007199:	e8 44 a8 ff ff       	call   c00019e2 <disk_ioctl>
c000719e:	83 c4 10             	add    esp,0x10
c00071a1:	85 c0                	test   eax,eax
c00071a3:	74 08                	je     c00071ad <f_mkfs+0x9c>
c00071a5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071ad:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b9:	77 04                	ja     c00071bf <f_mkfs+0xae>
c00071bb:	85 c2                	test   edx,eax
c00071bd:	74 08                	je     c00071c7 <f_mkfs+0xb6>
c00071bf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071ca:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071ce:	48                   	dec    eax
c00071cf:	3c 01                	cmp    al,0x1
c00071d1:	76 05                	jbe    c00071d8 <f_mkfs+0xc7>
c00071d3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071d8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071df:	48                   	dec    eax
c00071e0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e5:	77 07                	ja     c00071ee <f_mkfs+0xdd>
c00071e7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0xe5>
c00071ee:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f9:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071ff:	77 07                	ja     c0007208 <f_mkfs+0xf7>
c0007201:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007204:	85 d8                	test   eax,ebx
c0007206:	74 02                	je     c000720a <f_mkfs+0xf9>
c0007208:	31 db                	xor    ebx,ebx
c000720a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007215:	77 0a                	ja     c0007221 <f_mkfs+0x110>
c0007217:	bb 11 00 00 00       	mov    ebx,0x11
c000721c:	e9 06 10 00 00       	jmp    c0008227 <f_mkfs+0x1116>
c0007221:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007228:	8b 36                	mov    esi,DWORD PTR [esi]
c000722a:	85 ed                	test   ebp,ebp
c000722c:	75 1e                	jne    c000724c <f_mkfs+0x13b>
c000722e:	83 ec 0c             	sub    esp,0xc
c0007231:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007238:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723d:	50                   	push   eax
c000723e:	e8 f1 0f 00 00       	call   c0008234 <ff_memalloc>
c0007243:	83 c4 10             	add    esp,0x10
c0007246:	89 c5                	mov    ebp,eax
c0007248:	85 c0                	test   eax,eax
c000724a:	74 cb                	je     c0007217 <f_mkfs+0x106>
c000724c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007254:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725c:	52                   	push   edx
c000725d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007261:	50                   	push   eax
c0007262:	6a 01                	push   0x1
c0007264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007268:	e8 75 a7 ff ff       	call   c00019e2 <disk_ioctl>
c000726d:	83 c4 10             	add    esp,0x10
c0007270:	85 c0                	test   eax,eax
c0007272:	0f 85 4a 0f 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007278:	89 f1                	mov    ecx,esi
c000727a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007282:	83 e1 0f             	and    ecx,0xf
c0007285:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007291:	83 e6 08             	and    esi,0x8
c0007294:	75 56                	jne    c00072ec <f_mkfs+0x1db>
c0007296:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000729e:	83 ff 00             	cmp    edi,0x0
c00072a1:	76 20                	jbe    c00072c3 <f_mkfs+0x1b2>
c00072a3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b6:	83 d7 ff             	adc    edi,0xffffffff
c00072b9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c1:	eb 21                	jmp    c00072e4 <f_mkfs+0x1d3>
c00072c3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c8:	39 f2                	cmp    edx,esi
c00072ca:	19 f8                	sbb    eax,edi
c00072cc:	73 1e                	jae    c00072ec <f_mkfs+0x1db>
c00072ce:	83 c6 c1             	add    esi,0xffffffc1
c00072d1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d9:	83 d7 ff             	adc    edi,0xffffffff
c00072dc:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fb:	31 c0                	xor    eax,eax
c00072fd:	ba 7f 00 00 00       	mov    edx,0x7f
c0007302:	89 c7                	mov    edi,eax
c0007304:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007307:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730b:	0f 83 c5 0a 00 00    	jae    c0007dd6 <f_mkfs+0xcc5>
c0007311:	89 df                	mov    edi,ebx
c0007313:	c1 ef 09             	shr    edi,0x9
c0007316:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007321:	c1 ef 09             	shr    edi,0x9
c0007324:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007329:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732d:	74 29                	je     c0007358 <f_mkfs+0x247>
c000732f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007335:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733a:	0f 97 c2             	seta   dl
c000733d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007340:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007344:	0f 92 c0             	setb   al
c0007347:	08 c2                	or     dl,al
c0007349:	75 5b                	jne    c00073a6 <f_mkfs+0x295>
c000734b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734f:	83 e0 07             	and    eax,0x7
c0007352:	3c 04                	cmp    al,0x4
c0007354:	74 50                	je     c00073a6 <f_mkfs+0x295>
c0007356:	eb 1b                	jmp    c0007373 <f_mkfs+0x262>
c0007358:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735d:	0f 87 73 0a 00 00    	ja     c0007dd6 <f_mkfs+0xcc5>
c0007363:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007369:	76 08                	jbe    c0007373 <f_mkfs+0x262>
c000736b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007373:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007377:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737b:	83 e0 01             	and    eax,0x1
c000737e:	80 e1 02             	and    cl,0x2
c0007381:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007385:	74 0d                	je     c0007394 <f_mkfs+0x283>
c0007387:	84 c0                	test   al,al
c0007389:	0f 84 53 09 00 00    	je     c0007ce2 <f_mkfs+0xbd1>
c000738f:	e9 12 08 00 00       	jmp    c0007ba6 <f_mkfs+0xa95>
c0007394:	bb 13 00 00 00       	mov    ebx,0x13
c0007399:	84 c0                	test   al,al
c000739b:	0f 85 05 08 00 00    	jne    c0007ba6 <f_mkfs+0xa95>
c00073a1:	e9 39 0e 00 00       	jmp    c00081df <f_mkfs+0x10ce>
c00073a6:	31 c0                	xor    eax,eax
c00073a8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ad:	89 c7                	mov    edi,eax
c00073af:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b6:	0f 83 1a 0a 00 00    	jae    c0007dd6 <f_mkfs+0xcc5>
c00073bc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c2:	77 39                	ja     c00073fd <f_mkfs+0x2ec>
c00073c4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d8:	73 08                	jae    c00073e2 <f_mkfs+0x2d1>
c00073da:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ea:	b8 00 00 00 00       	mov    eax,0x0
c00073ef:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f3:	73 08                	jae    c00073fd <f_mkfs+0x2ec>
c00073f5:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007401:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007405:	83 c0 20             	add    eax,0x20
c0007408:	83 d2 00             	adc    edx,0x0
c000740b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000740f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007413:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007417:	31 d2                	xor    edx,edx
c0007419:	31 ff                	xor    edi,edi
c000741b:	52                   	push   edx
c000741c:	89 fb                	mov    ebx,edi
c000741e:	50                   	push   eax
c000741f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007423:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007427:	e8 00 cb 01 00       	call   c0023f2c <__udivdi3>
c000742c:	83 c4 10             	add    esp,0x10
c000742f:	c1 e0 02             	shl    eax,0x2
c0007432:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007436:	05 07 02 00 00       	add    eax,0x207
c000743b:	89 f1                	mov    ecx,esi
c000743d:	c1 e8 09             	shr    eax,0x9
c0007440:	83 c1 ff             	add    ecx,0xffffffff
c0007443:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007447:	83 d3 ff             	adc    ebx,0xffffffff
c000744a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000744e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007452:	31 d2                	xor    edx,edx
c0007454:	01 c8                	add    eax,ecx
c0007456:	11 da                	adc    edx,ebx
c0007458:	89 c1                	mov    ecx,eax
c000745a:	f7 de                	neg    esi
c000745c:	89 d0                	mov    eax,edx
c000745e:	83 d7 00             	adc    edi,0x0
c0007461:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007465:	f7 df                	neg    edi
c0007467:	21 f1                	and    ecx,esi
c0007469:	21 f8                	and    eax,edi
c000746b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000746f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007473:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007477:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000747f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007482:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007486:	0f ac d0 01          	shrd   eax,edx,0x1
c000748a:	89 df                	mov    edi,ebx
c000748c:	d1 ea                	shr    edx,1
c000748e:	39 c1                	cmp    ecx,eax
c0007490:	19 d7                	sbb    edi,edx
c0007492:	0f 83 3e 09 00 00    	jae    c0007dd6 <f_mkfs+0xcc5>
c0007498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749c:	31 d2                	xor    edx,edx
c000749e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ad:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bd:	83 f8 0f             	cmp    eax,0xf
c00074c0:	0f 86 10 09 00 00    	jbe    c0007dd6 <f_mkfs+0xcc5>
c00074c6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074ce:	0f 87 02 09 00 00    	ja     c0007dd6 <f_mkfs+0xcc5>
c00074d4:	31 d2                	xor    edx,edx
c00074d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074da:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e2:	83 c0 07             	add    eax,0x7
c00074e5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ed:	c1 e8 03             	shr    eax,0x3
c00074f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074ff:	c1 e0 09             	shl    eax,0x9
c0007502:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007506:	48                   	dec    eax
c0007507:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000750f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007513:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007517:	31 d2                	xor    edx,edx
c0007519:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007531:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007535:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007539:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753d:	31 ff                	xor    edi,edi
c000753f:	31 f6                	xor    esi,esi
c0007541:	31 db                	xor    ebx,ebx
c0007543:	85 ff                	test   edi,edi
c0007545:	74 05                	je     c000754c <f_mkfs+0x43b>
c0007547:	4f                   	dec    edi
c0007548:	74 44                	je     c000758e <f_mkfs+0x47d>
c000754a:	eb 4f                	jmp    c000759b <f_mkfs+0x48a>
c000754c:	83 ec 0c             	sub    esp,0xc
c000754f:	0f b7 c3             	movzx  eax,bx
c0007552:	50                   	push   eax
c0007553:	e8 05 0e 00 00       	call   c000835d <ff_wtoupper>
c0007558:	83 c4 10             	add    esp,0x10
c000755b:	89 c1                	mov    ecx,eax
c000755d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007560:	66 39 c3             	cmp    bx,ax
c0007563:	75 3e                	jne    c00075a3 <f_mkfs+0x492>
c0007565:	be 01 00 00 00       	mov    esi,0x1
c000756a:	89 df                	mov    edi,ebx
c000756c:	66 01 f7             	add    di,si
c000756f:	75 07                	jne    c0007578 <f_mkfs+0x467>
c0007571:	83 fe 7f             	cmp    esi,0x7f
c0007574:	77 31                	ja     c00075a7 <f_mkfs+0x496>
c0007576:	eb 16                	jmp    c000758e <f_mkfs+0x47d>
c0007578:	83 ec 0c             	sub    esp,0xc
c000757b:	0f b7 ff             	movzx  edi,di
c000757e:	57                   	push   edi
c000757f:	e8 d9 0d 00 00       	call   c000835d <ff_wtoupper>
c0007584:	83 c4 10             	add    esp,0x10
c0007587:	39 c7                	cmp    edi,eax
c0007589:	75 e6                	jne    c0007571 <f_mkfs+0x460>
c000758b:	46                   	inc    esi
c000758c:	eb dc                	jmp    c000756a <f_mkfs+0x459>
c000758e:	31 c0                	xor    eax,eax
c0007590:	89 d9                	mov    ecx,ebx
c0007592:	4e                   	dec    esi
c0007593:	0f 95 c0             	setne  al
c0007596:	43                   	inc    ebx
c0007597:	89 c7                	mov    edi,eax
c0007599:	eb 14                	jmp    c00075af <f_mkfs+0x49e>
c000759b:	89 f1                	mov    ecx,esi
c000759d:	01 f3                	add    ebx,esi
c000759f:	31 ff                	xor    edi,edi
c00075a1:	eb 0c                	jmp    c00075af <f_mkfs+0x49e>
c00075a3:	89 d3                	mov    ebx,edx
c00075a5:	eb 08                	jmp    c00075af <f_mkfs+0x49e>
c00075a7:	bf 02 00 00 00       	mov    edi,0x2
c00075ac:	83 c9 ff             	or     ecx,0xffffffff
c00075af:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ba:	0f b6 c1             	movzx  eax,cl
c00075bd:	e8 3a a9 ff ff       	call   c0001efc <xsum32>
c00075c2:	66 c1 e9 08          	shr    cx,0x8
c00075c6:	89 c2                	mov    edx,eax
c00075c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cb:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075cf:	0f b7 c1             	movzx  eax,cx
c00075d2:	e8 25 a9 ff ff       	call   c0001efc <xsum32>
c00075d7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075dc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e0:	66 85 db             	test   bx,bx
c00075e3:	74 1f                	je     c0007604 <f_mkfs+0x4f3>
c00075e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075e8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ef:	83 c0 02             	add    eax,0x2
c00075f2:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075f8:	39 c2                	cmp    edx,eax
c00075fa:	74 08                	je     c0007604 <f_mkfs+0x4f3>
c00075fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ff:	e9 3f ff ff ff       	jmp    c0007543 <f_mkfs+0x432>
c0007604:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007607:	83 ec 0c             	sub    esp,0xc
c000760a:	05 01 02 00 00       	add    eax,0x201
c000760f:	c1 e8 09             	shr    eax,0x9
c0007612:	50                   	push   eax
c0007613:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007617:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761f:	55                   	push   ebp
c0007620:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007624:	e8 a3 a3 ff ff       	call   c00019cc <disk_write>
c0007629:	83 c4 20             	add    esp,0x20
c000762c:	85 c0                	test   eax,eax
c000762e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007631:	0f 85 8b 0b 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007637:	89 d0                	mov    eax,edx
c0007639:	31 d2                	xor    edx,edx
c000763b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000763f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007643:	66 85 db             	test   bx,bx
c0007646:	74 04                	je     c000764c <f_mkfs+0x53b>
c0007648:	31 c0                	xor    eax,eax
c000764a:	eb b0                	jmp    c00075fc <f_mkfs+0x4eb>
c000764c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007650:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007654:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007658:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000765e:	31 d2                	xor    edx,edx
c0007660:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000766f:	c1 eb 09             	shr    ebx,0x9
c0007672:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007679:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007685:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007689:	8d 70 01             	lea    esi,[eax+0x1]
c000768c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007690:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007694:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769b:	31 d2                	xor    edx,edx
c000769d:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a5:	89 c1                	mov    ecx,eax
c00076a7:	89 e8                	mov    eax,ebp
c00076a9:	e8 e7 a3 ff ff       	call   c0001a95 <mem_set>
c00076ae:	31 c0                	xor    eax,eax
c00076b0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b3:	76 10                	jbe    c00076c5 <f_mkfs+0x5b4>
c00076b5:	83 fe 07             	cmp    esi,0x7
c00076b8:	76 0b                	jbe    c00076c5 <f_mkfs+0x5b4>
c00076ba:	40                   	inc    eax
c00076bb:	83 ee 08             	sub    esi,0x8
c00076be:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c3:	eb eb                	jmp    c00076b0 <f_mkfs+0x59f>
c00076c5:	b2 01                	mov    dl,0x1
c00076c7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cb:	85 f6                	test   esi,esi
c00076cd:	74 0c                	je     c00076db <f_mkfs+0x5ca>
c00076cf:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d2:	76 07                	jbe    c00076db <f_mkfs+0x5ca>
c00076d4:	08 11                	or     BYTE PTR [ecx],dl
c00076d6:	4e                   	dec    esi
c00076d7:	d1 e2                	shl    edx,1
c00076d9:	eb f0                	jmp    c00076cb <f_mkfs+0x5ba>
c00076db:	89 df                	mov    edi,ebx
c00076dd:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e1:	76 04                	jbe    c00076e7 <f_mkfs+0x5d6>
c00076e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	57                   	push   edi
c00076eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f3:	55                   	push   ebp
c00076f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076f8:	e8 cf a2 ff ff       	call   c00019cc <disk_write>
c00076fd:	83 c4 20             	add    esp,0x20
c0007700:	85 c0                	test   eax,eax
c0007702:	0f 85 ba 0a 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007708:	31 d2                	xor    edx,edx
c000770a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000770e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007712:	29 fb                	sub    ebx,edi
c0007714:	0f 85 7a ff ff ff    	jne    c0007694 <f_mkfs+0x583>
c000771a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000771e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007726:	31 f6                	xor    esi,esi
c0007728:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000772f:	31 d2                	xor    edx,edx
c0007731:	89 e8                	mov    eax,ebp
c0007733:	e8 5d a3 ff ff       	call   c0001a95 <mem_set>
c0007738:	31 c9                	xor    ecx,ecx
c000773a:	85 db                	test   ebx,ebx
c000773c:	75 40                	jne    c000777e <f_mkfs+0x66d>
c000773e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007743:	89 e8                	mov    eax,ebp
c0007745:	bb 02 00 00 00       	mov    ebx,0x2
c000774a:	e8 28 a3 ff ff       	call   c0001a77 <st_dword>
c000774f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007752:	83 ca ff             	or     edx,0xffffffff
c0007755:	e8 1d a3 ff ff       	call   c0001a77 <st_dword>
c000775a:	b9 08 00 00 00       	mov    ecx,0x8
c000775f:	eb 1d                	jmp    c000777e <f_mkfs+0x66d>
c0007761:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007764:	76 3b                	jbe    c00077a1 <f_mkfs+0x690>
c0007766:	43                   	inc    ebx
c0007767:	83 fe 01             	cmp    esi,0x1
c000776a:	89 da                	mov    edx,ebx
c000776c:	77 03                	ja     c0007771 <f_mkfs+0x660>
c000776e:	83 ca ff             	or     edx,0xffffffff
c0007771:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007775:	4e                   	dec    esi
c0007776:	e8 fc a2 ff ff       	call   c0001a77 <st_dword>
c000777b:	83 c1 04             	add    ecx,0x4
c000777e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007782:	85 f6                	test   esi,esi
c0007784:	75 db                	jne    c0007761 <f_mkfs+0x650>
c0007786:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778b:	77 14                	ja     c00077a1 <f_mkfs+0x690>
c000778d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007791:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007798:	85 f6                	test   esi,esi
c000779a:	74 05                	je     c00077a1 <f_mkfs+0x690>
c000779c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000779f:	77 dd                	ja     c000777e <f_mkfs+0x66d>
c00077a1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a9:	39 cf                	cmp    edi,ecx
c00077ab:	76 02                	jbe    c00077af <f_mkfs+0x69e>
c00077ad:	89 cf                	mov    edi,ecx
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	57                   	push   edi
c00077b3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bb:	55                   	push   ebp
c00077bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c0:	e8 07 a2 ff ff       	call   c00019cc <disk_write>
c00077c5:	83 c4 20             	add    esp,0x20
c00077c8:	85 c0                	test   eax,eax
c00077ca:	0f 85 f2 09 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c00077d0:	31 d2                	xor    edx,edx
c00077d2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077da:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077de:	0f 85 48 ff ff ff    	jne    c000772c <f_mkfs+0x61b>
c00077e4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e7:	31 d2                	xor    edx,edx
c00077e9:	89 e8                	mov    eax,ebp
c00077eb:	31 ff                	xor    edi,edi
c00077ed:	e8 a3 a2 ff ff       	call   c0001a95 <mem_set>
c00077f2:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f5:	ba 02 00 00 00       	mov    edx,0x2
c00077fa:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077fe:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007802:	e8 70 a2 ff ff       	call   c0001a77 <st_dword>
c0007807:	8d 45 38             	lea    eax,[ebp+0x38]
c000780a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000780e:	e8 64 a2 ff ff       	call   c0001a77 <st_dword>
c0007813:	8d 45 44             	lea    eax,[ebp+0x44]
c0007816:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000781e:	e8 54 a2 ff ff       	call   c0001a77 <st_dword>
c0007823:	8d 45 54             	lea    eax,[ebp+0x54]
c0007826:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000782e:	83 c2 02             	add    edx,0x2
c0007831:	e8 41 a2 ff ff       	call   c0001a77 <st_dword>
c0007836:	8d 45 58             	lea    eax,[ebp+0x58]
c0007839:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007841:	e8 31 a2 ff ff       	call   c0001a77 <st_dword>
c0007846:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000784f:	89 c6                	mov    esi,eax
c0007851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007855:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007859:	89 04 24             	mov    DWORD PTR [esp],eax
c000785c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007860:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007863:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007867:	39 cb                	cmp    ebx,ecx
c0007869:	76 02                	jbe    c000786d <f_mkfs+0x75c>
c000786b:	89 cb                	mov    ebx,ecx
c000786d:	83 ec 0c             	sub    esp,0xc
c0007870:	53                   	push   ebx
c0007871:	57                   	push   edi
c0007872:	56                   	push   esi
c0007873:	55                   	push   ebp
c0007874:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007878:	e8 4f a1 ff ff       	call   c00019cc <disk_write>
c000787d:	83 c4 20             	add    esp,0x20
c0007880:	85 c0                	test   eax,eax
c0007882:	0f 85 3a 09 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007888:	31 d2                	xor    edx,edx
c000788a:	b9 00 02 00 00       	mov    ecx,0x200
c000788f:	89 e8                	mov    eax,ebp
c0007891:	e8 ff a1 ff ff       	call   c0001a95 <mem_set>
c0007896:	31 d2                	xor    edx,edx
c0007898:	01 de                	add    esi,ebx
c000789a:	11 d7                	adc    edi,edx
c000789c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000789f:	75 bf                	jne    c0007860 <f_mkfs+0x74f>
c00078a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b1:	b9 00 02 00 00       	mov    ecx,0x200
c00078b6:	31 d2                	xor    edx,edx
c00078b8:	89 e8                	mov    eax,ebp
c00078ba:	e8 d6 a1 ff ff       	call   c0001a95 <mem_set>
c00078bf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c4:	ba 40 69 02 c0       	mov    edx,0xc0026940
c00078c9:	89 e8                	mov    eax,ebp
c00078cb:	e8 b0 a1 ff ff       	call   c0001a80 <mem_cpy>
c00078d0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078db:	e8 9a a1 ff ff       	call   c0001a7a <st_qword>
c00078e0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078eb:	e8 8a a1 ff ff       	call   c0001a7a <st_qword>
c00078f0:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f3:	ba 20 00 00 00       	mov    edx,0x20
c00078f8:	e8 7a a1 ff ff       	call   c0001a77 <st_dword>
c00078fd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007901:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007905:	e8 6d a1 ff ff       	call   c0001a77 <st_dword>
c000790a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000790e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007912:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007916:	e8 5c a1 ff ff       	call   c0001a77 <st_dword>
c000791b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000791e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007922:	e8 50 a1 ff ff       	call   c0001a77 <st_dword>
c0007927:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792b:	8d 50 02             	lea    edx,[eax+0x2]
c000792e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007931:	e8 41 a1 ff ff       	call   c0001a77 <st_dword>
c0007936:	8d 45 64             	lea    eax,[ebp+0x64]
c0007939:	ba 00 00 21 50       	mov    edx,0x50210000
c000793e:	e8 34 a1 ff ff       	call   c0001a77 <st_dword>
c0007943:	8d 45 68             	lea    eax,[ebp+0x68]
c0007946:	ba 00 01 00 00       	mov    edx,0x100
c000794b:	e8 23 a1 ff ff       	call   c0001a73 <st_word>
c0007950:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007954:	b8 0a 00 00 00       	mov    eax,0xa
c0007959:	48                   	dec    eax
c000795a:	74 05                	je     c0007961 <f_mkfs+0x850>
c000795c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000795f:	eb f8                	jmp    c0007959 <f_mkfs+0x848>
c0007961:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007965:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007969:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007971:	74 05                	je     c0007978 <f_mkfs+0x867>
c0007973:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007976:	eb f5                	jmp    c000796d <f_mkfs+0x85c>
c0007978:	8d 45 78             	lea    eax,[ebp+0x78]
c000797b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007980:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007986:	31 db                	xor    ebx,ebx
c0007988:	e8 e6 a0 ff ff       	call   c0001a73 <st_word>
c000798d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007993:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007998:	89 04 24             	mov    DWORD PTR [esp],eax
c000799b:	e8 d3 a0 ff ff       	call   c0001a73 <st_word>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a5:	83 f8 01             	cmp    eax,0x1
c00079a8:	76 13                	jbe    c00079bd <f_mkfs+0x8ac>
c00079aa:	83 f9 70             	cmp    ecx,0x70
c00079ad:	74 0e                	je     c00079bd <f_mkfs+0x8ac>
c00079af:	89 da                	mov    edx,ebx
c00079b1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b6:	e8 41 a5 ff ff       	call   c0001efc <xsum32>
c00079bb:	89 c3                	mov    ebx,eax
c00079bd:	41                   	inc    ecx
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 dc                	jne    c00079a2 <f_mkfs+0x891>
c00079c6:	89 f0                	mov    eax,esi
c00079c8:	89 fa                	mov    edx,edi
c00079ca:	83 c0 01             	add    eax,0x1
c00079cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d1:	83 d2 00             	adc    edx,0x0
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079db:	6a 01                	push   0x1
c00079dd:	57                   	push   edi
c00079de:	56                   	push   esi
c00079df:	55                   	push   ebp
c00079e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e4:	e8 e3 9f ff ff       	call   c00019cc <disk_write>
c00079e9:	83 c4 20             	add    esp,0x20
c00079ec:	85 c0                	test   eax,eax
c00079ee:	0f 85 ce 07 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c00079f4:	31 d2                	xor    edx,edx
c00079f6:	b9 00 02 00 00       	mov    ecx,0x200
c00079fb:	89 e8                	mov    eax,ebp
c00079fd:	e8 93 a0 ff ff       	call   c0001a95 <mem_set>
c0007a02:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0a:	e8 64 a0 ff ff       	call   c0001a73 <st_word>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	89 fa                	mov    edx,edi
c0007a13:	83 c0 09             	add    eax,0x9
c0007a16:	83 d2 00             	adc    edx,0x0
c0007a19:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a20:	31 c9                	xor    ecx,ecx
c0007a22:	41                   	inc    ecx
c0007a23:	89 da                	mov    edx,ebx
c0007a25:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2a:	e8 cd a4 ff ff       	call   c0001efc <xsum32>
c0007a2f:	89 c3                	mov    ebx,eax
c0007a31:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a37:	75 e9                	jne    c0007a22 <f_mkfs+0x911>
c0007a39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a41:	83 c0 01             	add    eax,0x1
c0007a44:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a48:	83 d2 00             	adc    edx,0x0
c0007a4b:	83 ec 0c             	sub    esp,0xc
c0007a4e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a52:	6a 01                	push   0x1
c0007a54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5c:	55                   	push   ebp
c0007a5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a61:	e8 66 9f ff ff       	call   c00019cc <disk_write>
c0007a66:	83 c4 20             	add    esp,0x20
c0007a69:	85 c0                	test   eax,eax
c0007a6b:	0f 85 51 07 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a75:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a79:	75 09                	jne    c0007a84 <f_mkfs+0x973>
c0007a7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a82:	74 12                	je     c0007a96 <f_mkfs+0x985>
c0007a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a94:	eb 8a                	jmp    c0007a20 <f_mkfs+0x90f>
c0007a96:	31 d2                	xor    edx,edx
c0007a98:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9d:	89 e8                	mov    eax,ebp
c0007a9f:	e8 f1 9f ff ff       	call   c0001a95 <mem_set>
c0007aa4:	83 c6 0b             	add    esi,0xb
c0007aa7:	83 d7 00             	adc    edi,0x0
c0007aaa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aae:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab2:	31 c9                	xor    ecx,ecx
c0007ab4:	41                   	inc    ecx
c0007ab5:	89 da                	mov    edx,ebx
c0007ab7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abc:	e8 3b a4 ff ff       	call   c0001efc <xsum32>
c0007ac1:	89 c3                	mov    ebx,eax
c0007ac3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac9:	75 e9                	jne    c0007ab4 <f_mkfs+0x9a3>
c0007acb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ace:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad2:	83 c6 01             	add    esi,0x1
c0007ad5:	83 d7 00             	adc    edi,0x0
c0007ad8:	83 ec 0c             	sub    esp,0xc
c0007adb:	6a 01                	push   0x1
c0007add:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae5:	55                   	push   ebp
c0007ae6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aea:	e8 dd 9e ff ff       	call   c00019cc <disk_write>
c0007aef:	83 c4 20             	add    esp,0x20
c0007af2:	85 c0                	test   eax,eax
c0007af4:	0f 85 c8 06 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007afa:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007afe:	75 06                	jne    c0007b06 <f_mkfs+0x9f5>
c0007b00:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b04:	74 09                	je     c0007b0f <f_mkfs+0x9fe>
c0007b06:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b09:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0d:	eb a3                	jmp    c0007ab2 <f_mkfs+0x9a1>
c0007b0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b13:	89 da                	mov    edx,ebx
c0007b15:	01 e8                	add    eax,ebp
c0007b17:	e8 5b 9f ff ff       	call   c0001a77 <st_dword>
c0007b1c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b21:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b29:	75 e4                	jne    c0007b0f <f_mkfs+0x9fe>
c0007b2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b32:	83 c6 02             	add    esi,0x2
c0007b35:	83 d7 00             	adc    edi,0x0
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	6a 01                	push   0x1
c0007b3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b45:	55                   	push   ebp
c0007b46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4a:	e8 7d 9e ff ff       	call   c00019cc <disk_write>
c0007b4f:	83 c4 20             	add    esp,0x20
c0007b52:	85 c0                	test   eax,eax
c0007b54:	0f 85 68 06 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007b5a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b5f:	74 0d                	je     c0007b6e <f_mkfs+0xa5d>
c0007b61:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b69:	e9 43 fd ff ff       	jmp    c00078b1 <f_mkfs+0x7a0>
c0007b6e:	b1 07                	mov    cl,0x7
c0007b70:	e9 e3 05 00 00       	jmp    c0008158 <f_mkfs+0x1047>
c0007b75:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7a:	0f 85 4f 02 00 00    	jne    c0007dcf <f_mkfs+0xcbe>
c0007b80:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b85:	0f 86 22 02 00 00    	jbe    c0007dad <f_mkfs+0xc9c>
c0007b8b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b90:	0f 85 81 06 00 00    	jne    c0008217 <f_mkfs+0x1106>
c0007b96:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9d:	83 f8 40             	cmp    eax,0x40
c0007ba0:	0f 87 51 06 00 00    	ja     c00081f7 <f_mkfs+0x10e6>
c0007ba6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007baa:	85 ff                	test   edi,edi
c0007bac:	75 1c                	jne    c0007bca <f_mkfs+0xab9>
c0007bae:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb1:	ba 40 68 02 c0       	mov    edx,0xc0026840
c0007bb6:	c1 e9 0c             	shr    ecx,0xc
c0007bb9:	bf 01 00 00 00       	mov    edi,0x1
c0007bbe:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc1:	66 85 c0             	test   ax,ax
c0007bc4:	0f 85 95 01 00 00    	jne    c0007d5f <f_mkfs+0xc4e>
c0007bca:	31 d2                	xor    edx,edx
c0007bcc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bcf:	f7 f7                	div    edi
c0007bd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd6:	0f 86 95 01 00 00    	jbe    c0007d71 <f_mkfs+0xc60>
c0007bdc:	83 c0 02             	add    eax,0x2
c0007bdf:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be4:	01 c0                	add    eax,eax
c0007be6:	05 ff 01 00 00       	add    eax,0x1ff
c0007beb:	be 01 00 00 00       	mov    esi,0x1
c0007bf0:	c1 e8 09             	shr    eax,0x9
c0007bf3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfb:	c1 e0 05             	shl    eax,0x5
c0007bfe:	c1 e8 09             	shr    eax,0x9
c0007c01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c05:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0a:	31 d2                	xor    edx,edx
c0007c0c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c10:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c14:	89 f0                	mov    eax,esi
c0007c16:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2a:	31 d2                	xor    edx,edx
c0007c2c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c31:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c35:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c39:	31 db                	xor    ebx,ebx
c0007c3b:	01 c8                	add    eax,ecx
c0007c3d:	11 da                	adc    edx,ebx
c0007c3f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c43:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c47:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c4f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c53:	f7 da                	neg    edx
c0007c55:	21 d1                	and    ecx,edx
c0007c57:	29 d9                	sub    ecx,ebx
c0007c59:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c5e:	0f 85 20 01 00 00    	jne    c0007d84 <f_mkfs+0xc73>
c0007c64:	31 db                	xor    ebx,ebx
c0007c66:	01 ce                	add    esi,ecx
c0007c68:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c70:	31 d2                	xor    edx,edx
c0007c72:	89 f8                	mov    eax,edi
c0007c74:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c78:	c1 e0 04             	shl    eax,0x4
c0007c7b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c7f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c83:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c87:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c8e:	19 d3                	sbb    ebx,edx
c0007c90:	0f 82 40 01 00 00    	jb     c0007dd6 <f_mkfs+0xcc5>
c0007c96:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c99:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9d:	89 c8                	mov    eax,ecx
c0007c9f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ca8:	29 f0                	sub    eax,esi
c0007caa:	29 d0                	sub    eax,edx
c0007cac:	31 d2                	xor    edx,edx
c0007cae:	f7 f7                	div    edi
c0007cb0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb5:	89 c3                	mov    ebx,eax
c0007cb7:	0f 85 b8 fe ff ff    	jne    c0007b75 <f_mkfs+0xa64>
c0007cbd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc2:	0f 87 1d 01 00 00    	ja     c0007de5 <f_mkfs+0xcd4>
c0007cc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccd:	0f 85 03 01 00 00    	jne    c0007dd6 <f_mkfs+0xcc5>
c0007cd3:	83 ff 01             	cmp    edi,0x1
c0007cd6:	0f 86 fa 00 00 00    	jbe    c0007dd6 <f_mkfs+0xcc5>
c0007cdc:	d1 ef                	shr    edi,1
c0007cde:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce9:	85 db                	test   ebx,ebx
c0007ceb:	75 2d                	jne    c0007d1a <f_mkfs+0xc09>
c0007ced:	89 cb                	mov    ebx,ecx
c0007cef:	ba 50 68 02 c0       	mov    edx,0xc0026850
c0007cf4:	c1 eb 11             	shr    ebx,0x11
c0007cf7:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cff:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d02:	66 85 c0             	test   ax,ax
c0007d05:	74 11                	je     c0007d18 <f_mkfs+0xc07>
c0007d07:	83 c2 02             	add    edx,0x2
c0007d0a:	39 d8                	cmp    eax,ebx
c0007d0c:	77 0a                	ja     c0007d18 <f_mkfs+0xc07>
c0007d0e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d12:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d16:	eb e7                	jmp    c0007cff <f_mkfs+0xbee>
c0007d18:	31 db                	xor    ebx,ebx
c0007d1a:	31 d2                	xor    edx,edx
c0007d1c:	89 c8                	mov    eax,ecx
c0007d1e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d22:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d29:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d2e:	c1 ea 09             	shr    edx,0x9
c0007d31:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d36:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3a:	0f 87 96 00 00 00    	ja     c0007dd6 <f_mkfs+0xcc5>
c0007d40:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d44:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d50:	be 20 00 00 00       	mov    esi,0x20
c0007d55:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5a:	e9 a6 fe ff ff       	jmp    c0007c05 <f_mkfs+0xaf4>
c0007d5f:	83 c2 02             	add    edx,0x2
c0007d62:	39 c8                	cmp    eax,ecx
c0007d64:	0f 87 60 fe ff ff    	ja     c0007bca <f_mkfs+0xab9>
c0007d6a:	01 ff                	add    edi,edi
c0007d6c:	e9 4d fe ff ff       	jmp    c0007bbe <f_mkfs+0xaad>
c0007d71:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d74:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d79:	40                   	inc    eax
c0007d7a:	d1 e8                	shr    eax,1
c0007d7c:	83 c0 03             	add    eax,0x3
c0007d7f:	e9 62 fe ff ff       	jmp    c0007be6 <f_mkfs+0xad5>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	89 c8                	mov    eax,ecx
c0007d88:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8c:	85 d2                	test   edx,edx
c0007d8e:	74 0c                	je     c0007d9c <f_mkfs+0xc8b>
c0007d90:	49                   	dec    ecx
c0007d91:	46                   	inc    esi
c0007d92:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d97:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9c:	89 c8                	mov    eax,ecx
c0007d9e:	31 d2                	xor    edx,edx
c0007da0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007da8:	e9 c3 fe ff ff       	jmp    c0007c70 <f_mkfs+0xb5f>
c0007dad:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db2:	77 31                	ja     c0007de5 <f_mkfs+0xcd4>
c0007db4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db9:	75 1b                	jne    c0007dd6 <f_mkfs+0xcc5>
c0007dbb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc7:	0f 86 d9 fd ff ff    	jbe    c0007ba6 <f_mkfs+0xa95>
c0007dcd:	eb 07                	jmp    c0007dd6 <f_mkfs+0xcc5>
c0007dcf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd4:	76 0a                	jbe    c0007de0 <f_mkfs+0xccf>
c0007dd6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddb:	e9 ff 03 00 00       	jmp    c00081df <f_mkfs+0x10ce>
c0007de0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de5:	31 d2                	xor    edx,edx
c0007de7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dec:	89 e8                	mov    eax,ebp
c0007dee:	e8 a2 9c ff ff       	call   c0001a95 <mem_set>
c0007df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0007df8:	ba 62 69 02 c0       	mov    edx,0xc0026962
c0007dfd:	89 e8                	mov    eax,ebp
c0007dff:	e8 7c 9c ff ff       	call   c0001a80 <mem_cpy>
c0007e04:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e07:	ba 00 02 00 00       	mov    edx,0x200
c0007e0c:	e8 62 9c ff ff       	call   c0001a73 <st_word>
c0007e11:	89 f8                	mov    eax,edi
c0007e13:	0f b7 d6             	movzx  edx,si
c0007e16:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e19:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1c:	e8 52 9c ff ff       	call   c0001a73 <st_word>
c0007e21:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e25:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2d:	75 08                	jne    c0007e37 <f_mkfs+0xd26>
c0007e2f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e37:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e3e:	e8 30 9c ff ff       	call   c0001a73 <st_word>
c0007e43:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e48:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4c:	39 d0                	cmp    eax,edx
c0007e4e:	b8 00 00 00 00       	mov    eax,0x0
c0007e53:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e57:	72 0a                	jb     c0007e63 <f_mkfs+0xd52>
c0007e59:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5c:	e8 12 9c ff ff       	call   c0001a73 <st_word>
c0007e61:	eb 08                	jmp    c0007e6b <f_mkfs+0xd5a>
c0007e63:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e66:	e8 0c 9c ff ff       	call   c0001a77 <st_dword>
c0007e6b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e6e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e73:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e77:	e8 f7 9b ff ff       	call   c0001a73 <st_word>
c0007e7c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e7f:	ba ff 00 00 00       	mov    edx,0xff
c0007e84:	e8 ea 9b ff ff       	call   c0001a73 <st_word>
c0007e89:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e90:	e8 e2 9b ff ff       	call   c0001a77 <st_dword>
c0007e95:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9a:	75 57                	jne    c0007ef3 <f_mkfs+0xde2>
c0007e9c:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e9f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea4:	e8 ce 9b ff ff       	call   c0001a77 <st_dword>
c0007ea9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eac:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb0:	e8 c2 9b ff ff       	call   c0001a77 <st_dword>
c0007eb5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eb8:	ba 02 00 00 00       	mov    edx,0x2
c0007ebd:	e8 b5 9b ff ff       	call   c0001a77 <st_dword>
c0007ec2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec5:	ba 01 00 00 00       	mov    edx,0x1
c0007eca:	e8 a4 9b ff ff       	call   c0001a73 <st_word>
c0007ecf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed2:	ba 06 00 00 00       	mov    edx,0x6
c0007ed7:	e8 97 9b ff ff       	call   c0001a73 <st_word>
c0007edc:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee7:	b9 13 00 00 00       	mov    ecx,0x13
c0007eec:	ba 6e 69 02 c0       	mov    edx,0xc002696e
c0007ef1:	eb 2f                	jmp    c0007f22 <f_mkfs+0xe11>
c0007ef3:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef6:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efb:	e8 77 9b ff ff       	call   c0001a77 <st_dword>
c0007f00:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f05:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f08:	e8 66 9b ff ff       	call   c0001a73 <st_word>
c0007f0d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f11:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f15:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f18:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1d:	ba 82 69 02 c0       	mov    edx,0xc0026982
c0007f22:	e8 59 9b ff ff       	call   c0001a80 <mem_cpy>
c0007f27:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f32:	89 f0                	mov    eax,esi
c0007f34:	e8 3a 9b ff ff       	call   c0001a73 <st_word>
c0007f39:	83 ec 0c             	sub    esp,0xc
c0007f3c:	6a 01                	push   0x1
c0007f3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f46:	55                   	push   ebp
c0007f47:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4b:	e8 7c 9a ff ff       	call   c00019cc <disk_write>
c0007f50:	83 c4 20             	add    esp,0x20
c0007f53:	85 c0                	test   eax,eax
c0007f55:	0f 85 67 02 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007f5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f60:	0f 85 b7 00 00 00    	jne    c000801d <f_mkfs+0xf0c>
c0007f66:	83 ec 0c             	sub    esp,0xc
c0007f69:	6a 01                	push   0x1
c0007f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f73:	83 c0 06             	add    eax,0x6
c0007f76:	83 d2 00             	adc    edx,0x0
c0007f79:	52                   	push   edx
c0007f7a:	50                   	push   eax
c0007f7b:	55                   	push   ebp
c0007f7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f80:	e8 47 9a ff ff       	call   c00019cc <disk_write>
c0007f85:	83 c4 20             	add    esp,0x20
c0007f88:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8d:	31 d2                	xor    edx,edx
c0007f8f:	89 e8                	mov    eax,ebp
c0007f91:	e8 ff 9a ff ff       	call   c0001a95 <mem_set>
c0007f96:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9b:	89 e8                	mov    eax,ebp
c0007f9d:	e8 d5 9a ff ff       	call   c0001a77 <st_dword>
c0007fa2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fa8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fad:	e8 c5 9a ff ff       	call   c0001a77 <st_dword>
c0007fb2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbb:	e8 b7 9a ff ff       	call   c0001a77 <st_dword>
c0007fc0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc6:	ba 02 00 00 00       	mov    edx,0x2
c0007fcb:	e8 a7 9a ff ff       	call   c0001a77 <st_dword>
c0007fd0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd5:	89 f0                	mov    eax,esi
c0007fd7:	e8 97 9a ff ff       	call   c0001a73 <st_word>
c0007fdc:	83 ec 0c             	sub    esp,0xc
c0007fdf:	6a 01                	push   0x1
c0007fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe9:	83 c0 07             	add    eax,0x7
c0007fec:	83 d2 00             	adc    edx,0x0
c0007fef:	52                   	push   edx
c0007ff0:	50                   	push   eax
c0007ff1:	55                   	push   ebp
c0007ff2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff6:	e8 d1 99 ff ff       	call   c00019cc <disk_write>
c0007ffb:	83 c4 14             	add    esp,0x14
c0007ffe:	6a 01                	push   0x1
c0008000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008004:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008008:	83 c0 01             	add    eax,0x1
c000800b:	83 d2 00             	adc    edx,0x0
c000800e:	52                   	push   edx
c000800f:	50                   	push   eax
c0008010:	55                   	push   ebp
c0008011:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008015:	e8 b2 99 ff ff       	call   c00019cc <disk_write>
c000801a:	83 c4 20             	add    esp,0x20
c000801d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008024:	31 d2                	xor    edx,edx
c0008026:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802c:	31 db                	xor    ebx,ebx
c000802e:	89 e8                	mov    eax,ebp
c0008030:	e8 60 9a ff ff       	call   c0001a95 <mem_set>
c0008035:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008041:	0f 94 c3             	sete   bl
c0008044:	4b                   	dec    ebx
c0008045:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008051:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008056:	75 21                	jne    c0008079 <f_mkfs+0xf68>
c0008058:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 13 9a ff ff       	call   c0001a77 <st_dword>
c0008064:	8d 45 04             	lea    eax,[ebp+0x4]
c0008067:	83 ca ff             	or     edx,0xffffffff
c000806a:	e8 08 9a ff ff       	call   c0001a77 <st_dword>
c000806f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008072:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008077:	eb 04                	jmp    c000807d <f_mkfs+0xf6c>
c0008079:	89 da                	mov    edx,ebx
c000807b:	89 e8                	mov    eax,ebp
c000807d:	e8 f5 99 ff ff       	call   c0001a77 <st_dword>
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000808e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008092:	39 ce                	cmp    esi,ecx
c0008094:	76 02                	jbe    c0008098 <f_mkfs+0xf87>
c0008096:	89 ce                	mov    esi,ecx
c0008098:	83 ec 0c             	sub    esp,0xc
c000809b:	56                   	push   esi
c000809c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a4:	55                   	push   ebp
c00080a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a9:	e8 1e 99 ff ff       	call   c00019cc <disk_write>
c00080ae:	83 c4 20             	add    esp,0x20
c00080b1:	85 c0                	test   eax,eax
c00080b3:	0f 85 09 01 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c00080b9:	31 d2                	xor    edx,edx
c00080bb:	b9 00 02 00 00       	mov    ecx,0x200
c00080c0:	89 e8                	mov    eax,ebp
c00080c2:	e8 ce 99 ff ff       	call   c0001a95 <mem_set>
c00080c7:	31 d2                	xor    edx,edx
c00080c9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d5:	75 b3                	jne    c000808a <f_mkfs+0xf79>
c00080d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e1:	40                   	inc    eax
c00080e2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e6:	0f 87 65 ff ff ff    	ja     c0008051 <f_mkfs+0xf40>
c00080ec:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f1:	74 04                	je     c00080f7 <f_mkfs+0xfe6>
c00080f3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f7:	89 fb                	mov    ebx,edi
c00080f9:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080fd:	76 04                	jbe    c0008103 <f_mkfs+0xff2>
c00080ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	53                   	push   ebx
c0008107:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810f:	55                   	push   ebp
c0008110:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008114:	e8 b3 98 ff ff       	call   c00019cc <disk_write>
c0008119:	83 c4 20             	add    esp,0x20
c000811c:	85 c0                	test   eax,eax
c000811e:	0f 85 9e 00 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0008124:	31 d2                	xor    edx,edx
c0008126:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000812e:	29 df                	sub    edi,ebx
c0008130:	75 c5                	jne    c00080f7 <f_mkfs+0xfe6>
c0008132:	b1 0c                	mov    cl,0xc
c0008134:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008139:	74 1d                	je     c0008158 <f_mkfs+0x1047>
c000813b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008140:	b1 06                	mov    cl,0x6
c0008142:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008146:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814a:	72 0c                	jb     c0008158 <f_mkfs+0x1047>
c000814c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008151:	0f 94 c1             	sete   cl
c0008154:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008158:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815d:	75 4c                	jne    c00081ab <f_mkfs+0x109a>
c000815f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008163:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008167:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000816e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008175:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008180:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818b:	0f b6 c9             	movzx  ecx,cl
c000818e:	83 ec 0c             	sub    esp,0xc
c0008191:	55                   	push   ebp
c0008192:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819d:	e8 2f c2 ff ff       	call   c00043d1 <create_partition>
c00081a2:	83 c4 10             	add    esp,0x10
c00081a5:	89 c3                	mov    ebx,eax
c00081a7:	85 c0                	test   eax,eax
c00081a9:	75 34                	jne    c00081df <f_mkfs+0x10ce>
c00081ab:	31 db                	xor    ebx,ebx
c00081ad:	50                   	push   eax
c00081ae:	6a 00                	push   0x0
c00081b0:	6a 00                	push   0x0
c00081b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b6:	e8 27 98 ff ff       	call   c00019e2 <disk_ioctl>
c00081bb:	83 c4 10             	add    esp,0x10
c00081be:	85 c0                	test   eax,eax
c00081c0:	74 1d                	je     c00081df <f_mkfs+0x10ce>
c00081c2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081ca:	75 0c                	jne    c00081d8 <f_mkfs+0x10c7>
c00081cc:	83 ec 0c             	sub    esp,0xc
c00081cf:	55                   	push   ebp
c00081d0:	e8 75 00 00 00       	call   c000824a <ff_memfree>
c00081d5:	83 c4 10             	add    esp,0x10
c00081d8:	bb 01 00 00 00       	mov    ebx,0x1
c00081dd:	eb 48                	jmp    c0008227 <f_mkfs+0x1116>
c00081df:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e7:	75 3e                	jne    c0008227 <f_mkfs+0x1116>
c00081e9:	83 ec 0c             	sub    esp,0xc
c00081ec:	55                   	push   ebp
c00081ed:	e8 58 00 00 00       	call   c000824a <ff_memfree>
c00081f2:	83 c4 10             	add    esp,0x10
c00081f5:	eb 30                	jmp    c0008227 <f_mkfs+0x1116>
c00081f7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fc:	0f 85 eb fa ff ff    	jne    c0007ced <f_mkfs+0xbdc>
c0008202:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008206:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820c:	0f 86 b8 f9 ff ff    	jbe    c0007bca <f_mkfs+0xab9>
c0008212:	e9 bf fb ff ff       	jmp    c0007dd6 <f_mkfs+0xcc5>
c0008217:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821c:	0f 85 c0 fa ff ff    	jne    c0007ce2 <f_mkfs+0xbd1>
c0008222:	e9 af fb ff ff       	jmp    c0007dd6 <f_mkfs+0xcc5>
c0008227:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822d:	89 d8                	mov    eax,ebx
c000822f:	5b                   	pop    ebx
c0008230:	5e                   	pop    esi
c0008231:	5f                   	pop    edi
c0008232:	5d                   	pop    ebp
c0008233:	c3                   	ret    

c0008234 <ff_memalloc>:
c0008234:	83 ec 0c             	sub    esp,0xc
c0008237:	83 ec 0c             	sub    esp,0xc
c000823a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823e:	e8 7d 72 00 00       	call   c000f4c0 <malloc>
c0008243:	83 c4 10             	add    esp,0x10
c0008246:	83 c4 0c             	add    esp,0xc
c0008249:	c3                   	ret    

c000824a <ff_memfree>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 77 72 00 00       	call   c000f4d0 <free>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	90                   	nop
c000825d:	83 c4 0c             	add    esp,0xc
c0008260:	c3                   	ret    

c0008261 <ff_uni2oem>:
c0008261:	83 ec 14             	sub    esp,0x14
c0008264:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008268:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008273:	c7 44 24 0c a0 6c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026ca0
c000827b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008280:	77 0b                	ja     c000828d <ff_uni2oem+0x2c>
c0008282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008286:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828b:	eb 5b                	jmp    c00082e8 <ff_uni2oem+0x87>
c000828d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008295:	77 51                	ja     c00082e8 <ff_uni2oem+0x87>
c0008297:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829d:	75 49                	jne    c00082e8 <ff_uni2oem+0x87>
c000829f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a6:	eb 0b                	jmp    c00082b3 <ff_uni2oem+0x52>
c00082a8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ad:	40                   	inc    eax
c00082ae:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b9:	77 1b                	ja     c00082d6 <ff_uni2oem+0x75>
c00082bb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c0:	01 c0                	add    eax,eax
c00082c2:	89 c2                	mov    edx,eax
c00082c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c8:	01 d0                	add    eax,edx
c00082ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cd:	0f b7 c0             	movzx  eax,ax
c00082d0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d4:	75 d2                	jne    c00082a8 <ff_uni2oem+0x47>
c00082d6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082db:	83 e8 80             	sub    eax,0xffffff80
c00082de:	25 ff 00 00 00       	and    eax,0xff
c00082e3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ed:	83 c4 14             	add    esp,0x14
c00082f0:	c3                   	ret    

c00082f1 <ff_oem2uni>:
c00082f1:	83 ec 18             	sub    esp,0x18
c00082f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fc:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008301:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008305:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830c:	c7 44 24 10 a0 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ca0
c0008314:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831a:	77 0b                	ja     c0008327 <ff_oem2uni+0x36>
c000831c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008320:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008325:	eb 2d                	jmp    c0008354 <ff_oem2uni+0x63>
c0008327:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832d:	75 25                	jne    c0008354 <ff_oem2uni+0x63>
c000832f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008336:	77 1c                	ja     c0008354 <ff_oem2uni+0x63>
c0008338:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008342:	01 c0                	add    eax,eax
c0008344:	89 c2                	mov    edx,eax
c0008346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834a:	01 d0                	add    eax,edx
c000834c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008359:	83 c4 18             	add    esp,0x18
c000835c:	c3                   	ret    

c000835d <ff_wtoupper>:
c000835d:	83 ec 10             	sub    esp,0x10
c0008360:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008368:	0f 87 3e 01 00 00    	ja     c00084ac <ff_wtoupper+0x14f>
c000836e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008372:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008377:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837e:	77 07                	ja     c0008387 <ff_wtoupper+0x2a>
c0008380:	b8 a0 6a 02 c0       	mov    eax,0xc0026aa0
c0008385:	eb 05                	jmp    c000838c <ff_wtoupper+0x2f>
c0008387:	b8 e0 69 02 c0       	mov    eax,0xc00269e0
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008394:	8d 50 02             	lea    edx,[eax+0x2]
c0008397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a9:	0f 84 f4 00 00 00    	je     c00084a3 <ff_wtoupper+0x146>
c00083af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b9:	0f 82 e4 00 00 00    	jb     c00084a3 <ff_wtoupper+0x146>
c00083bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c3:	8d 50 02             	lea    edx,[eax+0x2]
c00083c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d7:	66 c1 e8 08          	shr    ax,0x8
c00083db:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ec:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f6:	01 ca                	add    edx,ecx
c00083f8:	39 d0                	cmp    eax,edx
c00083fa:	0f 8d 86 00 00 00    	jge    c0008486 <ff_wtoupper+0x129>
c0008400:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008405:	83 f8 08             	cmp    eax,0x8
c0008408:	0f 87 94 00 00 00    	ja     c00084a2 <ff_wtoupper+0x145>
c000840e:	8b 04 85 a0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9660]
c0008415:	ff e0                	jmp    eax
c0008417:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008421:	29 c2                	sub    edx,eax
c0008423:	89 d0                	mov    eax,edx
c0008425:	01 c0                	add    eax,eax
c0008427:	89 c2                	mov    edx,eax
c0008429:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842d:	01 d0                	add    eax,edx
c000842f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008432:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008437:	eb 4b                	jmp    c0008484 <ff_wtoupper+0x127>
c0008439:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000843e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008442:	83 e0 01             	and    eax,0x1
c0008445:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844a:	eb 38                	jmp    c0008484 <ff_wtoupper+0x127>
c000844c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008452:	eb 30                	jmp    c0008484 <ff_wtoupper+0x127>
c0008454:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845a:	eb 28                	jmp    c0008484 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008462:	eb 20                	jmp    c0008484 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846a:	eb 18                	jmp    c0008484 <ff_wtoupper+0x127>
c000846c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008472:	eb 10                	jmp    c0008484 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847a:	eb 08                	jmp    c0008484 <ff_wtoupper+0x127>
c000847c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008483:	90                   	nop
c0008484:	eb 1c                	jmp    c00084a2 <ff_wtoupper+0x145>
c0008486:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848c:	0f 85 fe fe ff ff    	jne    c0008390 <ff_wtoupper+0x33>
c0008492:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008497:	01 c0                	add    eax,eax
c0008499:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849d:	e9 ee fe ff ff       	jmp    c0008390 <ff_wtoupper+0x33>
c00084a2:	90                   	nop
c00084a3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b0:	83 c4 10             	add    esp,0x10
c00084b3:	c3                   	ret    

c00084b4 <psrc_set_converter>:
c00084b4:	56                   	push   esi
c00084b5:	89 d6                	mov    esi,edx
c00084b7:	53                   	push   ebx
c00084b8:	89 c3                	mov    ebx,eax
c00084ba:	83 ec 0c             	sub    esp,0xc
c00084bd:	52                   	push   edx
c00084be:	50                   	push   eax
c00084bf:	e8 6f 55 00 00       	call   c000da33 <sinc_set_converter>
c00084c4:	83 c4 10             	add    esp,0x10
c00084c7:	85 c0                	test   eax,eax
c00084c9:	74 25                	je     c00084f0 <psrc_set_converter+0x3c>
c00084cb:	50                   	push   eax
c00084cc:	50                   	push   eax
c00084cd:	56                   	push   esi
c00084ce:	53                   	push   ebx
c00084cf:	e8 17 5d 00 00       	call   c000e1eb <zoh_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 15                	je     c00084f0 <psrc_set_converter+0x3c>
c00084db:	51                   	push   ecx
c00084dc:	51                   	push   ecx
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 0f 11 00 00       	call   c00095f3 <linear_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	ba 0a 00 00 00       	mov    edx,0xa
c00084ec:	85 c0                	test   eax,eax
c00084ee:	75 02                	jne    c00084f2 <psrc_set_converter+0x3e>
c00084f0:	31 d2                	xor    edx,edx
c00084f2:	89 d0                	mov    eax,edx
c00084f4:	5a                   	pop    edx
c00084f5:	5b                   	pop    ebx
c00084f6:	5e                   	pop    esi
c00084f7:	c3                   	ret    

c00084f8 <src_delete>:
c00084f8:	53                   	push   ebx
c00084f9:	83 ec 08             	sub    esp,0x8
c00084fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008500:	85 db                	test   ebx,ebx
c0008502:	74 29                	je     c000852d <src_delete+0x35>
c0008504:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008507:	85 c0                	test   eax,eax
c0008509:	74 0c                	je     c0008517 <src_delete+0x1f>
c000850b:	83 ec 0c             	sub    esp,0xc
c000850e:	50                   	push   eax
c000850f:	e8 bc 6f 00 00       	call   c000f4d0 <free>
c0008514:	83 c4 10             	add    esp,0x10
c0008517:	50                   	push   eax
c0008518:	6a 3c                	push   0x3c
c000851a:	6a 00                	push   0x0
c000851c:	53                   	push   ebx
c000851d:	e8 59 81 ff ff       	call   c000067b <memset>
c0008522:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008525:	e8 a6 6f 00 00       	call   c000f4d0 <free>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	31 c0                	xor    eax,eax
c000852f:	83 c4 08             	add    esp,0x8
c0008532:	5b                   	pop    ebx
c0008533:	c3                   	ret    

c0008534 <src_process>:
c0008534:	55                   	push   ebp
c0008535:	57                   	push   edi
c0008536:	56                   	push   esi
c0008537:	53                   	push   ebx
c0008538:	83 ec 1c             	sub    esp,0x1c
c000853b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000853f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008543:	85 ed                	test   ebp,ebp
c0008545:	0f 84 6f 01 00 00    	je     c00086ba <src_process+0x186>
c000854b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000854f:	0f 84 6c 01 00 00    	je     c00086c1 <src_process+0x18d>
c0008555:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008559:	0f 84 62 01 00 00    	je     c00086c1 <src_process+0x18d>
c000855f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008566:	0f 85 5c 01 00 00    	jne    c00086c8 <src_process+0x194>
c000856c:	85 db                	test   ebx,ebx
c000856e:	0f 84 5b 01 00 00    	je     c00086cf <src_process+0x19b>
c0008574:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008576:	85 f6                	test   esi,esi
c0008578:	0f 84 58 01 00 00    	je     c00086d6 <src_process+0x1a2>
c000857e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008581:	85 ff                	test   edi,edi
c0008583:	0f 84 4d 01 00 00    	je     c00086d6 <src_process+0x1a2>
c0008589:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000858f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008593:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008597:	68 00 00 70 3f       	push   0x3f700000
c000859c:	6a 00                	push   0x0
c000859e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a6:	e8 54 d4 01 00       	call   c00259ff <__ltdf2>
c00085ab:	83 c4 10             	add    esp,0x10
c00085ae:	85 c0                	test   eax,eax
c00085b0:	0f 88 27 01 00 00    	js     c00086dd <src_process+0x1a9>
c00085b6:	68 00 00 70 40       	push   0x40700000
c00085bb:	6a 00                	push   0x0
c00085bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c5:	e8 17 d4 01 00       	call   c00259e1 <__gtdf2>
c00085ca:	83 c4 10             	add    esp,0x10
c00085cd:	85 c0                	test   eax,eax
c00085cf:	0f 8f 08 01 00 00    	jg     c00086dd <src_process+0x1a9>
c00085d5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085d9:	79 07                	jns    c00085e2 <src_process+0xae>
c00085db:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085e2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085e5:	85 c0                	test   eax,eax
c00085e7:	79 50                	jns    c0008639 <src_process+0x105>
c00085e9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00085f0:	39 fe                	cmp    esi,edi
c00085f2:	72 37                	jb     c000862b <src_process+0xf7>
c00085f4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085fb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008602:	68 00 00 70 3f       	push   0x3f700000
c0008607:	6a 00                	push   0x0
c0008609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000860c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000860f:	e8 eb d3 01 00       	call   c00259ff <__ltdf2>
c0008614:	83 c4 10             	add    esp,0x10
c0008617:	85 c0                	test   eax,eax
c0008619:	79 37                	jns    c0008652 <src_process+0x11e>
c000861b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000861f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008623:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008626:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008629:	eb 27                	jmp    c0008652 <src_process+0x11e>
c000862b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000862e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008632:	8d 04 86             	lea    eax,[esi+eax*4]
c0008635:	39 c7                	cmp    edi,eax
c0008637:	eb 0d                	jmp    c0008646 <src_process+0x112>
c0008639:	39 fe                	cmp    esi,edi
c000863b:	72 ee                	jb     c000862b <src_process+0xf7>
c000863d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008641:	8d 04 87             	lea    eax,[edi+eax*4]
c0008644:	39 c6                	cmp    esi,eax
c0008646:	73 ac                	jae    c00085f4 <src_process+0xc0>
c0008648:	b8 10 00 00 00       	mov    eax,0x10
c000864d:	e9 90 00 00 00       	jmp    c00086e2 <src_process+0x1ae>
c0008652:	83 ec 10             	sub    esp,0x10
c0008655:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008658:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000865b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000865e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008661:	e8 9e ca 01 00       	call   c0025104 <__subdf3>
c0008666:	83 c4 18             	add    esp,0x18
c0008669:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000866d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008671:	52                   	push   edx
c0008672:	50                   	push   eax
c0008673:	e8 18 d5 01 00       	call   c0025b90 <fabs>
c0008678:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000867c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008680:	83 c4 10             	add    esp,0x10
c0008683:	68 af 03 d2 3c       	push   0x3cd203af
c0008688:	68 16 56 e7 9e       	push   0x9ee75616
c000868d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008695:	e8 65 d3 01 00       	call   c00259ff <__ltdf2>
c000869a:	83 c4 10             	add    esp,0x10
c000869d:	85 c0                	test   eax,eax
c000869f:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086a3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086a7:	79 05                	jns    c00086ae <src_process+0x17a>
c00086a9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086ac:	eb 03                	jmp    c00086b1 <src_process+0x17d>
c00086ae:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086b1:	83 c4 1c             	add    esp,0x1c
c00086b4:	5b                   	pop    ebx
c00086b5:	5e                   	pop    esi
c00086b6:	5f                   	pop    edi
c00086b7:	5d                   	pop    ebp
c00086b8:	ff e0                	jmp    eax
c00086ba:	b8 02 00 00 00       	mov    eax,0x2
c00086bf:	eb 21                	jmp    c00086e2 <src_process+0x1ae>
c00086c1:	b8 07 00 00 00       	mov    eax,0x7
c00086c6:	eb 1a                	jmp    c00086e2 <src_process+0x1ae>
c00086c8:	b8 12 00 00 00       	mov    eax,0x12
c00086cd:	eb 13                	jmp    c00086e2 <src_process+0x1ae>
c00086cf:	b8 03 00 00 00       	mov    eax,0x3
c00086d4:	eb 0c                	jmp    c00086e2 <src_process+0x1ae>
c00086d6:	b8 04 00 00 00       	mov    eax,0x4
c00086db:	eb 05                	jmp    c00086e2 <src_process+0x1ae>
c00086dd:	b8 06 00 00 00       	mov    eax,0x6
c00086e2:	83 c4 1c             	add    esp,0x1c
c00086e5:	5b                   	pop    ebx
c00086e6:	5e                   	pop    esi
c00086e7:	5f                   	pop    edi
c00086e8:	5d                   	pop    ebp
c00086e9:	c3                   	ret    

c00086ea <src_callback_read>:
c00086ea:	55                   	push   ebp
c00086eb:	57                   	push   edi
c00086ec:	56                   	push   esi
c00086ed:	53                   	push   ebx
c00086ee:	83 ec 3c             	sub    esp,0x3c
c00086f1:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00086f5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00086f9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00086fd:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008701:	85 ed                	test   ebp,ebp
c0008703:	0f 8e 52 01 00 00    	jle    c000885b <src_callback_read+0x171>
c0008709:	85 db                	test   ebx,ebx
c000870b:	0f 84 4a 01 00 00    	je     c000885b <src_callback_read+0x171>
c0008711:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008718:	74 0c                	je     c0008726 <src_callback_read+0x3c>
c000871a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008721:	e9 35 01 00 00       	jmp    c000885b <src_callback_read+0x171>
c0008726:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000872a:	75 0c                	jne    c0008738 <src_callback_read+0x4e>
c000872c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008733:	e9 23 01 00 00       	jmp    c000885b <src_callback_read+0x171>
c0008738:	51                   	push   ecx
c0008739:	6a 24                	push   0x24
c000873b:	6a 00                	push   0x0
c000873d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008741:	50                   	push   eax
c0008742:	e8 34 7f ff ff       	call   c000067b <memset>
c0008747:	83 c4 10             	add    esp,0x10
c000874a:	68 00 00 70 3f       	push   0x3f700000
c000874f:	6a 00                	push   0x0
c0008751:	57                   	push   edi
c0008752:	56                   	push   esi
c0008753:	e8 a7 d2 01 00       	call   c00259ff <__ltdf2>
c0008758:	83 c4 10             	add    esp,0x10
c000875b:	85 c0                	test   eax,eax
c000875d:	78 3e                	js     c000879d <src_callback_read+0xb3>
c000875f:	68 00 00 70 40       	push   0x40700000
c0008764:	6a 00                	push   0x0
c0008766:	57                   	push   edi
c0008767:	56                   	push   esi
c0008768:	e8 74 d2 01 00       	call   c00259e1 <__gtdf2>
c000876d:	83 c4 10             	add    esp,0x10
c0008770:	85 c0                	test   eax,eax
c0008772:	7f 29                	jg     c000879d <src_callback_read+0xb3>
c0008774:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008778:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000877c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008780:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008784:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008787:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000878b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000878f:	31 f6                	xor    esi,esi
c0008791:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008794:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008798:	e9 97 00 00 00       	jmp    c0008834 <src_callback_read+0x14a>
c000879d:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087a4:	e9 b2 00 00 00       	jmp    c000885b <src_callback_read+0x171>
c00087a9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b1:	52                   	push   edx
c00087b2:	52                   	push   edx
c00087b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087b7:	50                   	push   eax
c00087b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087ca:	83 c4 10             	add    esp,0x10
c00087cd:	85 c0                	test   eax,eax
c00087cf:	75 08                	jne    c00087d9 <src_callback_read+0xef>
c00087d1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087d9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e0:	50                   	push   eax
c00087e1:	50                   	push   eax
c00087e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087e6:	50                   	push   eax
c00087e7:	53                   	push   ebx
c00087e8:	e8 47 fd ff ff       	call   c0008534 <src_process>
c00087ed:	83 c4 10             	add    esp,0x10
c00087f0:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087f7:	85 c0                	test   eax,eax
c00087f9:	75 49                	jne    c0008844 <src_callback_read+0x15a>
c00087fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00087ff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008802:	89 f9                	mov    ecx,edi
c0008804:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008808:	0f af ca             	imul   ecx,edx
c000880b:	c1 e1 02             	shl    ecx,0x2
c000880e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008812:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008816:	0f af d1             	imul   edx,ecx
c0008819:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000881d:	c1 e2 02             	shl    edx,0x2
c0008820:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008824:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008827:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000882c:	74 12                	je     c0008840 <src_callback_read+0x156>
c000882e:	39 d5                	cmp    ebp,edx
c0008830:	7e 14                	jle    c0008846 <src_callback_read+0x15c>
c0008832:	89 d6                	mov    esi,edx
c0008834:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008839:	75 9e                	jne    c00087d9 <src_callback_read+0xef>
c000883b:	e9 69 ff ff ff       	jmp    c00087a9 <src_callback_read+0xbf>
c0008840:	85 c9                	test   ecx,ecx
c0008842:	75 ea                	jne    c000882e <src_callback_read+0x144>
c0008844:	89 f2                	mov    edx,esi
c0008846:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884a:	85 c0                	test   eax,eax
c000884c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000884f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008853:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008856:	74 05                	je     c000885d <src_callback_read+0x173>
c0008858:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885b:	31 d2                	xor    edx,edx
c000885d:	83 c4 3c             	add    esp,0x3c
c0008860:	89 d0                	mov    eax,edx
c0008862:	5b                   	pop    ebx
c0008863:	5e                   	pop    esi
c0008864:	5f                   	pop    edi
c0008865:	5d                   	pop    ebp
c0008866:	c3                   	ret    

c0008867 <src_set_ratio>:
c0008867:	57                   	push   edi
c0008868:	ba 02 00 00 00       	mov    edx,0x2
c000886d:	56                   	push   esi
c000886e:	53                   	push   ebx
c000886f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008873:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008877:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887b:	85 db                	test   ebx,ebx
c000887d:	74 4c                	je     c00088cb <src_set_ratio+0x64>
c000887f:	ba 07 00 00 00       	mov    edx,0x7
c0008884:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008888:	74 41                	je     c00088cb <src_set_ratio+0x64>
c000888a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000888e:	74 3b                	je     c00088cb <src_set_ratio+0x64>
c0008890:	68 00 00 70 3f       	push   0x3f700000
c0008895:	6a 00                	push   0x0
c0008897:	57                   	push   edi
c0008898:	56                   	push   esi
c0008899:	e8 61 d1 01 00       	call   c00259ff <__ltdf2>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	ba 06 00 00 00       	mov    edx,0x6
c00088a6:	85 c0                	test   eax,eax
c00088a8:	78 21                	js     c00088cb <src_set_ratio+0x64>
c00088aa:	68 00 00 70 40       	push   0x40700000
c00088af:	6a 00                	push   0x0
c00088b1:	57                   	push   edi
c00088b2:	56                   	push   esi
c00088b3:	e8 29 d1 01 00       	call   c00259e1 <__gtdf2>
c00088b8:	83 c4 10             	add    esp,0x10
c00088bb:	ba 06 00 00 00       	mov    edx,0x6
c00088c0:	85 c0                	test   eax,eax
c00088c2:	7f 07                	jg     c00088cb <src_set_ratio+0x64>
c00088c4:	89 33                	mov    DWORD PTR [ebx],esi
c00088c6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088c9:	31 d2                	xor    edx,edx
c00088cb:	5b                   	pop    ebx
c00088cc:	89 d0                	mov    eax,edx
c00088ce:	5e                   	pop    esi
c00088cf:	5f                   	pop    edi
c00088d0:	c3                   	ret    

c00088d1 <src_get_channels>:
c00088d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088d5:	b8 02 00 00 00       	mov    eax,0x2
c00088da:	85 d2                	test   edx,edx
c00088dc:	74 14                	je     c00088f2 <src_get_channels+0x21>
c00088de:	b8 07 00 00 00       	mov    eax,0x7
c00088e3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088e7:	74 09                	je     c00088f2 <src_get_channels+0x21>
c00088e9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088ed:	74 03                	je     c00088f2 <src_get_channels+0x21>
c00088ef:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088f2:	c3                   	ret    

c00088f3 <src_reset>:
c00088f3:	53                   	push   ebx
c00088f4:	b8 02 00 00 00       	mov    eax,0x2
c00088f9:	83 ec 08             	sub    esp,0x8
c00088fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008900:	85 db                	test   ebx,ebx
c0008902:	74 36                	je     c000893a <src_reset+0x47>
c0008904:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008907:	85 c0                	test   eax,eax
c0008909:	74 09                	je     c0008914 <src_reset+0x21>
c000890b:	83 ec 0c             	sub    esp,0xc
c000890e:	53                   	push   ebx
c000890f:	ff d0                	call   eax
c0008911:	83 c4 10             	add    esp,0x10
c0008914:	31 c0                	xor    eax,eax
c0008916:	31 d2                	xor    edx,edx
c0008918:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000891b:	89 03                	mov    DWORD PTR [ebx],eax
c000891d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008920:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008923:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000892a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008931:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008938:	31 c0                	xor    eax,eax
c000893a:	83 c4 08             	add    esp,0x8
c000893d:	5b                   	pop    ebx
c000893e:	c3                   	ret    

c000893f <src_new>:
c000893f:	57                   	push   edi
c0008940:	56                   	push   esi
c0008941:	53                   	push   ebx
c0008942:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008946:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000894a:	85 f6                	test   esi,esi
c000894c:	74 73                	je     c00089c1 <src_new+0x82>
c000894e:	85 ff                	test   edi,edi
c0008950:	7f 08                	jg     c000895a <src_new+0x1b>
c0008952:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008958:	eb 1e                	jmp    c0008978 <src_new+0x39>
c000895a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008960:	50                   	push   eax
c0008961:	50                   	push   eax
c0008962:	6a 3c                	push   0x3c
c0008964:	6a 01                	push   0x1
c0008966:	e8 85 6b 00 00       	call   c000f4f0 <calloc>
c000896b:	83 c4 10             	add    esp,0x10
c000896e:	89 c3                	mov    ebx,eax
c0008970:	85 c0                	test   eax,eax
c0008972:	75 10                	jne    c0008984 <src_new+0x45>
c0008974:	85 f6                	test   esi,esi
c0008976:	75 04                	jne    c000897c <src_new+0x3d>
c0008978:	31 db                	xor    ebx,ebx
c000897a:	eb 4b                	jmp    c00089c7 <src_new+0x88>
c000897c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008982:	eb 43                	jmp    c00089c7 <src_new+0x88>
c0008984:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008987:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000898e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008992:	e8 1d fb ff ff       	call   c00084b4 <psrc_set_converter>
c0008997:	85 c0                	test   eax,eax
c0008999:	74 18                	je     c00089b3 <src_new+0x74>
c000899b:	85 f6                	test   esi,esi
c000899d:	74 06                	je     c00089a5 <src_new+0x66>
c000899f:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089a5:	83 ec 0c             	sub    esp,0xc
c00089a8:	53                   	push   ebx
c00089a9:	31 db                	xor    ebx,ebx
c00089ab:	e8 20 6b 00 00       	call   c000f4d0 <free>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	83 ec 0c             	sub    esp,0xc
c00089b6:	53                   	push   ebx
c00089b7:	e8 37 ff ff ff       	call   c00088f3 <src_reset>
c00089bc:	83 c4 10             	add    esp,0x10
c00089bf:	eb 06                	jmp    c00089c7 <src_new+0x88>
c00089c1:	85 ff                	test   edi,edi
c00089c3:	7f 9b                	jg     c0008960 <src_new+0x21>
c00089c5:	eb b1                	jmp    c0008978 <src_new+0x39>
c00089c7:	89 d8                	mov    eax,ebx
c00089c9:	5b                   	pop    ebx
c00089ca:	5e                   	pop    esi
c00089cb:	5f                   	pop    edi
c00089cc:	c3                   	ret    

c00089cd <src_callback_new>:
c00089cd:	56                   	push   esi
c00089ce:	53                   	push   ebx
c00089cf:	53                   	push   ebx
c00089d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089d8:	85 f6                	test   esi,esi
c00089da:	75 0e                	jne    c00089ea <src_callback_new+0x1d>
c00089dc:	31 db                	xor    ebx,ebx
c00089de:	85 c0                	test   eax,eax
c00089e0:	74 47                	je     c0008a29 <src_callback_new+0x5c>
c00089e2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089e8:	eb 3f                	jmp    c0008a29 <src_callback_new+0x5c>
c00089ea:	85 c0                	test   eax,eax
c00089ec:	74 06                	je     c00089f4 <src_callback_new+0x27>
c00089ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089f4:	51                   	push   ecx
c00089f5:	50                   	push   eax
c00089f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089fe:	e8 3c ff ff ff       	call   c000893f <src_new>
c0008a03:	83 c4 10             	add    esp,0x10
c0008a06:	89 c3                	mov    ebx,eax
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	74 1d                	je     c0008a29 <src_callback_new+0x5c>
c0008a0c:	83 ec 0c             	sub    esp,0xc
c0008a0f:	50                   	push   eax
c0008a10:	e8 de fe ff ff       	call   c00088f3 <src_reset>
c0008a15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a19:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a20:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a23:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	89 d8                	mov    eax,ebx
c0008a2b:	5a                   	pop    edx
c0008a2c:	5b                   	pop    ebx
c0008a2d:	5e                   	pop    esi
c0008a2e:	c3                   	ret    

c0008a2f <src_get_name>:
c0008a2f:	53                   	push   ebx
c0008a30:	83 ec 14             	sub    esp,0x14
c0008a33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a37:	53                   	push   ebx
c0008a38:	e8 d0 4f 00 00       	call   c000da0d <sinc_get_name>
c0008a3d:	83 c4 10             	add    esp,0x10
c0008a40:	85 c0                	test   eax,eax
c0008a42:	75 1d                	jne    c0008a61 <src_get_name+0x32>
c0008a44:	83 ec 0c             	sub    esp,0xc
c0008a47:	53                   	push   ebx
c0008a48:	e8 80 57 00 00       	call   c000e1cd <zoh_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 0d                	jne    c0008a61 <src_get_name+0x32>
c0008a54:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a58:	83 c4 08             	add    esp,0x8
c0008a5b:	5b                   	pop    ebx
c0008a5c:	e9 74 0b 00 00       	jmp    c00095d5 <linear_get_name>
c0008a61:	83 c4 08             	add    esp,0x8
c0008a64:	5b                   	pop    ebx
c0008a65:	c3                   	ret    

c0008a66 <src_get_description>:
c0008a66:	53                   	push   ebx
c0008a67:	83 ec 14             	sub    esp,0x14
c0008a6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a6e:	53                   	push   ebx
c0008a6f:	e8 ac 4f 00 00       	call   c000da20 <sinc_get_description>
c0008a74:	83 c4 10             	add    esp,0x10
c0008a77:	85 c0                	test   eax,eax
c0008a79:	75 1d                	jne    c0008a98 <src_get_description+0x32>
c0008a7b:	83 ec 0c             	sub    esp,0xc
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 58 57 00 00       	call   c000e1dc <zoh_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 0d                	jne    c0008a98 <src_get_description+0x32>
c0008a8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a8f:	83 c4 08             	add    esp,0x8
c0008a92:	5b                   	pop    ebx
c0008a93:	e9 4c 0b 00 00       	jmp    c00095e4 <linear_get_description>
c0008a98:	83 c4 08             	add    esp,0x8
c0008a9b:	5b                   	pop    ebx
c0008a9c:	c3                   	ret    

c0008a9d <src_get_version>:
c0008a9d:	b8 a0 6d 02 c0       	mov    eax,0xc0026da0
c0008aa2:	c3                   	ret    

c0008aa3 <src_is_valid_ratio>:
c0008aa3:	83 ec 1c             	sub    esp,0x1c
c0008aa6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008aae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ab2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac5:	e8 35 cf 01 00       	call   c00259ff <__ltdf2>
c0008aca:	83 c4 10             	add    esp,0x10
c0008acd:	31 d2                	xor    edx,edx
c0008acf:	85 c0                	test   eax,eax
c0008ad1:	78 1e                	js     c0008af1 <src_is_valid_ratio+0x4e>
c0008ad3:	68 00 00 70 40       	push   0x40700000
c0008ad8:	6a 00                	push   0x0
c0008ada:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ade:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae2:	e8 fa ce 01 00       	call   c00259e1 <__gtdf2>
c0008ae7:	31 d2                	xor    edx,edx
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	85 c0                	test   eax,eax
c0008aee:	0f 9e c2             	setle  dl
c0008af1:	89 d0                	mov    eax,edx
c0008af3:	83 c4 1c             	add    esp,0x1c
c0008af6:	c3                   	ret    

c0008af7 <src_error>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	31 c0                	xor    eax,eax
c0008afd:	85 d2                	test   edx,edx
c0008aff:	74 03                	je     c0008b04 <src_error+0xd>
c0008b01:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b04:	c3                   	ret    

c0008b05 <src_strerror>:
c0008b05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b09:	31 c0                	xor    eax,eax
c0008b0b:	83 fa 17             	cmp    edx,0x17
c0008b0e:	77 07                	ja     c0008b17 <src_strerror+0x12>
c0008b10:	8b 04 95 00 72 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8e00]
c0008b17:	c3                   	ret    

c0008b18 <src_simple>:
c0008b18:	56                   	push   esi
c0008b19:	53                   	push   ebx
c0008b1a:	83 ec 18             	sub    esp,0x18
c0008b1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b21:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b25:	50                   	push   eax
c0008b26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2e:	e8 0c fe ff ff       	call   c000893f <src_new>
c0008b33:	83 c4 10             	add    esp,0x10
c0008b36:	85 c0                	test   eax,eax
c0008b38:	75 06                	jne    c0008b40 <src_simple+0x28>
c0008b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b3e:	eb 25                	jmp    c0008b65 <src_simple+0x4d>
c0008b40:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b47:	89 c3                	mov    ebx,eax
c0008b49:	50                   	push   eax
c0008b4a:	50                   	push   eax
c0008b4b:	56                   	push   esi
c0008b4c:	53                   	push   ebx
c0008b4d:	e8 e2 f9 ff ff       	call   c0008534 <src_process>
c0008b52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b59:	e8 9a f9 ff ff       	call   c00084f8 <src_delete>
c0008b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	83 c4 14             	add    esp,0x14
c0008b68:	5b                   	pop    ebx
c0008b69:	5e                   	pop    esi
c0008b6a:	c3                   	ret    

c0008b6b <src_short_to_float_array>:
c0008b6b:	53                   	push   ebx
c0008b6c:	83 ec 18             	sub    esp,0x18
c0008b6f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b73:	85 db                	test   ebx,ebx
c0008b75:	74 54                	je     c0008bcb <src_short_to_float_array+0x60>
c0008b77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b7b:	4b                   	dec    ebx
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b83:	50                   	push   eax
c0008b84:	e8 0a cc 01 00       	call   c0025793 <__floatsidf>
c0008b89:	83 c4 10             	add    esp,0x10
c0008b8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b94:	68 00 00 00 3f       	push   0x3f000000
c0008b99:	6a 00                	push   0x0
c0008b9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba3:	e8 88 c5 01 00       	call   c0025130 <__muldf3>
c0008ba8:	59                   	pop    ecx
c0008ba9:	59                   	pop    ecx
c0008baa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bba:	e8 44 ce 01 00       	call   c0025a03 <__truncdfsf2>
c0008bbf:	83 c4 10             	add    esp,0x10
c0008bc2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bc6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bc9:	eb a8                	jmp    c0008b73 <src_short_to_float_array+0x8>
c0008bcb:	83 c4 18             	add    esp,0x18
c0008bce:	5b                   	pop    ebx
c0008bcf:	c3                   	ret    

c0008bd0 <src_float_to_short_array>:
c0008bd0:	56                   	push   esi
c0008bd1:	53                   	push   ebx
c0008bd2:	83 ec 14             	sub    esp,0x14
c0008bd5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bdd:	85 db                	test   ebx,ebx
c0008bdf:	0f 84 a4 00 00 00    	je     c0008c89 <src_float_to_short_array+0xb9>
c0008be5:	83 ec 0c             	sub    esp,0xc
c0008be8:	4b                   	dec    ebx
c0008be9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bed:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008bf0:	e8 32 cf 01 00       	call   c0025b27 <__extendsfdf2>
c0008bf5:	83 c4 10             	add    esp,0x10
c0008bf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c00:	68 00 00 e0 41       	push   0x41e00000
c0008c05:	6a 00                	push   0x0
c0008c07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c0f:	e8 1c c5 01 00       	call   c0025130 <__muldf3>
c0008c14:	83 c4 10             	add    esp,0x10
c0008c17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c1f:	68 ff ff df 41       	push   0x41dfffff
c0008c24:	68 00 00 c0 ff       	push   0xffc00000
c0008c29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c31:	e8 c7 cd 01 00       	call   c00259fd <__gedf2>
c0008c36:	83 c4 10             	add    esp,0x10
c0008c39:	85 c0                	test   eax,eax
c0008c3b:	78 08                	js     c0008c45 <src_float_to_short_array+0x75>
c0008c3d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c43:	eb 98                	jmp    c0008bdd <src_float_to_short_array+0xd>
c0008c45:	68 00 00 e0 c1       	push   0xc1e00000
c0008c4a:	6a 00                	push   0x0
c0008c4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c54:	e8 a8 cd 01 00       	call   c0025a01 <__ledf2>
c0008c59:	83 c4 10             	add    esp,0x10
c0008c5c:	85 c0                	test   eax,eax
c0008c5e:	7f 0b                	jg     c0008c6b <src_float_to_short_array+0x9b>
c0008c60:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c66:	e9 72 ff ff ff       	jmp    c0008bdd <src_float_to_short_array+0xd>
c0008c6b:	50                   	push   eax
c0008c6c:	50                   	push   eax
c0008c6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c75:	e8 36 cf 01 00       	call   c0025bb0 <lrint>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	c1 f8 10             	sar    eax,0x10
c0008c80:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c84:	e9 54 ff ff ff       	jmp    c0008bdd <src_float_to_short_array+0xd>
c0008c89:	83 c4 14             	add    esp,0x14
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_int_to_float_array>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 18             	sub    esp,0x18
c0008c93:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c97:	85 db                	test   ebx,ebx
c0008c99:	74 52                	je     c0008ced <src_int_to_float_array+0x5e>
c0008c9b:	83 ec 0c             	sub    esp,0xc
c0008c9e:	4b                   	dec    ebx
c0008c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ca3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ca6:	e8 e8 ca 01 00       	call   c0025793 <__floatsidf>
c0008cab:	83 c4 10             	add    esp,0x10
c0008cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cb6:	68 00 00 00 3e       	push   0x3e000000
c0008cbb:	6a 00                	push   0x0
c0008cbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc5:	e8 66 c4 01 00       	call   c0025130 <__muldf3>
c0008cca:	59                   	pop    ecx
c0008ccb:	59                   	pop    ecx
c0008ccc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cdc:	e8 22 cd 01 00       	call   c0025a03 <__truncdfsf2>
c0008ce1:	83 c4 10             	add    esp,0x10
c0008ce4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ce8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008ceb:	eb aa                	jmp    c0008c97 <src_int_to_float_array+0x8>
c0008ced:	83 c4 18             	add    esp,0x18
c0008cf0:	5b                   	pop    ebx
c0008cf1:	c3                   	ret    

c0008cf2 <src_float_to_int_array>:
c0008cf2:	56                   	push   esi
c0008cf3:	53                   	push   ebx
c0008cf4:	83 ec 14             	sub    esp,0x14
c0008cf7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008cfb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cff:	85 db                	test   ebx,ebx
c0008d01:	0f 84 a2 00 00 00    	je     c0008da9 <src_float_to_int_array+0xb7>
c0008d07:	83 ec 0c             	sub    esp,0xc
c0008d0a:	4b                   	dec    ebx
c0008d0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d0f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d12:	e8 10 ce 01 00       	call   c0025b27 <__extendsfdf2>
c0008d17:	83 c4 10             	add    esp,0x10
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d22:	68 00 00 e0 41       	push   0x41e00000
c0008d27:	6a 00                	push   0x0
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d31:	e8 fa c3 01 00       	call   c0025130 <__muldf3>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d41:	68 ff ff df 41       	push   0x41dfffff
c0008d46:	68 00 00 c0 ff       	push   0xffc00000
c0008d4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d53:	e8 a5 cc 01 00       	call   c00259fd <__gedf2>
c0008d58:	83 c4 10             	add    esp,0x10
c0008d5b:	85 c0                	test   eax,eax
c0008d5d:	78 09                	js     c0008d68 <src_float_to_int_array+0x76>
c0008d5f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d66:	eb 97                	jmp    c0008cff <src_float_to_int_array+0xd>
c0008d68:	68 00 00 e0 c1       	push   0xc1e00000
c0008d6d:	6a 00                	push   0x0
c0008d6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d77:	e8 85 cc 01 00       	call   c0025a01 <__ledf2>
c0008d7c:	83 c4 10             	add    esp,0x10
c0008d7f:	85 c0                	test   eax,eax
c0008d81:	7f 0c                	jg     c0008d8f <src_float_to_int_array+0x9d>
c0008d83:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d8a:	e9 70 ff ff ff       	jmp    c0008cff <src_float_to_int_array+0xd>
c0008d8f:	50                   	push   eax
c0008d90:	50                   	push   eax
c0008d91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d99:	e8 12 ce 01 00       	call   c0025bb0 <lrint>
c0008d9e:	83 c4 10             	add    esp,0x10
c0008da1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008da4:	e9 56 ff ff ff       	jmp    c0008cff <src_float_to_int_array+0xd>
c0008da9:	83 c4 14             	add    esp,0x14
c0008dac:	5b                   	pop    ebx
c0008dad:	5e                   	pop    esi
c0008dae:	c3                   	ret    

c0008daf <linear_vari_process>:
c0008daf:	55                   	push   ebp
c0008db0:	31 d2                	xor    edx,edx
c0008db2:	57                   	push   edi
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	83 ec 3c             	sub    esp,0x3c
c0008db8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dbc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dc0:	0f 8e d3 07 00 00    	jle    c0009599 <linear_vari_process+0x7ea>
c0008dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dca:	ba 05 00 00 00       	mov    edx,0x5
c0008dcf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008dd2:	85 db                	test   ebx,ebx
c0008dd4:	0f 84 bf 07 00 00    	je     c0009599 <linear_vari_process+0x7ea>
c0008dda:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ddd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008de1:	74 19                	je     c0008dfc <linear_vari_process+0x4d>
c0008de3:	31 d2                	xor    edx,edx
c0008de5:	39 c2                	cmp    edx,eax
c0008de7:	7d 0c                	jge    c0008df5 <linear_vari_process+0x46>
c0008de9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008deb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dee:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008df2:	42                   	inc    edx
c0008df3:	eb f0                	jmp    c0008de5 <linear_vari_process+0x36>
c0008df5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008dfc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008dff:	0f af d0             	imul   edx,eax
c0008e02:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e05:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e09:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e10:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e13:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e1a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e1e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e21:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e2b:	68 00 00 70 3f       	push   0x3f700000
c0008e30:	6a 00                	push   0x0
c0008e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e3a:	e8 c0 cb 01 00       	call   c00259ff <__ltdf2>
c0008e3f:	83 c4 10             	add    esp,0x10
c0008e42:	ba 16 00 00 00       	mov    edx,0x16
c0008e47:	85 c0                	test   eax,eax
c0008e49:	0f 88 4a 07 00 00    	js     c0009599 <linear_vari_process+0x7ea>
c0008e4f:	68 00 00 70 40       	push   0x40700000
c0008e54:	6a 00                	push   0x0
c0008e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5e:	e8 7e cb 01 00       	call   c00259e1 <__gtdf2>
c0008e63:	83 c4 10             	add    esp,0x10
c0008e66:	ba 16 00 00 00       	mov    edx,0x16
c0008e6b:	85 c0                	test   eax,eax
c0008e6d:	0f 8f 26 07 00 00    	jg     c0009599 <linear_vari_process+0x7ea>
c0008e73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e77:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e85:	68 00 00 f0 3f       	push   0x3ff00000
c0008e8a:	6a 00                	push   0x0
c0008e8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e94:	e8 66 cb 01 00       	call   c00259ff <__ltdf2>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	0f 89 89 02 00 00    	jns    c000912d <linear_vari_process+0x37e>
c0008ea4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ea7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eaa:	0f 8d 7d 02 00 00    	jge    c000912d <linear_vari_process+0x37e>
c0008eb0:	83 ec 0c             	sub    esp,0xc
c0008eb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eb6:	e8 d8 c8 01 00       	call   c0025793 <__floatsidf>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ec1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ec5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eca:	6a 00                	push   0x0
c0008ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed4:	e8 da bb 01 00       	call   c0024ab3 <__adddf3>
c0008ed9:	83 c4 10             	add    esp,0x10
c0008edc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ee0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ee4:	52                   	push   edx
c0008ee5:	50                   	push   eax
c0008ee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eee:	e8 3d c2 01 00       	call   c0025130 <__muldf3>
c0008ef3:	5d                   	pop    ebp
c0008ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ef8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008efc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008eff:	e8 8f c8 01 00       	call   c0025793 <__floatsidf>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f0b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f0f:	52                   	push   edx
c0008f10:	50                   	push   eax
c0008f11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f19:	e8 95 bb 01 00       	call   c0024ab3 <__adddf3>
c0008f1e:	59                   	pop    ecx
c0008f1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f23:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f27:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f2a:	e8 64 c8 01 00       	call   c0025793 <__floatsidf>
c0008f2f:	83 c4 10             	add    esp,0x10
c0008f32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f3a:	52                   	push   edx
c0008f3b:	50                   	push   eax
c0008f3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f44:	e8 b4 ca 01 00       	call   c00259fd <__gedf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	85 c0                	test   eax,eax
c0008f4e:	0f 89 d9 01 00 00    	jns    c000912d <linear_vari_process+0x37e>
c0008f54:	85 ff                	test   edi,edi
c0008f56:	0f 8e f4 00 00 00    	jle    c0009050 <linear_vari_process+0x2a1>
c0008f5c:	83 ec 10             	sub    esp,0x10
c0008f5f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f62:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f65:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f69:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f6c:	ff 30                	push   DWORD PTR [eax]
c0008f6e:	e8 91 c1 01 00       	call   c0025104 <__subdf3>
c0008f73:	83 c4 18             	add    esp,0x18
c0008f76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f7e:	52                   	push   edx
c0008f7f:	50                   	push   eax
c0008f80:	e8 0b cc 01 00       	call   c0025b90 <fabs>
c0008f85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f89:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f8d:	83 c4 10             	add    esp,0x10
c0008f90:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008f95:	68 23 42 92 0c       	push   0xc924223
c0008f9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa2:	e8 3a ca 01 00       	call   c00259e1 <__gtdf2>
c0008fa7:	83 c4 10             	add    esp,0x10
c0008faa:	85 c0                	test   eax,eax
c0008fac:	0f 8e 9e 00 00 00    	jle    c0009050 <linear_vari_process+0x2a1>
c0008fb2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fb6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fc2:	52                   	push   edx
c0008fc3:	50                   	push   eax
c0008fc4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fc7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fca:	e8 35 c1 01 00       	call   c0025104 <__subdf3>
c0008fcf:	59                   	pop    ecx
c0008fd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fd4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fd8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fdb:	e8 b3 c7 01 00       	call   c0025793 <__floatsidf>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fe7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008feb:	52                   	push   edx
c0008fec:	50                   	push   eax
c0008fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff5:	e8 36 c1 01 00       	call   c0025130 <__muldf3>
c0008ffa:	5f                   	pop    edi
c0008ffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fff:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009003:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009006:	e8 88 c7 01 00       	call   c0025793 <__floatsidf>
c000900b:	83 c4 10             	add    esp,0x10
c000900e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009012:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009016:	52                   	push   edx
c0009017:	50                   	push   eax
c0009018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000901c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009020:	e8 ef c3 01 00       	call   c0025414 <__divdf3>
c0009025:	83 c4 10             	add    esp,0x10
c0009028:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009030:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009034:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009040:	e8 6e ba 01 00       	call   c0024ab3 <__adddf3>
c0009045:	83 c4 10             	add    esp,0x10
c0009048:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000904c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009050:	31 ff                	xor    edi,edi
c0009052:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009055:	0f 8e 9d 00 00 00    	jle    c00090f8 <linear_vari_process+0x349>
c000905b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000905e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009062:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009065:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009069:	89 04 24             	mov    DWORD PTR [esp],eax
c000906c:	8b 06                	mov    eax,DWORD PTR [esi]
c000906e:	52                   	push   edx
c000906f:	52                   	push   edx
c0009070:	55                   	push   ebp
c0009071:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009074:	47                   	inc    edi
c0009075:	e8 ce b3 01 00       	call   c0024448 <__subsf3>
c000907a:	89 04 24             	mov    DWORD PTR [esp],eax
c000907d:	e8 a5 ca 01 00       	call   c0025b27 <__extendsfdf2>
c0009082:	83 c4 10             	add    esp,0x10
c0009085:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009089:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000908d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009091:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909d:	e8 8e c0 01 00       	call   c0025130 <__muldf3>
c00090a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090ad:	e8 75 ca 01 00       	call   c0025b27 <__extendsfdf2>
c00090b2:	83 c4 10             	add    esp,0x10
c00090b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090bd:	52                   	push   edx
c00090be:	50                   	push   eax
c00090bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c7:	e8 e7 b9 01 00       	call   c0024ab3 <__adddf3>
c00090cc:	59                   	pop    ecx
c00090cd:	5d                   	pop    ebp
c00090ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090de:	e8 20 c9 01 00       	call   c0025a03 <__truncdfsf2>
c00090e3:	83 c4 10             	add    esp,0x10
c00090e6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090e9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090ed:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00090f0:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00090f3:	e9 5a ff ff ff       	jmp    c0009052 <linear_vari_process+0x2a3>
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009100:	68 00 00 f0 3f       	push   0x3ff00000
c0009105:	6a 00                	push   0x0
c0009107:	e8 08 c3 01 00       	call   c0025414 <__divdf3>
c000910c:	83 c4 10             	add    esp,0x10
c000910f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009112:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009116:	52                   	push   edx
c0009117:	50                   	push   eax
c0009118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009120:	e8 8e b9 01 00       	call   c0024ab3 <__adddf3>
c0009125:	83 c4 10             	add    esp,0x10
c0009128:	e9 50 fd ff ff       	jmp    c0008e7d <linear_vari_process+0xce>
c000912d:	50                   	push   eax
c000912e:	50                   	push   eax
c000912f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009137:	e8 74 ca 01 00       	call   c0025bb0 <lrint>
c000913c:	83 ec 0c             	sub    esp,0xc
c000913f:	50                   	push   eax
c0009140:	e8 4e c6 01 00       	call   c0025793 <__floatsidf>
c0009145:	83 c4 10             	add    esp,0x10
c0009148:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000914c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009150:	52                   	push   edx
c0009151:	50                   	push   eax
c0009152:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009156:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915a:	e8 a5 bf 01 00       	call   c0025104 <__subdf3>
c000915f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009163:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009167:	83 c4 20             	add    esp,0x20
c000916a:	6a 00                	push   0x0
c000916c:	6a 00                	push   0x0
c000916e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009172:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009176:	e8 84 c8 01 00       	call   c00259ff <__ltdf2>
c000917b:	83 c4 10             	add    esp,0x10
c000917e:	85 c0                	test   eax,eax
c0009180:	79 1e                	jns    c00091a0 <linear_vari_process+0x3f1>
c0009182:	68 00 00 f0 3f       	push   0x3ff00000
c0009187:	6a 00                	push   0x0
c0009189:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009191:	e8 1d b9 01 00       	call   c0024ab3 <__adddf3>
c0009196:	83 c4 10             	add    esp,0x10
c0009199:	89 04 24             	mov    DWORD PTR [esp],eax
c000919c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091a0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091a3:	83 ec 10             	sub    esp,0x10
c00091a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b6:	e8 49 bf 01 00       	call   c0025104 <__subdf3>
c00091bb:	83 c4 18             	add    esp,0x18
c00091be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091c6:	52                   	push   edx
c00091c7:	50                   	push   eax
c00091c8:	e8 e3 c9 01 00       	call   c0025bb0 <lrint>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	0f af f8             	imul   edi,eax
c00091d3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091d6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091d9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091dc:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091e2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091e6:	0f 8d 13 03 00 00    	jge    c00094ff <linear_vari_process+0x750>
c00091ec:	83 ec 0c             	sub    esp,0xc
c00091ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091f2:	e8 9c c5 01 00       	call   c0025793 <__floatsidf>
c00091f7:	83 c4 10             	add    esp,0x10
c00091fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009202:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009206:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000920a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000920e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009212:	e8 19 bf 01 00       	call   c0025130 <__muldf3>
c0009217:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000921e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009222:	e8 6c c5 01 00       	call   c0025793 <__floatsidf>
c0009227:	83 c4 10             	add    esp,0x10
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	52                   	push   edx
c0009233:	50                   	push   eax
c0009234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923c:	e8 72 b8 01 00       	call   c0024ab3 <__adddf3>
c0009241:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009244:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009248:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924c:	e8 42 c5 01 00       	call   c0025793 <__floatsidf>
c0009251:	83 c4 10             	add    esp,0x10
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	52                   	push   edx
c000925d:	50                   	push   eax
c000925e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009266:	e8 94 c7 01 00       	call   c00259ff <__ltdf2>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	85 c0                	test   eax,eax
c0009270:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009274:	0f 89 85 02 00 00    	jns    c00094ff <linear_vari_process+0x750>
c000927a:	85 c9                	test   ecx,ecx
c000927c:	0f 8e f5 00 00 00    	jle    c0009377 <linear_vari_process+0x5c8>
c0009282:	83 ec 10             	sub    esp,0x10
c0009285:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009288:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000928b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000928f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009292:	ff 30                	push   DWORD PTR [eax]
c0009294:	e8 6b be 01 00       	call   c0025104 <__subdf3>
c0009299:	83 c4 18             	add    esp,0x18
c000929c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092a4:	52                   	push   edx
c00092a5:	50                   	push   eax
c00092a6:	e8 e5 c8 01 00       	call   c0025b90 <fabs>
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	83 c4 10             	add    esp,0x10
c00092b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092bb:	68 23 42 92 0c       	push   0xc924223
c00092c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c8:	e8 14 c7 01 00       	call   c00259e1 <__gtdf2>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	85 c0                	test   eax,eax
c00092d2:	0f 8e 9f 00 00 00    	jle    c0009377 <linear_vari_process+0x5c8>
c00092d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092df:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092e9:	52                   	push   edx
c00092ea:	50                   	push   eax
c00092eb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092ee:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f1:	e8 0e be 01 00       	call   c0025104 <__subdf3>
c00092f6:	5f                   	pop    edi
c00092f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092fb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092ff:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009302:	e8 8c c4 01 00       	call   c0025793 <__floatsidf>
c0009307:	83 c4 10             	add    esp,0x10
c000930a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000930e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009312:	52                   	push   edx
c0009313:	50                   	push   eax
c0009314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931c:	e8 0f be 01 00       	call   c0025130 <__muldf3>
c0009321:	5d                   	pop    ebp
c0009322:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000932a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000932d:	e8 61 c4 01 00       	call   c0025793 <__floatsidf>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009339:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000933d:	52                   	push   edx
c000933e:	50                   	push   eax
c000933f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009347:	e8 c8 c0 01 00       	call   c0025414 <__divdf3>
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009353:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009357:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000935b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000935f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009367:	e8 47 b7 01 00       	call   c0024ab3 <__adddf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009373:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009377:	31 ff                	xor    edi,edi
c0009379:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000937c:	39 f8                	cmp    eax,edi
c000937e:	0f 8e ac 00 00 00    	jle    c0009430 <linear_vari_process+0x681>
c0009384:	8b 16                	mov    edx,DWORD PTR [esi]
c0009386:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009389:	29 c1                	sub    ecx,eax
c000938b:	89 c8                	mov    eax,ecx
c000938d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009390:	01 f8                	add    eax,edi
c0009392:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009396:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009399:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000939c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093a3:	51                   	push   ecx
c00093a4:	01 f8                	add    eax,edi
c00093a6:	51                   	push   ecx
c00093a7:	47                   	inc    edi
c00093a8:	55                   	push   ebp
c00093a9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093ac:	e8 97 b0 01 00       	call   c0024448 <__subsf3>
c00093b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093b4:	e8 6e c7 01 00       	call   c0025b27 <__extendsfdf2>
c00093b9:	83 c4 10             	add    esp,0x10
c00093bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093c4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093c8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d4:	e8 57 bd 01 00       	call   c0025130 <__muldf3>
c00093d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093e4:	e8 3e c7 01 00       	call   c0025b27 <__extendsfdf2>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093f4:	52                   	push   edx
c00093f5:	50                   	push   eax
c00093f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fe:	e8 b0 b6 01 00       	call   c0024ab3 <__adddf3>
c0009403:	5d                   	pop    ebp
c0009404:	59                   	pop    ecx
c0009405:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009409:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000940d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009411:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009415:	e8 e9 c5 01 00       	call   c0025a03 <__truncdfsf2>
c000941a:	83 c4 10             	add    esp,0x10
c000941d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009421:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009425:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009428:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000942b:	e9 49 ff ff ff       	jmp    c0009379 <linear_vari_process+0x5ca>
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	68 00 00 f0 3f       	push   0x3ff00000
c000943d:	6a 00                	push   0x0
c000943f:	e8 d0 bf 01 00       	call   c0025414 <__divdf3>
c0009444:	83 c4 10             	add    esp,0x10
c0009447:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000944b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000944f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009453:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945f:	e8 4f b6 01 00       	call   c0024ab3 <__adddf3>
c0009464:	59                   	pop    ecx
c0009465:	5f                   	pop    edi
c0009466:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000946a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	e8 35 c7 01 00       	call   c0025bb0 <lrint>
c000947b:	83 ec 0c             	sub    esp,0xc
c000947e:	50                   	push   eax
c000947f:	e8 0f c3 01 00       	call   c0025793 <__floatsidf>
c0009484:	83 c4 10             	add    esp,0x10
c0009487:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948f:	52                   	push   edx
c0009490:	50                   	push   eax
c0009491:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009495:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009499:	e8 66 bc 01 00       	call   c0025104 <__subdf3>
c000949e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094a2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094a6:	83 c4 20             	add    esp,0x20
c00094a9:	6a 00                	push   0x0
c00094ab:	6a 00                	push   0x0
c00094ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b5:	e8 45 c5 01 00       	call   c00259ff <__ltdf2>
c00094ba:	83 c4 10             	add    esp,0x10
c00094bd:	85 c0                	test   eax,eax
c00094bf:	79 1e                	jns    c00094df <linear_vari_process+0x730>
c00094c1:	68 00 00 f0 3f       	push   0x3ff00000
c00094c6:	6a 00                	push   0x0
c00094c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094d0:	e8 de b5 01 00       	call   c0024ab3 <__adddf3>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094df:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	e8 0a bc 01 00       	call   c0025104 <__subdf3>
c00094fa:	e9 bc fc ff ff       	jmp    c00091bb <linear_vari_process+0x40c>
c00094ff:	39 fd                	cmp    ebp,edi
c0009501:	7d 38                	jge    c000953b <linear_vari_process+0x78c>
c0009503:	83 ec 0c             	sub    esp,0xc
c0009506:	89 f8                	mov    eax,edi
c0009508:	29 e8                	sub    eax,ebp
c000950a:	99                   	cdq    
c000950b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000950e:	50                   	push   eax
c000950f:	e8 7f c2 01 00       	call   c0025793 <__floatsidf>
c0009514:	83 c4 10             	add    esp,0x10
c0009517:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000951b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000951f:	52                   	push   edx
c0009520:	50                   	push   eax
c0009521:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009525:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009529:	e8 85 b5 01 00       	call   c0024ab3 <__adddf3>
c000952e:	83 c4 10             	add    esp,0x10
c0009531:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009534:	89 04 24             	mov    DWORD PTR [esp],eax
c0009537:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000953b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000953f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009542:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009546:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009549:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000954c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000954f:	85 c0                	test   eax,eax
c0009551:	7f 29                	jg     c000957c <linear_vari_process+0x7cd>
c0009553:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000955f:	89 01                	mov    DWORD PTR [ecx],eax
c0009561:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009564:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009567:	99                   	cdq    
c0009568:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000956b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000956e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009571:	99                   	cdq    
c0009572:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009575:	31 d2                	xor    edx,edx
c0009577:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000957a:	eb 1d                	jmp    c0009599 <linear_vari_process+0x7ea>
c000957c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000957f:	31 d2                	xor    edx,edx
c0009581:	29 c8                	sub    eax,ecx
c0009583:	c1 e0 02             	shl    eax,0x2
c0009586:	39 d1                	cmp    ecx,edx
c0009588:	7e c9                	jle    c0009553 <linear_vari_process+0x7a4>
c000958a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000958c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000958f:	83 c0 04             	add    eax,0x4
c0009592:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009596:	42                   	inc    edx
c0009597:	eb ed                	jmp    c0009586 <linear_vari_process+0x7d7>
c0009599:	83 c4 3c             	add    esp,0x3c
c000959c:	89 d0                	mov    eax,edx
c000959e:	5b                   	pop    ebx
c000959f:	5e                   	pop    esi
c00095a0:	5f                   	pop    edi
c00095a1:	5d                   	pop    ebp
c00095a2:	c3                   	ret    

c00095a3 <linear_reset>:
c00095a3:	83 ec 0c             	sub    esp,0xc
c00095a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095aa:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095ad:	85 c0                	test   eax,eax
c00095af:	74 20                	je     c00095d1 <linear_reset+0x2e>
c00095b1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095b4:	83 c0 1c             	add    eax,0x1c
c00095b7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ba:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095c1:	c1 e2 02             	shl    edx,0x2
c00095c4:	51                   	push   ecx
c00095c5:	52                   	push   edx
c00095c6:	6a 00                	push   0x0
c00095c8:	50                   	push   eax
c00095c9:	e8 ad 70 ff ff       	call   c000067b <memset>
c00095ce:	83 c4 10             	add    esp,0x10
c00095d1:	83 c4 0c             	add    esp,0xc
c00095d4:	c3                   	ret    

c00095d5 <linear_get_name>:
c00095d5:	31 c0                	xor    eax,eax
c00095d7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095dc:	75 05                	jne    c00095e3 <linear_get_name+0xe>
c00095de:	b8 60 72 02 c0       	mov    eax,0xc0027260
c00095e3:	c3                   	ret    

c00095e4 <linear_get_description>:
c00095e4:	31 c0                	xor    eax,eax
c00095e6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095eb:	75 05                	jne    c00095f2 <linear_get_description+0xe>
c00095ed:	b8 74 72 02 c0       	mov    eax,0xc0027274
c00095f2:	c3                   	ret    

c00095f3 <linear_set_converter>:
c00095f3:	53                   	push   ebx
c00095f4:	b8 0a 00 00 00       	mov    eax,0xa
c00095f9:	83 ec 08             	sub    esp,0x8
c00095fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009600:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009605:	75 6e                	jne    c0009675 <linear_set_converter+0x82>
c0009607:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000960a:	85 c0                	test   eax,eax
c000960c:	74 13                	je     c0009621 <linear_set_converter+0x2e>
c000960e:	83 ec 0c             	sub    esp,0xc
c0009611:	50                   	push   eax
c0009612:	e8 b9 5e 00 00       	call   c000f4d0 <free>
c0009617:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000961e:	83 c4 10             	add    esp,0x10
c0009621:	50                   	push   eax
c0009622:	50                   	push   eax
c0009623:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009626:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000962d:	50                   	push   eax
c000962e:	6a 01                	push   0x1
c0009630:	e8 bb 5e 00 00       	call   c000f4f0 <calloc>
c0009635:	83 c4 10             	add    esp,0x10
c0009638:	89 c2                	mov    edx,eax
c000963a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000963d:	85 d2                	test   edx,edx
c000963f:	b8 01 00 00 00       	mov    eax,0x1
c0009644:	74 2f                	je     c0009675 <linear_set_converter+0x82>
c0009646:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009649:	83 ec 0c             	sub    esp,0xc
c000964c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000964f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009655:	c7 43 24 af 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008daf
c000965c:	c7 43 20 af 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008daf
c0009663:	c7 43 28 a3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095a3
c000966a:	53                   	push   ebx
c000966b:	e8 33 ff ff ff       	call   c00095a3 <linear_reset>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	31 c0                	xor    eax,eax
c0009675:	83 c4 08             	add    esp,0x8
c0009678:	5b                   	pop    ebx
c0009679:	c3                   	ret    

c000967a <int_to_fp>:
c000967a:	c1 e0 0c             	shl    eax,0xc
c000967d:	c3                   	ret    

c000967e <fp_to_int>:
c000967e:	c1 f8 0c             	sar    eax,0xc
c0009681:	c3                   	ret    

c0009682 <fp_fraction_part>:
c0009682:	25 ff 0f 00 00       	and    eax,0xfff
c0009687:	c3                   	ret    

c0009688 <fp_to_double>:
c0009688:	83 ec 1c             	sub    esp,0x1c
c000968b:	e8 f2 ff ff ff       	call   c0009682 <fp_fraction_part>
c0009690:	83 ec 0c             	sub    esp,0xc
c0009693:	50                   	push   eax
c0009694:	e8 fa c0 01 00       	call   c0025793 <__floatsidf>
c0009699:	83 c4 10             	add    esp,0x10
c000969c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096a4:	68 00 00 30 3f       	push   0x3f300000
c00096a9:	6a 00                	push   0x0
c00096ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b3:	e8 78 ba 01 00       	call   c0025130 <__muldf3>
c00096b8:	83 c4 2c             	add    esp,0x2c
c00096bb:	c3                   	ret    

c00096bc <calc_output_single>:
c00096bc:	55                   	push   ebp
c00096bd:	57                   	push   edi
c00096be:	56                   	push   esi
c00096bf:	89 c6                	mov    esi,eax
c00096c1:	53                   	push   ebx
c00096c2:	89 d3                	mov    ebx,edx
c00096c4:	83 ec 4c             	sub    esp,0x4c
c00096c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096ce:	e8 a7 ff ff ff       	call   c000967a <int_to_fp>
c00096d3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096da:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096de:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096e2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096e5:	99                   	cdq    
c00096e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096ee:	f7 fb                	idiv   ebx
c00096f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00096f8:	89 da                	mov    edx,ebx
c00096fa:	0f af d0             	imul   edx,eax
c00096fd:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009701:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009705:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009709:	29 c2                	sub    edx,eax
c000970b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000970e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009712:	83 c5 04             	add    ebp,0x4
c0009715:	e8 6e ff ff ff       	call   c0009688 <fp_to_double>
c000971a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000971e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009726:	e8 53 ff ff ff       	call   c000967e <fp_to_int>
c000972b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000972e:	52                   	push   edx
c000972f:	52                   	push   edx
c0009730:	51                   	push   ecx
c0009731:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009735:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009739:	e8 0a ad 01 00       	call   c0024448 <__subsf3>
c000973e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009741:	e8 e1 c3 01 00       	call   c0025b27 <__extendsfdf2>
c0009746:	83 c4 10             	add    esp,0x10
c0009749:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000974d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009751:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009755:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000975d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009761:	e8 ca b9 01 00       	call   c0025130 <__muldf3>
c0009766:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000976a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000976e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009771:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009775:	e8 ad c3 01 00       	call   c0025b27 <__extendsfdf2>
c000977a:	83 c4 10             	add    esp,0x10
c000977d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009781:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009785:	52                   	push   edx
c0009786:	50                   	push   eax
c0009787:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978f:	e8 1f b3 01 00       	call   c0024ab3 <__adddf3>
c0009794:	59                   	pop    ecx
c0009795:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009799:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000979d:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097a3:	e8 7f c3 01 00       	call   c0025b27 <__extendsfdf2>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b3:	52                   	push   edx
c00097b4:	50                   	push   eax
c00097b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bd:	e8 6e b9 01 00       	call   c0025130 <__muldf3>
c00097c2:	83 c4 10             	add    esp,0x10
c00097c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097cd:	52                   	push   edx
c00097ce:	50                   	push   eax
c00097cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d7:	e8 d7 b2 01 00       	call   c0024ab3 <__adddf3>
c00097dc:	83 c4 10             	add    esp,0x10
c00097df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097e7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097eb:	0f 89 1d ff ff ff    	jns    c000970e <calc_output_single+0x52>
c00097f1:	89 d9                	mov    ecx,ebx
c00097f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097f7:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097fb:	89 dd                	mov    ebp,ebx
c00097fd:	29 c8                	sub    eax,ecx
c00097ff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009807:	99                   	cdq    
c0009808:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009810:	f7 fb                	idiv   ebx
c0009812:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009816:	0f af e8             	imul   ebp,eax
c0009819:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000981d:	01 cd                	add    ebp,ecx
c000981f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009822:	89 e8                	mov    eax,ebp
c0009824:	83 ee 04             	sub    esi,0x4
c0009827:	e8 5c fe ff ff       	call   c0009688 <fp_to_double>
c000982c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009830:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009834:	89 e8                	mov    eax,ebp
c0009836:	29 dd                	sub    ebp,ebx
c0009838:	e8 41 fe ff ff       	call   c000967e <fp_to_int>
c000983d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009840:	52                   	push   edx
c0009841:	52                   	push   edx
c0009842:	51                   	push   ecx
c0009843:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009847:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000984b:	e8 f8 ab 01 00       	call   c0024448 <__subsf3>
c0009850:	89 04 24             	mov    DWORD PTR [esp],eax
c0009853:	e8 cf c2 01 00       	call   c0025b27 <__extendsfdf2>
c0009858:	83 c4 10             	add    esp,0x10
c000985b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000985f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000986b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000986f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009873:	e8 b8 b8 01 00       	call   c0025130 <__muldf3>
c0009878:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000987c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009880:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009883:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009887:	e8 9b c2 01 00       	call   c0025b27 <__extendsfdf2>
c000988c:	83 c4 10             	add    esp,0x10
c000988f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009893:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009897:	52                   	push   edx
c0009898:	50                   	push   eax
c0009899:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000989d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a1:	e8 0d b2 01 00       	call   c0024ab3 <__adddf3>
c00098a6:	59                   	pop    ecx
c00098a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098af:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098b5:	e8 6d c2 01 00       	call   c0025b27 <__extendsfdf2>
c00098ba:	83 c4 10             	add    esp,0x10
c00098bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c5:	52                   	push   edx
c00098c6:	50                   	push   eax
c00098c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cf:	e8 5c b8 01 00       	call   c0025130 <__muldf3>
c00098d4:	83 c4 10             	add    esp,0x10
c00098d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098df:	52                   	push   edx
c00098e0:	50                   	push   eax
c00098e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e9:	e8 c5 b1 01 00       	call   c0024ab3 <__adddf3>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 ed                	test   ebp,ebp
c00098f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098fb:	0f 8f 21 ff ff ff    	jg     c0009822 <calc_output_single+0x166>
c0009901:	52                   	push   edx
c0009902:	50                   	push   eax
c0009903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990b:	e8 a3 b1 01 00       	call   c0024ab3 <__adddf3>
c0009910:	83 c4 5c             	add    esp,0x5c
c0009913:	5b                   	pop    ebx
c0009914:	5e                   	pop    esi
c0009915:	5f                   	pop    edi
c0009916:	5d                   	pop    ebp
c0009917:	c3                   	ret    

c0009918 <calc_output_stereo>:
c0009918:	55                   	push   ebp
c0009919:	89 cd                	mov    ebp,ecx
c000991b:	57                   	push   edi
c000991c:	56                   	push   esi
c000991d:	53                   	push   ebx
c000991e:	89 c3                	mov    ebx,eax
c0009920:	83 ec 6c             	sub    esp,0x6c
c0009923:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009927:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000992e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009935:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009939:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000993d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009940:	e8 35 fd ff ff       	call   c000967a <int_to_fp>
c0009945:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000994d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009951:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009959:	29 c8                	sub    eax,ecx
c000995b:	99                   	cdq    
c000995c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009964:	0f af d0             	imul   edx,eax
c0009967:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000996a:	31 d2                	xor    edx,edx
c000996c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009970:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009974:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009977:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000997b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000997e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009982:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009986:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009989:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000998e:	29 c1                	sub    ecx,eax
c0009990:	31 c0                	xor    eax,eax
c0009992:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009995:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009999:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000999d:	83 c7 08             	add    edi,0x8
c00099a0:	e8 e3 fc ff ff       	call   c0009688 <fp_to_double>
c00099a5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099a9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099b1:	e8 c8 fc ff ff       	call   c000967e <fp_to_int>
c00099b6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099b9:	52                   	push   edx
c00099ba:	52                   	push   edx
c00099bb:	51                   	push   ecx
c00099bc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099c0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099c4:	e8 7f aa 01 00       	call   c0024448 <__subsf3>
c00099c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099cc:	e8 56 c1 01 00       	call   c0025b27 <__extendsfdf2>
c00099d1:	83 c4 10             	add    esp,0x10
c00099d4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099d8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ec:	e8 3f b7 01 00       	call   c0025130 <__muldf3>
c00099f1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00099f5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00099f9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099fc:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a00:	e8 22 c1 01 00       	call   c0025b27 <__extendsfdf2>
c0009a05:	83 c4 10             	add    esp,0x10
c0009a08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a10:	52                   	push   edx
c0009a11:	50                   	push   eax
c0009a12:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a16:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a1a:	e8 94 b0 01 00       	call   c0024ab3 <__adddf3>
c0009a1f:	59                   	pop    ecx
c0009a20:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a24:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a28:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a2e:	e8 f4 c0 01 00       	call   c0025b27 <__extendsfdf2>
c0009a33:	83 c4 10             	add    esp,0x10
c0009a36:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a46:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4e:	e8 dd b6 01 00       	call   c0025130 <__muldf3>
c0009a53:	83 c4 10             	add    esp,0x10
c0009a56:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a5a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a5e:	52                   	push   edx
c0009a5f:	50                   	push   eax
c0009a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a68:	e8 46 b0 01 00       	call   c0024ab3 <__adddf3>
c0009a6d:	59                   	pop    ecx
c0009a6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a72:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a76:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a7c:	e8 a6 c0 01 00       	call   c0025b27 <__extendsfdf2>
c0009a81:	83 c4 10             	add    esp,0x10
c0009a84:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a88:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a94:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a98:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9c:	e8 8f b6 01 00       	call   c0025130 <__muldf3>
c0009aa1:	83 c4 10             	add    esp,0x10
c0009aa4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009aa8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009aac:	52                   	push   edx
c0009aad:	50                   	push   eax
c0009aae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab6:	e8 f8 af 01 00       	call   c0024ab3 <__adddf3>
c0009abb:	83 c4 10             	add    esp,0x10
c0009abe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ac2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aca:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ace:	0f 89 c5 fe ff ff    	jns    c0009999 <calc_output_stereo+0x81>
c0009ad4:	29 e9                	sub    ecx,ebp
c0009ad6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ada:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009ade:	29 c8                	sub    eax,ecx
c0009ae0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009ae8:	99                   	cdq    
c0009ae9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009aed:	31 d2                	xor    edx,edx
c0009aef:	0f af f8             	imul   edi,eax
c0009af2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009af6:	40                   	inc    eax
c0009af7:	01 cf                	add    edi,ecx
c0009af9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009afe:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b02:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b0a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b0d:	31 c0                	xor    eax,eax
c0009b0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b13:	89 f8                	mov    eax,edi
c0009b15:	83 eb 08             	sub    ebx,0x8
c0009b18:	e8 6b fb ff ff       	call   c0009688 <fp_to_double>
c0009b1d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b25:	89 f8                	mov    eax,edi
c0009b27:	e8 52 fb ff ff       	call   c000967e <fp_to_int>
c0009b2c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b2f:	52                   	push   edx
c0009b30:	52                   	push   edx
c0009b31:	55                   	push   ebp
c0009b32:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b36:	e8 0d a9 01 00       	call   c0024448 <__subsf3>
c0009b3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b3e:	e8 e4 bf 01 00       	call   c0025b27 <__extendsfdf2>
c0009b43:	83 c4 10             	add    esp,0x10
c0009b46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b4a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b4e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5e:	e8 cd b5 01 00       	call   c0025130 <__muldf3>
c0009b63:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b66:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b6a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b6e:	e8 b4 bf 01 00       	call   c0025b27 <__extendsfdf2>
c0009b73:	83 c4 10             	add    esp,0x10
c0009b76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b7e:	52                   	push   edx
c0009b7f:	50                   	push   eax
c0009b80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b88:	e8 26 af 01 00       	call   c0024ab3 <__adddf3>
c0009b8d:	59                   	pop    ecx
c0009b8e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009b92:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009b96:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009b9c:	e8 86 bf 01 00       	call   c0025b27 <__extendsfdf2>
c0009ba1:	83 c4 10             	add    esp,0x10
c0009ba4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ba8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bbc:	e8 6f b5 01 00       	call   c0025130 <__muldf3>
c0009bc1:	83 c4 10             	add    esp,0x10
c0009bc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bcc:	52                   	push   edx
c0009bcd:	50                   	push   eax
c0009bce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd6:	e8 d8 ae 01 00       	call   c0024ab3 <__adddf3>
c0009bdb:	5d                   	pop    ebp
c0009bdc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009be0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009be4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bea:	e8 38 bf 01 00       	call   c0025b27 <__extendsfdf2>
c0009bef:	83 c4 10             	add    esp,0x10
c0009bf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c0a:	e8 21 b5 01 00       	call   c0025130 <__muldf3>
c0009c0f:	83 c4 10             	add    esp,0x10
c0009c12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c1a:	52                   	push   edx
c0009c1b:	50                   	push   eax
c0009c1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c24:	e8 8a ae 01 00       	call   c0024ab3 <__adddf3>
c0009c29:	83 c4 10             	add    esp,0x10
c0009c2c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c38:	85 ff                	test   edi,edi
c0009c3a:	0f 8f d3 fe ff ff    	jg     c0009b13 <calc_output_stereo+0x1fb>
c0009c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c50:	e8 5e ae 01 00       	call   c0024ab3 <__adddf3>
c0009c55:	83 c4 10             	add    esp,0x10
c0009c58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c60:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c64:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c70:	e8 bb b4 01 00       	call   c0025130 <__muldf3>
c0009c75:	59                   	pop    ecx
c0009c76:	5b                   	pop    ebx
c0009c77:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c87:	e8 77 bd 01 00       	call   c0025a03 <__truncdfsf2>
c0009c8c:	83 c4 10             	add    esp,0x10
c0009c8f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009c96:	89 03                	mov    DWORD PTR [ebx],eax
c0009c98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca8:	e8 06 ae 01 00       	call   c0024ab3 <__adddf3>
c0009cad:	83 c4 10             	add    esp,0x10
c0009cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc8:	e8 63 b4 01 00       	call   c0025130 <__muldf3>
c0009ccd:	5e                   	pop    esi
c0009cce:	5f                   	pop    edi
c0009ccf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cd3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cdf:	e8 1f bd 01 00       	call   c0025a03 <__truncdfsf2>
c0009ce4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009ceb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cee:	83 c4 7c             	add    esp,0x7c
c0009cf1:	5b                   	pop    ebx
c0009cf2:	5e                   	pop    esi
c0009cf3:	5f                   	pop    edi
c0009cf4:	5d                   	pop    ebp
c0009cf5:	c3                   	ret    

c0009cf6 <calc_output_quad>:
c0009cf6:	55                   	push   ebp
c0009cf7:	57                   	push   edi
c0009cf8:	56                   	push   esi
c0009cf9:	89 c6                	mov    esi,eax
c0009cfb:	53                   	push   ebx
c0009cfc:	83 ec 7c             	sub    esp,0x7c
c0009cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d03:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d07:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d0e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d20:	e8 55 f9 ff ff       	call   c000967a <int_to_fp>
c0009d25:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d28:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d2b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d2f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d33:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d37:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d3b:	99                   	cdq    
c0009d3c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d40:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d44:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d47:	31 d2                	xor    edx,edx
c0009d49:	0f af d8             	imul   ebx,eax
c0009d4c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d54:	0f af c7             	imul   eax,edi
c0009d57:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d5b:	29 c1                	sub    ecx,eax
c0009d5d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d65:	31 c0                	xor    eax,eax
c0009d67:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d6e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d76:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d82:	89 d8                	mov    eax,ebx
c0009d84:	83 c7 10             	add    edi,0x10
c0009d87:	e8 fc f8 ff ff       	call   c0009688 <fp_to_double>
c0009d8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d94:	89 d8                	mov    eax,ebx
c0009d96:	e8 e3 f8 ff ff       	call   c000967e <fp_to_int>
c0009d9b:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009d9f:	52                   	push   edx
c0009da0:	52                   	push   edx
c0009da1:	51                   	push   ecx
c0009da2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009da6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009daa:	e8 99 a6 01 00       	call   c0024448 <__subsf3>
c0009daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009db2:	e8 70 bd 01 00       	call   c0025b27 <__extendsfdf2>
c0009db7:	83 c4 10             	add    esp,0x10
c0009dba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dbe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dce:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd2:	e8 59 b3 01 00       	call   c0025130 <__muldf3>
c0009dd7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009ddb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ddf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009de6:	e8 3c bd 01 00       	call   c0025b27 <__extendsfdf2>
c0009deb:	83 c4 10             	add    esp,0x10
c0009dee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009df2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df6:	52                   	push   edx
c0009df7:	50                   	push   eax
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e00:	e8 ae ac 01 00       	call   c0024ab3 <__adddf3>
c0009e05:	59                   	pop    ecx
c0009e06:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e0a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e14:	e8 0e bd 01 00       	call   c0025b27 <__extendsfdf2>
c0009e19:	83 c4 10             	add    esp,0x10
c0009e1c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e20:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e30:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e34:	e8 f7 b2 01 00       	call   c0025130 <__muldf3>
c0009e39:	83 c4 10             	add    esp,0x10
c0009e3c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e40:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e44:	52                   	push   edx
c0009e45:	50                   	push   eax
c0009e46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4e:	e8 60 ac 01 00       	call   c0024ab3 <__adddf3>
c0009e53:	59                   	pop    ecx
c0009e54:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e58:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e5c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e62:	e8 c0 bc 01 00       	call   c0025b27 <__extendsfdf2>
c0009e67:	83 c4 10             	add    esp,0x10
c0009e6a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e6e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e7a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e82:	e8 a9 b2 01 00       	call   c0025130 <__muldf3>
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e8e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e92:	52                   	push   edx
c0009e93:	50                   	push   eax
c0009e94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9c:	e8 12 ac 01 00       	call   c0024ab3 <__adddf3>
c0009ea1:	59                   	pop    ecx
c0009ea2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ea6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eaa:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009eb0:	e8 72 bc 01 00       	call   c0025b27 <__extendsfdf2>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed0:	e8 5b b2 01 00       	call   c0025130 <__muldf3>
c0009ed5:	83 c4 10             	add    esp,0x10
c0009ed8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009edc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ee0:	52                   	push   edx
c0009ee1:	50                   	push   eax
c0009ee2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ee6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009eea:	e8 c4 ab 01 00       	call   c0024ab3 <__adddf3>
c0009eef:	59                   	pop    ecx
c0009ef0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ef4:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ef8:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009efe:	e8 24 bc 01 00       	call   c0025b27 <__extendsfdf2>
c0009f03:	83 c4 10             	add    esp,0x10
c0009f06:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f16:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1e:	e8 0d b2 01 00       	call   c0025130 <__muldf3>
c0009f23:	83 c4 10             	add    esp,0x10
c0009f26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f2e:	52                   	push   edx
c0009f2f:	50                   	push   eax
c0009f30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f38:	e8 76 ab 01 00       	call   c0024ab3 <__adddf3>
c0009f3d:	83 c4 10             	add    esp,0x10
c0009f40:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f44:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f48:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f4c:	0f 89 30 fe ff ff    	jns    c0009d82 <calc_output_quad+0x8c>
c0009f52:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f56:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f5a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f5e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f62:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f6a:	29 c8                	sub    eax,ecx
c0009f6c:	99                   	cdq    
c0009f6d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f71:	31 d2                	xor    edx,edx
c0009f73:	0f af d8             	imul   ebx,eax
c0009f76:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f7a:	40                   	inc    eax
c0009f7b:	01 cb                	add    ebx,ecx
c0009f7d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f82:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f86:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f8e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009f91:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009f99:	31 c0                	xor    eax,eax
c0009f9b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009f9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fa3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fa7:	89 d8                	mov    eax,ebx
c0009fa9:	83 ee 10             	sub    esi,0x10
c0009fac:	e8 d7 f6 ff ff       	call   c0009688 <fp_to_double>
c0009fb1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fb9:	89 d8                	mov    eax,ebx
c0009fbb:	e8 be f6 ff ff       	call   c000967e <fp_to_int>
c0009fc0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fc4:	52                   	push   edx
c0009fc5:	52                   	push   edx
c0009fc6:	57                   	push   edi
c0009fc7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fcb:	e8 78 a4 01 00       	call   c0024448 <__subsf3>
c0009fd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd3:	e8 4f bb 01 00       	call   c0025b27 <__extendsfdf2>
c0009fd8:	83 c4 10             	add    esp,0x10
c0009fdb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fdf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009feb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff3:	e8 38 b1 01 00       	call   c0025130 <__muldf3>
c0009ff8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ffb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a003:	e8 1f bb 01 00       	call   c0025b27 <__extendsfdf2>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a00f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a013:	52                   	push   edx
c000a014:	50                   	push   eax
c000a015:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a019:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01d:	e8 91 aa 01 00       	call   c0024ab3 <__adddf3>
c000a022:	59                   	pop    ecx
c000a023:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a027:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a02b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a031:	e8 f1 ba 01 00       	call   c0025b27 <__extendsfdf2>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a049:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a04d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a051:	e8 da b0 01 00       	call   c0025130 <__muldf3>
c000a056:	83 c4 10             	add    esp,0x10
c000a059:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a061:	52                   	push   edx
c000a062:	50                   	push   eax
c000a063:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a067:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a06b:	e8 43 aa 01 00       	call   c0024ab3 <__adddf3>
c000a070:	5f                   	pop    edi
c000a071:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a075:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a079:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a07f:	e8 a3 ba 01 00       	call   c0025b27 <__extendsfdf2>
c000a084:	83 c4 10             	add    esp,0x10
c000a087:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a097:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09f:	e8 8c b0 01 00       	call   c0025130 <__muldf3>
c000a0a4:	83 c4 10             	add    esp,0x10
c000a0a7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ab:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0af:	52                   	push   edx
c000a0b0:	50                   	push   eax
c000a0b1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0b5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0b9:	e8 f5 a9 01 00       	call   c0024ab3 <__adddf3>
c000a0be:	59                   	pop    ecx
c000a0bf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0c3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0c7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0cd:	e8 55 ba 01 00       	call   c0025b27 <__extendsfdf2>
c000a0d2:	83 c4 10             	add    esp,0x10
c000a0d5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ed:	e8 3e b0 01 00       	call   c0025130 <__muldf3>
c000a0f2:	83 c4 10             	add    esp,0x10
c000a0f5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fd:	52                   	push   edx
c000a0fe:	50                   	push   eax
c000a0ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a103:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a107:	e8 a7 a9 01 00       	call   c0024ab3 <__adddf3>
c000a10c:	5f                   	pop    edi
c000a10d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a111:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a115:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a11b:	e8 07 ba 01 00       	call   c0025b27 <__extendsfdf2>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a127:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a133:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a137:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13b:	e8 f0 af 01 00       	call   c0025130 <__muldf3>
c000a140:	83 c4 10             	add    esp,0x10
c000a143:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a147:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a14b:	52                   	push   edx
c000a14c:	50                   	push   eax
c000a14d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a151:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a155:	e8 59 a9 01 00       	call   c0024ab3 <__adddf3>
c000a15a:	83 c4 10             	add    esp,0x10
c000a15d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a161:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a165:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a169:	85 db                	test   ebx,ebx
c000a16b:	0f 8f 36 fe ff ff    	jg     c0009fa7 <calc_output_quad+0x2b1>
c000a171:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a181:	e8 2d a9 01 00       	call   c0024ab3 <__adddf3>
c000a186:	83 c4 10             	add    esp,0x10
c000a189:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a18d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a195:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a199:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a1:	e8 8a af 01 00       	call   c0025130 <__muldf3>
c000a1a6:	59                   	pop    ecx
c000a1a7:	5b                   	pop    ebx
c000a1a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b8:	e8 46 b8 01 00       	call   c0025a03 <__truncdfsf2>
c000a1bd:	83 c4 10             	add    esp,0x10
c000a1c0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1c7:	89 06                	mov    DWORD PTR [esi],eax
c000a1c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1d9:	e8 d5 a8 01 00       	call   c0024ab3 <__adddf3>
c000a1de:	83 c4 10             	add    esp,0x10
c000a1e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f9:	e8 32 af 01 00       	call   c0025130 <__muldf3>
c000a1fe:	5e                   	pop    esi
c000a1ff:	5f                   	pop    edi
c000a200:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a210:	e8 ee b7 01 00       	call   c0025a03 <__truncdfsf2>
c000a215:	83 c4 10             	add    esp,0x10
c000a218:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a21f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a222:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a226:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a22a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a22e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a232:	e8 7c a8 01 00       	call   c0024ab3 <__adddf3>
c000a237:	83 c4 10             	add    esp,0x10
c000a23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a252:	e8 d9 ae 01 00       	call   c0025130 <__muldf3>
c000a257:	5d                   	pop    ebp
c000a258:	59                   	pop    ecx
c000a259:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a25d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a261:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a269:	e8 95 b7 01 00       	call   c0025a03 <__truncdfsf2>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a278:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a27b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a27f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a283:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a287:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28b:	e8 23 a8 01 00       	call   c0024ab3 <__adddf3>
c000a290:	83 c4 10             	add    esp,0x10
c000a293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a297:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a29b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a29f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ab:	e8 80 ae 01 00       	call   c0025130 <__muldf3>
c000a2b0:	5b                   	pop    ebx
c000a2b1:	5e                   	pop    esi
c000a2b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c2:	e8 3c b7 01 00       	call   c0025a03 <__truncdfsf2>
c000a2c7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2ce:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2d1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2d7:	5b                   	pop    ebx
c000a2d8:	5e                   	pop    esi
c000a2d9:	5f                   	pop    edi
c000a2da:	5d                   	pop    ebp
c000a2db:	c3                   	ret    

c000a2dc <calc_output_hex>:
c000a2dc:	55                   	push   ebp
c000a2dd:	89 cd                	mov    ebp,ecx
c000a2df:	57                   	push   edi
c000a2e0:	56                   	push   esi
c000a2e1:	53                   	push   ebx
c000a2e2:	89 c3                	mov    ebx,eax
c000a2e4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2ea:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2ed:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a2f4:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a2fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a303:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a306:	e8 6f f3 ff ff       	call   c000967a <int_to_fp>
c000a30b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a30e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a312:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a315:	29 c8                	sub    eax,ecx
c000a317:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a31b:	99                   	cdq    
c000a31c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a324:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a327:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a32f:	0f af f8             	imul   edi,eax
c000a332:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a335:	01 cf                	add    edi,ecx
c000a337:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a33b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a33e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a342:	0f af c2             	imul   eax,edx
c000a345:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a349:	29 c1                	sub    ecx,eax
c000a34b:	31 d2                	xor    edx,edx
c000a34d:	31 c0                	xor    eax,eax
c000a34f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a35a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a35e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a362:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a366:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a36a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a36e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a376:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a37a:	89 f8                	mov    eax,edi
c000a37c:	e8 07 f3 ff ff       	call   c0009688 <fp_to_double>
c000a381:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a385:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a389:	89 f8                	mov    eax,edi
c000a38b:	e8 ee f2 ff ff       	call   c000967e <fp_to_int>
c000a390:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a394:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a397:	52                   	push   edx
c000a398:	52                   	push   edx
c000a399:	51                   	push   ecx
c000a39a:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a39e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3a5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3a9:	e8 9a a0 01 00       	call   c0024448 <__subsf3>
c000a3ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3b1:	e8 71 b7 01 00       	call   c0025b27 <__extendsfdf2>
c000a3b6:	83 c4 10             	add    esp,0x10
c000a3b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3d1:	e8 5a ad 01 00       	call   c0025130 <__muldf3>
c000a3d6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3de:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3e5:	e8 3d b7 01 00       	call   c0025b27 <__extendsfdf2>
c000a3ea:	83 c4 10             	add    esp,0x10
c000a3ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f5:	52                   	push   edx
c000a3f6:	50                   	push   eax
c000a3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3ff:	e8 af a6 01 00       	call   c0024ab3 <__adddf3>
c000a404:	59                   	pop    ecx
c000a405:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a409:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a40d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a413:	e8 0f b7 01 00       	call   c0025b27 <__extendsfdf2>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a41f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a423:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a427:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a42f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a433:	e8 f8 ac 01 00       	call   c0025130 <__muldf3>
c000a438:	83 c4 10             	add    esp,0x10
c000a43b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a443:	52                   	push   edx
c000a444:	50                   	push   eax
c000a445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a449:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44d:	e8 61 a6 01 00       	call   c0024ab3 <__adddf3>
c000a452:	59                   	pop    ecx
c000a453:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a457:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a45b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a461:	e8 c1 b6 01 00       	call   c0025b27 <__extendsfdf2>
c000a466:	83 c4 10             	add    esp,0x10
c000a469:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a479:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a481:	e8 aa ac 01 00       	call   c0025130 <__muldf3>
c000a486:	83 c4 10             	add    esp,0x10
c000a489:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a48d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a491:	52                   	push   edx
c000a492:	50                   	push   eax
c000a493:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a497:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a49b:	e8 13 a6 01 00       	call   c0024ab3 <__adddf3>
c000a4a0:	59                   	pop    ecx
c000a4a1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4a5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4a9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4af:	e8 73 b6 01 00       	call   c0025b27 <__extendsfdf2>
c000a4b4:	83 c4 10             	add    esp,0x10
c000a4b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cf:	e8 5c ac 01 00       	call   c0025130 <__muldf3>
c000a4d4:	83 c4 10             	add    esp,0x10
c000a4d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4df:	52                   	push   edx
c000a4e0:	50                   	push   eax
c000a4e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4e9:	e8 c5 a5 01 00       	call   c0024ab3 <__adddf3>
c000a4ee:	59                   	pop    ecx
c000a4ef:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4f3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a4f7:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a4fd:	e8 25 b6 01 00       	call   c0025b27 <__extendsfdf2>
c000a502:	83 c4 10             	add    esp,0x10
c000a505:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a509:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a511:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a515:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a519:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51d:	e8 0e ac 01 00       	call   c0025130 <__muldf3>
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a529:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a52d:	52                   	push   edx
c000a52e:	50                   	push   eax
c000a52f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a533:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a537:	e8 77 a5 01 00       	call   c0024ab3 <__adddf3>
c000a53c:	59                   	pop    ecx
c000a53d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a541:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a545:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a54b:	e8 d7 b5 01 00       	call   c0025b27 <__extendsfdf2>
c000a550:	83 c4 10             	add    esp,0x10
c000a553:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a557:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a563:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a567:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56b:	e8 c0 ab 01 00       	call   c0025130 <__muldf3>
c000a570:	83 c4 10             	add    esp,0x10
c000a573:	83 c6 18             	add    esi,0x18
c000a576:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a57a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a57e:	52                   	push   edx
c000a57f:	50                   	push   eax
c000a580:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a584:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a588:	e8 26 a5 01 00       	call   c0024ab3 <__adddf3>
c000a58d:	59                   	pop    ecx
c000a58e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a592:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a596:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a59c:	e8 86 b5 01 00       	call   c0025b27 <__extendsfdf2>
c000a5a1:	83 c4 10             	add    esp,0x10
c000a5a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5bc:	e8 6f ab 01 00       	call   c0025130 <__muldf3>
c000a5c1:	83 c4 10             	add    esp,0x10
c000a5c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5cc:	52                   	push   edx
c000a5cd:	50                   	push   eax
c000a5ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d6:	e8 d8 a4 01 00       	call   c0024ab3 <__adddf3>
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5e2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5e6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5e9:	0f 89 8b fd ff ff    	jns    c000a37a <calc_output_hex+0x9e>
c000a5ef:	31 f6                	xor    esi,esi
c000a5f1:	31 ff                	xor    edi,edi
c000a5f3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a5f7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a5fa:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a5fe:	29 e9                	sub    ecx,ebp
c000a600:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a604:	29 c8                	sub    eax,ecx
c000a606:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a609:	99                   	cdq    
c000a60a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a60e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a611:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a615:	0f af e8             	imul   ebp,eax
c000a618:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a61c:	40                   	inc    eax
c000a61d:	01 cd                	add    ebp,ecx
c000a61f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a624:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a628:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a62c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a630:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a633:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a637:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a63b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a63f:	89 e8                	mov    eax,ebp
c000a641:	e8 42 f0 ff ff       	call   c0009688 <fp_to_double>
c000a646:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a64a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a64e:	89 e8                	mov    eax,ebp
c000a650:	e8 29 f0 ff ff       	call   c000967e <fp_to_int>
c000a655:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a659:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a65c:	52                   	push   edx
c000a65d:	52                   	push   edx
c000a65e:	51                   	push   ecx
c000a65f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a666:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a66d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a671:	e8 d2 9d 01 00       	call   c0024448 <__subsf3>
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	e8 a9 b4 01 00       	call   c0025b27 <__extendsfdf2>
c000a67e:	83 c4 10             	add    esp,0x10
c000a681:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a685:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a691:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a695:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a699:	e8 92 aa 01 00       	call   c0025130 <__muldf3>
c000a69e:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6a9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6b0:	e8 72 b4 01 00       	call   c0025b27 <__extendsfdf2>
c000a6b5:	83 c4 10             	add    esp,0x10
c000a6b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6c0:	52                   	push   edx
c000a6c1:	50                   	push   eax
c000a6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ca:	e8 e4 a3 01 00       	call   c0024ab3 <__adddf3>
c000a6cf:	59                   	pop    ecx
c000a6d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6d4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6d8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6de:	e8 44 b4 01 00       	call   c0025b27 <__extendsfdf2>
c000a6e3:	83 c4 10             	add    esp,0x10
c000a6e6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ea:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6fe:	e8 2d aa 01 00       	call   c0025130 <__muldf3>
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a70a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a70e:	52                   	push   edx
c000a70f:	50                   	push   eax
c000a710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a714:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a718:	e8 96 a3 01 00       	call   c0024ab3 <__adddf3>
c000a71d:	59                   	pop    ecx
c000a71e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a722:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a726:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a72c:	e8 f6 b3 01 00       	call   c0025b27 <__extendsfdf2>
c000a731:	83 c4 10             	add    esp,0x10
c000a734:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a738:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a744:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a748:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74c:	e8 df a9 01 00       	call   c0025130 <__muldf3>
c000a751:	83 c4 10             	add    esp,0x10
c000a754:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a758:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a75c:	52                   	push   edx
c000a75d:	50                   	push   eax
c000a75e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a762:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a766:	e8 48 a3 01 00       	call   c0024ab3 <__adddf3>
c000a76b:	59                   	pop    ecx
c000a76c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a770:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a774:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a77a:	e8 a8 b3 01 00       	call   c0025b27 <__extendsfdf2>
c000a77f:	83 c4 10             	add    esp,0x10
c000a782:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a786:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a792:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a796:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a79a:	e8 91 a9 01 00       	call   c0025130 <__muldf3>
c000a79f:	83 c4 10             	add    esp,0x10
c000a7a2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7aa:	52                   	push   edx
c000a7ab:	50                   	push   eax
c000a7ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b4:	e8 fa a2 01 00       	call   c0024ab3 <__adddf3>
c000a7b9:	59                   	pop    ecx
c000a7ba:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7be:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7c2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7c8:	e8 5a b3 01 00       	call   c0025b27 <__extendsfdf2>
c000a7cd:	83 c4 10             	add    esp,0x10
c000a7d0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e8:	e8 43 a9 01 00       	call   c0025130 <__muldf3>
c000a7ed:	83 c4 10             	add    esp,0x10
c000a7f0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f8:	52                   	push   edx
c000a7f9:	50                   	push   eax
c000a7fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a7fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a802:	e8 ac a2 01 00       	call   c0024ab3 <__adddf3>
c000a807:	59                   	pop    ecx
c000a808:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a80c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a810:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a816:	e8 0c b3 01 00       	call   c0025b27 <__extendsfdf2>
c000a81b:	83 c4 10             	add    esp,0x10
c000a81e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a822:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a832:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a836:	e8 f5 a8 01 00       	call   c0025130 <__muldf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	83 eb 18             	sub    ebx,0x18
c000a841:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a845:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a849:	52                   	push   edx
c000a84a:	50                   	push   eax
c000a84b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a84f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a853:	e8 5b a2 01 00       	call   c0024ab3 <__adddf3>
c000a858:	59                   	pop    ecx
c000a859:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a85d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a861:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a867:	e8 bb b2 01 00       	call   c0025b27 <__extendsfdf2>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a873:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a877:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a883:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a887:	e8 a4 a8 01 00       	call   c0025130 <__muldf3>
c000a88c:	83 c4 10             	add    esp,0x10
c000a88f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a897:	52                   	push   edx
c000a898:	50                   	push   eax
c000a899:	57                   	push   edi
c000a89a:	56                   	push   esi
c000a89b:	e8 13 a2 01 00       	call   c0024ab3 <__adddf3>
c000a8a0:	83 c4 10             	add    esp,0x10
c000a8a3:	89 c6                	mov    esi,eax
c000a8a5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8a8:	89 d7                	mov    edi,edx
c000a8aa:	85 ed                	test   ebp,ebp
c000a8ac:	0f 8f 8d fd ff ff    	jg     c000a63f <calc_output_hex+0x363>
c000a8b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c2:	e8 ec a1 01 00       	call   c0024ab3 <__adddf3>
c000a8c7:	83 c4 10             	add    esp,0x10
c000a8ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e1:	e8 4a a8 01 00       	call   c0025130 <__muldf3>
c000a8e6:	59                   	pop    ecx
c000a8e7:	5b                   	pop    ebx
c000a8e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f8:	e8 06 b1 01 00       	call   c0025a03 <__truncdfsf2>
c000a8fd:	83 c4 10             	add    esp,0x10
c000a900:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a907:	89 03                	mov    DWORD PTR [ebx],eax
c000a909:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a90d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a911:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a915:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a919:	e8 95 a1 01 00       	call   c0024ab3 <__adddf3>
c000a91e:	83 c4 10             	add    esp,0x10
c000a921:	89 04 24             	mov    DWORD PTR [esp],eax
c000a924:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a930:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a934:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a938:	e8 f3 a7 01 00       	call   c0025130 <__muldf3>
c000a93d:	5d                   	pop    ebp
c000a93e:	59                   	pop    ecx
c000a93f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a943:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a947:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94f:	e8 af b0 01 00       	call   c0025a03 <__truncdfsf2>
c000a954:	83 c4 10             	add    esp,0x10
c000a957:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a95e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a961:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a965:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a969:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a96d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a971:	e8 3d a1 01 00       	call   c0024ab3 <__adddf3>
c000a976:	83 c4 10             	add    esp,0x10
c000a979:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a980:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a984:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a988:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a990:	e8 9b a7 01 00       	call   c0025130 <__muldf3>
c000a995:	5b                   	pop    ebx
c000a996:	5d                   	pop    ebp
c000a997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a99b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a99f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a7:	e8 57 b0 01 00       	call   c0025a03 <__truncdfsf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9b6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9bd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9c9:	e8 e5 a0 01 00       	call   c0024ab3 <__adddf3>
c000a9ce:	83 c4 10             	add    esp,0x10
c000a9d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e8:	e8 43 a7 01 00       	call   c0025130 <__muldf3>
c000a9ed:	59                   	pop    ecx
c000a9ee:	5b                   	pop    ebx
c000a9ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ff:	e8 ff af 01 00       	call   c0025a03 <__truncdfsf2>
c000aa04:	83 c4 10             	add    esp,0x10
c000aa07:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa0e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa15:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa21:	e8 8d a0 01 00       	call   c0024ab3 <__adddf3>
c000aa26:	83 c4 10             	add    esp,0x10
c000aa29:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa40:	e8 eb a6 01 00       	call   c0025130 <__muldf3>
c000aa45:	5d                   	pop    ebp
c000aa46:	59                   	pop    ecx
c000aa47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa57:	e8 a7 af 01 00       	call   c0025a03 <__truncdfsf2>
c000aa5c:	83 c4 10             	add    esp,0x10
c000aa5f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa66:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa69:	57                   	push   edi
c000aa6a:	56                   	push   esi
c000aa6b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa6f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa73:	e8 3b a0 01 00       	call   c0024ab3 <__adddf3>
c000aa78:	83 c4 10             	add    esp,0x10
c000aa7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa92:	e8 99 a6 01 00       	call   c0025130 <__muldf3>
c000aa97:	5b                   	pop    ebx
c000aa98:	5e                   	pop    esi
c000aa99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa9:	e8 55 af 01 00       	call   c0025a03 <__truncdfsf2>
c000aaae:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aab5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aab8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aabe:	5b                   	pop    ebx
c000aabf:	5e                   	pop    esi
c000aac0:	5f                   	pop    edi
c000aac1:	5d                   	pop    ebp
c000aac2:	c3                   	ret    

c000aac3 <sinc_reset>:
c000aac3:	56                   	push   esi
c000aac4:	53                   	push   ebx
c000aac5:	51                   	push   ecx
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aacd:	85 db                	test   ebx,ebx
c000aacf:	74 59                	je     c000ab2a <sinc_reset+0x67>
c000aad1:	31 d2                	xor    edx,edx
c000aad3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aada:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aadd:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aae0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aae7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aaee:	31 c0                	xor    eax,eax
c000aaf0:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000aaf6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000aaf9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000aafc:	52                   	push   edx
c000aafd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab00:	c1 e0 02             	shl    eax,0x2
c000ab03:	50                   	push   eax
c000ab04:	6a 00                	push   0x0
c000ab06:	56                   	push   esi
c000ab07:	e8 6f 5b ff ff       	call   c000067b <memset>
c000ab0c:	83 c4 0c             	add    esp,0xc
c000ab0f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab12:	c1 e0 02             	shl    eax,0x2
c000ab15:	50                   	push   eax
c000ab16:	68 aa 00 00 00       	push   0xaa
c000ab1b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab1e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab21:	50                   	push   eax
c000ab22:	e8 54 5b ff ff       	call   c000067b <memset>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	58                   	pop    eax
c000ab2b:	5b                   	pop    ebx
c000ab2c:	5e                   	pop    esi
c000ab2d:	c3                   	ret    

c000ab2e <calc_output_multi>:
c000ab2e:	55                   	push   ebp
c000ab2f:	57                   	push   edi
c000ab30:	56                   	push   esi
c000ab31:	89 c6                	mov    esi,eax
c000ab33:	53                   	push   ebx
c000ab34:	83 ec 4c             	sub    esp,0x4c
c000ab37:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab3b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab3f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab43:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab47:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab53:	8d 46 44             	lea    eax,[esi+0x44]
c000ab56:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab59:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab63:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab66:	e8 0f eb ff ff       	call   c000967a <int_to_fp>
c000ab6b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab6e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab72:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab76:	99                   	cdq    
c000ab77:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab7f:	0f af d0             	imul   edx,eax
c000ab82:	0f af c3             	imul   eax,ebx
c000ab85:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab89:	29 c1                	sub    ecx,eax
c000ab8b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab8f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ab93:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ab9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ab9e:	57                   	push   edi
c000ab9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aba3:	6a 00                	push   0x0
c000aba5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba9:	e8 cd 5a ff ff       	call   c000067b <memset>
c000abae:	83 c4 10             	add    esp,0x10
c000abb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abb5:	89 df                	mov    edi,ebx
c000abb7:	e8 cc ea ff ff       	call   c0009688 <fp_to_double>
c000abbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc8:	e8 b1 ea ff ff       	call   c000967e <fp_to_int>
c000abcd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abd0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abd3:	51                   	push   ecx
c000abd4:	51                   	push   ecx
c000abd5:	55                   	push   ebp
c000abd6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abda:	e8 69 98 01 00       	call   c0024448 <__subsf3>
c000abdf:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe2:	e8 40 af 01 00       	call   c0025b27 <__extendsfdf2>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000abf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abfa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abfe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac02:	e8 29 a5 01 00       	call   c0025130 <__muldf3>
c000ac07:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac0a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac0e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac12:	e8 10 af 01 00       	call   c0025b27 <__extendsfdf2>
c000ac17:	83 c4 10             	add    esp,0x10
c000ac1a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac1e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac22:	52                   	push   edx
c000ac23:	50                   	push   eax
c000ac24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2c:	e8 82 9e 01 00       	call   c0024ab3 <__adddf3>
c000ac31:	83 c4 10             	add    esp,0x10
c000ac34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3c:	89 f8                	mov    eax,edi
c000ac3e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac43:	99                   	cdq    
c000ac44:	f7 f9                	idiv   ecx
c000ac46:	4a                   	dec    edx
c000ac47:	83 fa 06             	cmp    edx,0x6
c000ac4a:	77 07                	ja     c000ac53 <calc_output_multi+0x125>
c000ac4c:	ff 24 95 a4 72 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd8d5c]
c000ac53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac56:	4f                   	dec    edi
c000ac57:	83 ec 0c             	sub    esp,0xc
c000ac5a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac61:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac68:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac6c:	e8 b6 ae 01 00       	call   c0025b27 <__extendsfdf2>
c000ac71:	83 c4 10             	add    esp,0x10
c000ac74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac84:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac88:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8c:	e8 9f a4 01 00       	call   c0025130 <__muldf3>
c000ac91:	83 c4 10             	add    esp,0x10
c000ac94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac98:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9c:	52                   	push   edx
c000ac9d:	50                   	push   eax
c000ac9e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aca1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aca4:	e8 0a 9e 01 00       	call   c0024ab3 <__adddf3>
c000aca9:	83 c4 10             	add    esp,0x10
c000acac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acaf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acb5:	4f                   	dec    edi
c000acb6:	83 ec 0c             	sub    esp,0xc
c000acb9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acc0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acc7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000accb:	e8 57 ae 01 00       	call   c0025b27 <__extendsfdf2>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ace7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aceb:	e8 40 a4 01 00       	call   c0025130 <__muldf3>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acfb:	52                   	push   edx
c000acfc:	50                   	push   eax
c000acfd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad00:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad03:	e8 ab 9d 01 00       	call   c0024ab3 <__adddf3>
c000ad08:	83 c4 10             	add    esp,0x10
c000ad0b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad0e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad14:	4f                   	dec    edi
c000ad15:	83 ec 0c             	sub    esp,0xc
c000ad18:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad1f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad26:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad2a:	e8 f8 ad 01 00       	call   c0025b27 <__extendsfdf2>
c000ad2f:	83 c4 10             	add    esp,0x10
c000ad32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad36:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad42:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad46:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad4a:	e8 e1 a3 01 00       	call   c0025130 <__muldf3>
c000ad4f:	83 c4 10             	add    esp,0x10
c000ad52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5a:	52                   	push   edx
c000ad5b:	50                   	push   eax
c000ad5c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad5f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad62:	e8 4c 9d 01 00       	call   c0024ab3 <__adddf3>
c000ad67:	83 c4 10             	add    esp,0x10
c000ad6a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad6d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad70:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad73:	4f                   	dec    edi
c000ad74:	83 ec 0c             	sub    esp,0xc
c000ad77:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad7e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad85:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad89:	e8 99 ad 01 00       	call   c0025b27 <__extendsfdf2>
c000ad8e:	83 c4 10             	add    esp,0x10
c000ad91:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad95:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ada1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada9:	e8 82 a3 01 00       	call   c0025130 <__muldf3>
c000adae:	83 c4 10             	add    esp,0x10
c000adb1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adb9:	52                   	push   edx
c000adba:	50                   	push   eax
c000adbb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adbe:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adc1:	e8 ed 9c 01 00       	call   c0024ab3 <__adddf3>
c000adc6:	83 c4 10             	add    esp,0x10
c000adc9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adcc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000add2:	4f                   	dec    edi
c000add3:	83 ec 0c             	sub    esp,0xc
c000add6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000add9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000addd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ade4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ade8:	e8 3a ad 01 00       	call   c0025b27 <__extendsfdf2>
c000aded:	83 c4 10             	add    esp,0x10
c000adf0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adfc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae04:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae08:	e8 23 a3 01 00       	call   c0025130 <__muldf3>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	52                   	push   edx
c000ae19:	50                   	push   eax
c000ae1a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae1d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae20:	e8 8e 9c 01 00       	call   c0024ab3 <__adddf3>
c000ae25:	83 c4 10             	add    esp,0x10
c000ae28:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae2b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae2e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae31:	4f                   	dec    edi
c000ae32:	83 ec 0c             	sub    esp,0xc
c000ae35:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae3c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae43:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae47:	e8 db ac 01 00       	call   c0025b27 <__extendsfdf2>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae53:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae63:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae67:	e8 c4 a2 01 00       	call   c0025130 <__muldf3>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae73:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae77:	52                   	push   edx
c000ae78:	50                   	push   eax
c000ae79:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae7c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae7f:	e8 2f 9c 01 00       	call   c0024ab3 <__adddf3>
c000ae84:	83 c4 10             	add    esp,0x10
c000ae87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae8a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae90:	4f                   	dec    edi
c000ae91:	83 ec 0c             	sub    esp,0xc
c000ae94:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae9b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aea6:	e8 7c ac 01 00       	call   c0025b27 <__extendsfdf2>
c000aeab:	83 c4 10             	add    esp,0x10
c000aeae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec6:	e8 65 a2 01 00       	call   c0025130 <__muldf3>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed6:	52                   	push   edx
c000aed7:	50                   	push   eax
c000aed8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aedb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aede:	e8 d0 9b 01 00       	call   c0024ab3 <__adddf3>
c000aee3:	83 c4 10             	add    esp,0x10
c000aee6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aee9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aeec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeef:	4f                   	dec    edi
c000aef0:	83 ec 0c             	sub    esp,0xc
c000aef3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aef6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aefa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af01:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af05:	e8 1d ac 01 00       	call   c0025b27 <__extendsfdf2>
c000af0a:	83 c4 10             	add    esp,0x10
c000af0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af25:	e8 06 a2 01 00       	call   c0025130 <__muldf3>
c000af2a:	83 c4 10             	add    esp,0x10
c000af2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af31:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af35:	52                   	push   edx
c000af36:	50                   	push   eax
c000af37:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af3a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af3d:	e8 71 9b 01 00       	call   c0024ab3 <__adddf3>
c000af42:	83 c4 10             	add    esp,0x10
c000af45:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af48:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af4b:	85 ff                	test   edi,edi
c000af4d:	0f 8f e9 fc ff ff    	jg     c000ac3c <calc_output_multi+0x10e>
c000af53:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af57:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af5b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af5f:	0f 89 4c fc ff ff    	jns    c000abb1 <calc_output_multi+0x83>
c000af65:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af6d:	29 c8                	sub    eax,ecx
c000af6f:	99                   	cdq    
c000af70:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af78:	0f af d0             	imul   edx,eax
c000af7b:	40                   	inc    eax
c000af7c:	01 d1                	add    ecx,edx
c000af7e:	0f af c3             	imul   eax,ebx
c000af81:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af85:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af8c:	55                   	push   ebp
c000af8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000af91:	6a 00                	push   0x0
c000af93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af97:	e8 df 56 ff ff       	call   c000067b <memset>
c000af9c:	83 c4 10             	add    esp,0x10
c000af9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afa3:	e8 e0 e6 ff ff       	call   c0009688 <fp_to_double>
c000afa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb4:	e8 c5 e6 ff ff       	call   c000967e <fp_to_int>
c000afb9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afbc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afbf:	57                   	push   edi
c000afc0:	57                   	push   edi
c000afc1:	89 df                	mov    edi,ebx
c000afc3:	55                   	push   ebp
c000afc4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afc8:	e8 7b 94 01 00       	call   c0024448 <__subsf3>
c000afcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd0:	e8 52 ab 01 00       	call   c0025b27 <__extendsfdf2>
c000afd5:	83 c4 10             	add    esp,0x10
c000afd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afdc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000afe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aff0:	e8 3b a1 01 00       	call   c0025130 <__muldf3>
c000aff5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000aff8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000affc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b000:	e8 22 ab 01 00       	call   c0025b27 <__extendsfdf2>
c000b005:	83 c4 10             	add    esp,0x10
c000b008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b010:	52                   	push   edx
c000b011:	50                   	push   eax
c000b012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01a:	e8 94 9a 01 00       	call   c0024ab3 <__adddf3>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b026:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b02a:	89 f8                	mov    eax,edi
c000b02c:	b9 08 00 00 00       	mov    ecx,0x8
c000b031:	99                   	cdq    
c000b032:	f7 f9                	idiv   ecx
c000b034:	4a                   	dec    edx
c000b035:	83 fa 06             	cmp    edx,0x6
c000b038:	77 07                	ja     c000b041 <calc_output_multi+0x513>
c000b03a:	ff 24 95 c0 72 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd8d40]
c000b041:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b045:	4f                   	dec    edi
c000b046:	83 ec 0c             	sub    esp,0xc
c000b049:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b04c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b050:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b057:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b05b:	e8 c7 aa 01 00       	call   c0025b27 <__extendsfdf2>
c000b060:	83 c4 10             	add    esp,0x10
c000b063:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b067:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b06b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b06f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07b:	e8 b0 a0 01 00       	call   c0025130 <__muldf3>
c000b080:	83 c4 10             	add    esp,0x10
c000b083:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b087:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b08b:	52                   	push   edx
c000b08c:	50                   	push   eax
c000b08d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b090:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b093:	e8 1b 9a 01 00       	call   c0024ab3 <__adddf3>
c000b098:	83 c4 10             	add    esp,0x10
c000b09b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b09e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0a5:	4f                   	dec    edi
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0bb:	e8 67 aa 01 00       	call   c0025b27 <__extendsfdf2>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0db:	e8 50 a0 01 00       	call   c0025130 <__muldf3>
c000b0e0:	83 c4 10             	add    esp,0x10
c000b0e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0eb:	52                   	push   edx
c000b0ec:	50                   	push   eax
c000b0ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0f3:	e8 bb 99 01 00       	call   c0024ab3 <__adddf3>
c000b0f8:	83 c4 10             	add    esp,0x10
c000b0fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b101:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b105:	4f                   	dec    edi
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b10c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b110:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b117:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b11b:	e8 07 aa 01 00       	call   c0025b27 <__extendsfdf2>
c000b120:	83 c4 10             	add    esp,0x10
c000b123:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b127:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b133:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b137:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b13b:	e8 f0 9f 01 00       	call   c0025130 <__muldf3>
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b147:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b14b:	52                   	push   edx
c000b14c:	50                   	push   eax
c000b14d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b150:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b153:	e8 5b 99 01 00       	call   c0024ab3 <__adddf3>
c000b158:	83 c4 10             	add    esp,0x10
c000b15b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b15e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b165:	4f                   	dec    edi
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b16c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b170:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b177:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b17b:	e8 a7 a9 01 00       	call   c0025b27 <__extendsfdf2>
c000b180:	83 c4 10             	add    esp,0x10
c000b183:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b187:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b18f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b193:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b197:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b19b:	e8 90 9f 01 00       	call   c0025130 <__muldf3>
c000b1a0:	83 c4 10             	add    esp,0x10
c000b1a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ab:	52                   	push   edx
c000b1ac:	50                   	push   eax
c000b1ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1b3:	e8 fb 98 01 00       	call   c0024ab3 <__adddf3>
c000b1b8:	83 c4 10             	add    esp,0x10
c000b1bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c5:	4f                   	dec    edi
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1db:	e8 47 a9 01 00       	call   c0025b27 <__extendsfdf2>
c000b1e0:	83 c4 10             	add    esp,0x10
c000b1e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1fb:	e8 30 9f 01 00       	call   c0025130 <__muldf3>
c000b200:	83 c4 10             	add    esp,0x10
c000b203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b207:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b20b:	52                   	push   edx
c000b20c:	50                   	push   eax
c000b20d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b210:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b213:	e8 9b 98 01 00       	call   c0024ab3 <__adddf3>
c000b218:	83 c4 10             	add    esp,0x10
c000b21b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b21e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b225:	4f                   	dec    edi
c000b226:	83 ec 0c             	sub    esp,0xc
c000b229:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b22c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b230:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b237:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b23b:	e8 e7 a8 01 00       	call   c0025b27 <__extendsfdf2>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b247:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b253:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b257:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25b:	e8 d0 9e 01 00       	call   c0025130 <__muldf3>
c000b260:	83 c4 10             	add    esp,0x10
c000b263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b26b:	52                   	push   edx
c000b26c:	50                   	push   eax
c000b26d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b270:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b273:	e8 3b 98 01 00       	call   c0024ab3 <__adddf3>
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b27e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b285:	4f                   	dec    edi
c000b286:	83 ec 0c             	sub    esp,0xc
c000b289:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b290:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b297:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29b:	e8 87 a8 01 00       	call   c0025b27 <__extendsfdf2>
c000b2a0:	83 c4 10             	add    esp,0x10
c000b2a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bb:	e8 70 9e 01 00       	call   c0025130 <__muldf3>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	52                   	push   edx
c000b2cc:	50                   	push   eax
c000b2cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d3:	e8 db 97 01 00       	call   c0024ab3 <__adddf3>
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e5:	4f                   	dec    edi
c000b2e6:	83 ec 0c             	sub    esp,0xc
c000b2e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fb:	e8 27 a8 01 00       	call   c0025b27 <__extendsfdf2>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b307:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b30f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b313:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b317:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31b:	e8 10 9e 01 00       	call   c0025130 <__muldf3>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	52                   	push   edx
c000b32c:	50                   	push   eax
c000b32d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b330:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b333:	e8 7b 97 01 00       	call   c0024ab3 <__adddf3>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b33e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b341:	85 ff                	test   edi,edi
c000b343:	0f 8f e1 fc ff ff    	jg     c000b02a <calc_output_multi+0x4fc>
c000b349:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b34d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b351:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b355:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b35a:	0f 8f 3f fc ff ff    	jg     c000af9f <calc_output_multi+0x471>
c000b360:	be 08 00 00 00       	mov    esi,0x8
c000b365:	89 d8                	mov    eax,ebx
c000b367:	99                   	cdq    
c000b368:	f7 fe                	idiv   esi
c000b36a:	4a                   	dec    edx
c000b36b:	83 fa 06             	cmp    edx,0x6
c000b36e:	77 07                	ja     c000b377 <calc_output_multi+0x849>
c000b370:	ff 24 95 dc 72 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd8d24]
c000b377:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37b:	4b                   	dec    ebx
c000b37c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b380:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b383:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b387:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b38b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b38e:	e8 20 97 01 00       	call   c0024ab3 <__adddf3>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b39a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ae:	e8 7d 9d 01 00       	call   c0025130 <__muldf3>
c000b3b3:	5d                   	pop    ebp
c000b3b4:	59                   	pop    ecx
c000b3b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c5:	e8 39 a6 01 00       	call   c0025a03 <__truncdfsf2>
c000b3ca:	83 c4 10             	add    esp,0x10
c000b3cd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3d1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3d8:	4b                   	dec    ebx
c000b3d9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3dd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3eb:	e8 c3 96 01 00       	call   c0024ab3 <__adddf3>
c000b3f0:	83 c4 10             	add    esp,0x10
c000b3f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b403:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b407:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40b:	e8 20 9d 01 00       	call   c0025130 <__muldf3>
c000b410:	59                   	pop    ecx
c000b411:	5f                   	pop    edi
c000b412:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b416:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b422:	e8 dc a5 01 00       	call   c0025a03 <__truncdfsf2>
c000b427:	83 c4 10             	add    esp,0x10
c000b42a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b42e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b435:	4b                   	dec    ebx
c000b436:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b43a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b43d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b441:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b445:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b448:	e8 66 96 01 00       	call   c0024ab3 <__adddf3>
c000b44d:	83 c4 10             	add    esp,0x10
c000b450:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b454:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b468:	e8 c3 9c 01 00       	call   c0025130 <__muldf3>
c000b46d:	5f                   	pop    edi
c000b46e:	5d                   	pop    ebp
c000b46f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b473:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47f:	e8 7f a5 01 00       	call   c0025a03 <__truncdfsf2>
c000b484:	83 c4 10             	add    esp,0x10
c000b487:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b48b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b492:	4b                   	dec    ebx
c000b493:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b497:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b49a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b49e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4a5:	e8 09 96 01 00       	call   c0024ab3 <__adddf3>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c5:	e8 66 9c 01 00       	call   c0025130 <__muldf3>
c000b4ca:	5d                   	pop    ebp
c000b4cb:	59                   	pop    ecx
c000b4cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4dc:	e8 22 a5 01 00       	call   c0025a03 <__truncdfsf2>
c000b4e1:	83 c4 10             	add    esp,0x10
c000b4e4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4e8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ef:	4b                   	dec    ebx
c000b4f0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4f4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b502:	e8 ac 95 01 00       	call   c0024ab3 <__adddf3>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b50e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b522:	e8 09 9c 01 00       	call   c0025130 <__muldf3>
c000b527:	59                   	pop    ecx
c000b528:	5f                   	pop    edi
c000b529:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b52d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	e8 c5 a4 01 00       	call   c0025a03 <__truncdfsf2>
c000b53e:	83 c4 10             	add    esp,0x10
c000b541:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b545:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54c:	4b                   	dec    ebx
c000b54d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b551:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b558:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b55c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b55f:	e8 4f 95 01 00       	call   c0024ab3 <__adddf3>
c000b564:	83 c4 10             	add    esp,0x10
c000b567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b56b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b56f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57f:	e8 ac 9b 01 00       	call   c0025130 <__muldf3>
c000b584:	5f                   	pop    edi
c000b585:	5d                   	pop    ebp
c000b586:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b58a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b58e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b592:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b596:	e8 68 a4 01 00       	call   c0025a03 <__truncdfsf2>
c000b59b:	83 c4 10             	add    esp,0x10
c000b59e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5a2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a9:	4b                   	dec    ebx
c000b5aa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ae:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5bc:	e8 f2 94 01 00       	call   c0024ab3 <__adddf3>
c000b5c1:	83 c4 10             	add    esp,0x10
c000b5c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5dc:	e8 4f 9b 01 00       	call   c0025130 <__muldf3>
c000b5e1:	5d                   	pop    ebp
c000b5e2:	59                   	pop    ecx
c000b5e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f3:	e8 0b a4 01 00       	call   c0025a03 <__truncdfsf2>
c000b5f8:	83 c4 10             	add    esp,0x10
c000b5fb:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5ff:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b606:	4b                   	dec    ebx
c000b607:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b60e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b612:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b616:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b619:	e8 95 94 01 00       	call   c0024ab3 <__adddf3>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b625:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b635:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b639:	e8 f2 9a 01 00       	call   c0025130 <__muldf3>
c000b63e:	59                   	pop    ecx
c000b63f:	5f                   	pop    edi
c000b640:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b644:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b650:	e8 ae a3 01 00       	call   c0025a03 <__truncdfsf2>
c000b655:	83 c4 10             	add    esp,0x10
c000b658:	85 db                	test   ebx,ebx
c000b65a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b65e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b661:	0f 8f fe fc ff ff    	jg     c000b365 <calc_output_multi+0x837>
c000b667:	83 c4 4c             	add    esp,0x4c
c000b66a:	5b                   	pop    ebx
c000b66b:	5e                   	pop    esi
c000b66c:	5f                   	pop    edi
c000b66d:	5d                   	pop    ebp
c000b66e:	c3                   	ret    

c000b66f <double_to_fp>:
c000b66f:	83 ec 0c             	sub    esp,0xc
c000b672:	68 00 00 b0 40       	push   0x40b00000
c000b677:	6a 00                	push   0x0
c000b679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b681:	e8 aa 9a 01 00       	call   c0025130 <__muldf3>
c000b686:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b68a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b68e:	83 c4 1c             	add    esp,0x1c
c000b691:	e9 1a a5 01 00       	jmp    c0025bb0 <lrint>

c000b696 <prepare_data>:
c000b696:	55                   	push   ebp
c000b697:	57                   	push   edi
c000b698:	56                   	push   esi
c000b699:	53                   	push   ebx
c000b69a:	83 ec 1c             	sub    esp,0x1c
c000b69d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6a5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6a9:	0f 89 57 01 00 00    	jns    c000b806 <prepare_data+0x170>
c000b6af:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6b2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6b5:	85 d2                	test   edx,edx
c000b6b7:	75 0d                	jne    c000b6c6 <prepare_data+0x30>
c000b6b9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6bc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6bf:	29 d0                	sub    eax,edx
c000b6c1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6c4:	eb 44                	jmp    c000b70a <prepare_data+0x74>
c000b6c6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6c9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6cc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6cf:	39 c1                	cmp    ecx,eax
c000b6d1:	7d 04                	jge    c000b6d7 <prepare_data+0x41>
c000b6d3:	29 d0                	sub    eax,edx
c000b6d5:	eb 2d                	jmp    c000b704 <prepare_data+0x6e>
c000b6d7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6dd:	29 d7                	sub    edi,edx
c000b6df:	01 f7                	add    edi,esi
c000b6e1:	51                   	push   ecx
c000b6e2:	29 f2                	sub    edx,esi
c000b6e4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6eb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6ee:	51                   	push   ecx
c000b6ef:	52                   	push   edx
c000b6f0:	50                   	push   eax
c000b6f1:	e8 17 4f ff ff       	call   c000060d <memmove>
c000b6f6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6f9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6fc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b6ff:	29 f0                	sub    eax,esi
c000b701:	83 c4 10             	add    esp,0x10
c000b704:	29 f0                	sub    eax,esi
c000b706:	79 02                	jns    c000b70a <prepare_data+0x74>
c000b708:	31 c0                	xor    eax,eax
c000b70a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b70d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b710:	29 ef                	sub    edi,ebp
c000b712:	39 c7                	cmp    edi,eax
c000b714:	7e 02                	jle    c000b718 <prepare_data+0x82>
c000b716:	89 c7                	mov    edi,eax
c000b718:	89 f8                	mov    eax,edi
c000b71a:	99                   	cdq    
c000b71b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b71e:	b8 15 00 00 00       	mov    eax,0x15
c000b723:	29 d7                	sub    edi,edx
c000b725:	0f 88 dd 00 00 00    	js     c000b808 <prepare_data+0x172>
c000b72b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b72e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b731:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b734:	0f 8f ce 00 00 00    	jg     c000b808 <prepare_data+0x172>
c000b73a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b740:	50                   	push   eax
c000b741:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b748:	50                   	push   eax
c000b749:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b74d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b74f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b752:	50                   	push   eax
c000b753:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b756:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b75a:	50                   	push   eax
c000b75b:	e8 e5 4e ff ff       	call   c0000645 <memcpy>
c000b760:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b763:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b766:	01 fd                	add    ebp,edi
c000b768:	01 f9                	add    ecx,edi
c000b76a:	83 c4 10             	add    esp,0x10
c000b76d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b770:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b773:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b776:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b77a:	0f 85 86 00 00 00    	jne    c000b806 <prepare_data+0x170>
c000b780:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b783:	89 e8                	mov    eax,ebp
c000b785:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b788:	29 c8                	sub    eax,ecx
c000b78a:	39 f8                	cmp    eax,edi
c000b78c:	7d 78                	jge    c000b806 <prepare_data+0x170>
c000b78e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b792:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b796:	74 6e                	je     c000b806 <prepare_data+0x170>
c000b798:	8d 7e 04             	lea    edi,[esi+0x4]
c000b79b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b79f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7a2:	29 ef                	sub    edi,ebp
c000b7a4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7a8:	7c 29                	jl     c000b7d3 <prepare_data+0x13d>
c000b7aa:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7ad:	29 f1                	sub    ecx,esi
c000b7af:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7b6:	55                   	push   ebp
c000b7b7:	50                   	push   eax
c000b7b8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7bb:	50                   	push   eax
c000b7bc:	52                   	push   edx
c000b7bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7c1:	e8 47 4e ff ff       	call   c000060d <memmove>
c000b7c6:	83 c4 10             	add    esp,0x10
c000b7c9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7cc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7d3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7d9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7dc:	83 c6 05             	add    esi,0x5
c000b7df:	78 07                	js     c000b7e8 <prepare_data+0x152>
c000b7e1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7e4:	39 cf                	cmp    edi,ecx
c000b7e6:	7e 04                	jle    c000b7ec <prepare_data+0x156>
c000b7e8:	89 ce                	mov    esi,ecx
c000b7ea:	29 c6                	sub    esi,eax
c000b7ec:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ef:	51                   	push   ecx
c000b7f0:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b7f7:	51                   	push   ecx
c000b7f8:	6a 00                	push   0x0
c000b7fa:	50                   	push   eax
c000b7fb:	e8 7b 4e ff ff       	call   c000067b <memset>
c000b800:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	31 c0                	xor    eax,eax
c000b808:	83 c4 1c             	add    esp,0x1c
c000b80b:	5b                   	pop    ebx
c000b80c:	5e                   	pop    esi
c000b80d:	5f                   	pop    edi
c000b80e:	5d                   	pop    ebp
c000b80f:	c3                   	ret    

c000b810 <sinc_multichan_vari_process>:
c000b810:	55                   	push   ebp
c000b811:	ba 05 00 00 00       	mov    edx,0x5
c000b816:	57                   	push   edi
c000b817:	56                   	push   esi
c000b818:	53                   	push   ebx
c000b819:	83 ec 4c             	sub    esp,0x4c
c000b81c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b820:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b824:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b827:	85 db                	test   ebx,ebx
c000b829:	0f 84 9b 06 00 00    	je     c000beca <sinc_multichan_vari_process+0x6ba>
c000b82f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b832:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b835:	0f af c5             	imul   eax,ebp
c000b838:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b83b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b83e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b845:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b84c:	0f af c5             	imul   eax,ebp
c000b84f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b852:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b855:	8b 06                	mov    eax,DWORD PTR [esi]
c000b857:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b85b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b85f:	68 00 00 70 3f       	push   0x3f700000
c000b864:	6a 00                	push   0x0
c000b866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86e:	e8 8c a1 01 00       	call   c00259ff <__ltdf2>
c000b873:	83 c4 10             	add    esp,0x10
c000b876:	ba 16 00 00 00       	mov    edx,0x16
c000b87b:	85 c0                	test   eax,eax
c000b87d:	0f 88 47 06 00 00    	js     c000beca <sinc_multichan_vari_process+0x6ba>
c000b883:	68 00 00 70 40       	push   0x40700000
c000b888:	6a 00                	push   0x0
c000b88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b892:	e8 4a a1 01 00       	call   c00259e1 <__gtdf2>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	ba 16 00 00 00       	mov    edx,0x16
c000b89f:	85 c0                	test   eax,eax
c000b8a1:	0f 8f 23 06 00 00    	jg     c000beca <sinc_multichan_vari_process+0x6ba>
c000b8a7:	83 ec 0c             	sub    esp,0xc
c000b8aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8ad:	e8 e1 9e 01 00       	call   c0025793 <__floatsidf>
c000b8b2:	83 c4 10             	add    esp,0x10
c000b8b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8bd:	68 00 00 00 40       	push   0x40000000
c000b8c2:	6a 00                	push   0x0
c000b8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8cc:	e8 e2 91 01 00       	call   c0024ab3 <__adddf3>
c000b8d1:	59                   	pop    ecx
c000b8d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8da:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8dd:	e8 b1 9e 01 00       	call   c0025793 <__floatsidf>
c000b8e2:	83 c4 10             	add    esp,0x10
c000b8e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8ed:	52                   	push   edx
c000b8ee:	50                   	push   eax
c000b8ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f7:	e8 18 9b 01 00       	call   c0025414 <__divdf3>
c000b8fc:	83 c4 10             	add    esp,0x10
c000b8ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b903:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b907:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b90a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b90d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b911:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b925:	e8 b7 a0 01 00       	call   c00259e1 <__gtdf2>
c000b92a:	83 c4 10             	add    esp,0x10
c000b92d:	85 c0                	test   eax,eax
c000b92f:	7e 2d                	jle    c000b95e <sinc_multichan_vari_process+0x14e>
c000b931:	68 00 00 f0 3f       	push   0x3ff00000
c000b936:	6a 00                	push   0x0
c000b938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b940:	e8 ba a0 01 00       	call   c00259ff <__ltdf2>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	85 c0                	test   eax,eax
c000b94a:	79 4d                	jns    c000b999 <sinc_multichan_vari_process+0x189>
c000b94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b950:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b958:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95c:	eb 1b                	jmp    c000b979 <sinc_multichan_vari_process+0x169>
c000b95e:	68 00 00 f0 3f       	push   0x3ff00000
c000b963:	6a 00                	push   0x0
c000b965:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96d:	e8 8d a0 01 00       	call   c00259ff <__ltdf2>
c000b972:	83 c4 10             	add    esp,0x10
c000b975:	85 c0                	test   eax,eax
c000b977:	79 20                	jns    c000b999 <sinc_multichan_vari_process+0x189>
c000b979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b97d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b981:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b989:	e8 86 9a 01 00       	call   c0025414 <__divdf3>
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b995:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b999:	50                   	push   eax
c000b99a:	50                   	push   eax
c000b99b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b99f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a3:	e8 08 a2 01 00       	call   c0025bb0 <lrint>
c000b9a8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9ab:	40                   	inc    eax
c000b9ac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b0:	0f af c5             	imul   eax,ebp
c000b9b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9b7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9be:	58                   	pop    eax
c000b9bf:	5a                   	pop    edx
c000b9c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c8:	e8 e3 a1 01 00       	call   c0025bb0 <lrint>
c000b9cd:	83 ec 0c             	sub    esp,0xc
c000b9d0:	50                   	push   eax
c000b9d1:	e8 bd 9d 01 00       	call   c0025793 <__floatsidf>
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e1:	52                   	push   edx
c000b9e2:	50                   	push   eax
c000b9e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9eb:	e8 14 97 01 00       	call   c0025104 <__subdf3>
c000b9f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f8:	83 c4 20             	add    esp,0x20
c000b9fb:	6a 00                	push   0x0
c000b9fd:	6a 00                	push   0x0
c000b9ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba07:	e8 f3 9f 01 00       	call   c00259ff <__ltdf2>
c000ba0c:	83 c4 10             	add    esp,0x10
c000ba0f:	85 c0                	test   eax,eax
c000ba11:	79 1f                	jns    c000ba32 <sinc_multichan_vari_process+0x222>
c000ba13:	68 00 00 f0 3f       	push   0x3ff00000
c000ba18:	6a 00                	push   0x0
c000ba1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba22:	e8 8c 90 01 00       	call   c0024ab3 <__adddf3>
c000ba27:	83 c4 10             	add    esp,0x10
c000ba2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba32:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba35:	83 ec 10             	sub    esp,0x10
c000ba38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba3c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba4f:	e8 b0 96 01 00       	call   c0025104 <__subdf3>
c000ba54:	83 c4 18             	add    esp,0x18
c000ba57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba5f:	52                   	push   edx
c000ba60:	50                   	push   eax
c000ba61:	e8 4a a1 01 00       	call   c0025bb0 <lrint>
c000ba66:	0f af e8             	imul   ebp,eax
c000ba69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba6d:	01 e8                	add    eax,ebp
c000ba6f:	99                   	cdq    
c000ba70:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba73:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba83:	6a 00                	push   0x0
c000ba85:	e8 8a 99 01 00       	call   c0025414 <__divdf3>
c000ba8a:	83 c4 10             	add    esp,0x10
c000ba8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba95:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ba9a:	68 23 42 92 0c       	push   0xc924223
c000ba9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa7:	e8 07 90 01 00       	call   c0024ab3 <__adddf3>
c000baac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bab0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bab4:	83 c4 20             	add    esp,0x20
c000bab7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000babf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bac7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000baca:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bacd:	7d 50                	jge    c000bb1f <sinc_multichan_vari_process+0x30f>
c000bacf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bad2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bad5:	01 c8                	add    eax,ecx
c000bad7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bada:	99                   	cdq    
c000badb:	f7 f9                	idiv   ecx
c000badd:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bae1:	7d 0c                	jge    c000baef <sinc_multichan_vari_process+0x2df>
c000bae3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bae6:	85 ed                	test   ebp,ebp
c000bae8:	79 6b                	jns    c000bb55 <sinc_multichan_vari_process+0x345>
c000baea:	e9 e6 00 00 00       	jmp    c000bbd5 <sinc_multichan_vari_process+0x3c5>
c000baef:	50                   	push   eax
c000baf0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000baf4:	57                   	push   edi
c000baf5:	53                   	push   ebx
c000baf6:	e8 9b fb ff ff       	call   c000b696 <prepare_data>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	89 c2                	mov    edx,eax
c000bb00:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb03:	85 c0                	test   eax,eax
c000bb05:	0f 85 bf 03 00 00    	jne    c000beca <sinc_multichan_vari_process+0x6ba>
c000bb0b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb0e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb11:	01 c8                	add    eax,ecx
c000bb13:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb16:	99                   	cdq    
c000bb17:	f7 f9                	idiv   ecx
c000bb19:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb1d:	7c c4                	jl     c000bae3 <sinc_multichan_vari_process+0x2d3>
c000bb1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb27:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb2a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb35:	89 06                	mov    DWORD PTR [esi],eax
c000bb37:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb3a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb3d:	99                   	cdq    
c000bb3e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb41:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb44:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb47:	99                   	cdq    
c000bb48:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb4b:	31 d2                	xor    edx,edx
c000bb4d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb50:	e9 75 03 00 00       	jmp    c000beca <sinc_multichan_vari_process+0x6ba>
c000bb55:	83 ec 0c             	sub    esp,0xc
c000bb58:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb5b:	e8 33 9c 01 00       	call   c0025793 <__floatsidf>
c000bb60:	83 c4 10             	add    esp,0x10
c000bb63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb6b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb6f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb7b:	e8 33 8f 01 00       	call   c0024ab3 <__adddf3>
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb87:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb9b:	e8 13 8f 01 00       	call   c0024ab3 <__adddf3>
c000bba0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bba3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bba7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbab:	e8 e3 9b 01 00       	call   c0025793 <__floatsidf>
c000bbb0:	83 c4 10             	add    esp,0x10
c000bbb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbbb:	52                   	push   edx
c000bbbc:	50                   	push   eax
c000bbbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc5:	e8 33 9e 01 00       	call   c00259fd <__gedf2>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	85 c0                	test   eax,eax
c000bbcf:	0f 89 4a ff ff ff    	jns    c000bb1f <sinc_multichan_vari_process+0x30f>
c000bbd5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbd9:	0f 8e ed 00 00 00    	jle    c000bccc <sinc_multichan_vari_process+0x4bc>
c000bbdf:	83 ec 10             	sub    esp,0x10
c000bbe2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbe5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbe8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbeb:	ff 36                	push   DWORD PTR [esi]
c000bbed:	e8 12 95 01 00       	call   c0025104 <__subdf3>
c000bbf2:	83 c4 18             	add    esp,0x18
c000bbf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfd:	52                   	push   edx
c000bbfe:	50                   	push   eax
c000bbff:	e8 8c 9f 01 00       	call   c0025b90 <fabs>
c000bc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc0c:	83 c4 10             	add    esp,0x10
c000bc0f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc14:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc21:	e8 bb 9d 01 00       	call   c00259e1 <__gtdf2>
c000bc26:	83 c4 10             	add    esp,0x10
c000bc29:	85 c0                	test   eax,eax
c000bc2b:	0f 8e 9b 00 00 00    	jle    c000bccc <sinc_multichan_vari_process+0x4bc>
c000bc31:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc33:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc3a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc3e:	52                   	push   edx
c000bc3f:	50                   	push   eax
c000bc40:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc43:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc46:	e8 b9 94 01 00       	call   c0025104 <__subdf3>
c000bc4b:	59                   	pop    ecx
c000bc4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc50:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc54:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc57:	e8 37 9b 01 00       	call   c0025793 <__floatsidf>
c000bc5c:	83 c4 10             	add    esp,0x10
c000bc5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc63:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc67:	52                   	push   edx
c000bc68:	50                   	push   eax
c000bc69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc71:	e8 ba 94 01 00       	call   c0025130 <__muldf3>
c000bc76:	5d                   	pop    ebp
c000bc77:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc7b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc7f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc82:	e8 0c 9b 01 00       	call   c0025793 <__floatsidf>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc92:	52                   	push   edx
c000bc93:	50                   	push   eax
c000bc94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9c:	e8 73 97 01 00       	call   c0025414 <__divdf3>
c000bca1:	83 c4 10             	add    esp,0x10
c000bca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcbc:	e8 f2 8d 01 00       	call   c0024ab3 <__adddf3>
c000bcc1:	83 c4 10             	add    esp,0x10
c000bcc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcc8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bccc:	83 ec 0c             	sub    esp,0xc
c000bccf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bcd2:	e8 bc 9a 01 00       	call   c0025793 <__floatsidf>
c000bcd7:	83 c4 10             	add    esp,0x10
c000bcda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf2:	e8 08 9d 01 00       	call   c00259ff <__ltdf2>
c000bcf7:	83 c4 10             	add    esp,0x10
c000bcfa:	85 c0                	test   eax,eax
c000bcfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd04:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd08:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd0c:	78 10                	js     c000bd1e <sinc_multichan_vari_process+0x50e>
c000bd0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd1a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2e:	e8 fd 93 01 00       	call   c0025130 <__muldf3>
c000bd33:	59                   	pop    ecx
c000bd34:	5d                   	pop    ebp
c000bd35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd45:	e8 25 f9 ff ff       	call   c000b66f <double_to_fp>
c000bd4a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd4e:	89 c5                	mov    ebp,eax
c000bd50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5c:	e8 cf 93 01 00       	call   c0025130 <__muldf3>
c000bd61:	83 c4 18             	add    esp,0x18
c000bd64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd6c:	52                   	push   edx
c000bd6d:	50                   	push   eax
c000bd6e:	e8 fc f8 ff ff       	call   c000b66f <double_to_fp>
c000bd73:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd76:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd7a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd7d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd80:	50                   	push   eax
c000bd81:	50                   	push   eax
c000bd82:	50                   	push   eax
c000bd83:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd86:	e8 08 9a 01 00       	call   c0025793 <__floatsidf>
c000bd8b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd8f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bd93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda3:	e8 6c 96 01 00       	call   c0025414 <__divdf3>
c000bda8:	83 c4 1c             	add    esp,0x1c
c000bdab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdaf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdb3:	52                   	push   edx
c000bdb4:	89 ea                	mov    edx,ebp
c000bdb6:	50                   	push   eax
c000bdb7:	89 d8                	mov    eax,ebx
c000bdb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdbc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdc0:	e8 69 ed ff ff       	call   c000ab2e <calc_output_multi>
c000bdc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdc8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bdcb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdd7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bddb:	e8 34 96 01 00       	call   c0025414 <__divdf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bde7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdf7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdfb:	e8 b3 8c 01 00       	call   c0024ab3 <__adddf3>
c000be00:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be04:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be08:	83 c4 28             	add    esp,0x28
c000be0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be13:	e8 98 9d 01 00       	call   c0025bb0 <lrint>
c000be18:	83 ec 0c             	sub    esp,0xc
c000be1b:	50                   	push   eax
c000be1c:	e8 72 99 01 00       	call   c0025793 <__floatsidf>
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be2c:	52                   	push   edx
c000be2d:	50                   	push   eax
c000be2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be36:	e8 c9 92 01 00       	call   c0025104 <__subdf3>
c000be3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be43:	83 c4 20             	add    esp,0x20
c000be46:	6a 00                	push   0x0
c000be48:	6a 00                	push   0x0
c000be4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be52:	e8 a8 9b 01 00       	call   c00259ff <__ltdf2>
c000be57:	83 c4 10             	add    esp,0x10
c000be5a:	85 c0                	test   eax,eax
c000be5c:	79 20                	jns    c000be7e <sinc_multichan_vari_process+0x66e>
c000be5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6e:	e8 40 8c 01 00       	call   c0024ab3 <__adddf3>
c000be73:	83 c4 10             	add    esp,0x10
c000be76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be7e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be81:	83 ec 10             	sub    esp,0x10
c000be84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be88:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be9b:	e8 64 92 01 00       	call   c0025104 <__subdf3>
c000bea0:	83 c4 18             	add    esp,0x18
c000bea3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beab:	52                   	push   edx
c000beac:	50                   	push   eax
c000bead:	e8 fe 9c 01 00       	call   c0025bb0 <lrint>
c000beb2:	0f af e8             	imul   ebp,eax
c000beb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000beb9:	83 c4 10             	add    esp,0x10
c000bebc:	01 e8                	add    eax,ebp
c000bebe:	99                   	cdq    
c000bebf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bec2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bec5:	e9 fd fb ff ff       	jmp    c000bac7 <sinc_multichan_vari_process+0x2b7>
c000beca:	83 c4 4c             	add    esp,0x4c
c000becd:	89 d0                	mov    eax,edx
c000becf:	5b                   	pop    ebx
c000bed0:	5e                   	pop    esi
c000bed1:	5f                   	pop    edi
c000bed2:	5d                   	pop    ebp
c000bed3:	c3                   	ret    

c000bed4 <sinc_hex_vari_process>:
c000bed4:	55                   	push   ebp
c000bed5:	ba 05 00 00 00       	mov    edx,0x5
c000beda:	57                   	push   edi
c000bedb:	56                   	push   esi
c000bedc:	53                   	push   ebx
c000bedd:	83 ec 4c             	sub    esp,0x4c
c000bee0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bee4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bee8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000beeb:	85 db                	test   ebx,ebx
c000beed:	0f 84 9c 06 00 00    	je     c000c58f <sinc_hex_vari_process+0x6bb>
c000bef3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bef6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bef9:	0f af c7             	imul   eax,edi
c000befc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000beff:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf02:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf09:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf10:	0f af c7             	imul   eax,edi
c000bf13:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf16:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf24:	68 00 00 70 3f       	push   0x3f700000
c000bf29:	6a 00                	push   0x0
c000bf2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf33:	e8 c7 9a 01 00       	call   c00259ff <__ltdf2>
c000bf38:	83 c4 10             	add    esp,0x10
c000bf3b:	ba 16 00 00 00       	mov    edx,0x16
c000bf40:	85 c0                	test   eax,eax
c000bf42:	0f 88 47 06 00 00    	js     c000c58f <sinc_hex_vari_process+0x6bb>
c000bf48:	68 00 00 70 40       	push   0x40700000
c000bf4d:	6a 00                	push   0x0
c000bf4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf57:	e8 85 9a 01 00       	call   c00259e1 <__gtdf2>
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	ba 16 00 00 00       	mov    edx,0x16
c000bf64:	85 c0                	test   eax,eax
c000bf66:	0f 8f 23 06 00 00    	jg     c000c58f <sinc_hex_vari_process+0x6bb>
c000bf6c:	83 ec 0c             	sub    esp,0xc
c000bf6f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf72:	e8 1c 98 01 00       	call   c0025793 <__floatsidf>
c000bf77:	83 c4 10             	add    esp,0x10
c000bf7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf82:	68 00 00 00 40       	push   0x40000000
c000bf87:	6a 00                	push   0x0
c000bf89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf91:	e8 1d 8b 01 00       	call   c0024ab3 <__adddf3>
c000bf96:	59                   	pop    ecx
c000bf97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bf9f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfa2:	e8 ec 97 01 00       	call   c0025793 <__floatsidf>
c000bfa7:	83 c4 10             	add    esp,0x10
c000bfaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfb2:	52                   	push   edx
c000bfb3:	50                   	push   eax
c000bfb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfbc:	e8 53 94 01 00       	call   c0025414 <__divdf3>
c000bfc1:	83 c4 10             	add    esp,0x10
c000bfc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfcc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfcf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfea:	e8 f2 99 01 00       	call   c00259e1 <__gtdf2>
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	85 c0                	test   eax,eax
c000bff4:	7e 2d                	jle    c000c023 <sinc_hex_vari_process+0x14f>
c000bff6:	68 00 00 f0 3f       	push   0x3ff00000
c000bffb:	6a 00                	push   0x0
c000bffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c005:	e8 f5 99 01 00       	call   c00259ff <__ltdf2>
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	85 c0                	test   eax,eax
c000c00f:	79 4d                	jns    c000c05e <sinc_hex_vari_process+0x18a>
c000c011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c015:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c019:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c021:	eb 1b                	jmp    c000c03e <sinc_hex_vari_process+0x16a>
c000c023:	68 00 00 f0 3f       	push   0x3ff00000
c000c028:	6a 00                	push   0x0
c000c02a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c032:	e8 c8 99 01 00       	call   c00259ff <__ltdf2>
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	85 c0                	test   eax,eax
c000c03c:	79 20                	jns    c000c05e <sinc_hex_vari_process+0x18a>
c000c03e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c042:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04e:	e8 c1 93 01 00       	call   c0025414 <__divdf3>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c05e:	50                   	push   eax
c000c05f:	50                   	push   eax
c000c060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c068:	e8 43 9b 01 00       	call   c0025bb0 <lrint>
c000c06d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c070:	40                   	inc    eax
c000c071:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c075:	0f af c7             	imul   eax,edi
c000c078:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c07c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c07f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c083:	58                   	pop    eax
c000c084:	5a                   	pop    edx
c000c085:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c089:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08d:	e8 1e 9b 01 00       	call   c0025bb0 <lrint>
c000c092:	83 ec 0c             	sub    esp,0xc
c000c095:	50                   	push   eax
c000c096:	e8 f8 96 01 00       	call   c0025793 <__floatsidf>
c000c09b:	83 c4 10             	add    esp,0x10
c000c09e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a6:	52                   	push   edx
c000c0a7:	50                   	push   eax
c000c0a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b0:	e8 4f 90 01 00       	call   c0025104 <__subdf3>
c000c0b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0bd:	83 c4 20             	add    esp,0x20
c000c0c0:	6a 00                	push   0x0
c000c0c2:	6a 00                	push   0x0
c000c0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0cc:	e8 2e 99 01 00       	call   c00259ff <__ltdf2>
c000c0d1:	83 c4 10             	add    esp,0x10
c000c0d4:	85 c0                	test   eax,eax
c000c0d6:	79 1f                	jns    c000c0f7 <sinc_hex_vari_process+0x223>
c000c0d8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0dd:	6a 00                	push   0x0
c000c0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e7:	e8 c7 89 01 00       	call   c0024ab3 <__adddf3>
c000c0ec:	83 c4 10             	add    esp,0x10
c000c0ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0f7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0fa:	83 ec 10             	sub    esp,0x10
c000c0fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c101:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c110:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c114:	e8 eb 8f 01 00       	call   c0025104 <__subdf3>
c000c119:	83 c4 18             	add    esp,0x18
c000c11c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c124:	52                   	push   edx
c000c125:	50                   	push   eax
c000c126:	e8 85 9a 01 00       	call   c0025bb0 <lrint>
c000c12b:	0f af f8             	imul   edi,eax
c000c12e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c132:	01 f8                	add    eax,edi
c000c134:	99                   	cdq    
c000c135:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c138:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c13b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c13f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c143:	68 00 00 f0 3f       	push   0x3ff00000
c000c148:	6a 00                	push   0x0
c000c14a:	e8 c5 92 01 00       	call   c0025414 <__divdf3>
c000c14f:	83 c4 10             	add    esp,0x10
c000c152:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c156:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c15a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c15f:	68 23 42 92 0c       	push   0xc924223
c000c164:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c168:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16c:	e8 42 89 01 00       	call   c0024ab3 <__adddf3>
c000c171:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c175:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c179:	83 c4 20             	add    esp,0x20
c000c17c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c184:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c18c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c18f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c192:	7d 50                	jge    c000c1e4 <sinc_hex_vari_process+0x310>
c000c194:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c197:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c19a:	01 c8                	add    eax,ecx
c000c19c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c19f:	99                   	cdq    
c000c1a0:	f7 f9                	idiv   ecx
c000c1a2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1a6:	7d 0c                	jge    c000c1b4 <sinc_hex_vari_process+0x2e0>
c000c1a8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1ab:	85 ff                	test   edi,edi
c000c1ad:	79 6c                	jns    c000c21b <sinc_hex_vari_process+0x347>
c000c1af:	e9 e7 00 00 00       	jmp    c000c29b <sinc_hex_vari_process+0x3c7>
c000c1b4:	50                   	push   eax
c000c1b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1b9:	56                   	push   esi
c000c1ba:	53                   	push   ebx
c000c1bb:	e8 d6 f4 ff ff       	call   c000b696 <prepare_data>
c000c1c0:	83 c4 10             	add    esp,0x10
c000c1c3:	89 c2                	mov    edx,eax
c000c1c5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1c8:	85 c0                	test   eax,eax
c000c1ca:	0f 85 bf 03 00 00    	jne    c000c58f <sinc_hex_vari_process+0x6bb>
c000c1d0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1d3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1d6:	01 c8                	add    eax,ecx
c000c1d8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1db:	99                   	cdq    
c000c1dc:	f7 f9                	idiv   ecx
c000c1de:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1e2:	7c c4                	jl     c000c1a8 <sinc_hex_vari_process+0x2d4>
c000c1e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1ec:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ef:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c1fa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1fd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c200:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c203:	99                   	cdq    
c000c204:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c207:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c20a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c20d:	99                   	cdq    
c000c20e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c211:	31 d2                	xor    edx,edx
c000c213:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c216:	e9 74 03 00 00       	jmp    c000c58f <sinc_hex_vari_process+0x6bb>
c000c21b:	83 ec 0c             	sub    esp,0xc
c000c21e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c221:	e8 6d 95 01 00       	call   c0025793 <__floatsidf>
c000c226:	83 c4 10             	add    esp,0x10
c000c229:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c22d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c231:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c235:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c23d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c241:	e8 6d 88 01 00       	call   c0024ab3 <__adddf3>
c000c246:	83 c4 10             	add    esp,0x10
c000c249:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c24d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c251:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c255:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c259:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c25d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c261:	e8 4d 88 01 00       	call   c0024ab3 <__adddf3>
c000c266:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c269:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c26d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c271:	e8 1d 95 01 00       	call   c0025793 <__floatsidf>
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c27d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c281:	52                   	push   edx
c000c282:	50                   	push   eax
c000c283:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c287:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28b:	e8 6d 97 01 00       	call   c00259fd <__gedf2>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	85 c0                	test   eax,eax
c000c295:	0f 89 49 ff ff ff    	jns    c000c1e4 <sinc_hex_vari_process+0x310>
c000c29b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c29f:	0f 8e ef 00 00 00    	jle    c000c394 <sinc_hex_vari_process+0x4c0>
c000c2a5:	83 ec 10             	sub    esp,0x10
c000c2a8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2b1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2b4:	e8 4b 8e 01 00       	call   c0025104 <__subdf3>
c000c2b9:	83 c4 18             	add    esp,0x18
c000c2bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c4:	52                   	push   edx
c000c2c5:	50                   	push   eax
c000c2c6:	e8 c5 98 01 00       	call   c0025b90 <fabs>
c000c2cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2d3:	83 c4 10             	add    esp,0x10
c000c2d6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2db:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e8:	e8 f4 96 01 00       	call   c00259e1 <__gtdf2>
c000c2ed:	83 c4 10             	add    esp,0x10
c000c2f0:	85 c0                	test   eax,eax
c000c2f2:	0f 8e 9c 00 00 00    	jle    c000c394 <sinc_hex_vari_process+0x4c0>
c000c2f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2fb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c30b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c30e:	e8 f1 8d 01 00       	call   c0025104 <__subdf3>
c000c313:	59                   	pop    ecx
c000c314:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c318:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c31c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c31f:	e8 6f 94 01 00       	call   c0025793 <__floatsidf>
c000c324:	83 c4 10             	add    esp,0x10
c000c327:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c32b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c32f:	52                   	push   edx
c000c330:	50                   	push   eax
c000c331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c339:	e8 f2 8d 01 00       	call   c0025130 <__muldf3>
c000c33e:	5f                   	pop    edi
c000c33f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c343:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c347:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c34a:	e8 44 94 01 00       	call   c0025793 <__floatsidf>
c000c34f:	83 c4 10             	add    esp,0x10
c000c352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c35a:	52                   	push   edx
c000c35b:	50                   	push   eax
c000c35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c360:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c364:	e8 ab 90 01 00       	call   c0025414 <__divdf3>
c000c369:	83 c4 10             	add    esp,0x10
c000c36c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c370:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c374:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c380:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c384:	e8 2a 87 01 00       	call   c0024ab3 <__adddf3>
c000c389:	83 c4 10             	add    esp,0x10
c000c38c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c390:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c394:	83 ec 0c             	sub    esp,0xc
c000c397:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c39a:	e8 f4 93 01 00       	call   c0025793 <__floatsidf>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ba:	e8 40 96 01 00       	call   c00259ff <__ltdf2>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	85 c0                	test   eax,eax
c000c3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3cc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3d0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3d4:	78 10                	js     c000c3e6 <sinc_hex_vari_process+0x512>
c000c3d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f6:	e8 35 8d 01 00       	call   c0025130 <__muldf3>
c000c3fb:	59                   	pop    ecx
c000c3fc:	5f                   	pop    edi
c000c3fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c405:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c409:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40d:	e8 5d f2 ff ff       	call   c000b66f <double_to_fp>
c000c412:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c416:	89 c7                	mov    edi,eax
c000c418:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c420:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c424:	e8 07 8d 01 00       	call   c0025130 <__muldf3>
c000c429:	83 c4 18             	add    esp,0x18
c000c42c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c430:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c434:	52                   	push   edx
c000c435:	50                   	push   eax
c000c436:	e8 34 f2 ff ff       	call   c000b66f <double_to_fp>
c000c43b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c43e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c442:	83 c4 0c             	add    esp,0xc
c000c445:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c448:	8d 04 90             	lea    eax,[eax+edx*4]
c000c44b:	50                   	push   eax
c000c44c:	50                   	push   eax
c000c44d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c450:	e8 3e 93 01 00       	call   c0025793 <__floatsidf>
c000c455:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c459:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c45d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c461:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c465:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c469:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46d:	e8 a2 8f 01 00       	call   c0025414 <__divdf3>
c000c472:	83 c4 18             	add    esp,0x18
c000c475:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c479:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c47d:	52                   	push   edx
c000c47e:	89 fa                	mov    edx,edi
c000c480:	50                   	push   eax
c000c481:	89 d8                	mov    eax,ebx
c000c483:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c487:	e8 50 de ff ff       	call   c000a2dc <calc_output_hex>
c000c48c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c490:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c494:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c498:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a0:	e8 6f 8f 01 00       	call   c0025414 <__divdf3>
c000c4a5:	83 c4 10             	add    esp,0x10
c000c4a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c0:	e8 ee 85 01 00       	call   c0024ab3 <__adddf3>
c000c4c5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4c9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4cd:	83 c4 18             	add    esp,0x18
c000c4d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d8:	e8 d3 96 01 00       	call   c0025bb0 <lrint>
c000c4dd:	83 ec 0c             	sub    esp,0xc
c000c4e0:	50                   	push   eax
c000c4e1:	e8 ad 92 01 00       	call   c0025793 <__floatsidf>
c000c4e6:	83 c4 10             	add    esp,0x10
c000c4e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4f1:	52                   	push   edx
c000c4f2:	50                   	push   eax
c000c4f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4fb:	e8 04 8c 01 00       	call   c0025104 <__subdf3>
c000c500:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c504:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c508:	83 c4 20             	add    esp,0x20
c000c50b:	6a 00                	push   0x0
c000c50d:	6a 00                	push   0x0
c000c50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c517:	e8 e3 94 01 00       	call   c00259ff <__ltdf2>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	85 c0                	test   eax,eax
c000c521:	79 20                	jns    c000c543 <sinc_hex_vari_process+0x66f>
c000c523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c533:	e8 7b 85 01 00       	call   c0024ab3 <__adddf3>
c000c538:	83 c4 10             	add    esp,0x10
c000c53b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c53f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c543:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c546:	83 ec 10             	sub    esp,0x10
c000c549:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c54d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c558:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c55c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c560:	e8 9f 8b 01 00       	call   c0025104 <__subdf3>
c000c565:	83 c4 18             	add    esp,0x18
c000c568:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c570:	52                   	push   edx
c000c571:	50                   	push   eax
c000c572:	e8 39 96 01 00       	call   c0025bb0 <lrint>
c000c577:	0f af f8             	imul   edi,eax
c000c57a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c57e:	83 c4 10             	add    esp,0x10
c000c581:	01 f8                	add    eax,edi
c000c583:	99                   	cdq    
c000c584:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c587:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c58a:	e9 fd fb ff ff       	jmp    c000c18c <sinc_hex_vari_process+0x2b8>
c000c58f:	83 c4 4c             	add    esp,0x4c
c000c592:	89 d0                	mov    eax,edx
c000c594:	5b                   	pop    ebx
c000c595:	5e                   	pop    esi
c000c596:	5f                   	pop    edi
c000c597:	5d                   	pop    ebp
c000c598:	c3                   	ret    

c000c599 <sinc_quad_vari_process>:
c000c599:	55                   	push   ebp
c000c59a:	ba 05 00 00 00       	mov    edx,0x5
c000c59f:	57                   	push   edi
c000c5a0:	56                   	push   esi
c000c5a1:	53                   	push   ebx
c000c5a2:	83 ec 4c             	sub    esp,0x4c
c000c5a5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5a9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5ad:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5b0:	85 db                	test   ebx,ebx
c000c5b2:	0f 84 9c 06 00 00    	je     c000cc54 <sinc_quad_vari_process+0x6bb>
c000c5b8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5be:	0f af c7             	imul   eax,edi
c000c5c1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5c4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5c7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5ce:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5d5:	0f af c7             	imul   eax,edi
c000c5d8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5db:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5e9:	68 00 00 70 3f       	push   0x3f700000
c000c5ee:	6a 00                	push   0x0
c000c5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f8:	e8 02 94 01 00       	call   c00259ff <__ltdf2>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	ba 16 00 00 00       	mov    edx,0x16
c000c605:	85 c0                	test   eax,eax
c000c607:	0f 88 47 06 00 00    	js     c000cc54 <sinc_quad_vari_process+0x6bb>
c000c60d:	68 00 00 70 40       	push   0x40700000
c000c612:	6a 00                	push   0x0
c000c614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61c:	e8 c0 93 01 00       	call   c00259e1 <__gtdf2>
c000c621:	83 c4 10             	add    esp,0x10
c000c624:	ba 16 00 00 00       	mov    edx,0x16
c000c629:	85 c0                	test   eax,eax
c000c62b:	0f 8f 23 06 00 00    	jg     c000cc54 <sinc_quad_vari_process+0x6bb>
c000c631:	83 ec 0c             	sub    esp,0xc
c000c634:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c637:	e8 57 91 01 00       	call   c0025793 <__floatsidf>
c000c63c:	83 c4 10             	add    esp,0x10
c000c63f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c643:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c647:	68 00 00 00 40       	push   0x40000000
c000c64c:	6a 00                	push   0x0
c000c64e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c656:	e8 58 84 01 00       	call   c0024ab3 <__adddf3>
c000c65b:	59                   	pop    ecx
c000c65c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c660:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c664:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c667:	e8 27 91 01 00       	call   c0025793 <__floatsidf>
c000c66c:	83 c4 10             	add    esp,0x10
c000c66f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c673:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c677:	52                   	push   edx
c000c678:	50                   	push   eax
c000c679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c67d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c681:	e8 8e 8d 01 00       	call   c0025414 <__divdf3>
c000c686:	83 c4 10             	add    esp,0x10
c000c689:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c68d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c691:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c694:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c697:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c69b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c69f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6af:	e8 2d 93 01 00       	call   c00259e1 <__gtdf2>
c000c6b4:	83 c4 10             	add    esp,0x10
c000c6b7:	85 c0                	test   eax,eax
c000c6b9:	7e 2d                	jle    c000c6e8 <sinc_quad_vari_process+0x14f>
c000c6bb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6c0:	6a 00                	push   0x0
c000c6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ca:	e8 30 93 01 00       	call   c00259ff <__ltdf2>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	85 c0                	test   eax,eax
c000c6d4:	79 4d                	jns    c000c723 <sinc_quad_vari_process+0x18a>
c000c6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e6:	eb 1b                	jmp    c000c703 <sinc_quad_vari_process+0x16a>
c000c6e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6ed:	6a 00                	push   0x0
c000c6ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f7:	e8 03 93 01 00       	call   c00259ff <__ltdf2>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	85 c0                	test   eax,eax
c000c701:	79 20                	jns    c000c723 <sinc_quad_vari_process+0x18a>
c000c703:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c707:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c70b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c70f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c713:	e8 fc 8c 01 00       	call   c0025414 <__divdf3>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c71f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c723:	50                   	push   eax
c000c724:	50                   	push   eax
c000c725:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c729:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72d:	e8 7e 94 01 00       	call   c0025bb0 <lrint>
c000c732:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c735:	40                   	inc    eax
c000c736:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c73a:	0f af c7             	imul   eax,edi
c000c73d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c744:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c748:	58                   	pop    eax
c000c749:	5a                   	pop    edx
c000c74a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c74e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c752:	e8 59 94 01 00       	call   c0025bb0 <lrint>
c000c757:	83 ec 0c             	sub    esp,0xc
c000c75a:	50                   	push   eax
c000c75b:	e8 33 90 01 00       	call   c0025793 <__floatsidf>
c000c760:	83 c4 10             	add    esp,0x10
c000c763:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c767:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76b:	52                   	push   edx
c000c76c:	50                   	push   eax
c000c76d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c771:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c775:	e8 8a 89 01 00       	call   c0025104 <__subdf3>
c000c77a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c77e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c782:	83 c4 20             	add    esp,0x20
c000c785:	6a 00                	push   0x0
c000c787:	6a 00                	push   0x0
c000c789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c791:	e8 69 92 01 00       	call   c00259ff <__ltdf2>
c000c796:	83 c4 10             	add    esp,0x10
c000c799:	85 c0                	test   eax,eax
c000c79b:	79 1f                	jns    c000c7bc <sinc_quad_vari_process+0x223>
c000c79d:	68 00 00 f0 3f       	push   0x3ff00000
c000c7a2:	6a 00                	push   0x0
c000c7a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ac:	e8 02 83 01 00       	call   c0024ab3 <__adddf3>
c000c7b1:	83 c4 10             	add    esp,0x10
c000c7b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7bc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7bf:	83 ec 10             	sub    esp,0x10
c000c7c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d9:	e8 26 89 01 00       	call   c0025104 <__subdf3>
c000c7de:	83 c4 18             	add    esp,0x18
c000c7e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7e9:	52                   	push   edx
c000c7ea:	50                   	push   eax
c000c7eb:	e8 c0 93 01 00       	call   c0025bb0 <lrint>
c000c7f0:	0f af f8             	imul   edi,eax
c000c7f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7f7:	01 f8                	add    eax,edi
c000c7f9:	99                   	cdq    
c000c7fa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7fd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c804:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c808:	68 00 00 f0 3f       	push   0x3ff00000
c000c80d:	6a 00                	push   0x0
c000c80f:	e8 00 8c 01 00       	call   c0025414 <__divdf3>
c000c814:	83 c4 10             	add    esp,0x10
c000c817:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c81f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c824:	68 23 42 92 0c       	push   0xc924223
c000c829:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c82d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c831:	e8 7d 82 01 00       	call   c0024ab3 <__adddf3>
c000c836:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c83a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c83e:	83 c4 20             	add    esp,0x20
c000c841:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c849:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c851:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c854:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c857:	7d 50                	jge    c000c8a9 <sinc_quad_vari_process+0x310>
c000c859:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c85c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c85f:	01 c8                	add    eax,ecx
c000c861:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c864:	99                   	cdq    
c000c865:	f7 f9                	idiv   ecx
c000c867:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c86b:	7d 0c                	jge    c000c879 <sinc_quad_vari_process+0x2e0>
c000c86d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c870:	85 ff                	test   edi,edi
c000c872:	79 6c                	jns    c000c8e0 <sinc_quad_vari_process+0x347>
c000c874:	e9 e7 00 00 00       	jmp    c000c960 <sinc_quad_vari_process+0x3c7>
c000c879:	50                   	push   eax
c000c87a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c87e:	56                   	push   esi
c000c87f:	53                   	push   ebx
c000c880:	e8 11 ee ff ff       	call   c000b696 <prepare_data>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	89 c2                	mov    edx,eax
c000c88a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c88d:	85 c0                	test   eax,eax
c000c88f:	0f 85 bf 03 00 00    	jne    c000cc54 <sinc_quad_vari_process+0x6bb>
c000c895:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c898:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c89b:	01 c8                	add    eax,ecx
c000c89d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8a0:	99                   	cdq    
c000c8a1:	f7 f9                	idiv   ecx
c000c8a3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8a7:	7c c4                	jl     c000c86d <sinc_quad_vari_process+0x2d4>
c000c8a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8b4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8c2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8c8:	99                   	cdq    
c000c8c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8cc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8d2:	99                   	cdq    
c000c8d3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8d6:	31 d2                	xor    edx,edx
c000c8d8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8db:	e9 74 03 00 00       	jmp    c000cc54 <sinc_quad_vari_process+0x6bb>
c000c8e0:	83 ec 0c             	sub    esp,0xc
c000c8e3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8e6:	e8 a8 8e 01 00       	call   c0025793 <__floatsidf>
c000c8eb:	83 c4 10             	add    esp,0x10
c000c8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c8f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c902:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c906:	e8 a8 81 01 00       	call   c0024ab3 <__adddf3>
c000c90b:	83 c4 10             	add    esp,0x10
c000c90e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c912:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c916:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c922:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c926:	e8 88 81 01 00       	call   c0024ab3 <__adddf3>
c000c92b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c92e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c932:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c936:	e8 58 8e 01 00       	call   c0025793 <__floatsidf>
c000c93b:	83 c4 10             	add    esp,0x10
c000c93e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c942:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c946:	52                   	push   edx
c000c947:	50                   	push   eax
c000c948:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c950:	e8 a8 90 01 00       	call   c00259fd <__gedf2>
c000c955:	83 c4 10             	add    esp,0x10
c000c958:	85 c0                	test   eax,eax
c000c95a:	0f 89 49 ff ff ff    	jns    c000c8a9 <sinc_quad_vari_process+0x310>
c000c960:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c964:	0f 8e ef 00 00 00    	jle    c000ca59 <sinc_quad_vari_process+0x4c0>
c000c96a:	83 ec 10             	sub    esp,0x10
c000c96d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c970:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c973:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c976:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c979:	e8 86 87 01 00       	call   c0025104 <__subdf3>
c000c97e:	83 c4 18             	add    esp,0x18
c000c981:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c985:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c989:	52                   	push   edx
c000c98a:	50                   	push   eax
c000c98b:	e8 00 92 01 00       	call   c0025b90 <fabs>
c000c990:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c994:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9a0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ad:	e8 2f 90 01 00       	call   c00259e1 <__gtdf2>
c000c9b2:	83 c4 10             	add    esp,0x10
c000c9b5:	85 c0                	test   eax,eax
c000c9b7:	0f 8e 9c 00 00 00    	jle    c000ca59 <sinc_quad_vari_process+0x4c0>
c000c9bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9c0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9c7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9d0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9d3:	e8 2c 87 01 00       	call   c0025104 <__subdf3>
c000c9d8:	59                   	pop    ecx
c000c9d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9e1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9e4:	e8 aa 8d 01 00       	call   c0025793 <__floatsidf>
c000c9e9:	83 c4 10             	add    esp,0x10
c000c9ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f4:	52                   	push   edx
c000c9f5:	50                   	push   eax
c000c9f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fe:	e8 2d 87 01 00       	call   c0025130 <__muldf3>
c000ca03:	5f                   	pop    edi
c000ca04:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca08:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca0f:	e8 7f 8d 01 00       	call   c0025793 <__floatsidf>
c000ca14:	83 c4 10             	add    esp,0x10
c000ca17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca1f:	52                   	push   edx
c000ca20:	50                   	push   eax
c000ca21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca29:	e8 e6 89 01 00       	call   c0025414 <__divdf3>
c000ca2e:	83 c4 10             	add    esp,0x10
c000ca31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca35:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca49:	e8 65 80 01 00       	call   c0024ab3 <__adddf3>
c000ca4e:	83 c4 10             	add    esp,0x10
c000ca51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca55:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca59:	83 ec 0c             	sub    esp,0xc
c000ca5c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca5f:	e8 2f 8d 01 00       	call   c0025793 <__floatsidf>
c000ca64:	83 c4 10             	add    esp,0x10
c000ca67:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7f:	e8 7b 8f 01 00       	call   c00259ff <__ltdf2>
c000ca84:	83 c4 10             	add    esp,0x10
c000ca87:	85 c0                	test   eax,eax
c000ca89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca8d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ca91:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ca95:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ca99:	78 10                	js     c000caab <sinc_quad_vari_process+0x512>
c000ca9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ca9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caa3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caa7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cabb:	e8 70 86 01 00       	call   c0025130 <__muldf3>
c000cac0:	59                   	pop    ecx
c000cac1:	5f                   	pop    edi
c000cac2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cac6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000caca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cace:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad2:	e8 98 eb ff ff       	call   c000b66f <double_to_fp>
c000cad7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cadb:	89 c7                	mov    edi,eax
c000cadd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cae1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cae5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cae9:	e8 42 86 01 00       	call   c0025130 <__muldf3>
c000caee:	83 c4 18             	add    esp,0x18
c000caf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000caf5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000caf9:	52                   	push   edx
c000cafa:	50                   	push   eax
c000cafb:	e8 6f eb ff ff       	call   c000b66f <double_to_fp>
c000cb00:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb03:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb07:	83 c4 0c             	add    esp,0xc
c000cb0a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb0d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb10:	50                   	push   eax
c000cb11:	50                   	push   eax
c000cb12:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb15:	e8 79 8c 01 00       	call   c0025793 <__floatsidf>
c000cb1a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb1e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb32:	e8 dd 88 01 00       	call   c0025414 <__divdf3>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb42:	52                   	push   edx
c000cb43:	89 fa                	mov    edx,edi
c000cb45:	50                   	push   eax
c000cb46:	89 d8                	mov    eax,ebx
c000cb48:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb4c:	e8 a5 d1 ff ff       	call   c0009cf6 <calc_output_quad>
c000cb51:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb65:	e8 aa 88 01 00       	call   c0025414 <__divdf3>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb85:	e8 29 7f 01 00       	call   c0024ab3 <__adddf3>
c000cb8a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb8e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cb92:	83 c4 18             	add    esp,0x18
c000cb95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9d:	e8 0e 90 01 00       	call   c0025bb0 <lrint>
c000cba2:	83 ec 0c             	sub    esp,0xc
c000cba5:	50                   	push   eax
c000cba6:	e8 e8 8b 01 00       	call   c0025793 <__floatsidf>
c000cbab:	83 c4 10             	add    esp,0x10
c000cbae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbb6:	52                   	push   edx
c000cbb7:	50                   	push   eax
c000cbb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc0:	e8 3f 85 01 00       	call   c0025104 <__subdf3>
c000cbc5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcd:	83 c4 20             	add    esp,0x20
c000cbd0:	6a 00                	push   0x0
c000cbd2:	6a 00                	push   0x0
c000cbd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbdc:	e8 1e 8e 01 00       	call   c00259ff <__ltdf2>
c000cbe1:	83 c4 10             	add    esp,0x10
c000cbe4:	85 c0                	test   eax,eax
c000cbe6:	79 20                	jns    c000cc08 <sinc_quad_vari_process+0x66f>
c000cbe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf8:	e8 b6 7e 01 00       	call   c0024ab3 <__adddf3>
c000cbfd:	83 c4 10             	add    esp,0x10
c000cc00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc08:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc0b:	83 ec 10             	sub    esp,0x10
c000cc0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc12:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc25:	e8 da 84 01 00       	call   c0025104 <__subdf3>
c000cc2a:	83 c4 18             	add    esp,0x18
c000cc2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc35:	52                   	push   edx
c000cc36:	50                   	push   eax
c000cc37:	e8 74 8f 01 00       	call   c0025bb0 <lrint>
c000cc3c:	0f af f8             	imul   edi,eax
c000cc3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	01 f8                	add    eax,edi
c000cc48:	99                   	cdq    
c000cc49:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc4c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc4f:	e9 fd fb ff ff       	jmp    c000c851 <sinc_quad_vari_process+0x2b8>
c000cc54:	83 c4 4c             	add    esp,0x4c
c000cc57:	89 d0                	mov    eax,edx
c000cc59:	5b                   	pop    ebx
c000cc5a:	5e                   	pop    esi
c000cc5b:	5f                   	pop    edi
c000cc5c:	5d                   	pop    ebp
c000cc5d:	c3                   	ret    

c000cc5e <sinc_stereo_vari_process>:
c000cc5e:	55                   	push   ebp
c000cc5f:	ba 05 00 00 00       	mov    edx,0x5
c000cc64:	57                   	push   edi
c000cc65:	56                   	push   esi
c000cc66:	53                   	push   ebx
c000cc67:	83 ec 4c             	sub    esp,0x4c
c000cc6a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc6e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc72:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc75:	85 db                	test   ebx,ebx
c000cc77:	0f 84 9c 06 00 00    	je     c000d319 <sinc_stereo_vari_process+0x6bb>
c000cc7d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc80:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc83:	0f af c7             	imul   eax,edi
c000cc86:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc89:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cc93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cc9a:	0f af c7             	imul   eax,edi
c000cc9d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cca0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cca3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cca6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccae:	68 00 00 70 3f       	push   0x3f700000
c000ccb3:	6a 00                	push   0x0
c000ccb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbd:	e8 3d 8d 01 00       	call   c00259ff <__ltdf2>
c000ccc2:	83 c4 10             	add    esp,0x10
c000ccc5:	ba 16 00 00 00       	mov    edx,0x16
c000ccca:	85 c0                	test   eax,eax
c000cccc:	0f 88 47 06 00 00    	js     c000d319 <sinc_stereo_vari_process+0x6bb>
c000ccd2:	68 00 00 70 40       	push   0x40700000
c000ccd7:	6a 00                	push   0x0
c000ccd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce1:	e8 fb 8c 01 00       	call   c00259e1 <__gtdf2>
c000cce6:	83 c4 10             	add    esp,0x10
c000cce9:	ba 16 00 00 00       	mov    edx,0x16
c000ccee:	85 c0                	test   eax,eax
c000ccf0:	0f 8f 23 06 00 00    	jg     c000d319 <sinc_stereo_vari_process+0x6bb>
c000ccf6:	83 ec 0c             	sub    esp,0xc
c000ccf9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ccfc:	e8 92 8a 01 00       	call   c0025793 <__floatsidf>
c000cd01:	83 c4 10             	add    esp,0x10
c000cd04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd0c:	68 00 00 00 40       	push   0x40000000
c000cd11:	6a 00                	push   0x0
c000cd13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1b:	e8 93 7d 01 00       	call   c0024ab3 <__adddf3>
c000cd20:	59                   	pop    ecx
c000cd21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd25:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd29:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd2c:	e8 62 8a 01 00       	call   c0025793 <__floatsidf>
c000cd31:	83 c4 10             	add    esp,0x10
c000cd34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd3c:	52                   	push   edx
c000cd3d:	50                   	push   eax
c000cd3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd46:	e8 c9 86 01 00       	call   c0025414 <__divdf3>
c000cd4b:	83 c4 10             	add    esp,0x10
c000cd4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd56:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd59:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd74:	e8 68 8c 01 00       	call   c00259e1 <__gtdf2>
c000cd79:	83 c4 10             	add    esp,0x10
c000cd7c:	85 c0                	test   eax,eax
c000cd7e:	7e 2d                	jle    c000cdad <sinc_stereo_vari_process+0x14f>
c000cd80:	68 00 00 f0 3f       	push   0x3ff00000
c000cd85:	6a 00                	push   0x0
c000cd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8f:	e8 6b 8c 01 00       	call   c00259ff <__ltdf2>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	85 c0                	test   eax,eax
c000cd99:	79 4d                	jns    c000cde8 <sinc_stereo_vari_process+0x18a>
c000cd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cda3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdab:	eb 1b                	jmp    c000cdc8 <sinc_stereo_vari_process+0x16a>
c000cdad:	68 00 00 f0 3f       	push   0x3ff00000
c000cdb2:	6a 00                	push   0x0
c000cdb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbc:	e8 3e 8c 01 00       	call   c00259ff <__ltdf2>
c000cdc1:	83 c4 10             	add    esp,0x10
c000cdc4:	85 c0                	test   eax,eax
c000cdc6:	79 20                	jns    c000cde8 <sinc_stereo_vari_process+0x18a>
c000cdc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdcc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd8:	e8 37 86 01 00       	call   c0025414 <__divdf3>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cde4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cde8:	50                   	push   eax
c000cde9:	50                   	push   eax
c000cdea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf2:	e8 b9 8d 01 00       	call   c0025bb0 <lrint>
c000cdf7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cdfa:	40                   	inc    eax
c000cdfb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdff:	0f af c7             	imul   eax,edi
c000ce02:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0d:	58                   	pop    eax
c000ce0e:	5a                   	pop    edx
c000ce0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce17:	e8 94 8d 01 00       	call   c0025bb0 <lrint>
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	50                   	push   eax
c000ce20:	e8 6e 89 01 00       	call   c0025793 <__floatsidf>
c000ce25:	83 c4 10             	add    esp,0x10
c000ce28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce30:	52                   	push   edx
c000ce31:	50                   	push   eax
c000ce32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce3a:	e8 c5 82 01 00       	call   c0025104 <__subdf3>
c000ce3f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce47:	83 c4 20             	add    esp,0x20
c000ce4a:	6a 00                	push   0x0
c000ce4c:	6a 00                	push   0x0
c000ce4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce56:	e8 a4 8b 01 00       	call   c00259ff <__ltdf2>
c000ce5b:	83 c4 10             	add    esp,0x10
c000ce5e:	85 c0                	test   eax,eax
c000ce60:	79 1f                	jns    c000ce81 <sinc_stereo_vari_process+0x223>
c000ce62:	68 00 00 f0 3f       	push   0x3ff00000
c000ce67:	6a 00                	push   0x0
c000ce69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce71:	e8 3d 7c 01 00       	call   c0024ab3 <__adddf3>
c000ce76:	83 c4 10             	add    esp,0x10
c000ce79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce81:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce84:	83 ec 10             	sub    esp,0x10
c000ce87:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce8b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9e:	e8 61 82 01 00       	call   c0025104 <__subdf3>
c000cea3:	83 c4 18             	add    esp,0x18
c000cea6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceaa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceae:	52                   	push   edx
c000ceaf:	50                   	push   eax
c000ceb0:	e8 fb 8c 01 00       	call   c0025bb0 <lrint>
c000ceb5:	0f af f8             	imul   edi,eax
c000ceb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cebc:	01 f8                	add    eax,edi
c000cebe:	99                   	cdq    
c000cebf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cec2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cec5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecd:	68 00 00 f0 3f       	push   0x3ff00000
c000ced2:	6a 00                	push   0x0
c000ced4:	e8 3b 85 01 00       	call   c0025414 <__divdf3>
c000ced9:	83 c4 10             	add    esp,0x10
c000cedc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cee0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cee4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cee9:	68 23 42 92 0c       	push   0xc924223
c000ceee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef6:	e8 b8 7b 01 00       	call   c0024ab3 <__adddf3>
c000cefb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ceff:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf03:	83 c4 20             	add    esp,0x20
c000cf06:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf0e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf16:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf19:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf1c:	7d 50                	jge    c000cf6e <sinc_stereo_vari_process+0x310>
c000cf1e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf21:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf24:	01 c8                	add    eax,ecx
c000cf26:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf29:	99                   	cdq    
c000cf2a:	f7 f9                	idiv   ecx
c000cf2c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf30:	7d 0c                	jge    c000cf3e <sinc_stereo_vari_process+0x2e0>
c000cf32:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf35:	85 ff                	test   edi,edi
c000cf37:	79 6c                	jns    c000cfa5 <sinc_stereo_vari_process+0x347>
c000cf39:	e9 e7 00 00 00       	jmp    c000d025 <sinc_stereo_vari_process+0x3c7>
c000cf3e:	50                   	push   eax
c000cf3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf43:	56                   	push   esi
c000cf44:	53                   	push   ebx
c000cf45:	e8 4c e7 ff ff       	call   c000b696 <prepare_data>
c000cf4a:	83 c4 10             	add    esp,0x10
c000cf4d:	89 c2                	mov    edx,eax
c000cf4f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf52:	85 c0                	test   eax,eax
c000cf54:	0f 85 bf 03 00 00    	jne    c000d319 <sinc_stereo_vari_process+0x6bb>
c000cf5a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf60:	01 c8                	add    eax,ecx
c000cf62:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf65:	99                   	cdq    
c000cf66:	f7 f9                	idiv   ecx
c000cf68:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf6c:	7c c4                	jl     c000cf32 <sinc_stereo_vari_process+0x2d4>
c000cf6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf76:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf79:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf84:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf87:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf8a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf8d:	99                   	cdq    
c000cf8e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf91:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cf94:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cf97:	99                   	cdq    
c000cf98:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf9b:	31 d2                	xor    edx,edx
c000cf9d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfa0:	e9 74 03 00 00       	jmp    c000d319 <sinc_stereo_vari_process+0x6bb>
c000cfa5:	83 ec 0c             	sub    esp,0xc
c000cfa8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfab:	e8 e3 87 01 00       	call   c0025793 <__floatsidf>
c000cfb0:	83 c4 10             	add    esp,0x10
c000cfb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfcb:	e8 e3 7a 01 00       	call   c0024ab3 <__adddf3>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfdf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfeb:	e8 c3 7a 01 00       	call   c0024ab3 <__adddf3>
c000cff0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cff3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cff7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cffb:	e8 93 87 01 00       	call   c0025793 <__floatsidf>
c000d000:	83 c4 10             	add    esp,0x10
c000d003:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d007:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00b:	52                   	push   edx
c000d00c:	50                   	push   eax
c000d00d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d015:	e8 e3 89 01 00       	call   c00259fd <__gedf2>
c000d01a:	83 c4 10             	add    esp,0x10
c000d01d:	85 c0                	test   eax,eax
c000d01f:	0f 89 49 ff ff ff    	jns    c000cf6e <sinc_stereo_vari_process+0x310>
c000d025:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d029:	0f 8e ef 00 00 00    	jle    c000d11e <sinc_stereo_vari_process+0x4c0>
c000d02f:	83 ec 10             	sub    esp,0x10
c000d032:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d035:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d038:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d03b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d03e:	e8 c1 80 01 00       	call   c0025104 <__subdf3>
c000d043:	83 c4 18             	add    esp,0x18
c000d046:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d04e:	52                   	push   edx
c000d04f:	50                   	push   eax
c000d050:	e8 3b 8b 01 00       	call   c0025b90 <fabs>
c000d055:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d059:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d05d:	83 c4 10             	add    esp,0x10
c000d060:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d065:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d06a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d06e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d072:	e8 6a 89 01 00       	call   c00259e1 <__gtdf2>
c000d077:	83 c4 10             	add    esp,0x10
c000d07a:	85 c0                	test   eax,eax
c000d07c:	0f 8e 9c 00 00 00    	jle    c000d11e <sinc_stereo_vari_process+0x4c0>
c000d082:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d085:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d088:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d08c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d095:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d098:	e8 67 80 01 00       	call   c0025104 <__subdf3>
c000d09d:	59                   	pop    ecx
c000d09e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0a2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0a6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0a9:	e8 e5 86 01 00       	call   c0025793 <__floatsidf>
c000d0ae:	83 c4 10             	add    esp,0x10
c000d0b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0b9:	52                   	push   edx
c000d0ba:	50                   	push   eax
c000d0bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c3:	e8 68 80 01 00       	call   c0025130 <__muldf3>
c000d0c8:	5f                   	pop    edi
c000d0c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0cd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0d1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0d4:	e8 ba 86 01 00       	call   c0025793 <__floatsidf>
c000d0d9:	83 c4 10             	add    esp,0x10
c000d0dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0e4:	52                   	push   edx
c000d0e5:	50                   	push   eax
c000d0e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ee:	e8 21 83 01 00       	call   c0025414 <__divdf3>
c000d0f3:	83 c4 10             	add    esp,0x10
c000d0f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0fa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d102:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d106:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10e:	e8 a0 79 01 00       	call   c0024ab3 <__adddf3>
c000d113:	83 c4 10             	add    esp,0x10
c000d116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d11a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d11e:	83 ec 0c             	sub    esp,0xc
c000d121:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d124:	e8 6a 86 01 00       	call   c0025793 <__floatsidf>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d130:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d144:	e8 b6 88 01 00       	call   c00259ff <__ltdf2>
c000d149:	83 c4 10             	add    esp,0x10
c000d14c:	85 c0                	test   eax,eax
c000d14e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d152:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d156:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d15a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d15e:	78 10                	js     c000d170 <sinc_stereo_vari_process+0x512>
c000d160:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d164:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d168:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d16c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d170:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d174:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d180:	e8 ab 7f 01 00       	call   c0025130 <__muldf3>
c000d185:	59                   	pop    ecx
c000d186:	5f                   	pop    edi
c000d187:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d18b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d18f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d193:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d197:	e8 d3 e4 ff ff       	call   c000b66f <double_to_fp>
c000d19c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a0:	89 c7                	mov    edi,eax
c000d1a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ae:	e8 7d 7f 01 00       	call   c0025130 <__muldf3>
c000d1b3:	83 c4 18             	add    esp,0x18
c000d1b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1be:	52                   	push   edx
c000d1bf:	50                   	push   eax
c000d1c0:	e8 aa e4 ff ff       	call   c000b66f <double_to_fp>
c000d1c5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1cc:	83 c4 0c             	add    esp,0xc
c000d1cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1d2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1d5:	50                   	push   eax
c000d1d6:	50                   	push   eax
c000d1d7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1da:	e8 b4 85 01 00       	call   c0025793 <__floatsidf>
c000d1df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f7:	e8 18 82 01 00       	call   c0025414 <__divdf3>
c000d1fc:	83 c4 18             	add    esp,0x18
c000d1ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d203:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d207:	52                   	push   edx
c000d208:	89 fa                	mov    edx,edi
c000d20a:	50                   	push   eax
c000d20b:	89 d8                	mov    eax,ebx
c000d20d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d211:	e8 02 c7 ff ff       	call   c0009918 <calc_output_stereo>
c000d216:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d21a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d21e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d222:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d226:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22a:	e8 e5 81 01 00       	call   c0025414 <__divdf3>
c000d22f:	83 c4 10             	add    esp,0x10
c000d232:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d236:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d242:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d246:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d24a:	e8 64 78 01 00       	call   c0024ab3 <__adddf3>
c000d24f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d253:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d257:	83 c4 18             	add    esp,0x18
c000d25a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d25e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d262:	e8 49 89 01 00       	call   c0025bb0 <lrint>
c000d267:	83 ec 0c             	sub    esp,0xc
c000d26a:	50                   	push   eax
c000d26b:	e8 23 85 01 00       	call   c0025793 <__floatsidf>
c000d270:	83 c4 10             	add    esp,0x10
c000d273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d27b:	52                   	push   edx
c000d27c:	50                   	push   eax
c000d27d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d281:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d285:	e8 7a 7e 01 00       	call   c0025104 <__subdf3>
c000d28a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d292:	83 c4 20             	add    esp,0x20
c000d295:	6a 00                	push   0x0
c000d297:	6a 00                	push   0x0
c000d299:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d29d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a1:	e8 59 87 01 00       	call   c00259ff <__ltdf2>
c000d2a6:	83 c4 10             	add    esp,0x10
c000d2a9:	85 c0                	test   eax,eax
c000d2ab:	79 20                	jns    c000d2cd <sinc_stereo_vari_process+0x66f>
c000d2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2bd:	e8 f1 77 01 00       	call   c0024ab3 <__adddf3>
c000d2c2:	83 c4 10             	add    esp,0x10
c000d2c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2cd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2d0:	83 ec 10             	sub    esp,0x10
c000d2d3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2d7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ea:	e8 15 7e 01 00       	call   c0025104 <__subdf3>
c000d2ef:	83 c4 18             	add    esp,0x18
c000d2f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2fa:	52                   	push   edx
c000d2fb:	50                   	push   eax
c000d2fc:	e8 af 88 01 00       	call   c0025bb0 <lrint>
c000d301:	0f af f8             	imul   edi,eax
c000d304:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	01 f8                	add    eax,edi
c000d30d:	99                   	cdq    
c000d30e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d311:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d314:	e9 fd fb ff ff       	jmp    c000cf16 <sinc_stereo_vari_process+0x2b8>
c000d319:	83 c4 4c             	add    esp,0x4c
c000d31c:	89 d0                	mov    eax,edx
c000d31e:	5b                   	pop    ebx
c000d31f:	5e                   	pop    esi
c000d320:	5f                   	pop    edi
c000d321:	5d                   	pop    ebp
c000d322:	c3                   	ret    

c000d323 <sinc_mono_vari_process>:
c000d323:	55                   	push   ebp
c000d324:	ba 05 00 00 00       	mov    edx,0x5
c000d329:	57                   	push   edi
c000d32a:	56                   	push   esi
c000d32b:	53                   	push   ebx
c000d32c:	83 ec 4c             	sub    esp,0x4c
c000d32f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d333:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d337:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d33a:	85 db                	test   ebx,ebx
c000d33c:	0f 84 c1 06 00 00    	je     c000da03 <sinc_mono_vari_process+0x6e0>
c000d342:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d345:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d348:	0f af c7             	imul   eax,edi
c000d34b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d34e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d351:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d358:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d35f:	0f af c7             	imul   eax,edi
c000d362:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d365:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d369:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d36c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d36e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d372:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d376:	68 00 00 70 3f       	push   0x3f700000
c000d37b:	6a 00                	push   0x0
c000d37d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d385:	e8 75 86 01 00       	call   c00259ff <__ltdf2>
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	ba 16 00 00 00       	mov    edx,0x16
c000d392:	85 c0                	test   eax,eax
c000d394:	0f 88 69 06 00 00    	js     c000da03 <sinc_mono_vari_process+0x6e0>
c000d39a:	68 00 00 70 40       	push   0x40700000
c000d39f:	6a 00                	push   0x0
c000d3a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a9:	e8 33 86 01 00       	call   c00259e1 <__gtdf2>
c000d3ae:	83 c4 10             	add    esp,0x10
c000d3b1:	ba 16 00 00 00       	mov    edx,0x16
c000d3b6:	85 c0                	test   eax,eax
c000d3b8:	0f 8f 45 06 00 00    	jg     c000da03 <sinc_mono_vari_process+0x6e0>
c000d3be:	83 ec 0c             	sub    esp,0xc
c000d3c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3c4:	e8 ca 83 01 00       	call   c0025793 <__floatsidf>
c000d3c9:	83 c4 10             	add    esp,0x10
c000d3cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3d4:	68 00 00 00 40       	push   0x40000000
c000d3d9:	6a 00                	push   0x0
c000d3db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e3:	e8 cb 76 01 00       	call   c0024ab3 <__adddf3>
c000d3e8:	59                   	pop    ecx
c000d3e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3ed:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3f1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3f4:	e8 9a 83 01 00       	call   c0025793 <__floatsidf>
c000d3f9:	83 c4 10             	add    esp,0x10
c000d3fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d400:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d404:	52                   	push   edx
c000d405:	50                   	push   eax
c000d406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40e:	e8 01 80 01 00       	call   c0025414 <__divdf3>
c000d413:	83 c4 10             	add    esp,0x10
c000d416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d41a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d41e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d421:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d428:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d42c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d438:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43c:	e8 a0 85 01 00       	call   c00259e1 <__gtdf2>
c000d441:	83 c4 10             	add    esp,0x10
c000d444:	85 c0                	test   eax,eax
c000d446:	7e 2d                	jle    c000d475 <sinc_mono_vari_process+0x152>
c000d448:	68 00 00 f0 3f       	push   0x3ff00000
c000d44d:	6a 00                	push   0x0
c000d44f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d457:	e8 a3 85 01 00       	call   c00259ff <__ltdf2>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	85 c0                	test   eax,eax
c000d461:	79 4d                	jns    c000d4b0 <sinc_mono_vari_process+0x18d>
c000d463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d467:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d46f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d473:	eb 1b                	jmp    c000d490 <sinc_mono_vari_process+0x16d>
c000d475:	68 00 00 f0 3f       	push   0x3ff00000
c000d47a:	6a 00                	push   0x0
c000d47c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d480:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d484:	e8 76 85 01 00       	call   c00259ff <__ltdf2>
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	85 c0                	test   eax,eax
c000d48e:	79 20                	jns    c000d4b0 <sinc_mono_vari_process+0x18d>
c000d490:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d494:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d498:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a0:	e8 6f 7f 01 00       	call   c0025414 <__divdf3>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b0:	50                   	push   eax
c000d4b1:	50                   	push   eax
c000d4b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ba:	e8 f1 86 01 00       	call   c0025bb0 <lrint>
c000d4bf:	40                   	inc    eax
c000d4c0:	0f af c7             	imul   eax,edi
c000d4c3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4c7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4cb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4d9:	58                   	pop    eax
c000d4da:	5a                   	pop    edx
c000d4db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e3:	e8 c8 86 01 00       	call   c0025bb0 <lrint>
c000d4e8:	83 ec 0c             	sub    esp,0xc
c000d4eb:	50                   	push   eax
c000d4ec:	e8 a2 82 01 00       	call   c0025793 <__floatsidf>
c000d4f1:	83 c4 10             	add    esp,0x10
c000d4f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4fc:	52                   	push   edx
c000d4fd:	50                   	push   eax
c000d4fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d502:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d506:	e8 f9 7b 01 00       	call   c0025104 <__subdf3>
c000d50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d513:	83 c4 20             	add    esp,0x20
c000d516:	6a 00                	push   0x0
c000d518:	6a 00                	push   0x0
c000d51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d522:	e8 d8 84 01 00       	call   c00259ff <__ltdf2>
c000d527:	83 c4 10             	add    esp,0x10
c000d52a:	85 c0                	test   eax,eax
c000d52c:	79 1f                	jns    c000d54d <sinc_mono_vari_process+0x22a>
c000d52e:	68 00 00 f0 3f       	push   0x3ff00000
c000d533:	6a 00                	push   0x0
c000d535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53d:	e8 71 75 01 00       	call   c0024ab3 <__adddf3>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d54d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d550:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d553:	83 ec 10             	sub    esp,0x10
c000d556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d562:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d566:	e8 99 7b 01 00       	call   c0025104 <__subdf3>
c000d56b:	83 c4 18             	add    esp,0x18
c000d56e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d572:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d576:	52                   	push   edx
c000d577:	50                   	push   eax
c000d578:	e8 33 86 01 00       	call   c0025bb0 <lrint>
c000d57d:	0f af f8             	imul   edi,eax
c000d580:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d583:	31 ff                	xor    edi,edi
c000d585:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d58a:	99                   	cdq    
c000d58b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d58e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d591:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d595:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d599:	55                   	push   ebp
c000d59a:	57                   	push   edi
c000d59b:	e8 74 7e 01 00       	call   c0025414 <__divdf3>
c000d5a0:	83 c4 10             	add    esp,0x10
c000d5a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ab:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5b0:	68 23 42 92 0c       	push   0xc924223
c000d5b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bd:	e8 f1 74 01 00       	call   c0024ab3 <__adddf3>
c000d5c2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5c6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5ca:	83 c4 20             	add    esp,0x20
c000d5cd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5d1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5db:	7d 54                	jge    c000d631 <sinc_mono_vari_process+0x30e>
c000d5dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5e3:	01 c8                	add    eax,ecx
c000d5e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5e8:	99                   	cdq    
c000d5e9:	f7 f9                	idiv   ecx
c000d5eb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ef:	7d 0c                	jge    c000d5fd <sinc_mono_vari_process+0x2da>
c000d5f1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d5f4:	85 ff                	test   edi,edi
c000d5f6:	79 73                	jns    c000d66b <sinc_mono_vari_process+0x348>
c000d5f8:	e9 ee 00 00 00       	jmp    c000d6eb <sinc_mono_vari_process+0x3c8>
c000d5fd:	50                   	push   eax
c000d5fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d602:	56                   	push   esi
c000d603:	53                   	push   ebx
c000d604:	e8 8d e0 ff ff       	call   c000b696 <prepare_data>
c000d609:	89 c2                	mov    edx,eax
c000d60b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d60f:	83 c4 10             	add    esp,0x10
c000d612:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d615:	85 d2                	test   edx,edx
c000d617:	0f 85 e6 03 00 00    	jne    c000da03 <sinc_mono_vari_process+0x6e0>
c000d61d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d620:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d623:	01 c8                	add    eax,ecx
c000d625:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d628:	99                   	cdq    
c000d629:	f7 f9                	idiv   ecx
c000d62b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d62f:	7c c0                	jl     c000d5f1 <sinc_mono_vari_process+0x2ce>
c000d631:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d635:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d639:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d63d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d640:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d647:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d64b:	89 01                	mov    DWORD PTR [ecx],eax
c000d64d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d650:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d653:	99                   	cdq    
c000d654:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d657:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d65a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d65d:	99                   	cdq    
c000d65e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d661:	31 d2                	xor    edx,edx
c000d663:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d666:	e9 98 03 00 00       	jmp    c000da03 <sinc_mono_vari_process+0x6e0>
c000d66b:	83 ec 0c             	sub    esp,0xc
c000d66e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d671:	e8 1d 81 01 00       	call   c0025793 <__floatsidf>
c000d676:	83 c4 10             	add    esp,0x10
c000d679:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d67d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d681:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d685:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d689:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d691:	e8 1d 74 01 00       	call   c0024ab3 <__adddf3>
c000d696:	83 c4 10             	add    esp,0x10
c000d699:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d69d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b1:	e8 fd 73 01 00       	call   c0024ab3 <__adddf3>
c000d6b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6bd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6c1:	e8 cd 80 01 00       	call   c0025793 <__floatsidf>
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d1:	52                   	push   edx
c000d6d2:	50                   	push   eax
c000d6d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6db:	e8 01 83 01 00       	call   c00259e1 <__gtdf2>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	85 c0                	test   eax,eax
c000d6e5:	0f 8f 46 ff ff ff    	jg     c000d631 <sinc_mono_vari_process+0x30e>
c000d6eb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ef:	0f 8e f5 00 00 00    	jle    c000d7ea <sinc_mono_vari_process+0x4c7>
c000d6f5:	83 ec 10             	sub    esp,0x10
c000d6f8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d6fb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d6fe:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d702:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d705:	ff 30                	push   DWORD PTR [eax]
c000d707:	e8 f8 79 01 00       	call   c0025104 <__subdf3>
c000d70c:	83 c4 18             	add    esp,0x18
c000d70f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d713:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d717:	52                   	push   edx
c000d718:	50                   	push   eax
c000d719:	e8 72 84 01 00       	call   c0025b90 <fabs>
c000d71e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d722:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d726:	83 c4 10             	add    esp,0x10
c000d729:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d72e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d733:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d737:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d73b:	e8 a1 82 01 00       	call   c00259e1 <__gtdf2>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	85 c0                	test   eax,eax
c000d745:	0f 8e 9f 00 00 00    	jle    c000d7ea <sinc_mono_vari_process+0x4c7>
c000d74b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d74f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d752:	8b 00                	mov    eax,DWORD PTR [eax]
c000d754:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d758:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d761:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d764:	e8 9b 79 01 00       	call   c0025104 <__subdf3>
c000d769:	5f                   	pop    edi
c000d76a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d76e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d772:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d775:	e8 19 80 01 00       	call   c0025793 <__floatsidf>
c000d77a:	83 c4 10             	add    esp,0x10
c000d77d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d781:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d785:	52                   	push   edx
c000d786:	50                   	push   eax
c000d787:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78f:	e8 9c 79 01 00       	call   c0025130 <__muldf3>
c000d794:	5d                   	pop    ebp
c000d795:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d799:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d79d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7a0:	e8 ee 7f 01 00       	call   c0025793 <__floatsidf>
c000d7a5:	83 c4 10             	add    esp,0x10
c000d7a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7b0:	52                   	push   edx
c000d7b1:	50                   	push   eax
c000d7b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ba:	e8 55 7c 01 00       	call   c0025414 <__divdf3>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7da:	e8 d4 72 01 00       	call   c0024ab3 <__adddf3>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ea:	83 ec 0c             	sub    esp,0xc
c000d7ed:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d7f0:	e8 9e 7f 01 00       	call   c0025793 <__floatsidf>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7fc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d810:	e8 ea 81 01 00       	call   c00259ff <__ltdf2>
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	85 c0                	test   eax,eax
c000d81a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d81e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d822:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d826:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d82a:	78 10                	js     c000d83c <sinc_mono_vari_process+0x519>
c000d82c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d830:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d834:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d838:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d83c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d840:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d844:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d848:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84c:	e8 df 78 01 00       	call   c0025130 <__muldf3>
c000d851:	59                   	pop    ecx
c000d852:	5f                   	pop    edi
c000d853:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d857:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d85f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d863:	e8 07 de ff ff       	call   c000b66f <double_to_fp>
c000d868:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d86c:	89 c7                	mov    edi,eax
c000d86e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d872:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d876:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d87a:	e8 b1 78 01 00       	call   c0025130 <__muldf3>
c000d87f:	83 c4 18             	add    esp,0x18
c000d882:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d886:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d88a:	52                   	push   edx
c000d88b:	50                   	push   eax
c000d88c:	e8 de dd ff ff       	call   c000b66f <double_to_fp>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	89 c5                	mov    ebp,eax
c000d896:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d899:	e8 f5 7e 01 00       	call   c0025793 <__floatsidf>
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8a5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8a9:	52                   	push   edx
c000d8aa:	50                   	push   eax
c000d8ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b3:	e8 5c 7b 01 00       	call   c0025414 <__divdf3>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	89 e9                	mov    ecx,ebp
c000d8bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8c5:	89 d8                	mov    eax,ebx
c000d8c7:	89 fa                	mov    edx,edi
c000d8c9:	e8 ee bd ff ff       	call   c00096bc <calc_output_single>
c000d8ce:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8d1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8dc:	52                   	push   edx
c000d8dd:	50                   	push   eax
c000d8de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e6:	e8 45 78 01 00       	call   c0025130 <__muldf3>
c000d8eb:	59                   	pop    ecx
c000d8ec:	59                   	pop    ecx
c000d8ed:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fd:	e8 01 81 01 00       	call   c0025a03 <__truncdfsf2>
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d908:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d90b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d90f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d913:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d917:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91b:	e8 f4 7a 01 00       	call   c0025414 <__divdf3>
c000d920:	83 c4 10             	add    esp,0x10
c000d923:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d927:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d92b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d92f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d933:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d937:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93b:	e8 73 71 01 00       	call   c0024ab3 <__adddf3>
c000d940:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d944:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d948:	83 c4 18             	add    esp,0x18
c000d94b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d94f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d953:	e8 58 82 01 00       	call   c0025bb0 <lrint>
c000d958:	83 ec 0c             	sub    esp,0xc
c000d95b:	50                   	push   eax
c000d95c:	e8 32 7e 01 00       	call   c0025793 <__floatsidf>
c000d961:	83 c4 10             	add    esp,0x10
c000d964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d968:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d96c:	52                   	push   edx
c000d96d:	50                   	push   eax
c000d96e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d972:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d976:	e8 89 77 01 00       	call   c0025104 <__subdf3>
c000d97b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d97f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d983:	83 c4 20             	add    esp,0x20
c000d986:	6a 00                	push   0x0
c000d988:	6a 00                	push   0x0
c000d98a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d98e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d992:	e8 68 80 01 00       	call   c00259ff <__ltdf2>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	85 c0                	test   eax,eax
c000d99c:	79 20                	jns    c000d9be <sinc_mono_vari_process+0x69b>
c000d99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ae:	e8 00 71 01 00       	call   c0024ab3 <__adddf3>
c000d9b3:	83 c4 10             	add    esp,0x10
c000d9b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9be:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9c1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9c4:	83 ec 10             	sub    esp,0x10
c000d9c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d7:	e8 28 77 01 00       	call   c0025104 <__subdf3>
c000d9dc:	83 c4 18             	add    esp,0x18
c000d9df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e7:	52                   	push   edx
c000d9e8:	50                   	push   eax
c000d9e9:	e8 c2 81 01 00       	call   c0025bb0 <lrint>
c000d9ee:	83 c4 10             	add    esp,0x10
c000d9f1:	0f af f8             	imul   edi,eax
c000d9f4:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9f7:	99                   	cdq    
c000d9f8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9fb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9fe:	e9 d2 fb ff ff       	jmp    c000d5d5 <sinc_mono_vari_process+0x2b2>
c000da03:	83 c4 4c             	add    esp,0x4c
c000da06:	89 d0                	mov    eax,edx
c000da08:	5b                   	pop    ebx
c000da09:	5e                   	pop    esi
c000da0a:	5f                   	pop    edi
c000da0b:	5d                   	pop    ebp
c000da0c:	c3                   	ret    

c000da0d <sinc_get_name>:
c000da0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da11:	31 c0                	xor    eax,eax
c000da13:	83 fa 02             	cmp    edx,0x2
c000da16:	77 07                	ja     c000da1f <sinc_get_name+0x12>
c000da18:	8b 04 95 04 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8cfc]
c000da1f:	c3                   	ret    

c000da20 <sinc_get_description>:
c000da20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da24:	31 c0                	xor    eax,eax
c000da26:	83 fa 02             	cmp    edx,0x2
c000da29:	77 07                	ja     c000da32 <sinc_get_description+0x12>
c000da2b:	8b 04 95 f8 72 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8d08]
c000da32:	c3                   	ret    

c000da33 <sinc_set_converter>:
c000da33:	53                   	push   ebx
c000da34:	81 ec 58 08 00 00    	sub    esp,0x858
c000da3a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da41:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da44:	85 c0                	test   eax,eax
c000da46:	74 13                	je     c000da5b <sinc_set_converter+0x28>
c000da48:	83 ec 0c             	sub    esp,0xc
c000da4b:	50                   	push   eax
c000da4c:	e8 7f 1a 00 00       	call   c000f4d0 <free>
c000da51:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da58:	83 c4 10             	add    esp,0x10
c000da5b:	50                   	push   eax
c000da5c:	68 44 08 00 00       	push   0x844
c000da61:	6a 00                	push   0x0
c000da63:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da67:	50                   	push   eax
c000da68:	e8 0e 2c ff ff       	call   c000067b <memset>
c000da6d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	b8 0b 00 00 00       	mov    eax,0xb
c000da78:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da7e:	7f 6e                	jg     c000daee <sinc_set_converter+0xbb>
c000da80:	83 fa 01             	cmp    edx,0x1
c000da83:	75 10                	jne    c000da95 <sinc_set_converter+0x62>
c000da85:	c7 43 24 23 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d323
c000da8c:	c7 43 20 23 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d323
c000da93:	eb 4d                	jmp    c000dae2 <sinc_set_converter+0xaf>
c000da95:	83 fa 02             	cmp    edx,0x2
c000da98:	75 10                	jne    c000daaa <sinc_set_converter+0x77>
c000da9a:	c7 43 24 5e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc5e
c000daa1:	c7 43 20 5e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc5e
c000daa8:	eb 38                	jmp    c000dae2 <sinc_set_converter+0xaf>
c000daaa:	83 fa 04             	cmp    edx,0x4
c000daad:	75 10                	jne    c000dabf <sinc_set_converter+0x8c>
c000daaf:	c7 43 24 99 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c599
c000dab6:	c7 43 20 99 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c599
c000dabd:	eb 23                	jmp    c000dae2 <sinc_set_converter+0xaf>
c000dabf:	83 fa 06             	cmp    edx,0x6
c000dac2:	75 10                	jne    c000dad4 <sinc_set_converter+0xa1>
c000dac4:	c7 43 24 d4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bed4
c000dacb:	c7 43 20 d4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bed4
c000dad2:	eb 0e                	jmp    c000dae2 <sinc_set_converter+0xaf>
c000dad4:	c7 43 24 10 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b810
c000dadb:	c7 43 20 10 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b810
c000dae2:	c7 43 28 c3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aac3
c000dae9:	b8 0a 00 00 00       	mov    eax,0xa
c000daee:	81 c4 58 08 00 00    	add    esp,0x858
c000daf4:	5b                   	pop    ebx
c000daf5:	c3                   	ret    

c000daf6 <zoh_vari_process>:
c000daf6:	55                   	push   ebp
c000daf7:	31 d2                	xor    edx,edx
c000daf9:	57                   	push   edi
c000dafa:	56                   	push   esi
c000dafb:	53                   	push   ebx
c000dafc:	83 ec 3c             	sub    esp,0x3c
c000daff:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db03:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db07:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db0b:	0f 8e 80 06 00 00    	jle    c000e191 <zoh_vari_process+0x69b>
c000db11:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db14:	ba 05 00 00 00       	mov    edx,0x5
c000db19:	85 db                	test   ebx,ebx
c000db1b:	0f 84 70 06 00 00    	je     c000e191 <zoh_vari_process+0x69b>
c000db21:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db24:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db28:	74 19                	je     c000db43 <zoh_vari_process+0x4d>
c000db2a:	31 d2                	xor    edx,edx
c000db2c:	39 c2                	cmp    edx,eax
c000db2e:	7d 0c                	jge    c000db3c <zoh_vari_process+0x46>
c000db30:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db32:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db35:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db39:	42                   	inc    edx
c000db3a:	eb f0                	jmp    c000db2c <zoh_vari_process+0x36>
c000db3c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db43:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db46:	0f af d0             	imul   edx,eax
c000db49:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db4c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db57:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db5a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db61:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db64:	8b 07                	mov    eax,DWORD PTR [edi]
c000db66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db6e:	68 00 00 70 3f       	push   0x3f700000
c000db73:	6a 00                	push   0x0
c000db75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7d:	e8 7d 7e 01 00       	call   c00259ff <__ltdf2>
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	ba 16 00 00 00       	mov    edx,0x16
c000db8a:	85 c0                	test   eax,eax
c000db8c:	0f 88 ff 05 00 00    	js     c000e191 <zoh_vari_process+0x69b>
c000db92:	68 00 00 70 40       	push   0x40700000
c000db97:	6a 00                	push   0x0
c000db99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dba1:	e8 3b 7e 01 00       	call   c00259e1 <__gtdf2>
c000dba6:	83 c4 10             	add    esp,0x10
c000dba9:	ba 16 00 00 00       	mov    edx,0x16
c000dbae:	85 c0                	test   eax,eax
c000dbb0:	0f 8f db 05 00 00    	jg     c000e191 <zoh_vari_process+0x69b>
c000dbb6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbc4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbc9:	6a 00                	push   0x0
c000dbcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd3:	e8 27 7e 01 00       	call   c00259ff <__ltdf2>
c000dbd8:	83 c4 10             	add    esp,0x10
c000dbdb:	85 c0                	test   eax,eax
c000dbdd:	0f 89 da 01 00 00    	jns    c000ddbd <zoh_vari_process+0x2c7>
c000dbe3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbe6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbe9:	0f 8d ce 01 00 00    	jge    c000ddbd <zoh_vari_process+0x2c7>
c000dbef:	83 ec 0c             	sub    esp,0xc
c000dbf2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbf5:	e8 99 7b 01 00       	call   c0025793 <__floatsidf>
c000dbfa:	83 c4 10             	add    esp,0x10
c000dbfd:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc14:	e8 17 75 01 00       	call   c0025130 <__muldf3>
c000dc19:	59                   	pop    ecx
c000dc1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc1e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc22:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc25:	e8 69 7b 01 00       	call   c0025793 <__floatsidf>
c000dc2a:	83 c4 10             	add    esp,0x10
c000dc2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc35:	52                   	push   edx
c000dc36:	50                   	push   eax
c000dc37:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc3f:	e8 6f 6e 01 00       	call   c0024ab3 <__adddf3>
c000dc44:	59                   	pop    ecx
c000dc45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc49:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc4d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc50:	e8 3e 7b 01 00       	call   c0025793 <__floatsidf>
c000dc55:	83 c4 10             	add    esp,0x10
c000dc58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc60:	52                   	push   edx
c000dc61:	50                   	push   eax
c000dc62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc6a:	e8 8e 7d 01 00       	call   c00259fd <__gedf2>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	85 c0                	test   eax,eax
c000dc74:	0f 89 43 01 00 00    	jns    c000ddbd <zoh_vari_process+0x2c7>
c000dc7a:	85 ed                	test   ebp,ebp
c000dc7c:	0f 8e ec 00 00 00    	jle    c000dd6e <zoh_vari_process+0x278>
c000dc82:	83 ec 10             	sub    esp,0x10
c000dc85:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc88:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc8b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc8e:	ff 37                	push   DWORD PTR [edi]
c000dc90:	e8 6f 74 01 00       	call   c0025104 <__subdf3>
c000dc95:	83 c4 18             	add    esp,0x18
c000dc98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dca0:	52                   	push   edx
c000dca1:	50                   	push   eax
c000dca2:	e8 e9 7e 01 00       	call   c0025b90 <fabs>
c000dca7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcaf:	83 c4 10             	add    esp,0x10
c000dcb2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcb7:	68 23 42 92 0c       	push   0xc924223
c000dcbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc4:	e8 18 7d 01 00       	call   c00259e1 <__gtdf2>
c000dcc9:	83 c4 10             	add    esp,0x10
c000dccc:	85 c0                	test   eax,eax
c000dcce:	0f 8e 9a 00 00 00    	jle    c000dd6e <zoh_vari_process+0x278>
c000dcd4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dcd6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dcd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dce0:	52                   	push   edx
c000dce1:	50                   	push   eax
c000dce2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dce5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dce8:	e8 17 74 01 00       	call   c0025104 <__subdf3>
c000dced:	59                   	pop    ecx
c000dcee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcf2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcf6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcf9:	e8 95 7a 01 00       	call   c0025793 <__floatsidf>
c000dcfe:	83 c4 10             	add    esp,0x10
c000dd01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd05:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd09:	52                   	push   edx
c000dd0a:	50                   	push   eax
c000dd0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd13:	e8 18 74 01 00       	call   c0025130 <__muldf3>
c000dd18:	5d                   	pop    ebp
c000dd19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd1d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd21:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd24:	e8 6a 7a 01 00       	call   c0025793 <__floatsidf>
c000dd29:	83 c4 10             	add    esp,0x10
c000dd2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd30:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd34:	52                   	push   edx
c000dd35:	50                   	push   eax
c000dd36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3e:	e8 d1 76 01 00       	call   c0025414 <__divdf3>
c000dd43:	83 c4 10             	add    esp,0x10
c000dd46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd4e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd52:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5e:	e8 50 6d 01 00       	call   c0024ab3 <__adddf3>
c000dd63:	83 c4 10             	add    esp,0x10
c000dd66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd6e:	31 c0                	xor    eax,eax
c000dd70:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd73:	7e 13                	jle    c000dd88 <zoh_vari_process+0x292>
c000dd75:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd79:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd7f:	40                   	inc    eax
c000dd80:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd83:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd86:	eb e8                	jmp    c000dd70 <zoh_vari_process+0x27a>
c000dd88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd90:	68 00 00 f0 3f       	push   0x3ff00000
c000dd95:	6a 00                	push   0x0
c000dd97:	e8 78 76 01 00       	call   c0025414 <__divdf3>
c000dd9c:	83 c4 10             	add    esp,0x10
c000dd9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dda6:	52                   	push   edx
c000dda7:	50                   	push   eax
c000dda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb0:	e8 fe 6c 01 00       	call   c0024ab3 <__adddf3>
c000ddb5:	83 c4 10             	add    esp,0x10
c000ddb8:	e9 ff fd ff ff       	jmp    c000dbbc <zoh_vari_process+0xc6>
c000ddbd:	55                   	push   ebp
c000ddbe:	55                   	push   ebp
c000ddbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc7:	e8 e4 7d 01 00       	call   c0025bb0 <lrint>
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	50                   	push   eax
c000ddd0:	e8 be 79 01 00       	call   c0025793 <__floatsidf>
c000ddd5:	83 c4 10             	add    esp,0x10
c000ddd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dddc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dde0:	52                   	push   edx
c000dde1:	50                   	push   eax
c000dde2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dde6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddea:	e8 15 73 01 00       	call   c0025104 <__subdf3>
c000ddef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ddf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ddf7:	83 c4 20             	add    esp,0x20
c000ddfa:	6a 00                	push   0x0
c000ddfc:	6a 00                	push   0x0
c000ddfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de06:	e8 f4 7b 01 00       	call   c00259ff <__ltdf2>
c000de0b:	83 c4 10             	add    esp,0x10
c000de0e:	85 c0                	test   eax,eax
c000de10:	79 1e                	jns    c000de30 <zoh_vari_process+0x33a>
c000de12:	68 00 00 f0 3f       	push   0x3ff00000
c000de17:	6a 00                	push   0x0
c000de19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de21:	e8 8d 6c 01 00       	call   c0024ab3 <__adddf3>
c000de26:	83 c4 10             	add    esp,0x10
c000de29:	89 04 24             	mov    DWORD PTR [esp],eax
c000de2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de30:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de33:	83 ec 10             	sub    esp,0x10
c000de36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de46:	e8 b9 72 01 00       	call   c0025104 <__subdf3>
c000de4b:	83 c4 18             	add    esp,0x18
c000de4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de56:	52                   	push   edx
c000de57:	50                   	push   eax
c000de58:	e8 53 7d 01 00       	call   c0025bb0 <lrint>
c000de5d:	83 c4 10             	add    esp,0x10
c000de60:	0f af e8             	imul   ebp,eax
c000de63:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de66:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de69:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de6d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de70:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de77:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de7a:	0f 8d 7a 02 00 00    	jge    c000e0fa <zoh_vari_process+0x604>
c000de80:	83 ec 0c             	sub    esp,0xc
c000de83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de86:	e8 08 79 01 00       	call   c0025793 <__floatsidf>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de92:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de96:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea6:	e8 85 72 01 00       	call   c0025130 <__muldf3>
c000deab:	59                   	pop    ecx
c000deac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000deb0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000deb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb8:	e8 d6 78 01 00       	call   c0025793 <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dec4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dece:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded2:	e8 dc 6b 01 00       	call   c0024ab3 <__adddf3>
c000ded7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dede:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dee2:	e8 ac 78 01 00       	call   c0025793 <__floatsidf>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000deee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000def2:	52                   	push   edx
c000def3:	50                   	push   eax
c000def4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000def8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defc:	e8 00 7b 01 00       	call   c0025a01 <__ledf2>
c000df01:	83 c4 10             	add    esp,0x10
c000df04:	85 c0                	test   eax,eax
c000df06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df0a:	0f 8f ea 01 00 00    	jg     c000e0fa <zoh_vari_process+0x604>
c000df10:	85 c9                	test   ecx,ecx
c000df12:	0f 8e ed 00 00 00    	jle    c000e005 <zoh_vari_process+0x50f>
c000df18:	83 ec 10             	sub    esp,0x10
c000df1b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df1e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df21:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df24:	ff 37                	push   DWORD PTR [edi]
c000df26:	e8 d9 71 01 00       	call   c0025104 <__subdf3>
c000df2b:	83 c4 18             	add    esp,0x18
c000df2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df36:	52                   	push   edx
c000df37:	50                   	push   eax
c000df38:	e8 53 7c 01 00       	call   c0025b90 <fabs>
c000df3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df45:	83 c4 10             	add    esp,0x10
c000df48:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df4d:	68 23 42 92 0c       	push   0xc924223
c000df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5a:	e8 82 7a 01 00       	call   c00259e1 <__gtdf2>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	85 c0                	test   eax,eax
c000df64:	0f 8e 9b 00 00 00    	jle    c000e005 <zoh_vari_process+0x50f>
c000df6a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df6c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df77:	52                   	push   edx
c000df78:	50                   	push   eax
c000df79:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df7c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df7f:	e8 80 71 01 00       	call   c0025104 <__subdf3>
c000df84:	5d                   	pop    ebp
c000df85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df89:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df8d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df90:	e8 fe 77 01 00       	call   c0025793 <__floatsidf>
c000df95:	83 c4 10             	add    esp,0x10
c000df98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfa0:	52                   	push   edx
c000dfa1:	50                   	push   eax
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfaa:	e8 81 71 01 00       	call   c0025130 <__muldf3>
c000dfaf:	59                   	pop    ecx
c000dfb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfb4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfb8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfbb:	e8 d3 77 01 00       	call   c0025793 <__floatsidf>
c000dfc0:	83 c4 10             	add    esp,0x10
c000dfc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfcb:	52                   	push   edx
c000dfcc:	50                   	push   eax
c000dfcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd5:	e8 3a 74 01 00       	call   c0025414 <__divdf3>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfe1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfe9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff5:	e8 b9 6a 01 00       	call   c0024ab3 <__adddf3>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e001:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e005:	31 d2                	xor    edx,edx
c000e007:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e00a:	39 d0                	cmp    eax,edx
c000e00c:	7e 1d                	jle    c000e02b <zoh_vari_process+0x535>
c000e00e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e011:	29 c1                	sub    ecx,eax
c000e013:	89 c8                	mov    eax,ecx
c000e015:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e017:	01 d0                	add    eax,edx
c000e019:	42                   	inc    edx
c000e01a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e01d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e020:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e023:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e026:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e029:	eb dc                	jmp    c000e007 <zoh_vari_process+0x511>
c000e02b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e033:	68 00 00 f0 3f       	push   0x3ff00000
c000e038:	6a 00                	push   0x0
c000e03a:	e8 d5 73 01 00       	call   c0025414 <__divdf3>
c000e03f:	83 c4 10             	add    esp,0x10
c000e042:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e046:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e04a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e04e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05a:	e8 54 6a 01 00       	call   c0024ab3 <__adddf3>
c000e05f:	5d                   	pop    ebp
c000e060:	59                   	pop    ecx
c000e061:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e071:	e8 3a 7b 01 00       	call   c0025bb0 <lrint>
c000e076:	83 ec 0c             	sub    esp,0xc
c000e079:	50                   	push   eax
c000e07a:	e8 14 77 01 00       	call   c0025793 <__floatsidf>
c000e07f:	83 c4 10             	add    esp,0x10
c000e082:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e086:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e08a:	52                   	push   edx
c000e08b:	50                   	push   eax
c000e08c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e090:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e094:	e8 6b 70 01 00       	call   c0025104 <__subdf3>
c000e099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e09d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0a1:	83 c4 20             	add    esp,0x20
c000e0a4:	6a 00                	push   0x0
c000e0a6:	6a 00                	push   0x0
c000e0a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0b0:	e8 4a 79 01 00       	call   c00259ff <__ltdf2>
c000e0b5:	83 c4 10             	add    esp,0x10
c000e0b8:	85 c0                	test   eax,eax
c000e0ba:	79 1e                	jns    c000e0da <zoh_vari_process+0x5e4>
c000e0bc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0c1:	6a 00                	push   0x0
c000e0c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0cb:	e8 e3 69 01 00       	call   c0024ab3 <__adddf3>
c000e0d0:	83 c4 10             	add    esp,0x10
c000e0d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0da:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0dd:	83 ec 10             	sub    esp,0x10
c000e0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f0:	e8 0f 70 01 00       	call   c0025104 <__subdf3>
c000e0f5:	e9 51 fd ff ff       	jmp    c000de4b <zoh_vari_process+0x355>
c000e0fa:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e0fe:	7d 3a                	jge    c000e13a <zoh_vari_process+0x644>
c000e100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	29 e8                	sub    eax,ebp
c000e109:	99                   	cdq    
c000e10a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e10d:	50                   	push   eax
c000e10e:	e8 80 76 01 00       	call   c0025793 <__floatsidf>
c000e113:	83 c4 10             	add    esp,0x10
c000e116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e11a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e11e:	52                   	push   edx
c000e11f:	50                   	push   eax
c000e120:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e124:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e128:	e8 86 69 01 00       	call   c0024ab3 <__adddf3>
c000e12d:	83 c4 10             	add    esp,0x10
c000e130:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e133:	89 04 24             	mov    DWORD PTR [esp],eax
c000e136:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e13d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e141:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e144:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e147:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e14a:	85 c0                	test   eax,eax
c000e14c:	7f 25                	jg     c000e173 <zoh_vari_process+0x67d>
c000e14e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e152:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e156:	89 07                	mov    DWORD PTR [edi],eax
c000e158:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e15b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15e:	99                   	cdq    
c000e15f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e162:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e165:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e168:	99                   	cdq    
c000e169:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e16c:	31 d2                	xor    edx,edx
c000e16e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e171:	eb 1e                	jmp    c000e191 <zoh_vari_process+0x69b>
c000e173:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e176:	31 d2                	xor    edx,edx
c000e178:	29 c8                	sub    eax,ecx
c000e17a:	c1 e0 02             	shl    eax,0x2
c000e17d:	39 d1                	cmp    ecx,edx
c000e17f:	7e cd                	jle    c000e14e <zoh_vari_process+0x658>
c000e181:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e183:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e187:	83 c0 04             	add    eax,0x4
c000e18a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e18e:	42                   	inc    edx
c000e18f:	eb ec                	jmp    c000e17d <zoh_vari_process+0x687>
c000e191:	83 c4 3c             	add    esp,0x3c
c000e194:	89 d0                	mov    eax,edx
c000e196:	5b                   	pop    ebx
c000e197:	5e                   	pop    esi
c000e198:	5f                   	pop    edi
c000e199:	5d                   	pop    ebp
c000e19a:	c3                   	ret    

c000e19b <zoh_reset>:
c000e19b:	83 ec 0c             	sub    esp,0xc
c000e19e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1a2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1a5:	85 c0                	test   eax,eax
c000e1a7:	74 20                	je     c000e1c9 <zoh_reset+0x2e>
c000e1a9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1ac:	83 c0 1c             	add    eax,0x1c
c000e1af:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1b2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1b9:	c1 e2 02             	shl    edx,0x2
c000e1bc:	51                   	push   ecx
c000e1bd:	52                   	push   edx
c000e1be:	6a 00                	push   0x0
c000e1c0:	50                   	push   eax
c000e1c1:	e8 b5 24 ff ff       	call   c000067b <memset>
c000e1c6:	83 c4 10             	add    esp,0x10
c000e1c9:	83 c4 0c             	add    esp,0xc
c000e1cc:	c3                   	ret    

c000e1cd <zoh_get_name>:
c000e1cd:	31 c0                	xor    eax,eax
c000e1cf:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1d4:	75 05                	jne    c000e1db <zoh_get_name+0xe>
c000e1d6:	b8 1e 74 02 c0       	mov    eax,0xc002741e
c000e1db:	c3                   	ret    

c000e1dc <zoh_get_description>:
c000e1dc:	31 c0                	xor    eax,eax
c000e1de:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e3:	75 05                	jne    c000e1ea <zoh_get_description+0xe>
c000e1e5:	b8 2f 74 02 c0       	mov    eax,0xc002742f
c000e1ea:	c3                   	ret    

c000e1eb <zoh_set_converter>:
c000e1eb:	53                   	push   ebx
c000e1ec:	b8 0a 00 00 00       	mov    eax,0xa
c000e1f1:	83 ec 08             	sub    esp,0x8
c000e1f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1f8:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e1fd:	75 6e                	jne    c000e26d <zoh_set_converter+0x82>
c000e1ff:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e202:	85 c0                	test   eax,eax
c000e204:	74 13                	je     c000e219 <zoh_set_converter+0x2e>
c000e206:	83 ec 0c             	sub    esp,0xc
c000e209:	50                   	push   eax
c000e20a:	e8 c1 12 00 00       	call   c000f4d0 <free>
c000e20f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e216:	83 c4 10             	add    esp,0x10
c000e219:	50                   	push   eax
c000e21a:	50                   	push   eax
c000e21b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e21e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e225:	50                   	push   eax
c000e226:	6a 01                	push   0x1
c000e228:	e8 c3 12 00 00       	call   c000f4f0 <calloc>
c000e22d:	83 c4 10             	add    esp,0x10
c000e230:	89 c2                	mov    edx,eax
c000e232:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e235:	85 d2                	test   edx,edx
c000e237:	b8 01 00 00 00       	mov    eax,0x1
c000e23c:	74 2f                	je     c000e26d <zoh_set_converter+0x82>
c000e23e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e241:	83 ec 0c             	sub    esp,0xc
c000e244:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e247:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e24d:	c7 43 24 f6 da 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000daf6
c000e254:	c7 43 20 f6 da 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000daf6
c000e25b:	c7 43 28 9b e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e19b
c000e262:	53                   	push   ebx
c000e263:	e8 33 ff ff ff       	call   c000e19b <zoh_reset>
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	31 c0                	xor    eax,eax
c000e26d:	83 c4 08             	add    esp,0x8
c000e270:	5b                   	pop    ebx
c000e271:	c3                   	ret    

c000e272 <CPU::current()>:
c000e272:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c000e277:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e27d:	90                   	nop
c000e27e:	c3                   	ret    

c000e27f <operator new(unsigned long)>:
c000e27f:	83 ec 0c             	sub    esp,0xc
c000e282:	83 ec 0c             	sub    esp,0xc
c000e285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e289:	e8 32 12 00 00       	call   c000f4c0 <malloc>
c000e28e:	83 c4 10             	add    esp,0x10
c000e291:	83 c4 0c             	add    esp,0xc
c000e294:	c3                   	ret    
c000e295:	90                   	nop

c000e296 <Computer::close(int, int, void*)>:
c000e296:	57                   	push   edi
c000e297:	56                   	push   esi
c000e298:	53                   	push   ebx
c000e299:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e29d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2a5:	83 ec 0c             	sub    esp,0xc
c000e2a8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2ae:	e8 e5 58 00 00       	call   c0013b98 <Device::closeAll()>
c000e2b3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2be:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2c2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2ca:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d2:	5b                   	pop    ebx
c000e2d3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2d6:	5e                   	pop    esi
c000e2d7:	5f                   	pop    edi
c000e2d8:	ff e0                	jmp    eax

c000e2da <Computer::Computer()>:
c000e2da:	83 ec 0c             	sub    esp,0xc
c000e2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 66 74 02 c0       	push   0xc0027466
c000e2e9:	50                   	push   eax
c000e2ea:	e8 23 59 00 00       	call   c0013c12 <Device::Device(char const*)>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	ba 30 76 02 c0       	mov    edx,0xc0027630
c000e2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fb:	89 10                	mov    DWORD PTR [eax],edx
c000e2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e301:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e323:	83 ca 04             	or     edx,0x4
c000e326:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e330:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e336:	0f b6 d0             	movzx  edx,al
c000e339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e348:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e34e:	0f b6 d0             	movzx  edx,al
c000e351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e355:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e364:	8d 50 01             	lea    edx,[eax+0x1]
c000e367:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e36b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e371:	0f b6 d0             	movzx  edx,al
c000e374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e378:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e37c:	83 e1 3f             	and    ecx,0x3f
c000e37f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e387:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e38d:	0f b6 d0             	movzx  edx,al
c000e390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e394:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3a5:	0f b6 d0             	movzx  edx,al
c000e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ac:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3c8:	0f b6 d0             	movzx  edx,al
c000e3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3d3:	83 e1 3f             	and    ecx,0x3f
c000e3d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3e4:	0f b6 d0             	movzx  edx,al
c000e3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3eb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3fc:	0f b6 d0             	movzx  edx,al
c000e3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e403:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e412:	8d 50 01             	lea    edx,[eax+0x1]
c000e415:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e419:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e41f:	0f b6 d0             	movzx  edx,al
c000e422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e426:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e42a:	83 e1 3f             	and    ecx,0x3f
c000e42d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e431:	90                   	nop
c000e432:	83 c4 0c             	add    esp,0xc
c000e435:	c3                   	ret    

c000e436 <Computer::setBootMessage(char const*)>:
c000e436:	c3                   	ret    
c000e437:	90                   	nop

c000e438 <Computer::start()>:
c000e438:	56                   	push   esi
c000e439:	53                   	push   ebx
c000e43a:	83 ec 10             	sub    esp,0x10
c000e43d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e441:	fb                   	sti    
c000e442:	68 3b 07 00 00       	push   0x73b
c000e447:	e8 74 10 00 00       	call   c000f4c0 <malloc>
c000e44c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e453:	89 c6                	mov    esi,eax
c000e455:	ff 35 d4 c5 02 c0    	push   DWORD PTR ds:0xc002c5d4
c000e45b:	68 6f 74 02 c0       	push   0xc002746f
c000e460:	6a 01                	push   0x1
c000e462:	50                   	push   eax
c000e463:	e8 c4 da 00 00       	call   c001bf2c <Process::Process(bool, char const*, Process*, char**)>
c000e468:	83 c4 20             	add    esp,0x20
c000e46b:	68 ff 00 00 00       	push   0xff
c000e470:	6a 00                	push   0x0
c000e472:	68 55 ee 00 c0       	push   0xc000ee55
c000e477:	56                   	push   esi
c000e478:	e8 91 dd 00 00       	call   c001c20e <Process::createThread(void (*)(void*), void*, int)>
c000e47d:	6a 7a                	push   0x7a
c000e47f:	6a 00                	push   0x0
c000e481:	68 47 ca 01 c0       	push   0xc001ca47
c000e486:	ff 35 d4 c5 02 c0    	push   DWORD PTR ds:0xc002c5d4
c000e48c:	e8 7d dd 00 00       	call   c001c20e <Process::createThread(void (*)(void*), void*, int)>
c000e491:	83 c4 20             	add    esp,0x20
c000e494:	a3 88 c5 02 c0       	mov    ds:0xc002c588,eax
c000e499:	e8 d3 e8 00 00       	call   c001cd71 <Vm::initialise8086()>
c000e49e:	c6 05 cd b0 02 c0 01 	mov    BYTE PTR ds:0xc002b0cd,0x1
c000e4a5:	e8 e4 44 00 00       	call   c001298e <initVFS()>
c000e4aa:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4b2:	6a 00                	push   0x0
c000e4b4:	6a 00                	push   0x0
c000e4b6:	6a 00                	push   0x0
c000e4b8:	50                   	push   eax
c000e4b9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4bc:	e8 30 c4 00 00       	call   c001a8f1 <setupSystemCalls()>
c000e4c1:	e8 da 4f 00 00       	call   c00134a0 <loadClockSettings()>
c000e4c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4c9:	e8 9e 56 00 00       	call   c0013b6c <Device::loadDriversForAll()>
c000e4ce:	58                   	pop    eax
c000e4cf:	8b 1d c8 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0c8
c000e4d5:	5a                   	pop    edx
c000e4d6:	6a 01                	push   0x1
c000e4d8:	68 7c 74 02 c0       	push   0xc002747c
c000e4dd:	e8 bf d5 00 00       	call   c001baa1 <Thr::loadDLL(char const*, bool)>
c000e4e2:	59                   	pop    ecx
c000e4e3:	5e                   	pop    esi
c000e4e4:	53                   	push   ebx
c000e4e5:	50                   	push   eax
c000e4e6:	e8 c5 d7 00 00       	call   c001bcb0 <Thr::executeDLL(unsigned long, void*)>
c000e4eb:	c7 04 24 c8 86 02 c0 	mov    DWORD PTR [esp],0xc00286c8
c000e4f2:	e8 3c 41 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	83 ec 0c             	sub    esp,0xc
c000e4fd:	6a 02                	push   0x2
c000e4ff:	e8 6e e0 00 00       	call   c001c572 <blockTask(TaskState)>
c000e504:	83 c4 10             	add    esp,0x10
c000e507:	eb f1                	jmp    c000e4fa <Computer::start()+0xc2>

c000e509 <firstTask()>:
c000e509:	83 ec 18             	sub    esp,0x18
c000e50c:	ff 35 c8 b0 02 c0    	push   DWORD PTR ds:0xc002b0c8
c000e512:	e8 21 ff ff ff       	call   c000e438 <Computer::start()>
c000e517:	90                   	nop

c000e518 <Computer::detectFeatures()>:
c000e518:	55                   	push   ebp
c000e519:	57                   	push   edi
c000e51a:	56                   	push   esi
c000e51b:	53                   	push   ebx
c000e51c:	83 ec 1c             	sub    esp,0x1c
c000e51f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e523:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e52d:	e8 67 1d ff ff       	call   c0000299 <detectCPUID>
c000e532:	85 c0                	test   eax,eax
c000e534:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e53a:	0f 95 c2             	setne  dl
c000e53d:	83 e0 fd             	and    eax,0xfffffffd
c000e540:	d1 e2                	shl    edx,1
c000e542:	09 d0                	or     eax,edx
c000e544:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e54a:	a8 02                	test   al,0x2
c000e54c:	75 46                	jne    c000e594 <Computer::detectFeatures()+0x7c>
c000e54e:	f6 05 e1 b0 02 c0 04 	test   BYTE PTR ds:0xc002b0e1,0x4
c000e555:	74 07                	je     c000e55e <Computer::detectFeatures()+0x46>
c000e557:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e55e:	e8 93 56 01 00       	call   c0023bf6 <x87Detect>
c000e563:	83 e0 01             	and    eax,0x1
c000e566:	c1 e0 04             	shl    eax,0x4
c000e569:	88 c2                	mov    dl,al
c000e56b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e571:	83 e0 ef             	and    eax,0xffffffef
c000e574:	09 d0                	or     eax,edx
c000e576:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e57c:	a8 10                	test   al,0x10
c000e57e:	0f 85 2a 01 00 00    	jne    c000e6ae <Computer::detectFeatures()+0x196>
c000e584:	84 c0                	test   al,al
c000e586:	0f 88 45 01 00 00    	js     c000e6d1 <Computer::detectFeatures()+0x1b9>
c000e58c:	83 c4 1c             	add    esp,0x1c
c000e58f:	5b                   	pop    ebx
c000e590:	5e                   	pop    esi
c000e591:	5f                   	pop    edi
c000e592:	5d                   	pop    ebp
c000e593:	c3                   	ret    
c000e594:	83 ec 0c             	sub    esp,0xc
c000e597:	6a 20                	push   0x20
c000e599:	e8 56 99 00 00       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c000e59e:	83 e0 01             	and    eax,0x1
c000e5a1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5a8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5ae:	83 e0 f7             	and    eax,0xfffffff7
c000e5b1:	09 d0                	or     eax,edx
c000e5b3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5b9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5c0:	e8 2f 99 00 00       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5c5:	83 e0 01             	and    eax,0x1
c000e5c8:	88 c2                	mov    dl,al
c000e5ca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5d0:	83 e0 fe             	and    eax,0xfffffffe
c000e5d3:	09 d0                	or     eax,edx
c000e5d5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5db:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5e2:	e8 0d 99 00 00       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5e7:	c1 e0 07             	shl    eax,0x7
c000e5ea:	88 c2                	mov    dl,al
c000e5ec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5f2:	83 e0 7f             	and    eax,0x7f
c000e5f5:	09 d0                	or     eax,edx
c000e5f7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5fd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e604:	e8 eb 98 00 00       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c000e609:	83 c4 10             	add    esp,0x10
c000e60c:	83 e0 01             	and    eax,0x1
c000e60f:	c1 e0 05             	shl    eax,0x5
c000e612:	88 c2                	mov    dl,al
c000e614:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e61a:	83 e0 df             	and    eax,0xffffffdf
c000e61d:	09 d0                	or     eax,edx
c000e61f:	f7 05 e0 b0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002b0e0,0x401
c000e629:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e62f:	0f 84 c2 00 00 00    	je     c000e6f7 <Computer::detectFeatures()+0x1df>
c000e635:	83 e0 fe             	and    eax,0xfffffffe
c000e638:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e63e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e644:	88 c2                	mov    dl,al
c000e646:	83 e2 09             	and    edx,0x9
c000e649:	fe ca                	dec    dl
c000e64b:	75 09                	jne    c000e656 <Computer::detectFeatures()+0x13e>
c000e64d:	83 e0 fe             	and    eax,0xfffffffe
c000e650:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e656:	83 ec 0c             	sub    esp,0xc
c000e659:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e65d:	50                   	push   eax
c000e65e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e662:	55                   	push   ebp
c000e663:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e667:	57                   	push   edi
c000e668:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e66c:	56                   	push   esi
c000e66d:	68 00 00 00 80       	push   0x80000000
c000e672:	e8 f9 97 00 00       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e677:	83 c4 20             	add    esp,0x20
c000e67a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e681:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e685:	0f 86 c3 fe ff ff    	jbe    c000e54e <Computer::detectFeatures()+0x36>
c000e68b:	83 ec 0c             	sub    esp,0xc
c000e68e:	50                   	push   eax
c000e68f:	55                   	push   ebp
c000e690:	57                   	push   edi
c000e691:	56                   	push   esi
c000e692:	68 01 00 00 80       	push   0x80000001
c000e697:	e8 d4 97 00 00       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e69c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	e9 a0 fe ff ff       	jmp    c000e54e <Computer::detectFeatures()+0x36>
c000e6ae:	e8 fd 54 01 00       	call   c0023bb0 <absolutelyNoChanceInHell>
c000e6b3:	88 c2                	mov    dl,al
c000e6b5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6bb:	c1 e2 07             	shl    edx,0x7
c000e6be:	83 e0 7f             	and    eax,0x7f
c000e6c1:	09 d0                	or     eax,edx
c000e6c3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6c9:	84 c0                	test   al,al
c000e6cb:	0f 89 bb fe ff ff    	jns    c000e58c <Computer::detectFeatures()+0x74>
c000e6d1:	e8 ba 54 01 00       	call   c0023b90 <avxDetect>
c000e6d6:	83 e0 01             	and    eax,0x1
c000e6d9:	c1 e0 05             	shl    eax,0x5
c000e6dc:	88 c2                	mov    dl,al
c000e6de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6e4:	83 e0 df             	and    eax,0xffffffdf
c000e6e7:	09 d0                	or     eax,edx
c000e6e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e6ef:	83 c4 1c             	add    esp,0x1c
c000e6f2:	5b                   	pop    ebx
c000e6f3:	5e                   	pop    esi
c000e6f4:	5f                   	pop    edi
c000e6f5:	5d                   	pop    ebp
c000e6f6:	c3                   	ret    
c000e6f7:	83 ec 0c             	sub    esp,0xc
c000e6fa:	68 00 02 00 00       	push   0x200
c000e6ff:	e8 f0 97 00 00       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c000e704:	83 c4 10             	add    esp,0x10
c000e707:	83 e0 01             	and    eax,0x1
c000e70a:	88 c2                	mov    dl,al
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 fe             	and    eax,0xfffffffe
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	e9 1c ff ff ff       	jmp    c000e63e <Computer::detectFeatures()+0x126>

c000e722 <Computer::displayFeatures()>:
c000e722:	53                   	push   ebx
c000e723:	83 ec 14             	sub    esp,0x14
c000e726:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e72a:	68 9f 74 02 c0       	push   0xc002749f
c000e72f:	e8 ff 3e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e73e:	0f 85 73 02 00 00    	jne    c000e9b7 <Computer::displayFeatures()+0x295>
c000e744:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	50                   	push   eax
c000e74d:	68 b2 74 02 c0       	push   0xc00274b2
c000e752:	e8 dc 3e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e761:	0f 85 8c 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2d1>
c000e767:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e76c:	83 ec 08             	sub    esp,0x8
c000e76f:	50                   	push   eax
c000e770:	68 c3 74 02 c0       	push   0xc00274c3
c000e775:	e8 b9 3e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e77a:	83 c4 10             	add    esp,0x10
c000e77d:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e784:	0f 85 5f 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2c7>
c000e78a:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e78f:	83 ec 08             	sub    esp,0x8
c000e792:	50                   	push   eax
c000e793:	68 d4 74 02 c0       	push   0xc00274d4
c000e798:	e8 96 3e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e79d:	83 c4 10             	add    esp,0x10
c000e7a0:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7a7:	0f 85 32 02 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2bd>
c000e7ad:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e7b2:	83 ec 08             	sub    esp,0x8
c000e7b5:	50                   	push   eax
c000e7b6:	68 e5 74 02 c0       	push   0xc00274e5
c000e7bb:	e8 73 3e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e7c0:	83 c4 10             	add    esp,0x10
c000e7c3:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7ca:	0f 85 05 02 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x2b3>
c000e7d0:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e7d5:	83 ec 08             	sub    esp,0x8
c000e7d8:	50                   	push   eax
c000e7d9:	68 f6 74 02 c0       	push   0xc00274f6
c000e7de:	e8 50 3e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e7e3:	83 c4 10             	add    esp,0x10
c000e7e6:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e7ed:	0f 85 d8 01 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x2a9>
c000e7f3:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e7f8:	83 ec 08             	sub    esp,0x8
c000e7fb:	50                   	push   eax
c000e7fc:	68 07 75 02 c0       	push   0xc0027507
c000e801:	e8 2d 3e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e810:	0f 85 ab 01 00 00    	jne    c000e9c1 <Computer::displayFeatures()+0x29f>
c000e816:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e81b:	83 ec 08             	sub    esp,0x8
c000e81e:	50                   	push   eax
c000e81f:	68 18 75 02 c0       	push   0xc0027518
c000e824:	e8 0a 3e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e833:	0f 88 1b 02 00 00    	js     c000ea54 <Computer::displayFeatures()+0x332>
c000e839:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e83e:	83 ec 08             	sub    esp,0x8
c000e841:	50                   	push   eax
c000e842:	68 29 75 02 c0       	push   0xc0027529
c000e847:	e8 e7 3d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e84c:	83 c4 10             	add    esp,0x10
c000e84f:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e856:	0f 85 a1 01 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2db>
c000e85c:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	50                   	push   eax
c000e865:	68 3a 75 02 c0       	push   0xc002753a
c000e86a:	e8 c4 3d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e86f:	83 c4 10             	add    esp,0x10
c000e872:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e879:	0f 85 cb 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x328>
c000e87f:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e884:	83 ec 08             	sub    esp,0x8
c000e887:	50                   	push   eax
c000e888:	68 4b 75 02 c0       	push   0xc002754b
c000e88d:	e8 a1 3d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e89c:	0f 85 9e 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x31e>
c000e8a2:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e8a7:	83 ec 08             	sub    esp,0x8
c000e8aa:	50                   	push   eax
c000e8ab:	68 5c 75 02 c0       	push   0xc002755c
c000e8b0:	e8 7e 3d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e8b5:	83 c4 10             	add    esp,0x10
c000e8b8:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8bf:	0f 85 71 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x314>
c000e8c5:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e8ca:	83 ec 08             	sub    esp,0x8
c000e8cd:	50                   	push   eax
c000e8ce:	68 6d 75 02 c0       	push   0xc002756d
c000e8d3:	e8 5b 3d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8e2:	0f 85 44 01 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x30a>
c000e8e8:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e8ed:	83 ec 08             	sub    esp,0x8
c000e8f0:	50                   	push   eax
c000e8f1:	68 7e 75 02 c0       	push   0xc002757e
c000e8f6:	e8 38 3d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e8fb:	83 c4 10             	add    esp,0x10
c000e8fe:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e905:	0f 85 17 01 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x300>
c000e90b:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e910:	83 ec 08             	sub    esp,0x8
c000e913:	50                   	push   eax
c000e914:	68 8f 75 02 c0       	push   0xc002758f
c000e919:	e8 15 3d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e91e:	83 c4 10             	add    esp,0x10
c000e921:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e928:	0f 85 ea 00 00 00    	jne    c000ea18 <Computer::displayFeatures()+0x2f6>
c000e92e:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e933:	83 ec 08             	sub    esp,0x8
c000e936:	50                   	push   eax
c000e937:	68 a0 75 02 c0       	push   0xc00275a0
c000e93c:	e8 f2 3c 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e94b:	0f 88 0d 01 00 00    	js     c000ea5e <Computer::displayFeatures()+0x33c>
c000e951:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e956:	83 ec 08             	sub    esp,0x8
c000e959:	50                   	push   eax
c000e95a:	68 b1 75 02 c0       	push   0xc00275b1
c000e95f:	e8 cf 3c 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e964:	83 c4 10             	add    esp,0x10
c000e967:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e96e:	0f 85 9a 00 00 00    	jne    c000ea0e <Computer::displayFeatures()+0x2ec>
c000e974:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e979:	83 ec 08             	sub    esp,0x8
c000e97c:	50                   	push   eax
c000e97d:	68 c2 75 02 c0       	push   0xc00275c2
c000e982:	e8 ac 3c 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e987:	83 c4 10             	add    esp,0x10
c000e98a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e991:	75 74                	jne    c000ea07 <Computer::displayFeatures()+0x2e5>
c000e993:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c000e998:	83 ec 08             	sub    esp,0x8
c000e99b:	50                   	push   eax
c000e99c:	68 d3 75 02 c0       	push   0xc00275d3
c000e9a1:	e8 8d 3c 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000e9a6:	c7 44 24 20 e2 8c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028ce2
c000e9ae:	83 c4 18             	add    esp,0x18
c000e9b1:	5b                   	pop    ebx
c000e9b2:	e9 7c 3c 00 00       	jmp    c0012633 <Dbg::kprintf(char const*, ...)>
c000e9b7:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000e9bc:	e9 88 fd ff ff       	jmp    c000e749 <Computer::displayFeatures()+0x27>
c000e9c1:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000e9c6:	e9 50 fe ff ff       	jmp    c000e81b <Computer::displayFeatures()+0xf9>
c000e9cb:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000e9d0:	e9 23 fe ff ff       	jmp    c000e7f8 <Computer::displayFeatures()+0xd6>
c000e9d5:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000e9da:	e9 f6 fd ff ff       	jmp    c000e7d5 <Computer::displayFeatures()+0xb3>
c000e9df:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000e9e4:	e9 c9 fd ff ff       	jmp    c000e7b2 <Computer::displayFeatures()+0x90>
c000e9e9:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000e9ee:	e9 9c fd ff ff       	jmp    c000e78f <Computer::displayFeatures()+0x6d>
c000e9f3:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000e9f8:	e9 6f fd ff ff       	jmp    c000e76c <Computer::displayFeatures()+0x4a>
c000e9fd:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea02:	e9 5a fe ff ff       	jmp    c000e861 <Computer::displayFeatures()+0x13f>
c000ea07:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea0c:	eb 8a                	jmp    c000e998 <Computer::displayFeatures()+0x276>
c000ea0e:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea13:	e9 61 ff ff ff       	jmp    c000e979 <Computer::displayFeatures()+0x257>
c000ea18:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea1d:	e9 11 ff ff ff       	jmp    c000e933 <Computer::displayFeatures()+0x211>
c000ea22:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea27:	e9 e4 fe ff ff       	jmp    c000e910 <Computer::displayFeatures()+0x1ee>
c000ea2c:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea31:	e9 b7 fe ff ff       	jmp    c000e8ed <Computer::displayFeatures()+0x1cb>
c000ea36:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea3b:	e9 8a fe ff ff       	jmp    c000e8ca <Computer::displayFeatures()+0x1a8>
c000ea40:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea45:	e9 5d fe ff ff       	jmp    c000e8a7 <Computer::displayFeatures()+0x185>
c000ea4a:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea4f:	e9 30 fe ff ff       	jmp    c000e884 <Computer::displayFeatures()+0x162>
c000ea54:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea59:	e9 e0 fd ff ff       	jmp    c000e83e <Computer::displayFeatures()+0x11c>
c000ea5e:	b8 98 74 02 c0       	mov    eax,0xc0027498
c000ea63:	e9 ee fe ff ff       	jmp    c000e956 <Computer::displayFeatures()+0x234>

c000ea68 <Computer::rdmsr(unsigned int)>:
c000ea68:	83 ec 0c             	sub    esp,0xc
c000ea6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea76:	74 0a                	je     c000ea82 <Computer::rdmsr(unsigned int)+0x1a>
c000ea78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea7c:	0f 32                	rdmsr  
c000ea7e:	83 c4 0c             	add    esp,0xc
c000ea81:	c3                   	ret    
c000ea82:	83 ec 0c             	sub    esp,0xc
c000ea85:	68 e4 75 02 c0       	push   0xc00275e4
c000ea8a:	e8 08 a6 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000ea8f:	83 c4 10             	add    esp,0x10
c000ea92:	eb e4                	jmp    c000ea78 <Computer::rdmsr(unsigned int)+0x10>

c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ea94:	57                   	push   edi
c000ea95:	56                   	push   esi
c000ea96:	52                   	push   edx
c000ea97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ea9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eaa3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eaaa:	74 0e                	je     c000eaba <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eaac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eab0:	89 f0                	mov    eax,esi
c000eab2:	89 fa                	mov    edx,edi
c000eab4:	0f 30                	wrmsr  
c000eab6:	58                   	pop    eax
c000eab7:	5e                   	pop    esi
c000eab8:	5f                   	pop    edi
c000eab9:	c3                   	ret    
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	68 ea 75 02 c0       	push   0xc00275ea
c000eac2:	e8 d0 a5 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	eb e0                	jmp    c000eaac <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eacc <Computer::nmiEnabled()>:
c000eacc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ead0:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ead6:	c3                   	ret    
c000ead7:	90                   	nop

c000ead8 <Computer::readCMOS(unsigned char)>:
c000ead8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eadc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eae3:	19 c0                	sbb    eax,eax
c000eae5:	83 e0 80             	and    eax,0xffffff80
c000eae8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eaec:	e6 70                	out    0x70,al
c000eaee:	e4 71                	in     al,0x71
c000eaf0:	c3                   	ret    
c000eaf1:	90                   	nop

c000eaf2 <Computer::enableNMI(bool)>:
c000eaf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eaf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eafa:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb00:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb08:	eb ce                	jmp    c000ead8 <Computer::readCMOS(unsigned char)>

c000eb0a <Computer::open(int, int, void*)>:
c000eb0a:	56                   	push   esi
c000eb0b:	53                   	push   ebx
c000eb0c:	83 ec 10             	sub    esp,0x10
c000eb0f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb13:	f6 05 e0 b0 02 c0 04 	test   BYTE PTR ds:0xc002b0e0,0x4
c000eb1a:	68 68 22 00 00       	push   0x2268
c000eb1f:	0f 94 05 80 a0 02 c0 	sete   BYTE PTR ds:0xc002a080
c000eb26:	e8 95 09 00 00       	call   c000f4c0 <malloc>
c000eb2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb2e:	89 c6                	mov    esi,eax
c000eb30:	e8 cb 89 00 00       	call   c0017500 <ACPI::ACPI()>
c000eb35:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb3b:	58                   	pop    eax
c000eb3c:	5a                   	pop    edx
c000eb3d:	56                   	push   esi
c000eb3e:	53                   	push   ebx
c000eb3f:	e8 de 4e 00 00       	call   c0013a22 <Device::addChild(Device*)>
c000eb44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb47:	e8 cc f9 ff ff       	call   c000e518 <Computer::detectFeatures()>
c000eb4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb4f:	e8 ce fb ff ff       	call   c000e722 <Computer::displayFeatures()>
c000eb54:	59                   	pop    ecx
c000eb55:	5e                   	pop    esi
c000eb56:	6a 01                	push   0x1
c000eb58:	53                   	push   ebx
c000eb59:	e8 94 ff ff ff       	call   c000eaf2 <Computer::enableNMI(bool)>
c000eb5e:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb65:	e8 56 09 00 00       	call   c000f4c0 <malloc>
c000eb6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb6d:	89 c6                	mov    esi,eax
c000eb6f:	e8 38 94 00 00       	call   c0017fac <CPU::CPU()>
c000eb74:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb7a:	58                   	pop    eax
c000eb7b:	5a                   	pop    edx
c000eb7c:	56                   	push   esi
c000eb7d:	53                   	push   ebx
c000eb7e:	e8 9f 4e 00 00       	call   c0013a22 <Device::addChild(Device*)>
c000eb83:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb89:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb8f:	6a 00                	push   0x0
c000eb91:	6a 00                	push   0x0
c000eb93:	50                   	push   eax
c000eb94:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eb97:	83 c4 20             	add    esp,0x20
c000eb9a:	e8 f5 53 00 00       	call   c0013f94 <setupFPU()>
c000eb9f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000eba5:	85 c0                	test   eax,eax
c000eba7:	74 1f                	je     c000ebc8 <Computer::open(int, int, void*)+0xbe>
c000eba9:	83 ec 08             	sub    esp,0x8
c000ebac:	50                   	push   eax
c000ebad:	53                   	push   ebx
c000ebae:	e8 6f 4e 00 00       	call   c0013a22 <Device::addChild(Device*)>
c000ebb3:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebb9:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebbb:	6a 00                	push   0x0
c000ebbd:	6a 00                	push   0x0
c000ebbf:	6a 00                	push   0x0
c000ebc1:	50                   	push   eax
c000ebc2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebc5:	83 c4 20             	add    esp,0x20
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	68 09 e5 00 c0       	push   0xc000e509
c000ebd0:	e8 39 d7 00 00       	call   c001c30e <setupMultitasking(void (*)())>
c000ebd5:	83 c4 14             	add    esp,0x14
c000ebd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebdd:	5b                   	pop    ebx
c000ebde:	5e                   	pop    esi
c000ebdf:	c3                   	ret    

c000ebe0 <Computer::disableNMI()>:
c000ebe0:	6a 00                	push   0x0
c000ebe2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebe6:	e8 07 ff ff ff       	call   c000eaf2 <Computer::enableNMI(bool)>
c000ebeb:	58                   	pop    eax
c000ebec:	5a                   	pop    edx
c000ebed:	c3                   	ret    

c000ebee <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ebee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebf9:	19 c0                	sbb    eax,eax
c000ebfb:	83 e0 80             	and    eax,0xffffff80
c000ebfe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec02:	e6 70                	out    0x70,al
c000ec04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec08:	e6 71                	out    0x71,al
c000ec0a:	c3                   	ret    
c000ec0b:	90                   	nop

c000ec0c <Computer::handleNMI()>:
c000ec0c:	56                   	push   esi
c000ec0d:	53                   	push   ebx
c000ec0e:	83 ec 10             	sub    esp,0x10
c000ec11:	e4 92                	in     al,0x92
c000ec13:	89 c6                	mov    esi,eax
c000ec15:	e4 61                	in     al,0x61
c000ec17:	68 f0 75 02 c0       	push   0xc00275f0
c000ec1c:	88 c3                	mov    bl,al
c000ec1e:	e8 10 3a 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000ec23:	83 c4 10             	add    esp,0x10
c000ec26:	83 e6 10             	and    esi,0x10
c000ec29:	75 0d                	jne    c000ec38 <Computer::handleNMI()+0x2c>
c000ec2b:	f6 c3 40             	test   bl,0x40
c000ec2e:	75 1d                	jne    c000ec4d <Computer::handleNMI()+0x41>
c000ec30:	84 db                	test   bl,bl
c000ec32:	78 2d                	js     c000ec61 <Computer::handleNMI()+0x55>
c000ec34:	58                   	pop    eax
c000ec35:	5b                   	pop    ebx
c000ec36:	5e                   	pop    esi
c000ec37:	c3                   	ret    
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	68 01 76 02 c0       	push   0xc0027601
c000ec40:	e8 52 a4 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	f6 c3 40             	test   bl,0x40
c000ec4b:	74 e3                	je     c000ec30 <Computer::handleNMI()+0x24>
c000ec4d:	83 ec 0c             	sub    esp,0xc
c000ec50:	68 0e 76 02 c0       	push   0xc002760e
c000ec55:	e8 3d a4 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000ec5a:	83 c4 10             	add    esp,0x10
c000ec5d:	84 db                	test   bl,bl
c000ec5f:	79 d3                	jns    c000ec34 <Computer::handleNMI()+0x28>
c000ec61:	c7 44 24 10 18 76 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027618
c000ec69:	5a                   	pop    edx
c000ec6a:	5b                   	pop    ebx
c000ec6b:	5e                   	pop    esi
c000ec6c:	e9 26 a4 00 00       	jmp    c0019097 <Krnl::panic(char const*)>
c000ec71:	90                   	nop

c000ec72 <Computer::setDiskActivityLight(int, bool)>:
c000ec72:	56                   	push   esi
c000ec73:	53                   	push   ebx
c000ec74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec78:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec7d:	77 1b                	ja     c000ec9a <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec7f:	e4 92                	in     al,0x92
c000ec81:	bb 40 00 00 00       	mov    ebx,0x40
c000ec86:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec8a:	89 da                	mov    edx,ebx
c000ec8c:	d3 e2                	shl    edx,cl
c000ec8e:	89 f1                	mov    ecx,esi
c000ec90:	f7 d2                	not    edx
c000ec92:	d3 e3                	shl    ebx,cl
c000ec94:	21 d0                	and    eax,edx
c000ec96:	09 d8                	or     eax,ebx
c000ec98:	e6 92                	out    0x92,al
c000ec9a:	5b                   	pop    ebx
c000ec9b:	5e                   	pop    esi
c000ec9c:	c3                   	ret    
c000ec9d:	90                   	nop

c000ec9e <GDTEntry::setBase(unsigned int)>:
c000ec9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eca2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eca6:	89 c1                	mov    ecx,eax
c000eca8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecac:	c1 e9 10             	shr    ecx,0x10
c000ecaf:	c1 e8 18             	shr    eax,0x18
c000ecb2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecb5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecb8:	c3                   	ret    
c000ecb9:	90                   	nop

c000ecba <GDTEntry::setLimit(unsigned int)>:
c000ecba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecc5:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecc8:	83 e2 f0             	and    edx,0xfffffff0
c000eccb:	c1 e8 10             	shr    eax,0x10
c000ecce:	83 e0 0f             	and    eax,0xf
c000ecd1:	09 d0                	or     eax,edx
c000ecd3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecd6:	c3                   	ret    
c000ecd7:	90                   	nop

c000ecd8 <GDT::GDT()>:
c000ecd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecec:	90                   	nop
c000eced:	c3                   	ret    

c000ecee <GDT::addEntry(GDTEntry)>:
c000ecee:	53                   	push   ebx
c000ecef:	83 ec 0c             	sub    esp,0xc
c000ecf2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ecf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ecf8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ecff:	52                   	push   edx
c000ed00:	50                   	push   eax
c000ed01:	68 54 76 02 c0       	push   0xc0027654
c000ed06:	e8 28 39 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000ed0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed11:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed15:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed19:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed1d:	8d 50 01             	lea    edx,[eax+0x1]
c000ed20:	c1 e0 03             	shl    eax,0x3
c000ed23:	89 13                	mov    DWORD PTR [ebx],edx
c000ed25:	83 c4 18             	add    esp,0x18
c000ed28:	5b                   	pop    ebx
c000ed29:	c3                   	ret    

c000ed2a <GDT::getNumberOfEntries()>:
c000ed2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed30:	c3                   	ret    
c000ed31:	90                   	nop

c000ed32 <GDT::flush()>:
c000ed32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed36:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed38:	83 c0 04             	add    eax,0x4
c000ed3b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed42:	a3 d2 b0 02 c0       	mov    ds:0xc002b0d2,eax
c000ed47:	66 89 15 d0 b0 02 c0 	mov    WORD PTR ds:0xc002b0d0,dx
c000ed4e:	e9 aa 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed53:	90                   	nop

c000ed54 <GDT::setup()>:
c000ed54:	55                   	push   ebp
c000ed55:	57                   	push   edi
c000ed56:	56                   	push   esi
c000ed57:	53                   	push   ebx
c000ed58:	83 ec 3c             	sub    esp,0x3c
c000ed5b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed5f:	6a 00                	push   0x0
c000ed61:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed65:	53                   	push   ebx
c000ed66:	e8 33 ff ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000ed6b:	6a 00                	push   0x0
c000ed6d:	53                   	push   ebx
c000ed6e:	e8 47 ff ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000ed73:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed7b:	6a 00                	push   0x0
c000ed7d:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed81:	53                   	push   ebx
c000ed82:	e8 17 ff ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000ed87:	68 ff ff ff 00       	push   0xffffff
c000ed8c:	53                   	push   ebx
c000ed8d:	e8 28 ff ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000ed92:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed96:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ed9b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eda0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eda4:	83 c4 20             	add    esp,0x20
c000eda7:	6a 00                	push   0x0
c000eda9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edad:	53                   	push   ebx
c000edae:	e8 eb fe ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000edb3:	68 ff ff ff 00       	push   0xffffff
c000edb8:	53                   	push   ebx
c000edb9:	e8 fc fe ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000edbe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edc2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edc6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edca:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000edce:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edd2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edd7:	0d 00 92 c0 00       	or     eax,0xc09200
c000eddc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ede0:	89 d8                	mov    eax,ebx
c000ede2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ede6:	80 cc 60             	or     ah,0x60
c000ede9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eded:	83 c4 0c             	add    esp,0xc
c000edf0:	89 f8                	mov    eax,edi
c000edf2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edf6:	80 cc 60             	or     ah,0x60
c000edf9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edfd:	89 c7                	mov    edi,eax
c000edff:	55                   	push   ebp
c000ee00:	e8 e9 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee05:	83 c4 0c             	add    esp,0xc
c000ee08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee10:	55                   	push   ebp
c000ee11:	e8 d8 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee16:	83 c4 0c             	add    esp,0xc
c000ee19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee21:	55                   	push   ebp
c000ee22:	e8 c7 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee27:	83 c4 0c             	add    esp,0xc
c000ee2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee32:	53                   	push   ebx
c000ee33:	51                   	push   ecx
c000ee34:	55                   	push   ebp
c000ee35:	e8 b4 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee3a:	83 c4 0c             	add    esp,0xc
c000ee3d:	57                   	push   edi
c000ee3e:	56                   	push   esi
c000ee3f:	55                   	push   ebp
c000ee40:	e8 a9 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee48:	e8 e5 fe ff ff       	call   c000ed32 <GDT::flush()>
c000ee4d:	83 c4 4c             	add    esp,0x4c
c000ee50:	5b                   	pop    ebx
c000ee51:	5e                   	pop    esi
c000ee52:	5f                   	pop    edi
c000ee53:	5d                   	pop    ebp
c000ee54:	c3                   	ret    

c000ee55 <idleFunction(void*)>:
c000ee55:	53                   	push   ebx
c000ee56:	83 ec 08             	sub    esp,0x8
c000ee59:	e8 81 d2 00 00       	call   c001c0df <unlockScheduler()>
c000ee5e:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c000ee63:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee69:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee70:	74 3c                	je     c000eeae <idleFunction(void*)+0x59>
c000ee72:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee79:	74 33                	je     c000eeae <idleFunction(void*)+0x59>
c000ee7b:	31 db                	xor    ebx,ebx
c000ee7d:	52                   	push   edx
c000ee7e:	52                   	push   edx
c000ee7f:	68 e1 00 00 00       	push   0xe1
c000ee84:	50                   	push   eax
c000ee85:	e8 de fb ff ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c000ee8a:	53                   	push   ebx
c000ee8b:	83 e0 02             	and    eax,0x2
c000ee8e:	50                   	push   eax
c000ee8f:	68 e1 00 00 00       	push   0xe1
c000ee94:	ff 35 c8 b0 02 c0    	push   DWORD PTR ds:0xc002b0c8
c000ee9a:	e8 f5 fb ff ff       	call   c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ee9f:	83 c4 20             	add    esp,0x20
c000eea2:	e8 8d 13 ff ff       	call   c0000234 <doTPAUSE>
c000eea7:	e8 84 6d 01 00       	call   c0025c30 <idleCommon()>
c000eeac:	eb f4                	jmp    c000eea2 <idleFunction(void*)+0x4d>
c000eeae:	fb                   	sti    
c000eeaf:	f4                   	hlt    
c000eeb0:	e8 7b 6d 01 00       	call   c0025c30 <idleCommon()>
c000eeb5:	eb f7                	jmp    c000eeae <idleFunction(void*)+0x59>
c000eeb7:	90                   	nop

c000eeb8 <IDTEntry::IDTEntry(bool)>:
c000eeb8:	83 ec 04             	sub    esp,0x4
c000eebb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eebf:	88 04 24             	mov    BYTE PTR [esp],al
c000eec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eec6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eed4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eedb:	83 e2 f0             	and    edx,0xfffffff0
c000eede:	83 ca 0e             	or     edx,0xe
c000eee1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeeb:	83 e2 ef             	and    edx,0xffffffef
c000eeee:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eef5:	74 04                	je     c000eefb <IDTEntry::IDTEntry(bool)+0x43>
c000eef7:	b2 03                	mov    dl,0x3
c000eef9:	eb 02                	jmp    c000eefd <IDTEntry::IDTEntry(bool)+0x45>
c000eefb:	b2 00                	mov    dl,0x0
c000eefd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef01:	83 e2 03             	and    edx,0x3
c000ef04:	88 d1                	mov    cl,dl
c000ef06:	c1 e1 05             	shl    ecx,0x5
c000ef09:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef0c:	83 e2 9f             	and    edx,0xffffff9f
c000ef0f:	09 ca                	or     edx,ecx
c000ef11:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef18:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef1b:	83 ca 80             	or     edx,0xffffff80
c000ef1e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef21:	90                   	nop
c000ef22:	83 c4 04             	add    esp,0x4
c000ef25:	c3                   	ret    

c000ef26 <IDTEntry::setOffset(unsigned int)>:
c000ef26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef31:	c1 e8 10             	shr    eax,0x10
c000ef34:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef38:	c3                   	ret    
c000ef39:	90                   	nop

c000ef3a <IDT::IDT()>:
c000ef3a:	90                   	nop
c000ef3b:	c3                   	ret    

c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef40:	83 c0 30             	add    eax,0x30
c000ef43:	c3                   	ret    

c000ef44 <IDT::addEntry(IDTEntry, int)>:
c000ef44:	53                   	push   ebx
c000ef45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef55:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef58:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef5c:	5b                   	pop    ebx
c000ef5d:	c3                   	ret    

c000ef5e <IDT::addEntry(int, void (*)(), bool)>:
c000ef5e:	53                   	push   ebx
c000ef5f:	83 ec 10             	sub    esp,0x10
c000ef62:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef67:	50                   	push   eax
c000ef68:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef6c:	53                   	push   ebx
c000ef6d:	e8 46 ff ff ff       	call   c000eeb8 <IDTEntry::IDTEntry(bool)>
c000ef72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef76:	53                   	push   ebx
c000ef77:	e8 aa ff ff ff       	call   c000ef26 <IDTEntry::setOffset(unsigned int)>
c000ef7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef8c:	e8 b3 ff ff ff       	call   c000ef44 <IDT::addEntry(IDTEntry, int)>
c000ef91:	83 c4 30             	add    esp,0x30
c000ef94:	5b                   	pop    ebx
c000ef95:	c3                   	ret    

c000ef96 <IDT::flush()>:
c000ef96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef9a:	66 c7 05 d8 b0 02 c0 ff 07 	mov    WORD PTR ds:0xc002b0d8,0x7ff
c000efa3:	a3 da b0 02 c0       	mov    ds:0xc002b0da,eax
c000efa8:	0f 01 1d d8 b0 02 c0 	lidtd  ds:0xc002b0d8
c000efaf:	c3                   	ret    

c000efb0 <IDT::setup()>:
c000efb0:	57                   	push   edi
c000efb1:	56                   	push   esi
c000efb2:	53                   	push   ebx
c000efb3:	83 ec 10             	sub    esp,0x10
c000efb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efba:	6a 00                	push   0x0
c000efbc:	68 1d 04 00 c0       	push   0xc000041d
c000efc1:	6a 00                	push   0x0
c000efc3:	53                   	push   ebx
c000efc4:	e8 95 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efc9:	6a 00                	push   0x0
c000efcb:	68 2d 04 00 c0       	push   0xc000042d
c000efd0:	6a 01                	push   0x1
c000efd2:	53                   	push   ebx
c000efd3:	e8 86 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efd8:	83 c4 20             	add    esp,0x20
c000efdb:	6a 00                	push   0x0
c000efdd:	68 37 04 00 c0       	push   0xc0000437
c000efe2:	6a 02                	push   0x2
c000efe4:	53                   	push   ebx
c000efe5:	e8 74 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efea:	6a 00                	push   0x0
c000efec:	68 41 04 00 c0       	push   0xc0000441
c000eff1:	6a 03                	push   0x3
c000eff3:	53                   	push   ebx
c000eff4:	e8 65 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000eff9:	83 c4 20             	add    esp,0x20
c000effc:	6a 00                	push   0x0
c000effe:	68 4b 04 00 c0       	push   0xc000044b
c000f003:	6a 04                	push   0x4
c000f005:	53                   	push   ebx
c000f006:	e8 53 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f00b:	6a 00                	push   0x0
c000f00d:	68 55 04 00 c0       	push   0xc0000455
c000f012:	6a 05                	push   0x5
c000f014:	53                   	push   ebx
c000f015:	e8 44 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f01a:	83 c4 20             	add    esp,0x20
c000f01d:	6a 00                	push   0x0
c000f01f:	68 5f 04 00 c0       	push   0xc000045f
c000f024:	6a 06                	push   0x6
c000f026:	53                   	push   ebx
c000f027:	e8 32 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f02c:	6a 00                	push   0x0
c000f02e:	68 69 04 00 c0       	push   0xc0000469
c000f033:	6a 07                	push   0x7
c000f035:	53                   	push   ebx
c000f036:	e8 23 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f03b:	83 c4 20             	add    esp,0x20
c000f03e:	6a 00                	push   0x0
c000f040:	68 73 04 00 c0       	push   0xc0000473
c000f045:	6a 08                	push   0x8
c000f047:	53                   	push   ebx
c000f048:	e8 11 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f04d:	6a 00                	push   0x0
c000f04f:	68 7b 04 00 c0       	push   0xc000047b
c000f054:	6a 09                	push   0x9
c000f056:	53                   	push   ebx
c000f057:	e8 02 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f05c:	83 c4 20             	add    esp,0x20
c000f05f:	6a 00                	push   0x0
c000f061:	68 85 04 00 c0       	push   0xc0000485
c000f066:	6a 0a                	push   0xa
c000f068:	53                   	push   ebx
c000f069:	e8 f0 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f06e:	6a 00                	push   0x0
c000f070:	68 8d 04 00 c0       	push   0xc000048d
c000f075:	6a 0b                	push   0xb
c000f077:	53                   	push   ebx
c000f078:	e8 e1 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f07d:	83 c4 20             	add    esp,0x20
c000f080:	6a 00                	push   0x0
c000f082:	68 95 04 00 c0       	push   0xc0000495
c000f087:	6a 0c                	push   0xc
c000f089:	53                   	push   ebx
c000f08a:	e8 cf fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f08f:	6a 00                	push   0x0
c000f091:	68 9d 04 00 c0       	push   0xc000049d
c000f096:	6a 0d                	push   0xd
c000f098:	53                   	push   ebx
c000f099:	e8 c0 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f09e:	83 c4 20             	add    esp,0x20
c000f0a1:	6a 00                	push   0x0
c000f0a3:	68 a5 04 00 c0       	push   0xc00004a5
c000f0a8:	6a 0e                	push   0xe
c000f0aa:	53                   	push   ebx
c000f0ab:	e8 ae fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0b0:	6a 00                	push   0x0
c000f0b2:	68 ad 04 00 c0       	push   0xc00004ad
c000f0b7:	6a 0f                	push   0xf
c000f0b9:	53                   	push   ebx
c000f0ba:	e8 9f fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0bf:	83 c4 20             	add    esp,0x20
c000f0c2:	6a 00                	push   0x0
c000f0c4:	68 b7 04 00 c0       	push   0xc00004b7
c000f0c9:	6a 10                	push   0x10
c000f0cb:	53                   	push   ebx
c000f0cc:	e8 8d fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0d1:	6a 00                	push   0x0
c000f0d3:	68 c1 04 00 c0       	push   0xc00004c1
c000f0d8:	6a 11                	push   0x11
c000f0da:	53                   	push   ebx
c000f0db:	e8 7e fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0e0:	83 c4 20             	add    esp,0x20
c000f0e3:	6a 00                	push   0x0
c000f0e5:	68 cb 04 00 c0       	push   0xc00004cb
c000f0ea:	6a 12                	push   0x12
c000f0ec:	53                   	push   ebx
c000f0ed:	e8 6c fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0f2:	6a 01                	push   0x1
c000f0f4:	68 65 05 00 c0       	push   0xc0000565
c000f0f9:	6a 60                	push   0x60
c000f0fb:	53                   	push   ebx
c000f0fc:	e8 5d fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f101:	83 c4 20             	add    esp,0x20
c000f104:	6a 00                	push   0x0
c000f106:	68 6c 05 00 c0       	push   0xc000056c
c000f10b:	6a 20                	push   0x20
c000f10d:	53                   	push   ebx
c000f10e:	e8 4b fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f113:	6a 00                	push   0x0
c000f115:	68 57 05 00 c0       	push   0xc0000557
c000f11a:	6a 21                	push   0x21
c000f11c:	53                   	push   ebx
c000f11d:	e8 3c fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f122:	83 c4 20             	add    esp,0x20
c000f125:	6a 00                	push   0x0
c000f127:	68 5e 05 00 c0       	push   0xc000055e
c000f12c:	6a 22                	push   0x22
c000f12e:	53                   	push   ebx
c000f12f:	e8 2a fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f134:	6a 00                	push   0x0
c000f136:	68 d5 04 00 c0       	push   0xc00004d5
c000f13b:	6a 23                	push   0x23
c000f13d:	53                   	push   ebx
c000f13e:	e8 1b fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f143:	83 c4 20             	add    esp,0x20
c000f146:	6a 00                	push   0x0
c000f148:	68 df 04 00 c0       	push   0xc00004df
c000f14d:	6a 24                	push   0x24
c000f14f:	53                   	push   ebx
c000f150:	e8 09 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f155:	6a 00                	push   0x0
c000f157:	68 e9 04 00 c0       	push   0xc00004e9
c000f15c:	6a 25                	push   0x25
c000f15e:	53                   	push   ebx
c000f15f:	e8 fa fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f164:	83 c4 20             	add    esp,0x20
c000f167:	6a 00                	push   0x0
c000f169:	68 f3 04 00 c0       	push   0xc00004f3
c000f16e:	6a 26                	push   0x26
c000f170:	53                   	push   ebx
c000f171:	e8 e8 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f176:	6a 00                	push   0x0
c000f178:	68 fd 04 00 c0       	push   0xc00004fd
c000f17d:	6a 27                	push   0x27
c000f17f:	53                   	push   ebx
c000f180:	e8 d9 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f185:	83 c4 20             	add    esp,0x20
c000f188:	6a 00                	push   0x0
c000f18a:	68 07 05 00 c0       	push   0xc0000507
c000f18f:	6a 28                	push   0x28
c000f191:	53                   	push   ebx
c000f192:	e8 c7 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f197:	6a 00                	push   0x0
c000f199:	68 11 05 00 c0       	push   0xc0000511
c000f19e:	6a 29                	push   0x29
c000f1a0:	53                   	push   ebx
c000f1a1:	e8 b8 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1a6:	83 c4 20             	add    esp,0x20
c000f1a9:	6a 00                	push   0x0
c000f1ab:	68 1b 05 00 c0       	push   0xc000051b
c000f1b0:	6a 2a                	push   0x2a
c000f1b2:	53                   	push   ebx
c000f1b3:	e8 a6 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1b8:	6a 00                	push   0x0
c000f1ba:	68 25 05 00 c0       	push   0xc0000525
c000f1bf:	6a 2b                	push   0x2b
c000f1c1:	53                   	push   ebx
c000f1c2:	e8 97 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1c7:	83 c4 20             	add    esp,0x20
c000f1ca:	6a 00                	push   0x0
c000f1cc:	68 2f 05 00 c0       	push   0xc000052f
c000f1d1:	6a 2c                	push   0x2c
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 85 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1d9:	6a 00                	push   0x0
c000f1db:	68 39 05 00 c0       	push   0xc0000539
c000f1e0:	6a 2d                	push   0x2d
c000f1e2:	53                   	push   ebx
c000f1e3:	e8 76 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1e8:	83 c4 20             	add    esp,0x20
c000f1eb:	6a 00                	push   0x0
c000f1ed:	68 43 05 00 c0       	push   0xc0000543
c000f1f2:	6a 2e                	push   0x2e
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 64 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1fa:	6a 00                	push   0x0
c000f1fc:	68 4d 05 00 c0       	push   0xc000054d
c000f201:	6a 2f                	push   0x2f
c000f203:	53                   	push   ebx
c000f204:	e8 55 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f209:	83 c4 20             	add    esp,0x20
c000f20c:	6a 00                	push   0x0
c000f20e:	68 92 05 00 c0       	push   0xc0000592
c000f213:	6a 30                	push   0x30
c000f215:	53                   	push   ebx
c000f216:	e8 43 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f21b:	6a 00                	push   0x0
c000f21d:	68 9c 05 00 c0       	push   0xc000059c
c000f222:	6a 31                	push   0x31
c000f224:	53                   	push   ebx
c000f225:	e8 34 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f22a:	83 c4 20             	add    esp,0x20
c000f22d:	6a 00                	push   0x0
c000f22f:	68 a6 05 00 c0       	push   0xc00005a6
c000f234:	6a 32                	push   0x32
c000f236:	53                   	push   ebx
c000f237:	e8 22 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f23c:	6a 00                	push   0x0
c000f23e:	68 b0 05 00 c0       	push   0xc00005b0
c000f243:	6a 33                	push   0x33
c000f245:	53                   	push   ebx
c000f246:	e8 13 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f24b:	83 c4 20             	add    esp,0x20
c000f24e:	6a 00                	push   0x0
c000f250:	68 ba 05 00 c0       	push   0xc00005ba
c000f255:	6a 34                	push   0x34
c000f257:	53                   	push   ebx
c000f258:	e8 01 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f25d:	6a 00                	push   0x0
c000f25f:	68 c4 05 00 c0       	push   0xc00005c4
c000f264:	6a 35                	push   0x35
c000f266:	53                   	push   ebx
c000f267:	e8 f2 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f26c:	83 c4 20             	add    esp,0x20
c000f26f:	6a 00                	push   0x0
c000f271:	68 ce 05 00 c0       	push   0xc00005ce
c000f276:	6a 36                	push   0x36
c000f278:	53                   	push   ebx
c000f279:	e8 e0 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f27e:	6a 00                	push   0x0
c000f280:	68 d8 05 00 c0       	push   0xc00005d8
c000f285:	6a 37                	push   0x37
c000f287:	53                   	push   ebx
c000f288:	e8 d1 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f28d:	83 c4 20             	add    esp,0x20
c000f290:	e8 3e 25 00 00       	call   c00117d3 <Virt::getAKernelVAS()>
c000f295:	52                   	push   edx
c000f296:	6a 03                	push   0x3
c000f298:	6a 02                	push   0x2
c000f29a:	50                   	push   eax
c000f29b:	e8 6e 2b 00 00       	call   c0011e0e <VAS::allocatePages(int, int)>
c000f2a0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2a7:	89 c6                	mov    esi,eax
c000f2a9:	e8 12 02 00 00       	call   c000f4c0 <malloc>
c000f2ae:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2b7:	89 c7                	mov    edi,eax
c000f2b9:	e8 b6 1c 00 00       	call   c0010f74 <TSS::TSS()>
c000f2be:	83 c4 0c             	add    esp,0xc
c000f2c1:	68 73 04 00 c0       	push   0xc0000473
c000f2c6:	56                   	push   esi
c000f2c7:	57                   	push   edi
c000f2c8:	e8 e7 1c 00 00       	call   c0010fb4 <TSS::setup(unsigned long, unsigned long)>
c000f2cd:	59                   	pop    ecx
c000f2ce:	89 c6                	mov    esi,eax
c000f2d0:	5f                   	pop    edi
c000f2d1:	6a 00                	push   0x0
c000f2d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2d7:	50                   	push   eax
c000f2d8:	e8 db fb ff ff       	call   c000eeb8 <IDTEntry::IDTEntry(bool)>
c000f2dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2e1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2e6:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2ed:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f2f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2f7:	80 ce 05             	or     dh,0x5
c000f2fa:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f2fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f301:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f305:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f308:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f30b:	e8 86 fc ff ff       	call   c000ef96 <IDT::flush()>
c000f310:	83 c4 20             	add    esp,0x20
c000f313:	5b                   	pop    ebx
c000f314:	5e                   	pop    esi
c000f315:	5f                   	pop    edi
c000f316:	c3                   	ret    

c000f317 <sbrk>:
c000f317:	55                   	push   ebp
c000f318:	57                   	push   edi
c000f319:	56                   	push   esi
c000f31a:	53                   	push   ebx
c000f31b:	83 ec 1c             	sub    esp,0x1c
c000f31e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f322:	85 c0                	test   eax,eax
c000f324:	74 3e                	je     c000f364 <sbrk+0x4d>
c000f326:	78 43                	js     c000f36b <sbrk+0x54>
c000f328:	8b 15 c8 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0c8
c000f32e:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f334:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f33a:	83 e2 01             	and    edx,0x1
c000f33d:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f341:	8b 0d 6c a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a06c
c000f347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f34b:	05 ff 0f 00 00       	add    eax,0xfff
c000f350:	89 c2                	mov    edx,eax
c000f352:	78 2f                	js     c000f383 <sbrk+0x6c>
c000f354:	c1 fa 0c             	sar    edx,0xc
c000f357:	89 d7                	mov    edi,edx
c000f359:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f35d:	be 00 00 00 00       	mov    esi,0x0
c000f362:	eb 36                	jmp    c000f39a <sbrk+0x83>
c000f364:	a1 6c a0 02 c0       	mov    eax,ds:0xc002a06c
c000f369:	eb 74                	jmp    c000f3df <sbrk+0xc8>
c000f36b:	83 ec 08             	sub    esp,0x8
c000f36e:	50                   	push   eax
c000f36f:	68 70 76 02 c0       	push   0xc0027670
c000f374:	e8 ba 32 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000f379:	83 c4 10             	add    esp,0x10
c000f37c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f381:	eb 5c                	jmp    c000f3df <sbrk+0xc8>
c000f383:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f389:	eb c9                	jmp    c000f354 <sbrk+0x3d>
c000f38b:	81 05 6c a0 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002a06c,0x1000
c000f395:	46                   	inc    esi
c000f396:	39 f7                	cmp    edi,esi
c000f398:	74 34                	je     c000f3ce <sbrk+0xb7>
c000f39a:	e8 34 24 00 00       	call   c00117d3 <Virt::getAKernelVAS()>
c000f39f:	89 c3                	mov    ebx,eax
c000f3a1:	8b 2d 6c a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a06c
c000f3a7:	e8 be 06 00 00       	call   c000fa6a <Phys::allocatePage()>
c000f3ac:	68 01 04 00 00       	push   0x401
c000f3b1:	55                   	push   ebp
c000f3b2:	50                   	push   eax
c000f3b3:	53                   	push   ebx
c000f3b4:	e8 55 29 00 00       	call   c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3b9:	83 c4 10             	add    esp,0x10
c000f3bc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3c1:	74 c8                	je     c000f38b <sbrk+0x74>
c000f3c3:	8b 1d 6c a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a06c
c000f3c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3cc:	eb bd                	jmp    c000f38b <sbrk+0x74>
c000f3ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d3:	75 12                	jne    c000f3e7 <sbrk+0xd0>
c000f3d5:	0f 20 d8             	mov    eax,cr3
c000f3d8:	0f 22 d8             	mov    cr3,eax
c000f3db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3df:	83 c4 1c             	add    esp,0x1c
c000f3e2:	5b                   	pop    ebx
c000f3e3:	5e                   	pop    esi
c000f3e4:	5f                   	pop    edi
c000f3e5:	5d                   	pop    ebp
c000f3e6:	c3                   	ret    
c000f3e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3eb:	89 cb                	mov    ebx,ecx
c000f3ed:	c1 eb 0a             	shr    ebx,0xa
c000f3f0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f3f6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f3fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f400:	c1 e0 0c             	shl    eax,0xc
c000f403:	01 c8                	add    eax,ecx
c000f405:	c1 e8 0a             	shr    eax,0xa
c000f408:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f40d:	2d 00 00 40 00       	sub    eax,0x400000
c000f412:	39 c3                	cmp    ebx,eax
c000f414:	77 c5                	ja     c000f3db <sbrk+0xc4>
c000f416:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f419:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f41f:	39 d8                	cmp    eax,ebx
c000f421:	73 f3                	jae    c000f416 <sbrk+0xff>
c000f423:	eb b6                	jmp    c000f3db <sbrk+0xc4>

c000f425 <mmap>:
c000f425:	83 ec 18             	sub    esp,0x18
c000f428:	68 a0 76 02 c0       	push   0xc00276a0
c000f42d:	e8 65 9c 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000f432:	b8 00 00 00 00       	mov    eax,0x0
c000f437:	83 c4 1c             	add    esp,0x1c
c000f43a:	c3                   	ret    

c000f43b <munmap>:
c000f43b:	83 ec 18             	sub    esp,0x18
c000f43e:	68 a5 76 02 c0       	push   0xc00276a5
c000f443:	e8 4f 9c 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000f448:	b8 00 00 00 00       	mov    eax,0x0
c000f44d:	83 c4 1c             	add    esp,0x1c
c000f450:	c3                   	ret    

c000f451 <liballoc_lock()>:
c000f451:	83 ec 0c             	sub    esp,0xc
c000f454:	e8 84 cc 00 00       	call   c001c0dd <lockScheduler()>
c000f459:	b8 00 00 00 00       	mov    eax,0x0
c000f45e:	83 c4 0c             	add    esp,0xc
c000f461:	c3                   	ret    

c000f462 <liballoc_unlock()>:
c000f462:	83 ec 0c             	sub    esp,0xc
c000f465:	e8 75 cc 00 00       	call   c001c0df <unlockScheduler()>
c000f46a:	b8 00 00 00 00       	mov    eax,0x0
c000f46f:	83 c4 0c             	add    esp,0xc
c000f472:	c3                   	ret    

c000f473 <liballoc_alloc(int)>:
c000f473:	83 ec 0c             	sub    esp,0xc
c000f476:	e8 58 23 00 00       	call   c00117d3 <Virt::getAKernelVAS()>
c000f47b:	83 ec 04             	sub    esp,0x4
c000f47e:	6a 01                	push   0x1
c000f480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f484:	50                   	push   eax
c000f485:	e8 84 29 00 00       	call   c0011e0e <VAS::allocatePages(int, int)>
c000f48a:	83 c4 1c             	add    esp,0x1c
c000f48d:	c3                   	ret    

c000f48e <liballoc_free(void*, int)>:
c000f48e:	83 ec 0c             	sub    esp,0xc
c000f491:	e8 3d 23 00 00       	call   c00117d3 <Virt::getAKernelVAS()>
c000f496:	83 ec 08             	sub    esp,0x8
c000f499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f49d:	50                   	push   eax
c000f49e:	e8 27 26 00 00       	call   c0011aca <VAS::freeAllocatedPages(unsigned long)>
c000f4a3:	b8 00 00 00 00       	mov    eax,0x0
c000f4a8:	83 c4 1c             	add    esp,0x1c
c000f4ab:	c3                   	ret    

c000f4ac <realloc>:
c000f4ac:	83 ec 14             	sub    esp,0x14
c000f4af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b7:	e8 38 1f ff ff       	call   c00013f4 <dlrealloc>
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <malloc>:
c000f4c0:	83 ec 18             	sub    esp,0x18
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	e8 eb 19 ff ff       	call   c0000eb7 <dlmalloc>
c000f4cc:	83 c4 1c             	add    esp,0x1c
c000f4cf:	c3                   	ret    

c000f4d0 <free>:
c000f4d0:	83 ec 18             	sub    esp,0x18
c000f4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d7:	e8 80 16 ff ff       	call   c0000b5c <dlfree>
c000f4dc:	83 c4 1c             	add    esp,0x1c
c000f4df:	c3                   	ret    

c000f4e0 <rfree>:
c000f4e0:	83 ec 18             	sub    esp,0x18
c000f4e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e7:	e8 70 16 ff ff       	call   c0000b5c <dlfree>
c000f4ec:	83 c4 1c             	add    esp,0x1c
c000f4ef:	c3                   	ret    

c000f4f0 <calloc>:
c000f4f0:	56                   	push   esi
c000f4f1:	53                   	push   ebx
c000f4f2:	83 ec 10             	sub    esp,0x10
c000f4f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f4f9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f4fe:	53                   	push   ebx
c000f4ff:	e8 bc ff ff ff       	call   c000f4c0 <malloc>
c000f504:	89 c6                	mov    esi,eax
c000f506:	83 c4 0c             	add    esp,0xc
c000f509:	53                   	push   ebx
c000f50a:	6a 00                	push   0x0
c000f50c:	50                   	push   eax
c000f50d:	e8 69 11 ff ff       	call   c000067b <memset>
c000f512:	89 f0                	mov    eax,esi
c000f514:	83 c4 14             	add    esp,0x14
c000f517:	5b                   	pop    ebx
c000f518:	5e                   	pop    esi
c000f519:	c3                   	ret    

c000f51a <hwTextMode_loadInData(VgaText*)>:
c000f51a:	57                   	push   edi
c000f51b:	56                   	push   esi
c000f51c:	53                   	push   ebx
c000f51d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f521:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f527:	85 c0                	test   eax,eax
c000f529:	7e 30                	jle    c000f55b <hwTextMode_loadInData(VgaText*)+0x41>
c000f52b:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f52e:	31 f6                	xor    esi,esi
c000f530:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f533:	31 c0                	xor    eax,eax
c000f535:	c1 e1 05             	shl    ecx,0x5
c000f538:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f53e:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f542:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f546:	40                   	inc    eax
c000f547:	83 f8 50             	cmp    eax,0x50
c000f54a:	75 f2                	jne    c000f53e <hwTextMode_loadInData(VgaText*)+0x24>
c000f54c:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f552:	46                   	inc    esi
c000f553:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f559:	7f d5                	jg     c000f530 <hwTextMode_loadInData(VgaText*)+0x16>
c000f55b:	5b                   	pop    ebx
c000f55c:	5e                   	pop    esi
c000f55d:	5f                   	pop    edi
c000f55e:	c3                   	ret    

c000f55f <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f55f:	56                   	push   esi
c000f560:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f565:	53                   	push   ebx
c000f566:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f56a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f56e:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f574:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f57a:	c1 e0 04             	shl    eax,0x4
c000f57d:	83 e6 0f             	and    esi,0xf
c000f580:	0f b6 c0             	movzx  eax,al
c000f583:	41                   	inc    ecx
c000f584:	09 f0                	or     eax,esi
c000f586:	83 c2 02             	add    edx,0x2
c000f589:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f58d:	c1 e0 08             	shl    eax,0x8
c000f590:	09 f0                	or     eax,esi
c000f592:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f596:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f59c:	75 d0                	jne    c000f56e <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f59e:	5b                   	pop    ebx
c000f59f:	5e                   	pop    esi
c000f5a0:	c3                   	ret    

c000f5a1 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5a1:	56                   	push   esi
c000f5a2:	53                   	push   ebx
c000f5a3:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5a8:	74 38                	je     c000f5e2 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5aa:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5af:	b0 0a                	mov    al,0xa
c000f5b1:	89 da                	mov    edx,ebx
c000f5b3:	ee                   	out    dx,al
c000f5b4:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5b9:	89 ca                	mov    edx,ecx
c000f5bb:	ec                   	in     al,dx
c000f5bc:	b2 0f                	mov    dl,0xf
c000f5be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5c2:	83 e0 c0             	and    eax,0xffffffc0
c000f5c5:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5cb:	09 d0                	or     eax,edx
c000f5cd:	89 ca                	mov    edx,ecx
c000f5cf:	ee                   	out    dx,al
c000f5d0:	b0 0b                	mov    al,0xb
c000f5d2:	89 da                	mov    edx,ebx
c000f5d4:	ee                   	out    dx,al
c000f5d5:	89 ca                	mov    edx,ecx
c000f5d7:	ec                   	in     al,dx
c000f5d8:	83 e0 e0             	and    eax,0xffffffe0
c000f5db:	83 c8 0f             	or     eax,0xf
c000f5de:	ee                   	out    dx,al
c000f5df:	5b                   	pop    ebx
c000f5e0:	5e                   	pop    esi
c000f5e1:	c3                   	ret    
c000f5e2:	b0 0a                	mov    al,0xa
c000f5e4:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5e9:	ee                   	out    dx,al
c000f5ea:	b0 20                	mov    al,0x20
c000f5ec:	ba d5 03 00 00       	mov    edx,0x3d5
c000f5f1:	ee                   	out    dx,al
c000f5f2:	5b                   	pop    ebx
c000f5f3:	5e                   	pop    esi
c000f5f4:	c3                   	ret    

c000f5f5 <hwTextMode_update(VgaText*)>:
c000f5f5:	c3                   	ret    

c000f5f6 <hwTextMode_updateCursor(VgaText*)>:
c000f5f6:	56                   	push   esi
c000f5f7:	b9 19 00 00 00       	mov    ecx,0x19
c000f5fc:	53                   	push   ebx
c000f5fd:	be d4 03 00 00       	mov    esi,0x3d4
c000f602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f606:	89 f2                	mov    edx,esi
c000f608:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f60e:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f614:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f617:	c1 e1 04             	shl    ecx,0x4
c000f61a:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f620:	b0 0f                	mov    al,0xf
c000f622:	ee                   	out    dx,al
c000f623:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f628:	88 c8                	mov    al,cl
c000f62a:	89 da                	mov    edx,ebx
c000f62c:	ee                   	out    dx,al
c000f62d:	b0 0e                	mov    al,0xe
c000f62f:	89 f2                	mov    edx,esi
c000f631:	ee                   	out    dx,al
c000f632:	89 c8                	mov    eax,ecx
c000f634:	89 da                	mov    edx,ebx
c000f636:	66 c1 e8 08          	shr    ax,0x8
c000f63a:	ee                   	out    dx,al
c000f63b:	5b                   	pop    ebx
c000f63c:	5e                   	pop    esi
c000f63d:	c3                   	ret    

c000f63e <hwTextMode_disableBlink(VgaText*, bool)>:
c000f63e:	ba da 03 00 00       	mov    edx,0x3da
c000f643:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f648:	75 18                	jne    c000f662 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f64a:	ec                   	in     al,dx
c000f64b:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f650:	b0 30                	mov    al,0x30
c000f652:	89 ca                	mov    edx,ecx
c000f654:	ee                   	out    dx,al
c000f655:	ba c1 03 00 00       	mov    edx,0x3c1
c000f65a:	ec                   	in     al,dx
c000f65b:	83 c8 08             	or     eax,0x8
c000f65e:	89 ca                	mov    edx,ecx
c000f660:	ee                   	out    dx,al
c000f661:	c3                   	ret    
c000f662:	ec                   	in     al,dx
c000f663:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f668:	b0 30                	mov    al,0x30
c000f66a:	89 ca                	mov    edx,ecx
c000f66c:	ee                   	out    dx,al
c000f66d:	ba c1 03 00 00       	mov    edx,0x3c1
c000f672:	ec                   	in     al,dx
c000f673:	83 e0 f7             	and    eax,0xfffffff7
c000f676:	89 ca                	mov    edx,ecx
c000f678:	ee                   	out    dx,al
c000f679:	c3                   	ret    

c000f67a <hwTextMode_scrollScreen(VgaText*)>:
c000f67a:	55                   	push   ebp
c000f67b:	bd 02 00 00 00       	mov    ebp,0x2
c000f680:	57                   	push   edi
c000f681:	56                   	push   esi
c000f682:	53                   	push   ebx
c000f683:	83 ec 1c             	sub    esp,0x1c
c000f686:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f68e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f692:	31 c0                	xor    eax,eax
c000f694:	eb 0b                	jmp    c000f6a1 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f696:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f69c:	74 57                	je     c000f6f5 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f69e:	43                   	inc    ebx
c000f69f:	89 f0                	mov    eax,esi
c000f6a1:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6a7:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6ad:	88 13                	mov    BYTE PTR [ebx],dl
c000f6af:	8d 70 01             	lea    esi,[eax+0x1]
c000f6b2:	83 fd 18             	cmp    ebp,0x18
c000f6b5:	75 df                	jne    c000f696 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6b7:	a8 01                	test   al,0x1
c000f6b9:	75 13                	jne    c000f6ce <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6bb:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6be:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6c4:	75 d8                	jne    c000f69e <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6c6:	83 c4 1c             	add    esp,0x1c
c000f6c9:	5b                   	pop    ebx
c000f6ca:	5e                   	pop    esi
c000f6cb:	5f                   	pop    edi
c000f6cc:	5d                   	pop    ebp
c000f6cd:	c3                   	ret    
c000f6ce:	83 ec 08             	sub    esp,0x8
c000f6d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6d5:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6dc:	50                   	push   eax
c000f6dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6e1:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6e8:	50                   	push   eax
c000f6e9:	e8 66 0b 00 00       	call   c0010254 <VgaText::combineColours(unsigned char, unsigned char)>
c000f6ee:	83 c4 10             	add    esp,0x10
c000f6f1:	88 07                	mov    BYTE PTR [edi],al
c000f6f3:	eb c9                	jmp    c000f6be <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f6f5:	45                   	inc    ebp
c000f6f6:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f6fe:	eb 8e                	jmp    c000f68e <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f700 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f700:	56                   	push   esi
c000f701:	53                   	push   ebx
c000f702:	83 ec 0c             	sub    esp,0xc
c000f705:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f709:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f70d:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f712:	50                   	push   eax
c000f713:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f718:	50                   	push   eax
c000f719:	e8 36 0b 00 00       	call   c0010254 <VgaText::combineColours(unsigned char, unsigned char)>
c000f71e:	5a                   	pop    edx
c000f71f:	0f b6 c0             	movzx  eax,al
c000f722:	59                   	pop    ecx
c000f723:	50                   	push   eax
c000f724:	89 f0                	mov    eax,esi
c000f726:	0f be f0             	movsx  esi,al
c000f729:	56                   	push   esi
c000f72a:	e8 cb 0b 00 00       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c000f72f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f733:	ba 19 00 00 00       	mov    edx,0x19
c000f738:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f73e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f741:	8d 14 92             	lea    edx,[edx+edx*4]
c000f744:	c1 e1 04             	shl    ecx,0x4
c000f747:	c1 e2 04             	shl    edx,0x4
c000f74a:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f74e:	01 ca                	add    edx,ecx
c000f750:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f758:	83 c4 14             	add    esp,0x14
c000f75b:	5b                   	pop    ebx
c000f75c:	5e                   	pop    esi
c000f75d:	c3                   	ret    

c000f75e <setupTextMode()>:
c000f75e:	c7 05 78 b1 02 c0 3e f6 00 c0 	mov    DWORD PTR ds:0xc002b178,0xc000f63e
c000f768:	c7 05 64 b1 02 c0 1a f5 00 c0 	mov    DWORD PTR ds:0xc002b164,0xc000f51a
c000f772:	c7 05 60 b1 02 c0 5f f5 00 c0 	mov    DWORD PTR ds:0xc002b160,0xc000f55f
c000f77c:	c7 05 6c b1 02 c0 7a f6 00 c0 	mov    DWORD PTR ds:0xc002b16c,0xc000f67a
c000f786:	c7 05 74 b1 02 c0 a1 f5 00 c0 	mov    DWORD PTR ds:0xc002b174,0xc000f5a1
c000f790:	c7 05 68 b1 02 c0 f5 f5 00 c0 	mov    DWORD PTR ds:0xc002b168,0xc000f5f5
c000f79a:	c7 05 70 b1 02 c0 f6 f5 00 c0 	mov    DWORD PTR ds:0xc002b170,0xc000f5f6
c000f7a4:	c7 05 7c b1 02 c0 00 f7 00 c0 	mov    DWORD PTR ds:0xc002b17c,0xc000f700
c000f7ae:	c3                   	ret    

c000f7af <kernel_main>:
c000f7af:	57                   	push   edi
c000f7b0:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7b5:	56                   	push   esi
c000f7b6:	31 f6                	xor    esi,esi
c000f7b8:	53                   	push   ebx
c000f7b9:	83 ec 10             	sub    esp,0x10
c000f7bc:	e8 ed 08 00 00       	call   c00100ae <installVgaTextImplementation()>
c000f7c1:	e8 98 ff ff ff       	call   c000f75e <setupTextMode()>
c000f7c6:	89 f0                	mov    eax,esi
c000f7c8:	89 fa                	mov    edx,edi
c000f7ca:	ee                   	out    dx,al
c000f7cb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7d0:	b0 80                	mov    al,0x80
c000f7d2:	89 da                	mov    edx,ebx
c000f7d4:	ee                   	out    dx,al
c000f7d5:	b1 03                	mov    cl,0x3
c000f7d7:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7dc:	88 c8                	mov    al,cl
c000f7de:	ee                   	out    dx,al
c000f7df:	89 f0                	mov    eax,esi
c000f7e1:	89 fa                	mov    edx,edi
c000f7e3:	ee                   	out    dx,al
c000f7e4:	88 c8                	mov    al,cl
c000f7e6:	89 da                	mov    edx,ebx
c000f7e8:	ee                   	out    dx,al
c000f7e9:	b0 c7                	mov    al,0xc7
c000f7eb:	ba fa 03 00 00       	mov    edx,0x3fa
c000f7f0:	ee                   	out    dx,al
c000f7f1:	b0 0b                	mov    al,0xb
c000f7f3:	ba fc 03 00 00       	mov    edx,0x3fc
c000f7f8:	ee                   	out    dx,al
c000f7f9:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f7fe:	83 ec 0c             	sub    esp,0xc
c000f801:	05 ff 0f 00 00       	add    eax,0xfff
c000f806:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f80b:	50                   	push   eax
c000f80c:	e8 59 03 00 00       	call   c000fb6a <Phys::physicalMemorySetup(unsigned int)>
c000f811:	e8 3e 1f 00 00       	call   c0011754 <Virt::virtualMemorySetup()>
c000f816:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f81c:	83 c4 10             	add    esp,0x10
c000f81f:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f825:	75 0e                	jne    c000f835 <kernel_main+0x86>
c000f827:	89 d8                	mov    eax,ebx
c000f829:	25 48 03 00 00       	and    eax,0x348
c000f82e:	3d 00 03 00 00       	cmp    eax,0x300
c000f833:	74 10                	je     c000f845 <kernel_main+0x96>
c000f835:	83 ec 0c             	sub    esp,0xc
c000f838:	68 e3 8c 02 c0       	push   0xc0028ce3
c000f83d:	e8 55 98 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	83 ec 0c             	sub    esp,0xc
c000f848:	89 1d e0 b0 02 c0    	mov    DWORD PTR ds:0xc002b0e0,ebx
c000f84e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f852:	53                   	push   ebx
c000f853:	e8 b0 20 00 00       	call   c0011908 <VAS::VAS()>
c000f858:	89 1d 24 b2 02 c0    	mov    DWORD PTR ds:0xc002b224,ebx
c000f85e:	e8 bd 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f863:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f86a:	e8 51 fc ff ff       	call   c000f4c0 <malloc>
c000f86f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f872:	89 c6                	mov    esi,eax
c000f874:	e8 61 ea ff ff       	call   c000e2da <Computer::Computer()>
c000f879:	6a 00                	push   0x0
c000f87b:	89 35 c8 b0 02 c0    	mov    DWORD PTR ds:0xc002b0c8,esi
c000f881:	6a 00                	push   0x0
c000f883:	6a 00                	push   0x0
c000f885:	56                   	push   esi
c000f886:	e8 7f f2 ff ff       	call   c000eb0a <Computer::open(int, int, void*)>
c000f88b:	83 c4 14             	add    esp,0x14
c000f88e:	53                   	push   ebx
c000f88f:	e8 0e 23 00 00       	call   c0011ba2 <VAS::~VAS()>
c000f894:	c7 04 24 ac 76 02 c0 	mov    DWORD PTR [esp],0xc00276ac
c000f89b:	e8 f7 97 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000f8a0:	83 c4 20             	add    esp,0x20
c000f8a3:	5b                   	pop    ebx
c000f8a4:	5e                   	pop    esi
c000f8a5:	5f                   	pop    edi
c000f8a6:	c3                   	ret    

c000f8a7 <Phys::allocateDMA(unsigned long)>:
c000f8a7:	55                   	push   ebp
c000f8a8:	31 d2                	xor    edx,edx
c000f8aa:	57                   	push   edi
c000f8ab:	31 ed                	xor    ebp,ebp
c000f8ad:	56                   	push   esi
c000f8ae:	31 c9                	xor    ecx,ecx
c000f8b0:	53                   	push   ebx
c000f8b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8b5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8bb:	31 c0                	xor    eax,eax
c000f8bd:	c1 ee 0c             	shr    esi,0xc
c000f8c0:	eb 17                	jmp    c000f8d9 <Phys::allocateDMA(unsigned long)+0x32>
c000f8c2:	85 c9                	test   ecx,ecx
c000f8c4:	75 04                	jne    c000f8ca <Phys::allocateDMA(unsigned long)+0x23>
c000f8c6:	89 d5                	mov    ebp,edx
c000f8c8:	89 d0                	mov    eax,edx
c000f8ca:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8cd:	39 de                	cmp    esi,ebx
c000f8cf:	74 20                	je     c000f8f1 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8d1:	42                   	inc    edx
c000f8d2:	89 d9                	mov    ecx,ebx
c000f8d4:	83 fa 2f             	cmp    edx,0x2f
c000f8d7:	7f 11                	jg     c000f8ea <Phys::allocateDMA(unsigned long)+0x43>
c000f8d9:	80 ba 20 b1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd4ee0],0x0
c000f8e0:	74 e0                	je     c000f8c2 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8e2:	31 c9                	xor    ecx,ecx
c000f8e4:	42                   	inc    edx
c000f8e5:	83 fa 2f             	cmp    edx,0x2f
c000f8e8:	7e ef                	jle    c000f8d9 <Phys::allocateDMA(unsigned long)+0x32>
c000f8ea:	5b                   	pop    ebx
c000f8eb:	31 c0                	xor    eax,eax
c000f8ed:	5e                   	pop    esi
c000f8ee:	5f                   	pop    edi
c000f8ef:	5d                   	pop    ebp
c000f8f0:	c3                   	ret    
c000f8f1:	8d 14 30             	lea    edx,[eax+esi*1]
c000f8f4:	89 d7                	mov    edi,edx
c000f8f6:	4f                   	dec    edi
c000f8f7:	79 03                	jns    c000f8fc <Phys::allocateDMA(unsigned long)+0x55>
c000f8f9:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f8fc:	c1 ff 04             	sar    edi,0x4
c000f8ff:	89 c2                	mov    edx,eax
c000f901:	c1 fa 04             	sar    edx,0x4
c000f904:	39 fa                	cmp    edx,edi
c000f906:	75 2f                	jne    c000f937 <Phys::allocateDMA(unsigned long)+0x90>
c000f908:	85 db                	test   ebx,ebx
c000f90a:	74 1a                	je     c000f926 <Phys::allocateDMA(unsigned long)+0x7f>
c000f90c:	be 20 b1 02 c0       	mov    esi,0xc002b120
c000f911:	8d 90 20 b1 02 c0    	lea    edx,[eax-0x3ffd4ee0]
c000f917:	f7 d6                	not    esi
c000f919:	29 c6                	sub    esi,eax
c000f91b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f91e:	42                   	inc    edx
c000f91f:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f922:	39 d9                	cmp    ecx,ebx
c000f924:	7f f5                	jg     c000f91b <Phys::allocateDMA(unsigned long)+0x74>
c000f926:	85 ff                	test   edi,edi
c000f928:	74 13                	je     c000f93d <Phys::allocateDMA(unsigned long)+0x96>
c000f92a:	5b                   	pop    ebx
c000f92b:	05 50 20 0c 00       	add    eax,0xc2050
c000f930:	5e                   	pop    esi
c000f931:	c1 e0 0c             	shl    eax,0xc
c000f934:	5f                   	pop    edi
c000f935:	5d                   	pop    ebp
c000f936:	c3                   	ret    
c000f937:	89 ea                	mov    edx,ebp
c000f939:	31 c9                	xor    ecx,ecx
c000f93b:	eb a7                	jmp    c000f8e4 <Phys::allocateDMA(unsigned long)+0x3d>
c000f93d:	5b                   	pop    ebx
c000f93e:	c1 e0 0c             	shl    eax,0xc
c000f941:	5e                   	pop    esi
c000f942:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f947:	5f                   	pop    edi
c000f948:	5d                   	pop    ebp
c000f949:	c3                   	ret    

c000f94a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f94e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f952:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f958:	c1 e9 0c             	shr    ecx,0xc
c000f95b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f960:	76 25                	jbe    c000f987 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f962:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f967:	c1 e8 0c             	shr    eax,0xc
c000f96a:	8d 50 10             	lea    edx,[eax+0x10]
c000f96d:	85 c9                	test   ecx,ecx
c000f96f:	74 15                	je     c000f986 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f971:	8d 82 20 b1 02 c0    	lea    eax,[edx-0x3ffd4ee0]
c000f977:	8d 94 11 20 b1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd4ee0]
c000f97e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f981:	40                   	inc    eax
c000f982:	39 d0                	cmp    eax,edx
c000f984:	75 f8                	jne    c000f97e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f986:	c3                   	ret    
c000f987:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f98d:	c1 ea 0c             	shr    edx,0xc
c000f990:	eb db                	jmp    c000f96d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f992 <Phys::setPageState(unsigned long, bool)>:
c000f992:	56                   	push   esi
c000f993:	ba 01 00 00 00       	mov    edx,0x1
c000f998:	53                   	push   ebx
c000f999:	8b 35 70 a0 02 c0    	mov    esi,DWORD PTR ds:0xc002a070
c000f99f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9a7:	89 c8                	mov    eax,ecx
c000f9a9:	83 e1 07             	and    ecx,0x7
c000f9ac:	c1 e8 03             	shr    eax,0x3
c000f9af:	d3 e3                	shl    ebx,cl
c000f9b1:	01 c6                	add    esi,eax
c000f9b3:	d3 e2                	shl    edx,cl
c000f9b5:	f7 d2                	not    edx
c000f9b7:	20 16                	and    BYTE PTR [esi],dl
c000f9b9:	03 05 70 a0 02 c0    	add    eax,DWORD PTR ds:0xc002a070
c000f9bf:	08 18                	or     BYTE PTR [eax],bl
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <Phys::getPageState(unsigned long)>:
c000f9c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9c8:	8b 15 70 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a070
c000f9ce:	89 c8                	mov    eax,ecx
c000f9d0:	83 e1 07             	and    ecx,0x7
c000f9d3:	c1 e8 03             	shr    eax,0x3
c000f9d6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9da:	d3 f8                	sar    eax,cl
c000f9dc:	83 e0 01             	and    eax,0x1
c000f9df:	c3                   	ret    

c000f9e0 <Phys::freePage(unsigned long)>:
c000f9e0:	53                   	push   ebx
c000f9e1:	83 ec 08             	sub    esp,0x8
c000f9e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9e8:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f9ee:	76 57                	jbe    c000fa47 <Phys::freePage(unsigned long)+0x67>
c000f9f0:	c1 eb 0c             	shr    ebx,0xc
c000f9f3:	53                   	push   ebx
c000f9f4:	e8 cb ff ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000f9f9:	5a                   	pop    edx
c000f9fa:	84 c0                	test   al,al
c000f9fc:	74 5b                	je     c000fa59 <Phys::freePage(unsigned long)+0x79>
c000f9fe:	a1 0c b1 02 c0       	mov    eax,ds:0xc002b10c
c000fa03:	48                   	dec    eax
c000fa04:	a3 0c b1 02 c0       	mov    ds:0xc002b10c,eax
c000fa09:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa0c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa0f:	c1 e0 02             	shl    eax,0x2
c000fa12:	99                   	cdq    
c000fa13:	f7 3d 10 b1 02 c0    	idiv   DWORD PTR ds:0xc002b110
c000fa19:	39 05 08 b1 02 c0    	cmp    DWORD PTR ds:0xc002b108,eax
c000fa1f:	75 13                	jne    c000fa34 <Phys::freePage(unsigned long)+0x54>
c000fa21:	83 ec 08             	sub    esp,0x8
c000fa24:	6a 00                	push   0x0
c000fa26:	53                   	push   ebx
c000fa27:	e8 66 ff ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fa2c:	83 c4 10             	add    esp,0x10
c000fa2f:	83 c4 08             	add    esp,0x8
c000fa32:	5b                   	pop    ebx
c000fa33:	c3                   	ret    
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	a3 08 b1 02 c0       	mov    ds:0xc002b108,eax
c000fa3c:	50                   	push   eax
c000fa3d:	e8 00 0a 00 00       	call   c0010442 <VgaText::updateRAMUsageDisplay(int)>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	eb da                	jmp    c000fa21 <Phys::freePage(unsigned long)+0x41>
c000fa47:	68 00 10 00 00       	push   0x1000
c000fa4c:	53                   	push   ebx
c000fa4d:	e8 f8 fe ff ff       	call   c000f94a <Phys::freeDMA(unsigned long, unsigned long)>
c000fa52:	59                   	pop    ecx
c000fa53:	5b                   	pop    ebx
c000fa54:	83 c4 08             	add    esp,0x8
c000fa57:	5b                   	pop    ebx
c000fa58:	c3                   	ret    
c000fa59:	c7 44 24 10 c7 76 02 c0 	mov    DWORD PTR [esp+0x10],0xc00276c7
c000fa61:	83 c4 08             	add    esp,0x8
c000fa64:	5b                   	pop    ebx
c000fa65:	e9 2d 96 00 00       	jmp    c0019097 <Krnl::panic(char const*)>

c000fa6a <Phys::allocatePage()>:
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	51                   	push   ecx
c000fa6d:	8b 35 00 b1 02 c0    	mov    esi,DWORD PTR ds:0xc002b100
c000fa73:	89 f3                	mov    ebx,esi
c000fa75:	eb 0a                	jmp    c000fa81 <Phys::allocatePage()+0x17>
c000fa77:	89 1d 00 b1 02 c0    	mov    DWORD PTR ds:0xc002b100,ebx
c000fa7d:	39 de                	cmp    esi,ebx
c000fa7f:	74 24                	je     c000faa5 <Phys::allocatePage()+0x3b>
c000fa81:	53                   	push   ebx
c000fa82:	e8 3d ff ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000fa87:	5a                   	pop    edx
c000fa88:	84 c0                	test   al,al
c000fa8a:	74 5a                	je     c000fae6 <Phys::allocatePage()+0x7c>
c000fa8c:	43                   	inc    ebx
c000fa8d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fa93:	75 e2                	jne    c000fa77 <Phys::allocatePage()+0xd>
c000fa95:	31 db                	xor    ebx,ebx
c000fa97:	c7 05 00 b1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b100,0x0
c000faa1:	39 de                	cmp    esi,ebx
c000faa3:	75 dc                	jne    c000fa81 <Phys::allocatePage()+0x17>
c000faa5:	83 ec 0c             	sub    esp,0xc
c000faa8:	68 dd 76 02 c0       	push   0xc00276dd
c000faad:	e8 81 2b 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000fab2:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fab9:	e8 e9 fd ff ff       	call   c000f8a7 <Phys::allocateDMA(unsigned long)>
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	85 c0                	test   eax,eax
c000fac3:	75 56                	jne    c000fb1b <Phys::allocatePage()+0xb1>
c000fac5:	83 ec 0c             	sub    esp,0xc
c000fac8:	68 ee 76 02 c0       	push   0xc00276ee
c000facd:	e8 c5 95 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	8b 1d 00 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b100
c000fadb:	53                   	push   ebx
c000fadc:	e8 e3 fe ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000fae1:	5a                   	pop    edx
c000fae2:	84 c0                	test   al,al
c000fae4:	75 a6                	jne    c000fa8c <Phys::allocatePage()+0x22>
c000fae6:	6a 01                	push   0x1
c000fae8:	53                   	push   ebx
c000fae9:	e8 a4 fe ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000faee:	a1 0c b1 02 c0       	mov    eax,ds:0xc002b10c
c000faf3:	59                   	pop    ecx
c000faf4:	40                   	inc    eax
c000faf5:	5b                   	pop    ebx
c000faf6:	a3 0c b1 02 c0       	mov    ds:0xc002b10c,eax
c000fafb:	8d 04 80             	lea    eax,[eax+eax*4]
c000fafe:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb01:	c1 e0 02             	shl    eax,0x2
c000fb04:	99                   	cdq    
c000fb05:	f7 3d 10 b1 02 c0    	idiv   DWORD PTR ds:0xc002b110
c000fb0b:	39 05 08 b1 02 c0    	cmp    DWORD PTR ds:0xc002b108,eax
c000fb11:	75 0c                	jne    c000fb1f <Phys::allocatePage()+0xb5>
c000fb13:	a1 00 b1 02 c0       	mov    eax,ds:0xc002b100
c000fb18:	c1 e0 0c             	shl    eax,0xc
c000fb1b:	5a                   	pop    edx
c000fb1c:	5b                   	pop    ebx
c000fb1d:	5e                   	pop    esi
c000fb1e:	c3                   	ret    
c000fb1f:	83 ec 0c             	sub    esp,0xc
c000fb22:	a3 08 b1 02 c0       	mov    ds:0xc002b108,eax
c000fb27:	50                   	push   eax
c000fb28:	e8 15 09 00 00       	call   c0010442 <VgaText::updateRAMUsageDisplay(int)>
c000fb2d:	83 c4 10             	add    esp,0x10
c000fb30:	eb e1                	jmp    c000fb13 <Phys::allocatePage()+0xa9>

c000fb32 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fb32:	56                   	push   esi
c000fb33:	53                   	push   ebx
c000fb34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb38:	39 1d 04 b1 02 c0    	cmp    DWORD PTR ds:0xc002b104,ebx
c000fb3e:	73 06                	jae    c000fb46 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fb40:	89 1d 04 b1 02 c0    	mov    DWORD PTR ds:0xc002b104,ebx
c000fb46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4a:	c1 eb 0c             	shr    ebx,0xc
c000fb4d:	c1 e8 0c             	shr    eax,0xc
c000fb50:	39 d8                	cmp    eax,ebx
c000fb52:	73 13                	jae    c000fb67 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb54:	6a 00                	push   0x0
c000fb56:	8d 70 01             	lea    esi,[eax+0x1]
c000fb59:	50                   	push   eax
c000fb5a:	e8 33 fe ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fb5f:	5a                   	pop    edx
c000fb60:	89 f0                	mov    eax,esi
c000fb62:	59                   	pop    ecx
c000fb63:	39 f3                	cmp    ebx,esi
c000fb65:	75 ed                	jne    c000fb54 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb67:	5b                   	pop    ebx
c000fb68:	5e                   	pop    esi
c000fb69:	c3                   	ret    

c000fb6a <Phys::physicalMemorySetup(unsigned int)>:
c000fb6a:	55                   	push   ebp
c000fb6b:	57                   	push   edi
c000fb6c:	56                   	push   esi
c000fb6d:	53                   	push   ebx
c000fb6e:	31 db                	xor    ebx,ebx
c000fb70:	83 ec 40             	sub    esp,0x40
c000fb73:	6a 30                	push   0x30
c000fb75:	6a 00                	push   0x0
c000fb77:	68 20 b1 02 c0       	push   0xc002b120
c000fb7c:	e8 fa 0a ff ff       	call   c000067b <memset>
c000fb81:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb85:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb8a:	05 00 10 00 00       	add    eax,0x1000
c000fb8f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb93:	83 c4 10             	add    esp,0x10
c000fb96:	83 ec 08             	sub    esp,0x8
c000fb99:	6a 01                	push   0x1
c000fb9b:	53                   	push   ebx
c000fb9c:	43                   	inc    ebx
c000fb9d:	e8 f0 fd ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fba2:	83 c4 10             	add    esp,0x10
c000fba5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbab:	75 e9                	jne    c000fb96 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fbad:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fbb4:	66 85 c0             	test   ax,ax
c000fbb7:	0f 84 8e 01 00 00    	je     c000fd4b <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fbbd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fbc1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fbc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbcd:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fbd2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fbd6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fbde:	eb 15                	jmp    c000fbf5 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fbe0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fbe4:	83 c3 18             	add    ebx,0x18
c000fbe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbeb:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbef:	0f 84 66 01 00 00    	je     c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fbf5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbf8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbfb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc06:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc08:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc0b:	01 f0                	add    eax,esi
c000fc0d:	55                   	push   ebp
c000fc0e:	11 fa                	adc    edx,edi
c000fc10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc14:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc18:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc1c:	56                   	push   esi
c000fc1d:	68 28 77 02 c0       	push   0xc0027728
c000fc22:	e8 0c 2a 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000fc27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc2b:	83 c4 10             	add    esp,0x10
c000fc2e:	09 f8                	or     eax,edi
c000fc30:	0f 85 25 01 00 00    	jne    c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc36:	4d                   	dec    ebp
c000fc37:	75 a7                	jne    c000fbe0 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc39:	ba 00 00 08 00       	mov    edx,0x80000
c000fc3e:	89 c1                	mov    ecx,eax
c000fc40:	39 f2                	cmp    edx,esi
c000fc42:	19 f9                	sbb    ecx,edi
c000fc44:	0f 82 a7 00 00 00    	jb     c000fcf1 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fc4a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc4e:	89 c1                	mov    ecx,eax
c000fc50:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc54:	0f 83 97 00 00 00    	jae    c000fcf1 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fc5a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc5f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc63:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc67:	39 fa                	cmp    edx,edi
c000fc69:	19 e8                	sbb    eax,ebp
c000fc6b:	0f 82 14 01 00 00    	jb     c000fd85 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fc71:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc75:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc79:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc7f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc84:	83 d5 ff             	adc    ebp,0xffffffff
c000fc87:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc8b:	31 c0                	xor    eax,eax
c000fc8d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc91:	39 fa                	cmp    edx,edi
c000fc93:	89 c1                	mov    ecx,eax
c000fc95:	19 e9                	sbb    ecx,ebp
c000fc97:	0f 83 43 ff ff ff    	jae    c000fbe0 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc9d:	be 00 00 08 00       	mov    esi,0x80000
c000fca2:	50                   	push   eax
c000fca3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fca7:	57                   	push   edi
c000fca8:	56                   	push   esi
c000fca9:	68 4c 77 02 c0       	push   0xc002774c
c000fcae:	e8 80 29 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000fcb3:	5a                   	pop    edx
c000fcb4:	59                   	pop    ecx
c000fcb5:	57                   	push   edi
c000fcb6:	56                   	push   esi
c000fcb7:	e8 76 fe ff ff       	call   c000fb32 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fcbc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fcc0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fcc4:	83 c4 0c             	add    esp,0xc
c000fcc7:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fccb:	03 05 10 b1 02 c0    	add    eax,DWORD PTR ds:0xc002b110
c000fcd1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcd8:	a3 10 b1 02 c0       	mov    ds:0xc002b110,eax
c000fcdd:	52                   	push   edx
c000fcde:	50                   	push   eax
c000fcdf:	68 0a 77 02 c0       	push   0xc002770a
c000fce4:	e8 4a 29 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c000fce9:	83 c4 10             	add    esp,0x10
c000fcec:	e9 ef fe ff ff       	jmp    c000fbe0 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcf1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcf5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcf9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcfd:	39 ea                	cmp    edx,ebp
c000fcff:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd03:	0f 82 d7 fe ff ff    	jb     c000fbe0 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd09:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd0e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd12:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd16:	0f 83 c4 fe ff ff    	jae    c000fbe0 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd1c:	39 ee                	cmp    esi,ebp
c000fd1e:	89 f8                	mov    eax,edi
c000fd20:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd24:	0f 83 78 ff ff ff    	jae    c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd32:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fd36:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fd3a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd46:	e9 57 ff ff ff       	jmp    c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd4b:	83 ec 0c             	sub    esp,0xc
c000fd4e:	68 fc 76 02 c0       	push   0xc00276fc
c000fd53:	e8 3f 93 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000fd58:	83 c4 10             	add    esp,0x10
c000fd5b:	bb 40 01 00 00       	mov    ebx,0x140
c000fd60:	83 ec 08             	sub    esp,0x8
c000fd63:	6a 00                	push   0x0
c000fd65:	53                   	push   ebx
c000fd66:	43                   	inc    ebx
c000fd67:	e8 26 fc ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fd6c:	ff 05 10 b1 02 c0    	inc    DWORD PTR ds:0xc002b110
c000fd72:	83 c4 10             	add    esp,0x10
c000fd75:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd7b:	75 e3                	jne    c000fd60 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fd7d:	83 c4 3c             	add    esp,0x3c
c000fd80:	5b                   	pop    ebx
c000fd81:	5e                   	pop    esi
c000fd82:	5f                   	pop    edi
c000fd83:	5d                   	pop    ebp
c000fd84:	c3                   	ret    
c000fd85:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd95:	e9 d7 fe ff ff       	jmp    c000fc71 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fd9a <Pipe::isAtty()>:
c000fd9a:	31 c0                	xor    eax,eax
c000fd9c:	c3                   	ret    
c000fd9d:	90                   	nop

c000fd9e <Pipe::~Pipe()>:
c000fd9e:	83 ec 0c             	sub    esp,0xc
c000fda1:	ba b8 77 02 c0       	mov    edx,0xc00277b8
c000fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdaa:	89 10                	mov    DWORD PTR [eax],edx
c000fdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	50                   	push   eax
c000fdb4:	e8 29 16 00 00       	call   c00113e2 <UnixFile::~UnixFile()>
c000fdb9:	83 c4 10             	add    esp,0x10
c000fdbc:	90                   	nop
c000fdbd:	83 c4 0c             	add    esp,0xc
c000fdc0:	c3                   	ret    
c000fdc1:	90                   	nop

c000fdc2 <Pipe::~Pipe()>:
c000fdc2:	83 ec 0c             	sub    esp,0xc
c000fdc5:	83 ec 0c             	sub    esp,0xc
c000fdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdcc:	e8 cd ff ff ff       	call   c000fd9e <Pipe::~Pipe()>
c000fdd1:	83 c4 10             	add    esp,0x10
c000fdd4:	83 ec 08             	sub    esp,0x8
c000fdd7:	6a 20                	push   0x20
c000fdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fddd:	e8 71 27 00 00       	call   c0012553 <operator delete(void*, unsigned long)>
c000fde2:	83 c4 10             	add    esp,0x10
c000fde5:	83 c4 0c             	add    esp,0xc
c000fde8:	c3                   	ret    
c000fde9:	90                   	nop

c000fdea <Pipe::read(unsigned long long, void*, int*)>:
c000fdea:	55                   	push   ebp
c000fdeb:	57                   	push   edi
c000fdec:	56                   	push   esi
c000fded:	53                   	push   ebx
c000fdee:	83 ec 1c             	sub    esp,0x1c
c000fdf1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdf5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdf9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdfd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe00:	89 c8                	mov    eax,ecx
c000fe02:	99                   	cdq    
c000fe03:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe07:	74 19                	je     c000fe22 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe09:	39 f9                	cmp    ecx,edi
c000fe0b:	89 d1                	mov    ecx,edx
c000fe0d:	19 f1                	sbb    ecx,esi
c000fe0f:	73 11                	jae    c000fe22 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe11:	e8 c7 c2 00 00       	call   c001c0dd <lockScheduler()>
c000fe16:	e8 fd c5 00 00       	call   c001c418 <schedule()>
c000fe1b:	e8 bf c2 00 00       	call   c001c0df <unlockScheduler()>
c000fe20:	eb db                	jmp    c000fdfd <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe22:	39 f8                	cmp    eax,edi
c000fe24:	89 d1                	mov    ecx,edx
c000fe26:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe2a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe2e:	19 f1                	sbb    ecx,esi
c000fe30:	73 08                	jae    c000fe3a <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fe32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe3d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe40:	29 c6                	sub    esi,eax
c000fe42:	89 f1                	mov    ecx,esi
c000fe44:	c1 f9 1f             	sar    ecx,0x1f
c000fe47:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fe4b:	89 ca                	mov    edx,ecx
c000fe4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe51:	19 d1                	sbb    ecx,edx
c000fe53:	73 04                	jae    c000fe59 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fe55:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fe59:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe5d:	89 fd                	mov    ebp,edi
c000fe5f:	29 f5                	sub    ebp,esi
c000fe61:	85 f6                	test   esi,esi
c000fe63:	74 12                	je     c000fe77 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fe65:	52                   	push   edx
c000fe66:	56                   	push   esi
c000fe67:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fe6a:	50                   	push   eax
c000fe6b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fe6f:	e8 d1 07 ff ff       	call   c0000645 <memcpy>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	85 ed                	test   ebp,ebp
c000fe79:	74 12                	je     c000fe8d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fe7b:	50                   	push   eax
c000fe7c:	55                   	push   ebp
c000fe7d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fe80:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fe84:	56                   	push   esi
c000fe85:	e8 bb 07 ff ff       	call   c0000645 <memcpy>
c000fe8a:	83 c4 10             	add    esp,0x10
c000fe8d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fe90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe93:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe96:	99                   	cdq    
c000fe97:	89 f7                	mov    edi,esi
c000fe99:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe9d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fea1:	c1 ff 1f             	sar    edi,0x1f
c000fea4:	57                   	push   edi
c000fea5:	56                   	push   esi
c000fea6:	52                   	push   edx
c000fea7:	50                   	push   eax
c000fea8:	e8 7f 41 01 00       	call   c002402c <__umoddi3>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000feb3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000feb8:	75 10                	jne    c000feca <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000feba:	83 ec 0c             	sub    esp,0xc
c000febd:	68 75 77 02 c0       	push   0xc0027775
c000fec2:	e8 d0 91 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000fec7:	83 c4 10             	add    esp,0x10
c000feca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fece:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fed2:	89 10                	mov    DWORD PTR [eax],edx
c000fed4:	83 c4 1c             	add    esp,0x1c
c000fed7:	31 c0                	xor    eax,eax
c000fed9:	5b                   	pop    ebx
c000feda:	5e                   	pop    esi
c000fedb:	5f                   	pop    edi
c000fedc:	5d                   	pop    ebp
c000fedd:	c3                   	ret    

c000fede <Pipe::write(unsigned long long, void*, int*)>:
c000fede:	55                   	push   ebp
c000fedf:	57                   	push   edi
c000fee0:	56                   	push   esi
c000fee1:	53                   	push   ebx
c000fee2:	83 ec 1c             	sub    esp,0x1c
c000fee5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fee9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000feed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fef1:	89 04 24             	mov    DWORD PTR [esp],eax
c000fef4:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fef7:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fefa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fefe:	89 de                	mov    esi,ebx
c000ff00:	89 df                	mov    edi,ebx
c000ff02:	c1 ff 1f             	sar    edi,0x1f
c000ff05:	01 c6                	add    esi,eax
c000ff07:	89 c8                	mov    eax,ecx
c000ff09:	11 d7                	adc    edi,edx
c000ff0b:	99                   	cdq    
c000ff0c:	39 f1                	cmp    ecx,esi
c000ff0e:	89 d0                	mov    eax,edx
c000ff10:	19 f8                	sbb    eax,edi
c000ff12:	b8 01 00 00 00       	mov    eax,0x1
c000ff17:	0f 82 80 00 00 00    	jb     c000ff9d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff1d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff20:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff23:	01 d8                	add    eax,ebx
c000ff25:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff29:	99                   	cdq    
c000ff2a:	f7 f9                	idiv   ecx
c000ff2c:	29 d1                	sub    ecx,edx
c000ff2e:	89 d7                	mov    edi,edx
c000ff30:	89 c8                	mov    eax,ecx
c000ff32:	99                   	cdq    
c000ff33:	39 ce                	cmp    esi,ecx
c000ff35:	19 d3                	sbb    ebx,edx
c000ff37:	bb 00 00 00 00       	mov    ebx,0x0
c000ff3c:	72 04                	jb     c000ff42 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ff3e:	89 f3                	mov    ebx,esi
c000ff40:	29 cb                	sub    ebx,ecx
c000ff42:	89 f1                	mov    ecx,esi
c000ff44:	29 d9                	sub    ecx,ebx
c000ff46:	74 1a                	je     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ff48:	52                   	push   edx
c000ff49:	51                   	push   ecx
c000ff4a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ff4e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ff52:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff55:	57                   	push   edi
c000ff56:	e8 ea 06 ff ff       	call   c0000645 <memcpy>
c000ff5b:	83 c4 10             	add    esp,0x10
c000ff5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff62:	85 db                	test   ebx,ebx
c000ff64:	74 12                	je     c000ff78 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ff66:	50                   	push   eax
c000ff67:	53                   	push   ebx
c000ff68:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ff6c:	51                   	push   ecx
c000ff6d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ff70:	e8 d0 06 ff ff       	call   c0000645 <memcpy>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ff7b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff80:	75 10                	jne    c000ff92 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ff82:	83 ec 0c             	sub    esp,0xc
c000ff85:	68 91 77 02 c0       	push   0xc0027791
c000ff8a:	e8 08 91 00 00       	call   c0019097 <Krnl::panic(char const*)>
c000ff8f:	83 c4 10             	add    esp,0x10
c000ff92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff96:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ff99:	89 38                	mov    DWORD PTR [eax],edi
c000ff9b:	31 c0                	xor    eax,eax
c000ff9d:	83 c4 1c             	add    esp,0x1c
c000ffa0:	5b                   	pop    ebx
c000ffa1:	5e                   	pop    esi
c000ffa2:	5f                   	pop    edi
c000ffa3:	5d                   	pop    ebp
c000ffa4:	c3                   	ret    
c000ffa5:	90                   	nop

c000ffa6 <Pipe::Pipe(int)>:
c000ffa6:	83 ec 0c             	sub    esp,0xc
c000ffa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffad:	83 ec 08             	sub    esp,0x8
c000ffb0:	6a 00                	push   0x0
c000ffb2:	50                   	push   eax
c000ffb3:	e8 48 12 00 00       	call   c0011200 <UnixFile::UnixFile(int)>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	ba b8 77 02 c0       	mov    edx,0xc00277b8
c000ffc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc4:	89 10                	mov    DWORD PTR [eax],edx
c000ffc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ffce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ffd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffeb:	83 ec 0c             	sub    esp,0xc
c000ffee:	50                   	push   eax
c000ffef:	e8 cc f4 ff ff       	call   c000f4c0 <malloc>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	89 c2                	mov    edx,eax
c000fff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010004:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010008:	90                   	nop
c0010009:	83 c4 0c             	add    esp,0xc
c001000c:	c3                   	ret    
c001000d:	90                   	nop

c001000e <VgaText::isAtty()>:
c001000e:	b0 01                	mov    al,0x1
c0010010:	c3                   	ret    
c0010011:	90                   	nop

c0010012 <VgaText::~VgaText()>:
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	ba 74 78 02 c0       	mov    edx,0xc0027874
c001001a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001e:	89 10                	mov    DWORD PTR [eax],edx
c0010020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010024:	83 ec 0c             	sub    esp,0xc
c0010027:	50                   	push   eax
c0010028:	e8 b5 13 00 00       	call   c00113e2 <UnixFile::~UnixFile()>
c001002d:	83 c4 10             	add    esp,0x10
c0010030:	90                   	nop
c0010031:	83 c4 0c             	add    esp,0xc
c0010034:	c3                   	ret    
c0010035:	90                   	nop

c0010036 <VgaText::~VgaText()>:
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	83 ec 0c             	sub    esp,0xc
c001003c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010040:	e8 cd ff ff ff       	call   c0010012 <VgaText::~VgaText()>
c0010045:	83 c4 10             	add    esp,0x10
c0010048:	83 ec 08             	sub    esp,0x8
c001004b:	68 60 12 00 00       	push   0x1260
c0010050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010054:	e8 fa 24 00 00       	call   c0012553 <operator delete(void*, unsigned long)>
c0010059:	83 c4 10             	add    esp,0x10
c001005c:	83 c4 0c             	add    esp,0xc
c001005f:	c3                   	ret    

c0010060 <VgaText::read(unsigned long long, void*, int*)>:
c0010060:	83 ec 10             	sub    esp,0x10
c0010063:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010067:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001006b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001006f:	e8 78 57 00 00       	call   c00157ec <readKeyboard(VgaText*, char*, unsigned long)>
c0010074:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010078:	89 02                	mov    DWORD PTR [edx],eax
c001007a:	31 c0                	xor    eax,eax
c001007c:	83 c4 1c             	add    esp,0x1c
c001007f:	c3                   	ret    

c0010080 <setTerminalScrollLock(bool)>:
c0010080:	c3                   	ret    

c0010081 <addToTerminalCycle(VgaText*)>:
c0010081:	8b 15 80 b1 02 c0    	mov    edx,DWORD PTR ds:0xc002b180
c0010087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001008b:	85 d2                	test   edx,edx
c001008d:	75 0c                	jne    c001009b <addToTerminalCycle(VgaText*)+0x1a>
c001008f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010095:	a3 80 b1 02 c0       	mov    ds:0xc002b180,eax
c001009a:	c3                   	ret    
c001009b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00100a1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00100a7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00100ad:	c3                   	ret    

c00100ae <installVgaTextImplementation()>:
c00100ae:	83 ec 10             	sub    esp,0x10
c00100b1:	6a 20                	push   0x20
c00100b3:	6a 00                	push   0x0
c00100b5:	68 60 b1 02 c0       	push   0xc002b160
c00100ba:	e8 bc 05 ff ff       	call   c000067b <memset>
c00100bf:	83 c4 1c             	add    esp,0x1c
c00100c2:	c3                   	ret    

c00100c3 <scrollTerminalScrollLock(int)>:
c00100c3:	c3                   	ret    

c00100c4 <VgaText::load()>:
c00100c4:	53                   	push   ebx
c00100c5:	31 c0                	xor    eax,eax
c00100c7:	83 ec 58             	sub    esp,0x58
c00100ca:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100ce:	89 e2                	mov    edx,esp
c00100d0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100d4:	40                   	inc    eax
c00100d5:	83 f8 50             	cmp    eax,0x50
c00100d8:	75 f6                	jne    c00100d0 <VgaText::load()+0xc>
c00100da:	31 c0                	xor    eax,eax
c00100dc:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00100e3:	84 c9                	test   cl,cl
c00100e5:	74 06                	je     c00100ed <VgaText::load()+0x29>
c00100e7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100ea:	40                   	inc    eax
c00100eb:	eb ef                	jmp    c00100dc <VgaText::load()+0x18>
c00100ed:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00100f3:	85 c0                	test   eax,eax
c00100f5:	74 09                	je     c0010100 <VgaText::load()+0x3c>
c00100f7:	51                   	push   ecx
c00100f8:	51                   	push   ecx
c00100f9:	52                   	push   edx
c00100fa:	53                   	push   ebx
c00100fb:	ff d0                	call   eax
c00100fd:	83 c4 10             	add    esp,0x10
c0010100:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010106:	85 c0                	test   eax,eax
c0010108:	74 09                	je     c0010113 <VgaText::load()+0x4f>
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	53                   	push   ebx
c001010e:	ff d0                	call   eax
c0010110:	83 c4 10             	add    esp,0x10
c0010113:	83 c4 58             	add    esp,0x58
c0010116:	5b                   	pop    ebx
c0010117:	c3                   	ret    

c0010118 <VgaText::updateCursor()>:
c0010118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011c:	39 05 84 b1 02 c0    	cmp    DWORD PTR ds:0xc002b184,eax
c0010122:	75 0c                	jne    c0010130 <VgaText::updateCursor()+0x18>
c0010124:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001012a:	85 c0                	test   eax,eax
c001012c:	74 02                	je     c0010130 <VgaText::updateCursor()+0x18>
c001012e:	ff e0                	jmp    eax
c0010130:	c3                   	ret    
c0010131:	90                   	nop

c0010132 <VgaText::showCursor(bool)>:
c0010132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010136:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001013a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010140:	c3                   	ret    
c0010141:	90                   	nop

c0010142 <VgaText::disableBlink(bool)>:
c0010142:	56                   	push   esi
c0010143:	53                   	push   ebx
c0010144:	51                   	push   ecx
c0010145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010149:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001014d:	39 1d 84 b1 02 c0    	cmp    DWORD PTR ds:0xc002b184,ebx
c0010153:	75 18                	jne    c001016d <VgaText::disableBlink(bool)+0x2b>
c0010155:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001015b:	85 c0                	test   eax,eax
c001015d:	74 0e                	je     c001016d <VgaText::disableBlink(bool)+0x2b>
c001015f:	89 f1                	mov    ecx,esi
c0010161:	52                   	push   edx
c0010162:	52                   	push   edx
c0010163:	0f b6 d1             	movzx  edx,cl
c0010166:	52                   	push   edx
c0010167:	53                   	push   ebx
c0010168:	ff d0                	call   eax
c001016a:	83 c4 10             	add    esp,0x10
c001016d:	89 f0                	mov    eax,esi
c001016f:	83 f0 01             	xor    eax,0x1
c0010172:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010178:	58                   	pop    eax
c0010179:	5b                   	pop    ebx
c001017a:	5e                   	pop    esi
c001017b:	c3                   	ret    

c001017c <VgaText::doANSI_SGR(int)>:
c001017c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010184:	85 d2                	test   edx,edx
c0010186:	75 14                	jne    c001019c <VgaText::doANSI_SGR(int)+0x20>
c0010188:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001018e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010194:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001019a:	eb 65                	jmp    c0010201 <VgaText::doANSI_SGR(int)+0x85>
c001019c:	83 fa 07             	cmp    edx,0x7
c001019f:	75 14                	jne    c00101b5 <VgaText::doANSI_SGR(int)+0x39>
c00101a1:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00101a7:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00101ad:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00101b3:	eb 4c                	jmp    c0010201 <VgaText::doANSI_SGR(int)+0x85>
c00101b5:	83 fa 1b             	cmp    edx,0x1b
c00101b8:	74 ce                	je     c0010188 <VgaText::doANSI_SGR(int)+0xc>
c00101ba:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00101bd:	83 f9 07             	cmp    ecx,0x7
c00101c0:	77 09                	ja     c00101cb <VgaText::doANSI_SGR(int)+0x4f>
c00101c2:	8b 14 8d a0 a0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd5f60]
c00101c9:	eb 20                	jmp    c00101eb <VgaText::doANSI_SGR(int)+0x6f>
c00101cb:	8d 4a d8             	lea    ecx,[edx-0x28]
c00101ce:	83 f9 07             	cmp    ecx,0x7
c00101d1:	77 09                	ja     c00101dc <VgaText::doANSI_SGR(int)+0x60>
c00101d3:	8b 14 8d a0 a0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd5f60]
c00101da:	eb 25                	jmp    c0010201 <VgaText::doANSI_SGR(int)+0x85>
c00101dc:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00101df:	83 f9 07             	cmp    ecx,0x7
c00101e2:	77 0e                	ja     c00101f2 <VgaText::doANSI_SGR(int)+0x76>
c00101e4:	8b 14 95 58 9f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd60a8]
c00101eb:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101f1:	c3                   	ret    
c00101f2:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00101f5:	83 f9 07             	cmp    ecx,0x7
c00101f8:	77 0d                	ja     c0010207 <VgaText::doANSI_SGR(int)+0x8b>
c00101fa:	8b 14 95 30 9f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd60d0]
c0010201:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010207:	c3                   	ret    

c0010208 <VgaText::setDefaultBgColour(VgaColour)>:
c0010208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001020c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010210:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010216:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001021c:	c3                   	ret    
c001021d:	90                   	nop

c001021e <VgaText::setDefaultFgColour(VgaColour)>:
c001021e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010222:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010226:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001022c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010232:	c3                   	ret    
c0010233:	90                   	nop

c0010234 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010234:	53                   	push   ebx
c0010235:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010239:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001023d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010241:	51                   	push   ecx
c0010242:	e8 c1 ff ff ff       	call   c0010208 <VgaText::setDefaultBgColour(VgaColour)>
c0010247:	58                   	pop    eax
c0010248:	5a                   	pop    edx
c0010249:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001024d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010251:	5b                   	pop    ebx
c0010252:	eb ca                	jmp    c001021e <VgaText::setDefaultFgColour(VgaColour)>

c0010254 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010254:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010258:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001025d:	83 e0 0f             	and    eax,0xf
c0010260:	c1 e2 04             	shl    edx,0x4
c0010263:	09 d0                	or     eax,edx
c0010265:	c3                   	ret    

c0010266 <VgaText::scrollScreen()>:
c0010266:	57                   	push   edi
c0010267:	56                   	push   esi
c0010268:	be 01 00 00 00       	mov    esi,0x1
c001026d:	53                   	push   ebx
c001026e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010272:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010278:	31 ff                	xor    edi,edi
c001027a:	01 d9                	add    ecx,ebx
c001027c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001027f:	83 fe 17             	cmp    esi,0x17
c0010282:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010288:	75 28                	jne    c00102b2 <VgaText::scrollScreen()+0x4c>
c001028a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010290:	74 1c                	je     c00102ae <VgaText::scrollScreen()+0x48>
c0010292:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010299:	50                   	push   eax
c001029a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00102a1:	50                   	push   eax
c00102a2:	e8 ad ff ff ff       	call   c0010254 <VgaText::combineColours(unsigned char, unsigned char)>
c00102a7:	5a                   	pop    edx
c00102a8:	5a                   	pop    edx
c00102a9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00102ac:	eb 04                	jmp    c00102b2 <VgaText::scrollScreen()+0x4c>
c00102ae:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00102b2:	47                   	inc    edi
c00102b3:	41                   	inc    ecx
c00102b4:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00102ba:	75 c0                	jne    c001027c <VgaText::scrollScreen()+0x16>
c00102bc:	46                   	inc    esi
c00102bd:	83 fe 18             	cmp    esi,0x18
c00102c0:	75 b0                	jne    c0010272 <VgaText::scrollScreen()+0xc>
c00102c2:	39 1d 84 b1 02 c0    	cmp    DWORD PTR ds:0xc002b184,ebx
c00102c8:	75 24                	jne    c00102ee <VgaText::scrollScreen()+0x88>
c00102ca:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00102d1:	74 08                	je     c00102db <VgaText::scrollScreen()+0x75>
c00102d3:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00102d9:	eb 13                	jmp    c00102ee <VgaText::scrollScreen()+0x88>
c00102db:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00102e1:	85 c0                	test   eax,eax
c00102e3:	74 09                	je     c00102ee <VgaText::scrollScreen()+0x88>
c00102e5:	83 ec 0c             	sub    esp,0xc
c00102e8:	53                   	push   ebx
c00102e9:	ff d0                	call   eax
c00102eb:	83 c4 10             	add    esp,0x10
c00102ee:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00102f2:	5b                   	pop    ebx
c00102f3:	5e                   	pop    esi
c00102f4:	5f                   	pop    edi
c00102f5:	e9 1e fe ff ff       	jmp    c0010118 <VgaText::updateCursor()>

c00102fa <VgaText::combineCharAndColour(char, unsigned char)>:
c00102fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102ff:	c1 e0 08             	shl    eax,0x8
c0010302:	89 c2                	mov    edx,eax
c0010304:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010309:	09 d0                	or     eax,edx
c001030b:	c3                   	ret    

c001030c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001030c:	53                   	push   ebx
c001030d:	83 ec 08             	sub    esp,0x8
c0010310:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010314:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010319:	50                   	push   eax
c001031a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001031f:	50                   	push   eax
c0010320:	e8 2f ff ff ff       	call   c0010254 <VgaText::combineColours(unsigned char, unsigned char)>
c0010325:	5a                   	pop    edx
c0010326:	0f b6 c0             	movzx  eax,al
c0010329:	5b                   	pop    ebx
c001032a:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001032f:	50                   	push   eax
c0010330:	53                   	push   ebx
c0010331:	e8 c4 ff ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c0010336:	5a                   	pop    edx
c0010337:	5a                   	pop    edx
c0010338:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001033e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010342:	0f b7 d2             	movzx  edx,dx
c0010345:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001034a:	39 0d 84 b1 02 c0    	cmp    DWORD PTR ds:0xc002b184,ecx
c0010350:	75 14                	jne    c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010352:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010358:	85 c0                	test   eax,eax
c001035a:	74 0a                	je     c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001035c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010360:	83 c4 08             	add    esp,0x8
c0010363:	5b                   	pop    ebx
c0010364:	ff e0                	jmp    eax
c0010366:	83 c4 08             	add    esp,0x8
c0010369:	5b                   	pop    ebx
c001036a:	c3                   	ret    
c001036b:	90                   	nop

c001036c <VgaText::getCursorX()>:
c001036c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010370:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010376:	c3                   	ret    
c0010377:	90                   	nop

c0010378 <VgaText::getCursorY()>:
c0010378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001037c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010382:	c3                   	ret    
c0010383:	90                   	nop

c0010384 <VgaText::setCursor(int, int)>:
c0010384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010388:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001038c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010392:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010396:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001039c:	e9 77 fd ff ff       	jmp    c0010118 <VgaText::updateCursor()>
c00103a1:	90                   	nop

c00103a2 <VgaText::setCursorX(int)>:
c00103a2:	83 ec 10             	sub    esp,0x10
c00103a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103a9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00103af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b3:	50                   	push   eax
c00103b4:	e8 cb ff ff ff       	call   c0010384 <VgaText::setCursor(int, int)>
c00103b9:	83 c4 1c             	add    esp,0x1c
c00103bc:	c3                   	ret    
c00103bd:	90                   	nop

c00103be <VgaText::setCursorY(int)>:
c00103be:	83 ec 10             	sub    esp,0x10
c00103c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103c9:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00103cf:	50                   	push   eax
c00103d0:	e8 af ff ff ff       	call   c0010384 <VgaText::setCursor(int, int)>
c00103d5:	83 c4 1c             	add    esp,0x1c
c00103d8:	c3                   	ret    
c00103d9:	90                   	nop

c00103da <VgaText::incrementCursor(bool)>:
c00103da:	56                   	push   esi
c00103db:	53                   	push   ebx
c00103dc:	51                   	push   ecx
c00103dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103e5:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00103eb:	40                   	inc    eax
c00103ec:	83 f8 50             	cmp    eax,0x50
c00103ef:	74 08                	je     c00103f9 <VgaText::incrementCursor(bool)+0x1f>
c00103f1:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00103f7:	eb 33                	jmp    c001042c <VgaText::incrementCursor(bool)+0x52>
c00103f9:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103ff:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010409:	8d 50 01             	lea    edx,[eax+0x1]
c001040c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010412:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010418:	75 12                	jne    c001042c <VgaText::incrementCursor(bool)+0x52>
c001041a:	83 ec 0c             	sub    esp,0xc
c001041d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010423:	53                   	push   ebx
c0010424:	e8 3d fe ff ff       	call   c0010266 <VgaText::scrollScreen()>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	89 f0                	mov    eax,esi
c001042e:	84 c0                	test   al,al
c0010430:	74 0c                	je     c001043e <VgaText::incrementCursor(bool)+0x64>
c0010432:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010436:	5a                   	pop    edx
c0010437:	5b                   	pop    ebx
c0010438:	5e                   	pop    esi
c0010439:	e9 da fc ff ff       	jmp    c0010118 <VgaText::updateCursor()>
c001043e:	58                   	pop    eax
c001043f:	5b                   	pop    ebx
c0010440:	5e                   	pop    esi
c0010441:	c3                   	ret    

c0010442 <VgaText::updateRAMUsageDisplay(int)>:
c0010442:	53                   	push   ebx
c0010443:	bb 0a 00 00 00       	mov    ebx,0xa
c0010448:	6a 0f                	push   0xf
c001044a:	6a 00                	push   0x0
c001044c:	e8 03 fe ff ff       	call   c0010254 <VgaText::combineColours(unsigned char, unsigned char)>
c0010451:	5a                   	pop    edx
c0010452:	59                   	pop    ecx
c0010453:	0f b6 c8             	movzx  ecx,al
c0010456:	51                   	push   ecx
c0010457:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001045b:	99                   	cdq    
c001045c:	f7 fb                	idiv   ebx
c001045e:	89 d3                	mov    ebx,edx
c0010460:	83 c0 30             	add    eax,0x30
c0010463:	83 c3 30             	add    ebx,0x30
c0010466:	0f be c0             	movsx  eax,al
c0010469:	0f b6 db             	movzx  ebx,bl
c001046c:	50                   	push   eax
c001046d:	e8 88 fe ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c0010472:	5a                   	pop    edx
c0010473:	5a                   	pop    edx
c0010474:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c001047a:	51                   	push   ecx
c001047b:	53                   	push   ebx
c001047c:	e8 79 fe ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c0010481:	5b                   	pop    ebx
c0010482:	5a                   	pop    edx
c0010483:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010489:	51                   	push   ecx
c001048a:	6a 25                	push   0x25
c001048c:	e8 69 fe ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c0010491:	59                   	pop    ecx
c0010492:	5b                   	pop    ebx
c0010493:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010499:	5b                   	pop    ebx
c001049a:	c3                   	ret    
c001049b:	90                   	nop

c001049c <VgaText::updateDiskUsage()>:
c001049c:	55                   	push   ebp
c001049d:	bd 10 27 00 00       	mov    ebp,0x2710
c00104a2:	57                   	push   edi
c00104a3:	56                   	push   esi
c00104a4:	53                   	push   ebx
c00104a5:	6a 0f                	push   0xf
c00104a7:	6a 00                	push   0x0
c00104a9:	e8 a6 fd ff ff       	call   c0010254 <VgaText::combineColours(unsigned char, unsigned char)>
c00104ae:	5a                   	pop    edx
c00104af:	0f b6 d8             	movzx  ebx,al
c00104b2:	59                   	pop    ecx
c00104b3:	a1 88 d3 02 c0       	mov    eax,ds:0xc002d388
c00104b8:	53                   	push   ebx
c00104b9:	b9 0a 00 00 00       	mov    ecx,0xa
c00104be:	99                   	cdq    
c00104bf:	f7 fd                	idiv   ebp
c00104c1:	99                   	cdq    
c00104c2:	f7 f9                	idiv   ecx
c00104c4:	8d 42 30             	lea    eax,[edx+0x30]
c00104c7:	0f b6 c0             	movzx  eax,al
c00104ca:	50                   	push   eax
c00104cb:	e8 2a fe ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c00104d0:	5e                   	pop    esi
c00104d1:	5f                   	pop    edi
c00104d2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c00104d8:	bf e8 03 00 00       	mov    edi,0x3e8
c00104dd:	53                   	push   ebx
c00104de:	a1 88 d3 02 c0       	mov    eax,ds:0xc002d388
c00104e3:	99                   	cdq    
c00104e4:	f7 ff                	idiv   edi
c00104e6:	99                   	cdq    
c00104e7:	f7 f9                	idiv   ecx
c00104e9:	8d 42 30             	lea    eax,[edx+0x30]
c00104ec:	0f b6 c0             	movzx  eax,al
c00104ef:	50                   	push   eax
c00104f0:	e8 05 fe ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c00104f5:	5a                   	pop    edx
c00104f6:	5e                   	pop    esi
c00104f7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c00104fd:	be 64 00 00 00       	mov    esi,0x64
c0010502:	53                   	push   ebx
c0010503:	a1 88 d3 02 c0       	mov    eax,ds:0xc002d388
c0010508:	99                   	cdq    
c0010509:	f7 fe                	idiv   esi
c001050b:	99                   	cdq    
c001050c:	f7 f9                	idiv   ecx
c001050e:	8d 42 30             	lea    eax,[edx+0x30]
c0010511:	0f b6 c0             	movzx  eax,al
c0010514:	50                   	push   eax
c0010515:	e8 e0 fd ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c001051a:	5a                   	pop    edx
c001051b:	5a                   	pop    edx
c001051c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010522:	53                   	push   ebx
c0010523:	a1 88 d3 02 c0       	mov    eax,ds:0xc002d388
c0010528:	99                   	cdq    
c0010529:	f7 f9                	idiv   ecx
c001052b:	99                   	cdq    
c001052c:	f7 f9                	idiv   ecx
c001052e:	8d 42 30             	lea    eax,[edx+0x30]
c0010531:	0f b6 c0             	movzx  eax,al
c0010534:	50                   	push   eax
c0010535:	e8 c0 fd ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c001053a:	5a                   	pop    edx
c001053b:	5a                   	pop    edx
c001053c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010542:	53                   	push   ebx
c0010543:	a1 88 d3 02 c0       	mov    eax,ds:0xc002d388
c0010548:	99                   	cdq    
c0010549:	f7 f9                	idiv   ecx
c001054b:	8d 42 30             	lea    eax,[edx+0x30]
c001054e:	0f b6 c0             	movzx  eax,al
c0010551:	50                   	push   eax
c0010552:	e8 a3 fd ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c0010557:	5a                   	pop    edx
c0010558:	5a                   	pop    edx
c0010559:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001055f:	53                   	push   ebx
c0010560:	a1 84 d3 02 c0       	mov    eax,ds:0xc002d384
c0010565:	99                   	cdq    
c0010566:	f7 fd                	idiv   ebp
c0010568:	99                   	cdq    
c0010569:	f7 f9                	idiv   ecx
c001056b:	8d 42 30             	lea    eax,[edx+0x30]
c001056e:	0f b6 c0             	movzx  eax,al
c0010571:	50                   	push   eax
c0010572:	e8 83 fd ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c0010577:	5d                   	pop    ebp
c0010578:	5a                   	pop    edx
c0010579:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001057f:	53                   	push   ebx
c0010580:	a1 84 d3 02 c0       	mov    eax,ds:0xc002d384
c0010585:	99                   	cdq    
c0010586:	f7 ff                	idiv   edi
c0010588:	99                   	cdq    
c0010589:	f7 f9                	idiv   ecx
c001058b:	8d 42 30             	lea    eax,[edx+0x30]
c001058e:	0f b6 c0             	movzx  eax,al
c0010591:	50                   	push   eax
c0010592:	e8 63 fd ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c0010597:	5f                   	pop    edi
c0010598:	5d                   	pop    ebp
c0010599:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001059f:	53                   	push   ebx
c00105a0:	a1 84 d3 02 c0       	mov    eax,ds:0xc002d384
c00105a5:	99                   	cdq    
c00105a6:	f7 fe                	idiv   esi
c00105a8:	99                   	cdq    
c00105a9:	f7 f9                	idiv   ecx
c00105ab:	8d 42 30             	lea    eax,[edx+0x30]
c00105ae:	0f b6 c0             	movzx  eax,al
c00105b1:	50                   	push   eax
c00105b2:	e8 43 fd ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c00105b7:	5a                   	pop    edx
c00105b8:	5e                   	pop    esi
c00105b9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00105bf:	53                   	push   ebx
c00105c0:	a1 84 d3 02 c0       	mov    eax,ds:0xc002d384
c00105c5:	99                   	cdq    
c00105c6:	f7 f9                	idiv   ecx
c00105c8:	99                   	cdq    
c00105c9:	f7 f9                	idiv   ecx
c00105cb:	8d 42 30             	lea    eax,[edx+0x30]
c00105ce:	0f b6 c0             	movzx  eax,al
c00105d1:	50                   	push   eax
c00105d2:	e8 23 fd ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c00105d7:	5f                   	pop    edi
c00105d8:	5d                   	pop    ebp
c00105d9:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c00105df:	53                   	push   ebx
c00105e0:	a1 84 d3 02 c0       	mov    eax,ds:0xc002d384
c00105e5:	99                   	cdq    
c00105e6:	f7 f9                	idiv   ecx
c00105e8:	83 c2 30             	add    edx,0x30
c00105eb:	0f b6 d2             	movzx  edx,dl
c00105ee:	52                   	push   edx
c00105ef:	e8 06 fd ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c00105f4:	5a                   	pop    edx
c00105f5:	59                   	pop    ecx
c00105f6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c00105fc:	5b                   	pop    ebx
c00105fd:	5e                   	pop    esi
c00105fe:	5f                   	pop    edi
c00105ff:	5d                   	pop    ebp
c0010600:	c3                   	ret    
c0010601:	90                   	nop

c0010602 <VgaText::updateTitle()>:
c0010602:	53                   	push   ebx
c0010603:	31 c0                	xor    eax,eax
c0010605:	83 ec 58             	sub    esp,0x58
c0010608:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001060c:	89 e1                	mov    ecx,esp
c001060e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010612:	40                   	inc    eax
c0010613:	83 f8 50             	cmp    eax,0x50
c0010616:	75 f6                	jne    c001060e <VgaText::updateTitle()+0xc>
c0010618:	31 c0                	xor    eax,eax
c001061a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010621:	84 db                	test   bl,bl
c0010623:	74 06                	je     c001062b <VgaText::updateTitle()+0x29>
c0010625:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010628:	40                   	inc    eax
c0010629:	eb ef                	jmp    c001061a <VgaText::updateTitle()+0x18>
c001062b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010631:	85 c0                	test   eax,eax
c0010633:	74 09                	je     c001063e <VgaText::updateTitle()+0x3c>
c0010635:	53                   	push   ebx
c0010636:	53                   	push   ebx
c0010637:	51                   	push   ecx
c0010638:	52                   	push   edx
c0010639:	ff d0                	call   eax
c001063b:	83 c4 10             	add    esp,0x10
c001063e:	e8 59 fe ff ff       	call   c001049c <VgaText::updateDiskUsage()>
c0010643:	83 c4 58             	add    esp,0x58
c0010646:	5b                   	pop    ebx
c0010647:	c3                   	ret    

c0010648 <VgaText::setTitleTextColour(VgaColour)>:
c0010648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010650:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010656:	eb aa                	jmp    c0010602 <VgaText::updateTitle()>

c0010658 <VgaText::setTitleColour(VgaColour)>:
c0010658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001065c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010660:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010666:	eb 9a                	jmp    c0010602 <VgaText::updateTitle()>

c0010668 <VgaText::setTitle(char*)>:
c0010668:	53                   	push   ebx
c0010669:	83 ec 10             	sub    esp,0x10
c001066c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010674:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001067a:	50                   	push   eax
c001067b:	e8 9a 00 ff ff       	call   c000071a <strcpy>
c0010680:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010684:	83 c4 18             	add    esp,0x18
c0010687:	5b                   	pop    ebx
c0010688:	e9 75 ff ff ff       	jmp    c0010602 <VgaText::updateTitle()>
c001068d:	90                   	nop

c001068e <VgaText::decrementCursor(bool)>:
c001068e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010692:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010696:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001069c:	85 c0                	test   eax,eax
c001069e:	74 07                	je     c00106a7 <VgaText::decrementCursor(bool)+0x19>
c00106a0:	48                   	dec    eax
c00106a1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00106a7:	84 c9                	test   cl,cl
c00106a9:	74 09                	je     c00106b4 <VgaText::decrementCursor(bool)+0x26>
c00106ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106af:	e9 64 fa ff ff       	jmp    c0010118 <VgaText::updateCursor()>
c00106b4:	c3                   	ret    
c00106b5:	90                   	nop

c00106b6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00106b6:	53                   	push   ebx
c00106b7:	83 ec 08             	sub    esp,0x8
c00106ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00106ca:	3c 07                	cmp    al,0x7
c00106cc:	75 2a                	jne    c00106f8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00106ce:	a1 2c b2 02 c0       	mov    eax,ds:0xc002b22c
c00106d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00106db:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00106e3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00106eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106ef:	83 c4 08             	add    esp,0x8
c00106f2:	5b                   	pop    ebx
c00106f3:	e9 3a 2d 00 00       	jmp    c0013432 <Buzzer::beep(int, int, bool)>
c00106f8:	3c 0d                	cmp    al,0xd
c00106fa:	75 0c                	jne    c0010708 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00106fc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010706:	eb 3b                	jmp    c0010743 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010708:	3c 0a                	cmp    al,0xa
c001070a:	75 40                	jne    c001074c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001070c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010712:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001071c:	8d 50 01             	lea    edx,[eax+0x1]
c001071f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010725:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001072b:	75 12                	jne    c001073f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001072d:	83 ec 0c             	sub    esp,0xc
c0010730:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010736:	53                   	push   ebx
c0010737:	e8 2a fb ff ff       	call   c0010266 <VgaText::scrollScreen()>
c001073c:	83 c4 10             	add    esp,0x10
c001073f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010743:	83 c4 08             	add    esp,0x8
c0010746:	5b                   	pop    ebx
c0010747:	e9 cc f9 ff ff       	jmp    c0010118 <VgaText::updateCursor()>
c001074c:	3c 08                	cmp    al,0x8
c001074e:	75 31                	jne    c0010781 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010750:	50                   	push   eax
c0010751:	50                   	push   eax
c0010752:	6a 01                	push   0x1
c0010754:	53                   	push   ebx
c0010755:	e8 34 ff ff ff       	call   c001068e <VgaText::decrementCursor(bool)>
c001075a:	5a                   	pop    edx
c001075b:	59                   	pop    ecx
c001075c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010762:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010768:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001076e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010774:	6a 20                	push   0x20
c0010776:	53                   	push   ebx
c0010777:	e8 90 fb ff ff       	call   c001030c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001077c:	83 c4 28             	add    esp,0x28
c001077f:	5b                   	pop    ebx
c0010780:	c3                   	ret    
c0010781:	83 ec 08             	sub    esp,0x8
c0010784:	0f be c0             	movsx  eax,al
c0010787:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001078d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010793:	51                   	push   ecx
c0010794:	52                   	push   edx
c0010795:	50                   	push   eax
c0010796:	53                   	push   ebx
c0010797:	e8 70 fb ff ff       	call   c001030c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001079c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107a0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107a8:	83 c4 28             	add    esp,0x28
c00107ab:	5b                   	pop    ebx
c00107ac:	e9 29 fc ff ff       	jmp    c00103da <VgaText::incrementCursor(bool)>
c00107b1:	90                   	nop

c00107b2 <VgaText::isShowingCursor()>:
c00107b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00107bc:	c3                   	ret    
c00107bd:	90                   	nop

c00107be <VgaText::isBlinkDisabled()>:
c00107be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107c2:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00107c8:	83 f0 01             	xor    eax,0x1
c00107cb:	c3                   	ret    

c00107cc <VgaText::setCursorHeight(int)>:
c00107cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107d4:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00107da:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00107e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107e5:	e9 48 f9 ff ff       	jmp    c0010132 <VgaText::showCursor(bool)>

c00107ea <VgaText::getCursorHeight()>:
c00107ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ee:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c00107f4:	c3                   	ret    

c00107f5 <setActiveTerminal(VgaText*)>:
c00107f5:	53                   	push   ebx
c00107f6:	83 ec 08             	sub    esp,0x8
c00107f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107fd:	85 db                	test   ebx,ebx
c00107ff:	75 11                	jne    c0010812 <setActiveTerminal(VgaText*)+0x1d>
c0010801:	c7 44 24 10 cc 77 02 c0 	mov    DWORD PTR [esp+0x10],0xc00277cc
c0010809:	83 c4 08             	add    esp,0x8
c001080c:	5b                   	pop    ebx
c001080d:	e9 85 88 00 00       	jmp    c0019097 <Krnl::panic(char const*)>
c0010812:	50                   	push   eax
c0010813:	50                   	push   eax
c0010814:	53                   	push   ebx
c0010815:	68 da 77 02 c0       	push   0xc00277da
c001081a:	e8 14 1e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001081f:	a1 84 b1 02 c0       	mov    eax,ds:0xc002b184
c0010824:	83 c4 10             	add    esp,0x10
c0010827:	85 c0                	test   eax,eax
c0010829:	74 0c                	je     c0010837 <setActiveTerminal(VgaText*)+0x42>
c001082b:	83 ec 0c             	sub    esp,0xc
c001082e:	50                   	push   eax
c001082f:	e8 e4 f8 ff ff       	call   c0010118 <VgaText::updateCursor()>
c0010834:	83 c4 10             	add    esp,0x10
c0010837:	89 1d 84 b1 02 c0    	mov    DWORD PTR ds:0xc002b184,ebx
c001083d:	51                   	push   ecx
c001083e:	51                   	push   ecx
c001083f:	53                   	push   ebx
c0010840:	68 f2 77 02 c0       	push   0xc00277f2
c0010845:	e8 e9 1d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001084a:	83 c4 0c             	add    esp,0xc
c001084d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010853:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010859:	53                   	push   ebx
c001085a:	e8 25 fb ff ff       	call   c0010384 <VgaText::setCursor(int, int)>
c001085f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010862:	e8 57 ff ff ff       	call   c00107be <VgaText::isBlinkDisabled()>
c0010867:	5a                   	pop    edx
c0010868:	0f b6 c0             	movzx  eax,al
c001086b:	59                   	pop    ecx
c001086c:	50                   	push   eax
c001086d:	53                   	push   ebx
c001086e:	e8 cf f8 ff ff       	call   c0010142 <VgaText::disableBlink(bool)>
c0010873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010876:	e8 6f ff ff ff       	call   c00107ea <VgaText::getCursorHeight()>
c001087b:	5a                   	pop    edx
c001087c:	59                   	pop    ecx
c001087d:	50                   	push   eax
c001087e:	53                   	push   ebx
c001087f:	e8 48 ff ff ff       	call   c00107cc <VgaText::setCursorHeight(int)>
c0010884:	83 c4 10             	add    esp,0x10
c0010887:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001088e:	75 0a                	jne    c001089a <setActiveTerminal(VgaText*)+0xa5>
c0010890:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c001089a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001089e:	83 c4 08             	add    esp,0x8
c00108a1:	5b                   	pop    ebx
c00108a2:	e9 1d f8 ff ff       	jmp    c00100c4 <VgaText::load()>

c00108a7 <doTerminalCycle()>:
c00108a7:	83 ec 18             	sub    esp,0x18
c00108aa:	a1 80 b1 02 c0       	mov    eax,ds:0xc002b180
c00108af:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00108b5:	50                   	push   eax
c00108b6:	a3 80 b1 02 c0       	mov    ds:0xc002b180,eax
c00108bb:	e8 35 ff ff ff       	call   c00107f5 <setActiveTerminal(VgaText*)>
c00108c0:	83 c4 1c             	add    esp,0x1c
c00108c3:	c3                   	ret    

c00108c4 <VgaText::doUpdate()>:
c00108c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c8:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00108ce:	85 c0                	test   eax,eax
c00108d0:	74 02                	je     c00108d4 <VgaText::doUpdate()+0x10>
c00108d2:	ff e0                	jmp    eax
c00108d4:	c3                   	ret    
c00108d5:	90                   	nop

c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00108d6:	55                   	push   ebp
c00108d7:	57                   	push   edi
c00108d8:	56                   	push   esi
c00108d9:	53                   	push   ebx
c00108da:	83 ec 1c             	sub    esp,0x1c
c00108dd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00108e1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00108e6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c00108ed:	8d 7d 0c             	lea    edi,[ebp+0xc]
c00108f0:	50                   	push   eax
c00108f1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00108f6:	50                   	push   eax
c00108f7:	e8 58 f9 ff ff       	call   c0010254 <VgaText::combineColours(unsigned char, unsigned char)>
c00108fc:	59                   	pop    ecx
c00108fd:	0f b6 c0             	movzx  eax,al
c0010900:	5b                   	pop    ebx
c0010901:	31 c9                	xor    ecx,ecx
c0010903:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001090b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001090f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010915:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010919:	0f b7 db             	movzx  ebx,bx
c001091c:	01 db                	add    ebx,ebx
c001091e:	01 fb                	add    ebx,edi
c0010920:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010923:	84 c0                	test   al,al
c0010925:	0f 84 38 01 00 00    	je     c0010a63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001092b:	3c 0d                	cmp    al,0xd
c001092d:	75 0f                	jne    c001093e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001092f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010939:	e9 1f 01 00 00       	jmp    c0010a5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001093e:	3c 0a                	cmp    al,0xa
c0010940:	75 5b                	jne    c001099d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010942:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010948:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010952:	8d 48 01             	lea    ecx,[eax+0x1]
c0010955:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c001095b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010961:	75 12                	jne    c0010975 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010963:	83 ec 0c             	sub    esp,0xc
c0010966:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001096c:	55                   	push   ebp
c001096d:	e8 f4 f8 ff ff       	call   c0010266 <VgaText::scrollScreen()>
c0010972:	83 c4 10             	add    esp,0x10
c0010975:	83 ec 0c             	sub    esp,0xc
c0010978:	55                   	push   ebp
c0010979:	e8 9a f7 ff ff       	call   c0010118 <VgaText::updateCursor()>
c001097e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010986:	83 c4 10             	add    esp,0x10
c0010989:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001098f:	31 c9                	xor    ecx,ecx
c0010991:	0f b7 db             	movzx  ebx,bx
c0010994:	01 db                	add    ebx,ebx
c0010996:	01 fb                	add    ebx,edi
c0010998:	e9 c0 00 00 00       	jmp    c0010a5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001099d:	3c 08                	cmp    al,0x8
c001099f:	75 4e                	jne    c00109ef <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00109a1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109a5:	53                   	push   ebx
c00109a6:	53                   	push   ebx
c00109a7:	6a 01                	push   0x1
c00109a9:	55                   	push   ebp
c00109aa:	e8 df fc ff ff       	call   c001068e <VgaText::decrementCursor(bool)>
c00109af:	58                   	pop    eax
c00109b0:	5a                   	pop    edx
c00109b1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00109b7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00109bd:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00109c3:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00109c9:	6a 20                	push   0x20
c00109cb:	55                   	push   ebp
c00109cc:	e8 3b f9 ff ff       	call   c001030c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109d1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109d9:	83 c4 20             	add    esp,0x20
c00109dc:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109e6:	0f b7 db             	movzx  ebx,bx
c00109e9:	01 db                	add    ebx,ebx
c00109eb:	01 fb                	add    ebx,edi
c00109ed:	eb 6e                	jmp    c0010a5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109ef:	51                   	push   ecx
c00109f0:	51                   	push   ecx
c00109f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00109f5:	50                   	push   eax
c00109f6:	e8 ff f8 ff ff       	call   c00102fa <VgaText::combineCharAndColour(char, unsigned char)>
c00109fb:	83 c4 10             	add    esp,0x10
c00109fe:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a01:	39 2d 84 b1 02 c0    	cmp    DWORD PTR ds:0xc002b184,ebp
c0010a07:	75 2a                	jne    c0010a33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a09:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a0f:	85 c0                	test   eax,eax
c0010a11:	74 20                	je     c0010a33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a13:	52                   	push   edx
c0010a14:	52                   	push   edx
c0010a15:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a1b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a29:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a2c:	51                   	push   ecx
c0010a2d:	55                   	push   ebp
c0010a2e:	ff d0                	call   eax
c0010a30:	83 c4 20             	add    esp,0x20
c0010a33:	83 c3 02             	add    ebx,0x2
c0010a36:	50                   	push   eax
c0010a37:	50                   	push   eax
c0010a38:	6a 00                	push   0x0
c0010a3a:	55                   	push   ebp
c0010a3b:	e8 9a f9 ff ff       	call   c00103da <VgaText::incrementCursor(bool)>
c0010a40:	83 c4 10             	add    esp,0x10
c0010a43:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010a4a:	75 0f                	jne    c0010a5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010a4c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a54:	0f b7 db             	movzx  ebx,bx
c0010a57:	01 db                	add    ebx,ebx
c0010a59:	01 fb                	add    ebx,edi
c0010a5b:	b1 01                	mov    cl,0x1
c0010a5d:	46                   	inc    esi
c0010a5e:	e9 bd fe ff ff       	jmp    c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010a63:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010a67:	83 ec 0c             	sub    esp,0xc
c0010a6a:	55                   	push   ebp
c0010a6b:	e8 a8 f6 ff ff       	call   c0010118 <VgaText::updateCursor()>
c0010a70:	83 c4 10             	add    esp,0x10
c0010a73:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010a77:	84 c9                	test   cl,cl
c0010a79:	74 0c                	je     c0010a87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010a7b:	83 ec 0c             	sub    esp,0xc
c0010a7e:	55                   	push   ebp
c0010a7f:	e8 40 fe ff ff       	call   c00108c4 <VgaText::doUpdate()>
c0010a84:	83 c4 10             	add    esp,0x10
c0010a87:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010a8e:	83 c4 1c             	add    esp,0x1c
c0010a91:	5b                   	pop    ebx
c0010a92:	5e                   	pop    esi
c0010a93:	5f                   	pop    edi
c0010a94:	5d                   	pop    ebp
c0010a95:	c3                   	ret    

c0010a96 <VgaText::clearScreen()>:
c0010a96:	57                   	push   edi
c0010a97:	56                   	push   esi
c0010a98:	31 f6                	xor    esi,esi
c0010a9a:	53                   	push   ebx
c0010a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a9f:	52                   	push   edx
c0010aa0:	6a 00                	push   0x0
c0010aa2:	6a 00                	push   0x0
c0010aa4:	53                   	push   ebx
c0010aa5:	e8 da f8 ff ff       	call   c0010384 <VgaText::setCursor(int, int)>
c0010aaa:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010ab1:	83 c4 10             	add    esp,0x10
c0010ab4:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010aba:	7e 26                	jle    c0010ae2 <VgaText::clearScreen()+0x4c>
c0010abc:	31 ff                	xor    edi,edi
c0010abe:	50                   	push   eax
c0010abf:	50                   	push   eax
c0010ac0:	56                   	push   esi
c0010ac1:	57                   	push   edi
c0010ac2:	47                   	inc    edi
c0010ac3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ac9:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010acf:	6a 20                	push   0x20
c0010ad1:	53                   	push   ebx
c0010ad2:	e8 35 f8 ff ff       	call   c001030c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ad7:	83 c4 20             	add    esp,0x20
c0010ada:	83 ff 50             	cmp    edi,0x50
c0010add:	75 df                	jne    c0010abe <VgaText::clearScreen()+0x28>
c0010adf:	46                   	inc    esi
c0010ae0:	eb d2                	jmp    c0010ab4 <VgaText::clearScreen()+0x1e>
c0010ae2:	83 ec 0c             	sub    esp,0xc
c0010ae5:	53                   	push   ebx
c0010ae6:	e8 d9 fd ff ff       	call   c00108c4 <VgaText::doUpdate()>
c0010aeb:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010af2:	83 c4 10             	add    esp,0x10
c0010af5:	5b                   	pop    ebx
c0010af6:	5e                   	pop    esi
c0010af7:	5f                   	pop    edi
c0010af8:	c3                   	ret    
c0010af9:	90                   	nop

c0010afa <VgaText::putchar(char)>:
c0010afa:	56                   	push   esi
c0010afb:	53                   	push   ebx
c0010afc:	83 ec 14             	sub    esp,0x14
c0010aff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b07:	3c 5b                	cmp    al,0x5b
c0010b09:	75 21                	jne    c0010b2c <VgaText::putchar(char)+0x32>
c0010b0b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b12:	74 28                	je     c0010b3c <VgaText::putchar(char)+0x42>
c0010b14:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b1d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b27:	e9 e2 00 00 00       	jmp    c0010c0e <VgaText::putchar(char)+0x114>
c0010b2c:	3c 1b                	cmp    al,0x1b
c0010b2e:	75 0c                	jne    c0010b3c <VgaText::putchar(char)+0x42>
c0010b30:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010b37:	e9 d2 00 00 00       	jmp    c0010c0e <VgaText::putchar(char)+0x114>
c0010b3c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010b42:	84 c9                	test   cl,cl
c0010b44:	0f 84 ab 00 00 00    	je     c0010bf5 <VgaText::putchar(char)+0xfb>
c0010b4a:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b4d:	80 fa 3e             	cmp    dl,0x3e
c0010b50:	0f 87 82 00 00 00    	ja     c0010bd8 <VgaText::putchar(char)+0xde>
c0010b56:	3c 6d                	cmp    al,0x6d
c0010b58:	75 4d                	jne    c0010ba7 <VgaText::putchar(char)+0xad>
c0010b5a:	31 f6                	xor    esi,esi
c0010b5c:	31 d2                	xor    edx,edx
c0010b5e:	31 c0                	xor    eax,eax
c0010b60:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010b66:	7e 30                	jle    c0010b98 <VgaText::putchar(char)+0x9e>
c0010b68:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010b70:	80 fa 3b             	cmp    dl,0x3b
c0010b73:	75 17                	jne    c0010b8c <VgaText::putchar(char)+0x92>
c0010b75:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b79:	50                   	push   eax
c0010b7a:	53                   	push   ebx
c0010b7b:	e8 fc f5 ff ff       	call   c001017c <VgaText::doANSI_SGR(int)>
c0010b80:	59                   	pop    ecx
c0010b81:	31 d2                	xor    edx,edx
c0010b83:	58                   	pop    eax
c0010b84:	31 c0                	xor    eax,eax
c0010b86:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b8a:	eb 09                	jmp    c0010b95 <VgaText::putchar(char)+0x9b>
c0010b8c:	6b c0 0a             	imul   eax,eax,0xa
c0010b8f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010b93:	88 ca                	mov    dl,cl
c0010b95:	46                   	inc    esi
c0010b96:	eb c8                	jmp    c0010b60 <VgaText::putchar(char)+0x66>
c0010b98:	84 d2                	test   dl,dl
c0010b9a:	74 31                	je     c0010bcd <VgaText::putchar(char)+0xd3>
c0010b9c:	50                   	push   eax
c0010b9d:	53                   	push   ebx
c0010b9e:	e8 d9 f5 ff ff       	call   c001017c <VgaText::doANSI_SGR(int)>
c0010ba3:	58                   	pop    eax
c0010ba4:	5a                   	pop    edx
c0010ba5:	eb 26                	jmp    c0010bcd <VgaText::putchar(char)+0xd3>
c0010ba7:	3c 4a                	cmp    al,0x4a
c0010ba9:	75 22                	jne    c0010bcd <VgaText::putchar(char)+0xd3>
c0010bab:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010bb2:	75 19                	jne    c0010bcd <VgaText::putchar(char)+0xd3>
c0010bb4:	83 ec 0c             	sub    esp,0xc
c0010bb7:	53                   	push   ebx
c0010bb8:	e8 d9 fe ff ff       	call   c0010a96 <VgaText::clearScreen()>
c0010bbd:	83 c4 0c             	add    esp,0xc
c0010bc0:	6a 00                	push   0x0
c0010bc2:	6a 00                	push   0x0
c0010bc4:	53                   	push   ebx
c0010bc5:	e8 ba f7 ff ff       	call   c0010384 <VgaText::setCursor(int, int)>
c0010bca:	83 c4 10             	add    esp,0x10
c0010bcd:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010bd6:	eb 36                	jmp    c0010c0e <VgaText::putchar(char)+0x114>
c0010bd8:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010bde:	83 fa 0e             	cmp    edx,0xe
c0010be1:	7f 2b                	jg     c0010c0e <VgaText::putchar(char)+0x114>
c0010be3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010be6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010bec:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010bf3:	eb 19                	jmp    c0010c0e <VgaText::putchar(char)+0x114>
c0010bf5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010bfb:	0f be c0             	movsx  eax,al
c0010bfe:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c04:	50                   	push   eax
c0010c05:	53                   	push   ebx
c0010c06:	e8 ab fa ff ff       	call   c00106b6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c0b:	83 c4 10             	add    esp,0x10
c0010c0e:	83 c4 14             	add    esp,0x14
c0010c11:	5b                   	pop    ebx
c0010c12:	5e                   	pop    esi
c0010c13:	c3                   	ret    

c0010c14 <VgaText::puts(char const*)>:
c0010c14:	53                   	push   ebx
c0010c15:	83 ec 08             	sub    esp,0x8
c0010c18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c1f:	84 c0                	test   al,al
c0010c21:	74 12                	je     c0010c35 <VgaText::puts(char const*)+0x21>
c0010c23:	43                   	inc    ebx
c0010c24:	51                   	push   ecx
c0010c25:	51                   	push   ecx
c0010c26:	50                   	push   eax
c0010c27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2b:	e8 ca fe ff ff       	call   c0010afa <VgaText::putchar(char)>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	eb e7                	jmp    c0010c1c <VgaText::puts(char const*)+0x8>
c0010c35:	83 c4 08             	add    esp,0x8
c0010c38:	5b                   	pop    ebx
c0010c39:	c3                   	ret    

c0010c3a <VgaText::putx(unsigned int)>:
c0010c3a:	57                   	push   edi
c0010c3b:	b9 11 00 00 00       	mov    ecx,0x11
c0010c40:	56                   	push   esi
c0010c41:	be 0e 78 02 c0       	mov    esi,0xc002780e
c0010c46:	53                   	push   ebx
c0010c47:	83 ec 20             	sub    esp,0x20
c0010c4a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c4e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c52:	fc                   	cld    
c0010c53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c55:	be 08 00 00 00       	mov    esi,0x8
c0010c5a:	50                   	push   eax
c0010c5b:	50                   	push   eax
c0010c5c:	89 d8                	mov    eax,ebx
c0010c5e:	c1 e3 04             	shl    ebx,0x4
c0010c61:	c1 e8 1c             	shr    eax,0x1c
c0010c64:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c69:	50                   	push   eax
c0010c6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c6e:	e8 87 fe ff ff       	call   c0010afa <VgaText::putchar(char)>
c0010c73:	83 c4 10             	add    esp,0x10
c0010c76:	4e                   	dec    esi
c0010c77:	75 e1                	jne    c0010c5a <VgaText::putx(unsigned int)+0x20>
c0010c79:	83 c4 20             	add    esp,0x20
c0010c7c:	5b                   	pop    ebx
c0010c7d:	5e                   	pop    esi
c0010c7e:	5f                   	pop    edi
c0010c7f:	c3                   	ret    

c0010c80 <VgaText::VgaText(char const*)>:
c0010c80:	57                   	push   edi
c0010c81:	56                   	push   esi
c0010c82:	53                   	push   ebx
c0010c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c87:	83 ec 08             	sub    esp,0x8
c0010c8a:	6a 00                	push   0x0
c0010c8c:	50                   	push   eax
c0010c8d:	e8 6e 05 00 00       	call   c0011200 <UnixFile::UnixFile(int)>
c0010c92:	83 c4 10             	add    esp,0x10
c0010c95:	ba 74 78 02 c0       	mov    edx,0xc0027874
c0010c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c9e:	89 10                	mov    DWORD PTR [eax],edx
c0010ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca4:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb2:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc0:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ccb:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd6:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cfd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d08:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d0e:	bb 60 b1 02 c0       	mov    ebx,0xc002b160
c0010d13:	b8 08 00 00 00       	mov    eax,0x8
c0010d18:	fc                   	cld    
c0010d19:	89 d7                	mov    edi,edx
c0010d1b:	89 de                	mov    esi,ebx
c0010d1d:	89 c1                	mov    ecx,eax
c0010d1f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d25:	05 1e 10 00 00       	add    eax,0x101e
c0010d2a:	83 ec 08             	sub    esp,0x8
c0010d2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d31:	50                   	push   eax
c0010d32:	e8 e3 f9 fe ff       	call   c000071a <strcpy>
c0010d37:	83 c4 10             	add    esp,0x10
c0010d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d3e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4c:	83 c0 0c             	add    eax,0xc
c0010d4f:	83 ec 04             	sub    esp,0x4
c0010d52:	68 00 0f 00 00       	push   0xf00
c0010d57:	6a 00                	push   0x0
c0010d59:	50                   	push   eax
c0010d5a:	e8 1c f9 fe ff       	call   c000067b <memset>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	83 ec 04             	sub    esp,0x4
c0010d65:	6a 00                	push   0x0
c0010d67:	6a 07                	push   0x7
c0010d69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d6d:	e8 c2 f4 ff ff       	call   c0010234 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010d72:	83 c4 10             	add    esp,0x10
c0010d75:	83 ec 08             	sub    esp,0x8
c0010d78:	6a 02                	push   0x2
c0010d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d7e:	e8 49 fa ff ff       	call   c00107cc <VgaText::setCursorHeight(int)>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	83 ec 04             	sub    esp,0x4
c0010d89:	6a 00                	push   0x0
c0010d8b:	6a 00                	push   0x0
c0010d8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d91:	e8 ee f5 ff ff       	call   c0010384 <VgaText::setCursor(int, int)>
c0010d96:	83 c4 10             	add    esp,0x10
c0010d99:	83 ec 08             	sub    esp,0x8
c0010d9c:	6a 01                	push   0x1
c0010d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010da2:	e8 8b f3 ff ff       	call   c0010132 <VgaText::showCursor(bool)>
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	83 ec 08             	sub    esp,0x8
c0010dad:	6a 01                	push   0x1
c0010daf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db3:	e8 8a f3 ff ff       	call   c0010142 <VgaText::disableBlink(bool)>
c0010db8:	83 c4 10             	add    esp,0x10
c0010dbb:	83 ec 0c             	sub    esp,0xc
c0010dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc2:	e8 cf fc ff ff       	call   c0010a96 <VgaText::clearScreen()>
c0010dc7:	83 c4 10             	add    esp,0x10
c0010dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dce:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd9:	05 9e 10 00 00       	add    eax,0x109e
c0010dde:	83 ec 04             	sub    esp,0x4
c0010de1:	68 96 00 00 00       	push   0x96
c0010de6:	6a 00                	push   0x0
c0010de8:	50                   	push   eax
c0010de9:	e8 8d f8 fe ff       	call   c000067b <memset>
c0010dee:	83 c4 10             	add    esp,0x10
c0010df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df5:	05 34 11 00 00       	add    eax,0x1134
c0010dfa:	83 ec 04             	sub    esp,0x4
c0010dfd:	68 2c 01 00 00       	push   0x12c
c0010e02:	6a 00                	push   0x0
c0010e04:	50                   	push   eax
c0010e05:	e8 71 f8 fe ff       	call   c000067b <memset>
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	90                   	nop
c0010e0e:	5b                   	pop    ebx
c0010e0f:	5e                   	pop    esi
c0010e10:	5f                   	pop    edi
c0010e11:	c3                   	ret    

c0010e12 <VgaText::receiveKey(unsigned char)>:
c0010e12:	55                   	push   ebp
c0010e13:	57                   	push   edi
c0010e14:	56                   	push   esi
c0010e15:	53                   	push   ebx
c0010e16:	83 ec 1c             	sub    esp,0x1c
c0010e19:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e21:	84 db                	test   bl,bl
c0010e23:	0f 84 c9 00 00 00    	je     c0010ef2 <VgaText::receiveKey(unsigned char)+0xe0>
c0010e29:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e2f:	80 fb 08             	cmp    bl,0x8
c0010e32:	75 2c                	jne    c0010e60 <VgaText::receiveKey(unsigned char)+0x4e>
c0010e34:	83 ec 0c             	sub    esp,0xc
c0010e37:	57                   	push   edi
c0010e38:	e8 5b f8 fe ff       	call   c0000698 <strlen>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	85 c0                	test   eax,eax
c0010e42:	74 41                	je     c0010e85 <VgaText::receiveKey(unsigned char)+0x73>
c0010e44:	50                   	push   eax
c0010e45:	50                   	push   eax
c0010e46:	6a 08                	push   0x8
c0010e48:	56                   	push   esi
c0010e49:	e8 ac fc ff ff       	call   c0010afa <VgaText::putchar(char)>
c0010e4e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e51:	e8 42 f8 fe ff       	call   c0000698 <strlen>
c0010e56:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010e5e:	eb 22                	jmp    c0010e82 <VgaText::receiveKey(unsigned char)+0x70>
c0010e60:	0f be c3             	movsx  eax,bl
c0010e63:	52                   	push   edx
c0010e64:	52                   	push   edx
c0010e65:	50                   	push   eax
c0010e66:	56                   	push   esi
c0010e67:	e8 8e fc ff ff       	call   c0010afa <VgaText::putchar(char)>
c0010e6c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e70:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e75:	59                   	pop    ecx
c0010e76:	5d                   	pop    ebp
c0010e77:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e7b:	50                   	push   eax
c0010e7c:	57                   	push   edi
c0010e7d:	e8 4f f9 fe ff       	call   c00007d1 <strcat>
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010e8c:	75 05                	jne    c0010e93 <VgaText::receiveKey(unsigned char)+0x81>
c0010e8e:	80 fb 0a             	cmp    bl,0xa
c0010e91:	75 53                	jne    c0010ee6 <VgaText::receiveKey(unsigned char)+0xd4>
c0010e93:	83 ec 0c             	sub    esp,0xc
c0010e96:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010e9c:	53                   	push   ebx
c0010e9d:	e8 f6 f7 fe ff       	call   c0000698 <strlen>
c0010ea2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ea5:	89 c5                	mov    ebp,eax
c0010ea7:	e8 ec f7 fe ff       	call   c0000698 <strlen>
c0010eac:	83 c4 10             	add    esp,0x10
c0010eaf:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010eb3:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010eb8:	76 10                	jbe    c0010eca <VgaText::receiveKey(unsigned char)+0xb8>
c0010eba:	83 ec 0c             	sub    esp,0xc
c0010ebd:	68 1f 78 02 c0       	push   0xc002781f
c0010ec2:	e8 d0 81 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0010ec7:	83 c4 10             	add    esp,0x10
c0010eca:	50                   	push   eax
c0010ecb:	50                   	push   eax
c0010ecc:	57                   	push   edi
c0010ecd:	53                   	push   ebx
c0010ece:	e8 fe f8 fe ff       	call   c00007d1 <strcat>
c0010ed3:	83 c4 0c             	add    esp,0xc
c0010ed6:	68 96 00 00 00       	push   0x96
c0010edb:	6a 00                	push   0x0
c0010edd:	57                   	push   edi
c0010ede:	e8 98 f7 fe ff       	call   c000067b <memset>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	83 ec 0c             	sub    esp,0xc
c0010ee9:	56                   	push   esi
c0010eea:	e8 d5 f9 ff ff       	call   c00108c4 <VgaText::doUpdate()>
c0010eef:	83 c4 10             	add    esp,0x10
c0010ef2:	83 c4 1c             	add    esp,0x1c
c0010ef5:	5b                   	pop    ebx
c0010ef6:	5e                   	pop    esi
c0010ef7:	5f                   	pop    edi
c0010ef8:	5d                   	pop    ebp
c0010ef9:	c3                   	ret    

c0010efa <VgaText::write(unsigned long long, void*, int*)>:
c0010efa:	55                   	push   ebp
c0010efb:	57                   	push   edi
c0010efc:	56                   	push   esi
c0010efd:	53                   	push   ebx
c0010efe:	83 ec 0c             	sub    esp,0xc
c0010f01:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f05:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f09:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f0d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f14:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f17:	39 eb                	cmp    ebx,ebp
c0010f19:	74 13                	je     c0010f2e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f1b:	43                   	inc    ebx
c0010f1c:	50                   	push   eax
c0010f1d:	50                   	push   eax
c0010f1e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f22:	50                   	push   eax
c0010f23:	56                   	push   esi
c0010f24:	e8 d1 fb ff ff       	call   c0010afa <VgaText::putchar(char)>
c0010f29:	83 c4 10             	add    esp,0x10
c0010f2c:	eb e9                	jmp    c0010f17 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f2e:	83 ec 0c             	sub    esp,0xc
c0010f31:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010f38:	56                   	push   esi
c0010f39:	e8 86 f9 ff ff       	call   c00108c4 <VgaText::doUpdate()>
c0010f3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f42:	89 38                	mov    DWORD PTR [eax],edi
c0010f44:	83 c4 1c             	add    esp,0x1c
c0010f47:	31 c0                	xor    eax,eax
c0010f49:	5b                   	pop    ebx
c0010f4a:	5e                   	pop    esi
c0010f4b:	5f                   	pop    edi
c0010f4c:	5d                   	pop    ebp
c0010f4d:	c3                   	ret    

c0010f4e <newTerminal(char*)>:
c0010f4e:	83 ec 28             	sub    esp,0x28
c0010f51:	68 60 12 00 00       	push   0x1260
c0010f56:	e8 65 e5 ff ff       	call   c000f4c0 <malloc>
c0010f5b:	5a                   	pop    edx
c0010f5c:	59                   	pop    ecx
c0010f5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f61:	50                   	push   eax
c0010f62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f66:	e8 15 fd ff ff       	call   c0010c80 <VgaText::VgaText(char const*)>
c0010f6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f6f:	83 c4 2c             	add    esp,0x2c
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <TSS::TSS()>:
c0010f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f7f:	90                   	nop
c0010f80:	c3                   	ret    
c0010f81:	90                   	nop

c0010f82 <TSS::setESP(unsigned long)>:
c0010f82:	55                   	push   ebp
c0010f83:	89 e5                	mov    ebp,esp
c0010f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f8b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f8e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f91:	90                   	nop
c0010f92:	5d                   	pop    ebp
c0010f93:	c3                   	ret    

c0010f94 <TSS::flush()>:
c0010f94:	55                   	push   ebp
c0010f95:	89 e5                	mov    ebp,esp
c0010f97:	83 ec 10             	sub    esp,0x10
c0010f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f9f:	83 c8 03             	or     eax,0x3
c0010fa2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010fa6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010faa:	66 89 d0             	mov    ax,dx
c0010fad:	0f 00 d8             	ltr    ax
c0010fb0:	90                   	nop
c0010fb1:	c9                   	leave  
c0010fb2:	c3                   	ret    
c0010fb3:	90                   	nop

c0010fb4 <TSS::setup(unsigned long, unsigned long)>:
c0010fb4:	55                   	push   ebp
c0010fb5:	89 e5                	mov    ebp,esp
c0010fb7:	83 ec 18             	sub    esp,0x18
c0010fba:	83 ec 0c             	sub    esp,0xc
c0010fbd:	6a 68                	push   0x68
c0010fbf:	e8 fc e4 ff ff       	call   c000f4c0 <malloc>
c0010fc4:	83 c4 10             	add    esp,0x10
c0010fc7:	89 c2                	mov    edx,eax
c0010fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fcc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd5:	83 ec 04             	sub    esp,0x4
c0010fd8:	6a 68                	push   0x68
c0010fda:	6a 00                	push   0x0
c0010fdc:	50                   	push   eax
c0010fdd:	e8 99 f6 fe ff       	call   c000067b <memset>
c0010fe2:	83 c4 10             	add    esp,0x10
c0010fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010feb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011003:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011006:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001101b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011027:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001102d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011033:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001104b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011057:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001105a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001105d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011063:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011066:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011079:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107c:	0f 20 da             	mov    edx,cr3
c001107f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011082:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011085:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001108e:	83 ec 08             	sub    esp,0x8
c0011091:	50                   	push   eax
c0011092:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011095:	50                   	push   eax
c0011096:	e8 03 dc ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c001109b:	83 c4 10             	add    esp,0x10
c001109e:	83 ec 08             	sub    esp,0x8
c00110a1:	6a 68                	push   0x68
c00110a3:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110a6:	50                   	push   eax
c00110a7:	e8 0e dc ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00110b3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110b6:	83 e0 0f             	and    eax,0xf
c00110b9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110bc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110bf:	83 c8 40             	or     eax,0x40
c00110c2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110c5:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00110ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110d0:	05 78 01 00 00       	add    eax,0x178
c00110d5:	83 ec 04             	sub    esp,0x4
c00110d8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00110db:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00110de:	50                   	push   eax
c00110df:	e8 0a dc ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c00110e4:	83 c4 10             	add    esp,0x10
c00110e7:	89 c2                	mov    edx,eax
c00110e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ec:	89 10                	mov    DWORD PTR [eax],edx
c00110ee:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00110f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110f9:	05 78 01 00 00       	add    eax,0x178
c00110fe:	83 ec 0c             	sub    esp,0xc
c0011101:	50                   	push   eax
c0011102:	e8 2b dc ff ff       	call   c000ed32 <GDT::flush()>
c0011107:	83 c4 10             	add    esp,0x10
c001110a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001110d:	8b 00                	mov    eax,DWORD PTR [eax]
c001110f:	83 ec 08             	sub    esp,0x8
c0011112:	50                   	push   eax
c0011113:	68 88 78 02 c0       	push   0xc0027888
c0011118:	e8 16 15 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001111d:	83 c4 10             	add    esp,0x10
c0011120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011123:	8b 00                	mov    eax,DWORD PTR [eax]
c0011125:	c9                   	leave  
c0011126:	c3                   	ret    
c0011127:	90                   	nop

c0011128 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001112c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011130:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011133:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011138:	75 08                	jne    c0011142 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001113a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011140:	eb 38                	jmp    c001117a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011142:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011147:	75 17                	jne    c0011160 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011149:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001114e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011151:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011157:	8b 10                	mov    edx,DWORD PTR [eax]
c0011159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001115d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011160:	89 c1                	mov    ecx,eax
c0011162:	83 e1 fd             	and    ecx,0xfffffffd
c0011165:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001116b:	74 cd                	je     c001113a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001116d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011172:	83 e0 ef             	and    eax,0xffffffef
c0011175:	83 f8 08             	cmp    eax,0x8
c0011178:	76 c0                	jbe    c001113a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001117a:	31 c0                	xor    eax,eax
c001117c:	c3                   	ret    
c001117d:	90                   	nop

c001117e <ReservedFilename::isAtty()>:
c001117e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011182:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011185:	31 c0                	xor    eax,eax
c0011187:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001118d:	74 09                	je     c0011198 <ReservedFilename::isAtty()+0x1a>
c001118f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011195:	0f 94 c0             	sete   al
c0011198:	c3                   	ret    
c0011199:	90                   	nop

c001119a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001119a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001119e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111a9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111ae:	75 08                	jne    c00111b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00111b0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111b6:	eb 3d                	jmp    c00111f5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111b8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111bd:	75 17                	jne    c00111d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00111bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00111cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111d3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00111d6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111db:	75 04                	jne    c00111e1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00111dd:	89 0a                	mov    DWORD PTR [edx],ecx
c00111df:	eb 14                	jmp    c00111f5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111e1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00111e6:	74 c8                	je     c00111b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111e8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111ed:	83 e0 ef             	and    eax,0xffffffef
c00111f0:	83 f8 08             	cmp    eax,0x8
c00111f3:	76 bb                	jbe    c00111b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111f5:	31 c0                	xor    eax,eax
c00111f7:	c3                   	ret    

c00111f8 <UnixFile::getFileDescriptor()>:
c00111f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ff:	c3                   	ret    

c0011200 <UnixFile::UnixFile(int)>:
c0011200:	53                   	push   ebx
c0011201:	83 ec 28             	sub    esp,0x28
c0011204:	ba 74 79 02 c0       	mov    edx,0xc0027974
c0011209:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001120d:	89 10                	mov    DWORD PTR [eax],edx
c001120f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011217:	0f 8f 8c 01 00 00    	jg     c00113a9 <UnixFile::UnixFile(int)+0x1a9>
c001121d:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c0011222:	8d 50 01             	lea    edx,[eax+0x1]
c0011225:	89 15 e0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e0,edx
c001122b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001122f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011232:	83 ec 08             	sub    esp,0x8
c0011235:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011239:	68 18 b2 02 c0       	push   0xc002b218
c001123e:	e8 5d 4a 01 00       	call   c0025ca0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011243:	83 c4 10             	add    esp,0x10
c0011246:	a0 14 b2 02 c0       	mov    al,ds:0xc002b214
c001124b:	83 f0 01             	xor    eax,0x1
c001124e:	84 c0                	test   al,al
c0011250:	0f 84 54 01 00 00    	je     c00113aa <UnixFile::UnixFile(int)+0x1aa>
c0011256:	c6 05 14 b2 02 c0 01 	mov    BYTE PTR ds:0xc002b214,0x1
c001125d:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011265:	83 ec 0c             	sub    esp,0xc
c0011268:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001126c:	e8 4f e2 ff ff       	call   c000f4c0 <malloc>
c0011271:	83 c4 10             	add    esp,0x10
c0011274:	89 c3                	mov    ebx,eax
c0011276:	83 ec 08             	sub    esp,0x8
c0011279:	68 03 ff ff 0f       	push   0xfffff03
c001127e:	53                   	push   ebx
c001127f:	e8 2c 01 00 00       	call   c00113b0 <ReservedFilename::ReservedFilename(int)>
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	89 1d 0c b2 02 c0    	mov    DWORD PTR ds:0xc002b20c,ebx
c001128d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011295:	83 ec 0c             	sub    esp,0xc
c0011298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129c:	e8 1f e2 ff ff       	call   c000f4c0 <malloc>
c00112a1:	83 c4 10             	add    esp,0x10
c00112a4:	89 c3                	mov    ebx,eax
c00112a6:	83 ec 08             	sub    esp,0x8
c00112a9:	68 01 ff ff 0f       	push   0xfffff01
c00112ae:	53                   	push   ebx
c00112af:	e8 fc 00 00 00       	call   c00113b0 <ReservedFilename::ReservedFilename(int)>
c00112b4:	83 c4 10             	add    esp,0x10
c00112b7:	89 1d 10 b2 02 c0    	mov    DWORD PTR ds:0xc002b210,ebx
c00112bd:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00112c5:	83 ec 0c             	sub    esp,0xc
c00112c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00112cc:	e8 ef e1 ff ff       	call   c000f4c0 <malloc>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	89 c3                	mov    ebx,eax
c00112d6:	83 ec 08             	sub    esp,0x8
c00112d9:	68 00 ff ff 0f       	push   0xfffff00
c00112de:	53                   	push   ebx
c00112df:	e8 cc 00 00 00       	call   c00113b0 <ReservedFilename::ReservedFilename(int)>
c00112e4:	83 c4 10             	add    esp,0x10
c00112e7:	89 1d 04 b2 02 c0    	mov    DWORD PTR ds:0xc002b204,ebx
c00112ed:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00112f5:	83 ec 0c             	sub    esp,0xc
c00112f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112fc:	e8 bf e1 ff ff       	call   c000f4c0 <malloc>
c0011301:	83 c4 10             	add    esp,0x10
c0011304:	89 c3                	mov    ebx,eax
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	68 02 ff ff 0f       	push   0xfffff02
c001130e:	53                   	push   ebx
c001130f:	e8 9c 00 00 00       	call   c00113b0 <ReservedFilename::ReservedFilename(int)>
c0011314:	83 c4 10             	add    esp,0x10
c0011317:	89 1d 08 b2 02 c0    	mov    DWORD PTR ds:0xc002b208,ebx
c001131d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011325:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001132a:	7f 7e                	jg     c00113aa <UnixFile::UnixFile(int)+0x1aa>
c001132c:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011334:	83 ec 0c             	sub    esp,0xc
c0011337:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001133b:	e8 80 e1 ff ff       	call   c000f4c0 <malloc>
c0011340:	83 c4 10             	add    esp,0x10
c0011343:	89 c3                	mov    ebx,eax
c0011345:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011349:	05 10 ff ff 0f       	add    eax,0xfffff10
c001134e:	83 ec 08             	sub    esp,0x8
c0011351:	50                   	push   eax
c0011352:	53                   	push   ebx
c0011353:	e8 58 00 00 00       	call   c00113b0 <ReservedFilename::ReservedFilename(int)>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001135f:	89 1c 85 e0 b1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4e20],ebx
c0011366:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001136e:	83 ec 0c             	sub    esp,0xc
c0011371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011375:	e8 46 e1 ff ff       	call   c000f4c0 <malloc>
c001137a:	83 c4 10             	add    esp,0x10
c001137d:	89 c3                	mov    ebx,eax
c001137f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011383:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011388:	83 ec 08             	sub    esp,0x8
c001138b:	50                   	push   eax
c001138c:	53                   	push   ebx
c001138d:	e8 1e 00 00 00       	call   c00113b0 <ReservedFilename::ReservedFilename(int)>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011399:	89 1c 85 a0 b1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4e60],ebx
c00113a0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113a4:	e9 7c ff ff ff       	jmp    c0011325 <UnixFile::UnixFile(int)+0x125>
c00113a9:	90                   	nop
c00113aa:	83 c4 28             	add    esp,0x28
c00113ad:	5b                   	pop    ebx
c00113ae:	c3                   	ret    
c00113af:	90                   	nop

c00113b0 <ReservedFilename::ReservedFilename(int)>:
c00113b0:	83 ec 0c             	sub    esp,0xc
c00113b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b7:	83 ec 08             	sub    esp,0x8
c00113ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113be:	50                   	push   eax
c00113bf:	e8 3c fe ff ff       	call   c0011200 <UnixFile::UnixFile(int)>
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	ba 90 79 02 c0       	mov    edx,0xc0027990
c00113cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d0:	89 10                	mov    DWORD PTR [eax],edx
c00113d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113dd:	90                   	nop
c00113de:	83 c4 0c             	add    esp,0xc
c00113e1:	c3                   	ret    

c00113e2 <UnixFile::~UnixFile()>:
c00113e2:	83 ec 1c             	sub    esp,0x1c
c00113e5:	ba 74 79 02 c0       	mov    edx,0xc0027974
c00113ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113ee:	89 10                	mov    DWORD PTR [eax],edx
c00113f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00113fc:	7f 73                	jg     c0011471 <UnixFile::~UnixFile()+0x8f>
c00113fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011406:	83 ec 0c             	sub    esp,0xc
c0011409:	68 18 b2 02 c0       	push   0xc002b218
c001140e:	e8 61 49 01 00       	call   c0025d74 <LinkedList<UnixFile>::getFirstElement()>
c0011413:	83 c4 10             	add    esp,0x10
c0011416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	68 18 b2 02 c0       	push   0xc002b218
c0011422:	e8 55 49 01 00       	call   c0025d7c <LinkedList<UnixFile>::removeFirst()>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001142e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011432:	74 40                	je     c0011474 <UnixFile::~UnixFile()+0x92>
c0011434:	83 ec 08             	sub    esp,0x8
c0011437:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001143b:	68 18 b2 02 c0       	push   0xc002b218
c0011440:	e8 5b 48 01 00       	call   c0025ca0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001144c:	8d 50 01             	lea    edx,[eax+0x1]
c001144f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011453:	3d 88 13 00 00       	cmp    eax,0x1388
c0011458:	0f 94 c0             	sete   al
c001145b:	84 c0                	test   al,al
c001145d:	74 a7                	je     c0011406 <UnixFile::~UnixFile()+0x24>
c001145f:	83 ec 0c             	sub    esp,0xc
c0011462:	68 4c 79 02 c0       	push   0xc002794c
c0011467:	e8 2b 7c 00 00       	call   c0019097 <Krnl::panic(char const*)>
c001146c:	83 c4 10             	add    esp,0x10
c001146f:	eb 95                	jmp    c0011406 <UnixFile::~UnixFile()+0x24>
c0011471:	90                   	nop
c0011472:	eb 01                	jmp    c0011475 <UnixFile::~UnixFile()+0x93>
c0011474:	90                   	nop
c0011475:	90                   	nop
c0011476:	83 c4 1c             	add    esp,0x1c
c0011479:	c3                   	ret    

c001147a <UnixFile::~UnixFile()>:
c001147a:	83 ec 0c             	sub    esp,0xc
c001147d:	83 ec 0c             	sub    esp,0xc
c0011480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011484:	e8 59 ff ff ff       	call   c00113e2 <UnixFile::~UnixFile()>
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	83 ec 08             	sub    esp,0x8
c001148f:	6a 0c                	push   0xc
c0011491:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011495:	e8 b9 10 00 00       	call   c0012553 <operator delete(void*, unsigned long)>
c001149a:	83 c4 10             	add    esp,0x10
c001149d:	83 c4 0c             	add    esp,0xc
c00114a0:	c3                   	ret    
c00114a1:	90                   	nop

c00114a2 <ReservedFilename::~ReservedFilename()>:
c00114a2:	83 ec 0c             	sub    esp,0xc
c00114a5:	ba 90 79 02 c0       	mov    edx,0xc0027990
c00114aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ae:	89 10                	mov    DWORD PTR [eax],edx
c00114b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	50                   	push   eax
c00114b8:	e8 25 ff ff ff       	call   c00113e2 <UnixFile::~UnixFile()>
c00114bd:	83 c4 10             	add    esp,0x10
c00114c0:	90                   	nop
c00114c1:	83 c4 0c             	add    esp,0xc
c00114c4:	c3                   	ret    
c00114c5:	90                   	nop

c00114c6 <ReservedFilename::~ReservedFilename()>:
c00114c6:	83 ec 0c             	sub    esp,0xc
c00114c9:	83 ec 0c             	sub    esp,0xc
c00114cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d0:	e8 cd ff ff ff       	call   c00114a2 <ReservedFilename::~ReservedFilename()>
c00114d5:	83 c4 10             	add    esp,0x10
c00114d8:	83 ec 08             	sub    esp,0x8
c00114db:	6a 0c                	push   0xc
c00114dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e1:	e8 6d 10 00 00       	call   c0012553 <operator delete(void*, unsigned long)>
c00114e6:	83 c4 10             	add    esp,0x10
c00114e9:	83 c4 0c             	add    esp,0xc
c00114ec:	c3                   	ret    

c00114ed <getFromFileDescriptor(int)>:
c00114ed:	53                   	push   ebx
c00114ee:	83 ec 08             	sub    esp,0x8
c00114f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114f5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00114fb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011501:	7f 2c                	jg     c001152f <getFromFileDescriptor(int)+0x42>
c0011503:	83 ec 0c             	sub    esp,0xc
c0011506:	68 18 b2 02 c0       	push   0xc002b218
c001150b:	e8 64 48 01 00       	call   c0025d74 <LinkedList<UnixFile>::getFirstElement()>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	85 c0                	test   eax,eax
c0011515:	75 04                	jne    c001151b <getFromFileDescriptor(int)+0x2e>
c0011517:	31 c0                	xor    eax,eax
c0011519:	eb 6e                	jmp    c0011589 <getFromFileDescriptor(int)+0x9c>
c001151b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001151e:	74 69                	je     c0011589 <getFromFileDescriptor(int)+0x9c>
c0011520:	52                   	push   edx
c0011521:	52                   	push   edx
c0011522:	50                   	push   eax
c0011523:	68 18 b2 02 c0       	push   0xc002b218
c0011528:	e8 f1 48 01 00       	call   c0025e1e <LinkedList<UnixFile>::getNext(UnixFile*)>
c001152d:	eb e1                	jmp    c0011510 <getFromFileDescriptor(int)+0x23>
c001152f:	a1 0c b2 02 c0       	mov    eax,ds:0xc002b20c
c0011534:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001153a:	74 4d                	je     c0011589 <getFromFileDescriptor(int)+0x9c>
c001153c:	a1 10 b2 02 c0       	mov    eax,ds:0xc002b210
c0011541:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011547:	74 40                	je     c0011589 <getFromFileDescriptor(int)+0x9c>
c0011549:	a1 08 b2 02 c0       	mov    eax,ds:0xc002b208
c001154e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011554:	74 33                	je     c0011589 <getFromFileDescriptor(int)+0x9c>
c0011556:	a1 04 b2 02 c0       	mov    eax,ds:0xc002b204
c001155b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011561:	74 26                	je     c0011589 <getFromFileDescriptor(int)+0x9c>
c0011563:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011569:	83 f8 08             	cmp    eax,0x8
c001156c:	77 09                	ja     c0011577 <getFromFileDescriptor(int)+0x8a>
c001156e:	8b 04 85 e0 b1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4e20]
c0011575:	eb 12                	jmp    c0011589 <getFromFileDescriptor(int)+0x9c>
c0011577:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001157d:	83 fb 08             	cmp    ebx,0x8
c0011580:	77 95                	ja     c0011517 <getFromFileDescriptor(int)+0x2a>
c0011582:	8b 04 9d a0 b1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4e60]
c0011589:	83 c4 08             	add    esp,0x8
c001158c:	5b                   	pop    ebx
c001158d:	c3                   	ret    

c001158e <__static_initialization_and_destruction_0(int, int)>:
c001158e:	83 ec 0c             	sub    esp,0xc
c0011591:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011596:	75 34                	jne    c00115cc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011598:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115a0:	75 2a                	jne    c00115cc <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115a2:	83 ec 0c             	sub    esp,0xc
c00115a5:	68 18 b2 02 c0       	push   0xc002b218
c00115aa:	e8 99 46 01 00       	call   c0025c48 <LinkedList<UnixFile>::LinkedList()>
c00115af:	83 c4 10             	add    esp,0x10
c00115b2:	83 ec 04             	sub    esp,0x4
c00115b5:	68 68 a0 02 c0       	push   0xc002a068
c00115ba:	68 18 b2 02 c0       	push   0xc002b218
c00115bf:	68 46 5c 02 c0       	push   0xc0025c46
c00115c4:	e8 04 0f 00 00       	call   c00124cd <__cxa_atexit>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	90                   	nop
c00115cd:	83 c4 0c             	add    esp,0xc
c00115d0:	c3                   	ret    

c00115d1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00115d1:	83 ec 0c             	sub    esp,0xc
c00115d4:	83 ec 08             	sub    esp,0x8
c00115d7:	68 ff ff 00 00       	push   0xffff
c00115dc:	6a 01                	push   0x1
c00115de:	e8 ab ff ff ff       	call   c001158e <__static_initialization_and_destruction_0(int, int)>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	83 c4 0c             	add    esp,0xc
c00115e9:	c3                   	ret    

c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00115ea:	53                   	push   ebx
c00115eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00115f3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00115f9:	89 c8                	mov    eax,ecx
c00115fb:	d1 e8                	shr    eax,1
c00115fd:	03 05 e8 a0 02 c0    	add    eax,DWORD PTR ds:0xc002a0e8
c0011603:	83 e1 01             	and    ecx,0x1
c0011606:	8a 10                	mov    dl,BYTE PTR [eax]
c0011608:	75 09                	jne    c0011613 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001160a:	83 e2 f0             	and    edx,0xfffffff0
c001160d:	09 da                	or     edx,ebx
c001160f:	88 10                	mov    BYTE PTR [eax],dl
c0011611:	5b                   	pop    ebx
c0011612:	c3                   	ret    
c0011613:	c1 e3 04             	shl    ebx,0x4
c0011616:	83 e2 0f             	and    edx,0xf
c0011619:	09 da                	or     edx,ebx
c001161b:	88 10                	mov    BYTE PTR [eax],dl
c001161d:	5b                   	pop    ebx
c001161e:	c3                   	ret    

c001161f <Virt::getPageState(unsigned long)>:
c001161f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011623:	8b 0d e8 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a0e8
c0011629:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001162f:	89 d0                	mov    eax,edx
c0011631:	d1 e8                	shr    eax,1
c0011633:	83 e2 01             	and    edx,0x1
c0011636:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011639:	75 04                	jne    c001163f <Virt::getPageState(unsigned long)+0x20>
c001163b:	83 e0 0f             	and    eax,0xf
c001163e:	c3                   	ret    
c001163f:	c0 e8 04             	shr    al,0x4
c0011642:	c3                   	ret    

c0011643 <Virt::allocateKernelVirtualPages(int)>:
c0011643:	55                   	push   ebp
c0011644:	31 ed                	xor    ebp,ebp
c0011646:	57                   	push   edi
c0011647:	56                   	push   esi
c0011648:	53                   	push   ebx
c0011649:	31 db                	xor    ebx,ebx
c001164b:	83 ec 1c             	sub    esp,0x1c
c001164e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011652:	8b 3d e4 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a0e4
c0011658:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001165d:	57                   	push   edi
c001165e:	e8 bc ff ff ff       	call   c001161f <Virt::getPageState(unsigned long)>
c0011663:	5a                   	pop    edx
c0011664:	84 c0                	test   al,al
c0011666:	75 3a                	jne    c00116a2 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011668:	85 db                	test   ebx,ebx
c001166a:	75 02                	jne    c001166e <Virt::allocateKernelVirtualPages(int)+0x2b>
c001166c:	89 fd                	mov    ebp,edi
c001166e:	43                   	inc    ebx
c001166f:	39 f3                	cmp    ebx,esi
c0011671:	74 5a                	je     c00116cd <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011673:	47                   	inc    edi
c0011674:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001167a:	76 31                	jbe    c00116ad <Virt::allocateKernelVirtualPages(int)+0x6a>
c001167c:	c7 05 e4 a0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002a0e4,0xc8000
c0011686:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001168b:	75 28                	jne    c00116b5 <Virt::allocateKernelVirtualPages(int)+0x72>
c001168d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011692:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011697:	57                   	push   edi
c0011698:	e8 82 ff ff ff       	call   c001161f <Virt::getPageState(unsigned long)>
c001169d:	5a                   	pop    edx
c001169e:	84 c0                	test   al,al
c00116a0:	74 c6                	je     c0011668 <Virt::allocateKernelVirtualPages(int)+0x25>
c00116a2:	31 db                	xor    ebx,ebx
c00116a4:	47                   	inc    edi
c00116a5:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116ab:	77 cf                	ja     c001167c <Virt::allocateKernelVirtualPages(int)+0x39>
c00116ad:	89 3d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,edi
c00116b3:	eb a8                	jmp    c001165d <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116b5:	83 ec 0c             	sub    esp,0xc
c00116b8:	68 a4 79 02 c0       	push   0xc00279a4
c00116bd:	e8 d5 79 00 00       	call   c0019097 <Krnl::panic(char const*)>
c00116c2:	8b 3d e4 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a0e4
c00116c8:	83 c4 10             	add    esp,0x10
c00116cb:	eb 90                	jmp    c001165d <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116cd:	89 2d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ebp
c00116d3:	4b                   	dec    ebx
c00116d4:	74 5f                	je     c0011735 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00116d6:	85 f6                	test   esi,esi
c00116d8:	74 3d                	je     c0011717 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116da:	89 e8                	mov    eax,ebp
c00116dc:	31 db                	xor    ebx,ebx
c00116de:	8d 7e ff             	lea    edi,[esi-0x1]
c00116e1:	eb 14                	jmp    c00116f7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00116e3:	6a 01                	push   0x1
c00116e5:	43                   	inc    ebx
c00116e6:	50                   	push   eax
c00116e7:	e8 fe fe ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ec:	58                   	pop    eax
c00116ed:	39 f3                	cmp    ebx,esi
c00116ef:	5a                   	pop    edx
c00116f0:	74 25                	je     c0011717 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116f2:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00116f7:	8d 50 01             	lea    edx,[eax+0x1]
c00116fa:	85 db                	test   ebx,ebx
c00116fc:	89 15 e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,edx
c0011702:	74 20                	je     c0011724 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011704:	39 df                	cmp    edi,ebx
c0011706:	75 db                	jne    c00116e3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011708:	6a 03                	push   0x3
c001170a:	43                   	inc    ebx
c001170b:	50                   	push   eax
c001170c:	e8 d9 fe ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011711:	59                   	pop    ecx
c0011712:	39 f3                	cmp    ebx,esi
c0011714:	58                   	pop    eax
c0011715:	75 db                	jne    c00116f2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011717:	83 c4 1c             	add    esp,0x1c
c001171a:	89 e8                	mov    eax,ebp
c001171c:	5b                   	pop    ebx
c001171d:	c1 e0 0c             	shl    eax,0xc
c0011720:	5e                   	pop    esi
c0011721:	5f                   	pop    edi
c0011722:	5d                   	pop    ebp
c0011723:	c3                   	ret    
c0011724:	6a 02                	push   0x2
c0011726:	bb 01 00 00 00       	mov    ebx,0x1
c001172b:	50                   	push   eax
c001172c:	e8 b9 fe ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011731:	58                   	pop    eax
c0011732:	5a                   	pop    edx
c0011733:	eb bd                	jmp    c00116f2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011735:	6a 04                	push   0x4
c0011737:	8d 45 01             	lea    eax,[ebp+0x1]
c001173a:	55                   	push   ebp
c001173b:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c0011740:	e8 a5 fe ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011745:	59                   	pop    ecx
c0011746:	89 e8                	mov    eax,ebp
c0011748:	5b                   	pop    ebx
c0011749:	c1 e0 0c             	shl    eax,0xc
c001174c:	83 c4 1c             	add    esp,0x1c
c001174f:	5b                   	pop    ebx
c0011750:	5e                   	pop    esi
c0011751:	5f                   	pop    edi
c0011752:	5d                   	pop    ebp
c0011753:	c3                   	ret    

c0011754 <Virt::virtualMemorySetup()>:
c0011754:	53                   	push   ebx
c0011755:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001175a:	83 ec 08             	sub    esp,0x8
c001175d:	6a 0f                	push   0xf
c001175f:	53                   	push   ebx
c0011760:	43                   	inc    ebx
c0011761:	e8 84 fe ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011766:	59                   	pop    ecx
c0011767:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001176d:	58                   	pop    eax
c001176e:	75 ed                	jne    c001175d <Virt::virtualMemorySetup()+0x9>
c0011770:	83 ec 08             	sub    esp,0x8
c0011773:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011778:	68 00 00 00 c8       	push   0xc8000000
c001177d:	68 2b 7b 02 c0       	push   0xc0027b2b
c0011782:	e8 ac 0e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0011787:	58                   	pop    eax
c0011788:	5a                   	pop    edx
c0011789:	68 00 f0 ff ef       	push   0xeffff000
c001178e:	68 3f 7b 02 c0       	push   0xc0027b3f
c0011793:	e8 9b 0e 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0011798:	83 c4 10             	add    esp,0x10
c001179b:	83 ec 08             	sub    esp,0x8
c001179e:	6a 00                	push   0x0
c00117a0:	53                   	push   ebx
c00117a1:	43                   	inc    ebx
c00117a2:	e8 43 fe ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117a7:	83 c4 10             	add    esp,0x10
c00117aa:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117b0:	75 e9                	jne    c001179b <Virt::virtualMemorySetup()+0x47>
c00117b2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00117b7:	83 ec 08             	sub    esp,0x8
c00117ba:	6a 0f                	push   0xf
c00117bc:	53                   	push   ebx
c00117bd:	43                   	inc    ebx
c00117be:	e8 27 fe ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117c3:	83 c4 10             	add    esp,0x10
c00117c6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00117cc:	75 e9                	jne    c00117b7 <Virt::virtualMemorySetup()+0x63>
c00117ce:	83 c4 08             	add    esp,0x8
c00117d1:	5b                   	pop    ebx
c00117d2:	c3                   	ret    

c00117d3 <Virt::getAKernelVAS()>:
c00117d3:	a1 24 b2 02 c0       	mov    eax,ds:0xc002b224
c00117d8:	c3                   	ret    

c00117d9 <Virt::setupPageSwapping(int)>:
c00117d9:	57                   	push   edi
c00117da:	56                   	push   esi
c00117db:	53                   	push   ebx
c00117dc:	83 ec 1c             	sub    esp,0x1c
c00117df:	68 14 01 00 00       	push   0x114
c00117e4:	e8 d7 dc ff ff       	call   c000f4c0 <malloc>
c00117e9:	83 c4 0c             	add    esp,0xc
c00117ec:	89 c6                	mov    esi,eax
c00117ee:	ff 35 d4 c5 02 c0    	push   DWORD PTR ds:0xc002c5d4
c00117f4:	68 53 7b 02 c0       	push   0xc0027b53
c00117f9:	50                   	push   eax
c00117fa:	e8 63 13 00 00       	call   c0012b62 <File::File(char const*, Process*)>
c00117ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0011802:	e8 37 15 00 00       	call   c0012d3e <File::unlink()>
c0011807:	58                   	pop    eax
c0011808:	5a                   	pop    edx
c0011809:	6a 12                	push   0x12
c001180b:	56                   	push   esi
c001180c:	e8 b5 13 00 00       	call   c0012bc6 <File::open(FileOpenMode)>
c0011811:	83 c4 10             	add    esp,0x10
c0011814:	85 c0                	test   eax,eax
c0011816:	0f 85 ca 00 00 00    	jne    c00118e6 <Virt::setupPageSwapping(int)+0x10d>
c001181c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011820:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011828:	c1 e3 08             	shl    ebx,0x8
c001182b:	83 ec 0c             	sub    esp,0xc
c001182e:	68 00 00 01 00       	push   0x10000
c0011833:	e8 88 dc ff ff       	call   c000f4c0 <malloc>
c0011838:	83 c4 0c             	add    esp,0xc
c001183b:	89 c7                	mov    edi,eax
c001183d:	68 00 00 01 00       	push   0x10000
c0011842:	6a 00                	push   0x0
c0011844:	50                   	push   eax
c0011845:	e8 31 ee fe ff       	call   c000067b <memset>
c001184a:	83 c4 10             	add    esp,0x10
c001184d:	85 db                	test   ebx,ebx
c001184f:	79 03                	jns    c0011854 <Virt::setupPageSwapping(int)+0x7b>
c0011851:	83 c3 0f             	add    ebx,0xf
c0011854:	c1 fb 04             	sar    ebx,0x4
c0011857:	4b                   	dec    ebx
c0011858:	83 fb ff             	cmp    ebx,0xffffffff
c001185b:	74 4b                	je     c00118a8 <Virt::setupPageSwapping(int)+0xcf>
c001185d:	83 ec 0c             	sub    esp,0xc
c0011860:	8b 06                	mov    eax,DWORD PTR [esi]
c0011862:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011866:	52                   	push   edx
c0011867:	57                   	push   edi
c0011868:	6a 00                	push   0x0
c001186a:	68 00 00 01 00       	push   0x10000
c001186f:	56                   	push   esi
c0011870:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011873:	83 c4 20             	add    esp,0x20
c0011876:	85 c0                	test   eax,eax
c0011878:	75 59                	jne    c00118d3 <Virt::setupPageSwapping(int)+0xfa>
c001187a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001187e:	3d 00 00 01 00       	cmp    eax,0x10000
c0011883:	74 d2                	je     c0011857 <Virt::setupPageSwapping(int)+0x7e>
c0011885:	83 ec 08             	sub    esp,0x8
c0011888:	4b                   	dec    ebx
c0011889:	50                   	push   eax
c001188a:	68 a6 7b 02 c0       	push   0xc0027ba6
c001188f:	e8 9f 0d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0011894:	c7 04 24 af 7b 02 c0 	mov    DWORD PTR [esp],0xc0027baf
c001189b:	e8 f7 77 00 00       	call   c0019097 <Krnl::panic(char const*)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	83 fb ff             	cmp    ebx,0xffffffff
c00118a6:	75 b5                	jne    c001185d <Virt::setupPageSwapping(int)+0x84>
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	56                   	push   esi
c00118ac:	e8 73 13 00 00       	call   c0012c24 <File::close()>
c00118b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118b4:	e8 27 dc ff ff       	call   c000f4e0 <rfree>
c00118b9:	83 c4 10             	add    esp,0x10
c00118bc:	85 f6                	test   esi,esi
c00118be:	74 0c                	je     c00118cc <Virt::setupPageSwapping(int)+0xf3>
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00118c5:	56                   	push   esi
c00118c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118c9:	83 c4 10             	add    esp,0x10
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	5b                   	pop    ebx
c00118d0:	5e                   	pop    esi
c00118d1:	5f                   	pop    edi
c00118d2:	c3                   	ret    
c00118d3:	83 ec 08             	sub    esp,0x8
c00118d6:	50                   	push   eax
c00118d7:	68 8e 7b 02 c0       	push   0xc0027b8e
c00118dc:	e8 52 0d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	eb 94                	jmp    c001187a <Virt::setupPageSwapping(int)+0xa1>
c00118e6:	83 ec 08             	sub    esp,0x8
c00118e9:	50                   	push   eax
c00118ea:	68 6a 7b 02 c0       	push   0xc0027b6a
c00118ef:	e8 3f 0d 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00118f4:	c7 04 24 73 7b 02 c0 	mov    DWORD PTR [esp],0xc0027b73
c00118fb:	e8 97 77 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0011900:	83 c4 10             	add    esp,0x10
c0011903:	e9 14 ff ff ff       	jmp    c001181c <Virt::setupPageSwapping(int)+0x43>

c0011908 <VAS::VAS()>:
c0011908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011917:	a3 24 b2 02 c0       	mov    ds:0xc002b224,eax
c001191c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011920:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011928:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001192b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011936:	90                   	nop
c0011937:	c3                   	ret    

c0011938 <VAS::VAS(VAS*)>:
c0011938:	83 ec 0c             	sub    esp,0xc
c001193b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001193f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011946:	83 ec 0c             	sub    esp,0xc
c0011949:	68 c4 79 02 c0       	push   0xc00279c4
c001194e:	e8 44 77 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0011953:	83 c4 10             	add    esp,0x10
c0011956:	90                   	nop
c0011957:	83 c4 0c             	add    esp,0xc
c001195a:	c3                   	ret    
c001195b:	90                   	nop

c001195c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001195c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011960:	89 c2                	mov    edx,eax
c0011962:	c1 e8 0a             	shr    eax,0xa
c0011965:	c1 ea 16             	shr    edx,0x16
c0011968:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001196d:	19 c9                	sbb    ecx,ecx
c001196f:	c1 e2 0c             	shl    edx,0xc
c0011972:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011978:	25 fc 0f 00 00       	and    eax,0xffc
c001197d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011984:	01 d0                	add    eax,edx
c0011986:	c3                   	ret    
c0011987:	90                   	nop

c0011988 <VAS::getPageTableEntry(unsigned long)>:
c0011988:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001198c:	89 ca                	mov    edx,ecx
c001198e:	c1 e9 0a             	shr    ecx,0xa
c0011991:	c1 ea 16             	shr    edx,0x16
c0011994:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001199a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119a0:	c1 e0 0c             	shl    eax,0xc
c00119a3:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119a6:	c3                   	ret    

c00119a7 <Virt::freeKernelVirtualPages(unsigned long)>:
c00119a7:	57                   	push   edi
c00119a8:	56                   	push   esi
c00119a9:	be 01 00 00 00       	mov    esi,0x1
c00119ae:	53                   	push   ebx
c00119af:	83 ec 10             	sub    esp,0x10
c00119b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119b6:	c1 eb 0c             	shr    ebx,0xc
c00119b9:	eb 3f                	jmp    c00119fa <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119bb:	e8 13 fe ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c00119c0:	83 ec 08             	sub    esp,0x8
c00119c3:	57                   	push   edi
c00119c4:	50                   	push   eax
c00119c5:	e8 be ff ff ff       	call   c0011988 <VAS::getPageTableEntry(unsigned long)>
c00119ca:	83 c4 10             	add    esp,0x10
c00119cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00119cf:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119d3:	f6 c4 04             	test   ah,0x4
c00119d6:	75 5f                	jne    c0011a37 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119d8:	80 fa 04             	cmp    dl,0x4
c00119db:	74 78                	je     c0011a55 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119dd:	80 fa 02             	cmp    dl,0x2
c00119e0:	0f 84 88 00 00 00    	je     c0011a6e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119e6:	80 fa 03             	cmp    dl,0x3
c00119e9:	0f 84 ad 00 00 00    	je     c0011a9c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119ef:	fe ca                	dec    dl
c00119f1:	0f 84 92 00 00 00    	je     c0011a89 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119f7:	43                   	inc    ebx
c00119f8:	31 f6                	xor    esi,esi
c00119fa:	53                   	push   ebx
c00119fb:	e8 1f fc ff ff       	call   c001161f <Virt::getPageState(unsigned long)>
c0011a00:	5f                   	pop    edi
c0011a01:	89 df                	mov    edi,ebx
c0011a03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a07:	c1 e7 0c             	shl    edi,0xc
c0011a0a:	84 c0                	test   al,al
c0011a0c:	75 ad                	jne    c00119bb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	68 b5 7b 02 c0       	push   0xc0027bb5
c0011a16:	e8 7c 76 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0011a1b:	e8 b3 fd ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c0011a20:	5a                   	pop    edx
c0011a21:	59                   	pop    ecx
c0011a22:	57                   	push   edi
c0011a23:	50                   	push   eax
c0011a24:	e8 5f ff ff ff       	call   c0011988 <VAS::getPageTableEntry(unsigned long)>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a2e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a32:	f6 c4 04             	test   ah,0x4
c0011a35:	74 c0                	je     c00119f7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a37:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a3b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a40:	83 ec 0c             	sub    esp,0xc
c0011a43:	50                   	push   eax
c0011a44:	e8 97 df ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a50:	80 fa 04             	cmp    dl,0x4
c0011a53:	75 88                	jne    c00119dd <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a55:	89 f0                	mov    eax,esi
c0011a57:	84 c0                	test   al,al
c0011a59:	75 47                	jne    c0011aa2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a5b:	c7 44 24 20 e8 79 02 c0 	mov    DWORD PTR [esp+0x20],0xc00279e8
c0011a63:	83 c4 10             	add    esp,0x10
c0011a66:	5b                   	pop    ebx
c0011a67:	5e                   	pop    esi
c0011a68:	5f                   	pop    edi
c0011a69:	e9 29 76 00 00       	jmp    c0019097 <Krnl::panic(char const*)>
c0011a6e:	89 f0                	mov    eax,esi
c0011a70:	84 c0                	test   al,al
c0011a72:	75 15                	jne    c0011a89 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a74:	83 ec 0c             	sub    esp,0xc
c0011a77:	68 d1 7b 02 c0       	push   0xc0027bd1
c0011a7c:	e8 16 76 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0011a81:	83 c4 10             	add    esp,0x10
c0011a84:	e9 6e ff ff ff       	jmp    c00119f7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a89:	83 ec 08             	sub    esp,0x8
c0011a8c:	6a 00                	push   0x0
c0011a8e:	53                   	push   ebx
c0011a8f:	e8 56 fb ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a94:	83 c4 10             	add    esp,0x10
c0011a97:	e9 5b ff ff ff       	jmp    c00119f7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a9c:	89 f0                	mov    eax,esi
c0011a9e:	84 c0                	test   al,al
c0011aa0:	75 15                	jne    c0011ab7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011aa2:	83 ec 08             	sub    esp,0x8
c0011aa5:	6a 00                	push   0x0
c0011aa7:	53                   	push   ebx
c0011aa8:	e8 3d fb ff ff       	call   c00115ea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aad:	83 c4 10             	add    esp,0x10
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	5b                   	pop    ebx
c0011ab4:	5e                   	pop    esi
c0011ab5:	5f                   	pop    edi
c0011ab6:	c3                   	ret    
c0011ab7:	c7 44 24 20 ed 7b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027bed
c0011abf:	83 c4 10             	add    esp,0x10
c0011ac2:	5b                   	pop    ebx
c0011ac3:	5e                   	pop    esi
c0011ac4:	5f                   	pop    edi
c0011ac5:	e9 cd 75 00 00       	jmp    c0019097 <Krnl::panic(char const*)>

c0011aca <VAS::freeAllocatedPages(unsigned long)>:
c0011aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ace:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ad2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ad6:	74 09                	je     c0011ae1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011ad8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011adc:	e9 c6 fe ff ff       	jmp    c00119a7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ae1:	c7 44 24 04 0c 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027a0c
c0011ae9:	e9 45 0b 00 00       	jmp    c0012633 <Dbg::kprintf(char const*, ...)>

c0011aee <VAS::virtualToPhysical(unsigned long)>:
c0011aee:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011af2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011af6:	e8 8d fe ff ff       	call   c0011988 <VAS::getPageTableEntry(unsigned long)>
c0011afb:	5a                   	pop    edx
c0011afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011afe:	59                   	pop    ecx
c0011aff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b04:	c3                   	ret    
c0011b05:	90                   	nop

c0011b06 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b06:	55                   	push   ebp
c0011b07:	57                   	push   edi
c0011b08:	56                   	push   esi
c0011b09:	53                   	push   ebx
c0011b0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b0e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b12:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b16:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b1a:	85 db                	test   ebx,ebx
c0011b1c:	7e 22                	jle    c0011b40 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b1e:	c1 e3 0c             	shl    ebx,0xc
c0011b21:	01 f3                	add    ebx,esi
c0011b23:	56                   	push   esi
c0011b24:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b2a:	55                   	push   ebp
c0011b2b:	e8 58 fe ff ff       	call   c0011988 <VAS::getPageTableEntry(unsigned long)>
c0011b30:	5a                   	pop    edx
c0011b31:	59                   	pop    ecx
c0011b32:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b34:	21 f9                	and    ecx,edi
c0011b36:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b3a:	39 f3                	cmp    ebx,esi
c0011b3c:	89 08                	mov    DWORD PTR [eax],ecx
c0011b3e:	75 e3                	jne    c0011b23 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b40:	5b                   	pop    ebx
c0011b41:	5e                   	pop    esi
c0011b42:	5f                   	pop    edi
c0011b43:	5d                   	pop    ebp
c0011b44:	c3                   	ret    
c0011b45:	90                   	nop

c0011b46 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b46:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0011b4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b51:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b58:	75 01                	jne    c0011b5b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b5a:	c3                   	ret    
c0011b5b:	68 80 00 00 00       	push   0x80
c0011b60:	6a ff                	push   0xffffffff
c0011b62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b6e:	e8 93 ff ff ff       	call   c0011b06 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b73:	83 c4 14             	add    esp,0x14
c0011b76:	c3                   	ret    
c0011b77:	90                   	nop

c0011b78 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b78:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b81:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b88:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011b8b:	19 c0                	sbb    eax,eax
c0011b8d:	83 ca 03             	or     edx,0x3
c0011b90:	83 e0 fc             	and    eax,0xfffffffc
c0011b93:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b9a:	0f 20 d8             	mov    eax,cr3
c0011b9d:	0f 22 d8             	mov    cr3,eax
c0011ba0:	c3                   	ret    
c0011ba1:	90                   	nop

c0011ba2 <VAS::~VAS()>:
c0011ba2:	83 ec 2c             	sub    esp,0x2c
c0011ba5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011bad:	e8 2b a5 00 00       	call   c001c0dd <lockScheduler()>
c0011bb2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bbc:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bc2:	83 ec 04             	sub    esp,0x4
c0011bc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011bc9:	6a 01                	push   0x1
c0011bcb:	50                   	push   eax
c0011bcc:	e8 a7 ff ff ff       	call   c0011b78 <VAS::mapOtherVASIn(bool, VAS*)>
c0011bd1:	83 c4 10             	add    esp,0x10
c0011bd4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bdc:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011be4:	0f 8f d7 00 00 00    	jg     c0011cc1 <VAS::~VAS()+0x11f>
c0011bea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011bf1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011bf5:	c1 e2 02             	shl    edx,0x2
c0011bf8:	01 d0                	add    eax,edx
c0011bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c04:	83 e0 01             	and    eax,0x1
c0011c07:	0f 84 ab 00 00 00    	je     c0011cb8 <VAS::~VAS()+0x116>
c0011c0d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c15:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c1d:	7f 75                	jg     c0011c94 <VAS::~VAS()+0xf2>
c0011c1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c23:	c1 e0 0a             	shl    eax,0xa
c0011c26:	89 c2                	mov    edx,eax
c0011c28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c2c:	01 d0                	add    eax,edx
c0011c2e:	c1 e0 0c             	shl    eax,0xc
c0011c31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c35:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c3f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c45:	83 ec 04             	sub    esp,0x4
c0011c48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c4c:	6a 01                	push   0x1
c0011c4e:	50                   	push   eax
c0011c4f:	e8 08 fd ff ff       	call   c001195c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c54:	83 c4 10             	add    esp,0x10
c0011c57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c69:	25 01 04 00 00       	and    eax,0x401
c0011c6e:	3d 01 04 00 00       	cmp    eax,0x401
c0011c73:	75 19                	jne    c0011c8e <VAS::~VAS()+0xec>
c0011c75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c7e:	83 ec 0c             	sub    esp,0xc
c0011c81:	50                   	push   eax
c0011c82:	e8 59 dd ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011c87:	83 c4 10             	add    esp,0x10
c0011c8a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c8e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c92:	eb 81                	jmp    c0011c15 <VAS::~VAS()+0x73>
c0011c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c98:	25 00 04 00 00       	and    eax,0x400
c0011c9d:	74 19                	je     c0011cb8 <VAS::~VAS()+0x116>
c0011c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ca8:	83 ec 0c             	sub    esp,0xc
c0011cab:	50                   	push   eax
c0011cac:	e8 2f dd ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011cb1:	83 c4 10             	add    esp,0x10
c0011cb4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cb8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011cbc:	e9 1b ff ff ff       	jmp    c0011bdc <VAS::~VAS()+0x3a>
c0011cc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011cc8:	83 ec 0c             	sub    esp,0xc
c0011ccb:	50                   	push   eax
c0011ccc:	e8 d6 fc ff ff       	call   c00119a7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cd1:	83 c4 10             	add    esp,0x10
c0011cd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cdb:	83 ec 0c             	sub    esp,0xc
c0011cde:	50                   	push   eax
c0011cdf:	e8 fc dc ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ceb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cef:	c1 e0 02             	shl    eax,0x2
c0011cf2:	83 ec 08             	sub    esp,0x8
c0011cf5:	50                   	push   eax
c0011cf6:	68 30 7a 02 c0       	push   0xc0027a30
c0011cfb:	e8 33 09 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0011d00:	83 c4 10             	add    esp,0x10
c0011d03:	e8 d7 a3 00 00       	call   c001c0df <unlockScheduler()>
c0011d08:	90                   	nop
c0011d09:	83 c4 2c             	add    esp,0x2c
c0011d0c:	c3                   	ret    
c0011d0d:	90                   	nop

c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d0e:	55                   	push   ebp
c0011d0f:	57                   	push   edi
c0011d10:	56                   	push   esi
c0011d11:	53                   	push   ebx
c0011d12:	83 ec 1c             	sub    esp,0x1c
c0011d15:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d1d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d23:	77 08                	ja     c0011d2d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d25:	0f 20 d8             	mov    eax,cr3
c0011d28:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d2b:	75 47                	jne    c0011d74 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d31:	09 d8                	or     eax,ebx
c0011d33:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d38:	75 57                	jne    c0011d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d3a:	89 de                	mov    esi,ebx
c0011d3c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d3f:	c1 ee 16             	shr    esi,0x16
c0011d42:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d49:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d4d:	74 54                	je     c0011da3 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d53:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d59:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d5d:	c1 e6 0c             	shl    esi,0xc
c0011d60:	c1 eb 0a             	shr    ebx,0xa
c0011d63:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d69:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d6c:	83 c4 1c             	add    esp,0x1c
c0011d6f:	5b                   	pop    ebx
c0011d70:	5e                   	pop    esi
c0011d71:	5f                   	pop    edi
c0011d72:	5d                   	pop    ebp
c0011d73:	c3                   	ret    
c0011d74:	83 ec 0c             	sub    esp,0xc
c0011d77:	68 50 7a 02 c0       	push   0xc0027a50
c0011d7c:	e8 b2 08 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d88:	09 d8                	or     eax,ebx
c0011d8a:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d8f:	74 a9                	je     c0011d3a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d91:	83 ec 0c             	sub    esp,0xc
c0011d94:	68 b8 7a 02 c0       	push   0xc0027ab8
c0011d99:	e8 f9 72 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0011d9e:	83 c4 10             	add    esp,0x10
c0011da1:	eb 97                	jmp    c0011d3a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011da3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011da7:	e8 be dc ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011dac:	89 c5                	mov    ebp,eax
c0011dae:	e8 20 fa ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c0011db3:	83 ec 0c             	sub    esp,0xc
c0011db6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dba:	6a 01                	push   0x1
c0011dbc:	e8 82 f8 ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c0011dc1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dc8:	6a 01                	push   0x1
c0011dca:	50                   	push   eax
c0011dcb:	55                   	push   ebp
c0011dcc:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dd2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dd6:	51                   	push   ecx
c0011dd7:	e8 26 02 00 00       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ddc:	83 c4 1c             	add    esp,0x1c
c0011ddf:	68 00 10 00 00       	push   0x1000
c0011de4:	6a 00                	push   0x0
c0011de6:	50                   	push   eax
c0011de7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011deb:	e8 8b e8 fe ff       	call   c000067b <memset>
c0011df0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011df4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011df7:	e8 ab fb ff ff       	call   c00119a7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dfc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e00:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e03:	83 c4 10             	add    esp,0x10
c0011e06:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e09:	e9 41 ff ff ff       	jmp    c0011d4f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e0e <VAS::allocatePages(int, int)>:
c0011e0e:	55                   	push   ebp
c0011e0f:	57                   	push   edi
c0011e10:	56                   	push   esi
c0011e11:	53                   	push   ebx
c0011e12:	83 ec 1c             	sub    esp,0x1c
c0011e15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e19:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0011e1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e24:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e2a:	83 e0 01             	and    eax,0x1
c0011e2d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e31:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e35:	0f 85 cc 00 00 00    	jne    c0011f07 <VAS::allocatePages(int, int)+0xf9>
c0011e3b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e42:	85 c0                	test   eax,eax
c0011e44:	0f 84 a1 00 00 00    	je     c0011eeb <VAS::allocatePages(int, int)+0xdd>
c0011e4a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e52:	c1 e6 0c             	shl    esi,0xc
c0011e55:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e59:	85 c0                	test   eax,eax
c0011e5b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e5e:	7e 33                	jle    c0011e93 <VAS::allocatePages(int, int)+0x85>
c0011e60:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e64:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e68:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e6e:	e8 f7 db ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011e73:	55                   	push   ebp
c0011e74:	53                   	push   ebx
c0011e75:	50                   	push   eax
c0011e76:	57                   	push   edi
c0011e77:	e8 92 fe ff ff       	call   c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e84:	74 03                	je     c0011e89 <VAS::allocatePages(int, int)+0x7b>
c0011e86:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e89:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e8f:	39 de                	cmp    esi,ebx
c0011e91:	75 db                	jne    c0011e6e <VAS::allocatePages(int, int)+0x60>
c0011e93:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e98:	75 12                	jne    c0011eac <VAS::allocatePages(int, int)+0x9e>
c0011e9a:	0f 20 d8             	mov    eax,cr3
c0011e9d:	0f 22 d8             	mov    cr3,eax
c0011ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ea4:	83 c4 1c             	add    esp,0x1c
c0011ea7:	5b                   	pop    ebx
c0011ea8:	5e                   	pop    esi
c0011ea9:	5f                   	pop    edi
c0011eaa:	5d                   	pop    ebp
c0011eab:	c3                   	ret    
c0011eac:	c1 ee 0a             	shr    esi,0xa
c0011eaf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011eb3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011eb9:	c1 eb 0a             	shr    ebx,0xa
c0011ebc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ec2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ec8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ece:	39 c3                	cmp    ebx,eax
c0011ed0:	77 ce                	ja     c0011ea0 <VAS::allocatePages(int, int)+0x92>
c0011ed2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ed5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011edb:	39 d8                	cmp    eax,ebx
c0011edd:	73 f3                	jae    c0011ed2 <VAS::allocatePages(int, int)+0xc4>
c0011edf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee3:	83 c4 1c             	add    esp,0x1c
c0011ee6:	5b                   	pop    ebx
c0011ee7:	5e                   	pop    esi
c0011ee8:	5f                   	pop    edi
c0011ee9:	5d                   	pop    ebp
c0011eea:	c3                   	ret    
c0011eeb:	83 ec 0c             	sub    esp,0xc
c0011eee:	68 dc 7a 02 c0       	push   0xc0027adc
c0011ef3:	e8 9f 71 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0011ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011efb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011eff:	83 c4 10             	add    esp,0x10
c0011f02:	e9 43 ff ff ff       	jmp    c0011e4a <VAS::allocatePages(int, int)+0x3c>
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f0e:	e8 30 f7 ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c0011f13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f17:	83 c4 10             	add    esp,0x10
c0011f1a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f1f:	0f 87 9b 00 00 00    	ja     c0011fc0 <VAS::allocatePages(int, int)+0x1b2>
c0011f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f29:	85 d2                	test   edx,edx
c0011f2b:	7e 3c                	jle    c0011f69 <VAS::allocatePages(int, int)+0x15b>
c0011f2d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f31:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f35:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f39:	c1 e5 0c             	shl    ebp,0xc
c0011f3c:	81 ce 00 04 00 00    	or     esi,0x400
c0011f42:	01 dd                	add    ebp,ebx
c0011f44:	e8 21 db ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011f49:	56                   	push   esi
c0011f4a:	53                   	push   ebx
c0011f4b:	50                   	push   eax
c0011f4c:	57                   	push   edi
c0011f4d:	e8 bc fd ff ff       	call   c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f52:	83 c4 10             	add    esp,0x10
c0011f55:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f5a:	74 03                	je     c0011f5f <VAS::allocatePages(int, int)+0x151>
c0011f5c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f5f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f65:	39 dd                	cmp    ebp,ebx
c0011f67:	75 db                	jne    c0011f44 <VAS::allocatePages(int, int)+0x136>
c0011f69:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f6e:	0f 84 26 ff ff ff    	je     c0011e9a <VAS::allocatePages(int, int)+0x8c>
c0011f74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f7c:	89 d3                	mov    ebx,edx
c0011f7e:	c1 e0 0c             	shl    eax,0xc
c0011f81:	c1 eb 0a             	shr    ebx,0xa
c0011f84:	01 d0                	add    eax,edx
c0011f86:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f8c:	c1 e8 0a             	shr    eax,0xa
c0011f8f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f95:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f9a:	2d 00 00 40 00       	sub    eax,0x400000
c0011f9f:	39 c3                	cmp    ebx,eax
c0011fa1:	0f 87 f9 fe ff ff    	ja     c0011ea0 <VAS::allocatePages(int, int)+0x92>
c0011fa7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011faa:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fb0:	39 d8                	cmp    eax,ebx
c0011fb2:	73 f3                	jae    c0011fa7 <VAS::allocatePages(int, int)+0x199>
c0011fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb8:	83 c4 1c             	add    esp,0x1c
c0011fbb:	5b                   	pop    ebx
c0011fbc:	5e                   	pop    esi
c0011fbd:	5f                   	pop    edi
c0011fbe:	5d                   	pop    ebp
c0011fbf:	c3                   	ret    
c0011fc0:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0011fc5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fcb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fd2:	0f 84 4d ff ff ff    	je     c0011f25 <VAS::allocatePages(int, int)+0x117>
c0011fd8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fe0:	e9 40 ff ff ff       	jmp    c0011f25 <VAS::allocatePages(int, int)+0x117>
c0011fe5:	90                   	nop

c0011fe6 <VAS::setCPUSpecific(unsigned long)>:
c0011fe6:	83 ec 0c             	sub    esp,0xc
c0011fe9:	6a 05                	push   0x5
c0011feb:	68 00 00 40 c2       	push   0xc2400000
c0011ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff8:	e8 11 fd ff ff       	call   c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ffd:	83 c4 1c             	add    esp,0x1c
c0012000:	c3                   	ret    
c0012001:	90                   	nop

c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012002:	55                   	push   ebp
c0012003:	57                   	push   edi
c0012004:	56                   	push   esi
c0012005:	53                   	push   ebx
c0012006:	83 ec 1c             	sub    esp,0x1c
c0012009:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001200e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012012:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012018:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001201c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012022:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012026:	83 e0 01             	and    eax,0x1
c0012029:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001202d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012031:	85 c0                	test   eax,eax
c0012033:	7e 39                	jle    c001206e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012035:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012039:	89 f3                	mov    ebx,esi
c001203b:	c1 e0 0c             	shl    eax,0xc
c001203e:	01 f0                	add    eax,esi
c0012040:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012044:	55                   	push   ebp
c0012045:	53                   	push   ebx
c0012046:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001204a:	29 f0                	sub    eax,esi
c001204c:	01 d8                	add    eax,ebx
c001204e:	50                   	push   eax
c001204f:	57                   	push   edi
c0012050:	e8 b9 fc ff ff       	call   c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012055:	83 c4 10             	add    esp,0x10
c0012058:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001205d:	74 03                	je     c0012062 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001205f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012062:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012068:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001206c:	75 d6                	jne    c0012044 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001206e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012073:	75 10                	jne    c0012085 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012075:	0f 20 d8             	mov    eax,cr3
c0012078:	0f 22 d8             	mov    cr3,eax
c001207b:	83 c4 1c             	add    esp,0x1c
c001207e:	89 f0                	mov    eax,esi
c0012080:	5b                   	pop    ebx
c0012081:	5e                   	pop    esi
c0012082:	5f                   	pop    edi
c0012083:	5d                   	pop    ebp
c0012084:	c3                   	ret    
c0012085:	89 f3                	mov    ebx,esi
c0012087:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001208b:	c1 eb 0a             	shr    ebx,0xa
c001208e:	c1 e0 0c             	shl    eax,0xc
c0012091:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012097:	01 f0                	add    eax,esi
c0012099:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001209f:	c1 e8 0a             	shr    eax,0xa
c00120a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a7:	2d 00 00 40 00       	sub    eax,0x400000
c00120ac:	39 c3                	cmp    ebx,eax
c00120ae:	77 cb                	ja     c001207b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120b9:	39 d8                	cmp    eax,ebx
c00120bb:	73 f3                	jae    c00120b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120bd:	83 c4 1c             	add    esp,0x1c
c00120c0:	89 f0                	mov    eax,esi
c00120c2:	5b                   	pop    ebx
c00120c3:	5e                   	pop    esi
c00120c4:	5f                   	pop    edi
c00120c5:	5d                   	pop    ebp
c00120c6:	c3                   	ret    
c00120c7:	90                   	nop

c00120c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120c8:	55                   	push   ebp
c00120c9:	57                   	push   edi
c00120ca:	56                   	push   esi
c00120cb:	53                   	push   ebx
c00120cc:	83 ec 1c             	sub    esp,0x1c
c00120cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120d7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120df:	a9 ff 0f 00 00       	test   eax,0xfff
c00120e4:	75 4a                	jne    c0012130 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120ea:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120ed:	c1 eb 16             	shr    ebx,0x16
c00120f0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00120f7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00120fb:	74 4d                	je     c001214a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00120fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012101:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012105:	c1 e8 0a             	shr    eax,0xa
c0012108:	80 fa 01             	cmp    dl,0x1
c001210b:	19 d2                	sbb    edx,edx
c001210d:	c1 e3 0c             	shl    ebx,0xc
c0012110:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012114:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001211a:	25 fc 0f 00 00       	and    eax,0xffc
c001211f:	01 d8                	add    eax,ebx
c0012121:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012128:	83 c4 1c             	add    esp,0x1c
c001212b:	5b                   	pop    ebx
c001212c:	5e                   	pop    esi
c001212d:	5f                   	pop    edi
c001212e:	5d                   	pop    ebp
c001212f:	c3                   	ret    
c0012130:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012134:	83 ec 0c             	sub    esp,0xc
c0012137:	68 08 7b 02 c0       	push   0xc0027b08
c001213c:	e8 56 6f 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012148:	eb 9c                	jmp    c00120e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001214a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001214e:	e8 17 d9 ff ff       	call   c000fa6a <Phys::allocatePage()>
c0012153:	89 c5                	mov    ebp,eax
c0012155:	e8 79 f6 ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c001215a:	83 ec 0c             	sub    esp,0xc
c001215d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012161:	6a 01                	push   0x1
c0012163:	e8 db f4 ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c0012168:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001216f:	6a 01                	push   0x1
c0012171:	50                   	push   eax
c0012172:	55                   	push   ebp
c0012173:	81 cd 07 04 00 00    	or     ebp,0x407
c0012179:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001217d:	51                   	push   ecx
c001217e:	e8 7f fe ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012183:	83 c4 1c             	add    esp,0x1c
c0012186:	68 00 10 00 00       	push   0x1000
c001218b:	6a 00                	push   0x0
c001218d:	50                   	push   eax
c001218e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012192:	e8 e4 e4 fe ff       	call   c000067b <memset>
c0012197:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001219b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001219e:	e8 04 f8 ff ff       	call   c00119a7 <Virt::freeKernelVirtualPages(unsigned long)>
c00121a3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121a6:	83 c4 10             	add    esp,0x10
c00121a9:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121b0:	e9 48 ff ff ff       	jmp    c00120fd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00121b5:	90                   	nop

c00121b6 <VAS::VAS(bool)>:
c00121b6:	53                   	push   ebx
c00121b7:	83 ec 28             	sub    esp,0x28
c00121ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121d5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121d8:	e8 8d d8 ff ff       	call   c000fa6a <Phys::allocatePage()>
c00121dd:	89 c2                	mov    edx,eax
c00121df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121e6:	e8 e8 f5 ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c00121eb:	89 c3                	mov    ebx,eax
c00121ed:	83 ec 0c             	sub    esp,0xc
c00121f0:	6a 01                	push   0x1
c00121f2:	e8 4c f4 ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	89 c2                	mov    edx,eax
c00121fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012200:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012203:	83 ec 0c             	sub    esp,0xc
c0012206:	6a 03                	push   0x3
c0012208:	6a 01                	push   0x1
c001220a:	52                   	push   edx
c001220b:	50                   	push   eax
c001220c:	53                   	push   ebx
c001220d:	e8 f0 fd ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012212:	83 c4 20             	add    esp,0x20
c0012215:	89 c2                	mov    edx,eax
c0012217:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001221b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001221e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012226:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001222e:	7f 1c                	jg     c001224c <VAS::VAS(bool)+0x96>
c0012230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012234:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012237:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001223b:	c1 e2 02             	shl    edx,0x2
c001223e:	01 d0                	add    eax,edx
c0012240:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012246:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001224a:	eb da                	jmp    c0012226 <VAS::VAS(bool)+0x70>
c001224c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012254:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001225c:	7f 7a                	jg     c00122d8 <VAS::VAS(bool)+0x122>
c001225e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012262:	2d 00 02 00 00       	sub    eax,0x200
c0012267:	c1 e0 0c             	shl    eax,0xc
c001226a:	83 c8 03             	or     eax,0x3
c001226d:	89 c2                	mov    edx,eax
c001226f:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0012274:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001227a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012280:	83 e0 10             	and    eax,0x10
c0012283:	84 c0                	test   al,al
c0012285:	74 07                	je     c001228e <VAS::VAS(bool)+0xd8>
c0012287:	b8 00 01 00 00       	mov    eax,0x100
c001228c:	eb 05                	jmp    c0012293 <VAS::VAS(bool)+0xdd>
c001228e:	b8 00 00 00 00       	mov    eax,0x0
c0012293:	09 d0                	or     eax,edx
c0012295:	89 c1                	mov    ecx,eax
c0012297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001229e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122a2:	c1 e2 02             	shl    edx,0x2
c00122a5:	01 d0                	add    eax,edx
c00122a7:	89 ca                	mov    edx,ecx
c00122a9:	89 10                	mov    DWORD PTR [eax],edx
c00122ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122af:	2d 40 03 00 00       	sub    eax,0x340
c00122b4:	83 f8 7f             	cmp    eax,0x7f
c00122b7:	77 16                	ja     c00122cf <VAS::VAS(bool)+0x119>
c00122b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122c4:	c1 e2 02             	shl    edx,0x2
c00122c7:	01 d0                	add    eax,edx
c00122c9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122cf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122d3:	e9 7c ff ff ff       	jmp    c0012254 <VAS::VAS(bool)+0x9e>
c00122d8:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00122dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122e9:	83 e0 10             	and    eax,0x10
c00122ec:	84 c0                	test   al,al
c00122ee:	74 07                	je     c00122f7 <VAS::VAS(bool)+0x141>
c00122f0:	b8 03 41 00 00       	mov    eax,0x4103
c00122f5:	eb 05                	jmp    c00122fc <VAS::VAS(bool)+0x146>
c00122f7:	b8 03 40 00 00       	mov    eax,0x4003
c00122fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012300:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012303:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012309:	89 02                	mov    DWORD PTR [edx],eax
c001230b:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0012310:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012316:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001231c:	83 ec 08             	sub    esp,0x8
c001231f:	50                   	push   eax
c0012320:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012324:	e8 bd fc ff ff       	call   c0011fe6 <VAS::setCPUSpecific(unsigned long)>
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012330:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012333:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0012338:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001233e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012344:	83 e0 10             	and    eax,0x10
c0012347:	84 c0                	test   al,al
c0012349:	74 07                	je     c0012352 <VAS::VAS(bool)+0x19c>
c001234b:	b8 00 01 00 00       	mov    eax,0x100
c0012350:	eb 05                	jmp    c0012357 <VAS::VAS(bool)+0x1a1>
c0012352:	b8 00 00 00 00       	mov    eax,0x0
c0012357:	09 c2                	or     edx,eax
c0012359:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012360:	05 fc 0f 00 00       	add    eax,0xffc
c0012365:	83 ca 03             	or     edx,0x3
c0012368:	89 10                	mov    DWORD PTR [eax],edx
c001236a:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001236f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012375:	83 ec 0c             	sub    esp,0xc
c0012378:	50                   	push   eax
c0012379:	e8 90 19 00 00       	call   c0013d0e <Device::getName()>
c001237e:	83 c4 10             	add    esp,0x10
c0012381:	83 ec 08             	sub    esp,0x8
c0012384:	68 07 7c 02 c0       	push   0xc0027c07
c0012389:	50                   	push   eax
c001238a:	e8 dc e3 fe ff       	call   c000076b <strcmp>
c001238f:	83 c4 10             	add    esp,0x10
c0012392:	85 c0                	test   eax,eax
c0012394:	0f 94 c0             	sete   al
c0012397:	84 c0                	test   al,al
c0012399:	74 70                	je     c001240b <VAS::VAS(bool)+0x255>
c001239b:	e8 20 9d 00 00       	call   c001c0c0 <disableIRQs()>
c00123a0:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00123a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ab:	05 7c 09 00 00       	add    eax,0x97c
c00123b0:	83 ec 0c             	sub    esp,0xc
c00123b3:	50                   	push   eax
c00123b4:	e8 83 cb ff ff       	call   c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123b9:	83 c4 10             	add    esp,0x10
c00123bc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123c1:	89 c3                	mov    ebx,eax
c00123c3:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00123c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ce:	05 7c 09 00 00       	add    eax,0x97c
c00123d3:	83 ec 0c             	sub    esp,0xc
c00123d6:	50                   	push   eax
c00123d7:	e8 60 cb ff ff       	call   c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123dc:	83 c4 10             	add    esp,0x10
c00123df:	83 ec 08             	sub    esp,0x8
c00123e2:	50                   	push   eax
c00123e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123e7:	e8 9c f5 ff ff       	call   c0011988 <VAS::getPageTableEntry(unsigned long)>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00123f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123f6:	6a 11                	push   0x11
c00123f8:	53                   	push   ebx
c00123f9:	50                   	push   eax
c00123fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123fe:	e8 0b f9 ff ff       	call   c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012403:	83 c4 10             	add    esp,0x10
c0012406:	e8 c3 9c 00 00       	call   c001c0ce <enableIRQs()>
c001240b:	90                   	nop
c001240c:	83 c4 28             	add    esp,0x28
c001240f:	5b                   	pop    ebx
c0012410:	c3                   	ret    

c0012411 <mapVASFirstTime>:
c0012411:	55                   	push   ebp
c0012412:	57                   	push   edi
c0012413:	56                   	push   esi
c0012414:	53                   	push   ebx
c0012415:	83 ec 0c             	sub    esp,0xc
c0012418:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001241d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012420:	4a                   	dec    edx
c0012421:	0f 84 8e 00 00 00    	je     c00124b5 <mapVASFirstTime+0xa4>
c0012427:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001242a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001242d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012432:	c1 e5 15             	shl    ebp,0x15
c0012435:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001243a:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012440:	29 eb                	sub    ebx,ebp
c0012442:	29 ee                	sub    esi,ebp
c0012444:	e8 21 d6 ff ff       	call   c000fa6a <Phys::allocatePage()>
c0012449:	83 ec 0c             	sub    esp,0xc
c001244c:	68 03 04 00 00       	push   0x403
c0012451:	6a 01                	push   0x1
c0012453:	53                   	push   ebx
c0012454:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001245a:	50                   	push   eax
c001245b:	57                   	push   edi
c001245c:	e8 a1 fb ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012461:	83 c4 20             	add    esp,0x20
c0012464:	39 f3                	cmp    ebx,esi
c0012466:	75 dc                	jne    c0012444 <mapVASFirstTime+0x33>
c0012468:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001246d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012472:	29 ee                	sub    esi,ebp
c0012474:	29 e8                	sub    eax,ebp
c0012476:	89 c5                	mov    ebp,eax
c0012478:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001247c:	19 db                	sbb    ebx,ebx
c001247e:	e8 e7 d5 ff ff       	call   c000fa6a <Phys::allocatePage()>
c0012483:	83 e3 04             	and    ebx,0x4
c0012486:	83 ec 0c             	sub    esp,0xc
c0012489:	81 c3 03 04 00 00    	add    ebx,0x403
c001248f:	53                   	push   ebx
c0012490:	6a 01                	push   0x1
c0012492:	56                   	push   esi
c0012493:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012499:	50                   	push   eax
c001249a:	57                   	push   edi
c001249b:	e8 62 fb ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124a0:	83 c4 20             	add    esp,0x20
c00124a3:	39 f5                	cmp    ebp,esi
c00124a5:	75 d1                	jne    c0012478 <mapVASFirstTime+0x67>
c00124a7:	0f 20 d8             	mov    eax,cr3
c00124aa:	0f 22 d8             	mov    cr3,eax
c00124ad:	83 c4 0c             	add    esp,0xc
c00124b0:	5b                   	pop    ebx
c00124b1:	5e                   	pop    esi
c00124b2:	5f                   	pop    edi
c00124b3:	5d                   	pop    ebp
c00124b4:	c3                   	ret    
c00124b5:	83 ec 0c             	sub    esp,0xc
c00124b8:	68 15 7c 02 c0       	push   0xc0027c15
c00124bd:	e8 71 01 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	83 c4 0c             	add    esp,0xc
c00124c8:	5b                   	pop    ebx
c00124c9:	5e                   	pop    esi
c00124ca:	5f                   	pop    edi
c00124cb:	5d                   	pop    ebp
c00124cc:	c3                   	ret    

c00124cd <__cxa_atexit>:
c00124cd:	31 c0                	xor    eax,eax
c00124cf:	c3                   	ret    

c00124d0 <__cxa_finalize>:
c00124d0:	c3                   	ret    

c00124d1 <__stack_chk_fail>:
c00124d1:	55                   	push   ebp
c00124d2:	89 e5                	mov    ebp,esp
c00124d4:	83 ec 14             	sub    esp,0x14
c00124d7:	68 2e 7c 02 c0       	push   0xc0027c2e
c00124dc:	e8 52 01 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00124e1:	58                   	pop    eax
c00124e2:	5a                   	pop    edx
c00124e3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00124e6:	68 7e 7c 02 c0       	push   0xc0027c7e
c00124eb:	e8 43 01 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00124f0:	59                   	pop    ecx
c00124f1:	58                   	pop    eax
c00124f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124f5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124f8:	68 7e 7c 02 c0       	push   0xc0027c7e
c00124fd:	e8 31 01 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0012502:	5a                   	pop    edx
c0012503:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012506:	59                   	pop    ecx
c0012507:	8b 00                	mov    eax,DWORD PTR [eax]
c0012509:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001250c:	68 7e 7c 02 c0       	push   0xc0027c7e
c0012511:	e8 1d 01 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0012516:	5a                   	pop    edx
c0012517:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001251a:	59                   	pop    ecx
c001251b:	8b 00                	mov    eax,DWORD PTR [eax]
c001251d:	8b 00                	mov    eax,DWORD PTR [eax]
c001251f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012522:	68 7e 7c 02 c0       	push   0xc0027c7e
c0012527:	e8 07 01 00 00       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001252c:	c7 04 24 86 7c 02 c0 	mov    DWORD PTR [esp],0xc0027c86
c0012533:	e8 5f 6b 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0012538:	83 c4 10             	add    esp,0x10
c001253b:	c9                   	leave  
c001253c:	c3                   	ret    

c001253d <__cxa_pure_virtual>:
c001253d:	83 ec 18             	sub    esp,0x18
c0012540:	68 9e 7c 02 c0       	push   0xc0027c9e
c0012545:	e8 4d 6b 00 00       	call   c0019097 <Krnl::panic(char const*)>
c001254a:	83 c4 1c             	add    esp,0x1c
c001254d:	c3                   	ret    

c001254e <operator new[](unsigned long)>:
c001254e:	e9 6d cf ff ff       	jmp    c000f4c0 <malloc>

c0012553 <operator delete(void*, unsigned long)>:
c0012553:	e9 88 cf ff ff       	jmp    c000f4e0 <rfree>

c0012558 <operator delete[](void*)>:
c0012558:	e9 83 cf ff ff       	jmp    c000f4e0 <rfree>

c001255d <operator delete[](void*, unsigned long)>:
c001255d:	e9 7e cf ff ff       	jmp    c000f4e0 <rfree>

c0012562 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012562:	57                   	push   edi
c0012563:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012568:	56                   	push   esi
c0012569:	be b4 7c 02 c0       	mov    esi,0xc0027cb4
c001256e:	53                   	push   ebx
c001256f:	83 ec 40             	sub    esp,0x40
c0012572:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012576:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001257a:	fc                   	cld    
c001257b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001257d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012581:	83 f9 3e             	cmp    ecx,0x3e
c0012584:	7e 05                	jle    c001258b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012586:	b9 3e 00 00 00       	mov    ecx,0x3e
c001258b:	89 df                	mov    edi,ebx
c001258d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012591:	eb 02                	jmp    c0012595 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012593:	89 c7                	mov    edi,eax
c0012595:	31 d2                	xor    edx,edx
c0012597:	46                   	inc    esi
c0012598:	89 f8                	mov    eax,edi
c001259a:	f7 f1                	div    ecx
c001259c:	39 cf                	cmp    edi,ecx
c001259e:	73 f3                	jae    c0012593 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00125a0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125a3:	eb 02                	jmp    c00125a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00125a5:	89 c3                	mov    ebx,eax
c00125a7:	31 d2                	xor    edx,edx
c00125a9:	4e                   	dec    esi
c00125aa:	89 d8                	mov    eax,ebx
c00125ac:	f7 f1                	div    ecx
c00125ae:	39 cb                	cmp    ebx,ecx
c00125b0:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00125b4:	88 16                	mov    BYTE PTR [esi],dl
c00125b6:	73 ed                	jae    c00125a5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00125b8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00125bc:	83 c4 40             	add    esp,0x40
c00125bf:	5b                   	pop    ebx
c00125c0:	5e                   	pop    esi
c00125c1:	5f                   	pop    edi
c00125c2:	c3                   	ret    

c00125c3 <Dbg::logc(char)>:
c00125c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125c7:	ba fd 03 00 00       	mov    edx,0x3fd
c00125cc:	ec                   	in     al,dx
c00125cd:	a8 20                	test   al,0x20
c00125cf:	74 fb                	je     c00125cc <Dbg::logc(char)+0x9>
c00125d1:	ba f8 03 00 00       	mov    edx,0x3f8
c00125d6:	88 c8                	mov    al,cl
c00125d8:	ee                   	out    dx,al
c00125d9:	c3                   	ret    

c00125da <Dbg::logs(char*)>:
c00125da:	53                   	push   ebx
c00125db:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00125df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125e2:	84 c0                	test   al,al
c00125e4:	74 0f                	je     c00125f5 <Dbg::logs(char*)+0x1b>
c00125e6:	50                   	push   eax
c00125e7:	43                   	inc    ebx
c00125e8:	e8 d6 ff ff ff       	call   c00125c3 <Dbg::logc(char)>
c00125ed:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125f0:	5a                   	pop    edx
c00125f1:	84 c0                	test   al,al
c00125f3:	75 f1                	jne    c00125e6 <Dbg::logs(char*)+0xc>
c00125f5:	5b                   	pop    ebx
c00125f6:	c3                   	ret    

c00125f7 <Dbg::logWriteInt(unsigned int)>:
c00125f7:	83 ec 10             	sub    esp,0x10
c00125fa:	6a 0a                	push   0xa
c00125fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012600:	50                   	push   eax
c0012601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012605:	e8 58 ff ff ff       	call   c0012562 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001260a:	50                   	push   eax
c001260b:	e8 ca ff ff ff       	call   c00125da <Dbg::logs(char*)>
c0012610:	83 c4 20             	add    esp,0x20
c0012613:	c3                   	ret    

c0012614 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012614:	83 ec 10             	sub    esp,0x10
c0012617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001261b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001261f:	50                   	push   eax
c0012620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012624:	e8 39 ff ff ff       	call   c0012562 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012629:	50                   	push   eax
c001262a:	e8 ab ff ff ff       	call   c00125da <Dbg::logs(char*)>
c001262f:	83 c4 20             	add    esp,0x20
c0012632:	c3                   	ret    

c0012633 <Dbg::kprintf(char const*, ...)>:
c0012633:	55                   	push   ebp
c0012634:	57                   	push   edi
c0012635:	56                   	push   esi
c0012636:	53                   	push   ebx
c0012637:	83 ec 0c             	sub    esp,0xc
c001263a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001263e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012642:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012646:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012649:	84 c0                	test   al,al
c001264b:	74 4a                	je     c0012697 <Dbg::kprintf(char const*, ...)+0x64>
c001264d:	31 db                	xor    ebx,ebx
c001264f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012652:	3c 25                	cmp    al,0x25
c0012654:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012657:	0f 85 e4 00 00 00    	jne    c0012741 <Dbg::kprintf(char const*, ...)+0x10e>
c001265d:	83 c3 02             	add    ebx,0x2
c0012660:	8a 07                	mov    al,BYTE PTR [edi]
c0012662:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012665:	83 e8 25             	sub    eax,0x25
c0012668:	3c 53                	cmp    al,0x53
c001266a:	0f 87 ba 00 00 00    	ja     c001272a <Dbg::kprintf(char const*, ...)+0xf7>
c0012670:	0f b6 c0             	movzx  eax,al
c0012673:	ff 24 85 f4 7c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd830c]
c001267a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001267e:	89 c8                	mov    eax,ecx
c0012680:	83 c1 04             	add    ecx,0x4
c0012683:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012687:	ff 30                	push   DWORD PTR [eax]
c0012689:	e8 4c ff ff ff       	call   c00125da <Dbg::logs(char*)>
c001268e:	58                   	pop    eax
c001268f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012693:	84 c0                	test   al,al
c0012695:	75 b8                	jne    c001264f <Dbg::kprintf(char const*, ...)+0x1c>
c0012697:	83 c4 0c             	add    esp,0xc
c001269a:	5b                   	pop    ebx
c001269b:	5e                   	pop    esi
c001269c:	5f                   	pop    edi
c001269d:	5d                   	pop    ebp
c001269e:	c3                   	ret    
c001269f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126a3:	89 d0                	mov    eax,edx
c00126a5:	83 c2 04             	add    edx,0x4
c00126a8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126ac:	ff 30                	push   DWORD PTR [eax]
c00126ae:	e8 44 ff ff ff       	call   c00125f7 <Dbg::logWriteInt(unsigned int)>
c00126b3:	58                   	pop    eax
c00126b4:	eb d9                	jmp    c001268f <Dbg::kprintf(char const*, ...)+0x5c>
c00126b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126ba:	89 d0                	mov    eax,edx
c00126bc:	83 c2 04             	add    edx,0x4
c00126bf:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00126c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126c6:	50                   	push   eax
c00126c7:	e8 f7 fe ff ff       	call   c00125c3 <Dbg::logc(char)>
c00126cc:	58                   	pop    eax
c00126cd:	eb c0                	jmp    c001268f <Dbg::kprintf(char const*, ...)+0x5c>
c00126cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126d3:	89 c8                	mov    eax,ecx
c00126d5:	83 c1 04             	add    ecx,0x4
c00126d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126dc:	ff 30                	push   DWORD PTR [eax]
c00126de:	e8 14 ff ff ff       	call   c00125f7 <Dbg::logWriteInt(unsigned int)>
c00126e3:	5f                   	pop    edi
c00126e4:	eb a9                	jmp    c001268f <Dbg::kprintf(char const*, ...)+0x5c>
c00126e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126ea:	89 c8                	mov    eax,ecx
c00126ec:	83 c1 04             	add    ecx,0x4
c00126ef:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126f3:	6a 10                	push   0x10
c00126f5:	ff 30                	push   DWORD PTR [eax]
c00126f7:	e8 18 ff ff ff       	call   c0012614 <Dbg::logWriteIntBase(unsigned int, int)>
c00126fc:	59                   	pop    ecx
c00126fd:	5f                   	pop    edi
c00126fe:	eb 8f                	jmp    c001268f <Dbg::kprintf(char const*, ...)+0x5c>
c0012700:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012704:	89 d0                	mov    eax,edx
c0012706:	83 c2 08             	add    edx,0x8
c0012709:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001270d:	6a 10                	push   0x10
c001270f:	ff 30                	push   DWORD PTR [eax]
c0012711:	e8 fe fe ff ff       	call   c0012614 <Dbg::logWriteIntBase(unsigned int, int)>
c0012716:	58                   	pop    eax
c0012717:	5a                   	pop    edx
c0012718:	e9 72 ff ff ff       	jmp    c001268f <Dbg::kprintf(char const*, ...)+0x5c>
c001271d:	6a 25                	push   0x25
c001271f:	e8 9f fe ff ff       	call   c00125c3 <Dbg::logc(char)>
c0012724:	58                   	pop    eax
c0012725:	e9 65 ff ff ff       	jmp    c001268f <Dbg::kprintf(char const*, ...)+0x5c>
c001272a:	6a 25                	push   0x25
c001272c:	e8 92 fe ff ff       	call   c00125c3 <Dbg::logc(char)>
c0012731:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012734:	50                   	push   eax
c0012735:	e8 89 fe ff ff       	call   c00125c3 <Dbg::logc(char)>
c001273a:	5a                   	pop    edx
c001273b:	59                   	pop    ecx
c001273c:	e9 4e ff ff ff       	jmp    c001268f <Dbg::kprintf(char const*, ...)+0x5c>
c0012741:	50                   	push   eax
c0012742:	89 eb                	mov    ebx,ebp
c0012744:	e8 7a fe ff ff       	call   c00125c3 <Dbg::logc(char)>
c0012749:	89 fd                	mov    ebp,edi
c001274b:	58                   	pop    eax
c001274c:	e9 3e ff ff ff       	jmp    c001268f <Dbg::kprintf(char const*, ...)+0x5c>
c0012751:	90                   	nop

c0012752 <File::read(unsigned long long, void*, int*)>:
c0012752:	53                   	push   ebx
c0012753:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012757:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001275b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012762:	3c 19                	cmp    al,0x19
c0012764:	77 35                	ja     c001279b <File::read(unsigned long long, void*, int*)+0x49>
c0012766:	8b 04 85 c0 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4940]
c001276d:	85 c0                	test   eax,eax
c001276f:	74 2a                	je     c001279b <File::read(unsigned long long, void*, int*)+0x49>
c0012771:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012777:	85 c0                	test   eax,eax
c0012779:	74 20                	je     c001279b <File::read(unsigned long long, void*, int*)+0x49>
c001277b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001277f:	74 21                	je     c00127a2 <File::read(unsigned long long, void*, int*)+0x50>
c0012781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012783:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012787:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001278d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012795:	5b                   	pop    ebx
c0012796:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012799:	ff e0                	jmp    eax
c001279b:	b8 0b 00 00 00       	mov    eax,0xb
c00127a0:	eb 05                	jmp    c00127a7 <File::read(unsigned long long, void*, int*)+0x55>
c00127a2:	b8 05 00 00 00       	mov    eax,0x5
c00127a7:	5b                   	pop    ebx
c00127a8:	c3                   	ret    
c00127a9:	90                   	nop

c00127aa <File::write(unsigned long long, void*, int*)>:
c00127aa:	53                   	push   ebx
c00127ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127b3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127ba:	3c 19                	cmp    al,0x19
c00127bc:	77 35                	ja     c00127f3 <File::write(unsigned long long, void*, int*)+0x49>
c00127be:	8b 04 85 c0 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4940]
c00127c5:	85 c0                	test   eax,eax
c00127c7:	74 2a                	je     c00127f3 <File::write(unsigned long long, void*, int*)+0x49>
c00127c9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127cf:	85 c0                	test   eax,eax
c00127d1:	74 20                	je     c00127f3 <File::write(unsigned long long, void*, int*)+0x49>
c00127d3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127d7:	74 21                	je     c00127fa <File::write(unsigned long long, void*, int*)+0x50>
c00127d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127df:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ed:	5b                   	pop    ebx
c00127ee:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00127f1:	ff e0                	jmp    eax
c00127f3:	b8 0b 00 00 00       	mov    eax,0xb
c00127f8:	eb 05                	jmp    c00127ff <File::write(unsigned long long, void*, int*)+0x55>
c00127fa:	b8 05 00 00 00       	mov    eax,0x5
c00127ff:	5b                   	pop    ebx
c0012800:	c3                   	ret    
c0012801:	90                   	nop

c0012802 <Directory::read(unsigned long long, void*, int*)>:
c0012802:	53                   	push   ebx
c0012803:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012807:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001280b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012812:	3c 19                	cmp    al,0x19
c0012814:	77 35                	ja     c001284b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012816:	8b 04 85 c0 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4940]
c001281d:	85 c0                	test   eax,eax
c001281f:	74 2a                	je     c001284b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012821:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012827:	85 c0                	test   eax,eax
c0012829:	74 20                	je     c001284b <Directory::read(unsigned long long, void*, int*)+0x49>
c001282b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001282f:	74 21                	je     c0012852 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012831:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012833:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012837:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001283d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012841:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012845:	5b                   	pop    ebx
c0012846:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012849:	ff e0                	jmp    eax
c001284b:	b8 0b 00 00 00       	mov    eax,0xb
c0012850:	eb 05                	jmp    c0012857 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012852:	b8 05 00 00 00       	mov    eax,0x5
c0012857:	5b                   	pop    ebx
c0012858:	c3                   	ret    
c0012859:	90                   	nop

c001285a <Directory::write(unsigned long long, void*, int*)>:
c001285a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001285e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012865:	b8 0b 00 00 00       	mov    eax,0xb
c001286a:	80 fa 19             	cmp    dl,0x19
c001286d:	77 18                	ja     c0012887 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001286f:	8b 14 95 c0 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4940]
c0012876:	85 d2                	test   edx,edx
c0012878:	74 0d                	je     c0012887 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001287a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012881:	19 c0                	sbb    eax,eax
c0012883:	83 e0 0a             	and    eax,0xa
c0012886:	40                   	inc    eax
c0012887:	c3                   	ret    

c0012888 <File::isAtty()>:
c0012888:	31 c0                	xor    eax,eax
c001288a:	c3                   	ret    
c001288b:	90                   	nop

c001288c <Directory::isAtty()>:
c001288c:	31 c0                	xor    eax,eax
c001288e:	c3                   	ret    
c001288f:	90                   	nop

c0012890 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012890:	b8 0a 00 00 00       	mov    eax,0xa
c0012895:	c3                   	ret    

c0012896 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012896:	b8 0a 00 00 00       	mov    eax,0xa
c001289b:	c3                   	ret    

c001289c <File::~File()>:
c001289c:	83 ec 0c             	sub    esp,0xc
c001289f:	ba b0 7e 02 c0       	mov    edx,0xc0027eb0
c00128a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a8:	89 10                	mov    DWORD PTR [eax],edx
c00128aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ae:	83 ec 0c             	sub    esp,0xc
c00128b1:	50                   	push   eax
c00128b2:	e8 2b eb ff ff       	call   c00113e2 <UnixFile::~UnixFile()>
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	90                   	nop
c00128bb:	83 c4 0c             	add    esp,0xc
c00128be:	c3                   	ret    
c00128bf:	90                   	nop

c00128c0 <File::~File()>:
c00128c0:	83 ec 0c             	sub    esp,0xc
c00128c3:	83 ec 0c             	sub    esp,0xc
c00128c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ca:	e8 cd ff ff ff       	call   c001289c <File::~File()>
c00128cf:	83 c4 10             	add    esp,0x10
c00128d2:	83 ec 08             	sub    esp,0x8
c00128d5:	68 14 01 00 00       	push   0x114
c00128da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128de:	e8 70 fc ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00128e3:	83 c4 10             	add    esp,0x10
c00128e6:	83 c4 0c             	add    esp,0xc
c00128e9:	c3                   	ret    

c00128ea <Directory::~Directory()>:
c00128ea:	83 ec 0c             	sub    esp,0xc
c00128ed:	ba cc 7e 02 c0       	mov    edx,0xc0027ecc
c00128f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f6:	89 10                	mov    DWORD PTR [eax],edx
c00128f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128fc:	83 ec 0c             	sub    esp,0xc
c00128ff:	50                   	push   eax
c0012900:	e8 dd ea ff ff       	call   c00113e2 <UnixFile::~UnixFile()>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	90                   	nop
c0012909:	83 c4 0c             	add    esp,0xc
c001290c:	c3                   	ret    
c001290d:	90                   	nop

c001290e <Directory::~Directory()>:
c001290e:	83 ec 0c             	sub    esp,0xc
c0012911:	83 ec 0c             	sub    esp,0xc
c0012914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012918:	e8 cd ff ff ff       	call   c00128ea <Directory::~Directory()>
c001291d:	83 c4 10             	add    esp,0x10
c0012920:	83 ec 08             	sub    esp,0x8
c0012923:	68 14 01 00 00       	push   0x114
c0012928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001292c:	e8 22 fc ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0012931:	83 c4 10             	add    esp,0x10
c0012934:	83 c4 0c             	add    esp,0xc
c0012937:	c3                   	ret    

c0012938 <Filesystem::Filesystem()>:
c0012938:	ba 4c 7e 02 c0       	mov    edx,0xc0027e4c
c001293d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012941:	89 10                	mov    DWORD PTR [eax],edx
c0012943:	8b 15 28 b2 02 c0    	mov    edx,DWORD PTR ds:0xc002b228
c0012949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001294d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012954:	a3 28 b2 02 c0       	mov    ds:0xc002b228,eax
c0012959:	90                   	nop
c001295a:	c3                   	ret    
c001295b:	90                   	nop

c001295c <Filesystem::~Filesystem()>:
c001295c:	ba 4c 7e 02 c0       	mov    edx,0xc0027e4c
c0012961:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012965:	89 10                	mov    DWORD PTR [eax],edx
c0012967:	90                   	nop
c0012968:	c3                   	ret    
c0012969:	90                   	nop

c001296a <Filesystem::~Filesystem()>:
c001296a:	83 ec 0c             	sub    esp,0xc
c001296d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012971:	e8 e6 ff ff ff       	call   c001295c <Filesystem::~Filesystem()>
c0012976:	83 c4 04             	add    esp,0x4
c0012979:	83 ec 08             	sub    esp,0x8
c001297c:	6a 08                	push   0x8
c001297e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012982:	e8 cc fb ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0012987:	83 c4 10             	add    esp,0x10
c001298a:	83 c4 0c             	add    esp,0xc
c001298d:	c3                   	ret    

c001298e <initVFS()>:
c001298e:	83 ec 18             	sub    esp,0x18
c0012991:	6a 08                	push   0x8
c0012993:	e8 28 cb ff ff       	call   c000f4c0 <malloc>
c0012998:	89 04 24             	mov    DWORD PTR [esp],eax
c001299b:	e8 fa c5 00 00       	call   c001ef9a <FAT::FAT()>
c00129a0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00129a7:	e8 14 cb ff ff       	call   c000f4c0 <malloc>
c00129ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00129af:	e8 5c d8 00 00       	call   c0020210 <ISO9660::ISO9660()>
c00129b4:	83 c4 1c             	add    esp,0x1c
c00129b7:	c3                   	ret    

c00129b8 <standardiseFiles(char*, char const*, char const*)>:
c00129b8:	55                   	push   ebp
c00129b9:	57                   	push   edi
c00129ba:	56                   	push   esi
c00129bb:	53                   	push   ebx
c00129bc:	81 ec 10 04 00 00    	sub    esp,0x410
c00129c2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00129c9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00129d0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00129d7:	68 00 04 00 00       	push   0x400
c00129dc:	6a 00                	push   0x0
c00129de:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129e2:	56                   	push   esi
c00129e3:	e8 93 dc fe ff       	call   c000067b <memset>
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00129ef:	75 0b                	jne    c00129fc <standardiseFiles(char*, char const*, char const*)+0x44>
c00129f1:	50                   	push   eax
c00129f2:	50                   	push   eax
c00129f3:	57                   	push   edi
c00129f4:	56                   	push   esi
c00129f5:	e8 20 dd fe ff       	call   c000071a <strcpy>
c00129fa:	eb 41                	jmp    c0012a3d <standardiseFiles(char*, char const*, char const*)+0x85>
c00129fc:	8a 07                	mov    al,BYTE PTR [edi]
c00129fe:	3c 5c                	cmp    al,0x5c
c0012a00:	74 04                	je     c0012a06 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a02:	3c 2f                	cmp    al,0x2f
c0012a04:	75 18                	jne    c0012a1e <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a06:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a09:	3c 60                	cmp    al,0x60
c0012a0b:	7e 03                	jle    c0012a10 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a0d:	83 e8 20             	sub    eax,0x20
c0012a10:	88 04 24             	mov    BYTE PTR [esp],al
c0012a13:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a1a:	50                   	push   eax
c0012a1b:	50                   	push   eax
c0012a1c:	eb 18                	jmp    c0012a36 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a1e:	50                   	push   eax
c0012a1f:	50                   	push   eax
c0012a20:	55                   	push   ebp
c0012a21:	56                   	push   esi
c0012a22:	e8 f3 dc fe ff       	call   c000071a <strcpy>
c0012a27:	5a                   	pop    edx
c0012a28:	59                   	pop    ecx
c0012a29:	68 09 92 02 c0       	push   0xc0029209
c0012a2e:	56                   	push   esi
c0012a2f:	e8 9d dd fe ff       	call   c00007d1 <strcat>
c0012a34:	5d                   	pop    ebp
c0012a35:	58                   	pop    eax
c0012a36:	57                   	push   edi
c0012a37:	56                   	push   esi
c0012a38:	e8 94 dd fe ff       	call   c00007d1 <strcat>
c0012a3d:	83 c4 10             	add    esp,0x10
c0012a40:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a43:	3c 60                	cmp    al,0x60
c0012a45:	7e 03                	jle    c0012a4a <standardiseFiles(char*, char const*, char const*)+0x92>
c0012a47:	83 e8 20             	sub    eax,0x20
c0012a4a:	88 04 24             	mov    BYTE PTR [esp],al
c0012a4d:	88 03                	mov    BYTE PTR [ebx],al
c0012a4f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a56:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a5c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a60:	bf 03 00 00 00       	mov    edi,0x3
c0012a65:	b8 03 00 00 00       	mov    eax,0x3
c0012a6a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a6d:	84 d2                	test   dl,dl
c0012a6f:	0f 84 91 00 00 00    	je     c0012b06 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a75:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a78:	80 fa 5c             	cmp    dl,0x5c
c0012a7b:	74 05                	je     c0012a82 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012a7d:	80 fa 2f             	cmp    dl,0x2f
c0012a80:	75 12                	jne    c0012a94 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a82:	89 c5                	mov    ebp,eax
c0012a84:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a89:	74 09                	je     c0012a94 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a8b:	40                   	inc    eax
c0012a8c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012a90:	89 cf                	mov    edi,ecx
c0012a92:	eb d6                	jmp    c0012a6a <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012a94:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012a99:	75 5b                	jne    c0012af6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a9b:	80 fa 2e             	cmp    dl,0x2e
c0012a9e:	75 56                	jne    c0012af6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012aa0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012aa4:	74 19                	je     c0012abf <standardiseFiles(char*, char const*, char const*)+0x107>
c0012aa6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012aab:	74 53                	je     c0012b00 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012aad:	89 f9                	mov    ecx,edi
c0012aaf:	41                   	inc    ecx
c0012ab0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ab3:	80 fa 2f             	cmp    dl,0x2f
c0012ab6:	74 f7                	je     c0012aaf <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ab8:	80 fa 5c             	cmp    dl,0x5c
c0012abb:	74 f2                	je     c0012aaf <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012abd:	eb d1                	jmp    c0012a90 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012abf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ac4:	74 3a                	je     c0012b00 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012ac6:	83 f8 03             	cmp    eax,0x3
c0012ac9:	74 c5                	je     c0012a90 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012acb:	41                   	inc    ecx
c0012acc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012acf:	80 fa 2f             	cmp    dl,0x2f
c0012ad2:	74 f7                	je     c0012acb <standardiseFiles(char*, char const*, char const*)+0x113>
c0012ad4:	80 fa 5c             	cmp    dl,0x5c
c0012ad7:	74 f2                	je     c0012acb <standardiseFiles(char*, char const*, char const*)+0x113>
c0012ad9:	48                   	dec    eax
c0012ada:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ade:	75 06                	jne    c0012ae6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ae0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ae4:	eb f3                	jmp    c0012ad9 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012ae6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012aea:	74 07                	je     c0012af3 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012aec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012af0:	48                   	dec    eax
c0012af1:	eb f3                	jmp    c0012ae6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012af3:	40                   	inc    eax
c0012af4:	eb 9a                	jmp    c0012a90 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012af6:	80 fa 2f             	cmp    dl,0x2f
c0012af9:	74 95                	je     c0012a90 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012afb:	80 fa 5c             	cmp    dl,0x5c
c0012afe:	74 90                	je     c0012a90 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b00:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b03:	40                   	inc    eax
c0012b04:	eb 8a                	jmp    c0012a90 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b06:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b0a:	83 ec 0c             	sub    esp,0xc
c0012b0d:	53                   	push   ebx
c0012b0e:	e8 85 db fe ff       	call   c0000698 <strlen>
c0012b13:	83 c4 10             	add    esp,0x10
c0012b16:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b1b:	75 26                	jne    c0012b43 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b1d:	83 ec 0c             	sub    esp,0xc
c0012b20:	53                   	push   ebx
c0012b21:	e8 72 db fe ff       	call   c0000698 <strlen>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b2e:	74 26                	je     c0012b56 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b30:	83 ec 0c             	sub    esp,0xc
c0012b33:	53                   	push   ebx
c0012b34:	e8 5f db fe ff       	call   c0000698 <strlen>
c0012b39:	83 c4 10             	add    esp,0x10
c0012b3c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b41:	eb c7                	jmp    c0012b0a <standardiseFiles(char*, char const*, char const*)+0x152>
c0012b43:	83 ec 0c             	sub    esp,0xc
c0012b46:	53                   	push   ebx
c0012b47:	e8 4c db fe ff       	call   c0000698 <strlen>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b54:	74 c7                	je     c0012b1d <standardiseFiles(char*, char const*, char const*)+0x165>
c0012b56:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b5c:	5b                   	pop    ebx
c0012b5d:	5e                   	pop    esi
c0012b5e:	5f                   	pop    edi
c0012b5f:	5d                   	pop    ebp
c0012b60:	c3                   	ret    
c0012b61:	90                   	nop

c0012b62 <File::File(char const*, Process*)>:
c0012b62:	83 ec 0c             	sub    esp,0xc
c0012b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b69:	83 ec 08             	sub    esp,0x8
c0012b6c:	6a 00                	push   0x0
c0012b6e:	50                   	push   eax
c0012b6f:	e8 8c e6 ff ff       	call   c0011200 <UnixFile::UnixFile(int)>
c0012b74:	83 c4 10             	add    esp,0x10
c0012b77:	ba b0 7e 02 c0       	mov    edx,0xc0027eb0
c0012b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b80:	89 10                	mov    DWORD PTR [eax],edx
c0012b82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b86:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b90:	83 c0 0d             	add    eax,0xd
c0012b93:	83 ec 04             	sub    esp,0x4
c0012b96:	52                   	push   edx
c0012b97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9b:	50                   	push   eax
c0012b9c:	e8 17 fe ff ff       	call   c00129b8 <standardiseFiles(char*, char const*, char const*)>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012bab:	8d 50 bf             	lea    edx,[eax-0x41]
c0012bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012bc0:	90                   	nop
c0012bc1:	83 c4 0c             	add    esp,0xc
c0012bc4:	c3                   	ret    
c0012bc5:	90                   	nop

c0012bc6 <File::open(FileOpenMode)>:
c0012bc6:	53                   	push   ebx
c0012bc7:	b8 0b 00 00 00       	mov    eax,0xb
c0012bcc:	83 ec 08             	sub    esp,0x8
c0012bcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bd3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012bda:	80 fa 19             	cmp    dl,0x19
c0012bdd:	77 40                	ja     c0012c1f <File::open(FileOpenMode)+0x59>
c0012bdf:	8b 14 95 c0 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4940]
c0012be6:	85 d2                	test   edx,edx
c0012be8:	74 35                	je     c0012c1f <File::open(FileOpenMode)+0x59>
c0012bea:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bf0:	85 d2                	test   edx,edx
c0012bf2:	74 2b                	je     c0012c1f <File::open(FileOpenMode)+0x59>
c0012bf4:	b8 06 00 00 00       	mov    eax,0x6
c0012bf9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012bfd:	75 20                	jne    c0012c1f <File::open(FileOpenMode)+0x59>
c0012bff:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c01:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c0b:	51                   	push   ecx
c0012c0c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c0f:	51                   	push   ecx
c0012c10:	52                   	push   edx
c0012c11:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c14:	83 c4 10             	add    esp,0x10
c0012c17:	85 c0                	test   eax,eax
c0012c19:	75 04                	jne    c0012c1f <File::open(FileOpenMode)+0x59>
c0012c1b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c1f:	83 c4 08             	add    esp,0x8
c0012c22:	5b                   	pop    ebx
c0012c23:	c3                   	ret    

c0012c24 <File::close()>:
c0012c24:	53                   	push   ebx
c0012c25:	b8 0b 00 00 00       	mov    eax,0xb
c0012c2a:	83 ec 08             	sub    esp,0x8
c0012c2d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c31:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c38:	80 fa 19             	cmp    dl,0x19
c0012c3b:	77 41                	ja     c0012c7e <File::close()+0x5a>
c0012c3d:	8b 1c 95 c0 b6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd4940]
c0012c44:	85 db                	test   ebx,ebx
c0012c46:	74 36                	je     c0012c7e <File::close()+0x5a>
c0012c48:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012c4f:	74 2d                	je     c0012c7e <File::close()+0x5a>
c0012c51:	b8 05 00 00 00       	mov    eax,0x5
c0012c56:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c5a:	74 22                	je     c0012c7e <File::close()+0x5a>
c0012c5c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c60:	8b 04 95 c0 b6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4940]
c0012c67:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c6d:	53                   	push   ebx
c0012c6e:	53                   	push   ebx
c0012c6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c71:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c77:	50                   	push   eax
c0012c78:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c7b:	83 c4 10             	add    esp,0x10
c0012c7e:	83 c4 08             	add    esp,0x8
c0012c81:	5b                   	pop    ebx
c0012c82:	c3                   	ret    
c0012c83:	90                   	nop

c0012c84 <File::seek(unsigned long long)>:
c0012c84:	56                   	push   esi
c0012c85:	53                   	push   ebx
c0012c86:	b8 0b 00 00 00       	mov    eax,0xb
c0012c8b:	51                   	push   ecx
c0012c8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c94:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012c9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c9f:	80 fa 19             	cmp    dl,0x19
c0012ca2:	77 31                	ja     c0012cd5 <File::seek(unsigned long long)+0x51>
c0012ca4:	8b 14 95 c0 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4940]
c0012cab:	85 d2                	test   edx,edx
c0012cad:	74 26                	je     c0012cd5 <File::seek(unsigned long long)+0x51>
c0012caf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cb5:	85 d2                	test   edx,edx
c0012cb7:	74 1c                	je     c0012cd5 <File::seek(unsigned long long)+0x51>
c0012cb9:	b8 05 00 00 00       	mov    eax,0x5
c0012cbe:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012cc2:	74 11                	je     c0012cd5 <File::seek(unsigned long long)+0x51>
c0012cc4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cc6:	53                   	push   ebx
c0012cc7:	51                   	push   ecx
c0012cc8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012cce:	52                   	push   edx
c0012ccf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	5a                   	pop    edx
c0012cd6:	5b                   	pop    ebx
c0012cd7:	5e                   	pop    esi
c0012cd8:	c3                   	ret    
c0012cd9:	90                   	nop

c0012cda <File::tell(unsigned long long*)>:
c0012cda:	83 ec 0c             	sub    esp,0xc
c0012cdd:	b8 0b 00 00 00       	mov    eax,0xb
c0012ce2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ce6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ced:	80 fa 19             	cmp    dl,0x19
c0012cf0:	77 34                	ja     c0012d26 <File::tell(unsigned long long*)+0x4c>
c0012cf2:	8b 14 95 c0 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4940]
c0012cf9:	85 d2                	test   edx,edx
c0012cfb:	74 29                	je     c0012d26 <File::tell(unsigned long long*)+0x4c>
c0012cfd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d03:	85 d2                	test   edx,edx
c0012d05:	74 1f                	je     c0012d26 <File::tell(unsigned long long*)+0x4c>
c0012d07:	b8 05 00 00 00       	mov    eax,0x5
c0012d0c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d10:	74 14                	je     c0012d26 <File::tell(unsigned long long*)+0x4c>
c0012d12:	50                   	push   eax
c0012d13:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d19:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d1f:	52                   	push   edx
c0012d20:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d23:	83 c4 10             	add    esp,0x10
c0012d26:	83 c4 0c             	add    esp,0xc
c0012d29:	c3                   	ret    

c0012d2a <File::rewind()>:
c0012d2a:	83 ec 10             	sub    esp,0x10
c0012d2d:	6a 00                	push   0x0
c0012d2f:	6a 00                	push   0x0
c0012d31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d35:	e8 4a ff ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c0012d3a:	83 c4 1c             	add    esp,0x1c
c0012d3d:	c3                   	ret    

c0012d3e <File::unlink()>:
c0012d3e:	83 ec 0c             	sub    esp,0xc
c0012d41:	b8 0b 00 00 00       	mov    eax,0xb
c0012d46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d51:	80 f9 19             	cmp    cl,0x19
c0012d54:	77 2f                	ja     c0012d85 <File::unlink()+0x47>
c0012d56:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c0012d5d:	85 c9                	test   ecx,ecx
c0012d5f:	74 24                	je     c0012d85 <File::unlink()+0x47>
c0012d61:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d67:	85 c9                	test   ecx,ecx
c0012d69:	74 1a                	je     c0012d85 <File::unlink()+0x47>
c0012d6b:	b8 06 00 00 00       	mov    eax,0x6
c0012d70:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d74:	75 0f                	jne    c0012d85 <File::unlink()+0x47>
c0012d76:	83 c2 0d             	add    edx,0xd
c0012d79:	50                   	push   eax
c0012d7a:	50                   	push   eax
c0012d7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d7d:	52                   	push   edx
c0012d7e:	51                   	push   ecx
c0012d7f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d82:	83 c4 10             	add    esp,0x10
c0012d85:	83 c4 0c             	add    esp,0xc
c0012d88:	c3                   	ret    
c0012d89:	90                   	nop

c0012d8a <File::rename(char const*)>:
c0012d8a:	83 ec 0c             	sub    esp,0xc
c0012d8d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d96:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d9d:	80 f9 19             	cmp    cl,0x19
c0012da0:	77 32                	ja     c0012dd4 <File::rename(char const*)+0x4a>
c0012da2:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c0012da9:	85 c9                	test   ecx,ecx
c0012dab:	74 27                	je     c0012dd4 <File::rename(char const*)+0x4a>
c0012dad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012db3:	85 c9                	test   ecx,ecx
c0012db5:	74 1d                	je     c0012dd4 <File::rename(char const*)+0x4a>
c0012db7:	b8 06 00 00 00       	mov    eax,0x6
c0012dbc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dc0:	75 12                	jne    c0012dd4 <File::rename(char const*)+0x4a>
c0012dc2:	83 c2 0d             	add    edx,0xd
c0012dc5:	50                   	push   eax
c0012dc6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dcc:	52                   	push   edx
c0012dcd:	51                   	push   ecx
c0012dce:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012dd1:	83 c4 10             	add    esp,0x10
c0012dd4:	83 c4 0c             	add    esp,0xc
c0012dd7:	c3                   	ret    

c0012dd8 <File::chfatattr(unsigned char, unsigned char)>:
c0012dd8:	57                   	push   edi
c0012dd9:	b8 0b 00 00 00       	mov    eax,0xb
c0012dde:	56                   	push   esi
c0012ddf:	53                   	push   ebx
c0012de0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012de8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012def:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012df3:	80 f9 19             	cmp    cl,0x19
c0012df6:	77 37                	ja     c0012e2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012df8:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c0012dff:	85 c9                	test   ecx,ecx
c0012e01:	74 2c                	je     c0012e2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e03:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e09:	85 c9                	test   ecx,ecx
c0012e0b:	74 22                	je     c0012e2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e0d:	b8 06 00 00 00       	mov    eax,0x6
c0012e12:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e16:	75 17                	jne    c0012e2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e18:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e1a:	89 f0                	mov    eax,esi
c0012e1c:	83 c2 0d             	add    edx,0xd
c0012e1f:	0f b6 f0             	movzx  esi,al
c0012e22:	0f b6 db             	movzx  ebx,bl
c0012e25:	56                   	push   esi
c0012e26:	53                   	push   ebx
c0012e27:	52                   	push   edx
c0012e28:	51                   	push   ecx
c0012e29:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e2c:	83 c4 10             	add    esp,0x10
c0012e2f:	5b                   	pop    ebx
c0012e30:	5e                   	pop    esi
c0012e31:	5f                   	pop    edi
c0012e32:	c3                   	ret    
c0012e33:	90                   	nop

c0012e34 <File::exists()>:
c0012e34:	83 ec 0c             	sub    esp,0xc
c0012e37:	31 c0                	xor    eax,eax
c0012e39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e3d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e44:	80 f9 19             	cmp    cl,0x19
c0012e47:	77 24                	ja     c0012e6d <File::exists()+0x39>
c0012e49:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c0012e50:	85 c9                	test   ecx,ecx
c0012e52:	74 19                	je     c0012e6d <File::exists()+0x39>
c0012e54:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e5a:	85 c9                	test   ecx,ecx
c0012e5c:	74 0f                	je     c0012e6d <File::exists()+0x39>
c0012e5e:	83 c2 0d             	add    edx,0xd
c0012e61:	50                   	push   eax
c0012e62:	50                   	push   eax
c0012e63:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e65:	52                   	push   edx
c0012e66:	51                   	push   ecx
c0012e67:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e6a:	83 c4 10             	add    esp,0x10
c0012e6d:	83 c4 0c             	add    esp,0xc
c0012e70:	c3                   	ret    
c0012e71:	90                   	nop

c0012e72 <File::stat(unsigned long long*, bool*)>:
c0012e72:	56                   	push   esi
c0012e73:	53                   	push   ebx
c0012e74:	50                   	push   eax
c0012e75:	b8 0b 00 00 00       	mov    eax,0xb
c0012e7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e82:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e8d:	80 f9 19             	cmp    cl,0x19
c0012e90:	77 3d                	ja     c0012ecf <File::stat(unsigned long long*, bool*)+0x5d>
c0012e92:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c0012e99:	85 c9                	test   ecx,ecx
c0012e9b:	74 32                	je     c0012ecf <File::stat(unsigned long long*, bool*)+0x5d>
c0012e9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea3:	85 c9                	test   ecx,ecx
c0012ea5:	74 28                	je     c0012ecf <File::stat(unsigned long long*, bool*)+0x5d>
c0012ea7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ea9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ead:	74 13                	je     c0012ec2 <File::stat(unsigned long long*, bool*)+0x50>
c0012eaf:	83 ec 04             	sub    esp,0x4
c0012eb2:	56                   	push   esi
c0012eb3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012eb9:	51                   	push   ecx
c0012eba:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ebd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ec0:	eb 0a                	jmp    c0012ecc <File::stat(unsigned long long*, bool*)+0x5a>
c0012ec2:	53                   	push   ebx
c0012ec3:	83 c2 0d             	add    edx,0xd
c0012ec6:	56                   	push   esi
c0012ec7:	52                   	push   edx
c0012ec8:	51                   	push   ecx
c0012ec9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ecc:	83 c4 10             	add    esp,0x10
c0012ecf:	5a                   	pop    edx
c0012ed0:	5b                   	pop    ebx
c0012ed1:	5e                   	pop    esi
c0012ed2:	c3                   	ret    

c0012ed3 <getcwd(Process*, char*, int)>:
c0012ed3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ed7:	31 c0                	xor    eax,eax
c0012ed9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012edc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ee0:	7d 15                	jge    c0012ef7 <getcwd(Process*, char*, int)+0x24>
c0012ee2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee6:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012eed:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012ef0:	84 c9                	test   cl,cl
c0012ef2:	74 06                	je     c0012efa <getcwd(Process*, char*, int)+0x27>
c0012ef4:	40                   	inc    eax
c0012ef5:	eb e2                	jmp    c0012ed9 <getcwd(Process*, char*, int)+0x6>
c0012ef7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012efa:	31 c0                	xor    eax,eax
c0012efc:	c3                   	ret    

c0012efd <setcwd(Process*, char*)>:
c0012efd:	55                   	push   ebp
c0012efe:	57                   	push   edi
c0012eff:	56                   	push   esi
c0012f00:	53                   	push   ebx
c0012f01:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f07:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f0e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f14:	57                   	push   edi
c0012f15:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f1c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f20:	56                   	push   esi
c0012f21:	e8 92 fa ff ff       	call   c00129b8 <standardiseFiles(char*, char const*, char const*)>
c0012f26:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f29:	e8 6a d7 fe ff       	call   c0000698 <strlen>
c0012f2e:	83 c4 10             	add    esp,0x10
c0012f31:	83 f8 02             	cmp    eax,0x2
c0012f34:	77 17                	ja     c0012f4d <setcwd(Process*, char*)+0x50>
c0012f36:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f3b:	83 e8 41             	sub    eax,0x41
c0012f3e:	83 f8 19             	cmp    eax,0x19
c0012f41:	76 24                	jbe    c0012f67 <setcwd(Process*, char*)+0x6a>
c0012f43:	b8 03 00 00 00       	mov    eax,0x3
c0012f48:	e9 e0 00 00 00       	jmp    c001302d <setcwd(Process*, char*)+0x130>
c0012f4d:	83 ec 0c             	sub    esp,0xc
c0012f50:	56                   	push   esi
c0012f51:	e8 42 d7 fe ff       	call   c0000698 <strlen>
c0012f56:	83 c4 10             	add    esp,0x10
c0012f59:	83 f8 03             	cmp    eax,0x3
c0012f5c:	75 34                	jne    c0012f92 <setcwd(Process*, char*)+0x95>
c0012f5e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012f63:	75 2d                	jne    c0012f92 <setcwd(Process*, char*)+0x95>
c0012f65:	eb cf                	jmp    c0012f36 <setcwd(Process*, char*)+0x39>
c0012f67:	8b 14 85 c0 b6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4940]
c0012f6e:	b8 05 00 00 00       	mov    eax,0x5
c0012f73:	85 d2                	test   edx,edx
c0012f75:	0f 84 b2 00 00 00    	je     c001302d <setcwd(Process*, char*)+0x130>
c0012f7b:	b8 06 00 00 00       	mov    eax,0x6
c0012f80:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f87:	0f 85 92 00 00 00    	jne    c001301f <setcwd(Process*, char*)+0x122>
c0012f8d:	e9 9b 00 00 00       	jmp    c001302d <setcwd(Process*, char*)+0x130>
c0012f92:	83 ec 0c             	sub    esp,0xc
c0012f95:	68 14 01 00 00       	push   0x114
c0012f9a:	e8 21 c5 ff ff       	call   c000f4c0 <malloc>
c0012f9f:	83 c4 0c             	add    esp,0xc
c0012fa2:	89 c3                	mov    ebx,eax
c0012fa4:	55                   	push   ebp
c0012fa5:	56                   	push   esi
c0012fa6:	50                   	push   eax
c0012fa7:	e8 b6 fb ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c0012fac:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012fb1:	83 c4 0c             	add    esp,0xc
c0012fb4:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012fb8:	50                   	push   eax
c0012fb9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fbd:	50                   	push   eax
c0012fbe:	53                   	push   ebx
c0012fbf:	e8 ae fe ff ff       	call   c0012e72 <File::stat(unsigned long long*, bool*)>
c0012fc4:	83 c4 10             	add    esp,0x10
c0012fc7:	83 f8 02             	cmp    eax,0x2
c0012fca:	74 04                	je     c0012fd0 <setcwd(Process*, char*)+0xd3>
c0012fcc:	85 c0                	test   eax,eax
c0012fce:	74 1c                	je     c0012fec <setcwd(Process*, char*)+0xef>
c0012fd0:	b8 01 00 00 00       	mov    eax,0x1
c0012fd5:	85 db                	test   ebx,ebx
c0012fd7:	74 54                	je     c001302d <setcwd(Process*, char*)+0x130>
c0012fd9:	83 ec 0c             	sub    esp,0xc
c0012fdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fde:	53                   	push   ebx
c0012fdf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fe2:	83 c4 10             	add    esp,0x10
c0012fe5:	b8 01 00 00 00       	mov    eax,0x1
c0012fea:	eb 41                	jmp    c001302d <setcwd(Process*, char*)+0x130>
c0012fec:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012ff1:	75 1c                	jne    c001300f <setcwd(Process*, char*)+0x112>
c0012ff3:	b8 02 00 00 00       	mov    eax,0x2
c0012ff8:	85 db                	test   ebx,ebx
c0012ffa:	74 31                	je     c001302d <setcwd(Process*, char*)+0x130>
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013001:	53                   	push   ebx
c0013002:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013005:	83 c4 10             	add    esp,0x10
c0013008:	b8 02 00 00 00       	mov    eax,0x2
c001300d:	eb 1e                	jmp    c001302d <setcwd(Process*, char*)+0x130>
c001300f:	85 db                	test   ebx,ebx
c0013011:	74 0c                	je     c001301f <setcwd(Process*, char*)+0x122>
c0013013:	83 ec 0c             	sub    esp,0xc
c0013016:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013018:	53                   	push   ebx
c0013019:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	50                   	push   eax
c0013020:	50                   	push   eax
c0013021:	56                   	push   esi
c0013022:	57                   	push   edi
c0013023:	e8 f2 d6 fe ff       	call   c000071a <strcpy>
c0013028:	83 c4 10             	add    esp,0x10
c001302b:	31 c0                	xor    eax,eax
c001302d:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013033:	5b                   	pop    ebx
c0013034:	5e                   	pop    esi
c0013035:	5f                   	pop    edi
c0013036:	5d                   	pop    ebp
c0013037:	c3                   	ret    

c0013038 <Directory::Directory(char const*, Process*)>:
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303f:	83 ec 08             	sub    esp,0x8
c0013042:	6a 00                	push   0x0
c0013044:	50                   	push   eax
c0013045:	e8 b6 e1 ff ff       	call   c0011200 <UnixFile::UnixFile(int)>
c001304a:	83 c4 10             	add    esp,0x10
c001304d:	ba cc 7e 02 c0       	mov    edx,0xc0027ecc
c0013052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013056:	89 10                	mov    DWORD PTR [eax],edx
c0013058:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001305c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013066:	83 c0 0d             	add    eax,0xd
c0013069:	83 ec 04             	sub    esp,0x4
c001306c:	52                   	push   edx
c001306d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013071:	50                   	push   eax
c0013072:	e8 41 f9 ff ff       	call   c00129b8 <standardiseFiles(char*, char const*, char const*)>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001307e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013081:	8d 50 bf             	lea    edx,[eax-0x41]
c0013084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013088:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001308e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013092:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013096:	90                   	nop
c0013097:	83 c4 0c             	add    esp,0xc
c001309a:	c3                   	ret    
c001309b:	90                   	nop

c001309c <Directory::open()>:
c001309c:	53                   	push   ebx
c001309d:	b8 0b 00 00 00       	mov    eax,0xb
c00130a2:	83 ec 08             	sub    esp,0x8
c00130a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130a9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130b0:	80 fa 19             	cmp    dl,0x19
c00130b3:	77 3d                	ja     c00130f2 <Directory::open()+0x56>
c00130b5:	8b 14 95 c0 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4940]
c00130bc:	85 d2                	test   edx,edx
c00130be:	74 32                	je     c00130f2 <Directory::open()+0x56>
c00130c0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130c6:	85 d2                	test   edx,edx
c00130c8:	74 28                	je     c00130f2 <Directory::open()+0x56>
c00130ca:	b8 06 00 00 00       	mov    eax,0x6
c00130cf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00130d3:	75 1d                	jne    c00130f2 <Directory::open()+0x56>
c00130d5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00130db:	50                   	push   eax
c00130dc:	8b 02                	mov    eax,DWORD PTR [edx]
c00130de:	51                   	push   ecx
c00130df:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00130e2:	51                   	push   ecx
c00130e3:	52                   	push   edx
c00130e4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00130e7:	83 c4 10             	add    esp,0x10
c00130ea:	85 c0                	test   eax,eax
c00130ec:	75 04                	jne    c00130f2 <Directory::open()+0x56>
c00130ee:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00130f2:	83 c4 08             	add    esp,0x8
c00130f5:	5b                   	pop    ebx
c00130f6:	c3                   	ret    
c00130f7:	90                   	nop

c00130f8 <Directory::close()>:
c00130f8:	53                   	push   ebx
c00130f9:	b8 0b 00 00 00       	mov    eax,0xb
c00130fe:	83 ec 08             	sub    esp,0x8
c0013101:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013105:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001310c:	80 fa 19             	cmp    dl,0x19
c001310f:	77 41                	ja     c0013152 <Directory::close()+0x5a>
c0013111:	8b 1c 95 c0 b6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd4940]
c0013118:	85 db                	test   ebx,ebx
c001311a:	74 36                	je     c0013152 <Directory::close()+0x5a>
c001311c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013123:	74 2d                	je     c0013152 <Directory::close()+0x5a>
c0013125:	b8 05 00 00 00       	mov    eax,0x5
c001312a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001312e:	74 22                	je     c0013152 <Directory::close()+0x5a>
c0013130:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013134:	8b 04 95 c0 b6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4940]
c001313b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013141:	53                   	push   ebx
c0013142:	53                   	push   ebx
c0013143:	8b 10                	mov    edx,DWORD PTR [eax]
c0013145:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001314b:	50                   	push   eax
c001314c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	83 c4 08             	add    esp,0x8
c0013155:	5b                   	pop    ebx
c0013156:	c3                   	ret    
c0013157:	90                   	nop

c0013158 <Directory::unlink()>:
c0013158:	83 ec 0c             	sub    esp,0xc
c001315b:	b8 0b 00 00 00       	mov    eax,0xb
c0013160:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013164:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001316b:	80 f9 19             	cmp    cl,0x19
c001316e:	77 2f                	ja     c001319f <Directory::unlink()+0x47>
c0013170:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c0013177:	85 c9                	test   ecx,ecx
c0013179:	74 24                	je     c001319f <Directory::unlink()+0x47>
c001317b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013181:	85 c9                	test   ecx,ecx
c0013183:	74 1a                	je     c001319f <Directory::unlink()+0x47>
c0013185:	b8 06 00 00 00       	mov    eax,0x6
c001318a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001318e:	75 0f                	jne    c001319f <Directory::unlink()+0x47>
c0013190:	83 c2 0d             	add    edx,0xd
c0013193:	50                   	push   eax
c0013194:	50                   	push   eax
c0013195:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013197:	52                   	push   edx
c0013198:	51                   	push   ecx
c0013199:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001319c:	83 c4 10             	add    esp,0x10
c001319f:	83 c4 0c             	add    esp,0xc
c00131a2:	c3                   	ret    
c00131a3:	90                   	nop

c00131a4 <Directory::rename(char const*)>:
c00131a4:	83 ec 0c             	sub    esp,0xc
c00131a7:	b8 0b 00 00 00       	mov    eax,0xb
c00131ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131b7:	80 f9 19             	cmp    cl,0x19
c00131ba:	77 32                	ja     c00131ee <Directory::rename(char const*)+0x4a>
c00131bc:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c00131c3:	85 c9                	test   ecx,ecx
c00131c5:	74 27                	je     c00131ee <Directory::rename(char const*)+0x4a>
c00131c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131cd:	85 c9                	test   ecx,ecx
c00131cf:	74 1d                	je     c00131ee <Directory::rename(char const*)+0x4a>
c00131d1:	b8 06 00 00 00       	mov    eax,0x6
c00131d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131da:	75 12                	jne    c00131ee <Directory::rename(char const*)+0x4a>
c00131dc:	83 c2 0d             	add    edx,0xd
c00131df:	50                   	push   eax
c00131e0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131e6:	52                   	push   edx
c00131e7:	51                   	push   ecx
c00131e8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	83 c4 0c             	add    esp,0xc
c00131f1:	c3                   	ret    

c00131f2 <Directory::exists()>:
c00131f2:	83 ec 0c             	sub    esp,0xc
c00131f5:	31 c0                	xor    eax,eax
c00131f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131fb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013202:	80 f9 19             	cmp    cl,0x19
c0013205:	77 24                	ja     c001322b <Directory::exists()+0x39>
c0013207:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c001320e:	85 c9                	test   ecx,ecx
c0013210:	74 19                	je     c001322b <Directory::exists()+0x39>
c0013212:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013218:	85 c9                	test   ecx,ecx
c001321a:	74 0f                	je     c001322b <Directory::exists()+0x39>
c001321c:	83 c2 0d             	add    edx,0xd
c001321f:	50                   	push   eax
c0013220:	50                   	push   eax
c0013221:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013223:	52                   	push   edx
c0013224:	51                   	push   ecx
c0013225:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	83 c4 0c             	add    esp,0xc
c001322e:	c3                   	ret    
c001322f:	90                   	nop

c0013230 <Directory::read(dirent*)>:
c0013230:	83 ec 1c             	sub    esp,0x1c
c0013233:	b8 0b 00 00 00       	mov    eax,0xb
c0013238:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001323c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013243:	80 fa 19             	cmp    dl,0x19
c0013246:	77 30                	ja     c0013278 <Directory::read(dirent*)+0x48>
c0013248:	8b 14 95 c0 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4940]
c001324f:	85 d2                	test   edx,edx
c0013251:	74 25                	je     c0013278 <Directory::read(dirent*)+0x48>
c0013253:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001325a:	74 1c                	je     c0013278 <Directory::read(dirent*)+0x48>
c001325c:	83 ec 0c             	sub    esp,0xc
c001325f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013261:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013265:	52                   	push   edx
c0013266:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001326a:	6a 00                	push   0x0
c001326c:	68 10 01 00 00       	push   0x110
c0013271:	51                   	push   ecx
c0013272:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013275:	83 c4 20             	add    esp,0x20
c0013278:	83 c4 1c             	add    esp,0x1c
c001327b:	c3                   	ret    

c001327c <Directory::create()>:
c001327c:	83 ec 0c             	sub    esp,0xc
c001327f:	b8 0b 00 00 00       	mov    eax,0xb
c0013284:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013288:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001328f:	80 f9 19             	cmp    cl,0x19
c0013292:	77 2f                	ja     c00132c3 <Directory::create()+0x47>
c0013294:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c001329b:	85 c9                	test   ecx,ecx
c001329d:	74 24                	je     c00132c3 <Directory::create()+0x47>
c001329f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132a5:	85 c9                	test   ecx,ecx
c00132a7:	74 1a                	je     c00132c3 <Directory::create()+0x47>
c00132a9:	b8 06 00 00 00       	mov    eax,0x6
c00132ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132b2:	75 0f                	jne    c00132c3 <Directory::create()+0x47>
c00132b4:	83 c2 0d             	add    edx,0xd
c00132b7:	50                   	push   eax
c00132b8:	50                   	push   eax
c00132b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132bb:	52                   	push   edx
c00132bc:	51                   	push   ecx
c00132bd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	83 c4 0c             	add    esp,0xc
c00132c6:	c3                   	ret    
c00132c7:	90                   	nop

c00132c8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00132c8:	b8 0a 00 00 00       	mov    eax,0xa
c00132cd:	c3                   	ret    

c00132ce <Bus::Bus(char const*)>:
c00132ce:	83 ec 0c             	sub    esp,0xc
c00132d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d5:	83 ec 08             	sub    esp,0x8
c00132d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132dc:	50                   	push   eax
c00132dd:	e8 30 09 00 00       	call   c0013c12 <Device::Device(char const*)>
c00132e2:	83 c4 10             	add    esp,0x10
c00132e5:	ba e8 7e 02 c0       	mov    edx,0xc0027ee8
c00132ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ee:	89 10                	mov    DWORD PTR [eax],edx
c00132f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00132fe:	90                   	nop
c00132ff:	83 c4 0c             	add    esp,0xc
c0013302:	c3                   	ret    
c0013303:	90                   	nop

c0013304 <Bus::~Bus()>:
c0013304:	83 ec 0c             	sub    esp,0xc
c0013307:	ba e8 7e 02 c0       	mov    edx,0xc0027ee8
c001330c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013310:	89 10                	mov    DWORD PTR [eax],edx
c0013312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013316:	83 ec 0c             	sub    esp,0xc
c0013319:	50                   	push   eax
c001331a:	e8 d5 05 00 00       	call   c00138f4 <Device::~Device()>
c001331f:	83 c4 10             	add    esp,0x10
c0013322:	90                   	nop
c0013323:	83 c4 0c             	add    esp,0xc
c0013326:	c3                   	ret    
c0013327:	90                   	nop

c0013328 <Bus::~Bus()>:
c0013328:	83 ec 0c             	sub    esp,0xc
c001332b:	83 ec 0c             	sub    esp,0xc
c001332e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013332:	e8 cd ff ff ff       	call   c0013304 <Bus::~Bus()>
c0013337:	83 c4 10             	add    esp,0x10
c001333a:	83 ec 08             	sub    esp,0x8
c001333d:	68 58 01 00 00       	push   0x158
c0013342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013346:	e8 08 f2 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c001334b:	83 c4 10             	add    esp,0x10
c001334e:	83 c4 0c             	add    esp,0xc
c0013351:	c3                   	ret    

c0013352 <Buzzer::Buzzer(char const*)>:
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013359:	83 ec 08             	sub    esp,0x8
c001335c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013360:	50                   	push   eax
c0013361:	e8 ac 08 00 00       	call   c0013c12 <Device::Device(char const*)>
c0013366:	83 c4 10             	add    esp,0x10
c0013369:	ba 14 7f 02 c0       	mov    edx,0xc0027f14
c001336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013372:	89 10                	mov    DWORD PTR [eax],edx
c0013374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013378:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013386:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013390:	90                   	nop
c0013391:	83 c4 0c             	add    esp,0xc
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <Buzzer::~Buzzer()>:
c0013396:	83 ec 0c             	sub    esp,0xc
c0013399:	ba 14 7f 02 c0       	mov    edx,0xc0027f14
c001339e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a2:	89 10                	mov    DWORD PTR [eax],edx
c00133a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a8:	83 ec 0c             	sub    esp,0xc
c00133ab:	50                   	push   eax
c00133ac:	e8 43 05 00 00       	call   c00138f4 <Device::~Device()>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	90                   	nop
c00133b5:	83 c4 0c             	add    esp,0xc
c00133b8:	c3                   	ret    
c00133b9:	90                   	nop

c00133ba <Buzzer::~Buzzer()>:
c00133ba:	83 ec 0c             	sub    esp,0xc
c00133bd:	83 ec 0c             	sub    esp,0xc
c00133c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133c4:	e8 cd ff ff ff       	call   c0013396 <Buzzer::~Buzzer()>
c00133c9:	83 c4 10             	add    esp,0x10
c00133cc:	83 ec 08             	sub    esp,0x8
c00133cf:	68 5c 01 00 00       	push   0x15c
c00133d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d8:	e8 76 f1 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	83 c4 0c             	add    esp,0xc
c00133e3:	c3                   	ret    

c00133e4 <Buzzer::stop()>:
c00133e4:	83 ec 14             	sub    esp,0x14
c00133e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00133ed:	6a 00                	push   0x0
c00133ef:	50                   	push   eax
c00133f0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00133f3:	83 c4 1c             	add    esp,0x1c
c00133f6:	c3                   	ret    

c00133f7 <beepThread(void*)>:
c00133f7:	53                   	push   ebx
c00133f8:	83 ec 08             	sub    esp,0x8
c00133fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133ff:	e8 db 8c 00 00       	call   c001c0df <unlockScheduler()>
c0013404:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013409:	52                   	push   edx
c001340a:	52                   	push   edx
c001340b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013411:	52                   	push   edx
c0013412:	50                   	push   eax
c0013413:	e8 14 92 00 00       	call   c001c62c <nanoSleep(unsigned long long)>
c0013418:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001341b:	e8 c4 ff ff ff       	call   c00133e4 <Buzzer::stop()>
c0013420:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013428:	83 c4 18             	add    esp,0x18
c001342b:	5b                   	pop    ebx
c001342c:	e9 41 91 00 00       	jmp    c001c572 <blockTask(TaskState)>
c0013431:	90                   	nop

c0013432 <Buzzer::beep(int, int, bool)>:
c0013432:	57                   	push   edi
c0013433:	56                   	push   esi
c0013434:	53                   	push   ebx
c0013435:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013439:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001343d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013441:	52                   	push   edx
c0013442:	52                   	push   edx
c0013443:	8b 06                	mov    eax,DWORD PTR [esi]
c0013445:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013449:	56                   	push   esi
c001344a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	89 f8                	mov    eax,edi
c0013452:	84 c0                	test   al,al
c0013454:	74 1f                	je     c0013475 <Buzzer::beep(int, int, bool)+0x43>
c0013456:	50                   	push   eax
c0013457:	50                   	push   eax
c0013458:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001345e:	99                   	cdq    
c001345f:	52                   	push   edx
c0013460:	50                   	push   eax
c0013461:	e8 c6 91 00 00       	call   c001c62c <nanoSleep(unsigned long long)>
c0013466:	83 c4 10             	add    esp,0x10
c0013469:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001346d:	5b                   	pop    ebx
c001346e:	5e                   	pop    esi
c001346f:	5f                   	pop    edi
c0013470:	e9 6f ff ff ff       	jmp    c00133e4 <Buzzer::stop()>
c0013475:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001347b:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0013480:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013488:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001348c:	c7 44 24 14 f7 33 01 c0 	mov    DWORD PTR [esp+0x14],0xc00133f7
c0013494:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013498:	5b                   	pop    ebx
c0013499:	5e                   	pop    esi
c001349a:	5f                   	pop    edi
c001349b:	e9 6e 8d 00 00       	jmp    c001c20e <Process::createThread(void (*)(void*), void*, int)>

c00134a0 <loadClockSettings()>:
c00134a0:	c7 05 34 b2 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002b234,0xa
c00134aa:	c6 05 31 b2 02 c0 00 	mov    BYTE PTR ds:0xc002b231,0x0
c00134b1:	c6 05 30 b2 02 c0 01 	mov    BYTE PTR ds:0xc002b230,0x1
c00134b8:	c3                   	ret    
c00134b9:	90                   	nop

c00134ba <Clock::Clock(char const*)>:
c00134ba:	83 ec 0c             	sub    esp,0xc
c00134bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c1:	83 ec 08             	sub    esp,0x8
c00134c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c8:	50                   	push   eax
c00134c9:	e8 44 07 00 00       	call   c0013c12 <Device::Device(char const*)>
c00134ce:	83 c4 10             	add    esp,0x10
c00134d1:	ba 44 7f 02 c0       	mov    edx,0xc0027f44
c00134d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134da:	89 10                	mov    DWORD PTR [eax],edx
c00134dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134ea:	90                   	nop
c00134eb:	83 c4 0c             	add    esp,0xc
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <Clock::~Clock()>:
c00134f0:	83 ec 0c             	sub    esp,0xc
c00134f3:	ba 44 7f 02 c0       	mov    edx,0xc0027f44
c00134f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134fc:	89 10                	mov    DWORD PTR [eax],edx
c00134fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013502:	83 ec 0c             	sub    esp,0xc
c0013505:	50                   	push   eax
c0013506:	e8 e9 03 00 00       	call   c00138f4 <Device::~Device()>
c001350b:	83 c4 10             	add    esp,0x10
c001350e:	90                   	nop
c001350f:	83 c4 0c             	add    esp,0xc
c0013512:	c3                   	ret    
c0013513:	90                   	nop

c0013514 <Clock::~Clock()>:
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	83 ec 0c             	sub    esp,0xc
c001351a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001351e:	e8 cd ff ff ff       	call   c00134f0 <Clock::~Clock()>
c0013523:	83 c4 10             	add    esp,0x10
c0013526:	83 ec 08             	sub    esp,0x8
c0013529:	68 58 01 00 00       	push   0x158
c001352e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013532:	e8 1c f0 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	83 c4 0c             	add    esp,0xc
c001353d:	c3                   	ret    

c001353e <Clock::timeInSecondsLocal()>:
c001353e:	53                   	push   ebx
c001353f:	83 ec 14             	sub    esp,0x14
c0013542:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013546:	8b 10                	mov    edx,DWORD PTR [eax]
c0013548:	50                   	push   eax
c0013549:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001354c:	0f b6 0d 30 b2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002b230
c0013553:	03 0d 34 b2 02 c0    	add    ecx,DWORD PTR ds:0xc002b234
c0013559:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001355f:	89 cb                	mov    ebx,ecx
c0013561:	c1 fb 1f             	sar    ebx,0x1f
c0013564:	01 c8                	add    eax,ecx
c0013566:	11 da                	adc    edx,ebx
c0013568:	83 c4 10             	add    esp,0x10
c001356b:	31 c9                	xor    ecx,ecx
c001356d:	80 3d 31 b2 02 c0 00 	cmp    BYTE PTR ds:0xc002b231,0x0
c0013574:	74 05                	je     c001357b <Clock::timeInSecondsLocal()+0x3d>
c0013576:	b9 08 07 00 00       	mov    ecx,0x708
c001357b:	31 db                	xor    ebx,ebx
c001357d:	01 c8                	add    eax,ecx
c001357f:	11 da                	adc    edx,ebx
c0013581:	83 c4 08             	add    esp,0x8
c0013584:	5b                   	pop    ebx
c0013585:	c3                   	ret    

c0013586 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013586:	57                   	push   edi
c0013587:	56                   	push   esi
c0013588:	53                   	push   ebx
c0013589:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001358d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013591:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013593:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013597:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001359a:	0f b6 05 30 b2 02 c0 	movzx  eax,BYTE PTR ds:0xc002b230
c00135a1:	03 05 34 b2 02 c0    	add    eax,DWORD PTR ds:0xc002b234
c00135a7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00135ad:	99                   	cdq    
c00135ae:	29 c6                	sub    esi,eax
c00135b0:	19 d7                	sbb    edi,edx
c00135b2:	89 f0                	mov    eax,esi
c00135b4:	89 fa                	mov    edx,edi
c00135b6:	31 f6                	xor    esi,esi
c00135b8:	80 3d 31 b2 02 c0 00 	cmp    BYTE PTR ds:0xc002b231,0x0
c00135bf:	74 05                	je     c00135c6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00135c1:	be 08 07 00 00       	mov    esi,0x708
c00135c6:	31 ff                	xor    edi,edi
c00135c8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00135cc:	29 f0                	sub    eax,esi
c00135ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00135d2:	19 fa                	sbb    edx,edi
c00135d4:	89 d8                	mov    eax,ebx
c00135d6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00135da:	5b                   	pop    ebx
c00135db:	5e                   	pop    esi
c00135dc:	5f                   	pop    edi
c00135dd:	ff e0                	jmp    eax

c00135df <datetimeToSeconds(datetime_t)>:
c00135df:	55                   	push   ebp
c00135e0:	57                   	push   edi
c00135e1:	56                   	push   esi
c00135e2:	53                   	push   ebx
c00135e3:	83 ec 14             	sub    esp,0x14
c00135e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135ea:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135ee:	89 d3                	mov    ebx,edx
c00135f0:	0f b6 c6             	movzx  eax,dh
c00135f3:	c1 eb 10             	shr    ebx,0x10
c00135f6:	48                   	dec    eax
c00135f7:	66 81 eb 6c 07       	sub    bx,0x76c
c00135fc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013600:	0f b6 f5             	movzx  esi,ch
c0013603:	89 cf                	mov    edi,ecx
c0013605:	6b f6 3c             	imul   esi,esi,0x3c
c0013608:	c1 ef 10             	shr    edi,0x10
c001360b:	0f b6 c9             	movzx  ecx,cl
c001360e:	89 f8                	mov    eax,edi
c0013610:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013616:	0f b6 f8             	movzx  edi,al
c0013619:	0f b6 d2             	movzx  edx,dl
c001361c:	01 fe                	add    esi,edi
c001361e:	01 f1                	add    ecx,esi
c0013620:	0f b7 f3             	movzx  esi,bx
c0013623:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013627:	c1 f9 1f             	sar    ecx,0x1f
c001362a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001362f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013633:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013638:	8b 0c 8d 80 7f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8080]
c001363f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013643:	76 29                	jbe    c001366e <datetimeToSeconds(datetime_t)+0x8f>
c0013645:	f6 c3 03             	test   bl,0x3
c0013648:	75 24                	jne    c001366e <datetimeToSeconds(datetime_t)+0x8f>
c001364a:	31 d2                	xor    edx,edx
c001364c:	bf 64 00 00 00       	mov    edi,0x64
c0013651:	89 d8                	mov    eax,ebx
c0013653:	66 f7 f7             	div    di
c0013656:	66 85 d2             	test   dx,dx
c0013659:	75 12                	jne    c001366d <datetimeToSeconds(datetime_t)+0x8e>
c001365b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013661:	bf 90 01 00 00       	mov    edi,0x190
c0013666:	99                   	cdq    
c0013667:	f7 ff                	idiv   edi
c0013669:	85 d2                	test   edx,edx
c001366b:	75 01                	jne    c001366e <datetimeToSeconds(datetime_t)+0x8f>
c001366d:	41                   	inc    ecx
c001366e:	66 83 fb 46          	cmp    bx,0x46
c0013672:	76 45                	jbe    c00136b9 <datetimeToSeconds(datetime_t)+0xda>
c0013674:	bb 46 00 00 00       	mov    ebx,0x46
c0013679:	bf 64 00 00 00       	mov    edi,0x64
c001367e:	bd 90 01 00 00       	mov    ebp,0x190
c0013683:	b8 6d 01 00 00       	mov    eax,0x16d
c0013688:	f6 c3 03             	test   bl,0x3
c001368b:	75 23                	jne    c00136b0 <datetimeToSeconds(datetime_t)+0xd1>
c001368d:	89 d8                	mov    eax,ebx
c001368f:	99                   	cdq    
c0013690:	f7 ff                	idiv   edi
c0013692:	b8 6e 01 00 00       	mov    eax,0x16e
c0013697:	85 d2                	test   edx,edx
c0013699:	75 15                	jne    c00136b0 <datetimeToSeconds(datetime_t)+0xd1>
c001369b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136a1:	99                   	cdq    
c00136a2:	f7 fd                	idiv   ebp
c00136a4:	83 fa 01             	cmp    edx,0x1
c00136a7:	19 c0                	sbb    eax,eax
c00136a9:	f7 d0                	not    eax
c00136ab:	05 6e 01 00 00       	add    eax,0x16e
c00136b0:	01 c1                	add    ecx,eax
c00136b2:	43                   	inc    ebx
c00136b3:	39 f3                	cmp    ebx,esi
c00136b5:	7c cc                	jl     c0013683 <datetimeToSeconds(datetime_t)+0xa4>
c00136b7:	eb 35                	jmp    c00136ee <datetimeToSeconds(datetime_t)+0x10f>
c00136b9:	74 33                	je     c00136ee <datetimeToSeconds(datetime_t)+0x10f>
c00136bb:	b8 45 00 00 00       	mov    eax,0x45
c00136c0:	89 c2                	mov    edx,eax
c00136c2:	83 e2 03             	and    edx,0x3
c00136c5:	39 f0                	cmp    eax,esi
c00136c7:	7e 0f                	jle    c00136d8 <datetimeToSeconds(datetime_t)+0xf9>
c00136c9:	83 fa 01             	cmp    edx,0x1
c00136cc:	19 d2                	sbb    edx,edx
c00136ce:	48                   	dec    eax
c00136cf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00136d6:	eb e8                	jmp    c00136c0 <datetimeToSeconds(datetime_t)+0xe1>
c00136d8:	b8 6d 01 00 00       	mov    eax,0x16d
c00136dd:	85 d2                	test   edx,edx
c00136df:	75 0b                	jne    c00136ec <datetimeToSeconds(datetime_t)+0x10d>
c00136e1:	66 83 fb 01          	cmp    bx,0x1
c00136e5:	19 c0                	sbb    eax,eax
c00136e7:	05 6e 01 00 00       	add    eax,0x16e
c00136ec:	29 c1                	sub    ecx,eax
c00136ee:	b8 80 51 01 00       	mov    eax,0x15180
c00136f3:	f7 e9                	imul   ecx
c00136f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00136f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00136fd:	83 c4 14             	add    esp,0x14
c0013700:	5b                   	pop    ebx
c0013701:	5e                   	pop    esi
c0013702:	5f                   	pop    edi
c0013703:	5d                   	pop    ebp
c0013704:	c3                   	ret    
c0013705:	90                   	nop

c0013706 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013706:	57                   	push   edi
c0013707:	56                   	push   esi
c0013708:	53                   	push   ebx
c0013709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001370d:	8b 06                	mov    eax,DWORD PTR [esi]
c001370f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013712:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013716:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001371a:	e8 c0 fe ff ff       	call   c00135df <datetimeToSeconds(datetime_t)>
c001371f:	59                   	pop    ecx
c0013720:	0f b6 0d 30 b2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002b230
c0013727:	5b                   	pop    ebx
c0013728:	03 0d 34 b2 02 c0    	add    ecx,DWORD PTR ds:0xc002b234
c001372e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013734:	89 cb                	mov    ebx,ecx
c0013736:	c1 fb 1f             	sar    ebx,0x1f
c0013739:	29 c8                	sub    eax,ecx
c001373b:	19 da                	sbb    edx,ebx
c001373d:	31 c9                	xor    ecx,ecx
c001373f:	80 3d 31 b2 02 c0 00 	cmp    BYTE PTR ds:0xc002b231,0x0
c0013746:	74 05                	je     c001374d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013748:	b9 08 07 00 00       	mov    ecx,0x708
c001374d:	31 db                	xor    ebx,ebx
c001374f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013753:	29 c8                	sub    eax,ecx
c0013755:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013759:	19 da                	sbb    edx,ebx
c001375b:	89 f8                	mov    eax,edi
c001375d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013761:	5b                   	pop    ebx
c0013762:	5e                   	pop    esi
c0013763:	5f                   	pop    edi
c0013764:	ff e0                	jmp    eax

c0013766 <secondsToDatetime(unsigned long long)>:
c0013766:	55                   	push   ebp
c0013767:	57                   	push   edi
c0013768:	56                   	push   esi
c0013769:	53                   	push   ebx
c001376a:	83 ec 1c             	sub    esp,0x1c
c001376d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013771:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013775:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013779:	6a 00                	push   0x0
c001377b:	68 80 51 01 00       	push   0x15180
c0013780:	55                   	push   ebp
c0013781:	57                   	push   edi
c0013782:	e8 a5 07 01 00       	call   c0023f2c <__udivdi3>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013794:	6a 00                	push   0x0
c0013796:	68 80 51 01 00       	push   0x15180
c001379b:	55                   	push   ebp
c001379c:	57                   	push   edi
c001379d:	bf 10 0e 00 00       	mov    edi,0xe10
c00137a2:	e8 85 08 01 00       	call   c002402c <__umoddi3>
c00137a7:	83 c4 10             	add    esp,0x10
c00137aa:	99                   	cdq    
c00137ab:	f7 ff                	idiv   edi
c00137ad:	bf 3c 00 00 00       	mov    edi,0x3c
c00137b2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00137b5:	89 d0                	mov    eax,edx
c00137b7:	99                   	cdq    
c00137b8:	f7 ff                	idiv   edi
c00137ba:	85 db                	test   ebx,ebx
c00137bc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00137bf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00137c2:	79 11                	jns    c00137d5 <secondsToDatetime(unsigned long long)+0x6f>
c00137c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137c8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00137ce:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137d3:	eb 07                	jmp    c00137dc <secondsToDatetime(unsigned long long)+0x76>
c00137d5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137da:	89 d8                	mov    eax,ebx
c00137dc:	bf b4 05 00 00       	mov    edi,0x5b4
c00137e1:	99                   	cdq    
c00137e2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137e7:	f7 f9                	idiv   ecx
c00137e9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00137ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137f2:	31 d2                	xor    edx,edx
c00137f4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00137fc:	01 c3                	add    ebx,eax
c00137fe:	89 d8                	mov    eax,ebx
c0013800:	f7 f1                	div    ecx
c0013802:	31 d2                	xor    edx,edx
c0013804:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013807:	89 d8                	mov    eax,ebx
c0013809:	f7 f7                	div    edi
c001380b:	31 d2                	xor    edx,edx
c001380d:	29 c1                	sub    ecx,eax
c001380f:	89 d8                	mov    eax,ebx
c0013811:	f7 f5                	div    ebp
c0013813:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013818:	29 c1                	sub    ecx,eax
c001381a:	31 d2                	xor    edx,edx
c001381c:	89 c8                	mov    eax,ecx
c001381e:	f7 f5                	div    ebp
c0013820:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013825:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013829:	31 d2                	xor    edx,edx
c001382b:	89 c8                	mov    eax,ecx
c001382d:	f7 f5                	div    ebp
c001382f:	31 d2                	xor    edx,edx
c0013831:	01 c3                	add    ebx,eax
c0013833:	89 c8                	mov    eax,ecx
c0013835:	f7 f7                	div    edi
c0013837:	bf 99 00 00 00       	mov    edi,0x99
c001383c:	29 c3                	sub    ebx,eax
c001383e:	31 d2                	xor    edx,edx
c0013840:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013848:	29 c3                	sub    ebx,eax
c001384a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001384d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013850:	bb 05 00 00 00       	mov    ebx,0x5
c0013855:	83 c1 02             	add    ecx,0x2
c0013858:	89 c8                	mov    eax,ecx
c001385a:	f7 f7                	div    edi
c001385c:	31 d2                	xor    edx,edx
c001385e:	89 c7                	mov    edi,eax
c0013860:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013866:	83 c0 02             	add    eax,0x2
c0013869:	f7 f3                	div    ebx
c001386b:	89 eb                	mov    ebx,ebp
c001386d:	29 c3                	sub    ebx,eax
c001386f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013875:	88 1e                	mov    BYTE PTR [esi],bl
c0013877:	19 c0                	sbb    eax,eax
c0013879:	31 d2                	xor    edx,edx
c001387b:	83 e0 0c             	and    eax,0xc
c001387e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013882:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001388a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001388e:	83 f9 01             	cmp    ecx,0x1
c0013891:	0f 96 c2             	setbe  dl
c0013894:	41                   	inc    ecx
c0013895:	01 d0                	add    eax,edx
c0013897:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001389a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001389e:	83 c4 1c             	add    esp,0x1c
c00138a1:	89 f0                	mov    eax,esi
c00138a3:	5b                   	pop    ebx
c00138a4:	5e                   	pop    esi
c00138a5:	5f                   	pop    edi
c00138a6:	5d                   	pop    ebp
c00138a7:	c2 04 00             	ret    0x4

c00138aa <Clock::timeInDatetimeLocal()>:
c00138aa:	53                   	push   ebx
c00138ab:	83 ec 14             	sub    esp,0x14
c00138ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00138b6:	e8 83 fc ff ff       	call   c001353e <Clock::timeInSecondsLocal()>
c00138bb:	83 c4 0c             	add    esp,0xc
c00138be:	52                   	push   edx
c00138bf:	50                   	push   eax
c00138c0:	53                   	push   ebx
c00138c1:	e8 a0 fe ff ff       	call   c0013766 <secondsToDatetime(unsigned long long)>
c00138c6:	89 d8                	mov    eax,ebx
c00138c8:	83 c4 14             	add    esp,0x14
c00138cb:	5b                   	pop    ebx
c00138cc:	c2 04 00             	ret    0x4
c00138cf:	90                   	nop

c00138d0 <Device::hibernate()>:
c00138d0:	c3                   	ret    
c00138d1:	90                   	nop

c00138d2 <Device::wake()>:
c00138d2:	c3                   	ret    
c00138d3:	90                   	nop

c00138d4 <Device::detect()>:
c00138d4:	c3                   	ret    
c00138d5:	90                   	nop

c00138d6 <Device::disableLegacy()>:
c00138d6:	c3                   	ret    
c00138d7:	90                   	nop

c00138d8 <Device::powerSaving(PowerSavingLevel)>:
c00138d8:	c3                   	ret    
c00138d9:	90                   	nop

c00138da <DriverlessDevice::close(int, int, void*)>:
c00138da:	31 c0                	xor    eax,eax
c00138dc:	c3                   	ret    
c00138dd:	90                   	nop

c00138de <DriverlessDevice::detect()>:
c00138de:	c3                   	ret    
c00138df:	90                   	nop

c00138e0 <DriverlessDevice::open(int, int, void*)>:
c00138e0:	83 ec 18             	sub    esp,0x18
c00138e3:	68 b0 7f 02 c0       	push   0xc0027fb0
c00138e8:	e8 aa 57 00 00       	call   c0019097 <Krnl::panic(char const*)>
c00138ed:	83 c8 ff             	or     eax,0xffffffff
c00138f0:	83 c4 1c             	add    esp,0x1c
c00138f3:	c3                   	ret    

c00138f4 <Device::~Device()>:
c00138f4:	ba d8 7f 02 c0       	mov    edx,0xc0027fd8
c00138f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138fd:	89 10                	mov    DWORD PTR [eax],edx
c00138ff:	90                   	nop
c0013900:	c3                   	ret    
c0013901:	90                   	nop

c0013902 <Device::~Device()>:
c0013902:	83 ec 0c             	sub    esp,0xc
c0013905:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013909:	e8 e6 ff ff ff       	call   c00138f4 <Device::~Device()>
c001390e:	83 c4 04             	add    esp,0x4
c0013911:	83 ec 08             	sub    esp,0x8
c0013914:	68 58 01 00 00       	push   0x158
c0013919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001391d:	e8 31 ec ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0013922:	83 c4 10             	add    esp,0x10
c0013925:	83 c4 0c             	add    esp,0xc
c0013928:	c3                   	ret    
c0013929:	90                   	nop

c001392a <Device::findAndLoadDriver()>:
c001392a:	c3                   	ret    
c001392b:	90                   	nop

c001392c <Device::preOpenPCI(PCIDeviceInfo)>:
c001392c:	57                   	push   edi
c001392d:	b9 09 00 00 00       	mov    ecx,0x9
c0013932:	56                   	push   esi
c0013933:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013937:	8d 74 24 10          	lea    esi,[esp+0x10]
c001393b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013945:	81 c7 18 01 00 00    	add    edi,0x118
c001394b:	fc                   	cld    
c001394c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001394e:	5e                   	pop    esi
c001394f:	5f                   	pop    edi
c0013950:	c3                   	ret    
c0013951:	90                   	nop

c0013952 <Device::preOpenACPI(void*, char*, char*)>:
c0013952:	56                   	push   esi
c0013953:	53                   	push   ebx
c0013954:	83 ec 08             	sub    esp,0x8
c0013957:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001395b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001395f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013969:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001396d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013973:	6a 1e                	push   0x1e
c0013975:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001397b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001397f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013985:	50                   	push   eax
c0013986:	e8 ba cc fe ff       	call   c0000645 <memcpy>
c001398b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001398f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013993:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001399b:	83 c4 14             	add    esp,0x14
c001399e:	5b                   	pop    ebx
c001399f:	5e                   	pop    esi
c00139a0:	e9 a0 cc fe ff       	jmp    c0000645 <memcpy>
c00139a5:	90                   	nop

c00139a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00139a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139aa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139af:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139b6:	75 0b                	jne    c00139c3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00139b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00139ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139be:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00139c1:	eb 1e                	jmp    c00139e1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00139c3:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00139c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139ce:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139d6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139de:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00139e1:	ff e0                	jmp    eax
c00139e3:	90                   	nop

c00139e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139e8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139ed:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139f4:	75 0b                	jne    c0013a01 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00139f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00139f8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139fc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00139ff:	eb 1e                	jmp    c0013a1f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a01:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0013a06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a0c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a12:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a14:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a1c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a1f:	ff e0                	jmp    eax
c0013a21:	90                   	nop

c0013a22 <Device::addChild(Device*)>:
c0013a22:	53                   	push   ebx
c0013a23:	83 ec 08             	sub    esp,0x8
c0013a26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a2e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a34:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a3a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a3c:	85 d2                	test   edx,edx
c0013a3e:	74 04                	je     c0013a44 <Device::addChild(Device*)+0x22>
c0013a40:	89 d3                	mov    ebx,edx
c0013a42:	eb f6                	jmp    c0013a3a <Device::addChild(Device*)+0x18>
c0013a44:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a47:	83 ec 0c             	sub    esp,0xc
c0013a4a:	6a 08                	push   0x8
c0013a4c:	e8 6f ba ff ff       	call   c000f4c0 <malloc>
c0013a51:	89 03                	mov    DWORD PTR [ebx],eax
c0013a53:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a60:	83 c4 18             	add    esp,0x18
c0013a63:	5b                   	pop    ebx
c0013a64:	c3                   	ret    
c0013a65:	90                   	nop

c0013a66 <Device::removeAllChildren()>:
c0013a66:	56                   	push   esi
c0013a67:	53                   	push   ebx
c0013a68:	52                   	push   edx
c0013a69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a6d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a76:	74 17                	je     c0013a8f <Device::removeAllChildren()+0x29>
c0013a78:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a7b:	85 c0                	test   eax,eax
c0013a7d:	74 0c                	je     c0013a8b <Device::removeAllChildren()+0x25>
c0013a7f:	83 ec 0c             	sub    esp,0xc
c0013a82:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a84:	50                   	push   eax
c0013a85:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a88:	83 c4 10             	add    esp,0x10
c0013a8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a8d:	eb e4                	jmp    c0013a73 <Device::removeAllChildren()+0xd>
c0013a8f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a9b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aa1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013aa8:	58                   	pop    eax
c0013aa9:	5b                   	pop    ebx
c0013aaa:	5e                   	pop    esi
c0013aab:	c3                   	ret    

c0013aac <Device::hibernateAll()>:
c0013aac:	53                   	push   ebx
c0013aad:	83 ec 14             	sub    esp,0x14
c0013ab0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ab4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ab6:	53                   	push   ebx
c0013ab7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013aba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ac0:	83 c4 10             	add    esp,0x10
c0013ac3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ac6:	74 0f                	je     c0013ad7 <Device::hibernateAll()+0x2b>
c0013ac8:	83 ec 0c             	sub    esp,0xc
c0013acb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ace:	e8 d9 ff ff ff       	call   c0013aac <Device::hibernateAll()>
c0013ad3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ad5:	eb e9                	jmp    c0013ac0 <Device::hibernateAll()+0x14>
c0013ad7:	83 c4 08             	add    esp,0x8
c0013ada:	5b                   	pop    ebx
c0013adb:	c3                   	ret    

c0013adc <Device::wakeAll()>:
c0013adc:	53                   	push   ebx
c0013add:	83 ec 14             	sub    esp,0x14
c0013ae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ae4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ae6:	53                   	push   ebx
c0013ae7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013aea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013af0:	83 c4 10             	add    esp,0x10
c0013af3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013af6:	74 0f                	je     c0013b07 <Device::wakeAll()+0x2b>
c0013af8:	83 ec 0c             	sub    esp,0xc
c0013afb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013afe:	e8 d9 ff ff ff       	call   c0013adc <Device::wakeAll()>
c0013b03:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b05:	eb e9                	jmp    c0013af0 <Device::wakeAll()+0x14>
c0013b07:	83 c4 08             	add    esp,0x8
c0013b0a:	5b                   	pop    ebx
c0013b0b:	c3                   	ret    

c0013b0c <Device::detectAll()>:
c0013b0c:	53                   	push   ebx
c0013b0d:	83 ec 14             	sub    esp,0x14
c0013b10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b14:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b16:	53                   	push   ebx
c0013b17:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b1a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b20:	83 c4 10             	add    esp,0x10
c0013b23:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b26:	74 0f                	je     c0013b37 <Device::detectAll()+0x2b>
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b2e:	e8 d9 ff ff ff       	call   c0013b0c <Device::detectAll()>
c0013b33:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b35:	eb e9                	jmp    c0013b20 <Device::detectAll()+0x14>
c0013b37:	83 c4 08             	add    esp,0x8
c0013b3a:	5b                   	pop    ebx
c0013b3b:	c3                   	ret    

c0013b3c <Device::disableLegacyAll()>:
c0013b3c:	53                   	push   ebx
c0013b3d:	83 ec 14             	sub    esp,0x14
c0013b40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b46:	53                   	push   ebx
c0013b47:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b50:	83 c4 10             	add    esp,0x10
c0013b53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b56:	74 0f                	je     c0013b67 <Device::disableLegacyAll()+0x2b>
c0013b58:	83 ec 0c             	sub    esp,0xc
c0013b5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b5e:	e8 d9 ff ff ff       	call   c0013b3c <Device::disableLegacyAll()>
c0013b63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b65:	eb e9                	jmp    c0013b50 <Device::disableLegacyAll()+0x14>
c0013b67:	83 c4 08             	add    esp,0x8
c0013b6a:	5b                   	pop    ebx
c0013b6b:	c3                   	ret    

c0013b6c <Device::loadDriversForAll()>:
c0013b6c:	53                   	push   ebx
c0013b6d:	83 ec 08             	sub    esp,0x8
c0013b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b74:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013b7a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013b7c:	85 db                	test   ebx,ebx
c0013b7e:	74 12                	je     c0013b92 <Device::loadDriversForAll()+0x26>
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013b86:	e8 e1 ff ff ff       	call   c0013b6c <Device::loadDriversForAll()>
c0013b8b:	83 c4 10             	add    esp,0x10
c0013b8e:	89 d8                	mov    eax,ebx
c0013b90:	eb e8                	jmp    c0013b7a <Device::loadDriversForAll()+0xe>
c0013b92:	83 c4 08             	add    esp,0x8
c0013b95:	5b                   	pop    ebx
c0013b96:	c3                   	ret    
c0013b97:	90                   	nop

c0013b98 <Device::closeAll()>:
c0013b98:	53                   	push   ebx
c0013b99:	83 ec 08             	sub    esp,0x8
c0013b9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ba0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba2:	6a 00                	push   0x0
c0013ba4:	6a 00                	push   0x0
c0013ba6:	6a 00                	push   0x0
c0013ba8:	53                   	push   ebx
c0013ba9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bb2:	83 c4 10             	add    esp,0x10
c0013bb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bb8:	74 0f                	je     c0013bc9 <Device::closeAll()+0x31>
c0013bba:	83 ec 0c             	sub    esp,0xc
c0013bbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bc0:	e8 d3 ff ff ff       	call   c0013b98 <Device::closeAll()>
c0013bc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bc7:	eb e9                	jmp    c0013bb2 <Device::closeAll()+0x1a>
c0013bc9:	83 c4 08             	add    esp,0x8
c0013bcc:	5b                   	pop    ebx
c0013bcd:	c3                   	ret    

c0013bce <Device::powerSavingAll(PowerSavingLevel)>:
c0013bce:	56                   	push   esi
c0013bcf:	53                   	push   ebx
c0013bd0:	83 ec 0c             	sub    esp,0xc
c0013bd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bd7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013bdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bdd:	56                   	push   esi
c0013bde:	53                   	push   ebx
c0013bdf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013be2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013be8:	83 c4 10             	add    esp,0x10
c0013beb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bee:	74 0f                	je     c0013bff <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013bf0:	52                   	push   edx
c0013bf1:	52                   	push   edx
c0013bf2:	56                   	push   esi
c0013bf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bf6:	e8 d3 ff ff ff       	call   c0013bce <Device::powerSavingAll(PowerSavingLevel)>
c0013bfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bfd:	eb e9                	jmp    c0013be8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013bff:	58                   	pop    eax
c0013c00:	5b                   	pop    ebx
c0013c01:	5e                   	pop    esi
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <Device::setName(char const*)>:
c0013c04:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c0c:	e9 09 cb fe ff       	jmp    c000071a <strcpy>
c0013c11:	90                   	nop

c0013c12 <Device::Device(char const*)>:
c0013c12:	83 ec 1c             	sub    esp,0x1c
c0013c15:	ba d8 7f 02 c0       	mov    edx,0xc0027fd8
c0013c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c1e:	89 10                	mov    DWORD PTR [eax],edx
c0013c20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c24:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c32:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c40:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c4e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c58:	83 ec 08             	sub    esp,0x8
c0013c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c63:	e8 9c ff ff ff       	call   c0013c04 <Device::setName(char const*)>
c0013c68:	83 c4 10             	add    esp,0x10
c0013c6b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c73:	83 ec 0c             	sub    esp,0xc
c0013c76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c7a:	e8 41 b8 ff ff       	call   c000f4c0 <malloc>
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c93:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c9d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ca3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cad:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cbe:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cfe:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d08:	90                   	nop
c0013d09:	83 c4 1c             	add    esp,0x1c
c0013d0c:	c3                   	ret    
c0013d0d:	90                   	nop

c0013d0e <Device::getName()>:
c0013d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d12:	05 d0 00 00 00       	add    eax,0xd0
c0013d17:	c3                   	ret    

c0013d18 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d18:	83 ec 0c             	sub    esp,0xc
c0013d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d1f:	83 ec 08             	sub    esp,0x8
c0013d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d26:	50                   	push   eax
c0013d27:	e8 e6 fe ff ff       	call   c0013c12 <Device::Device(char const*)>
c0013d2c:	83 c4 10             	add    esp,0x10
c0013d2f:	ba 04 80 02 c0       	mov    edx,0xc0028004
c0013d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d38:	89 10                	mov    DWORD PTR [eax],edx
c0013d3a:	90                   	nop
c0013d3b:	83 c4 0c             	add    esp,0xc
c0013d3e:	c3                   	ret    
c0013d3f:	90                   	nop

c0013d40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d40:	57                   	push   edi
c0013d41:	56                   	push   esi
c0013d42:	53                   	push   ebx
c0013d43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d47:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d4f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d55:	75 0c                	jne    c0013d63 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d57:	52                   	push   edx
c0013d58:	52                   	push   edx
c0013d59:	53                   	push   ebx
c0013d5a:	56                   	push   esi
c0013d5b:	e8 0a 21 01 00       	call   c0025e6a <LinkedList<Device>::addElement(Device*)>
c0013d60:	83 c4 10             	add    esp,0x10
c0013d63:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d6c:	74 12                	je     c0013d80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d6e:	50                   	push   eax
c0013d6f:	57                   	push   edi
c0013d70:	56                   	push   esi
c0013d71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d74:	e8 c7 ff ff ff       	call   c0013d40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d7b:	83 c4 10             	add    esp,0x10
c0013d7e:	eb e9                	jmp    c0013d69 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d80:	5b                   	pop    ebx
c0013d81:	5e                   	pop    esi
c0013d82:	5f                   	pop    edi
c0013d83:	c3                   	ret    

c0013d84 <getDevicesOfType(DeviceType)>:
c0013d84:	53                   	push   ebx
c0013d85:	83 ec 14             	sub    esp,0x14
c0013d88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d8c:	53                   	push   ebx
c0013d8d:	e8 b4 21 01 00       	call   c0025f46 <LinkedList<Device>::LinkedList()>
c0013d92:	83 c4 0c             	add    esp,0xc
c0013d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d99:	53                   	push   ebx
c0013d9a:	ff 35 c8 b0 02 c0    	push   DWORD PTR ds:0xc002b0c8
c0013da0:	e8 9b ff ff ff       	call   c0013d40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013da5:	89 d8                	mov    eax,ebx
c0013da7:	83 c4 18             	add    esp,0x18
c0013daa:	5b                   	pop    ebx
c0013dab:	c2 04 00             	ret    0x4

c0013dae <HardDiskController::HardDiskController(char const*)>:
c0013dae:	83 ec 0c             	sub    esp,0xc
c0013db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db5:	83 ec 08             	sub    esp,0x8
c0013db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dbc:	50                   	push   eax
c0013dbd:	e8 50 fe ff ff       	call   c0013c12 <Device::Device(char const*)>
c0013dc2:	83 c4 10             	add    esp,0x10
c0013dc5:	ba 30 80 02 c0       	mov    edx,0xc0028030
c0013dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dce:	89 10                	mov    DWORD PTR [eax],edx
c0013dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd4:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013dde:	90                   	nop
c0013ddf:	83 c4 0c             	add    esp,0xc
c0013de2:	c3                   	ret    
c0013de3:	90                   	nop

c0013de4 <HardDiskController::~HardDiskController()>:
c0013de4:	83 ec 0c             	sub    esp,0xc
c0013de7:	ba 30 80 02 c0       	mov    edx,0xc0028030
c0013dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df0:	89 10                	mov    DWORD PTR [eax],edx
c0013df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	50                   	push   eax
c0013dfa:	e8 f5 fa ff ff       	call   c00138f4 <Device::~Device()>
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	90                   	nop
c0013e03:	83 c4 0c             	add    esp,0xc
c0013e06:	c3                   	ret    
c0013e07:	90                   	nop

c0013e08 <HardDiskController::~HardDiskController()>:
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	83 ec 0c             	sub    esp,0xc
c0013e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e12:	e8 cd ff ff ff       	call   c0013de4 <HardDiskController::~HardDiskController()>
c0013e17:	83 c4 10             	add    esp,0x10
c0013e1a:	83 ec 08             	sub    esp,0x8
c0013e1d:	68 58 01 00 00       	push   0x158
c0013e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e26:	e8 28 e7 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0013e2b:	83 c4 10             	add    esp,0x10
c0013e2e:	83 c4 0c             	add    esp,0xc
c0013e31:	c3                   	ret    

c0013e32 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e39:	83 ec 08             	sub    esp,0x8
c0013e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e40:	50                   	push   eax
c0013e41:	e8 cc fd ff ff       	call   c0013c12 <Device::Device(char const*)>
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	ba 5c 80 02 c0       	mov    edx,0xc002805c
c0013e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e52:	89 10                	mov    DWORD PTR [eax],edx
c0013e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e58:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e63:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e94:	90                   	nop
c0013e95:	83 c4 0c             	add    esp,0xc
c0013e98:	c3                   	ret    
c0013e99:	90                   	nop

c0013e9a <PhysicalDisk::startCache()>:
c0013e9a:	56                   	push   esi
c0013e9b:	53                   	push   ebx
c0013e9c:	83 ec 10             	sub    esp,0x10
c0013e9f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ea3:	6a 30                	push   0x30
c0013ea5:	e8 16 b6 ff ff       	call   c000f4c0 <malloc>
c0013eaa:	89 c6                	mov    esi,eax
c0013eac:	58                   	pop    eax
c0013ead:	5a                   	pop    edx
c0013eae:	53                   	push   ebx
c0013eaf:	56                   	push   esi
c0013eb0:	e8 df 24 00 00       	call   c0016394 <VCache::VCache(PhysicalDisk*)>
c0013eb5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ebb:	83 c4 14             	add    esp,0x14
c0013ebe:	5b                   	pop    ebx
c0013ebf:	5e                   	pop    esi
c0013ec0:	c3                   	ret    
c0013ec1:	90                   	nop

c0013ec2 <PhysicalDisk::~PhysicalDisk()>:
c0013ec2:	83 ec 0c             	sub    esp,0xc
c0013ec5:	ba 5c 80 02 c0       	mov    edx,0xc002805c
c0013eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ece:	89 10                	mov    DWORD PTR [eax],edx
c0013ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed4:	83 ec 0c             	sub    esp,0xc
c0013ed7:	50                   	push   eax
c0013ed8:	e8 17 fa ff ff       	call   c00138f4 <Device::~Device()>
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	90                   	nop
c0013ee1:	83 c4 0c             	add    esp,0xc
c0013ee4:	c3                   	ret    
c0013ee5:	90                   	nop

c0013ee6 <PhysicalDisk::~PhysicalDisk()>:
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	83 ec 0c             	sub    esp,0xc
c0013eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef0:	e8 cd ff ff ff       	call   c0013ec2 <PhysicalDisk::~PhysicalDisk()>
c0013ef5:	83 c4 10             	add    esp,0x10
c0013ef8:	83 ec 08             	sub    esp,0x8
c0013efb:	68 6c 01 00 00       	push   0x16c
c0013f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f04:	e8 4a e6 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0013f09:	83 c4 10             	add    esp,0x10
c0013f0c:	83 c4 0c             	add    esp,0xc
c0013f0f:	c3                   	ret    

c0013f10 <FPU::FPU(char const*)>:
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f17:	83 ec 08             	sub    esp,0x8
c0013f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1e:	50                   	push   eax
c0013f1f:	e8 ee fc ff ff       	call   c0013c12 <Device::Device(char const*)>
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	ba 9c 80 02 c0       	mov    edx,0xc002809c
c0013f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f30:	89 10                	mov    DWORD PTR [eax],edx
c0013f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f36:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f40:	90                   	nop
c0013f41:	83 c4 0c             	add    esp,0xc
c0013f44:	c3                   	ret    
c0013f45:	90                   	nop

c0013f46 <FPU::~FPU()>:
c0013f46:	83 ec 0c             	sub    esp,0xc
c0013f49:	ba 9c 80 02 c0       	mov    edx,0xc002809c
c0013f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f52:	89 10                	mov    DWORD PTR [eax],edx
c0013f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f58:	83 ec 0c             	sub    esp,0xc
c0013f5b:	50                   	push   eax
c0013f5c:	e8 93 f9 ff ff       	call   c00138f4 <Device::~Device()>
c0013f61:	83 c4 10             	add    esp,0x10
c0013f64:	90                   	nop
c0013f65:	83 c4 0c             	add    esp,0xc
c0013f68:	c3                   	ret    
c0013f69:	90                   	nop

c0013f6a <FPU::~FPU()>:
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	83 ec 0c             	sub    esp,0xc
c0013f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f74:	e8 cd ff ff ff       	call   c0013f46 <FPU::~FPU()>
c0013f79:	83 c4 10             	add    esp,0x10
c0013f7c:	83 ec 08             	sub    esp,0x8
c0013f7f:	68 58 01 00 00       	push   0x158
c0013f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f88:	e8 c6 e5 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	83 c4 0c             	add    esp,0xc
c0013f93:	c3                   	ret    

c0013f94 <setupFPU()>:
c0013f94:	53                   	push   ebx
c0013f95:	83 ec 08             	sub    esp,0x8
c0013f98:	8b 15 c8 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0c8
c0013f9e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fa5:	74 19                	je     c0013fc0 <setupFPU()+0x2c>
c0013fa7:	83 ec 0c             	sub    esp,0xc
c0013faa:	68 58 01 00 00       	push   0x158
c0013faf:	e8 0c b5 ff ff       	call   c000f4c0 <malloc>
c0013fb4:	89 c3                	mov    ebx,eax
c0013fb6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fb9:	e8 f6 ea 00 00       	call   c0022ab4 <AVX::AVX()>
c0013fbe:	eb 5b                	jmp    c001401b <setupFPU()+0x87>
c0013fc0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013fc6:	84 c0                	test   al,al
c0013fc8:	79 19                	jns    c0013fe3 <setupFPU()+0x4f>
c0013fca:	83 ec 0c             	sub    esp,0xc
c0013fcd:	68 58 01 00 00       	push   0x158
c0013fd2:	e8 e9 b4 ff ff       	call   c000f4c0 <malloc>
c0013fd7:	89 c3                	mov    ebx,eax
c0013fd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fdc:	e8 f9 eb 00 00       	call   c0022bda <SSE::SSE()>
c0013fe1:	eb 38                	jmp    c001401b <setupFPU()+0x87>
c0013fe3:	a8 20                	test   al,0x20
c0013fe5:	74 19                	je     c0014000 <setupFPU()+0x6c>
c0013fe7:	83 ec 0c             	sub    esp,0xc
c0013fea:	68 58 01 00 00       	push   0x158
c0013fef:	e8 cc b4 ff ff       	call   c000f4c0 <malloc>
c0013ff4:	89 c3                	mov    ebx,eax
c0013ff6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ff9:	e8 46 eb 00 00       	call   c0022b44 <MMX::MMX()>
c0013ffe:	eb 1b                	jmp    c001401b <setupFPU()+0x87>
c0014000:	a8 10                	test   al,0x10
c0014002:	74 1c                	je     c0014020 <setupFPU()+0x8c>
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	68 58 01 00 00       	push   0x158
c001400c:	e8 af b4 ff ff       	call   c000f4c0 <malloc>
c0014011:	89 c3                	mov    ebx,eax
c0014013:	89 04 24             	mov    DWORD PTR [esp],eax
c0014016:	e8 4d ec 00 00       	call   c0022c68 <x87::x87()>
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	eb 24                	jmp    c0014044 <setupFPU()+0xb0>
c0014020:	83 e0 ef             	and    eax,0xffffffef
c0014023:	83 ec 0c             	sub    esp,0xc
c0014026:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001402c:	68 88 80 02 c0       	push   0xc0028088
c0014031:	e8 fd e5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014036:	0f 20 c0             	mov    eax,cr0
c0014039:	83 c8 04             	or     eax,0x4
c001403c:	0f 22 c0             	mov    cr0,eax
c001403f:	31 db                	xor    ebx,ebx
c0014041:	83 c4 10             	add    esp,0x10
c0014044:	89 d8                	mov    eax,ebx
c0014046:	83 c4 08             	add    esp,0x8
c0014049:	5b                   	pop    ebx
c001404a:	c3                   	ret    
c001404b:	90                   	nop

c001404c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001404c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014050:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014054:	c1 e0 04             	shl    eax,0x4
c0014057:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001405b:	8d 50 10             	lea    edx,[eax+0x10]
c001405e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014064:	74 08                	je     c001406e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014066:	83 c0 04             	add    eax,0x4
c0014069:	39 d0                	cmp    eax,edx
c001406b:	75 f1                	jne    c001405e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001406d:	c3                   	ret    
c001406e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014078:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014082:	eb e2                	jmp    c0014066 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014084 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014084:	57                   	push   edi
c0014085:	31 c0                	xor    eax,eax
c0014087:	56                   	push   esi
c0014088:	53                   	push   ebx
c0014089:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001408d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014091:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014095:	89 da                	mov    edx,ebx
c0014097:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001409b:	c1 e2 04             	shl    edx,0x4
c001409e:	01 ca                	add    edx,ecx
c00140a0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140a8:	74 16                	je     c00140c0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140aa:	40                   	inc    eax
c00140ab:	83 f8 04             	cmp    eax,0x4
c00140ae:	75 f0                	jne    c00140a0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140b0:	c7 44 24 10 cc 80 02 c0 	mov    DWORD PTR [esp+0x10],0xc00280cc
c00140b8:	5b                   	pop    ebx
c00140b9:	5e                   	pop    esi
c00140ba:	5f                   	pop    edi
c00140bb:	e9 d7 4f 00 00       	jmp    c0019097 <Krnl::panic(char const*)>
c00140c0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140c3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00140c6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00140cc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00140d2:	5b                   	pop    ebx
c00140d3:	5e                   	pop    esi
c00140d4:	5f                   	pop    edi
c00140d5:	c3                   	ret    

c00140d6 <doubleFault(regs*, void*)>:
c00140d6:	55                   	push   ebp
c00140d7:	89 e5                	mov    ebp,esp
c00140d9:	83 ec 08             	sub    esp,0x8
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	68 07 81 02 c0       	push   0xc0028107
c00140e4:	e8 ae 4f 00 00       	call   c0019097 <Krnl::panic(char const*)>
c00140e9:	83 c4 10             	add    esp,0x10
c00140ec:	90                   	nop
c00140ed:	c9                   	leave  
c00140ee:	c3                   	ret    
c00140ef:	90                   	nop

c00140f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00140f0:	56                   	push   esi
c00140f1:	53                   	push   ebx
c00140f2:	50                   	push   eax
c00140f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140fb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014100:	75 35                	jne    c0014137 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014102:	8d 43 20             	lea    eax,[ebx+0x20]
c0014105:	31 d2                	xor    edx,edx
c0014107:	89 c1                	mov    ecx,eax
c0014109:	c1 e1 04             	shl    ecx,0x4
c001410c:	01 f1                	add    ecx,esi
c001410e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014116:	74 3e                	je     c0014156 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014118:	42                   	inc    edx
c0014119:	83 fa 04             	cmp    edx,0x4
c001411c:	75 f0                	jne    c001410e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001411e:	83 ec 0c             	sub    esp,0xc
c0014121:	68 4c 81 02 c0       	push   0xc002814c
c0014126:	e8 6c 4f 00 00       	call   c0019097 <Krnl::panic(char const*)>
c001412b:	83 c4 10             	add    esp,0x10
c001412e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014133:	5a                   	pop    edx
c0014134:	5b                   	pop    ebx
c0014135:	5e                   	pop    esi
c0014136:	c3                   	ret    
c0014137:	83 ec 0c             	sub    esp,0xc
c001413a:	56                   	push   esi
c001413b:	e8 ce fb ff ff       	call   c0013d0e <Device::getName()>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014146:	75 ba                	jne    c0014102 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014148:	83 fb 0f             	cmp    ebx,0xf
c001414b:	7f 29                	jg     c0014176 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001414d:	0f b6 9b a0 a3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd5c60]
c0014154:	eb ac                	jmp    c0014102 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014156:	8d 04 82             	lea    eax,[edx+eax*4]
c0014159:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001415d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014160:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014166:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001416a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014170:	89 d8                	mov    eax,ebx
c0014172:	5a                   	pop    edx
c0014173:	5b                   	pop    ebx
c0014174:	5e                   	pop    esi
c0014175:	c3                   	ret    
c0014176:	83 ec 0c             	sub    esp,0xc
c0014179:	68 14 81 02 c0       	push   0xc0028114
c001417e:	e8 14 4f 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0014183:	83 c4 10             	add    esp,0x10
c0014186:	e9 77 ff ff ff       	jmp    c0014102 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001418b:	90                   	nop

c001418c <InterruptController::clearAllHandlers(int, bool)>:
c001418c:	56                   	push   esi
c001418d:	53                   	push   ebx
c001418e:	52                   	push   edx
c001418f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014193:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014197:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001419c:	75 61                	jne    c00141ff <InterruptController::clearAllHandlers(int, bool)+0x73>
c001419e:	8d 46 20             	lea    eax,[esi+0x20]
c00141a1:	c1 e6 04             	shl    esi,0x4
c00141a4:	c1 e0 04             	shl    eax,0x4
c00141a7:	01 de                	add    esi,ebx
c00141a9:	01 d8                	add    eax,ebx
c00141ab:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141b5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141bf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00141c9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00141d3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00141dd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00141e7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00141f1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00141fb:	58                   	pop    eax
c00141fc:	5b                   	pop    ebx
c00141fd:	5e                   	pop    esi
c00141fe:	c3                   	ret    
c00141ff:	83 ec 0c             	sub    esp,0xc
c0014202:	53                   	push   ebx
c0014203:	e8 06 fb ff ff       	call   c0013d0e <Device::getName()>
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001420e:	75 8e                	jne    c001419e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014210:	83 fe 0f             	cmp    esi,0xf
c0014213:	7f 09                	jg     c001421e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014215:	0f b6 b6 a0 a3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd5c60]
c001421c:	eb 80                	jmp    c001419e <InterruptController::clearAllHandlers(int, bool)+0x12>
c001421e:	83 ec 0c             	sub    esp,0xc
c0014221:	68 88 81 02 c0       	push   0xc0028188
c0014226:	e8 6c 4e 00 00       	call   c0019097 <Krnl::panic(char const*)>
c001422b:	83 c4 10             	add    esp,0x10
c001422e:	e9 6b ff ff ff       	jmp    c001419e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014233:	90                   	nop

c0014234 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014234:	56                   	push   esi
c0014235:	53                   	push   ebx
c0014236:	52                   	push   edx
c0014237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001423b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001423f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014244:	75 3a                	jne    c0014280 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014246:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001424a:	8d 50 20             	lea    edx,[eax+0x20]
c001424d:	c1 e2 04             	shl    edx,0x4
c0014250:	8d 04 16             	lea    eax,[esi+edx*1]
c0014253:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014257:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001425d:	74 0b                	je     c001426a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001425f:	83 c0 04             	add    eax,0x4
c0014262:	39 d0                	cmp    eax,edx
c0014264:	75 f1                	jne    c0014257 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014266:	58                   	pop    eax
c0014267:	5b                   	pop    ebx
c0014268:	5e                   	pop    esi
c0014269:	c3                   	ret    
c001426a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014274:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001427e:	eb df                	jmp    c001425f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014280:	83 ec 0c             	sub    esp,0xc
c0014283:	56                   	push   esi
c0014284:	e8 85 fa ff ff       	call   c0013d0e <Device::getName()>
c0014289:	83 c4 10             	add    esp,0x10
c001428c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001428f:	75 b5                	jne    c0014246 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014291:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014296:	7f 11                	jg     c00142a9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014298:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001429c:	0f b6 80 a0 a3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5c60]
c00142a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142a7:	eb 9d                	jmp    c0014246 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142a9:	83 ec 0c             	sub    esp,0xc
c00142ac:	68 88 81 02 c0       	push   0xc0028188
c00142b1:	e8 e1 4d 00 00       	call   c0019097 <Krnl::panic(char const*)>
c00142b6:	83 c4 10             	add    esp,0x10
c00142b9:	eb 8b                	jmp    c0014246 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142bb <nmiHandler(regs*, void*)>:
c00142bb:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00142c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142c4:	e9 43 a9 ff ff       	jmp    c000ec0c <Computer::handleNMI()>

c00142c9 <int_handler>:
c00142c9:	55                   	push   ebp
c00142ca:	57                   	push   edi
c00142cb:	56                   	push   esi
c00142cc:	53                   	push   ebx
c00142cd:	83 ec 0c             	sub    esp,0xc
c00142d0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142d4:	80 3d d4 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbd4,0x0
c00142db:	74 0b                	je     c00142e8 <int_handler+0x1f>
c00142dd:	fa                   	cli    
c00142de:	f4                   	hlt    
c00142df:	80 3d d4 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbd4,0x0
c00142e6:	75 f5                	jne    c00142dd <int_handler+0x14>
c00142e8:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00142ed:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00142f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142f6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00142fc:	8d 43 e0             	lea    eax,[ebx-0x20]
c00142ff:	83 f8 17             	cmp    eax,0x17
c0014302:	77 13                	ja     c0014317 <int_handler+0x4e>
c0014304:	83 ec 08             	sub    esp,0x8
c0014307:	8b 17                	mov    edx,DWORD PTR [edi]
c0014309:	8d 43 e0             	lea    eax,[ebx-0x20]
c001430c:	0f b6 c0             	movzx  eax,al
c001430f:	50                   	push   eax
c0014310:	57                   	push   edi
c0014311:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014314:	83 c4 10             	add    esp,0x10
c0014317:	83 c3 15             	add    ebx,0x15
c001431a:	c1 e3 04             	shl    ebx,0x4
c001431d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014321:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014328:	31 db                	xor    ebx,ebx
c001432a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001432e:	85 c0                	test   eax,eax
c0014330:	74 13                	je     c0014345 <int_handler+0x7c>
c0014332:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014335:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014339:	74 1c                	je     c0014357 <int_handler+0x8e>
c001433b:	83 ec 08             	sub    esp,0x8
c001433e:	52                   	push   edx
c001433f:	56                   	push   esi
c0014340:	ff d0                	call   eax
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	43                   	inc    ebx
c0014346:	83 fb 04             	cmp    ebx,0x4
c0014349:	75 df                	jne    c001432a <int_handler+0x61>
c001434b:	83 c4 0c             	add    esp,0xc
c001434e:	31 c0                	xor    eax,eax
c0014350:	5b                   	pop    ebx
c0014351:	31 d2                	xor    edx,edx
c0014353:	5e                   	pop    esi
c0014354:	5f                   	pop    edi
c0014355:	5d                   	pop    ebp
c0014356:	c3                   	ret    
c0014357:	83 ec 08             	sub    esp,0x8
c001435a:	52                   	push   edx
c001435b:	56                   	push   esi
c001435c:	ff d0                	call   eax
c001435e:	83 c4 10             	add    esp,0x10
c0014361:	83 c4 0c             	add    esp,0xc
c0014364:	5b                   	pop    ebx
c0014365:	5e                   	pop    esi
c0014366:	5f                   	pop    edi
c0014367:	5d                   	pop    ebp
c0014368:	c3                   	ret    
c0014369:	90                   	nop

c001436a <InterruptController::InterruptController(char const*)>:
c001436a:	83 ec 1c             	sub    esp,0x1c
c001436d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014371:	83 ec 08             	sub    esp,0x8
c0014374:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014378:	50                   	push   eax
c0014379:	e8 94 f8 ff ff       	call   c0013c12 <Device::Device(char const*)>
c001437e:	83 c4 10             	add    esp,0x10
c0014381:	ba bc 83 02 c0       	mov    edx,0xc00283bc
c0014386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001438a:	89 10                	mov    DWORD PTR [eax],edx
c001438c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014390:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001439a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143a2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143aa:	7f 5e                	jg     c001440a <InterruptController::InterruptController(char const*)+0xa0>
c00143ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143b4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143b9:	7f 49                	jg     c0014404 <InterruptController::InterruptController(char const*)+0x9a>
c00143bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143c3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143ce:	01 ca                	add    edx,ecx
c00143d0:	83 c2 54             	add    edx,0x54
c00143d3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143ee:	01 ca                	add    edx,ecx
c00143f0:	81 c2 54 04 00 00    	add    edx,0x454
c00143f6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143fe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014402:	eb b0                	jmp    c00143b4 <InterruptController::InterruptController(char const*)+0x4a>
c0014404:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014408:	eb 98                	jmp    c00143a2 <InterruptController::InterruptController(char const*)+0x38>
c001440a:	90                   	nop
c001440b:	83 c4 1c             	add    esp,0x1c
c001440e:	c3                   	ret    
c001440f:	90                   	nop

c0014410 <InterruptController::~InterruptController()>:
c0014410:	83 ec 0c             	sub    esp,0xc
c0014413:	ba bc 83 02 c0       	mov    edx,0xc00283bc
c0014418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001441c:	89 10                	mov    DWORD PTR [eax],edx
c001441e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	50                   	push   eax
c0014426:	e8 c9 f4 ff ff       	call   c00138f4 <Device::~Device()>
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	90                   	nop
c001442f:	83 c4 0c             	add    esp,0xc
c0014432:	c3                   	ret    
c0014433:	90                   	nop

c0014434 <InterruptController::~InterruptController()>:
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	83 ec 0c             	sub    esp,0xc
c001443a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001443e:	e8 cd ff ff ff       	call   c0014410 <InterruptController::~InterruptController()>
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	83 ec 08             	sub    esp,0x8
c0014449:	68 58 21 00 00       	push   0x2158
c001444e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014452:	e8 fc e0 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0014457:	83 c4 10             	add    esp,0x10
c001445a:	83 c4 0c             	add    esp,0xc
c001445d:	c3                   	ret    

c001445e <displayDebugInfo(regs*)>:
c001445e:	55                   	push   ebp
c001445f:	57                   	push   edi
c0014460:	56                   	push   esi
c0014461:	53                   	push   ebx
c0014462:	83 ec 24             	sub    esp,0x24
c0014465:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014469:	0f 20 c2             	mov    edx,cr0
c001446c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014470:	0f 20 d7             	mov    edi,cr2
c0014473:	0f 20 de             	mov    esi,cr3
c0014476:	0f 20 e5             	mov    ebp,cr4
c0014479:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001447c:	68 c2 81 02 c0       	push   0xc00281c2
c0014481:	e8 ad e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014486:	58                   	pop    eax
c0014487:	5a                   	pop    edx
c0014488:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001448b:	68 cd 81 02 c0       	push   0xc00281cd
c0014490:	e8 9e e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014495:	59                   	pop    ecx
c0014496:	58                   	pop    eax
c0014497:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001449a:	68 d8 81 02 c0       	push   0xc00281d8
c001449f:	e8 8f e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00144a4:	58                   	pop    eax
c00144a5:	5a                   	pop    edx
c00144a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144a9:	68 e3 81 02 c0       	push   0xc00281e3
c00144ae:	e8 80 e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00144b3:	59                   	pop    ecx
c00144b4:	58                   	pop    eax
c00144b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144b8:	68 ee 81 02 c0       	push   0xc00281ee
c00144bd:	e8 71 e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00144c2:	58                   	pop    eax
c00144c3:	5a                   	pop    edx
c00144c4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00144c7:	68 f9 81 02 c0       	push   0xc00281f9
c00144cc:	e8 62 e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00144d1:	59                   	pop    ecx
c00144d2:	58                   	pop    eax
c00144d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00144d6:	68 04 82 02 c0       	push   0xc0028204
c00144db:	e8 53 e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00144e0:	58                   	pop    eax
c00144e1:	5a                   	pop    edx
c00144e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00144e5:	68 0f 82 02 c0       	push   0xc002820f
c00144ea:	e8 44 e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00144ef:	59                   	pop    ecx
c00144f0:	58                   	pop    eax
c00144f1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00144f4:	68 1a 82 02 c0       	push   0xc002821a
c00144f9:	e8 35 e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00144fe:	58                   	pop    eax
c00144ff:	5a                   	pop    edx
c0014500:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014503:	68 29 82 02 c0       	push   0xc0028229
c0014508:	e8 26 e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001450d:	59                   	pop    ecx
c001450e:	58                   	pop    eax
c001450f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014512:	68 34 82 02 c0       	push   0xc0028234
c0014517:	e8 17 e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001451c:	58                   	pop    eax
c001451d:	5a                   	pop    edx
c001451e:	57                   	push   edi
c001451f:	68 3f 82 02 c0       	push   0xc002823f
c0014524:	e8 0a e1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014529:	59                   	pop    ecx
c001452a:	58                   	pop    eax
c001452b:	56                   	push   esi
c001452c:	68 4a 82 02 c0       	push   0xc002824a
c0014531:	e8 fd e0 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014536:	58                   	pop    eax
c0014537:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001453c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014542:	e8 ae c2 ff ff       	call   c00107f5 <setActiveTerminal(VgaText*)>
c0014547:	58                   	pop    eax
c0014548:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001454b:	5a                   	pop    edx
c001454c:	c1 e0 05             	shl    eax,0x5
c001454f:	05 00 a1 02 c0       	add    eax,0xc002a100
c0014554:	50                   	push   eax
c0014555:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001455a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014560:	e8 af c6 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014565:	59                   	pop    ecx
c0014566:	58                   	pop    eax
c0014567:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001456c:	68 55 82 02 c0       	push   0xc0028255
c0014571:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014577:	e8 98 c6 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001457c:	58                   	pop    eax
c001457d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014582:	5a                   	pop    edx
c0014583:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014586:	83 c0 0c             	add    eax,0xc
c0014589:	50                   	push   eax
c001458a:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001458f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014595:	e8 7a c6 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001459a:	59                   	pop    ecx
c001459b:	58                   	pop    eax
c001459c:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00145a1:	68 5e 82 02 c0       	push   0xc002825e
c00145a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ac:	e8 63 c6 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00145b1:	58                   	pop    eax
c00145b2:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00145b7:	5a                   	pop    edx
c00145b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145c1:	e8 74 c6 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00145c6:	59                   	pop    ecx
c00145c7:	58                   	pop    eax
c00145c8:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00145cd:	68 66 82 02 c0       	push   0xc0028266
c00145d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d8:	e8 37 c6 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00145dd:	58                   	pop    eax
c00145de:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00145e3:	5a                   	pop    edx
c00145e4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ed:	e8 48 c6 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00145f2:	59                   	pop    ecx
c00145f3:	58                   	pop    eax
c00145f4:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00145f9:	68 6e 82 02 c0       	push   0xc002826e
c00145fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014604:	e8 0b c6 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014609:	58                   	pop    eax
c001460a:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001460f:	5a                   	pop    edx
c0014610:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014613:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014619:	e8 1c c6 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c001461e:	59                   	pop    ecx
c001461f:	58                   	pop    eax
c0014620:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014625:	68 76 82 02 c0       	push   0xc0028276
c001462a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014630:	e8 df c5 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014635:	58                   	pop    eax
c0014636:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001463b:	5a                   	pop    edx
c001463c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001463f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014645:	e8 f0 c5 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c001464a:	59                   	pop    ecx
c001464b:	58                   	pop    eax
c001464c:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014651:	68 7e 82 02 c0       	push   0xc002827e
c0014656:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465c:	e8 b3 c5 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014661:	58                   	pop    eax
c0014662:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014667:	5a                   	pop    edx
c0014668:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001466b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014671:	e8 c4 c5 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c0014676:	59                   	pop    ecx
c0014677:	58                   	pop    eax
c0014678:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001467d:	68 86 82 02 c0       	push   0xc0028286
c0014682:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014688:	e8 87 c5 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001468d:	58                   	pop    eax
c001468e:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014693:	5a                   	pop    edx
c0014694:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014697:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469d:	e8 98 c5 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00146a2:	59                   	pop    ecx
c00146a3:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00146a8:	5b                   	pop    ebx
c00146a9:	68 8e 82 02 c0       	push   0xc002828e
c00146ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b4:	e8 5b c5 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00146b9:	58                   	pop    eax
c00146ba:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00146bf:	5a                   	pop    edx
c00146c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146c4:	52                   	push   edx
c00146c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cb:	e8 6a c5 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00146d0:	59                   	pop    ecx
c00146d1:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00146d6:	5b                   	pop    ebx
c00146d7:	68 97 82 02 c0       	push   0xc0028297
c00146dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e2:	e8 2d c5 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00146e7:	58                   	pop    eax
c00146e8:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00146ed:	5a                   	pop    edx
c00146ee:	57                   	push   edi
c00146ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f5:	e8 40 c5 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00146fa:	59                   	pop    ecx
c00146fb:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014700:	5b                   	pop    ebx
c0014701:	68 9f 82 02 c0       	push   0xc002829f
c0014706:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470c:	e8 03 c5 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014711:	5f                   	pop    edi
c0014712:	58                   	pop    eax
c0014713:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014718:	56                   	push   esi
c0014719:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471f:	e8 16 c5 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c0014724:	58                   	pop    eax
c0014725:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001472a:	5a                   	pop    edx
c001472b:	68 a7 82 02 c0       	push   0xc00282a7
c0014730:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014736:	e8 d9 c4 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001473b:	59                   	pop    ecx
c001473c:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014741:	5b                   	pop    ebx
c0014742:	55                   	push   ebp
c0014743:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014749:	e8 ec c4 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c001474e:	5e                   	pop    esi
c001474f:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014754:	5f                   	pop    edi
c0014755:	68 af 82 02 c0       	push   0xc00282af
c001475a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014760:	e8 af c4 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014765:	0f 21 c0             	mov    eax,db0
c0014768:	5d                   	pop    ebp
c0014769:	5a                   	pop    edx
c001476a:	50                   	push   eax
c001476b:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014770:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014776:	e8 bf c4 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c001477b:	59                   	pop    ecx
c001477c:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014781:	5b                   	pop    ebx
c0014782:	68 b8 82 02 c0       	push   0xc00282b8
c0014787:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478d:	e8 82 c4 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014792:	0f 21 c8             	mov    eax,db1
c0014795:	5e                   	pop    esi
c0014796:	5f                   	pop    edi
c0014797:	50                   	push   eax
c0014798:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001479d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a3:	e8 92 c4 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00147a8:	5d                   	pop    ebp
c00147a9:	58                   	pop    eax
c00147aa:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00147af:	68 c0 82 02 c0       	push   0xc00282c0
c00147b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ba:	e8 55 c4 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00147bf:	0f 21 d0             	mov    eax,db2
c00147c2:	5a                   	pop    edx
c00147c3:	59                   	pop    ecx
c00147c4:	50                   	push   eax
c00147c5:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00147ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d0:	e8 65 c4 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00147d5:	5b                   	pop    ebx
c00147d6:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00147db:	5e                   	pop    esi
c00147dc:	68 c8 82 02 c0       	push   0xc00282c8
c00147e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e7:	e8 28 c4 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00147ec:	0f 21 d8             	mov    eax,db3
c00147ef:	5f                   	pop    edi
c00147f0:	5d                   	pop    ebp
c00147f1:	50                   	push   eax
c00147f2:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00147f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fd:	e8 38 c4 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c0014802:	58                   	pop    eax
c0014803:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014808:	5a                   	pop    edx
c0014809:	68 d0 82 02 c0       	push   0xc00282d0
c001480e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014814:	e8 fb c3 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014819:	0f 21 f0             	mov    eax,db6
c001481c:	59                   	pop    ecx
c001481d:	5b                   	pop    ebx
c001481e:	50                   	push   eax
c001481f:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014824:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482a:	e8 0b c4 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c001482f:	5e                   	pop    esi
c0014830:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014835:	5f                   	pop    edi
c0014836:	68 d8 82 02 c0       	push   0xc00282d8
c001483b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014841:	e8 ce c3 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0014846:	0f 21 f8             	mov    eax,db7
c0014849:	5d                   	pop    ebp
c001484a:	5a                   	pop    edx
c001484b:	50                   	push   eax
c001484c:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0014851:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014857:	e8 de c3 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c001485c:	fa                   	cli    
c001485d:	f4                   	hlt    
c001485e:	83 c4 10             	add    esp,0x10
c0014861:	eb fe                	jmp    c0014861 <displayDebugInfo(regs*)+0x403>

c0014863 <x87EmulHandler(regs*, void*)>:
c0014863:	53                   	push   ebx
c0014864:	83 ec 14             	sub    esp,0x14
c0014867:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001486b:	53                   	push   ebx
c001486c:	e8 4a 92 00 00       	call   c001dabb <Vm::x87Handler(regs*)>
c0014871:	83 c4 10             	add    esp,0x10
c0014874:	84 c0                	test   al,al
c0014876:	74 05                	je     c001487d <x87EmulHandler(regs*, void*)+0x1a>
c0014878:	83 c4 08             	add    esp,0x8
c001487b:	5b                   	pop    ebx
c001487c:	c3                   	ret    
c001487d:	83 ec 0c             	sub    esp,0xc
c0014880:	68 e0 82 02 c0       	push   0xc00282e0
c0014885:	e8 a9 dd ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001488a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001488d:	e8 cc fb ff ff       	call   c001445e <displayDebugInfo(regs*)>

c0014892 <gpFault(regs*, void*)>:
c0014892:	53                   	push   ebx
c0014893:	83 ec 14             	sub    esp,0x14
c0014896:	c7 05 50 b2 02 c0 2f d0 01 c0 	mov    DWORD PTR ds:0xc002b250,0xc001d02f
c00148a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148a4:	53                   	push   ebx
c00148a5:	e8 85 87 00 00       	call   c001d02f <Vm::faultHandler(regs*)>
c00148aa:	83 c4 10             	add    esp,0x10
c00148ad:	84 c0                	test   al,al
c00148af:	74 05                	je     c00148b6 <gpFault(regs*, void*)+0x24>
c00148b1:	83 c4 08             	add    esp,0x8
c00148b4:	5b                   	pop    ebx
c00148b5:	c3                   	ret    
c00148b6:	83 ec 0c             	sub    esp,0xc
c00148b9:	68 f6 82 02 c0       	push   0xc00282f6
c00148be:	e8 70 dd ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00148c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148c6:	e8 93 fb ff ff       	call   c001445e <displayDebugInfo(regs*)>

c00148cb <pgFault(regs*, void*)>:
c00148cb:	83 ec 18             	sub    esp,0x18
c00148ce:	68 11 83 02 c0       	push   0xc0028311
c00148d3:	e8 5b dd ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00148d8:	58                   	pop    eax
c00148d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148dd:	e8 7c fb ff ff       	call   c001445e <displayDebugInfo(regs*)>

c00148e2 <otherISRHandler(regs*, void*)>:
c00148e2:	53                   	push   ebx
c00148e3:	83 ec 0c             	sub    esp,0xc
c00148e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148ea:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00148ed:	50                   	push   eax
c00148ee:	50                   	push   eax
c00148ef:	68 1e 83 02 c0       	push   0xc002831e
c00148f4:	e8 3a dd ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00148f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148fc:	e8 5d fb ff ff       	call   c001445e <displayDebugInfo(regs*)>

c0014901 <opcodeFault(regs*, void*)>:
c0014901:	55                   	push   ebp
c0014902:	89 e5                	mov    ebp,esp
c0014904:	56                   	push   esi
c0014905:	53                   	push   ebx
c0014906:	83 ec 40             	sub    esp,0x40
c0014909:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001490e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014914:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001491a:	84 c0                	test   al,al
c001491c:	74 24                	je     c0014942 <opcodeFault(regs*, void*)+0x41>
c001491e:	83 ec 0c             	sub    esp,0xc
c0014921:	68 3c 83 02 c0       	push   0xc002833c
c0014926:	e8 08 dd ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001492b:	83 c4 10             	add    esp,0x10
c001492e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014931:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014934:	8d 50 19             	lea    edx,[eax+0x19]
c0014937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001493a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001493d:	e9 77 05 00 00       	jmp    c0014eb9 <opcodeFault(regs*, void*)+0x5b8>
c0014942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014945:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014948:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001494b:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001494f:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014956:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014959:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001495c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001495f:	8a 00                	mov    al,BYTE PTR [eax]
c0014961:	3c f0                	cmp    al,0xf0
c0014963:	75 17                	jne    c001497c <opcodeFault(regs*, void*)+0x7b>
c0014965:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001496b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001496e:	8d 50 01             	lea    edx,[eax+0x1]
c0014971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014974:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014977:	e9 da 00 00 00       	jmp    c0014a56 <opcodeFault(regs*, void*)+0x155>
c001497c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001497f:	8a 00                	mov    al,BYTE PTR [eax]
c0014981:	3c f2                	cmp    al,0xf2
c0014983:	74 09                	je     c001498e <opcodeFault(regs*, void*)+0x8d>
c0014985:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014988:	8a 00                	mov    al,BYTE PTR [eax]
c001498a:	3c f3                	cmp    al,0xf3
c001498c:	75 1b                	jne    c00149a9 <opcodeFault(regs*, void*)+0xa8>
c001498e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014992:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014998:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001499b:	8d 50 01             	lea    edx,[eax+0x1]
c001499e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149a4:	e9 ad 00 00 00       	jmp    c0014a56 <opcodeFault(regs*, void*)+0x155>
c00149a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149ac:	8a 00                	mov    al,BYTE PTR [eax]
c00149ae:	3c 66                	cmp    al,0x66
c00149b0:	75 1f                	jne    c00149d1 <opcodeFault(regs*, void*)+0xd0>
c00149b2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149b6:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00149ba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149c3:	8d 50 01             	lea    edx,[eax+0x1]
c00149c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149cc:	e9 85 00 00 00       	jmp    c0014a56 <opcodeFault(regs*, void*)+0x155>
c00149d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149d4:	8a 00                	mov    al,BYTE PTR [eax]
c00149d6:	3c 67                	cmp    al,0x67
c00149d8:	75 18                	jne    c00149f2 <opcodeFault(regs*, void*)+0xf1>
c00149da:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149e7:	8d 50 01             	lea    edx,[eax+0x1]
c00149ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149f0:	eb 64                	jmp    c0014a56 <opcodeFault(regs*, void*)+0x155>
c00149f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149f5:	8a 00                	mov    al,BYTE PTR [eax]
c00149f7:	3c 2e                	cmp    al,0x2e
c00149f9:	74 09                	je     c0014a04 <opcodeFault(regs*, void*)+0x103>
c00149fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149fe:	8a 00                	mov    al,BYTE PTR [eax]
c0014a00:	3c 3e                	cmp    al,0x3e
c0014a02:	75 18                	jne    c0014a1c <opcodeFault(regs*, void*)+0x11b>
c0014a04:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a08:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a11:	8d 50 01             	lea    edx,[eax+0x1]
c0014a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a17:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a1a:	eb 3a                	jmp    c0014a56 <opcodeFault(regs*, void*)+0x155>
c0014a1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a1f:	8a 00                	mov    al,BYTE PTR [eax]
c0014a21:	3c 36                	cmp    al,0x36
c0014a23:	74 1b                	je     c0014a40 <opcodeFault(regs*, void*)+0x13f>
c0014a25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a28:	8a 00                	mov    al,BYTE PTR [eax]
c0014a2a:	3c 26                	cmp    al,0x26
c0014a2c:	74 12                	je     c0014a40 <opcodeFault(regs*, void*)+0x13f>
c0014a2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a31:	8a 00                	mov    al,BYTE PTR [eax]
c0014a33:	3c 64                	cmp    al,0x64
c0014a35:	74 09                	je     c0014a40 <opcodeFault(regs*, void*)+0x13f>
c0014a37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a3c:	3c 65                	cmp    al,0x65
c0014a3e:	75 16                	jne    c0014a56 <opcodeFault(regs*, void*)+0x155>
c0014a40:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a44:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a4d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a53:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a59:	8a 00                	mov    al,BYTE PTR [eax]
c0014a5b:	3c 0f                	cmp    al,0xf
c0014a5d:	0f 85 ad 00 00 00    	jne    c0014b10 <opcodeFault(regs*, void*)+0x20f>
c0014a63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a66:	40                   	inc    eax
c0014a67:	8a 00                	mov    al,BYTE PTR [eax]
c0014a69:	3c c2                	cmp    al,0xc2
c0014a6b:	74 0e                	je     c0014a7b <opcodeFault(regs*, void*)+0x17a>
c0014a6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a70:	40                   	inc    eax
c0014a71:	8a 00                	mov    al,BYTE PTR [eax]
c0014a73:	3c c3                	cmp    al,0xc3
c0014a75:	0f 85 95 00 00 00    	jne    c0014b10 <opcodeFault(regs*, void*)+0x20f>
c0014a7b:	83 ec 0c             	sub    esp,0xc
c0014a7e:	68 5f 83 02 c0       	push   0xc002835f
c0014a83:	e8 ab db ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014a88:	83 c4 10             	add    esp,0x10
c0014a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a91:	8d 50 01             	lea    edx,[eax+0x1]
c0014a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a97:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a9a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa0:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa2:	8d 50 fe             	lea    edx,[eax-0x2]
c0014aa5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa8:	88 10                	mov    BYTE PTR [eax],dl
c0014aaa:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014aad:	50                   	push   eax
c0014aae:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ab1:	50                   	push   eax
c0014ab2:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ab5:	50                   	push   eax
c0014ab6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ab9:	e8 de 43 00 00       	call   c0018e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014abe:	83 c4 10             	add    esp,0x10
c0014ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ac7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014aca:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014acd:	01 d0                	add    eax,edx
c0014acf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad8:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014adb:	48                   	dec    eax
c0014adc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ae5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aeb:	83 ec 04             	sub    esp,0x4
c0014aee:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014af1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014af4:	50                   	push   eax
c0014af5:	e8 6f b6 fe ff       	call   c0000169 <voodooXADD>
c0014afa:	83 c4 10             	add    esp,0x10
c0014afd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b03:	01 c2                	add    edx,eax
c0014b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b08:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b0b:	e9 a9 03 00 00       	jmp    c0014eb9 <opcodeFault(regs*, void*)+0x5b8>
c0014b10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b13:	8a 00                	mov    al,BYTE PTR [eax]
c0014b15:	3c 0f                	cmp    al,0xf
c0014b17:	0f 85 8b 01 00 00    	jne    c0014ca8 <opcodeFault(regs*, void*)+0x3a7>
c0014b1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b20:	40                   	inc    eax
c0014b21:	8a 00                	mov    al,BYTE PTR [eax]
c0014b23:	3c c7                	cmp    al,0xc7
c0014b25:	0f 86 7d 01 00 00    	jbe    c0014ca8 <opcodeFault(regs*, void*)+0x3a7>
c0014b2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b2e:	40                   	inc    eax
c0014b2f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b31:	3c cf                	cmp    al,0xcf
c0014b33:	0f 87 6f 01 00 00    	ja     c0014ca8 <opcodeFault(regs*, void*)+0x3a7>
c0014b39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3c:	40                   	inc    eax
c0014b3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3f:	83 c0 38             	add    eax,0x38
c0014b42:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b45:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b49:	75 0b                	jne    c0014b56 <opcodeFault(regs*, void*)+0x255>
c0014b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014b51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b54:	eb 75                	jmp    c0014bcb <opcodeFault(regs*, void*)+0x2ca>
c0014b56:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014b5a:	75 0b                	jne    c0014b67 <opcodeFault(regs*, void*)+0x266>
c0014b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014b62:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b65:	eb 64                	jmp    c0014bcb <opcodeFault(regs*, void*)+0x2ca>
c0014b67:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014b6b:	75 0b                	jne    c0014b78 <opcodeFault(regs*, void*)+0x277>
c0014b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b70:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014b73:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b76:	eb 53                	jmp    c0014bcb <opcodeFault(regs*, void*)+0x2ca>
c0014b78:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014b7c:	75 0b                	jne    c0014b89 <opcodeFault(regs*, void*)+0x288>
c0014b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b81:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014b84:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b87:	eb 42                	jmp    c0014bcb <opcodeFault(regs*, void*)+0x2ca>
c0014b89:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014b8d:	75 0b                	jne    c0014b9a <opcodeFault(regs*, void*)+0x299>
c0014b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b92:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014b95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b98:	eb 31                	jmp    c0014bcb <opcodeFault(regs*, void*)+0x2ca>
c0014b9a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014b9e:	75 0b                	jne    c0014bab <opcodeFault(regs*, void*)+0x2aa>
c0014ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ba6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ba9:	eb 20                	jmp    c0014bcb <opcodeFault(regs*, void*)+0x2ca>
c0014bab:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014baf:	75 0b                	jne    c0014bbc <opcodeFault(regs*, void*)+0x2bb>
c0014bb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014bb7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bba:	eb 0f                	jmp    c0014bcb <opcodeFault(regs*, void*)+0x2ca>
c0014bbc:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014bc0:	75 09                	jne    c0014bcb <opcodeFault(regs*, void*)+0x2ca>
c0014bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014bc8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bcb:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014bcf:	74 10                	je     c0014be1 <opcodeFault(regs*, void*)+0x2e0>
c0014bd1:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014bd8:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014bdf:	eb 2d                	jmp    c0014c0e <opcodeFault(regs*, void*)+0x30d>
c0014be1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014be4:	c1 e0 18             	shl    eax,0x18
c0014be7:	89 c2                	mov    edx,eax
c0014be9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bec:	c1 e0 08             	shl    eax,0x8
c0014bef:	25 00 00 ff 00       	and    eax,0xff0000
c0014bf4:	09 c2                	or     edx,eax
c0014bf6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bf9:	c1 e8 08             	shr    eax,0x8
c0014bfc:	25 00 ff 00 00       	and    eax,0xff00
c0014c01:	09 c2                	or     edx,eax
c0014c03:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c06:	c1 e8 18             	shr    eax,0x18
c0014c09:	09 d0                	or     eax,edx
c0014c0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c0e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c12:	75 0b                	jne    c0014c1f <opcodeFault(regs*, void*)+0x31e>
c0014c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c17:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c1a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c1d:	eb 75                	jmp    c0014c94 <opcodeFault(regs*, void*)+0x393>
c0014c1f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c23:	75 0b                	jne    c0014c30 <opcodeFault(regs*, void*)+0x32f>
c0014c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c28:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c2b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c2e:	eb 64                	jmp    c0014c94 <opcodeFault(regs*, void*)+0x393>
c0014c30:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c34:	75 0b                	jne    c0014c41 <opcodeFault(regs*, void*)+0x340>
c0014c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c39:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c3c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c3f:	eb 53                	jmp    c0014c94 <opcodeFault(regs*, void*)+0x393>
c0014c41:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c45:	75 0b                	jne    c0014c52 <opcodeFault(regs*, void*)+0x351>
c0014c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c4d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014c50:	eb 42                	jmp    c0014c94 <opcodeFault(regs*, void*)+0x393>
c0014c52:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c56:	75 0b                	jne    c0014c63 <opcodeFault(regs*, void*)+0x362>
c0014c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c5e:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014c61:	eb 31                	jmp    c0014c94 <opcodeFault(regs*, void*)+0x393>
c0014c63:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c67:	75 0b                	jne    c0014c74 <opcodeFault(regs*, void*)+0x373>
c0014c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c6f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014c72:	eb 20                	jmp    c0014c94 <opcodeFault(regs*, void*)+0x393>
c0014c74:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c78:	75 0b                	jne    c0014c85 <opcodeFault(regs*, void*)+0x384>
c0014c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c80:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014c83:	eb 0f                	jmp    c0014c94 <opcodeFault(regs*, void*)+0x393>
c0014c85:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c89:	75 09                	jne    c0014c94 <opcodeFault(regs*, void*)+0x393>
c0014c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c91:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9a:	8d 50 02             	lea    edx,[eax+0x2]
c0014c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ca3:	e9 11 02 00 00       	jmp    c0014eb9 <opcodeFault(regs*, void*)+0x5b8>
c0014ca8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cab:	8a 00                	mov    al,BYTE PTR [eax]
c0014cad:	3c 0f                	cmp    al,0xf
c0014caf:	0f 85 76 01 00 00    	jne    c0014e2b <opcodeFault(regs*, void*)+0x52a>
c0014cb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb8:	40                   	inc    eax
c0014cb9:	8a 00                	mov    al,BYTE PTR [eax]
c0014cbb:	3c c7                	cmp    al,0xc7
c0014cbd:	0f 85 68 01 00 00    	jne    c0014e2b <opcodeFault(regs*, void*)+0x52a>
c0014cc3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ccc:	8d 50 01             	lea    edx,[eax+0x1]
c0014ccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd5:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014cd8:	50                   	push   eax
c0014cd9:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014cdc:	50                   	push   eax
c0014cdd:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ce0:	50                   	push   eax
c0014ce1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ce4:	e8 b3 41 00 00       	call   c0018e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014cef:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014cf2:	83 f0 01             	xor    eax,0x1
c0014cf5:	84 c0                	test   al,al
c0014cf7:	0f 84 2e 01 00 00    	je     c0014e2b <opcodeFault(regs*, void*)+0x52a>
c0014cfd:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d00:	3c 01                	cmp    al,0x1
c0014d02:	0f 85 23 01 00 00    	jne    c0014e2b <opcodeFault(regs*, void*)+0x52a>
c0014d08:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d0b:	83 f0 01             	xor    eax,0x1
c0014d0e:	84 c0                	test   al,al
c0014d10:	0f 84 15 01 00 00    	je     c0014e2b <opcodeFault(regs*, void*)+0x52a>
c0014d16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d19:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d1c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d1f:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d26:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d29:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d2c:	89 c2                	mov    edx,eax
c0014d2e:	b8 00 00 00 00       	mov    eax,0x0
c0014d33:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d36:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d3f:	ba 00 00 00 00       	mov    edx,0x0
c0014d44:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d47:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d50:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d53:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014d5a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014d5d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014d60:	89 c2                	mov    edx,eax
c0014d62:	b8 00 00 00 00       	mov    eax,0x0
c0014d67:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d6a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d73:	ba 00 00 00 00       	mov    edx,0x0
c0014d78:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014d7b:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014d7e:	e8 5a 73 00 00       	call   c001c0dd <lockScheduler()>
c0014d83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014d86:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8b:	89 c1                	mov    ecx,eax
c0014d8d:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014d90:	89 cb                	mov    ebx,ecx
c0014d92:	89 d0                	mov    eax,edx
c0014d94:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014d97:	89 c6                	mov    esi,eax
c0014d99:	89 f0                	mov    eax,esi
c0014d9b:	09 d8                	or     eax,ebx
c0014d9d:	85 c0                	test   eax,eax
c0014d9f:	75 21                	jne    c0014dc2 <opcodeFault(regs*, void*)+0x4c1>
c0014da1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014da4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014da7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014daa:	89 01                	mov    DWORD PTR [ecx],eax
c0014dac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014db5:	83 c8 40             	or     eax,0x40
c0014db8:	89 c2                	mov    edx,eax
c0014dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014dc0:	eb 3e                	jmp    c0014e00 <opcodeFault(regs*, void*)+0x4ff>
c0014dc2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dc5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dca:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014dcd:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014dd0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014dd9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ddc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014ddf:	89 d0                	mov    eax,edx
c0014de1:	31 d2                	xor    edx,edx
c0014de3:	89 c3                	mov    ebx,eax
c0014de5:	89 d6                	mov    esi,edx
c0014de7:	89 da                	mov    edx,ebx
c0014de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dec:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014df5:	83 e0 bf             	and    eax,0xffffffbf
c0014df8:	89 c2                	mov    edx,eax
c0014dfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e00:	e8 da 72 00 00       	call   c001c0df <unlockScheduler()>
c0014e05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e08:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e0b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e0e:	01 c2                	add    edx,eax
c0014e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e13:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e16:	83 ec 0c             	sub    esp,0xc
c0014e19:	68 6e 83 02 c0       	push   0xc002836e
c0014e1e:	e8 10 d8 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	e9 8e 00 00 00       	jmp    c0014eb9 <opcodeFault(regs*, void*)+0x5b8>
c0014e2b:	83 ec 0c             	sub    esp,0xc
c0014e2e:	68 81 83 02 c0       	push   0xc0028381
c0014e33:	e8 fb d7 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e47:	c1 e0 04             	shl    eax,0x4
c0014e4a:	01 d0                	add    eax,edx
c0014e4c:	83 c0 03             	add    eax,0x3
c0014e4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e51:	0f b6 d8             	movzx  ebx,al
c0014e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e57:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e60:	c1 e0 04             	shl    eax,0x4
c0014e63:	01 d0                	add    eax,edx
c0014e65:	83 c0 02             	add    eax,0x2
c0014e68:	8a 00                	mov    al,BYTE PTR [eax]
c0014e6a:	0f b6 c8             	movzx  ecx,al
c0014e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e70:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e79:	c1 e0 04             	shl    eax,0x4
c0014e7c:	01 d0                	add    eax,edx
c0014e7e:	40                   	inc    eax
c0014e7f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e81:	0f b6 d0             	movzx  edx,al
c0014e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e87:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e90:	c1 e0 04             	shl    eax,0x4
c0014e93:	01 f0                	add    eax,esi
c0014e95:	8a 00                	mov    al,BYTE PTR [eax]
c0014e97:	0f b6 c0             	movzx  eax,al
c0014e9a:	83 ec 0c             	sub    esp,0xc
c0014e9d:	53                   	push   ebx
c0014e9e:	51                   	push   ecx
c0014e9f:	52                   	push   edx
c0014ea0:	50                   	push   eax
c0014ea1:	68 94 83 02 c0       	push   0xc0028394
c0014ea6:	e8 88 d7 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0014eab:	83 c4 20             	add    esp,0x20
c0014eae:	83 ec 0c             	sub    esp,0xc
c0014eb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014eb4:	e8 a5 f5 ff ff       	call   c001445e <displayDebugInfo(regs*)>
c0014eb9:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014ebc:	5b                   	pop    ebx
c0014ebd:	5e                   	pop    esi
c0014ebe:	5d                   	pop    ebp
c0014ebf:	c3                   	ret    

c0014ec0 <displayProgramFault(char const*)>:
c0014ec0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ec5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ec8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ece:	85 c0                	test   eax,eax
c0014ed0:	74 15                	je     c0014ee7 <displayProgramFault(char const*)+0x27>
c0014ed2:	83 ec 0c             	sub    esp,0xc
c0014ed5:	6a 04                	push   0x4
c0014ed7:	6a 0f                	push   0xf
c0014ed9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014edd:	50                   	push   eax
c0014ede:	e8 f3 b9 ff ff       	call   c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014ee3:	83 c4 1c             	add    esp,0x1c
c0014ee6:	c3                   	ret    
c0014ee7:	c3                   	ret    

c0014ee8 <setupInterruptController()>:
c0014ee8:	55                   	push   ebp
c0014ee9:	89 e5                	mov    ebp,esp
c0014eeb:	53                   	push   ebx
c0014eec:	83 ec 24             	sub    esp,0x24
c0014eef:	b8 00 00 00 00       	mov    eax,0x0
c0014ef4:	85 c0                	test   eax,eax
c0014ef6:	0f 95 c0             	setne  al
c0014ef9:	84 c0                	test   al,al
c0014efb:	74 5b                	je     c0014f58 <setupInterruptController()+0x70>
c0014efd:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f04:	83 ec 0c             	sub    esp,0xc
c0014f07:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f0a:	e8 b1 a5 ff ff       	call   c000f4c0 <malloc>
c0014f0f:	83 c4 10             	add    esp,0x10
c0014f12:	89 c3                	mov    ebx,eax
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	53                   	push   ebx
c0014f18:	e8 89 df 00 00       	call   c0022ea6 <APIC::APIC()>
c0014f1d:	83 c4 10             	add    esp,0x10
c0014f20:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f23:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f29:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f2b:	83 c0 08             	add    eax,0x8
c0014f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f30:	6a 00                	push   0x0
c0014f32:	6a 00                	push   0x0
c0014f34:	6a 00                	push   0x0
c0014f36:	52                   	push   edx
c0014f37:	ff d0                	call   eax
c0014f39:	83 c4 10             	add    esp,0x10
c0014f3c:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0014f41:	83 ec 08             	sub    esp,0x8
c0014f44:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014f47:	50                   	push   eax
c0014f48:	e8 d5 ea ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0014f4d:	83 c4 10             	add    esp,0x10
c0014f50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f53:	e9 52 03 00 00       	jmp    c00152aa <setupInterruptController()+0x3c2>
c0014f58:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0014f5d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014f63:	83 e0 01             	and    eax,0x1
c0014f66:	84 c0                	test   al,al
c0014f68:	0f 95 c0             	setne  al
c0014f6b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014f6e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014f75:	83 ec 0c             	sub    esp,0xc
c0014f78:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014f7b:	e8 40 a5 ff ff       	call   c000f4c0 <malloc>
c0014f80:	83 c4 10             	add    esp,0x10
c0014f83:	89 c3                	mov    ebx,eax
c0014f85:	83 ec 0c             	sub    esp,0xc
c0014f88:	53                   	push   ebx
c0014f89:	e8 70 e4 00 00       	call   c00233fe <PIC::PIC()>
c0014f8e:	83 c4 10             	add    esp,0x10
c0014f91:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014f94:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014f97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f9c:	83 c0 08             	add    eax,0x8
c0014f9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fa1:	6a 00                	push   0x0
c0014fa3:	6a 00                	push   0x0
c0014fa5:	6a 00                	push   0x0
c0014fa7:	52                   	push   edx
c0014fa8:	ff d0                	call   eax
c0014faa:	83 c4 10             	add    esp,0x10
c0014fad:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014fb1:	74 73                	je     c0015026 <setupInterruptController()+0x13e>
c0014fb3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014fb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fbb:	83 c0 0c             	add    eax,0xc
c0014fbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc0:	6a 00                	push   0x0
c0014fc2:	6a 00                	push   0x0
c0014fc4:	6a 00                	push   0x0
c0014fc6:	52                   	push   edx
c0014fc7:	ff d0                	call   eax
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fd0:	74 15                	je     c0014fe7 <setupInterruptController()+0xff>
c0014fd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fd7:	83 c0 04             	add    eax,0x4
c0014fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fdc:	83 ec 0c             	sub    esp,0xc
c0014fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014fe2:	ff d0                	call   eax
c0014fe4:	83 c4 10             	add    esp,0x10
c0014fe7:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0014fee:	83 ec 0c             	sub    esp,0xc
c0014ff1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ff4:	e8 c7 a4 ff ff       	call   c000f4c0 <malloc>
c0014ff9:	83 c4 10             	add    esp,0x10
c0014ffc:	89 c3                	mov    ebx,eax
c0014ffe:	83 ec 0c             	sub    esp,0xc
c0015001:	53                   	push   ebx
c0015002:	e8 9f de 00 00       	call   c0022ea6 <APIC::APIC()>
c0015007:	83 c4 10             	add    esp,0x10
c001500a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001500d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015013:	8b 00                	mov    eax,DWORD PTR [eax]
c0015015:	83 c0 08             	add    eax,0x8
c0015018:	8b 00                	mov    eax,DWORD PTR [eax]
c001501a:	6a 00                	push   0x0
c001501c:	6a 00                	push   0x0
c001501e:	6a 00                	push   0x0
c0015020:	52                   	push   edx
c0015021:	ff d0                	call   eax
c0015023:	83 c4 10             	add    esp,0x10
c0015026:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001502b:	83 ec 08             	sub    esp,0x8
c001502e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015031:	50                   	push   eax
c0015032:	e8 eb e9 ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0015037:	83 c4 10             	add    esp,0x10
c001503a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001503d:	8b 00                	mov    eax,DWORD PTR [eax]
c001503f:	83 c0 24             	add    eax,0x24
c0015042:	8b 00                	mov    eax,DWORD PTR [eax]
c0015044:	6a 00                	push   0x0
c0015046:	68 e2 48 01 c0       	push   0xc00148e2
c001504b:	6a 00                	push   0x0
c001504d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015050:	ff d0                	call   eax
c0015052:	83 c4 10             	add    esp,0x10
c0015055:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015058:	8b 00                	mov    eax,DWORD PTR [eax]
c001505a:	83 c0 24             	add    eax,0x24
c001505d:	8b 00                	mov    eax,DWORD PTR [eax]
c001505f:	6a 00                	push   0x0
c0015061:	68 e2 48 01 c0       	push   0xc00148e2
c0015066:	6a 01                	push   0x1
c0015068:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001506b:	ff d0                	call   eax
c001506d:	83 c4 10             	add    esp,0x10
c0015070:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015073:	8b 00                	mov    eax,DWORD PTR [eax]
c0015075:	83 c0 24             	add    eax,0x24
c0015078:	8b 00                	mov    eax,DWORD PTR [eax]
c001507a:	6a 00                	push   0x0
c001507c:	68 bb 42 01 c0       	push   0xc00142bb
c0015081:	6a 02                	push   0x2
c0015083:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015086:	ff d0                	call   eax
c0015088:	83 c4 10             	add    esp,0x10
c001508b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001508e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015090:	83 c0 24             	add    eax,0x24
c0015093:	8b 00                	mov    eax,DWORD PTR [eax]
c0015095:	6a 00                	push   0x0
c0015097:	68 e2 48 01 c0       	push   0xc00148e2
c001509c:	6a 03                	push   0x3
c001509e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150a1:	ff d0                	call   eax
c00150a3:	83 c4 10             	add    esp,0x10
c00150a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ab:	83 c0 24             	add    eax,0x24
c00150ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b0:	6a 00                	push   0x0
c00150b2:	68 e2 48 01 c0       	push   0xc00148e2
c00150b7:	6a 04                	push   0x4
c00150b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150bc:	ff d0                	call   eax
c00150be:	83 c4 10             	add    esp,0x10
c00150c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c6:	83 c0 24             	add    eax,0x24
c00150c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cb:	6a 00                	push   0x0
c00150cd:	68 e2 48 01 c0       	push   0xc00148e2
c00150d2:	6a 05                	push   0x5
c00150d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150d7:	ff d0                	call   eax
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150df:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e1:	83 c0 24             	add    eax,0x24
c00150e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e6:	6a 00                	push   0x0
c00150e8:	68 01 49 01 c0       	push   0xc0014901
c00150ed:	6a 06                	push   0x6
c00150ef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150f2:	ff d0                	call   eax
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fc:	83 c0 24             	add    eax,0x24
c00150ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015101:	6a 00                	push   0x0
c0015103:	68 63 48 01 c0       	push   0xc0014863
c0015108:	6a 07                	push   0x7
c001510a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001510d:	ff d0                	call   eax
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015115:	8b 00                	mov    eax,DWORD PTR [eax]
c0015117:	83 c0 24             	add    eax,0x24
c001511a:	8b 00                	mov    eax,DWORD PTR [eax]
c001511c:	6a 00                	push   0x0
c001511e:	68 d6 40 01 c0       	push   0xc00140d6
c0015123:	6a 08                	push   0x8
c0015125:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015128:	ff d0                	call   eax
c001512a:	83 c4 10             	add    esp,0x10
c001512d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015130:	8b 00                	mov    eax,DWORD PTR [eax]
c0015132:	83 c0 24             	add    eax,0x24
c0015135:	8b 00                	mov    eax,DWORD PTR [eax]
c0015137:	6a 00                	push   0x0
c0015139:	68 e2 48 01 c0       	push   0xc00148e2
c001513e:	6a 09                	push   0x9
c0015140:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015143:	ff d0                	call   eax
c0015145:	83 c4 10             	add    esp,0x10
c0015148:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514b:	8b 00                	mov    eax,DWORD PTR [eax]
c001514d:	83 c0 24             	add    eax,0x24
c0015150:	8b 00                	mov    eax,DWORD PTR [eax]
c0015152:	6a 00                	push   0x0
c0015154:	68 e2 48 01 c0       	push   0xc00148e2
c0015159:	6a 0a                	push   0xa
c001515b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001515e:	ff d0                	call   eax
c0015160:	83 c4 10             	add    esp,0x10
c0015163:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015166:	8b 00                	mov    eax,DWORD PTR [eax]
c0015168:	83 c0 24             	add    eax,0x24
c001516b:	8b 00                	mov    eax,DWORD PTR [eax]
c001516d:	6a 00                	push   0x0
c001516f:	68 e2 48 01 c0       	push   0xc00148e2
c0015174:	6a 0b                	push   0xb
c0015176:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015179:	ff d0                	call   eax
c001517b:	83 c4 10             	add    esp,0x10
c001517e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015181:	8b 00                	mov    eax,DWORD PTR [eax]
c0015183:	83 c0 24             	add    eax,0x24
c0015186:	8b 00                	mov    eax,DWORD PTR [eax]
c0015188:	6a 00                	push   0x0
c001518a:	68 e2 48 01 c0       	push   0xc00148e2
c001518f:	6a 0c                	push   0xc
c0015191:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015194:	ff d0                	call   eax
c0015196:	83 c4 10             	add    esp,0x10
c0015199:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519c:	8b 00                	mov    eax,DWORD PTR [eax]
c001519e:	83 c0 24             	add    eax,0x24
c00151a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a3:	6a 00                	push   0x0
c00151a5:	68 92 48 01 c0       	push   0xc0014892
c00151aa:	6a 0d                	push   0xd
c00151ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151af:	ff d0                	call   eax
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b9:	83 c0 24             	add    eax,0x24
c00151bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151be:	6a 00                	push   0x0
c00151c0:	68 cb 48 01 c0       	push   0xc00148cb
c00151c5:	6a 0e                	push   0xe
c00151c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ca:	ff d0                	call   eax
c00151cc:	83 c4 10             	add    esp,0x10
c00151cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d4:	83 c0 24             	add    eax,0x24
c00151d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d9:	6a 00                	push   0x0
c00151db:	68 e2 48 01 c0       	push   0xc00148e2
c00151e0:	6a 0f                	push   0xf
c00151e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e5:	ff d0                	call   eax
c00151e7:	83 c4 10             	add    esp,0x10
c00151ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ef:	83 c0 24             	add    eax,0x24
c00151f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f4:	6a 00                	push   0x0
c00151f6:	68 e2 48 01 c0       	push   0xc00148e2
c00151fb:	6a 10                	push   0x10
c00151fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015200:	ff d0                	call   eax
c0015202:	83 c4 10             	add    esp,0x10
c0015205:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015208:	8b 00                	mov    eax,DWORD PTR [eax]
c001520a:	83 c0 24             	add    eax,0x24
c001520d:	8b 00                	mov    eax,DWORD PTR [eax]
c001520f:	6a 00                	push   0x0
c0015211:	68 e2 48 01 c0       	push   0xc00148e2
c0015216:	6a 11                	push   0x11
c0015218:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521b:	ff d0                	call   eax
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015223:	8b 00                	mov    eax,DWORD PTR [eax]
c0015225:	83 c0 24             	add    eax,0x24
c0015228:	8b 00                	mov    eax,DWORD PTR [eax]
c001522a:	6a 00                	push   0x0
c001522c:	68 e2 48 01 c0       	push   0xc00148e2
c0015231:	6a 12                	push   0x12
c0015233:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015236:	ff d0                	call   eax
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015240:	83 c0 24             	add    eax,0x24
c0015243:	8b 00                	mov    eax,DWORD PTR [eax]
c0015245:	6a 00                	push   0x0
c0015247:	68 e2 48 01 c0       	push   0xc00148e2
c001524c:	6a 13                	push   0x13
c001524e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015251:	ff d0                	call   eax
c0015253:	83 c4 10             	add    esp,0x10
c0015256:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015259:	8b 00                	mov    eax,DWORD PTR [eax]
c001525b:	83 c0 24             	add    eax,0x24
c001525e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015260:	6a 00                	push   0x0
c0015262:	68 e2 48 01 c0       	push   0xc00148e2
c0015267:	6a 14                	push   0x14
c0015269:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526c:	ff d0                	call   eax
c001526e:	83 c4 10             	add    esp,0x10
c0015271:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015274:	8b 00                	mov    eax,DWORD PTR [eax]
c0015276:	83 c0 24             	add    eax,0x24
c0015279:	8b 00                	mov    eax,DWORD PTR [eax]
c001527b:	6a 00                	push   0x0
c001527d:	68 e2 48 01 c0       	push   0xc00148e2
c0015282:	6a 1e                	push   0x1e
c0015284:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015287:	ff d0                	call   eax
c0015289:	83 c4 10             	add    esp,0x10
c001528c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015291:	83 c0 24             	add    eax,0x24
c0015294:	8b 00                	mov    eax,DWORD PTR [eax]
c0015296:	6a 00                	push   0x0
c0015298:	68 aa aa 01 c0       	push   0xc001aaaa
c001529d:	6a 60                	push   0x60
c001529f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a2:	ff d0                	call   eax
c00152a4:	83 c4 10             	add    esp,0x10
c00152a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00152ad:	c9                   	leave  
c00152ae:	c3                   	ret    
c00152af:	90                   	nop

c00152b0 <InterruptController::convertLegacyIRQNumber(int)>:
c00152b0:	55                   	push   ebp
c00152b1:	89 e5                	mov    ebp,esp
c00152b3:	83 ec 08             	sub    esp,0x8
c00152b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b9:	83 ec 0c             	sub    esp,0xc
c00152bc:	50                   	push   eax
c00152bd:	e8 4c ea ff ff       	call   c0013d0e <Device::getName()>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	8a 00                	mov    al,BYTE PTR [eax]
c00152c7:	3c 41                	cmp    al,0x41
c00152c9:	0f 94 c0             	sete   al
c00152cc:	84 c0                	test   al,al
c00152ce:	74 28                	je     c00152f8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00152d0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00152d4:	7f 12                	jg     c00152e8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00152d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00152d9:	05 a0 a3 02 c0       	add    eax,0xc002a3a0
c00152de:	8a 00                	mov    al,BYTE PTR [eax]
c00152e0:	0f b6 c0             	movzx  eax,al
c00152e3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00152e6:	eb 10                	jmp    c00152f8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00152e8:	83 ec 0c             	sub    esp,0xc
c00152eb:	68 14 81 02 c0       	push   0xc0028114
c00152f0:	e8 a2 3d 00 00       	call   c0019097 <Krnl::panic(char const*)>
c00152f5:	83 c4 10             	add    esp,0x10
c00152f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00152fb:	c9                   	leave  
c00152fc:	c3                   	ret    
c00152fd:	90                   	nop

c00152fe <startGUI(void*)>:
c00152fe:	55                   	push   ebp
c00152ff:	89 e5                	mov    ebp,esp
c0015301:	53                   	push   ebx
c0015302:	83 ec 04             	sub    esp,0x4
c0015305:	e8 d5 6d 00 00       	call   c001c0df <unlockScheduler()>
c001530a:	e8 b9 6d 00 00       	call   c001c0c8 <getIRQNestingLevel()>
c001530f:	83 ec 08             	sub    esp,0x8
c0015312:	50                   	push   eax
c0015313:	68 fc 83 02 c0       	push   0xc00283fc
c0015318:	e8 16 d3 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001531d:	83 c4 10             	add    esp,0x10
c0015320:	8b 1d c8 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0c8
c0015326:	83 ec 08             	sub    esp,0x8
c0015329:	6a 01                	push   0x1
c001532b:	68 16 84 02 c0       	push   0xc0028416
c0015330:	e8 6c 67 00 00       	call   c001baa1 <Thr::loadDLL(char const*, bool)>
c0015335:	83 c4 10             	add    esp,0x10
c0015338:	83 ec 08             	sub    esp,0x8
c001533b:	53                   	push   ebx
c001533c:	50                   	push   eax
c001533d:	e8 6e 69 00 00       	call   c001bcb0 <Thr::executeDLL(unsigned long, void*)>
c0015342:	83 c4 10             	add    esp,0x10
c0015345:	8b 1d c8 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0c8
c001534b:	83 ec 08             	sub    esp,0x8
c001534e:	6a 01                	push   0x1
c0015350:	68 30 84 02 c0       	push   0xc0028430
c0015355:	e8 47 67 00 00       	call   c001baa1 <Thr::loadDLL(char const*, bool)>
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	83 ec 08             	sub    esp,0x8
c0015360:	53                   	push   ebx
c0015361:	50                   	push   eax
c0015362:	e8 49 69 00 00       	call   c001bcb0 <Thr::executeDLL(unsigned long, void*)>
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	90                   	nop
c001536b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001536e:	c9                   	leave  
c001536f:	c3                   	ret    

c0015370 <sendKeyToTerminal(unsigned char)>:
c0015370:	55                   	push   ebp
c0015371:	89 e5                	mov    ebp,esp
c0015373:	83 ec 28             	sub    esp,0x28
c0015376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015379:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001537c:	a1 84 b1 02 c0       	mov    eax,ds:0xc002b184
c0015381:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015385:	83 ec 08             	sub    esp,0x8
c0015388:	52                   	push   edx
c0015389:	50                   	push   eax
c001538a:	e8 83 ba ff ff       	call   c0010e12 <VgaText::receiveKey(unsigned char)>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015396:	75 41                	jne    c00153d9 <sendKeyToTerminal(unsigned char)+0x69>
c0015398:	e8 67 6d 00 00       	call   c001c104 <lockStuff()>
c001539d:	a1 60 b2 02 c0       	mov    eax,ds:0xc002b260
c00153a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153a5:	c7 05 60 b2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b260,0x0
c00153af:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153b3:	74 1f                	je     c00153d4 <sendKeyToTerminal(unsigned char)+0x64>
c00153b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00153bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00153be:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153c4:	83 ec 0c             	sub    esp,0xc
c00153c7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00153ca:	e8 25 73 00 00       	call   c001c6f4 <unblockTask(ThreadControlBlock*)>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	eb db                	jmp    c00153af <sendKeyToTerminal(unsigned char)+0x3f>
c00153d4:	e8 c4 70 00 00       	call   c001c49d <unlockStuff()>
c00153d9:	90                   	nop
c00153da:	c9                   	leave  
c00153db:	c3                   	ret    

c00153dc <sendKeyboardToken(KeyboardToken)>:
c00153dc:	55                   	push   ebp
c00153dd:	89 e5                	mov    ebp,esp
c00153df:	83 ec 18             	sub    esp,0x18
c00153e2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00153e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e8:	0f b7 c0             	movzx  eax,ax
c00153eb:	83 f2 01             	xor    edx,0x1
c00153ee:	88 90 80 b2 02 c0    	mov    BYTE PTR [eax-0x3ffd4d80],dl
c00153f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f7:	66 3d 03 02          	cmp    ax,0x203
c00153fb:	75 07                	jne    c0015404 <sendKeyboardToken(KeyboardToken)+0x28>
c00153fd:	a0 80 b3 02 c0       	mov    al,ds:0xc002b380
c0015402:	84 c0                	test   al,al
c0015404:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015408:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001540b:	a0 88 b6 02 c0       	mov    al,ds:0xc002b688
c0015410:	38 c2                	cmp    dl,al
c0015412:	74 1c                	je     c0015430 <sendKeyboardToken(KeyboardToken)+0x54>
c0015414:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015417:	a2 88 b6 02 c0       	mov    ds:0xc002b688,al
c001541c:	a0 88 b6 02 c0       	mov    al,ds:0xc002b688
c0015421:	0f b6 c0             	movzx  eax,al
c0015424:	83 ec 0c             	sub    esp,0xc
c0015427:	50                   	push   eax
c0015428:	e8 53 ac ff ff       	call   c0010080 <setTerminalScrollLock(bool)>
c001542d:	83 c4 10             	add    esp,0x10
c0015430:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015433:	84 c0                	test   al,al
c0015435:	0f 84 ae 00 00 00    	je     c00154e9 <sendKeyboardToken(KeyboardToken)+0x10d>
c001543b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543e:	66 3d 10 03          	cmp    ax,0x310
c0015442:	75 06                	jne    c001544a <sendKeyboardToken(KeyboardToken)+0x6e>
c0015444:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001544a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544d:	66 3d 11 03          	cmp    ax,0x311
c0015451:	75 06                	jne    c0015459 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015453:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545c:	66 3d 12 03          	cmp    ax,0x312
c0015460:	75 06                	jne    c0015468 <sendKeyboardToken(KeyboardToken)+0x8c>
c0015462:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546b:	66 3d 13 03          	cmp    ax,0x313
c001546f:	75 06                	jne    c0015477 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015471:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547a:	66 3d 14 03          	cmp    ax,0x314
c001547e:	75 06                	jne    c0015486 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015480:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015489:	66 3d 15 03          	cmp    ax,0x315
c001548d:	75 06                	jne    c0015495 <sendKeyboardToken(KeyboardToken)+0xb9>
c001548f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015498:	66 3d 16 03          	cmp    ax,0x316
c001549c:	75 06                	jne    c00154a4 <sendKeyboardToken(KeyboardToken)+0xc8>
c001549e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	66 3d 17 03          	cmp    ax,0x317
c00154ab:	75 06                	jne    c00154b3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00154ad:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	66 3d 18 03          	cmp    ax,0x318
c00154ba:	75 06                	jne    c00154c2 <sendKeyboardToken(KeyboardToken)+0xe6>
c00154bc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00154c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c5:	66 3d 19 03          	cmp    ax,0x319
c00154c9:	75 06                	jne    c00154d1 <sendKeyboardToken(KeyboardToken)+0xf5>
c00154cb:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00154d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d4:	66 3d 1a 03          	cmp    ax,0x31a
c00154d8:	0f 85 c9 00 00 00    	jne    c00155a7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00154de:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00154e4:	e9 be 00 00 00       	jmp    c00155a7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	66 3d 10 03          	cmp    ax,0x310
c00154f0:	75 0a                	jne    c00154fc <sendKeyboardToken(KeyboardToken)+0x120>
c00154f2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00154f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00154fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ff:	66 3d 11 03          	cmp    ax,0x311
c0015503:	75 0a                	jne    c001550f <sendKeyboardToken(KeyboardToken)+0x133>
c0015505:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001550b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001550f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015512:	66 3d 12 03          	cmp    ax,0x312
c0015516:	75 0a                	jne    c0015522 <sendKeyboardToken(KeyboardToken)+0x146>
c0015518:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001551e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015525:	66 3d 13 03          	cmp    ax,0x313
c0015529:	75 0a                	jne    c0015535 <sendKeyboardToken(KeyboardToken)+0x159>
c001552b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015531:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015538:	66 3d 14 03          	cmp    ax,0x314
c001553c:	75 0a                	jne    c0015548 <sendKeyboardToken(KeyboardToken)+0x16c>
c001553e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015544:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554b:	66 3d 15 03          	cmp    ax,0x315
c001554f:	75 0a                	jne    c001555b <sendKeyboardToken(KeyboardToken)+0x17f>
c0015551:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015557:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001555b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555e:	66 3d 16 03          	cmp    ax,0x316
c0015562:	75 0a                	jne    c001556e <sendKeyboardToken(KeyboardToken)+0x192>
c0015564:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001556a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001556e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015571:	66 3d 17 03          	cmp    ax,0x317
c0015575:	75 0a                	jne    c0015581 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015577:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001557d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	66 3d 18 03          	cmp    ax,0x318
c0015588:	75 0a                	jne    c0015594 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001558a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015590:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015597:	66 3d 19 03          	cmp    ax,0x319
c001559b:	75 0a                	jne    c00155a7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001559d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00155a3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155aa:	66 3d 00 02          	cmp    ax,0x200
c00155ae:	75 2a                	jne    c00155da <sendKeyboardToken(KeyboardToken)+0x1fe>
c00155b0:	a0 80 b6 02 c0       	mov    al,ds:0xc002b680
c00155b5:	83 f0 01             	xor    eax,0x1
c00155b8:	84 c0                	test   al,al
c00155ba:	74 1e                	je     c00155da <sendKeyboardToken(KeyboardToken)+0x1fe>
c00155bc:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00155c1:	6a 01                	push   0x1
c00155c3:	6a 00                	push   0x0
c00155c5:	68 fe 52 01 c0       	push   0xc00152fe
c00155ca:	50                   	push   eax
c00155cb:	e8 3e 6c 00 00       	call   c001c20e <Process::createThread(void (*)(void*), void*, int)>
c00155d0:	83 c4 10             	add    esp,0x10
c00155d3:	c6 05 80 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b680,0x1
c00155da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155dd:	66 3d 1d 03          	cmp    ax,0x31d
c00155e1:	75 06                	jne    c00155e9 <sendKeyboardToken(KeyboardToken)+0x20d>
c00155e3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00155e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ec:	66 3d 1c 03          	cmp    ax,0x31c
c00155f0:	75 06                	jne    c00155f8 <sendKeyboardToken(KeyboardToken)+0x21c>
c00155f2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00155f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fb:	66 3d 1b 03          	cmp    ax,0x31b
c00155ff:	75 06                	jne    c0015607 <sendKeyboardToken(KeyboardToken)+0x22b>
c0015601:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560a:	66 3d 1e 03          	cmp    ax,0x31e
c001560e:	75 06                	jne    c0015616 <sendKeyboardToken(KeyboardToken)+0x23a>
c0015610:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015619:	66 3d 1f 03          	cmp    ax,0x31f
c001561d:	75 06                	jne    c0015625 <sendKeyboardToken(KeyboardToken)+0x249>
c001561f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015628:	66 3d 1a 03          	cmp    ax,0x31a
c001562c:	75 06                	jne    c0015634 <sendKeyboardToken(KeyboardToken)+0x258>
c001562e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015634:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015638:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001563b:	83 f0 01             	xor    eax,0x1
c001563e:	84 c0                	test   al,al
c0015640:	74 77                	je     c00156b9 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015642:	a0 81 b3 02 c0       	mov    al,ds:0xc002b381
c0015647:	84 c0                	test   al,al
c0015649:	74 41                	je     c001568c <sendKeyboardToken(KeyboardToken)+0x2b0>
c001564b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001564f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015653:	74 2b                	je     c0015680 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015655:	8b 15 84 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b684
c001565b:	89 d0                	mov    eax,edx
c001565d:	c1 e0 02             	shl    eax,0x2
c0015660:	01 d0                	add    eax,edx
c0015662:	01 c0                	add    eax,eax
c0015664:	a3 84 b6 02 c0       	mov    ds:0xc002b684,eax
c0015669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566c:	0f b7 c0             	movzx  eax,ax
c001566f:	8d 50 d0             	lea    edx,[eax-0x30]
c0015672:	a1 84 b6 02 c0       	mov    eax,ds:0xc002b684
c0015677:	01 d0                	add    eax,edx
c0015679:	a3 84 b6 02 c0       	mov    ds:0xc002b684,eax
c001567e:	eb 6d                	jmp    c00156ed <sendKeyboardToken(KeyboardToken)+0x311>
c0015680:	c7 05 84 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b684,0x0
c001568a:	eb 61                	jmp    c00156ed <sendKeyboardToken(KeyboardToken)+0x311>
c001568c:	a1 84 b6 02 c0       	mov    eax,ds:0xc002b684
c0015691:	85 c0                	test   eax,eax
c0015693:	74 18                	je     c00156ad <sendKeyboardToken(KeyboardToken)+0x2d1>
c0015695:	a1 84 b6 02 c0       	mov    eax,ds:0xc002b684
c001569a:	0f b6 c0             	movzx  eax,al
c001569d:	83 ec 0c             	sub    esp,0xc
c00156a0:	50                   	push   eax
c00156a1:	e8 ca fc ff ff       	call   c0015370 <sendKeyToTerminal(unsigned char)>
c00156a6:	83 c4 10             	add    esp,0x10
c00156a9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156ad:	c7 05 84 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b684,0x0
c00156b7:	eb 34                	jmp    c00156ed <sendKeyboardToken(KeyboardToken)+0x311>
c00156b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bc:	66 3d 01 01          	cmp    ax,0x101
c00156c0:	75 2b                	jne    c00156ed <sendKeyboardToken(KeyboardToken)+0x311>
c00156c2:	a1 84 b6 02 c0       	mov    eax,ds:0xc002b684
c00156c7:	85 c0                	test   eax,eax
c00156c9:	74 18                	je     c00156e3 <sendKeyboardToken(KeyboardToken)+0x307>
c00156cb:	a1 84 b6 02 c0       	mov    eax,ds:0xc002b684
c00156d0:	0f b6 c0             	movzx  eax,al
c00156d3:	83 ec 0c             	sub    esp,0xc
c00156d6:	50                   	push   eax
c00156d7:	e8 94 fc ff ff       	call   c0015370 <sendKeyToTerminal(unsigned char)>
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156e3:	c7 05 84 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b684,0x0
c00156ed:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00156f0:	83 f0 01             	xor    eax,0x1
c00156f3:	84 c0                	test   al,al
c00156f5:	74 4c                	je     c0015743 <sendKeyboardToken(KeyboardToken)+0x367>
c00156f7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00156fa:	83 f0 01             	xor    eax,0x1
c00156fd:	84 c0                	test   al,al
c00156ff:	74 42                	je     c0015743 <sendKeyboardToken(KeyboardToken)+0x367>
c0015701:	a0 80 b3 02 c0       	mov    al,ds:0xc002b380
c0015706:	83 f0 01             	xor    eax,0x1
c0015709:	84 c0                	test   al,al
c001570b:	74 36                	je     c0015743 <sendKeyboardToken(KeyboardToken)+0x367>
c001570d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015710:	66 83 f8 1f          	cmp    ax,0x1f
c0015714:	76 09                	jbe    c001571f <sendKeyboardToken(KeyboardToken)+0x343>
c0015716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015719:	66 83 f8 7e          	cmp    ax,0x7e
c001571d:	76 12                	jbe    c0015731 <sendKeyboardToken(KeyboardToken)+0x355>
c001571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015722:	66 83 f8 0a          	cmp    ax,0xa
c0015726:	74 09                	je     c0015731 <sendKeyboardToken(KeyboardToken)+0x355>
c0015728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572b:	66 83 f8 08          	cmp    ax,0x8
c001572f:	75 12                	jne    c0015743 <sendKeyboardToken(KeyboardToken)+0x367>
c0015731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015734:	0f b6 c0             	movzx  eax,al
c0015737:	83 ec 0c             	sub    esp,0xc
c001573a:	50                   	push   eax
c001573b:	e8 30 fc ff ff       	call   c0015370 <sendKeyToTerminal(unsigned char)>
c0015740:	83 c4 10             	add    esp,0x10
c0015743:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015746:	83 f0 01             	xor    eax,0x1
c0015749:	84 c0                	test   al,al
c001574b:	74 4f                	je     c001579c <sendKeyboardToken(KeyboardToken)+0x3c0>
c001574d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015750:	83 f0 01             	xor    eax,0x1
c0015753:	84 c0                	test   al,al
c0015755:	74 45                	je     c001579c <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015757:	a0 80 b3 02 c0       	mov    al,ds:0xc002b380
c001575c:	84 c0                	test   al,al
c001575e:	74 3c                	je     c001579c <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015763:	66 83 f8 3f          	cmp    ax,0x3f
c0015767:	76 33                	jbe    c001579c <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576c:	66 83 f8 7f          	cmp    ax,0x7f
c0015770:	77 2a                	ja     c001579c <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015775:	88 c2                	mov    dl,al
c0015777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577a:	66 83 f8 5f          	cmp    ax,0x5f
c001577e:	76 04                	jbe    c0015784 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0015780:	b0 20                	mov    al,0x20
c0015782:	eb 02                	jmp    c0015786 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0015784:	b0 00                	mov    al,0x0
c0015786:	29 c2                	sub    edx,eax
c0015788:	88 d0                	mov    al,dl
c001578a:	83 e8 40             	sub    eax,0x40
c001578d:	0f b6 c0             	movzx  eax,al
c0015790:	83 ec 0c             	sub    esp,0xc
c0015793:	50                   	push   eax
c0015794:	e8 d7 fb ff ff       	call   c0015370 <sendKeyToTerminal(unsigned char)>
c0015799:	83 c4 10             	add    esp,0x10
c001579c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579f:	66 3d 00 03          	cmp    ax,0x300
c00157a3:	75 0f                	jne    c00157b4 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157a5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157a8:	83 f0 01             	xor    eax,0x1
c00157ab:	84 c0                	test   al,al
c00157ad:	74 05                	je     c00157b4 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157af:	e8 f3 b0 ff ff       	call   c00108a7 <doTerminalCycle()>
c00157b4:	90                   	nop
c00157b5:	c9                   	leave  
c00157b6:	c3                   	ret    

c00157b7 <clearInternalKeybuffer(VgaText*)>:
c00157b7:	55                   	push   ebp
c00157b8:	89 e5                	mov    ebp,esp
c00157ba:	83 ec 08             	sub    esp,0x8
c00157bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c0:	05 34 11 00 00       	add    eax,0x1134
c00157c5:	83 ec 0c             	sub    esp,0xc
c00157c8:	50                   	push   eax
c00157c9:	e8 ca ae fe ff       	call   c0000698 <strlen>
c00157ce:	83 c4 10             	add    esp,0x10
c00157d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00157d4:	81 c2 34 11 00 00    	add    edx,0x1134
c00157da:	83 ec 04             	sub    esp,0x4
c00157dd:	50                   	push   eax
c00157de:	6a 00                	push   0x0
c00157e0:	52                   	push   edx
c00157e1:	e8 95 ae fe ff       	call   c000067b <memset>
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	90                   	nop
c00157ea:	c9                   	leave  
c00157eb:	c3                   	ret    

c00157ec <readKeyboard(VgaText*, char*, unsigned long)>:
c00157ec:	55                   	push   ebp
c00157ed:	89 e5                	mov    ebp,esp
c00157ef:	83 ec 18             	sub    esp,0x18
c00157f2:	fb                   	sti    
c00157f3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00157fa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00157fe:	0f 84 8a 00 00 00    	je     c001588e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001580d:	84 c0                	test   al,al
c001580f:	75 11                	jne    c0015822 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015811:	e8 c7 68 00 00       	call   c001c0dd <lockScheduler()>
c0015816:	e8 fd 6b 00 00       	call   c001c418 <schedule()>
c001581b:	e8 bf 68 00 00       	call   c001c0df <unlockScheduler()>
c0015820:	eb e2                	jmp    c0015804 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015822:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015825:	8d 50 01             	lea    edx,[eax+0x1]
c0015828:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001582b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001582e:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015834:	88 10                	mov    BYTE PTR [eax],dl
c0015836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015839:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001583f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015845:	05 34 11 00 00       	add    eax,0x1134
c001584a:	83 ec 0c             	sub    esp,0xc
c001584d:	50                   	push   eax
c001584e:	e8 45 ae fe ff       	call   c0000698 <strlen>
c0015853:	83 c4 10             	add    esp,0x10
c0015856:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015859:	81 c2 34 11 00 00    	add    edx,0x1134
c001585f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015862:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015865:	81 c2 34 11 00 00    	add    edx,0x1134
c001586b:	83 ec 04             	sub    esp,0x4
c001586e:	50                   	push   eax
c001586f:	51                   	push   ecx
c0015870:	52                   	push   edx
c0015871:	e8 97 ad fe ff       	call   c000060d <memmove>
c0015876:	83 c4 10             	add    esp,0x10
c0015879:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001587c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001587f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015883:	0f 85 71 ff ff ff    	jne    c00157fa <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015889:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001588c:	eb 03                	jmp    c0015891 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001588e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015891:	c9                   	leave  
c0015892:	c3                   	ret    
c0015893:	90                   	nop

c0015894 <Keyboard::Keyboard(char const*)>:
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001589b:	83 ec 08             	sub    esp,0x8
c001589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158a2:	50                   	push   eax
c00158a3:	e8 6a e3 ff ff       	call   c0013c12 <Device::Device(char const*)>
c00158a8:	83 c4 10             	add    esp,0x10
c00158ab:	ba 54 84 02 c0       	mov    edx,0xc0028454
c00158b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158b4:	89 10                	mov    DWORD PTR [eax],edx
c00158b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ba:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00158c4:	c6 05 64 b2 02 c0 01 	mov    BYTE PTR ds:0xc002b264,0x1
c00158cb:	90                   	nop
c00158cc:	83 c4 0c             	add    esp,0xc
c00158cf:	c3                   	ret    

c00158d0 <Keyboard::~Keyboard()>:
c00158d0:	83 ec 0c             	sub    esp,0xc
c00158d3:	ba 54 84 02 c0       	mov    edx,0xc0028454
c00158d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158dc:	89 10                	mov    DWORD PTR [eax],edx
c00158de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158e2:	83 ec 0c             	sub    esp,0xc
c00158e5:	50                   	push   eax
c00158e6:	e8 09 e0 ff ff       	call   c00138f4 <Device::~Device()>
c00158eb:	83 c4 10             	add    esp,0x10
c00158ee:	90                   	nop
c00158ef:	83 c4 0c             	add    esp,0xc
c00158f2:	c3                   	ret    
c00158f3:	90                   	nop

c00158f4 <Keyboard::~Keyboard()>:
c00158f4:	83 ec 0c             	sub    esp,0xc
c00158f7:	83 ec 0c             	sub    esp,0xc
c00158fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158fe:	e8 cd ff ff ff       	call   c00158d0 <Keyboard::~Keyboard()>
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	83 ec 08             	sub    esp,0x8
c0015909:	68 5c 01 00 00       	push   0x15c
c001590e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015912:	e8 3c cc ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	83 c4 0c             	add    esp,0xc
c001591d:	c3                   	ret    

c001591e <LogicalDisk::close(int, int, void*)>:
c001591e:	83 c8 ff             	or     eax,0xffffffff
c0015921:	c3                   	ret    

c0015922 <LogicalDisk::~LogicalDisk()>:
c0015922:	83 ec 0c             	sub    esp,0xc
c0015925:	ba 04 85 02 c0       	mov    edx,0xc0028504
c001592a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001592e:	89 10                	mov    DWORD PTR [eax],edx
c0015930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015934:	83 ec 0c             	sub    esp,0xc
c0015937:	50                   	push   eax
c0015938:	e8 b7 df ff ff       	call   c00138f4 <Device::~Device()>
c001593d:	83 c4 10             	add    esp,0x10
c0015940:	90                   	nop
c0015941:	83 c4 0c             	add    esp,0xc
c0015944:	c3                   	ret    
c0015945:	90                   	nop

c0015946 <LogicalDisk::~LogicalDisk()>:
c0015946:	83 ec 0c             	sub    esp,0xc
c0015949:	83 ec 0c             	sub    esp,0xc
c001594c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015950:	e8 cd ff ff ff       	call   c0015922 <LogicalDisk::~LogicalDisk()>
c0015955:	83 c4 10             	add    esp,0x10
c0015958:	83 ec 08             	sub    esp,0x8
c001595b:	68 74 01 00 00       	push   0x174
c0015960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015964:	e8 ea cb ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0015969:	83 c4 10             	add    esp,0x10
c001596c:	83 c4 0c             	add    esp,0xc
c001596f:	c3                   	ret    

c0015970 <LogicalDisk::open(int, int, void*)>:
c0015970:	83 ec 18             	sub    esp,0x18
c0015973:	68 80 84 02 c0       	push   0xc0028480
c0015978:	e8 1a 37 00 00       	call   c0019097 <Krnl::panic(char const*)>
c001597d:	83 c8 ff             	or     eax,0xffffffff
c0015980:	83 c4 1c             	add    esp,0x1c
c0015983:	c3                   	ret    

c0015984 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015984:	53                   	push   ebx
c0015985:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001598d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015991:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015997:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001599d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00159a3:	77 10                	ja     c00159b5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00159a5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00159ab:	89 d3                	mov    ebx,edx
c00159ad:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00159b3:	72 05                	jb     c00159ba <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00159b5:	83 c8 ff             	or     eax,0xffffffff
c00159b8:	89 c2                	mov    edx,eax
c00159ba:	5b                   	pop    ebx
c00159bb:	c3                   	ret    

c00159bc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00159bc:	56                   	push   esi
c00159bd:	83 c8 ff             	or     eax,0xffffffff
c00159c0:	53                   	push   ebx
c00159c1:	89 c2                	mov    edx,eax
c00159c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00159c7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00159cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00159cf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00159d5:	77 27                	ja     c00159fe <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00159d7:	89 d8                	mov    eax,ebx
c00159d9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00159df:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00159e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159ea:	89 c2                	mov    edx,eax
c00159ec:	73 10                	jae    c00159fe <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00159ee:	89 c8                	mov    eax,ecx
c00159f0:	89 da                	mov    edx,ebx
c00159f2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00159f8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00159fe:	5b                   	pop    ebx
c00159ff:	5e                   	pop    esi
c0015a00:	c3                   	ret    
c0015a01:	90                   	nop

c0015a02 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015a02:	83 ec 1c             	sub    esp,0x1c
c0015a05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a19:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a1c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015a20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a28:	83 ec 08             	sub    esp,0x8
c0015a2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a2f:	50                   	push   eax
c0015a30:	e8 dd e1 ff ff       	call   c0013c12 <Device::Device(char const*)>
c0015a35:	83 c4 10             	add    esp,0x10
c0015a38:	ba 04 85 02 c0       	mov    edx,0xc0028504
c0015a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a41:	89 10                	mov    DWORD PTR [eax],edx
c0015a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a47:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015a4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a52:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a5d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015a67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015a6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a73:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015a79:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015a7f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015a83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015a86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015a8a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015a90:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a9e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ab2:	90                   	nop
c0015ab3:	83 c4 1c             	add    esp,0x1c
c0015ab6:	c3                   	ret    
c0015ab7:	90                   	nop

c0015ab8 <LogicalDisk::assignDriveLetter()>:
c0015ab8:	55                   	push   ebp
c0015ab9:	57                   	push   edi
c0015aba:	56                   	push   esi
c0015abb:	53                   	push   ebx
c0015abc:	83 ec 14             	sub    esp,0x14
c0015abf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ac3:	8b 3d a0 b6 02 c0    	mov    edi,DWORD PTR ds:0xc002b6a0
c0015ac9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015acf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ad3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ad9:	8b 3d a4 b6 02 c0    	mov    edi,DWORD PTR ds:0xc002b6a4
c0015adf:	3c 01                	cmp    al,0x1
c0015ae1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ae5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015ae9:	19 c0                	sbb    eax,eax
c0015aeb:	83 e0 02             	and    eax,0x2
c0015aee:	83 c0 41             	add    eax,0x41
c0015af1:	0f be e8             	movsx  ebp,al
c0015af4:	3c 43                	cmp    al,0x43
c0015af6:	75 10                	jne    c0015b08 <LogicalDisk::assignDriveLetter()+0x50>
c0015af8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015aff:	75 5d                	jne    c0015b5e <LogicalDisk::assignDriveLetter()+0xa6>
c0015b01:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b06:	75 56                	jne    c0015b5e <LogicalDisk::assignDriveLetter()+0xa6>
c0015b08:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015b0b:	ba 01 00 00 00       	mov    edx,0x1
c0015b10:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015b14:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015b18:	d3 e2                	shl    edx,cl
c0015b1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b1e:	89 d7                	mov    edi,edx
c0015b20:	89 d6                	mov    esi,edx
c0015b22:	c1 ff 1f             	sar    edi,0x1f
c0015b25:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015b29:	21 f9                	and    ecx,edi
c0015b2b:	09 d1                	or     ecx,edx
c0015b2d:	75 2f                	jne    c0015b5e <LogicalDisk::assignDriveLetter()+0xa6>
c0015b2f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015b33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015b37:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015b3d:	09 f2                	or     edx,esi
c0015b3f:	89 15 a0 b6 02 c0    	mov    DWORD PTR ds:0xc002b6a0,edx
c0015b45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b49:	09 fa                	or     edx,edi
c0015b4b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015b4f:	89 15 a4 b6 02 c0    	mov    DWORD PTR ds:0xc002b6a4,edx
c0015b55:	89 1c bd c0 b6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4940],ebx
c0015b5c:	eb 08                	jmp    c0015b66 <LogicalDisk::assignDriveLetter()+0xae>
c0015b5e:	45                   	inc    ebp
c0015b5f:	40                   	inc    eax
c0015b60:	3c 5b                	cmp    al,0x5b
c0015b62:	75 90                	jne    c0015af4 <LogicalDisk::assignDriveLetter()+0x3c>
c0015b64:	31 c0                	xor    eax,eax
c0015b66:	83 c4 14             	add    esp,0x14
c0015b69:	5b                   	pop    ebx
c0015b6a:	5e                   	pop    esi
c0015b6b:	5f                   	pop    edi
c0015b6c:	5d                   	pop    ebp
c0015b6d:	c3                   	ret    

c0015b6e <LogicalDisk::mount()>:
c0015b6e:	56                   	push   esi
c0015b6f:	53                   	push   ebx
c0015b70:	51                   	push   ecx
c0015b71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b75:	8b 1d 28 b2 02 c0    	mov    ebx,DWORD PTR ds:0xc002b228
c0015b7b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015b85:	85 db                	test   ebx,ebx
c0015b87:	74 50                	je     c0015bd9 <LogicalDisk::mount()+0x6b>
c0015b89:	e8 3a 65 00 00       	call   c001c0c8 <getIRQNestingLevel()>
c0015b8e:	52                   	push   edx
c0015b8f:	52                   	push   edx
c0015b90:	50                   	push   eax
c0015b91:	68 a4 84 02 c0       	push   0xc00284a4
c0015b96:	e8 98 ca ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0015b9b:	83 c4 0c             	add    esp,0xc
c0015b9e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015ba5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ba7:	83 e8 41             	sub    eax,0x41
c0015baa:	50                   	push   eax
c0015bab:	56                   	push   esi
c0015bac:	53                   	push   ebx
c0015bad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bb0:	83 c4 10             	add    esp,0x10
c0015bb3:	84 c0                	test   al,al
c0015bb5:	74 08                	je     c0015bbf <LogicalDisk::mount()+0x51>
c0015bb7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015bbd:	eb 1c                	jmp    c0015bdb <LogicalDisk::mount()+0x6d>
c0015bbf:	e8 04 65 00 00       	call   c001c0c8 <getIRQNestingLevel()>
c0015bc4:	51                   	push   ecx
c0015bc5:	51                   	push   ecx
c0015bc6:	50                   	push   eax
c0015bc7:	68 bf 84 02 c0       	push   0xc00284bf
c0015bcc:	e8 62 ca ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0015bd1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015bd4:	83 c4 10             	add    esp,0x10
c0015bd7:	eb ac                	jmp    c0015b85 <LogicalDisk::mount()+0x17>
c0015bd9:	31 c0                	xor    eax,eax
c0015bdb:	5a                   	pop    edx
c0015bdc:	5b                   	pop    ebx
c0015bdd:	5e                   	pop    esi
c0015bde:	c3                   	ret    
c0015bdf:	90                   	nop

c0015be0 <LogicalDisk::unmount()>:
c0015be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015bee:	c3                   	ret    
c0015bef:	90                   	nop

c0015bf0 <LogicalDisk::unassignDriveLetter()>:
c0015bf0:	57                   	push   edi
c0015bf1:	56                   	push   esi
c0015bf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015bf6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015bfd:	84 c9                	test   cl,cl
c0015bff:	75 0f                	jne    c0015c10 <LogicalDisk::unassignDriveLetter()+0x20>
c0015c01:	c7 44 24 0c da 84 02 c0 	mov    DWORD PTR [esp+0xc],0xc00284da
c0015c09:	5e                   	pop    esi
c0015c0a:	5f                   	pop    edi
c0015c0b:	e9 87 34 00 00       	jmp    c0019097 <Krnl::panic(char const*)>
c0015c10:	83 e9 41             	sub    ecx,0x41
c0015c13:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015c1a:	b8 01 00 00 00       	mov    eax,0x1
c0015c1f:	c7 04 8d c0 b6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4940],0x0
c0015c2a:	d3 e0                	shl    eax,cl
c0015c2c:	89 c7                	mov    edi,eax
c0015c2e:	f7 d0                	not    eax
c0015c30:	c1 ff 1f             	sar    edi,0x1f
c0015c33:	21 05 a0 b6 02 c0    	and    DWORD PTR ds:0xc002b6a0,eax
c0015c39:	89 fe                	mov    esi,edi
c0015c3b:	f7 d6                	not    esi
c0015c3d:	21 35 a4 b6 02 c0    	and    DWORD PTR ds:0xc002b6a4,esi
c0015c43:	5e                   	pop    esi
c0015c44:	5f                   	pop    edi
c0015c45:	c3                   	ret    

c0015c46 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015c46:	57                   	push   edi
c0015c47:	56                   	push   esi
c0015c48:	53                   	push   ebx
c0015c49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015c4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c51:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c59:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015c5f:	77 41                	ja     c0015ca2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015c61:	99                   	cdq    
c0015c62:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015c68:	01 c8                	add    eax,ecx
c0015c6a:	11 da                	adc    edx,ebx
c0015c6c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015c72:	19 d7                	sbb    edi,edx
c0015c74:	72 33                	jb     c0015ca9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015c76:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015c7c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015c82:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015c86:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015c8a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015c90:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c9a:	5b                   	pop    ebx
c0015c9b:	5e                   	pop    esi
c0015c9c:	5f                   	pop    edi
c0015c9d:	e9 74 09 00 00       	jmp    c0016616 <VCache::read(unsigned long long, int, void*)>
c0015ca2:	b8 05 00 00 00       	mov    eax,0x5
c0015ca7:	eb 05                	jmp    c0015cae <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015ca9:	b8 07 00 00 00       	mov    eax,0x7
c0015cae:	5b                   	pop    ebx
c0015caf:	5e                   	pop    esi
c0015cb0:	5f                   	pop    edi
c0015cb1:	c3                   	ret    

c0015cb2 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015cb2:	57                   	push   edi
c0015cb3:	56                   	push   esi
c0015cb4:	53                   	push   ebx
c0015cb5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015cb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cbd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ccb:	77 41                	ja     c0015d0e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015ccd:	99                   	cdq    
c0015cce:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015cd4:	01 c8                	add    eax,ecx
c0015cd6:	11 da                	adc    edx,ebx
c0015cd8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015cde:	19 d7                	sbb    edi,edx
c0015ce0:	72 33                	jb     c0015d15 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015ce2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ce8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015cee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015cf2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015cf6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015cfc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d06:	5b                   	pop    ebx
c0015d07:	5e                   	pop    esi
c0015d08:	5f                   	pop    edi
c0015d09:	e9 24 08 00 00       	jmp    c0016532 <VCache::write(unsigned long long, int, void*)>
c0015d0e:	b8 05 00 00 00       	mov    eax,0x5
c0015d13:	eb 05                	jmp    c0015d1a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015d15:	b8 07 00 00 00       	mov    eax,0x7
c0015d1a:	5b                   	pop    ebx
c0015d1b:	5e                   	pop    esi
c0015d1c:	5f                   	pop    edi
c0015d1d:	c3                   	ret    

c0015d1e <Mouse::Mouse(char const*)>:
c0015d1e:	83 ec 0c             	sub    esp,0xc
c0015d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d25:	83 ec 08             	sub    esp,0x8
c0015d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d2c:	50                   	push   eax
c0015d2d:	e8 e0 de ff ff       	call   c0013c12 <Device::Device(char const*)>
c0015d32:	83 c4 10             	add    esp,0x10
c0015d35:	ba 30 85 02 c0       	mov    edx,0xc0028530
c0015d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3e:	89 10                	mov    DWORD PTR [eax],edx
c0015d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d44:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015d4e:	90                   	nop
c0015d4f:	83 c4 0c             	add    esp,0xc
c0015d52:	c3                   	ret    
c0015d53:	90                   	nop

c0015d54 <Mouse::~Mouse()>:
c0015d54:	83 ec 0c             	sub    esp,0xc
c0015d57:	ba 30 85 02 c0       	mov    edx,0xc0028530
c0015d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d60:	89 10                	mov    DWORD PTR [eax],edx
c0015d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d66:	83 ec 0c             	sub    esp,0xc
c0015d69:	50                   	push   eax
c0015d6a:	e8 85 db ff ff       	call   c00138f4 <Device::~Device()>
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	90                   	nop
c0015d73:	83 c4 0c             	add    esp,0xc
c0015d76:	c3                   	ret    
c0015d77:	90                   	nop

c0015d78 <Mouse::~Mouse()>:
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	83 ec 0c             	sub    esp,0xc
c0015d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d82:	e8 cd ff ff ff       	call   c0015d54 <Mouse::~Mouse()>
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	83 ec 08             	sub    esp,0x8
c0015d8d:	68 58 01 00 00       	push   0x158
c0015d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d96:	e8 b8 c7 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0015d9b:	83 c4 10             	add    esp,0x10
c0015d9e:	83 c4 0c             	add    esp,0xc
c0015da1:	c3                   	ret    

c0015da2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015da2:	55                   	push   ebp
c0015da3:	57                   	push   edi
c0015da4:	56                   	push   esi
c0015da5:	53                   	push   ebx
c0015da6:	81 ec 28 01 00 00    	sub    esp,0x128
c0015dac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015db3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015dba:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015dc1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015dc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015dcc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015dd0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015dd7:	e8 32 df ff ff       	call   c0013d0e <Device::getName()>
c0015ddc:	5a                   	pop    edx
c0015ddd:	59                   	pop    ecx
c0015dde:	50                   	push   eax
c0015ddf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015de3:	55                   	push   ebp
c0015de4:	e8 31 a9 fe ff       	call   c000071a <strcpy>
c0015de9:	5b                   	pop    ebx
c0015dea:	58                   	pop    eax
c0015deb:	68 54 85 02 c0       	push   0xc0028554
c0015df0:	55                   	push   ebp
c0015df1:	e8 db a9 fe ff       	call   c00007d1 <strcat>
c0015df6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015dfd:	e8 be 96 ff ff       	call   c000f4c0 <malloc>
c0015e02:	83 c4 0c             	add    esp,0xc
c0015e05:	89 c3                	mov    ebx,eax
c0015e07:	57                   	push   edi
c0015e08:	56                   	push   esi
c0015e09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e11:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015e18:	55                   	push   ebp
c0015e19:	50                   	push   eax
c0015e1a:	e8 e3 fb ff ff       	call   c0015a02 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015e1f:	83 c4 14             	add    esp,0x14
c0015e22:	53                   	push   ebx
c0015e23:	e8 90 fc ff ff       	call   c0015ab8 <LogicalDisk::assignDriveLetter()>
c0015e28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e2b:	e8 3e fd ff ff       	call   c0015b6e <LogicalDisk::mount()>
c0015e30:	58                   	pop    eax
c0015e31:	5a                   	pop    edx
c0015e32:	53                   	push   ebx
c0015e33:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015e3a:	e8 e3 db ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0015e3f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e45:	5b                   	pop    ebx
c0015e46:	5e                   	pop    esi
c0015e47:	5f                   	pop    edi
c0015e48:	5d                   	pop    ebp
c0015e49:	c3                   	ret    

c0015e4a <createPartitionsForDisk(PhysicalDisk*)>:
c0015e4a:	55                   	push   ebp
c0015e4b:	57                   	push   edi
c0015e4c:	56                   	push   esi
c0015e4d:	53                   	push   ebx
c0015e4e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015e54:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015e5b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015e61:	3d 00 02 00 00       	cmp    eax,0x200
c0015e66:	74 27                	je     c0015e8f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015e68:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015e6e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015e74:	83 ec 10             	sub    esp,0x10
c0015e77:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015e7b:	99                   	cdq    
c0015e7c:	c1 e6 0a             	shl    esi,0xa
c0015e7f:	52                   	push   edx
c0015e80:	89 fd                	mov    ebp,edi
c0015e82:	50                   	push   eax
c0015e83:	55                   	push   ebp
c0015e84:	56                   	push   esi
c0015e85:	e8 a2 e0 00 00       	call   c0023f2c <__udivdi3>
c0015e8a:	e9 b1 00 00 00       	jmp    c0015f40 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015e8f:	83 ec 0c             	sub    esp,0xc
c0015e92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e94:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015e98:	56                   	push   esi
c0015e99:	6a 01                	push   0x1
c0015e9b:	6a 00                	push   0x0
c0015e9d:	6a 00                	push   0x0
c0015e9f:	53                   	push   ebx
c0015ea0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015ea3:	83 c4 20             	add    esp,0x20
c0015ea6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015eae:	75 0a                	jne    c0015eba <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015eb0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015eb8:	74 2c                	je     c0015ee6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015eba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015ec0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015ec6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ecc:	83 ec 10             	sub    esp,0x10
c0015ecf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015ed3:	89 f7                	mov    edi,esi
c0015ed5:	c1 e0 0a             	shl    eax,0xa
c0015ed8:	c1 ff 1f             	sar    edi,0x1f
c0015edb:	57                   	push   edi
c0015edc:	56                   	push   esi
c0015edd:	52                   	push   edx
c0015ede:	50                   	push   eax
c0015edf:	e8 48 e0 00 00       	call   c0023f2c <__udivdi3>
c0015ee4:	eb 5a                	jmp    c0015f40 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ee6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015eed:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015ef4:	83 e1 7f             	and    ecx,0x7f
c0015ef7:	83 e0 7f             	and    eax,0x7f
c0015efa:	01 c1                	add    ecx,eax
c0015efc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015f03:	83 e0 7f             	and    eax,0x7f
c0015f06:	01 c1                	add    ecx,eax
c0015f08:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015f0f:	83 e0 7f             	and    eax,0x7f
c0015f12:	00 c1                	add    cl,al
c0015f14:	74 41                	je     c0015f57 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015f16:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f1c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f22:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f28:	83 ec 10             	sub    esp,0x10
c0015f2b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f2f:	89 f7                	mov    edi,esi
c0015f31:	c1 e0 0a             	shl    eax,0xa
c0015f34:	c1 ff 1f             	sar    edi,0x1f
c0015f37:	57                   	push   edi
c0015f38:	56                   	push   esi
c0015f39:	52                   	push   edx
c0015f3a:	50                   	push   eax
c0015f3b:	e8 ec df 00 00       	call   c0023f2c <__udivdi3>
c0015f40:	83 c4 14             	add    esp,0x14
c0015f43:	52                   	push   edx
c0015f44:	50                   	push   eax
c0015f45:	6a 00                	push   0x0
c0015f47:	6a 00                	push   0x0
c0015f49:	53                   	push   ebx
c0015f4a:	e8 53 fe ff ff       	call   c0015da2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015f4f:	83 c4 20             	add    esp,0x20
c0015f52:	e9 79 01 00 00       	jmp    c00160d0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015f57:	89 f0                	mov    eax,esi
c0015f59:	31 f6                	xor    esi,esi
c0015f5b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015f62:	75 02                	jne    c0015f66 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015f64:	89 f1                	mov    ecx,esi
c0015f66:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015f6d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015f74:	c1 e2 08             	shl    edx,0x8
c0015f77:	c1 e7 10             	shl    edi,0x10
c0015f7a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015f82:	09 fa                	or     edx,edi
c0015f84:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015f8c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015f93:	83 c0 10             	add    eax,0x10
c0015f96:	09 fa                	or     edx,edi
c0015f98:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015f9f:	c1 e7 18             	shl    edi,0x18
c0015fa2:	09 fa                	or     edx,edi
c0015fa4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015fab:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015faf:	c1 e7 10             	shl    edi,0x10
c0015fb2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015fb9:	c1 e2 08             	shl    edx,0x8
c0015fbc:	09 fa                	or     edx,edi
c0015fbe:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015fc5:	09 fa                	or     edx,edi
c0015fc7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015fce:	c1 e7 18             	shl    edi,0x18
c0015fd1:	09 fa                	or     edx,edi
c0015fd3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015fd7:	46                   	inc    esi
c0015fd8:	83 fe 04             	cmp    esi,0x4
c0015fdb:	0f 85 7a ff ff ff    	jne    c0015f5b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe5:	83 f0 01             	xor    eax,0x1
c0015fe8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015fec:	75 57                	jne    c0016045 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015fee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ff2:	83 f0 01             	xor    eax,0x1
c0015ff5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015ff9:	75 4a                	jne    c0016045 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015ffb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015fff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016007:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001600f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016015:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001601b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016021:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016025:	89 f7                	mov    edi,esi
c0016027:	c1 e0 0a             	shl    eax,0xa
c001602a:	c1 ff 1f             	sar    edi,0x1f
c001602d:	57                   	push   edi
c001602e:	56                   	push   esi
c001602f:	52                   	push   edx
c0016030:	50                   	push   eax
c0016031:	e8 f6 de 00 00       	call   c0023f2c <__udivdi3>
c0016036:	83 c4 10             	add    esp,0x10
c0016039:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001603d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016041:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016045:	84 c9                	test   cl,cl
c0016047:	74 53                	je     c001609c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016049:	0f b6 c9             	movzx  ecx,cl
c001604c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016050:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016054:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016058:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001605c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016064:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016068:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001606c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016070:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001607c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016080:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016084:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016088:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001608c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016090:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016094:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016098:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001609c:	31 ed                	xor    ebp,ebp
c001609e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00160a2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00160a6:	89 f8                	mov    eax,edi
c00160a8:	09 f0                	or     eax,esi
c00160aa:	74 1e                	je     c00160ca <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00160ac:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00160b0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00160b4:	89 d1                	mov    ecx,edx
c00160b6:	09 c1                	or     ecx,eax
c00160b8:	74 10                	je     c00160ca <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00160ba:	83 ec 0c             	sub    esp,0xc
c00160bd:	57                   	push   edi
c00160be:	56                   	push   esi
c00160bf:	52                   	push   edx
c00160c0:	50                   	push   eax
c00160c1:	53                   	push   ebx
c00160c2:	e8 db fc ff ff       	call   c0015da2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00160c7:	83 c4 20             	add    esp,0x20
c00160ca:	45                   	inc    ebp
c00160cb:	83 fd 04             	cmp    ebp,0x4
c00160ce:	75 ce                	jne    c001609e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00160d0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00160d6:	5b                   	pop    ebx
c00160d7:	5e                   	pop    esi
c00160d8:	5f                   	pop    edi
c00160d9:	5d                   	pop    ebp
c00160da:	c3                   	ret    
c00160db:	90                   	nop

c00160dc <Timer::Timer(char const*)>:
c00160dc:	83 ec 0c             	sub    esp,0xc
c00160df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e3:	83 ec 08             	sub    esp,0x8
c00160e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ea:	50                   	push   eax
c00160eb:	e8 22 db ff ff       	call   c0013c12 <Device::Device(char const*)>
c00160f0:	83 c4 10             	add    esp,0x10
c00160f3:	ba 68 85 02 c0       	mov    edx,0xc0028568
c00160f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160fc:	89 10                	mov    DWORD PTR [eax],edx
c00160fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016102:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001610c:	90                   	nop
c001610d:	83 c4 0c             	add    esp,0xc
c0016110:	c3                   	ret    
c0016111:	90                   	nop

c0016112 <Timer::~Timer()>:
c0016112:	83 ec 0c             	sub    esp,0xc
c0016115:	ba 68 85 02 c0       	mov    edx,0xc0028568
c001611a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611e:	89 10                	mov    DWORD PTR [eax],edx
c0016120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016124:	83 ec 0c             	sub    esp,0xc
c0016127:	50                   	push   eax
c0016128:	e8 c7 d7 ff ff       	call   c00138f4 <Device::~Device()>
c001612d:	83 c4 10             	add    esp,0x10
c0016130:	90                   	nop
c0016131:	83 c4 0c             	add    esp,0xc
c0016134:	c3                   	ret    
c0016135:	90                   	nop

c0016136 <Timer::~Timer()>:
c0016136:	83 ec 0c             	sub    esp,0xc
c0016139:	83 ec 0c             	sub    esp,0xc
c001613c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016140:	e8 cd ff ff ff       	call   c0016112 <Timer::~Timer()>
c0016145:	83 c4 10             	add    esp,0x10
c0016148:	83 ec 08             	sub    esp,0x8
c001614b:	68 5c 01 00 00       	push   0x15c
c0016150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016154:	e8 fa c3 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0016159:	83 c4 10             	add    esp,0x10
c001615c:	83 c4 0c             	add    esp,0xc
c001615f:	c3                   	ret    

c0016160 <Timer::read()>:
c0016160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016164:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001616a:	c3                   	ret    

c001616b <timerHandler(unsigned long long)>:
c001616b:	55                   	push   ebp
c001616c:	57                   	push   edi
c001616d:	56                   	push   esi
c001616e:	53                   	push   ebx
c001616f:	83 ec 0c             	sub    esp,0xc
c0016172:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016176:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001617a:	01 35 30 b7 02 c0    	add    DWORD PTR ds:0xc002b730,esi
c0016180:	11 3d 34 b7 02 c0    	adc    DWORD PTR ds:0xc002b734,edi
c0016186:	80 3d cd b0 02 c0 00 	cmp    BYTE PTR ds:0xc002b0cd,0x0
c001618d:	0f 84 07 01 00 00    	je     c001629a <timerHandler(unsigned long long)+0x12f>
c0016193:	e8 6c 5f 00 00       	call   c001c104 <lockStuff()>
c0016198:	83 ec 0c             	sub    esp,0xc
c001619b:	68 bc c5 02 c0       	push   0xc002c5bc
c00161a0:	e8 f9 fd 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161a5:	c7 04 24 bc c5 02 c0 	mov    DWORD PTR [esp],0xc002c5bc
c00161ac:	89 c3                	mov    ebx,eax
c00161ae:	e8 f3 fd 00 00       	call   c0025fa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161b3:	83 c4 10             	add    esp,0x10
c00161b6:	84 c0                	test   al,al
c00161b8:	74 60                	je     c001621a <timerHandler(unsigned long long)+0xaf>
c00161ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161c0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00161c3:	85 c0                	test   eax,eax
c00161c5:	0f 85 91 00 00 00    	jne    c001625c <timerHandler(unsigned long long)+0xf1>
c00161cb:	e9 be 00 00 00       	jmp    c001628e <timerHandler(unsigned long long)+0x123>
c00161d0:	83 ec 0c             	sub    esp,0xc
c00161d3:	55                   	push   ebp
c00161d4:	e8 1b 65 00 00       	call   c001c6f4 <unblockTask(ThreadControlBlock*)>
c00161d9:	83 c4 10             	add    esp,0x10
c00161dc:	39 eb                	cmp    ebx,ebp
c00161de:	75 12                	jne    c00161f2 <timerHandler(unsigned long long)+0x87>
c00161e0:	83 ec 0c             	sub    esp,0xc
c00161e3:	68 bc c5 02 c0       	push   0xc002c5bc
c00161e8:	e8 b1 fd 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161ed:	89 c3                	mov    ebx,eax
c00161ef:	83 c4 10             	add    esp,0x10
c00161f2:	83 ec 0c             	sub    esp,0xc
c00161f5:	68 bc c5 02 c0       	push   0xc002c5bc
c00161fa:	e8 a7 fd 00 00       	call   c0025fa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161ff:	83 c4 10             	add    esp,0x10
c0016202:	84 c0                	test   al,al
c0016204:	75 b4                	jne    c00161ba <timerHandler(unsigned long long)+0x4f>
c0016206:	83 ec 0c             	sub    esp,0xc
c0016209:	68 bc c5 02 c0       	push   0xc002c5bc
c001620e:	e8 8b fd 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016213:	83 c4 10             	add    esp,0x10
c0016216:	39 d8                	cmp    eax,ebx
c0016218:	74 a0                	je     c00161ba <timerHandler(unsigned long long)+0x4f>
c001621a:	83 ec 0c             	sub    esp,0xc
c001621d:	68 bc c5 02 c0       	push   0xc002c5bc
c0016222:	e8 77 fd 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016227:	c7 04 24 bc c5 02 c0 	mov    DWORD PTR [esp],0xc002c5bc
c001622e:	89 c5                	mov    ebp,eax
c0016230:	e8 8d fd 00 00       	call   c0025fc2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016235:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016238:	83 c4 10             	add    esp,0x10
c001623b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001623e:	39 15 30 b7 02 c0    	cmp    DWORD PTR ds:0xc002b730,edx
c0016244:	a1 34 b7 02 c0       	mov    eax,ds:0xc002b734
c0016249:	19 c8                	sbb    eax,ecx
c001624b:	73 83                	jae    c00161d0 <timerHandler(unsigned long long)+0x65>
c001624d:	50                   	push   eax
c001624e:	50                   	push   eax
c001624f:	55                   	push   ebp
c0016250:	68 bc c5 02 c0       	push   0xc002c5bc
c0016255:	e8 16 fe 00 00       	call   c0026070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001625a:	eb 93                	jmp    c00161ef <timerHandler(unsigned long long)+0x84>
c001625c:	80 3d cc b0 02 c0 00 	cmp    BYTE PTR ds:0xc002b0cc,0x0
c0016263:	74 29                	je     c001628e <timerHandler(unsigned long long)+0x123>
c0016265:	39 c6                	cmp    esi,eax
c0016267:	bb 00 00 00 00       	mov    ebx,0x0
c001626c:	19 df                	sbb    edi,ebx
c001626e:	72 19                	jb     c0016289 <timerHandler(unsigned long long)+0x11e>
c0016270:	e8 68 5e 00 00       	call   c001c0dd <lockScheduler()>
c0016275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001627d:	e8 96 61 00 00       	call   c001c418 <schedule()>
c0016282:	e8 58 5e 00 00       	call   c001c0df <unlockScheduler()>
c0016287:	eb 05                	jmp    c001628e <timerHandler(unsigned long long)+0x123>
c0016289:	29 f0                	sub    eax,esi
c001628b:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001628e:	83 c4 0c             	add    esp,0xc
c0016291:	5b                   	pop    ebx
c0016292:	5e                   	pop    esi
c0016293:	5f                   	pop    edi
c0016294:	5d                   	pop    ebp
c0016295:	e9 03 62 00 00       	jmp    c001c49d <unlockStuff()>
c001629a:	83 c4 0c             	add    esp,0xc
c001629d:	5b                   	pop    ebx
c001629e:	5e                   	pop    esi
c001629f:	5f                   	pop    edi
c00162a0:	5d                   	pop    ebp
c00162a1:	c3                   	ret    

c00162a2 <setupTimer(int)>:
c00162a2:	57                   	push   edi
c00162a3:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00162a8:	56                   	push   esi
c00162a9:	53                   	push   ebx
c00162aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00162b4:	83 ec 0c             	sub    esp,0xc
c00162b7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00162bd:	e8 4c da ff ff       	call   c0013d0e <Device::getName()>
c00162c2:	83 c4 10             	add    esp,0x10
c00162c5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00162c8:	0f 85 8d 00 00 00    	jne    c001635b <setupTimer(int)+0xb9>
c00162ce:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00162d3:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00162da:	74 7f                	je     c001635b <setupTimer(int)+0xb9>
c00162dc:	83 ec 0c             	sub    esp,0xc
c00162df:	68 5c 01 00 00       	push   0x15c
c00162e4:	e8 d7 91 ff ff       	call   c000f4c0 <malloc>
c00162e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00162ec:	89 c3                	mov    ebx,eax
c00162ee:	e8 15 d8 00 00       	call   c0023b08 <PIT::PIT()>
c00162f3:	59                   	pop    ecx
c00162f4:	5f                   	pop    edi
c00162f5:	53                   	push   ebx
c00162f6:	ff 35 c8 b0 02 c0    	push   DWORD PTR ds:0xc002b0c8
c00162fc:	e8 21 d7 ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0016301:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016303:	6a 00                	push   0x0
c0016305:	6a 00                	push   0x0
c0016307:	56                   	push   esi
c0016308:	53                   	push   ebx
c0016309:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001630c:	83 c4 14             	add    esp,0x14
c001630f:	68 60 01 00 00       	push   0x160
c0016314:	e8 a7 91 ff ff       	call   c000f4c0 <malloc>
c0016319:	89 04 24             	mov    DWORD PTR [esp],eax
c001631c:	89 c7                	mov    edi,eax
c001631e:	e8 95 d6 00 00       	call   c00239b8 <APICTimer::APICTimer()>
c0016323:	6a 00                	push   0x0
c0016325:	6a 00                	push   0x0
c0016327:	56                   	push   esi
c0016328:	57                   	push   edi
c0016329:	e8 8c d5 00 00       	call   c00238ba <APICTimer::open(int, int, void*)>
c001632e:	83 c4 20             	add    esp,0x20
c0016331:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016333:	6a 00                	push   0x0
c0016335:	6a 00                	push   0x0
c0016337:	6a 00                	push   0x0
c0016339:	53                   	push   ebx
c001633a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001633d:	58                   	pop    eax
c001633e:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0016343:	5a                   	pop    edx
c0016344:	57                   	push   edi
c0016345:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001634b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016351:	e8 cc d6 ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0016356:	83 c4 10             	add    esp,0x10
c0016359:	eb 33                	jmp    c001638e <setupTimer(int)+0xec>
c001635b:	83 ec 0c             	sub    esp,0xc
c001635e:	68 5c 01 00 00       	push   0x15c
c0016363:	e8 58 91 ff ff       	call   c000f4c0 <malloc>
c0016368:	89 04 24             	mov    DWORD PTR [esp],eax
c001636b:	89 c3                	mov    ebx,eax
c001636d:	e8 96 d7 00 00       	call   c0023b08 <PIT::PIT()>
c0016372:	58                   	pop    eax
c0016373:	5a                   	pop    edx
c0016374:	53                   	push   ebx
c0016375:	ff 35 c8 b0 02 c0    	push   DWORD PTR ds:0xc002b0c8
c001637b:	e8 a2 d6 ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0016380:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016382:	6a 00                	push   0x0
c0016384:	6a 00                	push   0x0
c0016386:	56                   	push   esi
c0016387:	53                   	push   ebx
c0016388:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001638b:	83 c4 20             	add    esp,0x20
c001638e:	89 d8                	mov    eax,ebx
c0016390:	5b                   	pop    ebx
c0016391:	5e                   	pop    esi
c0016392:	5f                   	pop    edi
c0016393:	c3                   	ret    

c0016394 <VCache::VCache(PhysicalDisk*)>:
c0016394:	53                   	push   ebx
c0016395:	83 ec 18             	sub    esp,0x18
c0016398:	ba 98 85 02 c0       	mov    edx,0xc0028598
c001639d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163a1:	89 10                	mov    DWORD PTR [eax],edx
c00163a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00163ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00163b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00163c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00163cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00163d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00163dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00163e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00163f0:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00163f8:	83 ec 0c             	sub    esp,0xc
c00163fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163ff:	e8 bc 90 ff ff       	call   c000f4c0 <malloc>
c0016404:	83 c4 10             	add    esp,0x10
c0016407:	89 c3                	mov    ebx,eax
c0016409:	83 ec 0c             	sub    esp,0xc
c001640c:	53                   	push   ebx
c001640d:	e8 ea 5d 00 00       	call   c001c1fc <Mutex::Mutex()>
c0016412:	83 c4 10             	add    esp,0x10
c0016415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016419:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001641c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016420:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016424:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001642b:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016432:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016436:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001643c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016440:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016443:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016447:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001644d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016453:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016457:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001645a:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001645d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016461:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016465:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016469:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001646f:	c1 e0 06             	shl    eax,0x6
c0016472:	83 ec 0c             	sub    esp,0xc
c0016475:	50                   	push   eax
c0016476:	e8 45 90 ff ff       	call   c000f4c0 <malloc>
c001647b:	83 c4 10             	add    esp,0x10
c001647e:	89 c2                	mov    edx,eax
c0016480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016484:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016487:	90                   	nop
c0016488:	83 c4 18             	add    esp,0x18
c001648b:	5b                   	pop    ebx
c001648c:	c3                   	ret    
c001648d:	90                   	nop

c001648e <VCache::writeWriteBuffer()>:
c001648e:	53                   	push   ebx
c001648f:	83 ec 14             	sub    esp,0x14
c0016492:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016496:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016499:	8b 10                	mov    edx,DWORD PTR [eax]
c001649b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001649e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00164a1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00164a4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00164a7:	50                   	push   eax
c00164a8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00164ab:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00164b2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00164b9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00164bd:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00164c4:	83 c4 28             	add    esp,0x28
c00164c7:	5b                   	pop    ebx
c00164c8:	c3                   	ret    
c00164c9:	90                   	nop

c00164ca <VCache::~VCache()>:
c00164ca:	83 ec 0c             	sub    esp,0xc
c00164cd:	ba 98 85 02 c0       	mov    edx,0xc0028598
c00164d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d6:	89 10                	mov    DWORD PTR [eax],edx
c00164d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164dc:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00164df:	84 c0                	test   al,al
c00164e1:	74 0f                	je     c00164f2 <VCache::~VCache()+0x28>
c00164e3:	83 ec 0c             	sub    esp,0xc
c00164e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ea:	e8 9f ff ff ff       	call   c001648e <VCache::writeWriteBuffer()>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00164f9:	83 ec 0c             	sub    esp,0xc
c00164fc:	50                   	push   eax
c00164fd:	e8 ce 8f ff ff       	call   c000f4d0 <free>
c0016502:	83 c4 10             	add    esp,0x10
c0016505:	90                   	nop
c0016506:	83 c4 0c             	add    esp,0xc
c0016509:	c3                   	ret    

c001650a <VCache::~VCache()>:
c001650a:	83 ec 0c             	sub    esp,0xc
c001650d:	83 ec 0c             	sub    esp,0xc
c0016510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016514:	e8 b1 ff ff ff       	call   c00164ca <VCache::~VCache()>
c0016519:	83 c4 10             	add    esp,0x10
c001651c:	83 ec 08             	sub    esp,0x8
c001651f:	6a 30                	push   0x30
c0016521:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016525:	e8 29 c0 ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c001652a:	83 c4 10             	add    esp,0x10
c001652d:	83 c4 0c             	add    esp,0xc
c0016530:	c3                   	ret    
c0016531:	90                   	nop

c0016532 <VCache::write(unsigned long long, int, void*)>:
c0016532:	55                   	push   ebp
c0016533:	57                   	push   edi
c0016534:	56                   	push   esi
c0016535:	53                   	push   ebx
c0016536:	83 ec 28             	sub    esp,0x28
c0016539:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001653d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016541:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016545:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016549:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001654c:	e8 0d 61 00 00       	call   c001c65e <Semaphore::acquire()>
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016558:	74 66                	je     c00165c0 <VCache::write(unsigned long long, int, void*)+0x8e>
c001655a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001655d:	99                   	cdq    
c001655e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016562:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016565:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016568:	89 c1                	mov    ecx,eax
c001656a:	89 d0                	mov    eax,edx
c001656c:	31 f1                	xor    ecx,esi
c001656e:	31 f8                	xor    eax,edi
c0016570:	89 ca                	mov    edx,ecx
c0016572:	09 c2                	or     edx,eax
c0016574:	75 3e                	jne    c00165b4 <VCache::write(unsigned long long, int, void*)+0x82>
c0016576:	83 fd 01             	cmp    ebp,0x1
c0016579:	75 39                	jne    c00165b4 <VCache::write(unsigned long long, int, void*)+0x82>
c001657b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001657e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016584:	51                   	push   ecx
c0016585:	50                   	push   eax
c0016586:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001658a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001658e:	0f af c8             	imul   ecx,eax
c0016591:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016594:	51                   	push   ecx
c0016595:	e8 ab a0 fe ff       	call   c0000645 <memcpy>
c001659a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001659d:	83 c4 10             	add    esp,0x10
c00165a0:	40                   	inc    eax
c00165a1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00165a4:	83 f8 40             	cmp    eax,0x40
c00165a7:	75 57                	jne    c0016600 <VCache::write(unsigned long long, int, void*)+0xce>
c00165a9:	83 ec 0c             	sub    esp,0xc
c00165ac:	53                   	push   ebx
c00165ad:	e8 dc fe ff ff       	call   c001648e <VCache::writeWriteBuffer()>
c00165b2:	eb 34                	jmp    c00165e8 <VCache::write(unsigned long long, int, void*)+0xb6>
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	53                   	push   ebx
c00165b8:	e8 d1 fe ff ff       	call   c001648e <VCache::writeWriteBuffer()>
c00165bd:	83 c4 10             	add    esp,0x10
c00165c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00165c3:	83 fd 3f             	cmp    ebp,0x3f
c00165c6:	7f 25                	jg     c00165ed <VCache::write(unsigned long long, int, void*)+0xbb>
c00165c8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00165cb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00165ce:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00165d1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00165d5:	52                   	push   edx
c00165d6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00165dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00165e0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00165e3:	e8 5d a0 fe ff       	call   c0000645 <memcpy>
c00165e8:	83 c4 10             	add    esp,0x10
c00165eb:	eb 13                	jmp    c0016600 <VCache::write(unsigned long long, int, void*)+0xce>
c00165ed:	83 ec 0c             	sub    esp,0xc
c00165f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00165f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00165f6:	55                   	push   ebp
c00165f7:	57                   	push   edi
c00165f8:	56                   	push   esi
c00165f9:	50                   	push   eax
c00165fa:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00165fd:	83 c4 20             	add    esp,0x20
c0016600:	83 ec 0c             	sub    esp,0xc
c0016603:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016606:	e8 db 65 00 00       	call   c001cbe6 <Semaphore::release()>
c001660b:	83 c4 2c             	add    esp,0x2c
c001660e:	31 c0                	xor    eax,eax
c0016610:	5b                   	pop    ebx
c0016611:	5e                   	pop    esi
c0016612:	5f                   	pop    edi
c0016613:	5d                   	pop    ebp
c0016614:	c3                   	ret    
c0016615:	90                   	nop

c0016616 <VCache::read(unsigned long long, int, void*)>:
c0016616:	57                   	push   edi
c0016617:	56                   	push   esi
c0016618:	53                   	push   ebx
c0016619:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001661d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016621:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016625:	83 ec 0c             	sub    esp,0xc
c0016628:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001662b:	e8 2e 60 00 00       	call   c001c65e <Semaphore::acquire()>
c0016630:	83 c4 10             	add    esp,0x10
c0016633:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016637:	74 0c                	je     c0016645 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016639:	83 ec 0c             	sub    esp,0xc
c001663c:	53                   	push   ebx
c001663d:	e8 4c fe ff ff       	call   c001648e <VCache::writeWriteBuffer()>
c0016642:	83 c4 10             	add    esp,0x10
c0016645:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016648:	83 ec 0c             	sub    esp,0xc
c001664b:	8b 10                	mov    edx,DWORD PTR [eax]
c001664d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016651:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016655:	57                   	push   edi
c0016656:	56                   	push   esi
c0016657:	50                   	push   eax
c0016658:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001665b:	83 c4 14             	add    esp,0x14
c001665e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016661:	e8 80 65 00 00       	call   c001cbe6 <Semaphore::release()>
c0016666:	83 c4 10             	add    esp,0x10
c0016669:	31 c0                	xor    eax,eax
c001666b:	5b                   	pop    ebx
c001666c:	5e                   	pop    esi
c001666d:	5f                   	pop    edi
c001666e:	c3                   	ret    
c001666f:	90                   	nop

c0016670 <Video::putrect(int, int, int, int, unsigned int)>:
c0016670:	55                   	push   ebp
c0016671:	57                   	push   edi
c0016672:	56                   	push   esi
c0016673:	53                   	push   ebx
c0016674:	83 ec 1c             	sub    esp,0x1c
c0016677:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001667b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001667f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016683:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016687:	01 e8                	add    eax,ebp
c0016689:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001668d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016691:	01 df                	add    edi,ebx
c0016693:	39 fb                	cmp    ebx,edi
c0016695:	7d 1b                	jge    c00166b2 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0016697:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001669b:	7d 12                	jge    c00166af <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001669d:	8b 16                	mov    edx,DWORD PTR [esi]
c001669f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00166a3:	53                   	push   ebx
c00166a4:	55                   	push   ebp
c00166a5:	45                   	inc    ebp
c00166a6:	56                   	push   esi
c00166a7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	eb e8                	jmp    c0016697 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00166af:	43                   	inc    ebx
c00166b0:	eb e1                	jmp    c0016693 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00166b2:	83 c4 1c             	add    esp,0x1c
c00166b5:	5b                   	pop    ebx
c00166b6:	5e                   	pop    esi
c00166b7:	5f                   	pop    edi
c00166b8:	5d                   	pop    ebp
c00166b9:	c3                   	ret    

c00166ba <Video::blit(unsigned int*, int, int, int, int)>:
c00166ba:	55                   	push   ebp
c00166bb:	57                   	push   edi
c00166bc:	56                   	push   esi
c00166bd:	53                   	push   ebx
c00166be:	83 ec 1c             	sub    esp,0x1c
c00166c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00166c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166c9:	85 c0                	test   eax,eax
c00166cb:	79 02                	jns    c00166cf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00166cd:	31 c0                	xor    eax,eax
c00166cf:	c1 e0 02             	shl    eax,0x2
c00166d2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00166d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166de:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00166e2:	39 d8                	cmp    eax,ebx
c00166e4:	7e 49                	jle    c001672f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00166e6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00166ec:	7c 41                	jl     c001672f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00166ee:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00166f2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00166f6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00166fa:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00166fe:	39 f9                	cmp    ecx,edi
c0016700:	7e 22                	jle    c0016724 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016702:	83 c5 04             	add    ebp,0x4
c0016705:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001670b:	7c 14                	jl     c0016721 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001670d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001670f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016712:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016716:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001671a:	56                   	push   esi
c001671b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001671e:	83 c4 10             	add    esp,0x10
c0016721:	47                   	inc    edi
c0016722:	eb d2                	jmp    c00166f6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016724:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016728:	43                   	inc    ebx
c0016729:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001672d:	eb ab                	jmp    c00166da <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001672f:	83 c4 1c             	add    esp,0x1c
c0016732:	5b                   	pop    ebx
c0016733:	5e                   	pop    esi
c0016734:	5f                   	pop    edi
c0016735:	5d                   	pop    ebp
c0016736:	c3                   	ret    
c0016737:	90                   	nop

c0016738 <Video::clearScreen(unsigned int)>:
c0016738:	57                   	push   edi
c0016739:	56                   	push   esi
c001673a:	53                   	push   ebx
c001673b:	31 db                	xor    ebx,ebx
c001673d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016741:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016747:	7e 1f                	jle    c0016768 <Video::clearScreen(unsigned int)+0x30>
c0016749:	31 ff                	xor    edi,edi
c001674b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016751:	7e 12                	jle    c0016765 <Video::clearScreen(unsigned int)+0x2d>
c0016753:	8b 06                	mov    eax,DWORD PTR [esi]
c0016755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016759:	53                   	push   ebx
c001675a:	57                   	push   edi
c001675b:	47                   	inc    edi
c001675c:	56                   	push   esi
c001675d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016760:	83 c4 10             	add    esp,0x10
c0016763:	eb e6                	jmp    c001674b <Video::clearScreen(unsigned int)+0x13>
c0016765:	43                   	inc    ebx
c0016766:	eb d9                	jmp    c0016741 <Video::clearScreen(unsigned int)+0x9>
c0016768:	5b                   	pop    ebx
c0016769:	5e                   	pop    esi
c001676a:	5f                   	pop    edi
c001676b:	c3                   	ret    

c001676c <Video::putpixel(int, int, unsigned int)>:
c001676c:	c7 44 24 04 a0 85 02 c0 	mov    DWORD PTR [esp+0x4],0xc00285a0
c0016774:	e9 ba be ff ff       	jmp    c0012633 <Dbg::kprintf(char const*, ...)>
c0016779:	90                   	nop

c001677a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001677a:	55                   	push   ebp
c001677b:	57                   	push   edi
c001677c:	56                   	push   esi
c001677d:	53                   	push   ebx
c001677e:	83 ec 1c             	sub    esp,0x1c
c0016781:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0016785:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0016789:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001678d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0016791:	56                   	push   esi
c0016792:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016796:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001679a:	53                   	push   ebx
c001679b:	0f af de             	imul   ebx,esi
c001679e:	55                   	push   ebp
c001679f:	01 eb                	add    ebx,ebp
c00167a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00167a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00167a9:	68 af 85 02 c0       	push   0xc00285af
c00167ae:	e8 80 be ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00167b3:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c00167ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00167be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00167c2:	83 c4 20             	add    esp,0x20
c00167c5:	8d 2c 98             	lea    ebp,[eax+ebx*4]
c00167c8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00167cc:	89 f2                	mov    edx,esi
c00167ce:	2b 54 24 38          	sub    edx,DWORD PTR [esp+0x38]
c00167d2:	39 54 24 48          	cmp    DWORD PTR [esp+0x48],edx
c00167d6:	7e 27                	jle    c00167ff <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x85>
c00167d8:	31 db                	xor    ebx,ebx
c00167da:	3b 5c 24 44          	cmp    ebx,DWORD PTR [esp+0x44]
c00167de:	7d 18                	jge    c00167f8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x7e>
c00167e0:	8b 17                	mov    edx,DWORD PTR [edi]
c00167e2:	ff 74 9d 00          	push   DWORD PTR [ebp+ebx*4+0x0]
c00167e6:	56                   	push   esi
c00167e7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00167eb:	01 d9                	add    ecx,ebx
c00167ed:	43                   	inc    ebx
c00167ee:	51                   	push   ecx
c00167ef:	57                   	push   edi
c00167f0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	eb e2                	jmp    c00167da <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00167f8:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00167fc:	46                   	inc    esi
c00167fd:	eb cd                	jmp    c00167cc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x52>
c00167ff:	83 c4 1c             	add    esp,0x1c
c0016802:	5b                   	pop    ebx
c0016803:	5e                   	pop    esi
c0016804:	5f                   	pop    edi
c0016805:	5d                   	pop    ebp
c0016806:	c3                   	ret    
c0016807:	90                   	nop

c0016808 <Video::Video(char const*)>:
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001680f:	83 ec 08             	sub    esp,0x8
c0016812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016816:	50                   	push   eax
c0016817:	e8 f6 d3 ff ff       	call   c0013c12 <Device::Device(char const*)>
c001681c:	83 c4 10             	add    esp,0x10
c001681f:	ba 38 86 02 c0       	mov    edx,0xc0028638
c0016824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016828:	89 10                	mov    DWORD PTR [eax],edx
c001682a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016838:	90                   	nop
c0016839:	83 c4 0c             	add    esp,0xc
c001683c:	c3                   	ret    
c001683d:	90                   	nop

c001683e <Video::~Video()>:
c001683e:	83 ec 0c             	sub    esp,0xc
c0016841:	ba 38 86 02 c0       	mov    edx,0xc0028638
c0016846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684a:	89 10                	mov    DWORD PTR [eax],edx
c001684c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	50                   	push   eax
c0016854:	e8 9b d0 ff ff       	call   c00138f4 <Device::~Device()>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	90                   	nop
c001685d:	83 c4 0c             	add    esp,0xc
c0016860:	c3                   	ret    
c0016861:	90                   	nop

c0016862 <Video::~Video()>:
c0016862:	83 ec 0c             	sub    esp,0xc
c0016865:	83 ec 0c             	sub    esp,0xc
c0016868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001686c:	e8 cd ff ff ff       	call   c001683e <Video::~Video()>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	83 ec 08             	sub    esp,0x8
c0016877:	68 64 01 00 00       	push   0x164
c001687c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016880:	e8 ce bc ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0016885:	83 c4 10             	add    esp,0x10
c0016888:	83 c4 0c             	add    esp,0xc
c001688b:	c3                   	ret    

c001688c <Video::isMonochrome()>:
c001688c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016890:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016896:	c3                   	ret    
c0016897:	90                   	nop

c0016898 <Video::getWidth()>:
c0016898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001689c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168a2:	c3                   	ret    
c00168a3:	90                   	nop

c00168a4 <Video::getHeight()>:
c00168a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168ae:	c3                   	ret    
c00168af:	90                   	nop

c00168b0 <Video::drawCursor(int, int, unsigned char*, int)>:
c00168b0:	55                   	push   ebp
c00168b1:	57                   	push   edi
c00168b2:	56                   	push   esi
c00168b3:	53                   	push   ebx
c00168b4:	83 ec 2c             	sub    esp,0x2c
c00168b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00168bb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00168bf:	83 f8 01             	cmp    eax,0x1
c00168c2:	19 c9                	sbb    ecx,ecx
c00168c4:	31 db                	xor    ebx,ebx
c00168c6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00168ca:	89 cd                	mov    ebp,ecx
c00168cc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00168d4:	f7 d5                	not    ebp
c00168d6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00168dc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00168e0:	01 d8                	add    eax,ebx
c00168e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168e6:	56                   	push   esi
c00168e7:	e8 b8 ff ff ff       	call   c00168a4 <Video::getHeight()>
c00168ec:	59                   	pop    ecx
c00168ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00168f1:	7e 70                	jle    c0016963 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00168f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00168f7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00168fb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00168fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016902:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016906:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001690d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016911:	89 f8                	mov    eax,edi
c0016913:	83 c0 20             	add    eax,0x20
c0016916:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001691a:	56                   	push   esi
c001691b:	e8 78 ff ff ff       	call   c0016898 <Video::getWidth()>
c0016920:	5a                   	pop    edx
c0016921:	39 c7                	cmp    edi,eax
c0016923:	7d 34                	jge    c0016959 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016925:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001692a:	74 05                	je     c0016931 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001692c:	8b 06                	mov    eax,DWORD PTR [esi]
c001692e:	55                   	push   ebp
c001692f:	eb 0d                	jmp    c001693e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016931:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016936:	74 12                	je     c001694a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016938:	8b 06                	mov    eax,DWORD PTR [esi]
c001693a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001693e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016942:	57                   	push   edi
c0016943:	56                   	push   esi
c0016944:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016947:	83 c4 10             	add    esp,0x10
c001694a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001694e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016952:	47                   	inc    edi
c0016953:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016957:	75 c1                	jne    c001691a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016959:	43                   	inc    ebx
c001695a:	83 fb 20             	cmp    ebx,0x20
c001695d:	0f 85 79 ff ff ff    	jne    c00168dc <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016963:	83 c4 2c             	add    esp,0x2c
c0016966:	5b                   	pop    ebx
c0016967:	5e                   	pop    esi
c0016968:	5f                   	pop    edi
c0016969:	5d                   	pop    ebp
c001696a:	c3                   	ret    
c001696b:	90                   	nop

c001696c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001696c:	55                   	push   ebp
c001696d:	57                   	push   edi
c001696e:	56                   	push   esi
c001696f:	53                   	push   ebx
c0016970:	83 ec 28             	sub    esp,0x28
c0016973:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016977:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001697b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001697f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016983:	c1 e7 08             	shl    edi,0x8
c0016986:	01 c7                	add    edi,eax
c0016988:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001698c:	c1 e0 08             	shl    eax,0x8
c001698f:	01 d0                	add    eax,edx
c0016991:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016999:	0f af c7             	imul   eax,edi
c001699c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00169a3:	50                   	push   eax
c00169a4:	e8 17 8b ff ff       	call   c000f4c0 <malloc>
c00169a9:	83 c4 10             	add    esp,0x10
c00169ac:	89 c5                	mov    ebp,eax
c00169ae:	85 c0                	test   eax,eax
c00169b0:	75 15                	jne    c00169c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00169b2:	83 ec 0c             	sub    esp,0xc
c00169b5:	68 d4 85 02 c0       	push   0xc00285d4
c00169ba:	e8 74 bc ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	e9 1c 01 00 00       	jmp    c0016ae3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00169c7:	be 12 00 00 00       	mov    esi,0x12
c00169cc:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00169d0:	74 11                	je     c00169e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00169d2:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00169d6:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00169da:	c1 fe 03             	sar    esi,0x3
c00169dd:	0f af f0             	imul   esi,eax
c00169e0:	83 c6 12             	add    esi,0x12
c00169e3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00169e7:	74 04                	je     c00169ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00169e9:	85 ff                	test   edi,edi
c00169eb:	75 12                	jne    c00169ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00169ed:	83 ec 0c             	sub    esp,0xc
c00169f0:	68 eb 85 02 c0       	push   0xc00285eb
c00169f5:	e8 39 bc ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00169fa:	e9 ce 00 00 00       	jmp    c0016acd <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00169ff:	52                   	push   edx
c0016a00:	52                   	push   edx
c0016a01:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016a05:	50                   	push   eax
c0016a06:	68 00 86 02 c0       	push   0xc0028600
c0016a0b:	e8 23 bc ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0016a10:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016a14:	83 c4 10             	add    esp,0x10
c0016a17:	80 fa 02             	cmp    dl,0x2
c0016a1a:	0f 85 98 00 00 00    	jne    c0016ab8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016a20:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016a25:	75 10                	jne    c0016a37 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016a27:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016a2b:	75 0a                	jne    c0016a37 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016a2d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016a30:	83 e8 18             	sub    eax,0x18
c0016a33:	a8 f7                	test   al,0xf7
c0016a35:	74 0a                	je     c0016a41 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016a37:	83 ec 0c             	sub    esp,0xc
c0016a3a:	68 0d 86 02 c0       	push   0xc002860d
c0016a3f:	eb 7f                	jmp    c0016ac0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016a41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016a51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016a55:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a5d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016a61:	75 0c                	jne    c0016a6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016a63:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016a68:	c1 e0 18             	shl    eax,0x18
c0016a6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a6f:	41                   	inc    ecx
c0016a70:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016a75:	c1 e2 10             	shl    edx,0x10
c0016a78:	89 d0                	mov    eax,edx
c0016a7a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016a7f:	c1 e2 08             	shl    edx,0x8
c0016a82:	09 c2                	or     edx,eax
c0016a84:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016a88:	09 c2                	or     edx,eax
c0016a8a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016a8e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016a92:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016a96:	c1 f8 03             	sar    eax,0x3
c0016a99:	01 c6                	add    esi,eax
c0016a9b:	89 c8                	mov    eax,ecx
c0016a9d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016aa1:	39 c7                	cmp    edi,eax
c0016aa3:	7f b0                	jg     c0016a55 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016aa5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016aa9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016aad:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016ab0:	7e 22                	jle    c0016ad4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016ab2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016ab6:	eb 99                	jmp    c0016a51 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016ab8:	50                   	push   eax
c0016ab9:	50                   	push   eax
c0016aba:	52                   	push   edx
c0016abb:	68 1b 86 02 c0       	push   0xc002861b
c0016ac0:	e8 6e bb ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0016ac5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ac8:	e8 03 8a ff ff       	call   c000f4d0 <free>
c0016acd:	83 c4 10             	add    esp,0x10
c0016ad0:	31 ed                	xor    ebp,ebp
c0016ad2:	eb 0f                	jmp    c0016ae3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016ad4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ad8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016adb:	89 38                	mov    DWORD PTR [eax],edi
c0016add:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ae1:	89 08                	mov    DWORD PTR [eax],ecx
c0016ae3:	83 c4 1c             	add    esp,0x1c
c0016ae6:	89 e8                	mov    eax,ebp
c0016ae8:	5b                   	pop    ebx
c0016ae9:	5e                   	pop    esi
c0016aea:	5f                   	pop    edi
c0016aeb:	5d                   	pop    ebp
c0016aec:	c3                   	ret    
c0016aed:	90                   	nop

c0016aee <Video::putTGA(int, int, unsigned char*, int)>:
c0016aee:	55                   	push   ebp
c0016aef:	57                   	push   edi
c0016af0:	56                   	push   esi
c0016af1:	53                   	push   ebx
c0016af2:	83 ec 28             	sub    esp,0x28
c0016af5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016af9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016afd:	50                   	push   eax
c0016afe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016b02:	50                   	push   eax
c0016b03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016b07:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016b0b:	56                   	push   esi
c0016b0c:	e8 5b fe ff ff       	call   c001696c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016b11:	83 c4 20             	add    esp,0x20
c0016b14:	85 c0                	test   eax,eax
c0016b16:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016b1a:	74 35                	je     c0016b51 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016b1c:	89 c7                	mov    edi,eax
c0016b1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b22:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016b26:	39 d8                	cmp    eax,ebx
c0016b28:	7e 27                	jle    c0016b51 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016b2a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b32:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016b36:	39 e8                	cmp    eax,ebp
c0016b38:	7e 14                	jle    c0016b4e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016b3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b3c:	83 c7 04             	add    edi,0x4
c0016b3f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016b42:	53                   	push   ebx
c0016b43:	55                   	push   ebp
c0016b44:	45                   	inc    ebp
c0016b45:	56                   	push   esi
c0016b46:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	eb e0                	jmp    c0016b2e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016b4e:	43                   	inc    ebx
c0016b4f:	eb cd                	jmp    c0016b1e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016b51:	83 c4 1c             	add    esp,0x1c
c0016b54:	5b                   	pop    ebx
c0016b55:	5e                   	pop    esi
c0016b56:	5f                   	pop    edi
c0016b57:	5d                   	pop    ebp
c0016b58:	c3                   	ret    
c0016b59:	90                   	nop

c0016b5a <ACPI::close(int, int, void*)>:
c0016b5a:	83 ec 1c             	sub    esp,0x1c
c0016b5d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016b65:	74 0a                	je     c0016b71 <ACPI::close(int, int, void*)+0x17>
c0016b67:	b8 00 00 00 00       	mov    eax,0x0
c0016b6c:	e9 9a 00 00 00       	jmp    c0016c0b <ACPI::close(int, int, void*)+0xb1>
c0016b71:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016b76:	75 37                	jne    c0016baf <ACPI::close(int, int, void*)+0x55>
c0016b78:	83 ec 0c             	sub    esp,0xc
c0016b7b:	68 78 86 02 c0       	push   0xc0028678
c0016b80:	e8 ae ba ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0016b85:	83 c4 10             	add    esp,0x10
c0016b88:	a1 48 b7 02 c0       	mov    eax,ds:0xc002b748
c0016b8d:	85 c0                	test   eax,eax
c0016b8f:	74 07                	je     c0016b98 <ACPI::close(int, int, void*)+0x3e>
c0016b91:	a1 48 b7 02 c0       	mov    eax,ds:0xc002b748
c0016b96:	ff d0                	call   eax
c0016b98:	83 ec 0c             	sub    esp,0xc
c0016b9b:	68 4c 87 02 c0       	push   0xc002874c
c0016ba0:	e8 f2 24 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0016ba5:	83 c4 10             	add    esp,0x10
c0016ba8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016bad:	eb 5c                	jmp    c0016c0b <ACPI::close(int, int, void*)+0xb1>
c0016baf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016bb4:	75 50                	jne    c0016c06 <ACPI::close(int, int, void*)+0xac>
c0016bb6:	a1 44 b7 02 c0       	mov    eax,ds:0xc002b744
c0016bbb:	85 c0                	test   eax,eax
c0016bbd:	74 07                	je     c0016bc6 <ACPI::close(int, int, void*)+0x6c>
c0016bbf:	a1 44 b7 02 c0       	mov    eax,ds:0xc002b744
c0016bc4:	ff d0                	call   eax
c0016bc6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016bcb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016bd0:	83 e0 02             	and    eax,0x2
c0016bd3:	74 1c                	je     c0016bf1 <ACPI::close(int, int, void*)+0x97>
c0016bd5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016be0:	89 c2                	mov    edx,eax
c0016be2:	ec                   	in     al,dx
c0016be3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016be7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016beb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016bef:	eb da                	jmp    c0016bcb <ACPI::close(int, int, void*)+0x71>
c0016bf1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016bf8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016bfd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016c01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c05:	ee                   	out    dx,al
c0016c06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c0b:	83 c4 1c             	add    esp,0x1c
c0016c0e:	c3                   	ret    

c0016c0f <findRSDP()>:
c0016c0f:	83 ec 1c             	sub    esp,0x1c
c0016c12:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0016c17:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016c1d:	83 e0 04             	and    eax,0x4
c0016c20:	84 c0                	test   al,al
c0016c22:	75 07                	jne    c0016c2b <findRSDP()+0x1c>
c0016c24:	b8 00 00 00 00       	mov    eax,0x0
c0016c29:	eb 6a                	jmp    c0016c95 <findRSDP()+0x86>
c0016c2b:	a1 10 b1 02 c0       	mov    eax,ds:0xc002b110
c0016c30:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016c35:	7f 1b                	jg     c0016c52 <findRSDP()+0x43>
c0016c37:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0016c3c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016c42:	83 e2 fb             	and    edx,0xfffffffb
c0016c45:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016c4b:	b8 00 00 00 00       	mov    eax,0x0
c0016c50:	eb 43                	jmp    c0016c95 <findRSDP()+0x86>
c0016c52:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016c5a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016c62:	77 2c                	ja     c0016c90 <findRSDP()+0x81>
c0016c64:	83 ec 04             	sub    esp,0x4
c0016c67:	6a 08                	push   0x8
c0016c69:	68 85 86 02 c0       	push   0xc0028685
c0016c6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c72:	e8 6b 99 fe ff       	call   c00005e2 <memcmp>
c0016c77:	83 c4 10             	add    esp,0x10
c0016c7a:	85 c0                	test   eax,eax
c0016c7c:	0f 94 c0             	sete   al
c0016c7f:	84 c0                	test   al,al
c0016c81:	74 06                	je     c0016c89 <findRSDP()+0x7a>
c0016c83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c87:	eb 0c                	jmp    c0016c95 <findRSDP()+0x86>
c0016c89:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016c8e:	eb ca                	jmp    c0016c5a <findRSDP()+0x4b>
c0016c90:	b8 00 00 00 00       	mov    eax,0x0
c0016c95:	83 c4 1c             	add    esp,0x1c
c0016c98:	c3                   	ret    

c0016c99 <loadACPITables(unsigned char*)>:
c0016c99:	56                   	push   esi
c0016c9a:	53                   	push   ebx
c0016c9b:	83 ec 44             	sub    esp,0x44
c0016c9e:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0016ca3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ca9:	83 e0 04             	and    eax,0x4
c0016cac:	84 c0                	test   al,al
c0016cae:	0f 84 05 02 00 00    	je     c0016eb9 <loadACPITables(unsigned char*)+0x220>
c0016cb4:	a0 60 b9 02 c0       	mov    al,ds:0xc002b960
c0016cb9:	84 c0                	test   al,al
c0016cbb:	74 75                	je     c0016d32 <loadACPITables(unsigned char*)+0x99>
c0016cbd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016cc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ccc:	83 e8 24             	sub    eax,0x24
c0016ccf:	c1 e8 03             	shr    eax,0x3
c0016cd2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016cd6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016cde:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ce2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016ce6:	0f 8d b2 00 00 00    	jge    c0016d9e <loadACPITables(unsigned char*)+0x105>
c0016cec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016cf0:	83 c0 24             	add    eax,0x24
c0016cf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016cf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cfb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016cff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d03:	c1 e0 03             	shl    eax,0x3
c0016d06:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016d0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d0e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d13:	89 c1                	mov    ecx,eax
c0016d15:	a1 4c b7 02 c0       	mov    eax,ds:0xc002b74c
c0016d1a:	8d 50 01             	lea    edx,[eax+0x1]
c0016d1d:	89 15 4c b7 02 c0    	mov    DWORD PTR ds:0xc002b74c,edx
c0016d23:	89 ca                	mov    edx,ecx
c0016d25:	89 14 c5 64 b7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd489c],edx
c0016d2c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016d30:	eb ac                	jmp    c0016cde <loadACPITables(unsigned char*)+0x45>
c0016d32:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016d41:	83 e8 24             	sub    eax,0x24
c0016d44:	c1 e8 02             	shr    eax,0x2
c0016d47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d4b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016d53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d57:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016d5b:	7d 41                	jge    c0016d9e <loadACPITables(unsigned char*)+0x105>
c0016d5d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d61:	83 c0 24             	add    eax,0x24
c0016d64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d74:	c1 e0 02             	shl    eax,0x2
c0016d77:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016d7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016d81:	a1 4c b7 02 c0       	mov    eax,ds:0xc002b74c
c0016d86:	8d 50 01             	lea    edx,[eax+0x1]
c0016d89:	89 15 4c b7 02 c0    	mov    DWORD PTR ds:0xc002b74c,edx
c0016d8f:	89 ca                	mov    edx,ecx
c0016d91:	89 14 c5 64 b7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd489c],edx
c0016d98:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016d9c:	eb b5                	jmp    c0016d53 <loadACPITables(unsigned char*)+0xba>
c0016d9e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016da6:	a1 4c b7 02 c0       	mov    eax,ds:0xc002b74c
c0016dab:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016daf:	0f 8d 05 01 00 00    	jge    c0016eba <loadACPITables(unsigned char*)+0x221>
c0016db5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016db9:	8b 04 c5 64 b7 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd489c]
c0016dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd0:	25 ff 0f 00 00       	and    eax,0xfff
c0016dd5:	89 c6                	mov    esi,eax
c0016dd7:	e8 f7 a9 ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c0016ddc:	89 c3                	mov    ebx,eax
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	6a 01                	push   0x1
c0016de3:	e8 5b a8 ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c0016de8:	83 c4 10             	add    esp,0x10
c0016deb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016def:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016df5:	83 ec 0c             	sub    esp,0xc
c0016df8:	6a 01                	push   0x1
c0016dfa:	6a 01                	push   0x1
c0016dfc:	50                   	push   eax
c0016dfd:	52                   	push   edx
c0016dfe:	53                   	push   ebx
c0016dff:	e8 fe b1 ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e04:	83 c4 20             	add    esp,0x20
c0016e07:	09 f0                	or     eax,esi
c0016e09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e11:	c1 e0 03             	shl    eax,0x3
c0016e14:	05 60 b7 02 c0       	add    eax,0xc002b760
c0016e19:	83 ec 04             	sub    esp,0x4
c0016e1c:	6a 04                	push   0x4
c0016e1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e22:	50                   	push   eax
c0016e23:	e8 1d 98 fe ff       	call   c0000645 <memcpy>
c0016e28:	83 c4 10             	add    esp,0x10
c0016e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e3a:	05 00 10 00 00       	add    eax,0x1000
c0016e3f:	c1 e8 0c             	shr    eax,0xc
c0016e42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e51:	25 ff 0f 00 00       	and    eax,0xfff
c0016e56:	89 c6                	mov    esi,eax
c0016e58:	e8 76 a9 ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c0016e5d:	89 c3                	mov    ebx,eax
c0016e5f:	83 ec 0c             	sub    esp,0xc
c0016e62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e66:	e8 d8 a7 ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c0016e6b:	83 c4 10             	add    esp,0x10
c0016e6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e72:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	6a 01                	push   0x1
c0016e7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e81:	50                   	push   eax
c0016e82:	52                   	push   edx
c0016e83:	53                   	push   ebx
c0016e84:	e8 79 b1 ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e89:	83 c4 20             	add    esp,0x20
c0016e8c:	09 f0                	or     eax,esi
c0016e8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e92:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016e95:	83 ec 0c             	sub    esp,0xc
c0016e98:	50                   	push   eax
c0016e99:	e8 09 ab ff ff       	call   c00119a7 <Virt::freeKernelVirtualPages(unsigned long)>
c0016e9e:	83 c4 10             	add    esp,0x10
c0016ea1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ea5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ea9:	89 14 c5 64 b7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd489c],edx
c0016eb0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016eb4:	e9 ed fe ff ff       	jmp    c0016da6 <loadACPITables(unsigned char*)+0x10d>
c0016eb9:	90                   	nop
c0016eba:	83 c4 44             	add    esp,0x44
c0016ebd:	5b                   	pop    ebx
c0016ebe:	5e                   	pop    esi
c0016ebf:	c3                   	ret    

c0016ec0 <findRSDT(unsigned char*)>:
c0016ec0:	56                   	push   esi
c0016ec1:	53                   	push   ebx
c0016ec2:	83 ec 44             	sub    esp,0x44
c0016ec5:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0016eca:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ed0:	83 e0 04             	and    eax,0x4
c0016ed3:	84 c0                	test   al,al
c0016ed5:	75 0a                	jne    c0016ee1 <findRSDT(unsigned char*)+0x21>
c0016ed7:	b8 00 00 00 00       	mov    eax,0x0
c0016edc:	e9 f7 00 00 00       	jmp    c0016fd8 <findRSDT(unsigned char*)+0x118>
c0016ee1:	83 ec 04             	sub    esp,0x4
c0016ee4:	6a 24                	push   0x24
c0016ee6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016eea:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016eee:	50                   	push   eax
c0016eef:	e8 51 97 fe ff       	call   c0000645 <memcpy>
c0016ef4:	83 c4 10             	add    esp,0x10
c0016ef7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016efb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016eff:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016f07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f0f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016f13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f17:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f1f:	25 ff 0f 00 00       	and    eax,0xfff
c0016f24:	89 c6                	mov    esi,eax
c0016f26:	e8 a8 a8 ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c0016f2b:	89 c3                	mov    ebx,eax
c0016f2d:	83 ec 0c             	sub    esp,0xc
c0016f30:	6a 02                	push   0x2
c0016f32:	e8 0c a7 ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c0016f37:	83 c4 10             	add    esp,0x10
c0016f3a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f3e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f44:	83 ec 0c             	sub    esp,0xc
c0016f47:	6a 01                	push   0x1
c0016f49:	6a 02                	push   0x2
c0016f4b:	50                   	push   eax
c0016f4c:	52                   	push   edx
c0016f4d:	53                   	push   ebx
c0016f4e:	e8 af b0 ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f53:	83 c4 20             	add    esp,0x20
c0016f56:	09 f0                	or     eax,esi
c0016f58:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016f5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f60:	25 ff 0f 00 00       	and    eax,0xfff
c0016f65:	89 c6                	mov    esi,eax
c0016f67:	e8 67 a8 ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c0016f6c:	89 c3                	mov    ebx,eax
c0016f6e:	83 ec 0c             	sub    esp,0xc
c0016f71:	6a 02                	push   0x2
c0016f73:	e8 cb a6 ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c0016f78:	83 c4 10             	add    esp,0x10
c0016f7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f7f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f85:	83 ec 0c             	sub    esp,0xc
c0016f88:	6a 01                	push   0x1
c0016f8a:	6a 02                	push   0x2
c0016f8c:	50                   	push   eax
c0016f8d:	52                   	push   edx
c0016f8e:	53                   	push   ebx
c0016f8f:	e8 6e b0 ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f94:	83 c4 20             	add    esp,0x20
c0016f97:	09 f0                	or     eax,esi
c0016f99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f9d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016fa2:	75 11                	jne    c0016fb5 <findRSDT(unsigned char*)+0xf5>
c0016fa4:	c6 05 60 b9 02 c0 00 	mov    BYTE PTR ds:0xc002b960,0x0
c0016fab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016faf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016fb3:	eb 1f                	jmp    c0016fd4 <findRSDT(unsigned char*)+0x114>
c0016fb5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016fba:	75 11                	jne    c0016fcd <findRSDT(unsigned char*)+0x10d>
c0016fbc:	c6 05 60 b9 02 c0 01 	mov    BYTE PTR ds:0xc002b960,0x1
c0016fc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fc7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016fcb:	eb 07                	jmp    c0016fd4 <findRSDT(unsigned char*)+0x114>
c0016fcd:	b8 00 00 00 00       	mov    eax,0x0
c0016fd2:	eb 04                	jmp    c0016fd8 <findRSDT(unsigned char*)+0x118>
c0016fd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fd8:	83 c4 44             	add    esp,0x44
c0016fdb:	5b                   	pop    ebx
c0016fdc:	5e                   	pop    esi
c0016fdd:	c3                   	ret    

c0016fde <findDataTable(unsigned char*, char*)>:
c0016fde:	83 ec 1c             	sub    esp,0x1c
c0016fe1:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0016fe6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016fec:	83 e0 04             	and    eax,0x4
c0016fef:	84 c0                	test   al,al
c0016ff1:	75 07                	jne    c0016ffa <findDataTable(unsigned char*, char*)+0x1c>
c0016ff3:	b8 00 00 00 00       	mov    eax,0x0
c0016ff8:	eb 7c                	jmp    c0017076 <findDataTable(unsigned char*, char*)+0x98>
c0016ffa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017002:	a1 4c b7 02 c0       	mov    eax,ds:0xc002b74c
c0017007:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001700b:	7d 3a                	jge    c0017047 <findDataTable(unsigned char*, char*)+0x69>
c001700d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017011:	c1 e0 03             	shl    eax,0x3
c0017014:	05 60 b7 02 c0       	add    eax,0xc002b760
c0017019:	83 ec 04             	sub    esp,0x4
c001701c:	6a 04                	push   0x4
c001701e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017022:	50                   	push   eax
c0017023:	e8 ba 95 fe ff       	call   c00005e2 <memcmp>
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	85 c0                	test   eax,eax
c001702d:	0f 94 c0             	sete   al
c0017030:	84 c0                	test   al,al
c0017032:	74 0d                	je     c0017041 <findDataTable(unsigned char*, char*)+0x63>
c0017034:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017038:	8b 04 c5 64 b7 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd489c]
c001703f:	eb 35                	jmp    c0017076 <findDataTable(unsigned char*, char*)+0x98>
c0017041:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017045:	eb bb                	jmp    c0017002 <findDataTable(unsigned char*, char*)+0x24>
c0017047:	a0 60 b9 02 c0       	mov    al,ds:0xc002b960
c001704c:	84 c0                	test   al,al
c001704e:	74 07                	je     c0017057 <findDataTable(unsigned char*, char*)+0x79>
c0017050:	b8 58 00 00 00       	mov    eax,0x58
c0017055:	eb 05                	jmp    c001705c <findDataTable(unsigned char*, char*)+0x7e>
c0017057:	b8 52 00 00 00       	mov    eax,0x52
c001705c:	83 ec 04             	sub    esp,0x4
c001705f:	50                   	push   eax
c0017060:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017064:	68 70 87 02 c0       	push   0xc0028770
c0017069:	e8 c5 b5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001706e:	83 c4 10             	add    esp,0x10
c0017071:	b8 00 00 00 00       	mov    eax,0x0
c0017076:	83 c4 1c             	add    esp,0x1c
c0017079:	c3                   	ret    

c001707a <scanMADT()>:
c001707a:	53                   	push   ebx
c001707b:	83 ec 38             	sub    esp,0x38
c001707e:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0017083:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017089:	83 e0 04             	and    eax,0x4
c001708c:	84 c0                	test   al,al
c001708e:	0f 84 63 04 00 00    	je     c00174f7 <scanMADT()+0x47d>
c0017094:	e8 76 fb ff ff       	call   c0016c0f <findRSDP()>
c0017099:	a3 6c b9 02 c0       	mov    ds:0xc002b96c,eax
c001709e:	a1 6c b9 02 c0       	mov    eax,ds:0xc002b96c
c00170a3:	85 c0                	test   eax,eax
c00170a5:	75 19                	jne    c00170c0 <scanMADT()+0x46>
c00170a7:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00170ac:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170b2:	83 e2 fb             	and    edx,0xfffffffb
c00170b5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00170bb:	e9 3b 04 00 00       	jmp    c00174fb <scanMADT()+0x481>
c00170c0:	a1 6c b9 02 c0       	mov    eax,ds:0xc002b96c
c00170c5:	83 ec 0c             	sub    esp,0xc
c00170c8:	50                   	push   eax
c00170c9:	e8 f2 fd ff ff       	call   c0016ec0 <findRSDT(unsigned char*)>
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	a3 68 b9 02 c0       	mov    ds:0xc002b968,eax
c00170d6:	a1 68 b9 02 c0       	mov    eax,ds:0xc002b968
c00170db:	85 c0                	test   eax,eax
c00170dd:	75 19                	jne    c00170f8 <scanMADT()+0x7e>
c00170df:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00170e4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170ea:	83 e2 fb             	and    edx,0xfffffffb
c00170ed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00170f3:	e9 03 04 00 00       	jmp    c00174fb <scanMADT()+0x481>
c00170f8:	a1 68 b9 02 c0       	mov    eax,ds:0xc002b968
c00170fd:	83 ec 0c             	sub    esp,0xc
c0017100:	50                   	push   eax
c0017101:	e8 93 fb ff ff       	call   c0016c99 <loadACPITables(unsigned char*)>
c0017106:	83 c4 10             	add    esp,0x10
c0017109:	a1 68 b9 02 c0       	mov    eax,ds:0xc002b968
c001710e:	83 ec 08             	sub    esp,0x8
c0017111:	68 8e 86 02 c0       	push   0xc002868e
c0017116:	50                   	push   eax
c0017117:	e8 c2 fe ff ff       	call   c0016fde <findDataTable(unsigned char*, char*)>
c001711c:	83 c4 10             	add    esp,0x10
c001711f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017123:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017128:	75 19                	jne    c0017143 <scanMADT()+0xc9>
c001712a:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001712f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017135:	83 e2 fe             	and    edx,0xfffffffe
c0017138:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001713e:	e9 b8 03 00 00       	jmp    c00174fb <scanMADT()+0x481>
c0017143:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001714b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001714f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017152:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017156:	0f 87 9f 03 00 00    	ja     c00174fb <scanMADT()+0x481>
c001715c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017164:	0f 87 91 03 00 00    	ja     c00174fb <scanMADT()+0x481>
c001716a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001716e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017172:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017176:	8d 50 01             	lea    edx,[eax+0x1]
c0017179:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001717d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017181:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017185:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017189:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001718d:	8d 50 01             	lea    edx,[eax+0x1]
c0017190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017194:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017198:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001719c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00171a0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00171a5:	0f 86 4f 03 00 00    	jbe    c00174fa <scanMADT()+0x480>
c00171ab:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00171b0:	75 57                	jne    c0017209 <scanMADT()+0x18f>
c00171b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171b6:	8d 50 01             	lea    edx,[eax+0x1]
c00171b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00171bd:	8a 15 60 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bb60
c00171c3:	0f b6 d2             	movzx  edx,dl
c00171c6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00171ca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00171ce:	88 82 a0 bb 02 c0    	mov    BYTE PTR [edx-0x3ffd4460],al
c00171d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171d8:	8d 50 01             	lea    edx,[eax+0x1]
c00171db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00171df:	8a 15 60 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bb60
c00171e5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00171e8:	88 0d 60 bb 02 c0    	mov    BYTE PTR ds:0xc002bb60,cl
c00171ee:	0f b6 d2             	movzx  edx,dl
c00171f1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00171f5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00171f9:	88 82 80 bb 02 c0    	mov    BYTE PTR [edx-0x3ffd4480],al
c00171ff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017204:	e9 da 02 00 00       	jmp    c00174e3 <scanMADT()+0x469>
c0017209:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001720e:	0f 85 14 01 00 00    	jne    c0017328 <scanMADT()+0x2ae>
c0017214:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017218:	8d 50 01             	lea    edx,[eax+0x1]
c001721b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001721f:	8a 15 20 ba 02 c0    	mov    dl,BYTE PTR ds:0xc002ba20
c0017225:	0f b6 d2             	movzx  edx,dl
c0017228:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001722c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017230:	88 82 40 ba 02 c0    	mov    BYTE PTR [edx-0x3ffd45c0],al
c0017236:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001723a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001723e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017242:	01 d0                	add    eax,edx
c0017244:	83 c0 2c             	add    eax,0x2c
c0017247:	8a 00                	mov    al,BYTE PTR [eax]
c0017249:	0f b6 d0             	movzx  edx,al
c001724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017250:	8d 48 01             	lea    ecx,[eax+0x1]
c0017253:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017257:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001725b:	0f b6 c0             	movzx  eax,al
c001725e:	c1 e0 08             	shl    eax,0x8
c0017261:	89 d1                	mov    ecx,edx
c0017263:	09 c1                	or     ecx,eax
c0017265:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017269:	8d 50 02             	lea    edx,[eax+0x2]
c001726c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017270:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017274:	0f b6 c0             	movzx  eax,al
c0017277:	c1 e0 10             	shl    eax,0x10
c001727a:	09 c1                	or     ecx,eax
c001727c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017280:	8d 50 03             	lea    edx,[eax+0x3]
c0017283:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017287:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001728b:	0f b6 c0             	movzx  eax,al
c001728e:	c1 e0 18             	shl    eax,0x18
c0017291:	09 c1                	or     ecx,eax
c0017293:	89 ca                	mov    edx,ecx
c0017295:	a0 20 ba 02 c0       	mov    al,ds:0xc002ba20
c001729a:	0f b6 c0             	movzx  eax,al
c001729d:	89 14 85 60 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45a0],edx
c00172a4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00172a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172b1:	01 d0                	add    eax,edx
c00172b3:	83 c0 2c             	add    eax,0x2c
c00172b6:	8a 00                	mov    al,BYTE PTR [eax]
c00172b8:	0f b6 d0             	movzx  edx,al
c00172bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00172c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00172c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00172ca:	0f b6 c0             	movzx  eax,al
c00172cd:	c1 e0 08             	shl    eax,0x8
c00172d0:	89 d1                	mov    ecx,edx
c00172d2:	09 c1                	or     ecx,eax
c00172d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172d8:	8d 50 02             	lea    edx,[eax+0x2]
c00172db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00172df:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00172e3:	0f b6 c0             	movzx  eax,al
c00172e6:	c1 e0 10             	shl    eax,0x10
c00172e9:	09 c1                	or     ecx,eax
c00172eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172ef:	8d 50 03             	lea    edx,[eax+0x3]
c00172f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00172f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00172fa:	0f b6 c0             	movzx  eax,al
c00172fd:	c1 e0 18             	shl    eax,0x18
c0017300:	09 c1                	or     ecx,eax
c0017302:	89 ca                	mov    edx,ecx
c0017304:	a0 20 ba 02 c0       	mov    al,ds:0xc002ba20
c0017309:	0f b6 c0             	movzx  eax,al
c001730c:	89 14 85 e0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4520],edx
c0017313:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017318:	a0 20 ba 02 c0       	mov    al,ds:0xc002ba20
c001731d:	40                   	inc    eax
c001731e:	a2 20 ba 02 c0       	mov    ds:0xc002ba20,al
c0017323:	e9 bb 01 00 00       	jmp    c00174e3 <scanMADT()+0x469>
c0017328:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001732d:	0f 85 e9 00 00 00    	jne    c001741c <scanMADT()+0x3a2>
c0017333:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017337:	8d 50 01             	lea    edx,[eax+0x1]
c001733a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001733e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017342:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017346:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001734a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001734e:	8d 50 01             	lea    edx,[eax+0x1]
c0017351:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017355:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017359:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001735d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017361:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017365:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017369:	01 d0                	add    eax,edx
c001736b:	83 c0 2c             	add    eax,0x2c
c001736e:	8a 00                	mov    al,BYTE PTR [eax]
c0017370:	0f b6 d0             	movzx  edx,al
c0017373:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017377:	8d 48 01             	lea    ecx,[eax+0x1]
c001737a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001737e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017382:	0f b6 c0             	movzx  eax,al
c0017385:	c1 e0 08             	shl    eax,0x8
c0017388:	89 d1                	mov    ecx,edx
c001738a:	09 c1                	or     ecx,eax
c001738c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017390:	8d 50 02             	lea    edx,[eax+0x2]
c0017393:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017397:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001739b:	0f b6 c0             	movzx  eax,al
c001739e:	c1 e0 10             	shl    eax,0x10
c00173a1:	09 c1                	or     ecx,eax
c00173a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173a7:	8d 50 03             	lea    edx,[eax+0x3]
c00173aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173b2:	0f b6 c0             	movzx  eax,al
c00173b5:	c1 e0 18             	shl    eax,0x18
c00173b8:	09 c8                	or     eax,ecx
c00173ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173be:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00173c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173cb:	01 d0                	add    eax,edx
c00173cd:	83 c0 2c             	add    eax,0x2c
c00173d0:	8a 00                	mov    al,BYTE PTR [eax]
c00173d2:	0f b6 c0             	movzx  eax,al
c00173d5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173d9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00173dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173e0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00173e4:	0f b6 d2             	movzx  edx,dl
c00173e7:	c1 e2 08             	shl    edx,0x8
c00173ea:	09 d0                	or     eax,edx
c00173ec:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00173f1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00173f6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00173fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173ff:	88 90 a0 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5c60],dl
c0017405:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001740a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001740f:	66 89 84 12 00 ba 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4600],ax
c0017417:	e9 c7 00 00 00       	jmp    c00174e3 <scanMADT()+0x469>
c001741c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017421:	0f 85 b0 00 00 00    	jne    c00174d7 <scanMADT()+0x45d>
c0017427:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001742b:	8d 50 01             	lea    edx,[eax+0x1]
c001742e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017432:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017436:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001743a:	0f b6 c0             	movzx  eax,al
c001743d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017441:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017445:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017449:	01 d0                	add    eax,edx
c001744b:	83 c0 2c             	add    eax,0x2c
c001744e:	8a 00                	mov    al,BYTE PTR [eax]
c0017450:	0f b6 d0             	movzx  edx,al
c0017453:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017457:	8d 48 01             	lea    ecx,[eax+0x1]
c001745a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001745e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017462:	0f b6 c0             	movzx  eax,al
c0017465:	c1 e0 08             	shl    eax,0x8
c0017468:	09 d0                	or     eax,edx
c001746a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001746e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017477:	8d 50 01             	lea    edx,[eax+0x1]
c001747a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001747e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017482:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017486:	0f b6 c0             	movzx  eax,al
c0017489:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001748d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017491:	c1 e0 08             	shl    eax,0x8
c0017494:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017498:	89 c1                	mov    ecx,eax
c001749a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001749e:	c1 e0 18             	shl    eax,0x18
c00174a1:	89 c3                	mov    ebx,eax
c00174a3:	a1 70 b9 02 c0       	mov    eax,ds:0xc002b970
c00174a8:	8d 50 01             	lea    edx,[eax+0x1]
c00174ab:	89 15 70 b9 02 c0    	mov    DWORD PTR ds:0xc002b970,edx
c00174b1:	09 d9                	or     ecx,ebx
c00174b3:	89 ca                	mov    edx,ecx
c00174b5:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c00174bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00174c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174c8:	68 a0 87 02 c0       	push   0xc00287a0
c00174cd:	e8 61 b1 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00174d2:	83 c4 10             	add    esp,0x10
c00174d5:	eb 0c                	jmp    c00174e3 <scanMADT()+0x469>
c00174d7:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00174dc:	75 05                	jne    c00174e3 <scanMADT()+0x469>
c00174de:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00174e3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00174e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00174ec:	01 d0                	add    eax,edx
c00174ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00174f2:	e9 54 fc ff ff       	jmp    c001714b <scanMADT()+0xd1>
c00174f7:	90                   	nop
c00174f8:	eb 01                	jmp    c00174fb <scanMADT()+0x481>
c00174fa:	90                   	nop
c00174fb:	83 c4 38             	add    esp,0x38
c00174fe:	5b                   	pop    ebx
c00174ff:	c3                   	ret    

c0017500 <ACPI::ACPI()>:
c0017500:	83 ec 0c             	sub    esp,0xc
c0017503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017507:	83 ec 08             	sub    esp,0x8
c001750a:	68 93 86 02 c0       	push   0xc0028693
c001750f:	50                   	push   eax
c0017510:	e8 fd c6 ff ff       	call   c0013c12 <Device::Device(char const*)>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	ba 78 88 02 c0       	mov    edx,0xc0028878
c001751d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017521:	89 10                	mov    DWORD PTR [eax],edx
c0017523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017527:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001752e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017532:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001753c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017540:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001754a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001754e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017555:	e8 20 fb ff ff       	call   c001707a <scanMADT()>
c001755a:	90                   	nop
c001755b:	83 c4 0c             	add    esp,0xc
c001755e:	c3                   	ret    
c001755f:	90                   	nop

c0017560 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017560:	83 ec 2c             	sub    esp,0x2c
c0017563:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017567:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001756b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001756f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017573:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017578:	88 d0                	mov    al,dl
c001757a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001757e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017583:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001758b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001758f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017595:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017599:	0f 8d 97 00 00 00    	jge    c0017636 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001759f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175a7:	83 c2 2a             	add    edx,0x2a
c00175aa:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00175ae:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00175b3:	75 78                	jne    c001762d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00175b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175bd:	83 c2 2a             	add    edx,0x2a
c00175c0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00175c4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00175c8:	75 63                	jne    c001762d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00175ca:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00175cf:	74 3a                	je     c001760b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00175d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175d9:	83 c2 2a             	add    edx,0x2a
c00175dc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00175e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175e7:	39 c2                	cmp    edx,eax
c00175e9:	74 10                	je     c00175fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00175eb:	83 ec 0c             	sub    esp,0xc
c00175ee:	68 dc 87 02 c0       	push   0xc00287dc
c00175f3:	e8 9f 1a 00 00       	call   c0019097 <Krnl::panic(char const*)>
c00175f8:	83 c4 10             	add    esp,0x10
c00175fb:	83 ec 0c             	sub    esp,0xc
c00175fe:	68 98 86 02 c0       	push   0xc0028698
c0017603:	e8 8f 1a 00 00       	call   c0019097 <Krnl::panic(char const*)>
c0017608:	83 c4 10             	add    esp,0x10
c001760b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001760f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017613:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017617:	83 c2 2a             	add    edx,0x2a
c001761a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001761e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017620:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017623:	89 01                	mov    DWORD PTR [ecx],eax
c0017625:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017628:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001762d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017631:	e9 55 ff ff ff       	jmp    c001758b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017636:	90                   	nop
c0017637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001763b:	83 c4 2c             	add    esp,0x2c
c001763e:	c2 04 00             	ret    0x4
c0017641:	90                   	nop

c0017642 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017642:	56                   	push   esi
c0017643:	53                   	push   ebx
c0017644:	83 ec 14             	sub    esp,0x14
c0017647:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001764b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001764f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017653:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017658:	88 c8                	mov    al,cl
c001765a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001765e:	88 d0                	mov    al,dl
c0017660:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017668:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001766e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017672:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017678:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001767d:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017682:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017687:	83 ec 04             	sub    esp,0x4
c001768a:	56                   	push   esi
c001768b:	53                   	push   ebx
c001768c:	51                   	push   ecx
c001768d:	52                   	push   edx
c001768e:	50                   	push   eax
c001768f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017693:	68 0c 88 02 c0       	push   0xc002880c
c0017698:	e8 96 af ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001769d:	83 c4 20             	add    esp,0x20
c00176a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176a4:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00176aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176ae:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00176b1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00176b5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00176b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176bd:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00176c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176c7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00176ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176ce:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00176d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176d7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00176dd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176e1:	8d 48 01             	lea    ecx,[eax+0x1]
c00176e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e8:	83 c2 2a             	add    edx,0x2a
c00176eb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00176ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176f3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00176f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176fd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017700:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017704:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001770c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017712:	8d 50 01             	lea    edx,[eax+0x1]
c0017715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017719:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001771f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017723:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017729:	3d 00 08 00 00       	cmp    eax,0x800
c001772e:	75 10                	jne    c0017740 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017730:	83 ec 0c             	sub    esp,0xc
c0017733:	68 a7 86 02 c0       	push   0xc00286a7
c0017738:	e8 5a 19 00 00       	call   c0019097 <Krnl::panic(char const*)>
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	90                   	nop
c0017741:	83 c4 14             	add    esp,0x14
c0017744:	5b                   	pop    ebx
c0017745:	5e                   	pop    esi
c0017746:	c3                   	ret    
c0017747:	90                   	nop

c0017748 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017748:	b8 00 00 00 00       	mov    eax,0x0
c001774d:	c3                   	ret    

c001774e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001774e:	83 ec 1c             	sub    esp,0x1c
c0017751:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017755:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017758:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001775c:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0017761:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017766:	83 ec 08             	sub    esp,0x8
c0017769:	52                   	push   edx
c001776a:	50                   	push   eax
c001776b:	e8 68 73 ff ff       	call   c000ead8 <Computer::readCMOS(unsigned char)>
c0017770:	83 c4 10             	add    esp,0x10
c0017773:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017777:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001777c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017781:	83 ec 04             	sub    esp,0x4
c0017784:	6a 01                	push   0x1
c0017786:	52                   	push   edx
c0017787:	50                   	push   eax
c0017788:	e8 61 74 ff ff       	call   c000ebee <Computer::writeCMOS(unsigned char, unsigned char)>
c001778d:	83 c4 10             	add    esp,0x10
c0017790:	90                   	nop
c0017791:	83 c4 1c             	add    esp,0x1c
c0017794:	c3                   	ret    
c0017795:	90                   	nop

c0017796 <ACPI::open(int, int, void*)>:
c0017796:	53                   	push   ebx
c0017797:	83 ec 28             	sub    esp,0x28
c001779a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001779e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00177a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177a9:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00177af:	84 c0                	test   al,al
c00177b1:	74 67                	je     c001781a <ACPI::open(int, int, void*)+0x84>
c00177b3:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00177bb:	83 ec 0c             	sub    esp,0xc
c00177be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177c2:	e8 f9 7c ff ff       	call   c000f4c0 <malloc>
c00177c7:	83 c4 10             	add    esp,0x10
c00177ca:	89 c3                	mov    ebx,eax
c00177cc:	83 ec 0c             	sub    esp,0xc
c00177cf:	53                   	push   ebx
c00177d0:	e8 73 91 00 00       	call   c0020948 <PCI::PCI()>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00177dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177e0:	83 ec 08             	sub    esp,0x8
c00177e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00177e7:	50                   	push   eax
c00177e8:	e8 35 c2 ff ff       	call   c0013a22 <Device::addChild(Device*)>
c00177ed:	83 c4 10             	add    esp,0x10
c00177f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00177f6:	83 c0 08             	add    eax,0x8
c00177f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00177fb:	6a 00                	push   0x0
c00177fd:	6a 00                	push   0x0
c00177ff:	6a 00                	push   0x0
c0017801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017805:	ff d0                	call   eax
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	83 ec 0c             	sub    esp,0xc
c001780d:	68 c4 86 02 c0       	push   0xc00286c4
c0017812:	e8 1c ae ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0017817:	83 c4 10             	add    esp,0x10
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	68 cf 86 02 c0       	push   0xc00286cf
c0017822:	e8 ba 37 00 00       	call   c001afe1 <Thr::loadKernelSymbolTable(char const*)>
c0017827:	83 c4 10             	add    esp,0x10
c001782a:	8b 1d c8 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0c8
c0017830:	83 ec 08             	sub    esp,0x8
c0017833:	6a 01                	push   0x1
c0017835:	68 ed 86 02 c0       	push   0xc00286ed
c001783a:	e8 62 42 00 00       	call   c001baa1 <Thr::loadDLL(char const*, bool)>
c001783f:	83 c4 10             	add    esp,0x10
c0017842:	83 ec 08             	sub    esp,0x8
c0017845:	53                   	push   ebx
c0017846:	50                   	push   eax
c0017847:	e8 64 44 00 00       	call   c001bcb0 <Thr::executeDLL(unsigned long, void*)>
c001784c:	83 c4 10             	add    esp,0x10
c001784f:	8b 1d c8 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0c8
c0017855:	83 ec 08             	sub    esp,0x8
c0017858:	6a 01                	push   0x1
c001785a:	68 0a 87 02 c0       	push   0xc002870a
c001785f:	e8 3d 42 00 00       	call   c001baa1 <Thr::loadDLL(char const*, bool)>
c0017864:	83 c4 10             	add    esp,0x10
c0017867:	83 ec 08             	sub    esp,0x8
c001786a:	53                   	push   ebx
c001786b:	50                   	push   eax
c001786c:	e8 3f 44 00 00       	call   c001bcb0 <Thr::executeDLL(unsigned long, void*)>
c0017871:	83 c4 10             	add    esp,0x10
c0017874:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0017879:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001787f:	83 e0 04             	and    eax,0x4
c0017882:	84 c0                	test   al,al
c0017884:	0f 84 d6 00 00 00    	je     c0017960 <ACPI::open(int, int, void*)+0x1ca>
c001788a:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017892:	83 ec 0c             	sub    esp,0xc
c0017895:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017899:	e8 22 7c ff ff       	call   c000f4c0 <malloc>
c001789e:	83 c4 10             	add    esp,0x10
c00178a1:	89 c3                	mov    ebx,eax
c00178a3:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00178a8:	83 ec 04             	sub    esp,0x4
c00178ab:	50                   	push   eax
c00178ac:	68 27 87 02 c0       	push   0xc0028727
c00178b1:	53                   	push   ebx
c00178b2:	e8 ab b2 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00178be:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00178c3:	74 17                	je     c00178dc <ACPI::open(int, int, void*)+0x146>
c00178c5:	83 ec 0c             	sub    esp,0xc
c00178c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00178cc:	e8 63 b5 ff ff       	call   c0012e34 <File::exists()>
c00178d1:	83 c4 10             	add    esp,0x10
c00178d4:	84 c0                	test   al,al
c00178d6:	74 04                	je     c00178dc <ACPI::open(int, int, void*)+0x146>
c00178d8:	b0 01                	mov    al,0x1
c00178da:	eb 02                	jmp    c00178de <ACPI::open(int, int, void*)+0x148>
c00178dc:	b0 00                	mov    al,0x0
c00178de:	84 c0                	test   al,al
c00178e0:	74 25                	je     c0017907 <ACPI::open(int, int, void*)+0x171>
c00178e2:	8b 1d c8 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0c8
c00178e8:	83 ec 08             	sub    esp,0x8
c00178eb:	6a 01                	push   0x1
c00178ed:	68 27 87 02 c0       	push   0xc0028727
c00178f2:	e8 aa 41 00 00       	call   c001baa1 <Thr::loadDLL(char const*, bool)>
c00178f7:	83 c4 10             	add    esp,0x10
c00178fa:	83 ec 08             	sub    esp,0x8
c00178fd:	53                   	push   ebx
c00178fe:	50                   	push   eax
c00178ff:	e8 ac 43 00 00       	call   c001bcb0 <Thr::executeDLL(unsigned long, void*)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001790c:	74 1e                	je     c001792c <ACPI::open(int, int, void*)+0x196>
c001790e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017913:	74 17                	je     c001792c <ACPI::open(int, int, void*)+0x196>
c0017915:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017919:	8b 00                	mov    eax,DWORD PTR [eax]
c001791b:	83 c0 08             	add    eax,0x8
c001791e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017920:	83 ec 0c             	sub    esp,0xc
c0017923:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017927:	ff d0                	call   eax
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	a1 68 b9 02 c0       	mov    eax,ds:0xc002b968
c0017931:	83 ec 08             	sub    esp,0x8
c0017934:	68 44 87 02 c0       	push   0xc0028744
c0017939:	50                   	push   eax
c001793a:	e8 9f f6 ff ff       	call   c0016fde <findDataTable(unsigned char*, char*)>
c001793f:	83 c4 10             	add    esp,0x10
c0017942:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017946:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001794b:	74 13                	je     c0017960 <ACPI::open(int, int, void*)+0x1ca>
c001794d:	83 ec 08             	sub    esp,0x8
c0017950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017958:	e8 f1 fd ff ff       	call   c001774e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	b8 00 00 00 00       	mov    eax,0x0
c0017965:	83 c4 28             	add    esp,0x28
c0017968:	5b                   	pop    ebx
c0017969:	c3                   	ret    

c001796a <ACPI::sleep()>:
c001796a:	83 ec 0c             	sub    esp,0xc
c001796d:	a1 40 b7 02 c0       	mov    eax,ds:0xc002b740
c0017972:	85 c0                	test   eax,eax
c0017974:	74 07                	je     c001797d <ACPI::sleep()+0x13>
c0017976:	a1 40 b7 02 c0       	mov    eax,ds:0xc002b740
c001797b:	ff d0                	call   eax
c001797d:	90                   	nop
c001797e:	83 c4 0c             	add    esp,0xc
c0017981:	c3                   	ret    

c0017982 <CPU::close(int, int, void*)>:
c0017982:	31 c0                	xor    eax,eax
c0017984:	c3                   	ret    
c0017985:	90                   	nop

c0017986 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017986:	55                   	push   ebp
c0017987:	57                   	push   edi
c0017988:	56                   	push   esi
c0017989:	53                   	push   ebx
c001798a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001798e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017992:	89 ce                	mov    esi,ecx
c0017994:	89 d5                	mov    ebp,edx
c0017996:	80 f9 04             	cmp    cl,0x4
c0017999:	75 28                	jne    c00179c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001799b:	8d 42 f9             	lea    eax,[edx-0x7]
c001799e:	3c 03                	cmp    al,0x3
c00179a0:	0f 86 63 01 00 00    	jbe    c0017b09 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00179a6:	80 fa 03             	cmp    dl,0x3
c00179a9:	0f 84 5a 01 00 00    	je     c0017b09 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00179af:	8d 7a f2             	lea    edi,[edx-0xe]
c00179b2:	b8 70 a5 02 c0       	mov    eax,0xc002a570
c00179b7:	89 fb                	mov    ebx,edi
c00179b9:	80 fb 01             	cmp    bl,0x1
c00179bc:	77 4e                	ja     c0017a0c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00179be:	e9 52 01 00 00       	jmp    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00179c3:	80 f9 05             	cmp    cl,0x5
c00179c6:	75 4d                	jne    c0017a15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00179c8:	b8 80 a5 02 c0       	mov    eax,0xc002a580
c00179cd:	80 fa 03             	cmp    dl,0x3
c00179d0:	0f 86 3f 01 00 00    	jbe    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00179d6:	8d 7a fa             	lea    edi,[edx-0x6]
c00179d9:	b8 90 a5 02 c0       	mov    eax,0xc002a590
c00179de:	89 fb                	mov    ebx,edi
c00179e0:	80 fb 01             	cmp    bl,0x1
c00179e3:	0f 86 2c 01 00 00    	jbe    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00179e9:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c00179ee:	80 fa 08             	cmp    dl,0x8
c00179f1:	0f 84 1e 01 00 00    	je     c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00179f7:	89 d7                	mov    edi,edx
c00179f9:	b8 b0 a5 02 c0       	mov    eax,0xc002a5b0
c00179fe:	83 e7 fb             	and    edi,0xfffffffb
c0017a01:	89 fb                	mov    ebx,edi
c0017a03:	80 fb 09             	cmp    bl,0x9
c0017a06:	0f 84 09 01 00 00    	je     c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a0c:	31 c0                	xor    eax,eax
c0017a0e:	89 eb                	mov    ebx,ebp
c0017a10:	0f b6 fb             	movzx  edi,bl
c0017a13:	eb 30                	jmp    c0017a45 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017a15:	31 c0                	xor    eax,eax
c0017a17:	80 f9 06             	cmp    cl,0x6
c0017a1a:	75 f2                	jne    c0017a0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017a1c:	80 fa 0a             	cmp    dl,0xa
c0017a1f:	77 ed                	ja     c0017a0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017a21:	bf de 05 00 00       	mov    edi,0x5de
c0017a26:	0f a3 d7             	bt     edi,edx
c0017a29:	73 e3                	jae    c0017a0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017a2b:	b8 c0 a5 02 c0       	mov    eax,0xc002a5c0
c0017a30:	e9 e0 00 00 00       	jmp    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a35:	39 c7                	cmp    edi,eax
c0017a37:	0f 84 d3 00 00 00    	je     c0017b10 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017a3d:	40                   	inc    eax
c0017a3e:	3d d0 00 00 00       	cmp    eax,0xd0
c0017a43:	74 09                	je     c0017a4e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017a45:	89 f3                	mov    ebx,esi
c0017a47:	80 fb 0f             	cmp    bl,0xf
c0017a4a:	75 f1                	jne    c0017a3d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017a4c:	eb e7                	jmp    c0017a35 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017a4e:	80 f9 10             	cmp    cl,0x10
c0017a51:	75 14                	jne    c0017a67 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017a53:	8d 42 fc             	lea    eax,[edx-0x4]
c0017a56:	83 e0 fb             	and    eax,0xfffffffb
c0017a59:	3c 02                	cmp    al,0x2
c0017a5b:	76 34                	jbe    c0017a91 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017a5d:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017a62:	80 fa 02             	cmp    dl,0x2
c0017a65:	eb 24                	jmp    c0017a8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017a67:	80 f9 11             	cmp    cl,0x11
c0017a6a:	75 13                	jne    c0017a7f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017a6c:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017a71:	80 fa 03             	cmp    dl,0x3
c0017a74:	0f 85 9b 00 00 00    	jne    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a7a:	e9 91 00 00 00       	jmp    c0017b10 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017a7f:	80 f9 12             	cmp    cl,0x12
c0017a82:	75 14                	jne    c0017a98 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017a84:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017a89:	fe ca                	dec    dl
c0017a8b:	0f 85 84 00 00 00    	jne    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a91:	b8 e0 a5 02 c0       	mov    eax,0xc002a5e0
c0017a96:	eb 7d                	jmp    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a98:	80 f9 14             	cmp    cl,0x14
c0017a9b:	75 12                	jne    c0017aaf <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017a9d:	4a                   	dec    edx
c0017a9e:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017aa3:	80 fa 01             	cmp    dl,0x1
c0017aa6:	77 6d                	ja     c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017aa8:	b8 f0 a5 02 c0       	mov    eax,0xc002a5f0
c0017aad:	eb 66                	jmp    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017aaf:	80 f9 15             	cmp    cl,0x15
c0017ab2:	75 31                	jne    c0017ae5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017ab4:	b8 00 a6 02 c0       	mov    eax,0xc002a600
c0017ab9:	80 fa 01             	cmp    dl,0x1
c0017abc:	74 57                	je     c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017abe:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017ac3:	80 fa 13             	cmp    dl,0x13
c0017ac6:	76 0c                	jbe    c0017ad4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017ac8:	80 fa 30             	cmp    dl,0x30
c0017acb:	75 48                	jne    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017acd:	b8 20 a6 02 c0       	mov    eax,0xc002a620
c0017ad2:	eb 41                	jmp    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ad4:	b9 04 00 09 00       	mov    ecx,0x90004
c0017ad9:	0f a3 d1             	bt     ecx,edx
c0017adc:	73 37                	jae    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ade:	b8 10 a6 02 c0       	mov    eax,0xc002a610
c0017ae3:	eb 30                	jmp    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ae5:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017aea:	80 f9 16             	cmp    cl,0x16
c0017aed:	75 26                	jne    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017aef:	b8 30 a6 02 c0       	mov    eax,0xc002a630
c0017af4:	84 d2                	test   dl,dl
c0017af6:	74 1d                	je     c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017af8:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017afd:	80 fa 30             	cmp    dl,0x30
c0017b00:	75 13                	jne    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b02:	b8 40 a6 02 c0       	mov    eax,0xc002a640
c0017b07:	eb 0c                	jmp    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b09:	b8 60 a5 02 c0       	mov    eax,0xc002a560
c0017b0e:	eb 05                	jmp    c0017b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b10:	b8 d0 a5 02 c0       	mov    eax,0xc002a5d0
c0017b15:	5b                   	pop    ebx
c0017b16:	5e                   	pop    esi
c0017b17:	5f                   	pop    edi
c0017b18:	5d                   	pop    ebp
c0017b19:	c3                   	ret    

c0017b1a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017b1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017b1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b22:	80 f9 04             	cmp    cl,0x4
c0017b25:	75 6b                	jne    c0017b92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017b27:	b8 c0 a3 02 c0       	mov    eax,0xc002a3c0
c0017b2c:	80 fa 01             	cmp    dl,0x1
c0017b2f:	0f 86 92 02 00 00    	jbe    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b35:	b8 d0 a3 02 c0       	mov    eax,0xc002a3d0
c0017b3a:	80 fa 02             	cmp    dl,0x2
c0017b3d:	0f 84 84 02 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b43:	b8 e0 a3 02 c0       	mov    eax,0xc002a3e0
c0017b48:	80 fa 03             	cmp    dl,0x3
c0017b4b:	0f 84 76 02 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b51:	b8 f0 a3 02 c0       	mov    eax,0xc002a3f0
c0017b56:	80 fa 04             	cmp    dl,0x4
c0017b59:	0f 84 68 02 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b5f:	b8 00 a4 02 c0       	mov    eax,0xc002a400
c0017b64:	80 fa 05             	cmp    dl,0x5
c0017b67:	0f 84 5a 02 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b6d:	b8 e0 a3 02 c0       	mov    eax,0xc002a3e0
c0017b72:	80 fa 07             	cmp    dl,0x7
c0017b75:	0f 84 4c 02 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b7b:	83 ea 08             	sub    edx,0x8
c0017b7e:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017b83:	80 fa 01             	cmp    dl,0x1
c0017b86:	0f 87 3b 02 00 00    	ja     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b8c:	b8 10 a4 02 c0       	mov    eax,0xc002a410
c0017b91:	c3                   	ret    
c0017b92:	80 f9 05             	cmp    cl,0x5
c0017b95:	75 45                	jne    c0017bdc <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017b97:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017b9a:	b8 20 a4 02 c0       	mov    eax,0xc002a420
c0017b9f:	80 f9 02             	cmp    cl,0x2
c0017ba2:	0f 86 1f 02 00 00    	jbe    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ba8:	80 fa 04             	cmp    dl,0x4
c0017bab:	0f 84 f3 01 00 00    	je     c0017da4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017bb1:	80 fa 07             	cmp    dl,0x7
c0017bb4:	0f 84 0d 02 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017bba:	b8 30 a4 02 c0       	mov    eax,0xc002a430
c0017bbf:	80 fa 08             	cmp    dl,0x8
c0017bc2:	0f 84 ff 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017bc8:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017bcd:	80 fa 09             	cmp    dl,0x9
c0017bd0:	0f 85 f1 01 00 00    	jne    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017bd6:	b8 40 a4 02 c0       	mov    eax,0xc002a440
c0017bdb:	c3                   	ret    
c0017bdc:	80 f9 06             	cmp    cl,0x6
c0017bdf:	0f 85 85 01 00 00    	jne    c0017d6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017be5:	b8 50 a4 02 c0       	mov    eax,0xc002a450
c0017bea:	80 fa 01             	cmp    dl,0x1
c0017bed:	0f 84 d4 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017bf3:	8d 42 fb             	lea    eax,[edx-0x5]
c0017bf6:	3c 01                	cmp    al,0x1
c0017bf8:	0f 86 ac 01 00 00    	jbe    c0017daa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017bfe:	80 fa 03             	cmp    dl,0x3
c0017c01:	0f 84 a3 01 00 00    	je     c0017daa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017c07:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017c0a:	b8 70 a4 02 c0       	mov    eax,0xc002a470
c0017c0f:	80 f9 01             	cmp    cl,0x1
c0017c12:	0f 86 af 01 00 00    	jbe    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c18:	80 fa 09             	cmp    dl,0x9
c0017c1b:	0f 84 8f 01 00 00    	je     c0017db0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017c21:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017c24:	80 f9 01             	cmp    cl,0x1
c0017c27:	0f 86 9a 01 00 00    	jbe    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c2d:	b8 80 a4 02 c0       	mov    eax,0xc002a480
c0017c32:	80 fa 0d             	cmp    dl,0xd
c0017c35:	0f 84 8c 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c3b:	b8 90 a4 02 c0       	mov    eax,0xc002a490
c0017c40:	80 fa 0e             	cmp    dl,0xe
c0017c43:	0f 84 7e 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c49:	b8 a0 a4 02 c0       	mov    eax,0xc002a4a0
c0017c4e:	80 fa 0f             	cmp    dl,0xf
c0017c51:	0f 84 70 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c57:	b8 80 a4 02 c0       	mov    eax,0xc002a480
c0017c5c:	80 fa 15             	cmp    dl,0x15
c0017c5f:	0f 84 62 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c65:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017c68:	b8 a0 a4 02 c0       	mov    eax,0xc002a4a0
c0017c6d:	80 f9 01             	cmp    cl,0x1
c0017c70:	0f 86 51 01 00 00    	jbe    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c76:	80 fa 1a             	cmp    dl,0x1a
c0017c79:	0f 84 37 01 00 00    	je     c0017db6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017c7f:	80 fa 1c             	cmp    dl,0x1c
c0017c82:	0f 84 34 01 00 00    	je     c0017dbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017c88:	80 fa 1d             	cmp    dl,0x1d
c0017c8b:	0f 84 36 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c91:	b8 d0 a4 02 c0       	mov    eax,0xc002a4d0
c0017c96:	80 fa 25             	cmp    dl,0x25
c0017c99:	0f 84 28 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c9f:	8d 4a da             	lea    ecx,[edx-0x26]
c0017ca2:	b8 c0 a4 02 c0       	mov    eax,0xc002a4c0
c0017ca7:	80 f9 01             	cmp    cl,0x1
c0017caa:	0f 86 17 01 00 00    	jbe    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cb0:	b8 e0 a4 02 c0       	mov    eax,0xc002a4e0
c0017cb5:	80 fa 2a             	cmp    dl,0x2a
c0017cb8:	0f 84 09 01 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cbe:	b8 d0 a4 02 c0       	mov    eax,0xc002a4d0
c0017cc3:	80 fa 2c             	cmp    dl,0x2c
c0017cc6:	0f 84 fb 00 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ccc:	b8 e0 a4 02 c0       	mov    eax,0xc002a4e0
c0017cd1:	80 fa 2d             	cmp    dl,0x2d
c0017cd4:	0f 84 ed 00 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cda:	b8 b0 a4 02 c0       	mov    eax,0xc002a4b0
c0017cdf:	80 fa 2e             	cmp    dl,0x2e
c0017ce2:	0f 84 df 00 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ce8:	b8 d0 a4 02 c0       	mov    eax,0xc002a4d0
c0017ced:	80 fa 2f             	cmp    dl,0x2f
c0017cf0:	0f 84 d1 00 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cf6:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017cf9:	b8 c0 a4 02 c0       	mov    eax,0xc002a4c0
c0017cfe:	80 f9 01             	cmp    cl,0x1
c0017d01:	0f 86 c0 00 00 00    	jbe    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d07:	b8 f0 a4 02 c0       	mov    eax,0xc002a4f0
c0017d0c:	80 fa 37             	cmp    dl,0x37
c0017d0f:	0f 84 b2 00 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d15:	b8 00 a5 02 c0       	mov    eax,0xc002a500
c0017d1a:	80 fa 3a             	cmp    dl,0x3a
c0017d1d:	0f 84 a4 00 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d23:	b8 10 a5 02 c0       	mov    eax,0xc002a510
c0017d28:	80 fa 3c             	cmp    dl,0x3c
c0017d2b:	0f 84 96 00 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d31:	b8 20 a5 02 c0       	mov    eax,0xc002a520
c0017d36:	80 fa 3d             	cmp    dl,0x3d
c0017d39:	0f 84 88 00 00 00    	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d3f:	b8 00 a5 02 c0       	mov    eax,0xc002a500
c0017d44:	80 fa 3e             	cmp    dl,0x3e
c0017d47:	74 7e                	je     c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d49:	8d 42 bb             	lea    eax,[edx-0x45]
c0017d4c:	3c 01                	cmp    al,0x1
c0017d4e:	76 72                	jbe    c0017dc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017d50:	80 fa 3f             	cmp    dl,0x3f
c0017d53:	74 6d                	je     c0017dc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017d55:	80 fa 4a             	cmp    dl,0x4a
c0017d58:	74 0a                	je     c0017d64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017d5a:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017d5f:	80 fa 4d             	cmp    dl,0x4d
c0017d62:	75 63                	jne    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d64:	b8 f0 a4 02 c0       	mov    eax,0xc002a4f0
c0017d69:	c3                   	ret    
c0017d6a:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017d6f:	80 f9 0b             	cmp    cl,0xb
c0017d72:	75 0a                	jne    c0017d7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017d74:	fe ca                	dec    dl
c0017d76:	75 4f                	jne    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d78:	b8 30 a5 02 c0       	mov    eax,0xc002a530
c0017d7d:	c3                   	ret    
c0017d7e:	80 f9 0f             	cmp    cl,0xf
c0017d81:	75 44                	jne    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d83:	b8 40 a5 02 c0       	mov    eax,0xc002a540
c0017d88:	80 fa 02             	cmp    dl,0x2
c0017d8b:	76 3a                	jbe    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8d:	8d 42 fd             	lea    eax,[edx-0x3]
c0017d90:	3c 01                	cmp    al,0x1
c0017d92:	76 0a                	jbe    c0017d9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017d94:	b8 8e 8b 02 c0       	mov    eax,0xc0028b8e
c0017d99:	80 fa 06             	cmp    dl,0x6
c0017d9c:	75 29                	jne    c0017dc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d9e:	b8 50 a5 02 c0       	mov    eax,0xc002a550
c0017da3:	c3                   	ret    
c0017da4:	b8 30 a4 02 c0       	mov    eax,0xc002a430
c0017da9:	c3                   	ret    
c0017daa:	b8 60 a4 02 c0       	mov    eax,0xc002a460
c0017daf:	c3                   	ret    
c0017db0:	b8 80 a4 02 c0       	mov    eax,0xc002a480
c0017db5:	c3                   	ret    
c0017db6:	b8 b0 a4 02 c0       	mov    eax,0xc002a4b0
c0017dbb:	c3                   	ret    
c0017dbc:	b8 c0 a4 02 c0       	mov    eax,0xc002a4c0
c0017dc1:	c3                   	ret    
c0017dc2:	b8 10 a5 02 c0       	mov    eax,0xc002a510
c0017dc7:	c3                   	ret    

c0017dc8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017dc8:	60                   	pusha  
c0017dc9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017dcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dd5:	9c                   	pushf  
c0017dd6:	fa                   	cli    
c0017dd7:	0f 09                	wbinvd 
c0017dd9:	0f 30                	wrmsr  
c0017ddb:	9d                   	popf   
c0017ddc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017de0:	89 02                	mov    DWORD PTR [edx],eax
c0017de2:	61                   	popa   
c0017de3:	c3                   	ret    

c0017de4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017de4:	60                   	pusha  
c0017de5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017de9:	9c                   	pushf  
c0017dea:	fa                   	cli    
c0017deb:	0f 09                	wbinvd 
c0017ded:	31 c0                	xor    eax,eax
c0017def:	31 d2                	xor    edx,edx
c0017df1:	0f 32                	rdmsr  
c0017df3:	9d                   	popf   
c0017df4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017df8:	89 02                	mov    DWORD PTR [edx],eax
c0017dfa:	61                   	popa   
c0017dfb:	c3                   	ret    

c0017dfc <CPU::AMD_K6_writeback(int, int, int)>:
c0017dfc:	56                   	push   esi
c0017dfd:	53                   	push   ebx
c0017dfe:	83 ec 10             	sub    esp,0x10
c0017e01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e05:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017e0a:	75 5d                	jne    c0017e69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017e0c:	83 f8 08             	cmp    eax,0x8
c0017e0f:	75 09                	jne    c0017e1a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017e11:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017e16:	7e 13                	jle    c0017e2b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017e18:	eb 30                	jmp    c0017e4a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017e1a:	83 f8 06             	cmp    eax,0x6
c0017e1d:	7c 4a                	jl     c0017e69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017e1f:	83 f8 07             	cmp    eax,0x7
c0017e22:	7e 07                	jle    c0017e2b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017e24:	83 f8 09             	cmp    eax,0x9
c0017e27:	74 21                	je     c0017e4a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017e29:	eb 3e                	jmp    c0017e69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017e2b:	89 e6                	mov    esi,esp
c0017e2d:	8b 1d 04 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b104
c0017e33:	56                   	push   esi
c0017e34:	c1 eb 15             	shr    ebx,0x15
c0017e37:	68 82 00 00 c0       	push   0xc0000082
c0017e3c:	83 e3 7e             	and    ebx,0x7e
c0017e3f:	e8 a0 ff ff ff       	call   c0017de4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017e44:	56                   	push   esi
c0017e45:	6a 00                	push   0x0
c0017e47:	53                   	push   ebx
c0017e48:	eb 12                	jmp    c0017e5c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017e4a:	89 e3                	mov    ebx,esp
c0017e4c:	53                   	push   ebx
c0017e4d:	68 82 00 00 c0       	push   0xc0000082
c0017e52:	e8 8d ff ff ff       	call   c0017de4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017e57:	53                   	push   ebx
c0017e58:	6a 00                	push   0x0
c0017e5a:	6a 00                	push   0x0
c0017e5c:	68 82 00 00 c0       	push   0xc0000082
c0017e61:	e8 62 ff ff ff       	call   c0017dc8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017e66:	83 c4 18             	add    esp,0x18
c0017e69:	83 c4 10             	add    esp,0x10
c0017e6c:	5b                   	pop    ebx
c0017e6d:	5e                   	pop    esi
c0017e6e:	c3                   	ret    
c0017e6f:	90                   	nop

c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017e70:	55                   	push   ebp
c0017e71:	57                   	push   edi
c0017e72:	56                   	push   esi
c0017e73:	53                   	push   ebx
c0017e74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e78:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017e7c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017e80:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017e84:	39 05 60 a6 02 c0    	cmp    DWORD PTR ds:0xc002a660,eax
c0017e8a:	75 23                	jne    c0017eaf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017e8c:	a1 cc bb 02 c0       	mov    eax,ds:0xc002bbcc
c0017e91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e95:	89 06                	mov    DWORD PTR [esi],eax
c0017e97:	a1 c8 bb 02 c0       	mov    eax,ds:0xc002bbc8
c0017e9c:	89 07                	mov    DWORD PTR [edi],eax
c0017e9e:	a1 c4 bb 02 c0       	mov    eax,ds:0xc002bbc4
c0017ea3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017ea6:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c0017eab:	89 02                	mov    DWORD PTR [edx],eax
c0017ead:	eb 3f                	jmp    c0017eee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017eaf:	31 c9                	xor    ecx,ecx
c0017eb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017eb5:	0f a2                	cpuid  
c0017eb7:	89 06                	mov    DWORD PTR [esi],eax
c0017eb9:	89 1f                	mov    DWORD PTR [edi],ebx
c0017ebb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ebf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017ec2:	89 10                	mov    DWORD PTR [eax],edx
c0017ec4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ec8:	a3 60 a6 02 c0       	mov    ds:0xc002a660,eax
c0017ecd:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ecf:	a3 cc bb 02 c0       	mov    ds:0xc002bbcc,eax
c0017ed4:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ed6:	a3 c8 bb 02 c0       	mov    ds:0xc002bbc8,eax
c0017edb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017ede:	a3 c4 bb 02 c0       	mov    ds:0xc002bbc4,eax
c0017ee3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ee7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ee9:	a3 c0 bb 02 c0       	mov    ds:0xc002bbc0,eax
c0017eee:	5b                   	pop    ebx
c0017eef:	5e                   	pop    esi
c0017ef0:	5f                   	pop    edi
c0017ef1:	5d                   	pop    ebp
c0017ef2:	c3                   	ret    
c0017ef3:	90                   	nop

c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>:
c0017ef4:	83 ec 10             	sub    esp,0x10
c0017ef7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017efb:	50                   	push   eax
c0017efc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f00:	50                   	push   eax
c0017f01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f05:	50                   	push   eax
c0017f06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f0a:	50                   	push   eax
c0017f0b:	6a 01                	push   0x1
c0017f0d:	e8 5e ff ff ff       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f16:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017f1a:	0f 95 c0             	setne  al
c0017f1d:	83 c4 24             	add    esp,0x24
c0017f20:	c3                   	ret    
c0017f21:	90                   	nop

c0017f22 <CPU::cpuidCheckECX(unsigned int)>:
c0017f22:	83 ec 10             	sub    esp,0x10
c0017f25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f29:	50                   	push   eax
c0017f2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f2e:	50                   	push   eax
c0017f2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f33:	50                   	push   eax
c0017f34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f38:	50                   	push   eax
c0017f39:	6a 01                	push   0x1
c0017f3b:	e8 30 ff ff ff       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f44:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017f48:	0f 95 c0             	setne  al
c0017f4b:	83 c4 24             	add    esp,0x24
c0017f4e:	c3                   	ret    
c0017f4f:	90                   	nop

c0017f50 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0017f50:	83 ec 10             	sub    esp,0x10
c0017f53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f57:	50                   	push   eax
c0017f58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f5c:	50                   	push   eax
c0017f5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f61:	50                   	push   eax
c0017f62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f66:	50                   	push   eax
c0017f67:	6a 07                	push   0x7
c0017f69:	e8 02 ff ff ff       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f72:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017f76:	0f 95 c0             	setne  al
c0017f79:	83 c4 24             	add    esp,0x24
c0017f7c:	c3                   	ret    
c0017f7d:	90                   	nop

c0017f7e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0017f7e:	83 ec 10             	sub    esp,0x10
c0017f81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f85:	50                   	push   eax
c0017f86:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f8a:	50                   	push   eax
c0017f8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f8f:	50                   	push   eax
c0017f90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f94:	50                   	push   eax
c0017f95:	6a 07                	push   0x7
c0017f97:	e8 d4 fe ff ff       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fa0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017fa4:	0f 95 c0             	setne  al
c0017fa7:	83 c4 24             	add    esp,0x24
c0017faa:	c3                   	ret    
c0017fab:	90                   	nop

c0017fac <CPU::CPU()>:
c0017fac:	83 ec 0c             	sub    esp,0xc
c0017faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fb3:	83 ec 08             	sub    esp,0x8
c0017fb6:	68 8e 8b 02 c0       	push   0xc0028b8e
c0017fbb:	50                   	push   eax
c0017fbc:	e8 51 bc ff ff       	call   c0013c12 <Device::Device(char const*)>
c0017fc1:	83 c4 10             	add    esp,0x10
c0017fc4:	ba 68 8c 02 c0       	mov    edx,0xc0028c68
c0017fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fcd:	89 10                	mov    DWORD PTR [eax],edx
c0017fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe1:	05 78 01 00 00       	add    eax,0x178
c0017fe6:	83 ec 0c             	sub    esp,0xc
c0017fe9:	50                   	push   eax
c0017fea:	e8 e9 6c ff ff       	call   c000ecd8 <GDT::GDT()>
c0017fef:	83 c4 10             	add    esp,0x10
c0017ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff6:	05 7c 09 00 00       	add    eax,0x97c
c0017ffb:	83 ec 0c             	sub    esp,0xc
c0017ffe:	50                   	push   eax
c0017fff:	e8 36 6f ff ff       	call   c000ef3a <IDT::IDT()>
c0018004:	83 c4 10             	add    esp,0x10
c0018007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001800b:	05 7c 11 00 00       	add    eax,0x117c
c0018010:	83 ec 0c             	sub    esp,0xc
c0018013:	50                   	push   eax
c0018014:	e8 5b 8f ff ff       	call   c0010f74 <TSS::TSS()>
c0018019:	83 c4 10             	add    esp,0x10
c001801c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018020:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018035:	90                   	nop
c0018036:	83 c4 0c             	add    esp,0xc
c0018039:	c3                   	ret    

c001803a <CPU::displayFeatures()>:
c001803a:	53                   	push   ebx
c001803b:	83 ec 10             	sub    esp,0x10
c001803e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018042:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018048:	68 9c 88 02 c0       	push   0xc002889c
c001804d:	e8 e1 a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018052:	59                   	pop    ecx
c0018053:	58                   	pop    eax
c0018054:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001805a:	50                   	push   eax
c001805b:	68 ad 88 02 c0       	push   0xc00288ad
c0018060:	e8 ce a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018065:	58                   	pop    eax
c0018066:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001806c:	5a                   	pop    edx
c001806d:	c1 e8 0e             	shr    eax,0xe
c0018070:	0f b6 c0             	movzx  eax,al
c0018073:	50                   	push   eax
c0018074:	68 be 88 02 c0       	push   0xc00288be
c0018079:	e8 b5 a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001807e:	59                   	pop    ecx
c001807f:	58                   	pop    eax
c0018080:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018086:	66 c1 e8 06          	shr    ax,0x6
c001808a:	0f b6 c0             	movzx  eax,al
c001808d:	50                   	push   eax
c001808e:	68 cf 88 02 c0       	push   0xc00288cf
c0018093:	e8 9b a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018098:	c7 04 24 e2 8c 02 c0 	mov    DWORD PTR [esp],0xc0028ce2
c001809f:	e8 8f a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00180a4:	83 c4 10             	add    esp,0x10
c00180a7:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c00180ac:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00180b3:	74 05                	je     c00180ba <CPU::displayFeatures()+0x80>
c00180b5:	b8 98 74 02 c0       	mov    eax,0xc0027498
c00180ba:	52                   	push   edx
c00180bb:	52                   	push   edx
c00180bc:	50                   	push   eax
c00180bd:	68 e0 88 02 c0       	push   0xc00288e0
c00180c2:	e8 6c a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00180c7:	83 c4 10             	add    esp,0x10
c00180ca:	b8 98 74 02 c0       	mov    eax,0xc0027498
c00180cf:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00180d6:	78 05                	js     c00180dd <CPU::displayFeatures()+0xa3>
c00180d8:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c00180dd:	51                   	push   ecx
c00180de:	51                   	push   ecx
c00180df:	50                   	push   eax
c00180e0:	68 f7 88 02 c0       	push   0xc00288f7
c00180e5:	e8 49 a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00180ea:	83 c4 10             	add    esp,0x10
c00180ed:	b8 98 74 02 c0       	mov    eax,0xc0027498
c00180f2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00180f9:	75 05                	jne    c0018100 <CPU::displayFeatures()+0xc6>
c00180fb:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c0018100:	52                   	push   edx
c0018101:	52                   	push   edx
c0018102:	50                   	push   eax
c0018103:	68 0e 89 02 c0       	push   0xc002890e
c0018108:	e8 26 a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001810d:	83 c4 10             	add    esp,0x10
c0018110:	b8 98 74 02 c0       	mov    eax,0xc0027498
c0018115:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001811c:	75 05                	jne    c0018123 <CPU::displayFeatures()+0xe9>
c001811e:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c0018123:	51                   	push   ecx
c0018124:	51                   	push   ecx
c0018125:	50                   	push   eax
c0018126:	68 25 89 02 c0       	push   0xc0028925
c001812b:	e8 03 a5 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018130:	83 c4 10             	add    esp,0x10
c0018133:	b8 98 74 02 c0       	mov    eax,0xc0027498
c0018138:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001813f:	75 05                	jne    c0018146 <CPU::displayFeatures()+0x10c>
c0018141:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c0018146:	52                   	push   edx
c0018147:	52                   	push   edx
c0018148:	50                   	push   eax
c0018149:	68 3c 89 02 c0       	push   0xc002893c
c001814e:	e8 e0 a4 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018153:	83 c4 10             	add    esp,0x10
c0018156:	b8 98 74 02 c0       	mov    eax,0xc0027498
c001815b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018162:	75 05                	jne    c0018169 <CPU::displayFeatures()+0x12f>
c0018164:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c0018169:	51                   	push   ecx
c001816a:	51                   	push   ecx
c001816b:	50                   	push   eax
c001816c:	68 53 89 02 c0       	push   0xc0028953
c0018171:	e8 bd a4 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018176:	83 c4 10             	add    esp,0x10
c0018179:	b8 98 74 02 c0       	mov    eax,0xc0027498
c001817e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018185:	75 05                	jne    c001818c <CPU::displayFeatures()+0x152>
c0018187:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c001818c:	52                   	push   edx
c001818d:	52                   	push   edx
c001818e:	50                   	push   eax
c001818f:	68 6a 89 02 c0       	push   0xc002896a
c0018194:	e8 9a a4 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	b8 98 74 02 c0       	mov    eax,0xc0027498
c00181a1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00181a8:	75 05                	jne    c00181af <CPU::displayFeatures()+0x175>
c00181aa:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c00181af:	51                   	push   ecx
c00181b0:	51                   	push   ecx
c00181b1:	50                   	push   eax
c00181b2:	68 81 89 02 c0       	push   0xc0028981
c00181b7:	e8 77 a4 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00181bc:	83 c4 10             	add    esp,0x10
c00181bf:	b8 98 74 02 c0       	mov    eax,0xc0027498
c00181c4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00181cb:	75 05                	jne    c00181d2 <CPU::displayFeatures()+0x198>
c00181cd:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c00181d2:	52                   	push   edx
c00181d3:	52                   	push   edx
c00181d4:	50                   	push   eax
c00181d5:	68 98 89 02 c0       	push   0xc0028998
c00181da:	e8 54 a4 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	b8 98 74 02 c0       	mov    eax,0xc0027498
c00181e7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00181ee:	75 05                	jne    c00181f5 <CPU::displayFeatures()+0x1bb>
c00181f0:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c00181f5:	51                   	push   ecx
c00181f6:	51                   	push   ecx
c00181f7:	50                   	push   eax
c00181f8:	68 af 89 02 c0       	push   0xc00289af
c00181fd:	e8 31 a4 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018202:	83 c4 10             	add    esp,0x10
c0018205:	b8 98 74 02 c0       	mov    eax,0xc0027498
c001820a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018211:	75 05                	jne    c0018218 <CPU::displayFeatures()+0x1de>
c0018213:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c0018218:	52                   	push   edx
c0018219:	52                   	push   edx
c001821a:	50                   	push   eax
c001821b:	68 c6 89 02 c0       	push   0xc00289c6
c0018220:	e8 0e a4 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018225:	83 c4 10             	add    esp,0x10
c0018228:	b8 98 74 02 c0       	mov    eax,0xc0027498
c001822d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018234:	75 05                	jne    c001823b <CPU::displayFeatures()+0x201>
c0018236:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c001823b:	51                   	push   ecx
c001823c:	51                   	push   ecx
c001823d:	50                   	push   eax
c001823e:	68 dd 89 02 c0       	push   0xc00289dd
c0018243:	e8 eb a3 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0018248:	83 c4 10             	add    esp,0x10
c001824b:	b8 98 74 02 c0       	mov    eax,0xc0027498
c0018250:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018257:	75 05                	jne    c001825e <CPU::displayFeatures()+0x224>
c0018259:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c001825e:	52                   	push   edx
c001825f:	52                   	push   edx
c0018260:	50                   	push   eax
c0018261:	68 f4 89 02 c0       	push   0xc00289f4
c0018266:	e8 c8 a3 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	b8 98 74 02 c0       	mov    eax,0xc0027498
c0018273:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001827a:	78 05                	js     c0018281 <CPU::displayFeatures()+0x247>
c001827c:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c0018281:	51                   	push   ecx
c0018282:	51                   	push   ecx
c0018283:	50                   	push   eax
c0018284:	68 0b 8a 02 c0       	push   0xc0028a0b
c0018289:	e8 a5 a3 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001828e:	83 c4 10             	add    esp,0x10
c0018291:	b8 98 74 02 c0       	mov    eax,0xc0027498
c0018296:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001829d:	75 05                	jne    c00182a4 <CPU::displayFeatures()+0x26a>
c001829f:	b8 9c 74 02 c0       	mov    eax,0xc002749c
c00182a4:	52                   	push   edx
c00182a5:	52                   	push   edx
c00182a6:	50                   	push   eax
c00182a7:	68 22 8a 02 c0       	push   0xc0028a22
c00182ac:	e8 82 a3 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00182b1:	83 c4 18             	add    esp,0x18
c00182b4:	5b                   	pop    ebx
c00182b5:	c3                   	ret    

c00182b6 <CPU::detectFeatures()>:
c00182b6:	55                   	push   ebp
c00182b7:	57                   	push   edi
c00182b8:	56                   	push   esi
c00182b9:	53                   	push   ebx
c00182ba:	83 ec 50             	sub    esp,0x50
c00182bd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00182c1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00182cb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00182d2:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00182d8:	6a 0d                	push   0xd
c00182da:	6a 00                	push   0x0
c00182dc:	57                   	push   edi
c00182dd:	e8 99 83 fe ff       	call   c000067b <memset>
c00182e2:	83 c4 10             	add    esp,0x10
c00182e5:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00182ea:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00182f1:	0f 84 20 09 00 00    	je     c0018c17 <CPU::detectFeatures()+0x961>
c00182f7:	83 ec 0c             	sub    esp,0xc
c00182fa:	6a 10                	push   0x10
c00182fc:	e8 f3 fb ff ff       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c0018301:	83 e0 01             	and    eax,0x1
c0018304:	8d 14 00             	lea    edx,[eax+eax*1]
c0018307:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001830d:	83 e0 fd             	and    eax,0xfffffffd
c0018310:	09 d0                	or     eax,edx
c0018312:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018318:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001831f:	e8 d0 fb ff ff       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c0018324:	83 e0 01             	and    eax,0x1
c0018327:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001832e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018334:	83 e0 fb             	and    eax,0xfffffffb
c0018337:	09 d0                	or     eax,edx
c0018339:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001833f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018346:	e8 a9 fb ff ff       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c001834b:	83 e0 01             	and    eax,0x1
c001834e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018355:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001835b:	83 e0 f7             	and    eax,0xfffffff7
c001835e:	09 d0                	or     eax,edx
c0018360:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018366:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001836d:	e8 82 fb ff ff       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c0018372:	83 e0 01             	and    eax,0x1
c0018375:	c1 e0 04             	shl    eax,0x4
c0018378:	88 c2                	mov    dl,al
c001837a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018380:	83 e0 ef             	and    eax,0xffffffef
c0018383:	09 d0                	or     eax,edx
c0018385:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001838b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018392:	e8 5d fb ff ff       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c0018397:	83 e0 01             	and    eax,0x1
c001839a:	c1 e0 05             	shl    eax,0x5
c001839d:	88 c2                	mov    dl,al
c001839f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00183a5:	83 e0 df             	and    eax,0xffffffdf
c00183a8:	09 d0                	or     eax,edx
c00183aa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00183b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00183b7:	e8 38 fb ff ff       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c00183bc:	83 e0 01             	and    eax,0x1
c00183bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00183c2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00183c8:	83 e0 fd             	and    eax,0xfffffffd
c00183cb:	09 d0                	or     eax,edx
c00183cd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00183d3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00183da:	e8 15 fb ff ff       	call   c0017ef4 <CPU::cpuidCheckEDX(unsigned int)>
c00183df:	83 e0 01             	and    eax,0x1
c00183e2:	c1 e0 06             	shl    eax,0x6
c00183e5:	88 c2                	mov    dl,al
c00183e7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00183ed:	83 e0 bf             	and    eax,0xffffffbf
c00183f0:	09 d0                	or     eax,edx
c00183f2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00183f8:	58                   	pop    eax
c00183f9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00183fd:	56                   	push   esi
c00183fe:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018402:	55                   	push   ebp
c0018403:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018407:	50                   	push   eax
c0018408:	8d 54 24 28          	lea    edx,[esp+0x28]
c001840c:	52                   	push   edx
c001840d:	6a 00                	push   0x0
c001840f:	e8 5c fa ff ff       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018414:	83 c4 1c             	add    esp,0x1c
c0018417:	6a 04                	push   0x4
c0018419:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001841d:	50                   	push   eax
c001841e:	57                   	push   edi
c001841f:	e8 21 82 fe ff       	call   c0000645 <memcpy>
c0018424:	83 c4 0c             	add    esp,0xc
c0018427:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001842d:	6a 04                	push   0x4
c001842f:	56                   	push   esi
c0018430:	50                   	push   eax
c0018431:	e8 0f 82 fe ff       	call   c0000645 <memcpy>
c0018436:	83 c4 0c             	add    esp,0xc
c0018439:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001843f:	6a 04                	push   0x4
c0018441:	55                   	push   ebp
c0018442:	50                   	push   eax
c0018443:	e8 fd 81 fe ff       	call   c0000645 <memcpy>
c0018448:	58                   	pop    eax
c0018449:	5a                   	pop    edx
c001844a:	68 39 8a 02 c0       	push   0xc0028a39
c001844f:	57                   	push   edi
c0018450:	e8 16 83 fe ff       	call   c000076b <strcmp>
c0018455:	83 c4 10             	add    esp,0x10
c0018458:	85 c0                	test   eax,eax
c001845a:	75 0f                	jne    c001846b <CPU::detectFeatures()+0x1b5>
c001845c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018466:	e9 22 02 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c001846b:	50                   	push   eax
c001846c:	50                   	push   eax
c001846d:	68 46 8a 02 c0       	push   0xc0028a46
c0018472:	57                   	push   edi
c0018473:	e8 f3 82 fe ff       	call   c000076b <strcmp>
c0018478:	83 c4 10             	add    esp,0x10
c001847b:	85 c0                	test   eax,eax
c001847d:	74 dd                	je     c001845c <CPU::detectFeatures()+0x1a6>
c001847f:	51                   	push   ecx
c0018480:	51                   	push   ecx
c0018481:	68 53 8a 02 c0       	push   0xc0028a53
c0018486:	57                   	push   edi
c0018487:	e8 df 82 fe ff       	call   c000076b <strcmp>
c001848c:	83 c4 10             	add    esp,0x10
c001848f:	85 c0                	test   eax,eax
c0018491:	74 2a                	je     c00184bd <CPU::detectFeatures()+0x207>
c0018493:	52                   	push   edx
c0018494:	52                   	push   edx
c0018495:	68 60 8a 02 c0       	push   0xc0028a60
c001849a:	57                   	push   edi
c001849b:	e8 cb 82 fe ff       	call   c000076b <strcmp>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	85 c0                	test   eax,eax
c00184a5:	74 16                	je     c00184bd <CPU::detectFeatures()+0x207>
c00184a7:	50                   	push   eax
c00184a8:	50                   	push   eax
c00184a9:	68 6d 8a 02 c0       	push   0xc0028a6d
c00184ae:	57                   	push   edi
c00184af:	e8 b7 82 fe ff       	call   c000076b <strcmp>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	85 c0                	test   eax,eax
c00184b9:	74 48                	je     c0018503 <CPU::detectFeatures()+0x24d>
c00184bb:	eb 0f                	jmp    c00184cc <CPU::detectFeatures()+0x216>
c00184bd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00184c7:	e9 c1 01 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c00184cc:	50                   	push   eax
c00184cd:	50                   	push   eax
c00184ce:	68 7a 8a 02 c0       	push   0xc0028a7a
c00184d3:	57                   	push   edi
c00184d4:	e8 92 82 fe ff       	call   c000076b <strcmp>
c00184d9:	83 c4 10             	add    esp,0x10
c00184dc:	85 c0                	test   eax,eax
c00184de:	74 23                	je     c0018503 <CPU::detectFeatures()+0x24d>
c00184e0:	50                   	push   eax
c00184e1:	50                   	push   eax
c00184e2:	68 87 8a 02 c0       	push   0xc0028a87
c00184e7:	57                   	push   edi
c00184e8:	e8 7e 82 fe ff       	call   c000076b <strcmp>
c00184ed:	83 c4 10             	add    esp,0x10
c00184f0:	85 c0                	test   eax,eax
c00184f2:	75 1e                	jne    c0018512 <CPU::detectFeatures()+0x25c>
c00184f4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00184fe:	e9 8a 01 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c0018503:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001850d:	e9 7b 01 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c0018512:	50                   	push   eax
c0018513:	50                   	push   eax
c0018514:	68 94 8a 02 c0       	push   0xc0028a94
c0018519:	57                   	push   edi
c001851a:	e8 4c 82 fe ff       	call   c000076b <strcmp>
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	85 c0                	test   eax,eax
c0018524:	75 0f                	jne    c0018535 <CPU::detectFeatures()+0x27f>
c0018526:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018530:	e9 58 01 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c0018535:	50                   	push   eax
c0018536:	50                   	push   eax
c0018537:	68 53 8a 02 c0       	push   0xc0028a53
c001853c:	57                   	push   edi
c001853d:	e8 29 82 fe ff       	call   c000076b <strcmp>
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	85 c0                	test   eax,eax
c0018547:	75 0f                	jne    c0018558 <CPU::detectFeatures()+0x2a2>
c0018549:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018553:	e9 35 01 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c0018558:	50                   	push   eax
c0018559:	50                   	push   eax
c001855a:	68 a1 8a 02 c0       	push   0xc0028aa1
c001855f:	57                   	push   edi
c0018560:	e8 06 82 fe ff       	call   c000076b <strcmp>
c0018565:	83 c4 10             	add    esp,0x10
c0018568:	85 c0                	test   eax,eax
c001856a:	75 0f                	jne    c001857b <CPU::detectFeatures()+0x2c5>
c001856c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018576:	e9 12 01 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c001857b:	51                   	push   ecx
c001857c:	51                   	push   ecx
c001857d:	68 ae 8a 02 c0       	push   0xc0028aae
c0018582:	57                   	push   edi
c0018583:	e8 e3 81 fe ff       	call   c000076b <strcmp>
c0018588:	83 c4 10             	add    esp,0x10
c001858b:	85 c0                	test   eax,eax
c001858d:	75 0f                	jne    c001859e <CPU::detectFeatures()+0x2e8>
c001858f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018599:	e9 ef 00 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c001859e:	52                   	push   edx
c001859f:	52                   	push   edx
c00185a0:	68 bb 8a 02 c0       	push   0xc0028abb
c00185a5:	57                   	push   edi
c00185a6:	e8 c0 81 fe ff       	call   c000076b <strcmp>
c00185ab:	83 c4 10             	add    esp,0x10
c00185ae:	85 c0                	test   eax,eax
c00185b0:	75 0f                	jne    c00185c1 <CPU::detectFeatures()+0x30b>
c00185b2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00185bc:	e9 cc 00 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c00185c1:	50                   	push   eax
c00185c2:	50                   	push   eax
c00185c3:	68 c8 8a 02 c0       	push   0xc0028ac8
c00185c8:	57                   	push   edi
c00185c9:	e8 9d 81 fe ff       	call   c000076b <strcmp>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	85 c0                	test   eax,eax
c00185d3:	75 0f                	jne    c00185e4 <CPU::detectFeatures()+0x32e>
c00185d5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00185df:	e9 a9 00 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c00185e4:	50                   	push   eax
c00185e5:	50                   	push   eax
c00185e6:	68 d5 8a 02 c0       	push   0xc0028ad5
c00185eb:	57                   	push   edi
c00185ec:	e8 7a 81 fe ff       	call   c000076b <strcmp>
c00185f1:	83 c4 10             	add    esp,0x10
c00185f4:	85 c0                	test   eax,eax
c00185f6:	75 0f                	jne    c0018607 <CPU::detectFeatures()+0x351>
c00185f8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018602:	e9 86 00 00 00       	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c0018607:	50                   	push   eax
c0018608:	50                   	push   eax
c0018609:	68 e2 8a 02 c0       	push   0xc0028ae2
c001860e:	57                   	push   edi
c001860f:	e8 57 81 fe ff       	call   c000076b <strcmp>
c0018614:	83 c4 10             	add    esp,0x10
c0018617:	85 c0                	test   eax,eax
c0018619:	75 0c                	jne    c0018627 <CPU::detectFeatures()+0x371>
c001861b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018625:	eb 66                	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c0018627:	50                   	push   eax
c0018628:	50                   	push   eax
c0018629:	68 ef 8a 02 c0       	push   0xc0028aef
c001862e:	57                   	push   edi
c001862f:	e8 37 81 fe ff       	call   c000076b <strcmp>
c0018634:	83 c4 10             	add    esp,0x10
c0018637:	85 c0                	test   eax,eax
c0018639:	75 0c                	jne    c0018647 <CPU::detectFeatures()+0x391>
c001863b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018645:	eb 46                	jmp    c001868d <CPU::detectFeatures()+0x3d7>
c0018647:	50                   	push   eax
c0018648:	50                   	push   eax
c0018649:	68 fc 8a 02 c0       	push   0xc0028afc
c001864e:	57                   	push   edi
c001864f:	e8 17 81 fe ff       	call   c000076b <strcmp>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	85 c0                	test   eax,eax
c0018659:	74 e0                	je     c001863b <CPU::detectFeatures()+0x385>
c001865b:	50                   	push   eax
c001865c:	50                   	push   eax
c001865d:	68 09 8b 02 c0       	push   0xc0028b09
c0018662:	57                   	push   edi
c0018663:	e8 03 81 fe ff       	call   c000076b <strcmp>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	85 c0                	test   eax,eax
c001866d:	74 cc                	je     c001863b <CPU::detectFeatures()+0x385>
c001866f:	51                   	push   ecx
c0018670:	51                   	push   ecx
c0018671:	68 16 8b 02 c0       	push   0xc0028b16
c0018676:	57                   	push   edi
c0018677:	e8 ef 80 fe ff       	call   c000076b <strcmp>
c001867c:	83 c4 10             	add    esp,0x10
c001867f:	85 c0                	test   eax,eax
c0018681:	74 b8                	je     c001863b <CPU::detectFeatures()+0x385>
c0018683:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001868d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018692:	0f 86 be 00 00 00    	jbe    c0018756 <CPU::detectFeatures()+0x4a0>
c0018698:	83 ec 0c             	sub    esp,0xc
c001869b:	68 80 00 00 00       	push   0x80
c00186a0:	e8 ab f8 ff ff       	call   c0017f50 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00186a5:	83 e0 01             	and    eax,0x1
c00186a8:	c1 e0 06             	shl    eax,0x6
c00186ab:	88 c2                	mov    dl,al
c00186ad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00186b3:	83 e0 bf             	and    eax,0xffffffbf
c00186b6:	09 d0                	or     eax,edx
c00186b8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00186be:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00186c5:	e8 86 f8 ff ff       	call   c0017f50 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00186ca:	83 e0 01             	and    eax,0x1
c00186cd:	c1 e0 04             	shl    eax,0x4
c00186d0:	88 c2                	mov    dl,al
c00186d2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00186d8:	83 e0 ef             	and    eax,0xffffffef
c00186db:	09 d0                	or     eax,edx
c00186dd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00186e3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00186ea:	e8 61 f8 ff ff       	call   c0017f50 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00186ef:	c1 e0 07             	shl    eax,0x7
c00186f2:	88 c2                	mov    dl,al
c00186f4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00186fa:	83 e0 7f             	and    eax,0x7f
c00186fd:	09 d0                	or     eax,edx
c00186ff:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018705:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001870c:	e8 6d f8 ff ff       	call   c0017f7e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018711:	83 e0 01             	and    eax,0x1
c0018714:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001871b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018721:	83 e0 f7             	and    eax,0xfffffff7
c0018724:	09 d0                	or     eax,edx
c0018726:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001872c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018733:	e8 46 f8 ff ff       	call   c0017f7e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018738:	83 c4 10             	add    esp,0x10
c001873b:	83 e0 01             	and    eax,0x1
c001873e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018745:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001874b:	83 e0 fb             	and    eax,0xfffffffb
c001874e:	09 d0                	or     eax,edx
c0018750:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018756:	83 ec 0c             	sub    esp,0xc
c0018759:	56                   	push   esi
c001875a:	55                   	push   ebp
c001875b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001875f:	57                   	push   edi
c0018760:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018764:	50                   	push   eax
c0018765:	6a 01                	push   0x1
c0018767:	e8 04 f7 ff ff       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001876c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018770:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018776:	88 ca                	mov    dl,cl
c0018778:	83 e0 f0             	and    eax,0xfffffff0
c001877b:	83 e2 0f             	and    edx,0xf
c001877e:	09 d0                	or     eax,edx
c0018780:	88 ca                	mov    dl,cl
c0018782:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018788:	c0 ea 04             	shr    dl,0x4
c001878b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001878f:	0f b6 c2             	movzx  eax,dl
c0018792:	83 c4 20             	add    esp,0x20
c0018795:	c1 e0 06             	shl    eax,0x6
c0018798:	89 c5                	mov    ebp,eax
c001879a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00187a0:	66 25 3f c0          	and    ax,0xc03f
c00187a4:	09 e8                	or     eax,ebp
c00187a6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00187ad:	89 c8                	mov    eax,ecx
c00187af:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00187b5:	c1 e8 08             	shr    eax,0x8
c00187b8:	83 e2 3f             	and    edx,0x3f
c00187bb:	83 e0 0f             	and    eax,0xf
c00187be:	89 c5                	mov    ebp,eax
c00187c0:	c1 e5 06             	shl    ebp,0x6
c00187c3:	09 d5                	or     ebp,edx
c00187c5:	89 ea                	mov    edx,ebp
c00187c7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00187cd:	88 c2                	mov    dl,al
c00187cf:	c0 ea 02             	shr    dl,0x2
c00187d2:	89 d5                	mov    ebp,edx
c00187d4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00187da:	83 e2 c0             	and    edx,0xffffffc0
c00187dd:	09 d5                	or     ebp,edx
c00187df:	89 ea                	mov    edx,ebp
c00187e1:	89 cd                	mov    ebp,ecx
c00187e3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00187e9:	c1 ed 0c             	shr    ebp,0xc
c00187ec:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00187f2:	83 e5 03             	and    ebp,0x3
c00187f5:	83 e2 cf             	and    edx,0xffffffcf
c00187f8:	c1 e5 04             	shl    ebp,0x4
c00187fb:	09 d5                	or     ebp,edx
c00187fd:	3c 06                	cmp    al,0x6
c00187ff:	89 ea                	mov    edx,ebp
c0018801:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018807:	74 04                	je     c001880d <CPU::detectFeatures()+0x557>
c0018809:	3c 0f                	cmp    al,0xf
c001880b:	75 5c                	jne    c0018869 <CPU::detectFeatures()+0x5b3>
c001880d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018811:	89 cd                	mov    ebp,ecx
c0018813:	c1 ed 10             	shr    ebp,0x10
c0018816:	c1 e5 04             	shl    ebp,0x4
c0018819:	09 ea                	or     edx,ebp
c001881b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018821:	0f b6 d2             	movzx  edx,dl
c0018824:	66 81 e5 3f c0       	and    bp,0xc03f
c0018829:	c1 e2 06             	shl    edx,0x6
c001882c:	09 ea                	or     edx,ebp
c001882e:	3c 0f                	cmp    al,0xf
c0018830:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018837:	75 30                	jne    c0018869 <CPU::detectFeatures()+0x5b3>
c0018839:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001883f:	c1 e9 14             	shr    ecx,0x14
c0018842:	83 e0 3f             	and    eax,0x3f
c0018845:	83 c1 0f             	add    ecx,0xf
c0018848:	88 ca                	mov    dl,cl
c001884a:	c0 e9 02             	shr    cl,0x2
c001884d:	c1 e2 06             	shl    edx,0x6
c0018850:	09 d0                	or     eax,edx
c0018852:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018858:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001885e:	83 e0 c0             	and    eax,0xffffffc0
c0018861:	09 c1                	or     ecx,eax
c0018863:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018869:	83 ec 0c             	sub    esp,0xc
c001886c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018873:	56                   	push   esi
c0018874:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018878:	50                   	push   eax
c0018879:	57                   	push   edi
c001887a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001887e:	55                   	push   ebp
c001887f:	68 00 00 00 80       	push   0x80000000
c0018884:	e8 e7 f5 ff ff       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018889:	83 c4 20             	add    esp,0x20
c001888c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018894:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018898:	76 1e                	jbe    c00188b8 <CPU::detectFeatures()+0x602>
c001889a:	83 ec 0c             	sub    esp,0xc
c001889d:	56                   	push   esi
c001889e:	50                   	push   eax
c001889f:	57                   	push   edi
c00188a0:	55                   	push   ebp
c00188a1:	68 01 00 00 80       	push   0x80000001
c00188a6:	e8 c5 f5 ff ff       	call   c0017e70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188ab:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00188b5:	83 c4 20             	add    esp,0x20
c00188b8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00188be:	83 f8 01             	cmp    eax,0x1
c00188c1:	75 6f                	jne    c0018932 <CPU::detectFeatures()+0x67c>
c00188c3:	51                   	push   ecx
c00188c4:	51                   	push   ecx
c00188c5:	68 22 8b 02 c0       	push   0xc0028b22
c00188ca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00188ce:	56                   	push   esi
c00188cf:	e8 46 7e fe ff       	call   c000071a <strcpy>
c00188d4:	5f                   	pop    edi
c00188d5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00188db:	5d                   	pop    ebp
c00188dc:	66 c1 e8 06          	shr    ax,0x6
c00188e0:	0f b6 c0             	movzx  eax,al
c00188e3:	50                   	push   eax
c00188e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00188ea:	c1 e8 0e             	shr    eax,0xe
c00188ed:	0f b6 c0             	movzx  eax,al
c00188f0:	50                   	push   eax
c00188f1:	e8 24 f2 ff ff       	call   c0017b1a <CPU::lookupIntelName(unsigned char, unsigned char)>
c00188f6:	5a                   	pop    edx
c00188f7:	59                   	pop    ecx
c00188f8:	50                   	push   eax
c00188f9:	56                   	push   esi
c00188fa:	e8 d2 7e fe ff       	call   c00007d1 <strcat>
c00188ff:	5f                   	pop    edi
c0018900:	5d                   	pop    ebp
c0018901:	56                   	push   esi
c0018902:	53                   	push   ebx
c0018903:	e8 fc b2 ff ff       	call   c0013c04 <Device::setName(char const*)>
c0018908:	58                   	pop    eax
c0018909:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001890f:	5a                   	pop    edx
c0018910:	68 29 8b 02 c0       	push   0xc0028b29
c0018915:	50                   	push   eax
c0018916:	e8 50 7e fe ff       	call   c000076b <strcmp>
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	85 c0                	test   eax,eax
c0018920:	0f 85 71 03 00 00    	jne    c0018c97 <CPU::detectFeatures()+0x9e1>
c0018926:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001892d:	e9 65 03 00 00       	jmp    c0018c97 <CPU::detectFeatures()+0x9e1>
c0018932:	83 f8 02             	cmp    eax,0x2
c0018935:	0f 85 b5 00 00 00    	jne    c00189f0 <CPU::detectFeatures()+0x73a>
c001893b:	57                   	push   edi
c001893c:	57                   	push   edi
c001893d:	68 3b 8b 02 c0       	push   0xc0028b3b
c0018942:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018946:	56                   	push   esi
c0018947:	e8 ce 7d fe ff       	call   c000071a <strcpy>
c001894c:	5d                   	pop    ebp
c001894d:	58                   	pop    eax
c001894e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018954:	66 c1 e8 06          	shr    ax,0x6
c0018958:	0f b6 c0             	movzx  eax,al
c001895b:	50                   	push   eax
c001895c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018962:	c1 e8 0e             	shr    eax,0xe
c0018965:	0f b6 c0             	movzx  eax,al
c0018968:	50                   	push   eax
c0018969:	e8 18 f0 ff ff       	call   c0017986 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001896e:	5a                   	pop    edx
c001896f:	59                   	pop    ecx
c0018970:	50                   	push   eax
c0018971:	56                   	push   esi
c0018972:	e8 5a 7e fe ff       	call   c00007d1 <strcat>
c0018977:	5f                   	pop    edi
c0018978:	5d                   	pop    ebp
c0018979:	56                   	push   esi
c001897a:	53                   	push   ebx
c001897b:	e8 84 b2 ff ff       	call   c0013c04 <Device::setName(char const*)>
c0018980:	58                   	pop    eax
c0018981:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018987:	5a                   	pop    edx
c0018988:	68 40 8b 02 c0       	push   0xc0028b40
c001898d:	50                   	push   eax
c001898e:	e8 d8 7d fe ff       	call   c000076b <strcmp>
c0018993:	83 c4 10             	add    esp,0x10
c0018996:	85 c0                	test   eax,eax
c0018998:	75 20                	jne    c00189ba <CPU::detectFeatures()+0x704>
c001899a:	8b 15 c8 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0c8
c00189a0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00189a6:	a8 01                	test   al,0x1
c00189a8:	74 10                	je     c00189ba <CPU::detectFeatures()+0x704>
c00189aa:	83 e0 fe             	and    eax,0xfffffffe
c00189ad:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00189b3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00189ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189c0:	c1 e8 0e             	shr    eax,0xe
c00189c3:	3c 05                	cmp    al,0x5
c00189c5:	0f 85 cc 02 00 00    	jne    c0018c97 <CPU::detectFeatures()+0x9e1>
c00189cb:	56                   	push   esi
c00189cc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00189d2:	83 e0 0f             	and    eax,0xf
c00189d5:	50                   	push   eax
c00189d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189dc:	66 c1 e8 06          	shr    ax,0x6
c00189e0:	0f b6 c0             	movzx  eax,al
c00189e3:	50                   	push   eax
c00189e4:	6a 05                	push   0x5
c00189e6:	e8 11 f4 ff ff       	call   c0017dfc <CPU::AMD_K6_writeback(int, int, int)>
c00189eb:	e9 1f 02 00 00       	jmp    c0018c0f <CPU::detectFeatures()+0x959>
c00189f0:	8d 50 fd             	lea    edx,[eax-0x3]
c00189f3:	83 fa 01             	cmp    edx,0x1
c00189f6:	76 09                	jbe    c0018a01 <CPU::detectFeatures()+0x74b>
c00189f8:	83 f8 06             	cmp    eax,0x6
c00189fb:	0f 85 91 01 00 00    	jne    c0018b92 <CPU::detectFeatures()+0x8dc>
c0018a01:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018a07:	c1 ea 0e             	shr    edx,0xe
c0018a0a:	80 fa 05             	cmp    dl,0x5
c0018a0d:	75 7b                	jne    c0018a8a <CPU::detectFeatures()+0x7d4>
c0018a0f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018a15:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018a1a:	66 81 fa 00 01       	cmp    dx,0x100
c0018a1f:	75 0c                	jne    c0018a2d <CPU::detectFeatures()+0x777>
c0018a21:	51                   	push   ecx
c0018a22:	51                   	push   ecx
c0018a23:	68 47 8b 02 c0       	push   0xc0028b47
c0018a28:	e9 dc 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018a2d:	66 81 fa 00 02       	cmp    dx,0x200
c0018a32:	75 0c                	jne    c0018a40 <CPU::detectFeatures()+0x78a>
c0018a34:	52                   	push   edx
c0018a35:	52                   	push   edx
c0018a36:	68 5a 8b 02 c0       	push   0xc0028b5a
c0018a3b:	e9 c9 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018a40:	66 81 fa 40 02       	cmp    dx,0x240
c0018a45:	75 0c                	jne    c0018a53 <CPU::detectFeatures()+0x79d>
c0018a47:	50                   	push   eax
c0018a48:	50                   	push   eax
c0018a49:	68 6c 8b 02 c0       	push   0xc0028b6c
c0018a4e:	e9 b6 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018a53:	83 f8 06             	cmp    eax,0x6
c0018a56:	75 0c                	jne    c0018a64 <CPU::detectFeatures()+0x7ae>
c0018a58:	50                   	push   eax
c0018a59:	50                   	push   eax
c0018a5a:	68 7e 8b 02 c0       	push   0xc0028b7e
c0018a5f:	e9 a5 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018a64:	83 f8 04             	cmp    eax,0x4
c0018a67:	75 0c                	jne    c0018a75 <CPU::detectFeatures()+0x7bf>
c0018a69:	50                   	push   eax
c0018a6a:	50                   	push   eax
c0018a6b:	68 8a 8b 02 c0       	push   0xc0028b8a
c0018a70:	e9 94 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018a75:	83 f8 03             	cmp    eax,0x3
c0018a78:	0f 85 19 02 00 00    	jne    c0018c97 <CPU::detectFeatures()+0x9e1>
c0018a7e:	50                   	push   eax
c0018a7f:	50                   	push   eax
c0018a80:	68 92 8b 02 c0       	push   0xc0028b92
c0018a85:	e9 7f 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018a8a:	80 fa 06             	cmp    dl,0x6
c0018a8d:	0f 85 db 00 00 00    	jne    c0018b6e <CPU::detectFeatures()+0x8b8>
c0018a93:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018a99:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018a9e:	66 81 fa 80 01       	cmp    dx,0x180
c0018aa3:	75 0c                	jne    c0018ab1 <CPU::detectFeatures()+0x7fb>
c0018aa5:	50                   	push   eax
c0018aa6:	50                   	push   eax
c0018aa7:	68 9d 8b 02 c0       	push   0xc0028b9d
c0018aac:	e9 58 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018ab1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018ab7:	66 f7 c1 80 ff       	test   cx,0xff80
c0018abc:	75 0c                	jne    c0018aca <CPU::detectFeatures()+0x814>
c0018abe:	50                   	push   eax
c0018abf:	50                   	push   eax
c0018ac0:	68 ad 8b 02 c0       	push   0xc0028bad
c0018ac5:	e9 3f 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018aca:	66 81 fa 40 02       	cmp    dx,0x240
c0018acf:	75 0c                	jne    c0018add <CPU::detectFeatures()+0x827>
c0018ad1:	55                   	push   ebp
c0018ad2:	55                   	push   ebp
c0018ad3:	68 b4 8b 02 c0       	push   0xc0028bb4
c0018ad8:	e9 2c 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018add:	66 81 fa 80 02       	cmp    dx,0x280
c0018ae2:	75 0c                	jne    c0018af0 <CPU::detectFeatures()+0x83a>
c0018ae4:	57                   	push   edi
c0018ae5:	57                   	push   edi
c0018ae6:	68 bd 8b 02 c0       	push   0xc0028bbd
c0018aeb:	e9 19 01 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018af0:	66 81 fa 40 03       	cmp    dx,0x340
c0018af5:	74 ed                	je     c0018ae4 <CPU::detectFeatures()+0x82e>
c0018af7:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018afc:	75 0c                	jne    c0018b0a <CPU::detectFeatures()+0x854>
c0018afe:	56                   	push   esi
c0018aff:	56                   	push   esi
c0018b00:	68 c4 8b 02 c0       	push   0xc0028bc4
c0018b05:	e9 ff 00 00 00       	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018b0a:	83 f8 06             	cmp    eax,0x6
c0018b0d:	0f 84 45 ff ff ff    	je     c0018a58 <CPU::detectFeatures()+0x7a2>
c0018b13:	83 f8 04             	cmp    eax,0x4
c0018b16:	0f 84 4d ff ff ff    	je     c0018a69 <CPU::detectFeatures()+0x7b3>
c0018b1c:	83 f8 03             	cmp    eax,0x3
c0018b1f:	0f 85 72 01 00 00    	jne    c0018c97 <CPU::detectFeatures()+0x9e1>
c0018b25:	51                   	push   ecx
c0018b26:	51                   	push   ecx
c0018b27:	68 cd 8b 02 c0       	push   0xc0028bcd
c0018b2c:	53                   	push   ebx
c0018b2d:	e8 d2 b0 ff ff       	call   c0013c04 <Device::setName(char const*)>
c0018b32:	b1 c1                	mov    cl,0xc1
c0018b34:	88 c8                	mov    al,cl
c0018b36:	e6 22                	out    0x22,al
c0018b38:	e4 23                	in     al,0x23
c0018b3a:	88 c2                	mov    dl,al
c0018b3c:	88 c8                	mov    al,cl
c0018b3e:	e6 22                	out    0x22,al
c0018b40:	88 d0                	mov    al,dl
c0018b42:	83 c8 10             	or     eax,0x10
c0018b45:	e6 23                	out    0x23,al
c0018b47:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018b4e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018b51:	89 d0                	mov    eax,edx
c0018b53:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018b59:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018b5d:	40                   	inc    eax
c0018b5e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018b64:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018b69:	e9 a1 00 00 00       	jmp    c0018c0f <CPU::detectFeatures()+0x959>
c0018b6e:	83 f8 06             	cmp    eax,0x6
c0018b71:	0f 84 e1 fe ff ff    	je     c0018a58 <CPU::detectFeatures()+0x7a2>
c0018b77:	83 f8 04             	cmp    eax,0x4
c0018b7a:	0f 84 e9 fe ff ff    	je     c0018a69 <CPU::detectFeatures()+0x7b3>
c0018b80:	83 f8 03             	cmp    eax,0x3
c0018b83:	0f 85 0e 01 00 00    	jne    c0018c97 <CPU::detectFeatures()+0x9e1>
c0018b89:	52                   	push   edx
c0018b8a:	52                   	push   edx
c0018b8b:	68 d8 8b 02 c0       	push   0xc0028bd8
c0018b90:	eb 77                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018b92:	83 f8 07             	cmp    eax,0x7
c0018b95:	75 09                	jne    c0018ba0 <CPU::detectFeatures()+0x8ea>
c0018b97:	50                   	push   eax
c0018b98:	50                   	push   eax
c0018b99:	68 e2 8b 02 c0       	push   0xc0028be2
c0018b9e:	eb 69                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018ba0:	83 f8 0a             	cmp    eax,0xa
c0018ba3:	75 09                	jne    c0018bae <CPU::detectFeatures()+0x8f8>
c0018ba5:	50                   	push   eax
c0018ba6:	50                   	push   eax
c0018ba7:	68 ed 8b 02 c0       	push   0xc0028bed
c0018bac:	eb 5b                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018bae:	83 f8 0b             	cmp    eax,0xb
c0018bb1:	75 09                	jne    c0018bbc <CPU::detectFeatures()+0x906>
c0018bb3:	50                   	push   eax
c0018bb4:	50                   	push   eax
c0018bb5:	68 f5 8b 02 c0       	push   0xc0028bf5
c0018bba:	eb 4d                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018bbc:	83 f8 08             	cmp    eax,0x8
c0018bbf:	75 09                	jne    c0018bca <CPU::detectFeatures()+0x914>
c0018bc1:	50                   	push   eax
c0018bc2:	50                   	push   eax
c0018bc3:	68 fe 8b 02 c0       	push   0xc0028bfe
c0018bc8:	eb 3f                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018bca:	83 f8 09             	cmp    eax,0x9
c0018bcd:	75 09                	jne    c0018bd8 <CPU::detectFeatures()+0x922>
c0018bcf:	50                   	push   eax
c0018bd0:	50                   	push   eax
c0018bd1:	68 06 8c 02 c0       	push   0xc0028c06
c0018bd6:	eb 31                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018bd8:	83 f8 05             	cmp    eax,0x5
c0018bdb:	75 09                	jne    c0018be6 <CPU::detectFeatures()+0x930>
c0018bdd:	50                   	push   eax
c0018bde:	50                   	push   eax
c0018bdf:	68 0e 8c 02 c0       	push   0xc0028c0e
c0018be4:	eb 23                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018be6:	83 f8 0c             	cmp    eax,0xc
c0018be9:	75 09                	jne    c0018bf4 <CPU::detectFeatures()+0x93e>
c0018beb:	55                   	push   ebp
c0018bec:	55                   	push   ebp
c0018bed:	68 1c 8c 02 c0       	push   0xc0028c1c
c0018bf2:	eb 15                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018bf4:	83 f8 0d             	cmp    eax,0xd
c0018bf7:	75 09                	jne    c0018c02 <CPU::detectFeatures()+0x94c>
c0018bf9:	57                   	push   edi
c0018bfa:	57                   	push   edi
c0018bfb:	68 27 8c 02 c0       	push   0xc0028c27
c0018c00:	eb 07                	jmp    c0018c09 <CPU::detectFeatures()+0x953>
c0018c02:	56                   	push   esi
c0018c03:	56                   	push   esi
c0018c04:	68 3b 8c 02 c0       	push   0xc0028c3b
c0018c09:	53                   	push   ebx
c0018c0a:	e8 f5 af ff ff       	call   c0013c04 <Device::setName(char const*)>
c0018c0f:	83 c4 10             	add    esp,0x10
c0018c12:	e9 80 00 00 00       	jmp    c0018c97 <CPU::detectFeatures()+0x9e1>
c0018c17:	51                   	push   ecx
c0018c18:	51                   	push   ecx
c0018c19:	68 87 8a 02 c0       	push   0xc0028a87
c0018c1e:	57                   	push   edi
c0018c1f:	e8 f6 7a fe ff       	call   c000071a <strcpy>
c0018c24:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018c2e:	e8 30 76 fe ff       	call   c0000263 <is486>
c0018c33:	83 c4 10             	add    esp,0x10
c0018c36:	85 c0                	test   eax,eax
c0018c38:	74 2b                	je     c0018c65 <CPU::detectFeatures()+0x9af>
c0018c3a:	52                   	push   edx
c0018c3b:	52                   	push   edx
c0018c3c:	68 47 8c 02 c0       	push   0xc0028c47
c0018c41:	53                   	push   ebx
c0018c42:	e8 bd af ff ff       	call   c0013c04 <Device::setName(char const*)>
c0018c47:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018c4e:	0f 20 c0             	mov    eax,cr0
c0018c51:	83 e0 14             	and    eax,0x14
c0018c54:	83 c4 10             	add    esp,0x10
c0018c57:	83 f8 04             	cmp    eax,0x4
c0018c5a:	75 1f                	jne    c0018c7b <CPU::detectFeatures()+0x9c5>
c0018c5c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018c63:	eb 32                	jmp    c0018c97 <CPU::detectFeatures()+0x9e1>
c0018c65:	50                   	push   eax
c0018c66:	50                   	push   eax
c0018c67:	68 52 8c 02 c0       	push   0xc0028c52
c0018c6c:	53                   	push   ebx
c0018c6d:	e8 92 af ff ff       	call   c0013c04 <Device::setName(char const*)>
c0018c72:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018c79:	eb d3                	jmp    c0018c4e <CPU::detectFeatures()+0x998>
c0018c7b:	e8 be 75 fe ff       	call   c000023e <hasLegacyFPU>
c0018c80:	83 e0 01             	and    eax,0x1
c0018c83:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c86:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c8c:	83 e0 fd             	and    eax,0xfffffffd
c0018c8f:	09 d0                	or     eax,edx
c0018c91:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c97:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018c9e:	83 c4 4c             	add    esp,0x4c
c0018ca1:	5b                   	pop    ebx
c0018ca2:	5e                   	pop    esi
c0018ca3:	5f                   	pop    edi
c0018ca4:	5d                   	pop    ebp
c0018ca5:	c3                   	ret    

c0018ca6 <CPU::setupSMEP()>:
c0018ca6:	0f 20 e0             	mov    eax,cr4
c0018ca9:	0d 00 00 10 00       	or     eax,0x100000
c0018cae:	0f 22 e0             	mov    cr4,eax
c0018cb1:	c3                   	ret    

c0018cb2 <CPU::setupUMIP()>:
c0018cb2:	0f 20 e0             	mov    eax,cr4
c0018cb5:	80 cc 08             	or     ah,0x8
c0018cb8:	0f 22 e0             	mov    cr4,eax
c0018cbb:	c3                   	ret    

c0018cbc <CPU::setupTSC()>:
c0018cbc:	0f 20 e0             	mov    eax,cr4
c0018cbf:	83 c8 04             	or     eax,0x4
c0018cc2:	0f 22 e0             	mov    cr4,eax
c0018cc5:	c3                   	ret    

c0018cc6 <CPU::setupLargePages()>:
c0018cc6:	0f 20 e0             	mov    eax,cr4
c0018cc9:	83 c8 10             	or     eax,0x10
c0018ccc:	0f 22 e0             	mov    cr4,eax
c0018ccf:	c3                   	ret    

c0018cd0 <CPU::setupPAT()>:
c0018cd0:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0018cd5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018cdc:	74 2c                	je     c0018d0a <CPU::setupPAT()+0x3a>
c0018cde:	53                   	push   ebx
c0018cdf:	83 ec 10             	sub    esp,0x10
c0018ce2:	68 77 02 00 00       	push   0x277
c0018ce7:	50                   	push   eax
c0018ce8:	e8 7b 5d ff ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c0018ced:	83 e2 f8             	and    edx,0xfffffff8
c0018cf0:	83 ca 01             	or     edx,0x1
c0018cf3:	52                   	push   edx
c0018cf4:	50                   	push   eax
c0018cf5:	68 77 02 00 00       	push   0x277
c0018cfa:	ff 35 c8 b0 02 c0    	push   DWORD PTR ds:0xc002b0c8
c0018d00:	e8 8f 5d ff ff       	call   c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018d05:	83 c4 28             	add    esp,0x28
c0018d08:	5b                   	pop    ebx
c0018d09:	c3                   	ret    
c0018d0a:	c3                   	ret    
c0018d0b:	90                   	nop

c0018d0c <CPU::setupMTRR()>:
c0018d0c:	c3                   	ret    
c0018d0d:	90                   	nop

c0018d0e <CPU::setupGlobalPages()>:
c0018d0e:	0f 20 e0             	mov    eax,cr4
c0018d11:	0c 80                	or     al,0x80
c0018d13:	0f 22 e0             	mov    cr4,eax
c0018d16:	c3                   	ret    
c0018d17:	90                   	nop

c0018d18 <CPU::allowUsermodeDataAccess()>:
c0018d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d1c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018d23:	74 03                	je     c0018d28 <CPU::allowUsermodeDataAccess()+0x10>
c0018d25:	0f 01 cb             	stac   
c0018d28:	c3                   	ret    
c0018d29:	90                   	nop

c0018d2a <CPU::prohibitUsermodeDataAccess()>:
c0018d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d2e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018d35:	74 03                	je     c0018d3a <CPU::prohibitUsermodeDataAccess()+0x10>
c0018d37:	0f 01 ca             	clac   
c0018d3a:	c3                   	ret    
c0018d3b:	90                   	nop

c0018d3c <CPU::setupSMAP()>:
c0018d3c:	0f 20 e0             	mov    eax,cr4
c0018d3f:	0d 00 00 20 00       	or     eax,0x200000
c0018d44:	0f 22 e0             	mov    cr4,eax
c0018d47:	eb e1                	jmp    c0018d2a <CPU::prohibitUsermodeDataAccess()>
c0018d49:	90                   	nop

c0018d4a <CPU::setupFeatures()>:
c0018d4a:	83 ec 0c             	sub    esp,0xc
c0018d4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d51:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018d58:	74 07                	je     c0018d61 <CPU::setupFeatures()+0x17>
c0018d5a:	52                   	push   edx
c0018d5b:	e8 46 ff ff ff       	call   c0018ca6 <CPU::setupSMEP()>
c0018d60:	58                   	pop    eax
c0018d61:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018d68:	74 07                	je     c0018d71 <CPU::setupFeatures()+0x27>
c0018d6a:	52                   	push   edx
c0018d6b:	e8 cc ff ff ff       	call   c0018d3c <CPU::setupSMAP()>
c0018d70:	58                   	pop    eax
c0018d71:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018d78:	74 07                	je     c0018d81 <CPU::setupFeatures()+0x37>
c0018d7a:	52                   	push   edx
c0018d7b:	e8 32 ff ff ff       	call   c0018cb2 <CPU::setupUMIP()>
c0018d80:	58                   	pop    eax
c0018d81:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018d88:	74 07                	je     c0018d91 <CPU::setupFeatures()+0x47>
c0018d8a:	52                   	push   edx
c0018d8b:	e8 2c ff ff ff       	call   c0018cbc <CPU::setupTSC()>
c0018d90:	58                   	pop    eax
c0018d91:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018d98:	74 07                	je     c0018da1 <CPU::setupFeatures()+0x57>
c0018d9a:	52                   	push   edx
c0018d9b:	e8 26 ff ff ff       	call   c0018cc6 <CPU::setupLargePages()>
c0018da0:	59                   	pop    ecx
c0018da1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018da8:	74 07                	je     c0018db1 <CPU::setupFeatures()+0x67>
c0018daa:	52                   	push   edx
c0018dab:	e8 5e ff ff ff       	call   c0018d0e <CPU::setupGlobalPages()>
c0018db0:	58                   	pop    eax
c0018db1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018db8:	74 0c                	je     c0018dc6 <CPU::setupFeatures()+0x7c>
c0018dba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018dbe:	83 c4 0c             	add    esp,0xc
c0018dc1:	e9 0a ff ff ff       	jmp    c0018cd0 <CPU::setupPAT()>
c0018dc6:	83 c4 0c             	add    esp,0xc
c0018dc9:	c3                   	ret    

c0018dca <CPU::open(int, int, void*)>:
c0018dca:	57                   	push   edi
c0018dcb:	56                   	push   esi
c0018dcc:	53                   	push   ebx
c0018dcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018dd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018dd5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018ddb:	83 ec 0c             	sub    esp,0xc
c0018dde:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018de4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018dea:	50                   	push   eax
c0018deb:	e8 64 5f ff ff       	call   c000ed54 <GDT::setup()>
c0018df0:	83 c4 0c             	add    esp,0xc
c0018df3:	6a 00                	push   0x0
c0018df5:	68 ef be ad de       	push   0xdeadbeef
c0018dfa:	57                   	push   edi
c0018dfb:	e8 b4 81 ff ff       	call   c0010fb4 <TSS::setup(unsigned long, unsigned long)>
c0018e00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018e03:	e8 8c 81 ff ff       	call   c0010f94 <TSS::flush()>
c0018e08:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e11:	e8 9a 61 ff ff       	call   c000efb0 <IDT::setup()>
c0018e16:	b8 00 04 00 00       	mov    eax,0x400
c0018e1b:	0f 23 f8             	mov    db7,eax
c0018e1e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018e28:	e8 3d 6c ff ff       	call   c000fa6a <Phys::allocatePage()>
c0018e2d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018e33:	89 30                	mov    DWORD PTR [eax],esi
c0018e35:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018e3b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018e3e:	58                   	pop    eax
c0018e3f:	5a                   	pop    edx
c0018e40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018e46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018e4a:	e8 97 91 ff ff       	call   c0011fe6 <VAS::setCPUSpecific(unsigned long)>
c0018e4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e52:	e8 5f f4 ff ff       	call   c00182b6 <CPU::detectFeatures()>
c0018e57:	e8 8c c0 ff ff       	call   c0014ee8 <setupInterruptController()>
c0018e5c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018e62:	a1 e0 b0 02 c0       	mov    eax,ds:0xc002b0e0
c0018e67:	83 e0 10             	and    eax,0x10
c0018e6a:	83 f8 01             	cmp    eax,0x1
c0018e6d:	19 c0                	sbb    eax,eax
c0018e6f:	83 e0 46             	and    eax,0x46
c0018e72:	83 c0 1e             	add    eax,0x1e
c0018e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e78:	e8 25 d4 ff ff       	call   c00162a2 <setupTimer(int)>
c0018e7d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018e83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e86:	e8 bf fe ff ff       	call   c0018d4a <CPU::setupFeatures()>
c0018e8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e8e:	e8 a7 f1 ff ff       	call   c001803a <CPU::displayFeatures()>
c0018e93:	83 c4 10             	add    esp,0x10
c0018e96:	31 c0                	xor    eax,eax
c0018e98:	5b                   	pop    ebx
c0018e99:	5e                   	pop    esi
c0018e9a:	5f                   	pop    edi
c0018e9b:	c3                   	ret    

c0018e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018e9c:	57                   	push   edi
c0018e9d:	56                   	push   esi
c0018e9e:	53                   	push   ebx
c0018e9f:	51                   	push   ecx
c0018ea0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018ea4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018ea7:	0f 02 c0             	lar    eax,ax
c0018eaa:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018ead:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018eb1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018eb4:	88 ca                	mov    dl,cl
c0018eb6:	c0 ea 06             	shr    dl,0x6
c0018eb9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018ebd:	89 ca                	mov    edx,ecx
c0018ebf:	66 c1 ea 03          	shr    dx,0x3
c0018ec3:	83 e2 07             	and    edx,0x7
c0018ec6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018ecb:	88 17                	mov    BYTE PTR [edi],dl
c0018ecd:	0f 84 a6 01 00 00    	je     c0019079 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018ed3:	83 e1 07             	and    ecx,0x7
c0018ed6:	80 f9 04             	cmp    cl,0x4
c0018ed9:	0f 84 98 00 00 00    	je     c0018f77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018edf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018ee4:	0f 95 c0             	setne  al
c0018ee7:	80 f9 05             	cmp    cl,0x5
c0018eea:	0f 95 c2             	setne  dl
c0018eed:	08 c2                	or     dl,al
c0018eef:	74 79                	je     c0018f6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018ef1:	84 c9                	test   cl,cl
c0018ef3:	75 05                	jne    c0018efa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018ef5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018ef8:	eb 3c                	jmp    c0018f36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018efa:	80 f9 01             	cmp    cl,0x1
c0018efd:	75 05                	jne    c0018f04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018eff:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018f02:	eb 32                	jmp    c0018f36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018f04:	80 f9 02             	cmp    cl,0x2
c0018f07:	75 05                	jne    c0018f0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018f09:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018f0c:	eb 28                	jmp    c0018f36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018f0e:	31 c0                	xor    eax,eax
c0018f10:	80 f9 03             	cmp    cl,0x3
c0018f13:	75 05                	jne    c0018f1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018f15:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018f18:	eb 1c                	jmp    c0018f36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018f1a:	80 f9 05             	cmp    cl,0x5
c0018f1d:	75 05                	jne    c0018f24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018f1f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018f22:	eb 12                	jmp    c0018f36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018f24:	80 f9 06             	cmp    cl,0x6
c0018f27:	75 05                	jne    c0018f2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018f29:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018f2c:	eb 08                	jmp    c0018f36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018f2e:	80 f9 07             	cmp    cl,0x7
c0018f31:	75 03                	jne    c0018f36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018f33:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018f36:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018f3b:	75 10                	jne    c0018f4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018f3d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018f41:	b9 03 00 00 00       	mov    ecx,0x3
c0018f46:	01 d0                	add    eax,edx
c0018f48:	e9 37 01 00 00       	jmp    c0019084 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018f4d:	b9 02 00 00 00       	mov    ecx,0x2
c0018f52:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0018f57:	0f 85 27 01 00 00    	jne    c0019084 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018f5d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0018f60:	b9 06 00 00 00       	mov    ecx,0x6
c0018f65:	e9 1a 01 00 00       	jmp    c0019084 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018f6a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0018f6d:	b9 06 00 00 00       	mov    ecx,0x6
c0018f72:	e9 0f 01 00 00       	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018f77:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0018f7a:	88 ca                	mov    dl,cl
c0018f7c:	c0 ea 06             	shr    dl,0x6
c0018f7f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0018f83:	89 ca                	mov    edx,ecx
c0018f85:	66 c1 ea 03          	shr    dx,0x3
c0018f89:	83 e2 07             	and    edx,0x7
c0018f8c:	80 e1 07             	and    cl,0x7
c0018f8f:	75 05                	jne    c0018f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0018f91:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0018f94:	eb 4c                	jmp    c0018fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018f96:	80 f9 01             	cmp    cl,0x1
c0018f99:	75 05                	jne    c0018fa0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0018f9b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0018f9e:	eb 42                	jmp    c0018fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018fa0:	80 f9 02             	cmp    cl,0x2
c0018fa3:	75 05                	jne    c0018faa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0018fa5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018fa8:	eb 38                	jmp    c0018fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018faa:	80 f9 03             	cmp    cl,0x3
c0018fad:	75 05                	jne    c0018fb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0018faf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0018fb2:	eb 2e                	jmp    c0018fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018fb4:	80 f9 04             	cmp    cl,0x4
c0018fb7:	75 12                	jne    c0018fcb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018fb9:	f6 c4 60             	test   ah,0x60
c0018fbc:	75 08                	jne    c0018fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0018fbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018fc1:	8d 78 14             	lea    edi,[eax+0x14]
c0018fc4:	eb 1c                	jmp    c0018fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018fc6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018fc9:	eb 17                	jmp    c0018fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018fcb:	80 f9 05             	cmp    cl,0x5
c0018fce:	75 05                	jne    c0018fd5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018fd0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018fd3:	eb 0d                	jmp    c0018fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018fd5:	80 f9 06             	cmp    cl,0x6
c0018fd8:	75 05                	jne    c0018fdf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018fda:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018fdd:	eb 03                	jmp    c0018fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018fdf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018fe2:	84 d2                	test   dl,dl
c0018fe4:	75 05                	jne    c0018feb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018fe6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018fe9:	eb 3c                	jmp    c0019027 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018feb:	80 fa 01             	cmp    dl,0x1
c0018fee:	75 05                	jne    c0018ff5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018ff0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018ff3:	eb 32                	jmp    c0019027 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018ff5:	80 fa 02             	cmp    dl,0x2
c0018ff8:	75 05                	jne    c0018fff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018ffa:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018ffd:	eb 28                	jmp    c0019027 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018fff:	80 fa 03             	cmp    dl,0x3
c0019002:	75 05                	jne    c0019009 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019004:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019007:	eb 1e                	jmp    c0019027 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019009:	31 c0                	xor    eax,eax
c001900b:	80 fa 04             	cmp    dl,0x4
c001900e:	74 17                	je     c0019027 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019010:	80 fa 05             	cmp    dl,0x5
c0019013:	75 05                	jne    c001901a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019015:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019018:	eb 0d                	jmp    c0019027 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001901a:	80 fa 06             	cmp    dl,0x6
c001901d:	75 05                	jne    c0019024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001901f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019022:	eb 03                	jmp    c0019027 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019024:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019027:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001902c:	0f 94 c2             	sete   dl
c001902f:	80 f9 05             	cmp    cl,0x5
c0019032:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019036:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001903b:	d3 e0                	shl    eax,cl
c001903d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019041:	74 0a                	je     c001904d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019043:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019046:	b9 07 00 00 00       	mov    ecx,0x7
c001904b:	eb 37                	jmp    c0019084 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001904d:	01 f8                	add    eax,edi
c001904f:	b9 03 00 00 00       	mov    ecx,0x3
c0019054:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019059:	74 2b                	je     c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001905b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019060:	75 0d                	jne    c001906f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019062:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019066:	01 c8                	add    eax,ecx
c0019068:	b9 04 00 00 00       	mov    ecx,0x4
c001906d:	eb 17                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001906f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019072:	b9 07 00 00 00       	mov    ecx,0x7
c0019077:	eb 0d                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019079:	b9 02 00 00 00       	mov    ecx,0x2
c001907e:	b2 01                	mov    dl,0x1
c0019080:	31 c0                	xor    eax,eax
c0019082:	eb 02                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019084:	31 d2                	xor    edx,edx
c0019086:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001908a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001908c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019090:	88 11                	mov    BYTE PTR [ecx],dl
c0019092:	5a                   	pop    edx
c0019093:	5b                   	pop    ebx
c0019094:	5e                   	pop    esi
c0019095:	5f                   	pop    edi
c0019096:	c3                   	ret    

c0019097 <Krnl::panic(char const*)>:
c0019097:	55                   	push   ebp
c0019098:	89 e5                	mov    ebp,esp
c001909a:	53                   	push   ebx
c001909b:	50                   	push   eax
c001909c:	a1 d0 bb 02 c0       	mov    eax,ds:0xc002bbd0
c00190a1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00190a4:	85 c0                	test   eax,eax
c00190a6:	74 02                	je     c00190aa <Krnl::panic(char const*)+0x13>
c00190a8:	ff d0                	call   eax
c00190aa:	fa                   	cli    
c00190ab:	c6 05 d4 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bbd4,0x1
c00190b2:	83 ec 08             	sub    esp,0x8
c00190b5:	c6 05 80 a0 02 c0 00 	mov    BYTE PTR ds:0xc002a080,0x0
c00190bc:	53                   	push   ebx
c00190bd:	68 8c 8c 02 c0       	push   0xc0028c8c
c00190c2:	e8 6c 95 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00190c7:	58                   	pop    eax
c00190c8:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00190cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190d3:	e8 1d 77 ff ff       	call   c00107f5 <setActiveTerminal(VgaText*)>
c00190d8:	83 c4 0c             	add    esp,0xc
c00190db:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00190e0:	6a 01                	push   0x1
c00190e2:	6a 0f                	push   0xf
c00190e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190ea:	e8 45 71 ff ff       	call   c0010234 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00190ef:	5a                   	pop    edx
c00190f0:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00190f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190fb:	e8 96 79 ff ff       	call   c0010a96 <VgaText::clearScreen()>
c0019100:	59                   	pop    ecx
c0019101:	58                   	pop    eax
c0019102:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019107:	68 a5 8c 02 c0       	push   0xc0028ca5
c001910c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019112:	e8 fd 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0019117:	58                   	pop    eax
c0019118:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001911d:	5a                   	pop    edx
c001911e:	68 4c 8d 02 c0       	push   0xc0028d4c
c0019123:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019129:	e8 e6 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001912e:	59                   	pop    ecx
c001912f:	58                   	pop    eax
c0019130:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019135:	68 c1 8c 02 c0       	push   0xc0028cc1
c001913a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019140:	e8 cf 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0019145:	58                   	pop    eax
c0019146:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001914b:	5a                   	pop    edx
c001914c:	53                   	push   ebx
c001914d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019153:	e8 bc 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0019158:	59                   	pop    ecx
c0019159:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001915e:	5b                   	pop    ebx
c001915f:	68 e1 8c 02 c0       	push   0xc0028ce1
c0019164:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001916a:	e8 a5 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001916f:	58                   	pop    eax
c0019170:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019175:	5a                   	pop    edx
c0019176:	68 88 8d 02 c0       	push   0xc0028d88
c001917b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019181:	e8 8e 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0019186:	59                   	pop    ecx
c0019187:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001918c:	5b                   	pop    ebx
c001918d:	68 c1 8c 02 c0       	push   0xc0028cc1
c0019192:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019198:	e8 77 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001919d:	58                   	pop    eax
c001919e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191a3:	5a                   	pop    edx
c00191a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00191a7:	83 c0 0c             	add    eax,0xc
c00191aa:	50                   	push   eax
c00191ab:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00191b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191b6:	e8 59 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00191bb:	59                   	pop    ecx
c00191bc:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00191c1:	5b                   	pop    ebx
c00191c2:	68 e0 8c 02 c0       	push   0xc0028ce0
c00191c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191cd:	e8 42 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00191d2:	58                   	pop    eax
c00191d3:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00191d8:	5a                   	pop    edx
c00191d9:	68 b4 8d 02 c0       	push   0xc0028db4
c00191de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191e4:	e8 2b 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00191e9:	59                   	pop    ecx
c00191ea:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00191ef:	5b                   	pop    ebx
c00191f0:	68 f4 8d 02 c0       	push   0xc0028df4
c00191f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191fb:	e8 14 7a ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0019200:	58                   	pop    eax
c0019201:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019206:	5a                   	pop    edx
c0019207:	68 cc 8c 02 c0       	push   0xc0028ccc
c001920c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019212:	e8 fd 79 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0019217:	59                   	pop    ecx
c0019218:	5b                   	pop    ebx
c0019219:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001921c:	68 e4 8c 02 c0       	push   0xc0028ce4
c0019221:	e8 0d 94 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0019226:	58                   	pop    eax
c0019227:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001922a:	5a                   	pop    edx
c001922b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001922e:	68 ed 8c 02 c0       	push   0xc0028ced
c0019233:	e8 fb 93 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0019238:	59                   	pop    ecx
c0019239:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001923c:	5b                   	pop    ebx
c001923d:	8b 00                	mov    eax,DWORD PTR [eax]
c001923f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019242:	68 f6 8c 02 c0       	push   0xc0028cf6
c0019247:	e8 e7 93 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001924c:	58                   	pop    eax
c001924d:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019252:	5a                   	pop    edx
c0019253:	68 38 8e 02 c0       	push   0xc0028e38
c0019258:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001925e:	e8 b1 79 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0019263:	59                   	pop    ecx
c0019264:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019269:	5b                   	pop    ebx
c001926a:	68 ff 8c 02 c0       	push   0xc0028cff
c001926f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019275:	e8 9a 79 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001927a:	0f 20 c0             	mov    eax,cr0
c001927d:	5a                   	pop    edx
c001927e:	59                   	pop    ecx
c001927f:	50                   	push   eax
c0019280:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019285:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001928b:	e8 aa 79 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c0019290:	5b                   	pop    ebx
c0019291:	58                   	pop    eax
c0019292:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019297:	68 09 8d 02 c0       	push   0xc0028d09
c001929c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192a2:	e8 6d 79 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00192a7:	0f 20 d0             	mov    eax,cr2
c00192aa:	5a                   	pop    edx
c00192ab:	59                   	pop    ecx
c00192ac:	50                   	push   eax
c00192ad:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00192b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192b8:	e8 7d 79 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00192bd:	5b                   	pop    ebx
c00192be:	58                   	pop    eax
c00192bf:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00192c4:	68 13 8d 02 c0       	push   0xc0028d13
c00192c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192cf:	e8 40 79 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c00192d4:	0f 20 d8             	mov    eax,cr3
c00192d7:	5a                   	pop    edx
c00192d8:	59                   	pop    ecx
c00192d9:	50                   	push   eax
c00192da:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00192df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192e5:	e8 50 79 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00192ea:	5b                   	pop    ebx
c00192eb:	58                   	pop    eax
c00192ec:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00192f1:	68 26 8d 02 c0       	push   0xc0028d26
c00192f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192fc:	e8 13 79 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c0019301:	0f 20 e0             	mov    eax,cr4
c0019304:	5a                   	pop    edx
c0019305:	59                   	pop    ecx
c0019306:	50                   	push   eax
c0019307:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001930c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019312:	e8 23 79 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c0019317:	5b                   	pop    ebx
c0019318:	58                   	pop    eax
c0019319:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001931e:	68 30 8d 02 c0       	push   0xc0028d30
c0019323:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019329:	e8 e6 78 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001932e:	5a                   	pop    edx
c001932f:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019334:	59                   	pop    ecx
c0019335:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001933b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001933e:	50                   	push   eax
c001933f:	e8 f6 78 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c0019344:	5b                   	pop    ebx
c0019345:	58                   	pop    eax
c0019346:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001934b:	68 47 8d 02 c0       	push   0xc0028d47
c0019350:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019356:	e8 b9 78 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001935b:	5a                   	pop    edx
c001935c:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019361:	59                   	pop    ecx
c0019362:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019368:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001936b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001936e:	50                   	push   eax
c001936f:	e8 c6 78 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c0019374:	5b                   	pop    ebx
c0019375:	58                   	pop    eax
c0019376:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001937b:	68 47 8d 02 c0       	push   0xc0028d47
c0019380:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019386:	e8 89 78 ff ff       	call   c0010c14 <VgaText::puts(char const*)>
c001938b:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c0019390:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019393:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019399:	8b 12                	mov    edx,DWORD PTR [edx]
c001939b:	59                   	pop    ecx
c001939c:	5b                   	pop    ebx
c001939d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00193a0:	50                   	push   eax
c00193a1:	e8 94 78 ff ff       	call   c0010c3a <VgaText::putx(unsigned int)>
c00193a6:	83 c4 10             	add    esp,0x10
c00193a9:	b2 fe                	mov    dl,0xfe
c00193ab:	e4 60                	in     al,0x60
c00193ad:	3c 1c                	cmp    al,0x1c
c00193af:	74 04                	je     c00193b5 <Krnl::panic(char const*)+0x31e>
c00193b1:	3c 5a                	cmp    al,0x5a
c00193b3:	75 f6                	jne    c00193ab <Krnl::panic(char const*)+0x314>
c00193b5:	e4 64                	in     al,0x64
c00193b7:	a8 02                	test   al,0x2
c00193b9:	75 fa                	jne    c00193b5 <Krnl::panic(char const*)+0x31e>
c00193bb:	88 d0                	mov    al,dl
c00193bd:	e6 64                	out    0x64,al
c00193bf:	fa                   	cli    
c00193c0:	f4                   	hlt    
c00193c1:	eb e8                	jmp    c00193ab <Krnl::panic(char const*)+0x314>

c00193c3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00193c3:	55                   	push   ebp
c00193c4:	57                   	push   edi
c00193c5:	56                   	push   esi
c00193c6:	53                   	push   ebx
c00193c7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00193cd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00193d4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00193d6:	8d 6e 01             	lea    ebp,[esi+0x1]
c00193d9:	80 fb 40             	cmp    bl,0x40
c00193dc:	75 1b                	jne    c00193f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00193de:	8a 16                	mov    dl,BYTE PTR [esi]
c00193e0:	84 d2                	test   dl,dl
c00193e2:	0f 84 f1 00 00 00    	je     c00194d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00193e8:	8d 46 01             	lea    eax,[esi+0x1]
c00193eb:	80 fa 3a             	cmp    dl,0x3a
c00193ee:	74 04                	je     c00193f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00193f0:	89 c6                	mov    esi,eax
c00193f2:	eb ea                	jmp    c00193de <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00193f4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00193f7:	89 c6                	mov    esi,eax
c00193f9:	50                   	push   eax
c00193fa:	6a 40                	push   0x40
c00193fc:	6a 00                	push   0x0
c00193fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019402:	50                   	push   eax
c0019403:	e8 73 72 fe ff       	call   c000067b <memset>
c0019408:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001940f:	31 c0                	xor    eax,eax
c0019411:	83 c4 10             	add    esp,0x10
c0019414:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019416:	84 c9                	test   cl,cl
c0019418:	0f 84 bb 00 00 00    	je     c00194d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001941e:	3d c7 00 00 00       	cmp    eax,0xc7
c0019423:	0f 8f b0 00 00 00    	jg     c00194d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019429:	80 f9 0a             	cmp    cl,0xa
c001942c:	0f 85 98 00 00 00    	jne    c00194ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019432:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019437:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001943b:	a8 df                	test   al,0xdf
c001943d:	0f 94 c1             	sete   cl
c0019440:	3c 23                	cmp    al,0x23
c0019442:	0f 94 c2             	sete   dl
c0019445:	08 d1                	or     cl,dl
c0019447:	75 4a                	jne    c0019493 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019449:	8d 50 f7             	lea    edx,[eax-0x9]
c001944c:	80 fa 01             	cmp    dl,0x1
c001944f:	76 42                	jbe    c0019493 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019451:	3c 5b                	cmp    al,0x5b
c0019453:	75 42                	jne    c0019497 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019455:	80 fb 40             	cmp    bl,0x40
c0019458:	75 39                	jne    c0019493 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001945a:	83 ec 0c             	sub    esp,0xc
c001945d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019461:	52                   	push   edx
c0019462:	e8 31 72 fe ff       	call   c0000698 <strlen>
c0019467:	83 c4 10             	add    esp,0x10
c001946a:	83 f8 3f             	cmp    eax,0x3f
c001946d:	77 6a                	ja     c00194d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001946f:	50                   	push   eax
c0019470:	50                   	push   eax
c0019471:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019475:	52                   	push   edx
c0019476:	8d 54 24 24          	lea    edx,[esp+0x24]
c001947a:	52                   	push   edx
c001947b:	e8 9a 72 fe ff       	call   c000071a <strcpy>
c0019480:	58                   	pop    eax
c0019481:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019485:	52                   	push   edx
c0019486:	e8 0d 72 fe ff       	call   c0000698 <strlen>
c001948b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	31 d2                	xor    edx,edx
c0019495:	eb 3a                	jmp    c00194d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019497:	80 fb 40             	cmp    bl,0x40
c001949a:	74 06                	je     c00194a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001949c:	8d 44 24 58          	lea    eax,[esp+0x58]
c00194a0:	eb 20                	jmp    c00194c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00194a2:	50                   	push   eax
c00194a3:	50                   	push   eax
c00194a4:	55                   	push   ebp
c00194a5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194a9:	50                   	push   eax
c00194aa:	e8 bc 72 fe ff       	call   c000076b <strcmp>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	85 c0                	test   eax,eax
c00194b4:	75 dd                	jne    c0019493 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00194b6:	eb e4                	jmp    c001949c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00194b8:	8d 50 01             	lea    edx,[eax+0x1]
c00194bb:	80 f9 3d             	cmp    cl,0x3d
c00194be:	74 1d                	je     c00194dd <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00194c0:	89 d0                	mov    eax,edx
c00194c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00194c4:	84 c9                	test   cl,cl
c00194c6:	75 f0                	jne    c00194b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00194c8:	eb 0f                	jmp    c00194d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00194ca:	8d 50 01             	lea    edx,[eax+0x1]
c00194cd:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00194d1:	47                   	inc    edi
c00194d2:	89 d0                	mov    eax,edx
c00194d4:	e9 3b ff ff ff       	jmp    c0019414 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00194d9:	31 c0                	xor    eax,eax
c00194db:	eb 33                	jmp    c0019510 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00194dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00194e1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00194e4:	50                   	push   eax
c00194e5:	50                   	push   eax
c00194e6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00194ea:	50                   	push   eax
c00194eb:	56                   	push   esi
c00194ec:	e8 7a 72 fe ff       	call   c000076b <strcmp>
c00194f1:	83 c4 10             	add    esp,0x10
c00194f4:	85 c0                	test   eax,eax
c00194f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194fa:	75 97                	jne    c0019493 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00194fc:	51                   	push   ecx
c00194fd:	51                   	push   ecx
c00194fe:	52                   	push   edx
c00194ff:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019506:	e8 0f 72 fe ff       	call   c000071a <strcpy>
c001950b:	83 c4 10             	add    esp,0x10
c001950e:	b0 01                	mov    al,0x1
c0019510:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019516:	5b                   	pop    ebx
c0019517:	5e                   	pop    esi
c0019518:	5f                   	pop    edi
c0019519:	5d                   	pop    ebp
c001951a:	c3                   	ret    

c001951b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001951b:	57                   	push   edi
c001951c:	56                   	push   esi
c001951d:	53                   	push   ebx
c001951e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019524:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001952b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019532:	53                   	push   ebx
c0019533:	e8 60 71 fe ff       	call   c0000698 <strlen>
c0019538:	89 34 24             	mov    DWORD PTR [esp],esi
c001953b:	89 c7                	mov    edi,eax
c001953d:	e8 56 71 fe ff       	call   c0000698 <strlen>
c0019542:	83 c4 10             	add    esp,0x10
c0019545:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0019549:	3d ff 00 00 00       	cmp    eax,0xff
c001954e:	0f 87 d3 00 00 00    	ja     c0019627 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0019554:	57                   	push   edi
c0019555:	57                   	push   edi
c0019556:	56                   	push   esi
c0019557:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001955b:	56                   	push   esi
c001955c:	e8 b9 71 fe ff       	call   c000071a <strcpy>
c0019561:	58                   	pop    eax
c0019562:	5a                   	pop    edx
c0019563:	68 09 92 02 c0       	push   0xc0029209
c0019568:	56                   	push   esi
c0019569:	e8 63 72 fe ff       	call   c00007d1 <strcat>
c001956e:	59                   	pop    ecx
c001956f:	5f                   	pop    edi
c0019570:	53                   	push   ebx
c0019571:	56                   	push   esi
c0019572:	e8 5a 72 fe ff       	call   c00007d1 <strcat>
c0019577:	58                   	pop    eax
c0019578:	5a                   	pop    edx
c0019579:	68 5e 8e 02 c0       	push   0xc0028e5e
c001957e:	56                   	push   esi
c001957f:	e8 4d 72 fe ff       	call   c00007d1 <strcat>
c0019584:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001958b:	e8 30 5f ff ff       	call   c000f4c0 <malloc>
c0019590:	83 c4 0c             	add    esp,0xc
c0019593:	89 c3                	mov    ebx,eax
c0019595:	ff 35 d4 c5 02 c0    	push   DWORD PTR ds:0xc002c5d4
c001959b:	56                   	push   esi
c001959c:	50                   	push   eax
c001959d:	e8 c0 95 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c00195a2:	83 c4 10             	add    esp,0x10
c00195a5:	85 db                	test   ebx,ebx
c00195a7:	74 7e                	je     c0019627 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00195a9:	51                   	push   ecx
c00195aa:	51                   	push   ecx
c00195ab:	6a 01                	push   0x1
c00195ad:	53                   	push   ebx
c00195ae:	e8 13 96 ff ff       	call   c0012bc6 <File::open(FileOpenMode)>
c00195b3:	83 c4 10             	add    esp,0x10
c00195b6:	85 c0                	test   eax,eax
c00195b8:	74 08                	je     c00195c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00195ba:	83 ec 0c             	sub    esp,0xc
c00195bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195bf:	53                   	push   ebx
c00195c0:	eb 5f                	jmp    c0019621 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00195c2:	52                   	push   edx
c00195c3:	8d 44 24 17          	lea    eax,[esp+0x17]
c00195c7:	50                   	push   eax
c00195c8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00195cc:	50                   	push   eax
c00195cd:	53                   	push   ebx
c00195ce:	e8 9f 98 ff ff       	call   c0012e72 <File::stat(unsigned long long*, bool*)>
c00195d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195d7:	83 c4 10             	add    esp,0x10
c00195da:	89 c1                	mov    ecx,eax
c00195dc:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00195e0:	74 31                	je     c0019613 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00195e2:	83 ec 0c             	sub    esp,0xc
c00195e5:	50                   	push   eax
c00195e6:	e8 d5 5e ff ff       	call   c000f4c0 <malloc>
c00195eb:	89 c6                	mov    esi,eax
c00195ed:	58                   	pop    eax
c00195ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195f0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00195f4:	52                   	push   edx
c00195f5:	56                   	push   esi
c00195f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195fe:	53                   	push   ebx
c00195ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019602:	83 c4 20             	add    esp,0x20
c0019605:	85 c0                	test   eax,eax
c0019607:	75 0a                	jne    c0019613 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0019609:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001960d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0019611:	74 18                	je     c001962b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0019613:	83 ec 0c             	sub    esp,0xc
c0019616:	53                   	push   ebx
c0019617:	e8 08 96 ff ff       	call   c0012c24 <File::close()>
c001961c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001961e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019621:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	31 c0                	xor    eax,eax
c0019629:	eb 3b                	jmp    c0019666 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001962b:	83 ec 0c             	sub    esp,0xc
c001962e:	53                   	push   ebx
c001962f:	e8 f0 95 ff ff       	call   c0012c24 <File::close()>
c0019634:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019636:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019639:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001963c:	83 c4 0c             	add    esp,0xc
c001963f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0019646:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001964d:	56                   	push   esi
c001964e:	e8 70 fd ff ff       	call   c00193c3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0019653:	89 34 24             	mov    DWORD PTR [esp],esi
c0019656:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001965a:	e8 71 5e ff ff       	call   c000f4d0 <free>
c001965f:	83 c4 10             	add    esp,0x10
c0019662:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019666:	81 c4 20 01 00 00    	add    esp,0x120
c001966c:	5b                   	pop    ebx
c001966d:	5e                   	pop    esi
c001966e:	5f                   	pop    edi
c001966f:	c3                   	ret    

c0019670 <Reg::getLine(char*, char*, char*)>:
c0019670:	57                   	push   edi
c0019671:	56                   	push   esi
c0019672:	53                   	push   ebx
c0019673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019677:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001967b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001967f:	57                   	push   edi
c0019680:	56                   	push   esi
c0019681:	53                   	push   ebx
c0019682:	68 63 8e 02 c0       	push   0xc0028e63
c0019687:	e8 8f fe ff ff       	call   c001951b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	84 c0                	test   al,al
c0019691:	75 10                	jne    c00196a3 <Reg::getLine(char*, char*, char*)+0x33>
c0019693:	57                   	push   edi
c0019694:	56                   	push   esi
c0019695:	53                   	push   ebx
c0019696:	68 88 8e 02 c0       	push   0xc0028e88
c001969b:	e8 7b fe ff ff       	call   c001951b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00196a0:	83 c4 10             	add    esp,0x10
c00196a3:	5b                   	pop    ebx
c00196a4:	5e                   	pop    esi
c00196a5:	5f                   	pop    edi
c00196a6:	c3                   	ret    

c00196a7 <Reg::readInt(char*, char*, int*)>:
c00196a7:	55                   	push   ebp
c00196a8:	57                   	push   edi
c00196a9:	56                   	push   esi
c00196aa:	53                   	push   ebx
c00196ab:	81 ec f0 00 00 00    	sub    esp,0xf0
c00196b1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00196b5:	57                   	push   edi
c00196b6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00196bd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00196c4:	e8 a7 ff ff ff       	call   c0019670 <Reg::getLine(char*, char*, char*)>
c00196c9:	83 c4 10             	add    esp,0x10
c00196cc:	84 c0                	test   al,al
c00196ce:	0f 84 b3 00 00 00    	je     c0019787 <Reg::readInt(char*, char*, int*)+0xe0>
c00196d4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00196d8:	80 fa 2b             	cmp    dl,0x2b
c00196db:	74 0c                	je     c00196e9 <Reg::readInt(char*, char*, int*)+0x42>
c00196dd:	80 fa 2d             	cmp    dl,0x2d
c00196e0:	75 0e                	jne    c00196f0 <Reg::readInt(char*, char*, int*)+0x49>
c00196e2:	ba 01 00 00 00       	mov    edx,0x1
c00196e7:	eb 0b                	jmp    c00196f4 <Reg::readInt(char*, char*, int*)+0x4d>
c00196e9:	ba 01 00 00 00       	mov    edx,0x1
c00196ee:	eb 02                	jmp    c00196f2 <Reg::readInt(char*, char*, int*)+0x4b>
c00196f0:	31 d2                	xor    edx,edx
c00196f2:	31 c0                	xor    eax,eax
c00196f4:	be 0a 00 00 00       	mov    esi,0xa
c00196f9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00196fe:	75 20                	jne    c0019720 <Reg::readInt(char*, char*, int*)+0x79>
c0019700:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019704:	80 f9 78             	cmp    cl,0x78
c0019707:	75 0a                	jne    c0019713 <Reg::readInt(char*, char*, int*)+0x6c>
c0019709:	83 c2 02             	add    edx,0x2
c001970c:	be 10 00 00 00       	mov    esi,0x10
c0019711:	eb 0d                	jmp    c0019720 <Reg::readInt(char*, char*, int*)+0x79>
c0019713:	80 f9 62             	cmp    cl,0x62
c0019716:	75 08                	jne    c0019720 <Reg::readInt(char*, char*, int*)+0x79>
c0019718:	83 c2 02             	add    edx,0x2
c001971b:	be 02 00 00 00       	mov    esi,0x2
c0019720:	01 d7                	add    edi,edx
c0019722:	31 d2                	xor    edx,edx
c0019724:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019726:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001972a:	80 fb 0d             	cmp    bl,0xd
c001972d:	0f 94 c3             	sete   bl
c0019730:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019735:	0f 94 c1             	sete   cl
c0019738:	08 cb                	or     bl,cl
c001973a:	75 3a                	jne    c0019776 <Reg::readInt(char*, char*, int*)+0xcf>
c001973c:	0f af d6             	imul   edx,esi
c001973f:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0019744:	83 fe 10             	cmp    esi,0x10
c0019747:	75 26                	jne    c001976f <Reg::readInt(char*, char*, int*)+0xc8>
c0019749:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001974d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019750:	89 e9                	mov    ecx,ebp
c0019752:	80 f9 05             	cmp    cl,0x5
c0019755:	77 06                	ja     c001975d <Reg::readInt(char*, char*, int*)+0xb6>
c0019757:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001975b:	eb 16                	jmp    c0019773 <Reg::readInt(char*, char*, int*)+0xcc>
c001975d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019761:	83 e9 61             	sub    ecx,0x61
c0019764:	80 f9 05             	cmp    cl,0x5
c0019767:	77 06                	ja     c001976f <Reg::readInt(char*, char*, int*)+0xc8>
c0019769:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001976d:	eb 04                	jmp    c0019773 <Reg::readInt(char*, char*, int*)+0xcc>
c001976f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0019773:	47                   	inc    edi
c0019774:	eb ae                	jmp    c0019724 <Reg::readInt(char*, char*, int*)+0x7d>
c0019776:	84 c0                	test   al,al
c0019778:	74 02                	je     c001977c <Reg::readInt(char*, char*, int*)+0xd5>
c001977a:	f7 da                	neg    edx
c001977c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0019783:	89 10                	mov    DWORD PTR [eax],edx
c0019785:	88 d8                	mov    al,bl
c0019787:	81 c4 ec 00 00 00    	add    esp,0xec
c001978d:	5b                   	pop    ebx
c001978e:	5e                   	pop    esi
c001978f:	5f                   	pop    edi
c0019790:	5d                   	pop    ebp
c0019791:	c3                   	ret    

c0019792 <Reg::readString(char*, char*, char*, int)>:
c0019792:	57                   	push   edi
c0019793:	56                   	push   esi
c0019794:	53                   	push   ebx
c0019795:	81 ec d4 00 00 00    	sub    esp,0xd4
c001979b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00197a2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00197a6:	57                   	push   edi
c00197a7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00197ae:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00197b5:	e8 b6 fe ff ff       	call   c0019670 <Reg::getLine(char*, char*, char*)>
c00197ba:	83 c4 10             	add    esp,0x10
c00197bd:	89 c6                	mov    esi,eax
c00197bf:	84 c0                	test   al,al
c00197c1:	74 44                	je     c0019807 <Reg::readString(char*, char*, char*, int)+0x75>
c00197c3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00197ca:	31 c0                	xor    eax,eax
c00197cc:	4a                   	dec    edx
c00197cd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00197d0:	84 c9                	test   cl,cl
c00197d2:	74 0f                	je     c00197e3 <Reg::readString(char*, char*, char*, int)+0x51>
c00197d4:	39 c2                	cmp    edx,eax
c00197d6:	7e 0b                	jle    c00197e3 <Reg::readString(char*, char*, char*, int)+0x51>
c00197d8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00197db:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00197e0:	40                   	inc    eax
c00197e1:	eb ea                	jmp    c00197cd <Reg::readString(char*, char*, char*, int)+0x3b>
c00197e3:	83 ec 0c             	sub    esp,0xc
c00197e6:	53                   	push   ebx
c00197e7:	e8 ac 6e fe ff       	call   c0000698 <strlen>
c00197ec:	83 c4 10             	add    esp,0x10
c00197ef:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00197f4:	75 11                	jne    c0019807 <Reg::readString(char*, char*, char*, int)+0x75>
c00197f6:	83 ec 0c             	sub    esp,0xc
c00197f9:	53                   	push   ebx
c00197fa:	e8 99 6e fe ff       	call   c0000698 <strlen>
c00197ff:	83 c4 10             	add    esp,0x10
c0019802:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019807:	81 c4 d0 00 00 00    	add    esp,0xd0
c001980d:	89 f0                	mov    eax,esi
c001980f:	5b                   	pop    ebx
c0019810:	5e                   	pop    esi
c0019811:	5f                   	pop    edi
c0019812:	c3                   	ret    

c0019813 <Reg::readBool(char*, char*, bool*)>:
c0019813:	83 ec 20             	sub    esp,0x20
c0019816:	8d 44 24 10          	lea    eax,[esp+0x10]
c001981a:	50                   	push   eax
c001981b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001981f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019823:	e8 7f fe ff ff       	call   c00196a7 <Reg::readInt(char*, char*, int*)>
c0019828:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001982d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019831:	0f 95 02             	setne  BYTE PTR [edx]
c0019834:	83 c4 2c             	add    esp,0x2c
c0019837:	c3                   	ret    

c0019838 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0019838:	53                   	push   ebx
c0019839:	83 ec 1c             	sub    esp,0x1c
c001983c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019840:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019844:	50                   	push   eax
c0019845:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019849:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001984d:	e8 c1 ff ff ff       	call   c0019813 <Reg::readBool(char*, char*, bool*)>
c0019852:	83 c4 10             	add    esp,0x10
c0019855:	84 c0                	test   al,al
c0019857:	74 04                	je     c001985d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0019859:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001985d:	88 d8                	mov    al,bl
c001985f:	83 c4 18             	add    esp,0x18
c0019862:	5b                   	pop    ebx
c0019863:	c3                   	ret    

c0019864 <Reg::readIntWithDefault(char*, char*, int)>:
c0019864:	53                   	push   ebx
c0019865:	83 ec 1c             	sub    esp,0x1c
c0019868:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001986c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019870:	50                   	push   eax
c0019871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019879:	e8 29 fe ff ff       	call   c00196a7 <Reg::readInt(char*, char*, int*)>
c001987e:	83 c4 10             	add    esp,0x10
c0019881:	84 c0                	test   al,al
c0019883:	74 04                	je     c0019889 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0019885:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019889:	89 d8                	mov    eax,ebx
c001988b:	83 c4 18             	add    esp,0x18
c001988e:	5b                   	pop    ebx
c001988f:	c3                   	ret    

c0019890 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0019890:	57                   	push   edi
c0019891:	56                   	push   esi
c0019892:	53                   	push   ebx
c0019893:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019897:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001989b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001989f:	56                   	push   esi
c00198a0:	53                   	push   ebx
c00198a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198a9:	e8 e4 fe ff ff       	call   c0019792 <Reg::readString(char*, char*, char*, int)>
c00198ae:	83 c4 10             	add    esp,0x10
c00198b1:	84 c0                	test   al,al
c00198b3:	75 1b                	jne    c00198d0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c00198b5:	50                   	push   eax
c00198b6:	56                   	push   esi
c00198b7:	4e                   	dec    esi
c00198b8:	6a 00                	push   0x0
c00198ba:	53                   	push   ebx
c00198bb:	e8 bb 6d fe ff       	call   c000067b <memset>
c00198c0:	83 c4 0c             	add    esp,0xc
c00198c3:	56                   	push   esi
c00198c4:	57                   	push   edi
c00198c5:	53                   	push   ebx
c00198c6:	89 fb                	mov    ebx,edi
c00198c8:	e8 78 6d fe ff       	call   c0000645 <memcpy>
c00198cd:	83 c4 10             	add    esp,0x10
c00198d0:	89 d8                	mov    eax,ebx
c00198d2:	5b                   	pop    ebx
c00198d3:	5e                   	pop    esi
c00198d4:	5f                   	pop    edi
c00198d5:	c3                   	ret    

c00198d6 <Sys::exit(regs*)>:
c00198d6:	83 ec 18             	sub    esp,0x18
c00198d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00198dd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00198e0:	e8 15 32 00 00       	call   c001cafa <terminateTask(int)>
c00198e5:	83 c8 ff             	or     eax,0xffffffff
c00198e8:	83 c4 1c             	add    esp,0x1c
c00198eb:	89 c2                	mov    edx,eax
c00198ed:	c3                   	ret    

c00198ee <Sys::getCwd(regs*)>:
c00198ee:	83 ec 10             	sub    esp,0x10
c00198f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198f5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00198f8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00198fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019900:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019903:	e8 cb 95 ff ff       	call   c0012ed3 <getcwd(Process*, char*, int)>
c0019908:	83 c4 1c             	add    esp,0x1c
c001990b:	99                   	cdq    
c001990c:	c3                   	ret    

c001990d <Sys::getPID(regs*)>:
c001990d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019912:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019915:	8b 00                	mov    eax,DWORD PTR [eax]
c0019917:	99                   	cdq    
c0019918:	c3                   	ret    

c0019919 <Sys::loadDLL(regs*)>:
c0019919:	56                   	push   esi
c001991a:	53                   	push   ebx
c001991b:	31 d2                	xor    edx,edx
c001991d:	51                   	push   ecx
c001991e:	b8 01 00 00 00       	mov    eax,0x1
c0019923:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019927:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001992b:	0f 84 8c 00 00 00    	je     c00199bd <Sys::loadDLL(regs*)+0xa4>
c0019931:	83 ec 0c             	sub    esp,0xc
c0019934:	68 14 01 00 00       	push   0x114
c0019939:	e8 82 5b ff ff       	call   c000f4c0 <malloc>
c001993e:	83 c4 0c             	add    esp,0xc
c0019941:	89 c3                	mov    ebx,eax
c0019943:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019948:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001994b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001994e:	53                   	push   ebx
c001994f:	e8 0e 92 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c0019954:	83 c4 10             	add    esp,0x10
c0019957:	31 d2                	xor    edx,edx
c0019959:	b8 02 00 00 00       	mov    eax,0x2
c001995e:	85 db                	test   ebx,ebx
c0019960:	74 5b                	je     c00199bd <Sys::loadDLL(regs*)+0xa4>
c0019962:	83 ec 0c             	sub    esp,0xc
c0019965:	53                   	push   ebx
c0019966:	e8 c9 94 ff ff       	call   c0012e34 <File::exists()>
c001996b:	83 c4 10             	add    esp,0x10
c001996e:	84 c0                	test   al,al
c0019970:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019972:	75 11                	jne    c0019985 <Sys::loadDLL(regs*)+0x6c>
c0019974:	83 ec 0c             	sub    esp,0xc
c0019977:	53                   	push   ebx
c0019978:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	b8 03 00 00 00       	mov    eax,0x3
c0019983:	eb 36                	jmp    c00199bb <Sys::loadDLL(regs*)+0xa2>
c0019985:	83 ec 0c             	sub    esp,0xc
c0019988:	53                   	push   ebx
c0019989:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001998c:	58                   	pop    eax
c001998d:	5a                   	pop    edx
c001998e:	6a 00                	push   0x0
c0019990:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019993:	e8 09 21 00 00       	call   c001baa1 <Thr::loadDLL(char const*, bool)>
c0019998:	83 c4 10             	add    esp,0x10
c001999b:	89 c1                	mov    ecx,eax
c001999d:	31 d2                	xor    edx,edx
c001999f:	b8 04 00 00 00       	mov    eax,0x4
c00199a4:	85 c9                	test   ecx,ecx
c00199a6:	74 15                	je     c00199bd <Sys::loadDLL(regs*)+0xa4>
c00199a8:	53                   	push   ebx
c00199a9:	53                   	push   ebx
c00199aa:	ff 35 c8 b0 02 c0    	push   DWORD PTR ds:0xc002b0c8
c00199b0:	51                   	push   ecx
c00199b1:	e8 fa 22 00 00       	call   c001bcb0 <Thr::executeDLL(unsigned long, void*)>
c00199b6:	83 c4 10             	add    esp,0x10
c00199b9:	31 c0                	xor    eax,eax
c00199bb:	31 d2                	xor    edx,edx
c00199bd:	59                   	pop    ecx
c00199be:	5b                   	pop    ebx
c00199bf:	5e                   	pop    esi
c00199c0:	c3                   	ret    

c00199c1 <Sys::read(regs*)>:
c00199c1:	57                   	push   edi
c00199c2:	56                   	push   esi
c00199c3:	53                   	push   ebx
c00199c4:	83 ec 10             	sub    esp,0x10
c00199c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00199cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00199ce:	83 f8 02             	cmp    eax,0x2
c00199d1:	77 10                	ja     c00199e3 <Sys::read(regs*)+0x22>
c00199d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199db:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00199e1:	eb 0e                	jmp    c00199f1 <Sys::read(regs*)+0x30>
c00199e3:	83 ec 0c             	sub    esp,0xc
c00199e6:	50                   	push   eax
c00199e7:	e8 01 7b ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c00199ec:	83 c4 10             	add    esp,0x10
c00199ef:	89 c1                	mov    ecx,eax
c00199f1:	83 c8 ff             	or     eax,0xffffffff
c00199f4:	85 c9                	test   ecx,ecx
c00199f6:	89 c2                	mov    edx,eax
c00199f8:	74 28                	je     c0019a22 <Sys::read(regs*)+0x61>
c00199fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a02:	31 ff                	xor    edi,edi
c0019a04:	83 ec 0c             	sub    esp,0xc
c0019a07:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019a09:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019a0d:	52                   	push   edx
c0019a0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019a11:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019a14:	57                   	push   edi
c0019a15:	56                   	push   esi
c0019a16:	51                   	push   ecx
c0019a17:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019a1e:	83 c4 20             	add    esp,0x20
c0019a21:	99                   	cdq    
c0019a22:	83 c4 10             	add    esp,0x10
c0019a25:	5b                   	pop    ebx
c0019a26:	5e                   	pop    esi
c0019a27:	5f                   	pop    edi
c0019a28:	c3                   	ret    

c0019a29 <Sys::sbrk(regs*)>:
c0019a29:	56                   	push   esi
c0019a2a:	53                   	push   ebx
c0019a2b:	50                   	push   eax
c0019a2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019a38:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019a3b:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019a41:	85 db                	test   ebx,ebx
c0019a43:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019a46:	74 02                	je     c0019a4a <Sys::sbrk(regs*)+0x21>
c0019a48:	79 06                	jns    c0019a50 <Sys::sbrk(regs*)+0x27>
c0019a4a:	89 f0                	mov    eax,esi
c0019a4c:	31 d2                	xor    edx,edx
c0019a4e:	eb 2a                	jmp    c0019a7a <Sys::sbrk(regs*)+0x51>
c0019a50:	83 c8 ff             	or     eax,0xffffffff
c0019a53:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019a59:	89 c2                	mov    edx,eax
c0019a5b:	77 1d                	ja     c0019a7a <Sys::sbrk(regs*)+0x51>
c0019a5d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019a63:	50                   	push   eax
c0019a64:	c1 ea 0c             	shr    edx,0xc
c0019a67:	68 07 04 00 00       	push   0x407
c0019a6c:	52                   	push   edx
c0019a6d:	51                   	push   ecx
c0019a6e:	e8 9b 83 ff ff       	call   c0011e0e <VAS::allocatePages(int, int)>
c0019a73:	89 f0                	mov    eax,esi
c0019a75:	31 d2                	xor    edx,edx
c0019a77:	83 c4 10             	add    esp,0x10
c0019a7a:	59                   	pop    ecx
c0019a7b:	5b                   	pop    ebx
c0019a7c:	5e                   	pop    esi
c0019a7d:	c3                   	ret    

c0019a7e <Sys::setCwd(regs*)>:
c0019a7e:	83 ec 14             	sub    esp,0x14
c0019a81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a85:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019a88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a8d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a90:	e8 68 94 ff ff       	call   c0012efd <setcwd(Process*, char*)>
c0019a95:	83 c4 1c             	add    esp,0x1c
c0019a98:	99                   	cdq    
c0019a99:	c3                   	ret    

c0019a9a <Sys::write(regs*)>:
c0019a9a:	57                   	push   edi
c0019a9b:	56                   	push   esi
c0019a9c:	53                   	push   ebx
c0019a9d:	83 ec 10             	sub    esp,0x10
c0019aa0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019aa4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019aa7:	83 f8 02             	cmp    eax,0x2
c0019aaa:	77 10                	ja     c0019abc <Sys::write(regs*)+0x22>
c0019aac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ab1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ab4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019aba:	eb 0e                	jmp    c0019aca <Sys::write(regs*)+0x30>
c0019abc:	83 ec 0c             	sub    esp,0xc
c0019abf:	50                   	push   eax
c0019ac0:	e8 28 7a ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	89 c1                	mov    ecx,eax
c0019aca:	83 c8 ff             	or     eax,0xffffffff
c0019acd:	85 c9                	test   ecx,ecx
c0019acf:	89 c2                	mov    edx,eax
c0019ad1:	74 28                	je     c0019afb <Sys::write(regs*)+0x61>
c0019ad3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019adb:	31 ff                	xor    edi,edi
c0019add:	83 ec 0c             	sub    esp,0xc
c0019ae0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019ae2:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019ae6:	52                   	push   edx
c0019ae7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019aea:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019aed:	57                   	push   edi
c0019aee:	56                   	push   esi
c0019aef:	51                   	push   ecx
c0019af0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019af3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019af7:	83 c4 20             	add    esp,0x20
c0019afa:	99                   	cdq    
c0019afb:	83 c4 10             	add    esp,0x10
c0019afe:	5b                   	pop    ebx
c0019aff:	5e                   	pop    esi
c0019b00:	5f                   	pop    edi
c0019b01:	c3                   	ret    

c0019b02 <Sys::yield(regs*)>:
c0019b02:	57                   	push   edi
c0019b03:	56                   	push   esi
c0019b04:	53                   	push   ebx
c0019b05:	e8 d3 25 00 00       	call   c001c0dd <lockScheduler()>
c0019b0a:	e8 09 29 00 00       	call   c001c418 <schedule()>
c0019b0f:	e8 cb 25 00 00       	call   c001c0df <unlockScheduler()>
c0019b14:	8b 35 30 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b730
c0019b1a:	8b 3d 34 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b734
c0019b20:	89 f0                	mov    eax,esi
c0019b22:	89 fb                	mov    ebx,edi
c0019b24:	89 f1                	mov    ecx,esi
c0019b26:	c1 e0 07             	shl    eax,0x7
c0019b29:	0f ac d9 17          	shrd   ecx,ebx,0x17
c0019b2d:	25 80 30 0f 00       	and    eax,0xf3080
c0019b32:	c1 eb 17             	shr    ebx,0x17
c0019b35:	31 c8                	xor    eax,ecx
c0019b37:	89 da                	mov    edx,ebx
c0019b39:	5b                   	pop    ebx
c0019b3a:	5e                   	pop    esi
c0019b3b:	5f                   	pop    edi
c0019b3c:	c3                   	ret    

c0019b3d <sysCallSeekDir(regs*)>:
c0019b3d:	31 c0                	xor    eax,eax
c0019b3f:	31 d2                	xor    edx,edx
c0019b41:	c3                   	ret    

c0019b42 <sysCallTellDir(regs*)>:
c0019b42:	31 c0                	xor    eax,eax
c0019b44:	31 d2                	xor    edx,edx
c0019b46:	c3                   	ret    

c0019b47 <sysCallVerify(regs*)>:
c0019b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b4b:	31 d2                	xor    edx,edx
c0019b4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019b50:	c3                   	ret    

c0019b51 <sysCallGetArgc(regs*)>:
c0019b51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b56:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b59:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019b5f:	99                   	cdq    
c0019b60:	c3                   	ret    

c0019b61 <sysFormatDisk(regs*)>:
c0019b61:	56                   	push   esi
c0019b62:	53                   	push   ebx
c0019b63:	53                   	push   ebx
c0019b64:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b68:	8b 1d 28 b2 02 c0    	mov    ebx,DWORD PTR ds:0xc002b228
c0019b6e:	eb 25                	jmp    c0019b95 <sysFormatDisk(regs*)+0x34>
c0019b70:	83 ec 0c             	sub    esp,0xc
c0019b73:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b76:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019b78:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019b7b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019b7e:	50                   	push   eax
c0019b7f:	ff 34 85 c0 b6 02 c0 	push   DWORD PTR [eax*4-0x3ffd4940]
c0019b86:	53                   	push   ebx
c0019b87:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019b8a:	83 c4 20             	add    esp,0x20
c0019b8d:	83 f8 08             	cmp    eax,0x8
c0019b90:	75 12                	jne    c0019ba4 <sysFormatDisk(regs*)+0x43>
c0019b92:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019b95:	85 db                	test   ebx,ebx
c0019b97:	75 d7                	jne    c0019b70 <sysFormatDisk(regs*)+0xf>
c0019b99:	59                   	pop    ecx
c0019b9a:	b8 03 00 00 00       	mov    eax,0x3
c0019b9f:	31 d2                	xor    edx,edx
c0019ba1:	5b                   	pop    ebx
c0019ba2:	5e                   	pop    esi
c0019ba3:	c3                   	ret    
c0019ba4:	85 c0                	test   eax,eax
c0019ba6:	74 1b                	je     c0019bc3 <sysFormatDisk(regs*)+0x62>
c0019ba8:	83 f8 09             	cmp    eax,0x9
c0019bab:	74 0b                	je     c0019bb8 <sysFormatDisk(regs*)+0x57>
c0019bad:	59                   	pop    ecx
c0019bae:	b8 02 00 00 00       	mov    eax,0x2
c0019bb3:	31 d2                	xor    edx,edx
c0019bb5:	5b                   	pop    ebx
c0019bb6:	5e                   	pop    esi
c0019bb7:	c3                   	ret    
c0019bb8:	59                   	pop    ecx
c0019bb9:	b8 01 00 00 00       	mov    eax,0x1
c0019bbe:	31 d2                	xor    edx,edx
c0019bc0:	5b                   	pop    ebx
c0019bc1:	5e                   	pop    esi
c0019bc2:	c3                   	ret    
c0019bc3:	59                   	pop    ecx
c0019bc4:	31 c0                	xor    eax,eax
c0019bc6:	31 d2                	xor    edx,edx
c0019bc8:	5b                   	pop    ebx
c0019bc9:	5e                   	pop    esi
c0019bca:	c3                   	ret    

c0019bcb <sysSetDiskVolumeLabel(regs*)>:
c0019bcb:	56                   	push   esi
c0019bcc:	53                   	push   ebx
c0019bcd:	53                   	push   ebx
c0019bce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bd2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019bd5:	83 f8 19             	cmp    eax,0x19
c0019bd8:	77 29                	ja     c0019c03 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019bda:	8b 0c 85 c0 b6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4940]
c0019be1:	85 c9                	test   ecx,ecx
c0019be3:	74 1e                	je     c0019c03 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019be5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019be8:	85 d2                	test   edx,edx
c0019bea:	74 17                	je     c0019c03 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019bec:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0019bf2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019bf4:	52                   	push   edx
c0019bf5:	50                   	push   eax
c0019bf6:	51                   	push   ecx
c0019bf7:	53                   	push   ebx
c0019bf8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0019bfb:	83 c4 10             	add    esp,0x10
c0019bfe:	99                   	cdq    
c0019bff:	59                   	pop    ecx
c0019c00:	5b                   	pop    ebx
c0019c01:	5e                   	pop    esi
c0019c02:	c3                   	ret    
c0019c03:	59                   	pop    ecx
c0019c04:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019c09:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019c0e:	5b                   	pop    ebx
c0019c0f:	5e                   	pop    esi
c0019c10:	c3                   	ret    

c0019c11 <sysGetDiskVolumeLabel(regs*)>:
c0019c11:	57                   	push   edi
c0019c12:	56                   	push   esi
c0019c13:	53                   	push   ebx
c0019c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c18:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019c1b:	83 fa 19             	cmp    edx,0x19
c0019c1e:	77 34                	ja     c0019c54 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019c20:	8b 0c 95 c0 b6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4940]
c0019c27:	85 c9                	test   ecx,ecx
c0019c29:	74 29                	je     c0019c54 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019c2b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019c2e:	85 db                	test   ebx,ebx
c0019c30:	74 22                	je     c0019c54 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019c32:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019c35:	85 c0                	test   eax,eax
c0019c37:	74 1b                	je     c0019c54 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019c39:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019c3f:	83 ec 0c             	sub    esp,0xc
c0019c42:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019c44:	50                   	push   eax
c0019c45:	53                   	push   ebx
c0019c46:	52                   	push   edx
c0019c47:	51                   	push   ecx
c0019c48:	56                   	push   esi
c0019c49:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019c4c:	83 c4 20             	add    esp,0x20
c0019c4f:	99                   	cdq    
c0019c50:	5b                   	pop    ebx
c0019c51:	5e                   	pop    esi
c0019c52:	5f                   	pop    edi
c0019c53:	c3                   	ret    
c0019c54:	5b                   	pop    ebx
c0019c55:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019c5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019c5f:	5e                   	pop    esi
c0019c60:	5f                   	pop    edi
c0019c61:	c3                   	ret    

c0019c62 <sysShutdown(regs*)>:
c0019c62:	83 ec 0c             	sub    esp,0xc
c0019c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c69:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019c6c:	85 c0                	test   eax,eax
c0019c6e:	74 18                	je     c0019c88 <sysShutdown(regs*)+0x26>
c0019c70:	83 f8 01             	cmp    eax,0x1
c0019c73:	74 38                	je     c0019cad <sysShutdown(regs*)+0x4b>
c0019c75:	83 f8 02             	cmp    eax,0x2
c0019c78:	74 24                	je     c0019c9e <sysShutdown(regs*)+0x3c>
c0019c7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019c7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019c84:	83 c4 0c             	add    esp,0xc
c0019c87:	c3                   	ret    
c0019c88:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0019c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0019c8f:	6a 00                	push   0x0
c0019c91:	6a 00                	push   0x0
c0019c93:	6a 00                	push   0x0
c0019c95:	50                   	push   eax
c0019c96:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019c99:	83 c4 10             	add    esp,0x10
c0019c9c:	eb dc                	jmp    c0019c7a <sysShutdown(regs*)+0x18>
c0019c9e:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0019ca3:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ca5:	6a 00                	push   0x0
c0019ca7:	6a 00                	push   0x0
c0019ca9:	6a 01                	push   0x1
c0019cab:	eb e8                	jmp    c0019c95 <sysShutdown(regs*)+0x33>
c0019cad:	a1 40 b7 02 c0       	mov    eax,ds:0xc002b740
c0019cb2:	85 c0                	test   eax,eax
c0019cb4:	74 02                	je     c0019cb8 <sysShutdown(regs*)+0x56>
c0019cb6:	ff d0                	call   eax
c0019cb8:	31 c0                	xor    eax,eax
c0019cba:	31 d2                	xor    edx,edx
c0019cbc:	83 c4 0c             	add    esp,0xc
c0019cbf:	c3                   	ret    

c0019cc0 <sysCallRealpath(regs*)>:
c0019cc0:	83 ec 0c             	sub    esp,0xc
c0019cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0019cca:	85 d2                	test   edx,edx
c0019ccc:	74 07                	je     c0019cd5 <sysCallRealpath(regs*)+0x15>
c0019cce:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019cd1:	85 c0                	test   eax,eax
c0019cd3:	75 0b                	jne    c0019ce0 <sysCallRealpath(regs*)+0x20>
c0019cd5:	b8 01 00 00 00       	mov    eax,0x1
c0019cda:	31 d2                	xor    edx,edx
c0019cdc:	83 c4 0c             	add    esp,0xc
c0019cdf:	c3                   	ret    
c0019ce0:	51                   	push   ecx
c0019ce1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019ce7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019cea:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019cf0:	51                   	push   ecx
c0019cf1:	52                   	push   edx
c0019cf2:	50                   	push   eax
c0019cf3:	e8 c0 8c ff ff       	call   c00129b8 <standardiseFiles(char*, char const*, char const*)>
c0019cf8:	83 c4 10             	add    esp,0x10
c0019cfb:	31 c0                	xor    eax,eax
c0019cfd:	31 d2                	xor    edx,edx
c0019cff:	83 c4 0c             	add    esp,0xc
c0019d02:	c3                   	ret    

c0019d03 <sysCallReadDir(regs*)>:
c0019d03:	53                   	push   ebx
c0019d04:	83 ec 18             	sub    esp,0x18
c0019d07:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019d0b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019d0e:	83 f8 02             	cmp    eax,0x2
c0019d11:	76 53                	jbe    c0019d66 <sysCallReadDir(regs*)+0x63>
c0019d13:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019d16:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019d1c:	77 4f                	ja     c0019d6d <sysCallReadDir(regs*)+0x6a>
c0019d1e:	83 ec 0c             	sub    esp,0xc
c0019d21:	50                   	push   eax
c0019d22:	e8 c6 77 ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c0019d27:	83 c4 10             	add    esp,0x10
c0019d2a:	85 c0                	test   eax,eax
c0019d2c:	74 50                	je     c0019d7e <sysCallReadDir(regs*)+0x7b>
c0019d2e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d36:	83 ec 0c             	sub    esp,0xc
c0019d39:	8b 10                	mov    edx,DWORD PTR [eax]
c0019d3b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019d3f:	51                   	push   ecx
c0019d40:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019d43:	6a 00                	push   0x0
c0019d45:	68 10 01 00 00       	push   0x110
c0019d4a:	50                   	push   eax
c0019d4b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019d4e:	83 c4 20             	add    esp,0x20
c0019d51:	85 c0                	test   eax,eax
c0019d53:	74 38                	je     c0019d8d <sysCallReadDir(regs*)+0x8a>
c0019d55:	83 f8 07             	cmp    eax,0x7
c0019d58:	74 0c                	je     c0019d66 <sysCallReadDir(regs*)+0x63>
c0019d5a:	b8 02 00 00 00       	mov    eax,0x2
c0019d5f:	31 d2                	xor    edx,edx
c0019d61:	83 c4 18             	add    esp,0x18
c0019d64:	5b                   	pop    ebx
c0019d65:	c3                   	ret    
c0019d66:	b8 01 00 00 00       	mov    eax,0x1
c0019d6b:	eb f2                	jmp    c0019d5f <sysCallReadDir(regs*)+0x5c>
c0019d6d:	83 ec 08             	sub    esp,0x8
c0019d70:	52                   	push   edx
c0019d71:	68 a4 8e 02 c0       	push   0xc0028ea4
c0019d76:	e8 b8 88 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0019d7b:	83 c4 10             	add    esp,0x10
c0019d7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019d83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d88:	83 c4 18             	add    esp,0x18
c0019d8b:	5b                   	pop    ebx
c0019d8c:	c3                   	ret    
c0019d8d:	31 c0                	xor    eax,eax
c0019d8f:	eb ce                	jmp    c0019d5f <sysCallReadDir(regs*)+0x5c>

c0019d91 <sysCallIsATTY(regs*)>:
c0019d91:	83 ec 0c             	sub    esp,0xc
c0019d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d98:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019d9b:	83 f8 02             	cmp    eax,0x2
c0019d9e:	76 07                	jbe    c0019da7 <sysCallIsATTY(regs*)+0x16>
c0019da0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019da5:	75 26                	jne    c0019dcd <sysCallIsATTY(regs*)+0x3c>
c0019da7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019daf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019db5:	85 c0                	test   eax,eax
c0019db7:	74 24                	je     c0019ddd <sysCallIsATTY(regs*)+0x4c>
c0019db9:	83 ec 0c             	sub    esp,0xc
c0019dbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dbe:	50                   	push   eax
c0019dbf:	ff 12                	call   DWORD PTR [edx]
c0019dc1:	31 d2                	xor    edx,edx
c0019dc3:	0f b6 c0             	movzx  eax,al
c0019dc6:	83 c4 10             	add    esp,0x10
c0019dc9:	83 c4 0c             	add    esp,0xc
c0019dcc:	c3                   	ret    
c0019dcd:	83 ec 0c             	sub    esp,0xc
c0019dd0:	50                   	push   eax
c0019dd1:	e8 17 77 ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c0019dd6:	83 c4 10             	add    esp,0x10
c0019dd9:	85 c0                	test   eax,eax
c0019ddb:	75 dc                	jne    c0019db9 <sysCallIsATTY(regs*)+0x28>
c0019ddd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019de2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019de7:	83 c4 0c             	add    esp,0xc
c0019dea:	c3                   	ret    

c0019deb <sysCallSeek(regs*)>:
c0019deb:	53                   	push   ebx
c0019dec:	83 ec 08             	sub    esp,0x8
c0019def:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019df3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019df6:	83 f8 02             	cmp    eax,0x2
c0019df9:	76 4a                	jbe    c0019e45 <sysCallSeek(regs*)+0x5a>
c0019dfb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019e00:	77 32                	ja     c0019e34 <sysCallSeek(regs*)+0x49>
c0019e02:	83 ec 0c             	sub    esp,0xc
c0019e05:	50                   	push   eax
c0019e06:	e8 e2 76 ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c0019e0b:	83 c4 0c             	add    esp,0xc
c0019e0e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019e11:	31 db                	xor    ebx,ebx
c0019e13:	53                   	push   ebx
c0019e14:	51                   	push   ecx
c0019e15:	50                   	push   eax
c0019e16:	e8 69 8e ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c0019e1b:	83 c4 10             	add    esp,0x10
c0019e1e:	85 c0                	test   eax,eax
c0019e20:	0f 95 c0             	setne  al
c0019e23:	31 d2                	xor    edx,edx
c0019e25:	0f b6 c0             	movzx  eax,al
c0019e28:	f7 d8                	neg    eax
c0019e2a:	83 d2 00             	adc    edx,0x0
c0019e2d:	83 c4 08             	add    esp,0x8
c0019e30:	f7 da                	neg    edx
c0019e32:	5b                   	pop    ebx
c0019e33:	c3                   	ret    
c0019e34:	83 ec 08             	sub    esp,0x8
c0019e37:	50                   	push   eax
c0019e38:	68 60 8f 02 c0       	push   0xc0028f60
c0019e3d:	e8 f1 87 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0019e42:	83 c4 10             	add    esp,0x10
c0019e45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019e4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019e4f:	83 c4 08             	add    esp,0x8
c0019e52:	5b                   	pop    ebx
c0019e53:	c3                   	ret    

c0019e54 <sysCallTell(regs*)>:
c0019e54:	53                   	push   ebx
c0019e55:	83 ec 08             	sub    esp,0x8
c0019e58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019e5f:	83 f8 02             	cmp    eax,0x2
c0019e62:	76 5e                	jbe    c0019ec2 <sysCallTell(regs*)+0x6e>
c0019e64:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019e69:	77 2d                	ja     c0019e98 <sysCallTell(regs*)+0x44>
c0019e6b:	83 ec 0c             	sub    esp,0xc
c0019e6e:	50                   	push   eax
c0019e6f:	e8 79 76 ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c0019e74:	5a                   	pop    edx
c0019e75:	59                   	pop    ecx
c0019e76:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019e79:	50                   	push   eax
c0019e7a:	e8 5b 8e ff ff       	call   c0012cda <File::tell(unsigned long long*)>
c0019e7f:	83 c4 10             	add    esp,0x10
c0019e82:	85 c0                	test   eax,eax
c0019e84:	0f 95 c0             	setne  al
c0019e87:	31 d2                	xor    edx,edx
c0019e89:	0f b6 c0             	movzx  eax,al
c0019e8c:	f7 d8                	neg    eax
c0019e8e:	83 d2 00             	adc    edx,0x0
c0019e91:	83 c4 08             	add    esp,0x8
c0019e94:	f7 da                	neg    edx
c0019e96:	5b                   	pop    ebx
c0019e97:	c3                   	ret    
c0019e98:	83 ec 08             	sub    esp,0x8
c0019e9b:	50                   	push   eax
c0019e9c:	68 7a 8f 02 c0       	push   0xc0028f7a
c0019ea1:	e8 8d 87 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0019ea6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019ea9:	83 c4 10             	add    esp,0x10
c0019eac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019eb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019eb9:	31 d2                	xor    edx,edx
c0019ebb:	31 c0                	xor    eax,eax
c0019ebd:	83 c4 08             	add    esp,0x8
c0019ec0:	5b                   	pop    ebx
c0019ec1:	c3                   	ret    
c0019ec2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ec7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ecc:	83 c4 08             	add    esp,0x8
c0019ecf:	5b                   	pop    ebx
c0019ed0:	c3                   	ret    

c0019ed1 <sysCallSize(regs*)>:
c0019ed1:	53                   	push   ebx
c0019ed2:	83 ec 18             	sub    esp,0x18
c0019ed5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019ed9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019edc:	83 f8 02             	cmp    eax,0x2
c0019edf:	76 64                	jbe    c0019f45 <sysCallSize(regs*)+0x74>
c0019ee1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019ee6:	77 33                	ja     c0019f1b <sysCallSize(regs*)+0x4a>
c0019ee8:	83 ec 0c             	sub    esp,0xc
c0019eeb:	50                   	push   eax
c0019eec:	e8 fc 75 ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c0019ef1:	83 c4 0c             	add    esp,0xc
c0019ef4:	8d 54 24 13          	lea    edx,[esp+0x13]
c0019ef8:	52                   	push   edx
c0019ef9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019efc:	50                   	push   eax
c0019efd:	e8 70 8f ff ff       	call   c0012e72 <File::stat(unsigned long long*, bool*)>
c0019f02:	83 c4 10             	add    esp,0x10
c0019f05:	85 c0                	test   eax,eax
c0019f07:	0f 95 c0             	setne  al
c0019f0a:	31 d2                	xor    edx,edx
c0019f0c:	0f b6 c0             	movzx  eax,al
c0019f0f:	f7 d8                	neg    eax
c0019f11:	83 d2 00             	adc    edx,0x0
c0019f14:	83 c4 18             	add    esp,0x18
c0019f17:	f7 da                	neg    edx
c0019f19:	5b                   	pop    ebx
c0019f1a:	c3                   	ret    
c0019f1b:	83 ec 08             	sub    esp,0x8
c0019f1e:	50                   	push   eax
c0019f1f:	68 94 8f 02 c0       	push   0xc0028f94
c0019f24:	e8 0a 87 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0019f29:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019f2c:	83 c4 10             	add    esp,0x10
c0019f2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019f35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019f3c:	31 d2                	xor    edx,edx
c0019f3e:	31 c0                	xor    eax,eax
c0019f40:	83 c4 18             	add    esp,0x18
c0019f43:	5b                   	pop    ebx
c0019f44:	c3                   	ret    
c0019f45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f4f:	83 c4 18             	add    esp,0x18
c0019f52:	5b                   	pop    ebx
c0019f53:	c3                   	ret    

c0019f54 <sysCallSizeFromFilename(regs*)>:
c0019f54:	57                   	push   edi
c0019f55:	56                   	push   esi
c0019f56:	53                   	push   ebx
c0019f57:	83 ec 20             	sub    esp,0x20
c0019f5a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019f5e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c0019f61:	83 fb 02             	cmp    ebx,0x2
c0019f64:	0f 86 99 00 00 00    	jbe    c001a003 <sysCallSizeFromFilename(regs*)+0xaf>
c0019f6a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019f70:	77 65                	ja     c0019fd7 <sysCallSizeFromFilename(regs*)+0x83>
c0019f72:	83 ec 0c             	sub    esp,0xc
c0019f75:	68 14 01 00 00       	push   0x114
c0019f7a:	e8 41 55 ff ff       	call   c000f4c0 <malloc>
c0019f7f:	83 c4 0c             	add    esp,0xc
c0019f82:	89 c6                	mov    esi,eax
c0019f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f89:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019f8c:	53                   	push   ebx
c0019f8d:	56                   	push   esi
c0019f8e:	e8 cf 8b ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c0019f93:	83 c4 0c             	add    esp,0xc
c0019f96:	8d 44 24 23          	lea    eax,[esp+0x23]
c0019f9a:	50                   	push   eax
c0019f9b:	ff 77 28             	push   DWORD PTR [edi+0x28]
c0019f9e:	56                   	push   esi
c0019f9f:	e8 ce 8e ff ff       	call   c0012e72 <File::stat(unsigned long long*, bool*)>
c0019fa4:	83 c4 10             	add    esp,0x10
c0019fa7:	85 f6                	test   esi,esi
c0019fa9:	74 14                	je     c0019fbf <sysCallSizeFromFilename(regs*)+0x6b>
c0019fab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019faf:	8b 16                	mov    edx,DWORD PTR [esi]
c0019fb1:	83 ec 0c             	sub    esp,0xc
c0019fb4:	56                   	push   esi
c0019fb5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019fb8:	83 c4 10             	add    esp,0x10
c0019fbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fbf:	85 c0                	test   eax,eax
c0019fc1:	0f 95 c0             	setne  al
c0019fc4:	31 d2                	xor    edx,edx
c0019fc6:	0f b6 c0             	movzx  eax,al
c0019fc9:	f7 d8                	neg    eax
c0019fcb:	83 d2 00             	adc    edx,0x0
c0019fce:	83 c4 20             	add    esp,0x20
c0019fd1:	f7 da                	neg    edx
c0019fd3:	5b                   	pop    ebx
c0019fd4:	5e                   	pop    esi
c0019fd5:	5f                   	pop    edi
c0019fd6:	c3                   	ret    
c0019fd7:	83 ec 08             	sub    esp,0x8
c0019fda:	53                   	push   ebx
c0019fdb:	68 94 8f 02 c0       	push   0xc0028f94
c0019fe0:	e8 4e 86 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0019fe5:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0019fe8:	83 c4 10             	add    esp,0x10
c0019feb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ff1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ff8:	31 d2                	xor    edx,edx
c0019ffa:	83 c4 20             	add    esp,0x20
c0019ffd:	31 c0                	xor    eax,eax
c0019fff:	5b                   	pop    ebx
c001a000:	5e                   	pop    esi
c001a001:	5f                   	pop    edi
c001a002:	c3                   	ret    
c001a003:	83 c4 20             	add    esp,0x20
c001a006:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a00b:	5b                   	pop    ebx
c001a00c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a011:	5e                   	pop    esi
c001a012:	5f                   	pop    edi
c001a013:	c3                   	ret    

c001a014 <sysCallClose(regs*)>:
c001a014:	53                   	push   ebx
c001a015:	83 ec 08             	sub    esp,0x8
c001a018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a01c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a01f:	83 f8 02             	cmp    eax,0x2
c001a022:	76 50                	jbe    c001a074 <sysCallClose(regs*)+0x60>
c001a024:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a029:	74 58                	je     c001a083 <sysCallClose(regs*)+0x6f>
c001a02b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a030:	74 60                	je     c001a092 <sysCallClose(regs*)+0x7e>
c001a032:	77 2f                	ja     c001a063 <sysCallClose(regs*)+0x4f>
c001a034:	83 ec 0c             	sub    esp,0xc
c001a037:	50                   	push   eax
c001a038:	e8 b0 74 ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c001a03d:	89 c3                	mov    ebx,eax
c001a03f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a042:	e8 dd 8b ff ff       	call   c0012c24 <File::close()>
c001a047:	83 c4 10             	add    esp,0x10
c001a04a:	85 db                	test   ebx,ebx
c001a04c:	74 0c                	je     c001a05a <sysCallClose(regs*)+0x46>
c001a04e:	83 ec 0c             	sub    esp,0xc
c001a051:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a053:	53                   	push   ebx
c001a054:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	31 c0                	xor    eax,eax
c001a05c:	31 d2                	xor    edx,edx
c001a05e:	83 c4 08             	add    esp,0x8
c001a061:	5b                   	pop    ebx
c001a062:	c3                   	ret    
c001a063:	83 ec 08             	sub    esp,0x8
c001a066:	50                   	push   eax
c001a067:	68 c8 8e 02 c0       	push   0xc0028ec8
c001a06c:	e8 c2 85 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001a071:	83 c4 10             	add    esp,0x10
c001a074:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a079:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a07e:	83 c4 08             	add    esp,0x8
c001a081:	5b                   	pop    ebx
c001a082:	c3                   	ret    
c001a083:	83 ec 0c             	sub    esp,0xc
c001a086:	68 af 8f 02 c0       	push   0xc0028faf
c001a08b:	e8 a3 85 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001a090:	eb c5                	jmp    c001a057 <sysCallClose(regs*)+0x43>
c001a092:	83 ec 0c             	sub    esp,0xc
c001a095:	68 bd 8f 02 c0       	push   0xc0028fbd
c001a09a:	eb ef                	jmp    c001a08b <sysCallClose(regs*)+0x77>

c001a09c <sysCallOpenDir(regs*)>:
c001a09c:	56                   	push   esi
c001a09d:	53                   	push   ebx
c001a09e:	53                   	push   ebx
c001a09f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a0a3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001a0a6:	85 f6                	test   esi,esi
c001a0a8:	74 59                	je     c001a103 <sysCallOpenDir(regs*)+0x67>
c001a0aa:	83 ec 0c             	sub    esp,0xc
c001a0ad:	68 14 01 00 00       	push   0x114
c001a0b2:	e8 09 54 ff ff       	call   c000f4c0 <malloc>
c001a0b7:	83 c4 0c             	add    esp,0xc
c001a0ba:	89 c6                	mov    esi,eax
c001a0bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0c1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a0c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0c7:	56                   	push   esi
c001a0c8:	e8 6b 8f ff ff       	call   c0013038 <Directory::Directory(char const*, Process*)>
c001a0cd:	83 c4 10             	add    esp,0x10
c001a0d0:	85 f6                	test   esi,esi
c001a0d2:	74 2f                	je     c001a103 <sysCallOpenDir(regs*)+0x67>
c001a0d4:	83 ec 0c             	sub    esp,0xc
c001a0d7:	56                   	push   esi
c001a0d8:	e8 bf 8f ff ff       	call   c001309c <Directory::open()>
c001a0dd:	83 c4 10             	add    esp,0x10
c001a0e0:	85 c0                	test   eax,eax
c001a0e2:	75 1f                	jne    c001a103 <sysCallOpenDir(regs*)+0x67>
c001a0e4:	83 ec 0c             	sub    esp,0xc
c001a0e7:	56                   	push   esi
c001a0e8:	e8 0b 71 ff ff       	call   c00111f8 <UnixFile::getFileDescriptor()>
c001a0ed:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a0f0:	83 c4 10             	add    esp,0x10
c001a0f3:	89 02                	mov    DWORD PTR [edx],eax
c001a0f5:	c1 f8 1f             	sar    eax,0x1f
c001a0f8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a0fb:	31 c0                	xor    eax,eax
c001a0fd:	59                   	pop    ecx
c001a0fe:	31 d2                	xor    edx,edx
c001a100:	5b                   	pop    ebx
c001a101:	5e                   	pop    esi
c001a102:	c3                   	ret    
c001a103:	59                   	pop    ecx
c001a104:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a109:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a10e:	5b                   	pop    ebx
c001a10f:	5e                   	pop    esi
c001a110:	c3                   	ret    

c001a111 <sysCallCloseDir(regs*)>:
c001a111:	53                   	push   ebx
c001a112:	83 ec 08             	sub    esp,0x8
c001a115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a119:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a11c:	83 f8 02             	cmp    eax,0x2
c001a11f:	76 47                	jbe    c001a168 <sysCallCloseDir(regs*)+0x57>
c001a121:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a126:	77 2f                	ja     c001a157 <sysCallCloseDir(regs*)+0x46>
c001a128:	83 ec 0c             	sub    esp,0xc
c001a12b:	50                   	push   eax
c001a12c:	e8 bc 73 ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c001a131:	89 c3                	mov    ebx,eax
c001a133:	89 04 24             	mov    DWORD PTR [esp],eax
c001a136:	e8 bd 8f ff ff       	call   c00130f8 <Directory::close()>
c001a13b:	83 c4 10             	add    esp,0x10
c001a13e:	85 db                	test   ebx,ebx
c001a140:	74 0c                	je     c001a14e <sysCallCloseDir(regs*)+0x3d>
c001a142:	83 ec 0c             	sub    esp,0xc
c001a145:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a147:	53                   	push   ebx
c001a148:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a14b:	83 c4 10             	add    esp,0x10
c001a14e:	31 c0                	xor    eax,eax
c001a150:	31 d2                	xor    edx,edx
c001a152:	83 c4 08             	add    esp,0x8
c001a155:	5b                   	pop    ebx
c001a156:	c3                   	ret    
c001a157:	83 ec 08             	sub    esp,0x8
c001a15a:	50                   	push   eax
c001a15b:	68 f0 8e 02 c0       	push   0xc0028ef0
c001a160:	e8 ce 84 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001a165:	83 c4 10             	add    esp,0x10
c001a168:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a16d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a172:	83 c4 08             	add    esp,0x8
c001a175:	5b                   	pop    ebx
c001a176:	c3                   	ret    

c001a177 <sysCallMakeDir(regs*)>:
c001a177:	56                   	push   esi
c001a178:	53                   	push   ebx
c001a179:	83 ec 10             	sub    esp,0x10
c001a17c:	68 14 01 00 00       	push   0x114
c001a181:	e8 3a 53 ff ff       	call   c000f4c0 <malloc>
c001a186:	83 c4 0c             	add    esp,0xc
c001a189:	89 c3                	mov    ebx,eax
c001a18b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a190:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a193:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a197:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a19a:	53                   	push   ebx
c001a19b:	e8 98 8e ff ff       	call   c0013038 <Directory::Directory(char const*, Process*)>
c001a1a0:	83 c4 10             	add    esp,0x10
c001a1a3:	85 db                	test   ebx,ebx
c001a1a5:	74 32                	je     c001a1d9 <sysCallMakeDir(regs*)+0x62>
c001a1a7:	83 ec 0c             	sub    esp,0xc
c001a1aa:	53                   	push   ebx
c001a1ab:	e8 cc 90 ff ff       	call   c001327c <Directory::create()>
c001a1b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1b3:	89 c6                	mov    esi,eax
c001a1b5:	e8 3e 8f ff ff       	call   c00130f8 <Directory::close()>
c001a1ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1c2:	83 c4 10             	add    esp,0x10
c001a1c5:	31 c0                	xor    eax,eax
c001a1c7:	59                   	pop    ecx
c001a1c8:	85 f6                	test   esi,esi
c001a1ca:	5b                   	pop    ebx
c001a1cb:	0f 95 c0             	setne  al
c001a1ce:	5e                   	pop    esi
c001a1cf:	31 d2                	xor    edx,edx
c001a1d1:	f7 d8                	neg    eax
c001a1d3:	83 d2 00             	adc    edx,0x0
c001a1d6:	f7 da                	neg    edx
c001a1d8:	c3                   	ret    
c001a1d9:	59                   	pop    ecx
c001a1da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a1df:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a1e4:	5b                   	pop    ebx
c001a1e5:	5e                   	pop    esi
c001a1e6:	c3                   	ret    

c001a1e7 <sysCallWait(regs*)>:
c001a1e7:	83 ec 10             	sub    esp,0x10
c001a1ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1ee:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a1f1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a1f4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a1f7:	e8 97 23 00 00       	call   c001c593 <waitTask(int, int*, int)>
c001a1fc:	83 c4 1c             	add    esp,0x1c
c001a1ff:	99                   	cdq    
c001a200:	c3                   	ret    

c001a201 <sysCallNotImpl(regs*)>:
c001a201:	83 ec 18             	sub    esp,0x18
c001a204:	68 cb 8f 02 c0       	push   0xc0028fcb
c001a209:	e8 89 ee ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001a20e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a213:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a218:	83 c4 1c             	add    esp,0x1c
c001a21b:	c3                   	ret    

c001a21c <sysPanic(regs*)>:
c001a21c:	83 ec 18             	sub    esp,0x18
c001a21f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a223:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a226:	e8 6c ee ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001a22b:	c7 04 24 e5 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fe5
c001a232:	e8 60 ee ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001a237:	b8 01 00 00 00       	mov    eax,0x1
c001a23c:	31 d2                	xor    edx,edx
c001a23e:	83 c4 1c             	add    esp,0x1c
c001a241:	c3                   	ret    

c001a242 <sysCallRmdir(regs*)>:
c001a242:	56                   	push   esi
c001a243:	53                   	push   ebx
c001a244:	83 ec 20             	sub    esp,0x20
c001a247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a24b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a24e:	68 14 01 00 00       	push   0x114
c001a253:	e8 68 52 ff ff       	call   c000f4c0 <malloc>
c001a258:	83 c4 0c             	add    esp,0xc
c001a25b:	89 c3                	mov    ebx,eax
c001a25d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a262:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a265:	56                   	push   esi
c001a266:	53                   	push   ebx
c001a267:	e8 f6 88 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001a26c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a26f:	e8 ca 8a ff ff       	call   c0012d3e <File::unlink()>
c001a274:	83 c4 10             	add    esp,0x10
c001a277:	85 db                	test   ebx,ebx
c001a279:	74 14                	je     c001a28f <sysCallRmdir(regs*)+0x4d>
c001a27b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a27f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a281:	83 ec 0c             	sub    esp,0xc
c001a284:	53                   	push   ebx
c001a285:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a288:	83 c4 10             	add    esp,0x10
c001a28b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a28f:	85 c0                	test   eax,eax
c001a291:	0f 95 c0             	setne  al
c001a294:	31 d2                	xor    edx,edx
c001a296:	0f b6 c0             	movzx  eax,al
c001a299:	f7 d8                	neg    eax
c001a29b:	83 d2 00             	adc    edx,0x0
c001a29e:	83 c4 14             	add    esp,0x14
c001a2a1:	f7 da                	neg    edx
c001a2a3:	5b                   	pop    ebx
c001a2a4:	5e                   	pop    esi
c001a2a5:	c3                   	ret    

c001a2a6 <sysCallUnlink(regs*)>:
c001a2a6:	56                   	push   esi
c001a2a7:	53                   	push   ebx
c001a2a8:	83 ec 20             	sub    esp,0x20
c001a2ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2af:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a2b2:	68 14 01 00 00       	push   0x114
c001a2b7:	e8 04 52 ff ff       	call   c000f4c0 <malloc>
c001a2bc:	83 c4 0c             	add    esp,0xc
c001a2bf:	89 c3                	mov    ebx,eax
c001a2c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2c6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a2c9:	56                   	push   esi
c001a2ca:	53                   	push   ebx
c001a2cb:	e8 92 88 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001a2d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2d3:	e8 66 8a ff ff       	call   c0012d3e <File::unlink()>
c001a2d8:	83 c4 10             	add    esp,0x10
c001a2db:	85 db                	test   ebx,ebx
c001a2dd:	74 14                	je     c001a2f3 <sysCallUnlink(regs*)+0x4d>
c001a2df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a2e3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a2e5:	83 ec 0c             	sub    esp,0xc
c001a2e8:	53                   	push   ebx
c001a2e9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a2ec:	83 c4 10             	add    esp,0x10
c001a2ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a2f3:	85 c0                	test   eax,eax
c001a2f5:	0f 95 c0             	setne  al
c001a2f8:	31 d2                	xor    edx,edx
c001a2fa:	0f b6 c0             	movzx  eax,al
c001a2fd:	f7 d8                	neg    eax
c001a2ff:	83 d2 00             	adc    edx,0x0
c001a302:	83 c4 14             	add    esp,0x14
c001a305:	f7 da                	neg    edx
c001a307:	5b                   	pop    ebx
c001a308:	5e                   	pop    esi
c001a309:	c3                   	ret    

c001a30a <sysCallGetArgv(regs*)>:
c001a30a:	83 ec 0c             	sub    esp,0xc
c001a30d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a311:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a314:	85 c0                	test   eax,eax
c001a316:	78 2b                	js     c001a343 <sysCallGetArgv(regs*)+0x39>
c001a318:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a31e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a321:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a327:	7d 1a                	jge    c001a343 <sysCallGetArgv(regs*)+0x39>
c001a329:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a330:	85 c0                	test   eax,eax
c001a332:	74 17                	je     c001a34b <sysCallGetArgv(regs*)+0x41>
c001a334:	83 ec 08             	sub    esp,0x8
c001a337:	50                   	push   eax
c001a338:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a33b:	e8 da 63 fe ff       	call   c000071a <strcpy>
c001a340:	83 c4 10             	add    esp,0x10
c001a343:	31 c0                	xor    eax,eax
c001a345:	31 d2                	xor    edx,edx
c001a347:	83 c4 0c             	add    esp,0xc
c001a34a:	c3                   	ret    
c001a34b:	b8 01 00 00 00       	mov    eax,0x1
c001a350:	31 d2                	xor    edx,edx
c001a352:	83 c4 0c             	add    esp,0xc
c001a355:	c3                   	ret    

c001a356 <sysCallTTYName(regs*)>:
c001a356:	56                   	push   esi
c001a357:	53                   	push   ebx
c001a358:	53                   	push   ebx
c001a359:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a35d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a360:	85 c0                	test   eax,eax
c001a362:	74 5f                	je     c001a3c3 <sysCallTTYName(regs*)+0x6d>
c001a364:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a367:	83 f8 02             	cmp    eax,0x2
c001a36a:	77 3e                	ja     c001a3aa <sysCallTTYName(regs*)+0x54>
c001a36c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a371:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a374:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a37a:	85 db                	test   ebx,ebx
c001a37c:	74 45                	je     c001a3c3 <sysCallTTYName(regs*)+0x6d>
c001a37e:	83 ec 0c             	sub    esp,0xc
c001a381:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a383:	53                   	push   ebx
c001a384:	ff 10                	call   DWORD PTR [eax]
c001a386:	83 c4 10             	add    esp,0x10
c001a389:	84 c0                	test   al,al
c001a38b:	74 41                	je     c001a3ce <sysCallTTYName(regs*)+0x78>
c001a38d:	83 ec 08             	sub    esp,0x8
c001a390:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a396:	53                   	push   ebx
c001a397:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a39a:	e8 7b 63 fe ff       	call   c000071a <strcpy>
c001a39f:	83 c4 10             	add    esp,0x10
c001a3a2:	31 c0                	xor    eax,eax
c001a3a4:	59                   	pop    ecx
c001a3a5:	31 d2                	xor    edx,edx
c001a3a7:	5b                   	pop    ebx
c001a3a8:	5e                   	pop    esi
c001a3a9:	c3                   	ret    
c001a3aa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a3af:	74 bb                	je     c001a36c <sysCallTTYName(regs*)+0x16>
c001a3b1:	83 ec 0c             	sub    esp,0xc
c001a3b4:	50                   	push   eax
c001a3b5:	e8 33 71 ff ff       	call   c00114ed <getFromFileDescriptor(int)>
c001a3ba:	83 c4 10             	add    esp,0x10
c001a3bd:	89 c3                	mov    ebx,eax
c001a3bf:	85 db                	test   ebx,ebx
c001a3c1:	75 bb                	jne    c001a37e <sysCallTTYName(regs*)+0x28>
c001a3c3:	59                   	pop    ecx
c001a3c4:	b8 01 00 00 00       	mov    eax,0x1
c001a3c9:	31 d2                	xor    edx,edx
c001a3cb:	5b                   	pop    ebx
c001a3cc:	5e                   	pop    esi
c001a3cd:	c3                   	ret    
c001a3ce:	59                   	pop    ecx
c001a3cf:	b8 02 00 00 00       	mov    eax,0x2
c001a3d4:	31 d2                	xor    edx,edx
c001a3d6:	5b                   	pop    ebx
c001a3d7:	5e                   	pop    esi
c001a3d8:	c3                   	ret    

c001a3d9 <sysCallGetEnv(regs*)>:
c001a3d9:	83 ec 0c             	sub    esp,0xc
c001a3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3e0:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a3e3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a3e6:	85 c9                	test   ecx,ecx
c001a3e8:	75 22                	jne    c001a40c <sysCallGetEnv(regs*)+0x33>
c001a3ea:	85 d2                	test   edx,edx
c001a3ec:	74 08                	je     c001a3f6 <sysCallGetEnv(regs*)+0x1d>
c001a3ee:	31 c0                	xor    eax,eax
c001a3f0:	31 d2                	xor    edx,edx
c001a3f2:	83 c4 0c             	add    esp,0xc
c001a3f5:	c3                   	ret    
c001a3f6:	83 ec 0c             	sub    esp,0xc
c001a3f9:	68 14 8f 02 c0       	push   0xc0028f14
c001a3fe:	e8 95 62 fe ff       	call   c0000698 <strlen>
c001a403:	83 c4 10             	add    esp,0x10
c001a406:	31 d2                	xor    edx,edx
c001a408:	83 c4 0c             	add    esp,0xc
c001a40b:	c3                   	ret    
c001a40c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a40f:	85 d2                	test   edx,edx
c001a411:	74 05                	je     c001a418 <sysCallGetEnv(regs*)+0x3f>
c001a413:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a416:	eb d6                	jmp    c001a3ee <sysCallGetEnv(regs*)+0x15>
c001a418:	83 ec 08             	sub    esp,0x8
c001a41b:	68 14 8f 02 c0       	push   0xc0028f14
c001a420:	50                   	push   eax
c001a421:	e8 f4 62 fe ff       	call   c000071a <strcpy>
c001a426:	83 c4 10             	add    esp,0x10
c001a429:	eb c3                	jmp    c001a3ee <sysCallGetEnv(regs*)+0x15>

c001a42b <sysCallUSleep(regs*)>:
c001a42b:	83 ec 14             	sub    esp,0x14
c001a42e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a437:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a43e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a441:	01 ca                	add    edx,ecx
c001a443:	52                   	push   edx
c001a444:	50                   	push   eax
c001a445:	e8 e2 21 00 00       	call   c001c62c <nanoSleep(unsigned long long)>
c001a44a:	31 c0                	xor    eax,eax
c001a44c:	31 d2                	xor    edx,edx
c001a44e:	83 c4 1c             	add    esp,0x1c
c001a451:	c3                   	ret    

c001a452 <sysCallSpawn(regs*)>:
c001a452:	56                   	push   esi
c001a453:	53                   	push   ebx
c001a454:	53                   	push   ebx
c001a455:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a459:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a45c:	85 f6                	test   esi,esi
c001a45e:	75 08                	jne    c001a468 <sysCallSpawn(regs*)+0x16>
c001a460:	59                   	pop    ecx
c001a461:	31 c0                	xor    eax,eax
c001a463:	31 d2                	xor    edx,edx
c001a465:	5b                   	pop    ebx
c001a466:	5e                   	pop    esi
c001a467:	c3                   	ret    
c001a468:	83 ec 0c             	sub    esp,0xc
c001a46b:	68 3b 07 00 00       	push   0x73b
c001a470:	e8 4b 50 ff ff       	call   c000f4c0 <malloc>
c001a475:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a478:	89 c6                	mov    esi,eax
c001a47a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a47f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a482:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a485:	56                   	push   esi
c001a486:	e8 d9 18 00 00       	call   c001bd64 <Process::Process(char const*, Process*, char**)>
c001a48b:	83 c4 20             	add    esp,0x20
c001a48e:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001a495:	75 c9                	jne    c001a460 <sysCallSpawn(regs*)+0xe>
c001a497:	83 ec 0c             	sub    esp,0xc
c001a49a:	56                   	push   esi
c001a49b:	e8 52 1e 00 00       	call   c001c2f2 <Process::createUserThread()>
c001a4a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4a2:	83 c4 10             	add    esp,0x10
c001a4a5:	99                   	cdq    
c001a4a6:	59                   	pop    ecx
c001a4a7:	5b                   	pop    ebx
c001a4a8:	5e                   	pop    esi
c001a4a9:	c3                   	ret    

c001a4aa <sysAppSettings(regs*)>:
c001a4aa:	53                   	push   ebx
c001a4ab:	83 ec 08             	sub    esp,0x8
c001a4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4b2:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a4b5:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001a4bb:	25 e0 1f 00 00       	and    eax,0x1fe0
c001a4c0:	66 3d c0 09          	cmp    ax,0x9c0
c001a4c4:	75 2f                	jne    c001a4f5 <sysAppSettings(regs*)+0x4b>
c001a4c6:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001a4cc:	83 e0 1f             	and    eax,0x1f
c001a4cf:	3c 01                	cmp    al,0x1
c001a4d1:	74 2e                	je     c001a501 <sysAppSettings(regs*)+0x57>
c001a4d3:	3c 07                	cmp    al,0x7
c001a4d5:	0f 84 bd 00 00 00    	je     c001a598 <sysAppSettings(regs*)+0xee>
c001a4db:	84 c0                	test   al,al
c001a4dd:	0f 84 dc 00 00 00    	je     c001a5bf <sysAppSettings(regs*)+0x115>
c001a4e3:	3c 08                	cmp    al,0x8
c001a4e5:	74 6d                	je     c001a554 <sysAppSettings(regs*)+0xaa>
c001a4e7:	0f b6 c0             	movzx  eax,al
c001a4ea:	83 c4 08             	add    esp,0x8
c001a4ed:	05 e8 03 00 00       	add    eax,0x3e8
c001a4f2:	5b                   	pop    ebx
c001a4f3:	99                   	cdq    
c001a4f4:	c3                   	ret    
c001a4f5:	b8 01 00 00 00       	mov    eax,0x1
c001a4fa:	31 d2                	xor    edx,edx
c001a4fc:	83 c4 08             	add    esp,0x8
c001a4ff:	5b                   	pop    ebx
c001a500:	c3                   	ret    
c001a501:	51                   	push   ecx
c001a502:	68 00 01 00 00       	push   0x100
c001a507:	6a 00                	push   0x0
c001a509:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a50e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a511:	83 c0 0c             	add    eax,0xc
c001a514:	50                   	push   eax
c001a515:	e8 61 61 fe ff       	call   c000067b <memset>
c001a51a:	83 c4 0c             	add    esp,0xc
c001a51d:	68 ff 00 00 00       	push   0xff
c001a522:	53                   	push   ebx
c001a523:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a528:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a52b:	83 c0 0c             	add    eax,0xc
c001a52e:	50                   	push   eax
c001a52f:	e8 11 61 fe ff       	call   c0000645 <memcpy>
c001a534:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a539:	5b                   	pop    ebx
c001a53a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a53d:	5a                   	pop    edx
c001a53e:	8d 50 0c             	lea    edx,[eax+0xc]
c001a541:	52                   	push   edx
c001a542:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a548:	e8 1b 61 ff ff       	call   c0010668 <VgaText::setTitle(char*)>
c001a54d:	83 c4 10             	add    esp,0x10
c001a550:	31 c0                	xor    eax,eax
c001a552:	eb a6                	jmp    c001a4fa <sysAppSettings(regs*)+0x50>
c001a554:	83 ec 08             	sub    esp,0x8
c001a557:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a55d:	83 e0 0f             	and    eax,0xf
c001a560:	50                   	push   eax
c001a561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a566:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a569:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a56f:	e8 e4 60 ff ff       	call   c0010658 <VgaText::setTitleColour(VgaColour)>
c001a574:	58                   	pop    eax
c001a575:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a57b:	5a                   	pop    edx
c001a57c:	c1 e8 04             	shr    eax,0x4
c001a57f:	83 e0 0f             	and    eax,0xf
c001a582:	50                   	push   eax
c001a583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a588:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a58b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a591:	e8 b2 60 ff ff       	call   c0010648 <VgaText::setTitleTextColour(VgaColour)>
c001a596:	eb b5                	jmp    c001a54d <sysAppSettings(regs*)+0xa3>
c001a598:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a59d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5a0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001a5a6:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001a5ac:	c0 e8 06             	shr    al,0x6
c001a5af:	83 e0 01             	and    eax,0x1
c001a5b2:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001a5b8:	31 c0                	xor    eax,eax
c001a5ba:	e9 3b ff ff ff       	jmp    c001a4fa <sysAppSettings(regs*)+0x50>
c001a5bf:	b8 02 00 00 00       	mov    eax,0x2
c001a5c4:	e9 31 ff ff ff       	jmp    c001a4fa <sysAppSettings(regs*)+0x50>

c001a5c9 <sysSetFatAttrib(regs*)>:
c001a5c9:	57                   	push   edi
c001a5ca:	56                   	push   esi
c001a5cb:	53                   	push   ebx
c001a5cc:	83 ec 1c             	sub    esp,0x1c
c001a5cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a5d3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a5d6:	68 14 01 00 00       	push   0x114
c001a5db:	e8 e0 4e ff ff       	call   c000f4c0 <malloc>
c001a5e0:	83 c4 0c             	add    esp,0xc
c001a5e3:	89 c3                	mov    ebx,eax
c001a5e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a5ed:	57                   	push   edi
c001a5ee:	53                   	push   ebx
c001a5ef:	e8 6e 85 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001a5f4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a5f7:	83 c4 0c             	add    esp,0xc
c001a5fa:	0f b6 d4             	movzx  edx,ah
c001a5fd:	0f b6 c0             	movzx  eax,al
c001a600:	52                   	push   edx
c001a601:	50                   	push   eax
c001a602:	53                   	push   ebx
c001a603:	e8 d0 87 ff ff       	call   c0012dd8 <File::chfatattr(unsigned char, unsigned char)>
c001a608:	83 c4 10             	add    esp,0x10
c001a60b:	85 db                	test   ebx,ebx
c001a60d:	74 14                	je     c001a623 <sysSetFatAttrib(regs*)+0x5a>
c001a60f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a613:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a615:	83 ec 0c             	sub    esp,0xc
c001a618:	53                   	push   ebx
c001a619:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a61c:	83 c4 10             	add    esp,0x10
c001a61f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a623:	85 c0                	test   eax,eax
c001a625:	0f 95 c0             	setne  al
c001a628:	31 d2                	xor    edx,edx
c001a62a:	0f b6 c0             	movzx  eax,al
c001a62d:	f7 d8                	neg    eax
c001a62f:	83 d2 00             	adc    edx,0x0
c001a632:	83 c4 10             	add    esp,0x10
c001a635:	f7 da                	neg    edx
c001a637:	5b                   	pop    ebx
c001a638:	5e                   	pop    esi
c001a639:	5f                   	pop    edi
c001a63a:	c3                   	ret    

c001a63b <sysPipe(regs*)>:
c001a63b:	57                   	push   edi
c001a63c:	56                   	push   esi
c001a63d:	53                   	push   ebx
c001a63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a642:	83 ec 0c             	sub    esp,0xc
c001a645:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001a648:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001a64b:	6a 20                	push   0x20
c001a64d:	e8 6e 4e ff ff       	call   c000f4c0 <malloc>
c001a652:	89 c3                	mov    ebx,eax
c001a654:	58                   	pop    eax
c001a655:	5a                   	pop    edx
c001a656:	68 00 50 00 00       	push   0x5000
c001a65b:	53                   	push   ebx
c001a65c:	e8 45 59 ff ff       	call   c000ffa6 <Pipe::Pipe(int)>
c001a661:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a664:	e8 8f 6b ff ff       	call   c00111f8 <UnixFile::getFileDescriptor()>
c001a669:	89 07                	mov    DWORD PTR [edi],eax
c001a66b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a66e:	e8 85 6b ff ff       	call   c00111f8 <UnixFile::getFileDescriptor()>
c001a673:	83 c4 10             	add    esp,0x10
c001a676:	89 06                	mov    DWORD PTR [esi],eax
c001a678:	31 d2                	xor    edx,edx
c001a67a:	5b                   	pop    ebx
c001a67b:	31 c0                	xor    eax,eax
c001a67d:	5e                   	pop    esi
c001a67e:	5f                   	pop    edi
c001a67f:	c3                   	ret    

c001a680 <sysGetUnixTime(regs*)>:
c001a680:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001a685:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a68b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a68f:	e9 aa 8e ff ff       	jmp    c001353e <Clock::timeInSecondsLocal()>

c001a694 <string_ends_with(char const*, char const*)>:
c001a694:	57                   	push   edi
c001a695:	56                   	push   esi
c001a696:	53                   	push   ebx
c001a697:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a69b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a69f:	83 ec 0c             	sub    esp,0xc
c001a6a2:	53                   	push   ebx
c001a6a3:	e8 f0 5f fe ff       	call   c0000698 <strlen>
c001a6a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6ab:	89 c6                	mov    esi,eax
c001a6ad:	e8 e6 5f fe ff       	call   c0000698 <strlen>
c001a6b2:	83 c4 10             	add    esp,0x10
c001a6b5:	39 c6                	cmp    esi,eax
c001a6b7:	7d 06                	jge    c001a6bf <string_ends_with(char const*, char const*)+0x2b>
c001a6b9:	5b                   	pop    ebx
c001a6ba:	31 c0                	xor    eax,eax
c001a6bc:	5e                   	pop    esi
c001a6bd:	5f                   	pop    edi
c001a6be:	c3                   	ret    
c001a6bf:	83 ec 08             	sub    esp,0x8
c001a6c2:	29 c6                	sub    esi,eax
c001a6c4:	57                   	push   edi
c001a6c5:	01 f3                	add    ebx,esi
c001a6c7:	53                   	push   ebx
c001a6c8:	e8 9e 60 fe ff       	call   c000076b <strcmp>
c001a6cd:	83 c4 10             	add    esp,0x10
c001a6d0:	85 c0                	test   eax,eax
c001a6d2:	5b                   	pop    ebx
c001a6d3:	0f 94 c0             	sete   al
c001a6d6:	5e                   	pop    esi
c001a6d7:	0f b6 c0             	movzx  eax,al
c001a6da:	5f                   	pop    edi
c001a6db:	c3                   	ret    

c001a6dc <sysCallOpen(regs*)>:
c001a6dc:	56                   	push   esi
c001a6dd:	53                   	push   ebx
c001a6de:	81 ec 04 01 00 00    	sub    esp,0x104
c001a6e4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a6eb:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a6ee:	85 c9                	test   ecx,ecx
c001a6f0:	0f 84 b3 00 00 00    	je     c001a7a9 <sysCallOpen(regs*)+0xcd>
c001a6f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a6f9:	85 c0                	test   eax,eax
c001a6fb:	0f 84 a8 00 00 00    	je     c001a7a9 <sysCallOpen(regs*)+0xcd>
c001a701:	52                   	push   edx
c001a702:	68 f4 8f 02 c0       	push   0xc0028ff4
c001a707:	50                   	push   eax
c001a708:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a70c:	56                   	push   esi
c001a70d:	e8 a6 82 ff ff       	call   c00129b8 <standardiseFiles(char*, char const*, char const*)>
c001a712:	89 34 24             	mov    DWORD PTR [esp],esi
c001a715:	e8 7e 5f fe ff       	call   c0000698 <strlen>
c001a71a:	83 c4 10             	add    esp,0x10
c001a71d:	48                   	dec    eax
c001a71e:	74 1d                	je     c001a73d <sysCallOpen(regs*)+0x61>
c001a720:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a723:	eb 0f                	jmp    c001a734 <sysCallOpen(regs*)+0x58>
c001a725:	80 fa 3a             	cmp    dl,0x3a
c001a728:	74 0f                	je     c001a739 <sysCallOpen(regs*)+0x5d>
c001a72a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a72e:	48                   	dec    eax
c001a72f:	74 0c                	je     c001a73d <sysCallOpen(regs*)+0x61>
c001a731:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a734:	80 fa 2e             	cmp    dl,0x2e
c001a737:	75 ec                	jne    c001a725 <sysCallOpen(regs*)+0x49>
c001a739:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a73d:	83 ec 08             	sub    esp,0x8
c001a740:	68 f8 8f 02 c0       	push   0xc0028ff8
c001a745:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a748:	e8 47 ff ff ff       	call   c001a694 <string_ends_with(char const*, char const*)>
c001a74d:	83 c4 10             	add    esp,0x10
c001a750:	85 c0                	test   eax,eax
c001a752:	75 17                	jne    c001a76b <sysCallOpen(regs*)+0x8f>
c001a754:	83 ec 08             	sub    esp,0x8
c001a757:	68 19 90 02 c0       	push   0xc0029019
c001a75c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a75f:	e8 30 ff ff ff       	call   c001a694 <string_ends_with(char const*, char const*)>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	85 c0                	test   eax,eax
c001a769:	74 51                	je     c001a7bc <sysCallOpen(regs*)+0xe0>
c001a76b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a76e:	83 ec 08             	sub    esp,0x8
c001a771:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a777:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a77e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a781:	ff 30                	push   DWORD PTR [eax]
c001a783:	68 fd 8f 02 c0       	push   0xc0028ffd
c001a788:	e8 a6 7e ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001a78d:	c7 04 24 0c 90 02 c0 	mov    DWORD PTR [esp],0xc002900c
c001a794:	e8 9a 7e ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	81 c4 04 01 00 00    	add    esp,0x104
c001a7a2:	31 c0                	xor    eax,eax
c001a7a4:	31 d2                	xor    edx,edx
c001a7a6:	5b                   	pop    ebx
c001a7a7:	5e                   	pop    esi
c001a7a8:	c3                   	ret    
c001a7a9:	81 c4 04 01 00 00    	add    esp,0x104
c001a7af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a7b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a7b9:	5b                   	pop    ebx
c001a7ba:	5e                   	pop    esi
c001a7bb:	c3                   	ret    
c001a7bc:	83 ec 08             	sub    esp,0x8
c001a7bf:	68 f9 8f 02 c0       	push   0xc0028ff9
c001a7c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a7c7:	e8 9f 5f fe ff       	call   c000076b <strcmp>
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	85 c0                	test   eax,eax
c001a7d1:	74 98                	je     c001a76b <sysCallOpen(regs*)+0x8f>
c001a7d3:	83 ec 08             	sub    esp,0x8
c001a7d6:	68 f8 8f 02 c0       	push   0xc0028ff8
c001a7db:	56                   	push   esi
c001a7dc:	e8 b3 fe ff ff       	call   c001a694 <string_ends_with(char const*, char const*)>
c001a7e1:	83 c4 10             	add    esp,0x10
c001a7e4:	85 c0                	test   eax,eax
c001a7e6:	75 83                	jne    c001a76b <sysCallOpen(regs*)+0x8f>
c001a7e8:	83 ec 08             	sub    esp,0x8
c001a7eb:	68 1e 90 02 c0       	push   0xc002901e
c001a7f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a7f3:	e8 9c fe ff ff       	call   c001a694 <string_ends_with(char const*, char const*)>
c001a7f8:	83 c4 10             	add    esp,0x10
c001a7fb:	85 c0                	test   eax,eax
c001a7fd:	0f 85 d9 00 00 00    	jne    c001a8dc <sysCallOpen(regs*)+0x200>
c001a803:	83 ec 08             	sub    esp,0x8
c001a806:	68 23 90 02 c0       	push   0xc0029023
c001a80b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a80e:	e8 81 fe ff ff       	call   c001a694 <string_ends_with(char const*, char const*)>
c001a813:	83 c4 10             	add    esp,0x10
c001a816:	85 c0                	test   eax,eax
c001a818:	0f 85 be 00 00 00    	jne    c001a8dc <sysCallOpen(regs*)+0x200>
c001a81e:	83 ec 08             	sub    esp,0x8
c001a821:	68 1f 90 02 c0       	push   0xc002901f
c001a826:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a829:	e8 3d 5f fe ff       	call   c000076b <strcmp>
c001a82e:	83 c4 10             	add    esp,0x10
c001a831:	85 c0                	test   eax,eax
c001a833:	0f 84 a3 00 00 00    	je     c001a8dc <sysCallOpen(regs*)+0x200>
c001a839:	83 ec 08             	sub    esp,0x8
c001a83c:	68 1e 90 02 c0       	push   0xc002901e
c001a841:	56                   	push   esi
c001a842:	e8 4d fe ff ff       	call   c001a694 <string_ends_with(char const*, char const*)>
c001a847:	83 c4 10             	add    esp,0x10
c001a84a:	85 c0                	test   eax,eax
c001a84c:	0f 85 8a 00 00 00    	jne    c001a8dc <sysCallOpen(regs*)+0x200>
c001a852:	83 ec 0c             	sub    esp,0xc
c001a855:	68 14 01 00 00       	push   0x114
c001a85a:	e8 61 4c ff ff       	call   c000f4c0 <malloc>
c001a85f:	83 c4 0c             	add    esp,0xc
c001a862:	89 c6                	mov    esi,eax
c001a864:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a869:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a86c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a86f:	56                   	push   esi
c001a870:	e8 ed 82 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001a875:	83 c4 10             	add    esp,0x10
c001a878:	85 f6                	test   esi,esi
c001a87a:	0f 84 29 ff ff ff    	je     c001a7a9 <sysCallOpen(regs*)+0xcd>
c001a880:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a883:	0f b6 c2             	movzx  eax,dl
c001a886:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a889:	89 d0                	mov    eax,edx
c001a88b:	83 e0 01             	and    eax,0x1
c001a88e:	f6 c2 02             	test   dl,0x2
c001a891:	74 03                	je     c001a896 <sysCallOpen(regs*)+0x1ba>
c001a893:	83 c8 02             	or     eax,0x2
c001a896:	f6 c2 04             	test   dl,0x4
c001a899:	74 03                	je     c001a89e <sysCallOpen(regs*)+0x1c2>
c001a89b:	83 c8 04             	or     eax,0x4
c001a89e:	f6 c2 08             	test   dl,0x8
c001a8a1:	74 03                	je     c001a8a6 <sysCallOpen(regs*)+0x1ca>
c001a8a3:	83 c8 0a             	or     eax,0xa
c001a8a6:	83 e2 10             	and    edx,0x10
c001a8a9:	74 03                	je     c001a8ae <sysCallOpen(regs*)+0x1d2>
c001a8ab:	83 c8 12             	or     eax,0x12
c001a8ae:	83 ec 08             	sub    esp,0x8
c001a8b1:	50                   	push   eax
c001a8b2:	56                   	push   esi
c001a8b3:	e8 0e 83 ff ff       	call   c0012bc6 <File::open(FileOpenMode)>
c001a8b8:	83 c4 10             	add    esp,0x10
c001a8bb:	85 c0                	test   eax,eax
c001a8bd:	0f 85 e6 fe ff ff    	jne    c001a7a9 <sysCallOpen(regs*)+0xcd>
c001a8c3:	83 ec 0c             	sub    esp,0xc
c001a8c6:	56                   	push   esi
c001a8c7:	e8 2c 69 ff ff       	call   c00111f8 <UnixFile::getFileDescriptor()>
c001a8cc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a8cf:	89 02                	mov    DWORD PTR [edx],eax
c001a8d1:	c1 f8 1f             	sar    eax,0x1f
c001a8d4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a8d7:	e9 bd fe ff ff       	jmp    c001a799 <sysCallOpen(regs*)+0xbd>
c001a8dc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a8df:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a8e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a8ec:	e9 ab fe ff ff       	jmp    c001a79c <sysCallOpen(regs*)+0xc0>

c001a8f1 <setupSystemCalls()>:
c001a8f1:	c7 05 e0 bb 02 c0 02 9b 01 c0 	mov    DWORD PTR ds:0xc002bbe0,0xc0019b02
c001a8fb:	c7 05 e4 bb 02 c0 d6 98 01 c0 	mov    DWORD PTR ds:0xc002bbe4,0xc00198d6
c001a905:	c7 05 e8 bb 02 c0 29 9a 01 c0 	mov    DWORD PTR ds:0xc002bbe8,0xc0019a29
c001a90f:	c7 05 ec bb 02 c0 9a 9a 01 c0 	mov    DWORD PTR ds:0xc002bbec,0xc0019a9a
c001a919:	c7 05 f0 bb 02 c0 c1 99 01 c0 	mov    DWORD PTR ds:0xc002bbf0,0xc00199c1
c001a923:	c7 05 f4 bb 02 c0 0d 99 01 c0 	mov    DWORD PTR ds:0xc002bbf4,0xc001990d
c001a92d:	c7 05 f8 bb 02 c0 ee 98 01 c0 	mov    DWORD PTR ds:0xc002bbf8,0xc00198ee
c001a937:	c7 05 fc bb 02 c0 7e 9a 01 c0 	mov    DWORD PTR ds:0xc002bbfc,0xc0019a7e
c001a941:	c7 05 04 bc 02 c0 14 a0 01 c0 	mov    DWORD PTR ds:0xc002bc04,0xc001a014
c001a94b:	c7 05 00 bc 02 c0 dc a6 01 c0 	mov    DWORD PTR ds:0xc002bc00,0xc001a6dc
c001a955:	c7 05 08 bc 02 c0 9c a0 01 c0 	mov    DWORD PTR ds:0xc002bc08,0xc001a09c
c001a95f:	c7 05 0c bc 02 c0 03 9d 01 c0 	mov    DWORD PTR ds:0xc002bc0c,0xc0019d03
c001a969:	c7 05 10 bc 02 c0 3d 9b 01 c0 	mov    DWORD PTR ds:0xc002bc10,0xc0019b3d
c001a973:	c7 05 14 bc 02 c0 42 9b 01 c0 	mov    DWORD PTR ds:0xc002bc14,0xc0019b42
c001a97d:	c7 05 18 bc 02 c0 77 a1 01 c0 	mov    DWORD PTR ds:0xc002bc18,0xc001a177
c001a987:	c7 05 1c bc 02 c0 11 a1 01 c0 	mov    DWORD PTR ds:0xc002bc1c,0xc001a111
c001a991:	c7 05 20 bc 02 c0 eb 9d 01 c0 	mov    DWORD PTR ds:0xc002bc20,0xc0019deb
c001a99b:	c7 05 24 bc 02 c0 54 9e 01 c0 	mov    DWORD PTR ds:0xc002bc24,0xc0019e54
c001a9a5:	c7 05 28 bc 02 c0 d1 9e 01 c0 	mov    DWORD PTR ds:0xc002bc28,0xc0019ed1
c001a9af:	c7 05 2c bc 02 c0 47 9b 01 c0 	mov    DWORD PTR ds:0xc002bc2c,0xc0019b47
c001a9b9:	c7 05 30 bc 02 c0 e7 a1 01 c0 	mov    DWORD PTR ds:0xc002bc30,0xc001a1e7
c001a9c3:	c7 05 34 bc 02 c0 01 a2 01 c0 	mov    DWORD PTR ds:0xc002bc34,0xc001a201
c001a9cd:	c7 05 38 bc 02 c0 01 a2 01 c0 	mov    DWORD PTR ds:0xc002bc38,0xc001a201
c001a9d7:	c7 05 3c bc 02 c0 42 a2 01 c0 	mov    DWORD PTR ds:0xc002bc3c,0xc001a242
c001a9e1:	c7 05 40 bc 02 c0 a6 a2 01 c0 	mov    DWORD PTR ds:0xc002bc40,0xc001a2a6
c001a9eb:	c7 05 44 bc 02 c0 51 9b 01 c0 	mov    DWORD PTR ds:0xc002bc44,0xc0019b51
c001a9f5:	c7 05 48 bc 02 c0 0a a3 01 c0 	mov    DWORD PTR ds:0xc002bc48,0xc001a30a
c001a9ff:	c7 05 4c bc 02 c0 c0 9c 01 c0 	mov    DWORD PTR ds:0xc002bc4c,0xc0019cc0
c001aa09:	c7 05 50 bc 02 c0 56 a3 01 c0 	mov    DWORD PTR ds:0xc002bc50,0xc001a356
c001aa13:	c7 05 54 bc 02 c0 91 9d 01 c0 	mov    DWORD PTR ds:0xc002bc54,0xc0019d91
c001aa1d:	c7 05 58 bc 02 c0 2b a4 01 c0 	mov    DWORD PTR ds:0xc002bc58,0xc001a42b
c001aa27:	c7 05 5c bc 02 c0 54 9f 01 c0 	mov    DWORD PTR ds:0xc002bc5c,0xc0019f54
c001aa31:	c7 05 60 bc 02 c0 52 a4 01 c0 	mov    DWORD PTR ds:0xc002bc60,0xc001a452
c001aa3b:	c7 05 64 bc 02 c0 d9 a3 01 c0 	mov    DWORD PTR ds:0xc002bc64,0xc001a3d9
c001aa45:	c7 05 68 bc 02 c0 aa a4 01 c0 	mov    DWORD PTR ds:0xc002bc68,0xc001a4aa
c001aa4f:	c7 05 6c bc 02 c0 61 9b 01 c0 	mov    DWORD PTR ds:0xc002bc6c,0xc0019b61
c001aa59:	c7 05 70 bc 02 c0 cb 9b 01 c0 	mov    DWORD PTR ds:0xc002bc70,0xc0019bcb
c001aa63:	c7 05 74 bc 02 c0 11 9c 01 c0 	mov    DWORD PTR ds:0xc002bc74,0xc0019c11
c001aa6d:	c7 05 78 bc 02 c0 c9 a5 01 c0 	mov    DWORD PTR ds:0xc002bc78,0xc001a5c9
c001aa77:	c7 05 7c bc 02 c0 1c a2 01 c0 	mov    DWORD PTR ds:0xc002bc7c,0xc001a21c
c001aa81:	c7 05 80 bc 02 c0 62 9c 01 c0 	mov    DWORD PTR ds:0xc002bc80,0xc0019c62
c001aa8b:	c7 05 84 bc 02 c0 3b a6 01 c0 	mov    DWORD PTR ds:0xc002bc84,0xc001a63b
c001aa95:	c7 05 88 bc 02 c0 80 a6 01 c0 	mov    DWORD PTR ds:0xc002bc88,0xc001a680
c001aa9f:	c7 05 8c bc 02 c0 19 99 01 c0 	mov    DWORD PTR ds:0xc002bc8c,0xc0019919
c001aaa9:	c3                   	ret    

c001aaaa <systemCall(regs*, void*)>:
c001aaaa:	53                   	push   ebx
c001aaab:	83 ec 08             	sub    esp,0x8
c001aaae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aab2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001aab5:	83 f8 7f             	cmp    eax,0x7f
c001aab8:	77 16                	ja     c001aad0 <systemCall(regs*, void*)+0x26>
c001aaba:	8b 14 85 e0 bb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4420]
c001aac1:	85 d2                	test   edx,edx
c001aac3:	74 0b                	je     c001aad0 <systemCall(regs*, void*)+0x26>
c001aac5:	83 ec 0c             	sub    esp,0xc
c001aac8:	53                   	push   ebx
c001aac9:	ff d2                	call   edx
c001aacb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001aace:	eb 0d                	jmp    c001aadd <systemCall(regs*, void*)+0x33>
c001aad0:	52                   	push   edx
c001aad1:	52                   	push   edx
c001aad2:	50                   	push   eax
c001aad3:	68 28 90 02 c0       	push   0xc0029028
c001aad8:	e8 56 7b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001aadd:	83 c4 10             	add    esp,0x10
c001aae0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001aae5:	31 d2                	xor    edx,edx
c001aae7:	83 c4 08             	add    esp,0x8
c001aaea:	5b                   	pop    ebx
c001aaeb:	c3                   	ret    

c001aaec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001aaec:	55                   	push   ebp
c001aaed:	89 e5                	mov    ebp,esp
c001aaef:	57                   	push   edi
c001aaf0:	56                   	push   esi
c001aaf1:	53                   	push   ebx
c001aaf2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001aaf8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001aafb:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001aafe:	85 c0                	test   eax,eax
c001ab00:	0f 95 c1             	setne  cl
c001ab03:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001ab07:	0f 94 c2             	sete   dl
c001ab0a:	84 d1                	test   cl,dl
c001ab0c:	74 26                	je     c001ab34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001ab0e:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001ab15:	74 1d                	je     c001ab34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001ab17:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ab1a:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001ab20:	89 d6                	mov    esi,edx
c001ab22:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001ab28:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001ab2e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ab31:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001ab34:	83 ec 0c             	sub    esp,0xc
c001ab37:	05 ff 0f 00 00       	add    eax,0xfff
c001ab3c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001ab3f:	6a 01                	push   0x1
c001ab41:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001ab47:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001ab4d:	e8 f1 6a ff ff       	call   c0011643 <Virt::allocateKernelVirtualPages(int)>
c001ab52:	83 c4 10             	add    esp,0x10
c001ab55:	89 c6                	mov    esi,eax
c001ab57:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001ab5d:	0f 86 21 01 00 00    	jbe    c001ac84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001ab63:	c1 eb 0c             	shr    ebx,0xc
c001ab66:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001ab70:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001ab76:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ab79:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ab7c:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001ab82:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001ab85:	29 d8                	sub    eax,ebx
c001ab87:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001ab8d:	0f 83 f4 00 00 00    	jae    c001ac87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001ab93:	83 ec 0c             	sub    esp,0xc
c001ab96:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001ab9c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001ab9f:	3d 00 10 00 00       	cmp    eax,0x1000
c001aba4:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001aba6:	52                   	push   edx
c001aba7:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001abad:	52                   	push   edx
c001abae:	76 05                	jbe    c001abb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001abb0:	b8 00 10 00 00       	mov    eax,0x1000
c001abb5:	31 d2                	xor    edx,edx
c001abb7:	52                   	push   edx
c001abb8:	50                   	push   eax
c001abb9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001abbc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001abbf:	83 c4 20             	add    esp,0x20
c001abc2:	85 c0                	test   eax,eax
c001abc4:	74 1f                	je     c001abe5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001abc6:	51                   	push   ecx
c001abc7:	51                   	push   ecx
c001abc8:	50                   	push   eax
c001abc9:	68 3c 90 02 c0       	push   0xc002903c
c001abce:	e8 60 7a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001abd3:	89 34 24             	mov    DWORD PTR [esp],esi
c001abd6:	e8 cc 6d ff ff       	call   c00119a7 <Virt::freeKernelVirtualPages(unsigned long)>
c001abdb:	83 c4 10             	add    esp,0x10
c001abde:	31 c0                	xor    eax,eax
c001abe0:	e9 7c 01 00 00       	jmp    c001ad61 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001abe5:	e8 f3 14 00 00       	call   c001c0dd <lockScheduler()>
c001abea:	e8 7b 4e ff ff       	call   c000fa6a <Phys::allocatePage()>
c001abef:	6a 07                	push   0x7
c001abf1:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001abf7:	56                   	push   esi
c001abf8:	50                   	push   eax
c001abf9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001abff:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ac02:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001ac08:	e8 01 71 ff ff       	call   c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>
c001ac0d:	83 c4 0c             	add    esp,0xc
c001ac10:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ac16:	6a 00                	push   0x0
c001ac18:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ac1e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ac21:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001ac27:	e8 4c 6f ff ff       	call   c0011b78 <VAS::mapOtherVASIn(bool, VAS*)>
c001ac2c:	58                   	pop    eax
c001ac2d:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001ac33:	5a                   	pop    edx
c001ac34:	68 07 04 00 00       	push   0x407
c001ac39:	53                   	push   ebx
c001ac3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ac40:	50                   	push   eax
c001ac41:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ac47:	6a 00                	push   0x0
c001ac49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac51:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ac57:	e8 6c 74 ff ff       	call   c00120c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ac5c:	83 c4 1c             	add    esp,0x1c
c001ac5f:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001ac65:	68 00 10 00 00       	push   0x1000
c001ac6a:	50                   	push   eax
c001ac6b:	56                   	push   esi
c001ac6c:	e8 d4 59 fe ff       	call   c0000645 <memcpy>
c001ac71:	e8 69 14 00 00       	call   c001c0df <unlockScheduler()>
c001ac76:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001ac7c:	83 c4 10             	add    esp,0x10
c001ac7f:	e9 f5 fe ff ff       	jmp    c001ab79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001ac84:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ac87:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001ac91:	0f 86 bc 00 00 00    	jbe    c001ad53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001ac97:	e8 41 14 00 00       	call   c001c0dd <lockScheduler()>
c001ac9c:	51                   	push   ecx
c001ac9d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001aca3:	6a 00                	push   0x0
c001aca5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acaa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acad:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001acb3:	e8 c0 6e ff ff       	call   c0011b78 <VAS::mapOtherVASIn(bool, VAS*)>
c001acb8:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	c1 e8 0c             	shr    eax,0xc
c001acc4:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001acce:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001acd4:	e8 91 4d ff ff       	call   c000fa6a <Phys::allocatePage()>
c001acd9:	6a 07                	push   0x7
c001acdb:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001ace1:	56                   	push   esi
c001ace2:	50                   	push   eax
c001ace3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ace9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001acec:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001acf2:	e8 17 70 ff ff       	call   c0011d0e <VAS::mapPage(unsigned long, unsigned long, int)>
c001acf7:	58                   	pop    eax
c001acf8:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001acfe:	5a                   	pop    edx
c001acff:	68 07 04 00 00       	push   0x407
c001ad04:	53                   	push   ebx
c001ad05:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ad0b:	50                   	push   eax
c001ad0c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ad12:	6a 00                	push   0x0
c001ad14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad19:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad1c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ad22:	e8 a1 73 ff ff       	call   c00120c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ad27:	83 c4 1c             	add    esp,0x1c
c001ad2a:	68 00 10 00 00       	push   0x1000
c001ad2f:	6a 00                	push   0x0
c001ad31:	56                   	push   esi
c001ad32:	e8 44 59 fe ff       	call   c000067b <memset>
c001ad37:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001ad3d:	83 c4 10             	add    esp,0x10
c001ad40:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001ad46:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001ad4c:	77 86                	ja     c001acd4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001ad4e:	e8 8c 13 00 00       	call   c001c0df <unlockScheduler()>
c001ad53:	83 ec 0c             	sub    esp,0xc
c001ad56:	56                   	push   esi
c001ad57:	e8 4b 6c ff ff       	call   c00119a7 <Virt::freeKernelVirtualPages(unsigned long)>
c001ad5c:	83 c4 10             	add    esp,0x10
c001ad5f:	b0 01                	mov    al,0x1
c001ad61:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ad64:	5b                   	pop    ebx
c001ad65:	5e                   	pop    esi
c001ad66:	5f                   	pop    edi
c001ad67:	5d                   	pop    ebp
c001ad68:	c3                   	ret    

c001ad69 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ad69:	55                   	push   ebp
c001ad6a:	57                   	push   edi
c001ad6b:	56                   	push   esi
c001ad6c:	53                   	push   ebx
c001ad6d:	83 ec 48             	sub    esp,0x48
c001ad70:	68 14 01 00 00       	push   0x114
c001ad75:	e8 46 47 ff ff       	call   c000f4c0 <malloc>
c001ad7a:	83 c4 0c             	add    esp,0xc
c001ad7d:	89 c6                	mov    esi,eax
c001ad7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ad83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ad87:	50                   	push   eax
c001ad88:	e8 d5 7d ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001ad8d:	58                   	pop    eax
c001ad8e:	5a                   	pop    edx
c001ad8f:	6a 01                	push   0x1
c001ad91:	56                   	push   esi
c001ad92:	e8 2f 7e ff ff       	call   c0012bc6 <File::open(FileOpenMode)>
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	85 c0                	test   eax,eax
c001ad9c:	0f 85 47 01 00 00    	jne    c001aee9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ada2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001adaa:	83 ec 0c             	sub    esp,0xc
c001adad:	6a 34                	push   0x34
c001adaf:	e8 0c 47 ff ff       	call   c000f4c0 <malloc>
c001adb4:	89 c3                	mov    ebx,eax
c001adb6:	58                   	pop    eax
c001adb7:	8b 06                	mov    eax,DWORD PTR [esi]
c001adb9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001adbd:	57                   	push   edi
c001adbe:	53                   	push   ebx
c001adbf:	6a 00                	push   0x0
c001adc1:	6a 34                	push   0x34
c001adc3:	56                   	push   esi
c001adc4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adc7:	83 c4 20             	add    esp,0x20
c001adca:	85 c0                	test   eax,eax
c001adcc:	0f 85 17 01 00 00    	jne    c001aee9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001add2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001add8:	0f 85 0b 01 00 00    	jne    c001aee9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001adde:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ade1:	85 c0                	test   eax,eax
c001ade3:	0f 84 00 01 00 00    	je     c001aee9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ade9:	31 d2                	xor    edx,edx
c001adeb:	55                   	push   ebp
c001adec:	52                   	push   edx
c001aded:	50                   	push   eax
c001adee:	56                   	push   esi
c001adef:	e8 90 7e ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001adf4:	83 c4 10             	add    esp,0x10
c001adf7:	85 c0                	test   eax,eax
c001adf9:	0f 85 ea 00 00 00    	jne    c001aee9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001adff:	83 ec 0c             	sub    esp,0xc
c001ae02:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ae05:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ae09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ae0d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ae11:	0f af c2             	imul   eax,edx
c001ae14:	50                   	push   eax
c001ae15:	e8 a6 46 ff ff       	call   c000f4c0 <malloc>
c001ae1a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ae1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae20:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ae23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ae27:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ae2b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ae2f:	0f af c2             	imul   eax,edx
c001ae32:	99                   	cdq    
c001ae33:	52                   	push   edx
c001ae34:	50                   	push   eax
c001ae35:	56                   	push   esi
c001ae36:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ae39:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ae3c:	83 c4 20             	add    esp,0x20
c001ae3f:	85 c0                	test   eax,eax
c001ae41:	0f 84 a2 00 00 00    	je     c001aee9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ae47:	31 d2                	xor    edx,edx
c001ae49:	51                   	push   ecx
c001ae4a:	52                   	push   edx
c001ae4b:	50                   	push   eax
c001ae4c:	56                   	push   esi
c001ae4d:	e8 32 7e ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001ae52:	83 c4 10             	add    esp,0x10
c001ae55:	85 c0                	test   eax,eax
c001ae57:	0f 85 8c 00 00 00    	jne    c001aee9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ae5d:	83 ec 0c             	sub    esp,0xc
c001ae60:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ae64:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ae68:	31 ed                	xor    ebp,ebp
c001ae6a:	0f af c2             	imul   eax,edx
c001ae6d:	50                   	push   eax
c001ae6e:	e8 4d 46 ff ff       	call   c000f4c0 <malloc>
c001ae73:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ae75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae79:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ae7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae80:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ae84:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ae88:	0f af c2             	imul   eax,edx
c001ae8b:	99                   	cdq    
c001ae8c:	52                   	push   edx
c001ae8d:	50                   	push   eax
c001ae8e:	56                   	push   esi
c001ae8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ae92:	83 c4 20             	add    esp,0x20
c001ae95:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ae9d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001aea1:	0f 86 80 00 00 00    	jbe    c001af27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001aea7:	0f b7 fd             	movzx  edi,bp
c001aeaa:	c1 e7 05             	shl    edi,0x5
c001aead:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001aeb1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001aeb4:	75 6b                	jne    c001af21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001aeb6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001aeb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aebd:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001aec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aec4:	52                   	push   edx
c001aec5:	31 d2                	xor    edx,edx
c001aec7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001aeca:	52                   	push   edx
c001aecb:	50                   	push   eax
c001aecc:	56                   	push   esi
c001aecd:	e8 b2 7d ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001aed2:	83 c4 10             	add    esp,0x10
c001aed5:	85 c0                	test   eax,eax
c001aed7:	74 17                	je     c001aef0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001aed9:	83 ec 0c             	sub    esp,0xc
c001aedc:	68 67 90 02 c0       	push   0xc0029067
c001aee1:	e8 4d 77 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001aee6:	83 c4 10             	add    esp,0x10
c001aee9:	31 c0                	xor    eax,eax
c001aeeb:	e9 87 00 00 00       	jmp    c001af77 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001aef0:	83 ec 0c             	sub    esp,0xc
c001aef3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001aef6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001aef9:	50                   	push   eax
c001aefa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aefe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af02:	56                   	push   esi
c001af03:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001af07:	e8 e0 fb ff ff       	call   c001aaec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001af0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af10:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001af14:	83 c4 20             	add    esp,0x20
c001af17:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001af1b:	73 04                	jae    c001af21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001af1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af21:	45                   	inc    ebp
c001af22:	e9 76 ff ff ff       	jmp    c001ae9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001af27:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001af2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af33:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001af39:	83 ec 0c             	sub    esp,0xc
c001af3c:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001af42:	25 00 f0 ff ff       	and    eax,0xfffff000
c001af47:	05 00 10 00 00       	add    eax,0x1000
c001af4c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001af4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af53:	e8 78 45 ff ff       	call   c000f4d0 <free>
c001af58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af5b:	e8 70 45 ff ff       	call   c000f4d0 <free>
c001af60:	58                   	pop    eax
c001af61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af65:	e8 66 45 ff ff       	call   c000f4d0 <free>
c001af6a:	89 34 24             	mov    DWORD PTR [esp],esi
c001af6d:	e8 b2 7c ff ff       	call   c0012c24 <File::close()>
c001af72:	83 c4 10             	add    esp,0x10
c001af75:	b0 01                	mov    al,0x1
c001af77:	83 c4 3c             	add    esp,0x3c
c001af7a:	5b                   	pop    ebx
c001af7b:	5e                   	pop    esi
c001af7c:	5f                   	pop    edi
c001af7d:	5d                   	pop    ebp
c001af7e:	c3                   	ret    

c001af7f <Thr::runtimeReferenceHelper()>:
c001af7f:	83 ec 18             	sub    esp,0x18
c001af82:	68 6f 90 02 c0       	push   0xc002906f
c001af87:	e8 a7 76 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001af8c:	fa                   	cli    
c001af8d:	83 c4 10             	add    esp,0x10
c001af90:	eb fe                	jmp    c001af90 <Thr::runtimeReferenceHelper()+0x11>

c001af92 <Thr::getAddressOfKernelSymbol(char const*)>:
c001af92:	57                   	push   edi
c001af93:	56                   	push   esi
c001af94:	53                   	push   ebx
c001af95:	31 db                	xor    ebx,ebx
c001af97:	39 1d 80 c5 02 c0    	cmp    DWORD PTR ds:0xc002c580,ebx
c001af9d:	7e 3c                	jle    c001afdb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001af9f:	8b 34 9d 00 c5 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3b00]
c001afa6:	31 ff                	xor    edi,edi
c001afa8:	39 3c 9d 00 c4 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3c00],edi
c001afaf:	7e 27                	jle    c001afd8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001afb1:	50                   	push   eax
c001afb2:	50                   	push   eax
c001afb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afb7:	8b 06                	mov    eax,DWORD PTR [esi]
c001afb9:	03 04 9d 80 c4 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3b80]
c001afc0:	50                   	push   eax
c001afc1:	e8 a5 57 fe ff       	call   c000076b <strcmp>
c001afc6:	83 c4 10             	add    esp,0x10
c001afc9:	85 c0                	test   eax,eax
c001afcb:	75 05                	jne    c001afd2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001afcd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001afd0:	eb 0b                	jmp    c001afdd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001afd2:	83 c6 10             	add    esi,0x10
c001afd5:	47                   	inc    edi
c001afd6:	eb d0                	jmp    c001afa8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001afd8:	43                   	inc    ebx
c001afd9:	eb bc                	jmp    c001af97 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001afdb:	31 c0                	xor    eax,eax
c001afdd:	5b                   	pop    ebx
c001afde:	5e                   	pop    esi
c001afdf:	5f                   	pop    edi
c001afe0:	c3                   	ret    

c001afe1 <Thr::loadKernelSymbolTable(char const*)>:
c001afe1:	55                   	push   ebp
c001afe2:	57                   	push   edi
c001afe3:	56                   	push   esi
c001afe4:	53                   	push   ebx
c001afe5:	83 ec 68             	sub    esp,0x68
c001afe8:	8b 35 d4 c5 02 c0    	mov    esi,DWORD PTR ds:0xc002c5d4
c001afee:	68 14 01 00 00       	push   0x114
c001aff3:	e8 c8 44 ff ff       	call   c000f4c0 <malloc>
c001aff8:	83 c4 0c             	add    esp,0xc
c001affb:	89 c3                	mov    ebx,eax
c001affd:	56                   	push   esi
c001affe:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b002:	50                   	push   eax
c001b003:	e8 5a 7b ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001b008:	5e                   	pop    esi
c001b009:	5f                   	pop    edi
c001b00a:	6a 01                	push   0x1
c001b00c:	53                   	push   ebx
c001b00d:	e8 b4 7b ff ff       	call   c0012bc6 <File::open(FileOpenMode)>
c001b012:	83 c4 10             	add    esp,0x10
c001b015:	31 d2                	xor    edx,edx
c001b017:	85 c0                	test   eax,eax
c001b019:	0f 85 74 02 00 00    	jne    c001b293 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b01f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b027:	83 ec 0c             	sub    esp,0xc
c001b02a:	6a 34                	push   0x34
c001b02c:	e8 8f 44 ff ff       	call   c000f4c0 <malloc>
c001b031:	59                   	pop    ecx
c001b032:	89 c7                	mov    edi,eax
c001b034:	8d 74 24 34          	lea    esi,[esp+0x34]
c001b038:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b03a:	56                   	push   esi
c001b03b:	57                   	push   edi
c001b03c:	6a 00                	push   0x0
c001b03e:	6a 34                	push   0x34
c001b040:	53                   	push   ebx
c001b041:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b044:	83 c4 20             	add    esp,0x20
c001b047:	85 c0                	test   eax,eax
c001b049:	74 17                	je     c001b062 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001b04b:	83 ec 0c             	sub    esp,0xc
c001b04e:	68 91 90 02 c0       	push   0xc0029091
c001b053:	e8 3f e0 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001b058:	83 c4 10             	add    esp,0x10
c001b05b:	31 d2                	xor    edx,edx
c001b05d:	e9 31 02 00 00       	jmp    c001b293 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b062:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b068:	75 e1                	jne    c001b04b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b06a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b06d:	85 c0                	test   eax,eax
c001b06f:	74 da                	je     c001b04b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b071:	52                   	push   edx
c001b072:	31 d2                	xor    edx,edx
c001b074:	52                   	push   edx
c001b075:	50                   	push   eax
c001b076:	53                   	push   ebx
c001b077:	e8 08 7c ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b07c:	83 c4 10             	add    esp,0x10
c001b07f:	85 c0                	test   eax,eax
c001b081:	75 c8                	jne    c001b04b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b083:	83 ec 0c             	sub    esp,0xc
c001b086:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b08a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b08e:	31 ed                	xor    ebp,ebp
c001b090:	0f af c2             	imul   eax,edx
c001b093:	50                   	push   eax
c001b094:	e8 27 44 ff ff       	call   c000f4c0 <malloc>
c001b099:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b09b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b09f:	89 34 24             	mov    DWORD PTR [esp],esi
c001b0a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0a6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b0aa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b0ae:	0f af c2             	imul   eax,edx
c001b0b1:	99                   	cdq    
c001b0b2:	52                   	push   edx
c001b0b3:	50                   	push   eax
c001b0b4:	53                   	push   ebx
c001b0b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b0b8:	83 c4 20             	add    esp,0x20
c001b0bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b0c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b0cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b0d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0db:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001b0df:	0f 86 aa 00 00 00    	jbe    c001b18f <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001b0e5:	0f b7 f5             	movzx  esi,bp
c001b0e8:	6b f6 28             	imul   esi,esi,0x28
c001b0eb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b0ef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b0f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0f6:	50                   	push   eax
c001b0f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b0fb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001b0ff:	8b 16                	mov    edx,DWORD PTR [esi]
c001b101:	6b c0 28             	imul   eax,eax,0x28
c001b104:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001b108:	89 d0                	mov    eax,edx
c001b10a:	31 d2                	xor    edx,edx
c001b10c:	52                   	push   edx
c001b10d:	50                   	push   eax
c001b10e:	53                   	push   ebx
c001b10f:	e8 70 7b ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b114:	83 c4 0c             	add    esp,0xc
c001b117:	6a 20                	push   0x20
c001b119:	6a 00                	push   0x0
c001b11b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b11f:	52                   	push   edx
c001b120:	e8 56 55 fe ff       	call   c000067b <memset>
c001b125:	58                   	pop    eax
c001b126:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b128:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001b12c:	51                   	push   ecx
c001b12d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001b131:	52                   	push   edx
c001b132:	6a 00                	push   0x0
c001b134:	6a 1f                	push   0x1f
c001b136:	53                   	push   ebx
c001b137:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b13a:	83 c4 18             	add    esp,0x18
c001b13d:	68 a8 90 02 c0       	push   0xc00290a8
c001b142:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b146:	52                   	push   edx
c001b147:	e8 1f 56 fe ff       	call   c000076b <strcmp>
c001b14c:	83 c4 10             	add    esp,0x10
c001b14f:	85 c0                	test   eax,eax
c001b151:	75 0f                	jne    c001b162 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001b153:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b15a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b15e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b162:	50                   	push   eax
c001b163:	50                   	push   eax
c001b164:	68 b0 90 02 c0       	push   0xc00290b0
c001b169:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b16d:	50                   	push   eax
c001b16e:	e8 f8 55 fe ff       	call   c000076b <strcmp>
c001b173:	83 c4 10             	add    esp,0x10
c001b176:	85 c0                	test   eax,eax
c001b178:	75 0f                	jne    c001b189 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001b17a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b181:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b185:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b189:	45                   	inc    ebp
c001b18a:	e9 4c ff ff ff       	jmp    c001b0db <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001b18f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b194:	75 10                	jne    c001b1a6 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001b196:	83 ec 0c             	sub    esp,0xc
c001b199:	68 b8 90 02 c0       	push   0xc00290b8
c001b19e:	e8 f4 de ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001b1a3:	83 c4 10             	add    esp,0x10
c001b1a6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001b1ab:	75 10                	jne    c001b1bd <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001b1ad:	83 ec 0c             	sub    esp,0xc
c001b1b0:	68 b8 90 02 c0       	push   0xc00290b8
c001b1b5:	e8 dd de ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	31 d2                	xor    edx,edx
c001b1bf:	50                   	push   eax
c001b1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c4:	52                   	push   edx
c001b1c5:	50                   	push   eax
c001b1c6:	53                   	push   ebx
c001b1c7:	e8 b8 7a ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b1cc:	5a                   	pop    edx
c001b1cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b1d1:	e8 ea 42 ff ff       	call   c000f4c0 <malloc>
c001b1d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b1de:	31 c9                	xor    ecx,ecx
c001b1e0:	5e                   	pop    esi
c001b1e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1e3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001b1e7:	55                   	push   ebp
c001b1e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1ec:	51                   	push   ecx
c001b1ed:	52                   	push   edx
c001b1ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b1f2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001b1f6:	53                   	push   ebx
c001b1f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b1fa:	83 c4 14             	add    esp,0x14
c001b1fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b201:	e8 ba 42 ff ff       	call   c000f4c0 <malloc>
c001b206:	89 c6                	mov    esi,eax
c001b208:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b20a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b20d:	56                   	push   esi
c001b20e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b212:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b216:	51                   	push   ecx
c001b217:	52                   	push   edx
c001b218:	53                   	push   ebx
c001b219:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b21c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b220:	8b 15 80 c5 02 c0    	mov    edx,DWORD PTR ds:0xc002c580
c001b226:	83 c4 1c             	add    esp,0x1c
c001b229:	c1 e8 04             	shr    eax,0x4
c001b22c:	89 04 95 00 c4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3c00],eax
c001b233:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b237:	31 d2                	xor    edx,edx
c001b239:	52                   	push   edx
c001b23a:	50                   	push   eax
c001b23b:	53                   	push   ebx
c001b23c:	e8 43 7a ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b241:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b243:	31 d2                	xor    edx,edx
c001b245:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b248:	56                   	push   esi
c001b249:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b24d:	52                   	push   edx
c001b24e:	50                   	push   eax
c001b24f:	53                   	push   ebx
c001b250:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b253:	83 c4 14             	add    esp,0x14
c001b256:	53                   	push   ebx
c001b257:	e8 c8 79 ff ff       	call   c0012c24 <File::close()>
c001b25c:	5d                   	pop    ebp
c001b25d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b261:	e8 6a 42 ff ff       	call   c000f4d0 <free>
c001b266:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b269:	e8 62 42 ff ff       	call   c000f4d0 <free>
c001b26e:	a1 80 c5 02 c0       	mov    eax,ds:0xc002c580
c001b273:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b277:	8d 50 01             	lea    edx,[eax+0x1]
c001b27a:	89 0c 85 00 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b00],ecx
c001b281:	89 15 80 c5 02 c0    	mov    DWORD PTR ds:0xc002c580,edx
c001b287:	89 34 85 80 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b80],esi
c001b28e:	83 c4 10             	add    esp,0x10
c001b291:	b2 01                	mov    dl,0x1
c001b293:	83 c4 5c             	add    esp,0x5c
c001b296:	88 d0                	mov    al,dl
c001b298:	5b                   	pop    ebx
c001b299:	5e                   	pop    esi
c001b29a:	5f                   	pop    edi
c001b29b:	5d                   	pop    ebp
c001b29c:	c3                   	ret    

c001b29d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001b29d:	55                   	push   ebp
c001b29e:	57                   	push   edi
c001b29f:	56                   	push   esi
c001b2a0:	53                   	push   ebx
c001b2a1:	81 ec 68 03 00 00    	sub    esp,0x368
c001b2a7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001b2ae:	8b 1d d4 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c5d4
c001b2b4:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b2b8:	68 14 01 00 00       	push   0x114
c001b2bd:	e8 fe 41 ff ff       	call   c000f4c0 <malloc>
c001b2c2:	83 c4 0c             	add    esp,0xc
c001b2c5:	89 c5                	mov    ebp,eax
c001b2c7:	53                   	push   ebx
c001b2c8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001b2cf:	50                   	push   eax
c001b2d0:	e8 8d 78 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001b2d5:	58                   	pop    eax
c001b2d6:	5a                   	pop    edx
c001b2d7:	6a 01                	push   0x1
c001b2d9:	55                   	push   ebp
c001b2da:	e8 e7 78 ff ff       	call   c0012bc6 <File::open(FileOpenMode)>
c001b2df:	83 c4 10             	add    esp,0x10
c001b2e2:	85 c0                	test   eax,eax
c001b2e4:	0f 85 f2 06 00 00    	jne    c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b2ea:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b2f2:	83 ec 0c             	sub    esp,0xc
c001b2f5:	6a 34                	push   0x34
c001b2f7:	e8 c4 41 ff ff       	call   c000f4c0 <malloc>
c001b2fc:	89 c7                	mov    edi,eax
c001b2fe:	58                   	pop    eax
c001b2ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b302:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b306:	53                   	push   ebx
c001b307:	57                   	push   edi
c001b308:	6a 00                	push   0x0
c001b30a:	6a 34                	push   0x34
c001b30c:	55                   	push   ebp
c001b30d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b310:	83 c4 20             	add    esp,0x20
c001b313:	85 c0                	test   eax,eax
c001b315:	0f 85 c1 06 00 00    	jne    c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b31b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b321:	0f 85 b5 06 00 00    	jne    c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b327:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b32a:	85 c0                	test   eax,eax
c001b32c:	0f 84 aa 06 00 00    	je     c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b332:	31 d2                	xor    edx,edx
c001b334:	56                   	push   esi
c001b335:	52                   	push   edx
c001b336:	50                   	push   eax
c001b337:	55                   	push   ebp
c001b338:	e8 47 79 ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b33d:	83 c4 10             	add    esp,0x10
c001b340:	85 c0                	test   eax,eax
c001b342:	0f 85 94 06 00 00    	jne    c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b348:	83 ec 0c             	sub    esp,0xc
c001b34b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001b34e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b352:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b356:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b35a:	0f af c2             	imul   eax,edx
c001b35d:	50                   	push   eax
c001b35e:	e8 5d 41 ff ff       	call   c000f4c0 <malloc>
c001b363:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b366:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b36a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b371:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b375:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b379:	0f af c2             	imul   eax,edx
c001b37c:	99                   	cdq    
c001b37d:	52                   	push   edx
c001b37e:	50                   	push   eax
c001b37f:	55                   	push   ebp
c001b380:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b383:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001b386:	83 c4 20             	add    esp,0x20
c001b389:	85 c0                	test   eax,eax
c001b38b:	0f 84 4b 06 00 00    	je     c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b391:	31 d2                	xor    edx,edx
c001b393:	51                   	push   ecx
c001b394:	52                   	push   edx
c001b395:	50                   	push   eax
c001b396:	55                   	push   ebp
c001b397:	e8 e8 78 ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b39c:	83 c4 10             	add    esp,0x10
c001b39f:	85 c0                	test   eax,eax
c001b3a1:	0f 85 35 06 00 00    	jne    c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3a7:	83 ec 0c             	sub    esp,0xc
c001b3aa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b3ae:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b3b2:	31 f6                	xor    esi,esi
c001b3b4:	0f af c2             	imul   eax,edx
c001b3b7:	50                   	push   eax
c001b3b8:	e8 03 41 ff ff       	call   c000f4c0 <malloc>
c001b3bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b3c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b3c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3cb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b3cf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b3d3:	0f af c2             	imul   eax,edx
c001b3d6:	99                   	cdq    
c001b3d7:	52                   	push   edx
c001b3d8:	50                   	push   eax
c001b3d9:	55                   	push   ebp
c001b3da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b3dd:	83 c4 20             	add    esp,0x20
c001b3e0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001b3e4:	0f 86 8a 00 00 00    	jbe    c001b474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001b3ea:	0f b7 de             	movzx  ebx,si
c001b3ed:	c1 e3 05             	shl    ebx,0x5
c001b3f0:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b3f4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b3f7:	75 75                	jne    c001b46e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001b3f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b3fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b400:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b407:	52                   	push   edx
c001b408:	31 d2                	xor    edx,edx
c001b40a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b40d:	52                   	push   edx
c001b40e:	50                   	push   eax
c001b40f:	55                   	push   ebp
c001b410:	e8 6f 78 ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b415:	83 c4 10             	add    esp,0x10
c001b418:	85 c0                	test   eax,eax
c001b41a:	0f 85 bc 05 00 00    	jne    c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b420:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b427:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b42a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001b42e:	31 d2                	xor    edx,edx
c001b430:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001b434:	83 ec 0c             	sub    esp,0xc
c001b437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b43b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b442:	50                   	push   eax
c001b443:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b44b:	52                   	push   edx
c001b44c:	50                   	push   eax
c001b44d:	55                   	push   ebp
c001b44e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b451:	83 c4 1c             	add    esp,0x1c
c001b454:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b457:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001b45a:	50                   	push   eax
c001b45b:	6a 00                	push   0x0
c001b45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b461:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b465:	50                   	push   eax
c001b466:	e8 10 52 fe ff       	call   c000067b <memset>
c001b46b:	83 c4 10             	add    esp,0x10
c001b46e:	46                   	inc    esi
c001b46f:	e9 6c ff ff ff       	jmp    c001b3e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001b474:	31 db                	xor    ebx,ebx
c001b476:	50                   	push   eax
c001b477:	68 00 01 00 00       	push   0x100
c001b47c:	6a 00                	push   0x0
c001b47e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b482:	50                   	push   eax
c001b483:	e8 f3 51 fe ff       	call   c000067b <memset>
c001b488:	83 c4 0c             	add    esp,0xc
c001b48b:	68 00 01 00 00       	push   0x100
c001b490:	6a 00                	push   0x0
c001b492:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001b499:	50                   	push   eax
c001b49a:	e8 dc 51 fe ff       	call   c000067b <memset>
c001b49f:	83 c4 10             	add    esp,0x10
c001b4a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b4aa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b4b2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b4ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b4c2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b4ca:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001b4ce:	0f 86 30 01 00 00    	jbe    c001b604 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001b4d4:	0f b7 f3             	movzx  esi,bx
c001b4d7:	6b f6 28             	imul   esi,esi,0x28
c001b4da:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001b4de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b4e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4e5:	50                   	push   eax
c001b4e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b4ea:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001b4ee:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4f0:	6b d2 28             	imul   edx,edx,0x28
c001b4f3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001b4f7:	31 d2                	xor    edx,edx
c001b4f9:	52                   	push   edx
c001b4fa:	50                   	push   eax
c001b4fb:	55                   	push   ebp
c001b4fc:	e8 83 77 ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b501:	83 c4 0c             	add    esp,0xc
c001b504:	6a 20                	push   0x20
c001b506:	6a 00                	push   0x0
c001b508:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b50f:	51                   	push   ecx
c001b510:	e8 66 51 fe ff       	call   c000067b <memset>
c001b515:	58                   	pop    eax
c001b516:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b519:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b51d:	52                   	push   edx
c001b51e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001b525:	51                   	push   ecx
c001b526:	6a 00                	push   0x0
c001b528:	6a 1f                	push   0x1f
c001b52a:	55                   	push   ebp
c001b52b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b52e:	83 c4 1c             	add    esp,0x1c
c001b531:	6a 09                	push   0x9
c001b533:	68 d2 90 02 c0       	push   0xc00290d2
c001b538:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b53f:	51                   	push   ecx
c001b540:	e8 9d 50 fe ff       	call   c00005e2 <memcmp>
c001b545:	83 c4 10             	add    esp,0x10
c001b548:	85 c0                	test   eax,eax
c001b54a:	75 21                	jne    c001b56d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001b54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b550:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b558:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b55c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b55f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b566:	89 c8                	mov    eax,ecx
c001b568:	40                   	inc    eax
c001b569:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b56d:	50                   	push   eax
c001b56e:	6a 09                	push   0x9
c001b570:	68 dc 90 02 c0       	push   0xc00290dc
c001b575:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b57c:	50                   	push   eax
c001b57d:	e8 60 50 fe ff       	call   c00005e2 <memcmp>
c001b582:	83 c4 10             	add    esp,0x10
c001b585:	85 c0                	test   eax,eax
c001b587:	75 21                	jne    c001b5aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001b589:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b58d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b591:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b595:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b599:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b59c:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b5a3:	89 c8                	mov    eax,ecx
c001b5a5:	40                   	inc    eax
c001b5a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b5aa:	50                   	push   eax
c001b5ab:	50                   	push   eax
c001b5ac:	68 a8 90 02 c0       	push   0xc00290a8
c001b5b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b5b8:	50                   	push   eax
c001b5b9:	e8 ad 51 fe ff       	call   c000076b <strcmp>
c001b5be:	83 c4 10             	add    esp,0x10
c001b5c1:	85 c0                	test   eax,eax
c001b5c3:	75 0f                	jne    c001b5d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001b5c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b5c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b5cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5d4:	50                   	push   eax
c001b5d5:	50                   	push   eax
c001b5d6:	68 b0 90 02 c0       	push   0xc00290b0
c001b5db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b5e2:	50                   	push   eax
c001b5e3:	e8 83 51 fe ff       	call   c000076b <strcmp>
c001b5e8:	83 c4 10             	add    esp,0x10
c001b5eb:	85 c0                	test   eax,eax
c001b5ed:	75 0f                	jne    c001b5fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001b5ef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b5f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b5f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b5fe:	43                   	inc    ebx
c001b5ff:	e9 c6 fe ff ff       	jmp    c001b4ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001b604:	31 d2                	xor    edx,edx
c001b606:	50                   	push   eax
c001b607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b60b:	52                   	push   edx
c001b60c:	50                   	push   eax
c001b60d:	55                   	push   ebp
c001b60e:	e8 71 76 ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b613:	5a                   	pop    edx
c001b614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b618:	e8 a3 3e ff ff       	call   c000f4c0 <malloc>
c001b61d:	31 d2                	xor    edx,edx
c001b61f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001b623:	59                   	pop    ecx
c001b624:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b627:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b62b:	53                   	push   ebx
c001b62c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b630:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b634:	52                   	push   edx
c001b635:	50                   	push   eax
c001b636:	55                   	push   ebp
c001b637:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b63a:	83 c4 14             	add    esp,0x14
c001b63d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b641:	e8 7a 3e ff ff       	call   c000f4c0 <malloc>
c001b646:	31 d2                	xor    edx,edx
c001b648:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b64c:	83 c4 0c             	add    esp,0xc
c001b64f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b653:	52                   	push   edx
c001b654:	50                   	push   eax
c001b655:	55                   	push   ebp
c001b656:	e8 29 76 ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b65b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b65e:	31 d2                	xor    edx,edx
c001b660:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b663:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b667:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b66b:	52                   	push   edx
c001b66c:	50                   	push   eax
c001b66d:	55                   	push   ebp
c001b66e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b671:	83 c4 20             	add    esp,0x20
c001b674:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b67c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b680:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b684:	0f 84 56 03 00 00    	je     c001b9e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001b68a:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b691:	31 d2                	xor    edx,edx
c001b693:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b697:	c1 e8 03             	shr    eax,0x3
c001b69a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b69e:	50                   	push   eax
c001b69f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6a3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b6a7:	52                   	push   edx
c001b6a8:	50                   	push   eax
c001b6a9:	55                   	push   ebp
c001b6aa:	e8 d5 75 ff ff       	call   c0012c84 <File::seek(unsigned long long)>
c001b6af:	58                   	pop    eax
c001b6b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6b4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b6bb:	e8 00 3e ff ff       	call   c000f4c0 <malloc>
c001b6c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b6c3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6c7:	31 d2                	xor    edx,edx
c001b6c9:	58                   	pop    eax
c001b6ca:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b6ce:	50                   	push   eax
c001b6cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b6d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b6d7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b6de:	52                   	push   edx
c001b6df:	50                   	push   eax
c001b6e0:	55                   	push   ebp
c001b6e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b6e4:	83 c4 20             	add    esp,0x20
c001b6e7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b6ef:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b6f3:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b6f7:	0f 8d c7 02 00 00    	jge    c001b9c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001b6fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b701:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b705:	31 db                	xor    ebx,ebx
c001b707:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b70a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b70e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b712:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b716:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b71a:	c1 e8 08             	shr    eax,0x8
c001b71d:	89 c6                	mov    esi,eax
c001b71f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b723:	c1 e6 04             	shl    esi,0x4
c001b726:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b72a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b72d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b731:	85 c0                	test   eax,eax
c001b733:	0f 85 17 01 00 00    	jne    c001b850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b739:	83 ec 0c             	sub    esp,0xc
c001b73c:	b3 01                	mov    bl,0x1
c001b73e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b742:	03 06                	add    eax,DWORD PTR [esi]
c001b744:	50                   	push   eax
c001b745:	e8 48 f8 ff ff       	call   c001af92 <Thr::getAddressOfKernelSymbol(char const*)>
c001b74a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b74e:	83 c4 10             	add    esp,0x10
c001b751:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b756:	0f 85 f4 00 00 00    	jne    c001b850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b75c:	50                   	push   eax
c001b75d:	50                   	push   eax
c001b75e:	68 e6 90 02 c0       	push   0xc00290e6
c001b763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b767:	03 06                	add    eax,DWORD PTR [esi]
c001b769:	50                   	push   eax
c001b76a:	e8 fc 4f fe ff       	call   c000076b <strcmp>
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	85 c0                	test   eax,eax
c001b774:	75 0a                	jne    c001b780 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001b776:	b8 2c 3f 02 c0       	mov    eax,0xc0023f2c
c001b77b:	e9 ca 00 00 00       	jmp    c001b84a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b780:	50                   	push   eax
c001b781:	50                   	push   eax
c001b782:	68 f0 90 02 c0       	push   0xc00290f0
c001b787:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b78b:	03 06                	add    eax,DWORD PTR [esi]
c001b78d:	50                   	push   eax
c001b78e:	e8 d8 4f fe ff       	call   c000076b <strcmp>
c001b793:	83 c4 10             	add    esp,0x10
c001b796:	85 c0                	test   eax,eax
c001b798:	75 0a                	jne    c001b7a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001b79a:	b8 60 3c 02 c0       	mov    eax,0xc0023c60
c001b79f:	e9 a6 00 00 00       	jmp    c001b84a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b7a4:	53                   	push   ebx
c001b7a5:	53                   	push   ebx
c001b7a6:	68 f9 90 02 c0       	push   0xc00290f9
c001b7ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7af:	03 06                	add    eax,DWORD PTR [esi]
c001b7b1:	50                   	push   eax
c001b7b2:	e8 b4 4f fe ff       	call   c000076b <strcmp>
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	85 c0                	test   eax,eax
c001b7bc:	75 0a                	jne    c001b7c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001b7be:	b8 2c 40 02 c0       	mov    eax,0xc002402c
c001b7c3:	e9 82 00 00 00       	jmp    c001b84a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b7c8:	51                   	push   ecx
c001b7c9:	51                   	push   ecx
c001b7ca:	68 03 91 02 c0       	push   0xc0029103
c001b7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7d3:	03 06                	add    eax,DWORD PTR [esi]
c001b7d5:	50                   	push   eax
c001b7d6:	e8 90 4f fe ff       	call   c000076b <strcmp>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	85 c0                	test   eax,eax
c001b7e0:	74 63                	je     c001b845 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001b7e2:	50                   	push   eax
c001b7e3:	50                   	push   eax
c001b7e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7e8:	03 06                	add    eax,DWORD PTR [esi]
c001b7ea:	50                   	push   eax
c001b7eb:	68 0c 91 02 c0       	push   0xc002910c
c001b7f0:	e8 3e 6e ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001b7f5:	58                   	pop    eax
c001b7f6:	5a                   	pop    edx
c001b7f7:	68 26 91 02 c0       	push   0xc0029126
c001b7fc:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b803:	53                   	push   ebx
c001b804:	e8 11 4f fe ff       	call   c000071a <strcpy>
c001b809:	59                   	pop    ecx
c001b80a:	58                   	pop    eax
c001b80b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b80f:	03 06                	add    eax,DWORD PTR [esi]
c001b811:	50                   	push   eax
c001b812:	53                   	push   ebx
c001b813:	e8 b9 4f fe ff       	call   c00007d1 <strcat>
c001b818:	58                   	pop    eax
c001b819:	5a                   	pop    edx
c001b81a:	68 bc 91 02 c0       	push   0xc00291bc
c001b81f:	53                   	push   ebx
c001b820:	e8 ac 4f fe ff       	call   c00007d1 <strcat>
c001b825:	83 c4 10             	add    esp,0x10
c001b828:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b82d:	0f 84 4b 01 00 00    	je     c001b97e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b833:	83 ec 0c             	sub    esp,0xc
c001b836:	53                   	push   ebx
c001b837:	e8 5b d8 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001b83c:	83 c4 10             	add    esp,0x10
c001b83f:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b843:	eb 0b                	jmp    c001b850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b845:	b8 ac 3d 02 c0       	mov    eax,0xc0023dac
c001b84a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b84e:	b3 01                	mov    bl,0x1
c001b850:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b855:	0f 85 80 00 00 00    	jne    c001b8db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001b85b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b862:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b866:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b86a:	01 ce                	add    esi,ecx
c001b86c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b874:	8b 06                	mov    eax,DWORD PTR [esi]
c001b876:	0f 94 c2             	sete   dl
c001b879:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b881:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b886:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b88a:	84 db                	test   bl,bl
c001b88c:	74 31                	je     c001b8bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001b88e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b892:	01 c3                	add    ebx,eax
c001b894:	84 d2                	test   dl,dl
c001b896:	75 0a                	jne    c001b8a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001b898:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b89c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b8a0:	76 32                	jbe    c001b8d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b8a2:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b8a7:	0f 84 d1 00 00 00    	je     c001b97e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b8ad:	83 ec 0c             	sub    esp,0xc
c001b8b0:	68 3d 91 02 c0       	push   0xc002913d
c001b8b5:	e8 dd d7 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	eb 15                	jmp    c001b8d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b8bf:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b8c2:	84 d2                	test   dl,dl
c001b8c4:	75 0e                	jne    c001b8d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b8c6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b8ca:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b8ce:	77 04                	ja     c001b8d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b8d0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b8d4:	89 1e                	mov    DWORD PTR [esi],ebx
c001b8d6:	e9 e0 00 00 00       	jmp    c001b9bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b8db:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b8e0:	75 6e                	jne    c001b950 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001b8e2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b8e9:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b8ed:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b8f1:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b8f9:	74 17                	je     c001b912 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b8fb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b903:	74 0d                	je     c001b912 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b905:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b909:	83 e8 04             	sub    eax,0x4
c001b90c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b910:	76 17                	jbe    c001b929 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001b912:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b917:	74 65                	je     c001b97e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b919:	83 ec 0c             	sub    esp,0xc
c001b91c:	68 59 91 02 c0       	push   0xc0029159
c001b921:	e8 71 d7 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001b926:	83 c4 10             	add    esp,0x10
c001b929:	8b 16                	mov    edx,DWORD PTR [esi]
c001b92b:	84 db                	test   bl,bl
c001b92d:	74 13                	je     c001b942 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001b92f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b933:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b93a:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b93e:	01 d0                	add    eax,edx
c001b940:	eb 06                	jmp    c001b948 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b942:	89 d0                	mov    eax,edx
c001b944:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b948:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b94c:	89 06                	mov    DWORD PTR [esi],eax
c001b94e:	eb 6b                	jmp    c001b9bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b950:	50                   	push   eax
c001b951:	50                   	push   eax
c001b952:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b957:	50                   	push   eax
c001b958:	68 75 91 02 c0       	push   0xc0029175
c001b95d:	e8 d1 6c ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001b962:	83 c4 10             	add    esp,0x10
c001b965:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b96a:	74 12                	je     c001b97e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b96c:	83 ec 0c             	sub    esp,0xc
c001b96f:	68 80 91 02 c0       	push   0xc0029180
c001b974:	e8 1e d7 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001b979:	83 c4 10             	add    esp,0x10
c001b97c:	eb 3d                	jmp    c001b9bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b97e:	83 ec 0c             	sub    esp,0xc
c001b981:	55                   	push   ebp
c001b982:	e8 9d 72 ff ff       	call   c0012c24 <File::close()>
c001b987:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b98a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b98d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b990:	59                   	pop    ecx
c001b991:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b995:	e8 36 3b ff ff       	call   c000f4d0 <free>
c001b99a:	5b                   	pop    ebx
c001b99b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b99f:	e8 2c 3b ff ff       	call   c000f4d0 <free>
c001b9a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9a7:	e8 24 3b ff ff       	call   c000f4d0 <free>
c001b9ac:	5e                   	pop    esi
c001b9ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b9b1:	e8 1a 3b ff ff       	call   c000f4d0 <free>
c001b9b6:	83 c4 10             	add    esp,0x10
c001b9b9:	eb 21                	jmp    c001b9dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b9bb:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b9bf:	e9 2b fd ff ff       	jmp    c001b6ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001b9c4:	83 ec 0c             	sub    esp,0xc
c001b9c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9cb:	e8 00 3b ff ff       	call   c000f4d0 <free>
c001b9d0:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b9d4:	83 c4 10             	add    esp,0x10
c001b9d7:	e9 a0 fc ff ff       	jmp    c001b67c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001b9dc:	31 c0                	xor    eax,eax
c001b9de:	eb 33                	jmp    c001ba13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001b9e0:	83 ec 0c             	sub    esp,0xc
c001b9e3:	55                   	push   ebp
c001b9e4:	e8 3b 72 ff ff       	call   c0012c24 <File::close()>
c001b9e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b9ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b9ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b9f2:	58                   	pop    eax
c001b9f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b9f7:	e8 d4 3a ff ff       	call   c000f4d0 <free>
c001b9fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9ff:	e8 cc 3a ff ff       	call   c000f4d0 <free>
c001ba04:	5a                   	pop    edx
c001ba05:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ba09:	e8 c2 3a ff ff       	call   c000f4d0 <free>
c001ba0e:	83 c4 10             	add    esp,0x10
c001ba11:	b0 01                	mov    al,0x1
c001ba13:	81 c4 5c 03 00 00    	add    esp,0x35c
c001ba19:	5b                   	pop    ebx
c001ba1a:	5e                   	pop    esi
c001ba1b:	5f                   	pop    edi
c001ba1c:	5d                   	pop    ebp
c001ba1d:	c3                   	ret    

c001ba1e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001ba1e:	56                   	push   esi
c001ba1f:	31 d2                	xor    edx,edx
c001ba21:	53                   	push   ebx
c001ba22:	8b 1d e0 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bde0
c001ba28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba2c:	39 d3                	cmp    ebx,edx
c001ba2e:	7e 1b                	jle    c001ba4b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001ba30:	8b 04 95 00 c0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4000]
c001ba37:	39 c8                	cmp    eax,ecx
c001ba39:	77 0d                	ja     c001ba48 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001ba3b:	8b 34 95 00 be 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4200]
c001ba42:	01 c6                	add    esi,eax
c001ba44:	39 ce                	cmp    esi,ecx
c001ba46:	77 05                	ja     c001ba4d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001ba48:	42                   	inc    edx
c001ba49:	eb e1                	jmp    c001ba2c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001ba4b:	31 c0                	xor    eax,eax
c001ba4d:	5b                   	pop    ebx
c001ba4e:	5e                   	pop    esi
c001ba4f:	c3                   	ret    

c001ba50 <Thr::getDriverNameFromAddress(unsigned long)>:
c001ba50:	53                   	push   ebx
c001ba51:	31 c0                	xor    eax,eax
c001ba53:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba57:	8b 1d e0 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bde0
c001ba5d:	39 c3                	cmp    ebx,eax
c001ba5f:	7e 22                	jle    c001ba83 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001ba61:	8b 14 85 00 c0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4000]
c001ba68:	39 ca                	cmp    edx,ecx
c001ba6a:	77 14                	ja     c001ba80 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ba6c:	03 14 85 00 be 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4200]
c001ba73:	39 ca                	cmp    edx,ecx
c001ba75:	76 09                	jbe    c001ba80 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ba77:	8b 04 85 00 c2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3e00]
c001ba7e:	eb 05                	jmp    c001ba85 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ba80:	40                   	inc    eax
c001ba81:	eb da                	jmp    c001ba5d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ba83:	31 c0                	xor    eax,eax
c001ba85:	5b                   	pop    ebx
c001ba86:	c3                   	ret    

c001ba87 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ba87:	53                   	push   ebx
c001ba88:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ba8c:	53                   	push   ebx
c001ba8d:	e8 8c ff ff ff       	call   c001ba1e <Thr::getDriverBaseFromAddress(unsigned long)>
c001ba92:	5a                   	pop    edx
c001ba93:	31 d2                	xor    edx,edx
c001ba95:	85 c0                	test   eax,eax
c001ba97:	74 04                	je     c001ba9d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ba99:	89 da                	mov    edx,ebx
c001ba9b:	29 c2                	sub    edx,eax
c001ba9d:	89 d0                	mov    eax,edx
c001ba9f:	5b                   	pop    ebx
c001baa0:	c3                   	ret    

c001baa1 <Thr::loadDLL(char const*, bool)>:
c001baa1:	55                   	push   ebp
c001baa2:	57                   	push   edi
c001baa3:	56                   	push   esi
c001baa4:	53                   	push   ebx
c001baa5:	81 ec 34 01 00 00    	sub    esp,0x134
c001baab:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001bab2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001bab9:	56                   	push   esi
c001baba:	68 98 91 02 c0       	push   0xc0029198
c001babf:	e8 6f 6b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001bac4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001bacb:	e8 f0 39 ff ff       	call   c000f4c0 <malloc>
c001bad0:	83 c4 0c             	add    esp,0xc
c001bad3:	89 c3                	mov    ebx,eax
c001bad5:	ff 35 d4 c5 02 c0    	push   DWORD PTR ds:0xc002c5d4
c001badb:	56                   	push   esi
c001badc:	50                   	push   eax
c001badd:	e8 80 70 ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001bae2:	83 c4 10             	add    esp,0x10
c001bae5:	85 db                	test   ebx,ebx
c001bae7:	75 3c                	jne    c001bb25 <Thr::loadDLL(char const*, bool)+0x84>
c001bae9:	89 e8                	mov    eax,ebp
c001baeb:	84 c0                	test   al,al
c001baed:	0f 84 b0 01 00 00    	je     c001bca3 <Thr::loadDLL(char const*, bool)+0x202>
c001baf3:	50                   	push   eax
c001baf4:	50                   	push   eax
c001baf5:	68 a9 91 02 c0       	push   0xc00291a9
c001bafa:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001bafe:	57                   	push   edi
c001baff:	e8 16 4c fe ff       	call   c000071a <strcpy>
c001bb04:	58                   	pop    eax
c001bb05:	5a                   	pop    edx
c001bb06:	56                   	push   esi
c001bb07:	57                   	push   edi
c001bb08:	e8 c4 4c fe ff       	call   c00007d1 <strcat>
c001bb0d:	59                   	pop    ecx
c001bb0e:	58                   	pop    eax
c001bb0f:	68 bc 91 02 c0       	push   0xc00291bc
c001bb14:	57                   	push   edi
c001bb15:	e8 b7 4c fe ff       	call   c00007d1 <strcat>
c001bb1a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb1d:	e8 75 d5 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001bb22:	83 c4 10             	add    esp,0x10
c001bb25:	50                   	push   eax
c001bb26:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001bb2a:	50                   	push   eax
c001bb2b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bb2f:	50                   	push   eax
c001bb30:	53                   	push   ebx
c001bb31:	e8 3c 73 ff ff       	call   c0012e72 <File::stat(unsigned long long*, bool*)>
c001bb36:	83 c4 10             	add    esp,0x10
c001bb39:	85 db                	test   ebx,ebx
c001bb3b:	74 0c                	je     c001bb49 <Thr::loadDLL(char const*, bool)+0xa8>
c001bb3d:	83 ec 0c             	sub    esp,0xc
c001bb40:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb42:	53                   	push   ebx
c001bb43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb46:	83 c4 10             	add    esp,0x10
c001bb49:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001bb4e:	75 0a                	jne    c001bb5a <Thr::loadDLL(char const*, bool)+0xb9>
c001bb50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb54:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001bb58:	75 3c                	jne    c001bb96 <Thr::loadDLL(char const*, bool)+0xf5>
c001bb5a:	89 e8                	mov    eax,ebp
c001bb5c:	84 c0                	test   al,al
c001bb5e:	0f 84 3d 01 00 00    	je     c001bca1 <Thr::loadDLL(char const*, bool)+0x200>
c001bb64:	50                   	push   eax
c001bb65:	50                   	push   eax
c001bb66:	68 a9 91 02 c0       	push   0xc00291a9
c001bb6b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001bb6f:	53                   	push   ebx
c001bb70:	e8 a5 4b fe ff       	call   c000071a <strcpy>
c001bb75:	58                   	pop    eax
c001bb76:	5a                   	pop    edx
c001bb77:	56                   	push   esi
c001bb78:	53                   	push   ebx
c001bb79:	e8 53 4c fe ff       	call   c00007d1 <strcat>
c001bb7e:	59                   	pop    ecx
c001bb7f:	5f                   	pop    edi
c001bb80:	68 bc 91 02 c0       	push   0xc00291bc
c001bb85:	53                   	push   ebx
c001bb86:	e8 46 4c fe ff       	call   c00007d1 <strcat>
c001bb8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb8e:	e8 04 d5 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001bb93:	83 c4 10             	add    esp,0x10
c001bb96:	e8 38 5c ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c001bb9b:	51                   	push   ecx
c001bb9c:	6a 03                	push   0x3
c001bb9e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001bba2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001bba6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001bbac:	83 d3 00             	adc    ebx,0x0
c001bbaf:	89 ca                	mov    edx,ecx
c001bbb1:	89 d1                	mov    ecx,edx
c001bbb3:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001bbb7:	51                   	push   ecx
c001bbb8:	50                   	push   eax
c001bbb9:	e8 50 62 ff ff       	call   c0011e0e <VAS::allocatePages(int, int)>
c001bbbe:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbc1:	89 c3                	mov    ebx,eax
c001bbc3:	e8 d0 4a fe ff       	call   c0000698 <strlen>
c001bbc8:	8b 3d e0 bd 02 c0    	mov    edi,DWORD PTR ds:0xc002bde0
c001bbce:	40                   	inc    eax
c001bbcf:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbd2:	e8 e9 38 ff ff       	call   c000f4c0 <malloc>
c001bbd7:	89 04 bd 00 c2 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3e00],eax
c001bbde:	5f                   	pop    edi
c001bbdf:	58                   	pop    eax
c001bbe0:	a1 e0 bd 02 c0       	mov    eax,ds:0xc002bde0
c001bbe5:	56                   	push   esi
c001bbe6:	ff 34 85 00 c2 02 c0 	push   DWORD PTR [eax*4-0x3ffd3e00]
c001bbed:	e8 28 4b fe ff       	call   c000071a <strcpy>
c001bbf2:	a1 e0 bd 02 c0       	mov    eax,ds:0xc002bde0
c001bbf7:	8d 50 01             	lea    edx,[eax+0x1]
c001bbfa:	89 1c 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],ebx
c001bc01:	89 15 e0 bd 02 c0    	mov    DWORD PTR ds:0xc002bde0,edx
c001bc07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bc0b:	83 c4 0c             	add    esp,0xc
c001bc0e:	89 14 85 00 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4200],edx
c001bc15:	6a 01                	push   0x1
c001bc17:	53                   	push   ebx
c001bc18:	56                   	push   esi
c001bc19:	e8 7f f6 ff ff       	call   c001b29d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001bc1e:	83 c4 10             	add    esp,0x10
c001bc21:	89 c7                	mov    edi,eax
c001bc23:	fe c8                	dec    al
c001bc25:	74 16                	je     c001bc3d <Thr::loadDLL(char const*, bool)+0x19c>
c001bc27:	89 e8                	mov    eax,ebp
c001bc29:	84 c0                	test   al,al
c001bc2b:	74 10                	je     c001bc3d <Thr::loadDLL(char const*, bool)+0x19c>
c001bc2d:	83 ec 0c             	sub    esp,0xc
c001bc30:	68 be 91 02 c0       	push   0xc00291be
c001bc35:	e8 5d d4 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001bc3a:	83 c4 10             	add    esp,0x10
c001bc3d:	31 f6                	xor    esi,esi
c001bc3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bc47:	05 ff 0f 00 00       	add    eax,0xfff
c001bc4c:	83 d2 00             	adc    edx,0x0
c001bc4f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001bc53:	c1 ea 0c             	shr    edx,0xc
c001bc56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bc5e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001bc62:	ba 00 00 00 00       	mov    edx,0x0
c001bc67:	89 d0                	mov    eax,edx
c001bc69:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001bc6d:	73 2c                	jae    c001bc9b <Thr::loadDLL(char const*, bool)+0x1fa>
c001bc6f:	e8 5f 5b ff ff       	call   c00117d3 <Virt::getAKernelVAS()>
c001bc74:	89 f5                	mov    ebp,esi
c001bc76:	c1 e5 0c             	shl    ebp,0xc
c001bc79:	52                   	push   edx
c001bc7a:	01 dd                	add    ebp,ebx
c001bc7c:	52                   	push   edx
c001bc7d:	55                   	push   ebp
c001bc7e:	50                   	push   eax
c001bc7f:	e8 04 5d ff ff       	call   c0011988 <VAS::getPageTableEntry(unsigned long)>
c001bc84:	83 c4 10             	add    esp,0x10
c001bc87:	f6 00 60             	test   BYTE PTR [eax],0x60
c001bc8a:	75 0c                	jne    c001bc98 <Thr::loadDLL(char const*, bool)+0x1f7>
c001bc8c:	83 ec 0c             	sub    esp,0xc
c001bc8f:	55                   	push   ebp
c001bc90:	e8 4b 3d ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c001bc95:	83 c4 10             	add    esp,0x10
c001bc98:	46                   	inc    esi
c001bc99:	eb a4                	jmp    c001bc3f <Thr::loadDLL(char const*, bool)+0x19e>
c001bc9b:	89 f8                	mov    eax,edi
c001bc9d:	84 c0                	test   al,al
c001bc9f:	75 02                	jne    c001bca3 <Thr::loadDLL(char const*, bool)+0x202>
c001bca1:	31 db                	xor    ebx,ebx
c001bca3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bca9:	89 d8                	mov    eax,ebx
c001bcab:	5b                   	pop    ebx
c001bcac:	5e                   	pop    esi
c001bcad:	5f                   	pop    edi
c001bcae:	5d                   	pop    ebp
c001bcaf:	c3                   	ret    

c001bcb0 <Thr::executeDLL(unsigned long, void*)>:
c001bcb0:	56                   	push   esi
c001bcb1:	53                   	push   ebx
c001bcb2:	51                   	push   ecx
c001bcb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcb7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bcbb:	85 db                	test   ebx,ebx
c001bcbd:	75 10                	jne    c001bccf <Thr::executeDLL(unsigned long, void*)+0x1f>
c001bcbf:	83 ec 0c             	sub    esp,0xc
c001bcc2:	68 dd 91 02 c0       	push   0xc00291dd
c001bcc7:	e8 cb d3 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001bccc:	83 c4 10             	add    esp,0x10
c001bccf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001bcd3:	89 d8                	mov    eax,ebx
c001bcd5:	5a                   	pop    edx
c001bcd6:	5b                   	pop    ebx
c001bcd7:	5e                   	pop    esi
c001bcd8:	ff e0                	jmp    eax

c001bcda <changeTSS>:
c001bcda:	83 ec 14             	sub    esp,0x14
c001bcdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bce2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bce5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001bcea:	c1 e2 15             	shl    edx,0x15
c001bced:	29 d0                	sub    eax,edx
c001bcef:	50                   	push   eax
c001bcf0:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001bcf5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bcfb:	05 7c 11 00 00       	add    eax,0x117c
c001bd00:	50                   	push   eax
c001bd01:	e8 7c 52 ff ff       	call   c0010f82 <TSS::setESP(unsigned long)>
c001bd06:	83 c4 1c             	add    esp,0x1c
c001bd09:	c3                   	ret    

c001bd0a <Process::addArgs(char**)>:
c001bd0a:	57                   	push   edi
c001bd0b:	56                   	push   esi
c001bd0c:	53                   	push   ebx
c001bd0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd11:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bd15:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001bd1f:	85 ff                	test   edi,edi
c001bd21:	74 3d                	je     c001bd60 <Process::addArgs(char**)+0x56>
c001bd23:	8b 07                	mov    eax,DWORD PTR [edi]
c001bd25:	85 c0                	test   eax,eax
c001bd27:	74 37                	je     c001bd60 <Process::addArgs(char**)+0x56>
c001bd29:	31 db                	xor    ebx,ebx
c001bd2b:	83 ec 0c             	sub    esp,0xc
c001bd2e:	50                   	push   eax
c001bd2f:	e8 64 49 fe ff       	call   c0000698 <strlen>
c001bd34:	40                   	inc    eax
c001bd35:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd38:	e8 83 37 ff ff       	call   c000f4c0 <malloc>
c001bd3d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001bd44:	5a                   	pop    edx
c001bd45:	59                   	pop    ecx
c001bd46:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001bd49:	43                   	inc    ebx
c001bd4a:	50                   	push   eax
c001bd4b:	e8 ca 49 fe ff       	call   c000071a <strcpy>
c001bd50:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001bd56:	83 c4 10             	add    esp,0x10
c001bd59:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001bd5c:	85 c0                	test   eax,eax
c001bd5e:	75 cb                	jne    c001bd2b <Process::addArgs(char**)+0x21>
c001bd60:	5b                   	pop    ebx
c001bd61:	5e                   	pop    esi
c001bd62:	5f                   	pop    edi
c001bd63:	c3                   	ret    

c001bd64 <Process::Process(char const*, Process*, char**)>:
c001bd64:	56                   	push   esi
c001bd65:	53                   	push   ebx
c001bd66:	83 ec 14             	sub    esp,0x14
c001bd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd6d:	05 0c 02 00 00       	add    eax,0x20c
c001bd72:	bb 07 00 00 00       	mov    ebx,0x7
c001bd77:	89 c6                	mov    esi,eax
c001bd79:	85 db                	test   ebx,ebx
c001bd7b:	78 12                	js     c001bd8f <Process::Process(char const*, Process*, char**)+0x2b>
c001bd7d:	83 ec 0c             	sub    esp,0xc
c001bd80:	56                   	push   esi
c001bd81:	e8 5c a4 00 00       	call   c00261e2 <ThreadControlBlock::ThreadControlBlock()>
c001bd86:	83 c4 10             	add    esp,0x10
c001bd89:	83 c6 63             	add    esi,0x63
c001bd8c:	4b                   	dec    ebx
c001bd8d:	eb ea                	jmp    c001bd79 <Process::Process(char const*, Process*, char**)+0x15>
c001bd8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd93:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bd9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd9e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001bda7:	a1 64 a6 02 c0       	mov    eax,ds:0xc002a664
c001bdac:	8d 50 01             	lea    edx,[eax+0x1]
c001bdaf:	89 15 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,edx
c001bdb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bdb9:	89 02                	mov    DWORD PTR [edx],eax
c001bdbb:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001bdc3:	83 ec 0c             	sub    esp,0xc
c001bdc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bdca:	e8 f1 36 ff ff       	call   c000f4c0 <malloc>
c001bdcf:	83 c4 10             	add    esp,0x10
c001bdd2:	89 c3                	mov    ebx,eax
c001bdd4:	83 ec 08             	sub    esp,0x8
c001bdd7:	6a 00                	push   0x0
c001bdd9:	53                   	push   ebx
c001bdda:	e8 d7 63 ff ff       	call   c00121b6 <VAS::VAS(bool)>
c001bddf:	83 c4 10             	add    esp,0x10
c001bde2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bde6:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bdec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdf0:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bdfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be02:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001be08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be0c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001be12:	85 c0                	test   eax,eax
c001be14:	74 42                	je     c001be58 <Process::Process(char const*, Process*, char**)+0xf4>
c001be16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be1a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001be20:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001be26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be2a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001be30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be34:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001be3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001be40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be44:	05 0c 01 00 00       	add    eax,0x10c
c001be49:	83 ec 08             	sub    esp,0x8
c001be4c:	52                   	push   edx
c001be4d:	50                   	push   eax
c001be4e:	e8 c7 48 fe ff       	call   c000071a <strcpy>
c001be53:	83 c4 10             	add    esp,0x10
c001be56:	eb 63                	jmp    c001bebb <Process::Process(char const*, Process*, char**)+0x157>
c001be58:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001be60:	83 ec 0c             	sub    esp,0xc
c001be63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be67:	e8 54 36 ff ff       	call   c000f4c0 <malloc>
c001be6c:	83 c4 10             	add    esp,0x10
c001be6f:	89 c3                	mov    ebx,eax
c001be71:	83 ec 08             	sub    esp,0x8
c001be74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be78:	53                   	push   ebx
c001be79:	e8 02 4e ff ff       	call   c0010c80 <VgaText::VgaText(char const*)>
c001be7e:	83 c4 10             	add    esp,0x10
c001be81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be85:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001be8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be8f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001be95:	83 ec 0c             	sub    esp,0xc
c001be98:	50                   	push   eax
c001be99:	e8 e3 41 ff ff       	call   c0010081 <addToTerminalCycle(VgaText*)>
c001be9e:	83 c4 10             	add    esp,0x10
c001bea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bea5:	05 0c 01 00 00       	add    eax,0x10c
c001beaa:	83 ec 08             	sub    esp,0x8
c001bead:	68 07 92 02 c0       	push   0xc0029207
c001beb2:	50                   	push   eax
c001beb3:	e8 62 48 fe ff       	call   c000071a <strcpy>
c001beb8:	83 c4 10             	add    esp,0x10
c001bebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bebf:	83 c0 0c             	add    eax,0xc
c001bec2:	83 ec 08             	sub    esp,0x8
c001bec5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bec9:	50                   	push   eax
c001beca:	e8 4b 48 fe ff       	call   c000071a <strcpy>
c001becf:	83 c4 10             	add    esp,0x10
c001bed2:	83 ec 08             	sub    esp,0x8
c001bed5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bedd:	e8 28 fe ff ff       	call   c001bd0a <Process::addArgs(char**)>
c001bee2:	83 c4 10             	add    esp,0x10
c001bee5:	83 ec 08             	sub    esp,0x8
c001bee8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001beec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bef0:	e8 74 ee ff ff       	call   c001ad69 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001bef5:	83 c4 10             	add    esp,0x10
c001bef8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001befc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bf00:	83 f0 01             	xor    eax,0x1
c001bf03:	88 c2                	mov    dl,al
c001bf05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf09:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001bf0f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001bf14:	83 ec 08             	sub    esp,0x8
c001bf17:	50                   	push   eax
c001bf18:	68 04 93 02 c0       	push   0xc0029304
c001bf1d:	e8 11 67 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001bf22:	83 c4 10             	add    esp,0x10
c001bf25:	90                   	nop
c001bf26:	83 c4 14             	add    esp,0x14
c001bf29:	5b                   	pop    ebx
c001bf2a:	5e                   	pop    esi
c001bf2b:	c3                   	ret    

c001bf2c <Process::Process(bool, char const*, Process*, char**)>:
c001bf2c:	56                   	push   esi
c001bf2d:	53                   	push   ebx
c001bf2e:	83 ec 24             	sub    esp,0x24
c001bf31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bf35:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf3d:	05 0c 02 00 00       	add    eax,0x20c
c001bf42:	bb 07 00 00 00       	mov    ebx,0x7
c001bf47:	89 c6                	mov    esi,eax
c001bf49:	85 db                	test   ebx,ebx
c001bf4b:	78 12                	js     c001bf5f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001bf4d:	83 ec 0c             	sub    esp,0xc
c001bf50:	56                   	push   esi
c001bf51:	e8 8c a2 00 00       	call   c00261e2 <ThreadControlBlock::ThreadControlBlock()>
c001bf56:	83 c4 10             	add    esp,0x10
c001bf59:	83 c6 63             	add    esi,0x63
c001bf5c:	4b                   	dec    ebx
c001bf5d:	eb ea                	jmp    c001bf49 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001bf5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf63:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bf6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf6e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001bf77:	a1 64 a6 02 c0       	mov    eax,ds:0xc002a664
c001bf7c:	8d 50 01             	lea    edx,[eax+0x1]
c001bf7f:	89 15 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,edx
c001bf85:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf89:	89 02                	mov    DWORD PTR [edx],eax
c001bf8b:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001bf93:	83 ec 0c             	sub    esp,0xc
c001bf96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bf9a:	e8 21 35 ff ff       	call   c000f4c0 <malloc>
c001bf9f:	83 c4 10             	add    esp,0x10
c001bfa2:	89 c3                	mov    ebx,eax
c001bfa4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bfa9:	83 ec 08             	sub    esp,0x8
c001bfac:	50                   	push   eax
c001bfad:	53                   	push   ebx
c001bfae:	e8 03 62 ff ff       	call   c00121b6 <VAS::VAS(bool)>
c001bfb3:	83 c4 10             	add    esp,0x10
c001bfb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfba:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bfc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfc4:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bfce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfd2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bfd6:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bfdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfe0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bfe6:	85 c0                	test   eax,eax
c001bfe8:	74 42                	je     c001c02c <Process::Process(bool, char const*, Process*, char**)+0x100>
c001bfea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfee:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bff4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bffa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bffe:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c008:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c00e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c014:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c018:	05 0c 01 00 00       	add    eax,0x10c
c001c01d:	83 ec 08             	sub    esp,0x8
c001c020:	52                   	push   edx
c001c021:	50                   	push   eax
c001c022:	e8 f3 46 fe ff       	call   c000071a <strcpy>
c001c027:	83 c4 10             	add    esp,0x10
c001c02a:	eb 63                	jmp    c001c08f <Process::Process(bool, char const*, Process*, char**)+0x163>
c001c02c:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001c034:	83 ec 0c             	sub    esp,0xc
c001c037:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c03b:	e8 80 34 ff ff       	call   c000f4c0 <malloc>
c001c040:	83 c4 10             	add    esp,0x10
c001c043:	89 c3                	mov    ebx,eax
c001c045:	83 ec 08             	sub    esp,0x8
c001c048:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c04c:	53                   	push   ebx
c001c04d:	e8 2e 4c ff ff       	call   c0010c80 <VgaText::VgaText(char const*)>
c001c052:	83 c4 10             	add    esp,0x10
c001c055:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c059:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c05f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c063:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c069:	83 ec 0c             	sub    esp,0xc
c001c06c:	50                   	push   eax
c001c06d:	e8 0f 40 ff ff       	call   c0010081 <addToTerminalCycle(VgaText*)>
c001c072:	83 c4 10             	add    esp,0x10
c001c075:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c079:	05 0c 01 00 00       	add    eax,0x10c
c001c07e:	83 ec 08             	sub    esp,0x8
c001c081:	68 07 92 02 c0       	push   0xc0029207
c001c086:	50                   	push   eax
c001c087:	e8 8e 46 fe ff       	call   c000071a <strcpy>
c001c08c:	83 c4 10             	add    esp,0x10
c001c08f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c093:	83 c0 0c             	add    eax,0xc
c001c096:	83 ec 08             	sub    esp,0x8
c001c099:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c09d:	50                   	push   eax
c001c09e:	e8 77 46 fe ff       	call   c000071a <strcpy>
c001c0a3:	83 c4 10             	add    esp,0x10
c001c0a6:	83 ec 08             	sub    esp,0x8
c001c0a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c0ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0b1:	e8 54 fc ff ff       	call   c001bd0a <Process::addArgs(char**)>
c001c0b6:	83 c4 10             	add    esp,0x10
c001c0b9:	90                   	nop
c001c0ba:	83 c4 24             	add    esp,0x24
c001c0bd:	5b                   	pop    ebx
c001c0be:	5e                   	pop    esi
c001c0bf:	c3                   	ret    

c001c0c0 <disableIRQs()>:
c001c0c0:	fa                   	cli    
c001c0c1:	ff 05 ac c5 02 c0    	inc    DWORD PTR ds:0xc002c5ac
c001c0c7:	c3                   	ret    

c001c0c8 <getIRQNestingLevel()>:
c001c0c8:	a1 ac c5 02 c0       	mov    eax,ds:0xc002c5ac
c001c0cd:	c3                   	ret    

c001c0ce <enableIRQs()>:
c001c0ce:	a1 ac c5 02 c0       	mov    eax,ds:0xc002c5ac
c001c0d3:	48                   	dec    eax
c001c0d4:	a3 ac c5 02 c0       	mov    ds:0xc002c5ac,eax
c001c0d9:	75 01                	jne    c001c0dc <enableIRQs()+0xe>
c001c0db:	fb                   	sti    
c001c0dc:	c3                   	ret    

c001c0dd <lockScheduler()>:
c001c0dd:	eb e1                	jmp    c001c0c0 <disableIRQs()>

c001c0df <unlockScheduler()>:
c001c0df:	eb ed                	jmp    c001c0ce <enableIRQs()>

c001c0e1 <userModeEntryPoint(void*)>:
c001c0e1:	83 ec 0c             	sub    esp,0xc
c001c0e4:	e8 f6 ff ff ff       	call   c001c0df <unlockScheduler()>
c001c0e9:	fb                   	sti    
c001c0ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0f2:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001c0f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0fc:	83 c4 0c             	add    esp,0xc
c001c0ff:	e9 db 41 fe ff       	jmp    c00002df <goToUsermode>

c001c104 <lockStuff()>:
c001c104:	e8 b7 ff ff ff       	call   c001c0c0 <disableIRQs()>
c001c109:	ff 05 a8 c5 02 c0    	inc    DWORD PTR ds:0xc002c5a8
c001c10f:	c3                   	ret    

c001c110 <taskStartupFunction>:
c001c110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c115:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001c118:	c3                   	ret    

c001c119 <updateTimeUsed()>:
c001c119:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c001c11e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c124:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001c12b:	74 50                	je     c001c17d <updateTimeUsed()+0x64>
c001c12d:	57                   	push   edi
c001c12e:	56                   	push   esi
c001c12f:	53                   	push   ebx
c001c130:	0f 31                	rdtsc  
c001c132:	89 c1                	mov    ecx,eax
c001c134:	a3 e8 c5 02 c0       	mov    ds:0xc002c5e8,eax
c001c139:	2b 0d d8 c5 02 c0    	sub    ecx,DWORD PTR ds:0xc002c5d8
c001c13f:	89 d3                	mov    ebx,edx
c001c141:	89 0d e0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5e0,ecx
c001c147:	1b 1d dc c5 02 c0    	sbb    ebx,DWORD PTR ds:0xc002c5dc
c001c14d:	a3 d8 c5 02 c0       	mov    ds:0xc002c5d8,eax
c001c152:	89 1d e4 c5 02 c0    	mov    DWORD PTR ds:0xc002c5e4,ebx
c001c158:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c15d:	89 15 ec c5 02 c0    	mov    DWORD PTR ds:0xc002c5ec,edx
c001c163:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001c166:	89 15 dc c5 02 c0    	mov    DWORD PTR ds:0xc002c5dc,edx
c001c16c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001c16f:	01 f1                	add    ecx,esi
c001c171:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001c174:	11 fb                	adc    ebx,edi
c001c176:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001c179:	5b                   	pop    ebx
c001c17a:	5e                   	pop    esi
c001c17b:	5f                   	pop    edi
c001c17c:	c3                   	ret    
c001c17d:	c3                   	ret    

c001c17e <switchToThread(ThreadControlBlock*)>:
c001c17e:	53                   	push   ebx
c001c17f:	83 ec 08             	sub    esp,0x8
c001c182:	a1 a8 c5 02 c0       	mov    eax,ds:0xc002c5a8
c001c187:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c18b:	85 c0                	test   eax,eax
c001c18d:	75 30                	jne    c001c1bf <switchToThread(ThreadControlBlock*)+0x41>
c001c18f:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001c192:	3c ff                	cmp    al,0xff
c001c194:	74 25                	je     c001c1bb <switchToThread(ThreadControlBlock*)+0x3d>
c001c196:	0f b6 d0             	movzx  edx,al
c001c199:	b8 84 03 00 00       	mov    eax,0x384
c001c19e:	29 d0                	sub    eax,edx
c001c1a0:	c1 e0 10             	shl    eax,0x10
c001c1a3:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001c1a6:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001c1a9:	e8 6b ff ff ff       	call   c001c119 <updateTimeUsed()>
c001c1ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c1b2:	83 c4 08             	add    esp,0x8
c001c1b5:	5b                   	pop    ebx
c001c1b6:	e9 5c 41 fe ff       	jmp    c0000317 <switchToThreadASM>
c001c1bb:	31 c0                	xor    eax,eax
c001c1bd:	eb e7                	jmp    c001c1a6 <switchToThread(ThreadControlBlock*)+0x28>
c001c1bf:	c7 05 a4 c5 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c5a4,0x1
c001c1c9:	83 c4 08             	add    esp,0x8
c001c1cc:	5b                   	pop    ebx
c001c1cd:	c3                   	ret    

c001c1ce <Semaphore::Semaphore(int)>:
c001c1ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1d6:	89 10                	mov    DWORD PTR [eax],edx
c001c1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1dc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c1e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c1f9:	90                   	nop
c001c1fa:	c3                   	ret    
c001c1fb:	90                   	nop

c001c1fc <Mutex::Mutex()>:
c001c1fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c200:	6a 01                	push   0x1
c001c202:	50                   	push   eax
c001c203:	e8 c6 ff ff ff       	call   c001c1ce <Semaphore::Semaphore(int)>
c001c208:	83 c4 08             	add    esp,0x8
c001c20b:	90                   	nop
c001c20c:	c3                   	ret    
c001c20d:	90                   	nop

c001c20e <Process::createThread(void (*)(void*), void*, int)>:
c001c20e:	55                   	push   ebp
c001c20f:	31 c9                	xor    ecx,ecx
c001c211:	57                   	push   edi
c001c212:	56                   	push   esi
c001c213:	53                   	push   ebx
c001c214:	83 ec 1c             	sub    esp,0x1c
c001c217:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c21b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001c222:	89 f2                	mov    edx,esi
c001c224:	0f b7 c2             	movzx  eax,dx
c001c227:	83 e2 01             	and    edx,0x1
c001c22a:	74 14                	je     c001c240 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001c22c:	d1 f8                	sar    eax,1
c001c22e:	41                   	inc    ecx
c001c22f:	89 c2                	mov    edx,eax
c001c231:	83 f9 10             	cmp    ecx,0x10
c001c234:	75 ee                	jne    c001c224 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001c236:	83 c4 1c             	add    esp,0x1c
c001c239:	31 c0                	xor    eax,eax
c001c23b:	5b                   	pop    ebx
c001c23c:	5e                   	pop    esi
c001c23d:	5f                   	pop    edi
c001c23e:	5d                   	pop    ebp
c001c23f:	c3                   	ret    
c001c240:	83 ec 08             	sub    esp,0x8
c001c243:	b8 01 00 00 00       	mov    eax,0x1
c001c248:	d3 e0                	shl    eax,cl
c001c24a:	09 c6                	or     esi,eax
c001c24c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c252:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001c259:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001c25c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c25f:	01 ce                	add    esi,ecx
c001c261:	89 f0                	mov    eax,esi
c001c263:	c1 e0 05             	shl    eax,0x5
c001c266:	01 c6                	add    esi,eax
c001c268:	8d 04 33             	lea    eax,[ebx+esi*1]
c001c26b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001c271:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001c277:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c27b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001c281:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001c287:	89 ca                	mov    edx,ecx
c001c289:	f7 da                	neg    edx
c001c28b:	c1 e2 15             	shl    edx,0x15
c001c28e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001c294:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001c29a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001c29e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001c2a8:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001c2ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c2b2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001c2b8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001c2c2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001c2cc:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001c2d3:	50                   	push   eax
c001c2d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2d8:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c2dd:	e8 8e 9d 00 00       	call   c0026070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c2e2:	83 c4 10             	add    esp,0x10
c001c2e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2e9:	83 c4 1c             	add    esp,0x1c
c001c2ec:	5b                   	pop    ebx
c001c2ed:	5e                   	pop    esi
c001c2ee:	5f                   	pop    edi
c001c2ef:	5d                   	pop    ebp
c001c2f0:	c3                   	ret    
c001c2f1:	90                   	nop

c001c2f2 <Process::createUserThread()>:
c001c2f2:	83 ec 0c             	sub    esp,0xc
c001c2f5:	68 80 00 00 00       	push   0x80
c001c2fa:	6a 00                	push   0x0
c001c2fc:	68 e1 c0 01 c0       	push   0xc001c0e1
c001c301:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c305:	e8 04 ff ff ff       	call   c001c20e <Process::createThread(void (*)(void*), void*, int)>
c001c30a:	83 c4 1c             	add    esp,0x1c
c001c30d:	c3                   	ret    

c001c30e <setupMultitasking(void (*)())>:
c001c30e:	56                   	push   esi
c001c30f:	53                   	push   ebx
c001c310:	53                   	push   ebx
c001c311:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c315:	eb 10                	jmp    c001c327 <setupMultitasking(void (*)())+0x19>
c001c317:	83 ec 0c             	sub    esp,0xc
c001c31a:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c31f:	e8 9e 9c 00 00       	call   c0025fc2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c324:	83 c4 10             	add    esp,0x10
c001c327:	83 ec 0c             	sub    esp,0xc
c001c32a:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c32f:	e8 72 9c 00 00       	call   c0025fa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c334:	83 c4 10             	add    esp,0x10
c001c337:	84 c0                	test   al,al
c001c339:	74 dc                	je     c001c317 <setupMultitasking(void (*)())+0x9>
c001c33b:	83 ec 0c             	sub    esp,0xc
c001c33e:	68 3b 07 00 00       	push   0x73b
c001c343:	e8 78 31 ff ff       	call   c000f4c0 <malloc>
c001c348:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c34f:	89 c3                	mov    ebx,eax
c001c351:	6a 00                	push   0x0
c001c353:	68 0b 92 02 c0       	push   0xc002920b
c001c358:	6a 01                	push   0x1
c001c35a:	50                   	push   eax
c001c35b:	e8 cc fb ff ff       	call   c001bf2c <Process::Process(bool, char const*, Process*, char**)>
c001c360:	83 c4 18             	add    esp,0x18
c001c363:	89 1d d4 c5 02 c0    	mov    DWORD PTR ds:0xc002c5d4,ebx
c001c369:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c36f:	68 2c 93 02 c0       	push   0xc002932c
c001c374:	e8 ba 62 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c379:	58                   	pop    eax
c001c37a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c380:	e8 70 44 ff ff       	call   c00107f5 <setActiveTerminal(VgaText*)>
c001c385:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c38d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c393:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c396:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c3a0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c3a6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c3ac:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c3b6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c3c0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c3ca:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c3d0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c3d6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c3e0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c3e6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c3f0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c3f6:	5a                   	pop    edx
c001c3f7:	59                   	pop    ecx
c001c3f8:	68 07 92 02 c0       	push   0xc0029207
c001c3fd:	50                   	push   eax
c001c3fe:	e8 17 43 fe ff       	call   c000071a <strcpy>
c001c403:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c40a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c40e:	83 c4 14             	add    esp,0x14
c001c411:	5b                   	pop    ebx
c001c412:	5e                   	pop    esi
c001c413:	e9 f1 3e fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001c418 <schedule()>:
c001c418:	a1 a8 c5 02 c0       	mov    eax,ds:0xc002c5a8
c001c41d:	85 c0                	test   eax,eax
c001c41f:	74 0b                	je     c001c42c <schedule()+0x14>
c001c421:	c7 05 a4 c5 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c5a4,0x1
c001c42b:	c3                   	ret    
c001c42c:	53                   	push   ebx
c001c42d:	83 ec 14             	sub    esp,0x14
c001c430:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c435:	e8 6c 9b 00 00       	call   c0025fa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c43a:	83 c4 10             	add    esp,0x10
c001c43d:	84 c0                	test   al,al
c001c43f:	75 38                	jne    c001c479 <schedule()+0x61>
c001c441:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c446:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c449:	4a                   	dec    edx
c001c44a:	74 32                	je     c001c47e <schedule()+0x66>
c001c44c:	83 ec 0c             	sub    esp,0xc
c001c44f:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c454:	e8 45 9b 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c459:	c7 04 24 c8 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5c8
c001c460:	89 c3                	mov    ebx,eax
c001c462:	e8 5b 9b 00 00       	call   c0025fc2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c467:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c46e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c471:	e8 08 fd ff ff       	call   c001c17e <switchToThread(ThreadControlBlock*)>
c001c476:	83 c4 10             	add    esp,0x10
c001c479:	83 c4 08             	add    esp,0x8
c001c47c:	5b                   	pop    ebx
c001c47d:	c3                   	ret    
c001c47e:	83 ec 08             	sub    esp,0x8
c001c481:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c488:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c48e:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c493:	e8 d8 9b 00 00       	call   c0026070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c498:	83 c4 10             	add    esp,0x10
c001c49b:	eb af                	jmp    c001c44c <schedule()+0x34>

c001c49d <unlockStuff()>:
c001c49d:	a1 a8 c5 02 c0       	mov    eax,ds:0xc002c5a8
c001c4a2:	48                   	dec    eax
c001c4a3:	a3 a8 c5 02 c0       	mov    ds:0xc002c5a8,eax
c001c4a8:	75 09                	jne    c001c4b3 <unlockStuff()+0x16>
c001c4aa:	a1 a4 c5 02 c0       	mov    eax,ds:0xc002c5a4
c001c4af:	85 c0                	test   eax,eax
c001c4b1:	75 05                	jne    c001c4b8 <unlockStuff()+0x1b>
c001c4b3:	e9 16 fc ff ff       	jmp    c001c0ce <enableIRQs()>
c001c4b8:	83 ec 0c             	sub    esp,0xc
c001c4bb:	c7 05 a4 c5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c5a4,0x0
c001c4c5:	e8 4e ff ff ff       	call   c001c418 <schedule()>
c001c4ca:	83 c4 0c             	add    esp,0xc
c001c4cd:	e9 fc fb ff ff       	jmp    c001c0ce <enableIRQs()>

c001c4d2 <Semaphore::tryAcquire()>:
c001c4d2:	83 ec 0c             	sub    esp,0xc
c001c4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d9:	e8 26 fc ff ff       	call   c001c104 <lockStuff()>
c001c4de:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c4e1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c4e3:	7c 0b                	jl     c001c4f0 <Semaphore::tryAcquire()+0x1e>
c001c4e5:	e8 b3 ff ff ff       	call   c001c49d <unlockStuff()>
c001c4ea:	31 c0                	xor    eax,eax
c001c4ec:	83 c4 0c             	add    esp,0xc
c001c4ef:	c3                   	ret    
c001c4f0:	42                   	inc    edx
c001c4f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c4f4:	e8 a4 ff ff ff       	call   c001c49d <unlockStuff()>
c001c4f9:	b0 01                	mov    al,0x1
c001c4fb:	83 c4 0c             	add    esp,0xc
c001c4fe:	c3                   	ret    
c001c4ff:	90                   	nop

c001c500 <Semaphore::assertLocked(char const*)>:
c001c500:	83 ec 0c             	sub    esp,0xc
c001c503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c507:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c50b:	e8 f4 fb ff ff       	call   c001c104 <lockStuff()>
c001c510:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c512:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001c515:	7c 05                	jl     c001c51c <Semaphore::assertLocked(char const*)+0x1c>
c001c517:	83 c4 0c             	add    esp,0xc
c001c51a:	eb 81                	jmp    c001c49d <unlockStuff()>
c001c51c:	83 ec 0c             	sub    esp,0xc
c001c51f:	52                   	push   edx
c001c520:	e8 72 cb ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001c525:	83 c4 10             	add    esp,0x10
c001c528:	83 c4 0c             	add    esp,0xc
c001c52b:	e9 6d ff ff ff       	jmp    c001c49d <unlockStuff()>

c001c530 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001c530:	83 ec 0c             	sub    esp,0xc
c001c533:	e8 90 fb ff ff       	call   c001c0c8 <getIRQNestingLevel()>
c001c538:	83 ec 08             	sub    esp,0x8
c001c53b:	50                   	push   eax
c001c53c:	68 60 93 02 c0       	push   0xc0029360
c001c541:	e8 ed 60 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c546:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c54a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c54f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c552:	e8 c1 fe ff ff       	call   c001c418 <schedule()>
c001c557:	e8 83 fb ff ff       	call   c001c0df <unlockScheduler()>
c001c55c:	e8 67 fb ff ff       	call   c001c0c8 <getIRQNestingLevel()>
c001c561:	5a                   	pop    edx
c001c562:	59                   	pop    ecx
c001c563:	50                   	push   eax
c001c564:	68 94 93 02 c0       	push   0xc0029394
c001c569:	e8 c5 60 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c56e:	83 c4 1c             	add    esp,0x1c
c001c571:	c3                   	ret    

c001c572 <blockTask(TaskState)>:
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c579:	e8 5f fb ff ff       	call   c001c0dd <lockScheduler()>
c001c57e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c583:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c586:	e8 8d fe ff ff       	call   c001c418 <schedule()>
c001c58b:	83 c4 0c             	add    esp,0xc
c001c58e:	e9 4c fb ff ff       	jmp    c001c0df <unlockScheduler()>

c001c593 <waitTask(int, int*, int)>:
c001c593:	83 ec 18             	sub    esp,0x18
c001c596:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c59b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c59f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001c5a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c5a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ab:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001c5ae:	6a 07                	push   0x7
c001c5b0:	e8 bd ff ff ff       	call   c001c572 <blockTask(TaskState)>
c001c5b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ba:	83 c4 10             	add    esp,0x10
c001c5bd:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001c5c0:	85 d2                	test   edx,edx
c001c5c2:	74 0a                	je     c001c5ce <waitTask(int, int*, int)+0x3b>
c001c5c4:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001c5c7:	89 02                	mov    DWORD PTR [edx],eax
c001c5c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ce:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001c5d1:	83 c4 0c             	add    esp,0xc
c001c5d4:	c3                   	ret    

c001c5d5 <nanoSleepUntil(unsigned long long)>:
c001c5d5:	83 ec 0c             	sub    esp,0xc
c001c5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5e0:	3b 05 30 b7 02 c0    	cmp    eax,DWORD PTR ds:0xc002b730
c001c5e6:	89 d1                	mov    ecx,edx
c001c5e8:	1b 0d 34 b7 02 c0    	sbb    ecx,DWORD PTR ds:0xc002b734
c001c5ee:	73 04                	jae    c001c5f4 <nanoSleepUntil(unsigned long long)+0x1f>
c001c5f0:	83 c4 0c             	add    esp,0xc
c001c5f3:	c3                   	ret    
c001c5f4:	e8 0b fb ff ff       	call   c001c104 <lockStuff()>
c001c5f9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c5ff:	83 ec 08             	sub    esp,0x8
c001c602:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001c605:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001c608:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c60e:	68 bc c5 02 c0       	push   0xc002c5bc
c001c613:	e8 58 9a 00 00       	call   c0026070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c618:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001c61f:	e8 4e ff ff ff       	call   c001c572 <blockTask(TaskState)>
c001c624:	83 c4 1c             	add    esp,0x1c
c001c627:	e9 71 fe ff ff       	jmp    c001c49d <unlockStuff()>

c001c62c <nanoSleep(unsigned long long)>:
c001c62c:	a1 30 b7 02 c0       	mov    eax,ds:0xc002b730
c001c631:	8b 15 34 b7 02 c0    	mov    edx,DWORD PTR ds:0xc002b734
c001c637:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001c63b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001c63f:	eb 94                	jmp    c001c5d5 <nanoSleepUntil(unsigned long long)>

c001c641 <sleep(unsigned long long)>:
c001c641:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001c649:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001c64e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001c652:	01 ca                	add    edx,ecx
c001c654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c658:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c65c:	eb ce                	jmp    c001c62c <nanoSleep(unsigned long long)>

c001c65e <Semaphore::acquire()>:
c001c65e:	83 ec 0c             	sub    esp,0xc
c001c661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c665:	e8 9a fa ff ff       	call   c001c104 <lockStuff()>
c001c66a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c66d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c66f:	7d 0c                	jge    c001c67d <Semaphore::acquire()+0x1f>
c001c671:	42                   	inc    edx
c001c672:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c675:	83 c4 0c             	add    esp,0xc
c001c678:	e9 20 fe ff ff       	jmp    c001c49d <unlockStuff()>
c001c67d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c683:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001c68a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c68d:	85 d2                	test   edx,edx
c001c68f:	74 2a                	je     c001c6bb <Semaphore::acquire()+0x5d>
c001c691:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c694:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c69a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001c69d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c6a3:	83 ec 0c             	sub    esp,0xc
c001c6a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6a9:	6a 05                	push   0x5
c001c6ab:	e8 c2 fe ff ff       	call   c001c572 <blockTask(TaskState)>
c001c6b0:	83 c4 10             	add    esp,0x10
c001c6b3:	83 c4 0c             	add    esp,0xc
c001c6b6:	e9 e2 fd ff ff       	jmp    c001c49d <unlockStuff()>
c001c6bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c6c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6c4:	eb d7                	jmp    c001c69d <Semaphore::acquire()+0x3f>

c001c6c6 <taskReturned>:
c001c6c6:	83 ec 18             	sub    esp,0x18
c001c6c9:	68 c8 93 02 c0       	push   0xc00293c8
c001c6ce:	e8 c4 c9 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001c6d3:	83 c4 10             	add    esp,0x10
c001c6d6:	83 ec 0c             	sub    esp,0xc
c001c6d9:	6a 02                	push   0x2
c001c6db:	e8 92 fe ff ff       	call   c001c572 <blockTask(TaskState)>
c001c6e0:	e8 f8 f9 ff ff       	call   c001c0dd <lockScheduler()>
c001c6e5:	e8 2e fd ff ff       	call   c001c418 <schedule()>
c001c6ea:	e8 f0 f9 ff ff       	call   c001c0df <unlockScheduler()>
c001c6ef:	83 c4 10             	add    esp,0x10
c001c6f2:	eb e2                	jmp    c001c6d6 <taskReturned+0x10>

c001c6f4 <unblockTask(ThreadControlBlock*)>:
c001c6f4:	53                   	push   ebx
c001c6f5:	83 ec 08             	sub    esp,0x8
c001c6f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6fc:	e8 dc f9 ff ff       	call   c001c0dd <lockScheduler()>
c001c701:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c704:	85 c0                	test   eax,eax
c001c706:	74 5c                	je     c001c764 <unblockTask(ThreadControlBlock*)+0x70>
c001c708:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c70b:	48                   	dec    eax
c001c70c:	74 31                	je     c001c73f <unblockTask(ThreadControlBlock*)+0x4b>
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c716:	e8 83 98 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c71b:	83 c4 10             	add    esp,0x10
c001c71e:	85 c0                	test   eax,eax
c001c720:	75 17                	jne    c001c739 <unblockTask(ThreadControlBlock*)+0x45>
c001c722:	eb 65                	jmp    c001c789 <unblockTask(ThreadControlBlock*)+0x95>
c001c724:	83 ec 08             	sub    esp,0x8
c001c727:	50                   	push   eax
c001c728:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c72d:	e8 46 9b 00 00       	call   c0026278 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c732:	83 c4 10             	add    esp,0x10
c001c735:	85 c0                	test   eax,eax
c001c737:	74 50                	je     c001c789 <unblockTask(ThreadControlBlock*)+0x95>
c001c739:	39 c3                	cmp    ebx,eax
c001c73b:	75 e7                	jne    c001c724 <unblockTask(ThreadControlBlock*)+0x30>
c001c73d:	eb 1c                	jmp    c001c75b <unblockTask(ThreadControlBlock*)+0x67>
c001c73f:	83 ec 0c             	sub    esp,0xc
c001c742:	68 b8 94 02 c0       	push   0xc00294b8
c001c747:	e8 e7 5e ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c74c:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c001c753:	e8 db 5e ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c758:	83 c4 10             	add    esp,0x10
c001c75b:	83 c4 08             	add    esp,0x8
c001c75e:	5b                   	pop    ebx
c001c75f:	e9 7b f9 ff ff       	jmp    c001c0df <unlockScheduler()>
c001c764:	83 ec 0c             	sub    esp,0xc
c001c767:	68 fc 93 02 c0       	push   0xc00293fc
c001c76c:	e8 c2 5e ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c771:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c001c778:	e8 b6 5e ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c77d:	83 c4 10             	add    esp,0x10
c001c780:	83 c4 08             	add    esp,0x8
c001c783:	5b                   	pop    ebx
c001c784:	e9 56 f9 ff ff       	jmp    c001c0df <unlockScheduler()>
c001c789:	83 ec 08             	sub    esp,0x8
c001c78c:	53                   	push   ebx
c001c78d:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c792:	e8 d9 98 00 00       	call   c0026070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c797:	83 c4 10             	add    esp,0x10
c001c79a:	83 c4 08             	add    esp,0x8
c001c79d:	5b                   	pop    ebx
c001c79e:	e9 3c f9 ff ff       	jmp    c001c0df <unlockScheduler()>

c001c7a3 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c7a3:	55                   	push   ebp
c001c7a4:	57                   	push   edi
c001c7a5:	56                   	push   esi
c001c7a6:	53                   	push   ebx
c001c7a7:	83 ec 1c             	sub    esp,0x1c
c001c7aa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c7ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c7b1:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c7b7:	85 c9                	test   ecx,ecx
c001c7b9:	7e 20                	jle    c001c7db <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c7bb:	31 f6                	xor    esi,esi
c001c7bd:	83 ec 0c             	sub    esp,0xc
c001c7c0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c7c7:	46                   	inc    esi
c001c7c8:	e8 03 2d ff ff       	call   c000f4d0 <free>
c001c7cd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c7d0:	83 c4 10             	add    esp,0x10
c001c7d3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c7d9:	7f e2                	jg     c001c7bd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c7db:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c7e5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c7ea:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c7ed:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c7f0:	d3 c0                	rol    eax,cl
c001c7f2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c7f9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c7fc:	89 f7                	mov    edi,esi
c001c7fe:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c806:	0f 85 4f 01 00 00    	jne    c001c95b <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c80c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c812:	85 c0                	test   eax,eax
c001c814:	0f 84 aa 00 00 00    	je     c001c8c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c81a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c81d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c821:	31 c9                	xor    ecx,ecx
c001c823:	eb 10                	jmp    c001c835 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c825:	41                   	inc    ecx
c001c826:	83 f9 10             	cmp    ecx,0x10
c001c829:	0f 84 95 00 00 00    	je     c001c8c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c82f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c835:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c83c:	d3 fa                	sar    edx,cl
c001c83e:	83 e2 01             	and    edx,0x1
c001c841:	74 e2                	je     c001c825 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c843:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c846:	01 ca                	add    edx,ecx
c001c848:	89 d5                	mov    ebp,edx
c001c84a:	c1 e5 05             	shl    ebp,0x5
c001c84d:	01 ea                	add    edx,ebp
c001c84f:	01 d0                	add    eax,edx
c001c851:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c857:	83 fd 07             	cmp    ebp,0x7
c001c85a:	75 c9                	jne    c001c825 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c85c:	05 40 02 00 00       	add    eax,0x240
c001c861:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c864:	83 fd ff             	cmp    ebp,0xffffffff
c001c867:	0f 8c 08 01 00 00    	jl     c001c975 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c86d:	0f 84 b9 01 00 00    	je     c001ca2c <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c873:	85 ed                	test   ebp,ebp
c001c875:	0f 84 a0 01 00 00    	je     c001ca1b <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c87b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c87d:	75 a6                	jne    c001c825 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c87f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c885:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c889:	01 d0                	add    eax,edx
c001c88b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c88f:	83 ec 0c             	sub    esp,0xc
c001c892:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c898:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c89b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c8a1:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c8a8:	50                   	push   eax
c001c8a9:	e8 46 fe ff ff       	call   c001c6f4 <unblockTask(ThreadControlBlock*)>
c001c8ae:	83 c4 10             	add    esp,0x10
c001c8b1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c8b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8b8:	89 f7                	mov    edi,esi
c001c8ba:	41                   	inc    ecx
c001c8bb:	83 f9 10             	cmp    ecx,0x10
c001c8be:	0f 85 6b ff ff ff    	jne    c001c82f <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c8c4:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c8ca:	85 c0                	test   eax,eax
c001c8cc:	74 5d                	je     c001c92b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c8ce:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c8d4:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c8da:	74 4f                	je     c001c92b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c8dc:	83 ec 0c             	sub    esp,0xc
c001c8df:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c8e4:	e8 b5 96 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c8e9:	c7 04 24 c8 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5c8
c001c8f0:	89 c7                	mov    edi,eax
c001c8f2:	e8 af 96 00 00       	call   c0025fa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c8f7:	83 c4 10             	add    esp,0x10
c001c8fa:	84 c0                	test   al,al
c001c8fc:	0f 84 e4 00 00 00    	je     c001c9e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c902:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c905:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c90b:	85 d2                	test   edx,edx
c001c90d:	74 0f                	je     c001c91e <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c90f:	83 ec 0c             	sub    esp,0xc
c001c912:	8b 02                	mov    eax,DWORD PTR [edx]
c001c914:	52                   	push   edx
c001c915:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c918:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c91b:	83 c4 10             	add    esp,0x10
c001c91e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c928:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c92b:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c931:	85 db                	test   ebx,ebx
c001c933:	74 16                	je     c001c94b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c935:	83 ec 0c             	sub    esp,0xc
c001c938:	53                   	push   ebx
c001c939:	e8 64 52 ff ff       	call   c0011ba2 <VAS::~VAS()>
c001c93e:	58                   	pop    eax
c001c93f:	5a                   	pop    edx
c001c940:	6a 10                	push   0x10
c001c942:	53                   	push   ebx
c001c943:	e8 0b 5c ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c001c948:	83 c4 10             	add    esp,0x10
c001c94b:	83 ec 0c             	sub    esp,0xc
c001c94e:	68 12 92 02 c0       	push   0xc0029212
c001c953:	e8 db 5c ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	83 ec 08             	sub    esp,0x8
c001c95e:	68 3b 07 00 00       	push   0x73b
c001c963:	68 20 92 02 c0       	push   0xc0029220
c001c968:	e8 c6 5c ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c96d:	83 c4 2c             	add    esp,0x2c
c001c970:	5b                   	pop    ebx
c001c971:	5e                   	pop    esi
c001c972:	5f                   	pop    edi
c001c973:	5d                   	pop    ebp
c001c974:	c3                   	ret    
c001c975:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c979:	83 ec 0c             	sub    esp,0xc
c001c97c:	68 fc 94 02 c0       	push   0xc00294fc
c001c981:	e8 11 c7 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001c986:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c989:	83 c4 10             	add    esp,0x10
c001c98c:	89 f7                	mov    edi,esi
c001c98e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c992:	e9 8e fe ff ff       	jmp    c001c825 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c997:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c99d:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c9a3:	75 1c                	jne    c001c9c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c9a5:	83 ec 0c             	sub    esp,0xc
c001c9a8:	68 64 95 02 c0       	push   0xc0029564
c001c9ad:	e8 81 5c ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001c9b2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c9b9:	e8 b4 fb ff ff       	call   c001c572 <blockTask(TaskState)>
c001c9be:	83 c4 10             	add    esp,0x10
c001c9c1:	83 ec 08             	sub    esp,0x8
c001c9c4:	56                   	push   esi
c001c9c5:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c9ca:	e8 a1 96 00 00       	call   c0026070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c9cf:	c7 04 24 c8 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5c8
c001c9d6:	e8 c3 95 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	39 f8                	cmp    eax,edi
c001c9e0:	0f 84 1c ff ff ff    	je     c001c902 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c9e6:	83 ec 0c             	sub    esp,0xc
c001c9e9:	68 c8 c5 02 c0       	push   0xc002c5c8
c001c9ee:	e8 ab 95 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c9f3:	c7 04 24 c8 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5c8
c001c9fa:	89 c6                	mov    esi,eax
c001c9fc:	e8 c1 95 00 00       	call   c0025fc2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ca01:	83 c4 10             	add    esp,0x10
c001ca04:	39 f3                	cmp    ebx,esi
c001ca06:	74 b9                	je     c001c9c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001ca08:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ca0b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ca0e:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ca14:	75 ab                	jne    c001c9c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001ca16:	e9 7c ff ff ff       	jmp    c001c997 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001ca1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca1f:	83 ec 0c             	sub    esp,0xc
c001ca22:	68 30 95 02 c0       	push   0xc0029530
c001ca27:	e9 55 ff ff ff       	jmp    c001c981 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001ca2c:	8b 36                	mov    esi,DWORD PTR [esi]
c001ca2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca32:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ca35:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ca38:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ca3e:	01 d7                	add    edi,edx
c001ca40:	89 f8                	mov    eax,edi
c001ca42:	e9 44 fe ff ff       	jmp    c001c88b <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001ca47 <cleanerTaskFunction(void*)>:
c001ca47:	53                   	push   ebx
c001ca48:	83 ec 08             	sub    esp,0x8
c001ca4b:	e8 8f f6 ff ff       	call   c001c0df <unlockScheduler()>
c001ca50:	e8 88 f6 ff ff       	call   c001c0dd <lockScheduler()>
c001ca55:	80 3d 8c c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c58c,0x0
c001ca5c:	0f 85 8e 00 00 00    	jne    c001caf0 <cleanerTaskFunction(void*)+0xa9>
c001ca62:	83 ec 0c             	sub    esp,0xc
c001ca65:	6a 02                	push   0x2
c001ca67:	e8 c4 fa ff ff       	call   c001c530 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ca6c:	83 c4 10             	add    esp,0x10
c001ca6f:	c6 05 8c c5 02 c0 00 	mov    BYTE PTR ds:0xc002c58c,0x0
c001ca76:	e8 89 f6 ff ff       	call   c001c104 <lockStuff()>
c001ca7b:	e8 5d f6 ff ff       	call   c001c0dd <lockScheduler()>
c001ca80:	83 ec 0c             	sub    esp,0xc
c001ca83:	68 b0 c5 02 c0       	push   0xc002c5b0
c001ca88:	e8 19 95 00 00       	call   c0025fa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ca8d:	83 c4 10             	add    esp,0x10
c001ca90:	84 c0                	test   al,al
c001ca92:	75 40                	jne    c001cad4 <cleanerTaskFunction(void*)+0x8d>
c001ca94:	83 ec 0c             	sub    esp,0xc
c001ca97:	68 b0 c5 02 c0       	push   0xc002c5b0
c001ca9c:	e8 fd 94 00 00       	call   c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001caa1:	c7 04 24 b0 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5b0
c001caa8:	89 c3                	mov    ebx,eax
c001caaa:	e8 13 95 00 00       	call   c0025fc2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001caaf:	c7 04 24 36 92 02 c0 	mov    DWORD PTR [esp],0xc0029236
c001cab6:	e8 78 5b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cabb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cabe:	e8 e0 fc ff ff       	call   c001c7a3 <cleanupTerminatedTask(ThreadControlBlock*)>
c001cac3:	c7 04 24 4f 92 02 c0 	mov    DWORD PTR [esp],0xc002924f
c001caca:	e8 64 5b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cacf:	83 c4 10             	add    esp,0x10
c001cad2:	eb ac                	jmp    c001ca80 <cleanerTaskFunction(void*)+0x39>
c001cad4:	e8 06 f6 ff ff       	call   c001c0df <unlockScheduler()>
c001cad9:	e8 bf f9 ff ff       	call   c001c49d <unlockStuff()>
c001cade:	e8 fa f5 ff ff       	call   c001c0dd <lockScheduler()>
c001cae3:	80 3d 8c c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c58c,0x0
c001caea:	0f 84 72 ff ff ff    	je     c001ca62 <cleanerTaskFunction(void*)+0x1b>
c001caf0:	e8 ea f5 ff ff       	call   c001c0df <unlockScheduler()>
c001caf5:	e9 75 ff ff ff       	jmp    c001ca6f <cleanerTaskFunction(void*)+0x28>

c001cafa <terminateTask(int)>:
c001cafa:	83 ec 14             	sub    esp,0x14
c001cafd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb02:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb05:	83 c0 0c             	add    eax,0xc
c001cb08:	50                   	push   eax
c001cb09:	68 8c 95 02 c0       	push   0xc002958c
c001cb0e:	e8 20 5b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cb13:	e8 ec f5 ff ff       	call   c001c104 <lockStuff()>
c001cb18:	e8 c0 f5 ff ff       	call   c001c0dd <lockScheduler()>
c001cb1d:	c7 04 24 62 92 02 c0 	mov    DWORD PTR [esp],0xc0029262
c001cb24:	e8 0a 5b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cb29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb32:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001cb35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb3a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cb3d:	5a                   	pop    edx
c001cb3e:	59                   	pop    ecx
c001cb3f:	50                   	push   eax
c001cb40:	68 b0 c5 02 c0       	push   0xc002c5b0
c001cb45:	e8 26 95 00 00       	call   c0026070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cb4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb4f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001cb56:	c7 04 24 7c 92 02 c0 	mov    DWORD PTR [esp],0xc002927c
c001cb5d:	e8 d1 5a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cb62:	83 c4 10             	add    esp,0x10
c001cb65:	a1 88 c5 02 c0       	mov    eax,ds:0xc002c588
c001cb6a:	85 c0                	test   eax,eax
c001cb6c:	74 5a                	je     c001cbc8 <terminateTask(int)+0xce>
c001cb6e:	83 ec 0c             	sub    esp,0xc
c001cb71:	68 96 92 02 c0       	push   0xc0029296
c001cb76:	e8 b8 5a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cb7b:	58                   	pop    eax
c001cb7c:	c6 05 8c c5 02 c0 01 	mov    BYTE PTR ds:0xc002c58c,0x1
c001cb83:	ff 35 88 c5 02 c0    	push   DWORD PTR ds:0xc002c588
c001cb89:	e8 66 fb ff ff       	call   c001c6f4 <unblockTask(ThreadControlBlock*)>
c001cb8e:	c7 04 24 b0 92 02 c0 	mov    DWORD PTR [esp],0xc00292b0
c001cb95:	e8 99 5a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cb9a:	83 c4 10             	add    esp,0x10
c001cb9d:	e8 3d f5 ff ff       	call   c001c0df <unlockScheduler()>
c001cba2:	e8 f6 f8 ff ff       	call   c001c49d <unlockStuff()>
c001cba7:	83 ec 0c             	sub    esp,0xc
c001cbaa:	68 e8 92 02 c0       	push   0xc00292e8
c001cbaf:	e8 7f 5a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cbb4:	83 c4 10             	add    esp,0x10
c001cbb7:	e8 21 f5 ff ff       	call   c001c0dd <lockScheduler()>
c001cbbc:	e8 57 f8 ff ff       	call   c001c418 <schedule()>
c001cbc1:	e8 19 f5 ff ff       	call   c001c0df <unlockScheduler()>
c001cbc6:	eb ef                	jmp    c001cbb7 <terminateTask(int)+0xbd>
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	68 ca 92 02 c0       	push   0xc00292ca
c001cbd0:	e8 5e 5a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001cbd5:	83 c4 10             	add    esp,0x10
c001cbd8:	eb c3                	jmp    c001cb9d <terminateTask(int)+0xa3>

c001cbda <Thr::terminateFromIRQ(int)>:
c001cbda:	83 ec 18             	sub    esp,0x18
c001cbdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe1:	e8 14 ff ff ff       	call   c001cafa <terminateTask(int)>

c001cbe6 <Semaphore::release()>:
c001cbe6:	83 ec 0c             	sub    esp,0xc
c001cbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbed:	e8 12 f5 ff ff       	call   c001c104 <lockStuff()>
c001cbf2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cbf5:	85 d2                	test   edx,edx
c001cbf7:	74 1a                	je     c001cc13 <Semaphore::release()+0x2d>
c001cbf9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001cc02:	52                   	push   edx
c001cc03:	e8 ec fa ff ff       	call   c001c6f4 <unblockTask(ThreadControlBlock*)>
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	83 c4 0c             	add    esp,0xc
c001cc0e:	e9 8a f8 ff ff       	jmp    c001c49d <unlockStuff()>
c001cc13:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001cc16:	83 c4 0c             	add    esp,0xc
c001cc19:	e9 7f f8 ff ff       	jmp    c001c49d <unlockStuff()>

c001cc1e <__static_initialization_and_destruction_0(int, int)>:
c001cc1e:	83 ec 0c             	sub    esp,0xc
c001cc21:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001cc26:	0f 85 88 00 00 00    	jne    c001ccb4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001cc2c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001cc34:	75 7e                	jne    c001ccb4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001cc36:	83 ec 0c             	sub    esp,0xc
c001cc39:	68 c8 c5 02 c0       	push   0xc002c5c8
c001cc3e:	e8 dd 95 00 00       	call   c0026220 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	83 ec 04             	sub    esp,0x4
c001cc49:	68 68 a0 02 c0       	push   0xc002a068
c001cc4e:	68 c8 c5 02 c0       	push   0xc002c5c8
c001cc53:	68 e0 61 02 c0       	push   0xc00261e0
c001cc58:	e8 70 58 ff ff       	call   c00124cd <__cxa_atexit>
c001cc5d:	83 c4 10             	add    esp,0x10
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	68 bc c5 02 c0       	push   0xc002c5bc
c001cc68:	e8 b3 95 00 00       	call   c0026220 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cc6d:	83 c4 10             	add    esp,0x10
c001cc70:	83 ec 04             	sub    esp,0x4
c001cc73:	68 68 a0 02 c0       	push   0xc002a068
c001cc78:	68 bc c5 02 c0       	push   0xc002c5bc
c001cc7d:	68 e0 61 02 c0       	push   0xc00261e0
c001cc82:	e8 46 58 ff ff       	call   c00124cd <__cxa_atexit>
c001cc87:	83 c4 10             	add    esp,0x10
c001cc8a:	83 ec 0c             	sub    esp,0xc
c001cc8d:	68 b0 c5 02 c0       	push   0xc002c5b0
c001cc92:	e8 89 95 00 00       	call   c0026220 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cc97:	83 c4 10             	add    esp,0x10
c001cc9a:	83 ec 04             	sub    esp,0x4
c001cc9d:	68 68 a0 02 c0       	push   0xc002a068
c001cca2:	68 b0 c5 02 c0       	push   0xc002c5b0
c001cca7:	68 e0 61 02 c0       	push   0xc00261e0
c001ccac:	e8 1c 58 ff ff       	call   c00124cd <__cxa_atexit>
c001ccb1:	83 c4 10             	add    esp,0x10
c001ccb4:	90                   	nop
c001ccb5:	83 c4 0c             	add    esp,0xc
c001ccb8:	c3                   	ret    

c001ccb9 <_GLOBAL__sub_I_kernelProcess>:
c001ccb9:	83 ec 0c             	sub    esp,0xc
c001ccbc:	83 ec 08             	sub    esp,0x8
c001ccbf:	68 ff ff 00 00       	push   0xffff
c001ccc4:	6a 01                	push   0x1
c001ccc6:	e8 53 ff ff ff       	call   c001cc1e <__static_initialization_and_destruction_0(int, int)>
c001cccb:	83 c4 10             	add    esp,0x10
c001ccce:	83 c4 0c             	add    esp,0xc
c001ccd1:	c3                   	ret    

c001ccd2 <Vm::inbv(unsigned short)>:
c001ccd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccd6:	ec                   	in     al,dx
c001ccd7:	c3                   	ret    

c001ccd8 <Vm::outbv(unsigned short, unsigned char)>:
c001ccd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cce0:	ee                   	out    dx,al
c001cce1:	c3                   	ret    

c001cce2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001cce2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cce7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ccec:	c1 e0 04             	shl    eax,0x4
c001ccef:	01 d0                	add    eax,edx
c001ccf1:	c3                   	ret    

c001ccf2 <Vm::getSegment(unsigned int)>:
c001ccf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccf6:	c1 e8 10             	shr    eax,0x10
c001ccf9:	c3                   	ret    

c001ccfa <Vm::getOffset(unsigned int)>:
c001ccfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccfe:	c3                   	ret    

c001ccff <Vm::mainloop2()>:
c001ccff:	83 ec 0c             	sub    esp,0xc
c001cd02:	e8 d6 f3 ff ff       	call   c001c0dd <lockScheduler()>
c001cd07:	83 ec 0c             	sub    esp,0xc
c001cd0a:	c6 05 f5 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c5f5,0x1
c001cd11:	6a 02                	push   0x2
c001cd13:	e8 18 f8 ff ff       	call   c001c530 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cd18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd1d:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001cd21:	52                   	push   edx
c001cd22:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001cd26:	52                   	push   edx
c001cd27:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001cd2b:	52                   	push   edx
c001cd2c:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001cd30:	50                   	push   eax
c001cd31:	e8 79 35 fe ff       	call   c00002af <goToVM86>
c001cd36:	83 c4 2c             	add    esp,0x2c
c001cd39:	c3                   	ret    

c001cd3a <Vm::mainVm8086Loop(void*)>:
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	e8 9d f3 ff ff       	call   c001c0df <unlockScheduler()>
c001cd42:	83 c4 0c             	add    esp,0xc
c001cd45:	eb b8                	jmp    c001ccff <Vm::mainloop2()>

c001cd47 <Vm::mainloop3(unsigned long)>:
c001cd47:	53                   	push   ebx
c001cd48:	83 ec 08             	sub    esp,0x8
c001cd4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd4f:	e8 89 f3 ff ff       	call   c001c0dd <lockScheduler()>
c001cd54:	83 ec 0c             	sub    esp,0xc
c001cd57:	89 1d f0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5f0,ebx
c001cd5d:	6a 02                	push   0x2
c001cd5f:	c6 05 f4 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c5f4,0x1
c001cd66:	e8 c5 f7 ff ff       	call   c001c530 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cd6b:	83 c4 18             	add    esp,0x18
c001cd6e:	5b                   	pop    ebx
c001cd6f:	eb 8e                	jmp    c001ccff <Vm::mainloop2()>

c001cd71 <Vm::initialise8086()>:
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	68 80 00 00 00       	push   0x80
c001cd79:	6a 00                	push   0x0
c001cd7b:	68 3a cd 01 c0       	push   0xc001cd3a
c001cd80:	ff 35 d4 c5 02 c0    	push   DWORD PTR ds:0xc002c5d4
c001cd86:	e8 83 f4 ff ff       	call   c001c20e <Process::createThread(void (*)(void*), void*, int)>
c001cd8b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001cd92:	a3 f8 c5 02 c0       	mov    ds:0xc002c5f8,eax
c001cd97:	68 00 01 00 00       	push   0x100
c001cd9c:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c001cda1:	6a 00                	push   0x0
c001cda3:	6a 00                	push   0x0
c001cda5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdab:	e8 52 52 ff ff       	call   c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001cdb0:	83 c4 2c             	add    esp,0x2c
c001cdb3:	c3                   	ret    

c001cdb4 <Vm::finish8086()>:
c001cdb4:	53                   	push   ebx
c001cdb5:	83 ec 08             	sub    esp,0x8
c001cdb8:	e8 20 f3 ff ff       	call   c001c0dd <lockScheduler()>
c001cdbd:	80 3d f4 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c5f4,0x0
c001cdc4:	75 0c                	jne    c001cdd2 <Vm::finish8086()+0x1e>
c001cdc6:	e8 4d f6 ff ff       	call   c001c418 <schedule()>
c001cdcb:	e8 0f f3 ff ff       	call   c001c0df <unlockScheduler()>
c001cdd0:	eb e6                	jmp    c001cdb8 <Vm::finish8086()+0x4>
c001cdd2:	83 ec 0c             	sub    esp,0xc
c001cdd5:	8b 1d f0 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c5f0
c001cddb:	ff 35 f8 c5 02 c0    	push   DWORD PTR ds:0xc002c5f8
c001cde1:	c6 05 f4 c5 02 c0 00 	mov    BYTE PTR ds:0xc002c5f4,0x0
c001cde8:	e8 07 f9 ff ff       	call   c001c6f4 <unblockTask(ThreadControlBlock*)>
c001cded:	e8 ed f2 ff ff       	call   c001c0df <unlockScheduler()>
c001cdf2:	89 d8                	mov    eax,ebx
c001cdf4:	83 c4 18             	add    esp,0x18
c001cdf7:	5b                   	pop    ebx
c001cdf8:	c3                   	ret    

c001cdf9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001cdf9:	55                   	push   ebp
c001cdfa:	57                   	push   edi
c001cdfb:	56                   	push   esi
c001cdfc:	53                   	push   ebx
c001cdfd:	83 ec 2c             	sub    esp,0x2c
c001ce00:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ce04:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ce08:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ce0c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ce10:	e8 c8 f2 ff ff       	call   c001c0dd <lockScheduler()>
c001ce15:	a0 f5 c5 02 c0       	mov    al,ds:0xc002c5f5
c001ce1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce1e:	84 c0                	test   al,al
c001ce20:	75 0c                	jne    c001ce2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ce22:	e8 f1 f5 ff ff       	call   c001c418 <schedule()>
c001ce27:	e8 b3 f2 ff ff       	call   c001c0df <unlockScheduler()>
c001ce2c:	eb e2                	jmp    c001ce10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ce2e:	a1 f8 c5 02 c0       	mov    eax,ds:0xc002c5f8
c001ce33:	83 ec 0c             	sub    esp,0xc
c001ce36:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ce3a:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ce3e:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ce42:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ce46:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ce4a:	68 14 01 00 00       	push   0x114
c001ce4f:	e8 6c 26 ff ff       	call   c000f4c0 <malloc>
c001ce54:	83 c4 0c             	add    esp,0xc
c001ce57:	89 c7                	mov    edi,eax
c001ce59:	ff 35 d4 c5 02 c0    	push   DWORD PTR ds:0xc002c5d4
c001ce5f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ce63:	50                   	push   eax
c001ce64:	e8 f9 5c ff ff       	call   c0012b62 <File::File(char const*, Process*)>
c001ce69:	83 c4 10             	add    esp,0x10
c001ce6c:	85 ff                	test   edi,edi
c001ce6e:	75 0a                	jne    c001ce7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001ce70:	83 ec 0c             	sub    esp,0xc
c001ce73:	68 ab 95 02 c0       	push   0xc00295ab
c001ce78:	eb 27                	jmp    c001cea1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa8>
c001ce7a:	50                   	push   eax
c001ce7b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ce7f:	50                   	push   eax
c001ce80:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ce84:	50                   	push   eax
c001ce85:	57                   	push   edi
c001ce86:	e8 e7 5f ff ff       	call   c0012e72 <File::stat(unsigned long long*, bool*)>
c001ce8b:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ce90:	83 c4 10             	add    esp,0x10
c001ce93:	89 e8                	mov    eax,ebp
c001ce95:	84 c0                	test   al,al
c001ce97:	74 19                	je     c001ceb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xb9>
c001ce99:	83 ec 0c             	sub    esp,0xc
c001ce9c:	68 bf 95 02 c0       	push   0xc00295bf
c001cea1:	e8 f1 c1 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001cea6:	31 ed                	xor    ebp,ebp
c001cea8:	e8 32 f2 ff ff       	call   c001c0df <unlockScheduler()>
c001cead:	83 c4 10             	add    esp,0x10
c001ceb0:	eb 75                	jmp    c001cf27 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12e>
c001ceb2:	50                   	push   eax
c001ceb3:	50                   	push   eax
c001ceb4:	6a 01                	push   0x1
c001ceb6:	57                   	push   edi
c001ceb7:	e8 0a 5d ff ff       	call   c0012bc6 <File::open(FileOpenMode)>
c001cebc:	83 c4 10             	add    esp,0x10
c001cebf:	85 c0                	test   eax,eax
c001cec1:	74 17                	je     c001ceda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe1>
c001cec3:	83 ec 0c             	sub    esp,0xc
c001cec6:	68 d8 95 02 c0       	push   0xc00295d8
c001cecb:	e8 c7 c1 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001ced0:	e8 0a f2 ff ff       	call   c001c0df <unlockScheduler()>
c001ced5:	83 c4 10             	add    esp,0x10
c001ced8:	eb 4d                	jmp    c001cf27 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12e>
c001ceda:	0f b7 f6             	movzx  esi,si
c001cedd:	50                   	push   eax
c001cede:	0f b7 db             	movzx  ebx,bx
c001cee1:	50                   	push   eax
c001cee2:	56                   	push   esi
c001cee3:	53                   	push   ebx
c001cee4:	e8 f9 fd ff ff       	call   c001cce2 <Vm::realToLinear(unsigned short, unsigned short)>
c001cee9:	5a                   	pop    edx
c001ceea:	8b 17                	mov    edx,DWORD PTR [edi]
c001ceec:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001cef0:	51                   	push   ecx
c001cef1:	50                   	push   eax
c001cef2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cef6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cefa:	57                   	push   edi
c001cefb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cefe:	83 c4 14             	add    esp,0x14
c001cf01:	57                   	push   edi
c001cf02:	e8 1d 5d ff ff       	call   c0012c24 <File::close()>
c001cf07:	c6 05 f5 c5 02 c0 00 	mov    BYTE PTR ds:0xc002c5f5,0x0
c001cf0e:	e8 cc f1 ff ff       	call   c001c0df <unlockScheduler()>
c001cf13:	59                   	pop    ecx
c001cf14:	ff 35 f8 c5 02 c0    	push   DWORD PTR ds:0xc002c5f8
c001cf1a:	e8 d5 f7 ff ff       	call   c001c6f4 <unblockTask(ThreadControlBlock*)>
c001cf1f:	83 c4 10             	add    esp,0x10
c001cf22:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cf27:	83 c4 2c             	add    esp,0x2c
c001cf2a:	89 e8                	mov    eax,ebp
c001cf2c:	5b                   	pop    ebx
c001cf2d:	5e                   	pop    esi
c001cf2e:	5f                   	pop    edi
c001cf2f:	5d                   	pop    ebp
c001cf30:	c3                   	ret    

c001cf31 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001cf31:	57                   	push   edi
c001cf32:	56                   	push   esi
c001cf33:	53                   	push   ebx
c001cf34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cf38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cf40:	83 e8 06             	sub    eax,0x6
c001cf43:	0f b7 c0             	movzx  eax,ax
c001cf46:	50                   	push   eax
c001cf47:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001cf4c:	50                   	push   eax
c001cf4d:	e8 90 fd ff ff       	call   c001cce2 <Vm::realToLinear(unsigned short, unsigned short)>
c001cf52:	5a                   	pop    edx
c001cf53:	5e                   	pop    esi
c001cf54:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001cf57:	8d 56 fa             	lea    edx,[esi-0x6]
c001cf5a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001cf60:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001cf63:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001cf66:	83 c2 02             	add    edx,0x2
c001cf69:	66 89 10             	mov    WORD PTR [eax],dx
c001cf6c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001cf6f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001cf73:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001cf76:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001cf7a:	89 d6                	mov    esi,edx
c001cf7c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001cf82:	66 81 e6 ff fd       	and    si,0xfdff
c001cf87:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001cf8b:	74 07                	je     c001cf94 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001cf8d:	89 d6                	mov    esi,edx
c001cf8f:	66 81 ce 00 02       	or     si,0x200
c001cf94:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001cf98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf9d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cfa1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001cfa9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001cfac:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001cfb4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001cfb7:	5b                   	pop    ebx
c001cfb8:	5e                   	pop    esi
c001cfb9:	5f                   	pop    edi
c001cfba:	c3                   	ret    

c001cfbb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001cfbb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cfc0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cfc5:	c1 e0 04             	shl    eax,0x4
c001cfc8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001cfcb:	c3                   	ret    

c001cfcc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001cfcc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cfd1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cfd6:	c1 e0 04             	shl    eax,0x4
c001cfd9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001cfdd:	c3                   	ret    

c001cfde <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001cfde:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cfe3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cfe8:	c1 e0 04             	shl    eax,0x4
c001cfeb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001cfee:	c3                   	ret    

c001cfef <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001cfef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cff4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cff9:	c1 e0 04             	shl    eax,0x4
c001cffc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d000:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001d003:	c3                   	ret    

c001d004 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001d004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d009:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d00e:	c1 e0 04             	shl    eax,0x4
c001d011:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d015:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001d019:	c3                   	ret    

c001d01a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001d01a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d01f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d024:	c1 e0 04             	shl    eax,0x4
c001d027:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d02b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001d02e:	c3                   	ret    

c001d02f <Vm::faultHandler(regs*)>:
c001d02f:	55                   	push   ebp
c001d030:	57                   	push   edi
c001d031:	56                   	push   esi
c001d032:	53                   	push   ebx
c001d033:	83 ec 1c             	sub    esp,0x1c
c001d036:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d03a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001d03d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001d041:	0f b7 f0             	movzx  esi,ax
c001d044:	52                   	push   edx
c001d045:	0f b7 c0             	movzx  eax,ax
c001d048:	50                   	push   eax
c001d049:	e8 94 fc ff ff       	call   c001cce2 <Vm::realToLinear(unsigned short, unsigned short)>
c001d04e:	5a                   	pop    edx
c001d04f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001d052:	59                   	pop    ecx
c001d053:	89 c7                	mov    edi,eax
c001d055:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d058:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d05c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d061:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d065:	0f b7 c5             	movzx  eax,bp
c001d068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d06c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001d070:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d074:	e8 69 fc ff ff       	call   c001cce2 <Vm::realToLinear(unsigned short, unsigned short)>
c001d079:	5a                   	pop    edx
c001d07a:	59                   	pop    ecx
c001d07b:	b1 06                	mov    cl,0x6
c001d07d:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001d082:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001d087:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001d08a:	80 fa 9d             	cmp    dl,0x9d
c001d08d:	0f 84 1d 02 00 00    	je     c001d2b0 <Vm::faultHandler(regs*)+0x281>
c001d093:	0f 87 8e 00 00 00    	ja     c001d127 <Vm::faultHandler(regs*)+0xf8>
c001d099:	80 fa 66             	cmp    dl,0x66
c001d09c:	0f 84 89 01 00 00    	je     c001d22b <Vm::faultHandler(regs*)+0x1fc>
c001d0a2:	77 44                	ja     c001d0e8 <Vm::faultHandler(regs*)+0xb9>
c001d0a4:	80 fa 36             	cmp    dl,0x36
c001d0a7:	0f 84 74 01 00 00    	je     c001d221 <Vm::faultHandler(regs*)+0x1f2>
c001d0ad:	77 1a                	ja     c001d0c9 <Vm::faultHandler(regs*)+0x9a>
c001d0af:	80 fa 26             	cmp    dl,0x26
c001d0b2:	0f 84 4b 01 00 00    	je     c001d203 <Vm::faultHandler(regs*)+0x1d4>
c001d0b8:	80 fa 2e             	cmp    dl,0x2e
c001d0bb:	0f 85 4a 05 00 00    	jne    c001d60b <Vm::faultHandler(regs*)+0x5dc>
c001d0c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d0c4:	31 c9                	xor    ecx,ecx
c001d0c6:	47                   	inc    edi
c001d0c7:	eb be                	jmp    c001d087 <Vm::faultHandler(regs*)+0x58>
c001d0c9:	80 fa 64             	cmp    dl,0x64
c001d0cc:	0f 84 3b 01 00 00    	je     c001d20d <Vm::faultHandler(regs*)+0x1de>
c001d0d2:	0f 87 3f 01 00 00    	ja     c001d217 <Vm::faultHandler(regs*)+0x1e8>
c001d0d8:	80 fa 3e             	cmp    dl,0x3e
c001d0db:	0f 85 2a 05 00 00    	jne    c001d60b <Vm::faultHandler(regs*)+0x5dc>
c001d0e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d0e4:	b1 01                	mov    cl,0x1
c001d0e6:	eb de                	jmp    c001d0c6 <Vm::faultHandler(regs*)+0x97>
c001d0e8:	80 fa 6d             	cmp    dl,0x6d
c001d0eb:	0f 84 bf 02 00 00    	je     c001d3b0 <Vm::faultHandler(regs*)+0x381>
c001d0f1:	77 17                	ja     c001d10a <Vm::faultHandler(regs*)+0xdb>
c001d0f3:	80 fa 67             	cmp    dl,0x67
c001d0f6:	0f 84 3c 01 00 00    	je     c001d238 <Vm::faultHandler(regs*)+0x209>
c001d0fc:	80 fa 6c             	cmp    dl,0x6c
c001d0ff:	0f 84 5d 02 00 00    	je     c001d362 <Vm::faultHandler(regs*)+0x333>
c001d105:	e9 01 05 00 00       	jmp    c001d60b <Vm::faultHandler(regs*)+0x5dc>
c001d10a:	80 fa 6f             	cmp    dl,0x6f
c001d10d:	0f 84 8b 03 00 00    	je     c001d49e <Vm::faultHandler(regs*)+0x46f>
c001d113:	0f 82 0f 03 00 00    	jb     c001d428 <Vm::faultHandler(regs*)+0x3f9>
c001d119:	80 fa 9c             	cmp    dl,0x9c
c001d11c:	0f 84 23 01 00 00    	je     c001d245 <Vm::faultHandler(regs*)+0x216>
c001d122:	e9 e4 04 00 00       	jmp    c001d60b <Vm::faultHandler(regs*)+0x5dc>
c001d127:	80 fa ec             	cmp    dl,0xec
c001d12a:	0f 84 7f 04 00 00    	je     c001d5af <Vm::faultHandler(regs*)+0x580>
c001d130:	77 7b                	ja     c001d1ad <Vm::faultHandler(regs*)+0x17e>
c001d132:	80 fa e4             	cmp    dl,0xe4
c001d135:	0f 84 fe 03 00 00    	je     c001d539 <Vm::faultHandler(regs*)+0x50a>
c001d13b:	77 53                	ja     c001d190 <Vm::faultHandler(regs*)+0x161>
c001d13d:	80 fa cd             	cmp    dl,0xcd
c001d140:	0f 84 cd 01 00 00    	je     c001d313 <Vm::faultHandler(regs*)+0x2e4>
c001d146:	80 fa cf             	cmp    dl,0xcf
c001d149:	0f 85 bc 04 00 00    	jne    c001d60b <Vm::faultHandler(regs*)+0x5dc>
c001d14f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d152:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001d155:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001d159:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001d15c:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001d160:	81 ca 00 02 02 00    	or     edx,0x20200
c001d166:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d169:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001d16d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d173:	66 c1 e8 09          	shr    ax,0x9
c001d177:	83 e0 01             	and    eax,0x1
c001d17a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d17d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d180:	83 c0 06             	add    eax,0x6
c001d183:	25 ff ff 00 00       	and    eax,0xffff
c001d188:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d18b:	e9 77 04 00 00       	jmp    c001d607 <Vm::faultHandler(regs*)+0x5d8>
c001d190:	80 fa e6             	cmp    dl,0xe6
c001d193:	0f 84 ea 03 00 00    	je     c001d583 <Vm::faultHandler(regs*)+0x554>
c001d199:	0f 82 b6 03 00 00    	jb     c001d555 <Vm::faultHandler(regs*)+0x526>
c001d19f:	80 fa e7             	cmp    dl,0xe7
c001d1a2:	0f 84 f2 03 00 00    	je     c001d59a <Vm::faultHandler(regs*)+0x56b>
c001d1a8:	e9 5e 04 00 00       	jmp    c001d60b <Vm::faultHandler(regs*)+0x5dc>
c001d1ad:	80 fa ef             	cmp    dl,0xef
c001d1b0:	0f 84 3c 04 00 00    	je     c001d5f2 <Vm::faultHandler(regs*)+0x5c3>
c001d1b6:	77 28                	ja     c001d1e0 <Vm::faultHandler(regs*)+0x1b1>
c001d1b8:	80 fa ed             	cmp    dl,0xed
c001d1bb:	0f 84 0a 04 00 00    	je     c001d5cb <Vm::faultHandler(regs*)+0x59c>
c001d1c1:	80 fa ee             	cmp    dl,0xee
c001d1c4:	0f 85 41 04 00 00    	jne    c001d60b <Vm::faultHandler(regs*)+0x5dc>
c001d1ca:	50                   	push   eax
c001d1cb:	50                   	push   eax
c001d1cc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d1d0:	50                   	push   eax
c001d1d1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d1d5:	50                   	push   eax
c001d1d6:	e8 fd fa ff ff       	call   c001ccd8 <Vm::outbv(unsigned short, unsigned char)>
c001d1db:	e9 0a 04 00 00       	jmp    c001d5ea <Vm::faultHandler(regs*)+0x5bb>
c001d1e0:	80 fa fa             	cmp    dl,0xfa
c001d1e3:	0f 84 5d 01 00 00    	je     c001d346 <Vm::faultHandler(regs*)+0x317>
c001d1e9:	80 fa fb             	cmp    dl,0xfb
c001d1ec:	0f 84 62 01 00 00    	je     c001d354 <Vm::faultHandler(regs*)+0x325>
c001d1f2:	80 fa f3             	cmp    dl,0xf3
c001d1f5:	0f 85 10 04 00 00    	jne    c001d60b <Vm::faultHandler(regs*)+0x5dc>
c001d1fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d1fe:	e9 c3 fe ff ff       	jmp    c001d0c6 <Vm::faultHandler(regs*)+0x97>
c001d203:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d206:	b1 02                	mov    cl,0x2
c001d208:	e9 b9 fe ff ff       	jmp    c001d0c6 <Vm::faultHandler(regs*)+0x97>
c001d20d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d210:	b1 03                	mov    cl,0x3
c001d212:	e9 af fe ff ff       	jmp    c001d0c6 <Vm::faultHandler(regs*)+0x97>
c001d217:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d21a:	b1 04                	mov    cl,0x4
c001d21c:	e9 a5 fe ff ff       	jmp    c001d0c6 <Vm::faultHandler(regs*)+0x97>
c001d221:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d224:	b1 05                	mov    cl,0x5
c001d226:	e9 9b fe ff ff       	jmp    c001d0c6 <Vm::faultHandler(regs*)+0x97>
c001d22b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d22e:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001d233:	e9 8e fe ff ff       	jmp    c001d0c6 <Vm::faultHandler(regs*)+0x97>
c001d238:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d23b:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001d240:	e9 81 fe ff ff       	jmp    c001d0c6 <Vm::faultHandler(regs*)+0x97>
c001d245:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d248:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d24c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d251:	74 30                	je     c001d283 <Vm::faultHandler(regs*)+0x254>
c001d253:	83 e9 04             	sub    ecx,0x4
c001d256:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d25c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d262:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d265:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d268:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d26e:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d272:	0f 84 8c 03 00 00    	je     c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d278:	80 ce 02             	or     dh,0x2
c001d27b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d27e:	e9 81 03 00 00       	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d283:	83 e9 02             	sub    ecx,0x2
c001d286:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d28c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d28f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d293:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d299:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d29d:	74 05                	je     c001d2a4 <Vm::faultHandler(regs*)+0x275>
c001d29f:	80 ce 02             	or     dh,0x2
c001d2a2:	eb 03                	jmp    c001d2a7 <Vm::faultHandler(regs*)+0x278>
c001d2a4:	80 e6 fd             	and    dh,0xfd
c001d2a7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d2ab:	e9 54 03 00 00       	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d2b0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d2b5:	74 2a                	je     c001d2e1 <Vm::faultHandler(regs*)+0x2b2>
c001d2b7:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2b9:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d2bf:	81 ca 00 02 02 00    	or     edx,0x20200
c001d2c5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d2c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2d0:	c1 e8 09             	shr    eax,0x9
c001d2d3:	83 e0 01             	and    eax,0x1
c001d2d6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d2d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d2dc:	83 c0 04             	add    eax,0x4
c001d2df:	eb 25                	jmp    c001d306 <Vm::faultHandler(regs*)+0x2d7>
c001d2e1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d2e4:	81 ca 00 02 02 00    	or     edx,0x20200
c001d2ea:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d2ed:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d2f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2f6:	66 c1 e8 09          	shr    ax,0x9
c001d2fa:	83 e0 01             	and    eax,0x1
c001d2fd:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d300:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d303:	83 c0 02             	add    eax,0x2
c001d306:	25 ff ff 00 00       	and    eax,0xffff
c001d30b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d30e:	e9 f1 02 00 00       	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d313:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d317:	3c ee                	cmp    al,0xee
c001d319:	75 10                	jne    c001d32b <Vm::faultHandler(regs*)+0x2fc>
c001d31b:	83 ec 0c             	sub    esp,0xc
c001d31e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001d321:	e8 21 fa ff ff       	call   c001cd47 <Vm::mainloop3(unsigned long)>
c001d326:	e9 c2 02 00 00       	jmp    c001d5ed <Vm::faultHandler(regs*)+0x5be>
c001d32b:	83 ec 0c             	sub    esp,0xc
c001d32e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d336:	57                   	push   edi
c001d337:	50                   	push   eax
c001d338:	53                   	push   ebx
c001d339:	e8 f3 fb ff ff       	call   c001cf31 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001d33e:	83 c4 20             	add    esp,0x20
c001d341:	e9 c1 02 00 00       	jmp    c001d607 <Vm::faultHandler(regs*)+0x5d8>
c001d346:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d34b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d34f:	e9 b0 02 00 00       	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d359:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001d35d:	e9 a2 02 00 00       	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d362:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d367:	74 0d                	je     c001d376 <Vm::faultHandler(regs*)+0x347>
c001d369:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001d370:	0f 87 e9 02 00 00    	ja     c001d65f <Vm::faultHandler(regs*)+0x630>
c001d376:	83 ec 0c             	sub    esp,0xc
c001d379:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001d37c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d380:	50                   	push   eax
c001d381:	e8 4c f9 ff ff       	call   c001ccd2 <Vm::inbv(unsigned short)>
c001d386:	83 c4 0c             	add    esp,0xc
c001d389:	0f b6 c0             	movzx  eax,al
c001d38c:	0f b7 c9             	movzx  ecx,cx
c001d38f:	50                   	push   eax
c001d390:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001d394:	50                   	push   eax
c001d395:	51                   	push   ecx
c001d396:	e8 54 fc ff ff       	call   c001cfef <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001d39b:	83 c4 10             	add    esp,0x10
c001d39e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d3a1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d3a5:	74 03                	je     c001d3aa <Vm::faultHandler(regs*)+0x37b>
c001d3a7:	48                   	dec    eax
c001d3a8:	eb 01                	jmp    c001d3ab <Vm::faultHandler(regs*)+0x37c>
c001d3aa:	40                   	inc    eax
c001d3ab:	0f b7 c0             	movzx  eax,ax
c001d3ae:	eb 70                	jmp    c001d420 <Vm::faultHandler(regs*)+0x3f1>
c001d3b0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d3b3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001d3b6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d3bb:	74 0c                	je     c001d3c9 <Vm::faultHandler(regs*)+0x39a>
c001d3bd:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d3c3:	0f 87 96 02 00 00    	ja     c001d65f <Vm::faultHandler(regs*)+0x630>
c001d3c9:	0f b7 c9             	movzx  ecx,cx
c001d3cc:	0f b7 f6             	movzx  esi,si
c001d3cf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d3d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d3d7:	74 20                	je     c001d3f9 <Vm::faultHandler(regs*)+0x3ca>
c001d3d9:	ed                   	in     eax,dx
c001d3da:	55                   	push   ebp
c001d3db:	50                   	push   eax
c001d3dc:	51                   	push   ecx
c001d3dd:	56                   	push   esi
c001d3de:	e8 37 fc ff ff       	call   c001d01a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001d3e3:	83 c4 10             	add    esp,0x10
c001d3e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d3e9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d3ed:	74 05                	je     c001d3f4 <Vm::faultHandler(regs*)+0x3c5>
c001d3ef:	83 e8 04             	sub    eax,0x4
c001d3f2:	eb 27                	jmp    c001d41b <Vm::faultHandler(regs*)+0x3ec>
c001d3f4:	83 c0 04             	add    eax,0x4
c001d3f7:	eb 22                	jmp    c001d41b <Vm::faultHandler(regs*)+0x3ec>
c001d3f9:	66 ed                	in     ax,dx
c001d3fb:	0f b7 c0             	movzx  eax,ax
c001d3fe:	57                   	push   edi
c001d3ff:	50                   	push   eax
c001d400:	51                   	push   ecx
c001d401:	56                   	push   esi
c001d402:	e8 fd fb ff ff       	call   c001d004 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001d407:	83 c4 10             	add    esp,0x10
c001d40a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d40d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d411:	74 05                	je     c001d418 <Vm::faultHandler(regs*)+0x3e9>
c001d413:	83 e8 02             	sub    eax,0x2
c001d416:	eb 03                	jmp    c001d41b <Vm::faultHandler(regs*)+0x3ec>
c001d418:	83 c0 02             	add    eax,0x2
c001d41b:	25 ff ff 00 00       	and    eax,0xffff
c001d420:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001d423:	e9 dc 01 00 00       	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d428:	49                   	dec    ecx
c001d429:	80 f9 05             	cmp    cl,0x5
c001d42c:	77 24                	ja     c001d452 <Vm::faultHandler(regs*)+0x423>
c001d42e:	0f b6 c9             	movzx  ecx,cl
c001d431:	ff 24 8d 20 96 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd69e0]
c001d438:	0f b7 f5             	movzx  esi,bp
c001d43b:	eb 15                	jmp    c001d452 <Vm::faultHandler(regs*)+0x423>
c001d43d:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001d441:	eb 0f                	jmp    c001d452 <Vm::faultHandler(regs*)+0x423>
c001d443:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001d447:	eb 09                	jmp    c001d452 <Vm::faultHandler(regs*)+0x423>
c001d449:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001d44d:	eb 03                	jmp    c001d452 <Vm::faultHandler(regs*)+0x423>
c001d44f:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001d452:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d455:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d45a:	74 0b                	je     c001d467 <Vm::faultHandler(regs*)+0x438>
c001d45c:	3d ff ff 00 00       	cmp    eax,0xffff
c001d461:	0f 87 f8 01 00 00    	ja     c001d65f <Vm::faultHandler(regs*)+0x630>
c001d467:	0f b7 c0             	movzx  eax,ax
c001d46a:	52                   	push   edx
c001d46b:	52                   	push   edx
c001d46c:	50                   	push   eax
c001d46d:	56                   	push   esi
c001d46e:	e8 48 fb ff ff       	call   c001cfbb <Vm::readByteFromReal(unsigned short, unsigned short)>
c001d473:	59                   	pop    ecx
c001d474:	0f b6 c0             	movzx  eax,al
c001d477:	5e                   	pop    esi
c001d478:	50                   	push   eax
c001d479:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d47d:	50                   	push   eax
c001d47e:	e8 55 f8 ff ff       	call   c001ccd8 <Vm::outbv(unsigned short, unsigned char)>
c001d483:	83 c4 10             	add    esp,0x10
c001d486:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d489:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d48d:	74 03                	je     c001d492 <Vm::faultHandler(regs*)+0x463>
c001d48f:	48                   	dec    eax
c001d490:	eb 01                	jmp    c001d493 <Vm::faultHandler(regs*)+0x464>
c001d492:	40                   	inc    eax
c001d493:	0f b7 c0             	movzx  eax,ax
c001d496:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d499:	e9 66 01 00 00       	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d49e:	49                   	dec    ecx
c001d49f:	80 f9 05             	cmp    cl,0x5
c001d4a2:	77 1f                	ja     c001d4c3 <Vm::faultHandler(regs*)+0x494>
c001d4a4:	0f b6 c9             	movzx  ecx,cl
c001d4a7:	ff 24 8d 38 96 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd69c8]
c001d4ae:	89 ee                	mov    esi,ebp
c001d4b0:	eb 11                	jmp    c001d4c3 <Vm::faultHandler(regs*)+0x494>
c001d4b2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001d4b5:	eb 0c                	jmp    c001d4c3 <Vm::faultHandler(regs*)+0x494>
c001d4b7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d4ba:	eb 07                	jmp    c001d4c3 <Vm::faultHandler(regs*)+0x494>
c001d4bc:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001d4bf:	eb 02                	jmp    c001d4c3 <Vm::faultHandler(regs*)+0x494>
c001d4c1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001d4c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001d4c6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d4cb:	74 0c                	je     c001d4d9 <Vm::faultHandler(regs*)+0x4aa>
c001d4cd:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d4d3:	0f 87 86 01 00 00    	ja     c001d65f <Vm::faultHandler(regs*)+0x630>
c001d4d9:	0f b7 d6             	movzx  edx,si
c001d4dc:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d4df:	0f b7 c1             	movzx  eax,cx
c001d4e2:	81 e7 00 04 00 00    	and    edi,0x400
c001d4e8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001d4eb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d4f0:	74 1d                	je     c001d50f <Vm::faultHandler(regs*)+0x4e0>
c001d4f2:	55                   	push   ebp
c001d4f3:	55                   	push   ebp
c001d4f4:	50                   	push   eax
c001d4f5:	52                   	push   edx
c001d4f6:	e8 e3 fa ff ff       	call   c001cfde <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001d4fb:	83 c4 10             	add    esp,0x10
c001d4fe:	89 f2                	mov    edx,esi
c001d500:	ef                   	out    dx,eax
c001d501:	85 ff                	test   edi,edi
c001d503:	74 05                	je     c001d50a <Vm::faultHandler(regs*)+0x4db>
c001d505:	83 e9 04             	sub    ecx,0x4
c001d508:	eb 21                	jmp    c001d52b <Vm::faultHandler(regs*)+0x4fc>
c001d50a:	83 c1 04             	add    ecx,0x4
c001d50d:	eb 1c                	jmp    c001d52b <Vm::faultHandler(regs*)+0x4fc>
c001d50f:	55                   	push   ebp
c001d510:	55                   	push   ebp
c001d511:	50                   	push   eax
c001d512:	52                   	push   edx
c001d513:	e8 b4 fa ff ff       	call   c001cfcc <Vm::readWordFromReal(unsigned short, unsigned short)>
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	89 f2                	mov    edx,esi
c001d51d:	66 ef                	out    dx,ax
c001d51f:	85 ff                	test   edi,edi
c001d521:	74 05                	je     c001d528 <Vm::faultHandler(regs*)+0x4f9>
c001d523:	83 e9 02             	sub    ecx,0x2
c001d526:	eb 03                	jmp    c001d52b <Vm::faultHandler(regs*)+0x4fc>
c001d528:	83 c1 02             	add    ecx,0x2
c001d52b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d531:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001d534:	e9 cb 00 00 00       	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d539:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d540:	83 ec 0c             	sub    esp,0xc
c001d543:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d547:	50                   	push   eax
c001d548:	e8 85 f7 ff ff       	call   c001ccd2 <Vm::inbv(unsigned short)>
c001d54d:	0f b6 c0             	movzx  eax,al
c001d550:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d553:	eb 3f                	jmp    c001d594 <Vm::faultHandler(regs*)+0x565>
c001d555:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d55a:	74 07                	je     c001d563 <Vm::faultHandler(regs*)+0x534>
c001d55c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d560:	ed                   	in     eax,dx
c001d561:	eb 14                	jmp    c001d577 <Vm::faultHandler(regs*)+0x548>
c001d563:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001d566:	66 31 c9             	xor    cx,cx
c001d569:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001d56c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d570:	66 ed                	in     ax,dx
c001d572:	0f b7 c0             	movzx  eax,ax
c001d575:	09 c8                	or     eax,ecx
c001d577:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d57a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d57e:	e9 84 00 00 00       	jmp    c001d607 <Vm::faultHandler(regs*)+0x5d8>
c001d583:	52                   	push   edx
c001d584:	52                   	push   edx
c001d585:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d589:	50                   	push   eax
c001d58a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d58e:	50                   	push   eax
c001d58f:	e8 44 f7 ff ff       	call   c001ccd8 <Vm::outbv(unsigned short, unsigned char)>
c001d594:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d598:	eb 53                	jmp    c001d5ed <Vm::faultHandler(regs*)+0x5be>
c001d59a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d59d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d5a1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d5a6:	74 03                	je     c001d5ab <Vm::faultHandler(regs*)+0x57c>
c001d5a8:	ef                   	out    dx,eax
c001d5a9:	eb cf                	jmp    c001d57a <Vm::faultHandler(regs*)+0x54b>
c001d5ab:	66 ef                	out    dx,ax
c001d5ad:	eb cb                	jmp    c001d57a <Vm::faultHandler(regs*)+0x54b>
c001d5af:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d5b6:	83 ec 0c             	sub    esp,0xc
c001d5b9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d5bd:	50                   	push   eax
c001d5be:	e8 0f f7 ff ff       	call   c001ccd2 <Vm::inbv(unsigned short)>
c001d5c3:	0f b6 c0             	movzx  eax,al
c001d5c6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d5c9:	eb 1f                	jmp    c001d5ea <Vm::faultHandler(regs*)+0x5bb>
c001d5cb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d5ce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d5d3:	74 03                	je     c001d5d8 <Vm::faultHandler(regs*)+0x5a9>
c001d5d5:	ed                   	in     eax,dx
c001d5d6:	eb 0d                	jmp    c001d5e5 <Vm::faultHandler(regs*)+0x5b6>
c001d5d8:	66 ed                	in     ax,dx
c001d5da:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001d5dd:	0f b7 c0             	movzx  eax,ax
c001d5e0:	66 31 d2             	xor    dx,dx
c001d5e3:	09 d0                	or     eax,edx
c001d5e5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d5e8:	eb 1a                	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d5ea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d5ed:	83 c4 10             	add    esp,0x10
c001d5f0:	eb 15                	jmp    c001d607 <Vm::faultHandler(regs*)+0x5d8>
c001d5f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d5f5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d5f8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d5fd:	74 03                	je     c001d602 <Vm::faultHandler(regs*)+0x5d3>
c001d5ff:	ef                   	out    dx,eax
c001d600:	eb 02                	jmp    c001d604 <Vm::faultHandler(regs*)+0x5d5>
c001d602:	66 ef                	out    dx,ax
c001d604:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d607:	b0 01                	mov    al,0x1
c001d609:	eb 56                	jmp    c001d661 <Vm::faultHandler(regs*)+0x632>
c001d60b:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001d60f:	50                   	push   eax
c001d610:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001d614:	50                   	push   eax
c001d615:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001d619:	50                   	push   eax
c001d61a:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001d61e:	50                   	push   eax
c001d61f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d623:	50                   	push   eax
c001d624:	52                   	push   edx
c001d625:	52                   	push   edx
c001d626:	68 f1 95 02 c0       	push   0xc00295f1
c001d62b:	e8 03 50 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001d630:	83 c4 20             	add    esp,0x20
c001d633:	83 ec 0c             	sub    esp,0xc
c001d636:	6a 60                	push   0x60
c001d638:	e8 95 f6 ff ff       	call   c001ccd2 <Vm::inbv(unsigned short)>
c001d63d:	83 c4 10             	add    esp,0x10
c001d640:	3c 1c                	cmp    al,0x1c
c001d642:	74 04                	je     c001d648 <Vm::faultHandler(regs*)+0x619>
c001d644:	3c 5a                	cmp    al,0x5a
c001d646:	75 eb                	jne    c001d633 <Vm::faultHandler(regs*)+0x604>
c001d648:	3c 5a                	cmp    al,0x5a
c001d64a:	74 04                	je     c001d650 <Vm::faultHandler(regs*)+0x621>
c001d64c:	3c 1c                	cmp    al,0x1c
c001d64e:	75 0f                	jne    c001d65f <Vm::faultHandler(regs*)+0x630>
c001d650:	83 ec 0c             	sub    esp,0xc
c001d653:	6a 60                	push   0x60
c001d655:	e8 78 f6 ff ff       	call   c001ccd2 <Vm::inbv(unsigned short)>
c001d65a:	83 c4 10             	add    esp,0x10
c001d65d:	eb e9                	jmp    c001d648 <Vm::faultHandler(regs*)+0x619>
c001d65f:	31 c0                	xor    eax,eax
c001d661:	83 c4 1c             	add    esp,0x1c
c001d664:	5b                   	pop    ebx
c001d665:	5e                   	pop    esi
c001d666:	5f                   	pop    edi
c001d667:	5d                   	pop    ebp
c001d668:	c3                   	ret    

c001d669 <Vm::fpuInternalTo32(unsigned long long)>:
c001d669:	57                   	push   edi
c001d66a:	56                   	push   esi
c001d66b:	53                   	push   ebx
c001d66c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d674:	89 d6                	mov    esi,edx
c001d676:	89 d7                	mov    edi,edx
c001d678:	89 c1                	mov    ecx,eax
c001d67a:	c1 ef 14             	shr    edi,0x14
c001d67d:	89 d3                	mov    ebx,edx
c001d67f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001d685:	31 d2                	xor    edx,edx
c001d687:	89 f8                	mov    eax,edi
c001d689:	81 e6 00 00 00 80    	and    esi,0x80000000
c001d68f:	bf ff 00 00 00       	mov    edi,0xff
c001d694:	05 80 fc ff ff       	add    eax,0xfffffc80
c001d699:	83 d2 ff             	adc    edx,0xffffffff
c001d69c:	39 c7                	cmp    edi,eax
c001d69e:	bf 00 00 00 00       	mov    edi,0x0
c001d6a3:	19 d7                	sbb    edi,edx
c001d6a5:	72 15                	jb     c001d6bc <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001d6a7:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001d6ab:	c1 e0 17             	shl    eax,0x17
c001d6ae:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001d6b4:	09 f1                	or     ecx,esi
c001d6b6:	09 c1                	or     ecx,eax
c001d6b8:	89 cf                	mov    edi,ecx
c001d6ba:	eb 02                	jmp    c001d6be <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001d6bc:	31 ff                	xor    edi,edi
c001d6be:	89 f8                	mov    eax,edi
c001d6c0:	5b                   	pop    ebx
c001d6c1:	5e                   	pop    esi
c001d6c2:	5f                   	pop    edi
c001d6c3:	c3                   	ret    

c001d6c4 <Vm::fpuInternalTo64(unsigned long long)>:
c001d6c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6cc:	c3                   	ret    

c001d6cd <Vm::fpu32ToInternal(unsigned int)>:
c001d6cd:	57                   	push   edi
c001d6ce:	31 ff                	xor    edi,edi
c001d6d0:	56                   	push   esi
c001d6d1:	53                   	push   ebx
c001d6d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6d6:	89 cb                	mov    ebx,ecx
c001d6d8:	89 ce                	mov    esi,ecx
c001d6da:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001d6e0:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001d6e6:	c1 e9 17             	shr    ecx,0x17
c001d6e9:	89 f0                	mov    eax,esi
c001d6eb:	0f b6 d1             	movzx  edx,cl
c001d6ee:	81 c2 80 03 00 00    	add    edx,0x380
c001d6f4:	89 d1                	mov    ecx,edx
c001d6f6:	89 fa                	mov    edx,edi
c001d6f8:	c1 e1 14             	shl    ecx,0x14
c001d6fb:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001d6ff:	c1 e0 1d             	shl    eax,0x1d
c001d702:	89 d7                	mov    edi,edx
c001d704:	89 c6                	mov    esi,eax
c001d706:	89 ca                	mov    edx,ecx
c001d708:	89 f0                	mov    eax,esi
c001d70a:	09 fa                	or     edx,edi
c001d70c:	09 da                	or     edx,ebx
c001d70e:	5b                   	pop    ebx
c001d70f:	5e                   	pop    esi
c001d710:	5f                   	pop    edi
c001d711:	c3                   	ret    

c001d712 <Vm::fpu64ToInternal(unsigned long long)>:
c001d712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d716:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d71a:	c3                   	ret    

c001d71b <Vm::fpuFloatToLong(unsigned long long)>:
c001d71b:	57                   	push   edi
c001d71c:	31 c0                	xor    eax,eax
c001d71e:	56                   	push   esi
c001d71f:	31 d2                	xor    edx,edx
c001d721:	53                   	push   ebx
c001d722:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d726:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d72a:	89 d9                	mov    ecx,ebx
c001d72c:	c1 e9 14             	shr    ecx,0x14
c001d72f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001d735:	89 cf                	mov    edi,ecx
c001d737:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001d73d:	78 33                	js     c001d772 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d73f:	89 d9                	mov    ecx,ebx
c001d741:	89 f0                	mov    eax,esi
c001d743:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d749:	81 c9 00 00 10 00    	or     ecx,0x100000
c001d74f:	89 ca                	mov    edx,ecx
c001d751:	b9 34 00 00 00       	mov    ecx,0x34
c001d756:	29 f9                	sub    ecx,edi
c001d758:	0f ad d0             	shrd   eax,edx,cl
c001d75b:	d3 fa                	sar    edx,cl
c001d75d:	f6 c1 20             	test   cl,0x20
c001d760:	74 05                	je     c001d767 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001d762:	89 d0                	mov    eax,edx
c001d764:	c1 fa 1f             	sar    edx,0x1f
c001d767:	85 db                	test   ebx,ebx
c001d769:	79 07                	jns    c001d772 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d76b:	f7 d8                	neg    eax
c001d76d:	83 d2 00             	adc    edx,0x0
c001d770:	f7 da                	neg    edx
c001d772:	5b                   	pop    ebx
c001d773:	5e                   	pop    esi
c001d774:	5f                   	pop    edi
c001d775:	c3                   	ret    

c001d776 <Vm::fpuULongToFloat(unsigned long long)>:
c001d776:	57                   	push   edi
c001d777:	31 c9                	xor    ecx,ecx
c001d779:	56                   	push   esi
c001d77a:	53                   	push   ebx
c001d77b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d77f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d783:	0f ba e7 14          	bt     edi,0x14
c001d787:	72 07                	jb     c001d790 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001d789:	01 f6                	add    esi,esi
c001d78b:	11 ff                	adc    edi,edi
c001d78d:	41                   	inc    ecx
c001d78e:	eb f3                	jmp    c001d783 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001d790:	89 fa                	mov    edx,edi
c001d792:	89 f0                	mov    eax,esi
c001d794:	bb 33 04 00 00       	mov    ebx,0x433
c001d799:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001d79f:	29 cb                	sub    ebx,ecx
c001d7a1:	89 d9                	mov    ecx,ebx
c001d7a3:	5b                   	pop    ebx
c001d7a4:	c1 e1 14             	shl    ecx,0x14
c001d7a7:	5e                   	pop    esi
c001d7a8:	09 ca                	or     edx,ecx
c001d7aa:	5f                   	pop    edi
c001d7ab:	c3                   	ret    

c001d7ac <Vm::fpuLongToFloat(long long)>:
c001d7ac:	56                   	push   esi
c001d7ad:	31 c0                	xor    eax,eax
c001d7af:	53                   	push   ebx
c001d7b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7b8:	39 c8                	cmp    eax,ecx
c001d7ba:	19 d8                	sbb    eax,ebx
c001d7bc:	7d 04                	jge    c001d7c2 <Vm::fpuLongToFloat(long long)+0x16>
c001d7be:	31 f6                	xor    esi,esi
c001d7c0:	eb 0c                	jmp    c001d7ce <Vm::fpuLongToFloat(long long)+0x22>
c001d7c2:	f7 d9                	neg    ecx
c001d7c4:	be 01 00 00 00       	mov    esi,0x1
c001d7c9:	83 d3 00             	adc    ebx,0x0
c001d7cc:	f7 db                	neg    ebx
c001d7ce:	31 c0                	xor    eax,eax
c001d7d0:	0f ba e3 14          	bt     ebx,0x14
c001d7d4:	72 07                	jb     c001d7dd <Vm::fpuLongToFloat(long long)+0x31>
c001d7d6:	01 c9                	add    ecx,ecx
c001d7d8:	11 db                	adc    ebx,ebx
c001d7da:	40                   	inc    eax
c001d7db:	eb f3                	jmp    c001d7d0 <Vm::fpuLongToFloat(long long)+0x24>
c001d7dd:	ba 33 04 00 00       	mov    edx,0x433
c001d7e2:	29 c2                	sub    edx,eax
c001d7e4:	89 c8                	mov    eax,ecx
c001d7e6:	c1 e2 14             	shl    edx,0x14
c001d7e9:	89 d9                	mov    ecx,ebx
c001d7eb:	89 f3                	mov    ebx,esi
c001d7ed:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d7f3:	09 ca                	or     edx,ecx
c001d7f5:	84 db                	test   bl,bl
c001d7f7:	74 06                	je     c001d7ff <Vm::fpuLongToFloat(long long)+0x53>
c001d7f9:	81 ca 00 00 00 80    	or     edx,0x80000000
c001d7ff:	5b                   	pop    ebx
c001d800:	5e                   	pop    esi
c001d801:	c3                   	ret    

c001d802 <Vm::fpuGet0()>:
c001d802:	31 c0                	xor    eax,eax
c001d804:	31 d2                	xor    edx,edx
c001d806:	c3                   	ret    

c001d807 <Vm::fpuGet1()>:
c001d807:	b8 01 00 00 00       	mov    eax,0x1
c001d80c:	31 d2                	xor    edx,edx
c001d80e:	c3                   	ret    

c001d80f <Vm::fpuGetPi()>:
c001d80f:	b8 03 00 00 00       	mov    eax,0x3
c001d814:	31 d2                	xor    edx,edx
c001d816:	c3                   	ret    

c001d817 <Vm::fpuGetLog2E()>:
c001d817:	83 ec 18             	sub    esp,0x18
c001d81a:	68 50 96 02 c0       	push   0xc0029650
c001d81f:	e8 73 b8 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001d824:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d829:	31 d2                	xor    edx,edx
c001d82b:	83 c4 1c             	add    esp,0x1c
c001d82e:	c3                   	ret    

c001d82f <Vm::fpuGetLogE2()>:
c001d82f:	83 ec 18             	sub    esp,0x18
c001d832:	68 5c 96 02 c0       	push   0xc002965c
c001d837:	e8 5b b8 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001d83c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d841:	31 d2                	xor    edx,edx
c001d843:	83 c4 1c             	add    esp,0x1c
c001d846:	c3                   	ret    

c001d847 <Vm::fpuGetLog210()>:
c001d847:	83 ec 18             	sub    esp,0x18
c001d84a:	68 68 96 02 c0       	push   0xc0029668
c001d84f:	e8 43 b8 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001d854:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d859:	31 d2                	xor    edx,edx
c001d85b:	83 c4 1c             	add    esp,0x1c
c001d85e:	c3                   	ret    

c001d85f <Vm::fpuGetLog102()>:
c001d85f:	83 ec 18             	sub    esp,0x18
c001d862:	68 75 96 02 c0       	push   0xc0029675
c001d867:	e8 2b b8 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001d86c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d871:	31 d2                	xor    edx,edx
c001d873:	83 c4 1c             	add    esp,0x1c
c001d876:	c3                   	ret    

c001d877 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d87b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d87f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d883:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d887:	0f 92 c0             	setb   al
c001d88a:	c3                   	ret    

c001d88b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d88b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d893:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d897:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d89b:	09 c2                	or     edx,eax
c001d89d:	0f 94 c0             	sete   al
c001d8a0:	c3                   	ret    

c001d8a1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d8a1:	57                   	push   edi
c001d8a2:	56                   	push   esi
c001d8a3:	53                   	push   ebx
c001d8a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d8ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d8b0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d8b4:	57                   	push   edi
c001d8b5:	56                   	push   esi
c001d8b6:	53                   	push   ebx
c001d8b7:	51                   	push   ecx
c001d8b8:	e8 ce ff ff ff       	call   c001d88b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d8bd:	83 c4 10             	add    esp,0x10
c001d8c0:	88 c2                	mov    dl,al
c001d8c2:	31 c0                	xor    eax,eax
c001d8c4:	84 d2                	test   dl,dl
c001d8c6:	75 0c                	jne    c001d8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d8c8:	57                   	push   edi
c001d8c9:	56                   	push   esi
c001d8ca:	53                   	push   ebx
c001d8cb:	51                   	push   ecx
c001d8cc:	e8 a6 ff ff ff       	call   c001d877 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d8d1:	83 c4 10             	add    esp,0x10
c001d8d4:	83 e0 01             	and    eax,0x1
c001d8d7:	5b                   	pop    ebx
c001d8d8:	88 c1                	mov    cl,al
c001d8da:	83 e2 01             	and    edx,0x1
c001d8dd:	a0 01 c6 02 c0       	mov    al,ds:0xc002c601
c001d8e2:	c1 e2 06             	shl    edx,0x6
c001d8e5:	83 e0 ba             	and    eax,0xffffffba
c001d8e8:	5e                   	pop    esi
c001d8e9:	09 c8                	or     eax,ecx
c001d8eb:	5f                   	pop    edi
c001d8ec:	09 d0                	or     eax,edx
c001d8ee:	a2 01 c6 02 c0       	mov    ds:0xc002c601,al
c001d8f3:	c3                   	ret    

c001d8f4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d8f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d8fc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d900:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d904:	c3                   	ret    

c001d905 <Vm::fpuAbs(unsigned long long)>:
c001d905:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d909:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d90d:	c3                   	ret    

c001d90e <Vm::fpuChs(unsigned long long)>:
c001d90e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d912:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d916:	f7 d8                	neg    eax
c001d918:	83 d2 00             	adc    edx,0x0
c001d91b:	f7 da                	neg    edx
c001d91d:	c3                   	ret    

c001d91e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d91e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d922:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d927:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d92b:	eb c7                	jmp    c001d8f4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d92d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d92d:	53                   	push   ebx
c001d92e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d936:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d93a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d93e:	0f af ca             	imul   ecx,edx
c001d941:	0f af d8             	imul   ebx,eax
c001d944:	f7 e2                	mul    edx
c001d946:	01 d9                	add    ecx,ebx
c001d948:	5b                   	pop    ebx
c001d949:	01 ca                	add    edx,ecx
c001d94b:	c3                   	ret    

c001d94c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d94c:	83 ec 0c             	sub    esp,0xc
c001d94f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d957:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d95b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d95f:	e8 c8 65 00 00       	call   c0023f2c <__udivdi3>
c001d964:	83 c4 1c             	add    esp,0x1c
c001d967:	c3                   	ret    

c001d968 <Vm::fpuSquare(unsigned long long)>:
c001d968:	50                   	push   eax
c001d969:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d96d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d971:	52                   	push   edx
c001d972:	50                   	push   eax
c001d973:	52                   	push   edx
c001d974:	50                   	push   eax
c001d975:	e8 b3 ff ff ff       	call   c001d92d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d97a:	83 c4 14             	add    esp,0x14
c001d97d:	c3                   	ret    

c001d97e <Vm::fpuGetReg(int)>:
c001d97e:	83 ec 0c             	sub    esp,0xc
c001d981:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d986:	76 10                	jbe    c001d998 <Vm::fpuGetReg(int)+0x1a>
c001d988:	83 ec 0c             	sub    esp,0xc
c001d98b:	68 82 96 02 c0       	push   0xc0029682
c001d990:	e8 02 b7 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001d995:	83 c4 10             	add    esp,0x10
c001d998:	a0 01 c6 02 c0       	mov    al,ds:0xc002c601
c001d99d:	b9 08 00 00 00       	mov    ecx,0x8
c001d9a2:	c0 e8 03             	shr    al,0x3
c001d9a5:	83 e0 07             	and    eax,0x7
c001d9a8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d9ac:	99                   	cdq    
c001d9ad:	f7 f9                	idiv   ecx
c001d9af:	8b 04 d5 04 c6 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd39fc]
c001d9b6:	8b 14 d5 08 c6 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd39f8]
c001d9bd:	83 c4 0c             	add    esp,0xc
c001d9c0:	c3                   	ret    

c001d9c1 <Vm::fpuSetReg(int, unsigned long long)>:
c001d9c1:	57                   	push   edi
c001d9c2:	56                   	push   esi
c001d9c3:	52                   	push   edx
c001d9c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d9cc:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d9d1:	76 10                	jbe    c001d9e3 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d9d3:	83 ec 0c             	sub    esp,0xc
c001d9d6:	68 95 96 02 c0       	push   0xc0029695
c001d9db:	e8 b7 b6 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001d9e0:	83 c4 10             	add    esp,0x10
c001d9e3:	a0 01 c6 02 c0       	mov    al,ds:0xc002c601
c001d9e8:	b9 08 00 00 00       	mov    ecx,0x8
c001d9ed:	c0 e8 03             	shr    al,0x3
c001d9f0:	83 e0 07             	and    eax,0x7
c001d9f3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d9f7:	99                   	cdq    
c001d9f8:	f7 f9                	idiv   ecx
c001d9fa:	89 34 d5 04 c6 02 c0 	mov    DWORD PTR [edx*8-0x3ffd39fc],esi
c001da01:	89 3c d5 08 c6 02 c0 	mov    DWORD PTR [edx*8-0x3ffd39f8],edi
c001da08:	58                   	pop    eax
c001da09:	5e                   	pop    esi
c001da0a:	5f                   	pop    edi
c001da0b:	c3                   	ret    

c001da0c <Vm::fpuPush(unsigned long long)>:
c001da0c:	a0 01 c6 02 c0       	mov    al,ds:0xc002c601
c001da11:	c0 e8 03             	shr    al,0x3
c001da14:	83 e0 07             	and    eax,0x7
c001da17:	83 c0 07             	add    eax,0x7
c001da1a:	88 c2                	mov    dl,al
c001da1c:	83 e0 07             	and    eax,0x7
c001da1f:	83 e2 07             	and    edx,0x7
c001da22:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001da29:	8a 15 01 c6 02 c0    	mov    dl,BYTE PTR ds:0xc002c601
c001da2f:	83 e2 c7             	and    edx,0xffffffc7
c001da32:	09 ca                	or     edx,ecx
c001da34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da38:	88 15 01 c6 02 c0    	mov    BYTE PTR ds:0xc002c601,dl
c001da3e:	89 0c c5 08 c6 02 c0 	mov    DWORD PTR [eax*8-0x3ffd39f8],ecx
c001da45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da49:	89 14 c5 04 c6 02 c0 	mov    DWORD PTR [eax*8-0x3ffd39fc],edx
c001da50:	a1 44 c6 02 c0       	mov    eax,ds:0xc002c644
c001da55:	83 f8 08             	cmp    eax,0x8
c001da58:	75 08                	jne    c001da62 <Vm::fpuPush(unsigned long long)+0x56>
c001da5a:	80 0d 00 c6 02 c0 40 	or     BYTE PTR ds:0xc002c600,0x40
c001da61:	c3                   	ret    
c001da62:	40                   	inc    eax
c001da63:	a3 44 c6 02 c0       	mov    ds:0xc002c644,eax
c001da68:	c3                   	ret    

c001da69 <Vm::fpuPop()>:
c001da69:	8a 0d 01 c6 02 c0    	mov    cl,BYTE PTR ds:0xc002c601
c001da6f:	53                   	push   ebx
c001da70:	c0 e9 03             	shr    cl,0x3
c001da73:	8a 1d 01 c6 02 c0    	mov    bl,BYTE PTR ds:0xc002c601
c001da79:	83 e1 07             	and    ecx,0x7
c001da7c:	83 e3 c7             	and    ebx,0xffffffc7
c001da7f:	8b 04 cd 04 c6 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd39fc]
c001da86:	8b 14 cd 08 c6 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd39f8]
c001da8d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001da94:	83 e1 38             	and    ecx,0x38
c001da97:	09 d9                	or     ecx,ebx
c001da99:	88 0d 01 c6 02 c0    	mov    BYTE PTR ds:0xc002c601,cl
c001da9f:	8b 0d 44 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c644
c001daa5:	85 c9                	test   ecx,ecx
c001daa7:	74 09                	je     c001dab2 <Vm::fpuPop()+0x49>
c001daa9:	49                   	dec    ecx
c001daaa:	89 0d 44 c6 02 c0    	mov    DWORD PTR ds:0xc002c644,ecx
c001dab0:	eb 07                	jmp    c001dab9 <Vm::fpuPop()+0x50>
c001dab2:	80 0d 00 c6 02 c0 40 	or     BYTE PTR ds:0xc002c600,0x40
c001dab9:	5b                   	pop    ebx
c001daba:	c3                   	ret    

c001dabb <Vm::x87Handler(regs*)>:
c001dabb:	55                   	push   ebp
c001dabc:	57                   	push   edi
c001dabd:	56                   	push   esi
c001dabe:	53                   	push   ebx
c001dabf:	83 ec 1c             	sub    esp,0x1c
c001dac2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dac6:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001dacb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001dace:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001dad6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001dada:	50                   	push   eax
c001dadb:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001dadf:	50                   	push   eax
c001dae0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dae4:	50                   	push   eax
c001dae5:	53                   	push   ebx
c001dae6:	e8 b1 b3 ff ff       	call   c0018e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001daeb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001daee:	83 c4 10             	add    esp,0x10
c001daf1:	89 c6                	mov    esi,eax
c001daf3:	80 fa d9             	cmp    dl,0xd9
c001daf6:	0f 85 52 01 00 00    	jne    c001dc4e <Vm::x87Handler(regs*)+0x193>
c001dafc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001db00:	8d 50 20             	lea    edx,[eax+0x20]
c001db03:	80 fa 0e             	cmp    dl,0xe
c001db06:	0f 87 86 00 00 00    	ja     c001db92 <Vm::x87Handler(regs*)+0xd7>
c001db0c:	0f b6 d2             	movzx  edx,dl
c001db0f:	ff 24 95 a8 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6958]
c001db16:	e8 e7 fc ff ff       	call   c001d802 <Vm::fpuGet0()>
c001db1b:	eb 05                	jmp    c001db22 <Vm::x87Handler(regs*)+0x67>
c001db1d:	e8 e5 fc ff ff       	call   c001d807 <Vm::fpuGet1()>
c001db22:	57                   	push   edi
c001db23:	57                   	push   edi
c001db24:	52                   	push   edx
c001db25:	50                   	push   eax
c001db26:	e8 e1 fe ff ff       	call   c001da0c <Vm::fpuPush(unsigned long long)>
c001db2b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001db2f:	83 c4 10             	add    esp,0x10
c001db32:	b0 01                	mov    al,0x1
c001db34:	e9 e3 09 00 00       	jmp    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001db39:	83 ec 0c             	sub    esp,0xc
c001db3c:	6a 00                	push   0x0
c001db3e:	e8 3b fe ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001db43:	59                   	pop    ecx
c001db44:	5e                   	pop    esi
c001db45:	52                   	push   edx
c001db46:	50                   	push   eax
c001db47:	e8 c2 fd ff ff       	call   c001d90e <Vm::fpuChs(unsigned long long)>
c001db4c:	eb 13                	jmp    c001db61 <Vm::x87Handler(regs*)+0xa6>
c001db4e:	83 ec 0c             	sub    esp,0xc
c001db51:	6a 00                	push   0x0
c001db53:	e8 26 fe ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001db58:	5f                   	pop    edi
c001db59:	5d                   	pop    ebp
c001db5a:	52                   	push   edx
c001db5b:	50                   	push   eax
c001db5c:	e8 a4 fd ff ff       	call   c001d905 <Vm::fpuAbs(unsigned long long)>
c001db61:	83 c4 0c             	add    esp,0xc
c001db64:	52                   	push   edx
c001db65:	50                   	push   eax
c001db66:	6a 00                	push   0x0
c001db68:	e8 54 fe ff ff       	call   c001d9c1 <Vm::fpuSetReg(int, unsigned long long)>
c001db6d:	eb bc                	jmp    c001db2b <Vm::x87Handler(regs*)+0x70>
c001db6f:	e8 d3 fc ff ff       	call   c001d847 <Vm::fpuGetLog210()>
c001db74:	eb ac                	jmp    c001db22 <Vm::x87Handler(regs*)+0x67>
c001db76:	e8 9c fc ff ff       	call   c001d817 <Vm::fpuGetLog2E()>
c001db7b:	eb a5                	jmp    c001db22 <Vm::x87Handler(regs*)+0x67>
c001db7d:	e8 8d fc ff ff       	call   c001d80f <Vm::fpuGetPi()>
c001db82:	eb 9e                	jmp    c001db22 <Vm::x87Handler(regs*)+0x67>
c001db84:	e8 d6 fc ff ff       	call   c001d85f <Vm::fpuGetLog102()>
c001db89:	eb 97                	jmp    c001db22 <Vm::x87Handler(regs*)+0x67>
c001db8b:	e8 9f fc ff ff       	call   c001d82f <Vm::fpuGetLogE2()>
c001db90:	eb 90                	jmp    c001db22 <Vm::x87Handler(regs*)+0x67>
c001db92:	8d 50 40             	lea    edx,[eax+0x40]
c001db95:	80 fa 07             	cmp    dl,0x7
c001db98:	77 15                	ja     c001dbaf <Vm::x87Handler(regs*)+0xf4>
c001db9a:	83 ec 0c             	sub    esp,0xc
c001db9d:	2d c0 00 00 00       	sub    eax,0xc0
c001dba2:	50                   	push   eax
c001dba3:	e8 d6 fd ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dba8:	59                   	pop    ecx
c001dba9:	5e                   	pop    esi
c001dbaa:	e9 75 ff ff ff       	jmp    c001db24 <Vm::x87Handler(regs*)+0x69>
c001dbaf:	8d 50 38             	lea    edx,[eax+0x38]
c001dbb2:	80 fa 07             	cmp    dl,0x7
c001dbb5:	77 3c                	ja     c001dbf3 <Vm::x87Handler(regs*)+0x138>
c001dbb7:	83 ec 0c             	sub    esp,0xc
c001dbba:	2d c8 00 00 00       	sub    eax,0xc8
c001dbbf:	50                   	push   eax
c001dbc0:	e8 b9 fd ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dbc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbcc:	89 c6                	mov    esi,eax
c001dbce:	89 d7                	mov    edi,edx
c001dbd0:	e8 a9 fd ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dbd5:	83 c4 0c             	add    esp,0xc
c001dbd8:	52                   	push   edx
c001dbd9:	50                   	push   eax
c001dbda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dbde:	2d c8 00 00 00       	sub    eax,0xc8
c001dbe3:	50                   	push   eax
c001dbe4:	e8 d8 fd ff ff       	call   c001d9c1 <Vm::fpuSetReg(int, unsigned long long)>
c001dbe9:	83 c4 0c             	add    esp,0xc
c001dbec:	57                   	push   edi
c001dbed:	56                   	push   esi
c001dbee:	e9 73 ff ff ff       	jmp    c001db66 <Vm::x87Handler(regs*)+0xab>
c001dbf3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dbf7:	84 d2                	test   dl,dl
c001dbf9:	75 0f                	jne    c001dc0a <Vm::x87Handler(regs*)+0x14f>
c001dbfb:	83 ec 0c             	sub    esp,0xc
c001dbfe:	ff 36                	push   DWORD PTR [esi]
c001dc00:	e8 c8 fa ff ff       	call   c001d6cd <Vm::fpu32ToInternal(unsigned int)>
c001dc05:	e9 bf 00 00 00       	jmp    c001dcc9 <Vm::x87Handler(regs*)+0x20e>
c001dc0a:	80 fa 03             	cmp    dl,0x3
c001dc0d:	75 13                	jne    c001dc22 <Vm::x87Handler(regs*)+0x167>
c001dc0f:	e8 55 fe ff ff       	call   c001da69 <Vm::fpuPop()>
c001dc14:	55                   	push   ebp
c001dc15:	55                   	push   ebp
c001dc16:	52                   	push   edx
c001dc17:	50                   	push   eax
c001dc18:	e8 4c fa ff ff       	call   c001d669 <Vm::fpuInternalTo32(unsigned long long)>
c001dc1d:	e9 88 00 00 00       	jmp    c001dcaa <Vm::x87Handler(regs*)+0x1ef>
c001dc22:	80 fa 05             	cmp    dl,0x5
c001dc25:	75 0e                	jne    c001dc35 <Vm::x87Handler(regs*)+0x17a>
c001dc27:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dc2a:	66 a3 02 c6 02 c0    	mov    ds:0xc002c602,ax
c001dc30:	e9 df 00 00 00       	jmp    c001dd14 <Vm::x87Handler(regs*)+0x259>
c001dc35:	31 c0                	xor    eax,eax
c001dc37:	80 fa 07             	cmp    dl,0x7
c001dc3a:	0f 85 dc 08 00 00    	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001dc40:	66 a1 02 c6 02 c0    	mov    ax,ds:0xc002c602
c001dc46:	66 89 06             	mov    WORD PTR [esi],ax
c001dc49:	e9 c6 00 00 00       	jmp    c001dd14 <Vm::x87Handler(regs*)+0x259>
c001dc4e:	80 fa d8             	cmp    dl,0xd8
c001dc51:	0f 84 c9 00 00 00    	je     c001dd20 <Vm::x87Handler(regs*)+0x265>
c001dc57:	80 fa dc             	cmp    dl,0xdc
c001dc5a:	0f 84 0d 02 00 00    	je     c001de6d <Vm::x87Handler(regs*)+0x3b2>
c001dc60:	80 fa de             	cmp    dl,0xde
c001dc63:	0f 84 cd 02 00 00    	je     c001df36 <Vm::x87Handler(regs*)+0x47b>
c001dc69:	80 fa dd             	cmp    dl,0xdd
c001dc6c:	0f 84 5f 04 00 00    	je     c001e0d1 <Vm::x87Handler(regs*)+0x616>
c001dc72:	80 fa da             	cmp    dl,0xda
c001dc75:	0f 84 24 05 00 00    	je     c001e19f <Vm::x87Handler(regs*)+0x6e4>
c001dc7b:	80 fa df             	cmp    dl,0xdf
c001dc7e:	0f 84 68 05 00 00    	je     c001e1ec <Vm::x87Handler(regs*)+0x731>
c001dc84:	31 c0                	xor    eax,eax
c001dc86:	80 fa db             	cmp    dl,0xdb
c001dc89:	0f 85 8d 08 00 00    	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001dc8f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dc93:	80 fa 03             	cmp    dl,0x3
c001dc96:	0f 85 70 06 00 00    	jne    c001e30c <Vm::x87Handler(regs*)+0x851>
c001dc9c:	e8 c8 fd ff ff       	call   c001da69 <Vm::fpuPop()>
c001dca1:	55                   	push   ebp
c001dca2:	55                   	push   ebp
c001dca3:	52                   	push   edx
c001dca4:	50                   	push   eax
c001dca5:	e8 71 fa ff ff       	call   c001d71b <Vm::fpuFloatToLong(unsigned long long)>
c001dcaa:	83 c4 10             	add    esp,0x10
c001dcad:	89 06                	mov    DWORD PTR [esi],eax
c001dcaf:	eb 63                	jmp    c001dd14 <Vm::x87Handler(regs*)+0x259>
c001dcb1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dcb5:	84 d2                	test   dl,dl
c001dcb7:	0f 85 e6 05 00 00    	jne    c001e2a3 <Vm::x87Handler(regs*)+0x7e8>
c001dcbd:	57                   	push   edi
c001dcbe:	57                   	push   edi
c001dcbf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dcc2:	ff 36                	push   DWORD PTR [esi]
c001dcc4:	e8 49 fa ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001dcc9:	5e                   	pop    esi
c001dcca:	5f                   	pop    edi
c001dccb:	52                   	push   edx
c001dccc:	50                   	push   eax
c001dccd:	e8 3a fd ff ff       	call   c001da0c <Vm::fpuPush(unsigned long long)>
c001dcd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcd6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001dcd9:	e9 51 fe ff ff       	jmp    c001db2f <Vm::x87Handler(regs*)+0x74>
c001dcde:	80 fa 03             	cmp    dl,0x3
c001dce1:	0f 85 d7 06 00 00    	jne    c001e3be <Vm::x87Handler(regs*)+0x903>
c001dce7:	57                   	push   edi
c001dce8:	57                   	push   edi
c001dce9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dcec:	ff 36                	push   DWORD PTR [esi]
c001dcee:	e8 1f fa ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001dcf3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcfa:	89 c6                	mov    esi,eax
c001dcfc:	89 d7                	mov    edi,edx
c001dcfe:	e8 7b fc ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dd03:	57                   	push   edi
c001dd04:	56                   	push   esi
c001dd05:	52                   	push   edx
c001dd06:	50                   	push   eax
c001dd07:	e8 95 fb ff ff       	call   c001d8a1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001dd0c:	83 c4 20             	add    esp,0x20
c001dd0f:	e8 55 fd ff ff       	call   c001da69 <Vm::fpuPop()>
c001dd14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd18:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001dd1b:	e9 12 fe ff ff       	jmp    c001db32 <Vm::x87Handler(regs*)+0x77>
c001dd20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd24:	8d 50 40             	lea    edx,[eax+0x40]
c001dd27:	80 fa 07             	cmp    dl,0x7
c001dd2a:	77 29                	ja     c001dd55 <Vm::x87Handler(regs*)+0x29a>
c001dd2c:	83 ec 0c             	sub    esp,0xc
c001dd2f:	2d c0 00 00 00       	sub    eax,0xc0
c001dd34:	50                   	push   eax
c001dd35:	e8 44 fc ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dd3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dd41:	89 c6                	mov    esi,eax
c001dd43:	89 d7                	mov    edi,edx
c001dd45:	e8 34 fc ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dd4a:	57                   	push   edi
c001dd4b:	56                   	push   esi
c001dd4c:	52                   	push   edx
c001dd4d:	50                   	push   eax
c001dd4e:	e8 a1 fb ff ff       	call   c001d8f4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dd53:	eb 2f                	jmp    c001dd84 <Vm::x87Handler(regs*)+0x2c9>
c001dd55:	8d 50 38             	lea    edx,[eax+0x38]
c001dd58:	80 fa 07             	cmp    dl,0x7
c001dd5b:	77 2f                	ja     c001dd8c <Vm::x87Handler(regs*)+0x2d1>
c001dd5d:	83 ec 0c             	sub    esp,0xc
c001dd60:	2d c8 00 00 00       	sub    eax,0xc8
c001dd65:	50                   	push   eax
c001dd66:	e8 13 fc ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dd6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dd72:	89 c6                	mov    esi,eax
c001dd74:	89 d7                	mov    edi,edx
c001dd76:	e8 03 fc ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dd7b:	57                   	push   edi
c001dd7c:	56                   	push   esi
c001dd7d:	52                   	push   edx
c001dd7e:	50                   	push   eax
c001dd7f:	e8 a9 fb ff ff       	call   c001d92d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dd84:	83 c4 1c             	add    esp,0x1c
c001dd87:	e9 d8 fd ff ff       	jmp    c001db64 <Vm::x87Handler(regs*)+0xa9>
c001dd8c:	8d 50 30             	lea    edx,[eax+0x30]
c001dd8f:	80 fa 07             	cmp    dl,0x7
c001dd92:	77 0d                	ja     c001dda1 <Vm::x87Handler(regs*)+0x2e6>
c001dd94:	83 ec 0c             	sub    esp,0xc
c001dd97:	2d d0 00 00 00       	sub    eax,0xd0
c001dd9c:	e9 99 03 00 00       	jmp    c001e13a <Vm::x87Handler(regs*)+0x67f>
c001dda1:	8d 50 28             	lea    edx,[eax+0x28]
c001dda4:	80 fa 07             	cmp    dl,0x7
c001dda7:	77 0d                	ja     c001ddb6 <Vm::x87Handler(regs*)+0x2fb>
c001dda9:	83 ec 0c             	sub    esp,0xc
c001ddac:	2d d8 00 00 00       	sub    eax,0xd8
c001ddb1:	e9 c0 03 00 00       	jmp    c001e176 <Vm::x87Handler(regs*)+0x6bb>
c001ddb6:	8d 50 20             	lea    edx,[eax+0x20]
c001ddb9:	80 fa 07             	cmp    dl,0x7
c001ddbc:	77 1b                	ja     c001ddd9 <Vm::x87Handler(regs*)+0x31e>
c001ddbe:	83 ec 0c             	sub    esp,0xc
c001ddc1:	2d e0 00 00 00       	sub    eax,0xe0
c001ddc6:	50                   	push   eax
c001ddc7:	e8 b2 fb ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001ddcc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ddd3:	89 c6                	mov    esi,eax
c001ddd5:	89 d7                	mov    edi,edx
c001ddd7:	eb 22                	jmp    c001ddfb <Vm::x87Handler(regs*)+0x340>
c001ddd9:	8d 50 18             	lea    edx,[eax+0x18]
c001dddc:	80 fa 07             	cmp    dl,0x7
c001dddf:	77 2d                	ja     c001de0e <Vm::x87Handler(regs*)+0x353>
c001dde1:	83 ec 0c             	sub    esp,0xc
c001dde4:	6a 00                	push   0x0
c001dde6:	e8 93 fb ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001ddeb:	89 c6                	mov    esi,eax
c001dded:	89 d7                	mov    edi,edx
c001ddef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ddf3:	2d e8 00 00 00       	sub    eax,0xe8
c001ddf8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddfb:	e8 7e fb ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001de00:	57                   	push   edi
c001de01:	56                   	push   esi
c001de02:	52                   	push   edx
c001de03:	50                   	push   eax
c001de04:	e8 15 fb ff ff       	call   c001d91e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001de09:	e9 76 ff ff ff       	jmp    c001dd84 <Vm::x87Handler(regs*)+0x2c9>
c001de0e:	8d 50 10             	lea    edx,[eax+0x10]
c001de11:	80 fa 07             	cmp    dl,0x7
c001de14:	77 1b                	ja     c001de31 <Vm::x87Handler(regs*)+0x376>
c001de16:	83 ec 0c             	sub    esp,0xc
c001de19:	2d f0 00 00 00       	sub    eax,0xf0
c001de1e:	50                   	push   eax
c001de1f:	e8 5a fb ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001de24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de2b:	89 c6                	mov    esi,eax
c001de2d:	89 d7                	mov    edi,edx
c001de2f:	eb 22                	jmp    c001de53 <Vm::x87Handler(regs*)+0x398>
c001de31:	3c f7                	cmp    al,0xf7
c001de33:	0f 86 d1 03 00 00    	jbe    c001e20a <Vm::x87Handler(regs*)+0x74f>
c001de39:	83 ec 0c             	sub    esp,0xc
c001de3c:	6a 00                	push   0x0
c001de3e:	e8 3b fb ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001de43:	89 c6                	mov    esi,eax
c001de45:	89 d7                	mov    edi,edx
c001de47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de4b:	2d f8 00 00 00       	sub    eax,0xf8
c001de50:	89 04 24             	mov    DWORD PTR [esp],eax
c001de53:	e8 26 fb ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001de58:	57                   	push   edi
c001de59:	56                   	push   esi
c001de5a:	52                   	push   edx
c001de5b:	50                   	push   eax
c001de5c:	e8 eb fa ff ff       	call   c001d94c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001de61:	83 c4 1c             	add    esp,0x1c
c001de64:	52                   	push   edx
c001de65:	50                   	push   eax
c001de66:	6a 00                	push   0x0
c001de68:	e9 51 02 00 00       	jmp    c001e0be <Vm::x87Handler(regs*)+0x603>
c001de6d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de71:	8d 50 40             	lea    edx,[eax+0x40]
c001de74:	80 fa 07             	cmp    dl,0x7
c001de77:	77 37                	ja     c001deb0 <Vm::x87Handler(regs*)+0x3f5>
c001de79:	83 ec 0c             	sub    esp,0xc
c001de7c:	2d c0 00 00 00       	sub    eax,0xc0
c001de81:	50                   	push   eax
c001de82:	e8 f7 fa ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001de87:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de8e:	89 c6                	mov    esi,eax
c001de90:	89 d7                	mov    edi,edx
c001de92:	e8 e7 fa ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001de97:	57                   	push   edi
c001de98:	56                   	push   esi
c001de99:	52                   	push   edx
c001de9a:	50                   	push   eax
c001de9b:	e8 54 fa ff ff       	call   c001d8f4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dea0:	83 c4 1c             	add    esp,0x1c
c001dea3:	52                   	push   edx
c001dea4:	50                   	push   eax
c001dea5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dea9:	2d c0 00 00 00       	sub    eax,0xc0
c001deae:	eb 3d                	jmp    c001deed <Vm::x87Handler(regs*)+0x432>
c001deb0:	8d 50 38             	lea    edx,[eax+0x38]
c001deb3:	80 fa 07             	cmp    dl,0x7
c001deb6:	77 3b                	ja     c001def3 <Vm::x87Handler(regs*)+0x438>
c001deb8:	83 ec 0c             	sub    esp,0xc
c001debb:	2d c8 00 00 00       	sub    eax,0xc8
c001dec0:	50                   	push   eax
c001dec1:	e8 b8 fa ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dec6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001decd:	89 c6                	mov    esi,eax
c001decf:	89 d7                	mov    edi,edx
c001ded1:	e8 a8 fa ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001ded6:	57                   	push   edi
c001ded7:	56                   	push   esi
c001ded8:	52                   	push   edx
c001ded9:	50                   	push   eax
c001deda:	e8 4e fa ff ff       	call   c001d92d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dedf:	83 c4 1c             	add    esp,0x1c
c001dee2:	52                   	push   edx
c001dee3:	50                   	push   eax
c001dee4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dee8:	2d c8 00 00 00       	sub    eax,0xc8
c001deed:	50                   	push   eax
c001deee:	e9 75 fc ff ff       	jmp    c001db68 <Vm::x87Handler(regs*)+0xad>
c001def3:	83 c0 18             	add    eax,0x18
c001def6:	3c 07                	cmp    al,0x7
c001def8:	0f 87 3b 04 00 00    	ja     c001e339 <Vm::x87Handler(regs*)+0x87e>
c001defe:	83 ec 0c             	sub    esp,0xc
c001df01:	6a 00                	push   0x0
c001df03:	e8 76 fa ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001df08:	89 c6                	mov    esi,eax
c001df0a:	89 d7                	mov    edi,edx
c001df0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df10:	2d e8 00 00 00       	sub    eax,0xe8
c001df15:	89 04 24             	mov    DWORD PTR [esp],eax
c001df18:	e8 61 fa ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001df1d:	57                   	push   edi
c001df1e:	56                   	push   esi
c001df1f:	52                   	push   edx
c001df20:	50                   	push   eax
c001df21:	e8 f8 f9 ff ff       	call   c001d91e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001df26:	83 c4 1c             	add    esp,0x1c
c001df29:	52                   	push   edx
c001df2a:	50                   	push   eax
c001df2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df2f:	2d e8 00 00 00       	sub    eax,0xe8
c001df34:	eb b7                	jmp    c001deed <Vm::x87Handler(regs*)+0x432>
c001df36:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df3a:	8d 50 40             	lea    edx,[eax+0x40]
c001df3d:	80 fa 07             	cmp    dl,0x7
c001df40:	77 3a                	ja     c001df7c <Vm::x87Handler(regs*)+0x4c1>
c001df42:	83 ec 0c             	sub    esp,0xc
c001df45:	2d c0 00 00 00       	sub    eax,0xc0
c001df4a:	50                   	push   eax
c001df4b:	e8 2e fa ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001df50:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df57:	89 c6                	mov    esi,eax
c001df59:	89 d7                	mov    edi,edx
c001df5b:	e8 1e fa ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001df60:	57                   	push   edi
c001df61:	56                   	push   esi
c001df62:	52                   	push   edx
c001df63:	50                   	push   eax
c001df64:	e8 8b f9 ff ff       	call   c001d8f4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001df69:	83 c4 1c             	add    esp,0x1c
c001df6c:	52                   	push   edx
c001df6d:	50                   	push   eax
c001df6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df72:	2d c0 00 00 00       	sub    eax,0xc0
c001df77:	e9 9e 01 00 00       	jmp    c001e11a <Vm::x87Handler(regs*)+0x65f>
c001df7c:	8d 50 20             	lea    edx,[eax+0x20]
c001df7f:	80 fa 07             	cmp    dl,0x7
c001df82:	77 3a                	ja     c001dfbe <Vm::x87Handler(regs*)+0x503>
c001df84:	83 ec 0c             	sub    esp,0xc
c001df87:	2d e0 00 00 00       	sub    eax,0xe0
c001df8c:	50                   	push   eax
c001df8d:	e8 ec f9 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001df92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df99:	89 c6                	mov    esi,eax
c001df9b:	89 d7                	mov    edi,edx
c001df9d:	e8 dc f9 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dfa2:	57                   	push   edi
c001dfa3:	56                   	push   esi
c001dfa4:	52                   	push   edx
c001dfa5:	50                   	push   eax
c001dfa6:	e8 73 f9 ff ff       	call   c001d91e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dfab:	83 c4 1c             	add    esp,0x1c
c001dfae:	52                   	push   edx
c001dfaf:	50                   	push   eax
c001dfb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dfb4:	2d e0 00 00 00       	sub    eax,0xe0
c001dfb9:	e9 5c 01 00 00       	jmp    c001e11a <Vm::x87Handler(regs*)+0x65f>
c001dfbe:	8d 50 18             	lea    edx,[eax+0x18]
c001dfc1:	80 fa 07             	cmp    dl,0x7
c001dfc4:	77 3b                	ja     c001e001 <Vm::x87Handler(regs*)+0x546>
c001dfc6:	83 ec 0c             	sub    esp,0xc
c001dfc9:	6a 00                	push   0x0
c001dfcb:	e8 ae f9 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dfd0:	89 c6                	mov    esi,eax
c001dfd2:	89 d7                	mov    edi,edx
c001dfd4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dfd8:	2d e8 00 00 00       	sub    eax,0xe8
c001dfdd:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfe0:	e8 99 f9 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001dfe5:	57                   	push   edi
c001dfe6:	56                   	push   esi
c001dfe7:	52                   	push   edx
c001dfe8:	50                   	push   eax
c001dfe9:	e8 30 f9 ff ff       	call   c001d91e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dfee:	83 c4 1c             	add    esp,0x1c
c001dff1:	52                   	push   edx
c001dff2:	50                   	push   eax
c001dff3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dff7:	2d e8 00 00 00       	sub    eax,0xe8
c001dffc:	e9 19 01 00 00       	jmp    c001e11a <Vm::x87Handler(regs*)+0x65f>
c001e001:	8d 50 38             	lea    edx,[eax+0x38]
c001e004:	80 fa 07             	cmp    dl,0x7
c001e007:	77 37                	ja     c001e040 <Vm::x87Handler(regs*)+0x585>
c001e009:	83 ec 0c             	sub    esp,0xc
c001e00c:	2d c8 00 00 00       	sub    eax,0xc8
c001e011:	50                   	push   eax
c001e012:	e8 67 f9 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e017:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e01e:	89 c6                	mov    esi,eax
c001e020:	89 d7                	mov    edi,edx
c001e022:	e8 57 f9 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e027:	57                   	push   edi
c001e028:	56                   	push   esi
c001e029:	52                   	push   edx
c001e02a:	50                   	push   eax
c001e02b:	e8 fd f8 ff ff       	call   c001d92d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e030:	83 c4 1c             	add    esp,0x1c
c001e033:	52                   	push   edx
c001e034:	50                   	push   eax
c001e035:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e039:	2d c8 00 00 00       	sub    eax,0xc8
c001e03e:	eb 7d                	jmp    c001e0bd <Vm::x87Handler(regs*)+0x602>
c001e040:	3c f7                	cmp    al,0xf7
c001e042:	76 38                	jbe    c001e07c <Vm::x87Handler(regs*)+0x5c1>
c001e044:	83 ec 0c             	sub    esp,0xc
c001e047:	6a 00                	push   0x0
c001e049:	e8 30 f9 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e04e:	89 c6                	mov    esi,eax
c001e050:	89 d7                	mov    edi,edx
c001e052:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e056:	2d f8 00 00 00       	sub    eax,0xf8
c001e05b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e05e:	e8 1b f9 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e063:	57                   	push   edi
c001e064:	56                   	push   esi
c001e065:	52                   	push   edx
c001e066:	50                   	push   eax
c001e067:	e8 e0 f8 ff ff       	call   c001d94c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e06c:	83 c4 1c             	add    esp,0x1c
c001e06f:	52                   	push   edx
c001e070:	50                   	push   eax
c001e071:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e075:	2d f8 00 00 00       	sub    eax,0xf8
c001e07a:	eb 41                	jmp    c001e0bd <Vm::x87Handler(regs*)+0x602>
c001e07c:	8d 50 10             	lea    edx,[eax+0x10]
c001e07f:	80 fa 07             	cmp    dl,0x7
c001e082:	0f 87 5a 01 00 00    	ja     c001e1e2 <Vm::x87Handler(regs*)+0x727>
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	2d f0 00 00 00       	sub    eax,0xf0
c001e090:	50                   	push   eax
c001e091:	e8 e8 f8 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e096:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e09d:	89 c6                	mov    esi,eax
c001e09f:	89 d7                	mov    edi,edx
c001e0a1:	e8 d8 f8 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e0a6:	57                   	push   edi
c001e0a7:	56                   	push   esi
c001e0a8:	52                   	push   edx
c001e0a9:	50                   	push   eax
c001e0aa:	e8 9d f8 ff ff       	call   c001d94c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e0af:	83 c4 1c             	add    esp,0x1c
c001e0b2:	52                   	push   edx
c001e0b3:	50                   	push   eax
c001e0b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0b8:	2d f0 00 00 00       	sub    eax,0xf0
c001e0bd:	50                   	push   eax
c001e0be:	e8 fe f8 ff ff       	call   c001d9c1 <Vm::fpuSetReg(int, unsigned long long)>
c001e0c3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e0c7:	e8 9d f9 ff ff       	call   c001da69 <Vm::fpuPop()>
c001e0cc:	e9 5e fa ff ff       	jmp    c001db2f <Vm::x87Handler(regs*)+0x74>
c001e0d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0d5:	8d 50 30             	lea    edx,[eax+0x30]
c001e0d8:	80 fa 07             	cmp    dl,0x7
c001e0db:	77 1d                	ja     c001e0fa <Vm::x87Handler(regs*)+0x63f>
c001e0dd:	83 ec 0c             	sub    esp,0xc
c001e0e0:	6a 00                	push   0x0
c001e0e2:	e8 97 f8 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e0e7:	83 c4 0c             	add    esp,0xc
c001e0ea:	52                   	push   edx
c001e0eb:	50                   	push   eax
c001e0ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0f0:	2d d0 00 00 00       	sub    eax,0xd0
c001e0f5:	e9 f3 fd ff ff       	jmp    c001deed <Vm::x87Handler(regs*)+0x432>
c001e0fa:	8d 50 28             	lea    edx,[eax+0x28]
c001e0fd:	80 fa 07             	cmp    dl,0x7
c001e100:	77 28                	ja     c001e12a <Vm::x87Handler(regs*)+0x66f>
c001e102:	83 ec 0c             	sub    esp,0xc
c001e105:	6a 00                	push   0x0
c001e107:	e8 72 f8 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e10c:	83 c4 0c             	add    esp,0xc
c001e10f:	52                   	push   edx
c001e110:	50                   	push   eax
c001e111:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e115:	2d d8 00 00 00       	sub    eax,0xd8
c001e11a:	50                   	push   eax
c001e11b:	e8 a1 f8 ff ff       	call   c001d9c1 <Vm::fpuSetReg(int, unsigned long long)>
c001e120:	e8 44 f9 ff ff       	call   c001da69 <Vm::fpuPop()>
c001e125:	e9 01 fa ff ff       	jmp    c001db2b <Vm::x87Handler(regs*)+0x70>
c001e12a:	8d 50 20             	lea    edx,[eax+0x20]
c001e12d:	80 fa 07             	cmp    dl,0x7
c001e130:	77 30                	ja     c001e162 <Vm::x87Handler(regs*)+0x6a7>
c001e132:	83 ec 0c             	sub    esp,0xc
c001e135:	2d e0 00 00 00       	sub    eax,0xe0
c001e13a:	50                   	push   eax
c001e13b:	e8 3e f8 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e140:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e147:	89 c6                	mov    esi,eax
c001e149:	89 d7                	mov    edi,edx
c001e14b:	e8 2e f8 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e150:	57                   	push   edi
c001e151:	56                   	push   esi
c001e152:	52                   	push   edx
c001e153:	50                   	push   eax
c001e154:	e8 48 f7 ff ff       	call   c001d8a1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e159:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e15d:	e9 54 02 00 00       	jmp    c001e3b6 <Vm::x87Handler(regs*)+0x8fb>
c001e162:	8d 50 18             	lea    edx,[eax+0x18]
c001e165:	80 fa 07             	cmp    dl,0x7
c001e168:	0f 87 43 fb ff ff    	ja     c001dcb1 <Vm::x87Handler(regs*)+0x1f6>
c001e16e:	83 ec 0c             	sub    esp,0xc
c001e171:	2d e8 00 00 00       	sub    eax,0xe8
c001e176:	50                   	push   eax
c001e177:	e8 02 f8 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e17c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e183:	89 c6                	mov    esi,eax
c001e185:	89 d7                	mov    edi,edx
c001e187:	e8 f2 f7 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e18c:	57                   	push   edi
c001e18d:	56                   	push   esi
c001e18e:	52                   	push   edx
c001e18f:	50                   	push   eax
c001e190:	e8 0c f7 ff ff       	call   c001d8a1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e195:	83 c4 20             	add    esp,0x20
c001e198:	e8 cc f8 ff ff       	call   c001da69 <Vm::fpuPop()>
c001e19d:	eb 62                	jmp    c001e201 <Vm::x87Handler(regs*)+0x746>
c001e19f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001e1a3:	0f 85 0f 01 00 00    	jne    c001e2b8 <Vm::x87Handler(regs*)+0x7fd>
c001e1a9:	83 ec 0c             	sub    esp,0xc
c001e1ac:	6a 01                	push   0x1
c001e1ae:	e8 cb f7 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e1b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e1ba:	89 c6                	mov    esi,eax
c001e1bc:	89 d7                	mov    edi,edx
c001e1be:	e8 bb f7 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e1c3:	57                   	push   edi
c001e1c4:	56                   	push   esi
c001e1c5:	52                   	push   edx
c001e1c6:	50                   	push   eax
c001e1c7:	e8 d5 f6 ff ff       	call   c001d8a1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e1cc:	83 c4 20             	add    esp,0x20
c001e1cf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e1d3:	e8 91 f8 ff ff       	call   c001da69 <Vm::fpuPop()>
c001e1d8:	e8 8c f8 ff ff       	call   c001da69 <Vm::fpuPop()>
c001e1dd:	e9 50 f9 ff ff       	jmp    c001db32 <Vm::x87Handler(regs*)+0x77>
c001e1e2:	3c d9                	cmp    al,0xd9
c001e1e4:	0f 85 b5 02 00 00    	jne    c001e49f <Vm::x87Handler(regs*)+0x9e4>
c001e1ea:	eb bd                	jmp    c001e1a9 <Vm::x87Handler(regs*)+0x6ee>
c001e1ec:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001e1f0:	0f 85 ea 02 00 00    	jne    c001e4e0 <Vm::x87Handler(regs*)+0xa25>
c001e1f6:	0f b7 05 00 c6 02 c0 	movzx  eax,WORD PTR ds:0xc002c600
c001e1fd:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001e201:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e205:	e9 28 f9 ff ff       	jmp    c001db32 <Vm::x87Handler(regs*)+0x77>
c001e20a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e20e:	84 d2                	test   dl,dl
c001e210:	75 0f                	jne    c001e221 <Vm::x87Handler(regs*)+0x766>
c001e212:	83 ec 0c             	sub    esp,0xc
c001e215:	ff 36                	push   DWORD PTR [esi]
c001e217:	e8 b1 f4 ff ff       	call   c001d6cd <Vm::fpu32ToInternal(unsigned int)>
c001e21c:	e9 2c 01 00 00       	jmp    c001e34d <Vm::x87Handler(regs*)+0x892>
c001e221:	80 fa 01             	cmp    dl,0x1
c001e224:	75 0f                	jne    c001e235 <Vm::x87Handler(regs*)+0x77a>
c001e226:	83 ec 0c             	sub    esp,0xc
c001e229:	ff 36                	push   DWORD PTR [esi]
c001e22b:	e8 9d f4 ff ff       	call   c001d6cd <Vm::fpu32ToInternal(unsigned int)>
c001e230:	e9 81 02 00 00       	jmp    c001e4b6 <Vm::x87Handler(regs*)+0x9fb>
c001e235:	80 fa 04             	cmp    dl,0x4
c001e238:	75 0f                	jne    c001e249 <Vm::x87Handler(regs*)+0x78e>
c001e23a:	83 ec 0c             	sub    esp,0xc
c001e23d:	ff 36                	push   DWORD PTR [esi]
c001e23f:	e8 89 f4 ff ff       	call   c001d6cd <Vm::fpu32ToInternal(unsigned int)>
c001e244:	e9 86 01 00 00       	jmp    c001e3cf <Vm::x87Handler(regs*)+0x914>
c001e249:	80 fa 05             	cmp    dl,0x5
c001e24c:	75 1b                	jne    c001e269 <Vm::x87Handler(regs*)+0x7ae>
c001e24e:	83 ec 0c             	sub    esp,0xc
c001e251:	6a 00                	push   0x0
c001e253:	e8 26 f7 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e258:	89 c7                	mov    edi,eax
c001e25a:	89 d5                	mov    ebp,edx
c001e25c:	58                   	pop    eax
c001e25d:	ff 36                	push   DWORD PTR [esi]
c001e25f:	e8 69 f4 ff ff       	call   c001d6cd <Vm::fpu32ToInternal(unsigned int)>
c001e264:	e9 a3 01 00 00       	jmp    c001e40c <Vm::x87Handler(regs*)+0x951>
c001e269:	80 fa 06             	cmp    dl,0x6
c001e26c:	75 0f                	jne    c001e27d <Vm::x87Handler(regs*)+0x7c2>
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	ff 36                	push   DWORD PTR [esi]
c001e273:	e8 55 f4 ff ff       	call   c001d6cd <Vm::fpu32ToInternal(unsigned int)>
c001e278:	e9 ae 01 00 00       	jmp    c001e42b <Vm::x87Handler(regs*)+0x970>
c001e27d:	31 c0                	xor    eax,eax
c001e27f:	80 fa 07             	cmp    dl,0x7
c001e282:	0f 85 94 02 00 00    	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	6a 00                	push   0x0
c001e28d:	e8 ec f6 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e292:	89 c7                	mov    edi,eax
c001e294:	89 d5                	mov    ebp,edx
c001e296:	58                   	pop    eax
c001e297:	ff 36                	push   DWORD PTR [esi]
c001e299:	e8 2f f4 ff ff       	call   c001d6cd <Vm::fpu32ToInternal(unsigned int)>
c001e29e:	e9 cb 01 00 00       	jmp    c001e46e <Vm::x87Handler(regs*)+0x9b3>
c001e2a3:	80 fa 03             	cmp    dl,0x3
c001e2a6:	0f 85 d3 01 00 00    	jne    c001e47f <Vm::x87Handler(regs*)+0x9c4>
c001e2ac:	e8 b8 f7 ff ff       	call   c001da69 <Vm::fpuPop()>
c001e2b1:	51                   	push   ecx
c001e2b2:	51                   	push   ecx
c001e2b3:	e9 de 01 00 00       	jmp    c001e496 <Vm::x87Handler(regs*)+0x9db>
c001e2b8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e2bc:	80 fa 01             	cmp    dl,0x1
c001e2bf:	75 09                	jne    c001e2ca <Vm::x87Handler(regs*)+0x80f>
c001e2c1:	57                   	push   edi
c001e2c2:	57                   	push   edi
c001e2c3:	8b 06                	mov    eax,DWORD PTR [esi]
c001e2c5:	e9 e3 01 00 00       	jmp    c001e4ad <Vm::x87Handler(regs*)+0x9f2>
c001e2ca:	80 fa 04             	cmp    dl,0x4
c001e2cd:	75 12                	jne    c001e2e1 <Vm::x87Handler(regs*)+0x826>
c001e2cf:	31 d2                	xor    edx,edx
c001e2d1:	51                   	push   ecx
c001e2d2:	51                   	push   ecx
c001e2d3:	8b 06                	mov    eax,DWORD PTR [esi]
c001e2d5:	52                   	push   edx
c001e2d6:	50                   	push   eax
c001e2d7:	e8 d0 f4 ff ff       	call   c001d7ac <Vm::fpuLongToFloat(long long)>
c001e2dc:	e9 ee 00 00 00       	jmp    c001e3cf <Vm::x87Handler(regs*)+0x914>
c001e2e1:	31 c0                	xor    eax,eax
c001e2e3:	80 fa 07             	cmp    dl,0x7
c001e2e6:	0f 85 30 02 00 00    	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001e2ec:	83 ec 0c             	sub    esp,0xc
c001e2ef:	6a 00                	push   0x0
c001e2f1:	e8 88 f6 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e2f6:	89 c7                	mov    edi,eax
c001e2f8:	89 d5                	mov    ebp,edx
c001e2fa:	58                   	pop    eax
c001e2fb:	8b 06                	mov    eax,DWORD PTR [esi]
c001e2fd:	5a                   	pop    edx
c001e2fe:	31 d2                	xor    edx,edx
c001e300:	52                   	push   edx
c001e301:	50                   	push   eax
c001e302:	e8 a5 f4 ff ff       	call   c001d7ac <Vm::fpuLongToFloat(long long)>
c001e307:	e9 62 01 00 00       	jmp    c001e46e <Vm::x87Handler(regs*)+0x9b3>
c001e30c:	84 d2                	test   dl,dl
c001e30e:	75 0d                	jne    c001e31d <Vm::x87Handler(regs*)+0x862>
c001e310:	31 d2                	xor    edx,edx
c001e312:	55                   	push   ebp
c001e313:	55                   	push   ebp
c001e314:	8b 06                	mov    eax,DWORD PTR [esi]
c001e316:	52                   	push   edx
c001e317:	50                   	push   eax
c001e318:	e9 d3 01 00 00       	jmp    c001e4f0 <Vm::x87Handler(regs*)+0xa35>
c001e31d:	31 c0                	xor    eax,eax
c001e31f:	80 fa 02             	cmp    dl,0x2
c001e322:	0f 85 f4 01 00 00    	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	6a 00                	push   0x0
c001e32d:	e8 4c f6 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e332:	59                   	pop    ecx
c001e333:	5f                   	pop    edi
c001e334:	e9 6a f9 ff ff       	jmp    c001dca3 <Vm::x87Handler(regs*)+0x1e8>
c001e339:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e33d:	84 d2                	test   dl,dl
c001e33f:	75 2a                	jne    c001e36b <Vm::x87Handler(regs*)+0x8b0>
c001e341:	50                   	push   eax
c001e342:	50                   	push   eax
c001e343:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e346:	ff 36                	push   DWORD PTR [esi]
c001e348:	e8 c5 f3 ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001e34d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e354:	89 c6                	mov    esi,eax
c001e356:	89 d7                	mov    edi,edx
c001e358:	e8 21 f6 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e35d:	57                   	push   edi
c001e35e:	56                   	push   esi
c001e35f:	52                   	push   edx
c001e360:	50                   	push   eax
c001e361:	e8 8e f5 ff ff       	call   c001d8f4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e366:	e9 64 01 00 00       	jmp    c001e4cf <Vm::x87Handler(regs*)+0xa14>
c001e36b:	80 fa 01             	cmp    dl,0x1
c001e36e:	75 11                	jne    c001e381 <Vm::x87Handler(regs*)+0x8c6>
c001e370:	50                   	push   eax
c001e371:	50                   	push   eax
c001e372:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e375:	ff 36                	push   DWORD PTR [esi]
c001e377:	e8 96 f3 ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001e37c:	e9 35 01 00 00       	jmp    c001e4b6 <Vm::x87Handler(regs*)+0x9fb>
c001e381:	80 fa 02             	cmp    dl,0x2
c001e384:	0f 85 54 f9 ff ff    	jne    c001dcde <Vm::x87Handler(regs*)+0x223>
c001e38a:	55                   	push   ebp
c001e38b:	55                   	push   ebp
c001e38c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e38f:	ff 36                	push   DWORD PTR [esi]
c001e391:	e8 7c f3 ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001e396:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e39d:	89 c6                	mov    esi,eax
c001e39f:	89 d7                	mov    edi,edx
c001e3a1:	e8 d8 f5 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e3a6:	57                   	push   edi
c001e3a7:	56                   	push   esi
c001e3a8:	52                   	push   edx
c001e3a9:	50                   	push   eax
c001e3aa:	e8 f2 f4 ff ff       	call   c001d8a1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e3af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3b3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e3b6:	83 c4 20             	add    esp,0x20
c001e3b9:	e9 74 f7 ff ff       	jmp    c001db32 <Vm::x87Handler(regs*)+0x77>
c001e3be:	80 fa 04             	cmp    dl,0x4
c001e3c1:	75 2a                	jne    c001e3ed <Vm::x87Handler(regs*)+0x932>
c001e3c3:	51                   	push   ecx
c001e3c4:	51                   	push   ecx
c001e3c5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e3c8:	ff 36                	push   DWORD PTR [esi]
c001e3ca:	e8 43 f3 ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001e3cf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3d6:	89 c6                	mov    esi,eax
c001e3d8:	89 d7                	mov    edi,edx
c001e3da:	e8 9f f5 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e3df:	57                   	push   edi
c001e3e0:	56                   	push   esi
c001e3e1:	52                   	push   edx
c001e3e2:	50                   	push   eax
c001e3e3:	e8 36 f5 ff ff       	call   c001d91e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e3e8:	e9 e2 00 00 00       	jmp    c001e4cf <Vm::x87Handler(regs*)+0xa14>
c001e3ed:	80 fa 05             	cmp    dl,0x5
c001e3f0:	75 28                	jne    c001e41a <Vm::x87Handler(regs*)+0x95f>
c001e3f2:	83 ec 0c             	sub    esp,0xc
c001e3f5:	6a 00                	push   0x0
c001e3f7:	e8 82 f5 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e3fc:	89 c7                	mov    edi,eax
c001e3fe:	89 d5                	mov    ebp,edx
c001e400:	58                   	pop    eax
c001e401:	5a                   	pop    edx
c001e402:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e405:	ff 36                	push   DWORD PTR [esi]
c001e407:	e8 06 f3 ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001e40c:	83 c4 10             	add    esp,0x10
c001e40f:	55                   	push   ebp
c001e410:	57                   	push   edi
c001e411:	52                   	push   edx
c001e412:	50                   	push   eax
c001e413:	e8 06 f5 ff ff       	call   c001d91e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e418:	eb 60                	jmp    c001e47a <Vm::x87Handler(regs*)+0x9bf>
c001e41a:	80 fa 06             	cmp    dl,0x6
c001e41d:	75 2a                	jne    c001e449 <Vm::x87Handler(regs*)+0x98e>
c001e41f:	51                   	push   ecx
c001e420:	51                   	push   ecx
c001e421:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e424:	ff 36                	push   DWORD PTR [esi]
c001e426:	e8 e7 f2 ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001e42b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e432:	89 c6                	mov    esi,eax
c001e434:	89 d7                	mov    edi,edx
c001e436:	e8 43 f5 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e43b:	57                   	push   edi
c001e43c:	56                   	push   esi
c001e43d:	52                   	push   edx
c001e43e:	50                   	push   eax
c001e43f:	e8 08 f5 ff ff       	call   c001d94c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e444:	e9 86 00 00 00       	jmp    c001e4cf <Vm::x87Handler(regs*)+0xa14>
c001e449:	31 c0                	xor    eax,eax
c001e44b:	80 fa 07             	cmp    dl,0x7
c001e44e:	0f 85 c8 00 00 00    	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	6a 00                	push   0x0
c001e459:	e8 20 f5 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e45e:	89 c7                	mov    edi,eax
c001e460:	89 d5                	mov    ebp,edx
c001e462:	58                   	pop    eax
c001e463:	5a                   	pop    edx
c001e464:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e467:	ff 36                	push   DWORD PTR [esi]
c001e469:	e8 a4 f2 ff ff       	call   c001d712 <Vm::fpu64ToInternal(unsigned long long)>
c001e46e:	83 c4 10             	add    esp,0x10
c001e471:	55                   	push   ebp
c001e472:	57                   	push   edi
c001e473:	52                   	push   edx
c001e474:	50                   	push   eax
c001e475:	e8 d2 f4 ff ff       	call   c001d94c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e47a:	83 c4 0c             	add    esp,0xc
c001e47d:	eb 53                	jmp    c001e4d2 <Vm::x87Handler(regs*)+0xa17>
c001e47f:	31 c0                	xor    eax,eax
c001e481:	80 fa 02             	cmp    dl,0x2
c001e484:	0f 85 92 00 00 00    	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001e48a:	83 ec 0c             	sub    esp,0xc
c001e48d:	6a 00                	push   0x0
c001e48f:	e8 ea f4 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e494:	59                   	pop    ecx
c001e495:	5f                   	pop    edi
c001e496:	52                   	push   edx
c001e497:	50                   	push   eax
c001e498:	e8 27 f2 ff ff       	call   c001d6c4 <Vm::fpuInternalTo64(unsigned long long)>
c001e49d:	eb 70                	jmp    c001e50f <Vm::x87Handler(regs*)+0xa54>
c001e49f:	31 c0                	xor    eax,eax
c001e4a1:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001e4a6:	75 74                	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001e4a8:	50                   	push   eax
c001e4a9:	50                   	push   eax
c001e4aa:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e4ad:	31 d2                	xor    edx,edx
c001e4af:	52                   	push   edx
c001e4b0:	50                   	push   eax
c001e4b1:	e8 f6 f2 ff ff       	call   c001d7ac <Vm::fpuLongToFloat(long long)>
c001e4b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e4bd:	89 c6                	mov    esi,eax
c001e4bf:	89 d7                	mov    edi,edx
c001e4c1:	e8 b8 f4 ff ff       	call   c001d97e <Vm::fpuGetReg(int)>
c001e4c6:	57                   	push   edi
c001e4c7:	56                   	push   esi
c001e4c8:	52                   	push   edx
c001e4c9:	50                   	push   eax
c001e4ca:	e8 5e f4 ff ff       	call   c001d92d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e4cf:	83 c4 1c             	add    esp,0x1c
c001e4d2:	52                   	push   edx
c001e4d3:	50                   	push   eax
c001e4d4:	6a 00                	push   0x0
c001e4d6:	e8 e6 f4 ff ff       	call   c001d9c1 <Vm::fpuSetReg(int, unsigned long long)>
c001e4db:	e9 f2 f7 ff ff       	jmp    c001dcd2 <Vm::x87Handler(regs*)+0x217>
c001e4e0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e4e4:	80 fa 05             	cmp    dl,0x5
c001e4e7:	75 11                	jne    c001e4fa <Vm::x87Handler(regs*)+0xa3f>
c001e4e9:	55                   	push   ebp
c001e4ea:	55                   	push   ebp
c001e4eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e4ee:	ff 36                	push   DWORD PTR [esi]
c001e4f0:	e8 81 f2 ff ff       	call   c001d776 <Vm::fpuULongToFloat(unsigned long long)>
c001e4f5:	e9 cf f7 ff ff       	jmp    c001dcc9 <Vm::x87Handler(regs*)+0x20e>
c001e4fa:	31 c0                	xor    eax,eax
c001e4fc:	80 fa 07             	cmp    dl,0x7
c001e4ff:	75 1b                	jne    c001e51c <Vm::x87Handler(regs*)+0xa61>
c001e501:	e8 63 f5 ff ff       	call   c001da69 <Vm::fpuPop()>
c001e506:	51                   	push   ecx
c001e507:	51                   	push   ecx
c001e508:	52                   	push   edx
c001e509:	50                   	push   eax
c001e50a:	e8 0c f2 ff ff       	call   c001d71b <Vm::fpuFloatToLong(unsigned long long)>
c001e50f:	83 c4 10             	add    esp,0x10
c001e512:	89 06                	mov    DWORD PTR [esi],eax
c001e514:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001e517:	e9 f8 f7 ff ff       	jmp    c001dd14 <Vm::x87Handler(regs*)+0x259>
c001e51c:	83 c4 1c             	add    esp,0x1c
c001e51f:	5b                   	pop    ebx
c001e520:	5e                   	pop    esi
c001e521:	5f                   	pop    edi
c001e522:	5d                   	pop    ebp
c001e523:	c3                   	ret    

c001e524 <__static_initialization_and_destruction_0(int, int)>:
c001e524:	83 ec 0c             	sub    esp,0xc
c001e527:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e52c:	75 1a                	jne    c001e548 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e52e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e536:	75 10                	jne    c001e548 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e538:	83 ec 0c             	sub    esp,0xc
c001e53b:	68 00 c6 02 c0       	push   0xc002c600
c001e540:	e8 3b 7d 00 00       	call   c0026280 <Vm::_FPUState::_FPUState()>
c001e545:	83 c4 10             	add    esp,0x10
c001e548:	90                   	nop
c001e549:	83 c4 0c             	add    esp,0xc
c001e54c:	c3                   	ret    

c001e54d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001e54d:	83 ec 0c             	sub    esp,0xc
c001e550:	83 ec 08             	sub    esp,0x8
c001e553:	68 ff ff 00 00       	push   0xffff
c001e558:	6a 01                	push   0x1
c001e55a:	e8 c5 ff ff ff       	call   c001e524 <__static_initialization_and_destruction_0(int, int)>
c001e55f:	83 c4 10             	add    esp,0x10
c001e562:	83 c4 0c             	add    esp,0xc
c001e565:	c3                   	ret    

c001e566 <FAT::getName()>:
c001e566:	b8 e4 96 02 c0       	mov    eax,0xc00296e4
c001e56b:	c3                   	ret    

c001e56c <FAT::tell(void*, unsigned long long*)>:
c001e56c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e571:	75 06                	jne    c001e579 <FAT::tell(void*, unsigned long long*)+0xd>
c001e573:	b8 04 00 00 00       	mov    eax,0x4
c001e578:	c3                   	ret    
c001e579:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e57e:	75 06                	jne    c001e586 <FAT::tell(void*, unsigned long long*)+0x1a>
c001e580:	b8 04 00 00 00       	mov    eax,0x4
c001e585:	c3                   	ret    
c001e586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e58a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001e58d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001e590:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e594:	89 01                	mov    DWORD PTR [ecx],eax
c001e596:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e599:	b8 00 00 00 00       	mov    eax,0x0
c001e59e:	c3                   	ret    
c001e59f:	90                   	nop

c001e5a0 <FAT::stat(void*, unsigned long long*)>:
c001e5a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e5a5:	75 06                	jne    c001e5ad <FAT::stat(void*, unsigned long long*)+0xd>
c001e5a7:	b8 04 00 00 00       	mov    eax,0x4
c001e5ac:	c3                   	ret    
c001e5ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e5b2:	75 06                	jne    c001e5ba <FAT::stat(void*, unsigned long long*)+0x1a>
c001e5b4:	b8 04 00 00 00       	mov    eax,0x4
c001e5b9:	c3                   	ret    
c001e5ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001e5c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e5c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5c8:	89 01                	mov    DWORD PTR [ecx],eax
c001e5ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e5cd:	b8 00 00 00 00       	mov    eax,0x0
c001e5d2:	c3                   	ret    
c001e5d3:	90                   	nop

c001e5d4 <FAT::~FAT()>:
c001e5d4:	83 ec 0c             	sub    esp,0xc
c001e5d7:	ba 68 97 02 c0       	mov    edx,0xc0029768
c001e5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e0:	89 10                	mov    DWORD PTR [eax],edx
c001e5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e6:	83 ec 0c             	sub    esp,0xc
c001e5e9:	50                   	push   eax
c001e5ea:	e8 6d 43 ff ff       	call   c001295c <Filesystem::~Filesystem()>
c001e5ef:	83 c4 10             	add    esp,0x10
c001e5f2:	90                   	nop
c001e5f3:	83 c4 0c             	add    esp,0xc
c001e5f6:	c3                   	ret    
c001e5f7:	90                   	nop

c001e5f8 <FAT::~FAT()>:
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	83 ec 0c             	sub    esp,0xc
c001e5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e602:	e8 cd ff ff ff       	call   c001e5d4 <FAT::~FAT()>
c001e607:	83 c4 10             	add    esp,0x10
c001e60a:	83 ec 08             	sub    esp,0x8
c001e60d:	6a 08                	push   0x8
c001e60f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e613:	e8 3b 3f ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c001e618:	83 c4 10             	add    esp,0x10
c001e61b:	83 c4 0c             	add    esp,0xc
c001e61e:	c3                   	ret    
c001e61f:	90                   	nop

c001e620 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e620:	83 ec 1c             	sub    esp,0x1c
c001e623:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e62a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e62f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e633:	8b 04 85 80 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3980]
c001e63a:	83 f8 ff             	cmp    eax,0xffffffff
c001e63d:	75 34                	jne    c001e673 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001e63f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e643:	88 c2                	mov    dl,al
c001e645:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001e64a:	01 d0                	add    eax,edx
c001e64c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e650:	8b 15 60 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c660
c001e656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e65a:	89 14 85 80 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3980],edx
c001e661:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001e666:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e66a:	89 14 85 00 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3900],edx
c001e671:	eb 17                	jmp    c001e68a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001e673:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e677:	88 c2                	mov    dl,al
c001e679:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e67d:	8b 04 85 80 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3980]
c001e684:	01 d0                	add    eax,edx
c001e686:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e68a:	83 ec 04             	sub    esp,0x4
c001e68d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e691:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e695:	8d 44 24 15          	lea    eax,[esp+0x15]
c001e699:	50                   	push   eax
c001e69a:	e8 39 84 fe ff       	call   c0006ad8 <f_getlabel>
c001e69f:	83 c4 10             	add    esp,0x10
c001e6a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e6ab:	75 07                	jne    c001e6b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001e6ad:	b8 00 00 00 00       	mov    eax,0x0
c001e6b2:	eb 05                	jmp    c001e6b9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001e6b4:	b8 01 00 00 00       	mov    eax,0x1
c001e6b9:	83 c4 1c             	add    esp,0x1c
c001e6bc:	c3                   	ret    
c001e6bd:	90                   	nop

c001e6be <FAT::setlabel(LogicalDisk*, int, char*)>:
c001e6be:	57                   	push   edi
c001e6bf:	83 ec 58             	sub    esp,0x58
c001e6c2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001e6ca:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e6ce:	b9 0f 00 00 00       	mov    ecx,0xf
c001e6d3:	b8 00 00 00 00       	mov    eax,0x0
c001e6d8:	fc                   	cld    
c001e6d9:	89 d7                	mov    edi,edx
c001e6db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6dd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e6e1:	8b 04 85 80 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3980]
c001e6e8:	83 f8 ff             	cmp    eax,0xffffffff
c001e6eb:	75 34                	jne    c001e721 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001e6ed:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e6f1:	88 c2                	mov    dl,al
c001e6f3:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001e6f8:	01 d0                	add    eax,edx
c001e6fa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e6fe:	8b 15 60 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c660
c001e704:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e708:	89 14 85 80 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3980],edx
c001e70f:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001e714:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001e718:	89 14 85 00 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3900],edx
c001e71f:	eb 17                	jmp    c001e738 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001e721:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e725:	88 c2                	mov    dl,al
c001e727:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e72b:	8b 04 85 80 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3980]
c001e732:	01 d0                	add    eax,edx
c001e734:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e738:	83 ec 08             	sub    esp,0x8
c001e73b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001e73f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e743:	50                   	push   eax
c001e744:	e8 88 20 fe ff       	call   c00007d1 <strcat>
c001e749:	83 c4 10             	add    esp,0x10
c001e74c:	83 ec 0c             	sub    esp,0xc
c001e74f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e753:	50                   	push   eax
c001e754:	e8 6d 85 fe ff       	call   c0006cc6 <f_setlabel>
c001e759:	83 c4 10             	add    esp,0x10
c001e75c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e760:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e765:	75 07                	jne    c001e76e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001e767:	b8 00 00 00 00       	mov    eax,0x0
c001e76c:	eb 05                	jmp    c001e773 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001e76e:	b8 01 00 00 00       	mov    eax,0x1
c001e773:	83 c4 58             	add    esp,0x58
c001e776:	5f                   	pop    edi
c001e777:	c3                   	ret    

c001e778 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e778:	83 ec 2c             	sub    esp,0x2c
c001e77b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e783:	83 ec 08             	sub    esp,0x8
c001e786:	68 08 97 02 c0       	push   0xc0029708
c001e78b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e78f:	e8 d7 1f fe ff       	call   c000076b <strcmp>
c001e794:	83 c4 10             	add    esp,0x10
c001e797:	85 c0                	test   eax,eax
c001e799:	0f 94 c0             	sete   al
c001e79c:	84 c0                	test   al,al
c001e79e:	74 0d                	je     c001e7ad <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001e7a0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e7a8:	e9 a6 00 00 00       	jmp    c001e853 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e7ad:	83 ec 08             	sub    esp,0x8
c001e7b0:	68 fa 96 02 c0       	push   0xc00296fa
c001e7b5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e7b9:	e8 ad 1f fe ff       	call   c000076b <strcmp>
c001e7be:	83 c4 10             	add    esp,0x10
c001e7c1:	85 c0                	test   eax,eax
c001e7c3:	0f 94 c0             	sete   al
c001e7c6:	84 c0                	test   al,al
c001e7c8:	74 0a                	je     c001e7d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001e7ca:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e7d2:	eb 7f                	jmp    c001e853 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e7d4:	83 ec 08             	sub    esp,0x8
c001e7d7:	68 00 97 02 c0       	push   0xc0029700
c001e7dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e7e0:	e8 86 1f fe ff       	call   c000076b <strcmp>
c001e7e5:	83 c4 10             	add    esp,0x10
c001e7e8:	85 c0                	test   eax,eax
c001e7ea:	0f 94 c0             	sete   al
c001e7ed:	84 c0                	test   al,al
c001e7ef:	74 0a                	je     c001e7fb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001e7f1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e7f9:	eb 58                	jmp    c001e853 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e7fb:	83 ec 08             	sub    esp,0x8
c001e7fe:	68 4c 69 02 c0       	push   0xc002694c
c001e803:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e807:	e8 5f 1f fe ff       	call   c000076b <strcmp>
c001e80c:	83 c4 10             	add    esp,0x10
c001e80f:	85 c0                	test   eax,eax
c001e811:	0f 94 c0             	sete   al
c001e814:	84 c0                	test   al,al
c001e816:	74 0a                	je     c001e822 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001e818:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e820:	eb 31                	jmp    c001e853 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e822:	83 ec 08             	sub    esp,0x8
c001e825:	68 06 97 02 c0       	push   0xc0029706
c001e82a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e82e:	e8 38 1f fe ff       	call   c000076b <strcmp>
c001e833:	83 c4 10             	add    esp,0x10
c001e836:	85 c0                	test   eax,eax
c001e838:	0f 94 c0             	sete   al
c001e83b:	84 c0                	test   al,al
c001e83d:	74 0a                	je     c001e849 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001e83f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e847:	eb 0a                	jmp    c001e853 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e849:	b8 08 00 00 00       	mov    eax,0x8
c001e84e:	e9 04 01 00 00       	jmp    c001e957 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e853:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e85a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e85f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e863:	8b 04 85 80 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3980]
c001e86a:	83 f8 ff             	cmp    eax,0xffffffff
c001e86d:	75 34                	jne    c001e8a3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e86f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e873:	88 c2                	mov    dl,al
c001e875:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001e87a:	01 d0                	add    eax,edx
c001e87c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e880:	8b 15 60 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c660
c001e886:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e88a:	89 14 85 80 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3980],edx
c001e891:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001e896:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e89a:	89 14 85 00 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3900],edx
c001e8a1:	eb 17                	jmp    c001e8ba <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e8a3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e8a7:	88 c2                	mov    dl,al
c001e8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e8ad:	8b 04 85 80 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3980]
c001e8b4:	01 d0                	add    eax,edx
c001e8b6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e8ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e8be:	88 04 24             	mov    BYTE PTR [esp],al
c001e8c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e8c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e8d1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e8d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e8de:	83 ec 0c             	sub    esp,0xc
c001e8e1:	68 00 20 00 00       	push   0x2000
c001e8e6:	e8 d5 0b ff ff       	call   c000f4c0 <malloc>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e8f2:	68 00 20 00 00       	push   0x2000
c001e8f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8fb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e8ff:	50                   	push   eax
c001e900:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e904:	50                   	push   eax
c001e905:	e8 07 88 fe ff       	call   c0007111 <f_mkfs>
c001e90a:	83 c4 10             	add    esp,0x10
c001e90d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e911:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e916:	75 07                	jne    c001e91f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e918:	b8 00 00 00 00       	mov    eax,0x0
c001e91d:	eb 38                	jmp    c001e957 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e91f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e924:	75 17                	jne    c001e93d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e926:	83 ec 0c             	sub    esp,0xc
c001e929:	68 38 97 02 c0       	push   0xc0029738
c001e92e:	e8 00 3d ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001e933:	83 c4 10             	add    esp,0x10
c001e936:	b8 09 00 00 00       	mov    eax,0x9
c001e93b:	eb 1a                	jmp    c001e957 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e93d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e941:	83 ec 08             	sub    esp,0x8
c001e944:	50                   	push   eax
c001e945:	68 0c 97 02 c0       	push   0xc002970c
c001e94a:	e8 e4 3c ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001e94f:	83 c4 10             	add    esp,0x10
c001e952:	b8 01 00 00 00       	mov    eax,0x1
c001e957:	83 c4 2c             	add    esp,0x2c
c001e95a:	c3                   	ret    
c001e95b:	90                   	nop

c001e95c <FAT::tryMount(LogicalDisk*, int)>:
c001e95c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e962:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001e967:	83 f8 14             	cmp    eax,0x14
c001e96a:	75 17                	jne    c001e983 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e96c:	83 ec 0c             	sub    esp,0xc
c001e96f:	68 1e 97 02 c0       	push   0xc002971e
c001e974:	e8 1e a7 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c001e979:	83 c4 10             	add    esp,0x10
c001e97c:	b0 00                	mov    al,0x0
c001e97e:	e9 d7 01 00 00       	jmp    c001eb5a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e983:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e98a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e990:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e996:	3d 00 02 00 00       	cmp    eax,0x200
c001e99b:	74 07                	je     c001e9a4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e99d:	b0 00                	mov    al,0x0
c001e99f:	e9 b6 01 00 00       	jmp    c001eb5a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e9a4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e9ac:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e9b3:	8b 04 85 80 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3980]
c001e9ba:	83 f8 ff             	cmp    eax,0xffffffff
c001e9bd:	74 07                	je     c001e9c6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e9bf:	b0 01                	mov    al,0x1
c001e9c1:	e9 94 01 00 00       	jmp    c001eb5a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e9c6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e9d0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e9d8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e9df:	88 c2                	mov    dl,al
c001e9e1:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001e9e6:	01 d0                	add    eax,edx
c001e9e8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e9ef:	8b 15 60 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c660
c001e9f5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e9fc:	89 14 85 80 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3980],edx
c001ea03:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001ea08:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001ea0f:	89 14 85 00 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3900],edx
c001ea16:	83 ec 0c             	sub    esp,0xc
c001ea19:	68 54 02 00 00       	push   0x254
c001ea1e:	e8 9d 0a ff ff       	call   c000f4c0 <malloc>
c001ea23:	83 c4 10             	add    esp,0x10
c001ea26:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001ea2d:	83 ec 04             	sub    esp,0x4
c001ea30:	6a 00                	push   0x0
c001ea32:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ea39:	50                   	push   eax
c001ea3a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ea41:	e8 89 62 fe ff       	call   c0004ccf <f_mount>
c001ea46:	83 c4 10             	add    esp,0x10
c001ea49:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001ea50:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001ea58:	74 19                	je     c001ea73 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001ea5a:	83 ec 0c             	sub    esp,0xc
c001ea5d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ea64:	e8 77 0a ff ff       	call   c000f4e0 <rfree>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	b0 00                	mov    al,0x0
c001ea6e:	e9 e7 00 00 00       	jmp    c001eb5a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ea73:	83 ec 04             	sub    esp,0x4
c001ea76:	68 00 01 00 00       	push   0x100
c001ea7b:	6a 00                	push   0x0
c001ea7d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ea84:	50                   	push   eax
c001ea85:	e8 f1 1b fe ff       	call   c000067b <memset>
c001ea8a:	83 c4 10             	add    esp,0x10
c001ea8d:	83 ec 08             	sub    esp,0x8
c001ea90:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ea97:	50                   	push   eax
c001ea98:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ea9f:	50                   	push   eax
c001eaa0:	e8 2c 1d fe ff       	call   c00007d1 <strcat>
c001eaa5:	83 c4 10             	add    esp,0x10
c001eaa8:	83 ec 08             	sub    esp,0x8
c001eaab:	68 2c 97 02 c0       	push   0xc002972c
c001eab0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001eab7:	50                   	push   eax
c001eab8:	e8 14 1d fe ff       	call   c00007d1 <strcat>
c001eabd:	83 c4 10             	add    esp,0x10
c001eac0:	83 ec 04             	sub    esp,0x4
c001eac3:	6a 01                	push   0x1
c001eac5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001eacc:	50                   	push   eax
c001eacd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ead1:	50                   	push   eax
c001ead2:	e8 5a 62 fe ff       	call   c0004d31 <f_open>
c001ead7:	83 c4 10             	add    esp,0x10
c001eada:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001eae1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001eae8:	85 c0                	test   eax,eax
c001eaea:	74 0a                	je     c001eaf6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001eaec:	78 2d                	js     c001eb1b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001eaee:	83 e8 04             	sub    eax,0x4
c001eaf1:	83 f8 01             	cmp    eax,0x1
c001eaf4:	77 25                	ja     c001eb1b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001eaf6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eb05:	50                   	push   eax
c001eb06:	e8 78 6d fe ff       	call   c0005883 <f_close>
c001eb0b:	83 c4 10             	add    esp,0x10
c001eb0e:	90                   	nop
c001eb0f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001eb17:	74 3a                	je     c001eb53 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001eb19:	eb 2d                	jmp    c001eb48 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001eb1b:	83 ec 0c             	sub    esp,0xc
c001eb1e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001eb25:	e8 b6 09 ff ff       	call   c000f4e0 <rfree>
c001eb2a:	83 c4 10             	add    esp,0x10
c001eb2d:	83 ec 04             	sub    esp,0x4
c001eb30:	6a 00                	push   0x0
c001eb32:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001eb39:	50                   	push   eax
c001eb3a:	6a 00                	push   0x0
c001eb3c:	e8 8e 61 fe ff       	call   c0004ccf <f_mount>
c001eb41:	83 c4 10             	add    esp,0x10
c001eb44:	b0 00                	mov    al,0x0
c001eb46:	eb 12                	jmp    c001eb5a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001eb48:	a1 60 c6 02 c0       	mov    eax,ds:0xc002c660
c001eb4d:	40                   	inc    eax
c001eb4e:	a3 60 c6 02 c0       	mov    ds:0xc002c660,eax
c001eb53:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001eb5a:	81 c4 6c 03 00 00    	add    esp,0x36c
c001eb60:	c3                   	ret    
c001eb61:	90                   	nop

c001eb62 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001eb62:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001eb68:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001eb70:	74 0a                	je     c001eb7c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001eb72:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001eb7a:	75 0a                	jne    c001eb86 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001eb7c:	b8 04 00 00 00       	mov    eax,0x4
c001eb81:	e9 db 00 00 00       	jmp    c001ec61 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001eb86:	83 ec 08             	sub    esp,0x8
c001eb89:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001eb90:	50                   	push   eax
c001eb91:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001eb98:	e8 f0 72 fe ff       	call   c0005e8d <f_readdir>
c001eb9d:	83 c4 10             	add    esp,0x10
c001eba0:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001eba7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ebad:	83 ec 0c             	sub    esp,0xc
c001ebb0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ebb7:	83 c0 1a             	add    eax,0x1a
c001ebba:	50                   	push   eax
c001ebbb:	e8 d8 1a fe ff       	call   c0000698 <strlen>
c001ebc0:	83 c4 10             	add    esp,0x10
c001ebc3:	ba 00 00 00 00       	mov    edx,0x0
c001ebc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ebcc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ebd0:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001ebd7:	0f b6 c0             	movzx  eax,al
c001ebda:	83 e0 10             	and    eax,0x10
c001ebdd:	74 07                	je     c001ebe6 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001ebdf:	b8 02 00 00 00       	mov    eax,0x2
c001ebe4:	eb 05                	jmp    c001ebeb <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001ebe6:	b8 01 00 00 00       	mov    eax,0x1
c001ebeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebef:	83 ec 08             	sub    esp,0x8
c001ebf2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ebf9:	83 c0 1a             	add    eax,0x1a
c001ebfc:	50                   	push   eax
c001ebfd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ec01:	83 c0 10             	add    eax,0x10
c001ec04:	50                   	push   eax
c001ec05:	e8 10 1b fe ff       	call   c000071a <strcpy>
c001ec0a:	83 c4 10             	add    esp,0x10
c001ec0d:	83 ec 04             	sub    esp,0x4
c001ec10:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001ec17:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ec1b:	50                   	push   eax
c001ec1c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001ec23:	e8 1d 1a fe ff       	call   c0000645 <memcpy>
c001ec28:	83 c4 10             	add    esp,0x10
c001ec2b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001ec32:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ec38:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001ec3f:	84 c0                	test   al,al
c001ec41:	75 07                	jne    c001ec4a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001ec43:	b8 07 00 00 00       	mov    eax,0x7
c001ec48:	eb 17                	jmp    c001ec61 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ec4a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001ec51:	85 c0                	test   eax,eax
c001ec53:	75 07                	jne    c001ec5c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001ec55:	b8 00 00 00 00       	mov    eax,0x0
c001ec5a:	eb 05                	jmp    c001ec61 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ec5c:	b8 01 00 00 00       	mov    eax,0x1
c001ec61:	81 c4 3c 02 00 00    	add    esp,0x23c
c001ec67:	c3                   	ret    

c001ec68 <FAT::read(void*, unsigned long, void*, int*)>:
c001ec68:	83 ec 1c             	sub    esp,0x1c
c001ec6b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ec70:	74 07                	je     c001ec79 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001ec72:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ec77:	75 07                	jne    c001ec80 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001ec79:	b8 04 00 00 00       	mov    eax,0x4
c001ec7e:	eb 3d                	jmp    c001ecbd <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ec80:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ec84:	50                   	push   eax
c001ec85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ec89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ec8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec91:	e8 d7 64 fe ff       	call   c000516d <f_read>
c001ec96:	83 c4 10             	add    esp,0x10
c001ec99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eca1:	89 c2                	mov    edx,eax
c001eca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eca7:	89 10                	mov    DWORD PTR [eax],edx
c001eca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecad:	85 c0                	test   eax,eax
c001ecaf:	75 07                	jne    c001ecb8 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001ecb1:	b8 00 00 00 00       	mov    eax,0x0
c001ecb6:	eb 05                	jmp    c001ecbd <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ecb8:	b8 01 00 00 00       	mov    eax,0x1
c001ecbd:	83 c4 1c             	add    esp,0x1c
c001ecc0:	c3                   	ret    
c001ecc1:	90                   	nop

c001ecc2 <FAT::write(void*, unsigned long, void*, int*)>:
c001ecc2:	83 ec 1c             	sub    esp,0x1c
c001ecc5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ecca:	74 07                	je     c001ecd3 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001eccc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ecd1:	75 07                	jne    c001ecda <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001ecd3:	b8 04 00 00 00       	mov    eax,0x4
c001ecd8:	eb 3d                	jmp    c001ed17 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ecda:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ecde:	50                   	push   eax
c001ecdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ece3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ece7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eceb:	e8 fd 66 fe ff       	call   c00053ed <f_write>
c001ecf0:	83 c4 10             	add    esp,0x10
c001ecf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecfb:	89 c2                	mov    edx,eax
c001ecfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed01:	89 10                	mov    DWORD PTR [eax],edx
c001ed03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed07:	85 c0                	test   eax,eax
c001ed09:	75 07                	jne    c001ed12 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001ed0b:	b8 00 00 00 00       	mov    eax,0x0
c001ed10:	eb 05                	jmp    c001ed17 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ed12:	b8 01 00 00 00       	mov    eax,0x1
c001ed17:	83 c4 1c             	add    esp,0x1c
c001ed1a:	c3                   	ret    
c001ed1b:	90                   	nop

c001ed1c <FAT::close(void*)>:
c001ed1c:	83 ec 1c             	sub    esp,0x1c
c001ed1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed24:	75 07                	jne    c001ed2d <FAT::close(void*)+0x11>
c001ed26:	b8 04 00 00 00       	mov    eax,0x4
c001ed2b:	eb 36                	jmp    c001ed63 <FAT::close(void*)+0x47>
c001ed2d:	83 ec 0c             	sub    esp,0xc
c001ed30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed34:	e8 4a 6b fe ff       	call   c0005883 <f_close>
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed40:	83 ec 0c             	sub    esp,0xc
c001ed43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed47:	e8 84 07 ff ff       	call   c000f4d0 <free>
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed53:	85 c0                	test   eax,eax
c001ed55:	75 07                	jne    c001ed5e <FAT::close(void*)+0x42>
c001ed57:	b8 00 00 00 00       	mov    eax,0x0
c001ed5c:	eb 05                	jmp    c001ed63 <FAT::close(void*)+0x47>
c001ed5e:	b8 01 00 00 00       	mov    eax,0x1
c001ed63:	83 c4 1c             	add    esp,0x1c
c001ed66:	c3                   	ret    
c001ed67:	90                   	nop

c001ed68 <FAT::closeDir(void*)>:
c001ed68:	83 ec 1c             	sub    esp,0x1c
c001ed6b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed70:	75 07                	jne    c001ed79 <FAT::closeDir(void*)+0x11>
c001ed72:	b8 04 00 00 00       	mov    eax,0x4
c001ed77:	eb 36                	jmp    c001edaf <FAT::closeDir(void*)+0x47>
c001ed79:	83 ec 0c             	sub    esp,0xc
c001ed7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed80:	e8 e6 70 fe ff       	call   c0005e6b <f_closedir>
c001ed85:	83 c4 10             	add    esp,0x10
c001ed88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed8c:	83 ec 0c             	sub    esp,0xc
c001ed8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed93:	e8 38 07 ff ff       	call   c000f4d0 <free>
c001ed98:	83 c4 10             	add    esp,0x10
c001ed9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed9f:	85 c0                	test   eax,eax
c001eda1:	75 07                	jne    c001edaa <FAT::closeDir(void*)+0x42>
c001eda3:	b8 00 00 00 00       	mov    eax,0x0
c001eda8:	eb 05                	jmp    c001edaf <FAT::closeDir(void*)+0x47>
c001edaa:	b8 01 00 00 00       	mov    eax,0x1
c001edaf:	83 c4 1c             	add    esp,0x1c
c001edb2:	c3                   	ret    
c001edb3:	90                   	nop

c001edb4 <FAT::seek(void*, unsigned long long)>:
c001edb4:	83 ec 2c             	sub    esp,0x2c
c001edb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001edbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001edbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001edc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edc7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001edcc:	75 07                	jne    c001edd5 <FAT::seek(void*, unsigned long long)+0x21>
c001edce:	b8 04 00 00 00       	mov    eax,0x4
c001edd3:	eb 2f                	jmp    c001ee04 <FAT::seek(void*, unsigned long long)+0x50>
c001edd5:	83 ec 04             	sub    esp,0x4
c001edd8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eddc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ede0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ede4:	e8 c9 6a fe ff       	call   c00058b2 <f_lseek>
c001ede9:	83 c4 10             	add    esp,0x10
c001edec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edf4:	85 c0                	test   eax,eax
c001edf6:	75 07                	jne    c001edff <FAT::seek(void*, unsigned long long)+0x4b>
c001edf8:	b8 00 00 00 00       	mov    eax,0x0
c001edfd:	eb 05                	jmp    c001ee04 <FAT::seek(void*, unsigned long long)+0x50>
c001edff:	b8 01 00 00 00       	mov    eax,0x1
c001ee04:	83 c4 2c             	add    esp,0x2c
c001ee07:	c3                   	ret    

c001ee08 <fatWrapperReadDisk>:
c001ee08:	83 ec 1c             	sub    esp,0x1c
c001ee0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ee13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee17:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ee1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ee27:	8b 04 85 c0 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4940]
c001ee2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ee32:	83 ec 0c             	sub    esp,0xc
c001ee35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ee39:	52                   	push   edx
c001ee3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ee3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ee42:	50                   	push   eax
c001ee43:	e8 fe 6d ff ff       	call   c0015c46 <LogicalDisk::read(unsigned long long, int, void*)>
c001ee48:	83 c4 20             	add    esp,0x20
c001ee4b:	83 c4 1c             	add    esp,0x1c
c001ee4e:	c3                   	ret    

c001ee4f <fatWrapperWriteDisk>:
c001ee4f:	83 ec 1c             	sub    esp,0x1c
c001ee52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee56:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ee5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee5e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ee65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee69:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ee6e:	8b 04 85 c0 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4940]
c001ee75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ee79:	83 ec 0c             	sub    esp,0xc
c001ee7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ee80:	52                   	push   edx
c001ee81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ee85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ee89:	50                   	push   eax
c001ee8a:	e8 23 6e ff ff       	call   c0015cb2 <LogicalDisk::write(unsigned long long, int, void*)>
c001ee8f:	83 c4 20             	add    esp,0x20
c001ee92:	83 c4 1c             	add    esp,0x1c
c001ee95:	c3                   	ret    

c001ee96 <fatWrapperIoctl>:
c001ee96:	53                   	push   ebx
c001ee97:	83 ec 28             	sub    esp,0x28
c001ee9a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ee9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001eea2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001eea6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eeaa:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001eeaf:	75 31                	jne    c001eee2 <fatWrapperIoctl+0x4c>
c001eeb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eeb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eeb9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eebe:	8b 04 85 c0 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4940]
c001eec5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001eecb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eed1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eed5:	66 89 02             	mov    WORD PTR [edx],ax
c001eed8:	b8 00 00 00 00       	mov    eax,0x0
c001eedd:	e9 b2 00 00 00       	jmp    c001ef94 <fatWrapperIoctl+0xfe>
c001eee2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001eee7:	75 6a                	jne    c001ef53 <fatWrapperIoctl+0xbd>
c001eee9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eeed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eef1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eef6:	8b 04 85 c0 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4940]
c001eefd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ef03:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ef09:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ef0f:	89 c8                	mov    eax,ecx
c001ef11:	89 da                	mov    edx,ebx
c001ef13:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ef17:	c1 e0 0a             	shl    eax,0xa
c001ef1a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ef1f:	8b 0c 8d c0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4940]
c001ef26:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ef2c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ef32:	89 cb                	mov    ebx,ecx
c001ef34:	c1 fb 1f             	sar    ebx,0x1f
c001ef37:	53                   	push   ebx
c001ef38:	51                   	push   ecx
c001ef39:	52                   	push   edx
c001ef3a:	50                   	push   eax
c001ef3b:	e8 ec 4f 00 00       	call   c0023f2c <__udivdi3>
c001ef40:	83 c4 10             	add    esp,0x10
c001ef43:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ef47:	89 01                	mov    DWORD PTR [ecx],eax
c001ef49:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ef4c:	b8 00 00 00 00       	mov    eax,0x0
c001ef51:	eb 41                	jmp    c001ef94 <fatWrapperIoctl+0xfe>
c001ef53:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ef58:	75 07                	jne    c001ef61 <fatWrapperIoctl+0xcb>
c001ef5a:	b8 00 00 00 00       	mov    eax,0x0
c001ef5f:	eb 33                	jmp    c001ef94 <fatWrapperIoctl+0xfe>
c001ef61:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001ef66:	75 19                	jne    c001ef81 <fatWrapperIoctl+0xeb>
c001ef68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ef6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ef70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef74:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ef7a:	b8 00 00 00 00       	mov    eax,0x0
c001ef7f:	eb 13                	jmp    c001ef94 <fatWrapperIoctl+0xfe>
c001ef81:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001ef86:	75 07                	jne    c001ef8f <fatWrapperIoctl+0xf9>
c001ef88:	b8 00 00 00 00       	mov    eax,0x0
c001ef8d:	eb 05                	jmp    c001ef94 <fatWrapperIoctl+0xfe>
c001ef8f:	b8 04 00 00 00       	mov    eax,0x4
c001ef94:	83 c4 28             	add    esp,0x28
c001ef97:	5b                   	pop    ebx
c001ef98:	c3                   	ret    
c001ef99:	90                   	nop

c001ef9a <FAT::FAT()>:
c001ef9a:	83 ec 1c             	sub    esp,0x1c
c001ef9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efa1:	83 ec 0c             	sub    esp,0xc
c001efa4:	50                   	push   eax
c001efa5:	e8 8e 39 ff ff       	call   c0012938 <Filesystem::Filesystem()>
c001efaa:	83 c4 10             	add    esp,0x10
c001efad:	ba 68 97 02 c0       	mov    edx,0xc0029768
c001efb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efb6:	89 10                	mov    DWORD PTR [eax],edx
c001efb8:	c7 05 60 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c660,0x0
c001efc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001efca:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001efcf:	7f 15                	jg     c001efe6 <FAT::FAT()+0x4c>
c001efd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efd5:	c7 04 85 80 c6 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3980],0xffffffff
c001efe0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001efe4:	eb e4                	jmp    c001efca <FAT::FAT()+0x30>
c001efe6:	90                   	nop
c001efe7:	83 c4 1c             	add    esp,0x1c
c001efea:	c3                   	ret    
c001efeb:	90                   	nop

c001efec <FAT::fixFilepath(char*)>:
c001efec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eff0:	8a 00                	mov    al,BYTE PTR [eax]
c001eff2:	3c 40                	cmp    al,0x40
c001eff4:	7e 2c                	jle    c001f022 <FAT::fixFilepath(char*)+0x36>
c001eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001effa:	8a 00                	mov    al,BYTE PTR [eax]
c001effc:	83 e8 41             	sub    eax,0x41
c001efff:	88 c2                	mov    dl,al
c001f001:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f005:	88 10                	mov    BYTE PTR [eax],dl
c001f007:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f00b:	8a 00                	mov    al,BYTE PTR [eax]
c001f00d:	0f be c0             	movsx  eax,al
c001f010:	8b 04 85 80 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3980]
c001f017:	83 c0 30             	add    eax,0x30
c001f01a:	88 c2                	mov    dl,al
c001f01c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f020:	88 10                	mov    BYTE PTR [eax],dl
c001f022:	90                   	nop
c001f023:	c3                   	ret    

c001f024 <FAT::open(char const*, void**, FileOpenMode)>:
c001f024:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f02a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f032:	74 0a                	je     c001f03e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001f034:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f03c:	75 0a                	jne    c001f048 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001f03e:	b8 04 00 00 00       	mov    eax,0x4
c001f043:	e9 fd 00 00 00       	jmp    c001f145 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f048:	83 ec 08             	sub    esp,0x8
c001f04b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f052:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f056:	50                   	push   eax
c001f057:	e8 be 16 fe ff       	call   c000071a <strcpy>
c001f05c:	83 c4 10             	add    esp,0x10
c001f05f:	83 ec 08             	sub    esp,0x8
c001f062:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f066:	50                   	push   eax
c001f067:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f06e:	e8 79 ff ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f073:	83 c4 10             	add    esp,0x10
c001f076:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001f07e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f085:	83 e0 01             	and    eax,0x1
c001f088:	74 08                	je     c001f092 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001f08a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001f092:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f099:	83 e0 04             	and    eax,0x4
c001f09c:	74 10                	je     c001f0ae <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001f09e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001f0a6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f0ae:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f0b5:	83 e0 02             	and    eax,0x2
c001f0b8:	74 08                	je     c001f0c2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001f0ba:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f0c2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f0c9:	83 e0 08             	and    eax,0x8
c001f0cc:	74 08                	je     c001f0d6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001f0ce:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001f0d6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f0dd:	83 e0 10             	and    eax,0x10
c001f0e0:	74 08                	je     c001f0ea <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001f0e2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001f0ea:	83 ec 0c             	sub    esp,0xc
c001f0ed:	68 50 02 00 00       	push   0x250
c001f0f2:	e8 c9 03 ff ff       	call   c000f4c0 <malloc>
c001f0f7:	83 c4 10             	add    esp,0x10
c001f0fa:	89 c2                	mov    edx,eax
c001f0fc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f103:	89 10                	mov    DWORD PTR [eax],edx
c001f105:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001f10d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f114:	8b 00                	mov    eax,DWORD PTR [eax]
c001f116:	83 ec 04             	sub    esp,0x4
c001f119:	52                   	push   edx
c001f11a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f11e:	52                   	push   edx
c001f11f:	50                   	push   eax
c001f120:	e8 0c 5c fe ff       	call   c0004d31 <f_open>
c001f125:	83 c4 10             	add    esp,0x10
c001f128:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001f12f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001f137:	74 07                	je     c001f140 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001f139:	b8 01 00 00 00       	mov    eax,0x1
c001f13e:	eb 05                	jmp    c001f145 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f140:	b8 00 00 00 00       	mov    eax,0x0
c001f145:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f14b:	c3                   	ret    

c001f14c <FAT::openDir(char const*, void**)>:
c001f14c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f152:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f15a:	74 0a                	je     c001f166 <FAT::openDir(char const*, void**)+0x1a>
c001f15c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f164:	75 07                	jne    c001f16d <FAT::openDir(char const*, void**)+0x21>
c001f166:	b8 04 00 00 00       	mov    eax,0x4
c001f16b:	eb 7d                	jmp    c001f1ea <FAT::openDir(char const*, void**)+0x9e>
c001f16d:	83 ec 08             	sub    esp,0x8
c001f170:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f177:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f17b:	50                   	push   eax
c001f17c:	e8 99 15 fe ff       	call   c000071a <strcpy>
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	83 ec 08             	sub    esp,0x8
c001f187:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f18b:	50                   	push   eax
c001f18c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f193:	e8 54 fe ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f198:	83 c4 10             	add    esp,0x10
c001f19b:	83 ec 0c             	sub    esp,0xc
c001f19e:	6a 4c                	push   0x4c
c001f1a0:	e8 1b 03 ff ff       	call   c000f4c0 <malloc>
c001f1a5:	83 c4 10             	add    esp,0x10
c001f1a8:	89 c2                	mov    edx,eax
c001f1aa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f1b1:	89 10                	mov    DWORD PTR [eax],edx
c001f1b3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f1ba:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1bc:	83 ec 08             	sub    esp,0x8
c001f1bf:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f1c3:	52                   	push   edx
c001f1c4:	50                   	push   eax
c001f1c5:	e8 9f 6b fe ff       	call   c0005d69 <f_opendir>
c001f1ca:	83 c4 10             	add    esp,0x10
c001f1cd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f1d4:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f1dc:	74 07                	je     c001f1e5 <FAT::openDir(char const*, void**)+0x99>
c001f1de:	b8 01 00 00 00       	mov    eax,0x1
c001f1e3:	eb 05                	jmp    c001f1ea <FAT::openDir(char const*, void**)+0x9e>
c001f1e5:	b8 00 00 00 00       	mov    eax,0x0
c001f1ea:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f1f0:	c3                   	ret    
c001f1f1:	90                   	nop

c001f1f2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f1f2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f1f8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f200:	75 0a                	jne    c001f20c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001f202:	b8 04 00 00 00       	mov    eax,0x4
c001f207:	e9 c9 00 00 00       	jmp    c001f2d5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f20c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f214:	75 0a                	jne    c001f220 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001f216:	b8 04 00 00 00       	mov    eax,0x4
c001f21b:	e9 b5 00 00 00       	jmp    c001f2d5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f220:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f228:	75 0a                	jne    c001f234 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001f22a:	b8 04 00 00 00       	mov    eax,0x4
c001f22f:	e9 a1 00 00 00       	jmp    c001f2d5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f234:	83 ec 08             	sub    esp,0x8
c001f237:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f23e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f245:	50                   	push   eax
c001f246:	e8 cf 14 fe ff       	call   c000071a <strcpy>
c001f24b:	83 c4 10             	add    esp,0x10
c001f24e:	83 ec 08             	sub    esp,0x8
c001f251:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f258:	50                   	push   eax
c001f259:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f260:	e8 87 fd ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f265:	83 c4 10             	add    esp,0x10
c001f268:	83 ec 08             	sub    esp,0x8
c001f26b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f26f:	50                   	push   eax
c001f270:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f277:	50                   	push   eax
c001f278:	e8 ab 6c fe ff       	call   c0005f28 <f_stat>
c001f27d:	83 c4 10             	add    esp,0x10
c001f280:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f287:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f28e:	85 c0                	test   eax,eax
c001f290:	74 07                	je     c001f299 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001f292:	83 f8 04             	cmp    eax,0x4
c001f295:	74 32                	je     c001f2c9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001f297:	eb 37                	jmp    c001f2d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001f299:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f29d:	0f b6 c0             	movzx  eax,al
c001f2a0:	83 e0 10             	and    eax,0x10
c001f2a3:	0f 95 c2             	setne  dl
c001f2a6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f2ad:	88 10                	mov    BYTE PTR [eax],dl
c001f2af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2b6:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f2bd:	89 01                	mov    DWORD PTR [ecx],eax
c001f2bf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f2c2:	b8 00 00 00 00       	mov    eax,0x0
c001f2c7:	eb 0c                	jmp    c001f2d5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f2c9:	b8 02 00 00 00       	mov    eax,0x2
c001f2ce:	eb 05                	jmp    c001f2d5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f2d0:	b8 01 00 00 00       	mov    eax,0x1
c001f2d5:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f2db:	c3                   	ret    

c001f2dc <FAT::unlink(char const*)>:
c001f2dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f2e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f2ea:	75 07                	jne    c001f2f3 <FAT::unlink(char const*)+0x17>
c001f2ec:	b8 04 00 00 00       	mov    eax,0x4
c001f2f1:	eb 5c                	jmp    c001f34f <FAT::unlink(char const*)+0x73>
c001f2f3:	83 ec 08             	sub    esp,0x8
c001f2f6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f2fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f301:	50                   	push   eax
c001f302:	e8 13 14 fe ff       	call   c000071a <strcpy>
c001f307:	83 c4 10             	add    esp,0x10
c001f30a:	83 ec 08             	sub    esp,0x8
c001f30d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f311:	50                   	push   eax
c001f312:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f319:	e8 ce fc ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f31e:	83 c4 10             	add    esp,0x10
c001f321:	83 ec 0c             	sub    esp,0xc
c001f324:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f328:	50                   	push   eax
c001f329:	e8 4c 6f fe ff       	call   c000627a <f_unlink>
c001f32e:	83 c4 10             	add    esp,0x10
c001f331:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f338:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f33f:	85 c0                	test   eax,eax
c001f341:	75 07                	jne    c001f34a <FAT::unlink(char const*)+0x6e>
c001f343:	b8 00 00 00 00       	mov    eax,0x0
c001f348:	eb 05                	jmp    c001f34f <FAT::unlink(char const*)+0x73>
c001f34a:	b8 01 00 00 00       	mov    eax,0x1
c001f34f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f355:	c3                   	ret    

c001f356 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001f356:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001f35c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001f363:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001f36a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f36e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f372:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001f37a:	75 0a                	jne    c001f386 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001f37c:	b8 04 00 00 00       	mov    eax,0x4
c001f381:	e9 1c 01 00 00       	jmp    c001f4a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f386:	83 ec 08             	sub    esp,0x8
c001f389:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f390:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f394:	50                   	push   eax
c001f395:	e8 80 13 fe ff       	call   c000071a <strcpy>
c001f39a:	83 c4 10             	add    esp,0x10
c001f39d:	83 ec 08             	sub    esp,0x8
c001f3a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f3a4:	50                   	push   eax
c001f3a5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f3ac:	e8 3b fc ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f3b1:	83 c4 10             	add    esp,0x10
c001f3b4:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f3bc:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f3c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f3c9:	83 e0 01             	and    eax,0x1
c001f3cc:	74 08                	je     c001f3d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001f3ce:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001f3d6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f3db:	83 e0 02             	and    eax,0x2
c001f3de:	74 08                	je     c001f3e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001f3e0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001f3e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f3ed:	83 e0 04             	and    eax,0x4
c001f3f0:	74 08                	je     c001f3fa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001f3f2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001f3fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f3ff:	83 e0 08             	and    eax,0x8
c001f402:	74 08                	je     c001f40c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001f404:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001f40c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f411:	83 e0 01             	and    eax,0x1
c001f414:	74 08                	je     c001f41e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001f416:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001f41e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f423:	83 e0 02             	and    eax,0x2
c001f426:	74 08                	je     c001f430 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001f428:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001f430:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f435:	83 e0 04             	and    eax,0x4
c001f438:	74 08                	je     c001f442 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001f43a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001f442:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f447:	83 e0 08             	and    eax,0x8
c001f44a:	74 08                	je     c001f454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001f44c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001f454:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f45b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001f462:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f46a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f472:	83 ec 04             	sub    esp,0x4
c001f475:	52                   	push   edx
c001f476:	50                   	push   eax
c001f477:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f47b:	50                   	push   eax
c001f47c:	e8 9b 74 fe ff       	call   c000691c <f_chmod>
c001f481:	83 c4 10             	add    esp,0x10
c001f484:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f48b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f492:	85 c0                	test   eax,eax
c001f494:	75 07                	jne    c001f49d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001f496:	b8 00 00 00 00       	mov    eax,0x0
c001f49b:	eb 05                	jmp    c001f4a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f49d:	b8 01 00 00 00       	mov    eax,0x1
c001f4a2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f4a8:	c3                   	ret    
c001f4a9:	90                   	nop

c001f4aa <FAT::rename(char const*, char const*)>:
c001f4aa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f4b0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f4b8:	74 0a                	je     c001f4c4 <FAT::rename(char const*, char const*)+0x1a>
c001f4ba:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f4c2:	75 0a                	jne    c001f4ce <FAT::rename(char const*, char const*)+0x24>
c001f4c4:	b8 04 00 00 00       	mov    eax,0x4
c001f4c9:	e9 98 00 00 00       	jmp    c001f566 <FAT::rename(char const*, char const*)+0xbc>
c001f4ce:	83 ec 08             	sub    esp,0x8
c001f4d1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f4d8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f4df:	50                   	push   eax
c001f4e0:	e8 35 12 fe ff       	call   c000071a <strcpy>
c001f4e5:	83 c4 10             	add    esp,0x10
c001f4e8:	83 ec 08             	sub    esp,0x8
c001f4eb:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f4f2:	50                   	push   eax
c001f4f3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f4fa:	e8 ed fa ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f4ff:	83 c4 10             	add    esp,0x10
c001f502:	83 ec 08             	sub    esp,0x8
c001f505:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f50c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f510:	50                   	push   eax
c001f511:	e8 04 12 fe ff       	call   c000071a <strcpy>
c001f516:	83 c4 10             	add    esp,0x10
c001f519:	83 ec 08             	sub    esp,0x8
c001f51c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f520:	50                   	push   eax
c001f521:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f528:	e8 bf fa ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	83 ec 08             	sub    esp,0x8
c001f533:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f537:	50                   	push   eax
c001f538:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f53f:	50                   	push   eax
c001f540:	e8 e4 70 fe ff       	call   c0006629 <f_rename>
c001f545:	83 c4 10             	add    esp,0x10
c001f548:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f54f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f556:	85 c0                	test   eax,eax
c001f558:	75 07                	jne    c001f561 <FAT::rename(char const*, char const*)+0xb7>
c001f55a:	b8 00 00 00 00       	mov    eax,0x0
c001f55f:	eb 05                	jmp    c001f566 <FAT::rename(char const*, char const*)+0xbc>
c001f561:	b8 01 00 00 00       	mov    eax,0x1
c001f566:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f56c:	c3                   	ret    
c001f56d:	90                   	nop

c001f56e <FAT::mkdir(char const*)>:
c001f56e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f574:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f57c:	75 07                	jne    c001f585 <FAT::mkdir(char const*)+0x17>
c001f57e:	b8 04 00 00 00       	mov    eax,0x4
c001f583:	eb 5c                	jmp    c001f5e1 <FAT::mkdir(char const*)+0x73>
c001f585:	83 ec 08             	sub    esp,0x8
c001f588:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f58f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f593:	50                   	push   eax
c001f594:	e8 81 11 fe ff       	call   c000071a <strcpy>
c001f599:	83 c4 10             	add    esp,0x10
c001f59c:	83 ec 08             	sub    esp,0x8
c001f59f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f5a3:	50                   	push   eax
c001f5a4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f5ab:	e8 3c fa ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f5b0:	83 c4 10             	add    esp,0x10
c001f5b3:	83 ec 0c             	sub    esp,0xc
c001f5b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f5ba:	50                   	push   eax
c001f5bb:	e8 3d 6e fe ff       	call   c00063fd <f_mkdir>
c001f5c0:	83 c4 10             	add    esp,0x10
c001f5c3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f5ca:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f5d1:	85 c0                	test   eax,eax
c001f5d3:	75 07                	jne    c001f5dc <FAT::mkdir(char const*)+0x6e>
c001f5d5:	b8 00 00 00 00       	mov    eax,0x0
c001f5da:	eb 05                	jmp    c001f5e1 <FAT::mkdir(char const*)+0x73>
c001f5dc:	b8 01 00 00 00       	mov    eax,0x1
c001f5e1:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f5e7:	c3                   	ret    

c001f5e8 <FAT::exists(char const*)>:
c001f5e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f5ee:	83 ec 08             	sub    esp,0x8
c001f5f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f5f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f5fc:	50                   	push   eax
c001f5fd:	e8 18 11 fe ff       	call   c000071a <strcpy>
c001f602:	83 c4 10             	add    esp,0x10
c001f605:	83 ec 08             	sub    esp,0x8
c001f608:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f60c:	50                   	push   eax
c001f60d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f614:	e8 d3 f9 ff ff       	call   c001efec <FAT::fixFilepath(char*)>
c001f619:	83 c4 10             	add    esp,0x10
c001f61c:	83 ec 08             	sub    esp,0x8
c001f61f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001f626:	50                   	push   eax
c001f627:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f62b:	50                   	push   eax
c001f62c:	e8 f7 68 fe ff       	call   c0005f28 <f_stat>
c001f631:	83 c4 10             	add    esp,0x10
c001f634:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f63b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f642:	85 c0                	test   eax,eax
c001f644:	75 04                	jne    c001f64a <FAT::exists(char const*)+0x62>
c001f646:	b0 01                	mov    al,0x1
c001f648:	eb 02                	jmp    c001f64c <FAT::exists(char const*)+0x64>
c001f64a:	b0 00                	mov    al,0x0
c001f64c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f652:	c3                   	ret    
c001f653:	90                   	nop

c001f654 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f654:	b8 08 00 00 00       	mov    eax,0x8
c001f659:	c3                   	ret    

c001f65a <ISO9660::seek(void*, unsigned long long)>:
c001f65a:	53                   	push   ebx
c001f65b:	b8 04 00 00 00       	mov    eax,0x4
c001f660:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f664:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f668:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f66c:	85 d2                	test   edx,edx
c001f66e:	74 17                	je     c001f687 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f670:	89 c8                	mov    eax,ecx
c001f672:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001f675:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001f678:	b8 01 00 00 00       	mov    eax,0x1
c001f67d:	73 08                	jae    c001f687 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f67f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001f682:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001f685:	31 c0                	xor    eax,eax
c001f687:	5b                   	pop    ebx
c001f688:	c3                   	ret    
c001f689:	90                   	nop

c001f68a <ISO9660::tell(void*, unsigned long long*)>:
c001f68a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f68e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f692:	85 d2                	test   edx,edx
c001f694:	74 12                	je     c001f6a8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f696:	85 c0                	test   eax,eax
c001f698:	74 0e                	je     c001f6a8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f69a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001f69d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001f6a0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f6a3:	89 10                	mov    DWORD PTR [eax],edx
c001f6a5:	31 c0                	xor    eax,eax
c001f6a7:	c3                   	ret    
c001f6a8:	b8 04 00 00 00       	mov    eax,0x4
c001f6ad:	c3                   	ret    

c001f6ae <ISO9660::getName()>:
c001f6ae:	b8 c4 97 02 c0       	mov    eax,0xc00297c4
c001f6b3:	c3                   	ret    

c001f6b4 <ISO9660::stat(void*, unsigned long long*)>:
c001f6b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6bc:	85 d2                	test   edx,edx
c001f6be:	74 12                	je     c001f6d2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f6c0:	85 c0                	test   eax,eax
c001f6c2:	74 0e                	je     c001f6d2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f6c4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001f6c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001f6ca:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f6cd:	89 10                	mov    DWORD PTR [eax],edx
c001f6cf:	31 c0                	xor    eax,eax
c001f6d1:	c3                   	ret    
c001f6d2:	b8 04 00 00 00       	mov    eax,0x4
c001f6d7:	c3                   	ret    

c001f6d8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001f6d8:	b8 01 00 00 00       	mov    eax,0x1
c001f6dd:	c3                   	ret    

c001f6de <ISO9660::unlink(char const*)>:
c001f6de:	b8 01 00 00 00       	mov    eax,0x1
c001f6e3:	c3                   	ret    

c001f6e4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001f6e4:	b8 01 00 00 00       	mov    eax,0x1
c001f6e9:	c3                   	ret    

c001f6ea <ISO9660::rename(char const*, char const*)>:
c001f6ea:	b8 01 00 00 00       	mov    eax,0x1
c001f6ef:	c3                   	ret    

c001f6f0 <ISO9660::mkdir(char const*)>:
c001f6f0:	b8 01 00 00 00       	mov    eax,0x1
c001f6f5:	c3                   	ret    

c001f6f6 <ISO9660::close(void*)>:
c001f6f6:	83 ec 0c             	sub    esp,0xc
c001f6f9:	b8 04 00 00 00       	mov    eax,0x4
c001f6fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f702:	85 d2                	test   edx,edx
c001f704:	74 0e                	je     c001f714 <ISO9660::close(void*)+0x1e>
c001f706:	83 ec 0c             	sub    esp,0xc
c001f709:	52                   	push   edx
c001f70a:	e8 c1 fd fe ff       	call   c000f4d0 <free>
c001f70f:	83 c4 10             	add    esp,0x10
c001f712:	31 c0                	xor    eax,eax
c001f714:	83 c4 0c             	add    esp,0xc
c001f717:	c3                   	ret    

c001f718 <ISO9660::closeDir(void*)>:
c001f718:	83 ec 0c             	sub    esp,0xc
c001f71b:	b8 04 00 00 00       	mov    eax,0x4
c001f720:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f724:	85 d2                	test   edx,edx
c001f726:	74 0e                	je     c001f736 <ISO9660::closeDir(void*)+0x1e>
c001f728:	83 ec 0c             	sub    esp,0xc
c001f72b:	52                   	push   edx
c001f72c:	e8 9f fd fe ff       	call   c000f4d0 <free>
c001f731:	83 c4 10             	add    esp,0x10
c001f734:	31 c0                	xor    eax,eax
c001f736:	83 c4 0c             	add    esp,0xc
c001f739:	c3                   	ret    

c001f73a <ISO9660::~ISO9660()>:
c001f73a:	83 ec 0c             	sub    esp,0xc
c001f73d:	ba 18 98 02 c0       	mov    edx,0xc0029818
c001f742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f746:	89 10                	mov    DWORD PTR [eax],edx
c001f748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74c:	83 ec 0c             	sub    esp,0xc
c001f74f:	50                   	push   eax
c001f750:	e8 07 32 ff ff       	call   c001295c <Filesystem::~Filesystem()>
c001f755:	83 c4 10             	add    esp,0x10
c001f758:	90                   	nop
c001f759:	83 c4 0c             	add    esp,0xc
c001f75c:	c3                   	ret    
c001f75d:	90                   	nop

c001f75e <ISO9660::~ISO9660()>:
c001f75e:	83 ec 0c             	sub    esp,0xc
c001f761:	83 ec 0c             	sub    esp,0xc
c001f764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f768:	e8 cd ff ff ff       	call   c001f73a <ISO9660::~ISO9660()>
c001f76d:	83 c4 10             	add    esp,0x10
c001f770:	83 ec 08             	sub    esp,0x8
c001f773:	6a 08                	push   0x8
c001f775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f779:	e8 d5 2d ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c001f77e:	83 c4 10             	add    esp,0x10
c001f781:	83 c4 0c             	add    esp,0xc
c001f784:	c3                   	ret    

c001f785 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001f785:	55                   	push   ebp
c001f786:	31 c9                	xor    ecx,ecx
c001f788:	57                   	push   edi
c001f789:	56                   	push   esi
c001f78a:	53                   	push   ebx
c001f78b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001f78f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f793:	89 eb                	mov    ebx,ebp
c001f795:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001f799:	39 ce                	cmp    esi,ecx
c001f79b:	7e 17                	jle    c001f7b4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001f79d:	31 d2                	xor    edx,edx
c001f79f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001f7a3:	7d 13                	jge    c001f7b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001f7a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f7a9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f7ac:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001f7af:	75 0d                	jne    c001f7be <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001f7b1:	42                   	inc    edx
c001f7b2:	eb eb                	jmp    c001f79f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001f7b4:	31 c0                	xor    eax,eax
c001f7b6:	eb 0a                	jmp    c001f7c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f7b8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001f7bc:	eb 04                	jmp    c001f7c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f7be:	41                   	inc    ecx
c001f7bf:	43                   	inc    ebx
c001f7c0:	eb d7                	jmp    c001f799 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001f7c2:	5b                   	pop    ebx
c001f7c3:	5e                   	pop    esi
c001f7c4:	5f                   	pop    edi
c001f7c5:	5d                   	pop    ebp
c001f7c6:	c3                   	ret    

c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001f7c7:	56                   	push   esi
c001f7c8:	53                   	push   ebx
c001f7c9:	52                   	push   edx
c001f7ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f7ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f7d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f7d6:	39 0d 60 c7 02 c0    	cmp    DWORD PTR ds:0xc002c760,ecx
c001f7dc:	75 08                	jne    c001f7e6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001f7de:	38 05 68 a6 02 c0    	cmp    BYTE PTR ds:0xc002a668,al
c001f7e4:	74 2b                	je     c001f811 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001f7e6:	83 ec 0c             	sub    esp,0xc
c001f7e9:	a2 68 a6 02 c0       	mov    ds:0xc002a668,al
c001f7ee:	68 80 c7 02 c0       	push   0xc002c780
c001f7f3:	0f be c0             	movsx  eax,al
c001f7f6:	6a 01                	push   0x1
c001f7f8:	89 0d 60 c7 02 c0    	mov    DWORD PTR ds:0xc002c760,ecx
c001f7fe:	31 db                	xor    ebx,ebx
c001f800:	53                   	push   ebx
c001f801:	51                   	push   ecx
c001f802:	ff 34 85 bc b5 02 c0 	push   DWORD PTR [eax*4-0x3ffd4a44]
c001f809:	e8 38 64 ff ff       	call   c0015c46 <LogicalDisk::read(unsigned long long, int, void*)>
c001f80e:	83 c4 20             	add    esp,0x20
c001f811:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001f819:	c7 44 24 14 80 c7 02 c0 	mov    DWORD PTR [esp+0x14],0xc002c780
c001f821:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001f825:	58                   	pop    eax
c001f826:	5b                   	pop    ebx
c001f827:	5e                   	pop    esi
c001f828:	e9 18 0e fe ff       	jmp    c0000645 <memcpy>
c001f82d:	90                   	nop

c001f82e <ISO9660::tryMount(LogicalDisk*, int)>:
c001f82e:	81 ec 10 08 00 00    	sub    esp,0x810
c001f834:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001f83b:	83 c0 41             	add    eax,0x41
c001f83e:	0f be c0             	movsx  eax,al
c001f841:	50                   	push   eax
c001f842:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f846:	50                   	push   eax
c001f847:	6a 10                	push   0x10
c001f849:	e8 79 ff ff ff       	call   c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f84e:	83 c4 10             	add    esp,0x10
c001f851:	31 c0                	xor    eax,eax
c001f853:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001f858:	75 1d                	jne    c001f877 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f85a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001f85f:	75 16                	jne    c001f877 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f861:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f866:	75 0f                	jne    c001f877 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f868:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f86d:	75 08                	jne    c001f877 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f86f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f874:	0f 94 c0             	sete   al
c001f877:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f87d:	c3                   	ret    

c001f87e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f87e:	55                   	push   ebp
c001f87f:	57                   	push   edi
c001f880:	56                   	push   esi
c001f881:	53                   	push   ebx
c001f882:	81 ec 34 08 00 00    	sub    esp,0x834
c001f888:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f88f:	55                   	push   ebp
c001f890:	68 df 97 02 c0       	push   0xc00297df
c001f895:	e8 99 2d ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c001f89a:	83 c4 10             	add    esp,0x10
c001f89d:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f8a5:	0f 84 06 02 00 00    	je     c001fab1 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f8ab:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f8b3:	0f 84 f8 01 00 00    	je     c001fab1 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f8b9:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f8c0:	b8 01 00 00 00       	mov    eax,0x1
c001f8c5:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f8c9:	0f 85 e7 01 00 00    	jne    c001fab6 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f8cf:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f8d2:	31 d2                	xor    edx,edx
c001f8d4:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f8d7:	89 e9                	mov    ecx,ebp
c001f8d9:	89 d3                	mov    ebx,edx
c001f8db:	01 f1                	add    ecx,esi
c001f8dd:	11 fb                	adc    ebx,edi
c001f8df:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f8e3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f8e7:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f8ee:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f8f1:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f8f4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8f8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f8fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f900:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f904:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f908:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f90c:	72 19                	jb     c001f927 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f90e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f916:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f91a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f925:	eb 13                	jmp    c001f93a <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f927:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f92b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f92f:	29 f0                	sub    eax,esi
c001f931:	19 fa                	sbb    edx,edi
c001f933:	89 04 24             	mov    DWORD PTR [esp],eax
c001f936:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f93a:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f941:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f944:	8b 00                	mov    eax,DWORD PTR [eax]
c001f946:	53                   	push   ebx
c001f947:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f94b:	c1 e0 0b             	shl    eax,0xb
c001f94e:	01 c6                	add    esi,eax
c001f950:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f957:	11 d7                	adc    edi,edx
c001f959:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f95d:	89 fa                	mov    edx,edi
c001f95f:	50                   	push   eax
c001f960:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f964:	50                   	push   eax
c001f965:	89 f0                	mov    eax,esi
c001f967:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f96b:	50                   	push   eax
c001f96c:	e8 56 fe ff ff       	call   c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f971:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f978:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f97c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f97f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f983:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f989:	83 c4 10             	add    esp,0x10
c001f98c:	b8 00 08 00 00       	mov    eax,0x800
c001f991:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f995:	29 d0                	sub    eax,edx
c001f997:	39 c1                	cmp    ecx,eax
c001f999:	83 db 00             	sbb    ebx,0x0
c001f99c:	7d 19                	jge    c001f9b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f99e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f9a3:	75 16                	jne    c001f9bb <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f9a5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f9ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9b2:	e9 f6 00 00 00       	jmp    c001faad <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f9b7:	89 c5                	mov    ebp,eax
c001f9b9:	eb 03                	jmp    c001f9be <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f9bb:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f9be:	51                   	push   ecx
c001f9bf:	55                   	push   ebp
c001f9c0:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f9c4:	50                   	push   eax
c001f9c5:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f9cc:	e8 74 0c fe ff       	call   c0000645 <memcpy>
c001f9d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f9d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9d9:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f9e0:	01 e8                	add    eax,ebp
c001f9e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f9e6:	89 e8                	mov    eax,ebp
c001f9e8:	99                   	cdq    
c001f9e9:	01 ee                	add    esi,ebp
c001f9eb:	11 d7                	adc    edi,edx
c001f9ed:	29 e9                	sub    ecx,ebp
c001f9ef:	19 d3                	sbb    ebx,edx
c001f9f1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f9f5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f9f9:	83 c4 10             	add    esp,0x10
c001f9fc:	b8 ff 07 00 00       	mov    eax,0x7ff
c001fa01:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001fa04:	b8 00 00 00 00       	mov    eax,0x0
c001fa09:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001fa0d:	7d 3f                	jge    c001fa4e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001fa0f:	52                   	push   edx
c001fa10:	89 fa                	mov    edx,edi
c001fa12:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fa19:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fa1d:	50                   	push   eax
c001fa1e:	89 f0                	mov    eax,esi
c001fa20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fa24:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fa28:	50                   	push   eax
c001fa29:	e8 99 fd ff ff       	call   c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fa2e:	81 c6 00 08 00 00    	add    esi,0x800
c001fa34:	83 d7 00             	adc    edi,0x0
c001fa37:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001fa3f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001fa47:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001fa4c:	eb ab                	jmp    c001f9f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001fa4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa52:	0b 04 24             	or     eax,DWORD PTR [esp]
c001fa55:	74 34                	je     c001fa8b <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001fa57:	89 fa                	mov    edx,edi
c001fa59:	50                   	push   eax
c001fa5a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fa61:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fa65:	50                   	push   eax
c001fa66:	89 f0                	mov    eax,esi
c001fa68:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001fa6c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fa70:	55                   	push   ebp
c001fa71:	50                   	push   eax
c001fa72:	e8 50 fd ff ff       	call   c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fa77:	83 c4 0c             	add    esp,0xc
c001fa7a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001fa7e:	55                   	push   ebp
c001fa7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa83:	e8 bd 0b fe ff       	call   c0000645 <memcpy>
c001fa88:	83 c4 10             	add    esp,0x10
c001fa8b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fa92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fa96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa9a:	89 38                	mov    DWORD PTR [eax],edi
c001fa9c:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001faa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001faa7:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001faaa:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001faad:	31 c0                	xor    eax,eax
c001faaf:	eb 05                	jmp    c001fab6 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001fab1:	b8 04 00 00 00       	mov    eax,0x4
c001fab6:	81 c4 2c 08 00 00    	add    esp,0x82c
c001fabc:	5b                   	pop    ebx
c001fabd:	5e                   	pop    esi
c001fabe:	5f                   	pop    edi
c001fabf:	5d                   	pop    ebp
c001fac0:	c3                   	ret    
c001fac1:	90                   	nop

c001fac2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001fac2:	55                   	push   ebp
c001fac3:	57                   	push   edi
c001fac4:	56                   	push   esi
c001fac5:	53                   	push   ebx
c001fac6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001facc:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001fad3:	85 f6                	test   esi,esi
c001fad5:	0f 84 64 02 00 00    	je     c001fd3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001fadb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001fae3:	0f 84 56 02 00 00    	je     c001fd3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001fae9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001faec:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001faef:	75 0a                	jne    c001fafb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001faf1:	b8 07 00 00 00       	mov    eax,0x7
c001faf6:	e9 49 02 00 00       	jmp    c001fd44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001fafb:	50                   	push   eax
c001fafc:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001fb00:	50                   	push   eax
c001fb01:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001fb08:	53                   	push   ebx
c001fb09:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb0b:	c1 e0 0b             	shl    eax,0xb
c001fb0e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001fb11:	c1 e8 0b             	shr    eax,0xb
c001fb14:	50                   	push   eax
c001fb15:	e8 ad fc ff ff       	call   c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fb1a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fb1d:	83 c4 10             	add    esp,0x10
c001fb20:	89 c1                	mov    ecx,eax
c001fb22:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001fb25:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fb2b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001fb2e:	84 db                	test   bl,bl
c001fb30:	0f 85 90 00 00 00    	jne    c001fbc6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001fb36:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001fb3c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fb42:	29 c7                	sub    edi,eax
c001fb44:	89 fb                	mov    ebx,edi
c001fb46:	c1 fb 1f             	sar    ebx,0x1f
c001fb49:	01 f8                	add    eax,edi
c001fb4b:	11 da                	adc    edx,ebx
c001fb4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fb51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fb55:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001fb58:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001fb5b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001fb5e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001fb61:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb64:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fb68:	89 d8                	mov    eax,ebx
c001fb6a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001fb6d:	ba 00 00 00 00       	mov    edx,0x0
c001fb72:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001fb76:	b8 00 00 00 00       	mov    eax,0x0
c001fb7b:	73 0b                	jae    c001fb88 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001fb7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fb80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb84:	29 f8                	sub    eax,edi
c001fb86:	19 da                	sbb    edx,ebx
c001fb88:	89 d3                	mov    ebx,edx
c001fb8a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001fb8d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001fb90:	09 c3                	or     ebx,eax
c001fb92:	0f 84 59 ff ff ff    	je     c001faf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001fb98:	55                   	push   ebp
c001fb99:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001fb9d:	50                   	push   eax
c001fb9e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001fba5:	53                   	push   ebx
c001fba6:	8b 06                	mov    eax,DWORD PTR [esi]
c001fba8:	c1 e0 0b             	shl    eax,0xb
c001fbab:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001fbaf:	c1 e8 0b             	shr    eax,0xb
c001fbb2:	50                   	push   eax
c001fbb3:	e8 0f fc ff ff       	call   c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fbb8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	25 ff 07 00 00       	and    eax,0x7ff
c001fbc3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001fbc6:	57                   	push   edi
c001fbc7:	6a 28                	push   0x28
c001fbc9:	6a 00                	push   0x0
c001fbcb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fbcf:	50                   	push   eax
c001fbd0:	e8 a6 0a fe ff       	call   c000067b <memset>
c001fbd5:	31 d2                	xor    edx,edx
c001fbd7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001fbda:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fbe0:	89 f8                	mov    eax,edi
c001fbe2:	83 c0 21             	add    eax,0x21
c001fbe5:	83 d2 00             	adc    edx,0x0
c001fbe8:	89 c7                	mov    edi,eax
c001fbea:	89 d5                	mov    ebp,edx
c001fbec:	83 c4 10             	add    esp,0x10
c001fbef:	31 c9                	xor    ecx,ecx
c001fbf1:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001fbf8:	83 f9 28             	cmp    ecx,0x28
c001fbfb:	88 04 24             	mov    BYTE PTR [esp],al
c001fbfe:	0f 94 c2             	sete   dl
c001fc01:	88 d0                	mov    al,dl
c001fc03:	ba ff 07 00 00       	mov    edx,0x7ff
c001fc08:	39 fa                	cmp    edx,edi
c001fc0a:	ba 00 00 00 00       	mov    edx,0x0
c001fc0f:	19 ea                	sbb    edx,ebp
c001fc11:	0f 92 c2             	setb   dl
c001fc14:	09 c2                	or     edx,eax
c001fc16:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001fc1a:	0f 94 c0             	sete   al
c001fc1d:	08 d0                	or     al,dl
c001fc1f:	75 16                	jne    c001fc37 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001fc21:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001fc25:	74 10                	je     c001fc37 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001fc27:	8a 04 24             	mov    al,BYTE PTR [esp]
c001fc2a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001fc2e:	41                   	inc    ecx
c001fc2f:	83 c7 01             	add    edi,0x1
c001fc32:	83 d5 00             	adc    ebp,0x0
c001fc35:	eb ba                	jmp    c001fbf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001fc37:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001fc3e:	83 ec 0c             	sub    esp,0xc
c001fc41:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001fc45:	57                   	push   edi
c001fc46:	e8 4d 0a fe ff       	call   c0000698 <strlen>
c001fc4b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001fc53:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001fc57:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001fc5e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fc61:	5a                   	pop    edx
c001fc62:	25 ff 07 00 00       	and    eax,0x7ff
c001fc67:	01 c8                	add    eax,ecx
c001fc69:	59                   	pop    ecx
c001fc6a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001fc70:	83 e0 02             	and    eax,0x2
c001fc73:	3c 01                	cmp    al,0x1
c001fc75:	19 c0                	sbb    eax,eax
c001fc77:	83 c0 02             	add    eax,0x2
c001fc7a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001fc7e:	57                   	push   edi
c001fc7f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001fc83:	50                   	push   eax
c001fc84:	e8 91 0a fe ff       	call   c000071a <strcpy>
c001fc89:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001fc8d:	83 c4 10             	add    esp,0x10
c001fc90:	84 c0                	test   al,al
c001fc92:	75 21                	jne    c001fcb5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001fc94:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001fc9c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001fca4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001fcac:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001fcb3:	eb 28                	jmp    c001fcdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001fcb5:	fe c8                	dec    al
c001fcb7:	75 24                	jne    c001fcdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001fcb9:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001fcc1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001fcc9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001fcd1:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001fcd8:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001fcdd:	0f b6 fb             	movzx  edi,bl
c001fce0:	31 db                	xor    ebx,ebx
c001fce2:	50                   	push   eax
c001fce3:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001fcea:	8d 44 24 48          	lea    eax,[esp+0x48]
c001fcee:	50                   	push   eax
c001fcef:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001fcf6:	e8 4a 09 fe ff       	call   c0000645 <memcpy>
c001fcfb:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001fd02:	89 f9                	mov    ecx,edi
c001fd04:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fd0a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001fd0d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001fd10:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001fd13:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001fd16:	83 c4 10             	add    esp,0x10
c001fd19:	39 c7                	cmp    edi,eax
c001fd1b:	89 df                	mov    edi,ebx
c001fd1d:	19 d7                	sbb    edi,edx
c001fd1f:	72 10                	jb     c001fd31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001fd21:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001fd28:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001fd2f:	eb 0a                	jmp    c001fd3b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001fd31:	29 c8                	sub    eax,ecx
c001fd33:	19 da                	sbb    edx,ebx
c001fd35:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001fd38:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001fd3b:	31 c0                	xor    eax,eax
c001fd3d:	eb 05                	jmp    c001fd44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001fd3f:	b8 04 00 00 00       	mov    eax,0x4
c001fd44:	81 c4 5c 09 00 00    	add    esp,0x95c
c001fd4a:	5b                   	pop    ebx
c001fd4b:	5e                   	pop    esi
c001fd4c:	5f                   	pop    edi
c001fd4d:	5d                   	pop    ebp
c001fd4e:	c3                   	ret    

c001fd4f <readRoot(unsigned int*, unsigned int*, char)>:
c001fd4f:	81 ec 40 08 00 00    	sub    esp,0x840
c001fd55:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001fd5d:	50                   	push   eax
c001fd5e:	8d 44 24 38          	lea    eax,[esp+0x38]
c001fd62:	50                   	push   eax
c001fd63:	6a 10                	push   0x10
c001fd65:	e8 5d fa ff ff       	call   c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fd6a:	83 c4 0c             	add    esp,0xc
c001fd6d:	6a 22                	push   0x22
c001fd6f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001fd76:	50                   	push   eax
c001fd77:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fd7b:	50                   	push   eax
c001fd7c:	e8 c4 08 fe ff       	call   c0000645 <memcpy>
c001fd81:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fd88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001fd8c:	89 10                	mov    DWORD PTR [eax],edx
c001fd8e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001fd95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fd99:	89 10                	mov    DWORD PTR [eax],edx
c001fd9b:	b0 01                	mov    al,0x1
c001fd9d:	81 c4 4c 08 00 00    	add    esp,0x84c
c001fda3:	c3                   	ret    

c001fda4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001fda4:	55                   	push   ebp
c001fda5:	57                   	push   edi
c001fda6:	56                   	push   esi
c001fda7:	53                   	push   ebx
c001fda8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fdae:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001fdb5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001fdbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fdc0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001fdc4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fdc8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdcc:	75 03                	jne    c001fdd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fdce:	83 c3 02             	add    ebx,0x2
c001fdd1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001fdd4:	75 03                	jne    c001fdd9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001fdd6:	43                   	inc    ebx
c001fdd7:	eb f8                	jmp    c001fdd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fdd9:	51                   	push   ecx
c001fdda:	68 00 01 00 00       	push   0x100
c001fddf:	6a 00                	push   0x0
c001fde1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fde5:	50                   	push   eax
c001fde6:	e8 90 08 fe ff       	call   c000067b <memset>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	31 d2                	xor    edx,edx
c001fdf0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001fdf3:	84 c0                	test   al,al
c001fdf5:	74 21                	je     c001fe18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001fdf7:	3c 2f                	cmp    al,0x2f
c001fdf9:	75 0b                	jne    c001fe06 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001fdfb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001fdff:	bd 01 00 00 00       	mov    ebp,0x1
c001fe04:	eb 14                	jmp    c001fe1a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001fe06:	8d 48 9f             	lea    ecx,[eax-0x61]
c001fe09:	80 f9 19             	cmp    cl,0x19
c001fe0c:	77 03                	ja     c001fe11 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001fe0e:	83 e8 20             	sub    eax,0x20
c001fe11:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001fe15:	42                   	inc    edx
c001fe16:	eb d8                	jmp    c001fdf0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001fe18:	31 ed                	xor    ebp,ebp
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001fe24:	e8 97 f6 fe ff       	call   c000f4c0 <malloc>
c001fe29:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001fe30:	89 c6                	mov    esi,eax
c001fe32:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001fe38:	c1 ef 0b             	shr    edi,0xb
c001fe3b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001fe42:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001fe46:	83 c4 10             	add    esp,0x10
c001fe49:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001fe4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe52:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001fe59:	74 28                	je     c001fe83 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001fe5b:	52                   	push   edx
c001fe5c:	57                   	push   edi
c001fe5d:	50                   	push   eax
c001fe5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe62:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001fe69:	e8 59 f9 ff ff       	call   c001f7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fe6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fe72:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001fe79:	05 00 08 00 00       	add    eax,0x800
c001fe7e:	83 c4 10             	add    esp,0x10
c001fe81:	eb cb                	jmp    c001fe4e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001fe83:	83 ec 0c             	sub    esp,0xc
c001fe86:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001fe8a:	57                   	push   edi
c001fe8b:	e8 08 08 fe ff       	call   c0000698 <strlen>
c001fe90:	50                   	push   eax
c001fe91:	57                   	push   edi
c001fe92:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001fe99:	56                   	push   esi
c001fe9a:	e8 e6 f8 ff ff       	call   c001f785 <__memmem(unsigned char*, int, unsigned char*, int)>
c001fe9f:	83 c4 20             	add    esp,0x20
c001fea2:	85 c0                	test   eax,eax
c001fea4:	75 13                	jne    c001feb9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001fea6:	83 ec 0c             	sub    esp,0xc
c001fea9:	56                   	push   esi
c001feaa:	e8 21 f6 fe ff       	call   c000f4d0 <free>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	31 c0                	xor    eax,eax
c001feb4:	e9 b3 00 00 00       	jmp    c001ff6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001feb9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001febd:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001fec1:	c1 e7 08             	shl    edi,0x8
c001fec4:	c1 e2 10             	shl    edx,0x10
c001fec7:	09 d7                	or     edi,edx
c001fec9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001fecd:	09 d7                	or     edi,edx
c001fecf:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001fed3:	c1 e2 18             	shl    edx,0x18
c001fed6:	09 d7                	or     edi,edx
c001fed8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001fedc:	89 d1                	mov    ecx,edx
c001fede:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001fee2:	c1 e1 08             	shl    ecx,0x8
c001fee5:	c1 e2 10             	shl    edx,0x10
c001fee8:	09 ca                	or     edx,ecx
c001feea:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001feee:	09 ca                	or     edx,ecx
c001fef0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001fef4:	c1 e1 18             	shl    ecx,0x18
c001fef7:	09 ca                	or     edx,ecx
c001fef9:	89 e9                	mov    ecx,ebp
c001fefb:	84 c9                	test   cl,cl
c001fefd:	74 3c                	je     c001ff3b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001feff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ff03:	83 ec 0c             	sub    esp,0xc
c001ff06:	56                   	push   esi
c001ff07:	e8 c4 f5 fe ff       	call   c000f4d0 <free>
c001ff0c:	83 c4 0c             	add    esp,0xc
c001ff0f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ff16:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ff1b:	50                   	push   eax
c001ff1c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ff23:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ff2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff2e:	52                   	push   edx
c001ff2f:	57                   	push   edi
c001ff30:	53                   	push   ebx
c001ff31:	e8 6e fe ff ff       	call   c001fda4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ff36:	83 c4 20             	add    esp,0x20
c001ff39:	eb 31                	jmp    c001ff6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ff3b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ff3e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ff45:	d0 e8                	shr    al,1
c001ff47:	89 3b                	mov    DWORD PTR [ebx],edi
c001ff49:	83 e0 01             	and    eax,0x1
c001ff4c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ff53:	83 ec 0c             	sub    esp,0xc
c001ff56:	89 13                	mov    DWORD PTR [ebx],edx
c001ff58:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001ff5f:	89 03                	mov    DWORD PTR [ebx],eax
c001ff61:	56                   	push   esi
c001ff62:	e8 69 f5 fe ff       	call   c000f4d0 <free>
c001ff67:	83 c4 10             	add    esp,0x10
c001ff6a:	b0 01                	mov    al,0x1
c001ff6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ff72:	5b                   	pop    ebx
c001ff73:	5e                   	pop    esi
c001ff74:	5f                   	pop    edi
c001ff75:	5d                   	pop    ebp
c001ff76:	c3                   	ret    

c001ff77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001ff77:	55                   	push   ebp
c001ff78:	57                   	push   edi
c001ff79:	56                   	push   esi
c001ff7a:	53                   	push   ebx
c001ff7b:	83 ec 20             	sub    esp,0x20
c001ff7e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ff82:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ff86:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ff8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ff92:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ff9a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001ff9f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001ffa5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001ffab:	57                   	push   edi
c001ffac:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ffb0:	50                   	push   eax
c001ffb1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ffb5:	50                   	push   eax
c001ffb6:	e8 94 fd ff ff       	call   c001fd4f <readRoot(unsigned int*, unsigned int*, char)>
c001ffbb:	5a                   	pop    edx
c001ffbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ffc0:	e8 d3 06 fe ff       	call   c0000698 <strlen>
c001ffc5:	83 c4 10             	add    esp,0x10
c001ffc8:	83 f8 03             	cmp    eax,0x3
c001ffcb:	77 17                	ja     c001ffe4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ffcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffd1:	89 03                	mov    DWORD PTR [ebx],eax
c001ffd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ffd7:	89 06                	mov    DWORD PTR [esi],eax
c001ffd9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ffe0:	b0 01                	mov    al,0x1
c001ffe2:	eb 19                	jmp    c001fffd <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ffe4:	50                   	push   eax
c001ffe5:	55                   	push   ebp
c001ffe6:	57                   	push   edi
c001ffe7:	56                   	push   esi
c001ffe8:	53                   	push   ebx
c001ffe9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ffed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fff1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fff5:	e8 aa fd ff ff       	call   c001fda4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001fffa:	83 c4 20             	add    esp,0x20
c001fffd:	83 c4 1c             	add    esp,0x1c
c0020000:	5b                   	pop    ebx
c0020001:	5e                   	pop    esi
c0020002:	5f                   	pop    edi
c0020003:	5d                   	pop    ebp
c0020004:	c3                   	ret    
c0020005:	90                   	nop

c0020006 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020006:	57                   	push   edi
c0020007:	56                   	push   esi
c0020008:	53                   	push   ebx
c0020009:	83 ec 10             	sub    esp,0x10
c002000c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020010:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020014:	85 ff                	test   edi,edi
c0020016:	74 7b                	je     c0020093 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020018:	85 f6                	test   esi,esi
c002001a:	74 77                	je     c0020093 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c002001c:	83 ec 0c             	sub    esp,0xc
c002001f:	6a 1c                	push   0x1c
c0020021:	e8 9a f4 fe ff       	call   c000f4c0 <malloc>
c0020026:	89 07                	mov    DWORD PTR [edi],eax
c0020028:	89 c3                	mov    ebx,eax
c002002a:	58                   	pop    eax
c002002b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002002f:	50                   	push   eax
c0020030:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020033:	50                   	push   eax
c0020034:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020038:	50                   	push   eax
c0020039:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002003d:	50                   	push   eax
c002003e:	56                   	push   esi
c002003f:	e8 33 ff ff ff       	call   c001ff77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020044:	83 c4 20             	add    esp,0x20
c0020047:	84 c0                	test   al,al
c0020049:	74 07                	je     c0020052 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c002004b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020050:	74 0b                	je     c002005d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020052:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020056:	b8 01 00 00 00       	mov    eax,0x1
c002005b:	eb 3b                	jmp    c0020098 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c002005d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020061:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020065:	89 03                	mov    DWORD PTR [ebx],eax
c0020067:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002006e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020072:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020079:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020080:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020083:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002008a:	8a 06                	mov    al,BYTE PTR [esi]
c002008c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002008f:	31 c0                	xor    eax,eax
c0020091:	eb 05                	jmp    c0020098 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020093:	b8 04 00 00 00       	mov    eax,0x4
c0020098:	83 c4 10             	add    esp,0x10
c002009b:	5b                   	pop    ebx
c002009c:	5e                   	pop    esi
c002009d:	5f                   	pop    edi
c002009e:	c3                   	ret    
c002009f:	90                   	nop

c00200a0 <ISO9660::exists(char const*)>:
c00200a0:	83 ec 28             	sub    esp,0x28
c00200a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00200a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00200ab:	52                   	push   edx
c00200ac:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00200af:	52                   	push   edx
c00200b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00200b4:	52                   	push   edx
c00200b5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00200b9:	52                   	push   edx
c00200ba:	50                   	push   eax
c00200bb:	e8 b7 fe ff ff       	call   c001ff77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00200c0:	83 c4 3c             	add    esp,0x3c
c00200c3:	c3                   	ret    

c00200c4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00200c4:	56                   	push   esi
c00200c5:	53                   	push   ebx
c00200c6:	83 ec 14             	sub    esp,0x14
c00200c9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00200cd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00200d1:	85 db                	test   ebx,ebx
c00200d3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00200d7:	0f 94 c2             	sete   dl
c00200da:	85 f6                	test   esi,esi
c00200dc:	0f 94 c0             	sete   al
c00200df:	08 c2                	or     dl,al
c00200e1:	75 68                	jne    c002014b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00200e3:	85 c9                	test   ecx,ecx
c00200e5:	74 64                	je     c002014b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00200e7:	83 ec 0c             	sub    esp,0xc
c00200ea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00200ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200f1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00200f7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00200fe:	50                   	push   eax
c00200ff:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0020102:	50                   	push   eax
c0020103:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020107:	50                   	push   eax
c0020108:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002010c:	50                   	push   eax
c002010d:	51                   	push   ecx
c002010e:	e8 64 fe ff ff       	call   c001ff77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020113:	83 c4 20             	add    esp,0x20
c0020116:	ba 01 00 00 00       	mov    edx,0x1
c002011b:	84 c0                	test   al,al
c002011d:	74 31                	je     c0020150 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002011f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020123:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002012a:	89 03                	mov    DWORD PTR [ebx],eax
c002012c:	ba 00 00 00 00       	mov    edx,0x0
c0020131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020135:	85 c0                	test   eax,eax
c0020137:	0f 95 06             	setne  BYTE PTR [esi]
c002013a:	74 14                	je     c0020150 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002013c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020142:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020149:	eb 05                	jmp    c0020150 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002014b:	ba 04 00 00 00       	mov    edx,0x4
c0020150:	83 c4 14             	add    esp,0x14
c0020153:	89 d0                	mov    eax,edx
c0020155:	5b                   	pop    ebx
c0020156:	5e                   	pop    esi
c0020157:	c3                   	ret    

c0020158 <ISO9660::openDir(char const*, void**)>:
c0020158:	57                   	push   edi
c0020159:	56                   	push   esi
c002015a:	53                   	push   ebx
c002015b:	83 ec 10             	sub    esp,0x10
c002015e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020162:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020166:	85 ff                	test   edi,edi
c0020168:	0f 84 95 00 00 00    	je     c0020203 <ISO9660::openDir(char const*, void**)+0xab>
c002016e:	85 f6                	test   esi,esi
c0020170:	0f 84 8d 00 00 00    	je     c0020203 <ISO9660::openDir(char const*, void**)+0xab>
c0020176:	83 ec 0c             	sub    esp,0xc
c0020179:	6a 1c                	push   0x1c
c002017b:	e8 40 f3 fe ff       	call   c000f4c0 <malloc>
c0020180:	89 07                	mov    DWORD PTR [edi],eax
c0020182:	89 c3                	mov    ebx,eax
c0020184:	59                   	pop    ecx
c0020185:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020189:	50                   	push   eax
c002018a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002018d:	50                   	push   eax
c002018e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020192:	50                   	push   eax
c0020193:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020197:	50                   	push   eax
c0020198:	56                   	push   esi
c0020199:	e8 d9 fd ff ff       	call   c001ff77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002019e:	83 c4 20             	add    esp,0x20
c00201a1:	84 c0                	test   al,al
c00201a3:	74 07                	je     c00201ac <ISO9660::openDir(char const*, void**)+0x54>
c00201a5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00201aa:	75 21                	jne    c00201cd <ISO9660::openDir(char const*, void**)+0x75>
c00201ac:	0f b6 c0             	movzx  eax,al
c00201af:	52                   	push   edx
c00201b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00201b4:	50                   	push   eax
c00201b5:	68 f2 97 02 c0       	push   0xc00297f2
c00201ba:	e8 74 24 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00201bf:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	b8 01 00 00 00       	mov    eax,0x1
c00201cb:	eb 3b                	jmp    c0020208 <ISO9660::openDir(char const*, void**)+0xb0>
c00201cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201d1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00201d5:	89 03                	mov    DWORD PTR [ebx],eax
c00201d7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00201de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201e2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00201e9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00201f0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00201f3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00201fa:	8a 06                	mov    al,BYTE PTR [esi]
c00201fc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00201ff:	31 c0                	xor    eax,eax
c0020201:	eb 05                	jmp    c0020208 <ISO9660::openDir(char const*, void**)+0xb0>
c0020203:	b8 04 00 00 00       	mov    eax,0x4
c0020208:	83 c4 10             	add    esp,0x10
c002020b:	5b                   	pop    ebx
c002020c:	5e                   	pop    esi
c002020d:	5f                   	pop    edi
c002020e:	c3                   	ret    
c002020f:	90                   	nop

c0020210 <ISO9660::ISO9660()>:
c0020210:	83 ec 0c             	sub    esp,0xc
c0020213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020217:	83 ec 0c             	sub    esp,0xc
c002021a:	50                   	push   eax
c002021b:	e8 18 27 ff ff       	call   c0012938 <Filesystem::Filesystem()>
c0020220:	83 c4 10             	add    esp,0x10
c0020223:	ba 18 98 02 c0       	mov    edx,0xc0029818
c0020228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002022c:	89 10                	mov    DWORD PTR [eax],edx
c002022e:	90                   	nop
c002022f:	83 c4 0c             	add    esp,0xc
c0020232:	c3                   	ret    
c0020233:	90                   	nop

c0020234 <SoundChannel::~SoundChannel()>:
c0020234:	83 ec 0c             	sub    esp,0xc
c0020237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002023e:	83 ec 0c             	sub    esp,0xc
c0020241:	50                   	push   eax
c0020242:	e8 89 f2 fe ff       	call   c000f4d0 <free>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	90                   	nop
c002024b:	83 c4 0c             	add    esp,0xc
c002024e:	c3                   	ret    
c002024f:	90                   	nop

c0020250 <SoundChannel::setSpeed(float)>:
c0020250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020258:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002025b:	c3                   	ret    

c002025c <SoundChannel::getSpeed()>:
c002025c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020260:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0020263:	c3                   	ret    

c0020264 <SoundChannel::setVolume(int)>:
c0020264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020268:	83 f8 64             	cmp    eax,0x64
c002026b:	7e 05                	jle    c0020272 <SoundChannel::setVolume(int)+0xe>
c002026d:	b8 64 00 00 00       	mov    eax,0x64
c0020272:	85 c0                	test   eax,eax
c0020274:	79 02                	jns    c0020278 <SoundChannel::setVolume(int)+0x14>
c0020276:	31 c0                	xor    eax,eax
c0020278:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002027c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002027f:	c3                   	ret    

c0020280 <SoundChannel::getVolume()>:
c0020280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020284:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020287:	c3                   	ret    

c0020288 <SoundChannel::pause()>:
c0020288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002028c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0020290:	c3                   	ret    
c0020291:	90                   	nop

c0020292 <SoundChannel::SoundChannel(int, int, int, int)>:
c0020292:	83 ec 1c             	sub    esp,0x1c
c0020295:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020299:	e8 ea ff ff ff       	call   c0020288 <SoundChannel::pause()>
c002029e:	83 c4 04             	add    esp,0x4
c00202a1:	6a 50                	push   0x50
c00202a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00202a7:	e8 b8 ff ff ff       	call   c0020264 <SoundChannel::setVolume(int)>
c00202ac:	83 c4 08             	add    esp,0x8
c00202af:	a1 90 98 02 c0       	mov    eax,ds:0xc0029890
c00202b4:	50                   	push   eax
c00202b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00202b9:	e8 92 ff ff ff       	call   c0020250 <SoundChannel::setSpeed(float)>
c00202be:	83 c4 08             	add    esp,0x8
c00202c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00202c9:	89 10                	mov    DWORD PTR [eax],edx
c00202cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00202d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00202d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00202de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00202e1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00202e6:	75 23                	jne    c002030b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00202e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00202ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202f5:	0f af c2             	imul   eax,edx
c00202f8:	85 c0                	test   eax,eax
c00202fa:	79 03                	jns    c00202ff <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00202fc:	83 c0 03             	add    eax,0x3
c00202ff:	c1 f8 02             	sar    eax,0x2
c0020302:	05 a0 0f 00 00       	add    eax,0xfa0
c0020307:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002030b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002030f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020313:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0020316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002031a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0020321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020325:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002032c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020333:	c1 e0 02             	shl    eax,0x2
c0020336:	83 ec 0c             	sub    esp,0xc
c0020339:	50                   	push   eax
c002033a:	e8 81 f1 fe ff       	call   c000f4c0 <malloc>
c002033f:	83 c4 10             	add    esp,0x10
c0020342:	89 c2                	mov    edx,eax
c0020344:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020348:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002034b:	83 ec 04             	sub    esp,0x4
c002034e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020352:	50                   	push   eax
c0020353:	6a 01                	push   0x1
c0020355:	6a 04                	push   0x4
c0020357:	e8 e3 85 fe ff       	call   c000893f <src_new>
c002035c:	83 c4 10             	add    esp,0x10
c002035f:	89 c2                	mov    edx,eax
c0020361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020365:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002036c:	85 c0                	test   eax,eax
c002036e:	74 10                	je     c0020380 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0020370:	83 ec 0c             	sub    esp,0xc
c0020373:	68 74 98 02 c0       	push   0xc0029874
c0020378:	e8 1a 8d ff ff       	call   c0019097 <Krnl::panic(char const*)>
c002037d:	83 c4 10             	add    esp,0x10
c0020380:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c0020385:	83 f0 01             	xor    eax,0x1
c0020388:	84 c0                	test   al,al
c002038a:	74 57                	je     c00203e3 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002038c:	a1 94 98 02 c0       	mov    eax,ds:0xc0029894
c0020391:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020395:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002039d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00203a5:	7f 35                	jg     c00203dc <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00203a7:	83 ec 0c             	sub    esp,0xc
c00203aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00203ae:	e8 a4 44 00 00       	call   c0024857 <__floatsisf>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	8b 15 94 98 02 c0    	mov    edx,DWORD PTR ds:0xc0029894
c00203bc:	83 ec 08             	sub    esp,0x8
c00203bf:	52                   	push   edx
c00203c0:	50                   	push   eax
c00203c1:	e8 a3 40 00 00       	call   c0024469 <__mulsf3>
c00203c6:	83 c4 10             	add    esp,0x10
c00203c9:	89 c2                	mov    edx,eax
c00203cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203cf:	89 14 85 80 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3080],edx
c00203d6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00203da:	eb c1                	jmp    c002039d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00203dc:	c6 05 80 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d380,0x1
c00203e3:	90                   	nop
c00203e4:	83 c4 1c             	add    esp,0x1c
c00203e7:	c3                   	ret    

c00203e8 <SoundChannel::play()>:
c00203e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ec:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00203f0:	c3                   	ret    
c00203f1:	90                   	nop

c00203f2 <SoundChannel::paused()>:
c00203f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203f6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00203f9:	c3                   	ret    

c00203fa <SoundChannel::getSampleRate()>:
c00203fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0020400:	c3                   	ret    
c0020401:	90                   	nop

c0020402 <SoundChannel::getBits()>:
c0020402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020409:	c3                   	ret    

c002040a <SoundChannel::getBufferUsed()>:
c002040a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002040e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0020411:	c3                   	ret    

c0020412 <SoundChannel::getBufferSize()>:
c0020412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020416:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020419:	c3                   	ret    

c002041a <SoundChannel::unbuffer(float*, int, int)>:
c002041a:	56                   	push   esi
c002041b:	53                   	push   ebx
c002041c:	83 ec 40             	sub    esp,0x40
c002041f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0020423:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0020426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002042a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002042d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020431:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020435:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020439:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002043d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020441:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0020445:	e8 0d 44 00 00       	call   c0024857 <__floatsisf>
c002044a:	5a                   	pop    edx
c002044b:	89 c6                	mov    esi,eax
c002044d:	ff 33                	push   DWORD PTR [ebx]
c002044f:	e8 03 44 00 00       	call   c0024857 <__floatsisf>
c0020454:	59                   	pop    ecx
c0020455:	5a                   	pop    edx
c0020456:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0020459:	50                   	push   eax
c002045a:	e8 0a 40 00 00       	call   c0024469 <__mulsf3>
c002045f:	59                   	pop    ecx
c0020460:	5a                   	pop    edx
c0020461:	50                   	push   eax
c0020462:	56                   	push   esi
c0020463:	e8 c4 41 00 00       	call   c002462c <__divsf3>
c0020468:	89 04 24             	mov    DWORD PTR [esp],eax
c002046b:	e8 b7 56 00 00       	call   c0025b27 <__extendsfdf2>
c0020470:	59                   	pop    ecx
c0020471:	5e                   	pop    esi
c0020472:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020476:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002047a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0020482:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020486:	50                   	push   eax
c0020487:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002048a:	e8 a5 80 fe ff       	call   c0008534 <src_process>
c002048f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020493:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0020496:	83 c4 0c             	add    esp,0xc
c0020499:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002049c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002049f:	29 d0                	sub    eax,edx
c00204a1:	c1 e0 02             	shl    eax,0x2
c00204a4:	50                   	push   eax
c00204a5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00204a8:	50                   	push   eax
c00204a9:	51                   	push   ecx
c00204aa:	e8 5e 01 fe ff       	call   c000060d <memmove>
c00204af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00204b3:	83 c4 44             	add    esp,0x44
c00204b6:	5b                   	pop    ebx
c00204b7:	5e                   	pop    esi
c00204b8:	c3                   	ret    
c00204b9:	90                   	nop

c00204ba <SoundChannel::buffer8(unsigned char*, int)>:
c00204ba:	55                   	push   ebp
c00204bb:	57                   	push   edi
c00204bc:	56                   	push   esi
c00204bd:	53                   	push   ebx
c00204be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00204c2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00204c6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00204c9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00204cd:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00204d0:	74 7a                	je     c002054c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00204d2:	85 ff                	test   edi,edi
c00204d4:	7e 76                	jle    c002054c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00204d6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00204da:	8d 70 01             	lea    esi,[eax+0x1]
c00204dd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00204e0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00204e3:	8b 1c 9d 80 cf 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3080]
c00204ea:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00204ed:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00204f0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00204f3:	74 5e                	je     c0020553 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00204f5:	83 ff 01             	cmp    edi,0x1
c00204f8:	74 4b                	je     c0020545 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00204fa:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00204fe:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0020501:	8d 70 01             	lea    esi,[eax+0x1]
c0020504:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020507:	8b 1c 9d 80 cf 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3080]
c002050e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0020511:	b8 02 00 00 00       	mov    eax,0x2
c0020516:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0020519:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002051c:	75 23                	jne    c0020541 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002051e:	eb 27                	jmp    c0020547 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0020520:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0020525:	8d 71 01             	lea    esi,[ecx+0x1]
c0020528:	40                   	inc    eax
c0020529:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002052c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002052f:	8b 1c 9d 80 cf 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3080]
c0020536:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0020539:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002053c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002053f:	74 06                	je     c0020547 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0020541:	39 c7                	cmp    edi,eax
c0020543:	75 db                	jne    c0020520 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0020545:	89 f8                	mov    eax,edi
c0020547:	5b                   	pop    ebx
c0020548:	5e                   	pop    esi
c0020549:	5f                   	pop    edi
c002054a:	5d                   	pop    ebp
c002054b:	c3                   	ret    
c002054c:	5b                   	pop    ebx
c002054d:	31 c0                	xor    eax,eax
c002054f:	5e                   	pop    esi
c0020550:	5f                   	pop    edi
c0020551:	5d                   	pop    ebp
c0020552:	c3                   	ret    
c0020553:	b8 01 00 00 00       	mov    eax,0x1
c0020558:	eb ed                	jmp    c0020547 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002055a <SoundDevice::SoundDevice(char const*)>:
c002055a:	83 ec 1c             	sub    esp,0x1c
c002055d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020561:	83 ec 08             	sub    esp,0x8
c0020564:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020568:	50                   	push   eax
c0020569:	e8 a4 36 ff ff       	call   c0013c12 <Device::Device(char const*)>
c002056e:	83 c4 10             	add    esp,0x10
c0020571:	ba a0 98 02 c0       	mov    edx,0xc00298a0
c0020576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002057a:	89 10                	mov    DWORD PTR [eax],edx
c002057c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020580:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002058a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002058e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0020598:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00205a0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00205a5:	7f 19                	jg     c00205c0 <SoundDevice::SoundDevice(char const*)+0x66>
c00205a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00205af:	83 c2 54             	add    edx,0x54
c00205b2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00205ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00205be:	eb e0                	jmp    c00205a0 <SoundDevice::SoundDevice(char const*)+0x46>
c00205c0:	90                   	nop
c00205c1:	83 c4 1c             	add    esp,0x1c
c00205c4:	c3                   	ret    
c00205c5:	90                   	nop

c00205c6 <SoundDevice::~SoundDevice()>:
c00205c6:	53                   	push   ebx
c00205c7:	83 ec 18             	sub    esp,0x18
c00205ca:	ba a0 98 02 c0       	mov    edx,0xc00298a0
c00205cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205d3:	89 10                	mov    DWORD PTR [eax],edx
c00205d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00205dd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00205e2:	7f 46                	jg     c002062a <SoundDevice::~SoundDevice()+0x64>
c00205e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00205ec:	83 c2 54             	add    edx,0x54
c00205ef:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00205f3:	85 c0                	test   eax,eax
c00205f5:	74 2d                	je     c0020624 <SoundDevice::~SoundDevice()+0x5e>
c00205f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00205ff:	83 c2 54             	add    edx,0x54
c0020602:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0020606:	85 db                	test   ebx,ebx
c0020608:	74 1a                	je     c0020624 <SoundDevice::~SoundDevice()+0x5e>
c002060a:	83 ec 0c             	sub    esp,0xc
c002060d:	53                   	push   ebx
c002060e:	e8 21 fc ff ff       	call   c0020234 <SoundChannel::~SoundChannel()>
c0020613:	83 c4 10             	add    esp,0x10
c0020616:	83 ec 08             	sub    esp,0x8
c0020619:	6a 2c                	push   0x2c
c002061b:	53                   	push   ebx
c002061c:	e8 32 1f ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0020621:	83 c4 10             	add    esp,0x10
c0020624:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020628:	eb b3                	jmp    c00205dd <SoundDevice::~SoundDevice()+0x17>
c002062a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002062e:	83 ec 0c             	sub    esp,0xc
c0020631:	50                   	push   eax
c0020632:	e8 bd 32 ff ff       	call   c00138f4 <Device::~Device()>
c0020637:	83 c4 10             	add    esp,0x10
c002063a:	90                   	nop
c002063b:	83 c4 18             	add    esp,0x18
c002063e:	5b                   	pop    ebx
c002063f:	c3                   	ret    

c0020640 <SoundDevice::~SoundDevice()>:
c0020640:	83 ec 0c             	sub    esp,0xc
c0020643:	83 ec 0c             	sub    esp,0xc
c0020646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002064a:	e8 77 ff ff ff       	call   c00205c6 <SoundDevice::~SoundDevice()>
c002064f:	83 c4 10             	add    esp,0x10
c0020652:	83 ec 08             	sub    esp,0x8
c0020655:	68 e4 01 00 00       	push   0x1e4
c002065a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002065e:	e8 f0 1e ff ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0020663:	83 c4 10             	add    esp,0x10
c0020666:	83 c4 0c             	add    esp,0xc
c0020669:	c3                   	ret    

c002066a <SoundDevice::getFreeChannelNum()>:
c002066a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002066e:	31 c0                	xor    eax,eax
c0020670:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0020678:	74 09                	je     c0020683 <SoundDevice::getFreeChannelNum()+0x19>
c002067a:	40                   	inc    eax
c002067b:	83 f8 20             	cmp    eax,0x20
c002067e:	75 f0                	jne    c0020670 <SoundDevice::getFreeChannelNum()+0x6>
c0020680:	83 c8 ff             	or     eax,0xffffffff
c0020683:	c3                   	ret    

c0020684 <SoundDevice::addChannel(SoundChannel*)>:
c0020684:	56                   	push   esi
c0020685:	53                   	push   ebx
c0020686:	51                   	push   ecx
c0020687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002068b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002068f:	53                   	push   ebx
c0020690:	e8 d5 ff ff ff       	call   c002066a <SoundDevice::getFreeChannelNum()>
c0020695:	5a                   	pop    edx
c0020696:	83 f8 ff             	cmp    eax,0xffffffff
c0020699:	74 51                	je     c00206ec <SoundDevice::addChannel(SoundChannel*)+0x68>
c002069b:	85 f6                	test   esi,esi
c002069d:	74 4d                	je     c00206ec <SoundDevice::addChannel(SoundChannel*)+0x68>
c002069f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00206a6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00206ad:	75 30                	jne    c00206df <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00206af:	83 ec 0c             	sub    esp,0xc
c00206b2:	56                   	push   esi
c00206b3:	e8 42 fd ff ff       	call   c00203fa <SoundChannel::getSampleRate()>
c00206b8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00206be:	89 34 24             	mov    DWORD PTR [esp],esi
c00206c1:	e8 3c fd ff ff       	call   c0020402 <SoundChannel::getBits()>
c00206c6:	83 c4 0c             	add    esp,0xc
c00206c9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00206cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00206d1:	50                   	push   eax
c00206d2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00206d8:	53                   	push   ebx
c00206d9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00206dc:	83 c4 10             	add    esp,0x10
c00206df:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00206e5:	b8 01 00 00 00       	mov    eax,0x1
c00206ea:	eb 03                	jmp    c00206ef <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00206ec:	83 c8 ff             	or     eax,0xffffffff
c00206ef:	5a                   	pop    edx
c00206f0:	5b                   	pop    ebx
c00206f1:	5e                   	pop    esi
c00206f2:	c3                   	ret    
c00206f3:	90                   	nop

c00206f4 <SoundDevice::removeChannel(int)>:
c00206f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00206f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206fc:	83 fa 1f             	cmp    edx,0x1f
c00206ff:	77 23                	ja     c0020724 <SoundDevice::removeChannel(int)+0x30>
c0020701:	8d 14 90             	lea    edx,[eax+edx*4]
c0020704:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002070b:	74 17                	je     c0020724 <SoundDevice::removeChannel(int)+0x30>
c002070d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0020717:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002071d:	75 05                	jne    c0020724 <SoundDevice::removeChannel(int)+0x30>
c002071f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020721:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0020724:	c3                   	ret    
c0020725:	90                   	nop

c0020726 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0020726:	57                   	push   edi
c0020727:	56                   	push   esi
c0020728:	53                   	push   ebx
c0020729:	31 db                	xor    ebx,ebx
c002072b:	83 ec 10             	sub    esp,0x10
c002072e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020732:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0020736:	0f 8d cb 00 00 00    	jge    c0020807 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002073c:	83 ec 0c             	sub    esp,0xc
c002073f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020743:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0020746:	e8 dc 53 00 00       	call   c0025b27 <__extendsfdf2>
c002074b:	83 c4 10             	add    esp,0x10
c002074e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020752:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020756:	68 00 00 f0 3f       	push   0x3ff00000
c002075b:	6a 00                	push   0x0
c002075d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020761:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020765:	e8 49 43 00 00       	call   c0024ab3 <__adddf3>
c002076a:	83 c4 10             	add    esp,0x10
c002076d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020771:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020775:	68 00 00 e0 3f       	push   0x3fe00000
c002077a:	6a 00                	push   0x0
c002077c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020780:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020784:	e8 a7 49 00 00       	call   c0025130 <__muldf3>
c0020789:	83 c4 10             	add    esp,0x10
c002078c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020794:	68 00 00 60 40       	push   0x40600000
c0020799:	6a 00                	push   0x0
c002079b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002079f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00207a3:	e8 88 49 00 00       	call   c0025130 <__muldf3>
c00207a8:	59                   	pop    ecx
c00207a9:	5f                   	pop    edi
c00207aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00207ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00207b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00207b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00207ba:	e8 44 52 00 00       	call   c0025a03 <__truncdfsf2>
c00207bf:	5a                   	pop    edx
c00207c0:	89 c7                	mov    edi,eax
c00207c2:	59                   	pop    ecx
c00207c3:	68 00 00 fe 42       	push   0x42fe0000
c00207c8:	50                   	push   eax
c00207c9:	e8 df 42 00 00       	call   c0024aad <__gesf2>
c00207ce:	83 c4 10             	add    esp,0x10
c00207d1:	85 c0                	test   eax,eax
c00207d3:	78 06                	js     c00207db <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00207d5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00207d9:	eb 26                	jmp    c0020801 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00207db:	50                   	push   eax
c00207dc:	50                   	push   eax
c00207dd:	6a 00                	push   0x0
c00207df:	57                   	push   edi
c00207e0:	e8 cc 42 00 00       	call   c0024ab1 <__lesf2>
c00207e5:	83 c4 10             	add    esp,0x10
c00207e8:	85 c0                	test   eax,eax
c00207ea:	7f 06                	jg     c00207f2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00207ec:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00207f0:	eb 0f                	jmp    c0020801 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00207f2:	83 ec 0c             	sub    esp,0xc
c00207f5:	57                   	push   edi
c00207f6:	e8 c1 53 00 00       	call   c0025bbc <lrintf>
c00207fb:	83 c4 10             	add    esp,0x10
c00207fe:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0020801:	43                   	inc    ebx
c0020802:	e9 2b ff ff ff       	jmp    c0020732 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0020807:	83 c4 10             	add    esp,0x10
c002080a:	5b                   	pop    ebx
c002080b:	5e                   	pop    esi
c002080c:	5f                   	pop    edi
c002080d:	c3                   	ret    

c002080e <SoundDevice::getAudio(int, float*, float*)>:
c002080e:	55                   	push   ebp
c002080f:	57                   	push   edi
c0020810:	56                   	push   esi
c0020811:	53                   	push   ebx
c0020812:	31 db                	xor    ebx,ebx
c0020814:	83 ec 20             	sub    esp,0x20
c0020817:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002081b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002081f:	c1 e0 02             	shl    eax,0x2
c0020822:	50                   	push   eax
c0020823:	6a 00                	push   0x0
c0020825:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020829:	e8 4d fe fd ff       	call   c000067b <memset>
c002082e:	83 c4 10             	add    esp,0x10
c0020831:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020835:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002083c:	85 c0                	test   eax,eax
c002083e:	0f 84 d7 00 00 00    	je     c002091b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020844:	83 ec 0c             	sub    esp,0xc
c0020847:	50                   	push   eax
c0020848:	e8 a5 fb ff ff       	call   c00203f2 <SoundChannel::paused()>
c002084d:	83 c4 10             	add    esp,0x10
c0020850:	84 c0                	test   al,al
c0020852:	0f 85 c3 00 00 00    	jne    c002091b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020858:	83 ec 0c             	sub    esp,0xc
c002085b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020862:	e8 19 fa ff ff       	call   c0020280 <SoundChannel::getVolume()>
c0020867:	83 c4 10             	add    esp,0x10
c002086a:	85 c0                	test   eax,eax
c002086c:	0f 84 a9 00 00 00    	je     c002091b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020872:	83 ec 0c             	sub    esp,0xc
c0020875:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002087c:	e8 ff f9 ff ff       	call   c0020280 <SoundChannel::getVolume()>
c0020881:	83 ec 0c             	sub    esp,0xc
c0020884:	50                   	push   eax
c0020885:	e8 cd 3f 00 00       	call   c0024857 <__floatsisf>
c002088a:	59                   	pop    ecx
c002088b:	5d                   	pop    ebp
c002088c:	31 ed                	xor    ebp,ebp
c002088e:	68 00 00 c8 42       	push   0x42c80000
c0020893:	50                   	push   eax
c0020894:	e8 93 3d 00 00       	call   c002462c <__divsf3>
c0020899:	83 c4 10             	add    esp,0x10
c002089c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00208a4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00208aa:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00208ae:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00208b5:	e8 60 fb ff ff       	call   c002041a <SoundChannel::unbuffer(float*, int, int)>
c00208ba:	83 c4 20             	add    esp,0x20
c00208bd:	89 c1                	mov    ecx,eax
c00208bf:	39 cd                	cmp    ebp,ecx
c00208c1:	7d 52                	jge    c0020915 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00208c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00208c7:	50                   	push   eax
c00208c8:	50                   	push   eax
c00208c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208cd:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00208d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00208d4:	e8 90 3b 00 00       	call   c0024469 <__mulsf3>
c00208d9:	5a                   	pop    edx
c00208da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208de:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00208e4:	e8 6e 3f 00 00       	call   c0024857 <__floatsisf>
c00208e9:	59                   	pop    ecx
c00208ea:	5a                   	pop    edx
c00208eb:	50                   	push   eax
c00208ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00208f0:	e8 37 3d 00 00       	call   c002462c <__divsf3>
c00208f5:	59                   	pop    ecx
c00208f6:	5a                   	pop    edx
c00208f7:	50                   	push   eax
c00208f8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00208fc:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00208ff:	e8 42 38 00 00       	call   c0024146 <__addsf3>
c0020904:	83 c4 10             	add    esp,0x10
c0020907:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002090b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002090f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020912:	45                   	inc    ebp
c0020913:	eb aa                	jmp    c00208bf <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0020915:	39 cf                	cmp    edi,ecx
c0020917:	7e 02                	jle    c002091b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020919:	89 cf                	mov    edi,ecx
c002091b:	43                   	inc    ebx
c002091c:	83 fb 20             	cmp    ebx,0x20
c002091f:	0f 85 10 ff ff ff    	jne    c0020835 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0020925:	83 c4 1c             	add    esp,0x1c
c0020928:	89 f8                	mov    eax,edi
c002092a:	5b                   	pop    ebx
c002092b:	5e                   	pop    esi
c002092c:	5f                   	pop    edi
c002092d:	5d                   	pop    ebp
c002092e:	c3                   	ret    
c002092f:	90                   	nop

c0020930 <PCI::open(int, int, void*)>:
c0020930:	83 ec 18             	sub    esp,0x18
c0020933:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020937:	8b 10                	mov    edx,DWORD PTR [eax]
c0020939:	50                   	push   eax
c002093a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002093d:	31 c0                	xor    eax,eax
c002093f:	83 c4 1c             	add    esp,0x1c
c0020942:	c3                   	ret    
c0020943:	90                   	nop

c0020944 <PCI::close(int, int, void*)>:
c0020944:	31 c0                	xor    eax,eax
c0020946:	c3                   	ret    
c0020947:	90                   	nop

c0020948 <PCI::PCI()>:
c0020948:	83 ec 0c             	sub    esp,0xc
c002094b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002094f:	83 ec 08             	sub    esp,0x8
c0020952:	68 d0 98 02 c0       	push   0xc00298d0
c0020957:	50                   	push   eax
c0020958:	e8 71 29 ff ff       	call   c00132ce <Bus::Bus(char const*)>
c002095d:	83 c4 10             	add    esp,0x10
c0020960:	ba 5c 99 02 c0       	mov    edx,0xc002995c
c0020965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020969:	89 10                	mov    DWORD PTR [eax],edx
c002096b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002096f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020975:	0f b6 d0             	movzx  edx,al
c0020978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002097c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020987:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002098d:	0f b6 d0             	movzx  edx,al
c0020990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020994:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002099d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00209a3:	8d 50 01             	lea    edx,[eax+0x1]
c00209a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00209aa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00209b0:	0f b6 d0             	movzx  edx,al
c00209b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209b7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00209bb:	83 c9 c0             	or     ecx,0xffffffc0
c00209be:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00209c2:	90                   	nop
c00209c3:	83 c4 0c             	add    esp,0xc
c00209c6:	c3                   	ret    
c00209c7:	90                   	nop

c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00209c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00209cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00209d1:	89 ca                	mov    edx,ecx
c00209d3:	c1 e0 10             	shl    eax,0x10
c00209d6:	81 e2 fc 00 00 00    	and    edx,0xfc
c00209dc:	09 d0                	or     eax,edx
c00209de:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00209e3:	c1 e2 08             	shl    edx,0x8
c00209e6:	09 d0                	or     eax,edx
c00209e8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00209ed:	c1 e2 0b             	shl    edx,0xb
c00209f0:	09 d0                	or     eax,edx
c00209f2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00209f7:	0d 00 00 00 80       	or     eax,0x80000000
c00209fc:	ef                   	out    dx,eax
c00209fd:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020a02:	ed                   	in     eax,dx
c0020a03:	83 e1 02             	and    ecx,0x2
c0020a06:	0f b6 c9             	movzx  ecx,cl
c0020a09:	c1 e1 03             	shl    ecx,0x3
c0020a0c:	d3 e8                	shr    eax,cl
c0020a0e:	c3                   	ret    
c0020a0f:	90                   	nop

c0020a10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020a10:	6a 00                	push   0x0
c0020a12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020a17:	50                   	push   eax
c0020a18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020a1d:	50                   	push   eax
c0020a1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020a23:	50                   	push   eax
c0020a24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020a28:	e8 9b ff ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020a2d:	83 c4 14             	add    esp,0x14
c0020a30:	c3                   	ret    
c0020a31:	90                   	nop

c0020a32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020a32:	6a 0e                	push   0xe
c0020a34:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020a39:	50                   	push   eax
c0020a3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020a3f:	50                   	push   eax
c0020a40:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020a45:	50                   	push   eax
c0020a46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020a4a:	e8 79 ff ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020a4f:	83 c4 14             	add    esp,0x14
c0020a52:	0f b6 c0             	movzx  eax,al
c0020a55:	c3                   	ret    

c0020a56 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0020a56:	55                   	push   ebp
c0020a57:	57                   	push   edi
c0020a58:	56                   	push   esi
c0020a59:	53                   	push   ebx
c0020a5a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0020a5f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0020a64:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0020a69:	6a 0a                	push   0xa
c0020a6b:	56                   	push   esi
c0020a6c:	55                   	push   ebp
c0020a6d:	57                   	push   edi
c0020a6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020a72:	e8 51 ff ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020a77:	6a 0a                	push   0xa
c0020a79:	89 c3                	mov    ebx,eax
c0020a7b:	56                   	push   esi
c0020a7c:	0f b6 db             	movzx  ebx,bl
c0020a7f:	55                   	push   ebp
c0020a80:	57                   	push   edi
c0020a81:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020a85:	e8 3e ff ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020a8a:	83 c4 28             	add    esp,0x28
c0020a8d:	25 00 ff 00 00       	and    eax,0xff00
c0020a92:	09 d8                	or     eax,ebx
c0020a94:	5b                   	pop    ebx
c0020a95:	5e                   	pop    esi
c0020a96:	5f                   	pop    edi
c0020a97:	5d                   	pop    ebp
c0020a98:	c3                   	ret    
c0020a99:	90                   	nop

c0020a9a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020a9a:	6a 08                	push   0x8
c0020a9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020aa1:	50                   	push   eax
c0020aa2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020aa7:	50                   	push   eax
c0020aa8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020aad:	50                   	push   eax
c0020aae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020ab2:	e8 11 ff ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ab7:	83 c4 14             	add    esp,0x14
c0020aba:	0f b6 c4             	movzx  eax,ah
c0020abd:	c3                   	ret    

c0020abe <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020abe:	6a 08                	push   0x8
c0020ac0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ac5:	50                   	push   eax
c0020ac6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020acb:	50                   	push   eax
c0020acc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ad1:	50                   	push   eax
c0020ad2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020ad6:	e8 ed fe ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020adb:	83 c4 14             	add    esp,0x14
c0020ade:	c3                   	ret    
c0020adf:	90                   	nop

c0020ae0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020ae0:	6a 3c                	push   0x3c
c0020ae2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ae7:	50                   	push   eax
c0020ae8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020aed:	50                   	push   eax
c0020aee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020af3:	50                   	push   eax
c0020af4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020af8:	e8 cb fe ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020afd:	83 c4 14             	add    esp,0x14
c0020b00:	c3                   	ret    
c0020b01:	90                   	nop

c0020b02 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020b02:	6a 18                	push   0x18
c0020b04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b09:	50                   	push   eax
c0020b0a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b0f:	50                   	push   eax
c0020b10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b15:	50                   	push   eax
c0020b16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b1a:	e8 a9 fe ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b1f:	83 c4 14             	add    esp,0x14
c0020b22:	0f b6 c4             	movzx  eax,ah
c0020b25:	c3                   	ret    

c0020b26 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020b26:	55                   	push   ebp
c0020b27:	57                   	push   edi
c0020b28:	56                   	push   esi
c0020b29:	53                   	push   ebx
c0020b2a:	50                   	push   eax
c0020b2b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020b2f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0020b34:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020b39:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0020b3e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0020b45:	8d 43 12             	lea    eax,[ebx+0x12]
c0020b48:	83 c3 10             	add    ebx,0x10
c0020b4b:	0f b6 c0             	movzx  eax,al
c0020b4e:	0f b6 db             	movzx  ebx,bl
c0020b51:	50                   	push   eax
c0020b52:	51                   	push   ecx
c0020b53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020b57:	57                   	push   edi
c0020b58:	55                   	push   ebp
c0020b59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020b5d:	e8 66 fe ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b62:	53                   	push   ebx
c0020b63:	89 c6                	mov    esi,eax
c0020b65:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020b69:	c1 e6 10             	shl    esi,0x10
c0020b6c:	51                   	push   ecx
c0020b6d:	57                   	push   edi
c0020b6e:	55                   	push   ebp
c0020b6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020b73:	e8 50 fe ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b78:	83 c4 2c             	add    esp,0x2c
c0020b7b:	0f b7 c0             	movzx  eax,ax
c0020b7e:	5b                   	pop    ebx
c0020b7f:	09 f0                	or     eax,esi
c0020b81:	5e                   	pop    esi
c0020b82:	5f                   	pop    edi
c0020b83:	5d                   	pop    ebp
c0020b84:	c3                   	ret    
c0020b85:	90                   	nop

c0020b86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0020b86:	53                   	push   ebx
c0020b87:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020b8c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020b91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020b95:	c1 e1 10             	shl    ecx,0x10
c0020b98:	25 fc 00 00 00       	and    eax,0xfc
c0020b9d:	09 c1                	or     ecx,eax
c0020b9f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ba4:	c1 e0 08             	shl    eax,0x8
c0020ba7:	09 c1                	or     ecx,eax
c0020ba9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020bae:	c1 e0 0b             	shl    eax,0xb
c0020bb1:	09 c1                	or     ecx,eax
c0020bb3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020bb9:	89 c8                	mov    eax,ecx
c0020bbb:	ef                   	out    dx,eax
c0020bbc:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020bc1:	ed                   	in     eax,dx
c0020bc2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020bc7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020bcc:	74 0a                	je     c0020bd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020bce:	0f b7 d8             	movzx  ebx,ax
c0020bd1:	89 d0                	mov    eax,edx
c0020bd3:	c1 e0 10             	shl    eax,0x10
c0020bd6:	eb 05                	jmp    c0020bdd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020bd8:	66 31 c0             	xor    ax,ax
c0020bdb:	89 d3                	mov    ebx,edx
c0020bdd:	09 c3                	or     ebx,eax
c0020bdf:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020be4:	89 c8                	mov    eax,ecx
c0020be6:	ef                   	out    dx,eax
c0020be7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020bec:	89 d8                	mov    eax,ebx
c0020bee:	ef                   	out    dx,eax
c0020bef:	5b                   	pop    ebx
c0020bf0:	c3                   	ret    
c0020bf1:	90                   	nop

c0020bf2 <PCI::checkBus(unsigned char)>:
c0020bf2:	56                   	push   esi
c0020bf3:	53                   	push   ebx
c0020bf4:	31 db                	xor    ebx,ebx
c0020bf6:	51                   	push   ecx
c0020bf7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020bfc:	52                   	push   edx
c0020bfd:	53                   	push   ebx
c0020bfe:	43                   	inc    ebx
c0020bff:	56                   	push   esi
c0020c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c04:	e8 29 03 00 00       	call   c0020f32 <PCI::checkDevice(unsigned char, unsigned char)>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	83 fb 20             	cmp    ebx,0x20
c0020c0f:	75 eb                	jne    c0020bfc <PCI::checkBus(unsigned char)+0xa>
c0020c11:	58                   	pop    eax
c0020c12:	5b                   	pop    ebx
c0020c13:	5e                   	pop    esi
c0020c14:	c3                   	ret    
c0020c15:	90                   	nop

c0020c16 <PCI::foundDevice(PCIDeviceInfo)>:
c0020c16:	55                   	push   ebp
c0020c17:	57                   	push   edi
c0020c18:	56                   	push   esi
c0020c19:	53                   	push   ebx
c0020c1a:	83 ec 1c             	sub    esp,0x1c
c0020c1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020c21:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0020c27:	0f 84 51 01 00 00    	je     c0020d7e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020c2d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0020c31:	66 81 f9 06 04       	cmp    cx,0x406
c0020c36:	75 2c                	jne    c0020c64 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0020c38:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0020c3d:	50                   	push   eax
c0020c3e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0020c43:	50                   	push   eax
c0020c44:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0020c49:	50                   	push   eax
c0020c4a:	56                   	push   esi
c0020c4b:	e8 b2 fe ff ff       	call   c0020b02 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0020c50:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020c54:	0f b6 c0             	movzx  eax,al
c0020c57:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0020c5b:	83 c4 2c             	add    esp,0x2c
c0020c5e:	5b                   	pop    ebx
c0020c5f:	5e                   	pop    esi
c0020c60:	5f                   	pop    edi
c0020c61:	5d                   	pop    ebp
c0020c62:	eb 8e                	jmp    c0020bf2 <PCI::checkBus(unsigned char)>
c0020c64:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c68:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0020c6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c72:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020c76:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0020c7a:	88 d3                	mov    bl,dl
c0020c7c:	85 c0                	test   eax,eax
c0020c7e:	74 33                	je     c0020cb3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0020c80:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020c83:	85 d2                	test   edx,edx
c0020c85:	74 28                	je     c0020caf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020c87:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020c8d:	31 ef                	xor    edi,ebp
c0020c8f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020c95:	75 18                	jne    c0020caf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020c97:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020c9b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0020ca1:	75 0c                	jne    c0020caf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020ca3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020ca9:	0f 84 cf 00 00 00    	je     c0020d7e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0020cb1:	eb c9                	jmp    c0020c7c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020cb3:	66 81 f9 01 06       	cmp    cx,0x601
c0020cb8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020cbc:	75 18                	jne    c0020cd6 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020cbe:	83 ec 0c             	sub    esp,0xc
c0020cc1:	68 58 01 00 00       	push   0x158
c0020cc6:	e8 f5 e7 fe ff       	call   c000f4c0 <malloc>
c0020ccb:	59                   	pop    ecx
c0020ccc:	89 c5                	mov    ebp,eax
c0020cce:	5f                   	pop    edi
c0020ccf:	68 d8 98 02 c0       	push   0xc00298d8
c0020cd4:	eb 7d                	jmp    c0020d53 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020cd6:	66 81 f9 01 01       	cmp    cx,0x101
c0020cdb:	75 60                	jne    c0020d3d <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020cdd:	83 ec 0c             	sub    esp,0xc
c0020ce0:	68 70 02 00 00       	push   0x270
c0020ce5:	e8 d6 e7 fe ff       	call   c000f4c0 <malloc>
c0020cea:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ced:	89 c5                	mov    ebp,eax
c0020cef:	e8 02 03 00 00       	call   c0020ff6 <IDE::IDE()>
c0020cf4:	58                   	pop    eax
c0020cf5:	5a                   	pop    edx
c0020cf6:	55                   	push   ebp
c0020cf7:	56                   	push   esi
c0020cf8:	e8 25 2d ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0020cfd:	83 ec 1c             	sub    esp,0x1c
c0020d00:	b9 09 00 00 00       	mov    ecx,0x9
c0020d05:	fc                   	cld    
c0020d06:	89 e7                	mov    edi,esp
c0020d08:	89 de                	mov    esi,ebx
c0020d0a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020d0c:	55                   	push   ebp
c0020d0d:	e8 1a 2c ff ff       	call   c001392c <Device::preOpenPCI(PCIDeviceInfo)>
c0020d12:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020d15:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020d19:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0020d21:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020d29:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0020d31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020d34:	83 c4 4c             	add    esp,0x4c
c0020d37:	5b                   	pop    ebx
c0020d38:	5e                   	pop    esi
c0020d39:	5f                   	pop    edi
c0020d3a:	5d                   	pop    ebp
c0020d3b:	ff e0                	jmp    eax
c0020d3d:	83 ec 0c             	sub    esp,0xc
c0020d40:	68 58 01 00 00       	push   0x158
c0020d45:	e8 76 e7 fe ff       	call   c000f4c0 <malloc>
c0020d4a:	59                   	pop    ecx
c0020d4b:	89 c5                	mov    ebp,eax
c0020d4d:	5f                   	pop    edi
c0020d4e:	68 f7 98 02 c0       	push   0xc00298f7
c0020d53:	55                   	push   ebp
c0020d54:	e8 bf 2f ff ff       	call   c0013d18 <DriverlessDevice::DriverlessDevice(char const*)>
c0020d59:	58                   	pop    eax
c0020d5a:	5a                   	pop    edx
c0020d5b:	55                   	push   ebp
c0020d5c:	56                   	push   esi
c0020d5d:	e8 c0 2c ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0020d62:	b9 09 00 00 00       	mov    ecx,0x9
c0020d67:	fc                   	cld    
c0020d68:	89 df                	mov    edi,ebx
c0020d6a:	89 de                	mov    esi,ebx
c0020d6c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020d6e:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0020d72:	83 c4 2c             	add    esp,0x2c
c0020d75:	5b                   	pop    ebx
c0020d76:	5e                   	pop    esi
c0020d77:	5f                   	pop    edi
c0020d78:	5d                   	pop    ebp
c0020d79:	e9 ae 2b ff ff       	jmp    c001392c <Device::preOpenPCI(PCIDeviceInfo)>
c0020d7e:	83 c4 1c             	add    esp,0x1c
c0020d81:	5b                   	pop    ebx
c0020d82:	5e                   	pop    esi
c0020d83:	5f                   	pop    edi
c0020d84:	5d                   	pop    ebp
c0020d85:	c3                   	ret    

c0020d86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020d86:	55                   	push   ebp
c0020d87:	57                   	push   edi
c0020d88:	56                   	push   esi
c0020d89:	53                   	push   ebx
c0020d8a:	83 ec 5c             	sub    esp,0x5c
c0020d8d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0020d91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020d95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020d99:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020d9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020da2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020da6:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020dab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020daf:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020db4:	6a 0c                	push   0xc
c0020db6:	55                   	push   ebp
c0020db7:	53                   	push   ebx
c0020db8:	57                   	push   edi
c0020db9:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020dc0:	e8 03 fc ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020dc5:	55                   	push   ebp
c0020dc6:	53                   	push   ebx
c0020dc7:	57                   	push   edi
c0020dc8:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020dcf:	e8 82 fc ff ff       	call   c0020a56 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020dd4:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020dd9:	83 c4 24             	add    esp,0x24
c0020ddc:	55                   	push   ebp
c0020ddd:	53                   	push   ebx
c0020dde:	57                   	push   edi
c0020ddf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020de3:	e8 f8 fc ff ff       	call   c0020ae0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020de8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020dec:	6a 3c                	push   0x3c
c0020dee:	55                   	push   ebp
c0020def:	53                   	push   ebx
c0020df0:	57                   	push   edi
c0020df1:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020df8:	e8 cb fb ff ff       	call   c00209c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020dfd:	0f b6 c4             	movzx  eax,ah
c0020e00:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020e04:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020e08:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020e0c:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0020e11:	83 c4 24             	add    esp,0x24
c0020e14:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020e1a:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0020e21:	74 6c                	je     c0020e8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020e23:	31 f6                	xor    esi,esi
c0020e25:	8b 15 c8 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0c8
c0020e2b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020e31:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0020e37:	7e 56                	jle    c0020e8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020e39:	8d 14 f2             	lea    edx,[edx+esi*8]
c0020e3c:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0020e43:	39 cb                	cmp    ebx,ecx
c0020e45:	75 45                	jne    c0020e8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020e47:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0020e4e:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0020e52:	75 38                	jne    c0020e8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020e54:	83 ec 0c             	sub    esp,0xc
c0020e57:	68 11 99 02 c0       	push   0xc0029911
c0020e5c:	e8 d2 17 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0020e61:	8b 15 c8 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0c8
c0020e67:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020e6d:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0020e75:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0020e79:	52                   	push   edx
c0020e7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020e7e:	53                   	push   ebx
c0020e7f:	68 36 99 02 c0       	push   0xc0029936
c0020e84:	e8 aa 17 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0020e89:	83 c4 20             	add    esp,0x20
c0020e8c:	46                   	inc    esi
c0020e8d:	eb 96                	jmp    c0020e25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0020e8f:	31 d2                	xor    edx,edx
c0020e91:	83 ec 0c             	sub    esp,0xc
c0020e94:	55                   	push   ebp
c0020e95:	53                   	push   ebx
c0020e96:	57                   	push   edi
c0020e97:	52                   	push   edx
c0020e98:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020e9c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020ea3:	e8 7e fc ff ff       	call   c0020b26 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ea8:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020eac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020eb0:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020eb4:	42                   	inc    edx
c0020eb5:	83 c4 20             	add    esp,0x20
c0020eb8:	83 fa 06             	cmp    edx,0x6
c0020ebb:	75 d4                	jne    c0020e91 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020ebd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020ec1:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020ec5:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020ec9:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020ecd:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020ed1:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020ed5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020eda:	86 e0                	xchg   al,ah
c0020edc:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020ee1:	55                   	push   ebp
c0020ee2:	53                   	push   ebx
c0020ee3:	57                   	push   edi
c0020ee4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020ee8:	e8 ad fb ff ff       	call   c0020a9a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020eed:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020ef1:	55                   	push   ebp
c0020ef2:	53                   	push   ebx
c0020ef3:	57                   	push   edi
c0020ef4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020efb:	e8 10 fb ff ff       	call   c0020a10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020f00:	83 ec 0c             	sub    esp,0xc
c0020f03:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020f08:	b9 09 00 00 00       	mov    ecx,0x9
c0020f0d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020f11:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020f15:	fc                   	cld    
c0020f16:	89 e7                	mov    edi,esp
c0020f18:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020f1a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0020f21:	e8 f0 fc ff ff       	call   c0020c16 <PCI::foundDevice(PCIDeviceInfo)>
c0020f26:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020f2c:	5b                   	pop    ebx
c0020f2d:	5e                   	pop    esi
c0020f2e:	5f                   	pop    edi
c0020f2f:	5d                   	pop    ebp
c0020f30:	c3                   	ret    
c0020f31:	90                   	nop

c0020f32 <PCI::checkDevice(unsigned char, unsigned char)>:
c0020f32:	55                   	push   ebp
c0020f33:	57                   	push   edi
c0020f34:	56                   	push   esi
c0020f35:	53                   	push   ebx
c0020f36:	83 ec 0c             	sub    esp,0xc
c0020f39:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0020f3d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0020f42:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020f47:	6a 00                	push   0x0
c0020f49:	56                   	push   esi
c0020f4a:	57                   	push   edi
c0020f4b:	55                   	push   ebp
c0020f4c:	e8 bf fa ff ff       	call   c0020a10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020f51:	6a 00                	push   0x0
c0020f53:	56                   	push   esi
c0020f54:	57                   	push   edi
c0020f55:	55                   	push   ebp
c0020f56:	e8 2b fe ff ff       	call   c0020d86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020f5b:	83 c4 20             	add    esp,0x20
c0020f5e:	6a 00                	push   0x0
c0020f60:	56                   	push   esi
c0020f61:	57                   	push   edi
c0020f62:	55                   	push   ebp
c0020f63:	e8 ca fa ff ff       	call   c0020a32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020f68:	83 c4 10             	add    esp,0x10
c0020f6b:	84 c0                	test   al,al
c0020f6d:	79 27                	jns    c0020f96 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0020f6f:	bb 01 00 00 00       	mov    ebx,0x1
c0020f74:	53                   	push   ebx
c0020f75:	56                   	push   esi
c0020f76:	57                   	push   edi
c0020f77:	55                   	push   ebp
c0020f78:	e8 93 fa ff ff       	call   c0020a10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020f7d:	83 c4 10             	add    esp,0x10
c0020f80:	66 40                	inc    ax
c0020f82:	74 0c                	je     c0020f90 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0020f84:	53                   	push   ebx
c0020f85:	56                   	push   esi
c0020f86:	57                   	push   edi
c0020f87:	55                   	push   ebp
c0020f88:	e8 f9 fd ff ff       	call   c0020d86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020f8d:	83 c4 10             	add    esp,0x10
c0020f90:	43                   	inc    ebx
c0020f91:	83 fb 08             	cmp    ebx,0x8
c0020f94:	75 de                	jne    c0020f74 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020f96:	83 c4 0c             	add    esp,0xc
c0020f99:	5b                   	pop    ebx
c0020f9a:	5e                   	pop    esi
c0020f9b:	5f                   	pop    edi
c0020f9c:	5d                   	pop    ebp
c0020f9d:	c3                   	ret    

c0020f9e <PCI::detect()>:
c0020f9e:	56                   	push   esi
c0020f9f:	53                   	push   ebx
c0020fa0:	53                   	push   ebx
c0020fa1:	31 db                	xor    ebx,ebx
c0020fa3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020fa7:	6a 00                	push   0x0
c0020fa9:	6a 00                	push   0x0
c0020fab:	6a 00                	push   0x0
c0020fad:	56                   	push   esi
c0020fae:	e8 7f fa ff ff       	call   c0020a32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020fb3:	83 c4 10             	add    esp,0x10
c0020fb6:	a8 80                	test   al,0x80
c0020fb8:	75 21                	jne    c0020fdb <PCI::detect()+0x3d>
c0020fba:	51                   	push   ecx
c0020fbb:	51                   	push   ecx
c0020fbc:	6a 00                	push   0x0
c0020fbe:	56                   	push   esi
c0020fbf:	e8 2e fc ff ff       	call   c0020bf2 <PCI::checkBus(unsigned char)>
c0020fc4:	83 c4 10             	add    esp,0x10
c0020fc7:	eb 24                	jmp    c0020fed <PCI::detect()+0x4f>
c0020fc9:	52                   	push   edx
c0020fca:	52                   	push   edx
c0020fcb:	53                   	push   ebx
c0020fcc:	43                   	inc    ebx
c0020fcd:	56                   	push   esi
c0020fce:	e8 1f fc ff ff       	call   c0020bf2 <PCI::checkBus(unsigned char)>
c0020fd3:	83 c4 10             	add    esp,0x10
c0020fd6:	83 fb 08             	cmp    ebx,0x8
c0020fd9:	74 12                	je     c0020fed <PCI::detect()+0x4f>
c0020fdb:	53                   	push   ebx
c0020fdc:	6a 00                	push   0x0
c0020fde:	6a 00                	push   0x0
c0020fe0:	56                   	push   esi
c0020fe1:	e8 2a fa ff ff       	call   c0020a10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020fe6:	83 c4 10             	add    esp,0x10
c0020fe9:	66 40                	inc    ax
c0020feb:	74 dc                	je     c0020fc9 <PCI::detect()+0x2b>
c0020fed:	58                   	pop    eax
c0020fee:	5b                   	pop    ebx
c0020fef:	5e                   	pop    esi
c0020ff0:	c3                   	ret    
c0020ff1:	90                   	nop

c0020ff2 <IDE::close(int, int, void*)>:
c0020ff2:	83 c8 ff             	or     eax,0xffffffff
c0020ff5:	c3                   	ret    

c0020ff6 <IDE::IDE()>:
c0020ff6:	83 ec 0c             	sub    esp,0xc
c0020ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ffd:	83 ec 08             	sub    esp,0x8
c0021000:	68 80 99 02 c0       	push   0xc0029980
c0021005:	50                   	push   eax
c0021006:	e8 a3 2d ff ff       	call   c0013dae <HardDiskController::HardDiskController(char const*)>
c002100b:	83 c4 10             	add    esp,0x10
c002100e:	ba c0 9b 02 c0       	mov    edx,0xc0029bc0
c0021013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021017:	89 10                	mov    DWORD PTR [eax],edx
c0021019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002101d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021024:	90                   	nop
c0021025:	83 c4 0c             	add    esp,0xc
c0021028:	c3                   	ret    
c0021029:	90                   	nop

c002102a <IDE::prepareInterrupt(unsigned char)>:
c002102a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002102f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021033:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002103b:	c3                   	ret    

c002103c <selectDrive(unsigned char, unsigned char)>:
c002103c:	c3                   	ret    
c002103d:	90                   	nop

c002103e <IDE::getBase(unsigned char)>:
c002103e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021047:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002104f:	c3                   	ret    

c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021050:	55                   	push   ebp
c0021051:	57                   	push   edi
c0021052:	56                   	push   esi
c0021053:	53                   	push   ebx
c0021054:	83 ec 1c             	sub    esp,0x1c
c0021057:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002105b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002105f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021062:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021066:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002106a:	80 f9 03             	cmp    cl,0x3
c002106d:	77 51                	ja     c00210c0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002106f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021073:	0f b6 f2             	movzx  esi,dl
c0021076:	0f b6 db             	movzx  ebx,bl
c0021079:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002107c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021080:	83 ca 80             	or     edx,0xffffff80
c0021083:	0f b6 d2             	movzx  edx,dl
c0021086:	52                   	push   edx
c0021087:	6a 0c                	push   0xc
c0021089:	56                   	push   esi
c002108a:	57                   	push   edi
c002108b:	e8 c0 ff ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021090:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021099:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002109d:	ee                   	out    dx,al
c002109e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00210a3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00210a7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00210ab:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00210af:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00210b7:	83 c4 2c             	add    esp,0x2c
c00210ba:	5b                   	pop    ebx
c00210bb:	5e                   	pop    esi
c00210bc:	5f                   	pop    edi
c00210bd:	5d                   	pop    ebp
c00210be:	eb 90                	jmp    c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00210c0:	80 fb 07             	cmp    bl,0x7
c00210c3:	77 12                	ja     c00210d7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00210c5:	0f b6 d2             	movzx  edx,dl
c00210c8:	0f b6 db             	movzx  ebx,bl
c00210cb:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00210d3:	89 da                	mov    edx,ebx
c00210d5:	eb 2f                	jmp    c0021106 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00210d7:	80 fb 0d             	cmp    bl,0xd
c00210da:	77 13                	ja     c00210ef <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00210dc:	0f b6 d2             	movzx  edx,dl
c00210df:	0f b6 db             	movzx  ebx,bl
c00210e2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00210e9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00210ed:	eb 17                	jmp    c0021106 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00210ef:	80 fb 15             	cmp    bl,0x15
c00210f2:	77 13                	ja     c0021107 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00210f4:	0f b6 d2             	movzx  edx,dl
c00210f7:	0f b6 db             	movzx  ebx,bl
c00210fa:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0021102:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021106:	ee                   	out    dx,al
c0021107:	83 c4 1c             	add    esp,0x1c
c002110a:	5b                   	pop    ebx
c002110b:	5e                   	pop    esi
c002110c:	5f                   	pop    edi
c002110d:	5d                   	pop    ebp
c002110e:	c3                   	ret    
c002110f:	90                   	nop

c0021110 <IDE::read(unsigned char, unsigned char)>:
c0021110:	55                   	push   ebp
c0021111:	57                   	push   edi
c0021112:	56                   	push   esi
c0021113:	53                   	push   ebx
c0021114:	83 ec 1c             	sub    esp,0x1c
c0021117:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002111b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002111f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0021122:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021126:	3c 03                	cmp    al,0x3
c0021128:	77 43                	ja     c002116d <IDE::read(unsigned char, unsigned char)+0x5d>
c002112a:	0f b6 f2             	movzx  esi,dl
c002112d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021130:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0021134:	83 c8 80             	or     eax,0xffffff80
c0021137:	0f b6 c0             	movzx  eax,al
c002113a:	50                   	push   eax
c002113b:	6a 0c                	push   0xc
c002113d:	56                   	push   esi
c002113e:	57                   	push   edi
c002113f:	e8 0c ff ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021144:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0021149:	0f b6 c3             	movzx  eax,bl
c002114c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0021150:	ec                   	in     al,dx
c0021151:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021155:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002115a:	52                   	push   edx
c002115b:	6a 0c                	push   0xc
c002115d:	56                   	push   esi
c002115e:	57                   	push   edi
c002115f:	e8 ec fe ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021164:	83 c4 20             	add    esp,0x20
c0021167:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002116b:	eb 49                	jmp    c00211b6 <IDE::read(unsigned char, unsigned char)+0xa6>
c002116d:	80 fb 07             	cmp    bl,0x7
c0021170:	77 12                	ja     c0021184 <IDE::read(unsigned char, unsigned char)+0x74>
c0021172:	0f b6 d2             	movzx  edx,dl
c0021175:	0f b6 c3             	movzx  eax,bl
c0021178:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0021180:	89 c2                	mov    edx,eax
c0021182:	eb 31                	jmp    c00211b5 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021184:	80 fb 0d             	cmp    bl,0xd
c0021187:	77 13                	ja     c002119c <IDE::read(unsigned char, unsigned char)+0x8c>
c0021189:	0f b6 d2             	movzx  edx,dl
c002118c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0021193:	0f b6 d3             	movzx  edx,bl
c0021196:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002119a:	eb 19                	jmp    c00211b5 <IDE::read(unsigned char, unsigned char)+0xa5>
c002119c:	31 c0                	xor    eax,eax
c002119e:	80 fb 15             	cmp    bl,0x15
c00211a1:	77 13                	ja     c00211b6 <IDE::read(unsigned char, unsigned char)+0xa6>
c00211a3:	0f b6 d2             	movzx  edx,dl
c00211a6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00211ae:	0f b6 d3             	movzx  edx,bl
c00211b1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00211b5:	ec                   	in     al,dx
c00211b6:	83 c4 1c             	add    esp,0x1c
c00211b9:	5b                   	pop    ebx
c00211ba:	5e                   	pop    esi
c00211bb:	5f                   	pop    edi
c00211bc:	5d                   	pop    ebp
c00211bd:	c3                   	ret    

c00211be <IDE::waitInterrupt(unsigned char)>:
c00211be:	55                   	push   ebp
c00211bf:	57                   	push   edi
c00211c0:	56                   	push   esi
c00211c1:	53                   	push   ebx
c00211c2:	31 db                	xor    ebx,ebx
c00211c4:	83 ec 0c             	sub    esp,0xc
c00211c7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00211cb:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00211d0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00211d8:	89 e8                	mov    eax,ebp
c00211da:	84 c0                	test   al,al
c00211dc:	75 34                	jne    c0021212 <IDE::waitInterrupt(unsigned char)+0x54>
c00211de:	52                   	push   edx
c00211df:	6a 0c                	push   0xc
c00211e1:	56                   	push   esi
c00211e2:	57                   	push   edi
c00211e3:	e8 28 ff ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c00211e8:	83 c4 10             	add    esp,0x10
c00211eb:	a8 01                	test   al,0x1
c00211ed:	75 2b                	jne    c002121a <IDE::waitInterrupt(unsigned char)+0x5c>
c00211ef:	f6 c3 04             	test   bl,0x4
c00211f2:	75 16                	jne    c002120a <IDE::waitInterrupt(unsigned char)+0x4c>
c00211f4:	83 fb 32             	cmp    ebx,0x32
c00211f7:	7e 11                	jle    c002120a <IDE::waitInterrupt(unsigned char)+0x4c>
c00211f9:	50                   	push   eax
c00211fa:	50                   	push   eax
c00211fb:	6a 00                	push   0x0
c00211fd:	68 80 96 98 00       	push   0x989680
c0021202:	e8 25 b4 ff ff       	call   c001c62c <nanoSleep(unsigned long long)>
c0021207:	83 c4 10             	add    esp,0x10
c002120a:	83 fb 3c             	cmp    ebx,0x3c
c002120d:	74 0b                	je     c002121a <IDE::waitInterrupt(unsigned char)+0x5c>
c002120f:	43                   	inc    ebx
c0021210:	eb be                	jmp    c00211d0 <IDE::waitInterrupt(unsigned char)+0x12>
c0021212:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002121a:	83 c4 0c             	add    esp,0xc
c002121d:	89 e8                	mov    eax,ebp
c002121f:	5b                   	pop    ebx
c0021220:	5e                   	pop    esi
c0021221:	5f                   	pop    edi
c0021222:	5d                   	pop    ebp
c0021223:	c3                   	ret    

c0021224 <ideChannel0IRQHandler(regs*, void*)>:
c0021224:	83 ec 10             	sub    esp,0x10
c0021227:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002122b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0021232:	6a 07                	push   0x7
c0021234:	6a 00                	push   0x0
c0021236:	50                   	push   eax
c0021237:	e8 d4 fe ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c002123c:	83 c4 1c             	add    esp,0x1c
c002123f:	c3                   	ret    

c0021240 <ideChannel1IRQHandler(regs*, void*)>:
c0021240:	83 ec 10             	sub    esp,0x10
c0021243:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021247:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002124e:	6a 07                	push   0x7
c0021250:	6a 01                	push   0x1
c0021252:	50                   	push   eax
c0021253:	e8 b8 fe ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021258:	83 c4 1c             	add    esp,0x1c
c002125b:	c3                   	ret    

c002125c <IDE::enableIRQs(unsigned char, bool)>:
c002125c:	57                   	push   edi
c002125d:	56                   	push   esi
c002125e:	be 04 00 00 00       	mov    esi,0x4
c0021263:	53                   	push   ebx
c0021264:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0021269:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002126d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0021272:	0f 94 c0             	sete   al
c0021275:	d1 e0                	shl    eax,1
c0021277:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002127e:	0f b6 c0             	movzx  eax,al
c0021281:	50                   	push   eax
c0021282:	6a 0c                	push   0xc
c0021284:	57                   	push   edi
c0021285:	53                   	push   ebx
c0021286:	e8 c5 fd ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002128b:	83 c4 10             	add    esp,0x10
c002128e:	50                   	push   eax
c002128f:	6a 0c                	push   0xc
c0021291:	57                   	push   edi
c0021292:	53                   	push   ebx
c0021293:	e8 78 fe ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021298:	83 c4 10             	add    esp,0x10
c002129b:	4e                   	dec    esi
c002129c:	75 f0                	jne    c002128e <IDE::enableIRQs(unsigned char, bool)+0x32>
c002129e:	5b                   	pop    ebx
c002129f:	5e                   	pop    esi
c00212a0:	5f                   	pop    edi
c00212a1:	c3                   	ret    

c00212a2 <IDE::open(int, int, void*)>:
c00212a2:	55                   	push   ebp
c00212a3:	57                   	push   edi
c00212a4:	56                   	push   esi
c00212a5:	53                   	push   ebx
c00212a6:	83 ec 1c             	sub    esp,0x1c
c00212a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00212ad:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00212b6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00212bf:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00212c6:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00212cd:	0f 85 b0 02 00 00    	jne    c0021583 <IDE::open(int, int, void*)+0x2e1>
c00212d3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00212d9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00212dd:	83 e0 7f             	and    eax,0x7f
c00212e0:	3c 05                	cmp    al,0x5
c00212e2:	74 04                	je     c00212e8 <IDE::open(int, int, void*)+0x46>
c00212e4:	3c 0f                	cmp    al,0xf
c00212e6:	75 32                	jne    c002131a <IDE::open(int, int, void*)+0x78>
c00212e8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00212ee:	83 e0 fc             	and    eax,0xfffffffc
c00212f1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00212f8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00212fe:	83 e0 fc             	and    eax,0xfffffffc
c0021301:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021308:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002130e:	83 e0 fc             	and    eax,0xfffffffc
c0021311:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021318:	eb 14                	jmp    c002132e <IDE::open(int, int, void*)+0x8c>
c002131a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0021324:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002132e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021335:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002133c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021340:	89 c6                	mov    esi,eax
c0021342:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021347:	c1 e6 10             	shl    esi,0x10
c002134a:	89 e8                	mov    eax,ebp
c002134c:	89 fa                	mov    edx,edi
c002134e:	c1 e0 0b             	shl    eax,0xb
c0021351:	09 f0                	or     eax,esi
c0021353:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002135a:	c1 e6 08             	shl    esi,0x8
c002135d:	09 c6                	or     esi,eax
c002135f:	89 f0                	mov    eax,esi
c0021361:	0d 08 00 00 80       	or     eax,0x80000008
c0021366:	ef                   	out    dx,eax
c0021367:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002136c:	89 ca                	mov    edx,ecx
c002136e:	ed                   	in     eax,dx
c002136f:	c1 e8 10             	shr    eax,0x10
c0021372:	3d ff ff 00 00       	cmp    eax,0xffff
c0021377:	0f 84 f5 00 00 00    	je     c0021472 <IDE::open(int, int, void*)+0x1d0>
c002137d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0021383:	89 fa                	mov    edx,edi
c0021385:	89 f0                	mov    eax,esi
c0021387:	ef                   	out    dx,eax
c0021388:	b0 fe                	mov    al,0xfe
c002138a:	89 ca                	mov    edx,ecx
c002138c:	ee                   	out    dx,al
c002138d:	89 f0                	mov    eax,esi
c002138f:	89 fa                	mov    edx,edi
c0021391:	ef                   	out    dx,eax
c0021392:	89 ca                	mov    edx,ecx
c0021394:	ed                   	in     eax,dx
c0021395:	3c fe                	cmp    al,0xfe
c0021397:	0f 85 a9 00 00 00    	jne    c0021446 <IDE::open(int, int, void*)+0x1a4>
c002139d:	8b 15 c8 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0c8
c00213a3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00213aa:	74 33                	je     c00213df <IDE::open(int, int, void*)+0x13d>
c00213ac:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00213b2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00213b6:	40                   	inc    eax
c00213b7:	83 ec 0c             	sub    esp,0xc
c00213ba:	0f b6 c0             	movzx  eax,al
c00213bd:	50                   	push   eax
c00213be:	55                   	push   ebp
c00213bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213c3:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00213c9:	51                   	push   ecx
c00213ca:	e8 91 61 ff ff       	call   c0017560 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00213cf:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00213d4:	83 c4 1c             	add    esp,0x1c
c00213d7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00213dd:	eb 0a                	jmp    c00213e9 <IDE::open(int, int, void*)+0x147>
c00213df:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00213e9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00213f0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00213f7:	c1 e1 10             	shl    ecx,0x10
c00213fa:	c1 e0 08             	shl    eax,0x8
c00213fd:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021402:	09 c1                	or     ecx,eax
c0021404:	89 fa                	mov    edx,edi
c0021406:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002140d:	c1 e0 0b             	shl    eax,0xb
c0021410:	09 c1                	or     ecx,eax
c0021412:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021418:	89 c8                	mov    eax,ecx
c002141a:	ef                   	out    dx,eax
c002141b:	be fc 0c 00 00       	mov    esi,0xcfc
c0021420:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0021426:	89 f2                	mov    edx,esi
c0021428:	ee                   	out    dx,al
c0021429:	89 c8                	mov    eax,ecx
c002142b:	89 fa                	mov    edx,edi
c002142d:	ef                   	out    dx,eax
c002142e:	89 f2                	mov    edx,esi
c0021430:	ed                   	in     eax,dx
c0021431:	0f b6 c0             	movzx  eax,al
c0021434:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002143a:	74 46                	je     c0021482 <IDE::open(int, int, void*)+0x1e0>
c002143c:	83 ec 0c             	sub    esp,0xc
c002143f:	68 98 99 02 c0       	push   0xc0029998
c0021444:	eb 34                	jmp    c002147a <IDE::open(int, int, void*)+0x1d8>
c0021446:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002144f:	75 17                	jne    c0021468 <IDE::open(int, int, void*)+0x1c6>
c0021451:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0021456:	74 07                	je     c002145f <IDE::open(int, int, void*)+0x1bd>
c0021458:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002145d:	75 09                	jne    c0021468 <IDE::open(int, int, void*)+0x1c6>
c002145f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021466:	eb 1a                	jmp    c0021482 <IDE::open(int, int, void*)+0x1e0>
c0021468:	83 ec 0c             	sub    esp,0xc
c002146b:	68 a0 99 02 c0       	push   0xc00299a0
c0021470:	eb 08                	jmp    c002147a <IDE::open(int, int, void*)+0x1d8>
c0021472:	83 ec 0c             	sub    esp,0xc
c0021475:	68 d1 99 02 c0       	push   0xc00299d1
c002147a:	e8 18 7c ff ff       	call   c0019097 <Krnl::panic(char const*)>
c002147f:	83 c4 10             	add    esp,0x10
c0021482:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0021489:	79 1a                	jns    c00214a5 <IDE::open(int, int, void*)+0x203>
c002148b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0021491:	83 e0 fc             	and    eax,0xfffffffc
c0021494:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002149b:	83 c0 08             	add    eax,0x8
c002149e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00214a5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00214ab:	89 c2                	mov    edx,eax
c00214ad:	83 e2 0f             	and    edx,0xf
c00214b0:	66 83 fa 08          	cmp    dx,0x8
c00214b4:	75 0a                	jne    c00214c0 <IDE::open(int, int, void*)+0x21e>
c00214b6:	83 e8 02             	sub    eax,0x2
c00214b9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00214c0:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00214c6:	89 c2                	mov    edx,eax
c00214c8:	83 e2 0f             	and    edx,0xf
c00214cb:	66 83 fa 08          	cmp    dx,0x8
c00214cf:	75 0a                	jne    c00214db <IDE::open(int, int, void*)+0x239>
c00214d1:	83 e8 02             	sub    eax,0x2
c00214d4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00214db:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00214e2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00214e9:	89 d0                	mov    eax,edx
c00214eb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00214ee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00214f2:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00214f6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00214f9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00214fe:	0f b6 c9             	movzx  ecx,cl
c0021501:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0021508:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002150b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002150f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0021513:	8d 50 02             	lea    edx,[eax+0x2]
c0021516:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002151b:	0f b6 d2             	movzx  edx,dl
c002151e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0021524:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021527:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002152b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002152f:	8d 48 03             	lea    ecx,[eax+0x3]
c0021532:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021537:	0f b6 c9             	movzx  ecx,cl
c002153a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0021540:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021543:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021547:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002154b:	8d 50 04             	lea    edx,[eax+0x4]
c002154e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0021554:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0021559:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0021560:	66 85 f6             	test   si,si
c0021563:	74 3e                	je     c00215a3 <IDE::open(int, int, void*)+0x301>
c0021565:	0f b6 d2             	movzx  edx,dl
c0021568:	83 c0 05             	add    eax,0x5
c002156b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002156e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021572:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0021576:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002157c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021581:	eb 20                	jmp    c00215a3 <IDE::open(int, int, void*)+0x301>
c0021583:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002158d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021597:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002159e:	e9 02 ff ff ff       	jmp    c00214a5 <IDE::open(int, int, void*)+0x203>
c00215a3:	52                   	push   edx
c00215a4:	52                   	push   edx
c00215a5:	6a 00                	push   0x0
c00215a7:	53                   	push   ebx
c00215a8:	e8 7d fa ff ff       	call   c002102a <IDE::prepareInterrupt(unsigned char)>
c00215ad:	59                   	pop    ecx
c00215ae:	5e                   	pop    esi
c00215af:	6a 01                	push   0x1
c00215b1:	53                   	push   ebx
c00215b2:	e8 73 fa ff ff       	call   c002102a <IDE::prepareInterrupt(unsigned char)>
c00215b7:	83 c4 0c             	add    esp,0xc
c00215ba:	6a 00                	push   0x0
c00215bc:	6a 00                	push   0x0
c00215be:	53                   	push   ebx
c00215bf:	e8 98 fc ff ff       	call   c002125c <IDE::enableIRQs(unsigned char, bool)>
c00215c4:	83 c4 0c             	add    esp,0xc
c00215c7:	6a 00                	push   0x0
c00215c9:	6a 01                	push   0x1
c00215cb:	53                   	push   ebx
c00215cc:	e8 8b fc ff ff       	call   c002125c <IDE::enableIRQs(unsigned char, bool)>
c00215d1:	83 c4 10             	add    esp,0x10
c00215d4:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00215db:	74 40                	je     c002161d <IDE::open(int, int, void*)+0x37b>
c00215dd:	83 ec 0c             	sub    esp,0xc
c00215e0:	68 fb 99 02 c0       	push   0xc00299fb
c00215e5:	e8 49 10 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00215ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00215ed:	6a 01                	push   0x1
c00215ef:	68 24 12 02 c0       	push   0xc0021224
c00215f4:	6a 0e                	push   0xe
c00215f6:	53                   	push   ebx
c00215f7:	e8 aa 23 ff ff       	call   c00139a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00215fc:	83 c4 14             	add    esp,0x14
c00215ff:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021605:	53                   	push   ebx
c0021606:	6a 01                	push   0x1
c0021608:	68 40 12 02 c0       	push   0xc0021240
c002160d:	6a 0f                	push   0xf
c002160f:	53                   	push   ebx
c0021610:	e8 91 23 ff ff       	call   c00139a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021615:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002161b:	eb 4a                	jmp    c0021667 <IDE::open(int, int, void*)+0x3c5>
c002161d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0021627:	50                   	push   eax
c0021628:	6a 0f                	push   0xf
c002162a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0021630:	68 17 9a 02 c0       	push   0xc0029a17
c0021635:	e8 f9 0f ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c002163a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002163d:	6a 00                	push   0x0
c002163f:	68 24 12 02 c0       	push   0xc0021224
c0021644:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002164a:	53                   	push   ebx
c002164b:	e8 56 23 ff ff       	call   c00139a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021650:	83 c4 14             	add    esp,0x14
c0021653:	53                   	push   ebx
c0021654:	6a 00                	push   0x0
c0021656:	68 40 12 02 c0       	push   0xc0021240
c002165b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0021661:	53                   	push   ebx
c0021662:	e8 3f 23 ff ff       	call   c00139a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021667:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021669:	83 c4 20             	add    esp,0x20
c002166c:	83 ec 0c             	sub    esp,0xc
c002166f:	53                   	push   ebx
c0021670:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0021673:	83 c4 0c             	add    esp,0xc
c0021676:	6a 07                	push   0x7
c0021678:	6a 00                	push   0x0
c002167a:	53                   	push   ebx
c002167b:	e8 90 fa ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021680:	83 c4 0c             	add    esp,0xc
c0021683:	6a 07                	push   0x7
c0021685:	6a 01                	push   0x1
c0021687:	53                   	push   ebx
c0021688:	e8 83 fa ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c002168d:	83 c4 0c             	add    esp,0xc
c0021690:	6a 01                	push   0x1
c0021692:	6a 00                	push   0x0
c0021694:	53                   	push   ebx
c0021695:	e8 c2 fb ff ff       	call   c002125c <IDE::enableIRQs(unsigned char, bool)>
c002169a:	83 c4 0c             	add    esp,0xc
c002169d:	6a 01                	push   0x1
c002169f:	6a 01                	push   0x1
c00216a1:	53                   	push   ebx
c00216a2:	e8 b5 fb ff ff       	call   c002125c <IDE::enableIRQs(unsigned char, bool)>
c00216a7:	83 c4 2c             	add    esp,0x2c
c00216aa:	31 c0                	xor    eax,eax
c00216ac:	5b                   	pop    ebx
c00216ad:	5e                   	pop    esi
c00216ae:	5f                   	pop    edi
c00216af:	5d                   	pop    ebp
c00216b0:	c3                   	ret    
c00216b1:	90                   	nop

c00216b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00216b2:	55                   	push   ebp
c00216b3:	57                   	push   edi
c00216b4:	56                   	push   esi
c00216b5:	53                   	push   ebx
c00216b6:	83 ec 1c             	sub    esp,0x1c
c00216b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00216c1:	8d 50 f8             	lea    edx,[eax-0x8]
c00216c4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00216c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00216cc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00216d0:	80 fa 03             	cmp    dl,0x3
c00216d3:	77 5d                	ja     c0021732 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00216d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00216d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216dd:	0f b6 db             	movzx  ebx,bl
c00216e0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00216e3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00216e7:	83 ca 80             	or     edx,0xffffff80
c00216ea:	0f b6 d2             	movzx  edx,dl
c00216ed:	52                   	push   edx
c00216ee:	6a 0c                	push   0xc
c00216f0:	53                   	push   ebx
c00216f1:	56                   	push   esi
c00216f2:	e8 59 f9 ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216f7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00216fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021700:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021704:	0f b6 c0             	movzx  eax,al
c0021707:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002170b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002170d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021712:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0021716:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002171a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002171e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021726:	83 c4 2c             	add    esp,0x2c
c0021729:	5b                   	pop    ebx
c002172a:	5e                   	pop    esi
c002172b:	5f                   	pop    edi
c002172c:	5d                   	pop    ebp
c002172d:	e9 1e f9 ff ff       	jmp    c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021732:	3c 07                	cmp    al,0x7
c0021734:	77 10                	ja     c0021746 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0021736:	0f b6 db             	movzx  ebx,bl
c0021739:	0f b6 d0             	movzx  edx,al
c002173c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0021744:	eb 2d                	jmp    c0021773 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0021746:	3c 0d                	cmp    al,0xd
c0021748:	77 13                	ja     c002175d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002174a:	0f b6 db             	movzx  ebx,bl
c002174d:	0f b6 c0             	movzx  eax,al
c0021750:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0021757:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002175b:	eb 16                	jmp    c0021773 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002175d:	3c 15                	cmp    al,0x15
c002175f:	77 14                	ja     c0021775 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0021761:	0f b6 db             	movzx  ebx,bl
c0021764:	0f b6 c0             	movzx  eax,al
c0021767:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002176f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0021773:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021775:	83 c4 1c             	add    esp,0x1c
c0021778:	5b                   	pop    ebx
c0021779:	5e                   	pop    esi
c002177a:	5f                   	pop    edi
c002177b:	5d                   	pop    ebp
c002177c:	c3                   	ret    
c002177d:	90                   	nop

c002177e <IDE::detect()>:
c002177e:	55                   	push   ebp
c002177f:	57                   	push   edi
c0021780:	56                   	push   esi
c0021781:	53                   	push   ebx
c0021782:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021788:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002178f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0021796:	0f 85 be 02 00 00    	jne    c0021a5a <IDE::detect()+0x2dc>
c002179c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00217a3:	31 f6                	xor    esi,esi
c00217a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00217ad:	31 ed                	xor    ebp,ebp
c00217af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217b3:	c1 e0 06             	shl    eax,0x6
c00217b6:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00217be:	89 e8                	mov    eax,ebp
c00217c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00217c4:	c1 e0 04             	shl    eax,0x4
c00217c7:	83 c8 a0             	or     eax,0xffffffa0
c00217ca:	0f b6 c0             	movzx  eax,al
c00217cd:	50                   	push   eax
c00217ce:	6a 06                	push   0x6
c00217d0:	56                   	push   esi
c00217d1:	53                   	push   ebx
c00217d2:	e8 79 f8 ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217d7:	83 c4 0c             	add    esp,0xc
c00217da:	6a 0c                	push   0xc
c00217dc:	56                   	push   esi
c00217dd:	53                   	push   ebx
c00217de:	e8 2d f9 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c00217e3:	83 c4 0c             	add    esp,0xc
c00217e6:	6a 0c                	push   0xc
c00217e8:	56                   	push   esi
c00217e9:	53                   	push   ebx
c00217ea:	e8 21 f9 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c00217ef:	83 c4 0c             	add    esp,0xc
c00217f2:	6a 0c                	push   0xc
c00217f4:	56                   	push   esi
c00217f5:	53                   	push   ebx
c00217f6:	e8 15 f9 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c00217fb:	83 c4 0c             	add    esp,0xc
c00217fe:	6a 0c                	push   0xc
c0021800:	56                   	push   esi
c0021801:	53                   	push   ebx
c0021802:	e8 09 f9 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021807:	68 ec 00 00 00       	push   0xec
c002180c:	6a 07                	push   0x7
c002180e:	56                   	push   esi
c002180f:	53                   	push   ebx
c0021810:	e8 3b f8 ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021815:	83 c4 1c             	add    esp,0x1c
c0021818:	6a 0c                	push   0xc
c002181a:	56                   	push   esi
c002181b:	53                   	push   ebx
c002181c:	e8 ef f8 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021821:	83 c4 0c             	add    esp,0xc
c0021824:	6a 0c                	push   0xc
c0021826:	56                   	push   esi
c0021827:	53                   	push   ebx
c0021828:	e8 e3 f8 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c002182d:	83 c4 0c             	add    esp,0xc
c0021830:	6a 0c                	push   0xc
c0021832:	56                   	push   esi
c0021833:	53                   	push   ebx
c0021834:	e8 d7 f8 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021839:	83 c4 0c             	add    esp,0xc
c002183c:	6a 0c                	push   0xc
c002183e:	56                   	push   esi
c002183f:	53                   	push   ebx
c0021840:	e8 cb f8 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021845:	83 c4 0c             	add    esp,0xc
c0021848:	6a 0c                	push   0xc
c002184a:	56                   	push   esi
c002184b:	53                   	push   ebx
c002184c:	e8 bf f8 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021851:	83 c4 10             	add    esp,0x10
c0021854:	84 c0                	test   al,al
c0021856:	0f 84 8b 01 00 00    	je     c00219e7 <IDE::detect()+0x269>
c002185c:	31 ff                	xor    edi,edi
c002185e:	50                   	push   eax
c002185f:	6a 0c                	push   0xc
c0021861:	56                   	push   esi
c0021862:	53                   	push   ebx
c0021863:	e8 a8 f8 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021868:	83 c4 10             	add    esp,0x10
c002186b:	a8 01                	test   al,0x1
c002186d:	0f 85 8e 01 00 00    	jne    c0021a01 <IDE::detect()+0x283>
c0021873:	84 c0                	test   al,al
c0021875:	78 04                	js     c002187b <IDE::detect()+0xfd>
c0021877:	a8 08                	test   al,0x8
c0021879:	75 27                	jne    c00218a2 <IDE::detect()+0x124>
c002187b:	47                   	inc    edi
c002187c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021882:	7e da                	jle    c002185e <IDE::detect()+0xe0>
c0021884:	50                   	push   eax
c0021885:	50                   	push   eax
c0021886:	6a 00                	push   0x0
c0021888:	68 40 4b 4c 00       	push   0x4c4b40
c002188d:	e8 9a ad ff ff       	call   c001c62c <nanoSleep(unsigned long long)>
c0021892:	83 c4 10             	add    esp,0x10
c0021895:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002189b:	75 c1                	jne    c002185e <IDE::detect()+0xe0>
c002189d:	e9 5f 01 00 00       	jmp    c0021a01 <IDE::detect()+0x283>
c00218a2:	31 c9                	xor    ecx,ecx
c00218a4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00218a8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00218ac:	83 ec 0c             	sub    esp,0xc
c00218af:	68 80 00 00 00       	push   0x80
c00218b4:	57                   	push   edi
c00218b5:	6a 00                	push   0x0
c00218b7:	56                   	push   esi
c00218b8:	53                   	push   ebx
c00218b9:	e8 f4 fd ff ff       	call   c00216b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00218be:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00218c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00218c7:	89 d1                	mov    ecx,edx
c00218c9:	c1 e0 06             	shl    eax,0x6
c00218cc:	01 d8                	add    eax,ebx
c00218ce:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00218d5:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00218dc:	89 f2                	mov    edx,esi
c00218de:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00218e4:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00218e8:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00218ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00218f2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00218f9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021901:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021908:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0021910:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0021916:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002191d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0021923:	8d 54 24 58          	lea    edx,[esp+0x58]
c0021927:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002192b:	83 c4 20             	add    esp,0x20
c002192e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0021931:	83 c0 02             	add    eax,0x2
c0021934:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002193a:	83 c7 02             	add    edi,0x2
c002193d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0021940:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0021946:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002194a:	75 e2                	jne    c002192e <IDE::detect()+0x1b0>
c002194c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021950:	c1 e0 06             	shl    eax,0x6
c0021953:	01 d8                	add    eax,ebx
c0021955:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002195b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0021962:	66 c1 ea 09          	shr    dx,0x9
c0021966:	83 e2 01             	and    edx,0x1
c0021969:	84 c9                	test   cl,cl
c002196b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0021971:	75 2f                	jne    c00219a2 <IDE::detect()+0x224>
c0021973:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0021979:	85 c0                	test   eax,eax
c002197b:	74 66                	je     c00219e3 <IDE::detect()+0x265>
c002197d:	50                   	push   eax
c002197e:	55                   	push   ebp
c002197f:	56                   	push   esi
c0021980:	68 33 9a 02 c0       	push   0xc0029a33
c0021985:	e8 a9 0c ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c002198a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0021991:	e8 2a db fe ff       	call   c000f4c0 <malloc>
c0021996:	89 c7                	mov    edi,eax
c0021998:	89 04 24             	mov    DWORD PTR [esp],eax
c002199b:	e8 f4 04 00 00       	call   c0021e94 <ATA::ATA()>
c00219a0:	eb 28                	jmp    c00219ca <IDE::detect()+0x24c>
c00219a2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00219a8:	55                   	push   ebp
c00219a9:	56                   	push   esi
c00219aa:	68 62 9a 02 c0       	push   0xc0029a62
c00219af:	e8 7f 0c ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c00219b4:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00219bb:	e8 00 db fe ff       	call   c000f4c0 <malloc>
c00219c0:	89 c7                	mov    edi,eax
c00219c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00219c5:	e8 fa 0a 00 00       	call   c00224c4 <ATAPI::ATAPI()>
c00219ca:	5a                   	pop    edx
c00219cb:	59                   	pop    ecx
c00219cc:	57                   	push   edi
c00219cd:	53                   	push   ebx
c00219ce:	e8 4f 20 ff ff       	call   c0013a22 <Device::addChild(Device*)>
c00219d3:	8b 07                	mov    eax,DWORD PTR [edi]
c00219d5:	53                   	push   ebx
c00219d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00219da:	6a 00                	push   0x0
c00219dc:	57                   	push   edi
c00219dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00219e0:	83 c4 20             	add    esp,0x20
c00219e3:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00219e7:	4d                   	dec    ebp
c00219e8:	74 0a                	je     c00219f4 <IDE::detect()+0x276>
c00219ea:	bd 01 00 00 00       	mov    ebp,0x1
c00219ef:	e9 bb fd ff ff       	jmp    c00217af <IDE::detect()+0x31>
c00219f4:	4e                   	dec    esi
c00219f5:	74 63                	je     c0021a5a <IDE::detect()+0x2dc>
c00219f7:	be 01 00 00 00       	mov    esi,0x1
c00219fc:	e9 ac fd ff ff       	jmp    c00217ad <IDE::detect()+0x2f>
c0021a01:	50                   	push   eax
c0021a02:	6a 04                	push   0x4
c0021a04:	56                   	push   esi
c0021a05:	53                   	push   ebx
c0021a06:	e8 05 f7 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021a0b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021a0f:	83 c4 0c             	add    esp,0xc
c0021a12:	6a 05                	push   0x5
c0021a14:	56                   	push   esi
c0021a15:	53                   	push   ebx
c0021a16:	e8 f5 f6 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021a1b:	83 c4 10             	add    esp,0x10
c0021a1e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0021a22:	80 fa 14             	cmp    dl,0x14
c0021a25:	75 04                	jne    c0021a2b <IDE::detect()+0x2ad>
c0021a27:	3c eb                	cmp    al,0xeb
c0021a29:	eb 07                	jmp    c0021a32 <IDE::detect()+0x2b4>
c0021a2b:	3c 96                	cmp    al,0x96
c0021a2d:	75 b8                	jne    c00219e7 <IDE::detect()+0x269>
c0021a2f:	80 fa 69             	cmp    dl,0x69
c0021a32:	75 b3                	jne    c00219e7 <IDE::detect()+0x269>
c0021a34:	68 a1 00 00 00       	push   0xa1
c0021a39:	6a 07                	push   0x7
c0021a3b:	56                   	push   esi
c0021a3c:	53                   	push   ebx
c0021a3d:	e8 0e f6 ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a42:	5f                   	pop    edi
c0021a43:	58                   	pop    eax
c0021a44:	6a 00                	push   0x0
c0021a46:	68 40 42 0f 00       	push   0xf4240
c0021a4b:	e8 dc ab ff ff       	call   c001c62c <nanoSleep(unsigned long long)>
c0021a50:	83 c4 10             	add    esp,0x10
c0021a53:	b1 01                	mov    cl,0x1
c0021a55:	e9 4a fe ff ff       	jmp    c00218a4 <IDE::detect()+0x126>
c0021a5a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021a60:	5b                   	pop    ebx
c0021a61:	5e                   	pop    esi
c0021a62:	5f                   	pop    edi
c0021a63:	5d                   	pop    ebp
c0021a64:	c3                   	ret    
c0021a65:	90                   	nop

c0021a66 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0021a66:	55                   	push   ebp
c0021a67:	57                   	push   edi
c0021a68:	56                   	push   esi
c0021a69:	53                   	push   ebx
c0021a6a:	83 ec 1c             	sub    esp,0x1c
c0021a6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021a71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021a75:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021a79:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021a7d:	88 c3                	mov    bl,al
c0021a7f:	84 c0                	test   al,al
c0021a81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021a85:	0f 84 67 01 00 00    	je     c0021bf2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021a8b:	83 ec 0c             	sub    esp,0xc
c0021a8e:	68 93 9a 02 c0       	push   0xc0029a93
c0021a93:	e8 9b 0b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021a98:	83 c4 10             	add    esp,0x10
c0021a9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a9f:	3c 01                	cmp    al,0x1
c0021aa1:	75 17                	jne    c0021aba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021aa3:	83 ec 0c             	sub    esp,0xc
c0021aa6:	b3 13                	mov    bl,0x13
c0021aa8:	68 9f 9a 02 c0       	push   0xc0029a9f
c0021aad:	e8 81 0b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021ab2:	83 c4 10             	add    esp,0x10
c0021ab5:	e9 25 01 00 00       	jmp    c0021bdf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021aba:	3c 02                	cmp    al,0x2
c0021abc:	0f 85 ef 00 00 00    	jne    c0021bb1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021ac2:	d1 e6                	shl    esi,1
c0021ac4:	09 ee                	or     esi,ebp
c0021ac6:	52                   	push   edx
c0021ac7:	89 f0                	mov    eax,esi
c0021ac9:	6a 01                	push   0x1
c0021acb:	0f b6 f0             	movzx  esi,al
c0021ace:	c1 e6 06             	shl    esi,0x6
c0021ad1:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021ad9:	50                   	push   eax
c0021ada:	57                   	push   edi
c0021adb:	e8 30 f6 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021ae0:	83 c4 10             	add    esp,0x10
c0021ae3:	89 c6                	mov    esi,eax
c0021ae5:	a8 01                	test   al,0x1
c0021ae7:	74 12                	je     c0021afb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021ae9:	83 ec 0c             	sub    esp,0xc
c0021aec:	b3 07                	mov    bl,0x7
c0021aee:	68 b4 9a 02 c0       	push   0xc0029ab4
c0021af3:	e8 3b 0b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021af8:	83 c4 10             	add    esp,0x10
c0021afb:	f7 c6 02 00 00 00    	test   esi,0x2
c0021b01:	74 12                	je     c0021b15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021b03:	83 ec 0c             	sub    esp,0xc
c0021b06:	b3 03                	mov    bl,0x3
c0021b08:	68 d2 9a 02 c0       	push   0xc0029ad2
c0021b0d:	e8 21 0b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021b12:	83 c4 10             	add    esp,0x10
c0021b15:	f7 c6 04 00 00 00    	test   esi,0x4
c0021b1b:	74 12                	je     c0021b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021b1d:	83 ec 0c             	sub    esp,0xc
c0021b20:	b3 14                	mov    bl,0x14
c0021b22:	68 f2 9a 02 c0       	push   0xc0029af2
c0021b27:	e8 07 0b ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021b2c:	83 c4 10             	add    esp,0x10
c0021b2f:	f7 c6 08 00 00 00    	test   esi,0x8
c0021b35:	74 12                	je     c0021b49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0021b37:	83 ec 0c             	sub    esp,0xc
c0021b3a:	b3 03                	mov    bl,0x3
c0021b3c:	68 d2 9a 02 c0       	push   0xc0029ad2
c0021b41:	e8 ed 0a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021b46:	83 c4 10             	add    esp,0x10
c0021b49:	f7 c6 10 00 00 00    	test   esi,0x10
c0021b4f:	74 12                	je     c0021b63 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0021b51:	83 ec 0c             	sub    esp,0xc
c0021b54:	b3 15                	mov    bl,0x15
c0021b56:	68 0a 9b 02 c0       	push   0xc0029b0a
c0021b5b:	e8 d3 0a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021b60:	83 c4 10             	add    esp,0x10
c0021b63:	f7 c6 20 00 00 00    	test   esi,0x20
c0021b69:	74 12                	je     c0021b7d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0021b6b:	83 ec 0c             	sub    esp,0xc
c0021b6e:	b3 03                	mov    bl,0x3
c0021b70:	68 d2 9a 02 c0       	push   0xc0029ad2
c0021b75:	e8 b9 0a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021b7a:	83 c4 10             	add    esp,0x10
c0021b7d:	f7 c6 40 00 00 00    	test   esi,0x40
c0021b83:	74 12                	je     c0021b97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0021b85:	83 ec 0c             	sub    esp,0xc
c0021b88:	b3 16                	mov    bl,0x16
c0021b8a:	68 24 9b 02 c0       	push   0xc0029b24
c0021b8f:	e8 9f 0a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021b94:	83 c4 10             	add    esp,0x10
c0021b97:	89 f0                	mov    eax,esi
c0021b99:	84 c0                	test   al,al
c0021b9b:	79 42                	jns    c0021bdf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021b9d:	83 ec 0c             	sub    esp,0xc
c0021ba0:	b3 0d                	mov    bl,0xd
c0021ba2:	68 45 9b 02 c0       	push   0xc0029b45
c0021ba7:	e8 87 0a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021bac:	83 c4 10             	add    esp,0x10
c0021baf:	eb 2e                	jmp    c0021bdf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021bb1:	3c 03                	cmp    al,0x3
c0021bb3:	75 14                	jne    c0021bc9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021bb5:	83 ec 0c             	sub    esp,0xc
c0021bb8:	b3 17                	mov    bl,0x17
c0021bba:	68 59 9b 02 c0       	push   0xc0029b59
c0021bbf:	e8 6f 0a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021bc4:	83 c4 10             	add    esp,0x10
c0021bc7:	eb 16                	jmp    c0021bdf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021bc9:	3c 04                	cmp    al,0x4
c0021bcb:	75 12                	jne    c0021bdf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021bcd:	83 ec 0c             	sub    esp,0xc
c0021bd0:	b3 08                	mov    bl,0x8
c0021bd2:	68 6f 9b 02 c0       	push   0xc0029b6f
c0021bd7:	e8 57 0a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021bdc:	83 c4 10             	add    esp,0x10
c0021bdf:	50                   	push   eax
c0021be0:	50                   	push   eax
c0021be1:	0f b6 c3             	movzx  eax,bl
c0021be4:	50                   	push   eax
c0021be5:	68 87 9b 02 c0       	push   0xc0029b87
c0021bea:	e8 44 0a ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021bef:	83 c4 10             	add    esp,0x10
c0021bf2:	83 c4 1c             	add    esp,0x1c
c0021bf5:	88 d8                	mov    al,bl
c0021bf7:	5b                   	pop    ebx
c0021bf8:	5e                   	pop    esi
c0021bf9:	5f                   	pop    edi
c0021bfa:	5d                   	pop    ebp
c0021bfb:	c3                   	ret    

c0021bfc <IDE::polling(unsigned char, unsigned int)>:
c0021bfc:	57                   	push   edi
c0021bfd:	56                   	push   esi
c0021bfe:	53                   	push   ebx
c0021bff:	bb 04 00 00 00       	mov    ebx,0x4
c0021c04:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021c08:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021c0d:	52                   	push   edx
c0021c0e:	6a 0c                	push   0xc
c0021c10:	56                   	push   esi
c0021c11:	57                   	push   edi
c0021c12:	e8 f9 f4 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021c17:	83 c4 10             	add    esp,0x10
c0021c1a:	4b                   	dec    ebx
c0021c1b:	75 f0                	jne    c0021c0d <IDE::polling(unsigned char, unsigned int)+0x11>
c0021c1d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021c22:	50                   	push   eax
c0021c23:	6a 0c                	push   0xc
c0021c25:	56                   	push   esi
c0021c26:	57                   	push   edi
c0021c27:	e8 e4 f4 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021c2c:	83 c4 10             	add    esp,0x10
c0021c2f:	a8 01                	test   al,0x1
c0021c31:	74 12                	je     c0021c45 <IDE::polling(unsigned char, unsigned int)+0x49>
c0021c33:	83 ec 0c             	sub    esp,0xc
c0021c36:	68 a1 9b 02 c0       	push   0xc0029ba1
c0021c3b:	e8 f3 09 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021c40:	83 c4 10             	add    esp,0x10
c0021c43:	eb 17                	jmp    c0021c5c <IDE::polling(unsigned char, unsigned int)+0x60>
c0021c45:	a8 20                	test   al,0x20
c0021c47:	75 0f                	jne    c0021c58 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0021c49:	4b                   	dec    ebx
c0021c4a:	74 10                	je     c0021c5c <IDE::polling(unsigned char, unsigned int)+0x60>
c0021c4c:	84 c0                	test   al,al
c0021c4e:	78 d2                	js     c0021c22 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021c50:	a8 08                	test   al,0x8
c0021c52:	74 ce                	je     c0021c22 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021c54:	31 c0                	xor    eax,eax
c0021c56:	eb 06                	jmp    c0021c5e <IDE::polling(unsigned char, unsigned int)+0x62>
c0021c58:	b0 01                	mov    al,0x1
c0021c5a:	eb 02                	jmp    c0021c5e <IDE::polling(unsigned char, unsigned int)+0x62>
c0021c5c:	b0 02                	mov    al,0x2
c0021c5e:	5b                   	pop    ebx
c0021c5f:	5e                   	pop    esi
c0021c60:	5f                   	pop    edi
c0021c61:	c3                   	ret    

c0021c62 <SATABus::open(int, int, void*)>:
c0021c62:	31 c0                	xor    eax,eax
c0021c64:	c3                   	ret    
c0021c65:	90                   	nop

c0021c66 <SATABus::close(int, int, void*)>:
c0021c66:	31 c0                	xor    eax,eax
c0021c68:	c3                   	ret    
c0021c69:	90                   	nop

c0021c6a <SATABus::detect()>:
c0021c6a:	c3                   	ret    
c0021c6b:	90                   	nop

c0021c6c <SATABus::SATABus()>:
c0021c6c:	83 ec 0c             	sub    esp,0xc
c0021c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c73:	83 ec 08             	sub    esp,0x8
c0021c76:	68 e4 9b 02 c0       	push   0xc0029be4
c0021c7b:	50                   	push   eax
c0021c7c:	e8 2d 21 ff ff       	call   c0013dae <HardDiskController::HardDiskController(char const*)>
c0021c81:	83 c4 10             	add    esp,0x10
c0021c84:	ba 3c 9c 02 c0       	mov    edx,0xc0029c3c
c0021c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8d:	89 10                	mov    DWORD PTR [eax],edx
c0021c8f:	83 ec 0c             	sub    esp,0xc
c0021c92:	68 00 a0 04 00       	push   0x4a000
c0021c97:	e8 24 d8 fe ff       	call   c000f4c0 <malloc>
c0021c9c:	83 c4 10             	add    esp,0x10
c0021c9f:	89 c2                	mov    edx,eax
c0021ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021cab:	90                   	nop
c0021cac:	83 c4 0c             	add    esp,0xc
c0021caf:	c3                   	ret    

c0021cb0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0021cb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021cb4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0021cb7:	89 c2                	mov    edx,eax
c0021cb9:	c1 ea 08             	shr    edx,0x8
c0021cbc:	83 e2 0f             	and    edx,0xf
c0021cbf:	fe ca                	dec    dl
c0021cc1:	75 31                	jne    c0021cf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0021cc3:	83 e0 0f             	and    eax,0xf
c0021cc6:	3c 03                	cmp    al,0x3
c0021cc8:	75 2a                	jne    c0021cf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0021cca:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0021ccd:	b8 02 00 00 00       	mov    eax,0x2
c0021cd2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0021cd8:	74 1c                	je     c0021cf6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0021cda:	b8 04 00 00 00       	mov    eax,0x4
c0021cdf:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0021ce5:	74 0f                	je     c0021cf6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0021ce7:	31 c0                	xor    eax,eax
c0021ce9:	83 fa 03             	cmp    edx,0x3
c0021cec:	0f 94 c0             	sete   al
c0021cef:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0021cf3:	c3                   	ret    
c0021cf4:	31 c0                	xor    eax,eax
c0021cf6:	c3                   	ret    
c0021cf7:	90                   	nop

c0021cf8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0021cf8:	57                   	push   edi
c0021cf9:	56                   	push   esi
c0021cfa:	53                   	push   ebx
c0021cfb:	31 db                	xor    ebx,ebx
c0021cfd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021d01:	8b 77 0c             	mov    esi,DWORD PTR [edi+0xc]
c0021d04:	f7 c6 01 00 00 00    	test   esi,0x1
c0021d0a:	74 35                	je     c0021d41 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x49>
c0021d0c:	89 d8                	mov    eax,ebx
c0021d0e:	c1 e0 07             	shl    eax,0x7
c0021d11:	8d 84 07 00 01 00 00 	lea    eax,[edi+eax*1+0x100]
c0021d18:	50                   	push   eax
c0021d19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d1d:	e8 8e ff ff ff       	call   c0021cb0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0021d22:	59                   	pop    ecx
c0021d23:	48                   	dec    eax
c0021d24:	5a                   	pop    edx
c0021d25:	75 0a                	jne    c0021d31 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x39>
c0021d27:	52                   	push   edx
c0021d28:	52                   	push   edx
c0021d29:	53                   	push   ebx
c0021d2a:	68 08 9c 02 c0       	push   0xc0029c08
c0021d2f:	eb 08                	jmp    c0021d39 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c0021d31:	50                   	push   eax
c0021d32:	50                   	push   eax
c0021d33:	53                   	push   ebx
c0021d34:	68 1f 9c 02 c0       	push   0xc0029c1f
c0021d39:	e8 f5 08 ff ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0021d3e:	83 c4 10             	add    esp,0x10
c0021d41:	d1 ee                	shr    esi,1
c0021d43:	43                   	inc    ebx
c0021d44:	83 fb 20             	cmp    ebx,0x20
c0021d47:	75 bb                	jne    c0021d04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xc>
c0021d49:	5b                   	pop    ebx
c0021d4a:	5e                   	pop    esi
c0021d4b:	5f                   	pop    edi
c0021d4c:	c3                   	ret    
c0021d4d:	90                   	nop

c0021d4e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0021d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021d55:	0f ba e2 0f          	bt     edx,0xf
c0021d59:	72 f7                	jb     c0021d52 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0021d5b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021d5e:	83 ca 10             	or     edx,0x10
c0021d61:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021d64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021d67:	83 ca 01             	or     edx,0x1
c0021d6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021d6d:	c3                   	ret    

c0021d6e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0021d6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021d75:	83 e2 fe             	and    edx,0xfffffffe
c0021d78:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021d7b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021d7e:	83 e2 ef             	and    edx,0xffffffef
c0021d81:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021d84:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021d87:	0f ba e2 0e          	bt     edx,0xe
c0021d8b:	72 f7                	jb     c0021d84 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0021d8d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021d90:	0f ba e2 0f          	bt     edx,0xf
c0021d94:	72 ee                	jb     c0021d84 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0021d96:	c3                   	ret    
c0021d97:	90                   	nop

c0021d98 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0021d98:	55                   	push   ebp
c0021d99:	57                   	push   edi
c0021d9a:	56                   	push   esi
c0021d9b:	53                   	push   ebx
c0021d9c:	83 ec 1c             	sub    esp,0x1c
c0021d9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021da3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021da7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021dab:	53                   	push   ebx
c0021dac:	57                   	push   edi
c0021dad:	e8 bc ff ff ff       	call   c0021d6e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0021db2:	83 ec 0c             	sub    esp,0xc
c0021db5:	89 f0                	mov    eax,esi
c0021db7:	c1 e0 0a             	shl    eax,0xa
c0021dba:	03 87 58 01 00 00    	add    eax,DWORD PTR [edi+0x158]
c0021dc0:	89 03                	mov    DWORD PTR [ebx],eax
c0021dc2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021dc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021dcb:	68 00 04 00 00       	push   0x400
c0021dd0:	6a 00                	push   0x0
c0021dd2:	50                   	push   eax
c0021dd3:	e8 a3 e8 fd ff       	call   c000067b <memset>
c0021dd8:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c0021dde:	83 c4 1c             	add    esp,0x1c
c0021de1:	89 f2                	mov    edx,esi
c0021de3:	c1 e6 0d             	shl    esi,0xd
c0021de6:	c1 e2 08             	shl    edx,0x8
c0021de9:	8d 84 02 00 80 00 00 	lea    eax,[edx+eax*1+0x8000]
c0021df0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021df3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021dfa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0021dfd:	68 00 01 00 00       	push   0x100
c0021e02:	6a 00                	push   0x0
c0021e04:	50                   	push   eax
c0021e05:	e8 71 e8 fd ff       	call   c000067b <memset>
c0021e0a:	8d 86 00 a0 00 00    	lea    eax,[esi+0xa000]
c0021e10:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0021e12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021e16:	31 f6                	xor    esi,esi
c0021e18:	83 c4 10             	add    esp,0x10
c0021e1b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0021e21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e25:	03 87 58 01 00 00    	add    eax,DWORD PTR [edi+0x158]
c0021e2b:	83 c5 20             	add    ebp,0x20
c0021e2e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0021e35:	01 f0                	add    eax,esi
c0021e37:	81 c6 00 01 00 00    	add    esi,0x100
c0021e3d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021e40:	52                   	push   edx
c0021e41:	68 00 01 00 00       	push   0x100
c0021e46:	6a 00                	push   0x0
c0021e48:	50                   	push   eax
c0021e49:	e8 2d e8 fd ff       	call   c000067b <memset>
c0021e4e:	83 c4 10             	add    esp,0x10
c0021e51:	81 fe 00 20 00 00    	cmp    esi,0x2000
c0021e57:	75 c2                	jne    c0021e1b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0x83>
c0021e59:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0021e5d:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0021e61:	83 c4 1c             	add    esp,0x1c
c0021e64:	5b                   	pop    ebx
c0021e65:	5e                   	pop    esi
c0021e66:	5f                   	pop    edi
c0021e67:	5d                   	pop    ebp
c0021e68:	e9 e1 fe ff ff       	jmp    c0021d4e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0021e6d:	90                   	nop

c0021e6e <ATA::close(int, int, void*)>:
c0021e6e:	83 ec 0c             	sub    esp,0xc
c0021e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e75:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021e7b:	85 c0                	test   eax,eax
c0021e7d:	74 0c                	je     c0021e8b <ATA::close(int, int, void*)+0x1d>
c0021e7f:	83 ec 0c             	sub    esp,0xc
c0021e82:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e84:	50                   	push   eax
c0021e85:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021e88:	83 c4 10             	add    esp,0x10
c0021e8b:	31 c0                	xor    eax,eax
c0021e8d:	83 c4 0c             	add    esp,0xc
c0021e90:	c3                   	ret    
c0021e91:	90                   	nop

c0021e92 <ATA::powerSaving(PowerSavingLevel)>:
c0021e92:	c3                   	ret    
c0021e93:	90                   	nop

c0021e94 <ATA::ATA()>:
c0021e94:	83 ec 0c             	sub    esp,0xc
c0021e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e9b:	83 ec 04             	sub    esp,0x4
c0021e9e:	68 00 02 00 00       	push   0x200
c0021ea3:	68 60 9c 02 c0       	push   0xc0029c60
c0021ea8:	50                   	push   eax
c0021ea9:	e8 84 1f ff ff       	call   c0013e32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021eae:	83 c4 10             	add    esp,0x10
c0021eb1:	ba 8c 9c 02 c0       	mov    edx,0xc0029c8c
c0021eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eba:	89 10                	mov    DWORD PTR [eax],edx
c0021ebc:	90                   	nop
c0021ebd:	83 c4 0c             	add    esp,0xc
c0021ec0:	c3                   	ret    
c0021ec1:	90                   	nop

c0021ec2 <ATA::flush(bool)>:
c0021ec2:	53                   	push   ebx
c0021ec3:	83 ec 08             	sub    esp,0x8
c0021ec6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021ecb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ecf:	19 c0                	sbb    eax,eax
c0021ed1:	83 e0 fd             	and    eax,0xfffffffd
c0021ed4:	05 ea 00 00 00       	add    eax,0xea
c0021ed9:	50                   	push   eax
c0021eda:	6a 07                	push   0x7
c0021edc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ee3:	50                   	push   eax
c0021ee4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021eea:	e8 61 f1 ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021eef:	83 c4 0c             	add    esp,0xc
c0021ef2:	6a 00                	push   0x0
c0021ef4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021efb:	50                   	push   eax
c0021efc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021f02:	e8 f5 fc ff ff       	call   c0021bfc <IDE::polling(unsigned char, unsigned int)>
c0021f07:	83 c4 18             	add    esp,0x18
c0021f0a:	5b                   	pop    ebx
c0021f0b:	c3                   	ret    

c0021f0c <ATA::readyForCommand()>:
c0021f0c:	56                   	push   esi
c0021f0d:	53                   	push   ebx
c0021f0e:	31 db                	xor    ebx,ebx
c0021f10:	50                   	push   eax
c0021f11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021f15:	50                   	push   eax
c0021f16:	6a 0c                	push   0xc
c0021f18:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021f1f:	50                   	push   eax
c0021f20:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021f26:	e8 e5 f1 ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0021f2b:	83 c4 10             	add    esp,0x10
c0021f2e:	a8 88                	test   al,0x88
c0021f30:	74 23                	je     c0021f55 <ATA::readyForCommand()+0x49>
c0021f32:	43                   	inc    ebx
c0021f33:	83 fb 63             	cmp    ebx,0x63
c0021f36:	7e dd                	jle    c0021f15 <ATA::readyForCommand()+0x9>
c0021f38:	51                   	push   ecx
c0021f39:	51                   	push   ecx
c0021f3a:	6a 00                	push   0x0
c0021f3c:	68 40 42 0f 00       	push   0xf4240
c0021f41:	e8 e6 a6 ff ff       	call   c001c62c <nanoSleep(unsigned long long)>
c0021f46:	83 c4 10             	add    esp,0x10
c0021f49:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021f4f:	75 c4                	jne    c0021f15 <ATA::readyForCommand()+0x9>
c0021f51:	31 c0                	xor    eax,eax
c0021f53:	eb 02                	jmp    c0021f57 <ATA::readyForCommand()+0x4b>
c0021f55:	b0 01                	mov    al,0x1
c0021f57:	5a                   	pop    edx
c0021f58:	5b                   	pop    ebx
c0021f59:	5e                   	pop    esi
c0021f5a:	c3                   	ret    
c0021f5b:	90                   	nop

c0021f5c <ATA::access(unsigned long long, int, void*, bool)>:
c0021f5c:	55                   	push   ebp
c0021f5d:	57                   	push   edi
c0021f5e:	56                   	push   esi
c0021f5f:	53                   	push   ebx
c0021f60:	83 ec 2c             	sub    esp,0x2c
c0021f63:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021f67:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021f6b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021f6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f73:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0021f77:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021f7b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021f7f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021f85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f89:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021f8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021f93:	c1 e0 06             	shl    eax,0x6
c0021f96:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021f9e:	74 5d                	je     c0021ffd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021fa0:	89 fa                	mov    edx,edi
c0021fa2:	89 f0                	mov    eax,esi
c0021fa4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021fa8:	c1 ea 1c             	shr    edx,0x1c
c0021fab:	89 d1                	mov    ecx,edx
c0021fad:	09 c1                	or     ecx,eax
c0021faf:	74 25                	je     c0021fd6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021fb1:	31 ed                	xor    ebp,ebp
c0021fb3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021fba:	89 fa                	mov    edx,edi
c0021fbc:	89 f0                	mov    eax,esi
c0021fbe:	0f ad d0             	shrd   eax,edx,cl
c0021fc1:	d3 ea                	shr    edx,cl
c0021fc3:	f6 c1 20             	test   cl,0x20
c0021fc6:	74 02                	je     c0021fca <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021fc8:	89 d0                	mov    eax,edx
c0021fca:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021fce:	45                   	inc    ebp
c0021fcf:	83 fd 06             	cmp    ebp,0x6
c0021fd2:	75 df                	jne    c0021fb3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021fd4:	eb 76                	jmp    c002204c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021fd6:	89 f0                	mov    eax,esi
c0021fd8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021fdd:	89 fa                	mov    edx,edi
c0021fdf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021fe6:	0f ac d0 10          	shrd   eax,edx,0x10
c0021fea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021fef:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021ff3:	c1 ee 18             	shr    esi,0x18
c0021ff6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021ffb:	eb 56                	jmp    c0022053 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021ffd:	6a 00                	push   0x0
c0021fff:	6a 3f                	push   0x3f
c0022001:	57                   	push   edi
c0022002:	56                   	push   esi
c0022003:	e8 24 20 00 00       	call   c002402c <__umoddi3>
c0022008:	83 c4 10             	add    esp,0x10
c002200b:	40                   	inc    eax
c002200c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022010:	6a 00                	push   0x0
c0022012:	68 f0 03 00 00       	push   0x3f0
c0022017:	57                   	push   edi
c0022018:	56                   	push   esi
c0022019:	e8 0e 1f 00 00       	call   c0023f2c <__udivdi3>
c002201e:	83 c4 10             	add    esp,0x10
c0022021:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022026:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002202d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022032:	6a 00                	push   0x0
c0022034:	6a 3f                	push   0x3f
c0022036:	57                   	push   edi
c0022037:	56                   	push   esi
c0022038:	e8 ef 1e 00 00       	call   c0023f2c <__udivdi3>
c002203d:	83 c4 10             	add    esp,0x10
c0022040:	89 c6                	mov    esi,eax
c0022042:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0022047:	83 e6 0f             	and    esi,0xf
c002204a:	eb 07                	jmp    c0022053 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002204c:	31 f6                	xor    esi,esi
c002204e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0022053:	bf 01 00 00 00       	mov    edi,0x1
c0022058:	50                   	push   eax
c0022059:	6a 00                	push   0x0
c002205b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022062:	50                   	push   eax
c0022063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022067:	e8 f0 f1 ff ff       	call   c002125c <IDE::enableIRQs(unsigned char, bool)>
c002206c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002206f:	e8 98 fe ff ff       	call   c0021f0c <ATA::readyForCommand()>
c0022074:	83 c4 10             	add    esp,0x10
c0022077:	84 c0                	test   al,al
c0022079:	0f 84 50 02 00 00    	je     c00222cf <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002207f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022085:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002208b:	c1 e0 04             	shl    eax,0x4
c002208e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0022095:	09 c6                	or     esi,eax
c0022097:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002209c:	75 05                	jne    c00220a3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002209e:	83 ce a0             	or     esi,0xffffffa0
c00220a1:	eb 03                	jmp    c00220a6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00220a3:	83 ce e0             	or     esi,0xffffffe0
c00220a6:	89 f0                	mov    eax,esi
c00220a8:	0f b6 f0             	movzx  esi,al
c00220ab:	56                   	push   esi
c00220ac:	6a 06                	push   0x6
c00220ae:	51                   	push   ecx
c00220af:	52                   	push   edx
c00220b0:	e8 9b ef ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220b5:	83 c4 10             	add    esp,0x10
c00220b8:	6a 00                	push   0x0
c00220ba:	6a 01                	push   0x1
c00220bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00220c3:	50                   	push   eax
c00220c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00220ca:	e8 81 ef ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220cf:	83 c4 10             	add    esp,0x10
c00220d2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00220d7:	75 6e                	jne    c0022147 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00220d9:	6a 00                	push   0x0
c00220db:	6a 08                	push   0x8
c00220dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00220e4:	50                   	push   eax
c00220e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00220eb:	e8 60 ef ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220f0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00220f5:	50                   	push   eax
c00220f6:	6a 09                	push   0x9
c00220f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00220ff:	50                   	push   eax
c0022100:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022106:	e8 45 ef ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002210b:	83 c4 20             	add    esp,0x20
c002210e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0022113:	50                   	push   eax
c0022114:	6a 0a                	push   0xa
c0022116:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002211d:	50                   	push   eax
c002211e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022124:	e8 27 ef ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022129:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002212e:	50                   	push   eax
c002212f:	6a 0b                	push   0xb
c0022131:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022138:	50                   	push   eax
c0022139:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002213f:	e8 0c ef ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022144:	83 c4 20             	add    esp,0x20
c0022147:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002214c:	50                   	push   eax
c002214d:	6a 02                	push   0x2
c002214f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022156:	50                   	push   eax
c0022157:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002215d:	e8 ee ee ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022162:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022167:	50                   	push   eax
c0022168:	6a 03                	push   0x3
c002216a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022171:	50                   	push   eax
c0022172:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022178:	e8 d3 ee ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002217d:	83 c4 20             	add    esp,0x20
c0022180:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0022185:	50                   	push   eax
c0022186:	6a 04                	push   0x4
c0022188:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002218f:	50                   	push   eax
c0022190:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022196:	e8 b5 ee ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002219b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00221a0:	50                   	push   eax
c00221a1:	6a 05                	push   0x5
c00221a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00221aa:	50                   	push   eax
c00221ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00221b1:	e8 9a ee ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221b6:	83 c4 20             	add    esp,0x20
c00221b9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00221be:	0f 94 c0             	sete   al
c00221c1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00221c6:	74 09                	je     c00221d1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00221c8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00221cf:	eb 07                	jmp    c00221d8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00221d1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00221d8:	0f b6 c0             	movzx  eax,al
c00221db:	50                   	push   eax
c00221dc:	6a 07                	push   0x7
c00221de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00221e5:	50                   	push   eax
c00221e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00221ec:	e8 5f ee ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221f1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00221f5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00221f9:	83 c4 10             	add    esp,0x10
c00221fc:	85 f6                	test   esi,esi
c00221fe:	0f 84 ac 00 00 00    	je     c00222b0 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0022204:	50                   	push   eax
c0022205:	6a 01                	push   0x1
c0022207:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002220e:	50                   	push   eax
c002220f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022215:	e8 e2 f9 ff ff       	call   c0021bfc <IDE::polling(unsigned char, unsigned int)>
c002221a:	83 c4 10             	add    esp,0x10
c002221d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022223:	84 c0                	test   al,al
c0022225:	74 20                	je     c0022247 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0022227:	0f b6 f8             	movzx  edi,al
c002222a:	0f b6 d2             	movzx  edx,dl
c002222d:	57                   	push   edi
c002222e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0022235:	50                   	push   eax
c0022236:	52                   	push   edx
c0022237:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002223d:	e8 24 f8 ff ff       	call   c0021a66 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022242:	e9 85 00 00 00       	jmp    c00222cc <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0022247:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002224c:	74 41                	je     c002228f <ATA::access(unsigned long long, int, void*, bool)+0x333>
c002224e:	31 c9                	xor    ecx,ecx
c0022250:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0022254:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022258:	50                   	push   eax
c0022259:	50                   	push   eax
c002225a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022261:	50                   	push   eax
c0022262:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022268:	e8 d1 ed ff ff       	call   c002103e <IDE::getBase(unsigned char)>
c002226d:	89 c2                	mov    edx,eax
c002226f:	89 e8                	mov    eax,ebp
c0022271:	66 ef                	out    dx,ax
c0022273:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022277:	83 c4 10             	add    esp,0x10
c002227a:	41                   	inc    ecx
c002227b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0022281:	75 cd                	jne    c0022250 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0022283:	4e                   	dec    esi
c0022284:	81 c7 00 02 00 00    	add    edi,0x200
c002228a:	e9 6d ff ff ff       	jmp    c00221fc <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002228f:	0f b6 d2             	movzx  edx,dl
c0022292:	51                   	push   ecx
c0022293:	51                   	push   ecx
c0022294:	52                   	push   edx
c0022295:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002229b:	e8 9e ed ff ff       	call   c002103e <IDE::getBase(unsigned char)>
c00222a0:	b9 00 01 00 00       	mov    ecx,0x100
c00222a5:	89 c2                	mov    edx,eax
c00222a7:	fc                   	cld    
c00222a8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00222ab:	83 c4 10             	add    esp,0x10
c00222ae:	eb d3                	jmp    c0022283 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c00222b0:	31 ff                	xor    edi,edi
c00222b2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00222b7:	74 16                	je     c00222cf <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00222b9:	50                   	push   eax
c00222ba:	50                   	push   eax
c00222bb:	31 c0                	xor    eax,eax
c00222bd:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00222c2:	0f 94 c0             	sete   al
c00222c5:	50                   	push   eax
c00222c6:	53                   	push   ebx
c00222c7:	e8 f6 fb ff ff       	call   c0021ec2 <ATA::flush(bool)>
c00222cc:	83 c4 10             	add    esp,0x10
c00222cf:	83 c4 2c             	add    esp,0x2c
c00222d2:	89 f8                	mov    eax,edi
c00222d4:	5b                   	pop    ebx
c00222d5:	5e                   	pop    esi
c00222d6:	5f                   	pop    edi
c00222d7:	5d                   	pop    ebp
c00222d8:	c3                   	ret    
c00222d9:	90                   	nop

c00222da <ATA::read(unsigned long long, int, void*)>:
c00222da:	57                   	push   edi
c00222db:	b8 04 00 00 00       	mov    eax,0x4
c00222e0:	56                   	push   esi
c00222e1:	53                   	push   ebx
c00222e2:	83 ec 10             	sub    esp,0x10
c00222e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00222e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00222ed:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00222f0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00222f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222f8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00222fe:	77 3b                	ja     c002233b <ATA::read(unsigned long long, int, void*)+0x61>
c0022300:	b8 06 00 00 00       	mov    eax,0x6
c0022305:	85 d2                	test   edx,edx
c0022307:	74 32                	je     c002233b <ATA::read(unsigned long long, int, void*)+0x61>
c0022309:	50                   	push   eax
c002230a:	50                   	push   eax
c002230b:	6a 00                	push   0x0
c002230d:	52                   	push   edx
c002230e:	53                   	push   ebx
c002230f:	57                   	push   edi
c0022310:	56                   	push   esi
c0022311:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022315:	e8 42 fc ff ff       	call   c0021f5c <ATA::access(unsigned long long, int, void*, bool)>
c002231a:	83 c4 20             	add    esp,0x20
c002231d:	85 c0                	test   eax,eax
c002231f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022323:	75 11                	jne    c0022336 <ATA::read(unsigned long long, int, void*)+0x5c>
c0022325:	01 1d 88 d3 02 c0    	add    DWORD PTR ds:0xc002d388,ebx
c002232b:	e8 6c e1 fe ff       	call   c001049c <VgaText::updateDiskUsage()>
c0022330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022334:	eb 05                	jmp    c002233b <ATA::read(unsigned long long, int, void*)+0x61>
c0022336:	b8 01 00 00 00       	mov    eax,0x1
c002233b:	83 c4 10             	add    esp,0x10
c002233e:	5b                   	pop    ebx
c002233f:	5e                   	pop    esi
c0022340:	5f                   	pop    edi
c0022341:	c3                   	ret    

c0022342 <ATA::write(unsigned long long, int, void*)>:
c0022342:	57                   	push   edi
c0022343:	b8 04 00 00 00       	mov    eax,0x4
c0022348:	56                   	push   esi
c0022349:	53                   	push   ebx
c002234a:	83 ec 10             	sub    esp,0x10
c002234d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022351:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022355:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022358:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002235c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022360:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0022366:	77 3b                	ja     c00223a3 <ATA::write(unsigned long long, int, void*)+0x61>
c0022368:	b8 06 00 00 00       	mov    eax,0x6
c002236d:	85 d2                	test   edx,edx
c002236f:	74 32                	je     c00223a3 <ATA::write(unsigned long long, int, void*)+0x61>
c0022371:	50                   	push   eax
c0022372:	50                   	push   eax
c0022373:	6a 01                	push   0x1
c0022375:	52                   	push   edx
c0022376:	53                   	push   ebx
c0022377:	57                   	push   edi
c0022378:	56                   	push   esi
c0022379:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002237d:	e8 da fb ff ff       	call   c0021f5c <ATA::access(unsigned long long, int, void*, bool)>
c0022382:	83 c4 20             	add    esp,0x20
c0022385:	85 c0                	test   eax,eax
c0022387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002238b:	75 11                	jne    c002239e <ATA::write(unsigned long long, int, void*)+0x5c>
c002238d:	01 1d 84 d3 02 c0    	add    DWORD PTR ds:0xc002d384,ebx
c0022393:	e8 04 e1 fe ff       	call   c001049c <VgaText::updateDiskUsage()>
c0022398:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002239c:	eb 05                	jmp    c00223a3 <ATA::write(unsigned long long, int, void*)+0x61>
c002239e:	b8 01 00 00 00       	mov    eax,0x1
c00223a3:	83 c4 10             	add    esp,0x10
c00223a6:	5b                   	pop    ebx
c00223a7:	5e                   	pop    esi
c00223a8:	5f                   	pop    edi
c00223a9:	c3                   	ret    

c00223aa <ATA::detectCHS()>:
c00223aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00223ae:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00223b4:	c1 e0 06             	shl    eax,0x6
c00223b7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00223bd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00223c7:	c7 44 24 04 6f 9c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029c6f
c00223cf:	e9 c3 6c ff ff       	jmp    c0019097 <Krnl::panic(char const*)>

c00223d4 <ATA::open(int, int, void*)>:
c00223d4:	53                   	push   ebx
c00223d5:	83 ec 08             	sub    esp,0x8
c00223d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00223dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00223e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00223e4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00223ea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00223f0:	c1 e0 06             	shl    eax,0x6
c00223f3:	01 d0                	add    eax,edx
c00223f5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00223fc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0022402:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0022409:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022413:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0022419:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0022420:	75 0c                	jne    c002242e <ATA::open(int, int, void*)+0x5a>
c0022422:	83 ec 0c             	sub    esp,0xc
c0022425:	53                   	push   ebx
c0022426:	e8 7f ff ff ff       	call   c00223aa <ATA::detectCHS()>
c002242b:	83 c4 10             	add    esp,0x10
c002242e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0022434:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002243a:	c1 e0 06             	shl    eax,0x6
c002243d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0022444:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002244e:	d1 e8                	shr    eax,1
c0022450:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022456:	6a 04                	push   0x4
c0022458:	6a 0c                	push   0xc
c002245a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022461:	50                   	push   eax
c0022462:	52                   	push   edx
c0022463:	e8 e8 eb ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022468:	90                   	nop
c0022469:	90                   	nop
c002246a:	6a 00                	push   0x0
c002246c:	6a 0c                	push   0xc
c002246e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022475:	50                   	push   eax
c0022476:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002247c:	e8 cf eb ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022481:	83 c4 14             	add    esp,0x14
c0022484:	53                   	push   ebx
c0022485:	e8 10 1a ff ff       	call   c0013e9a <PhysicalDisk::startCache()>
c002248a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002248d:	e8 b8 39 ff ff       	call   c0015e4a <createPartitionsForDisk(PhysicalDisk*)>
c0022492:	31 c0                	xor    eax,eax
c0022494:	83 c4 18             	add    esp,0x18
c0022497:	5b                   	pop    ebx
c0022498:	c3                   	ret    
c0022499:	90                   	nop

c002249a <ATAPI::write(unsigned long long, int, void*)>:
c002249a:	b8 03 00 00 00       	mov    eax,0x3
c002249f:	c3                   	ret    

c00224a0 <ATAPI::close(int, int, void*)>:
c00224a0:	83 ec 0c             	sub    esp,0xc
c00224a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224ad:	85 c0                	test   eax,eax
c00224af:	74 0c                	je     c00224bd <ATAPI::close(int, int, void*)+0x1d>
c00224b1:	83 ec 0c             	sub    esp,0xc
c00224b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00224b6:	50                   	push   eax
c00224b7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00224ba:	83 c4 10             	add    esp,0x10
c00224bd:	31 c0                	xor    eax,eax
c00224bf:	83 c4 0c             	add    esp,0xc
c00224c2:	c3                   	ret    
c00224c3:	90                   	nop

c00224c4 <ATAPI::ATAPI()>:
c00224c4:	83 ec 0c             	sub    esp,0xc
c00224c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224cb:	83 ec 04             	sub    esp,0x4
c00224ce:	68 00 08 00 00       	push   0x800
c00224d3:	68 b8 9c 02 c0       	push   0xc0029cb8
c00224d8:	50                   	push   eax
c00224d9:	e8 54 19 ff ff       	call   c0013e32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00224de:	83 c4 10             	add    esp,0x10
c00224e1:	ba f8 9c 02 c0       	mov    edx,0xc0029cf8
c00224e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ea:	89 10                	mov    DWORD PTR [eax],edx
c00224ec:	90                   	nop
c00224ed:	83 c4 0c             	add    esp,0xc
c00224f0:	c3                   	ret    
c00224f1:	90                   	nop

c00224f2 <ATAPI::readyForCommand()>:
c00224f2:	56                   	push   esi
c00224f3:	53                   	push   ebx
c00224f4:	31 db                	xor    ebx,ebx
c00224f6:	50                   	push   eax
c00224f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00224fb:	50                   	push   eax
c00224fc:	6a 0c                	push   0xc
c00224fe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022505:	50                   	push   eax
c0022506:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002250c:	e8 ff eb ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0022511:	83 c4 10             	add    esp,0x10
c0022514:	a8 88                	test   al,0x88
c0022516:	74 23                	je     c002253b <ATAPI::readyForCommand()+0x49>
c0022518:	43                   	inc    ebx
c0022519:	83 fb 63             	cmp    ebx,0x63
c002251c:	7e dd                	jle    c00224fb <ATAPI::readyForCommand()+0x9>
c002251e:	51                   	push   ecx
c002251f:	51                   	push   ecx
c0022520:	6a 00                	push   0x0
c0022522:	68 40 42 0f 00       	push   0xf4240
c0022527:	e8 00 a1 ff ff       	call   c001c62c <nanoSleep(unsigned long long)>
c002252c:	83 c4 10             	add    esp,0x10
c002252f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022535:	75 c4                	jne    c00224fb <ATAPI::readyForCommand()+0x9>
c0022537:	31 c0                	xor    eax,eax
c0022539:	eb 02                	jmp    c002253d <ATAPI::readyForCommand()+0x4b>
c002253b:	b0 01                	mov    al,0x1
c002253d:	5a                   	pop    edx
c002253e:	5b                   	pop    ebx
c002253f:	5e                   	pop    esi
c0022540:	c3                   	ret    
c0022541:	90                   	nop

c0022542 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0022542:	55                   	push   ebp
c0022543:	57                   	push   edi
c0022544:	56                   	push   esi
c0022545:	53                   	push   ebx
c0022546:	83 ec 20             	sub    esp,0x20
c0022549:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002254d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022551:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022555:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022559:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002255d:	6a 01                	push   0x1
c002255f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022566:	50                   	push   eax
c0022567:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002256d:	e8 ea ec ff ff       	call   c002125c <IDE::enableIRQs(unsigned char, bool)>
c0022572:	5e                   	pop    esi
c0022573:	58                   	pop    eax
c0022574:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002257b:	50                   	push   eax
c002257c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022582:	e8 a3 ea ff ff       	call   c002102a <IDE::prepareInterrupt(unsigned char)>
c0022587:	89 3c 24             	mov    DWORD PTR [esp],edi
c002258a:	e8 63 ff ff ff       	call   c00224f2 <ATAPI::readyForCommand()>
c002258f:	83 c4 10             	add    esp,0x10
c0022592:	84 c0                	test   al,al
c0022594:	75 0a                	jne    c00225a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0022596:	bb 01 00 00 00       	mov    ebx,0x1
c002259b:	e9 57 02 00 00       	jmp    c00227f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00225a0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00225a6:	c1 e0 04             	shl    eax,0x4
c00225a9:	0f b6 c0             	movzx  eax,al
c00225ac:	50                   	push   eax
c00225ad:	6a 06                	push   0x6
c00225af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00225b6:	50                   	push   eax
c00225b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00225bd:	e8 8e ea ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225c2:	6a 00                	push   0x0
c00225c4:	6a 01                	push   0x1
c00225c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00225cd:	50                   	push   eax
c00225ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00225d4:	e8 77 ea ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225d9:	83 c4 20             	add    esp,0x20
c00225dc:	0f b6 c3             	movzx  eax,bl
c00225df:	0f b6 df             	movzx  ebx,bh
c00225e2:	50                   	push   eax
c00225e3:	6a 04                	push   0x4
c00225e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00225ec:	50                   	push   eax
c00225ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00225f3:	e8 58 ea ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225f8:	53                   	push   ebx
c00225f9:	6a 05                	push   0x5
c00225fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022602:	50                   	push   eax
c0022603:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022609:	e8 42 ea ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002260e:	83 c4 20             	add    esp,0x20
c0022611:	68 a0 00 00 00       	push   0xa0
c0022616:	6a 07                	push   0x7
c0022618:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002261f:	50                   	push   eax
c0022620:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022626:	e8 25 ea ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002262b:	83 c4 0c             	add    esp,0xc
c002262e:	6a 01                	push   0x1
c0022630:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022637:	50                   	push   eax
c0022638:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002263e:	e8 b9 f5 ff ff       	call   c0021bfc <IDE::polling(unsigned char, unsigned int)>
c0022643:	83 c4 10             	add    esp,0x10
c0022646:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002264c:	84 c0                	test   al,al
c002264e:	74 23                	je     c0022673 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0022650:	0f b6 d8             	movzx  ebx,al
c0022653:	0f b6 d2             	movzx  edx,dl
c0022656:	53                   	push   ebx
c0022657:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002265e:	50                   	push   eax
c002265f:	52                   	push   edx
c0022660:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022666:	e8 fb f3 ff ff       	call   c0021a66 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002266b:	83 c4 10             	add    esp,0x10
c002266e:	e9 84 01 00 00       	jmp    c00227f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022673:	0f b6 d2             	movzx  edx,dl
c0022676:	53                   	push   ebx
c0022677:	53                   	push   ebx
c0022678:	52                   	push   edx
c0022679:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002267f:	e8 ba e9 ff ff       	call   c002103e <IDE::getBase(unsigned char)>
c0022684:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022688:	b9 06 00 00 00       	mov    ecx,0x6
c002268d:	89 c2                	mov    edx,eax
c002268f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0022692:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022696:	83 c4 10             	add    esp,0x10
c0022699:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002269f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00226a6:	85 db                	test   ebx,ebx
c00226a8:	0f 84 ec 00 00 00    	je     c002279a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00226ae:	51                   	push   ecx
c00226af:	51                   	push   ecx
c00226b0:	52                   	push   edx
c00226b1:	50                   	push   eax
c00226b2:	e8 07 eb ff ff       	call   c00211be <IDE::waitInterrupt(unsigned char)>
c00226b7:	83 c4 10             	add    esp,0x10
c00226ba:	84 c0                	test   al,al
c00226bc:	0f 84 d4 fe ff ff    	je     c0022596 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00226c2:	56                   	push   esi
c00226c3:	56                   	push   esi
c00226c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00226cb:	50                   	push   eax
c00226cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00226d2:	e8 53 e9 ff ff       	call   c002102a <IDE::prepareInterrupt(unsigned char)>
c00226d7:	83 c4 0c             	add    esp,0xc
c00226da:	6a 04                	push   0x4
c00226dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00226e3:	50                   	push   eax
c00226e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00226ea:	e8 21 ea ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c00226ef:	83 c4 0c             	add    esp,0xc
c00226f2:	89 c6                	mov    esi,eax
c00226f4:	6a 05                	push   0x5
c00226f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00226fd:	50                   	push   eax
c00226fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022704:	e8 07 ea ff ff       	call   c0021110 <IDE::read(unsigned char, unsigned char)>
c0022709:	89 f1                	mov    ecx,esi
c002270b:	0f b6 c0             	movzx  eax,al
c002270e:	0f b6 f1             	movzx  esi,cl
c0022711:	c1 e0 08             	shl    eax,0x8
c0022714:	09 c6                	or     esi,eax
c0022716:	d1 fe                	sar    esi,1
c0022718:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002271c:	83 c4 10             	add    esp,0x10
c002271f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022724:	74 41                	je     c0022767 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0022726:	31 c9                	xor    ecx,ecx
c0022728:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002272e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022735:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0022739:	75 0a                	jne    c0022745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002273b:	01 c9                	add    ecx,ecx
c002273d:	01 cd                	add    ebp,ecx
c002273f:	4b                   	dec    ebx
c0022740:	e9 54 ff ff ff       	jmp    c0022699 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0022745:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002274a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002274e:	51                   	push   ecx
c002274f:	51                   	push   ecx
c0022750:	52                   	push   edx
c0022751:	50                   	push   eax
c0022752:	e8 e7 e8 ff ff       	call   c002103e <IDE::getBase(unsigned char)>
c0022757:	89 c2                	mov    edx,eax
c0022759:	89 f0                	mov    eax,esi
c002275b:	66 ef                	out    dx,ax
c002275d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022761:	83 c4 10             	add    esp,0x10
c0022764:	41                   	inc    ecx
c0022765:	eb c1                	jmp    c0022728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0022767:	31 f6                	xor    esi,esi
c0022769:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002276f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022776:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002277a:	75 06                	jne    c0022782 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002277c:	01 f6                	add    esi,esi
c002277e:	01 f5                	add    ebp,esi
c0022780:	eb bd                	jmp    c002273f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0022782:	51                   	push   ecx
c0022783:	51                   	push   ecx
c0022784:	52                   	push   edx
c0022785:	50                   	push   eax
c0022786:	e8 b3 e8 ff ff       	call   c002103e <IDE::getBase(unsigned char)>
c002278b:	89 c2                	mov    edx,eax
c002278d:	66 ed                	in     ax,dx
c002278f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0022794:	83 c4 10             	add    esp,0x10
c0022797:	46                   	inc    esi
c0022798:	eb cf                	jmp    c0022769 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002279a:	51                   	push   ecx
c002279b:	51                   	push   ecx
c002279c:	52                   	push   edx
c002279d:	50                   	push   eax
c002279e:	e8 1b ea ff ff       	call   c00211be <IDE::waitInterrupt(unsigned char)>
c00227a3:	83 c4 10             	add    esp,0x10
c00227a6:	84 c0                	test   al,al
c00227a8:	0f 84 e8 fd ff ff    	je     c0022596 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00227ae:	bb a0 86 01 00       	mov    ebx,0x186a0
c00227b3:	52                   	push   edx
c00227b4:	52                   	push   edx
c00227b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00227bc:	50                   	push   eax
c00227bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00227c3:	e8 62 e8 ff ff       	call   c002102a <IDE::prepareInterrupt(unsigned char)>
c00227c8:	83 c4 10             	add    esp,0x10
c00227cb:	50                   	push   eax
c00227cc:	50                   	push   eax
c00227cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00227d4:	50                   	push   eax
c00227d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00227db:	e8 5e e8 ff ff       	call   c002103e <IDE::getBase(unsigned char)>
c00227e0:	8d 50 07             	lea    edx,[eax+0x7]
c00227e3:	ec                   	in     al,dx
c00227e4:	83 c4 10             	add    esp,0x10
c00227e7:	a8 88                	test   al,0x88
c00227e9:	74 0a                	je     c00227f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00227eb:	4b                   	dec    ebx
c00227ec:	75 dd                	jne    c00227cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00227ee:	bb 02 00 00 00       	mov    ebx,0x2
c00227f3:	eb 02                	jmp    c00227f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00227f5:	31 db                	xor    ebx,ebx
c00227f7:	83 c4 1c             	add    esp,0x1c
c00227fa:	89 d8                	mov    eax,ebx
c00227fc:	5b                   	pop    ebx
c00227fd:	5e                   	pop    esi
c00227fe:	5f                   	pop    edi
c00227ff:	5d                   	pop    ebp
c0022800:	c3                   	ret    
c0022801:	90                   	nop

c0022802 <ATAPI::diskRemoved()>:
c0022802:	83 ec 18             	sub    esp,0x18
c0022805:	68 c3 9c 02 c0       	push   0xc0029cc3
c002280a:	e8 24 fe fe ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c002280f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022813:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002281a:	83 c4 1c             	add    esp,0x1c
c002281d:	c3                   	ret    

c002281e <ATAPI::eject()>:
c002281e:	57                   	push   edi
c002281f:	b9 03 00 00 00       	mov    ecx,0x3
c0022824:	53                   	push   ebx
c0022825:	83 ec 14             	sub    esp,0x14
c0022828:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002282c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022830:	fc                   	cld    
c0022831:	31 c0                	xor    eax,eax
c0022833:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022835:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002283a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002283f:	50                   	push   eax
c0022840:	50                   	push   eax
c0022841:	6a 00                	push   0x0
c0022843:	6a 00                	push   0x0
c0022845:	6a 00                	push   0x0
c0022847:	6a 02                	push   0x2
c0022849:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002284d:	50                   	push   eax
c002284e:	53                   	push   ebx
c002284f:	e8 ee fc ff ff       	call   c0022542 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022854:	83 c4 14             	add    esp,0x14
c0022857:	53                   	push   ebx
c0022858:	e8 a5 ff ff ff       	call   c0022802 <ATAPI::diskRemoved()>
c002285d:	83 c4 24             	add    esp,0x24
c0022860:	5b                   	pop    ebx
c0022861:	5f                   	pop    edi
c0022862:	c3                   	ret    
c0022863:	90                   	nop

c0022864 <ATAPI::diskInserted()>:
c0022864:	53                   	push   ebx
c0022865:	83 ec 14             	sub    esp,0x14
c0022868:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002286c:	68 d9 9c 02 c0       	push   0xc0029cd9
c0022871:	e8 bd fd fe ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0022876:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002287d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022880:	e8 15 16 ff ff       	call   c0013e9a <PhysicalDisk::startCache()>
c0022885:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0022889:	83 c4 18             	add    esp,0x18
c002288c:	5b                   	pop    ebx
c002288d:	e9 b8 35 ff ff       	jmp    c0015e4a <createPartitionsForDisk(PhysicalDisk*)>

c0022892 <ATAPI::detectMedia()>:
c0022892:	56                   	push   esi
c0022893:	53                   	push   ebx
c0022894:	83 ec 28             	sub    esp,0x28
c0022897:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002289b:	6a 0c                	push   0xc
c002289d:	6a 00                	push   0x0
c002289f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00228a3:	56                   	push   esi
c00228a4:	e8 d2 dd fd ff       	call   c000067b <memset>
c00228a9:	58                   	pop    eax
c00228aa:	5a                   	pop    edx
c00228ab:	6a 00                	push   0x0
c00228ad:	6a 00                	push   0x0
c00228af:	6a 00                	push   0x0
c00228b1:	6a 00                	push   0x0
c00228b3:	56                   	push   esi
c00228b4:	53                   	push   ebx
c00228b5:	e8 88 fc ff ff       	call   c0022542 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00228ba:	83 c4 1c             	add    esp,0x1c
c00228bd:	6a 0c                	push   0xc
c00228bf:	6a 00                	push   0x0
c00228c1:	56                   	push   esi
c00228c2:	e8 b4 dd fd ff       	call   c000067b <memset>
c00228c7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00228cc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00228d1:	59                   	pop    ecx
c00228d2:	58                   	pop    eax
c00228d3:	6a 01                	push   0x1
c00228d5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00228d9:	50                   	push   eax
c00228da:	6a 00                	push   0x0
c00228dc:	6a 12                	push   0x12
c00228de:	56                   	push   esi
c00228df:	53                   	push   ebx
c00228e0:	e8 5d fc ff ff       	call   c0022542 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00228e5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00228e9:	83 c4 20             	add    esp,0x20
c00228ec:	83 e0 7f             	and    eax,0x7f
c00228ef:	3c 70                	cmp    al,0x70
c00228f1:	74 15                	je     c0022908 <ATAPI::detectMedia()+0x76>
c00228f3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00228fa:	75 0c                	jne    c0022908 <ATAPI::detectMedia()+0x76>
c00228fc:	83 ec 0c             	sub    esp,0xc
c00228ff:	53                   	push   ebx
c0022900:	e8 5f ff ff ff       	call   c0022864 <ATAPI::diskInserted()>
c0022905:	83 c4 10             	add    esp,0x10
c0022908:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002290c:	83 e0 0f             	and    eax,0xf
c002290f:	3c 02                	cmp    al,0x2
c0022911:	75 1b                	jne    c002292e <ATAPI::detectMedia()+0x9c>
c0022913:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0022918:	75 2d                	jne    c0022947 <ATAPI::detectMedia()+0xb5>
c002291a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022921:	74 24                	je     c0022947 <ATAPI::detectMedia()+0xb5>
c0022923:	83 ec 0c             	sub    esp,0xc
c0022926:	53                   	push   ebx
c0022927:	e8 d6 fe ff ff       	call   c0022802 <ATAPI::diskRemoved()>
c002292c:	eb 16                	jmp    c0022944 <ATAPI::detectMedia()+0xb2>
c002292e:	84 c0                	test   al,al
c0022930:	75 15                	jne    c0022947 <ATAPI::detectMedia()+0xb5>
c0022932:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022939:	75 0c                	jne    c0022947 <ATAPI::detectMedia()+0xb5>
c002293b:	83 ec 0c             	sub    esp,0xc
c002293e:	53                   	push   ebx
c002293f:	e8 20 ff ff ff       	call   c0022864 <ATAPI::diskInserted()>
c0022944:	83 c4 10             	add    esp,0x10
c0022947:	83 c4 24             	add    esp,0x24
c002294a:	5b                   	pop    ebx
c002294b:	5e                   	pop    esi
c002294c:	c3                   	ret    
c002294d:	90                   	nop

c002294e <ATAPI::open(int, int, void*)>:
c002294e:	53                   	push   ebx
c002294f:	83 ec 08             	sub    esp,0x8
c0022952:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022956:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002295a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002295e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022964:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002296a:	c1 e0 06             	shl    eax,0x6
c002296d:	01 d0                	add    eax,edx
c002296f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0022976:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002297c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0022983:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002298d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0022993:	6a 04                	push   0x4
c0022995:	6a 0c                	push   0xc
c0022997:	51                   	push   ecx
c0022998:	52                   	push   edx
c0022999:	e8 b2 e6 ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002299e:	90                   	nop
c002299f:	90                   	nop
c00229a0:	6a 00                	push   0x0
c00229a2:	6a 0c                	push   0xc
c00229a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00229ab:	50                   	push   eax
c00229ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00229b2:	e8 99 e6 ff ff       	call   c0021050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229b7:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00229be:	83 c4 14             	add    esp,0x14
c00229c1:	53                   	push   ebx
c00229c2:	e8 cb fe ff ff       	call   c0022892 <ATAPI::detectMedia()>
c00229c7:	31 c0                	xor    eax,eax
c00229c9:	83 c4 18             	add    esp,0x18
c00229cc:	5b                   	pop    ebx
c00229cd:	c3                   	ret    

c00229ce <ATAPI::read(unsigned long long, int, void*)>:
c00229ce:	55                   	push   ebp
c00229cf:	57                   	push   edi
c00229d0:	56                   	push   esi
c00229d1:	53                   	push   ebx
c00229d2:	83 ec 1c             	sub    esp,0x1c
c00229d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00229d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00229dd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00229e1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00229e8:	74 41                	je     c0022a2b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00229ea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00229ee:	b9 03 00 00 00       	mov    ecx,0x3
c00229f3:	fc                   	cld    
c00229f4:	31 c0                	xor    eax,eax
c00229f6:	86 fb                	xchg   bl,bh
c00229f8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00229fa:	c1 c3 10             	rol    ebx,0x10
c00229fd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022a02:	89 e8                	mov    eax,ebp
c0022a04:	86 fb                	xchg   bl,bh
c0022a06:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022a0a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0022a0e:	50                   	push   eax
c0022a0f:	50                   	push   eax
c0022a10:	55                   	push   ebp
c0022a11:	c1 e5 0b             	shl    ebp,0xb
c0022a14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022a18:	6a 00                	push   0x0
c0022a1a:	55                   	push   ebp
c0022a1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a1f:	50                   	push   eax
c0022a20:	56                   	push   esi
c0022a21:	e8 1c fb ff ff       	call   c0022542 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022a26:	83 c4 20             	add    esp,0x20
c0022a29:	eb 1a                	jmp    c0022a45 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0022a2b:	83 ec 0c             	sub    esp,0xc
c0022a2e:	56                   	push   esi
c0022a2f:	e8 5e fe ff ff       	call   c0022892 <ATAPI::detectMedia()>
c0022a34:	83 c4 10             	add    esp,0x10
c0022a37:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022a3e:	75 aa                	jne    c00229ea <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0022a40:	b8 02 00 00 00       	mov    eax,0x2
c0022a45:	83 c4 1c             	add    esp,0x1c
c0022a48:	5b                   	pop    ebx
c0022a49:	5e                   	pop    esi
c0022a4a:	5f                   	pop    edi
c0022a4b:	5d                   	pop    ebp
c0022a4c:	c3                   	ret    
c0022a4d:	90                   	nop

c0022a4e <AVX::open(int, int, void*)>:
c0022a4e:	83 ec 0c             	sub    esp,0xc
c0022a51:	e8 42 11 00 00       	call   c0023b98 <avxInit>
c0022a56:	b8 00 00 00 00       	mov    eax,0x0
c0022a5b:	83 c4 0c             	add    esp,0xc
c0022a5e:	c3                   	ret    
c0022a5f:	90                   	nop

c0022a60 <AVX::close(int, int, void*)>:
c0022a60:	83 ec 0c             	sub    esp,0xc
c0022a63:	e8 31 11 00 00       	call   c0023b99 <avxClose>
c0022a68:	b8 00 00 00 00       	mov    eax,0x0
c0022a6d:	83 c4 0c             	add    esp,0xc
c0022a70:	c3                   	ret    
c0022a71:	90                   	nop

c0022a72 <AVX::available()>:
c0022a72:	83 ec 0c             	sub    esp,0xc
c0022a75:	e8 16 11 00 00       	call   c0023b90 <avxDetect>
c0022a7a:	85 c0                	test   eax,eax
c0022a7c:	0f 95 c0             	setne  al
c0022a7f:	83 c4 0c             	add    esp,0xc
c0022a82:	c3                   	ret    
c0022a83:	90                   	nop

c0022a84 <AVX::save(void*)>:
c0022a84:	83 ec 0c             	sub    esp,0xc
c0022a87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022a8b:	83 ec 0c             	sub    esp,0xc
c0022a8e:	50                   	push   eax
c0022a8f:	e8 02 11 00 00       	call   c0023b96 <avxSave>
c0022a94:	83 c4 10             	add    esp,0x10
c0022a97:	90                   	nop
c0022a98:	83 c4 0c             	add    esp,0xc
c0022a9b:	c3                   	ret    

c0022a9c <AVX::load(void*)>:
c0022a9c:	83 ec 0c             	sub    esp,0xc
c0022a9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022aa3:	83 ec 0c             	sub    esp,0xc
c0022aa6:	50                   	push   eax
c0022aa7:	e8 eb 10 00 00       	call   c0023b97 <avxLoad>
c0022aac:	83 c4 10             	add    esp,0x10
c0022aaf:	90                   	nop
c0022ab0:	83 c4 0c             	add    esp,0xc
c0022ab3:	c3                   	ret    

c0022ab4 <AVX::AVX()>:
c0022ab4:	83 ec 0c             	sub    esp,0xc
c0022ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022abb:	83 ec 08             	sub    esp,0x8
c0022abe:	68 24 9d 02 c0       	push   0xc0029d24
c0022ac3:	50                   	push   eax
c0022ac4:	e8 47 14 ff ff       	call   c0013f10 <FPU::FPU(char const*)>
c0022ac9:	83 c4 10             	add    esp,0x10
c0022acc:	ba 34 9d 02 c0       	mov    edx,0xc0029d34
c0022ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad5:	89 10                	mov    DWORD PTR [eax],edx
c0022ad7:	90                   	nop
c0022ad8:	83 c4 0c             	add    esp,0xc
c0022adb:	c3                   	ret    

c0022adc <MMX::available()>:
c0022adc:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0022ae1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022ae7:	83 e0 20             	and    eax,0x20
c0022aea:	84 c0                	test   al,al
c0022aec:	0f 95 c0             	setne  al
c0022aef:	c3                   	ret    

c0022af0 <MMX::open(int, int, void*)>:
c0022af0:	83 ec 0c             	sub    esp,0xc
c0022af3:	e8 24 11 00 00       	call   c0023c1c <x87Init>
c0022af8:	b8 00 00 00 00       	mov    eax,0x0
c0022afd:	83 c4 0c             	add    esp,0xc
c0022b00:	c3                   	ret    
c0022b01:	90                   	nop

c0022b02 <MMX::close(int, int, void*)>:
c0022b02:	83 ec 0c             	sub    esp,0xc
c0022b05:	e8 2c 11 00 00       	call   c0023c36 <x87Close>
c0022b0a:	b8 00 00 00 00       	mov    eax,0x0
c0022b0f:	83 c4 0c             	add    esp,0xc
c0022b12:	c3                   	ret    
c0022b13:	90                   	nop

c0022b14 <MMX::save(void*)>:
c0022b14:	83 ec 0c             	sub    esp,0xc
c0022b17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b1b:	83 ec 0c             	sub    esp,0xc
c0022b1e:	50                   	push   eax
c0022b1f:	e8 ed 10 00 00       	call   c0023c11 <x87Save>
c0022b24:	83 c4 10             	add    esp,0x10
c0022b27:	90                   	nop
c0022b28:	83 c4 0c             	add    esp,0xc
c0022b2b:	c3                   	ret    

c0022b2c <MMX::load(void*)>:
c0022b2c:	83 ec 0c             	sub    esp,0xc
c0022b2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b33:	83 ec 0c             	sub    esp,0xc
c0022b36:	50                   	push   eax
c0022b37:	e8 db 10 00 00       	call   c0023c17 <x87Load>
c0022b3c:	83 c4 10             	add    esp,0x10
c0022b3f:	90                   	nop
c0022b40:	83 c4 0c             	add    esp,0xc
c0022b43:	c3                   	ret    

c0022b44 <MMX::MMX()>:
c0022b44:	83 ec 0c             	sub    esp,0xc
c0022b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4b:	83 ec 08             	sub    esp,0x8
c0022b4e:	68 64 9d 02 c0       	push   0xc0029d64
c0022b53:	50                   	push   eax
c0022b54:	e8 b7 13 ff ff       	call   c0013f10 <FPU::FPU(char const*)>
c0022b59:	83 c4 10             	add    esp,0x10
c0022b5c:	ba 74 9d 02 c0       	mov    edx,0xc0029d74
c0022b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b65:	89 10                	mov    DWORD PTR [eax],edx
c0022b67:	90                   	nop
c0022b68:	83 c4 0c             	add    esp,0xc
c0022b6b:	c3                   	ret    

c0022b6c <SSE::open(int, int, void*)>:
c0022b6c:	83 ec 0c             	sub    esp,0xc
c0022b6f:	e8 60 10 00 00       	call   c0023bd4 <sseInit>
c0022b74:	b8 00 00 00 00       	mov    eax,0x0
c0022b79:	83 c4 0c             	add    esp,0xc
c0022b7c:	c3                   	ret    
c0022b7d:	90                   	nop

c0022b7e <SSE::close(int, int, void*)>:
c0022b7e:	83 ec 0c             	sub    esp,0xc
c0022b81:	e8 5e 10 00 00       	call   c0023be4 <sseClose>
c0022b86:	b8 00 00 00 00       	mov    eax,0x0
c0022b8b:	83 c4 0c             	add    esp,0xc
c0022b8e:	c3                   	ret    
c0022b8f:	90                   	nop

c0022b90 <SSE::available()>:
c0022b90:	83 ec 1c             	sub    esp,0x1c
c0022b93:	e8 18 10 00 00       	call   c0023bb0 <absolutelyNoChanceInHell>
c0022b98:	85 c0                	test   eax,eax
c0022b9a:	0f 95 c0             	setne  al
c0022b9d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022ba1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022ba5:	83 c4 1c             	add    esp,0x1c
c0022ba8:	c3                   	ret    
c0022ba9:	90                   	nop

c0022baa <SSE::save(void*)>:
c0022baa:	83 ec 0c             	sub    esp,0xc
c0022bad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bb1:	83 ec 0c             	sub    esp,0xc
c0022bb4:	50                   	push   eax
c0022bb5:	e8 0e 10 00 00       	call   c0023bc8 <sseSave>
c0022bba:	83 c4 10             	add    esp,0x10
c0022bbd:	90                   	nop
c0022bbe:	83 c4 0c             	add    esp,0xc
c0022bc1:	c3                   	ret    

c0022bc2 <SSE::load(void*)>:
c0022bc2:	83 ec 0c             	sub    esp,0xc
c0022bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bc9:	83 ec 0c             	sub    esp,0xc
c0022bcc:	50                   	push   eax
c0022bcd:	e8 fc 0f 00 00       	call   c0023bce <sseLoad>
c0022bd2:	83 c4 10             	add    esp,0x10
c0022bd5:	90                   	nop
c0022bd6:	83 c4 0c             	add    esp,0xc
c0022bd9:	c3                   	ret    

c0022bda <SSE::SSE()>:
c0022bda:	83 ec 0c             	sub    esp,0xc
c0022bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be1:	83 ec 08             	sub    esp,0x8
c0022be4:	68 a4 9d 02 c0       	push   0xc0029da4
c0022be9:	50                   	push   eax
c0022bea:	e8 21 13 ff ff       	call   c0013f10 <FPU::FPU(char const*)>
c0022bef:	83 c4 10             	add    esp,0x10
c0022bf2:	ba b4 9d 02 c0       	mov    edx,0xc0029db4
c0022bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfb:	89 10                	mov    DWORD PTR [eax],edx
c0022bfd:	90                   	nop
c0022bfe:	83 c4 0c             	add    esp,0xc
c0022c01:	c3                   	ret    

c0022c02 <x87::open(int, int, void*)>:
c0022c02:	83 ec 0c             	sub    esp,0xc
c0022c05:	e8 12 10 00 00       	call   c0023c1c <x87Init>
c0022c0a:	b8 00 00 00 00       	mov    eax,0x0
c0022c0f:	83 c4 0c             	add    esp,0xc
c0022c12:	c3                   	ret    
c0022c13:	90                   	nop

c0022c14 <x87::close(int, int, void*)>:
c0022c14:	83 ec 0c             	sub    esp,0xc
c0022c17:	e8 1a 10 00 00       	call   c0023c36 <x87Close>
c0022c1c:	b8 00 00 00 00       	mov    eax,0x0
c0022c21:	83 c4 0c             	add    esp,0xc
c0022c24:	c3                   	ret    
c0022c25:	90                   	nop

c0022c26 <x87::available()>:
c0022c26:	83 ec 0c             	sub    esp,0xc
c0022c29:	e8 c8 0f 00 00       	call   c0023bf6 <x87Detect>
c0022c2e:	85 c0                	test   eax,eax
c0022c30:	0f 95 c0             	setne  al
c0022c33:	83 c4 0c             	add    esp,0xc
c0022c36:	c3                   	ret    
c0022c37:	90                   	nop

c0022c38 <x87::save(void*)>:
c0022c38:	83 ec 0c             	sub    esp,0xc
c0022c3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c3f:	83 ec 0c             	sub    esp,0xc
c0022c42:	50                   	push   eax
c0022c43:	e8 c9 0f 00 00       	call   c0023c11 <x87Save>
c0022c48:	83 c4 10             	add    esp,0x10
c0022c4b:	90                   	nop
c0022c4c:	83 c4 0c             	add    esp,0xc
c0022c4f:	c3                   	ret    

c0022c50 <x87::load(void*)>:
c0022c50:	83 ec 0c             	sub    esp,0xc
c0022c53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c57:	83 ec 0c             	sub    esp,0xc
c0022c5a:	50                   	push   eax
c0022c5b:	e8 b7 0f 00 00       	call   c0023c17 <x87Load>
c0022c60:	83 c4 10             	add    esp,0x10
c0022c63:	90                   	nop
c0022c64:	83 c4 0c             	add    esp,0xc
c0022c67:	c3                   	ret    

c0022c68 <x87::x87()>:
c0022c68:	83 ec 0c             	sub    esp,0xc
c0022c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6f:	83 ec 08             	sub    esp,0x8
c0022c72:	68 e4 9d 02 c0       	push   0xc0029de4
c0022c77:	50                   	push   eax
c0022c78:	e8 93 12 ff ff       	call   c0013f10 <FPU::FPU(char const*)>
c0022c7d:	83 c4 10             	add    esp,0x10
c0022c80:	ba f4 9d 02 c0       	mov    edx,0xc0029df4
c0022c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c89:	89 10                	mov    DWORD PTR [eax],edx
c0022c8b:	90                   	nop
c0022c8c:	83 c4 0c             	add    esp,0xc
c0022c8f:	c3                   	ret    

c0022c90 <APIC::disable()>:
c0022c90:	90                   	nop
c0022c91:	c3                   	ret    

c0022c92 <APIC::close(int, int, void*)>:
c0022c92:	55                   	push   ebp
c0022c93:	89 e5                	mov    ebp,esp
c0022c95:	83 ec 08             	sub    esp,0x8
c0022c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c9d:	83 c0 3c             	add    eax,0x3c
c0022ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca2:	83 ec 0c             	sub    esp,0xc
c0022ca5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ca8:	ff d0                	call   eax
c0022caa:	83 c4 10             	add    esp,0x10
c0022cad:	b8 00 00 00 00       	mov    eax,0x0
c0022cb2:	c9                   	leave  
c0022cb3:	c3                   	ret    

c0022cb4 <IOAPIC::close(int, int, void*)>:
c0022cb4:	b8 00 00 00 00       	mov    eax,0x0
c0022cb9:	c3                   	ret    

c0022cba <APIC::io_wait()>:
c0022cba:	eb 00                	jmp    c0022cbc <APIC::io_wait()+0x2>
c0022cbc:	eb 00                	jmp    c0022cbe <APIC::io_wait()+0x4>
c0022cbe:	90                   	nop
c0022cbf:	c3                   	ret    

c0022cc0 <APIC::getBase()>:
c0022cc0:	55                   	push   ebp
c0022cc1:	89 e5                	mov    ebp,esp
c0022cc3:	83 ec 18             	sub    esp,0x18
c0022cc6:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0022ccb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022cd1:	83 e0 08             	and    eax,0x8
c0022cd4:	84 c0                	test   al,al
c0022cd6:	75 07                	jne    c0022cdf <APIC::getBase()+0x1f>
c0022cd8:	b8 00 00 00 00       	mov    eax,0x0
c0022cdd:	eb 21                	jmp    c0022d00 <APIC::getBase()+0x40>
c0022cdf:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0022ce4:	83 ec 08             	sub    esp,0x8
c0022ce7:	6a 1b                	push   0x1b
c0022ce9:	50                   	push   eax
c0022cea:	e8 79 bd fe ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c0022cef:	83 c4 10             	add    esp,0x10
c0022cf2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022cf5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022cf8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022cfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022d00:	c9                   	leave  
c0022d01:	c3                   	ret    

c0022d02 <APIC::eoi(unsigned char)>:
c0022d02:	55                   	push   ebp
c0022d03:	89 e5                	mov    ebp,esp
c0022d05:	83 ec 28             	sub    esp,0x28
c0022d08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022d0b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022d0e:	83 ec 0c             	sub    esp,0xc
c0022d11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d14:	e8 a7 ff ff ff       	call   c0022cc0 <APIC::getBase()>
c0022d19:	83 c4 10             	add    esp,0x10
c0022d1c:	05 b0 00 00 00       	add    eax,0xb0
c0022d21:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022d24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022d27:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0022d2d:	90                   	nop
c0022d2e:	c9                   	leave  
c0022d2f:	c3                   	ret    

c0022d30 <APIC::open(int, int, void*)>:
c0022d30:	55                   	push   ebp
c0022d31:	89 e5                	mov    ebp,esp
c0022d33:	57                   	push   edi
c0022d34:	56                   	push   esi
c0022d35:	53                   	push   ebx
c0022d36:	83 ec 2c             	sub    esp,0x2c
c0022d39:	83 ec 0c             	sub    esp,0xc
c0022d3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d3f:	e8 7c ff ff ff       	call   c0022cc0 <APIC::getBase()>
c0022d44:	83 c4 10             	add    esp,0x10
c0022d47:	89 c2                	mov    edx,eax
c0022d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022d4c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d52:	0f b6 f8             	movzx  edi,al
c0022d55:	89 d0                	mov    eax,edx
c0022d57:	ba 00 00 00 00       	mov    edx,0x0
c0022d5c:	89 c1                	mov    ecx,eax
c0022d5e:	80 e5 ff             	and    ch,0xff
c0022d61:	89 cb                	mov    ebx,ecx
c0022d63:	0f b6 f2             	movzx  esi,dl
c0022d66:	89 d8                	mov    eax,ebx
c0022d68:	89 f2                	mov    edx,esi
c0022d6a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022d6d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022d70:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022d74:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022d78:	83 e0 00             	and    eax,0x0
c0022d7b:	09 d0                	or     eax,edx
c0022d7d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022d84:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d8a:	8d 50 01             	lea    edx,[eax+0x1]
c0022d8d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022d90:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022d96:	0f b6 d0             	movzx  edx,al
c0022d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022d9c:	83 c2 08             	add    edx,0x8
c0022d9f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022da3:	0f b6 c9             	movzx  ecx,cl
c0022da6:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022dac:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022db0:	83 ec 0c             	sub    esp,0xc
c0022db3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022db6:	e8 05 ff ff ff       	call   c0022cc0 <APIC::getBase()>
c0022dbb:	83 c4 10             	add    esp,0x10
c0022dbe:	05 f0 00 00 00       	add    eax,0xf0
c0022dc3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022dc6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022dc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dcb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022dce:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0022dd5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0022ddc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022ddf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022de2:	89 10                	mov    DWORD PTR [eax],edx
c0022de4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0022deb:	a1 70 b9 02 c0       	mov    eax,ds:0xc002b970
c0022df0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0022df3:	7d 7c                	jge    c0022e71 <APIC::open(int, int, void*)+0x141>
c0022df5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022df8:	8b 04 85 80 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4680]
c0022dff:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0022e02:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022e05:	8b 04 85 80 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4680]
c0022e0c:	c1 e8 08             	shr    eax,0x8
c0022e0f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0022e13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022e16:	8b 04 85 80 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4680]
c0022e1d:	c1 e8 18             	shr    eax,0x18
c0022e20:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0022e23:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0022e27:	75 40                	jne    c0022e69 <APIC::open(int, int, void*)+0x139>
c0022e29:	83 ec 0c             	sub    esp,0xc
c0022e2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022e2f:	e8 8c fe ff ff       	call   c0022cc0 <APIC::getBase()>
c0022e34:	83 c4 10             	add    esp,0x10
c0022e37:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0022e3b:	75 07                	jne    c0022e44 <APIC::open(int, int, void*)+0x114>
c0022e3d:	ba 60 03 00 00       	mov    edx,0x360
c0022e42:	eb 05                	jmp    c0022e49 <APIC::open(int, int, void*)+0x119>
c0022e44:	ba 50 03 00 00       	mov    edx,0x350
c0022e49:	01 d0                	add    eax,edx
c0022e4b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022e4e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0022e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e53:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0022e56:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0022e5d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0022e61:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0022e64:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022e67:	89 10                	mov    DWORD PTR [eax],edx
c0022e69:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0022e6c:	e9 7a ff ff ff       	jmp    c0022deb <APIC::open(int, int, void*)+0xbb>
c0022e71:	b8 00 00 00 00       	mov    eax,0x0
c0022e76:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022e79:	5b                   	pop    ebx
c0022e7a:	5e                   	pop    esi
c0022e7b:	5f                   	pop    edi
c0022e7c:	5d                   	pop    ebp
c0022e7d:	c3                   	ret    

c0022e7e <IOAPIC::IOAPIC()>:
c0022e7e:	83 ec 0c             	sub    esp,0xc
c0022e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e85:	83 ec 08             	sub    esp,0x8
c0022e88:	68 24 9e 02 c0       	push   0xc0029e24
c0022e8d:	50                   	push   eax
c0022e8e:	e8 7f 0d ff ff       	call   c0013c12 <Device::Device(char const*)>
c0022e93:	83 c4 10             	add    esp,0x10
c0022e96:	ba 4c 9f 02 c0       	mov    edx,0xc0029f4c
c0022e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e9f:	89 10                	mov    DWORD PTR [eax],edx
c0022ea1:	90                   	nop
c0022ea2:	83 c4 0c             	add    esp,0xc
c0022ea5:	c3                   	ret    

c0022ea6 <APIC::APIC()>:
c0022ea6:	53                   	push   ebx
c0022ea7:	83 ec 18             	sub    esp,0x18
c0022eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022eae:	83 ec 08             	sub    esp,0x8
c0022eb1:	68 2c 9e 02 c0       	push   0xc0029e2c
c0022eb6:	50                   	push   eax
c0022eb7:	e8 ae 14 ff ff       	call   c001436a <InterruptController::InterruptController(char const*)>
c0022ebc:	83 c4 10             	add    esp,0x10
c0022ebf:	ba 04 9f 02 c0       	mov    edx,0xc0029f04
c0022ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ec8:	89 10                	mov    DWORD PTR [eax],edx
c0022eca:	a0 e0 d3 02 c0       	mov    al,ds:0xc002d3e0
c0022ecf:	83 f0 01             	xor    eax,0x1
c0022ed2:	84 c0                	test   al,al
c0022ed4:	0f 84 a1 00 00 00    	je     c0022f7b <APIC::APIC()+0xd5>
c0022eda:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0022edf:	a0 20 ba 02 c0       	mov    al,ds:0xc002ba20
c0022ee4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0022ee8:	0f 83 86 00 00 00    	jae    c0022f74 <APIC::APIC()+0xce>
c0022eee:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0022ef6:	83 ec 0c             	sub    esp,0xc
c0022ef9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022efd:	e8 be c5 fe ff       	call   c000f4c0 <malloc>
c0022f02:	83 c4 10             	add    esp,0x10
c0022f05:	89 c3                	mov    ebx,eax
c0022f07:	83 ec 0c             	sub    esp,0xc
c0022f0a:	53                   	push   ebx
c0022f0b:	e8 6e ff ff ff       	call   c0022e7e <IOAPIC::IOAPIC()>
c0022f10:	83 c4 10             	add    esp,0x10
c0022f13:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0022f17:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0022f1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022f20:	89 14 85 c0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c40],edx
c0022f27:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c0022f2c:	40                   	inc    eax
c0022f2d:	a3 a0 d3 02 c0       	mov    ds:0xc002d3a0,eax
c0022f32:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c0022f37:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022f3d:	83 ec 08             	sub    esp,0x8
c0022f40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022f44:	50                   	push   eax
c0022f45:	e8 d8 0a ff ff       	call   c0013a22 <Device::addChild(Device*)>
c0022f4a:	83 c4 10             	add    esp,0x10
c0022f4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022f51:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f53:	83 c0 08             	add    eax,0x8
c0022f56:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f58:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022f5d:	6a 00                	push   0x0
c0022f5f:	6a 00                	push   0x0
c0022f61:	52                   	push   edx
c0022f62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f66:	ff d0                	call   eax
c0022f68:	83 c4 10             	add    esp,0x10
c0022f6b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022f6f:	e9 6b ff ff ff       	jmp    c0022edf <APIC::APIC()+0x39>
c0022f74:	c6 05 e0 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d3e0,0x1
c0022f7b:	90                   	nop
c0022f7c:	83 c4 18             	add    esp,0x18
c0022f7f:	5b                   	pop    ebx
c0022f80:	c3                   	ret    
c0022f81:	90                   	nop

c0022f82 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022f82:	55                   	push   ebp
c0022f83:	89 e5                	mov    ebp,esp
c0022f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022f88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022f8e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022f91:	72 1d                	jb     c0022fb0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022f96:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022f9f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0022fa5:	01 d0                	add    eax,edx
c0022fa7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022faa:	73 04                	jae    c0022fb0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022fac:	b0 01                	mov    al,0x1
c0022fae:	eb 02                	jmp    c0022fb2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022fb0:	b0 00                	mov    al,0x0
c0022fb2:	5d                   	pop    ebp
c0022fb3:	c3                   	ret    

c0022fb4 <IOAPIC::read(int)>:
c0022fb4:	55                   	push   ebp
c0022fb5:	89 e5                	mov    ebp,esp
c0022fb7:	83 ec 10             	sub    esp,0x10
c0022fba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022fbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022fc3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022fc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022fc9:	0f b6 d0             	movzx  edx,al
c0022fcc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022fcf:	89 10                	mov    DWORD PTR [eax],edx
c0022fd1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022fd4:	83 c0 10             	add    eax,0x10
c0022fd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fd9:	c9                   	leave  
c0022fda:	c3                   	ret    
c0022fdb:	90                   	nop

c0022fdc <IOAPIC::open(int, int, void*)>:
c0022fdc:	55                   	push   ebp
c0022fdd:	89 e5                	mov    ebp,esp
c0022fdf:	57                   	push   edi
c0022fe0:	56                   	push   esi
c0022fe1:	53                   	push   ebx
c0022fe2:	83 ec 0c             	sub    esp,0xc
c0022fe5:	83 ec 0c             	sub    esp,0xc
c0022fe8:	68 57 9e 02 c0       	push   0xc0029e57
c0022fed:	e8 41 f6 fe ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0022ff2:	83 c4 10             	add    esp,0x10
c0022ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022ff8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022ffb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023004:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002300a:	8b 14 85 60 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd45a0]
c0023011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023014:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002301a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002301d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023023:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c002302a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002302d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023036:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002303c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002303f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023045:	0f b6 f8             	movzx  edi,al
c0023048:	89 d0                	mov    eax,edx
c002304a:	ba 00 00 00 00       	mov    edx,0x0
c002304f:	89 c1                	mov    ecx,eax
c0023051:	80 e5 ff             	and    ch,0xff
c0023054:	89 cb                	mov    ebx,ecx
c0023056:	0f b6 f2             	movzx  esi,dl
c0023059:	89 d8                	mov    eax,ebx
c002305b:	89 f2                	mov    edx,esi
c002305d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023060:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023063:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023067:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002306b:	83 e0 00             	and    eax,0x0
c002306e:	09 d0                	or     eax,edx
c0023070:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023077:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002307d:	8d 50 01             	lea    edx,[eax+0x1]
c0023080:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023083:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0023089:	0f b6 d0             	movzx  edx,al
c002308c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002308f:	83 c2 08             	add    edx,0x8
c0023092:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0023096:	0f b6 c9             	movzx  ecx,cl
c0023099:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002309f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00230a3:	83 ec 08             	sub    esp,0x8
c00230a6:	6a 01                	push   0x1
c00230a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00230ab:	e8 04 ff ff ff       	call   c0022fb4 <IOAPIC::read(int)>
c00230b0:	83 c4 10             	add    esp,0x10
c00230b3:	c1 f8 10             	sar    eax,0x10
c00230b6:	0f b6 c0             	movzx  eax,al
c00230b9:	8d 50 01             	lea    edx,[eax+0x1]
c00230bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00230bf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00230c5:	b8 00 00 00 00       	mov    eax,0x0
c00230ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c00230cd:	5b                   	pop    ebx
c00230ce:	5e                   	pop    esi
c00230cf:	5f                   	pop    edi
c00230d0:	5d                   	pop    ebp
c00230d1:	c3                   	ret    

c00230d2 <IOAPIC::write(int, int)>:
c00230d2:	55                   	push   ebp
c00230d3:	89 e5                	mov    ebp,esp
c00230d5:	83 ec 10             	sub    esp,0x10
c00230d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00230db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00230e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00230e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00230e7:	0f b6 d0             	movzx  edx,al
c00230ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00230ed:	89 10                	mov    DWORD PTR [eax],edx
c00230ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00230f2:	8d 50 10             	lea    edx,[eax+0x10]
c00230f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00230f8:	89 02                	mov    DWORD PTR [edx],eax
c00230fa:	90                   	nop
c00230fb:	c9                   	leave  
c00230fc:	c3                   	ret    
c00230fd:	90                   	nop

c00230fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00230fe:	55                   	push   ebp
c00230ff:	89 e5                	mov    ebp,esp
c0023101:	53                   	push   ebx
c0023102:	83 ec 2c             	sub    esp,0x2c
c0023105:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023108:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002310b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002310e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0023111:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0023114:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023117:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002311a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002311d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023120:	88 d8                	mov    al,bl
c0023122:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0023125:	88 c8                	mov    al,cl
c0023127:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002312a:	88 d0                	mov    al,dl
c002312c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002312f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023133:	83 c0 08             	add    eax,0x8
c0023136:	01 c0                	add    eax,eax
c0023138:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002313b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002313f:	83 c0 08             	add    eax,0x8
c0023142:	01 c0                	add    eax,eax
c0023144:	40                   	inc    eax
c0023145:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023148:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002314b:	50                   	push   eax
c002314c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002314f:	e8 60 fe ff ff       	call   c0022fb4 <IOAPIC::read(int)>
c0023154:	83 c4 08             	add    esp,0x8
c0023157:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002315a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0023161:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0023164:	c1 e0 18             	shl    eax,0x18
c0023167:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002316a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002316d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023170:	52                   	push   edx
c0023171:	50                   	push   eax
c0023172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023175:	e8 58 ff ff ff       	call   c00230d2 <IOAPIC::write(int, int)>
c002317a:	83 c4 0c             	add    esp,0xc
c002317d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023180:	50                   	push   eax
c0023181:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023184:	e8 2b fe ff ff       	call   c0022fb4 <IOAPIC::read(int)>
c0023189:	83 c4 08             	add    esp,0x8
c002318c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002318f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0023196:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002319d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00231a4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00231a8:	74 09                	je     c00231b3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00231aa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00231b1:	eb 07                	jmp    c00231ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00231b3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00231ba:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00231be:	74 09                	je     c00231c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00231c0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00231c7:	eb 07                	jmp    c00231d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00231c9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00231d0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00231d7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00231db:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00231de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00231e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00231e4:	52                   	push   edx
c00231e5:	50                   	push   eax
c00231e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00231e9:	e8 e4 fe ff ff       	call   c00230d2 <IOAPIC::write(int, int)>
c00231ee:	83 c4 0c             	add    esp,0xc
c00231f1:	90                   	nop
c00231f2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00231f5:	c9                   	leave  
c00231f6:	c3                   	ret    
c00231f7:	90                   	nop

c00231f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00231f8:	55                   	push   ebp
c00231f9:	89 e5                	mov    ebp,esp
c00231fb:	57                   	push   edi
c00231fc:	56                   	push   esi
c00231fd:	53                   	push   ebx
c00231fe:	83 ec 2c             	sub    esp,0x2c
c0023201:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023204:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0023207:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002320b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002320f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0023213:	74 5a                	je     c002326f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023215:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0023219:	7f 44                	jg     c002325f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002321b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002321e:	05 a0 a3 02 c0       	add    eax,0xc002a3a0
c0023223:	8a 00                	mov    al,BYTE PTR [eax]
c0023225:	0f b6 c0             	movzx  eax,al
c0023228:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002322b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002322e:	66 8b 84 00 00 ba 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd4600]
c0023236:	0f b7 c0             	movzx  eax,ax
c0023239:	83 e0 02             	and    eax,0x2
c002323c:	85 c0                	test   eax,eax
c002323e:	74 04                	je     c0023244 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0023240:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0023244:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023247:	66 8b 84 00 00 ba 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd4600]
c002324f:	0f b7 c0             	movzx  eax,ax
c0023252:	83 e0 08             	and    eax,0x8
c0023255:	85 c0                	test   eax,eax
c0023257:	74 16                	je     c002326f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023259:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002325d:	eb 10                	jmp    c002326f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002325f:	83 ec 0c             	sub    esp,0xc
c0023262:	68 68 9e 02 c0       	push   0xc0029e68
c0023267:	e8 2b 5e ff ff       	call   c0019097 <Krnl::panic(char const*)>
c002326c:	83 c4 10             	add    esp,0x10
c002326f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0023273:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c0023278:	83 ec 08             	sub    esp,0x8
c002327b:	50                   	push   eax
c002327c:	68 a0 9e 02 c0       	push   0xc0029ea0
c0023281:	e8 ad f3 fe ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0023286:	83 c4 10             	add    esp,0x10
c0023289:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0023290:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c0023295:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0023298:	7d 67                	jge    c0023301 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002329a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002329d:	8b 04 85 c0 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c40]
c00232a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00232a7:	83 ec 08             	sub    esp,0x8
c00232aa:	52                   	push   edx
c00232ab:	50                   	push   eax
c00232ac:	e8 d1 fc ff ff       	call   c0022f82 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00232b1:	83 c4 10             	add    esp,0x10
c00232b4:	84 c0                	test   al,al
c00232b6:	74 44                	je     c00232fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00232b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00232bb:	8b 1c 85 c0 d3 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd2c40]
c00232c2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00232c6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00232c9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00232cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00232d0:	83 c0 20             	add    eax,0x20
c00232d3:	0f b6 f0             	movzx  esi,al
c00232d6:	b8 00 00 00 00       	mov    eax,0x0
c00232db:	99                   	cdq    
c00232dc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00232df:	0f b6 c9             	movzx  ecx,cl
c00232e2:	83 ec 04             	sub    esp,0x4
c00232e5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00232e8:	57                   	push   edi
c00232e9:	56                   	push   esi
c00232ea:	52                   	push   edx
c00232eb:	50                   	push   eax
c00232ec:	51                   	push   ecx
c00232ed:	53                   	push   ebx
c00232ee:	e8 0b fe ff ff       	call   c00230fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00232f3:	83 c4 20             	add    esp,0x20
c00232f6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00232fa:	eb 05                	jmp    c0023301 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00232fc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00232ff:	eb 8f                	jmp    c0023290 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0023301:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0023304:	83 f0 01             	xor    eax,0x1
c0023307:	84 c0                	test   al,al
c0023309:	74 10                	je     c002331b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002330b:	83 ec 0c             	sub    esp,0xc
c002330e:	68 b7 9e 02 c0       	push   0xc0029eb7
c0023313:	e8 7f 5d ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0023318:	83 c4 10             	add    esp,0x10
c002331b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002331f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0023326:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002332a:	7f 65                	jg     c0023391 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002332c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002332f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023332:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023339:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002333c:	01 ca                	add    edx,ecx
c002333e:	83 c2 54             	add    edx,0x54
c0023341:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0023345:	85 c0                	test   eax,eax
c0023347:	75 43                	jne    c002338c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0023349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002334c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002334f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023356:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023359:	01 ca                	add    edx,ecx
c002335b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002335e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0023361:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0023365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023368:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002336b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023372:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023375:	01 ca                	add    edx,ecx
c0023377:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002337d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023380:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0023384:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023387:	83 e8 20             	sub    eax,0x20
c002338a:	eb 1a                	jmp    c00233a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002338c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002338f:	eb 95                	jmp    c0023326 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0023391:	83 ec 0c             	sub    esp,0xc
c0023394:	68 c4 9e 02 c0       	push   0xc0029ec4
c0023399:	e8 f9 5c ff ff       	call   c0019097 <Krnl::panic(char const*)>
c002339e:	83 c4 10             	add    esp,0x10
c00233a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00233a6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00233a9:	5b                   	pop    ebx
c00233aa:	5e                   	pop    esi
c00233ab:	5f                   	pop    edi
c00233ac:	5d                   	pop    ebp
c00233ad:	c3                   	ret    

c00233ae <PIC::disable()>:
c00233ae:	55                   	push   ebp
c00233af:	89 e5                	mov    ebp,esp
c00233b1:	83 ec 10             	sub    esp,0x10
c00233b4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00233ba:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00233be:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00233c1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00233c5:	ee                   	out    dx,al
c00233c6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00233cc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00233d0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00233d3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00233d7:	ee                   	out    dx,al
c00233d8:	90                   	nop
c00233d9:	c9                   	leave  
c00233da:	c3                   	ret    
c00233db:	90                   	nop

c00233dc <PIC::close(int, int, void*)>:
c00233dc:	55                   	push   ebp
c00233dd:	89 e5                	mov    ebp,esp
c00233df:	83 ec 08             	sub    esp,0x8
c00233e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00233e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00233e7:	83 c0 3c             	add    eax,0x3c
c00233ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00233ec:	83 ec 0c             	sub    esp,0xc
c00233ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00233f2:	ff d0                	call   eax
c00233f4:	83 c4 10             	add    esp,0x10
c00233f7:	b8 00 00 00 00       	mov    eax,0x0
c00233fc:	c9                   	leave  
c00233fd:	c3                   	ret    

c00233fe <PIC::PIC()>:
c00233fe:	83 ec 0c             	sub    esp,0xc
c0023401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023405:	83 ec 08             	sub    esp,0x8
c0023408:	68 70 9f 02 c0       	push   0xc0029f70
c002340d:	50                   	push   eax
c002340e:	e8 57 0f ff ff       	call   c001436a <InterruptController::InterruptController(char const*)>
c0023413:	83 c4 10             	add    esp,0x10
c0023416:	ba 9c 9f 02 c0       	mov    edx,0xc0029f9c
c002341b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341f:	89 10                	mov    DWORD PTR [eax],edx
c0023421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023425:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002342b:	0f b6 d0             	movzx  edx,al
c002342e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023432:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0023439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002343d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023443:	0f b6 d0             	movzx  edx,al
c0023446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002344a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002344f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023453:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023459:	8d 50 01             	lea    edx,[eax+0x1]
c002345c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023460:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023466:	0f b6 d0             	movzx  edx,al
c0023469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023471:	83 e1 3f             	and    ecx,0x3f
c0023474:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002347c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023482:	0f b6 d0             	movzx  edx,al
c0023485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023489:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0023490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023494:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002349a:	0f b6 d0             	movzx  edx,al
c002349d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00234a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00234b0:	8d 50 01             	lea    edx,[eax+0x1]
c00234b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00234b7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00234bd:	0f b6 d0             	movzx  edx,al
c00234c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00234c8:	83 e1 3f             	and    ecx,0x3f
c00234cb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00234cf:	90                   	nop
c00234d0:	83 c4 0c             	add    esp,0xc
c00234d3:	c3                   	ret    

c00234d4 <PIC::ioWait()>:
c00234d4:	eb 00                	jmp    c00234d6 <PIC::ioWait()+0x2>
c00234d6:	eb 00                	jmp    c00234d8 <PIC::ioWait()+0x4>
c00234d8:	90                   	nop
c00234d9:	c3                   	ret    

c00234da <PIC::getIRQReg(int)>:
c00234da:	55                   	push   ebp
c00234db:	89 e5                	mov    ebp,esp
c00234dd:	83 ec 10             	sub    esp,0x10
c00234e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00234e3:	0f b6 c0             	movzx  eax,al
c00234e6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00234ec:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00234ef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00234f2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00234f6:	ee                   	out    dx,al
c00234f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00234fa:	0f b6 c0             	movzx  eax,al
c00234fd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0023503:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0023506:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023509:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002350d:	ee                   	out    dx,al
c002350e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0023514:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0023518:	89 c2                	mov    edx,eax
c002351a:	ec                   	in     al,dx
c002351b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002351e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023521:	0f b6 c0             	movzx  eax,al
c0023524:	c1 e0 08             	shl    eax,0x8
c0023527:	89 c1                	mov    ecx,eax
c0023529:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002352f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0023533:	89 c2                	mov    edx,eax
c0023535:	ec                   	in     al,dx
c0023536:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0023539:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002353c:	0f b6 c0             	movzx  eax,al
c002353f:	09 c8                	or     eax,ecx
c0023541:	c9                   	leave  
c0023542:	c3                   	ret    
c0023543:	90                   	nop

c0023544 <PIC::eoi(unsigned char)>:
c0023544:	55                   	push   ebp
c0023545:	89 e5                	mov    ebp,esp
c0023547:	83 ec 14             	sub    esp,0x14
c002354a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002354d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0023550:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023554:	75 1e                	jne    c0023574 <PIC::eoi(unsigned char)+0x30>
c0023556:	6a 0b                	push   0xb
c0023558:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002355b:	e8 7a ff ff ff       	call   c00234da <PIC::getIRQReg(int)>
c0023560:	83 c4 08             	add    esp,0x8
c0023563:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0023567:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002356b:	25 80 00 00 00       	and    eax,0x80
c0023570:	85 c0                	test   eax,eax
c0023572:	74 5f                	je     c00235d3 <PIC::eoi(unsigned char)+0x8f>
c0023574:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0023578:	75 2d                	jne    c00235a7 <PIC::eoi(unsigned char)+0x63>
c002357a:	6a 0b                	push   0xb
c002357c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002357f:	e8 56 ff ff ff       	call   c00234da <PIC::getIRQReg(int)>
c0023584:	83 c4 08             	add    esp,0x8
c0023587:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002358b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002358e:	66 85 c0             	test   ax,ax
c0023591:	78 14                	js     c00235a7 <PIC::eoi(unsigned char)+0x63>
c0023593:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0023599:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002359d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00235a0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00235a4:	ee                   	out    dx,al
c00235a5:	eb 2d                	jmp    c00235d4 <PIC::eoi(unsigned char)+0x90>
c00235a7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00235ab:	76 12                	jbe    c00235bf <PIC::eoi(unsigned char)+0x7b>
c00235ad:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00235b3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00235b7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00235ba:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00235be:	ee                   	out    dx,al
c00235bf:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00235c5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00235c9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00235cc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00235d0:	ee                   	out    dx,al
c00235d1:	eb 01                	jmp    c00235d4 <PIC::eoi(unsigned char)+0x90>
c00235d3:	90                   	nop
c00235d4:	c9                   	leave  
c00235d5:	c3                   	ret    

c00235d6 <PIC::remap()>:
c00235d6:	55                   	push   ebp
c00235d7:	89 e5                	mov    ebp,esp
c00235d9:	83 ec 48             	sub    esp,0x48
c00235dc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00235e3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00235ea:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00235f0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00235f3:	89 c2                	mov    edx,eax
c00235f5:	ec                   	in     al,dx
c00235f6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00235f9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00235fc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00235ff:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0023605:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0023608:	89 c2                	mov    edx,eax
c002360a:	ec                   	in     al,dx
c002360b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002360e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0023611:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0023614:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002361a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002361e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0023621:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0023624:	ee                   	out    dx,al
c0023625:	83 ec 0c             	sub    esp,0xc
c0023628:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002362b:	e8 a4 fe ff ff       	call   c00234d4 <PIC::ioWait()>
c0023630:	83 c4 10             	add    esp,0x10
c0023633:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0023639:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002363d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0023640:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0023643:	ee                   	out    dx,al
c0023644:	83 ec 0c             	sub    esp,0xc
c0023647:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002364a:	e8 85 fe ff ff       	call   c00234d4 <PIC::ioWait()>
c002364f:	83 c4 10             	add    esp,0x10
c0023652:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0023655:	0f b6 c0             	movzx  eax,al
c0023658:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002365e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0023661:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0023664:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0023667:	ee                   	out    dx,al
c0023668:	83 ec 0c             	sub    esp,0xc
c002366b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002366e:	e8 61 fe ff ff       	call   c00234d4 <PIC::ioWait()>
c0023673:	83 c4 10             	add    esp,0x10
c0023676:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023679:	0f b6 c0             	movzx  eax,al
c002367c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0023682:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0023685:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0023688:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002368b:	ee                   	out    dx,al
c002368c:	83 ec 0c             	sub    esp,0xc
c002368f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023692:	e8 3d fe ff ff       	call   c00234d4 <PIC::ioWait()>
c0023697:	83 c4 10             	add    esp,0x10
c002369a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00236a0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00236a4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00236a7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00236aa:	ee                   	out    dx,al
c00236ab:	83 ec 0c             	sub    esp,0xc
c00236ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00236b1:	e8 1e fe ff ff       	call   c00234d4 <PIC::ioWait()>
c00236b6:	83 c4 10             	add    esp,0x10
c00236b9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00236bf:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00236c3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00236c6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00236c9:	ee                   	out    dx,al
c00236ca:	83 ec 0c             	sub    esp,0xc
c00236cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00236d0:	e8 ff fd ff ff       	call   c00234d4 <PIC::ioWait()>
c00236d5:	83 c4 10             	add    esp,0x10
c00236d8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00236de:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00236e2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00236e5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00236e8:	ee                   	out    dx,al
c00236e9:	83 ec 0c             	sub    esp,0xc
c00236ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00236ef:	e8 e0 fd ff ff       	call   c00234d4 <PIC::ioWait()>
c00236f4:	83 c4 10             	add    esp,0x10
c00236f7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00236fd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0023701:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0023704:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023707:	ee                   	out    dx,al
c0023708:	83 ec 0c             	sub    esp,0xc
c002370b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002370e:	e8 c1 fd ff ff       	call   c00234d4 <PIC::ioWait()>
c0023713:	83 c4 10             	add    esp,0x10
c0023716:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002371a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0023720:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0023723:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0023726:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023729:	ee                   	out    dx,al
c002372a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002372e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0023734:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0023737:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002373a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002373d:	ee                   	out    dx,al
c002373e:	90                   	nop
c002373f:	c9                   	leave  
c0023740:	c3                   	ret    
c0023741:	90                   	nop

c0023742 <PIC::open(int, int, void*)>:
c0023742:	55                   	push   ebp
c0023743:	89 e5                	mov    ebp,esp
c0023745:	83 ec 18             	sub    esp,0x18
c0023748:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002374e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0023752:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023755:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023759:	ee                   	out    dx,al
c002375a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0023760:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0023764:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023767:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002376b:	ee                   	out    dx,al
c002376c:	83 ec 0c             	sub    esp,0xc
c002376f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023772:	e8 5f fe ff ff       	call   c00235d6 <PIC::remap()>
c0023777:	83 c4 10             	add    esp,0x10
c002377a:	b8 00 00 00 00       	mov    eax,0x0
c002377f:	c9                   	leave  
c0023780:	c3                   	ret    
c0023781:	90                   	nop

c0023782 <APICTimer::close(int, int, void*)>:
c0023782:	b8 00 00 00 00       	mov    eax,0x0
c0023787:	c3                   	ret    

c0023788 <apicTimerHandler(regs*, void*)>:
c0023788:	83 ec 0c             	sub    esp,0xc
c002378b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002378f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023791:	99                   	cdq    
c0023792:	52                   	push   edx
c0023793:	50                   	push   eax
c0023794:	6a 00                	push   0x0
c0023796:	68 00 ca 9a 3b       	push   0x3b9aca00
c002379b:	e8 8c 07 00 00       	call   c0023f2c <__udivdi3>
c00237a0:	83 c4 10             	add    esp,0x10
c00237a3:	83 ec 08             	sub    esp,0x8
c00237a6:	52                   	push   edx
c00237a7:	50                   	push   eax
c00237a8:	e8 be 29 ff ff       	call   c001616b <timerHandler(unsigned long long)>
c00237ad:	83 c4 10             	add    esp,0x10
c00237b0:	90                   	nop
c00237b1:	83 c4 0c             	add    esp,0xc
c00237b4:	c3                   	ret    
c00237b5:	90                   	nop

c00237b6 <APICTimer::write(int)>:
c00237b6:	53                   	push   ebx
c00237b7:	83 ec 28             	sub    esp,0x28
c00237ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00237be:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00237c2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00237c8:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00237cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00237d3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00237d9:	83 ec 0c             	sub    esp,0xc
c00237dc:	50                   	push   eax
c00237dd:	e8 de f4 ff ff       	call   c0022cc0 <APIC::getBase()>
c00237e2:	83 c4 10             	add    esp,0x10
c00237e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00237e9:	a1 30 b7 02 c0       	mov    eax,ds:0xc002b730
c00237ee:	8b 15 34 b7 02 c0    	mov    edx,DWORD PTR ds:0xc002b734
c00237f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00237f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00237fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023800:	05 e0 03 00 00       	add    eax,0x3e0
c0023805:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002380b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002380f:	05 80 03 00 00       	add    eax,0x380
c0023814:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002381a:	fb                   	sti    
c002381b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002381f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023823:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0023828:	83 d2 00             	adc    edx,0x0
c002382b:	89 c1                	mov    ecx,eax
c002382d:	89 d3                	mov    ebx,edx
c002382f:	a1 30 b7 02 c0       	mov    eax,ds:0xc002b730
c0023834:	8b 15 34 b7 02 c0    	mov    edx,DWORD PTR ds:0xc002b734
c002383a:	39 c8                	cmp    eax,ecx
c002383c:	89 d0                	mov    eax,edx
c002383e:	19 d8                	sbb    eax,ebx
c0023840:	73 02                	jae    c0023844 <APICTimer::write(int)+0x8e>
c0023842:	eb d7                	jmp    c002381b <APICTimer::write(int)+0x65>
c0023844:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023848:	05 20 03 00 00       	add    eax,0x320
c002384d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0023853:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023857:	05 90 03 00 00       	add    eax,0x390
c002385c:	8b 00                	mov    eax,DWORD PTR [eax]
c002385e:	f7 d0                	not    eax
c0023860:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023864:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002386c:	ba 00 00 00 00       	mov    edx,0x0
c0023871:	f7 f3                	div    ebx
c0023873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002387b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023881:	0d 00 00 02 00       	or     eax,0x20000
c0023886:	89 c2                	mov    edx,eax
c0023888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002388c:	05 20 03 00 00       	add    eax,0x320
c0023891:	89 10                	mov    DWORD PTR [eax],edx
c0023893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023897:	05 e0 03 00 00       	add    eax,0x3e0
c002389c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00238a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238a6:	05 80 03 00 00       	add    eax,0x380
c00238ab:	89 c2                	mov    edx,eax
c00238ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00238b1:	89 02                	mov    DWORD PTR [edx],eax
c00238b3:	90                   	nop
c00238b4:	83 c4 28             	add    esp,0x28
c00238b7:	5b                   	pop    ebx
c00238b8:	c3                   	ret    
c00238b9:	90                   	nop

c00238ba <APICTimer::open(int, int, void*)>:
c00238ba:	57                   	push   edi
c00238bb:	56                   	push   esi
c00238bc:	53                   	push   ebx
c00238bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00238c3:	83 c0 24             	add    eax,0x24
c00238c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00238c8:	83 ec 08             	sub    esp,0x8
c00238cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238d3:	ff d0                	call   eax
c00238d5:	83 c4 10             	add    esp,0x10
c00238d8:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c00238dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00238e3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00238e9:	83 ec 0c             	sub    esp,0xc
c00238ec:	50                   	push   eax
c00238ed:	e8 ce f3 ff ff       	call   c0022cc0 <APIC::getBase()>
c00238f2:	83 c4 10             	add    esp,0x10
c00238f5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00238fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023905:	0f b6 f8             	movzx  edi,al
c0023908:	89 d0                	mov    eax,edx
c002390a:	ba 00 00 00 00       	mov    edx,0x0
c002390f:	89 c1                	mov    ecx,eax
c0023911:	80 e5 ff             	and    ch,0xff
c0023914:	89 cb                	mov    ebx,ecx
c0023916:	0f b6 f2             	movzx  esi,dl
c0023919:	89 d8                	mov    eax,ebx
c002391b:	89 f2                	mov    edx,esi
c002391d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023921:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023924:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023928:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002392c:	83 e0 00             	and    eax,0x0
c002392f:	09 d0                	or     eax,edx
c0023931:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023939:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002393f:	8d 50 01             	lea    edx,[eax+0x1]
c0023942:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023946:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002394c:	0f b6 d0             	movzx  edx,al
c002394f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023953:	83 c2 08             	add    edx,0x8
c0023956:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002395a:	0f b6 c9             	movzx  ecx,cl
c002395d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0023963:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0023967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002396b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002396f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023979:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002397d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0023983:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023987:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002398d:	83 ec 0c             	sub    esp,0xc
c0023990:	51                   	push   ecx
c0023991:	6a 01                	push   0x1
c0023993:	68 88 37 02 c0       	push   0xc0023788
c0023998:	52                   	push   edx
c0023999:	50                   	push   eax
c002399a:	e8 07 00 ff ff       	call   c00139a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002399f:	83 c4 20             	add    esp,0x20
c00239a2:	89 c2                	mov    edx,eax
c00239a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239a8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00239ae:	b8 00 00 00 00       	mov    eax,0x0
c00239b3:	5b                   	pop    ebx
c00239b4:	5e                   	pop    esi
c00239b5:	5f                   	pop    edi
c00239b6:	c3                   	ret    
c00239b7:	90                   	nop

c00239b8 <APICTimer::APICTimer()>:
c00239b8:	83 ec 0c             	sub    esp,0xc
c00239bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239bf:	83 ec 08             	sub    esp,0x8
c00239c2:	68 dc 9f 02 c0       	push   0xc0029fdc
c00239c7:	50                   	push   eax
c00239c8:	e8 0f 27 ff ff       	call   c00160dc <Timer::Timer(char const*)>
c00239cd:	83 c4 10             	add    esp,0x10
c00239d0:	ba f0 9f 02 c0       	mov    edx,0xc0029ff0
c00239d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239d9:	89 10                	mov    DWORD PTR [eax],edx
c00239db:	90                   	nop
c00239dc:	83 c4 0c             	add    esp,0xc
c00239df:	c3                   	ret    

c00239e0 <PIT::write(int)>:
c00239e0:	83 ec 10             	sub    esp,0x10
c00239e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00239e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00239eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00239f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239f5:	a3 e4 d3 02 c0       	mov    ds:0xc002d3e4,eax
c00239fa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00239ff:	99                   	cdq    
c0023a00:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0023a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a08:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0023a0f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0023a14:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0023a18:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0023a1d:	ee                   	out    dx,al
c0023a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a22:	0f b6 c0             	movzx  eax,al
c0023a25:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0023a2c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0023a30:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0023a34:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0023a39:	ee                   	out    dx,al
c0023a3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a3e:	c1 f8 08             	sar    eax,0x8
c0023a41:	0f b6 c0             	movzx  eax,al
c0023a44:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0023a4b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0023a4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0023a53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0023a58:	ee                   	out    dx,al
c0023a59:	90                   	nop
c0023a5a:	83 c4 10             	add    esp,0x10
c0023a5d:	c3                   	ret    

c0023a5e <pitHandler(regs*, void*)>:
c0023a5e:	83 ec 0c             	sub    esp,0xc
c0023a61:	a1 e4 d3 02 c0       	mov    eax,ds:0xc002d3e4
c0023a66:	99                   	cdq    
c0023a67:	52                   	push   edx
c0023a68:	50                   	push   eax
c0023a69:	6a 00                	push   0x0
c0023a6b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0023a70:	e8 b7 04 00 00       	call   c0023f2c <__udivdi3>
c0023a75:	83 c4 10             	add    esp,0x10
c0023a78:	83 ec 08             	sub    esp,0x8
c0023a7b:	52                   	push   edx
c0023a7c:	50                   	push   eax
c0023a7d:	e8 e9 26 ff ff       	call   c001616b <timerHandler(unsigned long long)>
c0023a82:	83 c4 10             	add    esp,0x10
c0023a85:	90                   	nop
c0023a86:	83 c4 0c             	add    esp,0xc
c0023a89:	c3                   	ret    

c0023a8a <PIT::open(int, int, void*)>:
c0023a8a:	83 ec 0c             	sub    esp,0xc
c0023a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0023a93:	83 c0 24             	add    eax,0x24
c0023a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0023a98:	83 ec 08             	sub    esp,0x8
c0023a9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023aa3:	ff d0                	call   eax
c0023aa5:	83 c4 10             	add    esp,0x10
c0023aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aac:	83 ec 0c             	sub    esp,0xc
c0023aaf:	6a 00                	push   0x0
c0023ab1:	6a 01                	push   0x1
c0023ab3:	68 5e 3a 02 c0       	push   0xc0023a5e
c0023ab8:	6a 00                	push   0x0
c0023aba:	50                   	push   eax
c0023abb:	e8 e6 fe fe ff       	call   c00139a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ac0:	83 c4 20             	add    esp,0x20
c0023ac3:	89 c2                	mov    edx,eax
c0023ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ac9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023acf:	b8 00 00 00 00       	mov    eax,0x0
c0023ad4:	83 c4 0c             	add    esp,0xc
c0023ad7:	c3                   	ret    

c0023ad8 <PIT::close(int, int, void*)>:
c0023ad8:	83 ec 0c             	sub    esp,0xc
c0023adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023adf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aed:	6a 01                	push   0x1
c0023aef:	68 5e 3a 02 c0       	push   0xc0023a5e
c0023af4:	6a 00                	push   0x0
c0023af6:	50                   	push   eax
c0023af7:	e8 e8 fe fe ff       	call   c00139e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0023afc:	83 c4 10             	add    esp,0x10
c0023aff:	b8 00 00 00 00       	mov    eax,0x0
c0023b04:	83 c4 0c             	add    esp,0xc
c0023b07:	c3                   	ret    

c0023b08 <PIT::PIT()>:
c0023b08:	83 ec 0c             	sub    esp,0xc
c0023b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b0f:	83 ec 08             	sub    esp,0x8
c0023b12:	68 18 a0 02 c0       	push   0xc002a018
c0023b17:	50                   	push   eax
c0023b18:	e8 bf 25 ff ff       	call   c00160dc <Timer::Timer(char const*)>
c0023b1d:	83 c4 10             	add    esp,0x10
c0023b20:	ba 40 a0 02 c0       	mov    edx,0xc002a040
c0023b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b29:	89 10                	mov    DWORD PTR [eax],edx
c0023b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023b35:	0f b6 d0             	movzx  edx,al
c0023b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b3c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0023b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b47:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023b4d:	0f b6 d0             	movzx  edx,al
c0023b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b54:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0023b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023b63:	8d 50 01             	lea    edx,[eax+0x1]
c0023b66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023b6a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023b70:	0f b6 d0             	movzx  edx,al
c0023b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b77:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023b7b:	83 e1 3f             	and    ecx,0x3f
c0023b7e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023b82:	90                   	nop
c0023b83:	83 c4 0c             	add    esp,0xc
c0023b86:	c3                   	ret    
c0023b87:	66 90                	xchg   ax,ax
c0023b89:	66 90                	xchg   ax,ax
c0023b8b:	66 90                	xchg   ax,ax
c0023b8d:	66 90                	xchg   ax,ax
c0023b8f:	90                   	nop

c0023b90 <avxDetect>:
c0023b90:	b8 00 00 00 00       	mov    eax,0x0
c0023b95:	c3                   	ret    

c0023b96 <avxSave>:
c0023b96:	c3                   	ret    

c0023b97 <avxLoad>:
c0023b97:	c3                   	ret    

c0023b98 <avxInit>:
c0023b98:	c3                   	ret    

c0023b99 <avxClose>:
c0023b99:	c3                   	ret    

c0023b9a <wouldSheSayYes>:
c0023b9a:	c3                   	ret    
c0023b9b:	49                   	dec    ecx
c0023b9c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0023ba0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0023ba4:	75 20                	jne    c0023bc6 <sseDetect.noSSE+0x1>
c0023ba6:	4e                   	dec    esi
c0023ba7:	79 61                	jns    c0023c0a <x87Detect+0x14>
c0023ba9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0023bae:	66 90                	xchg   ax,ax

c0023bb0 <absolutelyNoChanceInHell>:
c0023bb0:	b8 01 00 00 00       	mov    eax,0x1
c0023bb5:	0f a2                	cpuid  
c0023bb7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0023bbd:	74 06                	je     c0023bc5 <sseDetect.noSSE>
c0023bbf:	b8 01 00 00 00       	mov    eax,0x1
c0023bc4:	c3                   	ret    

c0023bc5 <sseDetect.noSSE>:
c0023bc5:	31 c0                	xor    eax,eax
c0023bc7:	c3                   	ret    

c0023bc8 <sseSave>:
c0023bc8:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023bcd:	c3                   	ret    

c0023bce <sseLoad>:
c0023bce:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023bd3:	c3                   	ret    

c0023bd4 <sseInit>:
c0023bd4:	e8 43 00 00 00       	call   c0023c1c <x87Init>
c0023bd9:	0f 20 e0             	mov    eax,cr4
c0023bdc:	66 0d 00 06          	or     ax,0x600
c0023be0:	0f 22 e0             	mov    cr4,eax
c0023be3:	c3                   	ret    

c0023be4 <sseClose>:
c0023be4:	c3                   	ret    
c0023be5:	66 90                	xchg   ax,ax
c0023be7:	66 90                	xchg   ax,ax
c0023be9:	66 90                	xchg   ax,ax
c0023beb:	66 90                	xchg   ax,ax
c0023bed:	66 90                	xchg   ax,ax
c0023bef:	90                   	nop

c0023bf0 <value_37F>:
c0023bf0:	7f 03                	jg     c0023bf5 <value_37A+0x1>

c0023bf2 <value_37E>:
c0023bf2:	7e 03                	jle    c0023bf7 <x87Detect+0x1>

c0023bf4 <value_37A>:
c0023bf4:	7a 03                	jp     c0023bf9 <x87Detect+0x3>

c0023bf6 <x87Detect>:
c0023bf6:	b8 01 00 00 00       	mov    eax,0x1
c0023bfb:	0f a2                	cpuid  
c0023bfd:	f7 c2 01 00 00 00    	test   edx,0x1
c0023c03:	74 06                	je     c0023c0b <x87Detect.nox87>
c0023c05:	b8 01 00 00 00       	mov    eax,0x1
c0023c0a:	c3                   	ret    

c0023c0b <x87Detect.nox87>:
c0023c0b:	b8 00 00 00 00       	mov    eax,0x0
c0023c10:	c3                   	ret    

c0023c11 <x87Save>:
c0023c11:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023c16:	c3                   	ret    

c0023c17 <x87Load>:
c0023c17:	dd 64 24 08          	frstor [esp+0x8]
c0023c1b:	c3                   	ret    

c0023c1c <x87Init>:
c0023c1c:	9b db e3             	finit  
c0023c1f:	0f 20 c0             	mov    eax,cr0
c0023c22:	66 25 fb ff          	and    ax,0xfffb
c0023c26:	66 0d 22 00          	or     ax,0x22
c0023c2a:	0f 22 c0             	mov    cr0,eax
c0023c2d:	0f 06                	clts   
c0023c2f:	d9 2d f4 3b 02 c0    	fldcw  WORD PTR ds:0xc0023bf4
c0023c35:	c3                   	ret    

c0023c36 <x87Close>:
c0023c36:	c3                   	ret    
c0023c37:	90                   	nop

c0023c38 <__do_global_ctors_aux>:
c0023c38:	a1 e0 66 02 c0       	mov    eax,ds:0xc00266e0
c0023c3d:	83 f8 ff             	cmp    eax,0xffffffff
c0023c40:	74 1a                	je     c0023c5c <__do_global_ctors_aux+0x24>
c0023c42:	55                   	push   ebp
c0023c43:	89 e5                	mov    ebp,esp
c0023c45:	53                   	push   ebx
c0023c46:	52                   	push   edx
c0023c47:	bb e0 66 02 c0       	mov    ebx,0xc00266e0
c0023c4c:	ff d0                	call   eax
c0023c4e:	83 eb 04             	sub    ebx,0x4
c0023c51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c53:	83 f8 ff             	cmp    eax,0xffffffff
c0023c56:	75 f4                	jne    c0023c4c <__do_global_ctors_aux+0x14>
c0023c58:	58                   	pop    eax
c0023c59:	5b                   	pop    ebx
c0023c5a:	5d                   	pop    ebp
c0023c5b:	c3                   	ret    
c0023c5c:	c3                   	ret    
c0023c5d:	66 90                	xchg   ax,ax
c0023c5f:	90                   	nop

c0023c60 <__divdi3>:
c0023c60:	55                   	push   ebp
c0023c61:	57                   	push   edi
c0023c62:	56                   	push   esi
c0023c63:	53                   	push   ebx
c0023c64:	83 ec 1c             	sub    esp,0x1c
c0023c67:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023c6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c6f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0023c72:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023c76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023c7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023c7e:	85 db                	test   ebx,ebx
c0023c80:	0f 88 8e 00 00 00    	js     c0023d14 <__divdi3+0xb4>
c0023c86:	89 dd                	mov    ebp,ebx
c0023c88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023c90:	89 d3                	mov    ebx,edx
c0023c92:	85 d2                	test   edx,edx
c0023c94:	79 0d                	jns    c0023ca3 <__divdi3+0x43>
c0023c96:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0023c9a:	f7 d8                	neg    eax
c0023c9c:	83 d2 00             	adc    edx,0x0
c0023c9f:	f7 da                	neg    edx
c0023ca1:	89 d3                	mov    ebx,edx
c0023ca3:	89 c7                	mov    edi,eax
c0023ca5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023ca8:	85 db                	test   ebx,ebx
c0023caa:	75 48                	jne    c0023cf4 <__divdi3+0x94>
c0023cac:	39 ef                	cmp    edi,ebp
c0023cae:	76 24                	jbe    c0023cd4 <__divdi3+0x74>
c0023cb0:	89 ea                	mov    edx,ebp
c0023cb2:	f7 f7                	div    edi
c0023cb4:	89 c1                	mov    ecx,eax
c0023cb6:	31 f6                	xor    esi,esi
c0023cb8:	89 c8                	mov    eax,ecx
c0023cba:	89 f2                	mov    edx,esi
c0023cbc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cc0:	85 c9                	test   ecx,ecx
c0023cc2:	74 07                	je     c0023ccb <__divdi3+0x6b>
c0023cc4:	f7 d8                	neg    eax
c0023cc6:	83 d2 00             	adc    edx,0x0
c0023cc9:	f7 da                	neg    edx
c0023ccb:	83 c4 1c             	add    esp,0x1c
c0023cce:	5b                   	pop    ebx
c0023ccf:	5e                   	pop    esi
c0023cd0:	5f                   	pop    edi
c0023cd1:	5d                   	pop    ebp
c0023cd2:	c3                   	ret    
c0023cd3:	90                   	nop
c0023cd4:	85 ff                	test   edi,edi
c0023cd6:	75 0b                	jne    c0023ce3 <__divdi3+0x83>
c0023cd8:	b8 01 00 00 00       	mov    eax,0x1
c0023cdd:	31 d2                	xor    edx,edx
c0023cdf:	f7 f3                	div    ebx
c0023ce1:	89 c7                	mov    edi,eax
c0023ce3:	31 d2                	xor    edx,edx
c0023ce5:	89 e8                	mov    eax,ebp
c0023ce7:	f7 f7                	div    edi
c0023ce9:	89 c6                	mov    esi,eax
c0023ceb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023cee:	f7 f7                	div    edi
c0023cf0:	89 c1                	mov    ecx,eax
c0023cf2:	eb c4                	jmp    c0023cb8 <__divdi3+0x58>
c0023cf4:	39 eb                	cmp    ebx,ebp
c0023cf6:	77 3c                	ja     c0023d34 <__divdi3+0xd4>
c0023cf8:	0f bd f3             	bsr    esi,ebx
c0023cfb:	83 f6 1f             	xor    esi,0x1f
c0023cfe:	75 40                	jne    c0023d40 <__divdi3+0xe0>
c0023d00:	39 eb                	cmp    ebx,ebp
c0023d02:	72 09                	jb     c0023d0d <__divdi3+0xad>
c0023d04:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023d07:	0f 87 97 00 00 00    	ja     c0023da4 <__divdi3+0x144>
c0023d0d:	b9 01 00 00 00       	mov    ecx,0x1
c0023d12:	eb a4                	jmp    c0023cb8 <__divdi3+0x58>
c0023d14:	f7 d9                	neg    ecx
c0023d16:	83 d3 00             	adc    ebx,0x0
c0023d19:	f7 db                	neg    ebx
c0023d1b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0023d1e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023d22:	89 dd                	mov    ebp,ebx
c0023d24:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0023d2c:	e9 5f ff ff ff       	jmp    c0023c90 <__divdi3+0x30>
c0023d31:	8d 76 00             	lea    esi,[esi+0x0]
c0023d34:	31 f6                	xor    esi,esi
c0023d36:	31 c9                	xor    ecx,ecx
c0023d38:	e9 7b ff ff ff       	jmp    c0023cb8 <__divdi3+0x58>
c0023d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0023d40:	b8 20 00 00 00       	mov    eax,0x20
c0023d45:	29 f0                	sub    eax,esi
c0023d47:	89 f1                	mov    ecx,esi
c0023d49:	d3 e3                	shl    ebx,cl
c0023d4b:	89 fa                	mov    edx,edi
c0023d4d:	88 c1                	mov    cl,al
c0023d4f:	d3 ea                	shr    edx,cl
c0023d51:	09 da                	or     edx,ebx
c0023d53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023d57:	89 f1                	mov    ecx,esi
c0023d59:	d3 e7                	shl    edi,cl
c0023d5b:	89 eb                	mov    ebx,ebp
c0023d5d:	88 c1                	mov    cl,al
c0023d5f:	d3 eb                	shr    ebx,cl
c0023d61:	89 f1                	mov    ecx,esi
c0023d63:	d3 e5                	shl    ebp,cl
c0023d65:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023d68:	88 c1                	mov    cl,al
c0023d6a:	d3 ea                	shr    edx,cl
c0023d6c:	09 d5                	or     ebp,edx
c0023d6e:	89 e8                	mov    eax,ebp
c0023d70:	89 da                	mov    edx,ebx
c0023d72:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0023d76:	89 d3                	mov    ebx,edx
c0023d78:	89 c5                	mov    ebp,eax
c0023d7a:	f7 e7                	mul    edi
c0023d7c:	39 d3                	cmp    ebx,edx
c0023d7e:	72 18                	jb     c0023d98 <__divdi3+0x138>
c0023d80:	74 0a                	je     c0023d8c <__divdi3+0x12c>
c0023d82:	89 e9                	mov    ecx,ebp
c0023d84:	31 f6                	xor    esi,esi
c0023d86:	e9 2d ff ff ff       	jmp    c0023cb8 <__divdi3+0x58>
c0023d8b:	90                   	nop
c0023d8c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023d8f:	89 f1                	mov    ecx,esi
c0023d91:	d3 e7                	shl    edi,cl
c0023d93:	39 c7                	cmp    edi,eax
c0023d95:	73 eb                	jae    c0023d82 <__divdi3+0x122>
c0023d97:	90                   	nop
c0023d98:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0023d9b:	31 f6                	xor    esi,esi
c0023d9d:	e9 16 ff ff ff       	jmp    c0023cb8 <__divdi3+0x58>
c0023da2:	66 90                	xchg   ax,ax
c0023da4:	31 c9                	xor    ecx,ecx
c0023da6:	e9 0d ff ff ff       	jmp    c0023cb8 <__divdi3+0x58>
c0023dab:	90                   	nop

c0023dac <__moddi3>:
c0023dac:	55                   	push   ebp
c0023dad:	57                   	push   edi
c0023dae:	56                   	push   esi
c0023daf:	53                   	push   ebx
c0023db0:	83 ec 2c             	sub    esp,0x2c
c0023db3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023db7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0023dbb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0023dbf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0023dc3:	85 db                	test   ebx,ebx
c0023dc5:	0f 88 85 00 00 00    	js     c0023e50 <__moddi3+0xa4>
c0023dcb:	89 de                	mov    esi,ebx
c0023dcd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023dd5:	89 d7                	mov    edi,edx
c0023dd7:	85 d2                	test   edx,edx
c0023dd9:	79 09                	jns    c0023de4 <__moddi3+0x38>
c0023ddb:	f7 d8                	neg    eax
c0023ddd:	83 d2 00             	adc    edx,0x0
c0023de0:	f7 da                	neg    edx
c0023de2:	89 d7                	mov    edi,edx
c0023de4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023de8:	89 cd                	mov    ebp,ecx
c0023dea:	85 ff                	test   edi,edi
c0023dec:	75 52                	jne    c0023e40 <__moddi3+0x94>
c0023dee:	89 c3                	mov    ebx,eax
c0023df0:	39 f0                	cmp    eax,esi
c0023df2:	76 24                	jbe    c0023e18 <__moddi3+0x6c>
c0023df4:	89 c8                	mov    eax,ecx
c0023df6:	89 f2                	mov    edx,esi
c0023df8:	f7 f3                	div    ebx
c0023dfa:	89 d6                	mov    esi,edx
c0023dfc:	89 f0                	mov    eax,esi
c0023dfe:	31 d2                	xor    edx,edx
c0023e00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023e04:	85 c9                	test   ecx,ecx
c0023e06:	74 07                	je     c0023e0f <__moddi3+0x63>
c0023e08:	f7 d8                	neg    eax
c0023e0a:	83 d2 00             	adc    edx,0x0
c0023e0d:	f7 da                	neg    edx
c0023e0f:	83 c4 2c             	add    esp,0x2c
c0023e12:	5b                   	pop    ebx
c0023e13:	5e                   	pop    esi
c0023e14:	5f                   	pop    edi
c0023e15:	5d                   	pop    ebp
c0023e16:	c3                   	ret    
c0023e17:	90                   	nop
c0023e18:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023e1c:	85 db                	test   ebx,ebx
c0023e1e:	75 0d                	jne    c0023e2d <__moddi3+0x81>
c0023e20:	b8 01 00 00 00       	mov    eax,0x1
c0023e25:	31 d2                	xor    edx,edx
c0023e27:	f7 f7                	div    edi
c0023e29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e2d:	89 f0                	mov    eax,esi
c0023e2f:	31 d2                	xor    edx,edx
c0023e31:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023e35:	f7 f7                	div    edi
c0023e37:	89 e8                	mov    eax,ebp
c0023e39:	f7 f7                	div    edi
c0023e3b:	89 d6                	mov    esi,edx
c0023e3d:	eb bd                	jmp    c0023dfc <__moddi3+0x50>
c0023e3f:	90                   	nop
c0023e40:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023e44:	39 f7                	cmp    edi,esi
c0023e46:	76 20                	jbe    c0023e68 <__moddi3+0xbc>
c0023e48:	89 c8                	mov    eax,ecx
c0023e4a:	89 f2                	mov    edx,esi
c0023e4c:	eb b2                	jmp    c0023e00 <__moddi3+0x54>
c0023e4e:	66 90                	xchg   ax,ax
c0023e50:	f7 d9                	neg    ecx
c0023e52:	83 d3 00             	adc    ebx,0x0
c0023e55:	f7 db                	neg    ebx
c0023e57:	89 de                	mov    esi,ebx
c0023e59:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023e61:	e9 6f ff ff ff       	jmp    c0023dd5 <__moddi3+0x29>
c0023e66:	66 90                	xchg   ax,ax
c0023e68:	0f bd c7             	bsr    eax,edi
c0023e6b:	83 f0 1f             	xor    eax,0x1f
c0023e6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e72:	75 24                	jne    c0023e98 <__moddi3+0xec>
c0023e74:	39 f7                	cmp    edi,esi
c0023e76:	72 06                	jb     c0023e7e <__moddi3+0xd2>
c0023e78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0023e7c:	77 0c                	ja     c0023e8a <__moddi3+0xde>
c0023e7e:	89 e9                	mov    ecx,ebp
c0023e80:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0023e84:	19 fe                	sbb    esi,edi
c0023e86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023e8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e8e:	89 f2                	mov    edx,esi
c0023e90:	e9 6b ff ff ff       	jmp    c0023e00 <__moddi3+0x54>
c0023e95:	8d 76 00             	lea    esi,[esi+0x0]
c0023e98:	b8 20 00 00 00       	mov    eax,0x20
c0023e9d:	89 c2                	mov    edx,eax
c0023e9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023ea3:	29 da                	sub    edx,ebx
c0023ea5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023ea9:	88 d9                	mov    cl,bl
c0023eab:	d3 e7                	shl    edi,cl
c0023ead:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023eb1:	88 d1                	mov    cl,dl
c0023eb3:	d3 e8                	shr    eax,cl
c0023eb5:	09 c7                	or     edi,eax
c0023eb7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0023ebb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023ebf:	89 d8                	mov    eax,ebx
c0023ec1:	88 d9                	mov    cl,bl
c0023ec3:	d3 e7                	shl    edi,cl
c0023ec5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023ec9:	89 f3                	mov    ebx,esi
c0023ecb:	88 d1                	mov    cl,dl
c0023ecd:	d3 eb                	shr    ebx,cl
c0023ecf:	89 c7                	mov    edi,eax
c0023ed1:	88 c1                	mov    cl,al
c0023ed3:	d3 e6                	shl    esi,cl
c0023ed5:	89 e8                	mov    eax,ebp
c0023ed7:	88 d1                	mov    cl,dl
c0023ed9:	d3 e8                	shr    eax,cl
c0023edb:	09 f0                	or     eax,esi
c0023edd:	89 f9                	mov    ecx,edi
c0023edf:	d3 e5                	shl    ebp,cl
c0023ee1:	89 da                	mov    edx,ebx
c0023ee3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023ee7:	89 d3                	mov    ebx,edx
c0023ee9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023eed:	89 c6                	mov    esi,eax
c0023eef:	89 d1                	mov    ecx,edx
c0023ef1:	39 d3                	cmp    ebx,edx
c0023ef3:	72 27                	jb     c0023f1c <__moddi3+0x170>
c0023ef5:	74 21                	je     c0023f18 <__moddi3+0x16c>
c0023ef7:	29 f5                	sub    ebp,esi
c0023ef9:	19 cb                	sbb    ebx,ecx
c0023efb:	89 de                	mov    esi,ebx
c0023efd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023f01:	d3 e6                	shl    esi,cl
c0023f03:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023f07:	89 f9                	mov    ecx,edi
c0023f09:	d3 ed                	shr    ebp,cl
c0023f0b:	09 ee                	or     esi,ebp
c0023f0d:	89 f0                	mov    eax,esi
c0023f0f:	d3 eb                	shr    ebx,cl
c0023f11:	89 da                	mov    edx,ebx
c0023f13:	e9 e8 fe ff ff       	jmp    c0023e00 <__moddi3+0x54>
c0023f18:	39 c5                	cmp    ebp,eax
c0023f1a:	73 db                	jae    c0023ef7 <__moddi3+0x14b>
c0023f1c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023f20:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023f24:	89 d1                	mov    ecx,edx
c0023f26:	89 c6                	mov    esi,eax
c0023f28:	eb cd                	jmp    c0023ef7 <__moddi3+0x14b>
c0023f2a:	66 90                	xchg   ax,ax

c0023f2c <__udivdi3>:
c0023f2c:	55                   	push   ebp
c0023f2d:	57                   	push   edi
c0023f2e:	56                   	push   esi
c0023f2f:	53                   	push   ebx
c0023f30:	83 ec 1c             	sub    esp,0x1c
c0023f33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023f37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023f3b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023f3f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023f43:	85 d2                	test   edx,edx
c0023f45:	75 41                	jne    c0023f88 <__udivdi3+0x5c>
c0023f47:	39 f7                	cmp    edi,esi
c0023f49:	76 15                	jbe    c0023f60 <__udivdi3+0x34>
c0023f4b:	89 e8                	mov    eax,ebp
c0023f4d:	89 f2                	mov    edx,esi
c0023f4f:	f7 f7                	div    edi
c0023f51:	31 db                	xor    ebx,ebx
c0023f53:	89 da                	mov    edx,ebx
c0023f55:	83 c4 1c             	add    esp,0x1c
c0023f58:	5b                   	pop    ebx
c0023f59:	5e                   	pop    esi
c0023f5a:	5f                   	pop    edi
c0023f5b:	5d                   	pop    ebp
c0023f5c:	c3                   	ret    
c0023f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0023f60:	89 f9                	mov    ecx,edi
c0023f62:	85 ff                	test   edi,edi
c0023f64:	75 0b                	jne    c0023f71 <__udivdi3+0x45>
c0023f66:	b8 01 00 00 00       	mov    eax,0x1
c0023f6b:	31 d2                	xor    edx,edx
c0023f6d:	f7 f7                	div    edi
c0023f6f:	89 c1                	mov    ecx,eax
c0023f71:	31 d2                	xor    edx,edx
c0023f73:	89 f0                	mov    eax,esi
c0023f75:	f7 f1                	div    ecx
c0023f77:	89 c3                	mov    ebx,eax
c0023f79:	89 e8                	mov    eax,ebp
c0023f7b:	f7 f1                	div    ecx
c0023f7d:	89 da                	mov    edx,ebx
c0023f7f:	83 c4 1c             	add    esp,0x1c
c0023f82:	5b                   	pop    ebx
c0023f83:	5e                   	pop    esi
c0023f84:	5f                   	pop    edi
c0023f85:	5d                   	pop    ebp
c0023f86:	c3                   	ret    
c0023f87:	90                   	nop
c0023f88:	39 f2                	cmp    edx,esi
c0023f8a:	77 1c                	ja     c0023fa8 <__udivdi3+0x7c>
c0023f8c:	0f bd da             	bsr    ebx,edx
c0023f8f:	83 f3 1f             	xor    ebx,0x1f
c0023f92:	75 24                	jne    c0023fb8 <__udivdi3+0x8c>
c0023f94:	39 f2                	cmp    edx,esi
c0023f96:	72 08                	jb     c0023fa0 <__udivdi3+0x74>
c0023f98:	39 ef                	cmp    edi,ebp
c0023f9a:	0f 87 84 00 00 00    	ja     c0024024 <__udivdi3+0xf8>
c0023fa0:	b8 01 00 00 00       	mov    eax,0x1
c0023fa5:	eb ac                	jmp    c0023f53 <__udivdi3+0x27>
c0023fa7:	90                   	nop
c0023fa8:	31 db                	xor    ebx,ebx
c0023faa:	31 c0                	xor    eax,eax
c0023fac:	89 da                	mov    edx,ebx
c0023fae:	83 c4 1c             	add    esp,0x1c
c0023fb1:	5b                   	pop    ebx
c0023fb2:	5e                   	pop    esi
c0023fb3:	5f                   	pop    edi
c0023fb4:	5d                   	pop    ebp
c0023fb5:	c3                   	ret    
c0023fb6:	66 90                	xchg   ax,ax
c0023fb8:	b8 20 00 00 00       	mov    eax,0x20
c0023fbd:	29 d8                	sub    eax,ebx
c0023fbf:	88 d9                	mov    cl,bl
c0023fc1:	d3 e2                	shl    edx,cl
c0023fc3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0023fc7:	89 fa                	mov    edx,edi
c0023fc9:	88 c1                	mov    cl,al
c0023fcb:	d3 ea                	shr    edx,cl
c0023fcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023fd1:	09 d1                	or     ecx,edx
c0023fd3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023fd7:	88 d9                	mov    cl,bl
c0023fd9:	d3 e7                	shl    edi,cl
c0023fdb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023fdf:	89 f7                	mov    edi,esi
c0023fe1:	88 c1                	mov    cl,al
c0023fe3:	d3 ef                	shr    edi,cl
c0023fe5:	88 d9                	mov    cl,bl
c0023fe7:	d3 e6                	shl    esi,cl
c0023fe9:	89 ea                	mov    edx,ebp
c0023feb:	88 c1                	mov    cl,al
c0023fed:	d3 ea                	shr    edx,cl
c0023fef:	09 d6                	or     esi,edx
c0023ff1:	89 f0                	mov    eax,esi
c0023ff3:	89 fa                	mov    edx,edi
c0023ff5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023ff9:	89 d7                	mov    edi,edx
c0023ffb:	89 c6                	mov    esi,eax
c0023ffd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024001:	39 d7                	cmp    edi,edx
c0024003:	72 13                	jb     c0024018 <__udivdi3+0xec>
c0024005:	74 09                	je     c0024010 <__udivdi3+0xe4>
c0024007:	89 f0                	mov    eax,esi
c0024009:	31 db                	xor    ebx,ebx
c002400b:	e9 43 ff ff ff       	jmp    c0023f53 <__udivdi3+0x27>
c0024010:	88 d9                	mov    cl,bl
c0024012:	d3 e5                	shl    ebp,cl
c0024014:	39 c5                	cmp    ebp,eax
c0024016:	73 ef                	jae    c0024007 <__udivdi3+0xdb>
c0024018:	8d 46 ff             	lea    eax,[esi-0x1]
c002401b:	31 db                	xor    ebx,ebx
c002401d:	e9 31 ff ff ff       	jmp    c0023f53 <__udivdi3+0x27>
c0024022:	66 90                	xchg   ax,ax
c0024024:	31 c0                	xor    eax,eax
c0024026:	e9 28 ff ff ff       	jmp    c0023f53 <__udivdi3+0x27>
c002402b:	90                   	nop

c002402c <__umoddi3>:
c002402c:	55                   	push   ebp
c002402d:	57                   	push   edi
c002402e:	56                   	push   esi
c002402f:	53                   	push   ebx
c0024030:	83 ec 1c             	sub    esp,0x1c
c0024033:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024037:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002403b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002403f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024043:	89 da                	mov    edx,ebx
c0024045:	85 c0                	test   eax,eax
c0024047:	75 37                	jne    c0024080 <__umoddi3+0x54>
c0024049:	39 df                	cmp    edi,ebx
c002404b:	76 13                	jbe    c0024060 <__umoddi3+0x34>
c002404d:	89 f0                	mov    eax,esi
c002404f:	f7 f7                	div    edi
c0024051:	89 d0                	mov    eax,edx
c0024053:	31 d2                	xor    edx,edx
c0024055:	83 c4 1c             	add    esp,0x1c
c0024058:	5b                   	pop    ebx
c0024059:	5e                   	pop    esi
c002405a:	5f                   	pop    edi
c002405b:	5d                   	pop    ebp
c002405c:	c3                   	ret    
c002405d:	8d 76 00             	lea    esi,[esi+0x0]
c0024060:	89 fd                	mov    ebp,edi
c0024062:	85 ff                	test   edi,edi
c0024064:	75 0b                	jne    c0024071 <__umoddi3+0x45>
c0024066:	b8 01 00 00 00       	mov    eax,0x1
c002406b:	31 d2                	xor    edx,edx
c002406d:	f7 f7                	div    edi
c002406f:	89 c5                	mov    ebp,eax
c0024071:	89 d8                	mov    eax,ebx
c0024073:	31 d2                	xor    edx,edx
c0024075:	f7 f5                	div    ebp
c0024077:	89 f0                	mov    eax,esi
c0024079:	f7 f5                	div    ebp
c002407b:	89 d0                	mov    eax,edx
c002407d:	eb d4                	jmp    c0024053 <__umoddi3+0x27>
c002407f:	90                   	nop
c0024080:	89 f1                	mov    ecx,esi
c0024082:	39 d8                	cmp    eax,ebx
c0024084:	76 0a                	jbe    c0024090 <__umoddi3+0x64>
c0024086:	89 f0                	mov    eax,esi
c0024088:	83 c4 1c             	add    esp,0x1c
c002408b:	5b                   	pop    ebx
c002408c:	5e                   	pop    esi
c002408d:	5f                   	pop    edi
c002408e:	5d                   	pop    ebp
c002408f:	c3                   	ret    
c0024090:	0f bd e8             	bsr    ebp,eax
c0024093:	83 f5 1f             	xor    ebp,0x1f
c0024096:	75 1c                	jne    c00240b4 <__umoddi3+0x88>
c0024098:	39 d8                	cmp    eax,ebx
c002409a:	72 04                	jb     c00240a0 <__umoddi3+0x74>
c002409c:	39 f7                	cmp    edi,esi
c002409e:	77 08                	ja     c00240a8 <__umoddi3+0x7c>
c00240a0:	89 da                	mov    edx,ebx
c00240a2:	29 fe                	sub    esi,edi
c00240a4:	19 c2                	sbb    edx,eax
c00240a6:	89 f1                	mov    ecx,esi
c00240a8:	89 c8                	mov    eax,ecx
c00240aa:	83 c4 1c             	add    esp,0x1c
c00240ad:	5b                   	pop    ebx
c00240ae:	5e                   	pop    esi
c00240af:	5f                   	pop    edi
c00240b0:	5d                   	pop    ebp
c00240b1:	c3                   	ret    
c00240b2:	66 90                	xchg   ax,ax
c00240b4:	ba 20 00 00 00       	mov    edx,0x20
c00240b9:	29 ea                	sub    edx,ebp
c00240bb:	89 e9                	mov    ecx,ebp
c00240bd:	d3 e0                	shl    eax,cl
c00240bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240c3:	89 f8                	mov    eax,edi
c00240c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00240c9:	88 d1                	mov    cl,dl
c00240cb:	d3 e8                	shr    eax,cl
c00240cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240d1:	09 c1                	or     ecx,eax
c00240d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00240d7:	89 e9                	mov    ecx,ebp
c00240d9:	d3 e7                	shl    edi,cl
c00240db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00240df:	89 d8                	mov    eax,ebx
c00240e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00240e5:	88 d1                	mov    cl,dl
c00240e7:	d3 e8                	shr    eax,cl
c00240e9:	89 c7                	mov    edi,eax
c00240eb:	89 e9                	mov    ecx,ebp
c00240ed:	d3 e3                	shl    ebx,cl
c00240ef:	89 f0                	mov    eax,esi
c00240f1:	88 d1                	mov    cl,dl
c00240f3:	d3 e8                	shr    eax,cl
c00240f5:	09 d8                	or     eax,ebx
c00240f7:	89 e9                	mov    ecx,ebp
c00240f9:	d3 e6                	shl    esi,cl
c00240fb:	89 f3                	mov    ebx,esi
c00240fd:	89 fa                	mov    edx,edi
c00240ff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024103:	89 d1                	mov    ecx,edx
c0024105:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024109:	89 c6                	mov    esi,eax
c002410b:	89 d7                	mov    edi,edx
c002410d:	39 d1                	cmp    ecx,edx
c002410f:	72 27                	jb     c0024138 <__umoddi3+0x10c>
c0024111:	74 21                	je     c0024134 <__umoddi3+0x108>
c0024113:	89 ca                	mov    edx,ecx
c0024115:	29 f3                	sub    ebx,esi
c0024117:	19 fa                	sbb    edx,edi
c0024119:	89 d0                	mov    eax,edx
c002411b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002411f:	d3 e0                	shl    eax,cl
c0024121:	89 e9                	mov    ecx,ebp
c0024123:	d3 eb                	shr    ebx,cl
c0024125:	09 d8                	or     eax,ebx
c0024127:	d3 ea                	shr    edx,cl
c0024129:	83 c4 1c             	add    esp,0x1c
c002412c:	5b                   	pop    ebx
c002412d:	5e                   	pop    esi
c002412e:	5f                   	pop    edi
c002412f:	5d                   	pop    ebp
c0024130:	c3                   	ret    
c0024131:	8d 76 00             	lea    esi,[esi+0x0]
c0024134:	39 c3                	cmp    ebx,eax
c0024136:	73 db                	jae    c0024113 <__umoddi3+0xe7>
c0024138:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002413c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0024140:	89 d7                	mov    edi,edx
c0024142:	89 c6                	mov    esi,eax
c0024144:	eb cd                	jmp    c0024113 <__umoddi3+0xe7>

c0024146 <__addsf3>:
c0024146:	55                   	push   ebp
c0024147:	89 e5                	mov    ebp,esp
c0024149:	57                   	push   edi
c002414a:	56                   	push   esi
c002414b:	53                   	push   ebx
c002414c:	83 ec 08             	sub    esp,0x8
c002414f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024152:	89 fa                	mov    edx,edi
c0024154:	89 f8                	mov    eax,edi
c0024156:	c1 f8 17             	sar    eax,0x17
c0024159:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002415c:	c1 e2 08             	shl    edx,0x8
c002415f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024165:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024168:	89 de                	mov    esi,ebx
c002416a:	c1 fe 17             	sar    esi,0x17
c002416d:	c1 e3 08             	shl    ebx,0x8
c0024170:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024176:	31 f0                	xor    eax,esi
c0024178:	0f 88 3b 01 00 00    	js     c00242b9 <__addsf3+0x173>
c002417e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0024181:	29 f1                	sub    ecx,esi
c0024183:	85 c9                	test   ecx,ecx
c0024185:	7e 54                	jle    c00241db <__addsf3+0x95>
c0024187:	89 f0                	mov    eax,esi
c0024189:	84 c0                	test   al,al
c002418b:	75 10                	jne    c002419d <__addsf3+0x57>
c002418d:	85 db                	test   ebx,ebx
c002418f:	0f 84 aa 02 00 00    	je     c002443f <__addsf3+0x2f9>
c0024195:	49                   	dec    ecx
c0024196:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024199:	74 38                	je     c00241d3 <__addsf3+0x8d>
c002419b:	eb 13                	jmp    c00241b0 <__addsf3+0x6a>
c002419d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00241a0:	f7 d0                	not    eax
c00241a2:	84 c0                	test   al,al
c00241a4:	0f 84 95 02 00 00    	je     c002443f <__addsf3+0x2f9>
c00241aa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00241b0:	83 f9 1f             	cmp    ecx,0x1f
c00241b3:	0f 8f 86 02 00 00    	jg     c002443f <__addsf3+0x2f9>
c00241b9:	89 de                	mov    esi,ebx
c00241bb:	d3 ee                	shr    esi,cl
c00241bd:	b8 20 00 00 00       	mov    eax,0x20
c00241c2:	29 c8                	sub    eax,ecx
c00241c4:	89 c1                	mov    ecx,eax
c00241c6:	d3 e3                	shl    ebx,cl
c00241c8:	31 c0                	xor    eax,eax
c00241ca:	85 db                	test   ebx,ebx
c00241cc:	0f 95 c0             	setne  al
c00241cf:	09 f0                	or     eax,esi
c00241d1:	01 d0                	add    eax,edx
c00241d3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00241d6:	e9 b6 00 00 00       	jmp    c0024291 <__addsf3+0x14b>
c00241db:	74 5c                	je     c0024239 <__addsf3+0xf3>
c00241dd:	89 f1                	mov    ecx,esi
c00241df:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00241e2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00241e5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00241e9:	75 14                	jne    c00241ff <__addsf3+0xb9>
c00241eb:	85 d2                	test   edx,edx
c00241ed:	0f 84 4c 02 00 00    	je     c002443f <__addsf3+0x2f9>
c00241f3:	49                   	dec    ecx
c00241f4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00241f7:	0f 84 94 00 00 00    	je     c0024291 <__addsf3+0x14b>
c00241fd:	eb 12                	jmp    c0024211 <__addsf3+0xcb>
c00241ff:	89 f0                	mov    eax,esi
c0024201:	f7 d0                	not    eax
c0024203:	84 c0                	test   al,al
c0024205:	0f 84 34 02 00 00    	je     c002443f <__addsf3+0x2f9>
c002420b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024211:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024214:	83 f9 1f             	cmp    ecx,0x1f
c0024217:	0f 8f 22 02 00 00    	jg     c002443f <__addsf3+0x2f9>
c002421d:	89 d7                	mov    edi,edx
c002421f:	d3 ef                	shr    edi,cl
c0024221:	b8 20 00 00 00       	mov    eax,0x20
c0024226:	29 c8                	sub    eax,ecx
c0024228:	89 c1                	mov    ecx,eax
c002422a:	d3 e2                	shl    edx,cl
c002422c:	31 c0                	xor    eax,eax
c002422e:	85 d2                	test   edx,edx
c0024230:	0f 95 c0             	setne  al
c0024233:	09 f8                	or     eax,edi
c0024235:	01 d8                	add    eax,ebx
c0024237:	eb 58                	jmp    c0024291 <__addsf3+0x14b>
c0024239:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002423c:	8d 70 01             	lea    esi,[eax+0x1]
c002423f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0024245:	75 32                	jne    c0024279 <__addsf3+0x133>
c0024247:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002424b:	75 1f                	jne    c002426c <__addsf3+0x126>
c002424d:	85 d2                	test   edx,edx
c002424f:	0f 84 e0 01 00 00    	je     c0024435 <__addsf3+0x2ef>
c0024255:	85 db                	test   ebx,ebx
c0024257:	0f 84 e2 01 00 00    	je     c002443f <__addsf3+0x2f9>
c002425d:	89 d0                	mov    eax,edx
c002425f:	01 d8                	add    eax,ebx
c0024261:	0f 89 a9 01 00 00    	jns    c0024410 <__addsf3+0x2ca>
c0024267:	e9 9d 01 00 00       	jmp    c0024409 <__addsf3+0x2c3>
c002426c:	85 d2                	test   edx,edx
c002426e:	0f 85 cb 01 00 00    	jne    c002443f <__addsf3+0x2f9>
c0024274:	e9 bc 01 00 00       	jmp    c0024435 <__addsf3+0x2ef>
c0024279:	31 c0                	xor    eax,eax
c002427b:	89 f1                	mov    ecx,esi
c002427d:	f7 d1                	not    ecx
c002427f:	84 c9                	test   cl,cl
c0024281:	0f 84 90 01 00 00    	je     c0024417 <__addsf3+0x2d1>
c0024287:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002428a:	d1 e8                	shr    eax,1
c002428c:	e9 86 01 00 00       	jmp    c0024417 <__addsf3+0x2d1>
c0024291:	85 c0                	test   eax,eax
c0024293:	0f 89 7e 01 00 00    	jns    c0024417 <__addsf3+0x2d1>
c0024299:	46                   	inc    esi
c002429a:	89 f2                	mov    edx,esi
c002429c:	f7 d2                	not    edx
c002429e:	84 d2                	test   dl,dl
c00242a0:	0f 84 6f 01 00 00    	je     c0024415 <__addsf3+0x2cf>
c00242a6:	89 c2                	mov    edx,eax
c00242a8:	83 e2 01             	and    edx,0x1
c00242ab:	d1 e8                	shr    eax,1
c00242ad:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00242b2:	09 d0                	or     eax,edx
c00242b4:	e9 5e 01 00 00       	jmp    c0024417 <__addsf3+0x2d1>
c00242b9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00242bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00242c0:	89 f0                	mov    eax,esi
c00242c2:	0f b6 c0             	movzx  eax,al
c00242c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00242c8:	29 c1                	sub    ecx,eax
c00242ca:	85 c9                	test   ecx,ecx
c00242cc:	7e 55                	jle    c0024323 <__addsf3+0x1dd>
c00242ce:	85 c0                	test   eax,eax
c00242d0:	75 11                	jne    c00242e3 <__addsf3+0x19d>
c00242d2:	85 db                	test   ebx,ebx
c00242d4:	0f 84 65 01 00 00    	je     c002443f <__addsf3+0x2f9>
c00242da:	49                   	dec    ecx
c00242db:	75 19                	jne    c00242f6 <__addsf3+0x1b0>
c00242dd:	89 d0                	mov    eax,edx
c00242df:	29 d8                	sub    eax,ebx
c00242e1:	eb 38                	jmp    c002431b <__addsf3+0x1d5>
c00242e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00242e6:	f7 d0                	not    eax
c00242e8:	84 c0                	test   al,al
c00242ea:	0f 84 4f 01 00 00    	je     c002443f <__addsf3+0x2f9>
c00242f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00242f6:	83 f9 1f             	cmp    ecx,0x1f
c00242f9:	0f 8f 40 01 00 00    	jg     c002443f <__addsf3+0x2f9>
c00242ff:	89 de                	mov    esi,ebx
c0024301:	d3 ee                	shr    esi,cl
c0024303:	b8 20 00 00 00       	mov    eax,0x20
c0024308:	29 c8                	sub    eax,ecx
c002430a:	89 c1                	mov    ecx,eax
c002430c:	d3 e3                	shl    ebx,cl
c002430e:	31 c0                	xor    eax,eax
c0024310:	85 db                	test   ebx,ebx
c0024312:	0f 95 c0             	setne  al
c0024315:	09 f0                	or     eax,esi
c0024317:	29 c2                	sub    edx,eax
c0024319:	89 d0                	mov    eax,edx
c002431b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002431e:	e9 af 00 00 00       	jmp    c00243d2 <__addsf3+0x28c>
c0024323:	74 5c                	je     c0024381 <__addsf3+0x23b>
c0024325:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0024328:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002432b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002432f:	75 14                	jne    c0024345 <__addsf3+0x1ff>
c0024331:	85 d2                	test   edx,edx
c0024333:	0f 84 06 01 00 00    	je     c002443f <__addsf3+0x2f9>
c0024339:	48                   	dec    eax
c002433a:	75 1b                	jne    c0024357 <__addsf3+0x211>
c002433c:	89 d8                	mov    eax,ebx
c002433e:	29 d0                	sub    eax,edx
c0024340:	e9 8d 00 00 00       	jmp    c00243d2 <__addsf3+0x28c>
c0024345:	89 f1                	mov    ecx,esi
c0024347:	f7 d1                	not    ecx
c0024349:	84 c9                	test   cl,cl
c002434b:	0f 84 ee 00 00 00    	je     c002443f <__addsf3+0x2f9>
c0024351:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024357:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002435a:	83 f8 1f             	cmp    eax,0x1f
c002435d:	0f 8f dc 00 00 00    	jg     c002443f <__addsf3+0x2f9>
c0024363:	89 d7                	mov    edi,edx
c0024365:	88 c1                	mov    cl,al
c0024367:	d3 ef                	shr    edi,cl
c0024369:	b9 20 00 00 00       	mov    ecx,0x20
c002436e:	29 c1                	sub    ecx,eax
c0024370:	d3 e2                	shl    edx,cl
c0024372:	31 c0                	xor    eax,eax
c0024374:	85 d2                	test   edx,edx
c0024376:	0f 95 c0             	setne  al
c0024379:	09 f8                	or     eax,edi
c002437b:	29 c3                	sub    ebx,eax
c002437d:	89 d8                	mov    eax,ebx
c002437f:	eb 51                	jmp    c00243d2 <__addsf3+0x28c>
c0024381:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024384:	40                   	inc    eax
c0024385:	a8 fe                	test   al,0xfe
c0024387:	75 3d                	jne    c00243c6 <__addsf3+0x280>
c0024389:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002438d:	0f 85 a7 00 00 00    	jne    c002443a <__addsf3+0x2f4>
c0024393:	85 d2                	test   edx,edx
c0024395:	75 12                	jne    c00243a9 <__addsf3+0x263>
c0024397:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002439a:	85 db                	test   ebx,ebx
c002439c:	0f 85 9d 00 00 00    	jne    c002443f <__addsf3+0x2f9>
c00243a2:	31 ff                	xor    edi,edi
c00243a4:	e9 96 00 00 00       	jmp    c002443f <__addsf3+0x2f9>
c00243a9:	85 db                	test   ebx,ebx
c00243ab:	0f 84 8e 00 00 00    	je     c002443f <__addsf3+0x2f9>
c00243b1:	89 d0                	mov    eax,edx
c00243b3:	29 d8                	sub    eax,ebx
c00243b5:	79 06                	jns    c00243bd <__addsf3+0x277>
c00243b7:	89 d8                	mov    eax,ebx
c00243b9:	29 d0                	sub    eax,edx
c00243bb:	eb 5a                	jmp    c0024417 <__addsf3+0x2d1>
c00243bd:	bf 00 00 00 00       	mov    edi,0x0
c00243c2:	74 7b                	je     c002443f <__addsf3+0x2f9>
c00243c4:	eb 4a                	jmp    c0024410 <__addsf3+0x2ca>
c00243c6:	89 d0                	mov    eax,edx
c00243c8:	29 d8                	sub    eax,ebx
c00243ca:	79 12                	jns    c00243de <__addsf3+0x298>
c00243cc:	89 d8                	mov    eax,ebx
c00243ce:	29 d0                	sub    eax,edx
c00243d0:	eb 09                	jmp    c00243db <__addsf3+0x295>
c00243d2:	85 c0                	test   eax,eax
c00243d4:	79 41                	jns    c0024417 <__addsf3+0x2d1>
c00243d6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00243db:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00243de:	31 f6                	xor    esi,esi
c00243e0:	85 c0                	test   eax,eax
c00243e2:	74 33                	je     c0024417 <__addsf3+0x2d1>
c00243e4:	0f bd c8             	bsr    ecx,eax
c00243e7:	83 f1 1f             	xor    ecx,0x1f
c00243ea:	d3 e0                	shl    eax,cl
c00243ec:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00243f0:	39 ca                	cmp    edx,ecx
c00243f2:	7f 10                	jg     c0024404 <__addsf3+0x2be>
c00243f4:	29 d1                	sub    ecx,edx
c00243f6:	41                   	inc    ecx
c00243f7:	d3 e8                	shr    eax,cl
c00243f9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00243fc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0024402:	eb 13                	jmp    c0024417 <__addsf3+0x2d1>
c0024404:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024407:	29 ce                	sub    esi,ecx
c0024409:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002440e:	eb 07                	jmp    c0024417 <__addsf3+0x2d1>
c0024410:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024413:	eb 02                	jmp    c0024417 <__addsf3+0x2d1>
c0024415:	31 c0                	xor    eax,eax
c0024417:	89 c2                	mov    edx,eax
c0024419:	c1 ea 08             	shr    edx,0x8
c002441c:	a8 7f                	test   al,0x7f
c002441e:	0f 95 c1             	setne  cl
c0024421:	09 d1                	or     ecx,edx
c0024423:	83 e1 01             	and    ecx,0x1
c0024426:	c1 e8 07             	shr    eax,0x7
c0024429:	21 c8                	and    eax,ecx
c002442b:	c1 e6 17             	shl    esi,0x17
c002442e:	09 d6                	or     esi,edx
c0024430:	8d 3c 30             	lea    edi,[eax+esi*1]
c0024433:	eb 0a                	jmp    c002443f <__addsf3+0x2f9>
c0024435:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024438:	eb 05                	jmp    c002443f <__addsf3+0x2f9>
c002443a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002443f:	89 f8                	mov    eax,edi
c0024441:	5a                   	pop    edx
c0024442:	59                   	pop    ecx
c0024443:	5b                   	pop    ebx
c0024444:	5e                   	pop    esi
c0024445:	5f                   	pop    edi
c0024446:	5d                   	pop    ebp
c0024447:	c3                   	ret    

c0024448 <__subsf3>:
c0024448:	55                   	push   ebp
c0024449:	89 e5                	mov    ebp,esp
c002444b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002444e:	05 00 00 00 80       	add    eax,0x80000000
c0024453:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024456:	5d                   	pop    ebp
c0024457:	e9 ea fc ff ff       	jmp    c0024146 <__addsf3>

c002445c <__negsf2>:
c002445c:	55                   	push   ebp
c002445d:	89 e5                	mov    ebp,esp
c002445f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024462:	05 00 00 00 80       	add    eax,0x80000000
c0024467:	5d                   	pop    ebp
c0024468:	c3                   	ret    

c0024469 <__mulsf3>:
c0024469:	55                   	push   ebp
c002446a:	89 e5                	mov    ebp,esp
c002446c:	57                   	push   edi
c002446d:	56                   	push   esi
c002446e:	53                   	push   ebx
c002446f:	83 ec 1c             	sub    esp,0x1c
c0024472:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0024475:	89 f0                	mov    eax,esi
c0024477:	89 f1                	mov    ecx,esi
c0024479:	c1 f9 17             	sar    ecx,0x17
c002447c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002447f:	c1 e0 08             	shl    eax,0x8
c0024482:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024487:	89 c1                	mov    ecx,eax
c0024489:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002448c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002448f:	89 c7                	mov    edi,eax
c0024491:	c1 ff 17             	sar    edi,0x17
c0024494:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024498:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002449b:	89 f8                	mov    eax,edi
c002449d:	0f b6 c0             	movzx  eax,al
c00244a0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00244a3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00244a7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00244aa:	42                   	inc    edx
c00244ab:	80 e2 fe             	and    dl,0xfe
c00244ae:	75 7b                	jne    c002452b <__mulsf3+0xc2>
c00244b0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00244b4:	74 54                	je     c002450a <__mulsf3+0xa1>
c00244b6:	85 c9                	test   ecx,ecx
c00244b8:	0f 85 64 01 00 00    	jne    c0024622 <__mulsf3+0x1b9>
c00244be:	8d 57 01             	lea    edx,[edi+0x1]
c00244c1:	80 e2 fe             	and    dl,0xfe
c00244c4:	75 1f                	jne    c00244e5 <__mulsf3+0x7c>
c00244c6:	85 c0                	test   eax,eax
c00244c8:	b8 00 00 00 00       	mov    eax,0x0
c00244cd:	74 29                	je     c00244f8 <__mulsf3+0x8f>
c00244cf:	53                   	push   ebx
c00244d0:	53                   	push   ebx
c00244d1:	50                   	push   eax
c00244d2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00244d5:	e8 96 05 00 00       	call   c0024a70 <__nesf2>
c00244da:	83 c4 10             	add    esp,0x10
c00244dd:	85 c0                	test   eax,eax
c00244df:	0f 85 3a 01 00 00    	jne    c002461f <__mulsf3+0x1b6>
c00244e5:	85 ff                	test   edi,edi
c00244e7:	0f 89 35 01 00 00    	jns    c0024622 <__mulsf3+0x1b9>
c00244ed:	81 c6 00 00 00 80    	add    esi,0x80000000
c00244f3:	e9 2a 01 00 00       	jmp    c0024622 <__mulsf3+0x1b9>
c00244f8:	51                   	push   ecx
c00244f9:	51                   	push   ecx
c00244fa:	50                   	push   eax
c00244fb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00244fe:	e8 6d 05 00 00       	call   c0024a70 <__nesf2>
c0024503:	83 c4 10             	add    esp,0x10
c0024506:	85 c0                	test   eax,eax
c0024508:	eb 15                	jmp    c002451f <__mulsf3+0xb6>
c002450a:	85 c9                	test   ecx,ecx
c002450c:	74 0b                	je     c0024519 <__mulsf3+0xb0>
c002450e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024511:	01 c9                	add    ecx,ecx
c0024513:	78 16                	js     c002452b <__mulsf3+0xc2>
c0024515:	89 d3                	mov    ebx,edx
c0024517:	eb f5                	jmp    c002450e <__mulsf3+0xa5>
c0024519:	89 f8                	mov    eax,edi
c002451b:	f7 d0                	not    eax
c002451d:	84 c0                	test   al,al
c002451f:	75 c4                	jne    c00244e5 <__mulsf3+0x7c>
c0024521:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0024526:	e9 f7 00 00 00       	jmp    c0024622 <__mulsf3+0x1b9>
c002452b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002452e:	c1 e6 08             	shl    esi,0x8
c0024531:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0024537:	8d 57 01             	lea    edx,[edi+0x1]
c002453a:	80 e2 fe             	and    dl,0xfe
c002453d:	75 63                	jne    c00245a2 <__mulsf3+0x139>
c002453f:	85 c0                	test   eax,eax
c0024541:	74 2f                	je     c0024572 <__mulsf3+0x109>
c0024543:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024547:	0f 89 d2 00 00 00    	jns    c002461f <__mulsf3+0x1b6>
c002454d:	52                   	push   edx
c002454e:	52                   	push   edx
c002454f:	6a 00                	push   0x0
c0024551:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024554:	e8 dc 04 00 00       	call   c0024a35 <__eqsf2>
c0024559:	83 c4 10             	add    esp,0x10
c002455c:	85 c0                	test   eax,eax
c002455e:	0f 85 bb 00 00 00    	jne    c002461f <__mulsf3+0x1b6>
c0024564:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024567:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002456d:	e9 b0 00 00 00       	jmp    c0024622 <__mulsf3+0x1b9>
c0024572:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0024575:	50                   	push   eax
c0024576:	50                   	push   eax
c0024577:	6a 00                	push   0x0
c0024579:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002457c:	e8 b4 04 00 00       	call   c0024a35 <__eqsf2>
c0024581:	83 c4 10             	add    esp,0x10
c0024584:	85 c0                	test   eax,eax
c0024586:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024589:	75 0c                	jne    c0024597 <__mulsf3+0x12e>
c002458b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002458f:	0f 89 8a 00 00 00    	jns    c002461f <__mulsf3+0x1b6>
c0024595:	eb cd                	jmp    c0024564 <__mulsf3+0xfb>
c0024597:	8d 43 ff             	lea    eax,[ebx-0x1]
c002459a:	01 f6                	add    esi,esi
c002459c:	78 04                	js     c00245a2 <__mulsf3+0x139>
c002459e:	89 c3                	mov    ebx,eax
c00245a0:	eb f5                	jmp    c0024597 <__mulsf3+0x12e>
c00245a2:	89 c8                	mov    eax,ecx
c00245a4:	0d 00 00 00 80       	or     eax,0x80000000
c00245a9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00245af:	f7 e6                	mul    esi
c00245b1:	85 c0                	test   eax,eax
c00245b3:	0f 95 c0             	setne  al
c00245b6:	0f b6 c0             	movzx  eax,al
c00245b9:	09 c2                	or     edx,eax
c00245bb:	78 03                	js     c00245c0 <__mulsf3+0x157>
c00245bd:	01 d2                	add    edx,edx
c00245bf:	4b                   	dec    ebx
c00245c0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00245c6:	7f 22                	jg     c00245ea <__mulsf3+0x181>
c00245c8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00245ce:	85 db                	test   ebx,ebx
c00245d0:	7f 23                	jg     c00245f5 <__mulsf3+0x18c>
c00245d2:	83 fb e9             	cmp    ebx,0xffffffe9
c00245d5:	7c 1a                	jl     c00245f1 <__mulsf3+0x188>
c00245d7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00245dd:	b9 01 00 00 00       	mov    ecx,0x1
c00245e2:	29 d9                	sub    ecx,ebx
c00245e4:	d3 ea                	shr    edx,cl
c00245e6:	31 db                	xor    ebx,ebx
c00245e8:	eb 0b                	jmp    c00245f5 <__mulsf3+0x18c>
c00245ea:	bb ff 00 00 00       	mov    ebx,0xff
c00245ef:	eb 02                	jmp    c00245f3 <__mulsf3+0x18a>
c00245f1:	31 db                	xor    ebx,ebx
c00245f3:	31 d2                	xor    edx,edx
c00245f5:	89 d0                	mov    eax,edx
c00245f7:	c1 e8 08             	shr    eax,0x8
c00245fa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00245fd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024603:	09 fb                	or     ebx,edi
c0024605:	c1 e3 17             	shl    ebx,0x17
c0024608:	09 c3                	or     ebx,eax
c002460a:	f6 c2 7f             	test   dl,0x7f
c002460d:	0f 95 c1             	setne  cl
c0024610:	09 c8                	or     eax,ecx
c0024612:	83 e0 01             	and    eax,0x1
c0024615:	c1 ea 07             	shr    edx,0x7
c0024618:	21 c2                	and    edx,eax
c002461a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002461d:	eb 03                	jmp    c0024622 <__mulsf3+0x1b9>
c002461f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0024622:	89 f0                	mov    eax,esi
c0024624:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024627:	5b                   	pop    ebx
c0024628:	5e                   	pop    esi
c0024629:	5f                   	pop    edi
c002462a:	5d                   	pop    ebp
c002462b:	c3                   	ret    

c002462c <__divsf3>:
c002462c:	55                   	push   ebp
c002462d:	89 e5                	mov    ebp,esp
c002462f:	57                   	push   edi
c0024630:	56                   	push   esi
c0024631:	53                   	push   ebx
c0024632:	83 ec 1c             	sub    esp,0x1c
c0024635:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024638:	89 d8                	mov    eax,ebx
c002463a:	89 d9                	mov    ecx,ebx
c002463c:	c1 f9 17             	sar    ecx,0x17
c002463f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024642:	c1 e0 08             	shl    eax,0x8
c0024645:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002464a:	89 c1                	mov    ecx,eax
c002464c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002464f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024652:	89 c7                	mov    edi,eax
c0024654:	c1 ff 17             	sar    edi,0x17
c0024657:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002465b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002465e:	89 f8                	mov    eax,edi
c0024660:	0f b6 c0             	movzx  eax,al
c0024663:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024666:	29 c6                	sub    esi,eax
c0024668:	83 c6 7f             	add    esi,0x7f
c002466b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002466e:	42                   	inc    edx
c002466f:	80 e2 fe             	and    dl,0xfe
c0024672:	0f 85 9c 00 00 00    	jne    c0024714 <__divsf3+0xe8>
c0024678:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002467c:	74 33                	je     c00246b1 <__divsf3+0x85>
c002467e:	85 c9                	test   ecx,ecx
c0024680:	0f 85 c7 01 00 00    	jne    c002484d <__divsf3+0x221>
c0024686:	8d 57 01             	lea    edx,[edi+0x1]
c0024689:	80 e2 fe             	and    dl,0xfe
c002468c:	75 2f                	jne    c00246bd <__divsf3+0x91>
c002468e:	85 c0                	test   eax,eax
c0024690:	74 2b                	je     c00246bd <__divsf3+0x91>
c0024692:	51                   	push   ecx
c0024693:	51                   	push   ecx
c0024694:	6a 00                	push   0x0
c0024696:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024699:	e8 d2 03 00 00       	call   c0024a70 <__nesf2>
c002469e:	83 c4 10             	add    esp,0x10
c00246a1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00246a4:	85 c0                	test   eax,eax
c00246a6:	0f 85 a1 01 00 00    	jne    c002484d <__divsf3+0x221>
c00246ac:	e9 92 01 00 00       	jmp    c0024843 <__divsf3+0x217>
c00246b1:	85 c9                	test   ecx,ecx
c00246b3:	75 1b                	jne    c00246d0 <__divsf3+0xa4>
c00246b5:	8d 57 01             	lea    edx,[edi+0x1]
c00246b8:	80 e2 fe             	and    dl,0xfe
c00246bb:	74 1e                	je     c00246db <__divsf3+0xaf>
c00246bd:	85 ff                	test   edi,edi
c00246bf:	0f 89 88 01 00 00    	jns    c002484d <__divsf3+0x221>
c00246c5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00246cb:	e9 7d 01 00 00       	jmp    c002484d <__divsf3+0x221>
c00246d0:	8d 56 ff             	lea    edx,[esi-0x1]
c00246d3:	01 c9                	add    ecx,ecx
c00246d5:	78 3d                	js     c0024714 <__divsf3+0xe8>
c00246d7:	89 d6                	mov    esi,edx
c00246d9:	eb f5                	jmp    c00246d0 <__divsf3+0xa4>
c00246db:	85 c0                	test   eax,eax
c00246dd:	b8 00 00 00 00       	mov    eax,0x0
c00246e2:	74 18                	je     c00246fc <__divsf3+0xd0>
c00246e4:	52                   	push   edx
c00246e5:	52                   	push   edx
c00246e6:	50                   	push   eax
c00246e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00246ea:	e8 81 03 00 00       	call   c0024a70 <__nesf2>
c00246ef:	83 c4 10             	add    esp,0x10
c00246f2:	85 c0                	test   eax,eax
c00246f4:	0f 85 50 01 00 00    	jne    c002484a <__divsf3+0x21e>
c00246fa:	eb c1                	jmp    c00246bd <__divsf3+0x91>
c00246fc:	56                   	push   esi
c00246fd:	56                   	push   esi
c00246fe:	50                   	push   eax
c00246ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024702:	e8 69 03 00 00       	call   c0024a70 <__nesf2>
c0024707:	83 c4 10             	add    esp,0x10
c002470a:	85 c0                	test   eax,eax
c002470c:	0f 84 31 01 00 00    	je     c0024843 <__divsf3+0x217>
c0024712:	eb a9                	jmp    c00246bd <__divsf3+0x91>
c0024714:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0024717:	c1 e3 08             	shl    ebx,0x8
c002471a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024720:	8d 57 01             	lea    edx,[edi+0x1]
c0024723:	80 e2 fe             	and    dl,0xfe
c0024726:	75 71                	jne    c0024799 <__divsf3+0x16d>
c0024728:	85 c0                	test   eax,eax
c002472a:	ba 00 00 00 00       	mov    edx,0x0
c002472f:	74 2f                	je     c0024760 <__divsf3+0x134>
c0024731:	51                   	push   ecx
c0024732:	51                   	push   ecx
c0024733:	52                   	push   edx
c0024734:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024737:	e8 f9 02 00 00       	call   c0024a35 <__eqsf2>
c002473c:	83 c4 10             	add    esp,0x10
c002473f:	85 c0                	test   eax,eax
c0024741:	0f 85 03 01 00 00    	jne    c002484a <__divsf3+0x21e>
c0024747:	31 d2                	xor    edx,edx
c0024749:	89 d3                	mov    ebx,edx
c002474b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002474e:	31 f8                	xor    eax,edi
c0024750:	0f 89 f7 00 00 00    	jns    c002484d <__divsf3+0x221>
c0024756:	bb 00 00 00 80       	mov    ebx,0x80000000
c002475b:	e9 ed 00 00 00       	jmp    c002484d <__divsf3+0x221>
c0024760:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0024763:	50                   	push   eax
c0024764:	50                   	push   eax
c0024765:	52                   	push   edx
c0024766:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024769:	e8 c7 02 00 00       	call   c0024a35 <__eqsf2>
c002476e:	83 c4 10             	add    esp,0x10
c0024771:	85 c0                	test   eax,eax
c0024773:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024776:	75 16                	jne    c002478e <__divsf3+0x162>
c0024778:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002477b:	31 fb                	xor    ebx,edi
c002477d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0024783:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0024789:	e9 bf 00 00 00       	jmp    c002484d <__divsf3+0x221>
c002478e:	8d 46 01             	lea    eax,[esi+0x1]
c0024791:	01 db                	add    ebx,ebx
c0024793:	78 04                	js     c0024799 <__divsf3+0x16d>
c0024795:	89 c6                	mov    esi,eax
c0024797:	eb f5                	jmp    c002478e <__divsf3+0x162>
c0024799:	89 c8                	mov    eax,ecx
c002479b:	0d 00 00 00 80       	or     eax,0x80000000
c00247a0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00247a6:	31 d2                	xor    edx,edx
c00247a8:	39 d8                	cmp    eax,ebx
c00247aa:	72 07                	jb     c00247b3 <__divsf3+0x187>
c00247ac:	29 d8                	sub    eax,ebx
c00247ae:	ba 01 00 00 00       	mov    edx,0x1
c00247b3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00247ba:	01 d2                	add    edx,edx
c00247bc:	89 c1                	mov    ecx,eax
c00247be:	01 c0                	add    eax,eax
c00247c0:	85 c9                	test   ecx,ecx
c00247c2:	78 04                	js     c00247c8 <__divsf3+0x19c>
c00247c4:	39 c3                	cmp    ebx,eax
c00247c6:	77 05                	ja     c00247cd <__divsf3+0x1a1>
c00247c8:	29 d8                	sub    eax,ebx
c00247ca:	83 ca 01             	or     edx,0x1
c00247cd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00247d0:	75 e8                	jne    c00247ba <__divsf3+0x18e>
c00247d2:	85 c0                	test   eax,eax
c00247d4:	0f 95 c0             	setne  al
c00247d7:	0f b6 c0             	movzx  eax,al
c00247da:	c1 e2 06             	shl    edx,0x6
c00247dd:	09 c2                	or     edx,eax
c00247df:	78 03                	js     c00247e4 <__divsf3+0x1b8>
c00247e1:	01 d2                	add    edx,edx
c00247e3:	4e                   	dec    esi
c00247e4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00247ea:	7f 22                	jg     c002480e <__divsf3+0x1e2>
c00247ec:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00247f2:	85 f6                	test   esi,esi
c00247f4:	7f 23                	jg     c0024819 <__divsf3+0x1ed>
c00247f6:	83 fe e9             	cmp    esi,0xffffffe9
c00247f9:	7c 1a                	jl     c0024815 <__divsf3+0x1e9>
c00247fb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024801:	b9 01 00 00 00       	mov    ecx,0x1
c0024806:	29 f1                	sub    ecx,esi
c0024808:	d3 ea                	shr    edx,cl
c002480a:	31 f6                	xor    esi,esi
c002480c:	eb 0b                	jmp    c0024819 <__divsf3+0x1ed>
c002480e:	be ff 00 00 00       	mov    esi,0xff
c0024813:	eb 02                	jmp    c0024817 <__divsf3+0x1eb>
c0024815:	31 f6                	xor    esi,esi
c0024817:	31 d2                	xor    edx,edx
c0024819:	89 d0                	mov    eax,edx
c002481b:	c1 e8 08             	shr    eax,0x8
c002481e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0024821:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024827:	09 fe                	or     esi,edi
c0024829:	c1 e6 17             	shl    esi,0x17
c002482c:	09 c6                	or     esi,eax
c002482e:	f6 c2 7f             	test   dl,0x7f
c0024831:	0f 95 c1             	setne  cl
c0024834:	09 c8                	or     eax,ecx
c0024836:	83 e0 01             	and    eax,0x1
c0024839:	c1 ea 07             	shr    edx,0x7
c002483c:	21 c2                	and    edx,eax
c002483e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0024841:	eb 0a                	jmp    c002484d <__divsf3+0x221>
c0024843:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0024848:	eb 03                	jmp    c002484d <__divsf3+0x221>
c002484a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002484d:	89 d8                	mov    eax,ebx
c002484f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024852:	5b                   	pop    ebx
c0024853:	5e                   	pop    esi
c0024854:	5f                   	pop    edi
c0024855:	5d                   	pop    ebp
c0024856:	c3                   	ret    

c0024857 <__floatsisf>:
c0024857:	55                   	push   ebp
c0024858:	89 e5                	mov    ebp,esp
c002485a:	53                   	push   ebx
c002485b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002485e:	85 d2                	test   edx,edx
c0024860:	7e 2b                	jle    c002488d <__floatsisf+0x36>
c0024862:	0f bd ca             	bsr    ecx,edx
c0024865:	83 f1 1f             	xor    ecx,0x1f
c0024868:	d3 e2                	shl    edx,cl
c002486a:	89 d0                	mov    eax,edx
c002486c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024871:	89 c3                	mov    ebx,eax
c0024873:	c1 eb 08             	shr    ebx,0x8
c0024876:	80 e2 7f             	and    dl,0x7f
c0024879:	0f 95 c2             	setne  dl
c002487c:	09 da                	or     edx,ebx
c002487e:	83 e2 01             	and    edx,0x1
c0024881:	c1 e8 07             	shr    eax,0x7
c0024884:	21 c2                	and    edx,eax
c0024886:	b8 9e 00 00 00       	mov    eax,0x9e
c002488b:	eb 32                	jmp    c00248bf <__floatsisf+0x68>
c002488d:	b8 00 00 00 00       	mov    eax,0x0
c0024892:	74 34                	je     c00248c8 <__floatsisf+0x71>
c0024894:	f7 da                	neg    edx
c0024896:	0f bd ca             	bsr    ecx,edx
c0024899:	83 f1 1f             	xor    ecx,0x1f
c002489c:	d3 e2                	shl    edx,cl
c002489e:	89 d0                	mov    eax,edx
c00248a0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00248a5:	89 c3                	mov    ebx,eax
c00248a7:	c1 eb 08             	shr    ebx,0x8
c00248aa:	80 e2 7f             	and    dl,0x7f
c00248ad:	0f 95 c2             	setne  dl
c00248b0:	09 da                	or     edx,ebx
c00248b2:	83 e2 01             	and    edx,0x1
c00248b5:	c1 e8 07             	shr    eax,0x7
c00248b8:	21 c2                	and    edx,eax
c00248ba:	b8 9e 01 00 00       	mov    eax,0x19e
c00248bf:	29 c8                	sub    eax,ecx
c00248c1:	c1 e0 17             	shl    eax,0x17
c00248c4:	09 d8                	or     eax,ebx
c00248c6:	01 d0                	add    eax,edx
c00248c8:	5b                   	pop    ebx
c00248c9:	5d                   	pop    ebp
c00248ca:	c3                   	ret    

c00248cb <__floatunsisf>:
c00248cb:	55                   	push   ebp
c00248cc:	89 e5                	mov    ebp,esp
c00248ce:	53                   	push   ebx
c00248cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00248d2:	31 c0                	xor    eax,eax
c00248d4:	85 d2                	test   edx,edx
c00248d6:	74 32                	je     c002490a <__floatunsisf+0x3f>
c00248d8:	0f bd ca             	bsr    ecx,edx
c00248db:	83 f1 1f             	xor    ecx,0x1f
c00248de:	d3 e2                	shl    edx,cl
c00248e0:	89 d0                	mov    eax,edx
c00248e2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00248e7:	89 c3                	mov    ebx,eax
c00248e9:	c1 eb 08             	shr    ebx,0x8
c00248ec:	80 e2 7f             	and    dl,0x7f
c00248ef:	0f 95 c2             	setne  dl
c00248f2:	09 da                	or     edx,ebx
c00248f4:	83 e2 01             	and    edx,0x1
c00248f7:	c1 e8 07             	shr    eax,0x7
c00248fa:	21 c2                	and    edx,eax
c00248fc:	b8 9e 00 00 00       	mov    eax,0x9e
c0024901:	29 c8                	sub    eax,ecx
c0024903:	c1 e0 17             	shl    eax,0x17
c0024906:	09 d8                	or     eax,ebx
c0024908:	01 d0                	add    eax,edx
c002490a:	5b                   	pop    ebx
c002490b:	5d                   	pop    ebp
c002490c:	c3                   	ret    

c002490d <__fixsfsi>:
c002490d:	55                   	push   ebp
c002490e:	89 e5                	mov    ebp,esp
c0024910:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024913:	89 d1                	mov    ecx,edx
c0024915:	c1 e1 08             	shl    ecx,0x8
c0024918:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002491e:	c1 fa 17             	sar    edx,0x17
c0024921:	78 1c                	js     c002493f <__fixsfsi+0x32>
c0024923:	83 ea 7f             	sub    edx,0x7f
c0024926:	31 c0                	xor    eax,eax
c0024928:	83 fa 1e             	cmp    edx,0x1e
c002492b:	77 40                	ja     c002496d <__fixsfsi+0x60>
c002492d:	89 c8                	mov    eax,ecx
c002492f:	0d 00 00 00 80       	or     eax,0x80000000
c0024934:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024939:	29 d1                	sub    ecx,edx
c002493b:	d3 e8                	shr    eax,cl
c002493d:	eb 2e                	jmp    c002496d <__fixsfsi+0x60>
c002493f:	31 c0                	xor    eax,eax
c0024941:	81 c2 81 00 00 00    	add    edx,0x81
c0024947:	78 24                	js     c002496d <__fixsfsi+0x60>
c0024949:	83 fa 1e             	cmp    edx,0x1e
c002494c:	7e 09                	jle    c0024957 <__fixsfsi+0x4a>
c002494e:	83 fa 1f             	cmp    edx,0x1f
c0024951:	75 18                	jne    c002496b <__fixsfsi+0x5e>
c0024953:	85 c9                	test   ecx,ecx
c0024955:	75 14                	jne    c002496b <__fixsfsi+0x5e>
c0024957:	89 c8                	mov    eax,ecx
c0024959:	0d 00 00 00 80       	or     eax,0x80000000
c002495e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024963:	29 d1                	sub    ecx,edx
c0024965:	d3 e8                	shr    eax,cl
c0024967:	f7 d8                	neg    eax
c0024969:	eb 02                	jmp    c002496d <__fixsfsi+0x60>
c002496b:	31 c0                	xor    eax,eax
c002496d:	5d                   	pop    ebp
c002496e:	c3                   	ret    

c002496f <__fixunssfsi>:
c002496f:	55                   	push   ebp
c0024970:	89 e5                	mov    ebp,esp
c0024972:	53                   	push   ebx
c0024973:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024976:	89 d3                	mov    ebx,edx
c0024978:	c1 fb 17             	sar    ebx,0x17
c002497b:	83 eb 7f             	sub    ebx,0x7f
c002497e:	31 c0                	xor    eax,eax
c0024980:	83 fb 1f             	cmp    ebx,0x1f
c0024983:	77 18                	ja     c002499d <__fixunssfsi+0x2e>
c0024985:	89 d0                	mov    eax,edx
c0024987:	c1 e0 08             	shl    eax,0x8
c002498a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002498f:	0d 00 00 00 80       	or     eax,0x80000000
c0024994:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024999:	29 d9                	sub    ecx,ebx
c002499b:	d3 e8                	shr    eax,cl
c002499d:	5b                   	pop    ebx
c002499e:	5d                   	pop    ebp
c002499f:	c3                   	ret    

c00249a0 <__cmpsf2>:
c00249a0:	55                   	push   ebp
c00249a1:	89 e5                	mov    ebp,esp
c00249a3:	57                   	push   edi
c00249a4:	56                   	push   esi
c00249a5:	53                   	push   ebx
c00249a6:	83 ec 24             	sub    esp,0x24
c00249a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00249ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249af:	e8 4f 10 00 00       	call   c0025a03 <__truncdfsf2>
c00249b4:	5a                   	pop    edx
c00249b5:	59                   	pop    ecx
c00249b6:	89 c3                	mov    ebx,eax
c00249b8:	c1 e8 17             	shr    eax,0x17
c00249bb:	0f b6 f0             	movzx  esi,al
c00249be:	89 d8                	mov    eax,ebx
c00249c0:	c1 e8 1f             	shr    eax,0x1f
c00249c3:	31 c6                	xor    esi,eax
c00249c5:	c1 e3 08             	shl    ebx,0x8
c00249c8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00249cb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00249ce:	e8 30 10 00 00       	call   c0025a03 <__truncdfsf2>
c00249d3:	83 c4 10             	add    esp,0x10
c00249d6:	89 c1                	mov    ecx,eax
c00249d8:	c1 e9 17             	shr    ecx,0x17
c00249db:	0f b6 c9             	movzx  ecx,cl
c00249de:	89 c7                	mov    edi,eax
c00249e0:	c1 ef 1f             	shr    edi,0x1f
c00249e3:	89 ca                	mov    edx,ecx
c00249e5:	31 fa                	xor    edx,edi
c00249e7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00249ea:	c1 e0 08             	shl    eax,0x8
c00249ed:	89 c2                	mov    edx,eax
c00249ef:	89 d8                	mov    eax,ebx
c00249f1:	09 d0                	or     eax,edx
c00249f3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00249f8:	09 f0                	or     eax,esi
c00249fa:	75 08                	jne    c0024a04 <__cmpsf2+0x64>
c00249fc:	31 c0                	xor    eax,eax
c00249fe:	39 f9                	cmp    ecx,edi
c0024a00:	75 0c                	jne    c0024a0e <__cmpsf2+0x6e>
c0024a02:	eb 29                	jmp    c0024a2d <__cmpsf2+0x8d>
c0024a04:	b8 01 00 00 00       	mov    eax,0x1
c0024a09:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024a0c:	7f 1f                	jg     c0024a2d <__cmpsf2+0x8d>
c0024a0e:	83 c8 ff             	or     eax,0xffffffff
c0024a11:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024a14:	7c 17                	jl     c0024a2d <__cmpsf2+0x8d>
c0024a16:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024a1c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024a22:	b8 01 00 00 00       	mov    eax,0x1
c0024a27:	39 d3                	cmp    ebx,edx
c0024a29:	77 02                	ja     c0024a2d <__cmpsf2+0x8d>
c0024a2b:	19 c0                	sbb    eax,eax
c0024a2d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024a30:	5b                   	pop    ebx
c0024a31:	5e                   	pop    esi
c0024a32:	5f                   	pop    edi
c0024a33:	5d                   	pop    ebp
c0024a34:	c3                   	ret    

c0024a35 <__eqsf2>:
c0024a35:	55                   	push   ebp
c0024a36:	89 e5                	mov    ebp,esp
c0024a38:	83 ec 24             	sub    esp,0x24
c0024a3b:	6a 01                	push   0x1
c0024a3d:	83 ec 0c             	sub    esp,0xc
c0024a40:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024a43:	e8 df 10 00 00       	call   c0025b27 <__extendsfdf2>
c0024a48:	83 c4 10             	add    esp,0x10
c0024a4b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024a4e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024a51:	52                   	push   edx
c0024a52:	50                   	push   eax
c0024a53:	50                   	push   eax
c0024a54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a57:	e8 cb 10 00 00       	call   c0025b27 <__extendsfdf2>
c0024a5c:	59                   	pop    ecx
c0024a5d:	59                   	pop    ecx
c0024a5e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024a61:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024a64:	52                   	push   edx
c0024a65:	50                   	push   eax
c0024a66:	e8 35 ff ff ff       	call   c00249a0 <__cmpsf2>
c0024a6b:	83 c4 20             	add    esp,0x20
c0024a6e:	c9                   	leave  
c0024a6f:	c3                   	ret    

c0024a70 <__nesf2>:
c0024a70:	eb c3                	jmp    c0024a35 <__eqsf2>

c0024a72 <__gtsf2>:
c0024a72:	55                   	push   ebp
c0024a73:	89 e5                	mov    ebp,esp
c0024a75:	83 ec 24             	sub    esp,0x24
c0024a78:	6a ff                	push   0xffffffff
c0024a7a:	83 ec 0c             	sub    esp,0xc
c0024a7d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024a80:	e8 a2 10 00 00       	call   c0025b27 <__extendsfdf2>
c0024a85:	83 c4 10             	add    esp,0x10
c0024a88:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024a8b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024a8e:	52                   	push   edx
c0024a8f:	50                   	push   eax
c0024a90:	50                   	push   eax
c0024a91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a94:	e8 8e 10 00 00       	call   c0025b27 <__extendsfdf2>
c0024a99:	59                   	pop    ecx
c0024a9a:	59                   	pop    ecx
c0024a9b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024a9e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024aa1:	52                   	push   edx
c0024aa2:	50                   	push   eax
c0024aa3:	e8 f8 fe ff ff       	call   c00249a0 <__cmpsf2>
c0024aa8:	83 c4 20             	add    esp,0x20
c0024aab:	c9                   	leave  
c0024aac:	c3                   	ret    

c0024aad <__gesf2>:
c0024aad:	eb c3                	jmp    c0024a72 <__gtsf2>

c0024aaf <__ltsf2>:
c0024aaf:	eb 84                	jmp    c0024a35 <__eqsf2>

c0024ab1 <__lesf2>:
c0024ab1:	eb 82                	jmp    c0024a35 <__eqsf2>

c0024ab3 <__adddf3>:
c0024ab3:	55                   	push   ebp
c0024ab4:	89 e5                	mov    ebp,esp
c0024ab6:	57                   	push   edi
c0024ab7:	56                   	push   esi
c0024ab8:	53                   	push   ebx
c0024ab9:	83 ec 24             	sub    esp,0x24
c0024abc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024abf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024ac2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024ac5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024ac8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024acb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024ace:	89 c8                	mov    eax,ecx
c0024ad0:	89 ce                	mov    esi,ecx
c0024ad2:	c1 fe 14             	sar    esi,0x14
c0024ad5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0024ad8:	89 fb                	mov    ebx,edi
c0024ada:	89 fa                	mov    edx,edi
c0024adc:	c1 e2 0b             	shl    edx,0xb
c0024adf:	c1 e0 0b             	shl    eax,0xb
c0024ae2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024ae7:	c1 eb 15             	shr    ebx,0x15
c0024aea:	09 d8                	or     eax,ebx
c0024aec:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024aef:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024af2:	c1 fe 14             	sar    esi,0x14
c0024af5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024af8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024afb:	89 f3                	mov    ebx,esi
c0024afd:	c1 e3 0b             	shl    ebx,0xb
c0024b00:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024b03:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024b06:	c1 e3 0b             	shl    ebx,0xb
c0024b09:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0024b0f:	c1 ee 15             	shr    esi,0x15
c0024b12:	09 f3                	or     ebx,esi
c0024b14:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0024b17:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024b1a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0024b1d:	0f 88 5f 02 00 00    	js     c0024d82 <__adddf3+0x2cf>
c0024b23:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024b26:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0024b29:	85 db                	test   ebx,ebx
c0024b2b:	0f 8e c7 00 00 00    	jle    c0024bf8 <__adddf3+0x145>
c0024b31:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0024b38:	75 1a                	jne    c0024b54 <__adddf3+0xa1>
c0024b3a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024b3d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0024b40:	0f 84 b2 05 00 00    	je     c00250f8 <__adddf3+0x645>
c0024b46:	4b                   	dec    ebx
c0024b47:	75 23                	jne    c0024b6c <__adddf3+0xb9>
c0024b49:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024b4c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024b4f:	e9 99 00 00 00       	jmp    c0024bed <__adddf3+0x13a>
c0024b54:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024b57:	f7 d6                	not    esi
c0024b59:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024b5f:	0f 84 93 05 00 00    	je     c00250f8 <__adddf3+0x645>
c0024b65:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024b6c:	83 fb 1f             	cmp    ebx,0x1f
c0024b6f:	7e 42                	jle    c0024bb3 <__adddf3+0x100>
c0024b71:	83 fb 3f             	cmp    ebx,0x3f
c0024b74:	0f 8f 7e 05 00 00    	jg     c00250f8 <__adddf3+0x645>
c0024b7a:	83 e3 1f             	and    ebx,0x1f
c0024b7d:	89 d9                	mov    ecx,ebx
c0024b7f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024b82:	d3 ef                	shr    edi,cl
c0024b84:	31 db                	xor    ebx,ebx
c0024b86:	85 c9                	test   ecx,ecx
c0024b88:	74 15                	je     c0024b9f <__adddf3+0xec>
c0024b8a:	be 20 00 00 00       	mov    esi,0x20
c0024b8f:	29 ce                	sub    esi,ecx
c0024b91:	89 f1                	mov    ecx,esi
c0024b93:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024b96:	d3 e6                	shl    esi,cl
c0024b98:	31 db                	xor    ebx,ebx
c0024b9a:	85 f6                	test   esi,esi
c0024b9c:	0f 95 c3             	setne  bl
c0024b9f:	31 c9                	xor    ecx,ecx
c0024ba1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024ba5:	0f 95 c1             	setne  cl
c0024ba8:	09 cf                	or     edi,ecx
c0024baa:	09 fb                	or     ebx,edi
c0024bac:	01 da                	add    edx,ebx
c0024bae:	83 d0 00             	adc    eax,0x0
c0024bb1:	eb 3a                	jmp    c0024bed <__adddf3+0x13a>
c0024bb3:	bf 20 00 00 00       	mov    edi,0x20
c0024bb8:	29 df                	sub    edi,ebx
c0024bba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024bbd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024bc0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024bc3:	d3 e6                	shl    esi,cl
c0024bc5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024bc8:	88 d9                	mov    cl,bl
c0024bca:	d3 ef                	shr    edi,cl
c0024bcc:	09 fe                	or     esi,edi
c0024bce:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024bd1:	88 d9                	mov    cl,bl
c0024bd3:	d3 ef                	shr    edi,cl
c0024bd5:	89 fb                	mov    ebx,edi
c0024bd7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024bda:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024bdd:	d3 e7                	shl    edi,cl
c0024bdf:	85 ff                	test   edi,edi
c0024be1:	0f 95 c1             	setne  cl
c0024be4:	0f b6 c9             	movzx  ecx,cl
c0024be7:	09 ce                	or     esi,ecx
c0024be9:	01 f2                	add    edx,esi
c0024beb:	11 d8                	adc    eax,ebx
c0024bed:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024bf0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024bf3:	e9 52 01 00 00       	jmp    c0024d4a <__adddf3+0x297>
c0024bf8:	0f 84 d5 00 00 00    	je     c0024cd3 <__adddf3+0x220>
c0024bfe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024c01:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024c04:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024c07:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024c0a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024c11:	75 20                	jne    c0024c33 <__adddf3+0x180>
c0024c13:	89 d6                	mov    esi,edx
c0024c15:	09 c6                	or     esi,eax
c0024c17:	0f 84 db 04 00 00    	je     c00250f8 <__adddf3+0x645>
c0024c1d:	4b                   	dec    ebx
c0024c1e:	75 29                	jne    c0024c49 <__adddf3+0x196>
c0024c20:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024c23:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024c26:	01 d1                	add    ecx,edx
c0024c28:	11 c6                	adc    esi,eax
c0024c2a:	89 f0                	mov    eax,esi
c0024c2c:	89 ca                	mov    edx,ecx
c0024c2e:	e9 17 01 00 00       	jmp    c0024d4a <__adddf3+0x297>
c0024c33:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024c36:	f7 d6                	not    esi
c0024c38:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024c3e:	0f 84 b4 04 00 00    	je     c00250f8 <__adddf3+0x645>
c0024c44:	0d 00 00 00 80       	or     eax,0x80000000
c0024c49:	83 fb 1f             	cmp    ebx,0x1f
c0024c4c:	7e 48                	jle    c0024c96 <__adddf3+0x1e3>
c0024c4e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024c51:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024c54:	83 fb 3f             	cmp    ebx,0x3f
c0024c57:	0f 8f 9b 04 00 00    	jg     c00250f8 <__adddf3+0x645>
c0024c5d:	83 e3 1f             	and    ebx,0x1f
c0024c60:	89 d9                	mov    ecx,ebx
c0024c62:	89 c7                	mov    edi,eax
c0024c64:	d3 ef                	shr    edi,cl
c0024c66:	31 db                	xor    ebx,ebx
c0024c68:	85 c9                	test   ecx,ecx
c0024c6a:	74 12                	je     c0024c7e <__adddf3+0x1cb>
c0024c6c:	be 20 00 00 00       	mov    esi,0x20
c0024c71:	29 ce                	sub    esi,ecx
c0024c73:	89 f1                	mov    ecx,esi
c0024c75:	d3 e0                	shl    eax,cl
c0024c77:	31 db                	xor    ebx,ebx
c0024c79:	85 c0                	test   eax,eax
c0024c7b:	0f 95 c3             	setne  bl
c0024c7e:	31 c0                	xor    eax,eax
c0024c80:	85 d2                	test   edx,edx
c0024c82:	0f 95 c0             	setne  al
c0024c85:	09 c7                	or     edi,eax
c0024c87:	09 fb                	or     ebx,edi
c0024c89:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024c8c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024c8f:	01 da                	add    edx,ebx
c0024c91:	83 d6 00             	adc    esi,0x0
c0024c94:	eb 39                	jmp    c0024ccf <__adddf3+0x21c>
c0024c96:	be 20 00 00 00       	mov    esi,0x20
c0024c9b:	29 de                	sub    esi,ebx
c0024c9d:	89 c7                	mov    edi,eax
c0024c9f:	89 f1                	mov    ecx,esi
c0024ca1:	d3 e7                	shl    edi,cl
c0024ca3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024ca6:	89 d7                	mov    edi,edx
c0024ca8:	88 d9                	mov    cl,bl
c0024caa:	d3 ef                	shr    edi,cl
c0024cac:	89 f9                	mov    ecx,edi
c0024cae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024cb1:	09 cf                	or     edi,ecx
c0024cb3:	88 d9                	mov    cl,bl
c0024cb5:	d3 e8                	shr    eax,cl
c0024cb7:	89 f1                	mov    ecx,esi
c0024cb9:	d3 e2                	shl    edx,cl
c0024cbb:	85 d2                	test   edx,edx
c0024cbd:	0f 95 c2             	setne  dl
c0024cc0:	0f b6 d2             	movzx  edx,dl
c0024cc3:	09 d7                	or     edi,edx
c0024cc5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024cc8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024ccb:	01 fa                	add    edx,edi
c0024ccd:	11 c6                	adc    esi,eax
c0024ccf:	89 f0                	mov    eax,esi
c0024cd1:	eb 77                	jmp    c0024d4a <__adddf3+0x297>
c0024cd3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024cd6:	46                   	inc    esi
c0024cd7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024cda:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024ce0:	75 41                	jne    c0024d23 <__adddf3+0x270>
c0024ce2:	89 d3                	mov    ebx,edx
c0024ce4:	09 c3                	or     ebx,eax
c0024ce6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024ced:	75 27                	jne    c0024d16 <__adddf3+0x263>
c0024cef:	85 db                	test   ebx,ebx
c0024cf1:	0f 84 fb 03 00 00    	je     c00250f2 <__adddf3+0x63f>
c0024cf7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024cfa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0024cfd:	0f 84 f5 03 00 00    	je     c00250f8 <__adddf3+0x645>
c0024d03:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024d06:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024d09:	85 c0                	test   eax,eax
c0024d0b:	0f 89 91 03 00 00    	jns    c00250a2 <__adddf3+0x5ef>
c0024d11:	e9 85 03 00 00       	jmp    c002509b <__adddf3+0x5e8>
c0024d16:	85 db                	test   ebx,ebx
c0024d18:	0f 85 da 03 00 00    	jne    c00250f8 <__adddf3+0x645>
c0024d1e:	e9 cf 03 00 00       	jmp    c00250f2 <__adddf3+0x63f>
c0024d23:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024d26:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024d29:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024d2c:	f7 d1                	not    ecx
c0024d2e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024d34:	0f 84 70 03 00 00    	je     c00250aa <__adddf3+0x5f7>
c0024d3a:	d1 ea                	shr    edx,1
c0024d3c:	89 c1                	mov    ecx,eax
c0024d3e:	c1 e1 1f             	shl    ecx,0x1f
c0024d41:	09 ca                	or     edx,ecx
c0024d43:	d1 e8                	shr    eax,1
c0024d45:	e9 6f 03 00 00       	jmp    c00250b9 <__adddf3+0x606>
c0024d4a:	85 c0                	test   eax,eax
c0024d4c:	0f 89 67 03 00 00    	jns    c00250b9 <__adddf3+0x606>
c0024d52:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024d55:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024d58:	f7 d1                	not    ecx
c0024d5a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024d60:	0f 84 44 03 00 00    	je     c00250aa <__adddf3+0x5f7>
c0024d66:	89 d1                	mov    ecx,edx
c0024d68:	d1 e9                	shr    ecx,1
c0024d6a:	83 e2 01             	and    edx,0x1
c0024d6d:	09 ca                	or     edx,ecx
c0024d6f:	89 c1                	mov    ecx,eax
c0024d71:	c1 e1 1f             	shl    ecx,0x1f
c0024d74:	09 ca                	or     edx,ecx
c0024d76:	d1 e8                	shr    eax,1
c0024d78:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0024d7d:	e9 37 03 00 00       	jmp    c00250b9 <__adddf3+0x606>
c0024d82:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024d85:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024d8b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0024d8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024d91:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024d97:	29 de                	sub    esi,ebx
c0024d99:	85 f6                	test   esi,esi
c0024d9b:	0f 8e bd 00 00 00    	jle    c0024e5e <__adddf3+0x3ab>
c0024da1:	85 db                	test   ebx,ebx
c0024da3:	75 17                	jne    c0024dbc <__adddf3+0x309>
c0024da5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024da8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024dab:	0f 84 47 03 00 00    	je     c00250f8 <__adddf3+0x645>
c0024db1:	4e                   	dec    esi
c0024db2:	75 20                	jne    c0024dd4 <__adddf3+0x321>
c0024db4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024db7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0024dba:	eb 5b                	jmp    c0024e17 <__adddf3+0x364>
c0024dbc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024dbf:	f7 d3                	not    ebx
c0024dc1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024dc7:	0f 84 2b 03 00 00    	je     c00250f8 <__adddf3+0x645>
c0024dcd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024dd4:	83 fe 1f             	cmp    esi,0x1f
c0024dd7:	7e 49                	jle    c0024e22 <__adddf3+0x36f>
c0024dd9:	83 fe 3f             	cmp    esi,0x3f
c0024ddc:	0f 8f 16 03 00 00    	jg     c00250f8 <__adddf3+0x645>
c0024de2:	83 e6 1f             	and    esi,0x1f
c0024de5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024de8:	89 f1                	mov    ecx,esi
c0024dea:	d3 ef                	shr    edi,cl
c0024dec:	31 db                	xor    ebx,ebx
c0024dee:	85 f6                	test   esi,esi
c0024df0:	74 13                	je     c0024e05 <__adddf3+0x352>
c0024df2:	b9 20 00 00 00       	mov    ecx,0x20
c0024df7:	29 f1                	sub    ecx,esi
c0024df9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024dfc:	d3 e6                	shl    esi,cl
c0024dfe:	31 db                	xor    ebx,ebx
c0024e00:	85 f6                	test   esi,esi
c0024e02:	0f 95 c3             	setne  bl
c0024e05:	31 c9                	xor    ecx,ecx
c0024e07:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024e0b:	0f 95 c1             	setne  cl
c0024e0e:	09 cf                	or     edi,ecx
c0024e10:	09 fb                	or     ebx,edi
c0024e12:	29 da                	sub    edx,ebx
c0024e14:	83 d8 00             	sbb    eax,0x0
c0024e17:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024e1a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024e1d:	e9 aa 01 00 00       	jmp    c0024fcc <__adddf3+0x519>
c0024e22:	bf 20 00 00 00       	mov    edi,0x20
c0024e27:	29 f7                	sub    edi,esi
c0024e29:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024e2c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024e2f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024e32:	d3 e3                	shl    ebx,cl
c0024e34:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024e37:	89 f1                	mov    ecx,esi
c0024e39:	d3 ef                	shr    edi,cl
c0024e3b:	09 fb                	or     ebx,edi
c0024e3d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024e40:	89 f1                	mov    ecx,esi
c0024e42:	d3 ef                	shr    edi,cl
c0024e44:	89 fe                	mov    esi,edi
c0024e46:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024e49:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024e4c:	d3 e7                	shl    edi,cl
c0024e4e:	85 ff                	test   edi,edi
c0024e50:	0f 95 c1             	setne  cl
c0024e53:	0f b6 c9             	movzx  ecx,cl
c0024e56:	09 cb                	or     ebx,ecx
c0024e58:	29 da                	sub    edx,ebx
c0024e5a:	19 f0                	sbb    eax,esi
c0024e5c:	eb b9                	jmp    c0024e17 <__adddf3+0x364>
c0024e5e:	0f 84 cd 00 00 00    	je     c0024f31 <__adddf3+0x47e>
c0024e64:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024e67:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024e6a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024e6d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024e71:	75 1b                	jne    c0024e8e <__adddf3+0x3db>
c0024e73:	89 d6                	mov    esi,edx
c0024e75:	09 c6                	or     esi,eax
c0024e77:	0f 84 7b 02 00 00    	je     c00250f8 <__adddf3+0x645>
c0024e7d:	4b                   	dec    ebx
c0024e7e:	75 24                	jne    c0024ea4 <__adddf3+0x3f1>
c0024e80:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024e83:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024e86:	29 d1                	sub    ecx,edx
c0024e88:	19 c6                	sbb    esi,eax
c0024e8a:	89 ca                	mov    edx,ecx
c0024e8c:	eb 61                	jmp    c0024eef <__adddf3+0x43c>
c0024e8e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024e91:	f7 d6                	not    esi
c0024e93:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024e99:	0f 84 59 02 00 00    	je     c00250f8 <__adddf3+0x645>
c0024e9f:	0d 00 00 00 80       	or     eax,0x80000000
c0024ea4:	83 fb 1f             	cmp    ebx,0x1f
c0024ea7:	7e 4d                	jle    c0024ef6 <__adddf3+0x443>
c0024ea9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024eac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024eaf:	83 fb 3f             	cmp    ebx,0x3f
c0024eb2:	0f 8f 40 02 00 00    	jg     c00250f8 <__adddf3+0x645>
c0024eb8:	83 e3 1f             	and    ebx,0x1f
c0024ebb:	89 d9                	mov    ecx,ebx
c0024ebd:	89 c7                	mov    edi,eax
c0024ebf:	d3 ef                	shr    edi,cl
c0024ec1:	31 db                	xor    ebx,ebx
c0024ec3:	85 c9                	test   ecx,ecx
c0024ec5:	74 12                	je     c0024ed9 <__adddf3+0x426>
c0024ec7:	be 20 00 00 00       	mov    esi,0x20
c0024ecc:	29 ce                	sub    esi,ecx
c0024ece:	89 f1                	mov    ecx,esi
c0024ed0:	d3 e0                	shl    eax,cl
c0024ed2:	31 db                	xor    ebx,ebx
c0024ed4:	85 c0                	test   eax,eax
c0024ed6:	0f 95 c3             	setne  bl
c0024ed9:	31 c0                	xor    eax,eax
c0024edb:	85 d2                	test   edx,edx
c0024edd:	0f 95 c0             	setne  al
c0024ee0:	09 c7                	or     edi,eax
c0024ee2:	09 fb                	or     ebx,edi
c0024ee4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024ee7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024eea:	29 da                	sub    edx,ebx
c0024eec:	83 de 00             	sbb    esi,0x0
c0024eef:	89 f0                	mov    eax,esi
c0024ef1:	e9 d6 00 00 00       	jmp    c0024fcc <__adddf3+0x519>
c0024ef6:	be 20 00 00 00       	mov    esi,0x20
c0024efb:	29 de                	sub    esi,ebx
c0024efd:	89 c7                	mov    edi,eax
c0024eff:	89 f1                	mov    ecx,esi
c0024f01:	d3 e7                	shl    edi,cl
c0024f03:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024f06:	89 d7                	mov    edi,edx
c0024f08:	88 d9                	mov    cl,bl
c0024f0a:	d3 ef                	shr    edi,cl
c0024f0c:	89 f9                	mov    ecx,edi
c0024f0e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024f11:	09 cf                	or     edi,ecx
c0024f13:	88 d9                	mov    cl,bl
c0024f15:	d3 e8                	shr    eax,cl
c0024f17:	89 f1                	mov    ecx,esi
c0024f19:	d3 e2                	shl    edx,cl
c0024f1b:	85 d2                	test   edx,edx
c0024f1d:	0f 95 c2             	setne  dl
c0024f20:	0f b6 d2             	movzx  edx,dl
c0024f23:	09 d7                	or     edi,edx
c0024f25:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024f28:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024f2b:	29 fa                	sub    edx,edi
c0024f2d:	19 c6                	sbb    esi,eax
c0024f2f:	eb be                	jmp    c0024eef <__adddf3+0x43c>
c0024f31:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024f34:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024f37:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0024f3d:	75 6a                	jne    c0024fa9 <__adddf3+0x4f6>
c0024f3f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024f43:	75 58                	jne    c0024f9d <__adddf3+0x4ea>
c0024f45:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024f48:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024f4b:	89 d6                	mov    esi,edx
c0024f4d:	09 c6                	or     esi,eax
c0024f4f:	75 17                	jne    c0024f68 <__adddf3+0x4b5>
c0024f51:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024f54:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024f57:	85 db                	test   ebx,ebx
c0024f59:	0f 85 99 01 00 00    	jne    c00250f8 <__adddf3+0x645>
c0024f5f:	31 ff                	xor    edi,edi
c0024f61:	31 c9                	xor    ecx,ecx
c0024f63:	e9 90 01 00 00       	jmp    c00250f8 <__adddf3+0x645>
c0024f68:	85 db                	test   ebx,ebx
c0024f6a:	0f 84 88 01 00 00    	je     c00250f8 <__adddf3+0x645>
c0024f70:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024f73:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0024f76:	85 c0                	test   eax,eax
c0024f78:	79 10                	jns    c0024f8a <__adddf3+0x4d7>
c0024f7a:	31 c9                	xor    ecx,ecx
c0024f7c:	f7 da                	neg    edx
c0024f7e:	0f 95 c1             	setne  cl
c0024f81:	01 c8                	add    eax,ecx
c0024f83:	f7 d8                	neg    eax
c0024f85:	e9 2f 01 00 00       	jmp    c00250b9 <__adddf3+0x606>
c0024f8a:	31 ff                	xor    edi,edi
c0024f8c:	31 c9                	xor    ecx,ecx
c0024f8e:	89 c3                	mov    ebx,eax
c0024f90:	09 d3                	or     ebx,edx
c0024f92:	0f 84 60 01 00 00    	je     c00250f8 <__adddf3+0x645>
c0024f98:	e9 05 01 00 00       	jmp    c00250a2 <__adddf3+0x5ef>
c0024f9d:	31 ff                	xor    edi,edi
c0024f9f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024fa4:	e9 4f 01 00 00       	jmp    c00250f8 <__adddf3+0x645>
c0024fa9:	89 c1                	mov    ecx,eax
c0024fab:	89 d0                	mov    eax,edx
c0024fad:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0024fb0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0024fb3:	89 ca                	mov    edx,ecx
c0024fb5:	85 c9                	test   ecx,ecx
c0024fb7:	79 2c                	jns    c0024fe5 <__adddf3+0x532>
c0024fb9:	31 c9                	xor    ecx,ecx
c0024fbb:	f7 d8                	neg    eax
c0024fbd:	0f 95 c1             	setne  cl
c0024fc0:	01 ca                	add    edx,ecx
c0024fc2:	f7 da                	neg    edx
c0024fc4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024fc7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024fca:	eb 19                	jmp    c0024fe5 <__adddf3+0x532>
c0024fcc:	85 c0                	test   eax,eax
c0024fce:	0f 89 e5 00 00 00    	jns    c00250b9 <__adddf3+0x606>
c0024fd4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024fd9:	89 c1                	mov    ecx,eax
c0024fdb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024fde:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024fe1:	89 d0                	mov    eax,edx
c0024fe3:	89 ca                	mov    edx,ecx
c0024fe5:	85 d2                	test   edx,edx
c0024fe7:	74 59                	je     c0025042 <__adddf3+0x58f>
c0024fe9:	0f bd da             	bsr    ebx,edx
c0024fec:	83 f3 1f             	xor    ebx,0x1f
c0024fef:	88 d9                	mov    cl,bl
c0024ff1:	d3 e2                	shl    edx,cl
c0024ff3:	bf 20 00 00 00       	mov    edi,0x20
c0024ff8:	89 f9                	mov    ecx,edi
c0024ffa:	29 d9                	sub    ecx,ebx
c0024ffc:	89 c6                	mov    esi,eax
c0024ffe:	d3 ee                	shr    esi,cl
c0025000:	09 d6                	or     esi,edx
c0025002:	88 d9                	mov    cl,bl
c0025004:	d3 e0                	shl    eax,cl
c0025006:	89 c2                	mov    edx,eax
c0025008:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002500b:	25 ff 07 00 00       	and    eax,0x7ff
c0025010:	39 d8                	cmp    eax,ebx
c0025012:	7f 22                	jg     c0025036 <__adddf3+0x583>
c0025014:	29 c3                	sub    ebx,eax
c0025016:	43                   	inc    ebx
c0025017:	88 d9                	mov    cl,bl
c0025019:	d3 ea                	shr    edx,cl
c002501b:	29 df                	sub    edi,ebx
c002501d:	89 f9                	mov    ecx,edi
c002501f:	89 f0                	mov    eax,esi
c0025021:	d3 e0                	shl    eax,cl
c0025023:	09 c2                	or     edx,eax
c0025025:	89 f0                	mov    eax,esi
c0025027:	88 d9                	mov    cl,bl
c0025029:	d3 e8                	shr    eax,cl
c002502b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002502e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0025034:	eb 6f                	jmp    c00250a5 <__adddf3+0x5f2>
c0025036:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025039:	29 d8                	sub    eax,ebx
c002503b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002503e:	89 f0                	mov    eax,esi
c0025040:	eb 59                	jmp    c002509b <__adddf3+0x5e8>
c0025042:	85 c0                	test   eax,eax
c0025044:	74 6a                	je     c00250b0 <__adddf3+0x5fd>
c0025046:	0f bd c8             	bsr    ecx,eax
c0025049:	83 f1 1f             	xor    ecx,0x1f
c002504c:	d3 e0                	shl    eax,cl
c002504e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025051:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025057:	83 c1 20             	add    ecx,0x20
c002505a:	39 cb                	cmp    ebx,ecx
c002505c:	7f 35                	jg     c0025093 <__adddf3+0x5e0>
c002505e:	29 d9                	sub    ecx,ebx
c0025060:	8d 71 01             	lea    esi,[ecx+0x1]
c0025063:	83 fe 1f             	cmp    esi,0x1f
c0025066:	7e 09                	jle    c0025071 <__adddf3+0x5be>
c0025068:	83 e9 1f             	sub    ecx,0x1f
c002506b:	d3 e8                	shr    eax,cl
c002506d:	89 c3                	mov    ebx,eax
c002506f:	eb 11                	jmp    c0025082 <__adddf3+0x5cf>
c0025071:	b9 20 00 00 00       	mov    ecx,0x20
c0025076:	29 f1                	sub    ecx,esi
c0025078:	89 c3                	mov    ebx,eax
c002507a:	d3 e3                	shl    ebx,cl
c002507c:	89 f1                	mov    ecx,esi
c002507e:	d3 e8                	shr    eax,cl
c0025080:	89 c2                	mov    edx,eax
c0025082:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025085:	25 00 f8 ff ff       	and    eax,0xfffff800
c002508a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002508d:	89 d0                	mov    eax,edx
c002508f:	89 da                	mov    edx,ebx
c0025091:	eb 26                	jmp    c00250b9 <__adddf3+0x606>
c0025093:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025096:	29 cf                	sub    edi,ecx
c0025098:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002509b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00250a0:	eb 17                	jmp    c00250b9 <__adddf3+0x606>
c00250a2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00250a5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00250a8:	eb 0f                	jmp    c00250b9 <__adddf3+0x606>
c00250aa:	31 d2                	xor    edx,edx
c00250ac:	31 c0                	xor    eax,eax
c00250ae:	eb 09                	jmp    c00250b9 <__adddf3+0x606>
c00250b0:	89 c2                	mov    edx,eax
c00250b2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00250b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00250bc:	c1 e1 14             	shl    ecx,0x14
c00250bf:	89 c3                	mov    ebx,eax
c00250c1:	c1 eb 0b             	shr    ebx,0xb
c00250c4:	09 d9                	or     ecx,ebx
c00250c6:	89 d3                	mov    ebx,edx
c00250c8:	c1 eb 0b             	shr    ebx,0xb
c00250cb:	c1 e0 15             	shl    eax,0x15
c00250ce:	09 d8                	or     eax,ebx
c00250d0:	89 c7                	mov    edi,eax
c00250d2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00250d8:	0f 95 c0             	setne  al
c00250db:	89 c6                	mov    esi,eax
c00250dd:	09 f3                	or     ebx,esi
c00250df:	83 e3 01             	and    ebx,0x1
c00250e2:	c1 ea 0a             	shr    edx,0xa
c00250e5:	21 da                	and    edx,ebx
c00250e7:	89 f8                	mov    eax,edi
c00250e9:	01 d0                	add    eax,edx
c00250eb:	83 d1 00             	adc    ecx,0x0
c00250ee:	89 c7                	mov    edi,eax
c00250f0:	eb 06                	jmp    c00250f8 <__adddf3+0x645>
c00250f2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00250f5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00250f8:	89 f8                	mov    eax,edi
c00250fa:	89 ca                	mov    edx,ecx
c00250fc:	83 c4 24             	add    esp,0x24
c00250ff:	5b                   	pop    ebx
c0025100:	5e                   	pop    esi
c0025101:	5f                   	pop    edi
c0025102:	5d                   	pop    ebp
c0025103:	c3                   	ret    

c0025104 <__subdf3>:
c0025104:	55                   	push   ebp
c0025105:	89 e5                	mov    ebp,esp
c0025107:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002510a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002510d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025113:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0025116:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0025119:	5d                   	pop    ebp
c002511a:	e9 94 f9 ff ff       	jmp    c0024ab3 <__adddf3>

c002511f <__negdf2>:
c002511f:	55                   	push   ebp
c0025120:	89 e5                	mov    ebp,esp
c0025122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025125:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025128:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002512e:	5d                   	pop    ebp
c002512f:	c3                   	ret    

c0025130 <__muldf3>:
c0025130:	55                   	push   ebp
c0025131:	89 e5                	mov    ebp,esp
c0025133:	57                   	push   edi
c0025134:	56                   	push   esi
c0025135:	53                   	push   ebx
c0025136:	83 ec 24             	sub    esp,0x24
c0025139:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002513c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002513f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025142:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025145:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025148:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002514b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002514e:	89 c8                	mov    eax,ecx
c0025150:	c1 f8 14             	sar    eax,0x14
c0025153:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025156:	89 f8                	mov    eax,edi
c0025158:	89 fb                	mov    ebx,edi
c002515a:	c1 e3 0b             	shl    ebx,0xb
c002515d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0025160:	c1 e1 0b             	shl    ecx,0xb
c0025163:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025169:	c1 e8 15             	shr    eax,0x15
c002516c:	09 c1                	or     ecx,eax
c002516e:	89 d6                	mov    esi,edx
c0025170:	89 d0                	mov    eax,edx
c0025172:	c1 f8 14             	sar    eax,0x14
c0025175:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025178:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002517b:	89 c3                	mov    ebx,eax
c002517d:	c1 e3 0b             	shl    ebx,0xb
c0025180:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025183:	c1 e6 0b             	shl    esi,0xb
c0025186:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002518c:	c1 e8 15             	shr    eax,0x15
c002518f:	09 c6                	or     esi,eax
c0025191:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025194:	25 ff 07 00 00       	and    eax,0x7ff
c0025199:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002519c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002519f:	25 ff 07 00 00       	and    eax,0x7ff
c00251a4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00251a7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00251aa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00251ad:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00251b4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00251b7:	40                   	inc    eax
c00251b8:	a9 fe 07 00 00       	test   eax,0x7fe
c00251bd:	0f 85 8d 00 00 00    	jne    c0025250 <__muldf3+0x120>
c00251c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00251c6:	09 c8                	or     eax,ecx
c00251c8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00251cc:	74 44                	je     c0025212 <__muldf3+0xe2>
c00251ce:	85 c0                	test   eax,eax
c00251d0:	0f 85 31 02 00 00    	jne    c0025407 <__muldf3+0x2d7>
c00251d6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00251d9:	40                   	inc    eax
c00251da:	a9 fe 07 00 00       	test   eax,0x7fe
c00251df:	75 13                	jne    c00251f4 <__muldf3+0xc4>
c00251e1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00251e4:	09 f1                	or     ecx,esi
c00251e6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00251ea:	74 22                	je     c002520e <__muldf3+0xde>
c00251ec:	85 c9                	test   ecx,ecx
c00251ee:	0f 85 0d 02 00 00    	jne    c0025401 <__muldf3+0x2d1>
c00251f4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00251f8:	0f 89 09 02 00 00    	jns    c0025407 <__muldf3+0x2d7>
c00251fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025201:	05 00 00 00 80       	add    eax,0x80000000
c0025206:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025209:	e9 f9 01 00 00       	jmp    c0025407 <__muldf3+0x2d7>
c002520e:	85 c9                	test   ecx,ecx
c0025210:	eb 2e                	jmp    c0025240 <__muldf3+0x110>
c0025212:	85 c0                	test   eax,eax
c0025214:	74 20                	je     c0025236 <__muldf3+0x106>
c0025216:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0025219:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002521c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002521f:	c1 ef 1f             	shr    edi,0x1f
c0025222:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0025225:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0025228:	8d 43 ff             	lea    eax,[ebx-0x1]
c002522b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002522e:	09 f9                	or     ecx,edi
c0025230:	78 1e                	js     c0025250 <__muldf3+0x120>
c0025232:	89 c3                	mov    ebx,eax
c0025234:	eb e0                	jmp    c0025216 <__muldf3+0xe6>
c0025236:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025239:	f7 d0                	not    eax
c002523b:	a9 ff 07 00 00       	test   eax,0x7ff
c0025240:	75 b2                	jne    c00251f4 <__muldf3+0xc4>
c0025242:	31 ff                	xor    edi,edi
c0025244:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002524b:	e9 b7 01 00 00       	jmp    c0025407 <__muldf3+0x2d7>
c0025250:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025253:	40                   	inc    eax
c0025254:	a9 fe 07 00 00       	test   eax,0x7fe
c0025259:	75 57                	jne    c00252b2 <__muldf3+0x182>
c002525b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002525e:	09 f0                	or     eax,esi
c0025260:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025264:	74 23                	je     c0025289 <__muldf3+0x159>
c0025266:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002526a:	0f 89 91 01 00 00    	jns    c0025401 <__muldf3+0x2d1>
c0025270:	85 c0                	test   eax,eax
c0025272:	0f 85 89 01 00 00    	jne    c0025401 <__muldf3+0x2d1>
c0025278:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002527b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0025281:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025284:	e9 7e 01 00 00       	jmp    c0025407 <__muldf3+0x2d7>
c0025289:	85 c0                	test   eax,eax
c002528b:	75 0c                	jne    c0025299 <__muldf3+0x169>
c002528d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0025291:	0f 89 6a 01 00 00    	jns    c0025401 <__muldf3+0x2d1>
c0025297:	eb df                	jmp    c0025278 <__muldf3+0x148>
c0025299:	01 f6                	add    esi,esi
c002529b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002529e:	c1 ea 1f             	shr    edx,0x1f
c00252a1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00252a4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00252a7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00252aa:	09 d6                	or     esi,edx
c00252ac:	78 04                	js     c00252b2 <__muldf3+0x182>
c00252ae:	89 c3                	mov    ebx,eax
c00252b0:	eb e7                	jmp    c0025299 <__muldf3+0x169>
c00252b2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00252b8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00252be:	89 c8                	mov    eax,ecx
c00252c0:	f7 e6                	mul    esi
c00252c2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00252c5:	89 c7                	mov    edi,eax
c00252c7:	89 c8                	mov    eax,ecx
c00252c9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00252cc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00252cf:	89 c1                	mov    ecx,eax
c00252d1:	89 f0                	mov    eax,esi
c00252d3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00252d6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00252d9:	89 c6                	mov    esi,eax
c00252db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00252de:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00252e1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00252e4:	31 c0                	xor    eax,eax
c00252e6:	01 f1                	add    ecx,esi
c00252e8:	0f 92 c0             	setb   al
c00252eb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00252ee:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00252f1:	83 d6 00             	adc    esi,0x0
c00252f4:	01 c7                	add    edi,eax
c00252f6:	83 d6 00             	adc    esi,0x0
c00252f9:	01 ca                	add    edx,ecx
c00252fb:	0f 92 c1             	setb   cl
c00252fe:	0f b6 c9             	movzx  ecx,cl
c0025301:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0025304:	83 d6 00             	adc    esi,0x0
c0025307:	01 cf                	add    edi,ecx
c0025309:	83 d6 00             	adc    esi,0x0
c002530c:	31 c9                	xor    ecx,ecx
c002530e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0025311:	0f 95 c1             	setne  cl
c0025314:	09 cf                	or     edi,ecx
c0025316:	85 f6                	test   esi,esi
c0025318:	78 0c                	js     c0025326 <__muldf3+0x1f6>
c002531a:	01 f6                	add    esi,esi
c002531c:	89 f8                	mov    eax,edi
c002531e:	c1 e8 1f             	shr    eax,0x1f
c0025321:	09 c6                	or     esi,eax
c0025323:	01 ff                	add    edi,edi
c0025325:	4b                   	dec    ebx
c0025326:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002532c:	0f 8f 85 00 00 00    	jg     c00253b7 <__muldf3+0x287>
c0025332:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0025338:	85 db                	test   ebx,ebx
c002533a:	0f 8f 84 00 00 00    	jg     c00253c4 <__muldf3+0x294>
c0025340:	83 fb cc             	cmp    ebx,0xffffffcc
c0025343:	7c 79                	jl     c00253be <__muldf3+0x28e>
c0025345:	ba 01 00 00 00       	mov    edx,0x1
c002534a:	29 da                	sub    edx,ebx
c002534c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025352:	83 fa 1f             	cmp    edx,0x1f
c0025355:	7e 30                	jle    c0025387 <__muldf3+0x257>
c0025357:	83 fa 20             	cmp    edx,0x20
c002535a:	75 0b                	jne    c0025367 <__muldf3+0x237>
c002535c:	31 c0                	xor    eax,eax
c002535e:	85 ff                	test   edi,edi
c0025360:	0f 95 c0             	setne  al
c0025363:	89 c7                	mov    edi,eax
c0025365:	eb 1a                	jmp    c0025381 <__muldf3+0x251>
c0025367:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002536a:	89 f0                	mov    eax,esi
c002536c:	d3 e0                	shl    eax,cl
c002536e:	09 f8                	or     eax,edi
c0025370:	0f 95 c0             	setne  al
c0025373:	0f b6 c0             	movzx  eax,al
c0025376:	89 c7                	mov    edi,eax
c0025378:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002537d:	29 d9                	sub    ecx,ebx
c002537f:	d3 ee                	shr    esi,cl
c0025381:	09 f7                	or     edi,esi
c0025383:	31 db                	xor    ebx,ebx
c0025385:	eb 3b                	jmp    c00253c2 <__muldf3+0x292>
c0025387:	83 c3 1f             	add    ebx,0x1f
c002538a:	89 f0                	mov    eax,esi
c002538c:	88 d9                	mov    cl,bl
c002538e:	d3 e0                	shl    eax,cl
c0025390:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025393:	89 f8                	mov    eax,edi
c0025395:	88 d1                	mov    cl,dl
c0025397:	d3 e8                	shr    eax,cl
c0025399:	89 c1                	mov    ecx,eax
c002539b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002539e:	09 c8                	or     eax,ecx
c00253a0:	88 d9                	mov    cl,bl
c00253a2:	d3 e7                	shl    edi,cl
c00253a4:	31 db                	xor    ebx,ebx
c00253a6:	85 ff                	test   edi,edi
c00253a8:	0f 95 c3             	setne  bl
c00253ab:	89 df                	mov    edi,ebx
c00253ad:	09 c7                	or     edi,eax
c00253af:	88 d1                	mov    cl,dl
c00253b1:	d3 ee                	shr    esi,cl
c00253b3:	31 db                	xor    ebx,ebx
c00253b5:	eb 0d                	jmp    c00253c4 <__muldf3+0x294>
c00253b7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00253bc:	eb 02                	jmp    c00253c0 <__muldf3+0x290>
c00253be:	31 db                	xor    ebx,ebx
c00253c0:	31 ff                	xor    edi,edi
c00253c2:	31 f6                	xor    esi,esi
c00253c4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00253c7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00253ca:	25 00 f8 ff ff       	and    eax,0xfffff800
c00253cf:	09 c3                	or     ebx,eax
c00253d1:	c1 e3 14             	shl    ebx,0x14
c00253d4:	89 f0                	mov    eax,esi
c00253d6:	c1 e8 0b             	shr    eax,0xb
c00253d9:	09 c3                	or     ebx,eax
c00253db:	89 f8                	mov    eax,edi
c00253dd:	c1 e8 0b             	shr    eax,0xb
c00253e0:	c1 e6 15             	shl    esi,0x15
c00253e3:	09 c6                	or     esi,eax
c00253e5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00253eb:	0f 95 c1             	setne  cl
c00253ee:	09 c8                	or     eax,ecx
c00253f0:	83 e0 01             	and    eax,0x1
c00253f3:	c1 ef 0a             	shr    edi,0xa
c00253f6:	21 c7                	and    edi,eax
c00253f8:	01 f7                	add    edi,esi
c00253fa:	83 d3 00             	adc    ebx,0x0
c00253fd:	89 da                	mov    edx,ebx
c00253ff:	eb 03                	jmp    c0025404 <__muldf3+0x2d4>
c0025401:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0025404:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025407:	89 f8                	mov    eax,edi
c0025409:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002540c:	83 c4 24             	add    esp,0x24
c002540f:	5b                   	pop    ebx
c0025410:	5e                   	pop    esi
c0025411:	5f                   	pop    edi
c0025412:	5d                   	pop    ebp
c0025413:	c3                   	ret    

c0025414 <__divdf3>:
c0025414:	55                   	push   ebp
c0025415:	89 e5                	mov    ebp,esp
c0025417:	57                   	push   edi
c0025418:	56                   	push   esi
c0025419:	53                   	push   ebx
c002541a:	83 ec 2c             	sub    esp,0x2c
c002541d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025420:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025423:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025426:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0025429:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002542c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002542f:	89 ce                	mov    esi,ecx
c0025431:	89 c8                	mov    eax,ecx
c0025433:	c1 f8 14             	sar    eax,0x14
c0025436:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025439:	89 f8                	mov    eax,edi
c002543b:	89 fb                	mov    ebx,edi
c002543d:	c1 e3 0b             	shl    ebx,0xb
c0025440:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0025443:	c1 e6 0b             	shl    esi,0xb
c0025446:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002544c:	c1 e8 15             	shr    eax,0x15
c002544f:	09 c6                	or     esi,eax
c0025451:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0025454:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025457:	89 c2                	mov    edx,eax
c0025459:	c1 fa 14             	sar    edx,0x14
c002545c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002545f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0025462:	89 de                	mov    esi,ebx
c0025464:	c1 e6 0b             	shl    esi,0xb
c0025467:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002546a:	c1 e0 0b             	shl    eax,0xb
c002546d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025472:	c1 eb 15             	shr    ebx,0x15
c0025475:	09 d8                	or     eax,ebx
c0025477:	89 c2                	mov    edx,eax
c0025479:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002547c:	25 ff 07 00 00       	and    eax,0x7ff
c0025481:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025484:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025487:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002548d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0025490:	29 d8                	sub    eax,ebx
c0025492:	05 ff 03 00 00       	add    eax,0x3ff
c0025497:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002549a:	46                   	inc    esi
c002549b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00254a1:	0f 85 a5 00 00 00    	jne    c002554c <__divdf3+0x138>
c00254a7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00254aa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00254ad:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00254b1:	74 2a                	je     c00254dd <__divdf3+0xc9>
c00254b3:	85 f6                	test   esi,esi
c00254b5:	0f 85 cc 02 00 00    	jne    c0025787 <__divdf3+0x373>
c00254bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254be:	40                   	inc    eax
c00254bf:	a9 fe 07 00 00       	test   eax,0x7fe
c00254c4:	75 26                	jne    c00254ec <__divdf3+0xd8>
c00254c6:	85 db                	test   ebx,ebx
c00254c8:	74 22                	je     c00254ec <__divdf3+0xd8>
c00254ca:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00254cd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00254d0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00254d3:	09 d0                	or     eax,edx
c00254d5:	0f 85 ac 02 00 00    	jne    c0025787 <__divdf3+0x373>
c00254db:	eb 63                	jmp    c0025540 <__divdf3+0x12c>
c00254dd:	85 f6                	test   esi,esi
c00254df:	75 22                	jne    c0025503 <__divdf3+0xef>
c00254e1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254e4:	40                   	inc    eax
c00254e5:	a9 fe 07 00 00       	test   eax,0x7fe
c00254ea:	74 36                	je     c0025522 <__divdf3+0x10e>
c00254ec:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00254f0:	0f 89 91 02 00 00    	jns    c0025787 <__divdf3+0x373>
c00254f6:	89 f8                	mov    eax,edi
c00254f8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00254fe:	e9 80 02 00 00       	jmp    c0025783 <__divdf3+0x36f>
c0025503:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025506:	01 f6                	add    esi,esi
c0025508:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002550b:	c1 ef 1f             	shr    edi,0x1f
c002550e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025511:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0025514:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025517:	09 f7                	or     edi,esi
c0025519:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002551c:	78 2e                	js     c002554c <__divdf3+0x138>
c002551e:	89 c8                	mov    eax,ecx
c0025520:	eb e1                	jmp    c0025503 <__divdf3+0xef>
c0025522:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025525:	09 d0                	or     eax,edx
c0025527:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002552b:	74 0f                	je     c002553c <__divdf3+0x128>
c002552d:	85 c0                	test   eax,eax
c002552f:	74 bb                	je     c00254ec <__divdf3+0xd8>
c0025531:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025534:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025537:	e9 4b 02 00 00       	jmp    c0025787 <__divdf3+0x373>
c002553c:	85 c0                	test   eax,eax
c002553e:	75 ac                	jne    c00254ec <__divdf3+0xd8>
c0025540:	31 ff                	xor    edi,edi
c0025542:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0025547:	e9 3b 02 00 00       	jmp    c0025787 <__divdf3+0x373>
c002554c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002554f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0025552:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0025558:	75 6b                	jne    c00255c5 <__divdf3+0x1b1>
c002555a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002555d:	09 d6                	or     esi,edx
c002555f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0025563:	74 28                	je     c002558d <__divdf3+0x179>
c0025565:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025568:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002556b:	85 f6                	test   esi,esi
c002556d:	0f 85 14 02 00 00    	jne    c0025787 <__divdf3+0x373>
c0025573:	31 ff                	xor    edi,edi
c0025575:	31 c9                	xor    ecx,ecx
c0025577:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002557a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002557d:	0f 89 04 02 00 00    	jns    c0025787 <__divdf3+0x373>
c0025583:	b9 00 00 00 80       	mov    ecx,0x80000000
c0025588:	e9 fa 01 00 00       	jmp    c0025787 <__divdf3+0x373>
c002558d:	85 f6                	test   esi,esi
c002558f:	75 1b                	jne    c00255ac <__divdf3+0x198>
c0025591:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025594:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0025597:	25 00 00 00 80       	and    eax,0x80000000
c002559c:	31 c9                	xor    ecx,ecx
c002559e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00255a3:	89 cf                	mov    edi,ecx
c00255a5:	89 c1                	mov    ecx,eax
c00255a7:	e9 db 01 00 00       	jmp    c0025787 <__divdf3+0x373>
c00255ac:	01 d2                	add    edx,edx
c00255ae:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00255b1:	c1 eb 1f             	shr    ebx,0x1f
c00255b4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00255b7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00255ba:	8d 48 01             	lea    ecx,[eax+0x1]
c00255bd:	09 da                	or     edx,ebx
c00255bf:	78 04                	js     c00255c5 <__divdf3+0x1b1>
c00255c1:	89 c8                	mov    eax,ecx
c00255c3:	eb e7                	jmp    c00255ac <__divdf3+0x198>
c00255c5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00255c8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00255ce:	81 ca 00 00 00 80    	or     edx,0x80000000
c00255d4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00255d7:	39 d6                	cmp    esi,edx
c00255d9:	77 0d                	ja     c00255e8 <__divdf3+0x1d4>
c00255db:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00255de:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00255e1:	72 1b                	jb     c00255fe <__divdf3+0x1ea>
c00255e3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00255e6:	75 16                	jne    c00255fe <__divdf3+0x1ea>
c00255e8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00255eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00255ee:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00255f1:	83 de 00             	sbb    esi,0x0
c00255f4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00255f7:	ba 01 00 00 00       	mov    edx,0x1
c00255fc:	eb 02                	jmp    c0025600 <__divdf3+0x1ec>
c00255fe:	31 d2                	xor    edx,edx
c0025600:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0025607:	31 ff                	xor    edi,edi
c0025609:	01 ff                	add    edi,edi
c002560b:	89 d1                	mov    ecx,edx
c002560d:	c1 e9 1f             	shr    ecx,0x1f
c0025610:	09 cf                	or     edi,ecx
c0025612:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0025615:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0025618:	89 da                	mov    edx,ebx
c002561a:	89 f3                	mov    ebx,esi
c002561c:	8d 34 36             	lea    esi,[esi+esi*1]
c002561f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025622:	c1 e9 1f             	shr    ecx,0x1f
c0025625:	09 ce                	or     esi,ecx
c0025627:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002562a:	01 c9                	add    ecx,ecx
c002562c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002562f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025632:	85 db                	test   ebx,ebx
c0025634:	78 29                	js     c002565f <__divdf3+0x24b>
c0025636:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0025639:	72 07                	jb     c0025642 <__divdf3+0x22e>
c002563b:	75 3c                	jne    c0025679 <__divdf3+0x265>
c002563d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025640:	77 37                	ja     c0025679 <__divdf3+0x265>
c0025642:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025645:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0025648:	31 d2                	xor    edx,edx
c002564a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002564d:	0f 97 c2             	seta   dl
c0025650:	29 d6                	sub    esi,edx
c0025652:	89 d9                	mov    ecx,ebx
c0025654:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0025657:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002565a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002565d:	eb 17                	jmp    c0025676 <__divdf3+0x262>
c002565f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025662:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025665:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025668:	0f 97 c1             	seta   cl
c002566b:	0f b6 c9             	movzx  ecx,cl
c002566e:	29 ce                	sub    esi,ecx
c0025670:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0025673:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0025676:	83 ca 01             	or     edx,0x1
c0025679:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002567c:	75 8b                	jne    c0025609 <__divdf3+0x1f5>
c002567e:	c1 e7 09             	shl    edi,0x9
c0025681:	89 d1                	mov    ecx,edx
c0025683:	c1 e9 17             	shr    ecx,0x17
c0025686:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025689:	09 f3                	or     ebx,esi
c002568b:	0f 95 c3             	setne  bl
c002568e:	0f b6 db             	movzx  ebx,bl
c0025691:	c1 e2 09             	shl    edx,0x9
c0025694:	09 d3                	or     ebx,edx
c0025696:	89 ca                	mov    edx,ecx
c0025698:	09 fa                	or     edx,edi
c002569a:	78 0c                	js     c00256a8 <__divdf3+0x294>
c002569c:	01 d2                	add    edx,edx
c002569e:	89 d9                	mov    ecx,ebx
c00256a0:	c1 e9 1f             	shr    ecx,0x1f
c00256a3:	09 ca                	or     edx,ecx
c00256a5:	01 db                	add    ebx,ebx
c00256a7:	48                   	dec    eax
c00256a8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00256ad:	0f 8f 83 00 00 00    	jg     c0025736 <__divdf3+0x322>
c00256b3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00256b9:	85 c0                	test   eax,eax
c00256bb:	0f 8f 82 00 00 00    	jg     c0025743 <__divdf3+0x32f>
c00256c1:	83 f8 cc             	cmp    eax,0xffffffcc
c00256c4:	7c 77                	jl     c002573d <__divdf3+0x329>
c00256c6:	be 01 00 00 00       	mov    esi,0x1
c00256cb:	29 c6                	sub    esi,eax
c00256cd:	81 ca 00 00 00 80    	or     edx,0x80000000
c00256d3:	83 fe 1f             	cmp    esi,0x1f
c00256d6:	7e 2f                	jle    c0025707 <__divdf3+0x2f3>
c00256d8:	83 fe 20             	cmp    esi,0x20
c00256db:	75 0a                	jne    c00256e7 <__divdf3+0x2d3>
c00256dd:	85 db                	test   ebx,ebx
c00256df:	0f 95 c3             	setne  bl
c00256e2:	0f b6 db             	movzx  ebx,bl
c00256e5:	eb 1a                	jmp    c0025701 <__divdf3+0x2ed>
c00256e7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00256ea:	89 d7                	mov    edi,edx
c00256ec:	d3 e7                	shl    edi,cl
c00256ee:	89 f9                	mov    ecx,edi
c00256f0:	09 d9                	or     ecx,ebx
c00256f2:	0f 95 c3             	setne  bl
c00256f5:	0f b6 db             	movzx  ebx,bl
c00256f8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00256fd:	29 c1                	sub    ecx,eax
c00256ff:	d3 ea                	shr    edx,cl
c0025701:	09 d3                	or     ebx,edx
c0025703:	31 c0                	xor    eax,eax
c0025705:	eb 3a                	jmp    c0025741 <__divdf3+0x32d>
c0025707:	83 c0 1f             	add    eax,0x1f
c002570a:	89 d7                	mov    edi,edx
c002570c:	88 c1                	mov    cl,al
c002570e:	d3 e7                	shl    edi,cl
c0025710:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025713:	89 df                	mov    edi,ebx
c0025715:	89 f1                	mov    ecx,esi
c0025717:	d3 ef                	shr    edi,cl
c0025719:	89 f9                	mov    ecx,edi
c002571b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002571e:	09 cf                	or     edi,ecx
c0025720:	88 c1                	mov    cl,al
c0025722:	d3 e3                	shl    ebx,cl
c0025724:	85 db                	test   ebx,ebx
c0025726:	0f 95 c3             	setne  bl
c0025729:	0f b6 db             	movzx  ebx,bl
c002572c:	09 fb                	or     ebx,edi
c002572e:	89 f1                	mov    ecx,esi
c0025730:	d3 ea                	shr    edx,cl
c0025732:	31 c0                	xor    eax,eax
c0025734:	eb 0d                	jmp    c0025743 <__divdf3+0x32f>
c0025736:	b8 ff 07 00 00       	mov    eax,0x7ff
c002573b:	eb 02                	jmp    c002573f <__divdf3+0x32b>
c002573d:	31 c0                	xor    eax,eax
c002573f:	31 db                	xor    ebx,ebx
c0025741:	31 d2                	xor    edx,edx
c0025743:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0025746:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0025749:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002574f:	09 c8                	or     eax,ecx
c0025751:	c1 e0 14             	shl    eax,0x14
c0025754:	89 d1                	mov    ecx,edx
c0025756:	c1 e9 0b             	shr    ecx,0xb
c0025759:	09 c8                	or     eax,ecx
c002575b:	89 c6                	mov    esi,eax
c002575d:	89 d9                	mov    ecx,ebx
c002575f:	c1 e9 0b             	shr    ecx,0xb
c0025762:	c1 e2 15             	shl    edx,0x15
c0025765:	09 ca                	or     edx,ecx
c0025767:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002576d:	0f 95 c0             	setne  al
c0025770:	09 c1                	or     ecx,eax
c0025772:	83 e1 01             	and    ecx,0x1
c0025775:	c1 eb 0a             	shr    ebx,0xa
c0025778:	21 cb                	and    ebx,ecx
c002577a:	01 d3                	add    ebx,edx
c002577c:	89 d8                	mov    eax,ebx
c002577e:	83 d6 00             	adc    esi,0x0
c0025781:	89 f2                	mov    edx,esi
c0025783:	89 c7                	mov    edi,eax
c0025785:	89 d1                	mov    ecx,edx
c0025787:	89 f8                	mov    eax,edi
c0025789:	89 ca                	mov    edx,ecx
c002578b:	83 c4 2c             	add    esp,0x2c
c002578e:	5b                   	pop    ebx
c002578f:	5e                   	pop    esi
c0025790:	5f                   	pop    edi
c0025791:	5d                   	pop    ebp
c0025792:	c3                   	ret    

c0025793 <__floatsidf>:
c0025793:	55                   	push   ebp
c0025794:	89 e5                	mov    ebp,esp
c0025796:	56                   	push   esi
c0025797:	53                   	push   ebx
c0025798:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002579b:	85 db                	test   ebx,ebx
c002579d:	7e 15                	jle    c00257b4 <__floatsidf+0x21>
c002579f:	0f bd cb             	bsr    ecx,ebx
c00257a2:	83 f1 1f             	xor    ecx,0x1f
c00257a5:	d3 e3                	shl    ebx,cl
c00257a7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00257ad:	b8 1e 04 00 00       	mov    eax,0x41e
c00257b2:	eb 21                	jmp    c00257d5 <__floatsidf+0x42>
c00257b4:	b8 00 00 00 00       	mov    eax,0x0
c00257b9:	ba 00 00 00 00       	mov    edx,0x0
c00257be:	74 2a                	je     c00257ea <__floatsidf+0x57>
c00257c0:	f7 db                	neg    ebx
c00257c2:	0f bd cb             	bsr    ecx,ebx
c00257c5:	83 f1 1f             	xor    ecx,0x1f
c00257c8:	d3 e3                	shl    ebx,cl
c00257ca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00257d0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00257d5:	29 c8                	sub    eax,ecx
c00257d7:	c1 e0 14             	shl    eax,0x14
c00257da:	89 c1                	mov    ecx,eax
c00257dc:	89 de                	mov    esi,ebx
c00257de:	c1 ee 0b             	shr    esi,0xb
c00257e1:	09 f1                	or     ecx,esi
c00257e3:	89 ca                	mov    edx,ecx
c00257e5:	c1 e3 15             	shl    ebx,0x15
c00257e8:	89 d8                	mov    eax,ebx
c00257ea:	5b                   	pop    ebx
c00257eb:	5e                   	pop    esi
c00257ec:	5d                   	pop    ebp
c00257ed:	c3                   	ret    

c00257ee <__floatunsidf>:
c00257ee:	55                   	push   ebp
c00257ef:	89 e5                	mov    ebp,esp
c00257f1:	56                   	push   esi
c00257f2:	53                   	push   ebx
c00257f3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00257f6:	85 db                	test   ebx,ebx
c00257f8:	74 2a                	je     c0025824 <__floatunsidf+0x36>
c00257fa:	0f bd cb             	bsr    ecx,ebx
c00257fd:	83 f1 1f             	xor    ecx,0x1f
c0025800:	d3 e3                	shl    ebx,cl
c0025802:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025808:	b8 1e 04 00 00       	mov    eax,0x41e
c002580d:	29 c8                	sub    eax,ecx
c002580f:	c1 e0 14             	shl    eax,0x14
c0025812:	89 c1                	mov    ecx,eax
c0025814:	89 de                	mov    esi,ebx
c0025816:	c1 ee 0b             	shr    esi,0xb
c0025819:	09 f1                	or     ecx,esi
c002581b:	89 ca                	mov    edx,ecx
c002581d:	c1 e3 15             	shl    ebx,0x15
c0025820:	89 d8                	mov    eax,ebx
c0025822:	eb 04                	jmp    c0025828 <__floatunsidf+0x3a>
c0025824:	31 c0                	xor    eax,eax
c0025826:	31 d2                	xor    edx,edx
c0025828:	5b                   	pop    ebx
c0025829:	5e                   	pop    esi
c002582a:	5d                   	pop    ebp
c002582b:	c3                   	ret    

c002582c <__fixdfsi>:
c002582c:	55                   	push   ebp
c002582d:	89 e5                	mov    ebp,esp
c002582f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025832:	89 d1                	mov    ecx,edx
c0025834:	c1 e1 0b             	shl    ecx,0xb
c0025837:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002583d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025840:	c1 e8 15             	shr    eax,0x15
c0025843:	09 c1                	or     ecx,eax
c0025845:	c1 fa 14             	sar    edx,0x14
c0025848:	78 1f                	js     c0025869 <__fixdfsi+0x3d>
c002584a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0025850:	31 c0                	xor    eax,eax
c0025852:	83 fa 1e             	cmp    edx,0x1e
c0025855:	77 40                	ja     c0025897 <__fixdfsi+0x6b>
c0025857:	89 c8                	mov    eax,ecx
c0025859:	0d 00 00 00 80       	or     eax,0x80000000
c002585e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025863:	29 d1                	sub    ecx,edx
c0025865:	d3 e8                	shr    eax,cl
c0025867:	eb 2e                	jmp    c0025897 <__fixdfsi+0x6b>
c0025869:	31 c0                	xor    eax,eax
c002586b:	81 c2 01 04 00 00    	add    edx,0x401
c0025871:	78 24                	js     c0025897 <__fixdfsi+0x6b>
c0025873:	83 fa 1e             	cmp    edx,0x1e
c0025876:	7e 09                	jle    c0025881 <__fixdfsi+0x55>
c0025878:	83 fa 1f             	cmp    edx,0x1f
c002587b:	75 18                	jne    c0025895 <__fixdfsi+0x69>
c002587d:	85 c9                	test   ecx,ecx
c002587f:	75 14                	jne    c0025895 <__fixdfsi+0x69>
c0025881:	89 c8                	mov    eax,ecx
c0025883:	0d 00 00 00 80       	or     eax,0x80000000
c0025888:	b9 1f 00 00 00       	mov    ecx,0x1f
c002588d:	29 d1                	sub    ecx,edx
c002588f:	d3 e8                	shr    eax,cl
c0025891:	f7 d8                	neg    eax
c0025893:	eb 02                	jmp    c0025897 <__fixdfsi+0x6b>
c0025895:	31 c0                	xor    eax,eax
c0025897:	5d                   	pop    ebp
c0025898:	c3                   	ret    

c0025899 <__fixunsdfsi>:
c0025899:	55                   	push   ebp
c002589a:	89 e5                	mov    ebp,esp
c002589c:	53                   	push   ebx
c002589d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00258a3:	89 d3                	mov    ebx,edx
c00258a5:	c1 fb 14             	sar    ebx,0x14
c00258a8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00258ae:	31 c0                	xor    eax,eax
c00258b0:	83 fb 1f             	cmp    ebx,0x1f
c00258b3:	77 1d                	ja     c00258d2 <__fixunsdfsi+0x39>
c00258b5:	89 d0                	mov    eax,edx
c00258b7:	c1 e0 0b             	shl    eax,0xb
c00258ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00258bf:	c1 e9 15             	shr    ecx,0x15
c00258c2:	09 c8                	or     eax,ecx
c00258c4:	0d 00 00 00 80       	or     eax,0x80000000
c00258c9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00258ce:	29 d9                	sub    ecx,ebx
c00258d0:	d3 e8                	shr    eax,cl
c00258d2:	5b                   	pop    ebx
c00258d3:	5d                   	pop    ebp
c00258d4:	c3                   	ret    

c00258d5 <__cmpdf2>:
c00258d5:	55                   	push   ebp
c00258d6:	89 e5                	mov    ebp,esp
c00258d8:	57                   	push   edi
c00258d9:	56                   	push   esi
c00258da:	53                   	push   ebx
c00258db:	83 ec 0c             	sub    esp,0xc
c00258de:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00258e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00258e4:	89 ca                	mov    edx,ecx
c00258e6:	c1 ea 14             	shr    edx,0x14
c00258e9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00258ef:	89 cb                	mov    ebx,ecx
c00258f1:	c1 fb 1f             	sar    ebx,0x1f
c00258f4:	31 da                	xor    edx,ebx
c00258f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00258f9:	89 df                	mov    edi,ebx
c00258fb:	c1 e7 0b             	shl    edi,0xb
c00258fe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025901:	c1 e1 0b             	shl    ecx,0xb
c0025904:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002590a:	c1 eb 15             	shr    ebx,0x15
c002590d:	09 d9                	or     ecx,ebx
c002590f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0025912:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0025915:	89 ce                	mov    esi,ecx
c0025917:	c1 ee 14             	shr    esi,0x14
c002591a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025920:	89 cb                	mov    ebx,ecx
c0025922:	c1 fb 1f             	sar    ebx,0x1f
c0025925:	31 de                	xor    esi,ebx
c0025927:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002592a:	89 df                	mov    edi,ebx
c002592c:	c1 e7 0b             	shl    edi,0xb
c002592f:	c1 e1 0b             	shl    ecx,0xb
c0025932:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025938:	c1 eb 15             	shr    ebx,0x15
c002593b:	09 d9                	or     ecx,ebx
c002593d:	89 d3                	mov    ebx,edx
c002593f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0025945:	43                   	inc    ebx
c0025946:	83 fb 01             	cmp    ebx,0x1
c0025949:	77 08                	ja     c0025953 <__cmpdf2+0x7e>
c002594b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002594e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0025951:	75 68                	jne    c00259bb <__cmpdf2+0xe6>
c0025953:	89 f3                	mov    ebx,esi
c0025955:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002595b:	43                   	inc    ebx
c002595c:	83 fb 01             	cmp    ebx,0x1
c002595f:	77 06                	ja     c0025967 <__cmpdf2+0x92>
c0025961:	89 fb                	mov    ebx,edi
c0025963:	09 cb                	or     ebx,ecx
c0025965:	75 54                	jne    c00259bb <__cmpdf2+0xe6>
c0025967:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002596a:	09 f8                	or     eax,edi
c002596c:	09 c8                	or     eax,ecx
c002596e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0025971:	75 12                	jne    c0025985 <__cmpdf2+0xb0>
c0025973:	8d 42 01             	lea    eax,[edx+0x1]
c0025976:	83 f8 01             	cmp    eax,0x1
c0025979:	77 0a                	ja     c0025985 <__cmpdf2+0xb0>
c002597b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002597e:	31 c0                	xor    eax,eax
c0025980:	83 fb 01             	cmp    ebx,0x1
c0025983:	76 36                	jbe    c00259bb <__cmpdf2+0xe6>
c0025985:	b8 01 00 00 00       	mov    eax,0x1
c002598a:	39 f2                	cmp    edx,esi
c002598c:	7f 2d                	jg     c00259bb <__cmpdf2+0xe6>
c002598e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025993:	7c 26                	jl     c00259bb <__cmpdf2+0xe6>
c0025995:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025998:	77 07                	ja     c00259a1 <__cmpdf2+0xcc>
c002599a:	72 16                	jb     c00259b2 <__cmpdf2+0xdd>
c002599c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002599f:	76 0a                	jbe    c00259ab <__cmpdf2+0xd6>
c00259a1:	89 d0                	mov    eax,edx
c00259a3:	c1 f8 1f             	sar    eax,0x1f
c00259a6:	83 c8 01             	or     eax,0x1
c00259a9:	eb 10                	jmp    c00259bb <__cmpdf2+0xe6>
c00259ab:	b8 00 00 00 00       	mov    eax,0x0
c00259b0:	73 09                	jae    c00259bb <__cmpdf2+0xe6>
c00259b2:	89 d0                	mov    eax,edx
c00259b4:	c1 f8 1f             	sar    eax,0x1f
c00259b7:	83 e0 02             	and    eax,0x2
c00259ba:	48                   	dec    eax
c00259bb:	83 c4 0c             	add    esp,0xc
c00259be:	5b                   	pop    ebx
c00259bf:	5e                   	pop    esi
c00259c0:	5f                   	pop    edi
c00259c1:	5d                   	pop    ebp
c00259c2:	c3                   	ret    

c00259c3 <__eqdf2>:
c00259c3:	55                   	push   ebp
c00259c4:	89 e5                	mov    ebp,esp
c00259c6:	50                   	push   eax
c00259c7:	6a 01                	push   0x1
c00259c9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00259cc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00259cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259d5:	e8 fb fe ff ff       	call   c00258d5 <__cmpdf2>
c00259da:	83 c4 18             	add    esp,0x18
c00259dd:	c9                   	leave  
c00259de:	c3                   	ret    

c00259df <__nedf2>:
c00259df:	eb e2                	jmp    c00259c3 <__eqdf2>

c00259e1 <__gtdf2>:
c00259e1:	55                   	push   ebp
c00259e2:	89 e5                	mov    ebp,esp
c00259e4:	50                   	push   eax
c00259e5:	6a ff                	push   0xffffffff
c00259e7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00259ea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00259ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f3:	e8 dd fe ff ff       	call   c00258d5 <__cmpdf2>
c00259f8:	83 c4 18             	add    esp,0x18
c00259fb:	c9                   	leave  
c00259fc:	c3                   	ret    

c00259fd <__gedf2>:
c00259fd:	eb e2                	jmp    c00259e1 <__gtdf2>

c00259ff <__ltdf2>:
c00259ff:	eb c2                	jmp    c00259c3 <__eqdf2>

c0025a01 <__ledf2>:
c0025a01:	eb c0                	jmp    c00259c3 <__eqdf2>

c0025a03 <__truncdfsf2>:
c0025a03:	55                   	push   ebp
c0025a04:	89 e5                	mov    ebp,esp
c0025a06:	57                   	push   edi
c0025a07:	56                   	push   esi
c0025a08:	53                   	push   ebx
c0025a09:	83 ec 0c             	sub    esp,0xc
c0025a0c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a0f:	89 d1                	mov    ecx,edx
c0025a11:	c1 f9 14             	sar    ecx,0x14
c0025a14:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025a17:	89 df                	mov    edi,ebx
c0025a19:	c1 e7 0b             	shl    edi,0xb
c0025a1c:	89 d0                	mov    eax,edx
c0025a1e:	c1 e0 0b             	shl    eax,0xb
c0025a21:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025a26:	c1 eb 15             	shr    ebx,0x15
c0025a29:	09 d8                	or     eax,ebx
c0025a2b:	89 cb                	mov    ebx,ecx
c0025a2d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025a33:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0025a39:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0025a3f:	0f 86 9e 00 00 00    	jbe    c0025ae3 <__truncdfsf2+0xe0>
c0025a45:	85 db                	test   ebx,ebx
c0025a47:	75 0a                	jne    c0025a53 <__truncdfsf2+0x50>
c0025a49:	c1 fa 17             	sar    edx,0x17
c0025a4c:	30 d2                	xor    dl,dl
c0025a4e:	e9 84 00 00 00       	jmp    c0025ad7 <__truncdfsf2+0xd4>
c0025a53:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0025a59:	83 fe 83             	cmp    esi,0xffffff83
c0025a5c:	7d 4b                	jge    c0025aa9 <__truncdfsf2+0xa6>
c0025a5e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0025a63:	29 f1                	sub    ecx,esi
c0025a65:	83 f9 1f             	cmp    ecx,0x1f
c0025a68:	7f 6b                	jg     c0025ad5 <__truncdfsf2+0xd2>
c0025a6a:	0d 00 00 00 80       	or     eax,0x80000000
c0025a6f:	89 c3                	mov    ebx,eax
c0025a71:	d3 eb                	shr    ebx,cl
c0025a73:	be 01 00 00 00       	mov    esi,0x1
c0025a78:	d3 e6                	shl    esi,cl
c0025a7a:	4e                   	dec    esi
c0025a7b:	21 f0                	and    eax,esi
c0025a7d:	09 f8                	or     eax,edi
c0025a7f:	0f 95 c0             	setne  al
c0025a82:	0f b6 c0             	movzx  eax,al
c0025a85:	09 c3                	or     ebx,eax
c0025a87:	89 d9                	mov    ecx,ebx
c0025a89:	c1 e9 08             	shr    ecx,0x8
c0025a8c:	f6 c3 7f             	test   bl,0x7f
c0025a8f:	0f 95 c0             	setne  al
c0025a92:	09 c8                	or     eax,ecx
c0025a94:	83 e0 01             	and    eax,0x1
c0025a97:	c1 eb 07             	shr    ebx,0x7
c0025a9a:	21 c3                	and    ebx,eax
c0025a9c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0025aa2:	09 d1                	or     ecx,edx
c0025aa4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0025aa7:	eb 76                	jmp    c0025b1f <__truncdfsf2+0x11c>
c0025aa9:	83 c6 80             	add    esi,0xffffff80
c0025aac:	7e 1d                	jle    c0025acb <__truncdfsf2+0xc8>
c0025aae:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0025ab4:	75 0b                	jne    c0025ac1 <__truncdfsf2+0xbe>
c0025ab6:	09 f8                	or     eax,edi
c0025ab8:	74 09                	je     c0025ac3 <__truncdfsf2+0xc0>
c0025aba:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0025abf:	eb 02                	jmp    c0025ac3 <__truncdfsf2+0xc0>
c0025ac1:	31 c0                	xor    eax,eax
c0025ac3:	c1 fa 17             	sar    edx,0x17
c0025ac6:	80 ca ff             	or     dl,0xff
c0025ac9:	eb 0e                	jmp    c0025ad9 <__truncdfsf2+0xd6>
c0025acb:	c1 fa 1f             	sar    edx,0x1f
c0025ace:	c1 e2 08             	shl    edx,0x8
c0025ad1:	09 ca                	or     edx,ecx
c0025ad3:	eb 04                	jmp    c0025ad9 <__truncdfsf2+0xd6>
c0025ad5:	31 d2                	xor    edx,edx
c0025ad7:	31 c0                	xor    eax,eax
c0025ad9:	c1 e2 17             	shl    edx,0x17
c0025adc:	c1 e8 08             	shr    eax,0x8
c0025adf:	09 d0                	or     eax,edx
c0025ae1:	eb 3c                	jmp    c0025b1f <__truncdfsf2+0x11c>
c0025ae3:	81 e9 80 03 00 00    	sub    ecx,0x380
c0025ae9:	89 ca                	mov    edx,ecx
c0025aeb:	c1 fa 0b             	sar    edx,0xb
c0025aee:	c1 e2 08             	shl    edx,0x8
c0025af1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025af4:	31 db                	xor    ebx,ebx
c0025af6:	85 ff                	test   edi,edi
c0025af8:	0f 95 c3             	setne  bl
c0025afb:	09 d8                	or     eax,ebx
c0025afd:	89 c3                	mov    ebx,eax
c0025aff:	c1 eb 08             	shr    ebx,0x8
c0025b02:	a8 7f                	test   al,0x7f
c0025b04:	0f 95 c2             	setne  dl
c0025b07:	89 d6                	mov    esi,edx
c0025b09:	09 de                	or     esi,ebx
c0025b0b:	83 e6 01             	and    esi,0x1
c0025b0e:	c1 e8 07             	shr    eax,0x7
c0025b11:	21 f0                	and    eax,esi
c0025b13:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025b16:	09 ca                	or     edx,ecx
c0025b18:	c1 e2 17             	shl    edx,0x17
c0025b1b:	09 da                	or     edx,ebx
c0025b1d:	01 d0                	add    eax,edx
c0025b1f:	83 c4 0c             	add    esp,0xc
c0025b22:	5b                   	pop    ebx
c0025b23:	5e                   	pop    esi
c0025b24:	5f                   	pop    edi
c0025b25:	5d                   	pop    ebp
c0025b26:	c3                   	ret    

c0025b27 <__extendsfdf2>:
c0025b27:	55                   	push   ebp
c0025b28:	89 e5                	mov    ebp,esp
c0025b2a:	57                   	push   edi
c0025b2b:	56                   	push   esi
c0025b2c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025b2f:	89 d1                	mov    ecx,edx
c0025b31:	c1 f9 17             	sar    ecx,0x17
c0025b34:	c1 e2 08             	shl    edx,0x8
c0025b37:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025b3d:	89 c8                	mov    eax,ecx
c0025b3f:	80 e4 f8             	and    ah,0xf8
c0025b42:	8d 71 01             	lea    esi,[ecx+0x1]
c0025b45:	81 e6 fe 00 00 00    	and    esi,0xfe
c0025b4b:	75 27                	jne    c0025b74 <__extendsfdf2+0x4d>
c0025b4d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0025b53:	75 18                	jne    c0025b6d <__extendsfdf2+0x46>
c0025b55:	85 d2                	test   edx,edx
c0025b57:	74 20                	je     c0025b79 <__extendsfdf2+0x52>
c0025b59:	41                   	inc    ecx
c0025b5a:	01 d2                	add    edx,edx
c0025b5c:	79 fb                	jns    c0025b59 <__extendsfdf2+0x32>
c0025b5e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025b64:	29 c8                	sub    eax,ecx
c0025b66:	05 81 03 00 00       	add    eax,0x381
c0025b6b:	eb 0c                	jmp    c0025b79 <__extendsfdf2+0x52>
c0025b6d:	05 00 07 00 00       	add    eax,0x700
c0025b72:	eb 05                	jmp    c0025b79 <__extendsfdf2+0x52>
c0025b74:	05 80 03 00 00       	add    eax,0x380
c0025b79:	c1 e0 14             	shl    eax,0x14
c0025b7c:	89 c1                	mov    ecx,eax
c0025b7e:	89 d0                	mov    eax,edx
c0025b80:	c1 e8 0b             	shr    eax,0xb
c0025b83:	09 c1                	or     ecx,eax
c0025b85:	c1 e2 15             	shl    edx,0x15
c0025b88:	89 d0                	mov    eax,edx
c0025b8a:	89 ca                	mov    edx,ecx
c0025b8c:	5e                   	pop    esi
c0025b8d:	5f                   	pop    edi
c0025b8e:	5d                   	pop    ebp
c0025b8f:	c3                   	ret    

c0025b90 <fabs>:
c0025b90:	83 ec 0c             	sub    esp,0xc
c0025b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b97:	89 04 24             	mov    DWORD PTR [esp],eax
c0025b9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b9e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025ba3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025ba7:	dd 04 24             	fld    QWORD PTR [esp]
c0025baa:	83 c4 0c             	add    esp,0xc
c0025bad:	c3                   	ret    
c0025bae:	66 90                	xchg   ax,ax

c0025bb0 <lrint>:
c0025bb0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025bb4:	83 ec 04             	sub    esp,0x4
c0025bb7:	db 1c 24             	fistp  DWORD PTR [esp]
c0025bba:	58                   	pop    eax
c0025bbb:	c3                   	ret    

c0025bbc <lrintf>:
c0025bbc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0025bc0:	83 ec 04             	sub    esp,0x4
c0025bc3:	db 1c 24             	fistp  DWORD PTR [esp]
c0025bc6:	58                   	pop    eax
c0025bc7:	c3                   	ret    

Disassembly of section .init:

c0025bc8 <_init>:
c0025bc8:	55                   	push   ebp
c0025bc9:	89 e5                	mov    ebp,esp
c0025bcb:	e8 48 a5 fd ff       	call   c0000118 <frame_dummy>
c0025bd0:	e8 63 e0 ff ff       	call   c0023c38 <__do_global_ctors_aux>
c0025bd5:	5d                   	pop    ebp
c0025bd6:	c3                   	ret    

Disassembly of section .fini:

c0025bd7 <_fini>:
c0025bd7:	55                   	push   ebp
c0025bd8:	89 e5                	mov    ebp,esp
c0025bda:	e8 c9 a4 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0025bdf:	5d                   	pop    ebp
c0025be0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025be2 <Computer::~Computer()>:
c0025be2:	83 ec 0c             	sub    esp,0xc
c0025be5:	ba 30 76 02 c0       	mov    edx,0xc0027630
c0025bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bee:	89 10                	mov    DWORD PTR [eax],edx
c0025bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf4:	83 ec 0c             	sub    esp,0xc
c0025bf7:	50                   	push   eax
c0025bf8:	e8 f7 dc fe ff       	call   c00138f4 <Device::~Device()>
c0025bfd:	83 c4 10             	add    esp,0x10
c0025c00:	90                   	nop
c0025c01:	83 c4 0c             	add    esp,0xc
c0025c04:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025c06 <Computer::~Computer()>:
c0025c06:	83 ec 0c             	sub    esp,0xc
c0025c09:	83 ec 0c             	sub    esp,0xc
c0025c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c10:	e8 cd ff ff ff       	call   c0025be2 <Computer::~Computer()>
c0025c15:	83 c4 10             	add    esp,0x10
c0025c18:	83 ec 08             	sub    esp,0x8
c0025c1b:	68 ec 01 00 00       	push   0x1ec
c0025c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c24:	e8 2a c9 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0025c29:	83 c4 10             	add    esp,0x10
c0025c2c:	83 c4 0c             	add    esp,0xc
c0025c2f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025c30 <idleCommon()>:
c0025c30:	83 ec 0c             	sub    esp,0xc
c0025c33:	e8 a5 64 ff ff       	call   c001c0dd <lockScheduler()>
c0025c38:	e8 db 67 ff ff       	call   c001c418 <schedule()>
c0025c3d:	83 c4 0c             	add    esp,0xc
c0025c40:	e9 9a 64 ff ff       	jmp    c001c0df <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025c46 <LinkedList<UnixFile>::~LinkedList()>:
c0025c46:	90                   	nop
c0025c47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025c48 <LinkedList<UnixFile>::LinkedList()>:
c0025c48:	83 ec 0c             	sub    esp,0xc
c0025c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025c8b:	83 ec 0c             	sub    esp,0xc
c0025c8e:	68 a6 78 02 c0       	push   0xc00278a6
c0025c93:	e8 9b c9 fe ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0025c98:	83 c4 10             	add    esp,0x10
c0025c9b:	90                   	nop
c0025c9c:	83 c4 0c             	add    esp,0xc
c0025c9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0025ca0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0025ca0:	83 ec 0c             	sub    esp,0xc
c0025ca3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025ca8:	75 10                	jne    c0025cba <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0025caa:	83 ec 0c             	sub    esp,0xc
c0025cad:	68 c0 78 02 c0       	push   0xc00278c0
c0025cb2:	e8 e0 33 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025cb7:	83 c4 10             	add    esp,0x10
c0025cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cc0:	85 c0                	test   eax,eax
c0025cc2:	74 34                	je     c0025cf8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025ccb:	85 c0                	test   eax,eax
c0025ccd:	74 29                	je     c0025cf8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025cd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025cda:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ce5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025cef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025cf6:	eb 65                	jmp    c0025d5d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cfe:	85 c0                	test   eax,eax
c0025d00:	75 4b                	jne    c0025d4d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d09:	85 c0                	test   eax,eax
c0025d0b:	75 40                	jne    c0025d4d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025d15:	89 10                	mov    DWORD PTR [eax],edx
c0025d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025d1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d29:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d37:	85 c0                	test   eax,eax
c0025d39:	74 22                	je     c0025d5d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025d3b:	83 ec 0c             	sub    esp,0xc
c0025d3e:	68 e2 78 02 c0       	push   0xc00278e2
c0025d43:	e8 4f 33 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025d48:	83 c4 10             	add    esp,0x10
c0025d4b:	eb 10                	jmp    c0025d5d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025d4d:	83 ec 0c             	sub    esp,0xc
c0025d50:	68 ec 78 02 c0       	push   0xc00278ec
c0025d55:	e8 3d 33 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025d5a:	83 c4 10             	add    esp,0x10
c0025d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d64:	8d 50 01             	lea    edx,[eax+0x1]
c0025d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025d6e:	90                   	nop
c0025d6f:	83 c4 0c             	add    esp,0xc
c0025d72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0025d74 <LinkedList<UnixFile>::getFirstElement()>:
c0025d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d7a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0025d7c <LinkedList<UnixFile>::removeFirst()>:
c0025d7c:	83 ec 0c             	sub    esp,0xc
c0025d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d83:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d85:	85 c0                	test   eax,eax
c0025d87:	75 12                	jne    c0025d9b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0025d89:	83 ec 0c             	sub    esp,0xc
c0025d8c:	68 f8 78 02 c0       	push   0xc00278f8
c0025d91:	e8 01 33 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025d96:	83 c4 10             	add    esp,0x10
c0025d99:	eb 7e                	jmp    c0025e19 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0025d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025da2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025da5:	85 c0                	test   eax,eax
c0025da7:	74 10                	je     c0025db9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0025da9:	83 ec 0c             	sub    esp,0xc
c0025dac:	68 43 79 02 c0       	push   0xc0027943
c0025db1:	e8 e1 32 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025db6:	83 c4 10             	add    esp,0x10
c0025db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025dc2:	85 c0                	test   eax,eax
c0025dc4:	75 33                	jne    c0025df9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025de2:	83 f8 01             	cmp    eax,0x1
c0025de5:	74 21                	je     c0025e08 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025de7:	83 ec 0c             	sub    esp,0xc
c0025dea:	68 1c 79 02 c0       	push   0xc002791c
c0025def:	e8 a3 32 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025df4:	83 c4 10             	add    esp,0x10
c0025df7:	eb 0f                	jmp    c0025e08 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e06:	89 10                	mov    DWORD PTR [eax],edx
c0025e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025e0f:	8d 50 ff             	lea    edx,[eax-0x1]
c0025e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025e19:	83 c4 0c             	add    esp,0xc
c0025e1c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0025e1e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0025e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025e25:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025e26 <DriverlessDevice::~DriverlessDevice()>:
c0025e26:	ba 04 80 02 c0       	mov    edx,0xc0028004
c0025e2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e2f:	89 10                	mov    DWORD PTR [eax],edx
c0025e31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e35:	50                   	push   eax
c0025e36:	e8 b9 da fe ff       	call   c00138f4 <Device::~Device()>
c0025e3b:	83 c4 04             	add    esp,0x4
c0025e3e:	90                   	nop
c0025e3f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0025e40 <DriverlessDevice::~DriverlessDevice()>:
c0025e40:	83 ec 0c             	sub    esp,0xc
c0025e43:	83 ec 0c             	sub    esp,0xc
c0025e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e4a:	e8 d7 ff ff ff       	call   c0025e26 <DriverlessDevice::~DriverlessDevice()>
c0025e4f:	83 c4 10             	add    esp,0x10
c0025e52:	83 ec 08             	sub    esp,0x8
c0025e55:	68 58 01 00 00       	push   0x158
c0025e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e5e:	e8 f0 c6 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0025e63:	83 c4 10             	add    esp,0x10
c0025e66:	83 c4 0c             	add    esp,0xc
c0025e69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0025e6a <LinkedList<Device>::addElement(Device*)>:
c0025e6a:	83 ec 0c             	sub    esp,0xc
c0025e6d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025e72:	75 10                	jne    c0025e84 <LinkedList<Device>::addElement(Device*)+0x1a>
c0025e74:	83 ec 0c             	sub    esp,0xc
c0025e77:	68 c0 78 02 c0       	push   0xc00278c0
c0025e7c:	e8 16 32 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025e81:	83 c4 10             	add    esp,0x10
c0025e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e88:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e8a:	85 c0                	test   eax,eax
c0025e8c:	74 3a                	je     c0025ec8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025e95:	85 c0                	test   eax,eax
c0025e97:	74 2f                	je     c0025ec8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025ea0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ea4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0025eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025eb2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025ebc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025ec6:	eb 68                	jmp    c0025f30 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ece:	85 c0                	test   eax,eax
c0025ed0:	75 4e                	jne    c0025f20 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025ed9:	85 c0                	test   eax,eax
c0025edb:	75 43                	jne    c0025f20 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ee5:	89 10                	mov    DWORD PTR [eax],edx
c0025ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025eef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025ef9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025f0a:	85 c0                	test   eax,eax
c0025f0c:	74 22                	je     c0025f30 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025f0e:	83 ec 0c             	sub    esp,0xc
c0025f11:	68 e2 78 02 c0       	push   0xc00278e2
c0025f16:	e8 7c 31 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025f1b:	83 c4 10             	add    esp,0x10
c0025f1e:	eb 10                	jmp    c0025f30 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025f20:	83 ec 0c             	sub    esp,0xc
c0025f23:	68 ec 78 02 c0       	push   0xc00278ec
c0025f28:	e8 6a 31 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025f2d:	83 c4 10             	add    esp,0x10
c0025f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025f37:	8d 50 01             	lea    edx,[eax+0x1]
c0025f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025f41:	90                   	nop
c0025f42:	83 c4 0c             	add    esp,0xc
c0025f45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025f46 <LinkedList<Device>::LinkedList()>:
c0025f46:	83 ec 0c             	sub    esp,0xc
c0025f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f82:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025f89:	83 ec 0c             	sub    esp,0xc
c0025f8c:	68 a6 78 02 c0       	push   0xc00278a6
c0025f91:	e8 9d c6 fe ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0025f96:	83 c4 10             	add    esp,0x10
c0025f99:	90                   	nop
c0025f9a:	83 c4 0c             	add    esp,0xc
c0025f9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025f9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025f9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025fa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fa4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025fa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025faa:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fac:	85 c0                	test   eax,eax
c0025fae:	75 0e                	jne    c0025fbe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025fb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025fb7:	85 c0                	test   eax,eax
c0025fb9:	75 03                	jne    c0025fbe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025fbb:	b0 01                	mov    al,0x1
c0025fbd:	c3                   	ret    
c0025fbe:	b0 00                	mov    al,0x0
c0025fc0:	90                   	nop
c0025fc1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025fc2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025fc2:	83 ec 0c             	sub    esp,0xc
c0025fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fcb:	85 c0                	test   eax,eax
c0025fcd:	75 15                	jne    c0025fe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0025fcf:	83 ec 0c             	sub    esp,0xc
c0025fd2:	68 f8 78 02 c0       	push   0xc00278f8
c0025fd7:	e8 bb 30 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0025fdc:	83 c4 10             	add    esp,0x10
c0025fdf:	e9 88 00 00 00       	jmp    c002606c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0025fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025feb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025fee:	85 c0                	test   eax,eax
c0025ff0:	0f 95 c0             	setne  al
c0025ff3:	84 c0                	test   al,al
c0025ff5:	74 10                	je     c0026007 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025ff7:	83 ec 0c             	sub    esp,0xc
c0025ffa:	68 43 79 02 c0       	push   0xc0027943
c0025fff:	e8 93 30 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0026004:	83 c4 10             	add    esp,0x10
c0026007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600b:	8b 00                	mov    eax,DWORD PTR [eax]
c002600d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026010:	85 c0                	test   eax,eax
c0026012:	0f 94 c0             	sete   al
c0026015:	84 c0                	test   al,al
c0026017:	74 33                	je     c002604c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0026019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002601d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026027:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002602e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026032:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026035:	83 f8 01             	cmp    eax,0x1
c0026038:	74 21                	je     c002605b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002603a:	83 ec 0c             	sub    esp,0xc
c002603d:	68 1c 79 02 c0       	push   0xc002791c
c0026042:	e8 50 30 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0026047:	83 c4 10             	add    esp,0x10
c002604a:	eb 0f                	jmp    c002605b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002604c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026050:	8b 00                	mov    eax,DWORD PTR [eax]
c0026052:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0026055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026059:	89 10                	mov    DWORD PTR [eax],edx
c002605b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002605f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026062:	8d 50 ff             	lea    edx,[eax-0x1]
c0026065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026069:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002606c:	83 c4 0c             	add    esp,0xc
c002606f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0026070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0026070:	83 ec 0c             	sub    esp,0xc
c0026073:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026078:	75 10                	jne    c002608a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002607a:	83 ec 0c             	sub    esp,0xc
c002607d:	68 c0 78 02 c0       	push   0xc00278c0
c0026082:	e8 10 30 ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0026087:	83 c4 10             	add    esp,0x10
c002608a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002608e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026090:	85 c0                	test   eax,eax
c0026092:	74 34                	je     c00260c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0026094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002609b:	85 c0                	test   eax,eax
c002609d:	74 29                	je     c00260c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002609f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00260a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00260aa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00260ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00260b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00260b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00260bf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00260c6:	eb 65                	jmp    c002612d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00260c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00260ce:	85 c0                	test   eax,eax
c00260d0:	75 4b                	jne    c002611d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00260d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00260d9:	85 c0                	test   eax,eax
c00260db:	75 40                	jne    c002611d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00260dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00260e5:	89 10                	mov    DWORD PTR [eax],edx
c00260e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00260ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00260f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00260f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026104:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026107:	85 c0                	test   eax,eax
c0026109:	74 22                	je     c002612d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002610b:	83 ec 0c             	sub    esp,0xc
c002610e:	68 e2 78 02 c0       	push   0xc00278e2
c0026113:	e8 7f 2f ff ff       	call   c0019097 <Krnl::panic(char const*)>
c0026118:	83 c4 10             	add    esp,0x10
c002611b:	eb 10                	jmp    c002612d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002611d:	83 ec 0c             	sub    esp,0xc
c0026120:	68 ec 78 02 c0       	push   0xc00278ec
c0026125:	e8 6d 2f ff ff       	call   c0019097 <Krnl::panic(char const*)>
c002612a:	83 c4 10             	add    esp,0x10
c002612d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026131:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026134:	8d 50 01             	lea    edx,[eax+0x1]
c0026137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002613e:	90                   	nop
c002613f:	83 c4 0c             	add    esp,0xc
c0026142:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0026144 <ACPI::~ACPI()>:
c0026144:	83 ec 0c             	sub    esp,0xc
c0026147:	ba 78 88 02 c0       	mov    edx,0xc0028878
c002614c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026150:	89 10                	mov    DWORD PTR [eax],edx
c0026152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026156:	83 ec 0c             	sub    esp,0xc
c0026159:	50                   	push   eax
c002615a:	e8 95 d7 fe ff       	call   c00138f4 <Device::~Device()>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	90                   	nop
c0026163:	83 c4 0c             	add    esp,0xc
c0026166:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0026168 <ACPI::~ACPI()>:
c0026168:	83 ec 0c             	sub    esp,0xc
c002616b:	83 ec 0c             	sub    esp,0xc
c002616e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026172:	e8 cd ff ff ff       	call   c0026144 <ACPI::~ACPI()>
c0026177:	83 c4 10             	add    esp,0x10
c002617a:	83 ec 08             	sub    esp,0x8
c002617d:	68 68 22 00 00       	push   0x2268
c0026182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026186:	e8 c8 c3 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c002618b:	83 c4 10             	add    esp,0x10
c002618e:	83 c4 0c             	add    esp,0xc
c0026191:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0026192 <CPU::~CPU()>:
c0026192:	83 ec 0c             	sub    esp,0xc
c0026195:	ba 68 8c 02 c0       	mov    edx,0xc0028c68
c002619a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619e:	89 10                	mov    DWORD PTR [eax],edx
c00261a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a4:	83 ec 0c             	sub    esp,0xc
c00261a7:	50                   	push   eax
c00261a8:	e8 47 d7 fe ff       	call   c00138f4 <Device::~Device()>
c00261ad:	83 c4 10             	add    esp,0x10
c00261b0:	90                   	nop
c00261b1:	83 c4 0c             	add    esp,0xc
c00261b4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00261b6 <CPU::~CPU()>:
c00261b6:	83 ec 0c             	sub    esp,0xc
c00261b9:	83 ec 0c             	sub    esp,0xc
c00261bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261c0:	e8 cd ff ff ff       	call   c0026192 <CPU::~CPU()>
c00261c5:	83 c4 10             	add    esp,0x10
c00261c8:	83 ec 08             	sub    esp,0x8
c00261cb:	68 98 11 00 00       	push   0x1198
c00261d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261d4:	e8 7a c3 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00261d9:	83 c4 10             	add    esp,0x10
c00261dc:	83 c4 0c             	add    esp,0xc
c00261df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00261e0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00261e0:	90                   	nop
c00261e1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00261e2 <ThreadControlBlock::ThreadControlBlock()>:
c00261e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00261e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00261ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00261f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00261f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00261fc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0026203:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026207:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002620e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026212:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0026216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002621a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002621e:	90                   	nop
c002621f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0026220 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0026220:	83 ec 0c             	sub    esp,0xc
c0026223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026227:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002622d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026231:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026247:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002624d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026251:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002625c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026263:	83 ec 0c             	sub    esp,0xc
c0026266:	68 a6 78 02 c0       	push   0xc00278a6
c002626b:	e8 c3 c3 fe ff       	call   c0012633 <Dbg::kprintf(char const*, ...)>
c0026270:	83 c4 10             	add    esp,0x10
c0026273:	90                   	nop
c0026274:	83 c4 0c             	add    esp,0xc
c0026277:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0026278 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0026278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002627c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002627f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0026280 <Vm::_FPUState::_FPUState()>:
c0026280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026284:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002628b:	90                   	nop
c002628c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002628e <PCI::~PCI()>:
c002628e:	83 ec 0c             	sub    esp,0xc
c0026291:	ba 5c 99 02 c0       	mov    edx,0xc002995c
c0026296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629a:	89 10                	mov    DWORD PTR [eax],edx
c002629c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a0:	83 ec 0c             	sub    esp,0xc
c00262a3:	50                   	push   eax
c00262a4:	e8 5b d0 fe ff       	call   c0013304 <Bus::~Bus()>
c00262a9:	83 c4 10             	add    esp,0x10
c00262ac:	90                   	nop
c00262ad:	83 c4 0c             	add    esp,0xc
c00262b0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00262b2 <PCI::~PCI()>:
c00262b2:	83 ec 0c             	sub    esp,0xc
c00262b5:	83 ec 0c             	sub    esp,0xc
c00262b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262bc:	e8 cd ff ff ff       	call   c002628e <PCI::~PCI()>
c00262c1:	83 c4 10             	add    esp,0x10
c00262c4:	83 ec 08             	sub    esp,0x8
c00262c7:	68 58 01 00 00       	push   0x158
c00262cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262d0:	e8 7e c2 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00262d5:	83 c4 10             	add    esp,0x10
c00262d8:	83 c4 0c             	add    esp,0xc
c00262db:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00262dc <IDE::~IDE()>:
c00262dc:	83 ec 0c             	sub    esp,0xc
c00262df:	ba c0 9b 02 c0       	mov    edx,0xc0029bc0
c00262e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e8:	89 10                	mov    DWORD PTR [eax],edx
c00262ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ee:	83 ec 0c             	sub    esp,0xc
c00262f1:	50                   	push   eax
c00262f2:	e8 ed da fe ff       	call   c0013de4 <HardDiskController::~HardDiskController()>
c00262f7:	83 c4 10             	add    esp,0x10
c00262fa:	90                   	nop
c00262fb:	83 c4 0c             	add    esp,0xc
c00262fe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0026300 <IDE::~IDE()>:
c0026300:	83 ec 0c             	sub    esp,0xc
c0026303:	83 ec 0c             	sub    esp,0xc
c0026306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002630a:	e8 cd ff ff ff       	call   c00262dc <IDE::~IDE()>
c002630f:	83 c4 10             	add    esp,0x10
c0026312:	83 ec 08             	sub    esp,0x8
c0026315:	68 70 02 00 00       	push   0x270
c002631a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002631e:	e8 30 c2 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0026323:	83 c4 10             	add    esp,0x10
c0026326:	83 c4 0c             	add    esp,0xc
c0026329:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002632a <SATABus::~SATABus()>:
c002632a:	83 ec 0c             	sub    esp,0xc
c002632d:	ba 3c 9c 02 c0       	mov    edx,0xc0029c3c
c0026332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026336:	89 10                	mov    DWORD PTR [eax],edx
c0026338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633c:	83 ec 0c             	sub    esp,0xc
c002633f:	50                   	push   eax
c0026340:	e8 9f da fe ff       	call   c0013de4 <HardDiskController::~HardDiskController()>
c0026345:	83 c4 10             	add    esp,0x10
c0026348:	90                   	nop
c0026349:	83 c4 0c             	add    esp,0xc
c002634c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002634e <SATABus::~SATABus()>:
c002634e:	83 ec 0c             	sub    esp,0xc
c0026351:	83 ec 0c             	sub    esp,0xc
c0026354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026358:	e8 cd ff ff ff       	call   c002632a <SATABus::~SATABus()>
c002635d:	83 c4 10             	add    esp,0x10
c0026360:	83 ec 08             	sub    esp,0x8
c0026363:	68 5c 01 00 00       	push   0x15c
c0026368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002636c:	e8 e2 c1 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0026371:	83 c4 10             	add    esp,0x10
c0026374:	83 c4 0c             	add    esp,0xc
c0026377:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0026378 <ATA::~ATA()>:
c0026378:	83 ec 0c             	sub    esp,0xc
c002637b:	ba 8c 9c 02 c0       	mov    edx,0xc0029c8c
c0026380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026384:	89 10                	mov    DWORD PTR [eax],edx
c0026386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638a:	83 ec 0c             	sub    esp,0xc
c002638d:	50                   	push   eax
c002638e:	e8 2f db fe ff       	call   c0013ec2 <PhysicalDisk::~PhysicalDisk()>
c0026393:	83 c4 10             	add    esp,0x10
c0026396:	90                   	nop
c0026397:	83 c4 0c             	add    esp,0xc
c002639a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002639c <ATA::~ATA()>:
c002639c:	83 ec 0c             	sub    esp,0xc
c002639f:	83 ec 0c             	sub    esp,0xc
c00263a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263a6:	e8 cd ff ff ff       	call   c0026378 <ATA::~ATA()>
c00263ab:	83 c4 10             	add    esp,0x10
c00263ae:	83 ec 08             	sub    esp,0x8
c00263b1:	68 7c 01 00 00       	push   0x17c
c00263b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263ba:	e8 94 c1 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00263bf:	83 c4 10             	add    esp,0x10
c00263c2:	83 c4 0c             	add    esp,0xc
c00263c5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00263c6 <ATAPI::~ATAPI()>:
c00263c6:	83 ec 0c             	sub    esp,0xc
c00263c9:	ba f8 9c 02 c0       	mov    edx,0xc0029cf8
c00263ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d2:	89 10                	mov    DWORD PTR [eax],edx
c00263d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d8:	83 ec 0c             	sub    esp,0xc
c00263db:	50                   	push   eax
c00263dc:	e8 e1 da fe ff       	call   c0013ec2 <PhysicalDisk::~PhysicalDisk()>
c00263e1:	83 c4 10             	add    esp,0x10
c00263e4:	90                   	nop
c00263e5:	83 c4 0c             	add    esp,0xc
c00263e8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00263ea <ATAPI::~ATAPI()>:
c00263ea:	83 ec 0c             	sub    esp,0xc
c00263ed:	83 ec 0c             	sub    esp,0xc
c00263f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263f4:	e8 cd ff ff ff       	call   c00263c6 <ATAPI::~ATAPI()>
c00263f9:	83 c4 10             	add    esp,0x10
c00263fc:	83 ec 08             	sub    esp,0x8
c00263ff:	68 80 01 00 00       	push   0x180
c0026404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026408:	e8 46 c1 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c002640d:	83 c4 10             	add    esp,0x10
c0026410:	83 c4 0c             	add    esp,0xc
c0026413:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0026414 <AVX::~AVX()>:
c0026414:	83 ec 0c             	sub    esp,0xc
c0026417:	ba 34 9d 02 c0       	mov    edx,0xc0029d34
c002641c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026420:	89 10                	mov    DWORD PTR [eax],edx
c0026422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026426:	83 ec 0c             	sub    esp,0xc
c0026429:	50                   	push   eax
c002642a:	e8 17 db fe ff       	call   c0013f46 <FPU::~FPU()>
c002642f:	83 c4 10             	add    esp,0x10
c0026432:	90                   	nop
c0026433:	83 c4 0c             	add    esp,0xc
c0026436:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0026438 <AVX::~AVX()>:
c0026438:	83 ec 0c             	sub    esp,0xc
c002643b:	83 ec 0c             	sub    esp,0xc
c002643e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026442:	e8 cd ff ff ff       	call   c0026414 <AVX::~AVX()>
c0026447:	83 c4 10             	add    esp,0x10
c002644a:	83 ec 08             	sub    esp,0x8
c002644d:	68 58 01 00 00       	push   0x158
c0026452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026456:	e8 f8 c0 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c002645b:	83 c4 10             	add    esp,0x10
c002645e:	83 c4 0c             	add    esp,0xc
c0026461:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0026462 <MMX::~MMX()>:
c0026462:	83 ec 0c             	sub    esp,0xc
c0026465:	ba 74 9d 02 c0       	mov    edx,0xc0029d74
c002646a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002646e:	89 10                	mov    DWORD PTR [eax],edx
c0026470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026474:	83 ec 0c             	sub    esp,0xc
c0026477:	50                   	push   eax
c0026478:	e8 c9 da fe ff       	call   c0013f46 <FPU::~FPU()>
c002647d:	83 c4 10             	add    esp,0x10
c0026480:	90                   	nop
c0026481:	83 c4 0c             	add    esp,0xc
c0026484:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0026486 <MMX::~MMX()>:
c0026486:	83 ec 0c             	sub    esp,0xc
c0026489:	83 ec 0c             	sub    esp,0xc
c002648c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026490:	e8 cd ff ff ff       	call   c0026462 <MMX::~MMX()>
c0026495:	83 c4 10             	add    esp,0x10
c0026498:	83 ec 08             	sub    esp,0x8
c002649b:	68 58 01 00 00       	push   0x158
c00264a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264a4:	e8 aa c0 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00264a9:	83 c4 10             	add    esp,0x10
c00264ac:	83 c4 0c             	add    esp,0xc
c00264af:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00264b0 <SSE::~SSE()>:
c00264b0:	83 ec 0c             	sub    esp,0xc
c00264b3:	ba b4 9d 02 c0       	mov    edx,0xc0029db4
c00264b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bc:	89 10                	mov    DWORD PTR [eax],edx
c00264be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c2:	83 ec 0c             	sub    esp,0xc
c00264c5:	50                   	push   eax
c00264c6:	e8 7b da fe ff       	call   c0013f46 <FPU::~FPU()>
c00264cb:	83 c4 10             	add    esp,0x10
c00264ce:	90                   	nop
c00264cf:	83 c4 0c             	add    esp,0xc
c00264d2:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00264d4 <SSE::~SSE()>:
c00264d4:	83 ec 0c             	sub    esp,0xc
c00264d7:	83 ec 0c             	sub    esp,0xc
c00264da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264de:	e8 cd ff ff ff       	call   c00264b0 <SSE::~SSE()>
c00264e3:	83 c4 10             	add    esp,0x10
c00264e6:	83 ec 08             	sub    esp,0x8
c00264e9:	68 58 01 00 00       	push   0x158
c00264ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264f2:	e8 5c c0 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00264f7:	83 c4 10             	add    esp,0x10
c00264fa:	83 c4 0c             	add    esp,0xc
c00264fd:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00264fe <x87::~x87()>:
c00264fe:	83 ec 0c             	sub    esp,0xc
c0026501:	ba f4 9d 02 c0       	mov    edx,0xc0029df4
c0026506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650a:	89 10                	mov    DWORD PTR [eax],edx
c002650c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026510:	83 ec 0c             	sub    esp,0xc
c0026513:	50                   	push   eax
c0026514:	e8 2d da fe ff       	call   c0013f46 <FPU::~FPU()>
c0026519:	83 c4 10             	add    esp,0x10
c002651c:	90                   	nop
c002651d:	83 c4 0c             	add    esp,0xc
c0026520:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0026522 <x87::~x87()>:
c0026522:	83 ec 0c             	sub    esp,0xc
c0026525:	83 ec 0c             	sub    esp,0xc
c0026528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002652c:	e8 cd ff ff ff       	call   c00264fe <x87::~x87()>
c0026531:	83 c4 10             	add    esp,0x10
c0026534:	83 ec 08             	sub    esp,0x8
c0026537:	68 58 01 00 00       	push   0x158
c002653c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026540:	e8 0e c0 fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0026545:	83 c4 10             	add    esp,0x10
c0026548:	83 c4 0c             	add    esp,0xc
c002654b:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002654c <IOAPIC::~IOAPIC()>:
c002654c:	83 ec 0c             	sub    esp,0xc
c002654f:	ba 4c 9f 02 c0       	mov    edx,0xc0029f4c
c0026554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026558:	89 10                	mov    DWORD PTR [eax],edx
c002655a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002655e:	83 ec 0c             	sub    esp,0xc
c0026561:	50                   	push   eax
c0026562:	e8 8d d3 fe ff       	call   c00138f4 <Device::~Device()>
c0026567:	83 c4 10             	add    esp,0x10
c002656a:	90                   	nop
c002656b:	83 c4 0c             	add    esp,0xc
c002656e:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0026570 <IOAPIC::~IOAPIC()>:
c0026570:	83 ec 0c             	sub    esp,0xc
c0026573:	83 ec 0c             	sub    esp,0xc
c0026576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002657a:	e8 cd ff ff ff       	call   c002654c <IOAPIC::~IOAPIC()>
c002657f:	83 c4 10             	add    esp,0x10
c0026582:	83 ec 08             	sub    esp,0x8
c0026585:	68 68 01 00 00       	push   0x168
c002658a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002658e:	e8 c0 bf fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c0026593:	83 c4 10             	add    esp,0x10
c0026596:	83 c4 0c             	add    esp,0xc
c0026599:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c002659a <APIC::~APIC()>:
c002659a:	83 ec 0c             	sub    esp,0xc
c002659d:	ba 04 9f 02 c0       	mov    edx,0xc0029f04
c00265a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a6:	89 10                	mov    DWORD PTR [eax],edx
c00265a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ac:	83 ec 0c             	sub    esp,0xc
c00265af:	50                   	push   eax
c00265b0:	e8 5b de fe ff       	call   c0014410 <InterruptController::~InterruptController()>
c00265b5:	83 c4 10             	add    esp,0x10
c00265b8:	90                   	nop
c00265b9:	83 c4 0c             	add    esp,0xc
c00265bc:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00265be <APIC::~APIC()>:
c00265be:	83 ec 0c             	sub    esp,0xc
c00265c1:	83 ec 0c             	sub    esp,0xc
c00265c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265c8:	e8 cd ff ff ff       	call   c002659a <APIC::~APIC()>
c00265cd:	83 c4 10             	add    esp,0x10
c00265d0:	83 ec 08             	sub    esp,0x8
c00265d3:	68 58 21 00 00       	push   0x2158
c00265d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265dc:	e8 72 bf fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00265e1:	83 c4 10             	add    esp,0x10
c00265e4:	83 c4 0c             	add    esp,0xc
c00265e7:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00265e8 <PIC::~PIC()>:
c00265e8:	83 ec 0c             	sub    esp,0xc
c00265eb:	ba 9c 9f 02 c0       	mov    edx,0xc0029f9c
c00265f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f4:	89 10                	mov    DWORD PTR [eax],edx
c00265f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265fa:	83 ec 0c             	sub    esp,0xc
c00265fd:	50                   	push   eax
c00265fe:	e8 0d de fe ff       	call   c0014410 <InterruptController::~InterruptController()>
c0026603:	83 c4 10             	add    esp,0x10
c0026606:	90                   	nop
c0026607:	83 c4 0c             	add    esp,0xc
c002660a:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c002660c <PIC::~PIC()>:
c002660c:	83 ec 0c             	sub    esp,0xc
c002660f:	83 ec 0c             	sub    esp,0xc
c0026612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026616:	e8 cd ff ff ff       	call   c00265e8 <PIC::~PIC()>
c002661b:	83 c4 10             	add    esp,0x10
c002661e:	83 ec 08             	sub    esp,0x8
c0026621:	68 58 21 00 00       	push   0x2158
c0026626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002662a:	e8 24 bf fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c002662f:	83 c4 10             	add    esp,0x10
c0026632:	83 c4 0c             	add    esp,0xc
c0026635:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0026636 <APICTimer::~APICTimer()>:
c0026636:	83 ec 0c             	sub    esp,0xc
c0026639:	ba f0 9f 02 c0       	mov    edx,0xc0029ff0
c002663e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026642:	89 10                	mov    DWORD PTR [eax],edx
c0026644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026648:	83 ec 0c             	sub    esp,0xc
c002664b:	50                   	push   eax
c002664c:	e8 c1 fa fe ff       	call   c0016112 <Timer::~Timer()>
c0026651:	83 c4 10             	add    esp,0x10
c0026654:	90                   	nop
c0026655:	83 c4 0c             	add    esp,0xc
c0026658:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002665a <APICTimer::~APICTimer()>:
c002665a:	83 ec 0c             	sub    esp,0xc
c002665d:	83 ec 0c             	sub    esp,0xc
c0026660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026664:	e8 cd ff ff ff       	call   c0026636 <APICTimer::~APICTimer()>
c0026669:	83 c4 10             	add    esp,0x10
c002666c:	83 ec 08             	sub    esp,0x8
c002666f:	68 60 01 00 00       	push   0x160
c0026674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026678:	e8 d6 be fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c002667d:	83 c4 10             	add    esp,0x10
c0026680:	83 c4 0c             	add    esp,0xc
c0026683:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0026684 <PIT::~PIT()>:
c0026684:	83 ec 0c             	sub    esp,0xc
c0026687:	ba 40 a0 02 c0       	mov    edx,0xc002a040
c002668c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026690:	89 10                	mov    DWORD PTR [eax],edx
c0026692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026696:	83 ec 0c             	sub    esp,0xc
c0026699:	50                   	push   eax
c002669a:	e8 73 fa fe ff       	call   c0016112 <Timer::~Timer()>
c002669f:	83 c4 10             	add    esp,0x10
c00266a2:	90                   	nop
c00266a3:	83 c4 0c             	add    esp,0xc
c00266a6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00266a8 <PIT::~PIT()>:
c00266a8:	83 ec 0c             	sub    esp,0xc
c00266ab:	83 ec 0c             	sub    esp,0xc
c00266ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00266b2:	e8 cd ff ff ff       	call   c0026684 <PIT::~PIT()>
c00266b7:	83 c4 10             	add    esp,0x10
c00266ba:	83 ec 08             	sub    esp,0x8
c00266bd:	68 5c 01 00 00       	push   0x15c
c00266c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00266c6:	e8 88 be fe ff       	call   c0012553 <operator delete(void*, unsigned long)>
c00266cb:	83 c4 10             	add    esp,0x10
c00266ce:	83 c4 0c             	add    esp,0xc
c00266d1:	c3                   	ret    
